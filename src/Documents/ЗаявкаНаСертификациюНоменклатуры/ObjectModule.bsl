Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Формирование печатных форм для заявки на внутреннюю сертификацию
//
Функция ПечатьИзвещения(ПарамОбъект) Экспорт

	ТабДок = Новый ТабличныйДокумент;
	
	Если ПарамОбъект = "ИзвещениеПродукция" Тогда
		Макет = ПолучитьМакет("ИзвещениеПродукция");
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		Секция = Макет.ПолучитьОбласть("Основа");
		Секция.Параметры.Подразделение = Подразделение;
		Секция.Параметры.Организация = Организация;
		Секция.Параметры.НомерДок = Номер;
		Секция.Параметры.ДатаДок = Формат(Дата,"ДЛФ = ДД");
		Секция.Параметры.Номенклатура = Номенклатура.НаименованиеПолное;
		Секция.Параметры.НоменклатураРасшифровка = Номенклатура;
		Секция.Параметры.СерияНоменклатуры = СерияНоменклатуры;
		КоличествоПоСерии = 0;
		
		Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
			КоличествоПоСерии = УправлениеСертификациейНоменклатуры.ПолучитьОбщееКоличествоПоступленияПоСериям(СерияНоменклатуры);
		КонецЕсли;
		
		Секция.Параметры.Количество = КоличествоПоСерии;  
		Секция.Параметры.НормативныйДокумент = НормативныйДокумент;
	Иначе
		Макет = ПолучитьМакет("ИзвещениеСырьеМатериалы");
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		Секция = Макет.ПолучитьОбласть("Основа");
		Секция.Параметры.Организация = Организация;
		Секция.Параметры.НомерДок = Номер;
		Секция.Параметры.ДатаДок = Формат(Дата,"ДЛФ = 'ДД';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)) + " " + Формат(Дата,"ДФ = ЧЧ") 
		+НСтр("ru=' час. ';uk=' год. '",КодЯзыкаПечать)+ Формат(Дата,"ДФ = мм") + НСтр("ru=' мин. ';uk=' хв. '",КодЯзыкаПечать);
		Секция.Параметры.Склад = Склад;
		Секция.Параметры.Номенклатура = Номенклатура.НаименованиеПолное; 
		Секция.Параметры.НоменклатураРасшифровка = Номенклатура;
		Секция.Параметры.СерияНоменклатуры = СерияНоменклатуры;
		КоличествоПоСерии = 0;
		
		Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
			КоличествоПоСерии = УправлениеСертификациейНоменклатуры.ПолучитьОбщееКоличествоПоступленияПоСериям(СерияНоменклатуры);
		КонецЕсли;
		
		Секция.Параметры.Количество = КоличествоПоСерии;  
		Секция.Параметры.Масса = Строка(КоличествоПоСерии * Номенклатура.ЕдиницаХраненияОстатков.Вес) + НСтр("ru=' кг. (';uk=' кг. ('",КодЯзыкаПечать) + 
		Строка(КоличествоПоСерии * Номенклатура.ЕдиницаХраненияОстатков.Объем) + НСтр("ru=' куб. метров) ';uk=' куб. метрів) '",КодЯзыкаПечать);
		
		Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
			Секция.Параметры.Поставщик = УправлениеСертификациейНоменклатуры.ПолучитьПоставщикаСерии(СерияНоменклатуры);
		Иначе
			Секция.Параметры.Поставщик = "";
		КонецЕсли;
		
		Секция.Параметры.Изготовитель = "";
	КонецЕсли;
	ТабДок.Вывести(Секция);
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьИзвещения()

// Формирование печатной формы заявки на внешнюю сертификацию
//
Функция ПечатьЗаявкиНаСертификацию() Экспорт

	ТабДок = Новый ТабличныйДокумент;
	Макет  = ПолучитьМакет("ЗаявкаНаСертификациюНоменклатуры");
	Секция = Макет.ПолучитьОбласть("Основа");
	СведенияОрганПоСертификации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ОрганПоСертификации, Дата);
	Секция.Параметры.ИнформацияОрганПоСертификации = ""+СведенияОрганПоСертификации.ПолноеНаименование + Символы.ПС + СведенияОрганПоСертификации.ЮридическийАдрес;
	
	СведенияОрганизация = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	Секция.Параметры.Организация = СведенияОрганизация.ПолноеНаименование;
	
	Секция.Параметры.АдресИКодЕДРПОУ = ""+СведенияОрганизация.ЮридическийАдрес + ", код за ЄДРПОУ " + УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОрганизация);	
	
	ФильтрОтбораИнф = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо",Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Выборка = РегистрыСведений.ОтветственныеЛицаОрганизаций.Получить(Дата,ФильтрОтбораИнф);
	Секция.Параметры.Руководитель = Выборка.ФизическоеЛицо;
	
	Секция.Параметры.Продукция = Номенклатура;
	Секция.Параметры.НормативныйДокумент = НормативныйДокумент;
	Секция.Параметры.ДатаДок = Дата;
	ТабДок.Вывести(Секция);
	
	
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьЗаявкиНаСертификацию()	

// Выбор процедуры печати
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "ЗаявкаНаСертификациюНоменклатуры" Тогда
		ТабДокумент = ПечатьЗаявкиНаСертификацию();	
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 

	Иначе
		ТабДокумент = ПечатьИзвещения(ИмяМакета);
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	
КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.внутренняя Тогда
		
		Возврат Новый Структура("ИзвещениеПродукция,ИзвещениеСырьеМатериалы","Извещение на продукцию", "Извещение на материалы");
		
	Иначе
		Возврат Новый Структура("ЗаявкаНаСертификациюНоменклатуры","Заявка на сертификацию");
		
	КонецЕсли;

	

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена Номенклатура!", Отказ, Заголовок);
		
	Иначе
		
		Если НЕ Номенклатура.ТребуетсяВнешняяСертификация И НЕ Номенклатура.ТребуетсяВнутренняяСертификация Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры не требуется сертификация номенклатуры!", Отказ, Заголовок);
			
		ИначеЕсли НЕ Номенклатура.ТребуетсяВнешняяСертификация И ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.Внешняя Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры не требуется внешняя сертификация номенклатуры!", Отказ, Заголовок);
			
		ИначеЕсли НЕ Номенклатура.ТребуетсяВнутренняяСертификация И ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.Внутренняя Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры не требуется внутренняя сертификация номенклатуры!", Отказ, Заголовок);
			
		КонецЕсли;  
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена Серия номенклатуры!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Документ может вводится на основании Поступления товаров и услуг и Отчета производства за смену
// 
Процедура ОбработкаЗаполнения(Основание) Экспорт

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	
		Организация           = Основание.Организация;
		Подразделение         = Основание.Подразделение;
		ДокументОприходования = Основание.Ссылка;
		Склад                 = Основание.СкладОрдер;
	ИначеЕсли Метаданные.Документы.Найти("ОтчетПроизводстваЗаСмену") <> Неопределено И ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда	
		Организация           = Основание.Организация;
		Подразделение         = Основание.Подразделение;
		ДокументОприходования = Основание.Ссылка;
		Склад                 = Основание.Склад;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Устанавливает значения по умолчанию
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура обработки проведения проверяет корректность заполнения реквизитов документа
// Документ проводится по одному из двух регистров сведений ВнешняяСертификацияНоменклатуры или ВнутренняяСертификацияНоменклатуры
// в зависимости от вида операции
// 
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	НаборЗаписей = Движения.СертификацияНоменклатуры;
	Движение = НаборЗаписей.Добавить();
	Движение.Период = Дата;
	Движение.ВидСертификата = ?( ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.Внешняя,
											Перечисления.ВидыСертификацииНоменклатуры.ВнешняяСертификация,
											Перечисления.ВидыСертификацииНоменклатуры.ВнутренняяСертификация);
	Движение.СерияНоменклатуры     = СерияНоменклатуры;
	Движение.СостояниеСертификации = Перечисления.СостоянияСертификацииНоменклатуры.Заявка;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры


