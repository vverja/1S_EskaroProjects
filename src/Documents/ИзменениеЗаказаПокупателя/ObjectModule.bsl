Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчетаОрганизаций Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Для обеспечения работы глоб. процедур и функций.
Перем ВалютаДокумента Экспорт;

Перем мУчетнаяПолитика Экспорт;

Перем мМинимальныеЦены Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

//Проверяет необходимость расчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки() Экспорт

	Возврат Не Проведен И (мРассчитыватьАвтоматическиеСкидки = Неопределено Или мРассчитыватьАвтоматическиеСкидки);

КонецФункции

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИзменениеЗаказа.Номер,
	|	ИзменениеЗаказа.Дата,
	|	ИзменениеЗаказа.ЗаказПокупателя,
	|	ИзменениеЗаказа.ЗаказПокупателя.Представление КАК ПредставлениеЗаказа,
	|	ИзменениеЗаказа.ЗаказПокупателя.Контрагент КАК Получатель,
	|	ИзменениеЗаказа.ЗаказПокупателя.Организация КАК Поставщик,
	|	ИзменениеЗаказа.ЗаказПокупателя.Организация КАК Организация,
	|	ИзменениеЗаказа.СуммаДокумента,
	|	ИзменениеЗаказа.ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ИзменениеЗаказа.УчитыватьНДС,
	|	ИзменениеЗаказа.СуммаВключаетНДС,
	|	ИзменениеЗаказа.ЗаказПокупателя.ВидОперации КАК ВидОперации
	|ИЗ
	|	Документ.ИзменениеЗаказаПокупателя КАК ИзменениеЗаказа
	|ГДЕ
	|	ИзменениеЗаказа.Ссылка = &ТекущийДокумент";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Если НЕ ЗначениеЗаполнено(Шапка.ЗаказПокупателя) Тогда
		Сообщить("Не указан заказ покупателя");
		Возврат Неопределено;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Шапка.Организация) Тогда
		Сообщить("В документе основании не указана организация");
		Возврат Неопределено;
	КонецЕсли;
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзменениеЗаказаПокупателя_КорректировкаЗаказа";

	Макет = ПолучитьМакет("ИзменениеЗаказа");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Изменение заказа покупателя");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заказ");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	НазваниеДокумента = Шапка.ЗаказПокупателя.Метаданные().Представление();
	ОбластьМакета.Параметры.ПредставлениеЗаказа = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.ЗаказПокупателя, НазваниеДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличную часть
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("");

	ТекстЗапроса =
	"ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Артикул            КАК Артикул,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		ПроцентСкидкиНаценки + ПроцентАвтоматическихСкидок   КАК Скидка,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		NULL КАК Серия
	|ИЗ
	|	Документ.ИзменениеЗаказаПокупателя.Товары КАК ТабЧасть
	|
	|ГДЕ
	|	ТабЧасть.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		2 КАК НомерТЧ,
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Артикул            КАК Артикул,
	|		Номенклатура.Код                КАК Код,
	|		" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		ПроцентСкидкиНаценки + ПроцентАвтоматическихСкидок КАК Скидка,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		""""   КАК Характеристика,
	|		NULL КАК Серия
	|ИЗ
	|	Документ.ИзменениеЗаказаПокупателя.Услуги КАК ТабЧасть
	|
	|ГДЕ
	|	ТабЧасть.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		3 КАК НомерТЧ,
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Артикул            КАК Артикул,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		0   КАК Скидка,
	|		Цена,
	|		Сумма,
	|		0 КАК СуммаНДС,
	|		"""" КАК Характеристика,
	|		NULL КАК Серия
	|ИЗ
	|	Документ.ИзменениеЗаказаПокупателя.ВозвратнаяТара КАК ТабЧасть
	|
	|ГДЕ
	|	ТабЧасть.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();
	
	ЕстьСтроки = Ложь;
	
	// Определим наличие скидок
	ЕстьСкидки = Ложь;	
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если ВыборкаСтрокТовары.Скидка <> 0 Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	ВыборкаСтрокТовары.Сбросить();
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	Всего            = 0;
	ВсегоСкидок      = 0;
	ВсегоНДС         = 0;
	ВсегоПозиций     = 0;
	ШиринаУжеУвеличина = Ложь;
	ЕстьСтроки = Ложь;
	НомерПоПорядку = 0;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ВсегоПозиций = ВсегоПозиций + 1;
		
		НомерПоПорядку = НомерПоПорядку + 1;
		
		Если НЕ ЕстьСтроки Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			ОбластьКолонкаТовар = Макет.Область("Товар");
			Если Не ВыводитьКоды Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
				Макет.Область("КолонкаКодов").ШиринаКолонки;
			КонецЕсли;
			
			Если НЕ (ЕстьСкидки ИЛИ ШиринаУжеУвеличина) Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
				Макет.Область("СуммаБезСкидки").ШиринаКолонки +
				Макет.Область("СуммаСкидки").ШиринаКолонки;
			КонецЕсли;
			ШиринаУжеУвеличина = Истина;
			ЕстьСтроки = Истина;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		
		ОбластьНомера.Параметры.НомерПоПорядку = НомерПоПорядку;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);

		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Всего          = Всего       + ВыборкаСтрокТовары.Сумма;
		ВсегоНДС       = ВсегоНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
	КонецЦикла;
	
	// Общий итог
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = Всего + ВсегоСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Всего);
	ТабДокумент.Присоединить(ОбластьСуммы);

	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ВсегоНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Всего + ?(Шапка.СуммаВключаетНДС, 0, ВсегоНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВсегоПозиций + 
		", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ИзменениеЗаказа"  Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ИзменениеЗаказа","Изменение заказа покупателя");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет добавление строки в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть в которую добавляется строка;
//  Выборка        - запрос, спозиционированный на строке;
//  Количество     - количество в добавляемой строке;
//	Режим          - режим размещения: "Резерв" - по складу, "Заказ" - по заказу, "" - без размещения
//
Процедура ДобавитьСтрокуТабличнойЧасти(ТабличнаяЧасть, Выборка, Количество, Размещение = Неопределено, СерияНоменклатуры = Неопределено)

	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда

		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.Количество           = Количество * Выборка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
													/ СтрокаТабличнойЧасти.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок = Выборка.ПроцентАвтоматическихСкидок;
		СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Выборка.УсловиеАвтоматическойСкидки;
		СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;

		СтрокаТабличнойЧасти.Цена =  Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Цена,
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										ЗаказПокупателя.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.Размещение                 = Размещение;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = СерияНоменклатуры;
		
	Иначе // ТабличнаяЧасть = ВозвратнаяТара

		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество   = Количество;
		СтрокаТабличнойЧасти.Размещение   = Размещение;
		СтрокаТабличнойЧасти.Цена         = Выборка.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуТабличнойЧасти()

// Возвращает текст запроса, содержащий состав табличной части 
// из всех документов, изменяющих заказ и сам заказ
//
Функция ПолучитьТекстЗапросаЗаказСУчетомИзменений(ИмяТабличнойЧасти, Запрос)
	
	Если ЭтоНовый() Тогда
		УсловиеДата       = "И ДокТабЧасть.Ссылка.Дата > &ДатаАктуальногоЗаказа";
		ПолучитьПоследнийЗаказПокупателянаДату = Неопределено;
	Иначе
		УсловиеДата       = "И ДокТабЧасть.Ссылка.Дата МЕЖДУ &ДатаАктуальногоЗаказа И &ДатаДокумента";
		ПолучитьПоследнийЗаказПокупателянаДату = Дата;
		Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	КонецЕсли;
	
	СтруктураАктуальныйЗаказ = УправлениеЗаказами.ПолучитьПоследнийЗаказПокупателяИлиИзменениеЗаказаПокупателя(ЗаказПокупателя, ПолучитьПоследнийЗаказПокупателянаДату);
	
	Запрос.УстановитьПараметр("ДатаАктуальногоЗаказа", СтруктураАктуальныйЗаказ.ДатаЗаказа);
	Запрос.УстановитьПараметр("АктуальныйЗаказ",       СтруктураАктуальныйЗаказ.Заказ);
	
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ДокТабЧасть", "Содержание");
	КонецЕсли;
	
	ТекстЗапроса	= 
		"ВЫБРАТЬ
		|	  МИНИМУМ(ПолныйЗаказ.НомерСтроки) КАК НомерСтроки
		|	, ПолныйЗаказ.Номенклатура КАК Номенклатура
		|	, ПолныйЗаказ.Цена КАК Цена
		|	" + ?(ИмяТабличнойЧасти = "Товары",	
			", ПолныйЗаказ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|	, ПолныйЗаказ.ЕдиницаИзмерения КАК ЕдиницаИзмерения", "") + "
		|	" + ?(ИмяТабличнойЧасти = "Товары" ИЛИ ИмяТабличнойЧасти = "Услуги", 
			", ПолныйЗаказ.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
		|	, ПолныйЗаказ.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок
		|	, ПолныйЗаказ.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки
		|	, ПолныйЗаказ.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки
		|	, ПолныйЗаказ.СтавкаНДС КАК СтавкаНДС", "") + "
		|	" + ?(ИмяТабличнойЧасти = "Услуги",	", МАКСИМУМ(ПолныйЗаказ.Содержание) КАК Содержание", "") + "
		|ПОМЕСТИТЬ ЗаказСУчетомИзменений
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДокТабЧасть.НомерСтроки КАК НомерСтроки
		|		, ДокТабЧасть.Номенклатура КАК Номенклатура
		|		, ДокТабЧасть.Цена КАК Цена
		|		" + ?(ИмяТабличнойЧасти = "Товары",	
				", ДокТабЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|		, ДокТабЧасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения", "") + "
		|		" + ?(ИмяТабличнойЧасти = "Товары" ИЛИ ИмяТабличнойЧасти = "Услуги", 
				", ДокТабЧасть.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
		|		, ДокТабЧасть.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок
		|		, ДокТабЧасть.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки
		|		, ДокТабЧасть.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки
		|		, ДокТабЧасть.СтавкаНДС КАК СтавкаНДС", "") + "
		|		" + ?(ИмяТабличнойЧасти = "Услуги",	", " + СтрокаВыборкиПоляСодержания, "") + "
		|	ИЗ
		|		Документ."+ СтруктураАктуальныйЗаказ.ИмяЗаказа + "." + ИмяТабличнойЧасти + " КАК ДокТабЧасть
		|	ГДЕ
		|		ДокТабЧасть.Ссылка = &АктуальныйЗаказ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		// Для корректировок номер строки увеличивается, чтобы добавляемые позиции были последними
		|		(9999 + ДокТабЧасть.НомерСтроки) КАК НомерСтроки
		|		, ДокТабЧасть.Номенклатура КАК Номенклатура
		|		, ДокТабЧасть.Цена КАК Цена
		|		" + ?(ИмяТабличнойЧасти = "Товары",	
				", ДокТабЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|		, ДокТабЧасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения", "") + "
		|		" + ?(ИмяТабличнойЧасти = "Товары" ИЛИ ИмяТабличнойЧасти = "Услуги", 
				", ДокТабЧасть.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
		|		, ДокТабЧасть.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок
		|		, ДокТабЧасть.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки
		|		, ДокТабЧасть.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки
		|		, ДокТабЧасть.СтавкаНДС КАК СтавкаНДС", "") + "
		|		" + ?(ИмяТабличнойЧасти = "Услуги",	", " + СтрокаВыборкиПоляСодержания, "") + "
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя." + ИмяТабличнойЧасти + " КАК ДокТабЧасть
		|	ГДЕ
		|		ДокТабЧасть.Ссылка.ЗаказПокупателя = &ЗаказПокупателя
		|		И ДокТабЧасть.Ссылка.Проведен
		|		" + УсловиеДата + "
		|)	КАК ПолныйЗаказ
		|СГРУППИРОВАТЬ ПО
		|	ПолныйЗаказ.Номенклатура
		|	, ПолныйЗаказ.Цена
		|	" + ?(ИмяТабличнойЧасти = "Товары",	
			", ПолныйЗаказ.ХарактеристикаНоменклатуры
		|	, ПолныйЗаказ.ЕдиницаИзмерения", "") + "
		|	" + ?(ИмяТабличнойЧасти = "Товары" ИЛИ ИмяТабличнойЧасти = "Услуги", 
			", ПолныйЗаказ.ПроцентСкидкиНаценки
		|	, ПолныйЗаказ.ПроцентАвтоматическихСкидок
		|	, ПолныйЗаказ.УсловиеАвтоматическойСкидки
		|	, ПолныйЗаказ.ЗначениеУсловияАвтоматическойСкидки
		|	, ПолныйЗаказ.СтавкаНДС", "");
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросаЗаказСУчетомИзменений
 
// Заполняет табличную часть ТАРА по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТаруПоОстаткам() Экспорт

	Если НЕ ЗаказПокупателя.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	РазмещениеЗаказовПокупателейОстатки.Номенклатура               КАК Номенклатура,
	|	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику            КАК Размещение,
	|	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток          КАК КоличествоОстатокПоРазмещению
	|ИЗ
	|   РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ЗаказПокупателя 
	|                                                          И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ТоварыВРезервеНаСкладахОстатки.Номенклатура                    КАК Номенклатура,
	|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
	|	ТоварыВРезервеНаСкладахОстатки.Склад                           КАК Размещение,
	|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток               КАК КоличествоОстатокПоРазмещению
	|ИЗ
	|   РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеНаСкладахОстатки
	|";
	
	Запрос.УстановитьПараметр("ТоварТара",       Перечисления.ТоварТара.Тара);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ДатаОстатков",    ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ТаблицаРазмещений = Запрос.Выполнить().Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапросаЗаказСУчетомИзменений("ВозвратнаяТара", Запрос) + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказСУчетомИзменений.НомерСтроки КАК НомерСтроки,
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.Номенклатура.ЕдиницаХраненияОстатков КАК Единица,
	|	РегЗаказы.КоличествоОстаток КАК КолОстаток,
	|	РегЗаказы.СуммаУпрОстаток КАК СуммаУпр,
	|	РегЗаказы.Цена
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, 
	|					ДоговорКонтрагента = &Договор
	|					И СтатусПартии = &Статус 
	|					И ЗаказПокупателя = &ЗаказПокупателя) КАК РегЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказСУчетомИзменений КАК ЗаказСУчетомИзменений
	|		ПО (РегЗаказы.ЗаказПокупателя = &ЗаказПокупателя)
	|			И (РегЗаказы.ДоговорКонтрагента = &Договор)
	|			И (РегЗаказы.СтатусПартии = &Статус)
	|			И (ЗаказСУчетомИзменений.Номенклатура = РегЗаказы.Номенклатура)
	|			И (ЗаказСУчетомИзменений.Цена = РегЗаказы.Цена)
	|
	|ГДЕ
	|	НЕ РегЗаказы.Номенклатура.Услуга И
	|	РегЗаказы.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Договор", ЗаказПокупателя.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	СтруктураПоиска  = Новый Структура;
	
	Пока Выборка.Следующий() Цикл
		
		КолвоПоЗаказу = Выборка.КолОстаток;
		
		СтруктураПоиска.Вставить( "Номенклатура", Выборка.Номенклатура);
		
		НайденныеСтроки = ТаблицаРазмещений.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРазмещения ИЗ НайденныеСтроки Цикл
			КолвоСпис = Мин(КолвоПоЗаказу, СтрокаРазмещения.КоличествоОстатокПоРазмещению);
			Если КолвоСпис >= 0 Тогда
				КолвоПоЗаказу = КолвоПоЗаказу - КолвоСпис;
				ДобавитьСтрокуТабличнойЧасти( ВозвратнаяТара, Выборка, КолвоСпис, СтрокаРазмещения.Размещение);
				СтрокаРазмещения.КоличествоОстатокПоРазмещению = СтрокаРазмещения.КоличествоОстатокПоРазмещению - КолвоСпис;
			КонецЕсли;
			Если КолвоПоЗаказу = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если КолвоПоЗаказу <> 0 Тогда
			ДобавитьСтрокуТабличнойЧасти( ВозвратнаяТара, Выборка, КолвоПоЗаказу);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаруПоОстаткам()

// Заполняет табличную часть "Товары" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТоварыПоОстаткам() Экспорт

	Если НЕ ЗаказПокупателя.Проведен Тогда
		Возврат;
	КонецЕсли; 
	
	ТоварТара = Перечисления.ТоварТара.Товар;
	ТабличнаяЧастьСтрока = "Товары";
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапросаЗаказСУчетомИзменений("Товары", Запрос) + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаказСУчетомИзменений.НомерСтроки) КАК НомерСтроки,
	|	РегЗаказы.Номенклатура КАК Номенклатура,
	|	РегЗаказы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РегЗаказы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	РегЗаказы.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	РегЗаказы.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|	РегЗаказы.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|	РегЗаказы.Цена КАК Цена,
	|	РегЗаказы.ЕдиницаИзмерения,
	|	РегЗаказы.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	СУММА(РегЗаказы.КоличествоОстаток) КАК КолОстаток,
	|	РегЗаказы.СтавкаНДС КАК СтавкаНДС,
	|	РегЗаказы.Номенклатура.Комплект КАК Комплект
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			&ДатаОстатков,
	|			ЗаказПокупателя = &ЗаказПокупателя
	|				И ДоговорКонтрагента = &Договор
	|				И СтатусПартии = &Статус
	|				И (НЕ Номенклатура.Услуга)) КАК РегЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказСУчетомИзменений КАК ЗаказСУчетомИзменений
	|		ПО (РегЗаказы.ЗаказПокупателя = &ЗаказПокупателя)
	|			И (РегЗаказы.ДоговорКонтрагента = &Договор)
	|			И (РегЗаказы.СтатусПартии = &Статус)
	|			И (ЗаказСУчетомИзменений.Номенклатура = РегЗаказы.Номенклатура)
	|			И (ЗаказСУчетомИзменений.ХарактеристикаНоменклатуры = РегЗаказы.ХарактеристикаНоменклатуры)
	|			И (ЗаказСУчетомИзменений.ПроцентСкидкиНаценки = РегЗаказы.ПроцентСкидкиНаценки)
	|			И (ЗаказСУчетомИзменений.ПроцентАвтоматическихСкидок = РегЗаказы.ПроцентАвтоматическихСкидок)
	|			И (ЗаказСУчетомИзменений.УсловиеАвтоматическойСкидки = РегЗаказы.УсловиеАвтоматическойСкидки)
	|			И (ЗаказСУчетомИзменений.ЗначениеУсловияАвтоматическойСкидки = РегЗаказы.ЗначениеУсловияАвтоматическойСкидки)
	|			И (ЗаказСУчетомИзменений.Цена = РегЗаказы.Цена)
	|			И (ЗаказСУчетомИзменений.ЕдиницаИзмерения = РегЗаказы.ЕдиницаИзмерения)
	|			И (ЗаказСУчетомИзменений.СтавкаНДС = РегЗаказы.СтавкаНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.ХарактеристикаНоменклатуры,
	|	РегЗаказы.ПроцентСкидкиНаценки,
	|	РегЗаказы.ПроцентАвтоматическихСкидок,
	|	РегЗаказы.УсловиеАвтоматическойСкидки,
	|	РегЗаказы.ЗначениеУсловияАвтоматическойСкидки,
	|	РегЗаказы.Цена,
	|	РегЗаказы.ЕдиницаИзмерения,
	|	РегЗаказы.ЕдиницаИзмерения.Коэффициент,
	|	РегЗаказы.СтавкаНДС,
	|	РегЗаказы.Номенклатура.Комплект
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Статус",  Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ТабОстатки = Запрос.Выполнить().Выгрузить();
	Запрос.МенеджерВременныхТаблиц.Закрыть();

	ТабОстатки.Колонки.Добавить("Единица");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмещениеЗаказовПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	NULL КАК СерияНоменклатуры,
	|	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику КАК Размещение,
	|	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КАК КоличествоОстатокПоРазмещению
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(
	|			&ДатаОстатков,
	|			ЗаказПокупателя = &ЗаказПокупателя
	|				И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВРезервеНаСкладахОстатки.Номенклатура,
	|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры,
	|	ТоварыВРезервеНаСкладахОстатки.Склад,
	|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеНаСкладахОстатки";
	
	Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
	
	ТаблицаРазмещений = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска  = Новый Структура;
	
	Для Каждого Выборка Из ТабОстатки Цикл
		
		КолвоПоЗаказу = Выборка.КолОстаток;
		Выборка.Единица = Выборка.Номенклатура.ЕдиницаХраненияОстатков;
		
		СтруктураПоиска.Вставить("Номенклатура",               Выборка.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
		
		НайденныеСтроки = ТаблицаРазмещений.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРазмещения ИЗ НайденныеСтроки Цикл
			КолвоСпис = Мин(КолвоПоЗаказу, СтрокаРазмещения.КоличествоОстатокПоРазмещению);
			Если КолвоСпис >= 0 Тогда
				КолвоПоЗаказу = КолвоПоЗаказу - КолвоСпис;
				ДобавитьСтрокуТабличнойЧасти(Товары, Выборка, КолвоСпис, СтрокаРазмещения.Размещение, СтрокаРазмещения.СерияНоменклатуры);
				СтрокаРазмещения.КоличествоОстатокПоРазмещению = СтрокаРазмещения.КоличествоОстатокПоРазмещению - КолвоСпис;
			КонецЕсли;
			Если КолвоПоЗаказу = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если КолвоПоЗаказу <> 0 Тогда
			ДобавитьСтрокуТабличнойЧасти( Товары, Выборка, КолвоПоЗаказу);
		КонецЕсли;

	КонецЦикла;
	
	ОбработкаТабличныхЧастей.ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ЗаказПокупателя, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ЗаполнитьТоварыПоОстаткам()

// Заполняет табличную часть "ВозвратнаяТара" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьУслугиПоОстаткам() Экспорт

	Если НЕ ЗаказПокупателя.Проведен Тогда
		Возврат;
	КонецЕсли; 
	
	СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапросаЗаказСУчетомИзменений("Услуги", Запрос) + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаказСУчетомИзменений.НомерСтроки) КАК НомерСтроки,
	|	МИНИМУМ(ЗаказСУчетомИзменений.Содержание) КАК Содержание,
	|	РегЗаказы.Номенклатура КАК Номенклатура,
	|	РегЗаказы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	РегЗаказы.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	РегЗаказы.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|	РегЗаказы.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|	РегЗаказы.Цена КАК Цена,
	|	СУММА(РегЗаказы.КоличествоОстаток) КАК КолОстаток,
	|	РегЗаказы.СтавкаНДС КАК СтавкаНДС,
	|	РегЗаказы.Номенклатура.Комплект КАК Комплект
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			&ДатаОстатков,
	|			ЗаказПокупателя = &ЗаказПокупателя
	|				И ДоговорКонтрагента = &Договор
	|				И СтатусПартии = &Статус
	|				И Номенклатура.Услуга) КАК РегЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказСУчетомИзменений КАК ЗаказСУчетомИзменений
	|		ПО (РегЗаказы.ЗаказПокупателя = &ЗаказПокупателя)
	|			И (РегЗаказы.ДоговорКонтрагента = &Договор)
	|			И (РегЗаказы.СтатусПартии = &Статус)
	|			И (ЗаказСУчетомИзменений.Номенклатура = РегЗаказы.Номенклатура)
	|			И (ЗаказСУчетомИзменений.ПроцентСкидкиНаценки = РегЗаказы.ПроцентСкидкиНаценки)
	|			И (ЗаказСУчетомИзменений.ПроцентАвтоматическихСкидок = РегЗаказы.ПроцентАвтоматическихСкидок)
	|			И (ЗаказСУчетомИзменений.УсловиеАвтоматическойСкидки = РегЗаказы.УсловиеАвтоматическойСкидки)
	|			И (ЗаказСУчетомИзменений.ЗначениеУсловияАвтоматическойСкидки = РегЗаказы.ЗначениеУсловияАвтоматическойСкидки)
	|			И (ЗаказСУчетомИзменений.Цена = РегЗаказы.Цена)
	|			И (ЗаказСУчетомИзменений.СтавкаНДС = РегЗаказы.СтавкаНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.ПроцентСкидкиНаценки,
	|	РегЗаказы.ПроцентАвтоматическихСкидок,
	|	РегЗаказы.УсловиеАвтоматическойСкидки,
	|	РегЗаказы.ЗначениеУсловияАвтоматическойСкидки,
	|	РегЗаказы.Цена,
	|	РегЗаказы.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Статус",  Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ТабОстатки = Запрос.Выполнить().Выгрузить();
	
	УправлениеЗаказами.ЗаполнитьТабЧастьУслугиПоЗаказу(ЭтотОбъект, Услуги, ЗаказПокупателя, ТабОстатки);
	
	Для Каждого Строка Из Услуги Цикл
		Строка.Количество = Строка.Количество;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Строка, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Строка, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьУслугиПоОстаткам()

#Если Клиент Тогда

// Заполняет товары копированием из заказа покупателя
//
Процедура СкопироватьТовары() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения,
		|	ЗаказПокупателяТовары.ЕдиницаИзмеренияМест,
		|	ЗаказПокупателяТовары.Количество,
		|	ЗаказПокупателяТовары.Коэффициент,
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.Размещение,
		|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
		|	ЗаказПокупателяТовары.Цена,
		|	ЗаказПокупателяТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяТовары.Ссылка.ВалютаДокумента = ЗаказПокупателяТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
		|			ТОГДА ЗаказПокупателяТовары.Ссылка.КурсВзаиморасчетов
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяТовары.Ссылка.ВалютаДокумента = ЗаказПокупателяТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
		|			ТОГДА ЗаказПокупателяТовары.Ссылка.КратностьВзаиморасчетов
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КратностьДокумента,
		|	ЗаказПокупателяТовары.Сумма,
		|	ЗаказПокупателяТовары.СтавкаНДС,
		|	ЗаказПокупателяТовары.СуммаНДС,
		|	ЗаказПокупателяТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ЗаказПокупателяТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
		|	ЗаказПокупателяТовары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка.Ссылка = &ЗаказПокупателя
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателяТовары.НомерСтроки";

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
  	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

		НоваяСтрока.Количество = Выборка.Количество;
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Выборка.Сумма,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

	КонецЦикла;

	ОбработкаТабличныхЧастей.ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ЗаказПокупателя, мВалютаРегламентированногоУчета);

КонецПроцедуры // СкопироватьТовары()

// Заполняет услуги копированием из заказа покупателя
//
Процедура СкопироватьУслуги() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяУслуги.Количество,
	|	ЗаказПокупателяУслуги.Номенклатура,
	|	ЗаказПокупателяУслуги.Цена,
	|	ЗаказПокупателяУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяУслуги.Ссылка.ВалютаДокумента = ЗаказПокупателяУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА ЗаказПокупателяУслуги.Ссылка.КурсВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяУслуги.Ссылка.ВалютаДокумента = ЗаказПокупателяУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА ЗаказПокупателяУслуги.Ссылка.КратностьВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КратностьДокумента,
	|	ЗаказПокупателяУслуги.Сумма,
	|	ЗаказПокупателяУслуги.СтавкаНДС,
	|	ЗаказПокупателяУслуги.Содержание,
	|	ЗаказПокупателяУслуги.СуммаНДС,
	|	ЗаказПокупателяУслуги.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателяУслуги.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	|	ЗаказПокупателяУслуги.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
	|ИЗ
	|	Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателяУслуги
	|ГДЕ
	|	ЗаказПокупателяУслуги.Ссылка.Ссылка = &ЗаказПокупателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяУслуги.НомерСтроки";

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.СтавкаНДС    = Выборка.СтавкаНДС;
		НоваяСтрока.Содержание   = Выборка.Содержание;
		НоваяСтрока.Количество   = Выборка.Количество;
		
		НоваяСтрока.Цена                 = Выборка.Цена;
		НоваяСтрока.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Выборка.Сумма,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти (НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // СкопироватьУслуги()

// Заполняет тару копированием из заказа покупателя
//
Процедура СкопироватьВозвратнуюТару() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяВозвратнаяТара.Количество,
	|	ЗаказПокупателяВозвратнаяТара.Номенклатура,
	|	ЗаказПокупателяВозвратнаяТара.Размещение,
	|	ЗаказПокупателяВозвратнаяТара.Сумма,
	|	ЗаказПокупателяВозвратнаяТара.Цена,
	|	ЗаказПокупателяВозвратнаяТара.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяВозвратнаяТара.Ссылка.ВалютаДокумента = ЗаказПокупателяВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА ЗаказПокупателяВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяВозвратнаяТара.Ссылка.ВалютаДокумента = ЗаказПокупателяВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА ЗаказПокупателяВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КратностьДокумента
	|ИЗ
	|	Документ.ЗаказПокупателя.ВозвратнаяТара КАК ЗаказПокупателяВозвратнаяТара
	|ГДЕ
	|	ЗаказПокупателяВозвратнаяТара.Ссылка.Ссылка = &ЗаказПокупателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяВозвратнаяТара.НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество = Выборка.Количество;
		НоваяСтрока.Размещение = Выборка.Размещение;
		НоваяСтрока.Цена  = Выборка.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Кнопка - кнопка подменю "Заполнить и провести".
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(Параметры) Экспорт

	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЭтоНовый() Тогда
		ВыполнитьЗакрытиеРезервов();	
		ВыполнитьЗакрытиеРазмещения();
	КонецЕсли;	
	
    Параметры.Вставить("Заказ",ЗаказПокупателя);
	Параметры.Вставить("РезервироватьПоСериям", Ложь);
	Параметры.Вставить("ОбособленныйУчет", Ложь);
    УправлениеЗаказами.Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(Параметры, Товары, ВозвратнаяТара);
	
 КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС"
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
        СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);
	
	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = 0;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ЗаказПокупателя");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		
		Если НЕ ЗаказПокупателя.Проведен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нельзя корректировать непроведенный документ!", Отказ, Заголовок);
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Заказ покупателя не может осуществлять заказ с НТТ!", Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Заказ покупателя не может быть с видом операции ""Переработка""!", Отказ, Заголовок);
		КонецЕсли;		
		
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей = Истина Тогда
			ТекстОшибки = "Документ не предназначен для изменения заказа покупателя с обособленным учетом."
							+ " Для корректировки необходимо использовать документ ""Корректировка заказа покупателя""";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;		
		
	КонецЕсли;

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Проверяет наличие движений по регистрам дата которых позже даты проводимого документа, 
// и в которых фигурирует корректируемый заказ.
//
Процедура ПроверитьНаличиеПозднихДвиженийПоЗаказу(СтруктураШапкиДокумента, Заголовок)

	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказыПокупателей.Период
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
		|ГДЕ
		|	ЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
		|	И ЗаказыПокупателей.Период > &ДатаИзменения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыВРезервеНаСкладах.Период
		|ИЗ
		|	РегистрНакопления.ТоварыВРезервеНаСкладах КАК ТоварыВРезервеНаСкладах
		|ГДЕ
		|	(ВЫРАЗИТЬ(ТоварыВРезервеНаСкладах.ДокументРезерва КАК Документ.ЗаказПокупателя)) = &ЗаказПокупателя
		|	И ТоварыВРезервеНаСкладах.Период > &ДатаИзменения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыВРезервеНаСкладах.Период
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами КАК ТоварыВРезервеНаСкладах
		|ГДЕ
		|	(ВЫРАЗИТЬ(ТоварыВРезервеНаСкладах.Сделка КАК Документ.ЗаказПокупателя)) = &ЗаказПокупателя
		|	И ТоварыВРезервеНаСкладах.Период > &ДатаИзменения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыВРезервеНаСкладах.Период
		|ИЗ
		|	РегистрНакопления.РазмещениеЗаказовПокупателей КАК ТоварыВРезервеНаСкладах
		|ГДЕ
		|	(ВЫРАЗИТЬ(ТоварыВРезервеНаСкладах.ЗаказПокупателя КАК Документ.ЗаказПокупателя)) = &ЗаказПокупателя
		|	И ТоварыВРезервеНаСкладах.Период > &ДатаИзменения";
	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ДатаИзменения",   Дата);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТекстСообщения = "Внимание! Существуют более поздние движения по заказу покупателя.
						|Проведение документа может привести к некорректным данным";
		ОбщегоНазначения.Сообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеПозднихДвиженийПоЗаказу
 
// Функция удаляет из исходной таблицы строки не требующие размещения под заказ покупателя
// Возвращается КОПИЯ исходной таблицы
//
Функция ПодготовитьТаблицуДляДвиженийПоРазмещениюЗаказовПокупателей(ТаблицаПоТоварам)

	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) = Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
	
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // ПодготовитьТаблицуДляДвиженийПоРазмещениюЗаказовПокупателей()

// Функция удаляет из исходной таблицы строки не требующие резервирования под заказ покупателя
// Возвращается КОПИЯ исходной таблицы
//
Функция ПодготовитьТаблицуДляДвиженийПоРезервированию(ТаблицаПоТоварам)

	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
	
	Возврат ТаблицаПоТоварамРезервирование;
		
КонецФункции // ПодготовитьТаблицуДляДвиженийПоРезервированию()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре)
	
	// Подготовим таблицу товаров для проведения
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок", "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки", "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Подготовим таблицу услуг для проведения
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок", "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки", "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	// Подготовим таблицу тары для проведения
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");
	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЗаказПокупателя);
	СтруктураШапкиДокумента.Вставить("ДокументСсылка", Ссылка);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",            "ВалютаУправленческогоУчета",      "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",            "КурсВалютыУправленческогоУчета",  "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента",   "ВедениеВзаиморасчетов",           "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента",   "ВалютаВзаиморасчетов",            "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента",   "Организация",                     "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента",   "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	
	Если ЗначениеЗаполнено(ЗаказПокупателя.СкладГруппа) 
		И ТипЗнч(ЗаказПокупателя.СкладГруппа) = Тип("СправочникСсылка.Склады") Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладГруппа", "ВидСклада", "ВидСклада");
	Иначе
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "NULL", "NULL", "ВидСклада");
	КонецЕсли;

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЗаказПокупателя, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура закрывает резервы и записывает данные в базу данных.
// Вызывается перед контролем остатков.
//
Процедура ВыполнитьЗакрытиеРезервов(ТаблицаПоРезервам = Неопределено)

	Если ТаблицаПоРезервам = Неопределено Тогда
		СписокЗаказов = Новый Массив;
		СписокЗаказов.Добавить(ЗаказПокупателя);
		ТаблицаПоРезервам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРезервов(Ссылка,МоментВремени(),СписокЗаказов,"-");
	КонецЕсли; 
	
	Если ТаблицаПоРезервам.Количество() > 0 Тогда
		
		НаборДвижений = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборДвижений.Отбор.Регистратор.Установить(Ссылка);
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаДвижений", ТаблицаПоРезервам);
							
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		НаборДвижений.Записать(Истина);
		
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьЗакрытиеРезервов

// Процедура закрывает размещения и записывает данные в базу данных.
// Вызывается перед контролем остатков.
//
Процедура ВыполнитьЗакрытиеРазмещения(ТаблицаДляЗакрытияРазмещения = Неопределено)

	Если ТаблицаДляЗакрытияРазмещения = Неопределено Тогда
		СписокЗаказов = Новый Массив;
		СписокЗаказов.Добавить(ЗаказПокупателя);
		ТаблицаДляЗакрытияРазмещения = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРазмещения(Ссылка,МоментВремени(),СписокЗаказов,ложь,истина,"-");
	КонецЕсли; 
	
	Если ТаблицаДляЗакрытияРазмещения.Количество() > 0 Тогда
		
		НаборДвижений = РегистрыНакопления.РазмещениеЗаказовПокупателей.СоздатьНаборЗаписей();
		НаборДвижений.Отбор.Регистратор.Установить(Ссылка);
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаДвижений", ТаблицаДляЗакрытияРазмещения);
							
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		НаборДвижений.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗакрытиеРазмещения
 
// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
							ТаблицаПоТаре, Отказ, Заголовок);
		
КонецПроцедуры // ДвиженияПоРегистрам()

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
									ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ, Заголовок)
	
	// Подготовим данные для закрытия заказа покупателя
	СписокЗаказов = Новый Массив;
	СписокЗаказов.Добавить(ЗаказПокупателя);
	ТаблицаДляЗакрытияЗаказовПокупателей = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияЗаказовПокупателей(Ссылка, МоментВремени(),СписокЗаказов,"-");
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ "РАСЧЕТЫ С КОНТРАГЕНТАМИ"
	СуммаВзаиморасчетовДляЗакрытия = ТаблицаДляЗакрытияЗаказовПокупателей.Итог("СуммаВзаиморасчетовБезТары");
	СуммаУпрДляЗакрытия = ТаблицаДляЗакрытияЗаказовПокупателей.Итог("СуммаУпрБезТары");
	НаборДвижений = Движения.РасчетыСКонтрагентами;
	
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	СуммаВзаиморасчетов   = СуммаВзаиморасчетовДляЗакрытия
							+ МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
											СуммаДокумента,
											СтруктураШапкиДокумента.ВалютаДокумента,
											СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
											СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
															
	СуммаУпр              = СуммаУпрДляЗакрытия
							+ МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
											СуммаДокумента, 
											СтруктураШапкиДокумента.ВалютаДокумента,
											СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
											СтруктураШапкиДокумента.КурсДокумента, 
											СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
											СтруктураШапкиДокумента.КратностьДокумента, 
											СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
											
	Если СуммаВзаиморасчетов <> 0 ИЛИ СуммаУпр <> 0 Тогда
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
		СтрокаДвижений.ДоговорКонтрагента    = СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаДвижений.Контрагент  		     = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижений.Организация  	     = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Сделка                = ЗаказПокупателя; 
		СтрокаДвижений.СуммаВзаиморасчетов   = СуммаВзаиморасчетов;
		СтрокаДвижений.СуммаУпр              = СуммаУпр;
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли; 											
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ "ЗАКАЗЫ ПОКУПАТЕЛЕЙ"
	НаборДвижений = Движения.ЗаказыПокупателей;
	
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",   ТаблицаПоТоварам);
	СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам",   ТаблицаПоУслугам);
	СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",      ТаблицаПоТаре);
	СтруктТаблицДокумента.Вставить("ТаблицаДляЗакрытия", ТаблицаДляЗакрытияЗаказовПокупателей);
	
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
	
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    ЗаказПокупателя, "ТаблицаПоТоварам,ТаблицаПоТаре,ТаблицаПоУслугам");
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента, "ТаблицаПоТоварам,ТаблицаПоТаре,ТаблицаПоУслугам");
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам, ТаблицаПоУслугам");
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
	
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборДвижений, ТаблицаДвижений, Истина);
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ "РАЗМЕЩЕНИЕ ЗАКАЗОВ ПОКУПАТЕЛЕЙ"
	ТаблицаПоТоварамРазмещение   = ПодготовитьТаблицуДляДвиженийПоРазмещениюЗаказовПокупателей(ТаблицаПоТоварам);
	ТаблицаПоТареРазмещение      = ПодготовитьТаблицуДляДвиженийПоРазмещениюЗаказовПокупателей(ТаблицаПоТаре);
	ТаблицаДляЗакрытияРазмещения = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРазмещения(Ссылка,МоментВремени(),СписокЗаказов,ложь,истина,"-");
	
	
	НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
	
	Если ТаблицаПоТоварамРазмещение.Количество() <> 0 ИЛИ ТаблицаПоТареРазмещение.Количество() <> 0 Тогда
		// Закроем размещения перед вызовом контроля остатков
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			ВыполнитьЗакрытиеРазмещения(ТаблицаДляЗакрытияРазмещения);
		КонецЕсли; 
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	
	Если Не Отказ Тогда
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",   ТаблицаПоТоварамРазмещение);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",      ТаблицаПоТареРазмещение);
		СтруктТаблицДокумента.Вставить("ТаблицаДляЗакрытия", ТаблицаДляЗакрытияРазмещения);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", ЗаказПокупателя, "ТаблицаПоТоварам,ТаблицаПоТаре");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборДвижений, ТаблицаДвижений, Истина);
		НаборДвижений.Загрузить(ТаблицаДвижений);
	КонецЕсли;
	
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ "ТОВАРЫ В РЕЗЕРВЕ НА СКЛАДАХ"
	ТаблицаПоТоварамРезервирование = ПодготовитьТаблицуДляДвиженийПоРезервированию(ТаблицаПоТоварам);
	ТаблицаПоТареРезервирование    = ПодготовитьТаблицуДляДвиженийПоРезервированию(ТаблицаПоТаре);
	ТаблицаДляЗакрытияРезервов     = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРезервов(Ссылка,МоментВремени(), СписокЗаказов,"-");
	
	НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
	
	Если ТаблицаПоТоварамРезервирование.Количество() <> 0 ИЛИ ТаблицаПоТареРезервирование.Количество() <> 0 Тогда
		// Закроем резервы перед вызовом контроля остатков
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			ВыполнитьЗакрытиеРезервов(ТаблицаДляЗакрытияРезервов);
		КонецЕсли;
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли; 
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли; 
		
		// Очистим регистр "СвободныеОстатки", т.к. при закрытии резервов он был изменен
		Если НЕ Отказ
			И РежимПроведения = РежимПроведенияДокумента.Оперативный
			И глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки") Тогда
			
			НаборЗаписей = РегистрыНакопления.СвободныеОстатки.СоздатьНаборЗаписей();			
			НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли; 
	
	Если Не Отказ Тогда
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезервирование);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезервирование);
		СтруктТаблицДокумента.Вставить("ТаблицаДляЗакрытия", ТаблицаДляЗакрытияРезервов);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", ЗаказПокупателя, "ТаблицаПоТоварам,ТаблицаПоТаре");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборДвижений, ТаблицаДвижений, Истина);
		НаборДвижений.Загрузить(ТаблицаДвижений);
	КонецЕсли;
	
	Если Движения.ЗаказыПокупателей.Количество() = 0
		И Движения.РазмещениеЗаказовПокупателей.Количество() = 0
		И Движения.ТоварыВРезервеНаСкладах.Количество() = 0 Тогда
		
		ОбщегоНазначения.Сообщение("Внимание, заказ покупателя не изменился!", Перечисления.ВидыСообщений.ВажнаяИнформация, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрамУпр

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка 
			ИЛИ Основание.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ЗаказПокупателя = Основание;

		СтруктурнаяЕдиница      = Основание.СтруктурнаяЕдиница;
		КурсВзаиморасчетов      = Основание.КурсВзаиморасчетов;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		
		Если Основание.Проведен Тогда

			// Заполним табличные части неотгруженными товарами по заказу покупателя.
			ЗаполнитьТоварыПоОстаткам();
			ЗаполнитьТаруПоОстаткам();
			ЗаполнитьУслугиПоОстаткам();
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
	
	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьНаличиеПозднихДвиженийПоЗаказу(СтруктураШапкиДокумента, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
							ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Контрагент 		   = ЗаказПокупателя.Контрагент;
	ДоговорКонтрагента = ЗаказПокупателя.ДоговорКонтрагента;
	Организация        = ЗаказПокупателя.Организация;
	Подразделение      = ЗаказПокупателя.Подразделение;
	ДисконтнаяКарта    = ЗаказПокупателя.ДисконтнаяКарта;

	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Услуги.Очистить();

	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	// Посчитать итоговую сумму плановой себестоимости документа и записать ее в соответствующий реквизит шапки
	ИтогПлановаяСебестоимость = Ценообразование.ИтогПлановаяСебестоимость(ЭтотОбъект);

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");
ВалютаДокумента                   = ЗаказПокупателя.ВалютаДокумента;
