////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);

	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Док.Сотрудник,
	|	Док.ДатаИзменения,
	|	Док.Коэффициент,
	|	Док.НомерСтроки									КАК НомерСтроки
	|ИЗ
	|   Документ." + Метаданные().Имя + ".РаботникиОрганизации КАК Док				
	|ГДЕ
	|	Док.Ссылка  =  &ДокументСсылка
	|";


	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";

	// ФизЛицо
	ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если Не ЕстьФизЛицо Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ);
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаИзменения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата изменения!", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Коэффициент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан коэффициент!", Отказ);
	КонецЕсли;

		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

Процедура ДобавитьСтрокуВДвиженияПоРегистрам(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)
	
	//Движения.КоэффициентыПоВышенияОкладов;
	Движение = Движения.КоэффициентыПоВышенияОкладов.Добавить();
		
	Движение.Организация  = ВыборкаПоШапкеДокумента.Организация;
	Движение.Сотрудник    = ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.Период       = ВыборкаПоРаботникиОрганизации.ДатаИзменения;
	Движение.Коэффициент  = ВыборкаПоРаботникиОрганизации.Коэффициент;
	
КонецПроцедуры	



Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию")
		или ТипЗнч(Основание) = Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций") 
		или ТипЗнч(Основание) = Тип("ДокументСсылка.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("парамРегистратор", Основание);

		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|  Начисления.Период		КАК Период,
		|  Начисления.Организация	КАК Организация,
		|  Начисления.Сотрудник		КАК Сотрудник,
		|  Начисления.Показатель1	КАК Показатель1
		|ПОМЕСТИТЬ
		|	ВТНовыйОклад
		|ИЗ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|ГДЕ	Начисления.Регистратор = &парамРегистратор
		|	И	Начисления.ВидРасчетаИзмерение <> Начисления.ВидРасчета
		|";
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НачисленияНовыйОклад.Период 		КАК Период,
		|	НачисленияНовыйОклад.Организация	КАК Организация,
		|	НачисленияНовыйОклад.Сотрудник	КАК Сотрудник,
		|	ЕстьNULL(НачисленияНовыйОклад.Показатель1,0)	КАК НовыйОклад,
		|	ЕстьNULL(НачисленияСтарыйОклад.Показатель1,0)	КАК СтарыйОклад
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(,Регистратор <> &парамРегистратор)	КАК НачисленияСтарыйОклад
		|ПРАВОЕ СОЕДИНЕНИЕ
		|	ВТНовыйОклад КАК НачисленияНовыйОклад
		|ПО
		|	НачисленияНовыйОклад.Сотрудник = НачисленияСтарыйОклад.Сотрудник
		|	И НачисленияНовыйОклад.Организация  = НачисленияСтарыйОклад.Организация
		|ГДЕ
		|	НачисленияСтарыйОклад.ВидРасчетаИзмерение <> НачисленияСтарыйОклад.ВидРасчета
		|	И НачисленияСтарыйОклад.Период < НачисленияНовыйОклад.Период
		|";	
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДокументОснование = Основание;
			
		Пока Выборка.Следующий() Цикл
				
			ОбщегоНазначения.СообщитьОбОшибке("Размер прошлого оклада: " + Выборка.СтарыйОклад + "; размер нового оклада: " + Выборка.НовыйОклад + ".",,,СтатусСообщения.Информация);
			Организация = Выборка.Организация;
			СтрокаРаботники = РаботникиОрганизации.Добавить();
			СтрокаРаботники.Сотрудник		= Выборка.Сотрудник;
			СтрокаРаботники.ДатаИзменения	= Выборка.Период;
			Если Выборка.СтарыйОклад <> 0 Тогда
				СтрокаРаботники.Коэффициент		=Выборка.НовыйОклад/Выборка.СтарыйОклад;
			Иначе
				СтрокаРаботники.Коэффициент = 1;
			КонецЕсли;
			
			
		КонецЦикла;	
		

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ);
                ДобавитьСтрокуВДвиженияПоРегистрам(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации,,"Сотрудник");
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(РаботникиОрганизации);
	
КонецПроцедуры


