Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

#Если Клиент Тогда

// Функция формирует печатную форму документа
//
Функция ПечатьЛимитыОтпускаМатериалов()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "Шапка";
		ОбластьСтроки = "Строка";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК СкладПредставление,
	|	"+?(ОтражатьВБухгалтерскомУчете, "ПодразделениеОрганизации.Представление", "Подразделение.Представление")+" КАК ПодразделениеПредставление
	|ИЗ
	|	Документ.ИзменениеЛимитовОтпускаМатериалов КАК ИзменениеЛимитовОтпускаМатериалов
	|
	|ГДЕ
	|	ИзменениеЛимитовОтпускаМатериалов.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки 							КАК НомерСтроки,
	|	Номенклатура."+ ТекстКодАртикул + " 	КАК КодАртикул,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Материал,
	|	ХарактеристикаНоменклатуры       	 	КАК Характеристика,
	|	NULL                	 				КАК Серия,
	|	ПРЕДСТАВЛЕНИЕ(Периодичность) 			КАК Периодичность,
	|	ЕдиницаИзмерения 						КАК ЕдиницаИзмерения,
	|	ЛимитОтпуска 							КАК ЛимитОтпуска,
	|	КонтролироватьЛимит 					КАК КонтролироватьЛимит
	|
	|ИЗ
	|	Документ.ИзменениеЛимитовОтпускаМатериалов.Лимиты КАК ИзменениеЛимитовОтпускаМатериалов
	|
	|ГДЕ
	|	ИзменениеЛимитовОтпускаМатериалов.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО НомерСтроки";

	ЗапросПоНоменклатуре = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзменениеЛимитовОтпускаМатериалов";
	
	// Вывод заголовка
	Макет = ПолучитьМакет("ЛимитыОтпускаМатериалов");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка, "Лимиты отпуска материалов");
	Область.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(Область);
	
	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаПоСтрокам);
		ОбластьМакета.Параметры.Материал = СокрЛП(ВыборкаПоСтрокам.Материал) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаПоСтрокам.КодАртикул;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывод подвала
	Область = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(Область);

	Возврат ТабДокумент;

КонецФункции // ПечатьТребованиеНакладная()



// Функция формирует печатную форму документа
//
Функция ПечатьЛимитноЗаборнаякарта()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК СкладПредставление,
	|	"+?(ОтражатьВБухгалтерскомУчете, "ПодразделениеОрганизации.Представление", "Подразделение.Представление")+" КАК ПодразделениеПредставление
	|ИЗ
	|	Документ.ИзменениеЛимитовОтпускаМатериалов КАК ИзменениеЛимитовОтпускаМатериалов
	|
	|ГДЕ
	|	ИзменениеЛимитовОтпускаМатериалов.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки 							КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Материал,
	|	Номенклатура." + ТоварКод + "   		КАК НоменклатурныйНомер,
	|	ХарактеристикаНоменклатуры       	 	КАК Характеристика,
	|	NULL                	 				КАК Серия,
	|	ЕдиницаИзмерения 						КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ЛимитОтпуска 							КАК Лимит
	|
	|ИЗ
	|	Документ.ИзменениеЛимитовОтпускаМатериалов.Лимиты КАК ИзменениеЛимитовОтпускаМатериалов
	|
	|ГДЕ
	|	ИзменениеЛимитовОтпускаМатериалов.Ссылка = &ТекущийДокумент
	|	И ИзменениеЛимитовОтпускаМатериалов.КонтролироватьЛимит
	|";

	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	ЕстьХарактеристика = (ЗапросПоНоменклатуре.Колонки.Найти("Характеристика") <> Неопределено);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЛимитноЗаборнаяКарта";
	
	Макет = ПолучитьОбщийМакет("М8");

	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакетаЗаголовок 	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаПодвал 	= Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета 			= Макет.ПолучитьОбласть("Строка");
	
	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	
	ШапкаВыведена = Ложь;
	
	ВысотаЗаголовка = ТабДокумент.ВысотаТаблицы;
	Если ВысотаЗаголовка <> 0 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
		
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);	
	
	Обход = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыведеноСтрок = 0;
	ВсегоСтрокДокумента = Обход.Количество();
	Пока Обход.Следующий() Цикл
		
		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.Заполнить(Обход);
		ОбластьМакетаШапка.Параметры.ДатаСоставления = Шапка.Дата;
		ОбластьМакетаШапка.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,", Ложь);
	
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
		ОбластьМакетаШапка.Параметры.КодПоЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.Дата, СписокПоказателей).КодПоЕДРПОУ;
	
		ОбластьМакетаШапка.Параметры.ТекстЦена = "Ціна (" + глЗначениеПеременной("ВалютаУправленческогоУчета") + ")";
		ОбластьМакетаШапка.Параметры.ТекстСумма = "Сума (" + глЗначениеПеременной("ВалютаУправленческогоУчета") + ")";
			
		ОбластьМакетаШапка.Параметры.МатериалНаименование = СокрЛП(Обход.Материал) + ?(ЕстьХарактеристика, ФормированиеПечатныхФорм.ПредставлениеСерий(Обход), "");
			
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		ВывестиПодвалЛиста = Ложь;
		Пока не ВывестиПодвалЛиста Цикл
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь);
            Если ВывестиПодвалЛиста Тогда
				ТабДокумент.Вывести(ОбластьМакетаПодвал);
			Иначе
				ОбластьСтрока = ТабДокумент.Вывести(ОбластьМакета);
				
				ТабДокумент.Область(ОбластьСтрока.Верх,2).ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТабДокумент.Область(ОбластьСтрока.Верх,2).ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			КонецЕсли;
		КонецЦикла;
		
		Если ВыведеноСтрок<ВсегоСтрокДокумента Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьТребованиеНакладная()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если      ИмяМакета = "ЛимитыОтпускаМатериалов" Тогда
		ТабДокумент = ПечатьЛимитыОтпускаМатериалов();
	ИначеЕсли      ИмяМакета = "ЛимитноЗаборнаяКарта" Тогда
		ТабДокумент = ПечатьЛимитноЗаборнаяКарта();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,
	ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка), Ссылка);
	
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("ЛимитыОтпускаМатериалов, ЛимитноЗаборнаяКарта",
									   "Лимиты отпуска материалов",
									   "Лимитно заборная карта");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ")
			  + "Подразделение";
КонецПроцедуры // ДополнитьОбязательныеРеквизитыШапкиУпр()

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ")
			  + "ПодразделениеОрганизации";
КонецПроцедуры // ДополнитьОбязательныеРеквизитыШапкиРегл()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Укажем, что надо проверить.
	ОбязательныеРеквизитыШапки = "Организация, Склад";
	
	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыУпрУчета);
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ОбязательныеРеквизитыТабЧасти = "Номенклатура, Периодичность";
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыТабЧасти);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Лимиты", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоЛимитам - результат запроса по табличной части "Лимиты",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуЛимитов(РезультатЗапросаПоЛимитам, СтруктураШапкиДокумента)

	ТаблицаБазыРаспределения = РезультатЗапросаПоЛимитам.Выгрузить();
	
	Возврат ТаблицаБазыРаспределения;

КонецФункции // ПодготовитьТаблицуЛимитов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаБазыРаспределения, Отказ, Заголовок)
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаБазыРаспределения, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаБазыРаспределения, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаБазыРаспределения, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ЛимитыОтпускаМатериалов.
	НаборДвижений = Движения.ЛимитыОтпускаМатериалов;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаБазыРаспределения, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, 		 "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение, "Подразделение");

	// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ЛимитыОтпускаМатериалов.ВыполнитьДвижения();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирование движений по регистрам по регламентированному учету.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаБазыРаспределения, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
		
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ЛимитыОтпускаМатериаловОрганизаций.
	НаборДвижений = Движения.ЛимитыОтпускаМатериаловОрганизаций;
		
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаБазыРаспределения, ТаблицаДвижений);
		
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад, 		 			"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "Подразделение");

	// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ЛимитыОтпускаМатериаловОрганизаций.ВыполнитьДвижения();
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрамУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Дополним полями, нужными для регл. и упр. учета
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, 0);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", 				"Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры",	"ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Периодичность",				"Периодичность");
	СтруктураПолей.Вставить("ЛимитОтпуска", 				"ЛимитОтпуска * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("КонтролироватьЛимит", 			"КонтролироватьЛимит");
	
	РезультатЗапросаПоЛимитам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Лимиты", СтруктураПолей);
	ТаблицаЛимитов = ПодготовитьТаблицуЛимитов(РезультатЗапросаПоЛимитам, СтруктураШапкиДокумента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений регистров.
	ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаЛимитов, Отказ, Заголовок);
	
КонецПроцедуры	// ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

