Перем мУдалятьДвижения;
    
// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "
								|НМА.СрокПолезногоИспользованияУУ,
								|НМА.ОбъемПродукцииРаботДляВычисленияАмортизацииУУ,
								|НМА.СпособНачисленияАмортизацииУУ,
								|НМА.ЛиквидационнаяСтоимостьУУ
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "
								|НМА.СрокПолезногоИспользованияБУ,
								|НМА.СрокПолезногоИспользованияНУ,
								|НМА.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
								|НМА.СпособНачисленияАмортизацииБУ,
								|НМА.ЛиквидационнаяСтоимостьБУ
								|";
	мСтрокаРеквизитыНалУчета =  "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоНМА)
	
	ДатаДок = Дата;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ПервоначальныеСведенияУУ = Движения.ПервоначальныеСведенияНМА;
		
		Для Каждого СтрокаТЧ из ТаблицаПоНМА Цикл
			
			СтрокаДвижений = ПервоначальныеСведенияУУ.Добавить();
			
			СтрокаДвижений.Период           							= ДатаДок;
			СтрокаДвижений.НематериальныйАктив 							= СтрокаТЧ.НематериальныйАктив;
			СтрокаДвижений.СрокПолезногоИспользования                  	= СтрокаТЧ.СрокПолезногоИспользованияУУ;
			СтрокаДвижений.ОбъемПродукцииРаботДляВычисленияАмортизации 	= СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииУУ;
			СтрокаДвижений.ЛиквидационнаяСтоимость                     	= СтрокаТЧ.ЛиквидационнаяСтоимостьУУ;
			СтрокаДвижений.СпособНачисленияАмортизации 					= СтрокаТЧ.СпособНачисленияАмортизацииУУ;
			СтрокаДвижений.ПервоначальнаяСтоимость 						= СтрокаТЧ.ПервоначальнаяСтоимостьУУ;
			СтрокаДвижений.НачислятьАмортизацию 						= СтрокаТЧ.НачислятьАмортизациюУУ;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоНМА)
	
	ДатаДок = Дата;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ПервоначальныеСведенияБУ = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет;
		ПервоначальныеСведенияНУ = Движения.ПервоначальныеСведенияНМАНалоговыйУчет;
		
		Для Каждого СтрокаТЧ из ТаблицаПоНМА Цикл
			
			СтрокаДвижений = ПервоначальныеСведенияБУ.Добавить();
			
			СтрокаДвижений.Период           							= ДатаДок;
			СтрокаДвижений.НематериальныйАктив 							= СтрокаТЧ.НематериальныйАктив;
			СтрокаДвижений.Организация      							= СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.СрокПолезногоИспользования                  	= СтрокаТЧ.СрокПолезногоИспользованияБУ;
			СтрокаДвижений.ОбъемПродукцииРаботДляВычисленияАмортизации 	= СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
			СтрокаДвижений.ЛиквидационнаяСтоимость                     	= СтрокаТЧ.ЛиквидационнаяСтоимостьБУ;
			СтрокаДвижений.СпособНачисленияАмортизации 					= СтрокаТЧ.СпособНачисленияАмортизацииБУ;
			СтрокаДвижений.ПервоначальнаяСтоимость 						= СтрокаТЧ.ПервоначальнаяСтоимостьБУ;
			СтрокаДвижений.НачислятьАмортизацию 						= СтрокаТЧ.НачислятьАмортизациюБУ;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.СрокПолезногоИспользованияНУ) Тогда
				СтрокаДвижений = ПервоначальныеСведенияНУ.Добавить();
				
				СтрокаДвижений.Период           							= ДатаДок;
				СтрокаДвижений.НематериальныйАктив 							= СтрокаТЧ.НематериальныйАктив;
				СтрокаДвижений.Организация      							= СтруктураШапкиДокумента.Организация;
				
				СтрокаДвижений.СрокПолезногоИспользования                  	= СтрокаТЧ.СрокПолезногоИспользованияБУ;
				СтрокаДвижений.ПервоначальнаяСтоимость 						= СтрокаТЧ.ПервоначальнаяСтоимостьБУ;
				СтрокаДвижений.НачислятьАмортизацию 						= СтрокаТЧ.НачислятьАмортизациюБУ;
				СтрокаДвижений.НалоговоеНазначение 							= СтрокаТЧ.НалоговоеНазначение;
				СтрокаДвижений.НалоговаяГруппаОС 							= СтрокаТЧ.НалоговаяГруппаОС;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА);
	
	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоНМА);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоНМА);
	
КонецПроцедуры // ДвиженияПоРегистрам


////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового (в общем регламентного) учета
Процедура ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ) Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация");

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "НМА".
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиНМА(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив");
	
	Если ОтражатьВУправленческомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СпособНачисленияАмортизацииУУ");
	КонецЕсли;	
		
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СпособНачисленияАмортизацииБУ");
	КонецЕсли;	
		
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиНМА()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Сформируем структуру табличной части
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НематериальныйАктив" , "НематериальныйАктив");
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете тогда
		
		СтруктураПолей.Вставить("СрокПолезногоИспользованияУУ"                 , "СрокПолезногоИспользованияУУ");
		СтруктураПолей.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииУУ", "ОбъемПродукцииРаботДляВычисленияАмортизацииУУ");
		СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьУУ"                    , "ЛиквидационнаяСтоимостьУУ");
		СтруктураПолей.Вставить("СпособНачисленияАмортизацииУУ" 				, "СпособНачисленияАмортизацииУУ");
		
	Конецесли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
		
		СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ"                 , "СрокПолезногоИспользованияБУ");
		СтруктураПолей.Вставить("СрокПолезногоИспользованияНУ"                 , "СрокПолезногоИспользованияНУ");
		СтруктураПолей.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ", "ОбъемПродукцииРаботДляВычисленияАмортизацииБУ");
		СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьБУ"                    , "ЛиквидационнаяСтоимостьБУ");
		СтруктураПолей.Вставить("СпособНачисленияАмортизацииБУ" 				, "СпособНачисленияАмортизацииБУ");
		
	Конецесли;
	
	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураПолей);
	ТаблицаПоНМА          = РезультатЗапросаПоНМА.Выгрузить();
	
	ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхНМА(МоментВремени(), Организация, ТаблицаПоНМА);
	
	ПроверитьЗаполнениеТабличнойЧастиНМА(Отказ, Заголовок);
	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоНМА, "Нематериальные активы", "НематериальныйАктив", "Нематериальный актив", Отказ, Заголовок);	
		
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА);
	КонецЕсли;
	
КонецПроцедуры

// Процедура дополняет табличную часть колонками
// ПервоначальнаяСтоимостьУУ, ПервоначальнаяСтоимостьБУ 
// для НачислятьАмортизациюУУ, НачислятьАмортизациюБУ нематериальных активов. 
//
// Параметры
//  ДатаДока                     – Тип: Дата, МоментВремени, Граница – Дата, на которую получать результаты
//                 
//  ТекОрганизация               – Тип: СправочникСсылка.Организации – Организация
//                 
//  ТаблицаПоНМА                  – Тип: ТаблицаЗначений – Таблица, в которую необходимо добавить колонки
//
Процедура ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхНМА(ДатаДока, ТекОрганизация, ТаблицаПоНМА) Экспорт
	
	ТаблицаПоНМА.Колонки.Добавить("ПервоначальнаяСтоимостьУУ", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоНМА.Колонки.Добавить("ПервоначальнаяСтоимостьБУ", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоНМА.Колонки.Добавить("ПервоначальнаяСтоимостьНУ", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоНМА.Колонки.Добавить("НачислятьАмортизациюУУ", 	Новый ОписаниеТипов("Булево"));
	ТаблицаПоНМА.Колонки.Добавить("НачислятьАмортизациюБУ", 	Новый ОписаниеТипов("Булево"));
	ТаблицаПоНМА.Колонки.Добавить("НачислятьАмортизациюНУ", 	Новый ОписаниеТипов("Булево"));
	
	ТаблицаПоНМА.Колонки.Добавить("НалоговоеНазначение", 	);
	ТаблицаПоНМА.Колонки.Добавить("НалоговаяГруппаОС", 	);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",     ТекОрганизация);
	Запрос.УстановитьПараметр("Период",          ДатаДока);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоНМА);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
   	|	НематериальныйАктив
	|ПОМЕСТИТЬ НематериальныеАктивы
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НематериальныеАктивы.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияУУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьУУ,
	|	ПервоначальныеСведенияБУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияНУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияУУ.НачислятьАмортизацию КАК НачислятьАмортизациюУУ,
	|	ПервоначальныеСведенияБУ.НачислятьАмортизацию КАК НачислятьАмортизациюБУ,
	|	ПервоначальныеСведенияНУ.НачислятьАмортизацию КАК НачислятьАмортизациюНУ,
	|	ПервоначальныеСведенияНУ.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ПервоначальныеСведенияНУ.НалоговаяГруппаОС КАК НалоговаяГруппаОС
	|ИЗ
	|	НематериальныеАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&Период, НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ НематериальныеАктивы)) КАК ПервоначальныеСведенияБУ
	|		ПО НематериальныеАктивы.НематериальныйАктив = ПервоначальныеСведенияБУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&Период, НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ НематериальныеАктивы)) КАК ПервоначальныеСведенияНУ
	|		ПО НематериальныеАктивы.НематериальныйАктив = ПервоначальныеСведенияНУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(&Период, НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ НематериальныеАктивы)) КАК ПервоначальныеСведенияУУ
	|		ПО НематериальныеАктивы.НематериальныйАктив = ПервоначальныеСведенияУУ.НематериальныйАктив
	|";
	
	ТаблицаСведенийНМА  = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоНМА Цикл
		
		ТекНМА=  СтрокаТЧ.НематериальныйАктив;
		СтрокаСведений = ТаблицаСведенийНМА.Найти(ТекНМА, "НематериальныйАктив");	
		
		Если СтрокаСведений <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаСведений);
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхНМА()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
    	 
	мУдалятьДвижения = НЕ ЭтоНовый();
			
КонецПроцедуры // ПередЗаписью

