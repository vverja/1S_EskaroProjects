Перем мУдалятьДвижения;
    
// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "
								|ОС.СрокПолезногоИспользованияУУ,
								|ОС.СрокИспользованияДляВычисленияАмортизацииУУ,
								|ОС.ОбъемПродукцииРаботУУ,
								|ОС.ОбъемПродукцииРаботДляВычисленияАмортизацииУУ,
								|ОС.СтоимостьДляВычисленияАмортизацииУУ,
								|ОС.СпособНачисленияАмортизацииУУ,
								|ОС.ПараметрВыработкиУУ,
								|ОС.ЛиквидационнаяСтоимостьУУ
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "
								|ОС.СрокПолезногоИспользованияБУ,
								|ОС.СрокИспользованияДляВычисленияАмортизацииБУ,
								|ОС.ОбъемПродукцииРаботБУ,
								|ОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
								|ОС.СтоимостьДляВычисленияАмортизацииБУ,
								|ОС.СпособНачисленияАмортизацииБУ,
								|ОС.ПараметрВыработкиБУ,
								|ОС.ЛиквидационнаяСтоимостьБУ
								|";
	мСтрокаРеквизитыНалУчета =  "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС)
	
	ДатаДок = Дата;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		АмортизацияУУ = Движения.ПараметрыАмортизацииОС;
		СобытиеОС     = Движения.СобытияОС;
		
		ПервоначальныеСведенияУУ = Движения.ПервоначальныеСведенияОС;
		
		ДатаНачалоСледующегоМесяца = КонецМесяца(ДатаДок)+1;
		
		Для Каждого СтрокаТЧ из ТаблицаПоОС Цикл
			
			СтрокаДвижений = АмортизацияУУ.Добавить();
			
			СтрокаДвижений.Период           = ДатаДок;
			СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
			
			СтрокаДвижений.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияУУ;
			СтрокаДвижений.ОбъемПродукцииРабот                         = СтрокаТЧ.ОбъемПродукцииРаботУУ;
			СтрокаДвижений.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииУУ;
			СтрокаДвижений.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.СтоимостьДляВычисленияАмортизацииУУ;
			СтрокаДвижений.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииУУ;
			СтрокаДвижений.ЛиквидационнаяСтоимость                     = СтрокаТЧ.ЛиквидационнаяСтоимостьУУ;
			СтрокаДвижений.ПрименитьВТекущемМесяце                     = СтруктураШапкиДокумента.ПрименятьПараметрыВТекущемМесяце;
			
			Движение = СобытиеОС.Добавить();
			Движение.Период            = ДатаДок;
			Движение.ОсновноеСредство  = СтрокаТЧ.ОсновноеСредство;
			Движение.Событие           = СтруктураШапкиДокумента.Событие;
			Движение.НазваниеДокумента = Метаданные().Представление();
			Движение.НомерДокумента    = Номер;

			
			Если ЗначениеЗаполнено(СтрокаТЧ.СпособНачисленияАмортизацииУУ) Тогда
				Движение = ПервоначальныеСведенияУУ.Добавить();
				Если СтруктураШапкиДокумента.ПрименятьПараметрыВТекущемМесяце Тогда
					Движение.Период            				= ДатаДок;
				Иначе
					Движение.Период            				= ДатаНачалоСледующегоМесяца;
				КонецЕсли;	
				
				Движение.ОсновноеСредство  				= СтрокаТЧ.ОсновноеСредство;
				Движение.СпособНачисленияАмортизации 	= СтрокаТЧ.СпособНачисленияАмортизацииУУ;
				Движение.ПервоначальнаяСтоимость 		= СтрокаТЧ.ПервоначальнаяСтоимостьУУ;
				Движение.ПараметрВыработки 				= СтрокаТЧ.ПараметрВыработкиУУ;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС)
	
	ДатаДок = Дата;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		АмортизацияБУ = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
		
		ПараметрыАмортизацииНУ = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
		
		СобытиеОСБух  = Движения.СобытияОСОрганизаций;
		
		ПервоначальныеСведенияБУ = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
		
		ДатаНачалоСледующегоМесяца = КонецМесяца(ДатаДок)+1;
		
		Для Каждого СтрокаТЧ из ТаблицаПоОС Цикл
			
			// ПараметрыАмортизацииОСБухгалтерскийУчет
			СтрокаДвижений = АмортизацияБУ.Добавить();
			
			СтрокаДвижений.Период           = ДатаДок;
			СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
			СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
			
			СтрокаДвижений.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияБУ;
			СтрокаДвижений.ОбъемПродукцииРабот                         = СтрокаТЧ.ОбъемПродукцииРаботБУ;
			СтрокаДвижений.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ;
			СтрокаДвижений.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ;
			СтрокаДвижений.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
			СтрокаДвижений.ЛиквидационнаяСтоимость                     = СтрокаТЧ.ЛиквидационнаяСтоимостьБУ;
			
			// ПараметрыАмортизацииОСНалоговыйУчет
			Если ЗначениеЗаполнено(СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииНУ) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СтоимостьДляВычисленияАмортизацииНУ) Тогда
				СтрокаДвижений = ПараметрыАмортизацииНУ.Добавить();
				
				СтрокаДвижений.Период           = ДатаДок;
				СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
				СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
				
				СтрокаДвижений.СрокПолезногоИспользования 					= СтрокаТЧ.СрокПолезногоИспользованияНУ;
				СтрокаДвижений.СрокИспользованияДляВычисленияАмортизации 	= СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииНУ;
				СтрокаДвижений.СтоимостьДляВычисленияАмортизации 			= СтрокаТЧ.СтоимостьДляВычисленияАмортизацииНУ;
			КонецЕсли;	
			
			Движение = СобытиеОСБух.Добавить();
			
			Движение.Период             = ДатаДок;
			Движение.ОсновноеСредство   = СтрокаТЧ.ОсновноеСредство;
			Движение.Организация        = СтруктураШапкиДокумента.Организация;
			Движение.Событие            = СтруктураШапкиДокумента.СобытиеРегл;
			Движение.НазваниеДокумента 	= Метаданные().Представление();
			Движение.НомерДокумента    	= Номер;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.СпособНачисленияАмортизацииБУ) Тогда
				Движение = ПервоначальныеСведенияБУ.Добавить();
				Движение.Период            				= ДатаНачалоСледующегоМесяца;
				Движение.ОсновноеСредство  				= СтрокаТЧ.ОсновноеСредство;
				Движение.Организация  					= СтруктураШапкиДокумента.Организация;
				Движение.ИнвентарныйНомер  				= СтрокаТЧ.ИнвентарныйНомер;
				Движение.СпособНачисленияАмортизации 	= СтрокаТЧ.СпособНачисленияАмортизацииБУ;
				Движение.ПервоначальнаяСтоимость 		= СтрокаТЧ.ПервоначальнаяСтоимостьБУ;
				Движение.ПараметрВыработки 				= СтрокаТЧ.ПараметрВыработкиБУ;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС);
	
	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС);
	
КонецПроцедуры // ДвиженияПоРегистрам


////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ОсновноеСредство");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Событие");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	// Проверим чем заполнено событие
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
							  Перечисления.ВидыСобытийОС.Прочее,
							  ПредставлениеРеквизита,Отказ);
	

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового (в общем регламентного) учета
Процедура ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ) Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("СобытиеРегл");

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	// Проверим чем заполнено событие
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
							  Перечисления.ВидыСобытийОС.Прочее,
							  ПредставлениеРеквизита,Отказ);

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		Если ОтражатьВУправленческомУчете Тогда
			СтруктПараметров 	= УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(СтрокаТЧ.ОсновноеСредство,Перечисления.СостоянияОС.СнятоСУчета);
			Если НЕ (СтруктПараметров["Дата"] = Дата(1,1,1)) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Упр. учет: Основное средство """ + СтрокаТЧ.ОсновноеСредство + """ в строке № " + СтрокаТЧ.НомерСтроки + " снято с учета!", Отказ, Заголовок);
			КонецЕсли;
			
			Если СтрокаТЧ.СпособНачисленияАмортизацииУУ_ДоИзменения = Перечисления.СпособыНачисленияАмортизацииОС._100 
				Или СтрокаТЧ.СпособНачисленияАмортизацииУУ_ДоИзменения = Перечисления.СпособыНачисленияАмортизацииОС._50_50 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Упр. учет: Для основного средства """ + СтрокаТЧ.ОсновноеСредство + """ в строке № " + СтрокаТЧ.НомерСтроки + " указан недопустимый для ОС, уже введенного в эксплуатацию, способ начисления амортизации!", Отказ, Заголовок);
			КонецЕсли;	
		КонецЕсли;
		Если ОтражатьВБухгалтерскомУчете Тогда
			СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(СтрокаТЧ.ОсновноеСредство,Перечисления.СостоянияОС.СнятоСУчета,Ложь,Организация);
			Если НЕ (СтруктПараметров["Дата"] = Дата(1,1,1)) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. учет: Основное средство """ + СтрокаТЧ.ОсновноеСредство + """ в строке № " + СтрокаТЧ.НомерСтроки + " снято с учета!", Отказ, Заголовок);
			КонецЕсли;
			Если СтрокаТЧ.СпособНачисленияАмортизацииБУ_ДоИзменения = Перечисления.СпособыНачисленияАмортизацииОС._100 
				Или СтрокаТЧ.СпособНачисленияАмортизацииБУ_ДоИзменения = Перечисления.СпособыНачисленияАмортизацииОС._50_50 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Бух. учет: Для основного средства """ + СтрокаТЧ.ОсновноеСредство + """ в строке № " + СтрокаТЧ.НомерСтроки + " указан недопустимый для ОС, уже введенного в эксплуатацию, способ начисления амортизации!", Отказ, Заголовок);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Сформируем структуру табличной части
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство" , "ОсновноеСредство");
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете тогда
		
		СтруктураПолей.Вставить("СрокПолезногоИспользованияУУ"                 , "СрокПолезногоИспользованияУУ");
		СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииУУ"  , "СрокИспользованияДляВычисленияАмортизацииУУ");
		СтруктураПолей.Вставить("ОбъемПродукцииРаботУУ"                        , "ОбъемПродукцииРаботУУ");
		СтруктураПолей.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииУУ", "ОбъемПродукцииРаботДляВычисленияАмортизацииУУ");
		СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииУУ"          , "СтоимостьДляВычисленияАмортизацииУУ");
		СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьУУ"                    , "ЛиквидационнаяСтоимостьУУ");
		
		СтруктураПолей.Вставить("СпособНачисленияАмортизацииУУ" 				, "СпособНачисленияАмортизацииУУ");
		СтруктураПолей.Вставить("ПараметрВыработкиУУ"                    		, "ПараметрВыработкиУУ");
		
	Конецесли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
		
		СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ"                 , "СрокПолезногоИспользованияБУ");
		СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииБУ"  , "СрокИспользованияДляВычисленияАмортизацииБУ");
		СтруктураПолей.Вставить("ОбъемПродукцииРаботБУ"                        , "ОбъемПродукцииРаботБУ");
		СтруктураПолей.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ", "ОбъемПродукцииРаботДляВычисленияАмортизацииБУ");
		СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииБУ"          , "СтоимостьДляВычисленияАмортизацииБУ");
		СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьБУ"                    , "ЛиквидационнаяСтоимостьБУ");
		
		СтруктураПолей.Вставить("СрокПолезногоИспользованияНУ"                 , "СрокПолезногоИспользованияНУ");
		СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииНУ"  , "СрокИспользованияДляВычисленияАмортизацииНУ");
		СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииНУ"          , "СтоимостьДляВычисленияАмортизацииНУ");
		
		СтруктураПолей.Вставить("СпособНачисленияАмортизацииБУ" 				, "СпособНачисленияАмортизацииБУ");
		СтруктураПолей.Вставить("ПараметрВыработкиБУ"                    		, "ПараметрВыработкиБУ");
		
	Конецесли;
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхОС(МоментВремени(), Организация, ТаблицаПоОС);
	
	ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
		
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС);
	КонецЕсли;
	
КонецПроцедуры

// Процедура дополняет табличную часть колонками
// ИнвентарныйНомер, ПервоначальнаяСтоимостьУУ, ПервоначальнаяСтоимостьБУ для основных средств. 
//
// Параметры
//  ДатаДока                     – Тип: Дата, МоментВремени, Граница – Дата, на которую получать результаты
//                 
//  ТекОрганизация               – Тип: СправочникСсылка.Организации – Организация
//                 
//  ТаблицаПоОС                  – Тип: ТаблицаЗначений – Таблица, в которую необходимо добавить колонки
//
Процедура ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхОС(ДатаДока, ТекОрганизация, ТаблицаПоОС) Экспорт
	
	ТаблицаПоОС.Колонки.Добавить("ПервоначальнаяСтоимостьУУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоОС.Колонки.Добавить("ПервоначальнаяСтоимостьБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоОС.Колонки.Добавить("ИнвентарныйНомер"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(9)));
	
	ТаблицаПоОС.Колонки.Добавить("СпособНачисленияАмортизацииУУ_ДоИзменения", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС"));
	ТаблицаПоОС.Колонки.Добавить("СпособНачисленияАмортизацииБУ_ДоИзменения", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС"));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",     ТекОрганизация);
	Запрос.УстановитьПараметр("Период",          ДатаДока);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияУУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьУУ,
	|	ПервоначальныеСведенияБУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияУУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииУУ_ДоИзменения,
	|	ПервоначальныеСведенияБУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииБУ_ДоИзменения,
	|	ПервоначальныеСведенияБУ.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ИЗ
	|	ОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ПервоначальныеСведенияБУ
	|		ПО ОсновныеСредства.ОсновноеСредство = ПервоначальныеСведенияБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&Период, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ПервоначальныеСведенияУУ
	|		ПО ОсновныеСредства.ОсновноеСредство = ПервоначальныеСведенияУУ.ОсновноеСредство
	|";
	
	ТаблицаСведенийОС  = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОс =  СтрокаТЧ.ОсновноеСредство;
		СтрокаСведений = ТаблицаСведенийОС.Найти(ТекОс, "ОсновноеСредство");	
		
		Если СтрокаСведений <> Неопределено Тогда
			СтрокаТЧ.ПервоначальнаяСтоимостьУУ 	= СтрокаСведений.ПервоначальнаяСтоимостьУУ;	
			СтрокаТЧ.ПервоначальнаяСтоимостьБУ 	= СтрокаСведений.ПервоначальнаяСтоимостьБУ;	
			СтрокаТЧ.ИнвентарныйНомер 			= СтрокаСведений.ИнвентарныйНомер;	
			СтрокаТЧ.СпособНачисленияАмортизацииУУ_ДоИзменения 	= СтрокаСведений.СпособНачисленияАмортизацииУУ_ДоИзменения;	
			СтрокаТЧ.СпособНачисленияАмортизацииБУ_ДоИзменения 	= СтрокаСведений.СпособНачисленияАмортизацииБУ_ДоИзменения;	
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // ДополнитьТабличнуюЧастьСведениямиОбПервоначальныхСведенияхОС()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
    	 
	мУдалятьДвижения = НЕ ЭтоНовый();
			
КонецПроцедуры // ПередЗаписью

