Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС);
	
	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС);
	
КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат;
		
	КонецЕсли;

	ДатаДока = Дата;
	НаправленияОС = Движения.СпособыОтраженияРасходовПоАмортизацииОС;
	СобытиеОС     = Движения.СобытияОС;

	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		Движение = НаправленияОС.Добавить();
		Движение.Период                                = ДатаДока;
		Движение.ОсновноеСредство                      = СтрокаТЧ.ОсновноеСредство;
		Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособОтраженияРасходовПоАмортизации;
		
		
		Движение = СобытиеОС.Добавить();
		Движение.Период            = ДатаДока;
		Движение.ОсновноеСредство  = СтрокаТЧ.ОсновноеСредство;
		Движение.Событие           = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента = Метаданные().Представление();
		Движение.НомерДокумента    = Номер;
		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		НаправленияОС = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
		СобытиеОСБух  = Движения.СобытияОСОрганизаций;
		
		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
			
			Движение = НаправленияОС.Добавить();
			Движение.Период                                = ДатаДока;
			Движение.Организация                           = ТекОрганизация;
			Движение.ОсновноеСредство                      = СтрокаТЧ.ОсновноеСредство;
			Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособОтраженияРасходовПоАмортизации;
			
			
			Движение = СобытиеОСБух.Добавить();
			
			Движение.Период             = ДатаДока;
			Движение.ОсновноеСредство   = СтрокаТЧ.ОсновноеСредство;
			Движение.Организация        = СтруктураШапкиДокумента.Организация;
			Движение.Событие            = СтруктураШапкиДокумента.СобытиеРегл;
			Движение.НазваниеДокумента 	= Метаданные().Представление();
			Движение.НомерДокумента    	= Номер;

			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СпособОтраженияРасходовПоАмортизации");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок)

    СтруктураОбязательныхПолей = Новый Структура;
	
	СтруктураОбязательныхПолей.Вставить("ОсновноеСредство");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
 	
	// Проверка соответствия организации ОС и организации документа
	ТекОрганизация = Организация;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаСреза"     , МоментВремени());
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.УстановитьПараметр("СписокОС"      , ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МестонахождениеОС.ОсновноеСредство    КАК ОС
	               |ИЗ
	               |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаСреза,
				   |	                Организация = &ТекОрганизация И ОсновноеСредство В (&СписокОС))
				   |	                КАК МестонахождениеОС";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для каждого СтрокаОС Из ОС Цикл
		
		ТекОС = СтрокаОС.ОсновноеСредство;
	
		Если Не Выборка.НайтиСледующий(ТекОС, "ОС") Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаОС.НомерСтроки + "." + Символы.ПС + Символы.Таб
					+ "Бухг. учет: Основного средства """ + ТекОс + """ нет в наличии по организации """ + ТекОрганизация + """.",
					Отказ, Заголовок);
			
		КонецЕсли;
		
		Выборка.Сбросить();
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Событие");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.Прочее,
								  ПредставлениеРеквизита,Отказ);

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового (в общем регламентного) учета
Процедура ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ) Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("СобытиеРегл");	

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим чем заполнено событие
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
							  Перечисления.ВидыСобытийОС.Прочее,
							  ПредставлениеРеквизита,Отказ);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Сформируем структуру табличной части
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство" , "ОсновноеСредство");

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();

	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
		
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеОС") Тогда
		
		// Заполнение шапки
		Организация   = Основание.Организация;
		ОтражатьВУправленческомУчете     = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете 	 = Основание.ОтражатьВБухгалтерскомУчете;
		
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");;

		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			НоваяСтрока = ОС.Добавить();
			НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью
