////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(НазваниеМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если НЕ Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат Неопределено;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;


	// Получить экземпляр документа на печать
	Если      НазваниеМакета = "ШтатноеРасписание" Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзменениеШтатногоРасписанияОрганизации_ШтатноеРасписание";

		НовыйОтчет = Отчеты.УтвержденноеШтатноеРасписаниеОрганизаций.Создать();
		НовыйОтчет.ДатаАктуальности = Дата;
		НовыйОтчет.Организация = Организация;
		НовыйОтчет.Регистратор = Ссылка;

		ЕстьОшибки = ЛОЖЬ;
		НовыйОтчет.СформироватьОтчет(ТабДокумент,ЕстьОшибки);
		Если ЕстьОшибки тогда
			Предупреждение("При формировании отчета возникли ошибки!");
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Изменение штатного расписания"));

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ШтатноеРасписание","Штатное расписание");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Штатные единицы" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШтатныеЕдиницы(Режим)
	

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДатаДока", Дата);
	Запрос.УстановитьПараметр("ДатаДока1", Дата + 1);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений": 
	// 1. Выборка "СтрокиДокумента": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением 
    //      реквизитов "Подразделение" и "Должность"
	// 3. Выборка "ШтатноеРасписание": 
    //      Из регистра сведений выбираем сведения об изменяемых штатных единицах.
    //

	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
	               |	СтрокиДокумента.Подразделение,
	               |	СтрокиДокумента.Должность,
	               |	СтрокиДокумента.КоличествоСтавок,
	               |	СтрокиДокумента.МинимальнаяТарифнаяСтавка,
	               |	СтрокиДокумента.МаксимальнаяТарифнаяСтавка,
	               |	СтрокиДокумента.ВидТарифнойСтавки,
	               |	СтрокиДокумента.ВалютаТарифнойСтавки,
	               |	СтрокиДокумента.ГрафикРаботы,
	               |	ВЫБОР КОГДА СтрокиДокумента.Подразделение.Владелец <> &Организация ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	               |	МИНИМУМ(ПересекающиесяСтроки.НомерСтроки) КАК КонфликтнаяСтрока,
	               |	ШтатноеРасписание.КоличествоСтавок КАК БылоСтавок,
	               |	ВЫБОР КОГДА ШтатноеРасписание.Период = &ДатаДока ТОГДА ШтатноеРасписание.Регистратор.Представление ИНАЧЕ ЛОЖЬ КОНЕЦ КАК НайденоСуществующееДвижение
	               |ИЗ
	               |	Документ.ИзменениеШтатногоРасписанияОрганизаций.ШтатныеЕдиницы КАК СтрокиДокумента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписанияОрганизаций.ШтатныеЕдиницы КАК ПересекающиесяСтроки
	               |		ПО СтрокиДокумента.Ссылка = ПересекающиесяСтроки.Ссылка И СтрокиДокумента.Подразделение = ПересекающиесяСтроки.Подразделение И СтрокиДокумента.Должность = ПересекающиесяСтроки.Должность И СтрокиДокумента.НомерСтроки < ПересекающиесяСтроки.НомерСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаДока1, ПодразделениеОрганизации В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	ИзменениеШтатногоРасписанияОрганизацииШтатныеЕдиницы.Подразделение ИЗ Документ.ИзменениеШтатногоРасписанияОрганизаций.ШтатныеЕдиницы КАК ИзменениеШтатногоРасписанияОрганизацииШтатныеЕдиницы ГДЕ 	ИзменениеШтатногоРасписанияОрганизацииШтатныеЕдиницы.Ссылка = &ДокументСсылка )) КАК ШтатноеРасписание
	               |		ПО СтрокиДокумента.Подразделение = ШтатноеРасписание.ПодразделениеОрганизации И СтрокиДокумента.Должность = ШтатноеРасписание.Должность
	               |
	               |ГДЕ
	               |	СтрокиДокумента.Ссылка = &ДокументСсылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтрокиДокумента.НомерСтроки,
	               |	СтрокиДокумента.Подразделение,
	               |	СтрокиДокумента.Должность,
	               |	СтрокиДокумента.КоличествоСтавок,
	               |	СтрокиДокумента.МинимальнаяТарифнаяСтавка,
	               |	СтрокиДокумента.МаксимальнаяТарифнаяСтавка,
	               |	СтрокиДокумента.ВидТарифнойСтавки,
	               |	СтрокиДокумента.ВалютаТарифнойСтавки,
	               |	СтрокиДокумента.ГрафикРаботы,
	               |	ШтатноеРасписание.КоличествоСтавок,
	               |	ВЫБОР КОГДА ШтатноеРасписание.Период = &ДатаДока ТОГДА ШтатноеРасписание.Регистратор.Представление ИНАЧЕ ЛОЖЬ КОНЕЦ";
	
	Возврат Запрос.Выполнить();


КонецФункции // СформироватьЗапросПоВыданныеАвансы()

// Формирует запрос по таблице "Надбавки" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоНадбавки(Режим)
	

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
	               |	СтрокиДокумента.Подразделение,
	               |	СтрокиДокумента.Должность,
	               |	СтрокиДокумента.ВидНадбавки,
	               |	СтрокиДокумента.ВидНадбавки.СпособРасчета,
	               |	СтрокиДокумента.Показатель1,
				   |	СтрокиДокумента.Показатель2,
				   |	СтрокиДокумента.Показатель3,
				   |	СтрокиДокумента.Показатель4,
				   |	СтрокиДокумента.Показатель5,
				   |	СтрокиДокумента.Показатель6,
	               |	СтрокиДокумента.Валюта1,
				   |	СтрокиДокумента.Валюта2,
				   |	СтрокиДокумента.Валюта3,
				   |	СтрокиДокумента.Валюта4,
				   |	СтрокиДокумента.Валюта5,
				   |	СтрокиДокумента.Валюта6,
	               |	ВЫБОР КОГДА СтрокиДокумента.Подразделение.Владелец <> &Организация ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	               |	МИНИМУМ(ПересекающиесяСтроки.НомерСтроки) КАК КонфликтнаяСтрока,
	               |	НадбавкиПоШтатномуРасписаниюОрганизаций.Регистратор.Представление КАК КонфликтныйДокумент 
	               |ИЗ
	               |	Документ.ИзменениеШтатногоРасписанияОрганизаций.Надбавки КАК СтрокиДокумента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписанияОрганизаций.Надбавки КАК ПересекающиесяСтроки
	               |		ПО СтрокиДокумента.Ссылка = ПересекающиесяСтроки.Ссылка И СтрокиДокумента.Подразделение = ПересекающиесяСтроки.Подразделение И СтрокиДокумента.Должность = ПересекающиесяСтроки.Должность И СтрокиДокумента.НомерСтроки < ПересекающиесяСтроки.НомерСтроки И СтрокиДокумента.ВидНадбавки = ПересекающиесяСтроки.ВидНадбавки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций КАК НадбавкиПоШтатномуРасписаниюОрганизаций
	               |		ПО СтрокиДокумента.Подразделение = НадбавкиПоШтатномуРасписаниюОрганизаций.ПодразделениеОрганизации И СтрокиДокумента.Должность = НадбавкиПоШтатномуРасписаниюОрганизаций.Должность И СтрокиДокумента.Должность = НадбавкиПоШтатномуРасписаниюОрганизаций.Должность И СтрокиДокумента.Ссылка.Дата = НадбавкиПоШтатномуРасписаниюОрганизаций.Период
	               |
	               |ГДЕ
	               |	СтрокиДокумента.Ссылка = &ДокументСсылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтрокиДокумента.НомерСтроки,
	               |	СтрокиДокумента.Подразделение,
	               |	СтрокиДокумента.Должность,
	               |	СтрокиДокумента.ВидНадбавки,
	               |	СтрокиДокумента.Показатель1,
	               |	СтрокиДокумента.Валюта1,
				   |	СтрокиДокумента.Показатель2,
	               |	СтрокиДокумента.Валюта2,
				   |	СтрокиДокумента.Показатель3,
	               |	СтрокиДокумента.Валюта3,
				   |	СтрокиДокумента.Показатель4,
	               |	СтрокиДокумента.Валюта4,
				   |	СтрокиДокумента.Показатель5,
	               |	СтрокиДокумента.Валюта5,
                   |	СтрокиДокумента.Показатель6,
	               |	СтрокиДокумента.Валюта6,
	               |	НадбавкиПоШтатномуРасписаниюОрганизаций.Регистратор";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВыданныеАвансы()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Штатные единицы" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиШтатнойЕдиницы(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Штатные единицы"": ";
									
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Подразделение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано подразделение!", Отказ);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение другой организации!", Отказ);
	КонецЕсли;

	// Должность
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана должность!", Отказ);
	КонецЕсли;

	// КоличествоСтавок требуем только для новых строк
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КоличествоСтавок) и НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БылоСтавок) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано количество ставок по создаваемой штатной единице!", Отказ);
	КонецЕсли;

	// если строка шт.расписания вычеркивается - проверяем не все
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КоличествоСтавок) или НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БылоСтавок) Тогда
		
		// ВидТарифнойСтавки
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидТарифнойСтавки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид тарифной ставки!", Отказ);
		КонецЕсли;
		
		// ГрафикРаботы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан график работы!", Отказ);
		КонецЕсли;
		
		// Валюта
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВалютаТарифнойСтавки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана валюта!", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// повторяющиеся строки
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в строке № " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока + " повторно описывается та же штатная единица!", Отказ);
	КонецЕсли;
	
	// конфликтующий документ
	Если ВыборкаПоСтрокамДокумента.НайденоСуществующееДвижение <> Ложь Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "документом " + ВыборкаПоСтрокамДокумента.НайденоСуществующееДвижение + " штатная единица уже описана!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиШтатнойЕдиницы()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Надбавки" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиНадбавок(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Надбавки"": ";
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Подразделение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано подразделение!", Отказ);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ);
	КонецЕсли;

	// Должность
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана должность!", Отказ);
	КонецЕсли;

	// ВидНадбавки
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидНадбавки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана надбавка!", Отказ);
	КонецЕсли;

	//*// Валюта
	//Если ВыборкаПоСтрокамДокумента.ВидНадбавкиСпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.Процентом 
	//	И ВыборкаПоСтрокамДокумента.ВидНадбавкиСпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы
	//	И ВыборкаПоСтрокамДокумента.ВидНадбавкиСпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы
	//	Тогда
	//	Если (ВыборкаПоСтрокамДокумента.ВидНадбавки.Показатель1.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.Процентный И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Показатель1) И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Валюта1)) ИЛИ
	//		(ВыборкаПоСтрокамДокумента.ВидНадбавки.Показатель2.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.Процентный И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Показатель2) И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Валюта2)) ИЛИ
	//		(ВыборкаПоСтрокамДокумента.ВидНадбавки.Показатель3.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.Процентный И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Показатель3) И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Валюта3)) Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана валюта!", Отказ);
	//	КонецЕсли;	
	//КонецЕсли;

	// повторяющиеся строки
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в строке № " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока + " повторно описывается та же надбавка!", Отказ);
	КонецЕсли;
	
	// конфликтующий документ
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйДокумент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "надбавка по штатной единице уже описана!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНадбавок()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамСведений.Вставить("ШтатноеРасписаниеОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("НадбавкиПоШтатномуРасписаниюОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВШтатноеРасписание(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, 
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "ШтатноеРасписаниеОрганизаций";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период						= ВыборкаПоШапкеДокумента  .Дата;

		// Измерения
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.Подразделение;
		Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;

		// Ресурсы
		Движение.КоличествоСтавок			= ВыборкаПоСтрокамДокумента.КоличествоСтавок;
		Движение.МинимальнаяТарифнаяСтавка	= ВыборкаПоСтрокамДокумента.МинимальнаяТарифнаяСтавка;
		Движение.МаксимальнаяТарифнаяСтавка = ВыборкаПоСтрокамДокумента.МаксимальнаяТарифнаяСтавка;
		Движение.ВидТарифнойСтавки			= ВыборкаПоСтрокамДокумента.ВидТарифнойСтавки;
		Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
		Движение.ВалютаТарифнойСтавки		= ВыборкаПоСтрокамДокумента.ВалютаТарифнойСтавки;
		
	КонецЕсли; 
					
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНадбавок(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, 
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

  // Если документ нужно проводить по регистру, то для него есть ключ в структуре
  ИмяРегистра = "НадбавкиПоШтатномуРасписаниюОрганизаций";
  Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

	  Движение = Движения[ИмяРегистра].Добавить();

	  // Свойства
	  Движение.Период						= ВыборкаПоШапкеДокумента  .Дата;

	  // Измерения
	  Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.Подразделение;
	  Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
	  Движение.ВидНадбавки					= ВыборкаПоСтрокамДокумента.ВидНадбавки;

	  // Ресурсы
	  Движение.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;
	  Движение.Валюта1						= ВыборкаПоСтрокамДокумента.Валюта1;
	  Движение.Показатель2					= ВыборкаПоСтрокамДокумента.Показатель2;
	  Движение.Валюта2						= ВыборкаПоСтрокамДокумента.Валюта2;
	  Движение.Показатель3					= ВыборкаПоСтрокамДокумента.Показатель3;
	  Движение.Валюта3						= ВыборкаПоСтрокамДокумента.Валюта3;
	  Движение.Показатель4					= ВыборкаПоСтрокамДокумента.Показатель4;
	  Движение.Валюта4						= ВыборкаПоСтрокамДокумента.Валюта4;
	  Движение.Показатель5					= ВыборкаПоСтрокамДокумента.Показатель5;
	  Движение.Валюта5						= ВыборкаПоСтрокамДокумента.Валюта5;
	  Движение.Показатель6					= ВыборкаПоСтрокамДокумента.Показатель6;
	  Движение.Валюта6						= ВыборкаПоСтрокамДокумента.Валюта6;

  КонецЕсли;
					
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;

    РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	// Получим реквизиты шапки из запроса
    ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);

			РезультатЗапросаПоШтатныеЕдиницы = СформироватьЗапросПоШтатныеЕдиницы(Режим);
		    РезультатЗапросаПоНадбавки = СформироватьЗапросПоНадбавки(Режим);

			// В циклах по строкам табличных частей будем добавлять информацию в движения регистров
	        ВыборкаПоШтатныеЕдиницы = РезультатЗапросаПоШтатныеЕдиницы.Выбрать();
	        Пока ВыборкаПоШтатныеЕдиницы.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиШтатнойЕдиницы(ВыборкаПоШапкеДокумента, ВыборкаПоШтатныеЕдиницы, Отказ);

				// Движения стоит записывать, если в проведении еще не отказано (отказ =ложь)
				Если Не Отказ Тогда
					ДобавитьСтрокуВШтатноеРасписание(ВыборкаПоШапкеДокумента, ВыборкаПоШтатныеЕдиницы, СтруктураПроведенияПоРегистрамСведений);
				КонецЕсли;

			КонецЦикла;
			
	        ВыборкаПоНадбавки = РезультатЗапросаПоНадбавки.Выбрать();
	        Пока ВыборкаПоНадбавки.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНадбавок(ВыборкаПоШапкеДокумента, ВыборкаПоНадбавки, Отказ);

				// Движения стоит записывать, если в проведении еще не отказано (отказ =ложь)
				Если Не Отказ Тогда
					ДобавитьСтрокуНадбавок(ВыборкаПоШапкеДокумента, ВыборкаПоНадбавки, СтруктураПроведенияПоРегистрамСведений);
				КонецЕсли;

			КонецЦикла;
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание = Неопределено)

	#Если Не Клиент И Не ВнешнееСоединение Тогда
		
		глТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		
	#КонецЕсли
	
	// Вызвать общую процедуру для заполнения основных реквизитов
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	// Дозаполнить особенные для формы реквизиты
	
	Если Основание <> Неопределено Тогда
		// Заполнить реквизиты по метаданным на полное совпадение имени и типа
		Для каждого РеквизитШапки Из ЭтотОбъект.Метаданные().Реквизиты Цикл
			Попытка
				Если Строка(Основание.Метаданные().Реквизиты[РеквизитШапки.Имя].Тип) = Строка(РеквизитШапки.Тип) Тогда
					ЭтотОбъект[РеквизитШапки.Имя] = Основание[РеквизитШапки.Имя];
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;

		// Заполнить отдельно для каждого вида основания в зависимости от типа/вида
		ЭтотОбъект.Комментарий = "Введен на основании документа " + Основание.Метаданные().Представление() + " №" +
								 Основание.Номер + ".";

	КонецЕсли;

						 
КонецПроцедуры // ОбработкаЗаполнения()

