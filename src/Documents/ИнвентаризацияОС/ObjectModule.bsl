Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "Подразделение,
								|МОЛ,
								|ОС.КоличествоУУ,
								|ОС.КоличествоПоФактуУУ,
								|ОС.РасхожденияУУ,
								|ОС.ПримечанияУУ
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "ПодразделениеОрганизации,
								|МОЛОрганизации,
								|ОС.КоличествоБУ,
								|ОС.КоличествоПоФактуБУ,
								|ОС.РасхожденияБУ,
								|ОС.ПримечанияБУ
								|";
	мСтрокаРеквизитыНалУчета = "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьУправленческий(Черновик = Ложь)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнвентаризацияОС.Дата                        КАК ДатаАкта,
	               |	ИнвентаризацияОС.Номер                       КАК НомерАкта,
	               |	ИнвентаризацияОС.Подразделение.Представление КАК Подразделение,
	               |	ИнвентаризацияОС.МОЛ.Представление           КАК МОЛ
	               |ИЗ
	               |	Документ.ИнвентаризацияОС                    КАК ИнвентаризацияОС
	               |
	               |ГДЕ
	               |	ИнвентаризацияОС.Ссылка = &Ссылка";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",   Ссылка);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.ЗаводскойНомер     КАК ЗаводскойНомер,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.ДатаВыпуска        КАК ГодВыпуска,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.НомерПаспорта      КАК НомерПаспорта,
	               |	ИнвентаризацияОСОС.КоличествоУУ                        КАК Количество," + ?(Не Черновик,"
	               |	ИнвентаризацияОСОС.КоличествоПоФактуУУ                 КАК КоличествоПоФакту,", "") + "
	               |	ИнвентаризацияОСОС.ПримечанияУУ                        КАК Примечания,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.Код                КАК ИнвентарныйНомер
	               |ИЗ
	               |	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	               |
	               |ГДЕ
	               |	ИнвентаризацияОСОС.Ссылка = &Ссылка
	               |
	               |ИТОГИ СУММА(Количество)" + ?(Не Черновик, " ,СУММА(КоличествоПоФакту)", "") + " ПО
	               |	ОБЩИЕ";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	Макет         = ПолучитьМакет("Инвентаризация");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьШапкаТаблицы.Параметры.ТипУчета_ = "Управлін-";
	ОбластьШапкаТаблицы.Параметры.ТипУчета  = "ського";
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
	ОбластьМакета.Параметры.Организация = "Управлінський облік";
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);
	НомерПП = 0;
	СтруктураПодвала = Новый Структура;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапке.МОЛ) Тогда
		
		СтруктураПодвала.Вставить("МОЛ", "/ " + ВыборкаПоШапке.МОЛ + " /");
		
	КонецЕсли;
	
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	Пока ВыборкаПоОС.Следующий() Цикл
		
		Если ВыборкаПоОС.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			
			Если Не Черновик Тогда
				
				СтруктураПодвала.Вставить("КоличествоИтого",        ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.Количество));
				СтруктураПодвала.Вставить("КоличествоПоФактуИтого", ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.КоличествоПоФакту));
				
			КонецЕсли;
			
			Продолжить
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) и НЕ ЗначениеЗаполнено(ВыборкаПоОС.Примечания)
			и (Черновик или НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоличествоПоФакту)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НомерПП                       = НомерПП + 1;
		ОбластьМакета                 = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Номер = НомерПП;
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Если Черновик Тогда
		
		ЧислоПустыхСтрок = 0;
		
		Если ВвестиЧисло(ЧислоПустыхСтрок, "Сколько пустых строк вывести?", 5, 0) Тогда
			
			Для Н = 1 По ЧислоПустыхСтрок Цикл
			
				НомерПП                       = НомерПП + 1;
				ОбластьМакета                 = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Номер = НомерПП;
		
				Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ОбластьШапкаТаблицы);
					
				КонецЕсли;
		
				ТабДокумент.Вывести(ОбластьМакета);
			
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе //Если не черновик, то выводится подвал
		
		Если НомерПП <> 0 Тогда
			
			СтруктураПодвала.Вставить("НачальнийНомер", 1);
			СтруктураПодвала.Вставить("КонечныйНомер",  НомерПП);
			СтруктураПодвала.Вставить("ПорядковыеПрописью",  ЧислоПрописью(НомерПП,"Л=uk_UA;НП=Ложь;НД=Ложь",",,,м,,,,,0"));
			СтруктураПодвала.Вставить("КоличествоПрописью",  ЧислоПрописью(СтруктураПодвала.КоличествоПоФактуИтого,
			                                                               "Л=uk_UA;НП=Ложь;НД=Ложь",",,,ж,,,,,0"));
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(СтруктураПодвала);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоКомиссии);
		
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Расписка");
		ОбластьМакета.Параметры.Заполнить(СтруктураПодвала);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;	
	
    ТабДокумент.ОбластьПечати = ТабДокумент.Область( , 2, , 10);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьУправленческий()

// Функция формирует табличный документ с печатной формой
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьБухгалтерский(Черновик = Ложь)
	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",         Ссылка);
	Запрос.УстановитьПараметр("ТекДата",        МоментВремени());
	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнвентаризацияОС.Дата                                   КАК ДатаАкта,
	               |	ИнвентаризацияОС.Номер                                  КАК НомерАкта,
	               |	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК Подразделение,
	               |	ИнвентаризацияОС.МОЛОрганизации.Представление           КАК МОЛ,
	               |	ВЫРАЗИТЬ(ИнвентаризацияОС.Организация.НаименованиеПолное 
				   |	                          КАК СТРОКА(1000))             КАК Организация,
	               |	КодыОрганизации.КодПоЕДРПОУ                             КАК ЕДРПОУ
	               |ИЗ
	               |	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ТекДата,
				   |		                                 Организация = &ТекОрганизация) КАК КодыОрганизации
	               |		ПО ИнвентаризацияОС.Организация = КодыОрганизации.Организация
	               |
	               |ГДЕ
	               |	ИнвентаризацияОС.Ссылка = &Ссылка";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",   Ссылка);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПервоначальныеСведенияБУ.ИнвентарныйНомер              КАК ИнвентарныйНомер,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.ЗаводскойНомер     КАК ЗаводскойНомер,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.ДатаВыпуска        КАК ГодВыпуска,
	               |	ИнвентаризацияОСОС.ОсновноеСредство.НомерПаспорта      КАК НомерПаспорта,
	               |	ИнвентаризацияОСОС.КоличествоБУ                        КАК Количество," + ?(Не Черновик, "
	               |	ИнвентаризацияОСОС.КоличествоПоФактуБУ                 КАК КоличествоПоФакту,", "") + "
	               |	ИнвентаризацияОСОС.ПримечанияБУ КАК Примечания
	               |ИЗ
	               |	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет 
				   |		                         КАК ПервоначальныеСведенияБУ
	               |		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияБУ.ОсновноеСредство
	               |
	               |ГДЕ
	               |	ИнвентаризацияОСОС.Ссылка = &Ссылка
	               |
	               |ИТОГИ СУММА(Количество)" + ?(Не Черновик, " ,СУММА(КоличествоПоФакту)", "") + " ПО
	               |	ОБЩИЕ";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТабДокумент         = Новый ТабличныйДокумент();
	Макет               = ПолучитьМакет("Инвентаризация");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьШапкаТаблицы.Параметры.ТипУчета_ = "Бухгалтер-";
	ОбластьШапкаТаблицы.Параметры.ТипУчета  = "ського";
	ОбластьМакета       = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
	ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);
	НомерПП = 0;
	СтруктураПодвала = Новый Структура;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапке.МОЛ) Тогда
		
		СтруктураПодвала.Вставить("МОЛ", "/ " + ВыборкаПоШапке.МОЛ + " /");
		
	КонецЕсли;
	
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	Пока ВыборкаПоОС.Следующий() Цикл
		
		Если ВыборкаПоОС.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			
			Если Не Черновик Тогда
				
				СтруктураПодвала.Вставить("КоличествоИтого",        ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.Количество));
				СтруктураПодвала.Вставить("КоличествоПоФактуИтого", ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.КоличествоПоФакту));
				
			КонецЕсли;
			
			Продолжить
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) и НЕ ЗначениеЗаполнено(ВыборкаПоОС.Примечания)
			и (Черновик или НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоличествоПоФакту)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НомерПП                       = НомерПП + 1;
		ОбластьМакета                 = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Номер = НомерПП;
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Если Черновик Тогда
		
		ЧислоПустыхСтрок = 0;
		
		Если ВвестиЧисло(ЧислоПустыхСтрок, "Сколько пустых строк вывести?", 5, 0) Тогда
			
			Для Н = 1 По ЧислоПустыхСтрок Цикл
			
				НомерПП                       = НомерПП + 1;
				ОбластьМакета                 = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Номер = НомерПП;
				
				Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабДокумент.Вывести(ОбластьШапкаТаблицы);
					
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакета);
			
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе //Если не черновик, то выводится подвал
		
		Если НомерПП <> 0 Тогда
			
			СтруктураПодвала.Вставить("НачальнийНомер", 1);
			СтруктураПодвала.Вставить("КонечныйНомер",  НомерПП);
			СтруктураПодвала.Вставить("ПорядковыеПрописью",  ЧислоПрописью(НомерПП,"Л=uk_UA;НП=Ложь;НД=Ложь",",,,м,,,,,0"));
			СтруктураПодвала.Вставить("КоличествоПрописью",  ЧислоПрописью(СтруктураПодвала.КоличествоПоФактуИтого,
			                                                               "Л=uk_UA;НП=Ложь;НД=Ложь",",,,ж,,,,,0"));
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(СтруктураПодвала);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоКомиссии);
		
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Расписка");
		ОбластьМакета.Параметры.Заполнить(СтруктураПодвала);
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда			
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;	
	
    ТабДокумент.ОбластьПечати = ТабДокумент.Область( , 2, , 10);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьБухгалтерский()

// Функция формирует табличный документ по регламентированной форме ОЗ-9
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
Функция ПечатьОЗ9(ПечатьПоДаннымУпрУчета = Ложь)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",         Ссылка);
	Запрос.УстановитьПараметр("ТекДата",        МоментВремени());
	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ИнвентаризацияОС.Дата                                   КАК ДатаАкта,
	|	ИнвентаризацияОС.Номер                                  КАК НомерАкта,"
	+ ?(ПечатьПоДаннымУпрУчета,"
	|	ИнвентаризацияОС.Подразделение.Представление КАК Подразделение,
	|	ИнвентаризацияОС.МОЛ.Представление           КАК МОЛ"
	 , "
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК Подразделение,
	|	ИнвентаризацияОС.МОЛОрганизации.Представление           КАК МОЛ,
	|	ВЫРАЗИТЬ(ИнвентаризацияОС.Организация.НаименованиеПолное 
	|	                          КАК СТРОКА(1000))             КАК Организация,
	|	КодыОрганизации.КодПоЕДРПОУ                             КАК ЕДРПОУ"
	)+ "
	|ИЗ
	|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ТекДата,
	|		                                 Организация = &ТекОрганизация) КАК КодыОрганизации
	|		ПО ИнвентаризацияОС.Организация = КодыОрганизации.Организация
	|
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка = &Ссылка";
	
	
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаДок"             , Дата);
	Запрос.УстановитьПараметр("МоментДок"           , МоментВремени());
	Запрос.УстановитьПараметр("Организация"           , Организация);
	Запрос.УстановитьПараметр("Ссылка"              , Ссылка);
	Запрос.УстановитьПараметр("СписокОС"            , СписокОС);
	Запрос.УстановитьПараметр("СостояниеСнятоСУчета", Перечисления.СостоянияОС.СнятоСУчета);
	
	Если ПечатьПоДаннымУпрУчета Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияОС.Период                        КАК ДатаДок,
		|	ПервоначальныеСведенияОС.Регистратор.Номер             КАК НомерДок,
		|	ИнвентаризацияОСОС.ОсновноеСредство.Код                КАК ИнвентарныйНомер,
		|	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
		|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимость       КАК БалансоваяСтоимость,
		|	СостояниеОС.ДатаСписания                               КАК ДатаСписания,
		|	СостояниеОС.НомерСписания                              КАК НомерСписания,
		|	СостояниеОС.ПричинаСписания                            КАК ПричинаСписания
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
		|			                &МоментДок, 
		|			                ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			(ВЫБРАТЬ
		|				СостоянияОС.ОсновноеСредство  КАК ОсновноеСредство,
		|				ВЫБОР
		|					КОГДА СостоянияОС.Регистратор ССЫЛКА Документ.СписаниеОС
		|						ТОГДА СостоянияОС.Регистратор.ПричинаСписания
		|					ИНАЧЕ ""Передача""
		|				КОНЕЦ                         КАК ПричинаСписания,
		|				СостоянияОС.ДатаСостояния     КАК ДатаСписания,
		|				СостоянияОС.Регистратор.Номер КАК НомерСписания
		|			ИЗ
		|				РегистрСведений.СостоянияОС КАК СостоянияОС
		|			ГДЕ
		|				СостоянияОС.Состояние = &СостояниеСнятоСУчета
		|				И СостоянияОС.ОсновноеСредство В(&СписокОС)
		|				И СостоянияОС.ДатаСостояния <= &ДатаДок) КАК СостояниеОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка = &Ссылка";
		
	Иначе

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияОС.Период                        КАК ДатаДок,
		|	ПервоначальныеСведенияОС.Регистратор.Номер             КАК НомерДок,
		|	ПервоначальныеСведенияОС.ИнвентарныйНомер              КАК ИнвентарныйНомер,
		|	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
		|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимость       КАК БалансоваяСтоимость,
		|	СостояниеОС.НомерСписания                              КАК НомерСписания,
		|	СостояниеОС.ДатаСписания                               КАК ДатаСписания,
		|	СостояниеОС.ПричинаСписания                            КАК ПричинаСписания
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			               &МоментДок,
		|			               Организация = &Организация
		|			               И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			(ВЫБРАТЬ
		|				СостоянияОС.ОсновноеСредство  КАК ОсновноеСредство,
		|				СостоянияОС.Регистратор.Номер КАК НомерСписания,
		|				СостоянияОС.ДатаСостояния     КАК ДатаСписания,
		|				ВЫБОР
		|					КОГДА СостоянияОС.Регистратор ССЫЛКА Документ.СписаниеОС
		|						ТОГДА СостоянияОС.Регистратор.ПричинаСписания
		|					ИНАЧЕ ""Передача""
		|				КОНЕЦ                         КАК ПричинаСписания
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
		|			ГДЕ
		|				СостоянияОС.Организация = &Организация
		|				И СостоянияОС.ОсновноеСредство В(&СписокОС)
		|				И СостоянияОС.Состояние = &СостояниеСнятоСУчета
		|				И СостоянияОС.ДатаСостояния <= &ДатаДок) КАК СостояниеОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка = &Ссылка";
		
	КонецЕсли;

	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТабДокумент         = Новый ТабличныйДокумент();
	Макет               = ПолучитьМакет("ОЗ9");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
	
	Если Не ПечатьПоДаннымУпрУчета Тогда
		
		ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
		
	Иначе
		
		ОбластьМакета.Параметры.Организация = "Управлінський облік";
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Номера = Макет.ПолучитьОбласть("Номера");
	ТабДокумент.Вывести(Номера);
	ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("R"+ ТабДокумент.ВысотаТаблицы);
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Пока ВыборкаПоОС.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(ВыборкаПоОС);
		ТабДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Возврат ТабДокумент;


КонецФункции // ПечатьОЗ9()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Управленческий" тогда
		
		ТабДокумент = ПечатьУправленческий();
		
	ИначеЕсли  ИмяМакета = "УправленческийЧерновик" Тогда
		
		ТабДокумент = ПечатьУправленческий(Истина);
		
	ИначеЕсли ИмяМакета = "Бухгалтерский" Тогда
		
		ТабДокумент = ПечатьБухгалтерский();
		
	ИначеЕсли ИмяМакета = "БухгалтерскийЧерновик" Тогда
		
		ТабДокумент = ПечатьБухгалтерский(Истина);
		
	ИначеЕсли ИмяМакета = "Управленческий" Тогда
		
		ТабДокумент = ПечатьБухгалтерский(Истина);
		
	ИначеЕсли ИмяМакета = "ОЗ9бух" Тогда
		
		ТабДокумент = ПечатьОЗ9();
		
	ИначеЕсли ИмяМакета = "ОЗ9упр" Тогда
		
		ТабДокумент = ПечатьОЗ9(Истина);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	Если ОтражатьВУправленческомУчете Тогда
		
		СтруктураМакетов.Вставить("Управленческий",			"Управленческий учет");
		СтруктураМакетов.Вставить("УправленческийЧерновик",	"Управленческий учет (Черновик)");
		СтруктураМакетов.Вставить("ОЗ9упр",					"Форма ОЗ-9(упр. учет)");
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураМакетов.Вставить("Бухгалтерский",			"Бухгалтерский учет");
		СтруктураМакетов.Вставить("БухгалтерскийЧерновик",	"Бухгалтерский учет (Черновик)");
		СтруктураМакетов.Вставить("ОЗ9бух",					"Форма ОЗ-9(бух. учет)");
		
	КонецЕсли;
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()


// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок)

    СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ОсновноеСредство");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	
КонецПроцедуры // ПроверитьЗаполнениеТЧ


// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Подразделение");
	СтруктураПолей.Вставить("МОЛ");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового (в общем регламентного) учета
Процедура ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ) Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("ПодразделениеОрганизации");
	СтруктураПолей.Вставить("МОЛОрганизации");


	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
         
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры
