////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем СоответствиеВалютныеСпособыРасчета;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой "П-5",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьП5()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КадровоеПеремещениеОрганизаций_П5";
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаДляШапки.Следующий();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);

	// запоминаем области макета
	Макет = ПолучитьМакет("П5_от_09_10_1995");
	ОбластьМакета = Макет.ПолучитьОбласть("Форма");
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // данные из шапки
		ОбластьМакета.Параметры.НазваниеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		ОбластьМакета.Параметры.ЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
	
		
	Возврат ТабДокумент;
	
КонецФункции // ПечатьП5()		

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "П5_от_09_10_1995" Тогда
		    ТабДокумент = ПечатьП5();	
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Кадровое перемещение "));
	
КонецФункции // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("П5_от_09_10_1995", "Форма П-5 (от 09.10.1995)");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

Процедура ДобавитьСтрокиНачисленийПоРаботнику(Сотрудник, ДатаАктуальности = Неопределено) Экспорт
	
	Если ДатаАктуальности = Неопределено Тогда
		ДатаАктуальности = Дата
	КонецЕсли;
	
	ЗапросНачисления = Новый Запрос;
	ЗапросНачисления.УстановитьПараметр("Сотрудник", Сотрудник);
	ЗапросНачисления.УстановитьПараметр("Период",  ДатаАктуальности);
	ЗапросНачисления.УстановитьПараметр("Регистратор", Ссылка);
	
	ЗапросНачисления.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИзменять) КАК Действие,
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК Физлицо,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ Начисления.Показатель1
	|	КОНЕЦ КАК Показатель1,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ Начисления.Показатель2
	|	КОНЕЦ КАК Показатель2,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ Начисления.Показатель3
	|	КОНЕЦ КАК Показатель3,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ Начисления.Показатель4
	|	КОНЕЦ КАК Показатель4,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ Начисления.Показатель5
	|	КОНЕЦ КАК Показатель5,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ Начисления.Показатель6
	|	КОНЕЦ КАК Показатель6,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА Начисления.ТарифныйРазряд1
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТарифныйРазряд1,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА Начисления.ТарифныйРазряд2
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТарифныйРазряд2,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА Начисления.ТарифныйРазряд3
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТарифныйРазряд3,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА Начисления.ТарифныйРазряд4
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТарифныйРазряд4,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА Начисления.ТарифныйРазряд5
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТарифныйРазряд5,
	|	ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА Начисления.ТарифныйРазряд6
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТарифныйРазряд6,
	|	Начисления.Валюта1 КАК Валюта1,
	|	Начисления.Валюта2 КАК Валюта2,
	|	Начисления.Валюта3 КАК Валюта3,
	|	Начисления.Валюта4 КАК Валюта4,
	|	Начисления.Валюта5 КАК Валюта5,
	|	Начисления.Валюта6 КАК Валюта6
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|		&Период,
	|		Сотрудник В (&Сотрудник)
	|			И ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
	|			И Регистратор <> &Регистратор) КАК Начисления
	|ГДЕ
	|	Начисления.Актуальность";

	Выборка = ЗапросНачисления.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, ВидРасчета");
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		МассивНачислений = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(),Выборка);
		
	КонецЦикла;

КонецПроцедуры // ДобавитьСтрокиНачисленийПоРаботнику()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	КадровоеПеремещениеОрганизаций.Номер КАК НомерДок,
		|	КадровоеПеремещениеОрганизаций.Дата КАК ДатаДок,
		|	КадровоеПеремещениеОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	КадровоеПеремещениеОрганизаций.Организация.Префикс
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = &Руководитель)
		|			И КадровоеПеремещениеОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	КадровоеПеремещениеОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("РеглВалюта",	глЗначениеПеременной("ВалютаРегламентированногоУчета"));
		Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
		Запрос.УстановитьПараметр("Прием",		Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Док.ДатаНачала,
		|	Док.ДатаОкончания,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, Док.Сотрудник.Наименование) КАК Работник,
		|	ЕСТЬNULL(Док.Сотрудник.ДатаДоговора, &ПустаяДата) КАК ТрудовойДоговорДата,
		|	ЕСТЬNULL(Док.Сотрудник.НомерДоговора, """") КАК ТрудовойДоговорНомер,
		|	ВЫБОР
		|		КОГДА Док.Сотрудник.НомерДоговора ЕСТЬ NULL 
		|			ТОГДА Док.ОснованиеПеремещения
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ОснованиеПеремещения,
		|	Док.НомерСтроки КАК НомерСтроки,
		|	Док.ПодразделениеОрганизации.Наименование КАК НовоеПодразделение,
		|	Док.Должность.Наименование КАК НоваяДолжность,
		|	Работники.ПодразделениеОрганизацииНаименование КАК ПрежнееПодразделение,
		|	Работники.ДолжностьНаименование КАК ПрежняяДолжность,
		|	Начисления.Валюта1.Наименование КАК ВалютаТарифнойСтавки,
		|	ЕСТЬNULL(Начисления.Показатель1, 0) КАК ОкладТарифнаяСтавка,
		|	Начисления.ВидРасчета.СпособРасчета КАК ОкладСпособРасчета,
		|	ВЫБОР КОГДА (ПрежниеНачисления.Показатель1) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ПрежниеНачисления.Показатель1 КОНЕЦ КАК ПрежнийОкладТарифнаяСтавка,
		|	Работники.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Док
		|					ПО РаботникиВнутри.Период < Док.ДатаНачала
		|						И РаботникиВнутри.Сотрудник = Док.Сотрудник
		|			ГДЕ
		|				Док.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
		|					И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник) КАК Работники
		|		ПО Док.Сотрудник = Работники.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК Начисления
		|		ПО Док.Ссылка = Начисления.Ссылка
		|			И (Начисления.ВидРасчета.ЗачетОтработанногоВремени)
		|			И (Начисления.ВидРасчета.ЗачетНормыВремени)
		|			И Док.Сотрудник = Начисления.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		ФизЛицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				КадровоеПеремещениеОрганизацииРаботники.Сотрудник.Физлицо
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацииРаботники
		|			ГДЕ
		|				КадровоеПеремещениеОрганизацииРаботники.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО Док.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|   	ЛЕВОЕ СОЕДИНЕНИЕ (
		|   		ВЫБРАТЬ
		|   			Док.НомерСтроки КАК НомерСтроки,
		|   			ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|   			МАКСИМУМ(ПлановыеНачисления.Период) КАК Период
		|
		|   		ИЗ     
		|   			Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Док
		|   		
		|   		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
		|   		ПО		ПлановыеНачисления.Организация = Док.Ссылка.Организация 
		|   			И	ПлановыеНачисления.Сотрудник = Док.Сотрудник 
		|   			И	ПлановыеНачисления.ВидРасчетаИзмерение <> ПлановыеНачисления.ВидРасчета 
		|   			И	ПлановыеНачисления.Период < Док.ДатаНачала 
		|   	
		|   		ГДЕ Док.Ссылка = &ДокументСсылка
		|
		|   		СГРУППИРОВАТЬ ПО
		|	  			Док.НомерСтроки,
		|	  			ПлановыеНачисления.Сотрудник
		|	  ) КАК ПрежниеНачисленияПериод
		|   	ПО Док.НомерСтроки = ПрежниеНачисленияПериод.НомерСтроки 
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПрежниеНачисления
		|		ПО	Док.Сотрудник = ПрежниеНачисления.Сотрудник 
		|		И	ПрежниеНачисления.ВидРасчетаИзмерение <> ПрежниеНачисления.ВидРасчета
		|       И	ПрежниеНачисления.Период = ПрежниеНачисленияПериод.Период
        |
		|ГДЕ
		|	Док.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено;     
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровоеПеремещениеОрганизаций.Дата,
	|	КадровоеПеремещениеОрганизаций.Организация,
	|	КадровоеПеремещениеОрганизаций.Организация КАК ГоловнаяОрганизация,
	|	КадровоеПеремещениеОрганизаций.Ссылка,
	|	КадровоеПеремещениеОрганизаций.ПовышениеОкладов
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим, ПроверкаШтатногоРасписания)

	Запрос = Новый Запрос;

	СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокСтруктурныхПодразделений.Добавить(Организация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата",						Дата('00010101'));
	Запрос.УстановитьПараметр("Прием",							Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникиДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизации на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения"
	//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "РаботникиОрганизации":
	//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистру РаботникиОрганизации за период [ДатаНачала, ДатаОкончания]
	
	Если ПроверкаШтатногоРасписания Тогда
		
		// определим самую раннюю дату перемещения, чтобы с нее начать расчет остатков штатных единиц
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаНачала) КАК ДатаНачала
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацииРаботникиОрганизации
		|ГДЕ
		|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаНачала <> &ПустаяДата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаС = ?(ЗначениеЗаполнено(Выборка.ДатаНачала),Выборка.ДатаНачала,Дата)
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачала",	ДатаС);
		Запрос.УстановитьПараметр("Приход",		ВидДвиженияНакопления.Приход);

		//  Дополнительно используем выборки: 
		// 1. ШтатноеРасписаниеОрганизаций
		//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру ШтатноеРасписаниеОрганизаций на дату ДатаНачала
		//		для проверки наличия ставок в штатном расписании
		//		(Использует данные выборки "ДатыШтатногоРасписания")
		// 2. ЗанятоСтавок
		//		Для каждой строки ТЧРаботникиОрганизации на дату ДатаНачала
		//		подсчитываем количество занятых ставок (с учетом "предшествующих" данных текущего документа)
		//
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|	ТЧРаботникиОрганизации.ДатаОкончания КАК ДатаОкончания,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность КАК Должность,
		|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении КАК НапомнитьПоЗавершении,
		|	ТЧРаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец КАК ОрганизацияПодразделения,
		|	ВЫБОР
		|		КОГДА (НЕ ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПрежнееПодразделение,
		|	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ПрежняяОрганизация,
		|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
		|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
		|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ПрежнийГрафикРаботы,
		|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	NULL КАК КонфликтныйДокумент,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.НомерДоговора ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТрудовойДоговорПрисутствует,
		|	СвободноСтавокНаДатуПриема.ОстатокСтавок КАК ОстатокСтавок
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
		|			ДатыПоследнихДвиженийРаботников.Период КАК Период,
		|			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|			ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|			ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
		|			ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ГрафикРаботы
		|
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|					ПО Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала
		|						И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|			ГДЕ
		|				ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|				ПО ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
		|					И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник) КАК ДанныеПоРаботникуДоНазначения
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО ТЧРаботникиОрганизации2.Ссылка = ТЧРаботникиОрганизации.Ссылка
		|					И ТЧРаботникиОрганизации.НомерСтроки < ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаксимальныеПериодыШР.НомерСтроки КАК НомерСтроки,
		|			ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, 0) - ЕСТЬNULL(Вакансии.КоличествоСтавок, 0) - ЕСТЬNULL(РанееЗанятоСтавок.КоличествоСтавок, 0) + ЕСТЬNULL(ОсвобождаетсяСтавок.КоличествоСтавок, 0) КАК ОстатокСтавок
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|				Работники.Должность КАК Должность,
		|				Работники.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(ШтатноеРасписание.Период) КАК МаксПериод
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Работники
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						ЕСТЬNULL(ШтатноеРасписание.Период, &ДатаНачала) КАК Период,
		|						Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|						Работники.Должность КАК Должность
		|					ИЗ
		|						Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Работники
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		|							ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|								И Работники.Должность = ШтатноеРасписание.Должность
		|					ГДЕ
		|						Работники.Ссылка = &ДокументСсылка) КАК ШтатноеРасписание
		|					ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|						И Работники.Должность = ШтатноеРасписание.Должность
		|						И Работники.ДатаНачала >= ШтатноеРасписание.Период
		|			ГДЕ
		|				Работники.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Работники.ПодразделениеОрганизации,
		|				Работники.НомерСтроки,
		|				Работники.Должность) КАК МаксимальныеПериодыШР
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		|				ПО МаксимальныеПериодыШР.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|					И МаксимальныеПериодыШР.Должность = ШтатноеРасписание.Должность
		|					И МаксимальныеПериодыШР.МаксПериод = ШтатноеРасписание.Период
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Работники.НомерСтроки КАК НомерСтроки,
		|					Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|					Работники.Должность КАК Должность,
		|					СУММА(ВЫБОР
		|							КОГДА Вакансии.ВидДвижения = &Приход
		|								ТОГДА Вакансии.КоличествоСтавок
		|							ИНАЧЕ -Вакансии.КоличествоСтавок
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Работники
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК Вакансии
		|						ПО Работники.ПодразделениеОрганизации = Вакансии.ПодразделениеОрганизации
		|							И Работники.Должность = Вакансии.Должность
		|							И Работники.ДатаНачала >= Вакансии.Период
		|							И (Вакансии.Регистратор <> &ДокументСсылка)
		|				ГДЕ
		|					Работники.Ссылка = &ДокументСсылка
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Работники.ПодразделениеОрганизации,
		|					Работники.Должность,
		|					Работники.НомерСтроки) КАК Вакансии
		|				ПО МаксимальныеПериодыШР.НомерСтроки = Вакансии.НомерСтроки
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|					СУММА(ВЫБОР
		|							КОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала <= СтрокиДокумента.ДатаНачала
		|								ТОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ - ВЫБОР
		|							КОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаОкончания < СтрокиДокумента.ДатаНачала
		|									И КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаОкончания <> &ПустаяДата
		|									И НЕ КадровоеПеремещениеОрганизацийРаботникиОрганизации.НапомнитьПоЗавершении
		|								ТОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК СтрокиДокумента
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
		|						ПО СтрокиДокумента.Ссылка = КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка
		|							И СтрокиДокумента.НомерСтроки <> КадровоеПеремещениеОрганизацийРаботникиОрганизации.НомерСтроки
		|							И СтрокиДокумента.ПодразделениеОрганизации = КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
		|							И СтрокиДокумента.Должность = КадровоеПеремещениеОрганизацийРаботникиОрганизации.Должность
		|				ГДЕ
		|					СтрокиДокумента.Ссылка = &ДокументСсылка
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СтрокиДокумента.НомерСтроки) КАК РанееЗанятоСтавок
		|				ПО МаксимальныеПериодыШР.НомерСтроки = РанееЗанятоСтавок.НомерСтроки
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Работники.НомерСтроки КАК НомерСтроки,
		|					Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|					Работники.Должность КАК Должность,
		|					ИтогоЗанятоПоДолжности.КоличествоСтавок КАК КоличествоСтавок
		|				ИЗ
		|					Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК Работники
		|						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							СУММА(	РаботникиОрганизаций.ЗанимаемыхСтавок
		|									) КАК КоличествоСтавок,
		|									РаботникиОрганизаций.Должность КАК Должность,
		|									РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации
		|						ИЗ
		|							(ВЫБРАТЬ
		|								МАКСИМУМ(Работники.Период) КАК Период,
		|								Работники.Сотрудник КАК Сотрудник,
		|                               ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала
		|							ИЗ
		|								Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|									ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|									ПО Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала
		|										И (Работники.Регистратор.Проведен)
		|										И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|							ГДЕ
		|								ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|							
		|							СГРУППИРОВАТЬ ПО
		|								Работники.Сотрудник,ТЧРаботникиОрганизации.ДатаНачала) КАК ПоследниеСтавки
		|								ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|								ПО ПоследниеСтавки.Период = РаботникиОрганизаций.Период
		|									И ПоследниеСтавки.Сотрудник = РаботникиОрганизаций.Сотрудник
		|						
		|						СГРУППИРОВАТЬ ПО
		|									РаботникиОрганизаций.Должность,
		|									РаботникиОрганизаций.ПодразделениеОрганизации) КАК ИтогоЗанятоПоДолжности
		|						ПО ИтогоЗанятоПоДолжности.Должность = Работники.Должность
		|							И ИтогоЗанятоПоДолжности.ПодразделениеОрганизации = Работники.ПодразделениеОрганизации
		|				ГДЕ
		|					Работники.Ссылка = &ДокументСсылка) КАК ОсвобождаетсяСтавок
		|				ПО МаксимальныеПериодыШР.НомерСтроки = ОсвобождаетсяСтавок.НомерСтроки) КАК СвободноСтавокНаДатуПриема
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = СвободноСтавокНаДатуПриема.НомерСтроки
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""КонфликтныйДокумент"",
		|	ТЧРаботникиОрганизации.НомерСтроки,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	Работники.Регистратор,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО (НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении
		|					И (Работники.Период МЕЖДУ ТЧРаботникиОрганизации.ДатаНачала И ВЫБОР
		|						КОГДА ТЧРаботникиОрганизации.ДатаОкончания = &ПустаяДата
		|							ТОГДА &ПустаяДата
		|						ИНАЧЕ ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаОкончания, ДЕНЬ, 1)
		|					КОНЕЦ)
		|				ИЛИ Работники.Период = ТЧРаботникиОрганизации.ДатаНачала)
		|			И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|	ТЧРаботникиОрганизации.ДатаОкончания КАК ДатаОкончания,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность КАК Должность,
		|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении КАК НапомнитьПоЗавершении,
		|	ТЧРаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец КАК ОрганизацияПодразделения,
		|	ВЫБОР
		|		КОГДА (НЕ ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПрежнееПодразделение,
		|	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ПрежняяОрганизация,
		|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
		|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
		|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ПрежнийГрафикРаботы,
		|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	NULL КАК КонфликтныйДокумент,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.НомерДоговора ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТрудовойДоговорПрисутствует
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
		|			ДатыПоследнихДвиженийРаботников.Период КАК Период,
		|			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|			ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|			ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
		|			ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ГрафикРаботы
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|					ПО Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала
		|						И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|			ГДЕ
		|				ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|				ПО ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
		|					И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник) КАК ДанныеПоРаботникуДоНазначения
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО ТЧРаботникиОрганизации2.Ссылка = ТЧРаботникиОрганизации.Ссылка
		|					И ТЧРаботникиОрганизации.НомерСтроки < ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""КонфликтныйДокумент"",
		|	ТЧРаботникиОрганизации.НомерСтроки,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	Работники.Регистратор,
		|	NULL
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО (НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении
		|					И (Работники.Период МЕЖДУ ТЧРаботникиОрганизации.ДатаНачала И ВЫБОР
		|						КОГДА ТЧРаботникиОрганизации.ДатаОкончания = &ПустаяДата
		|							ТОГДА &ПустаяДата
		|						ИНАЧЕ ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаОкончания, ДЕНЬ, 1)
		|					КОНЕЦ)
		|				ИЛИ Работники.Период = ТЧРаботникиОрганизации.ДатаНачала)
		|			И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Функция СформироватьЗапросПоНачисления(ПроверкаШтатногоРасписания)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.Ссылка КАК Ссылка,
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении,
	|	ТЧНачисления.Действие КАК Действие,
	|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР КОГДА НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении 
	|	ТОГДА ТЧРаботникиОрганизации.ДатаОкончания
	|	ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КОНЕЦ КАК ДатаОкончания,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|			ТОГДА """"
	|		ИНАЧЕ ТЧНачисления.ВидРасчета
	|	КОНЕЦ КАК ВидРасчетаИзмерение,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ВидРасчета.ПроизвольнаяФормулаРасчета КАК ПроизвольнаяФормулаРасчета,
	|	ТЧНачисления.Показатель1 КАК Показатель1,
	|	ТЧНачисления.Валюта1 КАК Валюта1,
	|	ТЧНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд1,
	|	ТЧНачисления.Показатель2 КАК Показатель2,
	|	ТЧНачисления.Валюта2 КАК Валюта2,
	|	ТЧНачисления.ТарифныйРазряд2 КАК ТарифныйРазряд2,
	|	ТЧНачисления.Показатель3 КАК Показатель3,
	|	ТЧНачисления.Валюта3 КАК Валюта3,
	|	ТЧНачисления.ТарифныйРазряд3 КАК ТарифныйРазряд3,
	|	ТЧНачисления.Показатель4 КАК Показатель4,
	|	ТЧНачисления.Валюта4 КАК Валюта4,
	|	ТЧНачисления.ТарифныйРазряд4 КАК ТарифныйРазряд4,
	|	ТЧНачисления.Показатель5 КАК Показатель5,
	|	ТЧНачисления.Валюта5 КАК Валюта5,
	|	ТЧНачисления.ТарифныйРазряд5 КАК ТарифныйРазряд5,
	|	ТЧНачисления.Показатель6 КАК Показатель6,
	|	ТЧНачисления.Валюта6 КАК Валюта6,
	|	ТЧНачисления.ТарифныйРазряд6 КАК ТарифныйРазряд6
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ПО ТЧНачисления.Ссылка = ТЧРаботникиОрганизации.Ссылка
	|			И ТЧНачисления.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ПроцедурыУправленияПерсоналом.СформироватьЗапросПоПлановымНачислениям(Запрос.Выполнить().Выгрузить(), ПроверкаШтатногоРасписания);	
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаНачала
		НетДатыНачала = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НетДатыНачала Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указазана дата перемещения!", Отказ, Заголовок);
		КонецЕсли;

		// Организация сотрудника должна совпадать с организацией в документе
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный работник оформлен на другую организацию!", Отказ, Заголовок);
		КонецЕсли;

		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение, куда переводится работник!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
		КонецЕсли;

		// Должность
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана должность, на которую переводится работник!", Отказ, Заголовок);
		КонецЕсли;

		// Количество ставок
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано количество занимаемых работником ставок!", Отказ, Заголовок);
		ИначеЕсли Не НетДатыНачала И ПроверкаШтатногоРасписания Тогда
			Если ВыборкаПоСтрокамДокумента.ОстатокСтавок < ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в штатном расписании не предусмотрены ставки для перевода работника!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		Если НетСотрудника ИЛИ НетДатыНачала Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;

		// ГрафикРаботы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
		КонецЕсли;
		
		// ДатаОкончания
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) и ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала перемещения не может превышать дату окончания!", Отказ, Заголовок);
		КонецЕсли;

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда	
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		КонецЕсли;

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "одним документом допускается регистрировать только одно перемещение работника - см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
		
		Если ВыборкаПоСтрокамДокумента.ТрудовойДоговорПрисутствует И НЕ(ПустаяСтрока(РаботникиОрганизации.Найти(ВыборкаПоСтрокамДокумента.НомерСтроки,"НомерСтроки").ОснованиеПеремещения)) Тогда
			СтрокаСообщениеОбОшибке = " ""Основание перемещения"" указывается только тогда, когда с работником не был заключен трудовой договор!"; 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);			
		КонецЕсли;

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "период действия приказа противоречит кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Вид расчета
	НетВР = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
	Если НетВР И ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
	Иначе
		
		Если ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте") Тогда
			// Валюта
			Если (ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать 
				Или  ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить) 
				и СоответствиеВалютныеСпособыРасчета[ВыборкаПоСтрокамДокумента.СпособРасчета] Тогда
				
				//
				//Для СчПоказателей = 1 По ВыборкаПоСтрокамДокумента.КоличествоПоказателей Цикл
				//	ТипПоказателя = ВыборкаПоСтрокамДокумента["ВидРасчетаПоказатель" + СчПоказателей + "ТипПоказателя"];
				//	ВозможностьИзменения = ВыборкаПоСтрокамДокумента["ВидРасчетаПоказатель" + СчПоказателей + "ВозможностьИзменения"];
				//	Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный 
				//		И (ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется Или
				//		ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете Или
				//		ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете)
				//		и НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Валюта" + СчПоказателей]) Тогда
				//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана валюта начисления!", Отказ, Заголовок);
				//	КонецЕсли;					
				//	
				//КонецЦикла;
										
			КонецЕсли;
		
		КонецЕсли;
		
		// Соответствие размера "основного" начисления штатному расписанию
		Если ПроверкаШтатногоРасписания И НЕ ВыборкаПоСтрокамДокумента.РазмерСоответствуетШТР Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// Действие
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано действие!", Отказ, Заголовок);
	КонецЕсли;
	
		
	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать или ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
		ИспользуютсяНачисленияВВалюте = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
		ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Истина, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета);
	КонецЕсли;

	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.ДатаНачала = NULL Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "данный работник не введен в приказ - по нему не могут быть введены начисления!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаНачала = ВыборкаПоСтрокамДокумента.ДатаДвижения Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "на дату "+ ВыборкаПоСтрокамДокумента.ДатаНачала + " изменение начисления уже зарегистрировано документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!", Отказ, Заголовок);
	КонецЕсли;
	
	// Двойные строки
	Если Не НетВР и Не НетСотрудника и ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
		Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
			СтрокаСообщениеОбОшибке = "основное начисление работника следует редактировать в одной строке (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
		Иначе
			СтрокаСообщениеОбОшибке = "работнику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
		КонецЕсли;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента,    ВыборкаПоСтрокамДокумента, СтруктураПараметров = "")
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		//Смартис Лиманчук начало 16.05.2012
		// отразим старое место работы
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	РаботникиОрганизацииСрезПоследних.Должность КАК Должность,
		|	РаботникиОрганизацииСрезПоследних.Организация,
		|	РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение,
		|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы,
		|	РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&Период,
		|			Сотрудник = &Сотрудник
		|				И Регистратор <> &Ссылка) КАК РаботникиОрганизацииСрезПоследних";

		Запрос.УстановитьПараметр("Ссылка",	Ссылка);
		Запрос.УстановитьПараметр("Период",	ВыборкаПоСтрокамДокумента.ДатаНачала);
		Запрос.УстановитьПараметр("Сотрудник", ВыборкаПоСтрокамДокумента.Сотрудник);
				
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Движение = Движения.РаботникиОрганизаций.Добавить();
			// Свойства
			Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаНачала-1;
			// Измерения
			Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
			Движение.Организация				= Выборка.Организация;
			// Ресурсы
			Движение.ПодразделениеОрганизации	= Выборка.ПодразделениеОрганизации;
			Движение.Должность					= Выборка.Должность;
			Движение.ЗанимаемыхСтавок			= 0;
			Движение.ГрафикРаботы				= Выборка.ГрафикРаботы;
			Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Перемещение;
			Движение.ОбособленноеПодразделение	= Выборка.ОбособленноеПодразделение;
		КонецЕсли;
		//Смартис Лиманчук окончание 16.05.2012
		
		// отразим новое место работы
		Движение = Движения.РаботникиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
		Движение.ЗанимаемыхСтавок			= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок;
		Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
		
		// Реквизиты
		Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Перемещение;
		Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОрганизацияПодразделения;
			
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			
			Если НЕ ВыборкаПоСтрокамДокумента.НапомнитьПоЗавершении Тогда
				
				// вернем прежние данные по прежнему месту работы
				Движение = Движения.РаботникиОрганизаций.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
				
				// Измерения
				Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				
				// Ресурсы
				Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПрежнееПодразделение;
				Движение.Должность					= ВыборкаПоСтрокамДокумента.ПрежняяДолжность;
				Движение.ЗанимаемыхСтавок			= ВыборкаПоСтрокамДокумента.ПрежняяСтавка;
				Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ПрежнийГрафикРаботы;
				
				// Реквизиты
				Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Перемещение;
				Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ПрежняяОрганизация;
				
			Иначе
				
				Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
				
				// Измерения
				Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ДатаИзменения				= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
				Движение.ПланируемоеСобытие			= Перечисления.НамеченныеСобытияПоПерсоналу.Перемещение;
				
				// Реквизиты
				Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПрежнееПодразделение;
				Движение.Должность					= ВыборкаПоСтрокамДокумента.ПрежняяДолжность;
				Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ПрежнийГрафикРаботы;
				Движение.ЗанимаемыхСтавок			= ВыборкаПоСтрокамДокумента.ПрежняяСтавка;
				Движение.ЗаниматьСтавку				= Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	
	Если ВыборкаСтрокЗапроса.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период						= ВыборкаСтрокЗапроса.ДатаНачала;
	
	// Измерения
	Движение.Сотрудник					= ВыборкаСтрокЗапроса.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Если НЕ ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
		Движение.ВидРасчетаИзмерение	= ВыборкаСтрокЗапроса.ВидРасчета;
	КонецЕсли;
	
	// Ресурсы	
	Движение.ВидРасчета					= ВыборкаСтрокЗапроса.ВидРасчета;
	Если ВыборкаСтрокЗапроса.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Движение.Актуальность			= Истина;
		Движение.ТарифныйРазряд1		= ВыборкаСтрокЗапроса.ТарифныйРазряд1;
		Движение.Показатель1			= ВыборкаСтрокЗапроса.Показатель1;
		Движение.Валюта1				= ВыборкаСтрокЗапроса.Валюта1;
		Движение.ТарифныйРазряд2		= ВыборкаСтрокЗапроса.ТарифныйРазряд2;
		Движение.Показатель2			= ВыборкаСтрокЗапроса.Показатель2;
		Движение.Валюта2				= ВыборкаСтрокЗапроса.Валюта2;
		Движение.ТарифныйРазряд3		= ВыборкаСтрокЗапроса.ТарифныйРазряд3;
		Движение.Показатель3			= ВыборкаСтрокЗапроса.Показатель3;
		Движение.Валюта3				= ВыборкаСтрокЗапроса.Валюта3;		
		Движение.ТарифныйРазряд4		= ВыборкаСтрокЗапроса.ТарифныйРазряд4;
		Движение.Показатель4			= ВыборкаСтрокЗапроса.Показатель4;
		Движение.Валюта4				= ВыборкаСтрокЗапроса.Валюта4;		
		Движение.ТарифныйРазряд5		= ВыборкаСтрокЗапроса.ТарифныйРазряд5;
		Движение.Показатель5			= ВыборкаСтрокЗапроса.Показатель5;
		Движение.Валюта5 				= ВыборкаСтрокЗапроса.Валюта5;		
		Движение.ТарифныйРазряд6		= ВыборкаСтрокЗапроса.ТарифныйРазряд6;
		Движение.Показатель6			= ВыборкаСтрокЗапроса.Показатель6;
		Движение.Валюта6 				= ВыборкаСтрокЗапроса.Валюта6;

	КонецЕсли;
	
	// Движения на дату завершения
	Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ДатаОкончания) Тогда
		
		Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
		// Свойства
		Движение.Период						= КонецДня(ВыборкаСтрокЗапроса.ДатаОкончания)+1;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаСтрокЗапроса.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Если НЕ ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
			Движение.ВидРасчетаИзмерение	= ВыборкаСтрокЗапроса.ВидРасчета;
		КонецЕсли;
		
		Если (ВыборкаСтрокЗапроса.Действие = Перечисления.ВидыДействияСНачислением.Прекратить) ИЛИ (ВыборкаСтрокЗапроса.Действие = Перечисления.ВидыДействияСНачислением.Изменить) Тогда
			Движение.Актуальность = Истина;
			Движение.ТарифныйРазряд1	= ВыборкаСтрокЗапроса.ПрежнийТарифныйРазряд1;
			Движение.Показатель1		= ВыборкаСтрокЗапроса.ПрежнийПоказатель1;
			Движение.Валюта1			= ВыборкаСтрокЗапроса.ПрежняяВалюта1;
			Движение.ТарифныйРазряд2	= ВыборкаСтрокЗапроса.ПрежнийТарифныйРазряд2;
			Движение.Показатель2		= ВыборкаСтрокЗапроса.ПрежнийПоказатель2;
			Движение.Валюта2			= ВыборкаСтрокЗапроса.ПрежняяВалюта2;
			Движение.ТарифныйРазряд3	= ВыборкаСтрокЗапроса.ПрежнийТарифныйРазряд3;
			Движение.Показатель3		= ВыборкаСтрокЗапроса.ПрежнийПоказатель3;
			Движение.Валюта3			= ВыборкаСтрокЗапроса.ПрежняяВалюта3;
			Движение.ТарифныйРазряд4	= ВыборкаСтрокЗапроса.ПрежнийТарифныйРазряд4;
			Движение.Показатель4		= ВыборкаСтрокЗапроса.ПрежнийПоказатель4;
			Движение.Валюта4			= ВыборкаСтрокЗапроса.ПрежняяВалюта4;
			Движение.ТарифныйРазряд5	= ВыборкаСтрокЗапроса.ПрежнийТарифныйРазряд5;
			Движение.Показатель5		= ВыборкаСтрокЗапроса.ПрежнийПоказатель5;
			Движение.Валюта5			= ВыборкаСтрокЗапроса.ПрежняяВалюта5;
			Движение.ТарифныйРазряд6	= ВыборкаСтрокЗапроса.ПрежнийТарифныйРазряд6;
			Движение.Показатель6		= ВыборкаСтрокЗапроса.ПрежнийПоказатель6;
			Движение.Валюта6			= ВыборкаСтрокЗапроса.ПрежняяВалюта6;
			Движение.ВидРасчета			= ВыборкаСтрокЗапроса.ПрежнийВидРасчета;
		ИначеЕсли ВыборкаСтрокЗапроса.Действие = Перечисления.ВидыДействияСНачислением.Начать Тогда
			Движение.Актуальность = Ложь;
			Движение.ВидРасчета			= ВыборкаСтрокЗапроса.ПрежнийВидРасчета;
		КонецЕсли;

	КонецЕсли;
	
		// Движения по регистру "КоэффициентИндексацииЗаработка" - отразим факт индексации заработка
	Если ВыборкаПоШапкеДокумента.ПовышениеОкладов и ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
		
		Если ВыборкаСтрокЗапроса.Действие = Перечисления.ВидыДействияСНачислением.Изменить И ВыборкаСтрокЗапроса.ПрежнийПоказатель1 > 0 И ВыборкаСтрокЗапроса.Показатель1 > ВыборкаСтрокЗапроса.ПрежнийПоказатель1 Тогда
			Движение = Движения.КоэффициентыПовышенияОкладов.Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаСтрокЗапроса.ДатаНачала;
			
			// Измерения
			Движение.Сотрудник					= ВыборкаСтрокЗапроса.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			// Ресурсы
			Движение.Коэффициент				= ?(ВыборкаСтрокЗапроса.ПрежнийПоказатель1 = 0, 0, ВыборкаСтрокЗапроса.Показатель1 / ВыборкаСтрокЗапроса.ПрежнийПоказатель1);
		КонецЕсли;
	КонецЕсли;

				
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоНачислениям()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,ВыборкаПоСтрокамДокумента, СтруктураПараметров = "")
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		ПрежняяСтавка			= ВыборкаПоСтрокамДокумента.ПрежняяСтавка;
		ПрежнееПодразделение	= ВыборкаПоСтрокамДокумента.ПрежнееПодразделение; 
		ПрежняяДолжность		= ВыборкаПоСтрокамДокумента.ПрежняяДолжность;
		
		// по прежнему месту работы освободим занимаемые ранее ставки
		Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
		
		// Свойства
		Движение.Период							= ВыборкаПоСтрокамДокумента.ДатаНачала;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.ПодразделениеОрганизации		= ПрежнееПодразделение;
		Движение.Должность						= ПрежняяДолжность;
		
		// Ресурсы
		Движение.КоличествоСтавок				= ПрежняяСтавка; 
		
		// по новому месту работы займем указанные ставки
		Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
		
		// Свойства
		Движение.Период							= ВыборкаПоСтрокамДокумента.ДатаНачала;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			
		// Измерения
		Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		Движение.Должность						= ВыборкаПоСтрокамДокумента.Должность;
		
		// Ресурсы
		Движение.КоличествоСтавок				= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок; 
		
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания)
			и НЕ ВыборкаПоСтрокамДокумента.НапомнитьПоЗавершении Тогда
			
			// по прежнему месту работы займем временно освобожденные ставки
			Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ПодразделениеОрганизации	= ПрежнееПодразделение;
			Движение.Должность					= ПрежняяДолжность;
			
			// Ресурсы
			Движение.КоличествоСтавок			= ПрежняяСтавка; 
			
			// по новому месту работы освободим временно занимавшиеся ставки
			Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
			Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
			
			// Ресурсы
			Движение.КоличествоСтавок			= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок; 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СоответствиеВалютныеСпособыРасчета = ПроведениеРасчетов.ПолучитьСоответствиеСпособовРасчетаТребующихВалюту();
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Получение учетной политики по персоналу организации
			УчетнаяПолитикаПоПерсоналуОрганизации	= глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
			ПроверкаШтатногоРасписания				= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "ПроверкаШтатногоРасписания");

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники	= СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим, ПроверкаШтатногоРасписания);
			ВыборкаПоСтрокамДокумента	= РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания);
				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,ВыборкаПоСтрокамДокумента);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);

				КонецЕсли;

			КонецЦикла;

			// выполним выборку по табличной части основных начислений
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачисления(ПроверкаШтатногоРасписания).Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания);
				Если не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// получить новый номер документа по совокупности кадровых документов
	ПроцедурыУправленияПерсоналом.ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Организация.Префикс, Дата);
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(РаботникиОрганизации);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказыОрганизации.Добавить();
		ЗаписьРегистрации.Период      = Дата;
		ЗаписьРегистрации.Регистратор = Ссылка;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// проверим уникальность номера с точки зрения кадровой нумерации
	ПроцедурыУправленияПерсоналом.ПроверкаУникальностиНомераКадровогоДокумента(ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Дата, Ссылка);

КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("ДокументСсылка.КадровоеПеремещение") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Основание",		Основание);
			Запрос.УстановитьПараметр("Организация",	Организация);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КадровоеПеремещениеРаботники.Сотрудник,
			|	КадровоеПеремещениеРаботники.ФизЛицо,
			|	КадровоеПеремещениеРаботники.ДатаНачала,
			|	КадровоеПеремещениеРаботники.ДатаОкончания,
			|	КадровоеПеремещениеРаботники.НапомнитьПоЗавершении,
			|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации,
			|	КадровоеПеремещениеРаботники.НоваяДолжность КАК Должность,
			|	КадровоеПеремещениеРаботники.ЗанимаемыхСтавок,
			|	КадровоеПеремещениеРаботники.ГрафикРаботы
			|ИЗ
			|	Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
			|		ПО КадровоеПеремещениеРаботники.НовоеПодразделение = СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
			|			И (СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация)
			|ГДЕ
			|	КадровоеПеремещениеРаботники.Ссылка = &Основание";
			
			РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
		
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если Основание.ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Основание.ОбособленноеПодразделение.Пустая() Тогда
			Организация = Основание.ОбособленноеПодразделение;
		Иначе
			Организация = Основание.Организация;
		КонецЕсли;
		
		НоваяСтрока = РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Основание);
		НоваяСтрока.Сотрудник = Основание;
		
		НоваяСтрока.ДатаНачала = ТекущаяДата();
		ДобавитьСтрокиНачисленийПоРаботнику(Основание,ТекущаяДата());
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

