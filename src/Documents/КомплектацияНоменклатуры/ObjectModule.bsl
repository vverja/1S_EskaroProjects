Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитика Экспорт;         // (Упр)
Перем мУчетнаяПолитикаРегл Экспорт;      // (Регл)
Перем мСпособЗакрытияПотребностейЗаказовНаПроизводство;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура заполняет табличную часть Комплектующих из регистра сведений
// КомплектующиеНоменклатуры
//
Процедура ЗаполнитьКомплектующие() Экспорт

	Если Комплектующие.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Комплектующие.Очистить();
	КонецЕсли;

	// заполним по регистру КомплектующиеНоменклатуры
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура" ,               Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры" , ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Коэффициент" ,                Коэффициент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Комплектующая КАК Номенклатура,
	|	ХарактеристикаКомплектующей КАК ХарактеристикаНоменклатуры,
	|	Количество * &Коэффициент КАК Количество,
	|	ЕдиницаИзмерения,
	|	ДоляСтоимости
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры
	|
	|ГДЕ
	|	Номенклатура = &Номенклатура И
	|	ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = Комплектующие.Добавить();

		НоваяСтрока.Номенклатура                     = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры       = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество                       = Выборка.Количество * Количество;
		НоваяСтрока.ЕдиницаИзмерения                 = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ДоляСтоимости                    = Выборка.ДоляСтоимости;
		НоваяСтрока.Коэффициент                      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;

		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(НоваяСтрока, ЭтотОбъект);
        ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Комплектующие", ОтражатьВБухгалтерскомУчете);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьКомплектующие()

// Функция формирует табличный документ
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьКомплектацияНоменклатуры()

	//Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
	//	Возврат неопределено;
	//КонецЕсли;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	""" + ТекстКодАртикул + ":""        КАК ИмяКодАртикул,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Комплект,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	Ответственный,
	|	Организация
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	|
	|ГДЕ
	|	КомплектацияНоменклатуры.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура,
	|	Количество,
	|	ЕдиницаИзмерения,
	|	НомерСтроки
	|
	|ИЗ
	|	Документ.КомплектацияНоменклатуры.Комплектующие КАК КомплектацияНоменклатурыКомплектующие
	|
	|ГДЕ
	|	КомплектацияНоменклатурыКомплектующие.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки ВОЗР
	|";

	ЗапросКомплектующие = Запрос.Выполнить().Выгрузить();

	Макет        = ПолучитьМакет("Комплектация");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомплектацияНоменклатуры_Комплектация";

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, ?(ВидКомплектации = Перечисления.ВидыКомплектации.Сборка, НСтр("ru='Комплектация';uk='Комплектація'",КодЯзыкаПечать), НСтр("ru='Разукомплектация';uk='Разукомплектація'",КодЯзыкаПечать))+НСтр("ru=' номенклатуры';uk=' номенклатури'",КодЯзыкаПечать),КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	Если ВыводитьКоды Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("КомплектКод");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Комплект");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Комплект           = СокрЛП(Шапка.Комплект);
	ОбластьМакета.Параметры.КоличествоНаПечать = "" + Шапка.Количество + " ("+Шапка.ЕдиницаИзмерения+")";
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Для каждого ВыборкаСтрокКомплектующие Из ЗапросКомплектующие Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокКомплектующие.Номенклатура) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В одной из строк не заполнено значение комплектующей - строка при печати пропущена.");
			Продолжить;
		КонецЕсли;

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокКомплектующие);
		ОбластьМакета.Параметры.НомерСтроки = ЗапросКомплектующие.Индекс(ВыборкаСтрокКомплектующие) + 1;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокКомплектующие.Номенклатура);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ОтветственныйПредставление = "/"+ Шапка.Ответственный + "/";
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
    	
	Если ИмяМакета = "Комплектация" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьКомплектацияНоменклатуры();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;


	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать()

#КонецЕсли

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если Комплектующие.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		Комплектующие.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьМатериалы = Комплектующие.Выгрузить();
	
	ТабличнаяЧастьПродукция = Новый ТаблицаЗначений;
	ТабличнаяЧастьПродукция.Колонки.Добавить("Номенклатура");
	ТабличнаяЧастьПродукция.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабличнаяЧастьПродукция.Колонки.Добавить("ЕдиницаИзмерения");
	ТабличнаяЧастьПродукция.Колонки.Добавить("Коэффициент",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	ТабличнаяЧастьПродукция.Колонки.Добавить("Спецификация");
	ТабличнаяЧастьПродукция.Колонки.Добавить("Количество", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	НоваяСтрока = ТабличнаяЧастьПродукция.Добавить();
	НоваяСтрока.Номенклатура 				= Номенклатура;
	НоваяСтрока.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;
	НоваяСтрока.ЕдиницаИзмерения 			= ЕдиницаИзмерения;
	НоваяСтрока.Коэффициент 				= Коэффициент;
	НоваяСтрока.Спецификация 				= Спецификация;
	НоваяСтрока.Количество 					= Количество;
	
	СтруктураДопКолонок = Новый Структура();
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);

	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата);

	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, СтатьяЗатрат", "Количество");
	
	ТабличнаяЧастьМатериалы.Колонки.Добавить("СтатусПартии");
	ТабличнаяЧастьМатериалы.Колонки.Добавить("ДоляСтоимости");
	ТабличнаяЧастьМатериалы.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция, "СтатусПартии");
	ТабличнаяЧастьМатериалы.ЗаполнитьЗначения(1, "ДоляСтоимости");
	
	Комплектующие.Загрузить(ТабличнаяЧастьМатериалы);
	
	ЗаполнитьСчетаУчетаВТабЧасти(Комплектующие, "Комплектующие", ОтражатьВБухгалтерскомУчете);
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Комплектация","Комплектация номенклатуры");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям()

	ТоварыТабличнойЧасти = Комплектующие.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;

	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(Склад, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	ТоварыТабличнойЧасти=Комплектующие.Выгрузить();
	Комплектующие.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	
	флЗаказОбособленныйУчет = ложь;
    Если ТипЗнч(ЗаказРезерв)=Тип("ДокументСсылка.ЗаказПокупателя") И глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании") Тогда
		Если ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			флЗаказОбособленныйУчет = истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		флЗаполнятьИзРезервов = флЗаказОбособленныйУчет и ИсходнаяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва; 
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   Справочники.Качество.Новый);
		Если флЗаполнятьИзРезервов Тогда
			СтуктураПоиска.Вставить("ДокументРезерва",    ЗаказРезерв);
            НайденныеСтроки = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;
		
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента  >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество 		  = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			СписанноеКоличествоЕдХранения = Окр(Строка.Остаток * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Комплектующие.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			НоваяСтрока.СерияНоменклатуры          = Строка.СерияНоменклатуры;
			НоваяСтрока.Количество                 = СписанноеКоличество; 
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличествоЕдХранения;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Комплектующие.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
				НоваяСтрока.Количество                 = КоличествоОсталосьПогасить;
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоСериям()

//заполнение исходной номенклатуры при разборке
Процедура ЗаполнитьИсходнуюНоменклатуруПередПроведением()
	
	Если ЗначениеЗаполнено(ЗаказРезерв) Тогда
		Запрос = Новый Запрос;

		Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказРезерв);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	    Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);

		Запрос.УстановитьПараметр("Склад", Склад);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыВРезервеНаСкладах.Номенклатура                КАК Номенклатура,
		|	ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
		|	ТоварыВРезервеНаСкладах.КоличествоОстаток           КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,ДокументРезерва = &ЗаказПокупателя
		|              И Склад = &Склад
		|              И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры=&ХарактеристикаНоменклатуры) КАК ТоварыВРезервеНаСкладах
		|";
	    Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество >= Количество * Коэффициент Тогда
				СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	МассивНоменклатуры = новый Массив;
	МассивНоменклатуры.Добавить(Номенклатура);

	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;

	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(Склад, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	флЗаказОбособленныйУчет = ложь;
	Если ТипЗнч(ЗаказРезерв)=Тип("ДокументСсылка.ЗаказПокупателя") 
		И глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании") Тогда
		Если ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			флЗаказОбособленныйУчет = истина;
		КонецЕсли;
	КонецЕсли;

	флЗаполнятьИзРезервов = флЗаказОбособленныйУчет и СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва; 
		
	СтуктураПоиска = Новый Структура;
	СтуктураПоиска.Вставить("Номенклатура",               Номенклатура);
	СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	СтуктураПоиска.Вставить("Качество",                   Справочники.Качество.Новый);
	Если флЗаполнятьИзРезервов Тогда
		СтуктураПоиска.Вставить("ДокументРезерва",    ЗаказРезерв);
		НайденныеСтроки = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
	Иначе
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
	КонецЕсли;
		
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если Строка.Остаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		ОстатокВЕдиницахДокумента = Строка.Остаток * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЕдиницаИзмерения.Коэффициент;
			
		Если ОстатокВЕдиницахДокумента  >= Количество Тогда
			СерияНоменклатуры = Строка.СерияНоменклатуры;
			Прервать;
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

// Заполняет табличную часть при оперативном проведении
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением() Экспорт
	ВидКомплектацииРазборка = ВидКомплектации = Перечисления.ВидыКомплектации.Разборка;
	Если ВидКомплектацииРазборка Тогда
		ЗаполнитьИсходнуюНоменклатуруПередПроведением();
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказРезерв);
	Запрос.УстановитьПараметр("Склад", Склад);

	
	// Сформируем массив комплектующих для фильтров запросов.
	МассивКомплектующих = Комплектующие.ВыгрузитьКолонку("Номенклатура");
	Запрос.УстановитьПараметр("Комплектующие", МассивКомплектующих);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыВРезервеНаСкладах.Номенклатура                КАК Номенклатура,
	|	ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток           КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,ДокументРезерва = &ЗаказПокупателя
	|              И Склад = &Склад
	|              И Номенклатура В (&Комплектующие)) КАК ТоварыВРезервеНаСкладах
	|";

	Таблица = Запрос.Выполнить().Выгрузить();

	// Сначала вычтем из найденных остатков количество, размещение по которому явно указан
	// способ списания "из резерва". Для этого последовательно обойдем табличную часть 
	// Комплектующие
	Для Каждого СтрокаТЧ Из Комплектующие Цикл

		// Сначала обходим все строки, у которых уже установлен способ списание "из резерва",
		// если способ списание "со склада" или не установлен - пропускаем строку
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров) ИЛИ СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
			Продолжить;
		КонецЕсли; 

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);

		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

		// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
		КоличествоОсталосьПогасить = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент 
						/ СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
			Иначе
				// Это ошибка: списываемое количество не должно быть больше остатка.
				// Такой документ не проведется оперативно.
				КоэффСписания = 1;
			КонецЕсли;

			СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

			Строка.Количество = Строка.Количество - СписанноеКоличество;

		КонецЦикла; 

		Если КоличествоОсталосьПогасить > 0 Тогда
			// Значит в документе неверно задан способ списания. Заполнять не будем
			Возврат;
		КонецЕсли; 

	КонецЦикла;

	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// способу списания для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив;

	ТаблицаТЧ = Комплектующие.Выгрузить();
	ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

	МассивТаблицСтрок = Комплектующие.Выгрузить();
	МассивТаблицСтрок.Очистить();
	МассивТаблицСтрок.Колонки.Добавить("ИндексИсходнойСтроки");
	МассивТаблицСтрок.Колонки.Добавить("СкладКомпанииРозничный");

	Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл

		Если СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			Продолжить;
		КонецЕсли; 

		// Пересчитаем в единицы хранения
		СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент 
								/ СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);

		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);

		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

		// Погашаем количество в таблице
		КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;

		// Погашаем количество в таблице, записывая способ списания
		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;

			СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

			// Добавляем строку с данными о размещенном количестве
			НоваяСтрока = МассивТаблицСтрок.Добавить();
			НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);

			НоваяСтрока.Номенклатура     = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;

			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;

			НоваяСтрока.Количество = ?(СтрокаТЧ.Коэффициент <> 0, СписанноеКоличество
			* НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / СтрокаТЧ.Коэффициент 
										, 0);
			НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;

			КоэффПогашения = СписанноеКоличество / КоличествоОсталосьПогасить;

			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

			// Уменьшаем количество в исходной строке
			СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;

			// Уменьшаем количество в строке остатков
			Строка.Количество   = Строка.Количество - СписанноеКоличество;

		КонецЦикла;
		
		Если КоличествоОсталосьПогасить > 0 Тогда

			// Добавляем строку с данными о размещенном количестве
			НоваяСтрока = МассивТаблицСтрок.Добавить();
			НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;

			НоваяСтрока.Количество = ?(СтрокаТЧ.Коэффициент <>0, КоличествоОсталосьПогасить 
			* НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/ СтрокаТЧ.Коэффициент 
										, 0);
			НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;

			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

		КонецЕсли; 

	КонецЦикла;

	// Изменяем табличную часть
	ТекИндексИсходнойСтроки = Неопределено;
	Для Каждого Строка Из МассивТаблицСтрок Цикл

		// Если строка с таким индексом уже обрабатывалась, то добавляем новую
		Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
			Стр = Комплектующие[Строка.ИндексИсходнойСтроки];
			РедактируемаяСтрока = Комплектующие.Добавить();
			РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
			РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
			РедактируемаяСтрока.СчетУчетаБУ = Стр.СчетУчетаБУ;
			РедактируемаяСтрока.СчетУчетаНУ = Стр.СчетУчетаНУ;
		Иначе
			РедактируемаяСтрока = Комплектующие[Строка.ИндексИсходнойСтроки];
		КонецЕсли; 

		РедактируемаяСтрока.СпособСписанияОстаткаТоваров = Строка.СпособСписанияОстаткаТоваров;

		Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
			Продолжить;
		КонецЕсли;

		РедактируемаяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
		РедактируемаяСтрока.Коэффициент = Строка.Коэффициент;
		РедактируемаяСтрока.Количество = Строка.Количество;

		ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

	КонецЦикла; 
	
	ЗаполнитьПоСериям();

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

// Процедура заполняет счета БУ и НУ в шапке.
//
Процедура ЗаполнитьСчетаУчетаВШапке(ЗаполнятьБУ=Неопределено) Экспорт
	
	Если ЗаполнятьБУ=Неопределено Тогда
		ЗаполнятьБУ = ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаШапки(ЭтотОбъект, ЗаполнятьБУ,,,"Номенклатура",Истина);

КонецПроцедуры // ЗаполнитьСчетаУчетаВШапке

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ,,,Истина);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()


/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - текст для дополнительной информации об ошибки проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, Склад, ВидОперации, ВидКомплектации, Номенклатура, Количество, ЕдиницаИзмерения");
	Если ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
		СтруктураОбязательныхПолей.Вставить("СтатусПартии");
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
		КонецЕсли;
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции
	   ИЛИ ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
	   
	    Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
	    	СтруктураОбязательныхПолей.Вставить("Подразделение");
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("ПодразделениеОрганизации");
			СтруктураОбязательныхПолей.Вставить("СчетЗатрат");
		КонецЕсли;
		Если ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
			СтруктураОбязательныхПолей.Вставить("СтатьяЗатрат");
		КонецЕсли;
		
		// Проверим соответствие подразделения и организации.
		УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
		
		Если ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
			Если СтатьяЗатрат.ВидЗатрат <> Перечисления.ВидыЗатрат.Материальные Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Укажите материальную статью затрат (закладка ""Учет затрат"")!", Отказ, Заголовок);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
				И СтатьяЗатрат.ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
				Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Укажите производственную статью затрат (закладка ""Учет затрат"")!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	КонецЕсли; 	
	
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Номенклатура) Тогда
		// Комплектуемая номенклатура не может быть услугой или набором
		Если СтруктураШапкиДокумента.Услуга Или СтруктураШапкиДокумента.Набор Или СтруктураШапкиДокумента.Комплект Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Комплектуемая номенклатура не может быть услугой, набором-пакетом или набором-комплектом!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Склад) Тогда
		// Вид склада
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Комплектация номенклатуры не может проводится на НТТ!", Отказ, Заголовок);
		КонецЕсли;
    КонецЕсли;
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоКомплектующим - результат запроса по табличной части "Комплектующие",
//  СтруктураШапкиДокумента         - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуКомплектующих(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента)

	ТаблицаКомплектующих = РезультатЗапросаПоКомплектующим.Выгрузить();
	
	ТаблицаКомплектующих.Колонки.Добавить("ПринадлежностьНоменклатуры",Новый ОписаниеТипов("ПеречислениеСсылка.ПринадлежностьНоменклатуры"));
	Если ТаблицаКомплектующих.Колонки.Найти("СтатусМатериальныхЗатрат") <> Неопределено Тогда
		Для Каждого ТекущаяСтрока Из ТаблицаКомплектующих Цикл
			ТекущаяСтрока.ПринадлежностьНоменклатуры = ?(ТекущаяСтрока.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку,
														Перечисления.ПринадлежностьНоменклатуры.Принятый,
														Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка());
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ТаблицаКомплектующих;

КонецФункции // ПодготовитьТаблицуКомплектующих()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоКомплектующим - результат запроса по табличной части "Комплектующие",
//  СтруктураШапкиДокумента         - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений по комплектам.
//
Функция ПодготовитьТаблицуКомплектов(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента)

	// подготовим структуру таблицы
	ТаблицаКомплектов = РезультатЗапросаПоКомплектующим.Выгрузить();
	ТаблицаКомплектов.Колонки.Добавить("ПринадлежностьНоменклатуры",Новый ОписаниеТипов("ПеречислениеСсылка.ПринадлежностьНоменклатуры"));
	ТаблицаКомплектов.Очистить();
	
	НоваяСтрока = ТаблицаКомплектов.Добавить();
	НоваяСтрока.Номенклатура                 = СтруктураШапкиДокумента.Номенклатура;
	НоваяСтрока.Услуга                       = СтруктураШапкиДокумента.Услуга;
	НоваяСтрока.Количество                   = СтруктураШапкиДокумента.Количество * СтруктураШапкиДокумента.Коэффициент
											   / СтруктураШапкиДокумента.КоэффициентЕдиницыХранения;
	НоваяСтрока.НомерСтроки                  = 0;
	НоваяСтрока.ХарактеристикаНоменклатуры   = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
	НоваяСтрока.СерияНоменклатуры            = СтруктураШапкиДокумента.СерияНоменклатуры;
	НоваяСтрока.ЗаказПартии                  = СтруктураШапкиДокумента.ЗаказРезерв;
	НоваяСтрока.СпособСписанияОстаткаТоваров = СтруктураШапкиДокумента.СпособСписанияОстаткаТоваров;
	НоваяСтрока.ЕдиницаИзмерения             = СтруктураШапкиДокумента.ЕдиницаИзмерения;
	НоваяСтрока.СуммаВзаиморасчетов          = СтруктураШапкиДокумента.СуммаПередачи;
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
    	НоваяСтрока.ЗаказНаПроизводство          = СтруктураШапкиДокумента.ЗаказВыпуска;
    	НоваяСтрока.Спецификация          		 = СтруктураШапкиДокумента.Спецификация;
		НоваяСтрока.СчетУчетаБУ          		 = СтруктураШапкиДокумента.СчетУчетаБУ;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("СтатусМатериальныхЗатрат") Тогда
			НоваяСтрока.ПринадлежностьНоменклатуры = ?(СтруктураШапкиДокумента.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку,
														Перечисления.ПринадлежностьНоменклатуры.Принятый,
														Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка());
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда    		
	     НоваяСтрока.НалоговоеНазначение   = СтруктураШапкиДокумента.НалоговоеНазначение;
	КонецЕсли;  	
	
	Возврат ТаблицаКомплектов;

КонецФункции // ПодготовитьТаблицуКомплектов()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоКомплектующим  - таблица значений, содержащая данные для проведения и проверки ТЧ Комплектующие
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиКомплектующих(ТаблицаПоКомплектующим, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Комплектующие";

	Если Комплектующие.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена табличная часть ""Комплектующие"".", Отказ, Заголовок);
	КонецЕсли;

	// Укажем, что надо проверить:
	Если ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ДоляСтоимости,СтатусПартии");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры
	   И Видкомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
	    СтруктураОбязательныхПолей.Вставить("СтатьяЗатрат");
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат(Комплектующие, "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат(Комплектующие, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;  
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Комплектующие",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Комплектующие", ТаблицаПоКомплектующим, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Комплектующие", ТаблицаПоКомплектующим, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Комплектующие", ТаблицаПоКомплектующим, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Комплектующие", ТаблицаПоКомплектующим, Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоКомплектующим, 
		"Комплектующие",
		Отказ, 
		Заголовок, 
		"Комплектация", // ВидОперации
		Ложь            // ЭтоЗатраты 
	);	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиКомплектующих()



Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ", 					"СчетУчетаБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение",          "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС", 			"НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности", 	"НалоговоеНазначение.ВидНалоговойДеятельности");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

// Функция удаляет их исходной таблицы строки не требующие списания из резерва
// Возвращается КОПИЯ исходной таблицы
//
Функция УдалитьСтрокиНеТребующиеСписанияРезерва(ТаблицаПоКомплектующим)

	ТаблицаПоКомплектующимИзРезерва = ТаблицаПоКомплектующим.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоКомплектующимИзРезерва.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоКомплектующимИзРезерва.Получить(Сч);
		Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			 ТаблицаПоКомплектующимИзРезерва.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоКомплектующимИзРезерва;
	
КонецФункции // УдалитьСтрокиНеТребующиеСписанияРезерва()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоКомплектующим    - таблица значений, содержащая данные для проведения и проверки ТЧ ТаблицаПоКомплектующим
//  ТаблицаПоКомплектам       - таблица значений, содержащая данные для проведения и проверки по комплектам,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);

	ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	
	// Зарегистрируем документ в последовательности.
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект, 
		Дата, 
		СтруктураШапкиДокумента.Организация,
		//регистрация в УУ должна происходить по значению реквизита документа
		ОтражатьВУправленческомУчете,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
	);

	// Проведение по партиям остановим в том случае, если не хватит хоть одного комплектующего.
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка,Движения.СписанныеТовары.Выгрузить(),,,,,Истина);
	
	//Коновалова 13022013 +
	Если (СтруктураШапкиДокумента.ОтражатьВУправленческомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладах")) ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладахБухгалтерскийУчет")) Тогда
		 Отказ = Истина;
		 Возврат;
	КонецЕсли;
	//Коновалова 13022013 -
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
		
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
	 
		// Формирование движений по регистрам "Затраты на выпуск продукции".
		УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(
			СтруктураШапкиДокумента, 
			"КомплектацияНоменклатуры", 
			мУчетнаяПолитика, 
			мУчетнаяПолитикаРегл);
			
		// Формирование движений по регистрам "Выпуск продукции" и направлениям выпуска.
		УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска(
			СтруктураШапкиДокумента, 
			"КомплектацияНоменклатуры",
			мУчетнаяПолитика, 
			мУчетнаяПолитикаРегл
			);
			
	КонецЕсли;
	
	// Для операции "выпуск продукции" движения по расходу регистра ТоварыОрганизаций 
	// должны формироваться после вызова процедуры СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска,
	// иначе они будут удалены при формировании движений по приходу регистра ТоварыОрганизаций
	// в процедуре СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска.
	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	ДвиженияПоТоварамОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
 
КонецПроцедуры // ДвиженияПоРегистрам()

//Коновалова 19022013 +
Функция НетДвиженийПоПартиям(_Регистр)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПартииТоваровНаСкладах.Регистратор
	                      |ИЗ
	                      |	РегистрНакопления."+_Регистр+" КАК ПартииТоваровНаСкладах
	                      |ГДЕ
	                      |	ПартииТоваровНаСкладах.Регистратор = &Регистратор");
						        
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
//Коновалова 19022013 -

Процедура СформироватьДвиженияКомплектующиеРасход_ТоварыНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектующим, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		НаборДвижений = Движения.ТоварыВРознице;
		Если Комплектующие.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Комплектующие", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
	Иначе
		НаборДвижений = Движения.ТоварыНаСкладах;
		Если Комплектующие.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Комплектующие", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
	КонецЕсли;

	Если НЕ Отказ Тогда
					
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектующим", ТаблицаПоКомплектующим);
										
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
								
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",    Склад);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
					
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоКомплектующим"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоКомплектующим"], ТаблицаПоЦенам);
		КонецЕсли;
							
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			НаборДвижений.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияКомплектующиеПриход_ТоварыНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектующим, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		НаборДвижений = Движения.ТоварыВРознице;
	Иначе
		НаборДвижений = Движения.ТоварыНаСкладах;
	КонецЕсли;

	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектующим", ТаблицаПоКомплектующим);
										
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
								
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",    Склад);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
					
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоКомплектующим"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоКомплектующим"], ТаблицаПоЦенам);

		// Проверка наличия продажных цен на приходуемый товар.
		УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Комплектующие", ТаблицыДанныхДокумента["ТаблицаПоКомплектующим"], Отказ, Заголовок);
	КонецЕсли;
							
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
	Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		НаборДвижений.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияКомплектующиеРасход_ТоварыВРезервеНаСкладах(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, Отказ, Заголовок)
	
	ТаблицаПоКомплектующимИзРезерва = УдалитьСтрокиНеТребующиеСписанияРезерва(ТаблицаПоКомплектующим);
	Если ТаблицаПоКомплектующимИзРезерва.Количество() > 0 Тогда
					
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Контроль остатков товара
		Если Комплектующие.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Комплектующие", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
						
		Если Не Отказ Тогда
						
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектующим", ТаблицаПоКомплектующимИзРезерва);
												
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
								
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",           Склад);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", ЗаказРезерв);
							
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
				НаборДвижений.Записать(Ложь);
			КонецЕсли;
							
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияКомплектующиеРасход_ТоварыПереданные(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, Отказ, Заголовок)
	
	НаборДвижений = Движения.ТоварыПереданные;
	
	// Контроль остатков товара
	Если Комплектующие.Количество() <> 0 Тогда
		ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("Комплектующие", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектующим", ТаблицаПоКомплектующим);
	
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
								
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",      	  Контрагент);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",      		  ЗаказВыпуска);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку);
							
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		НаборДвижений.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияКомплектыПриход_ТоварыНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектам, Отказ, Заголовок);
		
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		НаборДвижений = Движения.ТоварыВРознице;
	Иначе
		НаборДвижений = Движения.ТоварыНаСкладах;
	КонецЕсли;

	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектам);
											
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
							
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",    Склад);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
				
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоКомплектам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоКомплектам"], ТаблицаПоЦенам);

		// Проверка наличия продажных цен на приходуемый товар.
		УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Комплектующие", ТаблицыДанныхДокумента["ТаблицаПоКомплектам"], Отказ, Заголовок);
	КонецЕсли;
						
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
	Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		НаборДвижений.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияКомплектыРасход_ТоварыНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектам, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		
		НаборДвижений = Движения.ТоварыВРознице;
		
		ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
	Иначе
		
		НаборДвижений = Движения.ТоварыНаСкладах;
		
		ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
	КонецЕсли;

	Если НЕ Отказ Тогда
				
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектам);
												
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
								
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",    Склад);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
					
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоКомплектам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоКомплектам"], ТаблицаПоЦенам);
		КонецЕсли;
							
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			НаборДвижений.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияКомплектыПриход_ТоварыВРезервеНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектам, Отказ, Заголовок);
	
	ТаблицаПоКомплектамИзРезерва = ТаблицаПоКомплектам.Скопировать();
	Если ТаблицаПоКомплектамИзРезерва.Количество() > 0
		И ЗначениеЗаполнено(ЗаказРезерв) Тогда
					
		// Считается исполнением внутреннего заказа. Резерв в это случае делать не надо.
		Если ТипЗнч(ЗаказРезерв) = Тип("ДокументСсылка.ВнутреннийЗаказ") 
			И ЗаказРезерв.Заказчик = Склад Тогда                         
			Возврат;
		Иначе
					
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектамИзРезерва);
													
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
									
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",           Склад);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", ЗаказРезерв);

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
				НаборДвижений.Записать(Ложь);
			КонецЕсли;
						
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияКомплектыРасход_ТоварыВРезервеНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектам, Отказ, Заголовок);
	
	ТаблицаПоКомплектамИзРезерва = УдалитьСтрокиНеТребующиеСписанияРезерва(ТаблицаПоКомплектам);
	Если ТаблицаПоКомплектамИзРезерва.Количество() > 0 Тогда
				
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
					
		// Контроль остатков товара
		ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					
		Если Не Отказ Тогда
						
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектамИзРезерва);
													
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
									
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",           Склад);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", ЗаказРезерв);

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
				НаборДвижений.Записать(Ложь);
			КонецЕсли;
				
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияКомплектыРасход_ТоварыПереданные(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок)
	
	НаборДвижений = Движения.ТоварыПереданные;
	
	// Контроль остатков товара
	ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку, Отказ, Заголовок, РежимПроведения);
	
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектам);
	
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
								
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",      	  Контрагент);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",      		  ЗаказВыпуска);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку);
							
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		НаборДвижений.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоЗаказамНаПроизводство(ТаблицаПоТоварам, ИмяТабличнойЧасти, СтруктураШапкиДокумента, РежимПроведения, Отказ, Заголовок)
	
	Если НЕ УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаказВыпуска) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЗаказВыпуска) <> Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводством.ДвижениеПоЗаказамНаПроизводство(ЭтотОбъект, ТаблицаПоТоварам, ИмяТабличнойЧасти, СтруктураШапкиДокумента, РежимПроведения, Отказ, Заголовок);
		
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ПотребностиЗаказовНаПроизводство
	Если глЗначениеПеременной("ИспользоватьПотребностиЗаказовНаПроизводство") Тогда
		// закрытие потребностей в случае полного выпуска по заказу на производство
		ЗаказыНаПроизводствоИПереработку.ВыполнитьПогашениеПотребностиЗаказаНаПроизводство(ЭтотОбъект, "КомплектацияНоменклатуры", новый Структура("ИмяТабличнойЧастиПродукция, СтруктураШапкиДокумента, СпособЗакрытияПотребностейЗаказовНаПроизводство","", СтруктураШапкиДокумента, мСпособЗакрытияПотребностейЗаказовНаПроизводство));
	КонецЕсли;
	//Снятие размещения заказа покупателя в заказе на производство
	Если НЕ ЗначениеЗаполнено(ЗаказРезерв) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвиженийПоРазмещению   = Движения.РазмещениеЗаказовПокупателей;
	
	// Движения по размещению заказов.
	НаборДвиженийПоРазмещению.КонтрольОстатков(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	Если НЕ Отказ Тогда
		ТаблицаДвиженийПоРазмещению = НаборДвиженийПоРазмещению.Выгрузить();
		ТаблицаДвиженийПоРазмещению.Очистить();

		ТаблицаПоПродукцииДляРазмещения = ТаблицаПоТоварам.Скопировать();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПродукцииДляРазмещения, ТаблицаДвиженийПоРазмещению);
		ТаблицаДвиженийПоРазмещению.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
		ТаблицаДвиженийПоРазмещению.ЗаполнитьЗначения(ЗаказВыпуска, "ЗаказПоставщику");
		ТаблицаДвиженийПоРазмещению.ЗаполнитьЗначения(ЗаказРезерв, "ЗаказПокупателя");
		
		НаборДвиженийПоРазмещению.мПериод = Дата;
		НаборДвиженийПоРазмещению.мТаблицаДвижений = ТаблицаДвиженийПоРазмещению;
		НаборДвиженийПоРазмещению.ВыполнитьРасход();

	КонецЕсли;
КонецПроцедуры

Процедура СформироватьДвиженияПоВнутреннимЗаказам(ТаблицаПоТоварам,  Отказ)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если НЕ (ТипЗнч(ЗаказРезерв) = Тип("ДокументСсылка.ВнутреннийЗаказ") 
		И ЗаказРезерв.Заказчик = Склад) Тогда
		Возврат;
	КонецЕсли;
	НаборДвижений   = Движения.ВнутренниеЗаказы;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	Для Каждого СтрокаДок Из ТаблицаПоТоварам Цикл
		КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(ЗаказРезерв, 
						   СтрокаДок.Количество, 
						   СтрокаДок.Номенклатура,
						   ?(НЕ ЗначениеЗаполнено(СтрокаДок.ХарактеристикаНоменклатуры), Неопределено, СтрокаДок.ХарактеристикаНоменклатуры),
						   СтрокаДок.ЕдиницаИзмерения,
						   Перечисления.СтатусыПартийТоваров.Купленный);
		Если КоличествоОстаток > 0 Тогда
		   НоваяСтрока = ТаблицаДвижений.Добавить();
		   НоваяСтрока.ВнутреннийЗаказ            = ЗаказРезерв;
		   НоваяСтрока.Заказчик                   = Склад;
		   НоваяСтрока.СтатусПартии               = Перечисления.СтатусыПартийТоваров.Купленный;
		   НоваяСтрока.Номенклатура               = СтрокаДок.Номенклатура;
		   НоваяСтрока.ЕдиницаИзмерения           = СтрокаДок.ЕдиницаИзмерения;
		   НоваяСтрока.Количество                 = Мин(СтрокаДок.Количество, КоличествоОстаток);
		   Если ЗначениеЗаполнено(СтрокаДок.ХарактеристикаНоменклатуры) Тогда
			   НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаДок.ХарактеристикаНоменклатуры;
		   КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ТаблицаДвижений.Количество() > 0 Тогда
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.ВыполнитьРасход();
		Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			НаборДвижений.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок)
	
	// Движения по документу.

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию(ТаблицаПоКомплектующим.ВыгрузитьКолонку("СерияНоменклатуры"), Дата, Ложь, Заголовок);

	Если ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
		// По комплектующим (расход).
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры
		   ИЛИ ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
		   
		    СформироватьДвиженияКомплектующиеРасход_ТоварыНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектующим, Отказ, Заголовок);

			// Если есть списание из резерва, то надо списать резерв
			СформироватьДвиженияКомплектующиеРасход_ТоварыВРезервеНаСкладах(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, Отказ, Заголовок);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
			
			СформироватьДвиженияКомплектующиеРасход_ТоварыПереданные(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектующим, Отказ, Заголовок);
			
		КонецЕсли;
		
		// По комплектам (приход)
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			СформироватьДвиженияКомплектыПриход_ТоварыНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектам, Отказ, Заголовок);
			СформироватьДвиженияКомплектыПриход_ТоварыВРезервеНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектам, Отказ, Заголовок);
		КонецЕсли;
		
		СформироватьДвиженияПоЗаказамНаПроизводство(ТаблицаПоКомплектам, "", СтруктураШапкиДокумента, РежимПроведения, Отказ, Заголовок);
		СформироватьДвиженияПоВнутреннимЗаказам(ТаблицаПоКомплектам, Отказ);
	ИначеЕсли ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
		
		// По комплектующим (приход).
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			СформироватьДвиженияКомплектующиеПриход_ТоварыНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектующим, Отказ, Заголовок);
		КонецЕсли;
		
		// По комплектам (расход)
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры
		   ИЛИ ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
		   
		    СформироватьДвиженияКомплектыРасход_ТоварыНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектам, Отказ, Заголовок);
		
			//Если есть списание из резерва, то надо списать резерв		
			СформироватьДвиженияКомплектыРасход_ТоварыВРезервеНаСкладах(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоКомплектам, Отказ, Заголовок);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
			
			СформироватьДвиженияКомплектыРасход_ТоварыПереданные(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок)
			
		КонецЕсли;
		
		СформироватьДвиженияПоЗаказамНаПроизводство(ТаблицаПоКомплектующим, "Комплектующие", СтруктураШапкиДокумента, РежимПроведения, Отказ, Заголовок);
		СформироватьДвиженияПоВнутреннимЗаказам(ТаблицаПоКомплектующим, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	Если ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
		
		// По комплектующим
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции
		   ИЛИ ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		   
			НаборДвижений = Движения.ТоварыОрганизаций;

			// Проверка остатков
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Комплектующие", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			
			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектующим", ТаблицаПоКомплектующим);
														
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
										
				ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
					НаборДвижений.Записать(Ложь);
				КонецЕсли;
					
			КонецЕсли;
		КонецЕсли;   
		
		// По комплектам
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			НаборДвижений = Движения.ТоварыОрганизаций;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектам);
																
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
												
			ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	ИначеЕсли ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
		
		// По комплектующим
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			НаборДвижений = Движения.ТоварыОрганизаций;

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектующим", ТаблицаПоКомплектующим);
															
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
											
			ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;
		
		// По комплектам
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции
		   ИЛИ ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		   
			НаборДвижений = Движения.ТоварыОрганизаций;
			
			// Проверка остатков
			НаборДвижений.КонтрольОстатков(ЭтотОбъект,"", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектам);
																
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
												
				ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
					НаборДвижений.Записать(Ложь);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;   
		
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	Если ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
		
		// По комплектующим
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции
		   ИЛИ ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		   
			НаборДвижений = Движения.ТоварыОрганизацийРегл;

			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектующим", ТаблицаПоКомплектующим);
														
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
										
				ЗначСклад = ?(ВестиПартионныйУчетПоСкладамРегл, Склад, Неопределено);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "НалоговоеНазначение", НалоговоеНазначение);

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
					НаборДвижений.Записать(Ложь);
				КонецЕсли;
					
			КонецЕсли;
		КонецЕсли;   
		
		// По комплектам
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			НаборДвижений = Движения.ТоварыОрганизацийРегл;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектам);
																
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
												
			ЗначСклад = ?(ВестиПартионныйУчетПоСкладамРегл, Склад, Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СчетУчетаБУ", СчетУчетаБУ);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	ИначеЕсли ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
		
		// По комплектующим
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			НаборДвижений = Движения.ТоварыОрганизацийРегл;

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектующим", ТаблицаПоКомплектующим);
															
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
											
			ЗначСклад = ?(ВестиПартионныйУчетПоСкладамРегл, Склад, Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;
		
		// По комплектам
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции
		   ИЛИ ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		   
			НаборДвижений = Движения.ТоварыОрганизацийРегл;
			

			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектам);
																
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
												
				ЗначСклад = ?(ВестиПартионныйУчетПоСкладамРегл, Склад, Неопределено);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СчетУчетаБУ", СчетУчетаБУ);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
					НаборДвижений.Записать(Ложь);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;   
		
	КонецЕсли;

КонецПроцедуры

// Процедура формирует движение по регистру сведений "Списанные товары".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаТаблицыПоТоварам - СтрокаТаблицыЗначений - Текущая строка таблицы товаров
//	ОбособленныйУчетТоваровПоЗаказам - Булево - Признак обособленного учета товаров по заказу покупателя
//	НаборЗаписейСписанныеТовары - РегистрСведенийНаборЗаписей - Набор записей регистра сведений "Списанные товары"
//
Процедура СформироватьДвиженияПоРегиструСписанныеТовары(
	СтруктураШапкиДокумента,
	СтрокаТаблицыПоТоварам,
	ОбособленныйУчетТоваровПоЗаказам,
	НаборЗаписейСписанныеТовары
	)
	
	НоваяСтрока = НаборЗаписейСписанныеТовары.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.НомерСтрокиДокумента = СтрокаТаблицыПоТоварам.НомерСтроки;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыПоТоварам);
	
	НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
	//Признак отражения в УУ берем из реквизита документа
	Если ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Подразделение = СтруктураШапкиДокумента.Подразделение;
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
		НоваяСтрока.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	Иначе
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Заказ)
		  И  ТипЗНЧ(СтруктураШапкиДокумента.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")
		  И  СтруктураШапкиДокумента.Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			  НоваяСтрока.ДоговорКонтрагента = СтруктураШапкиДокумента.Заказ.ДоговорКонтрагента;
		КонецЕсли;	  
	КонецЕсли;

	
	НоваяСтрока.ДокументОприходованияНовый = СтруктураШапкиДокумента.Ссылка;
	НоваяСтрока.Склад = СтруктураШапкиДокумента.Склад;
	НоваяСтрока.СкладПолучатель = СтруктураШапкиДокумента.Склад;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции
	 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика
	Тогда
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Заказ) Тогда
			НоваяСтрока.ЗаказСписания = СтруктураШапкиДокумента.Заказ;
		Иначе
			НоваяСтрока.ЗаказСписания = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		Если ЗначениеЗаполнено(НоваяСтрока.ДоговорКонтрагента)
		  И НоваяСтрока.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей
		Тогда
			НоваяСтрока.ЗаказСписания = ?((ЗначениеЗаполнено(СтруктураШапкиДокумента.ЗаказРезерв)) И (ТипЗНЧ(СтруктураШапкиДокумента.ЗаказРезерв) = Тип("ДокументСсылка.ЗаказПокупателя")), СтруктураШапкиДокумента.ЗаказРезерв, Неопределено);
		КонецЕсли;	
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ЗаказВыпуска)
		   И ТипЗНЧ(СтруктураШапкиДокумента.ЗаказВыпуска) = Тип("ДокументСсылка.ЗаказПоставщику")
		Тогда
			НоваяСтрока.ЗаказПартии = СтруктураШапкиДокумента.ЗаказВыпуска;
		Иначе
			НоваяСтрока.ЗаказПартии = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураШапкиДокумента.ЗаказРезерв)
	   И (
		ОбособленныйУчетТоваровПоЗаказам
	   	И СтрокаТаблицыПоТоварам.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
	 	ИЛИ 
		СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры
		И СтрокаТаблицыПоТоварам.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку
	 	)
	Тогда
		НоваяСтрока.ЗаказПартии = СтруктураШапкиДокумента.ЗаказРезерв;
	Иначе
		НоваяСтрока.ЗаказПартии = Неопределено;
	КонецЕсли;
	
	// Заполнение допустимых статусов партий.
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры
	   И СтрокаТаблицыПоТоварам.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку
	Тогда
		НоваяСтрока.ДопустимыйСтатус1 = Перечисления.СтатусыПартийТоваров.ВПереработку;
		
		НоваяСтрока.КоличествоПоступление = НоваяСтрока.Количество;
		НоваяСтрока.НоменклатураНовая = НоваяСтрока.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатурыНовая = НоваяСтрока.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатурыНовая = НоваяСтрока.СерияНоменклатуры;
	Иначе
		НоваяСтрока.ДопустимыйСтатус1 = Перечисления.СтатусыПартийТоваров.Купленный;
		НоваяСтрока.ДопустимыйСтатус2 = Перечисления.СтатусыПартийТоваров.НаКомиссию;
		НоваяСтрока.ДопустимыйСтатус3 = Перечисления.СтатусыПартийТоваров.Продукция;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
		НоваяСтрока.СтатусПартииНовый = СтруктураШапкиДокумента.СтатусПартии;
			
	ИначеЕсли СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
		НоваяСтрока.СтатусПартииНовый = СтрокаТаблицыПоТоварам.СтатусПартии;
			
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика 
	 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции
	Тогда
		НоваяСтрока.КорСубконтоБУ1 = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		НоваяСтрока.КорСубконтоБУ2 = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		
		Если СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
			НоваяСтрока.КорСубконтоБУ3 = СтрокаТаблицыПоТоварам.СтатьяЗатрат;
		Иначе
			НоваяСтрока.КорСубконтоБУ3 = СтруктураШапкиДокумента.СтатьяЗатрат;
		КонецЕсли;
		
		НоваяСтрока.НоменклатурнаяГруппа = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
	КонецЕсли;
	
	Если ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
		НоваяСтрока.СчетУчетаБУ = СтруктураШапкиДокумента.СчетУчетаБУ;
	КонецЕсли;
	
	// Заполнение корр. счетов по бухгалтерскому и налоговому учету.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		
		Если СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
			НоваяСтрока.КорСчетБУ = СтруктураШапкиДокумента.СчетУчетаБУ;
		Иначе
			НоваяСтрока.КорСчетБУ = СтрокаТаблицыПоТоварам.СчетУчетаБУ;
		КонецЕсли;
	Иначе
		Если СтрокаТаблицыПоТоварам.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			НоваяСтрока.КорСчетБУ = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
		Иначе
			НоваяСтрока.КорСчетБУ = СтруктураШапкиДокумента.СчетЗатрат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если ВидКомплектации = Перечисления.ВидыКомплектации.Сборка тогда
			НоваяСтрока.НалоговоеНазначениеПоФакту      = СтруктураШапкиДокумента.НалоговоеНазначение;
			НоваяСтрока.НалоговоеНазначениеНовое        = СтруктураШапкиДокумента.НалоговоеНазначение;
		ИначеЕсли ВидКомплектации = Перечисления.ВидыКомплектации.Разборка тогда
			Если СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				НоваяСтрока.НалоговоеНазначениеПоФакту      = СтрокаТаблицыПоТоварам.НалоговоеНазначение;
				НоваяСтрока.НалоговоеНазначениеНовое        = СтрокаТаблицыПоТоварам.НалоговоеНазначение;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры 
			И СтрокаТаблицыПоТоварам.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
				НоваяСтрока.НалоговоеНазначениеПоФакту      = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				НоваяСтрока.НалоговоеНазначениеНовое        = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли;	
		
		
	КонецЕсли;  
	
	// Заполнение кодов операций.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Комплектация;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
		НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеПартийВПроизводствоОперативно;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
		НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
		НоваяСтрока.ЗаказСписания = Заказ;
	КонецЕсли;  
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
		НоваяСтрока.ЗаказПартии = ?(ЗначениеЗаполнено(ЗаказВыпуска), ЗаказВыпуска, Неопределено);
   	КонецЕсли; 
	
	//При допроведении признак отражения в УУ должен быть как реквизит документа
	НоваяСтрока.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
	НоваяСтрока.ОтражатьВБухгалтерскомУчете = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструСписанныеТовары()

Процедура ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	ТаблицаПоТоварам = ТаблицаПоКомплектующим.Скопировать();

	// Количество комплекта распределяется на комплектующие
	СтрокаКомплекта = ТаблицаПоКомплектам[0];

	Если ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда

		ТаблицаПоТоварам.Колонки.Добавить("НоменклатураНовая");
		ТаблицаПоТоварам.Колонки.Добавить("ХарактеристикаНоменклатурыНовая");
		ТаблицаПоТоварам.Колонки.Добавить("СерияНоменклатурыНовая");
		ТаблицаПоТоварам.Колонки.Добавить("КоличествоПоступление");

		КоличествоКомплекта = Окр(СтрокаКомплекта.Количество/ТаблицаПоТоварам.Количество(), 3);

		НеРаспределеноКоличествоКомплекта = СтрокаКомплекта.Количество;

		Для каждого Строка Из ТаблицаПоТоварам Цикл

			Строка.НоменклатураНовая = СтрокаКомплекта.Номенклатура;
			Строка.ХарактеристикаНоменклатурыНовая = СтрокаКомплекта.ХарактеристикаНоменклатуры;
			
			Если СтрокаКомплекта.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
				Строка.СерияНоменклатурыНовая = СтрокаКомплекта.СерияНоменклатуры;
			КонецЕсли;	

			НеРаспределеноКоличествоКомплекта = НеРаспределеноКоличествоКомплекта - КоличествоКомплекта;

			Строка.КоличествоПоступление = КоличествоКомплекта;

			Если ТаблицаПоТоварам.Индекс(Строка) = ТаблицаПоТоварам.Количество() - 1 Тогда
				Строка.КоличествоПоступление = Строка.КоличествоПоступление + НеРаспределеноКоличествоКомплекта;
			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда

		ТаблицаПоТоварам.Колонки.Номенклатура.Имя               = "НоменклатураНовая";
		ТаблицаПоТоварам.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаНоменклатурыНовая";
		ТаблицаПоТоварам.Колонки.СерияНоменклатуры.Имя          = "СерияНоменклатурыНовая"; 
		ТаблицаПоТоварам.Колонки.Количество.Имя                 = "КоличествоПоступление";

		ТаблицаПоТоварам.Колонки.Добавить("Номенклатура");
		ТаблицаПоТоварам.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаПоТоварам.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаПоТоварам.Колонки.Добавить("Количество");

		НеРаспределеноКоличествоКомплекта = СтрокаКомплекта.Количество;

		ВсегоДолейСтоимости = ТаблицаПоТоварам.Итог("ДоляСтоимости");

		Для каждого Строка Из ТаблицаПоТоварам Цикл

			КоэффициентСтроки   = ?(ВсегоДолейСтоимости = 0, 0, Строка.ДоляСтоимости/ВсегоДолейСтоимости);
			КоличествоКомплекта = Окр(СтрокаКомплекта.Количество*КоэффициентСтроки, 3);

			Строка.Номенклатура               = СтрокаКомплекта.Номенклатура;
			Строка.ХарактеристикаНоменклатуры = СтрокаКомплекта.ХарактеристикаНоменклатуры;
			Строка.СерияНоменклатуры          = СтрокаКомплекта.СерияНоменклатуры;

			Если НЕ Строка.НоменклатураНовая.ВестиПартионныйУчетПоСериям Тогда
				Строка.СерияНоменклатурыНовая = Неопределено;
			КонецЕсли;				
			
			НеРаспределеноКоличествоКомплекта = НеРаспределеноКоличествоКомплекта-КоличествоКомплекта;

			Строка.Количество = КоличествоКомплекта;

			Если ТаблицаПоТоварам.Индекс(Строка) = ТаблицаПоТоварам.Количество() - 1 Тогда
				Строка.Количество = Строка.Количество + НеРаспределеноКоличествоКомплекта;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
    // ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборЗаписейСписанныеТовары = Движения.СписанныеТовары;

	ИспользоватьРА = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата);
	
	Для Каждого СтрокаТаблицыПоТоварам Из ТаблицаПоТоварам Цикл
		
		Если (НЕ ИспользоватьРА)
		  ИЛИ (ТаблицаПоТоварам.Колонки.Найти("СтатусМатериальныхЗатрат") = Неопределено)	
		  ИЛИ (СтрокаТаблицыПоТоварам.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку) Тогда
			СформироватьДвиженияПоРегиструСписанныеТовары(
				СтруктураШапкиДокумента,
				СтрокаТаблицыПоТоварам,
				СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
				НаборЗаписейСписанныеТовары
			);
		КонецЕсли;	
	КонецЦикла;
		
	НаборЗаписейСписанныеТовары.Записать(Истина);

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

Функция ПодготовитьТаблицуКомплектацииДляРасширеннойАналитики(СтруктураШапкиДокумента, ТаблицаПоКомплектующим,ТаблицаПоКомплектам)
	ТаблицаКомплектации = Новый ТаблицаЗначений();
	ТаблицаКомплектации.Колонки.Добавить("НомерСтроки");
	ТаблицаКомплектации.Колонки.Добавить("СчетУчетаБУ");
	ТаблицаКомплектации.Колонки.Добавить("Номенклатура");
	ТаблицаКомплектации.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаКомплектации.Колонки.Добавить("СерияНоменклатуры");
	ТаблицаКомплектации.Колонки.Добавить("Количество");
	ТаблицаКомплектации.Колонки.Добавить("КорСчетУчетаБУ");
	ТаблицаКомплектации.Колонки.Добавить("КорНоменклатура");
	ТаблицаКомплектации.Колонки.Добавить("КорХарактеристикаНоменклатуры");
	ТаблицаКомплектации.Колонки.Добавить("КорСерияНоменклатуры");
	ТаблицаКомплектации.Колонки.Добавить("КорКоличество");
	ТаблицаКомплектации.Колонки.Добавить("НалоговоеНазначение"); 
	ТаблицаКомплектации.Колонки.Добавить("КорНалоговоеНазначение"); 	
	
	ТаблицаКомплектации.Колонки.Добавить("ПринадлежностьНоменклатуры");
	ТаблицаКомплектации.Колонки.Добавить("СтатьяЗатрат");
	ТаблицаКомплектации.Колонки.Добавить("ВидЗатрат");
	ТаблицаКомплектации.Колонки.Добавить("ХарактерЗатрат");
	
	Если СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
		ОбщееКоличествоКомплектующих = ТаблицаПоКомплектующим.Итог("Количество");
		КоличествоКомплектов = ТаблицаПоКомплектам[0].Количество;
		Для Каждого ТекущаяСтрока Из ТаблицаПоКомплектующим Цикл
			НоваяСтрока = ТаблицаКомплектации.Добавить();
						
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрока);
			
			НоваяСтрока.КорСчетУчетаБУ = СтруктураШапкиДокумента.СчетУчетаБУ;
			НоваяСтрока.КорНалоговоеНазначение = ТаблицаПоКомплектам[0].НалоговоеНазначение;
			НоваяСтрока.НалоговоеНазначение = ТаблицаПоКомплектам[0].НалоговоеНазначение;
			НоваяСтрока.КорНоменклатура = ТаблицаПоКомплектам[0].Номенклатура;
			НоваяСтрока.КорХарактеристикаНоменклатуры = ТаблицаПоКомплектам[0].ХарактеристикаНоменклатуры;
			НоваяСтрока.КорСерияНоменклатуры = ТаблицаПоКомплектам[0].СерияНоменклатуры;
			
			НоваяСтрока.КорКоличество = Окр(КоличествоКомплектов*ТекущаяСтрока.Количество/ОбщееКоличествоКомплектующих,3);
			
			ОбщееКоличествоКомплектующих = ОбщееКоличествоКомплектующих - ТекущаяСтрока.Количество;
			КоличествоКомплектов = КоличествоКомплектов - НоваяСтрока.КорКоличество;
			НоваяСтрока.НомерСтроки = ТекущаяСтрока.НомерСтроки;
		КонецЦикла;
	Иначе
		ОбщееКоличествоДолейСтоимости = ТаблицаПоКомплектующим.Итог("ДоляСтоимости");
		КоличествоКомплектов = ТаблицаПоКомплектам[0].Количество;
		Для Каждого ТекущаяСтрока Из ТаблицаПоКомплектующим Цикл
			НоваяСтрока = ТаблицаКомплектации.Добавить();
			
			НоваяСтрока.КорСчетУчетаБУ = ТекущаяСтрока.СчетУчетаБУ;
			НоваяСтрока.КорНалоговоеНазначение = ТекущаяСтрока.НалоговоеНазначение;   
			НоваяСтрока.КорНоменклатура = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.КорХарактеристикаНоменклатуры = ТекущаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.КорСерияНоменклатуры = ТекущаяСтрока.СерияНоменклатуры;
			НоваяСтрока.КорКоличество = ТекущаяСтрока.Количество;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТаблицаПоКомплектам[0]);
			
			Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
				НоваяСтрока.СтатьяЗатрат = ТекущаяСтрока.СтатьяЗатрат;
				НоваяСтрока.ВидЗатрат = ТекущаяСтрока.ВидЗатрат;
				НоваяСтрока.ХарактерЗатрат = ТекущаяСтрока.ХарактерЗатрат;
			КонецЕсли;	
			
			НоваяСтрока.СчетУчетаБУ = СтруктураШапкиДокумента.СчетУчетаБУ;
			НоваяСтрока.Количество = Окр(КоличествоКомплектов*ТекущаяСтрока.ДоляСтоимости/ОбщееКоличествоДолейСтоимости,3);
			
			ОбщееКоличествоДолейСтоимости = ОбщееКоличествоДолейСтоимости - ТекущаяСтрока.ДоляСтоимости;
			КоличествоКомплектов = КоличествоКомплектов - НоваяСтрока.Количество;
			НоваяСтрока.НомерСтроки = ТекущаяСтрока.НомерСтроки;
		КонецЦикла;		
	КонецЕсли;	
	Возврат ТаблицаКомплектации;
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ = ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      , "ВалютаУправленческогоУчета"      , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      , "КурсВалютыУправленческогоУчета"  , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      , "ИспользоватьУказаниеСерийНоменклатурыПриРезервировании"  , "ИспользоватьУказаниеСерийНоменклатурыПриРезервировании");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"          , "ВидСклада"                       , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура"   , "Услуга"                          , "Услуга");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура"   , "Набор"                           , "Набор");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура"   , "Комплект"                        , "Комплект");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура"   , "ЕдиницаХраненияОстатков.Коэффициент", "КоэффициентЕдиницыХранения");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам"    , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"    , "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СтатьяЗатрат", "СтатусМатериальныхЗатрат", "СтатусМатериальныхЗатрат");
	
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
    СтруктураШапкиДокумента.Вставить("СуммаДолейСтоимости",Комплектующие.Итог("ДоляСтоимости"));
    СтруктураШапкиДокумента.Вставить("ВидВоспроизводства",Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	
	Если ЗначениеЗаполнено(ЗаказРезерв) 
		И ТипЗнч(ЗаказРезерв) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтруктураШапкиДокумента.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей);
	Иначе
		СтруктураШапкиДокумента.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", Ложь);
	КонецЕсли; 

 КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ);

	//Коновалова 28022013 +
	Если Не РольДоступна("ПолныеПрава") И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ТОгда
		 Сообщить("Нельзя провести документ без отражения по бух. учету!
		          | Заполните галочку бух. учет.");
		Отказ = Истина;		  
	КонецЕсли;
	//Коновалова 28022013 -
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"             , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Услуга"                       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                        , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                     , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                   , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"   , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"            , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ЗаказПартии"                  , "Ссылка.ЗаказРезерв");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров" , "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("ДоляСтоимости"                , "ДоляСтоимости");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"          , "СуммаПередачи");
	
	Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
		Если ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
			СтруктураПолей.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
			СтруктураПолей.Вставить("СтатусМатериальныхЗатрат", "СтатьяЗатрат.СтатусМатериальныхЗатрат");
			СтруктураПолей.Вставить("ХарактерЗатрат", "СтатьяЗатрат.ХарактерЗатрат");
			СтруктураПолей.Вставить("ВидЗатрат", "СтатьяЗатрат.ВидЗатрат");  
		ИначеЕсли ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
			СтруктураПолей.Вставить("СтатьяЗатрат", "Ссылка.СтатьяЗатрат");
			СтруктураПолей.Вставить("СтатусМатериальныхЗатрат", "Ссылка.СтатьяЗатрат.СтатусМатериальныхЗатрат");
			СтруктураПолей.Вставить("ХарактерЗатрат", "Ссылка.СтатьяЗатрат.ХарактерЗатрат");
			СтруктураПолей.Вставить("ВидЗатрат", "Ссылка.СтатьяЗатрат.ВидЗатрат"); 
		КонецЕсли;
	КонецЕсли;  	 
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
		СтруктураПолей.Вставить("ЗаказНаПроизводство", "Ссылка.ЗаказВыпуска");
		СтруктураПолей.Вставить("Спецификация", "Ссылка.Спецификация");  
	КонецЕсли;  	
		
	Если ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
		СтруктураПолей.Вставить("СтатусПартии","СтатусПартии");
	КонецЕсли;

	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей);

	РезультатЗапросаПоКомплектующим = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Комплектующие", СтруктураПолей, СтруктураПростыхПолей);

	// Подготовим таблицы для проведения.
	ТаблицаПоКомплектующим = ПодготовитьТаблицуКомплектующих(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента);
	ТаблицаПоКомплектам    = ПодготовитьТаблицуКомплектов(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента);;
	
	//Проверим заполнение счетов учета.
	//Счета затрат проверяются в ПроверитьЗаполнениеШапки()
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Комплектующие", ТаблицаПоКомплектующим, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиКомплектующих(ТаблицаПоКомплектующим, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные экспортными
	Если НЕ Отказ И глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
	  И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата Тогда
	  
	    СтруктураШапкиДокумента.Вставить("ЗаписыватьДвиженияПоРегистрамУчетаЗатрат",Истина);
	  
		//Сделаем переменные доступными из подписок на события
		ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
		ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура());
	  
		ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоКомплектующим", ПодготовитьТаблицуКомплектацииДляРасширеннойАналитики(СтруктураШапкиДокумента, ТаблицаПоКомплектующим,ТаблицаПоКомплектам));
	КонецЕсли;	

КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Комплектующие,	// ТабличнаяЧастьТовары
			Неопределено,	// ТабличнаяЧастьВозвратнаяТара
			Неопределено,   // ТабличнаяЧастьУслуги
			Неопределено,   // ТабличнаяЧастьОборудование
			Неопределено, 	// ТабличнаяЧастьОбъектыСтроительства
			Неопределено 	// ТабличнаяЧастьБланкиСтрогогоУчета
		);
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если УчетнаяПолитика <> Неопределено И НЕ УчетнаяПолитика.ЕстьНДС Тогда
			НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		КонецЕсли; 
	
	КонецЕсли;	

	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Для исходных комплектующих при операции "поступление от переработчика" серии не указываются.
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
		
		Если ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
			Для Каждого СтрокаТабличнойЧасти Из Комплектующие Цикл
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерияНоменклатуры) Тогда
					СтрокаТабличнойЧасти.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		// Заполнение шапки
		Комментарий     = Основание.Комментарий;
		ЗаказРезерв		= Основание.Ссылка;
		СуммаДокумента  = Основание.СуммаДокумента;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		// Заполнение шапки
		Комментарий     = Основание.Комментарий;
		ЗаказРезерв		= Основание.Ссылка;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		Комментарий    = Основание.Комментарий;
		СуммаДокумента = Основание.СуммаДокумента;
		Если ЗначениеЗаполнено(Основание.ЗаказПокупателя) Тогда
			ЗаказРезерв = Основание.ЗаказПокупателя;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции;
		ВидКомплектации = Перечисления.ВидыКомплектации.Сборка;
		ЗаказВыпуска = Основание;
		Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");

		#Если Клиент Тогда
		СписокПодразделений = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(Основание.Подразделение,Основание.Организация);
		Если СписокПодразделений.Количество()=0 Тогда
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		Иначе
			ПодразделениеОрганизации = СписокПодразделений[0].Значение;
		КонецЕсли;
	    Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
        #КонецЕсли

		//Заполняем полученную номенклатуру
		ЗаполнитьКомплектПоЗаказуНаПроизводство(Основание);
		ЗаполнитьСчетаУчетаВШапке(ОтражатьВБухгалтерскомУчете);

		//Заполняем исходные комплектующие
		Если ЗначениеЗаполнено(Спецификация) Тогда
			ЗаполнитьМатериалыПоСпецификации();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКомплектПоЗаказуНаПроизводство(ЗаказНаПроизводство)
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|Номенклатура,
	|ХарактеристикаНоменклатуры,
	|ВЫРАЗИТЬ(КоличествоОстаток * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЕдиницаИзмерения.Коэффициент  КАК Число(15,3)) КАК Количество,
	|ЕдиницаИзмерения,
	|Спецификация
	|ИЗ РегистрНакопления.ЗаказыНаПроизводство.Остатки(,ЗаказНаПроизводство=&ЗаказНаПроизводство И Номенклатура.Услуга=ложь)
	|ГДЕ КоличествоОстаток>0";
	Запрос.УстановитьПараметр("ЗаказНаПроизводство",ЗаказНаПроизводство);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Количество()=1 Тогда
		Выборка.Следующий();
		ВыбСтрока = Выборка;
	Иначе
		ТабРез = Результат.Выгрузить();
		ФормаВыбора = ПолучитьФорму("ФормаВыбораВыпускаемойНоменклатуры");
		ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = истина;
		ФормаВыбора.РежимВыбора = истина;
		Для каждого Строка из табРез цикл
			нстр = ФормаВыбора.ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(нстр,Строка);
		КонецЦикла;
		ВыбСтрока = ФормаВыбора.ОткрытьМодально(120);
		Если ВыбСтрока = неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Номенклатура 				= ВыбСтрока.Номенклатура;
	ХарактеристикаНоменклатуры 	= ВыбСтрока.ХарактеристикаНоменклатуры;
	Спецификация 				= ВыбСтрока.Спецификация;
	Количество 					= ВыбСтрока.Количество;
	ЕдиницаИзмерения 			= ВыбСтрока.ЕдиницаИзмерения;
	Коэффициент 				= ВыбСтрока.ЕдиницаИзмерения.Коэффициент;
	
	//запрос по размещению
	ЗапросРазмещение = новый Запрос;
	ЗапросРазмещение.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|ЗаказПокупателя,
	|КоличествоОстаток КАК Количество
	|ИЗ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(,ЗаказПоставщику = &ЗаказНаПроизводство И Номенклатура=&Номенклатура 
	|	и ХарактеристикаНоменклатуры=&Характеристика И (ЗаказПокупателя ССЫЛКА Документ.ВнутреннийЗаказ ИЛИ ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя))
	|ГДЕ КоличествоОстаток>=&КоличествоДокумент 
	|УПОРЯДОЧИТЬ ПО ЗаказПокупателя.ДатаОтгрузки";
    ЗапросРазмещение.УстановитьПараметр("Номенклатура",Номенклатура);
	ЗапросРазмещение.УстановитьПараметр("Характеристика",ХарактеристикаНоменклатуры);
	ЗапросРазмещение.УстановитьПараметр("КоличествоДокумент",Окр(Количество * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / Коэффициент,3));
	ЗапросРазмещение.УстановитьПараметр("ЗаказНаПроизводство",ЗаказНаПроизводство);
    Выборка = ЗапросРазмещение.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаказРезерв = Выборка.ЗаказПокупателя;
	КонецЕсли;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мСпособЗакрытияПотребностейЗаказовНаПроизводство 	= глЗначениеПеременной("СпособЗакрытияПотребностейЗаказовНаПроизводство");


