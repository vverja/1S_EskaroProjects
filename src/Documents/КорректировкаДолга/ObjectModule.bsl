Перем мВалютаРегламентированногоУчета Экспорт;
Перем мДанныеВалютыРегламентированногоУчета;

Перем мУчетнаяПолитикаБух, мУчетнаяПолитикаНУ;


Перем мУдалятьДвижения;

Перем РежимВосстановленияПоследовательностейРасчетов Экспорт;

Перем мКоэффициентПропорциональногоНДС;

Перем мТекущаяСхемаНалогообложения Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.УстановитьПараметр("УвеличениеДолга", Перечисления.ВидыЗадолженности.Кредиторская);

	Запрос.УстановитьПараметр("УменьшениеДолга", Перечисления.ВидыЗадолженности.Дебиторская);


	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	КорректировкаДолга.Ссылка.Номер КАК Номер,
	|	КорректировкаДолга.Ссылка.Дата КАК Дата,
	|	КорректировкаДолга.Ссылка.КонтрагентДебитор КАК Получатель,
	|	КорректировкаДолга.Ссылка.Организация КАК Поставщик,
	|	КорректировкаДолга.Ссылка.Организация КАК Организация,
	|	КорректировкаДолга.НомерСтроки КАК НомерСтроки,
	|	КорректировкаДолга.ДоговорКонтрагента КАК ДоговорВзаиморасчетов,
	|	КорректировкаДолга.ДоговорКонтрагента.Представление КАК ПредставлениеДоговора,
	|	КорректировкаДолга.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	КорректировкаДолга.Ссылка.ВидОперации КАК ВидОперации,
	|	КорректировкаДолга.Сделка КАК Сделка,
	|	КорректировкаДолга.Сделка.Представление КАК ПредставлениеСделки,
	|	КорректировкаДолга.Ссылка.КонтрагентКредитор КАК КонтрагентКредитор,
	|	КорректировкаДолга.Ссылка.КонтрагентДебитор КАК КонтрагентДебитор,
	|	ВЫБОР
	|		КОГДА КорректировкаДолга.ВидЗадолженности = &УвеличениеДолга
	|			ТОГДА КорректировкаДолга.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолгаКонтрагента,
	|	ВЫБОР
	|		КОГДА КорректировкаДолга.ВидЗадолженности = &УменьшениеДолга
	|			ТОГДА КорректировкаДолга.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УменьшениеДолгаКонтрагента
	|ИЗ

	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолга

	|

	|ГДЕ

	|	КорректировкаДолга.Ссылка = &ТекущийДокумент

	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Валюта";
	
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Шапка = РезультатЗапроса.Выбрать();
		
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_КорректировкаДолга";

	Макет = ПолучитьМакет("КорректировкаДолга");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	// Выводим шапку

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	Если Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		НаименованиеОперации = НСтр("ru='Списание безнадежной задолженности';uk='Списання безнадійної заборгованості'",КодЯзыкаПечать);
		НаименованиеДебетора = НСтр("ru='Контрагент:';uk='Контрагент:'",КодЯзыкаПечать);
		НаименованиеКредитора = "";
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности  Тогда
		НаименованиеОперации = НСтр("ru='Перенос задолженности';uk='Перенесення боргу'",КодЯзыкаПечать);
		НаименованиеДебетора = НСтр("ru='Контрагент:';uk='Контрагент:'",КодЯзыкаПечать);

		НаименованиеКредитора = НСтр("ru='Контрагент - получатель:';uk='Контрагент - отримувач:'",КодЯзыкаПечать);

	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета  Тогда

		НаименованиеОперации = НСтр("ru='Взаимозачет';uk='Взаємозалік'",КодЯзыкаПечать);

		НаименованиеДебетора = НСтр("ru='Дебитор:';uk='Дебітор:'",КодЯзыкаПечать);

		НаименованиеКредитора = НСтр("ru='Кредитор:';uk='Кредитор:'",КодЯзыкаПечать);

	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
		НаименованиеОперации = НСтр("ru='Ввод начальных остатков';uk='Введення початкових залишків'",КодЯзыкаПечать);
		НаименованиеДебетора = НСтр("ru='Контрагент:';uk='Контрагент:'",КодЯзыкаПечать);

		НаименованиеКредитора = "";

	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
		НаименованиеОперации = НСтр("ru='Изменение задолженности';uk='Корегування заборгованності'",КодЯзыкаПечать);
		НаименованиеДебетора = НСтр("ru='Контрагент:';uk='Контрагент:'",КодЯзыкаПечать);
		НаименованиеКредитора = "";
	КонецЕсли;
	ОбластьМакета.Параметры.ТекстЗаголовка = "" + ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Корректировка долга';uk='Корегування боргу '",КодЯзыкаПечать),КодЯзыкаПечать)+ "
	|"+НаименованиеОперации;
	
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,КодЯзыкаПечать), "ПолноеНаименование,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Контрагент = НаименованиеДебетора;
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.КонтрагентДебитор, Шапка.Дата,,,КодЯзыкаПечать), "ПолноеНаименование,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	Если НЕ НаименованиеКредитора = "" Тогда
	
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");

		ОбластьМакета.Параметры.Контрагент = НаименованиеКредитора;

		ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.КонтрагентКредитор, Шапка.Дата,,,КодЯзыкаПечать), "ПолноеНаименование,",,КодЯзыкаПечать);

		ТабДокумент.Вывести(ОбластьМакета);

	
	КонецЕсли; 
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим строки

	ИтогоВПлюс  = 0;
	ИтогоВМинус = 0;
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ВыборкаСтрокТовары = РезультатЗапроса.Выбрать();
	ВыборкаСтрокТовары.Следующий();// пропустим итог
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоВПлюс  = ИтогоВПлюс  + ВыборкаСтрокТовары.УвеличениеДолгаКонтрагента;
		ИтогоВМИнус = ИтогоВМИнус + ВыборкаСтрокТовары.УменьшениеДолгаКонтрагента;

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ИтогоВПлюс  = ИтогоВПлюс;
	ОбластьМакета.Параметры.ИтогоВМИнус = ИтогоВМИнус;
	ОбластьМакета.Параметры.ВалютаДокумента = ВалютаДокумента;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда

		Предупреждение("Документ можно распечатать только после его записи");

		Возврат;

	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");

		Возврат;

	КонецЕсли;



	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда

		Возврат;

	КонецЕсли;



	Если ИмяМакета = "КорректировкаДолга" Тогда		

		// Получить экземпляр документа на печать

		ТабДокумент = ПечатьДокумента();

		

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда



		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		

		Если ТабДокумент = Неопределено Тогда

			Возврат

		КонецЕсли; 

		

	КонецЕсли;



	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);


КонецПроцедуры // Печать

#КонецЕсли


// Возвращает доступные варианты печати документа

//

// Вовращаемое значение:

//  Струткура, каждая строка которой соответствует одному из вариантов печати

//  

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт



	Возврат Новый Структура("КорректировкаДолга","Корректировка долга");



КонецФункции // ПолучитьСписокПечатныхФорм()



// Заполняет документ остатками дебиторской задолженности контрагента по данным упр.учета

//

Процедура ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр(Вариант=1) Экспорт

	

	Запрос = Новый Запрос;

	

	Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);

	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.УстановитьПараметр("ДатаДокумента", Дата);

	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);

	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);

	
    Если Вариант =1 Тогда
        Запрос.Текст = 

	 "ВЫБРАТЬ
     |  ЕСТЬNULL(ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента, ВзаиморасчетыПоДокументам.ДоговорКонтрагента) КАК ДоговорКонтрагента,
     |  ВзаиморасчетыСКонтрагентами.Сделка,
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетовСКонтрагентом,
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
     |  ВЫБОР
     |      КОГДА ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
     |          ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток)
     |      ИНАЧЕ ВЫБОР
     |              КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL
     |                      ИЛИ КурсыВалютСрезПоследних.Кратность = 0
     |                  ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
     |              ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
     |          КОНЕЦ
     |  КОНЕЦ КАК СуммаРеглОстаток,
     |  ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
     |  ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
     |  ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
     |ИЗ
     |  РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
     |          ,
     |          Контрагент = &Контрагент
     |              И Организация = &Организация
     |              И ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента) КАК ВзаиморасчетыСКонтрагентами
     |      ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
     |              ,
     |              Контрагент = &Контрагент
     |                  И Организация = &Организация
     |                  И ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента) КАК ВзаиморасчетыПоДокументам
     |      ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ВзаиморасчетыПоДокументам.ДоговорКонтрагента
     |          И ВзаиморасчетыСКонтрагентами.Сделка = ВзаиморасчетыПоДокументам.Сделка
     |      ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
     |      ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
     |ГДЕ
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) > 0";
 Иначе
     Запрос.Текст = 

	 "ВЫБРАТЬ
     |  ЕСТЬNULL(ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента, ВзаиморасчетыПоДокументам.ДоговорКонтрагента) КАК ДоговорКонтрагента,
     |  ВзаиморасчетыСКонтрагентами.Сделка,
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетовСКонтрагентом,
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
     |  ВЫБОР
     |      КОГДА ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
     |          ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток)
     |      ИНАЧЕ ВЫБОР
     |              КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL
     |                      ИЛИ КурсыВалютСрезПоследних.Кратность = 0
     |                  ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
     |              ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
     |          КОНЕЦ
     |  КОНЕЦ КАК СуммаРеглОстаток,
     |  ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
     |  ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
     |  ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
     |ИЗ
     |  РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
     |          ,
     |          Контрагент = &Контрагент
     |              И Организация = &Организация
     |              И ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента) КАК ВзаиморасчетыСКонтрагентами
     |      ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
     |              ,
     |              Контрагент = &Контрагент
     |                  И Организация = &Организация
     |                  И ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента) КАК ВзаиморасчетыПоДокументам
     |      ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ВзаиморасчетыПоДокументам.ДоговорКонтрагента
     |          И ВзаиморасчетыСКонтрагентами.Сделка = ВзаиморасчетыПоДокументам.Сделка
     |      ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
     |      ПО ВзаиморасчетыПоДокументам.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
     |ГДЕ
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) > 0";

    КонецЕсли; 
	


	РезультатЗапроса = Запрос.Выполнить();



	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		НоваяСтрока                               = СуммыДолга.Добавить();

		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;

		НоваяСтрока.Сделка                        = Выборка.Сделка;

		НоваяСтрока.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;

		НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;

		НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;

		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Дебиторская;

		НоваяСтрока.Сумма                         = Выборка.СуммаВзаиморасчетовОстаток;

		НоваяСтрока.СуммаРегл                     = Выборка.СуммаРеглОстаток;
		
		Если НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда

			НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель;

		ИначеЕсли НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

			НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик;

		Иначе
			НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель;

		КонецЕсли;

		

		НоваяСтрока.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты;	

		

	КонецЦикла;

	

КонецПроцедуры



// Заполняет документ остатками кредиторской задолженности контрагента по данным упр.учета

//

Процедура ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр(Вариант=1) Экспорт

	

	Запрос = Новый Запрос;

	

	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

		Запрос.УстановитьПараметр("Контрагент",  КонтрагентКредитор);

	Иначе

		Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);

	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.УстановитьПараметр("ДатаДокумента", Дата);

	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);

	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);

	
    Если Вариант = 1 Тогда
        	Запрос.Текст = 

	 "ВЫБРАТЬ
     |  ЕСТЬNULL(ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента, ВзаиморасчетыПоДокументам.ДоговорКонтрагента) КАК ДоговорКонтрагента,
     |  ВзаиморасчетыСКонтрагентами.Сделка,
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетовСКонтрагентом,
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
     |  ВЫБОР
     |      КОГДА ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
     |          ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток)
     |      ИНАЧЕ ВЫБОР
     |              КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL
     |                      ИЛИ КурсыВалютСрезПоследних.Кратность = 0
     |                  ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
     |              ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
     |          КОНЕЦ
     |  КОНЕЦ КАК СуммаРеглОстаток,
     |  ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
     |  ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
     |  ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
     |ИЗ
     |  РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
     |          ,
     |          Контрагент = &Контрагент
     |              И Организация = &Организация
     |              И ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента) КАК ВзаиморасчетыСКонтрагентами
     |      ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
     |              ,
     |              Контрагент = &Контрагент
     |                  И Организация = &Организация
     |                  И ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента) КАК ВзаиморасчетыПоДокументам
     |      ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ВзаиморасчетыПоДокументам.ДоговорКонтрагента
     |          И ВзаиморасчетыСКонтрагентами.Сделка = ВзаиморасчетыПоДокументам.Сделка
     |      ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
     |      ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
     |ГДЕ
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) < 0";
 Иначе
     	Запрос.Текст = 

	 "ВЫБРАТЬ
     |  ЕСТЬNULL(ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента, ВзаиморасчетыПоДокументам.ДоговорКонтрагента) КАК ДоговорКонтрагента,
     |  ВзаиморасчетыСКонтрагентами.Сделка,
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетовСКонтрагентом,
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
     |  ВЫБОР
     |      КОГДА ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
     |          ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток)
     |      ИНАЧЕ ВЫБОР
     |              КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL
     |                      ИЛИ КурсыВалютСрезПоследних.Кратность = 0
     |                  ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
     |              ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
     |          КОНЕЦ
     |  КОНЕЦ КАК СуммаРеглОстаток,
     |  ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
     |  ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
     |  ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
     |ИЗ
     |  РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
     |          ,
     |          Контрагент = &Контрагент
     |              И Организация = &Организация
     |              И ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента) КАК ВзаиморасчетыСКонтрагентами
     |      ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
     |              ,
     |              Контрагент = &Контрагент
     |                  И Организация = &Организация
     |                  И ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента) КАК ВзаиморасчетыПоДокументам
     |      ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ВзаиморасчетыПоДокументам.ДоговорКонтрагента
     |          И ВзаиморасчетыСКонтрагентами.Сделка = ВзаиморасчетыПоДокументам.Сделка
     |      ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
     |      ПО ВзаиморасчетыПоДокументам.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
     |ГДЕ
     |  ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) < 0";

    КонецЕсли;



	РезультатЗапроса = Запрос.Выполнить();



	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		НоваяСтрока                               = СуммыДолга.Добавить();

		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;

		НоваяСтрока.Сделка                        = Выборка.Сделка;

		НоваяСтрока.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;

		НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;

		НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;

		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Кредиторская;

		НоваяСтрока.Сумма                         = - Выборка.СуммаВзаиморасчетовОстаток;

		НоваяСтрока.СуммаРегл                     = - Выборка.СуммаРеглОстаток;
		
		Если НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда

			НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель;

		ИначеЕсли НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

			НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик;

		Иначе

			НоваяСтрока.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик;

		КонецЕсли;

		

		НоваяСтрока.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты;	

		

	КонецЦикла;

	

КонецПроцедуры



Процедура ДополнитьСтруктуруПолейСуммДолгаРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("НомерСтрокиДокумента"      , "НомерСтроки");



	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом"          , "СчетУчетаРасчетов");

	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам"              , "СчетУчетаАвансов");



	СтруктураПолей.Вставить("СчетУчетаРасчетов"         , "СчетУчетаРасчетов");

	СтруктураПолей.Вставить("СчетУчетаАвансов"          , "СчетУчетаАвансов");

	

	СтруктураПолей.Вставить("СуммаРегл"              	, "СуммаРегл");

	
	СтруктураПолей.Вставить("РасчетыВозврат"           	, "РасчетыВозврат");

	СтруктураПолей.Вставить("ТипКонтрагента"           	, "ТипКонтрагента");

	СтруктураПолей.Вставить("СтавкаНДС"           	 	, "СтавкаНДС");

	СтруктураПолей.Вставить("СуммаНДС"           	 	, "СуммаНДС");

	СтруктураПолей.Вставить("СуммаНДСПропорциональноКредит"		, "СуммаНДСПропорциональноКредит");
	СтруктураПолей.Вставить("СчетУчетаНДС"           	, "СчетУчетаНДС");

	

	СтруктураПолей.Вставить("ВидДеятельностиНДС"        , "НалоговоеНазначение.ВидДеятельностиНДС");

	СтруктураПолей.Вставить("СуммаСебестоимостиНУ"     			, "СуммаСебестоимостиНУ");
	
	СтруктураПолей.Вставить("Амортизируется"           	, "Амортизируется");

	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");
	СтруктураПолей.Вставить("НетНалоговойНакладной"     , "НетНалоговойНакладной");

	СтруктураПолей.Вставить("ЗаТару"           	 		, "ЗаТару");
	СтруктураПолей.Вставить("ВозвратнаяТара"   	 		, "ЗаТару");

	
	СтруктураПолей.Вставить("СхемаНалоговогоУчета"   	   , "ДоговорКонтрагента.СхемаНалоговогоУчета");

	СтруктураПолей.Вставить("СхемаНалоговогоУчетаПоТаре"   , "ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре");

	

	СтруктураПолей.Вставить("КоррСчет"					, "Ссылка.СчетДт");

	СтруктураПолей.Вставить("КоррСубконто1"             , "Ссылка.СубконтоДт1");

	СтруктураПолей.Вставить("КоррСубконто2"             , "Ссылка.СубконтоДт2");

	СтруктураПолей.Вставить("КоррСубконто3"             , "Ссылка.СубконтоДт3");

	
	СтруктураПолей.Вставить("ВзаиморасчетыЗакрыты"				, "ВзаиморасчетыЗакрыты");
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВШапке() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		СчетДт = ПланыСчетов.Хозрасчетный.СомнительныеИБезнадежныеДолги;	
		СчетКт = ПланыСчетов.Хозрасчетный.ДоходОтСписанияКредиторскойЗадолженности;	
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, КонтрагентКредитор, ДоговорКонтрагента);
		
		Если ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
			
			СчетДт = СчетаУчета.СчетАвансов;
			СчетКт = СчетаУчета.СчетРасчетов;
			
			СчетУчетаНДС		   		= СчетаУчета.СчетУчетаНДСПриобретений;
			
		ИначеЕсли ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
			
			СчетДт = СчетаУчета.СчетРасчетовПокупателя;
			СчетКт = СчетаУчета.СчетАвансовПокупателя;
			
			СчетУчетаНДС		   		= СчетаУчета.СчетУчетаНДСПродаж;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда	
		
		СчетДт = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	Иначе
		
		СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		
	КонецЕсли;
	
КонецПроцедуры // 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА



Процедура УдалитьДвиженияДляВосстановленияПоследовательностейРасчетов(Отказ)

	

	Попытка

		

		СтруктураРегистровБухгалтерии = Новый Структура("Хозрасчетный");

		

		Для каждого Регистр Из СтруктураРегистровБухгалтерии Цикл

			

			НаборЗаписей = РегистрыБухгалтерии[Регистр.Ключ].СоздатьНаборЗаписей();

			НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);

			НаборЗаписей.Записать();

			

		КонецЦикла;

		
		СтруктураРегистровНакопления = Новый Структура("РасчетыПоПриобретениюВВалютеОрганизации,РасчетыПоРеализацииВВалютеОрганизации");

		

		Для каждого Регистр Из СтруктураРегистровНакопления Цикл

			

			НаборЗаписей = РегистрыНакопления[Регистр.Ключ].СоздатьНаборЗаписей();

			НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);

			НаборЗаписей.Записать();

			

		КонецЦикла;

		
	Исключение

		

		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ, Заголовок);

		Возврат;

		

	КонецПопытки;

	

КонецПроцедуры


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();

	ПодготовитьТаблицуСуммДолгаУпр(ТаблицаРасчетов, СтруктураШапкиДокумента);
	ПодготовитьТаблицуСуммДолгаРегл(ТаблицаРасчетов, СтруктураШапкиДокумента);


	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуСуммДолгаУпр(ТаблицаТоваров, СтруктураШапкиДокумента)


	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).

	ТаблицаТоваров.Колонки.Добавить("УвеличениеДолгаКонтрагента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УменьшениеДолгаКонтрагента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УвеличениеДолгаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УменьшениеДолгаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));


	// Надо рассчитать стоимость без НДС.

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		

		// Если документ расчетов не указан, то при ведении по документам расчетов необходимо

		// указать ссылку на текущий документ

		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) 

			И СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом

			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда

			СтрокаТаблицы.ДокументРасчетовСКонтрагентом = Ссылка;

		КонецЕсли;



		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда

			СтрокаТаблицы.СделкаВзаиморасчеты = Неопределено;

		КонецЕсли;

		
		
			
		СтрокаТаблицы.УвеличениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,  0, СтрокаТаблицы.Сумма);

		СтрокаТаблицы.УменьшениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, СтрокаТаблицы.Сумма);

		

		// Суммы пересчитаем в валюту упр. учета

		СтрокаТаблицы.УвеличениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, 0,

		                                 МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
		                                 СтрокаТаблицы.ВалютаВзаиморасчетов,

		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 

		                                 СтрокаТаблицы.КурсВзаиморасчетов,

		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 

		                                 СтрокаТаблицы.КратностьВзаиморасчетов,

		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета));



		СтрокаТаблицы.УменьшениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, 

		                                 МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
		                                 СтрокаТаблицы.ВалютаВзаиморасчетов,

		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 

		                                 СтрокаТаблицы.КурсВзаиморасчетов,

		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 

		                                 СтрокаТаблицы.КратностьВзаиморасчетов,

		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета));

										 
		Если    СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда										 
			// для целей управленческого учета необходимо изменить значения сумм увеличения/уменьшения:
			// в случае ввода остатков указанная задолженность не погашается, а создается.
			
			ВремПеременная = СтрокаТаблицы.УвеличениеДолгаКонтрагента;

			СтрокаТаблицы.УвеличениеДолгаКонтрагента = СтрокаТаблицы.УменьшениеДолгаКонтрагента;

			СтрокаТаблицы.УменьшениеДолгаКонтрагента = ВремПеременная;

			
			ВремПеременная = СтрокаТаблицы.УвеличениеДолгаУпр;
			СтрокаТаблицы.УвеличениеДолгаУпр = СтрокаТаблицы.УменьшениеДолгаУпр;
			СтрокаТаблицы.УменьшениеДолгаУпр = ВремПеременная;
			
		КонецЕсли;

	КонецЦикла;



КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.

//

// Параметры: 

//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",

//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке

//

// Возвращаемое значение:

//  Сформированная таблиица значений.

//

Функция ПодготовитьТаблицуСуммДолгаРегл(ТаблицаРасчетов, СтруктураШапкиДокумента)

	
	// Дополнение таблицы расчетов полями.

	ТаблицаРасчетов.Колонки.Вставить(1,"Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));

	ТаблицаРасчетов.Колонки.Добавить("ЭтоВозврат", Новый ОписаниеТипов("Булево"));

	ТаблицаРасчетов.Колонки.Добавить("ВидРасчетовСКонтрагентом", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасчетовСКонтрагентами"));

	ТаблицаРасчетов.Колонки.Добавить("СуммаПлатежа", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРасчетов.Колонки.Добавить("СуммаСНДСРегл", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
	ТаблицаРасчетов.Колонки.Добавить("УвеличениеДолгаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРасчетов.Колонки.Добавить("УменьшениеДолгаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаРасчетов.Колонки.Добавить("ДобавленнаяСтрокаПереносаЗадолженности", Новый ОписаниеТипов("Булево"));
	

	ТаблицаРасчетов.ЗаполнитьЗначения(Перечисления.ВидыРасчетовСКонтрагентами.Прочее,"ВидРасчетовСКонтрагентом");

	
	РасчетыВВалюте = НЕ (СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета);	
	
	ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("Сумма"), "СуммаПлатежа");

	

	// Заполняем контрагента по значению поля КонтрагентДебитор

	ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентДебитор,"Контрагент");

	СтрокиКредиторки = ТаблицаРасчетов.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));



	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

		

		// Контрагент для кредиторской задолженности устанавливается из другого поля

		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл

			СтрокаКредиторки.Контрагент = СтруктураШапкиДокумента.КонтрагентКредитор;

		КонецЦикла; 

		

		// Если не используется вспомогательный счет, в качестве субсчета устанавливаем счет 00 для последующей корректировки (объединения)

		// движений по кредиторской и дебиторской задолженностям.

		Если не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда

			ТаблицаРасчетов.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Вспомогательный,"КоррСчет");

			ТаблицаРасчетов.ЗаполнитьЗначения(Неопределено, "КоррСубконто1, КоррСубконто2, КоррСубконто3");

		КонецЕсли; 

		

	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

		

		ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентКредитор,"КоррСубконто1");

		ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,"КоррСубконто2");

		Если    СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка,"КоррСубконто3");
		КонецЕсли;
		

		// Счет переноса для кредиторской задолженности устанавливается из другого поля

		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл

			СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;

		КонецЦикла; 

			

	ИначеЕсли  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда

		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Если СтруктураШапкиДокумента.СписыватьИзРезерваСомнительныхДолгов Тогда
				Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
					СтрокаРасчетов.КоррСчет = СтруктураШапкиДокумента.СчетРезерваСомнительныхДолгов;
					СтрокаРасчетов.КоррСубконто1 = Неопределено;
					СтрокаРасчетов.КоррСубконто2 = Неопределено;
					СтрокаРасчетов.КоррСубконто3 = Неопределено;
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;
				

		// Счет и аналитику списания для кредиторской задолженности устанавливается из другого поля

		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл

			СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;

			СтрокаКредиторки.КоррСубконто1 = СтруктураШапкиДокумента.СубконтоКт1;

			СтрокаКредиторки.КоррСубконто2 = СтруктураШапкиДокумента.СубконтоКт2;

			СтрокаКредиторки.КоррСубконто3 = СтруктураШапкиДокумента.СубконтоКт3;

		КонецЦикла; 

		

	КонецЕсли;

	
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.Дата);
	

	// Определим вид погашения задолженности - возврат оплаты или непосредственно погашение.

	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл

		
		Если РасчетыВВалюте Тогда

			

			СтрокаРасчетов.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.СуммаПлатежа, 
												 				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
																СтруктураКурсаДокумента.Курс, 1, 

																СтруктураКурсаДокумента.Кратность, 1);

																

		Иначе

			

			СтрокаРасчетов.СуммаСНДСРегл = СтрокаРасчетов.СуммаПлатежа;

			

		КонецЕсли;

		

		СтрокаРасчетов.УвеличениеДолгаРегл = ?(СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,  0, СтрокаРасчетов.СуммаСНДСРегл);



		СтрокаРасчетов.УменьшениеДолгаРегл = ?(СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, СтрокаРасчетов.СуммаСНДСРегл);

		
		Если СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
			СтрокаРасчетов.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации; 
		ИначеЕсли СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
			СтрокаРасчетов.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
			// по БУ задолженность будет формирвоваться метотом "как по оплате", поэтому определим в каких случаях у нас будет "возврат оплаты"
			Если  СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская 
				И СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель тогда
				СтрокаРасчетов.ЭтоВозврат = Истина;
			ИначеЕсли СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
				    И СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
				СтрокаРасчетов.ЭтоВозврат = Истина;
			КонецЕсли; 
		Иначе	
			// по БУ задолженность будет погашаться метотом "как по оплате", поэтому определим в каких случаях у нас будет "возврат оплаты"
			Если  СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская 
				И СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик тогда
				//Это возврат от поставщика
				СтрокаРасчетов.ЭтоВозврат = Истина;
			ИначеЕсли СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
				    И СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
				//Это возврат покупателю
				СтрокаРасчетов.ЭтоВозврат = Истина;
			КонецЕсли; 		
			
		КонецЕсли; 		
		
		Если НЕ(   СтрокаРасчетов.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
				ИЛИ СтрокаРасчетов.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
			СтрокаРасчетов.СделкаРегл = Неопределено;
		КонецЕсли;
		
	КонецЦикла;

	
	ТаблицаРасчетов.Колонки.Добавить("ПроводкиСуммаНДС", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаРасчетов.Колонки.Добавить("СуммаНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРасчетов.Колонки.Добавить("СуммаНДСВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРасчетов.Колонки.Добавить("ПроводкиСуммаНДСВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаРасчетов.Колонки.Добавить("МоментОпределенияБазыНДС",	Новый ОписаниеТипов("ПеречислениеСсылка.МоментыОпределенияНалоговойБазы"));



	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл

		
		СтрокаРасчетов.СуммаНДСРегл = СтрокаРасчетов.СуммаНДС;
		
		Если    НЕ СтрокаРасчетов.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально
			ИЛИ НЕ СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
		
			СтрокаРасчетов.СуммаНДСПропорциональноКредит = 0;	
		
		КонецЕсли;
		
		Если НЕ СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			
			СтрокаРасчетов.СуммаНДСВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.СуммаНДС, 
											СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
											СтруктураШапкиДокумента.ВалютаДокумента,
											1,
											СтрокаРасчетов.КурсВзаиморасчетов, 
											1,
											СтрокаРасчетов.КратностьВзаиморасчетов);
											
		Иначе	
			
			СтрокаРасчетов.СуммаНДСВал = СтрокаРасчетов.СуммаНДСРегл;
			
		КонецЕсли;
		

		Если   СтрокаРасчетов.ВозвратнаяТара ИЛИ 
			   (      СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик 
			     И НЕ НалоговыйУчетПовтИсп.ЕстьПравоНаНалоговыйКредит(СтрокаРасчетов.НалоговоеНазначение)) Тогда
		
			СтрокаРасчетов.ПроводкиСуммаНДС = 0;	

			СтрокаРасчетов.ПроводкиСуммаНДСВал = 0;	
			

		Иначе

			

			Если  СтрокаРасчетов.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально
				И СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
				
				СтрокаРасчетов.ПроводкиСуммаНДС = СтрокаРасчетов.СуммаНДСПропорциональноКредит;	
				
			Иначе	
 	
				СтрокаРасчетов.ПроводкиСуммаНДС    = СтрокаРасчетов.СуммаНДСРегл;	
                СтрокаРасчетов.ПроводкиСуммаНДСВал = СтрокаРасчетов.СуммаНДСВал;

			КонецЕсли;

		КонецЕсли;

		

		Если СтрокаРасчетов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда

			

			Если СтрокаРасчетов.ВозвратнаяТара Тогда

				СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПокупкам;

			Иначе//товары	

				СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам;

			КонецЕсли;

			

		Иначе// покупатель	

			

			Если СтрокаРасчетов.ВозвратнаяТара Тогда

				СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам;

			Иначе//товары	

				СтрокаРасчетов.МоментОпределенияБазыНДС = СтрокаРасчетов.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам;

			КонецЕсли;

			

		КонецЕсли;

		

	КонецЦикла;

		

	Возврат ТаблицаРасчетов;



КонецФункции // ПодготовитьТаблицуСуммДолгаРегл


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:

	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, ВалютаДокумента");



	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Дебитор""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Кредитор""!");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Получатель""!");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента", "Не заполнено значение реквизита ""Договор""!");
			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			 СтруктураОбязательныхПолей.Вставить("ТипКонтрагента");
		КонецЕсли;

	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

			Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда

				СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Вспомогательный счет""!");

			КонецЕсли;

		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
			СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнен вспомогательный счет для проведения ввода остатков");
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
			СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнен корреспондирующий счет");
		КонецЕсли; 
			

		Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

			
			ЕстьДебиторскаяЗадолженность  = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская, "ВидЗадолженности") <> Неопределено;

			ЕстьКредиторскаяЗадолженность = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская, "ВидЗадолженности") <> Неопределено;

			

			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

				

				Если ЕстьДебиторскаяЗадолженность Тогда

					СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Счет переноса дебиторской задолженности""!");

				КонецЕсли;

				

				Если ЕстьКредиторскаяЗадолженность Тогда

					СтруктураОбязательныхПолей.Вставить("СчетКт", "Не заполнено значение реквизита ""Счет переноса кредиторской задолженности""!");

				КонецЕсли;

				Если СтруктураШапкиДокумента.ЕстьНДС Тогда
					 СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
				КонецЕсли;				

				
			ИначеЕсли  СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда

				
				Если СтруктураШапкиДокумента.ЕстьНДС Тогда

					 СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСКредит");

					 СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСОбязательства");

				КонецЕсли;

				
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда

				

				Если ЕстьДебиторскаяЗадолженность Тогда

					СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Счет списания дебиторской задолженности""!");

				КонецЕсли;

				

				Если ЕстьКредиторскаяЗадолженность Тогда

					СтруктураОбязательныхПолей.Вставить("СчетКт", "Не заполнено значение реквизита ""Счет списания кредиторской задолженности""!");

				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И
					 СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					СтруктураОбязательныхПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");
					СтруктураОбязательныхПолей.Вставить("ПараметрыСписанияСебестоимостиНУ");
					
					Если СписыватьИзРезерваСомнительныхДолгов Тогда
						
						СтруктураОбязательныхПолей.Вставить("СчетРезерваСомнительныхДолгов");
						
						Если ЗначениеЗаполнено(СчетДт) Тогда
						
							ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
							Для НомСубконто = 1 По 3 Цикл
								Если СчетДт.ВидыСубконто.Количество()<НомСубконто Тогда
									Прервать;
								КонецЕсли;
								
								ВидСубконто = СчетДт.ВидыСубконто[НомСубконто-1].ВидСубконто;
								Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
									 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
									 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
									ЕстьСубконтоСтатьяЗатратДоходов = Истина;
									Прервать;
								КонецЕсли;

							КонецЦикла;
							
							Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
								СтруктураОбязательныхПолей.Вставить("СубконтоДт" + НомСубконто, НСТР("ru = 'Не заполнено значение субконто: '; uk = 'Не заповнене значення субконто: '") + ВидСубконто); 	
							КонецЕсли;

						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СчетКт) Тогда
					
						ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
						Для НомСубконто = 1 По 3 Цикл
							Если СчетКт.ВидыСубконто.Количество()<НомСубконто Тогда
								Прервать;
							КонецЕсли;
							
							ВидСубконто = СчетКт.ВидыСубконто[НомСубконто-1].ВидСубконто;
							Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
								 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
								 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
								ЕстьСубконтоСтатьяЗатратДоходов = Истина;
								Прервать;
							КонецЕсли;

						КонецЦикла;
						
						Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
							СтруктураОбязательныхПолей.Вставить("СубконтоКт" + НомСубконто, НСТР("ru = 'Не заполнено значение субконто: '; uk = 'Не заповнене значення субконто: '") + ВидСубконто); 	
						КонецЕсли;

					КонецЕсли;
					
				КонецЕсли;				

			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнен корреспондирующий счет");
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Если СчетДт.НалоговыйУчет = Истина Тогда
							
							СтруктураОбязательныхПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");	

							ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
							Для НомСубконто = 1 По 3 Цикл
								Если СчетДт.ВидыСубконто.Количество()<НомСубконто Тогда
									Прервать;
								КонецЕсли;
								
								ВидСубконто = СчетДт.ВидыСубконто[НомСубконто-1].ВидСубконто;
								Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
									 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
									 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
									ЕстьСубконтоСтатьяЗатратДоходов = Истина;
									Прервать;
								КонецЕсли;

							КонецЦикла;
							
							Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
								СтруктураОбязательныхПолей.Вставить("СубконтоДт" + НомСубконто, НСТР("ru = 'Не заполнено значение субконто: '; uk = 'Не заповнене значення субконто: '") + ВидСубконто); 	
							КонецЕсли;

						КонецЕсли;
						
					КонецЕсли;			
				КонецЕсли; 				

			КонецЕсли;

			

		КонецЕсли;

		

	КонецЕсли;



	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)

	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);



	ТипПоставщик  = Перечисления.СтатусыКонтрагентов.Поставщик;

	ТипПокупатель = Перечисления.СтатусыКонтрагентов.Покупатель;
	ТипПрочее 	  = Перечисления.СтатусыКонтрагентов.Прочее;
	ДоговорСПоставщиком = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;

	ДоговорСПокупателем = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ДоговорПрочее 		= Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	

	Если  СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 

		И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 

		И (СтруктураШапкиДокумента.ЕстьНДС) 

		И (   (СтруктураШапкиДокумента.ВидДоговора = ДоговорСПоставщиком и НЕ СтруктураШапкиДокумента.ТипКонтрагента = ТипПоставщик)

		   ИЛИ(СтруктураШапкиДокумента.ВидДоговора = ДоговорСПокупателем и НЕ СтруктураШапкиДокумента.ТипКонтрагента = ТипПокупатель)
		   ИЛИ(СтруктураШапкиДокумента.ВидДоговора = ДоговорПрочее и НЕ СтруктураШапкиДокумента.ТипКонтрагента = ТипПрочее))	Тогда

		   

		СтрокаСообщения = "Тип контрагента для зачисления задолженности не соответствует виду договора этого контрагента";

		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);

		

	КонецЕсли; 

	

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

		
		Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента)Тогда

			СтрокаСообщения = "Не заполнен договор для зачисления задолженности!";

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,  Отказ, Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаДокумента Тогда
			СтрокаСообщения = "Не совпадает валюта договора контрагента-получателя с валютой документа!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;
		
		// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			СтруктураОбязательныхПолей.Вставить("Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
			|Заполните поле ""Заказ покупателя (Заказ поставщика)""!");
		ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			СтруктураОбязательныхПолей.Вставить("Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
			|Заполните поле ""Счет покупателя (Счет поставщика)""!");
		КонецЕсли;
		
	КонецЕсли; 

	
	//Организация в документе должна совпадать с организацией, указанной в договоре для переноса долга
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";



	// Укажем, что надо проверить:

	СтруктураОбязательныхПолей = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");



	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиСуммаДолгаРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);



	// Теперь позовем общую процедуру проверки.

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);


	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.

	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	

	ЭтоВалютныйДокумент = СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;

	

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

		ПроверятьТипСделки = Истина;

		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем

				ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

				ТребуемыйТипСделки      = Тип("ДокументСсылка.ЗаказПокупателя");

				ПредставлениеТипаСделки = "Заказ покупателя"; 

			Иначе

				ТребуемыйТипСделки      = Тип("ДокументСсылка.ЗаказПоставщику");

				ПредставлениеТипаСделки = "Заказ поставщику"; 

			КонецЕсли;

		ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем

				ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

				ТребуемыйТипСделки      = Тип("ДокументСсылка.СчетНаОплатуПокупателю");

				ПредставлениеТипаСделки = "Счет на оплату покупателю"; 

			Иначе

				ТребуемыйТипСделки      = Тип("ДокументСсылка.СчетНаОплатуПоставщика");

				ПредставлениеТипаСделки = "Счет на оплату поставщику"; 

			КонецЕсли;

		Иначе

			ПроверятьТипСделки = Ложь;

		КонецЕсли;

	Иначе

		ПроверятьТипСделки = Ложь;

	КонецЕсли;

			

	Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл

		

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)  Тогда

			Продолжить;

		КонецЕсли;

		

        СтрокаНачалаСообщенияОбОшибке = "В строке "+ СокрЛП(СтрокаТаблицы.НомерСтроки) + " ";



		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам

		 ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

		 
		 	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СделкаВзаиморасчеты) Тогда

				ОбщегоНазначения.СообщитьОбОшибке(

					СтрокаНачалаСообщенияОбОшибке + "выбран договор, взаиморасчеты по которому ведутся по заказам.

					|Необходимо заполнить сделку!", Отказ, Заголовок);

			КонецЕсли;

			

		КонецЕсли;

		

		Если СтрокаТаблицы.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаДокумента Тогда

			ОбщегоНазначения.СообщитьОбОшибке(

				СтрокаНачалаСообщенияОбОшибке + "выбран договор с несоответствующей документу валютой взаиморасчетов.

				|Необходимо выбрать договор с валютой " + СтруктураШапкиДокумента.ВалютаДокумента, Отказ, Заголовок);

		КонецЕсли;

		
	КонецЦикла;

	

	// Если проведение взаимозачета - проверим на совпадение суммы дебиторской и кредиторской задолженности. 

	// Взаимозачет проводится только при полном совпадении сумм

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

		

		СуммаДеб  = ТаблицаПоСуммамДолга.Итог("УменьшениеДолгаКонтрагента");

		СуммаКред = ТаблицаПоСуммамДолга.Итог("УвеличениеДолгаКонтрагента");

		

		Разница = СуммаДеб - СуммаКред;

		

		Если Разница <> 0  Тогда

			ТекстСообщения = "Не совпадают суммы дебиторской и кредиторской задолженности при проведении взаимозачета. 

			                 |Взаимозачет не может быть проведен.";

			ТекстСообщения = ТекстСообщения + Символы.ПС+

							 "Дебиторская задолженность: "  + Формат(СуммаДеб, "ЧЦ=15; ЧДЦ=2")  + " " + СтруктураШапкиДокумента.ВалютаДокумента;

			ТекстСообщения = ТекстСообщения + Символы.ПС+

							 "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15; ЧДЦ=2") + " " + СтруктураШапкиДокумента.ВалютаДокумента;

			ТекстСообщения = ТекстСообщения + Символы.ПС+

							 "Разница: " + Формат(Разница, "ЧЦ=15; ЧДЦ=2") + " " + СтруктураШапкиДокумента.ВалютаДокумента;

			

			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);

		КонецЕсли; 

		

	КонецЕсли;


	ТипПоставщик  = Перечисления.СтатусыКонтрагентов.Поставщик;

	ТипПокупатель = Перечисления.СтатусыКонтрагентов.Покупатель;
	Прочее 		  = Перечисления.СтатусыКонтрагентов.Прочее;

			

	ДоговорСПоставщиком = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;

	ДоговорСПокупателем = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;

	ДоговорПрочее	    = Перечисления.ВидыДоговоровКонтрагентов.Прочее;



		

	Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл


		СтрокаНачалаСообщенияОбОшибке = Локализация.СтрШаблон("В строке номер ""¤1¤"" табличной части ""Суммы долга"": ", СокрЛП(СтрокаТаблицы.НомерСтроки));

		
		Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда				

			
			Если    (СтрокаТаблицы.ВидДоговора = ДоговорСПоставщиком И НЕ СтрокаТаблицы.ТипКонтрагента = ТипПоставщик)

				ИЛИ (СтрокаТаблицы.ВидДоговора = ДоговорСПокупателем И НЕ СтрокаТаблицы.ТипКонтрагента = ТипПокупатель) Тогда

				

				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " значение реквизита ""тип контрагента"" не соответствует виду договора!", Отказ, Заголовок);

				

			КонецЕсли;

			
		КонецЕсли;


		Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда


			Если НЕ СтрокаТаблицы.ВидДоговора = ДоговорПрочее И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " не указано вид налоговое назначение", Отказ, Заголовок);	
			КонецЕсли;
			
			Если НЕ СтрокаТаблицы.ВидДоговора = ДоговорПрочее Тогда

				

				Если СтруктураШапкиДокумента.ЕстьНДС Тогда

		

					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда

						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " не указана ставка НДС", Отказ, Заголовок);

					КонецЕсли;

					

					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда

						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " не указан счет учета НДС", Отказ, Заголовок);

					КонецЕсли;

					
				КонецЕсли;



			КонецЕсли;

		
		КонецЕсли;

		
	КонецЦикла;

	
	Если   СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		И СтруктураШапкиДокумента.ЕстьНДС 
		И  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
		И ЗначениеЗаполнено(ТипКонтрагента) Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл

			Если      ЗначениеЗаполнено(СтрокаТаблицы.ТипКонтрагента)
				И НЕ (СтрокаТаблицы.ТипКонтрагента = ТипКонтрагента) Тогда
				
				Если ЗначениеЗаполнено(Заголовок) Тогда
					Сообщить(Заголовок);
					Заголовок = "";
				КонецЕсли;
				
				Сообщить("В одной из строк документа указан тип контрагента, который не совпадает с типом контрагента-получателя!
						 |Проводки по налоговым регистрам для контрагента-получателя будут сформированы инверсно (""как возврат"")");
				
				Прервать	
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	

	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиСуммаДолгаРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетов");
		
	КонецЕсли;
	
	Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда

		

		СтруктураОбязательныхПолей.Вставить("ТипКонтрагента");

		СтруктураОбязательныхПолей.Вставить("РасчетыВозврат");	

		

	КонецЕсли;

	
КонецПроцедуры


// Функция возвращает таблицу значений, не содержащую строк источника со значением Ложь в колонке "ВестиПоДокументамРасчетовСКонтрагентом"

//

// Параметры:

// ТаблицаИсточник		- <ТаблицаЗначений> исходная таблица. 

//							Обязательно должна содержать колонку "ВестиПоДокументамРасчетовСКонтрагентом"

//

Функция ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаИсточник)

	

	ТаблицаРезультат = ТаблицаИсточник.Скопировать();

	СтрокиНеПоДокументам = ТаблицаРезультат.НайтиСтроки(Новый Структура("ВестиПоДокументамРасчетовСКонтрагентом", Ложь));

	Для каждого СтрокаНеПоДокументам Из СтрокиНеПоДокументам Цикл

		ТаблицаРезультат.Удалить(СтрокаНеПоДокументам);

	КонецЦикла;

	

	Возврат ТаблицаРезультат;



КонецФункции // ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов()


// По результату запроса по шапке документа формируем движения по регистрам.

//

// Параметры: 

//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),

//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке

//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары

//  Отказ                     - флаг отказа в проведении,

//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.

//

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 

	                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,

	                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность,

							Отказ, Заголовок)

							

	Если НЕ РежимВосстановленияПоследовательностейРасчетов Тогда

	

		ДвиженияПоРегистрамУпр(РежимПроведения,  СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

		

		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,

		                                             ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,

		       	                                     ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);

	

	КонецЕсли;



	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда

		
		ДвиженияПоВводуНачальныхОстатковРегл(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);		

	Иначе	
		
		ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,

		                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,

		                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность, 

								Отказ, Заголовок);

								
		ДвиженияПоПереносуЗадолженности(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, РежимВосстановленияПоследовательностейРасчетов, Отказ, Заголовок);

		
	КонецЕсли;


КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения,  СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)
	
	ЭтоФормированиеЗадолженности =   (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков)
								 ИЛИ (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности);
	

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		

		ТаблицаУвеличениеДолга = ТаблицаПоСуммамДолга.Скопировать();

		ТаблицаУменьшениеДолга = ТаблицаПоСуммамДолга.Скопировать();

		

		Счетчик = 0;

		Пока Счетчик < ТаблицаУвеличениеДолга.Количество() Цикл

			

			СтрокаТаблицы = ТаблицаУвеличениеДолга.Получить(Счетчик);

			Если    СтрокаТаблицы.УвеличениеДолгаКонтрагента = 0 
				ИЛИ СтрокаТаблицы.ВзаиморасчетыЗакрыты Тогда

				ТаблицаУвеличениеДолга.Удалить(СтрокаТаблицы);

			Иначе

				Счетчик = Счетчик + 1;

			КонецЕсли;

			

		КонецЦикла;

		

		Счетчик = 0;

		Пока Счетчик < ТаблицаУменьшениеДолга.Количество() Цикл

			

			СтрокаТаблицы = ТаблицаУменьшениеДолга.Получить(Счетчик);

			

			Если СтрокаТаблицы.УменьшениеДолгаКонтрагента = 0 
				ИЛИ СтрокаТаблицы.ВзаиморасчетыЗакрыты Тогда

				ТаблицаУменьшениеДолга.Удалить(СтрокаТаблицы);

			Иначе 

				Счетчик= Счетчик + 1;

			КонецЕсли;

			

		КонецЦикла;

		

		Если ТаблицаУвеличениеДолга.Количество() > 0 Тогда

			
			ТаблицаУвеличениеДолга.Колонки.УвеличениеДолгаКонтрагента.Имя = "СуммаВзаиморасчетов"; 
			

			ТаблицаУвеличениеДолга.Колонки.УвеличениеДолгаУпр.Имя         = "СуммаУпр";

			ТаблицаУвеличениеДолга.Колонки.СделкаВзаиморасчеты.Имя        = "Сделка";

			

			// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.

			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;



			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.

			ТаблицаДвижений = НаборДвижений.Выгрузить();

			ТаблицаДвижений.Очистить();



			// Заполним таблицу движений.

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУвеличениеДолга, ТаблицаДвижений);



			НаборДвижений.мПериод          = Дата;

			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;



			Если Не Отказ Тогда

				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();

			КонецЕсли;

			
			

			// ПО РЕГИСТРУ РасчетыСКонтрагентами.

			НаборДвижений = Движения.РасчетыСКонтрагентами;

			ТаблицаУвеличениеДолга.Колонки.Сделка.Имя = "СделкаВзаиморасчеты";

			ТаблицаУвеличениеДолгаРасчеты = ТаблицаУвеличениеДолга.Скопировать();

			ТаблицаУвеличениеДолгаРасчеты.Колонки.СделкаРасчеты.Имя = "Сделка";

			
			Если ЭтоФормированиеЗадолженности Тогда
				// движений по расчетам по операциям отгрузки по заказам быть не должно
				Счетчик = 0;
				Пока Счетчик < ТаблицаУвеличениеДолгаРасчеты.Количество() Цикл
					
					СтрокаТаблицы = ТаблицаУвеличениеДолгаРасчеты.Получить(Счетчик);
					
					Если НЕ ЭтоОплата(СтрокаТаблицы)
						  И ЗначениеЗаполнено(СтрокаТаблицы.Сделка) 
						  И (     ТипЗнч(СтрокаТаблицы.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") 
						  	  ИЛИ ТипЗнч(СтрокаТаблицы.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
							
						  ТаблицаУвеличениеДолгаРасчеты.Удалить(СтрокаТаблицы);
						  
					Иначе
						Счетчик = Счетчик + 1;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.

			ТаблицаДвижений = НаборДвижений.Выгрузить();

			ТаблицаДвижений.Очистить();



			// Заполним таблицу движений.

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУвеличениеДолгаРасчеты, ТаблицаДвижений);

			

			// Недостающие поля.

			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты,"РасчетыВозврат");



			НаборДвижений.мПериод          = Дата;

			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;



			Если Не Отказ Тогда

				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();

			КонецЕсли;

		КонецЕсли;



		Если ТаблицаУменьшениеДолга.Количество() > 0 Тогда

			
			ТаблицаУменьшениеДолга.Колонки.УменьшениеДолгаКонтрагента.Имя = "СуммаВзаиморасчетов"; 


			ТаблицаУменьшениеДолга.Колонки.УменьшениеДолгаУпр.Имя = "СуммаУпр";

			ТаблицаУменьшениеДолга.Колонки.СделкаВзаиморасчеты.Имя = "Сделка";



			// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.

			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;



			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.

			ТаблицаДвижений = НаборДвижений.Выгрузить();

			ТаблицаДвижений.Очистить();



			// Заполним таблицу движений.

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУменьшениеДолга, ТаблицаДвижений);



			НаборДвижений.мПериод          = Дата;

			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;



			Если Не Отказ Тогда

				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();

			КонецЕсли;


			

			НаборДвижений = Движения.РасчетыСКонтрагентами;

			ТаблицаУменьшениеДолга.Колонки.Сделка.Имя = "СделкаВзаиморасчеты";

			ТаблицаУменьшениеДолгаРасчеты = ТаблицаУменьшениеДолга.Скопировать();

			ТаблицаУменьшениеДолгаРасчеты.Колонки.СделкаРасчеты.Имя = "Сделка";

			
			Если ЭтоФормированиеЗадолженности Тогда
				// движений по расчетам по операциям отгрузки по заказам быть не должно
				Счетчик = 0;
				Пока Счетчик < ТаблицаУменьшениеДолгаРасчеты.Количество() Цикл
					
					СтрокаТаблицы = ТаблицаУменьшениеДолгаРасчеты.Получить(Счетчик);
					
					Если НЕ ЭтоОплата(СтрокаТаблицы)
						  И ЗначениеЗаполнено(СтрокаТаблицы.Сделка) 
						  И (     ТипЗнч(СтрокаТаблицы.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") 
						  	  ИЛИ ТипЗнч(СтрокаТаблицы.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
							
						  ТаблицаУменьшениеДолгаРасчеты.Удалить(СтрокаТаблицы);
						  
					Иначе
						Счетчик = Счетчик + 1;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.

			ТаблицаДвижений = НаборДвижений.Выгрузить();

			ТаблицаДвижений.Очистить();



			// Заполним таблицу движений.

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУменьшениеДолгаРасчеты, ТаблицаДвижений);



			// Недостающие поля.

			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты,"РасчетыВозврат");

			

			НаборДвижений.мПериод            = Дата;

			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;



			Если Не Отказ Тогда

				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();

			КонецЕсли;



		КонецЕсли;



	КонецЕсли;

	
КонецПроцедуры


Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,

	                                                   ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,

	                                                   ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность)

													   
   Если  НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков
	   И НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда

		

		СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

		ДатаДвижений = УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата, Дата);

		

		ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность);

		Если ТаблицаПлатежей.Количество() > 0 Тогда

			ВидДвижения = ВидДвиженияНакопления.Приход;

			ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;

			УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

		КонецЕсли;



		ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность);

		Если ТаблицаПлатежей.Количество() > 0 Тогда

			ВидДвижения = ВидДвиженияНакопления.Расход;

			ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;

			УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

		КонецЕсли;

		

		ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность);

		Если ТаблицаПлатежей.Количество() > 0 Тогда

			ВидДвижения = ВидДвиженияНакопления.Приход;

			ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;

			УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

		КонецЕсли;

		

		ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);

		Если ТаблицаПлатежей.Количество() > 0 Тогда

			ВидДвижения = ВидДвиженияНакопления.Расход;

			ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;

			УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

		КонецЕсли;

	
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			// ввод начальных остатков
			// изменение задолженности
			

			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов;

			

			ТаблицаДвижений = НаборДвижений.Выгрузить();

			ТаблицаДвижений.Очистить();

				

			Для Каждого СтрокаРасчетов Из ТаблицаПоСуммамДолга Цикл

				
				Если СтрокаРасчетов.ВзаиморасчетыЗакрыты Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаРасчетов.ВестиПоДокументамРасчетовСКонтрагентом Тогда

					
					Движение = ТаблицаДвижений.Добавить();

					
					Движение.Период			= СтруктураШапкиДокумента.Дата;

					Движение.Регистратор	= СтруктураШапкиДокумента.Ссылка;

					Движение.Активность  	= Истина;

					
					Движение.ВидДвижения = ?(СтрокаРасчетов.УвеличениеДолгаКонтрагента > 0, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);									

					
					Движение.ДоговорКонтрагента				= СтрокаРасчетов.ДоговорКонтрагента;
					Движение.Сделка							= СтрокаРасчетов.СделкаРасчеты;

					Движение.ДокументРасчетовСКонтрагентом	= СтрокаРасчетов.ДокументРасчетовСКонтрагентом;

					Движение.ВидРасчетовСКонтрагентом		= СтрокаРасчетов.ВидРасчетовСКонтрагентом;

					Движение.Организация					= СтруктураШапкиДокумента.Организация;

					Движение.Контрагент						= СтруктураШапкиДокумента.КонтрагентДебитор;

					
					Движение.СуммаВзаиморасчетов			= СтрокаРасчетов.СуммаПлатежа;
					
				КонецЕсли;

				
			КонецЦикла;

			
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			
			НаборДвижений.ВыполнитьДвижения();

			
	КонецЕсли;	
		

КонецПроцедуры


// Функция используется при вводе остатков взаиморасчетов. Определяет является ли долг - долгом, сформированным

// оплатой контрагента

//

Функция ЭтоОплата(ДанныеПоЗадолженности)



	ЗнакПокупатель 	= ?(ДанныеПоЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель, 1, -1);

	ЗнакРасчеты		= ?(ДанныеПоЗадолженности.РасчетыВозврат 	= Перечисления.РасчетыВозврат.Расчеты,		   1, -1);

	ЗнакДебет	    = ?(ДанныеПоЗадолженности.ВидЗадолженности	= Перечисления.ВидыЗадолженности.Дебиторская,  1, -1);



	ЗнакОтгрузки = ЗнакПокупатель * ЗнакРасчеты * ЗнакДебет;

	

	Если ЗнакОтгрузки = 1 Тогда

	

		Возврат Ложь;	

		

	Иначе

		

		Возврат Истина;	

		

	КонецЕсли;

	

КонецФункции 



Процедура ДвиженияПоВводуНачальныхОстатковРегл(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)

	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	

	ПроводкиБУ 			= Движения.Хозрасчетный;

	
	ОиПНДСПродаж 		= Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	ОиПНДСПриобретений 	= Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	
	НУПродаж 			= Движения.ПродажиНалоговыйУчет;
	НУПриобретений 		= Движения.ПриобретенияНалоговыйУчет;
	
	ВидЗадолженностиДебиторская  = Перечисления.ВидыЗадолженности.Дебиторская;

	ВидЗадолженностиКредиторская = Перечисления.ВидыЗадолженности.Кредиторская;



	ВспомогательныйСчет = СтруктураШапкиДокумента.СчетДт;	

	КоличествоСубконто = ВспомогательныйСчет.ВидыСубконто.Количество();
	

	ДатаСторноДвижений = КонецМесяца(СтруктураШапкиДокумента.Дата)+2;

	
	РасчетыВВалюте = НЕ (СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета);

	
	// бухгалтерский и налоговые взаиморасчеты
	Если Дата >= Дата("20210101") Тогда
		НаличнаяОрганизация = Константы.НПТ.Получить();
	Иначе
		НаличнаяОрганизация = Константы.КрафтКолор.Получить();
	КонецЕсли;
	Для каждого СтрокаЗадолженности Из ТаблицаПоСуммамДолга Цикл

		
		Если СтрокаЗадолженности.ВзаиморасчетыЗакрыты Тогда
			// сфорируем только движения по ожидаемому и подтвержденному НДС
			
				// ожидаемый и подтвержденный НДС
				Если  НЕ СтрокаЗадолженности.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее 
					И      СтруктураШапкиДокумента.ЕстьНДС
					И НЕ  (СтрокаЗадолженности.ВозвратнаяТара И СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат)
					И     ((СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета) ИЛИ СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель) Тогда
						
					   Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
							   
						   РегистрОиПНДС = ОиПНДСПродаж;
							   
						   Движение 		 = РегистрОиПНДС.Добавить();	
							   
						   КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж;
							   
						   Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							   // расчеты
							   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
						   Иначе
							   //возврат	
							   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
						   КонецЕсли;
							   
					   Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
							   
						   РегистрОиПНДС = ОиПНДСПриобретений;

						   Движение 			= РегистрОиПНДС.Добавить();
							   
						   КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений;
							   
						   Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							   // расчеты
							   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
						   Иначе
							   //возврат	
							   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
						   КонецЕсли;
						   
						   Движение.СуммаНДСПропорционально = СтрокаЗадолженности.СуммаНДСПропорциональноКредит;	   
						   Движение.НалоговоеНазначение     = СтрокаЗадолженности.НалоговоеНазначение;
						   Движение.Амортизируется		    = СтрокаЗадолженности.Амортизируется;
							   
					   КонецЕсли;
					   
					   Движение.ВидДвижения  			= ВидДвиженияНакопления.Приход;
					   Движение.Период	 				= СтруктураШапкиДокумента.Дата;
					   Движение.Организация 		  	= СтруктураШапкиДокумента.Организация;
					   Движение.ДоговорКонтрагента 		= СтрокаЗадолженности.ДоговорКонтрагента;
					   Движение.Сделка			 		= СтрокаЗадолженности.СделкаРегл;
					   Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
					   Движение.СтавкаНДС	  			= СтрокаЗадолженности.СтавкаНДС;
					   Движение.БазаНДС  				= СтрокаЗадолженности.СуммаВзаиморасчетовБУ - СтрокаЗадолженности.СуммаНДСВал;
					   Движение.СуммаНДС    			= СтрокаЗадолженности.СуммаНДСВал;
					   Движение.КодОперации 			= КодыОпераций.ОжидаемыйНДС;						   
					   
					   // бухгалтерские проводки - НДС
					   Если  СтрокаЗадолженности.ПроводкиСуммаНДС <> 0 Тогда
						   
						   Проводка = ПроводкиБУ.Добавить();
						   Проводка.Период			= СтруктураШапкиДокумента.Дата;
						   Проводка.Организация		= СтруктураШапкиДокумента.Организация;
						   //Смартис Лиманчук начало 14.11.2012
						   Если СтрокаЗадолженности.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
							   Проводка.Организация		= НаличнаяОрганизация;
						   КонецЕсли;
						   //Смартис Лиманчук окончание 14.11.2012
						   Проводка.НомерЖурнала	= "";
						   Проводка.Содержание		= "Ввод начальных остатков по взаиморасчетам (НДС)";
						   Проводка.Сумма			= СтрокаЗадолженности.ПроводкиСуммаНДС;
						   
						   Если СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
							   // покупатель
							   Проводка.СчетДт = ВспомогательныйСчет;
							   Если КоличествоСубконто > 0 Тогда
								   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[0].ВидСубконто.Наименование, СубконтоДт1);
							   КонецЕсли;
							   Если КоличествоСубконто > 1 Тогда
								   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[1].ВидСубконто.Наименование, СубконтоДт2);
							   КонецЕсли;
							   Если КоличествоСубконто > 2 Тогда
								   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[2].ВидСубконто.Наименование, СубконтоДт3);
							   КонецЕсли;
							   
							   Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);
							   
						   Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
							   // поставщик
							   Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаНДС;
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);
							   
							   Проводка.СчетКт 	= ВспомогательныйСчет;
							   Если КоличествоСубконто > 0 Тогда
								   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[0].ВидСубконто.Наименование, СубконтоДт1);
							   КонецЕсли;
							   Если КоличествоСубконто > 1 Тогда
								   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[1].ВидСубконто.Наименование, СубконтоДт2);
							   КонецЕсли;
							   Если КоличествоСубконто > 2 Тогда
								   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[2].ВидСубконто.Наименование, СубконтоДт3);
							   КонецЕсли;
							   
						   КонецЕсли;
						   
					   КонецЕсли;					   
					   
				   КонецЕсли;
			   
			   Продолжить;
	   
		КонецЕсли;
	
		ЭтоОплата = ЭтоОплата(СтрокаЗадолженности);
		
		////////////////////////////////////////////////////////////////////////

		// бухгалтерские проводки  - взаиморасчеты
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период			= СтруктураШапкиДокумента.Дата;
		
		Проводка.Организация	= СтруктураШапкиДокумента.Организация;
		   //Смартис Лиманчук начало 14.11.2012
		   Если СтрокаЗадолженности.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
			   Проводка.Организация		= НаличнаяОрганизация;
		   КонецЕсли;
		   //Смартис Лиманчук окончание 14.11.2012
		

		Проводка.НомерЖурнала	= "";

		Проводка.Содержание		= "Ввод начальных остатков по взаиморасчетам";

		Проводка.Сумма			= СтрокаЗадолженности.СуммаРегл;

		

		Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда

			

			Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаРасчетовСКонтрагентом;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);
			

			Если РасчетыВВалюте И Проводка.СчетДт.Валютный Тогда

				Проводка.ВалютаДт        = СтрокаЗадолженности.ВалютаВзаиморасчетов;

				Проводка.ВалютнаяСуммаДт = СтрокаЗадолженности.СуммаПлатежа;

			КонецЕсли;			

			

			Проводка.СчетКт 	= ВспомогательныйСчет;

			Если КоличествоСубконто > 0 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[0].ВидСубконто.Наименование, СубконтоДт1);
			КонецЕсли;
			Если КоличествоСубконто > 1 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[1].ВидСубконто.Наименование, СубконтоДт2);
			КонецЕсли;
			Если КоличествоСубконто > 2 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[2].ВидСубконто.Наименование, СубконтоДт3);
			КонецЕсли;
			

		Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда	

			

			Проводка.СчетДт 	= ВспомогательныйСчет;

			Если КоличествоСубконто > 0 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[0].ВидСубконто.Наименование, СубконтоДт1);
			КонецЕсли;
			Если КоличествоСубконто > 1 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[1].ВидСубконто.Наименование, СубконтоДт2);
			КонецЕсли;
			Если КоличествоСубконто > 2 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[2].ВидСубконто.Наименование, СубконтоДт3);
			КонецЕсли;
			

			Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаРасчетовСКонтрагентом;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);

			

			Если РасчетыВВалюте И Проводка.СчетКт.Валютный Тогда

				Проводка.ВалютаКт        = СтрокаЗадолженности.ВалютаВзаиморасчетов;

				Проводка.ВалютнаяСуммаКт = СтрокаЗадолженности.СуммаПлатежа;

			КонецЕсли;			

			

		КонецЕсли;

		
		////////////////////////////////////////////////////////////////////////

		// движения по регистру "Расчеты по приобретению (Реализации) в валюте (бухгалтерский учет)"

		Если РасчетыВВалюте Тогда
			ФормироватьДвиженияРвВ = Истина;

			Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
			
				ФормироватьДвиженияРвВ = Ложь;	
			
			ИначеЕсли  СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель Тогда

				

				Движение = Движения.РасчетыПоРеализацииВВалютеОрганизации.Добавить();
				

			ИначеЕсли СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда

				

				Движение = Движения.РасчетыПоПриобретениюВВалютеОрганизации.Добавить();

				

			Иначе

				ФормироватьДвиженияРвВ = Ложь;

			КонецЕсли;	

			

			Если ФормироватьДвиженияРвВ Тогда

				Движение.ВидДвижения		= ?(ЭтоОплата, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
				Движение.Период      		= СтруктураШапкиДокумента.Дата;

				Движение.Активность  		= Истина;



				Движение.Организация  		= СтруктураШапкиДокумента.Организация;		

				Движение.Контрагент 		= СтруктураШапкиДокумента.КонтрагентДебитор;		

				Движение.ДоговорКонтрагента = СтрокаЗадолженности.ДоговорКонтрагента;		

				Движение.Сделка				= СтрокаЗадолженности.СделкаРегл;		
				
				Движение.Документ  			= Ссылка;		

				Движение.СчетОплаты	  		= СтрокаЗадолженности.СчетУчетаРасчетовСКонтрагентом;		

				Движение.ДатаОплаты  		= СтруктураШапкиДокумента.Дата;		

				

				Движение.СуммаВзаиморасчетов = СтрокаЗадолженности.СуммаПлатежа;		

				Движение.СуммаРегл 			 = СтрокаЗадолженности.СуммаРегл;

				

			КонецЕсли;

		КонецЕсли;

		
		////////////////////////////////////////////////////////////////////////

		// Запись в последовательность "Расчеты по реализации (приобретению) организации"

		Если СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель Тогда

			ПоследовательностьДляРегистрации = Последовательности.РасчетыПоРеализацииОрганизации.СоздатьНаборЗаписей();

		ИначеЕсли СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда

			ПоследовательностьДляРегистрации = Последовательности.РасчетыПоПриобретениюОрганизации.СоздатьНаборЗаписей();

		Иначе
			ПоследовательностьДляРегистрации = Неопределено;

		КонецЕсли;



		Если НЕ ПоследовательностьДляРегистрации = Неопределено тогда



			// Регистрация в последовательности взаиморасчетов

			ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(Ссылка);



			ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();



			ЗаписьРегистрации.Период      = СтруктураШапкиДокумента.Дата;

			ЗаписьРегистрации.Регистратор = Ссылка;

			ЗаписьРегистрации.Организация = СтруктураШапкиДокумента.Организация;



			ПоследовательностьДляРегистрации.Записать();

			// При этом должна соответсвующим образом подвинуться граница (выполняется средствами платформы)

			
		КонецЕсли;		
		
	КонецЦикла;

	
	// Налоговые регристры
	Для каждого СтрокаЗадолженности Из ТаблицаПоСуммамДолга Цикл
		
		Если СтрокаЗадолженности.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			
			//налоговые регистры не заполняем
			Продолжить;
			
		КонецЕсли; 

		Если СтрокаЗадолженности.ВзаиморасчетыЗакрыты Тогда
			
			//налоговые регистры не заполнены ранее
			Продолжить;
			
		КонецЕсли; 

		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

			// бухгалтерские проводки - НДС
			Если  СтруктураШапкиДокумента.ЕстьНДС 
				И СтрокаЗадолженности.ПроводкиСуммаНДС <> 0 Тогда
					
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
			   //Смартис Лиманчук начало 14.11.2012
			   Если СтрокаЗадолженности.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
				   Проводка.Организация		= НаличнаяОрганизация;
			   КонецЕсли;
			   //Смартис Лиманчук окончание 14.11.2012
				Проводка.НомерЖурнала	= "";
				Проводка.Содержание		= "Ввод начальных остатков по взаиморасчетам (НДС)";
				Проводка.Сумма			= СтрокаЗадолженности.ПроводкиСуммаНДС;
				
				
				Если СтрокаЗадолженности.ТипКонтрагента = перечисления.СтатусыКонтрагентов.Покупатель Тогда
				
					СчетНДСПодтвержденный = СтруктураШапкиДокумента.СчетУчетаНДСОбязательства;	
					
				Иначе
					
					СчетНДСПодтвержденный = СтруктураШапкиДокумента.СчетУчетаНДСКредит;	
				
				КонецЕсли;
				
				Если    ЭтоОплата(СтрокаЗадолженности)
				   И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
				   // формируются проводки типа 00(6442) - 6441 на сумму НДС
					   
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						// покупатель
						Проводка.СчетДт = СчетНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);
						
						Если СтрокаЗадолженности.НетНалоговойНакладной Тогда
							Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);
						Иначе	
							Проводка.СчетКт = ВспомогательныйСчет;	
							Если КоличествоСубконто > 0 Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[0].ВидСубконто.Наименование, СубконтоДт1);
							КонецЕсли;
							Если КоличествоСубконто > 1 Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[1].ВидСубконто.Наименование, СубконтоДт2);
							КонецЕсли;
							Если КоличествоСубконто > 2 Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[2].ВидСубконто.Наименование, СубконтоДт3);
							КонецЕсли;
						КонецЕсли;
										
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// поставщик
						Если СтрокаЗадолженности.НетНалоговойНакладной Тогда
							Проводка.СчетДт = СтрокаЗадолженности.СчетУчетаНДС;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);
						Иначе
							Проводка.СчетДт = ВспомогательныйСчет;
							Если КоличествоСубконто > 0 Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[0].ВидСубконто.Наименование, СубконтоДт1);
							КонецЕсли;
							Если КоличествоСубконто > 1 Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[1].ВидСубконто.Наименование, СубконтоДт2);
							КонецЕсли;
							Если КоличествоСубконто > 2 Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[2].ВидСубконто.Наименование, СубконтоДт3);
							КонецЕсли;
						КонецЕсли;
								
						Проводка.СчетКт 	= СчетНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);											
					КонецЕсли;
					
				ИначеЕсли НЕ ЭтоОплата(СтрокаЗадолженности)
						 И    СтрокаЗадолженности.НетНалоговойНакладной 
						И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
					   // формируются проводки типа 6442 - 00 на сумму НДС
						
					Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
						// поставщик
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);
												
						Проводка.СчетКт 	= ВспомогательныйСчет;
						Если КоличествоСубконто > 0 Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[0].ВидСубконто.Наименование, СубконтоДт1);
						КонецЕсли;
						Если КоличествоСубконто > 1 Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[1].ВидСубконто.Наименование, СубконтоДт2);
						КонецЕсли;
						Если КоличествоСубконто > 2 Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[2].ВидСубконто.Наименование, СубконтоДт3);
						КонецЕсли;
										
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// покупатель
						Проводка.СчетДт 	= ВспомогательныйСчет;
						Если КоличествоСубконто > 0 Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[0].ВидСубконто.Наименование, СубконтоДт1);
						КонецЕсли;
						Если КоличествоСубконто > 1 Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[1].ВидСубконто.Наименование, СубконтоДт2);
						КонецЕсли;
						Если КоличествоСубконто > 2 Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[2].ВидСубконто.Наименование, СубконтоДт3);
						КонецЕсли;
										
						Проводка.СчетКт = СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);
					КонецЕсли;
						
				ИначеЕсли НЕ ЭтоОплата(СтрокаЗадолженности)
						 И СтрокаЗадолженности.НетНалоговойНакладной 
						И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
					   // формируются проводки типа 00 - 6441 на -сумму НДС (для приведения остатков к учету "по отгрузке")
						   
					   Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда
						   // покупатель
						   Проводка.СчетДт 	= СчетНДСПодтвержденный;
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);						   
						   
						   Проводка.СчетКт 	= ВспомогательныйСчет;
						   Если КоличествоСубконто > 0 Тогда
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[0].ВидСубконто.Наименование, СубконтоДт1);
						   КонецЕсли;
						   Если КоличествоСубконто > 1 Тогда
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[1].ВидСубконто.Наименование, СубконтоДт2);
						   КонецЕсли;
						   Если КоличествоСубконто > 2 Тогда
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ВспомогательныйСчет.ВидыСубконто[2].ВидСубконто.Наименование, СубконтоДт3);
						   КонецЕсли;
							   
					   Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда	
						   // поставщик
						   Проводка.СчетДт 	= ВспомогательныйСчет;
						   Если КоличествоСубконто > 0 Тогда
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[0].ВидСубконто.Наименование, СубконтоДт1);
						   КонецЕсли;
						   Если КоличествоСубконто > 1 Тогда
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[1].ВидСубконто.Наименование, СубконтоДт2);
						   КонецЕсли;
						   Если КоличествоСубконто > 2 Тогда
							   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ВспомогательныйСчет.ВидыСубконто[2].ВидСубконто.Наименование, СубконтоДт3);
						   КонецЕсли;
							   
						   Проводка.СчетКт 	= СчетНДСПодтвержденный;
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);						   						   
					   КонецЕсли;
						   
					   Проводка.Сумма = - Проводка.Сумма;
						   
				Иначе
					// в остальных случаях проводки не формируются.	   
					ПроводкиБУ.Удалить(Проводка);
						
				КонецЕсли;
					
				// сформируем проводку по регистрации авансов (отмена регистрации)
				Если  (   ЭтоОплата(СтрокаЗадолженности) И НЕ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке)
				  ИЛИ (НЕ ЭтоОплата(СтрокаЗадолженности) И    СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате) Тогда
					  
					  // формируются проводки типа 6442 - 6441 на -сумму НДС
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период			= ДатаСторноДвижений;
					Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				   //Смартис Лиманчук начало 14.11.2012
				   Если СтрокаЗадолженности.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					   Проводка.Организация		= НаличнаяОрганизация;
				   КонецЕсли;
				   //Смартис Лиманчук окончание 14.11.2012
					Проводка.НомерЖурнала	= "";
					Проводка.Содержание		= "Отмена регистрации авансов (НДС)";
					Проводка.Сумма			=  - СтрокаЗадолженности.ПроводкиСуммаНДС;
					
					Если (СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиКредиторская И    ЭтоОплата(СтрокаЗадолженности)) 
					  ИЛИ(СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская  И НЕ ЭтоОплата(СтрокаЗадолженности))	Тогда
						// покупатель
						Проводка.СчетДт 	= СчетНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);						   						   
						
						Проводка.СчетКт 	= СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);						   						   				
						
					Иначе//Если СтрокаЗадолженности.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда	
						// поставщик
						Проводка.СчетДт 	= СтрокаЗадолженности.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);						   						   
						
						Проводка.СчетКт 	= СчетНДСПодтвержденный;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаЗадолженности.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтрокаЗадолженности.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки", 	СтрокаЗадолженности.СделкаРегл);						   						   
						
					КонецЕсли;
						
					Если НЕ ЭтоОплата(СтрокаЗадолженности) Тогда
						// долг по отгрузке при методе определения базы - по оплате
						Проводка.Сумма =  - Проводка.Сумма;
					КонецЕсли; 
						
				КонецЕсли;
					
			КонецЕсли; 
				
			// Налоговый учет (продаж/приобретений)
			Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
				  
			  Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
					  
				  Движение = НУПродаж.Добавить();
					  
				  Если ЭтоОплата(СтрокаЗадолженности) Тогда
					  // оплата
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю;
					  КонецЕсли;
				  Иначе
					  //отгрузка
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
					  КонецЕсли;
				  КонецЕсли; 
					  
			  Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
					  
				  Движение = НУПриобретений.Добавить();
					  
				  Если ЭтоОплата(СтрокаЗадолженности) Тогда
					  // оплата
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
					  КонецЕсли;
				  Иначе
					  //отгрузка
					  Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						  // расчеты
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;
					  Иначе
						  //возврат	
						  Движение.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;
					  КонецЕсли;
				  КонецЕсли; 
				  
			  КонецЕсли; 
				  
			  Движение.Период	 		  		= СтруктураШапкиДокумента.Дата;
			  Движение.Организация 		  		= СтруктураШапкиДокумента.Организация;
			  Движение.ДоговорКонтрагента 		= СтрокаЗадолженности.ДоговорКонтрагента;
			  Движение.Сделка			 		= СтрокаЗадолженности.СделкаРегл;
			  Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
			  Движение.СуммаВзаиморасчетов      = СтрокаЗадолженности.СуммаВзаиморасчетовБУ;
				  
			КонецЕсли;			
				
				
			// ожидаемый и подтвержденный НДС
			Если  СтруктураШапкиДокумента.ЕстьНДС
				И     ((СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета) ИЛИ СтрокаЗадолженности.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель ИЛИ СтрокаЗадолженности.СтавкаНДС = Перечисления.СтавкиНДС.НДС20) Тогда
					
				   Если СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Покупатель Тогда
						   
					   РегистрОиПНДС = ОиПНДСПродаж;
						   
					   Движение 		 = РегистрОиПНДС.Добавить();	
					   ДвижениеВыпискаНН = РегистрОиПНДС.Добавить();
					   ДвижениеСторно    = РегистрОиПНДС.Добавить();
						   
					   КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж;
						   
					   Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						   // расчеты
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
					   Иначе
						   //возврат	
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
					   КонецЕсли;
						   
				   Иначе// СтрокаЗадолженности.ТипКонтрагента 	= Перечисления.СтатусыКонтрагентов.Поставщик
						   
					   РегистрОиПНДС = ОиПНДСПриобретений;

					   Движение 			= РегистрОиПНДС.Добавить();
					   ДвижениеВыпискаНН 	= РегистрОиПНДС.Добавить();
					   ДвижениеСторно 		= РегистрОиПНДС.Добавить();
						   
					   КодыОпераций = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений;
						   
					   Если СтрокаЗадолженности.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						   // расчеты
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
					   Иначе
						   //возврат	
						   Движение.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
					   КонецЕсли;
					   
					   Движение.СуммаНДСПропорционально = СтрокаЗадолженности.СуммаНДСПропорциональноКредит;
					   Движение.Амортизируется		    = СтрокаЗадолженности.Амортизируется;
				   КонецЕсли;
					   
				   Если (НЕ ЭтоОплата(СтрокаЗадолженности) 
						  И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате
						  И СтрокаЗадолженности.НетНалоговойНакладной) Тогда
						Движение.Период		  	= ДатаСторноДвижений;
						Движение.КодОперации 	= КодыОпераций.ОтменаРегистрацииАвансов;
				   Иначе	
						   Движение.Период	 = СтруктураШапкиДокумента.Дата;
						Если ЭтоОплата(СтрокаЗадолженности) Тогда
							Движение.КодОперации = КодыОпераций.РегистрацияАвансов;
						Иначе	
							Движение.КодОперации = КодыОпераций.ОжидаемыйНДС;
						КонецЕсли;
				   КонецЕсли;
				   Движение.ВидДвижения  			= ВидДвиженияНакопления.Приход;
				   Движение.Организация 		  	= СтруктураШапкиДокумента.Организация;
				   Движение.ДоговорКонтрагента 		= СтрокаЗадолженности.ДоговорКонтрагента;
				   Движение.Сделка					= СтрокаЗадолженности.СделкаРегл;
				   Движение.НалоговоеНазначение	    = СтрокаЗадолженности.НалоговоеНазначение;
				   Движение.ВозвратнаяТара	  		= СтрокаЗадолженности.ВозвратнаяТара;
				   Движение.СтавкаНДС	  			= СтрокаЗадолженности.СтавкаНДС;
				   Движение.БазаНДС  				= СтрокаЗадолженности.СуммаВзаиморасчетовБУ - СтрокаЗадолженности.СуммаНДСВал;
				   Движение.СуммаНДС    			= СтрокаЗадолженности.СуммаНДСВал;
					   
				   Если НЕ СтрокаЗадолженности.НетНалоговойНакладной Тогда
						   
					   // сформируем движение по выписке налоговой
					   ЗаполнитьЗначенияСвойств(ДвижениеВыпискаНН,Движение,,"НомерСтроки");					   
					   ДвижениеВыпискаНН.ВидДвижения = ВидДвиженияНакопления.Расход;
					   ДвижениеВыпискаНН.КодОперации = КодыОпераций.ПодтвержденныйНДС;
						   
				   КонецЕсли;
					   
				   Если ЭтоОплата(СтрокаЗадолженности) Тогда
						   
					   // добавим движения по регистрации авансов (отмена регистрации):
					   // сторно на начало следующего месяца
					   ЗаполнитьЗначенияСвойств(ДвижениеСторно,Движение,,"НомерСтроки");
						   
					   ДвижениеСторно.СуммаНДС    = -ДвижениеСторно.СуммаНДС;
					   ДвижениеСторно.БазаНДС     = -ДвижениеСторно.БазаНДС;
					   ДвижениеСторно.Период      = ДатаСторноДвижений;
					   ДвижениеСторно.КодОперации = КодыОпераций.ОтменаРегистрацииАвансов;
						   
				   КонецЕсли; 
					   
				   // оставим только те движения, которые имеют смысл:
				   Если НЕ ЭтоОплата(СтрокаЗадолженности) ИЛИ СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
						   
						РегистрОиПНДС.Удалить(ДвижениеСторно);
						   
				   КонецЕсли;
					   
				  Если  (   ЭтоОплата(СтрокаЗадолженности) И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке)
					ИЛИ (НЕ ЭтоОплата(СтрокаЗадолженности) И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате) Тогда
						
					   УдалятьДвижение = Истина;
					   Если (НЕ ЭтоОплата(СтрокаЗадолженности) 
							  И СтрокаЗадолженности.МоментОпределенияБазыНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате
							  И СтрокаЗадолженности.НетНалоговойНакладной) Тогда
							   УдалятьДвижение = Ложь;	
					   КонецЕсли;
						
					  Если УдалятьДвижение Тогда
						   РегистрОиПНДС.Удалить(Движение);
					  КонецЕсли;
						  
					  РегистрОиПНДС.Удалить(ДвижениеВыпискаНН);
						   
				   ИначеЕсли СтрокаЗадолженности.НетНалоговойНакладной Тогда
						   
					  РегистрОиПНДС.Удалить(ДвижениеВыпискаНН);
							  
				   КонецЕсли;
						   
			   КонецЕсли; 
			   
	   КонецЕсли;

	КонецЦикла;


КонецПроцедуры



// Используется при проведении документа "Корректировка долга" с операцией "Перенос задолженности".

// Формирует движения регистров по контрагенту, на которого переносится долг.

//

Процедура ДвиженияПоПереносуЗадолженности(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, РежимВосстановленияПоследовательностейРасчетов, Отказ, Заголовок) Экспорт

	

	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

		Возврат;

	КонецЕсли;

	

	ПереносДолгаНаДругогоКонтрагента = СтруктураШапкиДокумента.КонтрагентДебитор <> СтруктураШапкиДокумента.КонтрагентКредитор;

	ФормироватьДвиженияУпрВзаиморасчетов = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И НЕ РежимВосстановленияПоследовательностейРасчетов;
	

	ФормироватьДвиженияВзаиморасчетовПоДокументам = НЕ РежимВосстановленияПоследовательностейРасчетов 
		И СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом;
		
	Если ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
		
		ВидРасчетовСКонтрагентом = 
			?(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером,
			Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации, Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению);
			
	КонецЕсли;
	// Движения регистров ВзаиморасчетыСКонтрагентами, РасчетыСКонтрагентами, ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
	
	Если ФормироватьДвиженияУпрВзаиморасчетов ИЛИ ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
		
		Для каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
			
			ВидДвижения = ?(СтрокаДолга.УвеличениеДолгаКонтрагента > 0, 
			ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
			
			Если ФормироватьДвиженияУпрВзаиморасчетов Тогда
				
				// ВзаиморасчетыСКонтрагентами 
				
				Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
				
				Движение.ВидДвижения = ВидДвижения;
				Движение.Период      = СтруктураШапкиДокумента.Дата;
				Движение.Активность  = Истина;
				
				Движение.Организация        = СтруктураШапкиДокумента.Организация;
				Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
				Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
				
				//Движение.Сделка = Неопределено;
				Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
					Движение.Сделка = Неопределено;
				Иначе	
					Движение.Сделка = Сделка;
				КонецЕсли;	
				
				НоваяСуммаВзаиморасчетов    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаДолга.Сумма,
				СтрокаДолга.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				СтрокаДолга.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,
				СтрокаДолга.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
				СуммаУпр = ?(ВидДвижения = ВидДвиженияНакопления.Расход, СтрокаДолга.УвеличениеДолгаУпр, СтрокаДолга.УменьшениеДолгаУпр);
				
				Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
				Движение.СуммаУпр            = СуммаУпр;
				
				// РасчетыСКонтрагентами 
				
				Движение = Движения.РасчетыСКонтрагентами.Добавить();
				
				Движение.ВидДвижения = ВидДвижения;
				Движение.Период      = СтруктураШапкиДокумента.Дата;
				Движение.Активность  = Истина;
				
				Движение.Организация        = СтруктураШапкиДокумента.Организация;
				Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
				Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
				//Движение.Сделка = Неопределено;
				Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
					Движение.Сделка = Неопределено;
				Иначе	
					Движение.Сделка = Сделка;
				КонецЕсли;	
				Движение.РасчетыВозврат     = Перечисления.РасчетыВозврат.Расчеты;
				
				Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
				Движение.СуммаУпр            = СуммаУпр;
				
			КонецЕсли;
			
			// ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
			
			Если ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
				
				Движение = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Добавить();
				
				Движение.ВидДвижения = ВидДвижения;
				Движение.Период      = СтруктураШапкиДокумента.Дата;
				Движение.Активность  = Истина;
				
				Движение.Организация        = СтруктураШапкиДокумента.Организация;
				Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
				Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
				//Движение.Сделка = Неопределено;
				Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
					Движение.Сделка = Неопределено;
				Иначе	
					Движение.Сделка = Сделка;
				КонецЕсли;	
				
				НовыйДокументРасчетов = ?(НЕ ЗначениеЗаполнено(СтрокаДолга.ДокументРасчетовСКонтрагентом) ИЛИ ПереносДолгаНаДругогоКонтрагента, 
				СтруктураШапкиДокумента.Ссылка, СтрокаДолга.ДокументРасчетовСКонтрагентом);
				
				Движение.ДокументРасчетовСКонтрагентом = НовыйДокументРасчетов;
				Движение.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
				
				Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	РасчетыВВалюте = НЕ (СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета);

	
	Для каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл

		
		////////////////////////////////////////////////////////////////////////

		// движения по регистру "Расчеты по приобретению (Реализации) в валюте (бухгалтерский учет)"

		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И РасчетыВВалюте Тогда

			
			Если  СтруктураШапкиДокумента.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель 
				И СтрокаДолга.УвеличениеДолгаКонтрагента > 0 Тогда

				
				//уменьшаем долг контрагента-получателя (оплата). По возврату оплаты движений не делаем...

				НаборДвижений = Движения.РасчетыПоРеализацииВВалютеОрганизации;
				Движение = НаборДвижений.Добавить();

				Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;

				СчетОплаты = СтруктураШапкиДокумента.СчетКт;
				
			ИначеЕсли  СтруктураШапкиДокумента.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель 
				И СтрокаДолга.УвеличениеДолгаКонтрагента = 0 Тогда
				
				//увеличиваем долг контрагента-получателя (отгрузка)
				НаборДвижений = Движения.РасчетыПоРеализацииВВалютеОрганизации;
				Движение = НаборДвижений.Добавить();
				Движение.ВидДвижения		= ВидДвиженияНакопления.Расход;

				СчетОплаты = СтруктураШапкиДокумента.СчетДт;
				
			ИначеЕсли СтруктураШапкиДокумента.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик 
				И СтрокаДолга.УвеличениеДолгаКонтрагента = 0 Тогда
				
				//увеличиваем долг контрагента-получателя (оплата). По возврату оплаты движений не делаем...
				НаборДвижений = Движения.РасчетыПоПриобретениюВВалютеОрганизации;
				Движение = НаборДвижений.Добавить();
				Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;

				СчетОплаты = СтруктураШапкиДокумента.СчетДт;
				
				
			ИначеЕсли СтруктураШапкиДокумента.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик 
				И СтрокаДолга.УвеличениеДолгаКонтрагента > 0 Тогда
				
				//уменьшаем долг контрагента-получателя (отгрузка)
				НаборДвижений = Движения.РасчетыПоПриобретениюВВалютеОрганизации;
				Движение = НаборДвижений.Добавить();
				Движение.ВидДвижения		= ВидДвиженияНакопления.Расход;

				СчетОплаты = СтруктураШапкиДокумента.СчетКт;
				
			КонецЕсли;	

			
			Движение.Период      		= СтруктураШапкиДокумента.Дата;

			Движение.Активность  		= Истина;



			Движение.Организация  		= СтруктураШапкиДокумента.Организация;		

			Движение.Контрагент 		= СтруктураШапкиДокумента.КонтрагентКредитор;		

			Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;		
			Движение.Сделка		 		= СтруктураШапкиДокумента.СделкаРегл;		
			Движение.Документ  			= Ссылка;		

			Движение.СчетОплаты	  		= СчетОплаты;		
			Движение.ДатаОплаты  		= СтруктураШапкиДокумента.Дата;		
			

			Движение.СуммаВзаиморасчетов = СтрокаДолга.СуммаПлатежа;		

			Движение.СуммаРегл 			 = СтрокаДолга.СуммаСНДСРегл;

			
			НаборДвижений.Записать(Ложь);
	
		КонецЕсли;		
		

		
	КонецЦикла;	
	

КонецПроцедуры


// Формирует структуру, в которую заносятся параметры необходимые для 
// формирования движений по налоговому и бух.уечту
//
// Параметры
//  ИмяТабличнойЧасти  – строка – имя табличной части из которой берутся данные
//  СтрокаТаблицыДолга  – СтрокаТабличнойЧасти – строка табличной части из которой берутся данные
//
// Возвращаемое значение:
//   Структура   – структура со значениями для формирования движений
//
Функция ПодготовкаСтруктурыПараметровДляДвиженияДенегЛокально(РасчетыВозврат, НаправлениеДвижения, Заголовок, КоррСчет, Таблица, СтруктураШапкиДокумента) 



	ВидДокумента       = Метаданные().Имя;

	

	//Получение реквизитов шапки

	СтруктураПараметров = Новый Структура("Организация,ВалютаДокумента,Контрагент");



	Для Каждого Реквизит из СтруктураПараметров Цикл

		

		СтруктураПараметров.Вставить(Реквизит.Ключ, СтруктураШапкиДокумента[Реквизит.Ключ]);

		

	КонецЦикла;

	

	СтруктураПараметров.Вставить("НаправлениеДвижения", НаправлениеДвижения);

	СтруктураПараметров.Вставить("РасчетыВозврат"     , РасчетыВозврат);



	СтруктураПараметров.Вставить("ВидДокумента"       , ВидДокумента);

	СтруктураПараметров.Вставить("Регистратор"        , Ссылка);

	СтруктураПараметров.Вставить("Заголовок"          , Заголовок);



	СтруктураПараметров.Вставить("Период", Ссылка.Дата);
	

	Если СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
		ЗнакОстатков = "<";
	Иначе
		ЗнакОстатков = ">";
	КонецЕсли;
	
	Если ((СтруктураПараметров.НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление) И (СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат))
	 Или ((СтруктураПараметров.НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие)     И (СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты)) Тогда
		РегистрРасчетов	= "РасчетыПоПриобретениюВВалютеОрганизации";
	Иначе
		РегистрРасчетов	= "РасчетыПоРеализацииВВалютеОрганизации";
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПлатежныйДокумент"	, Ложь);
	СтруктураПараметров.Вставить("ВидОперации"			, ВидОперации);
	СтруктураПараметров.Вставить("РегистрРасчетов"		, РегистрРасчетов);
	СтруктураПараметров.Вставить("ЗнакОстатков"			, ЗнакОстатков);
	СтруктураПараметров.Вставить("ДобавитьПриход"		, СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
	

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураПараметров["ВалютаДокумента"],СтруктураПараметров["Период"]);
	СтруктураПараметров.Вставить("КурсДокумента"     , СтруктураКурсаДокумента.Курс);

	СтруктураПараметров.Вставить("КратностьДокумента", СтруктураКурсаДокумента.Кратность);

	

	РасчетыВВалюте = Не СтруктураПараметров["ВалютаДокумента"] = мВалютаРегламентированногоУчета;

	

	СтруктураПараметров.Вставить("КоррСчет", КоррСчет);

	

	// Получение данных таблицы расшифровки платежа

	// Выгрузка нужных колонок табличной части в таблицу значений с переименованием названий счетов

	СтруктураТаблицы = Новый Структура("СуммаПлатежа, ДоговорКонтрагента, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");

	

	//Определяем, учитывается ли аванс в документе

	УчитыватьАванс = СтруктураШапкиДокумента.ОпределятьАвансыПриПроведенииДокумента;



	//Определим счета для проводок

	Если УчитыватьАванс И СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда

		

		СтруктураТаблицы.Вставить("СчетУчетаРасчетовСКонтрагентом", "СчетАванса");

		СтруктураТаблицы.Вставить("СчетУчетаРасчетовПоАвансам"	  , "СчетОплаты");

		

	Иначе

		

		СтруктураТаблицы.Вставить("СчетУчетаРасчетовСКонтрагентом", "СчетОплаты");

		СтруктураТаблицы.Вставить("СчетУчетаРасчетовПоАвансам"    , "СчетАванса");

		

	КонецЕсли;

	

	СтруктураТаблицы.Вставить("ЗаТару", "ВозвратнаяТара");

	
	Если НЕ Таблица.Колонки.Найти("НалоговоеНазначение") = Неопределено  Тогда
		СтруктураТаблицы.Вставить("НалоговоеНазначение", 	 "НалоговоеНазначение");	
	КонецЕсли;	
	Если НЕ Таблица.Колонки.Найти("НеОтноситьНаЗатратыПоНУ") = Неопределено Тогда
		СтруктураТаблицы.Вставить("НеОтноситьНаЗатратыПоНУ", "НеОтноситьНаЗатратыПоНУ");	
	КонецЕсли;	
	
	
	// валютная сумма, для пересчета по курсу валюты документа
	СтруктураТаблицы.Вставить("СуммаПлатежа", 	 "СуммаСНДСВал");
	СтруктураТаблицы.Вставить("СуммаСНДСРегл", 	 "СуммаСНДСРегл");
	

	СтруктураТаблицы.Вставить("КоррСубконто1", "КоррСубконто1");

	СтруктураТаблицы.Вставить("КоррСубконто2", "КоррСубконто2");

	СтруктураТаблицы.Вставить("КоррСубконто3", "КоррСубконто3");

	
	СтруктураТаблицы.Вставить("СделкаРегл", "СделкаРегл");
	СтруктураТаблицы.Вставить("Сделка", "Сделка");


	РеестрПлатежей = ОбщегоНазначения.СформироватьТаблицуЗначений(Таблица, СтруктураТаблицы, Истина);

	Если РеестрПлатежей = Неопределено Тогда

		

		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при движении денежных средств. Отсутствуют необходимые реквизиты в расшифровке платежа.",Ложь,Заголовок);

		Возврат Ложь;

		

	КонецЕсли;

	
	РеестрПлатежей.Колонки.Добавить("Контрагент");

	РеестрПлатежей.ЗаполнитьЗначения(СтруктураПараметров.Контрагент, "Контрагент");

	
	

	
	СтруктураПараметров.Вставить("Таблица", РеестрПлатежей);

	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
		СтруктураПараметров.Вставить("КомментарийОперации", "Изменение (формирование) задолженности:");	
	КонецЕсли;
	

	Возврат СтруктураПараметров;



КонецФункции

 
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,

		                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,

		                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность, 

								Отказ, Заголовок)
								
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		Возврат;

	КонецЕсли;

	

	ПроводкиБУ      	= Движения.Хозрасчетный;

	ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;

	

	ДатаДока        = Дата;

	ВалютаРег       = мВалютаРегламентированногоУчета;

	ДанныеВалютыРег = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
	
	РасчетыВВалюте = Не(СтруктураШапкиДокумента.ВалютаДокумента=мВалютаРегламентированногоУчета);

	
	СтруктураДвижений 	   = Новый Структура("ПроводкиБУ, ПриобретенияНалоговыйУчет, ПродажиНалоговыйУчет", ПроводкиБУ, Движения.ПриобретенияНалоговыйУчет, Движения.ПродажиНалоговыйУчет); 
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		Если ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.Найти("НалоговоеНазначение")  = Неопределено Тогда
			ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.Добавить("НалоговоеНазначение")
		КонецЕсли;
		// заполним налоговое назначение - значением из шапки (по прибыли).
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, "НалоговоеНазначение");
			// суммы по списанию дебеторской задолженности в НУ не должны фигурировать
			ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.Добавить("НеОтноситьНаЗатратыПоНУ");
			ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.ЗаполнитьЗначения(Истина, "НеОтноситьНаЗатратыПоНУ");
		КонецЕсли;
		
		Если ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.Найти("НалоговоеНазначение")  = Неопределено Тогда
			ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.Добавить("НалоговоеНазначение")
		КонецЕсли;
		// заполним налоговое назначение - значением из шапки (по прибыли).
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, "НалоговоеНазначение");
			// суммы по списанию дебеторской задолженности в НУ не должны фигурировать
			ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.Добавить("НеОтноситьНаЗатратыПоНУ");
			ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.ЗаполнитьЗначения(Истина, "НеОтноситьНаЗатратыПоНУ");
		КонецЕсли;

		Если ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.Найти("НалоговоеНазначение")  = Неопределено Тогда
			ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.Добавить("НалоговоеНазначение")
		КонецЕсли;
		// заполним налоговое назначение - значением из шапки (по прибыли).
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, "НалоговоеНазначение");
			// суммы по списанию дебеторской задолженности в НУ не должны фигурировать
		КонецЕсли;
		
		Если ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.Найти("НалоговоеНазначение")  = Неопределено Тогда
			ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.Добавить("НалоговоеНазначение")
		КонецЕсли;
		// заполним налоговое назначение - значением из шапки (по прибыли).
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, "НалоговоеНазначение");
			// суммы по списанию дебеторской задолженности в НУ не должны фигурировать
		КонецЕсли;
		
	Иначе
		// удаляем налоговое назначение, так как при движении денег могут ошибочно сформироваться 
		// движения по налоговому учету (по налоговому назначению по НДС).
		Если НЕ ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
			ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.Удалить("НалоговоеНазначение")
		КонецЕсли;
		Если ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
			ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.Удалить("НалоговоеНазначение")
		КонецЕсли;
		Если ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
			ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.Удалить("НалоговоеНазначение")
		КонецЕсли;
		Если ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
			ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.Удалить("НалоговоеНазначение")
		КонецЕсли;
		
	КонецЕсли;
	

	// Зафиксируем расчеты с покупателями

	Если ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Количество() > 0 Тогда

		

		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

			Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда

				КоррСчет = СтруктураШапкиДокумента.СчетДт;

			Иначе

				КоррСчет = ВспомогательныйСчет;

			КонецЕсли;

			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентКредитор);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
			КоррСчет = СтруктураШапкиДокумента.СчетДт;
			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);
		Иначе	

			КоррСчет = СтруктураШапкиДокумента.СчетКт;

			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);

		КонецЕсли;

		

		СтруктураПараметровДДС = ПодготовкаСтруктурыПараметровДляДвиженияДенегЛокально(Перечисления.РасчетыВозврат.Возврат, Перечисления.НаправленияДвижений.Выбытие, Заголовок, КоррСчет, ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, СтруктураШапкиДокумента);



		Если Не (СтруктураПараметровДДС = Ложь) тогда

			СтруктураПараметровДДС.Вставить("ЭтоОплата",        Истина);

			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметровДДС,СтруктураДвижений,мВалютаРегламентированногоУчета,РежимПроведения,ЭтотОбъект,Отказ);

			Если РасчетыВВалюте тогда

				БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеОплата(СтруктураПараметровДДС,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,?(РежимВосстановленияПоследовательностейРасчетов,Null,ЭтотОбъект),Отказ);
			КонецЕсли;
		Конецесли;

		
	КонецЕсли;

	

	Если ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Количество() > 0 Тогда

		

		КоррСчет = СчетДт;

		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 

			и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда

			КоррСчет = ВспомогательныйСчет;

		КонецЕсли;

		СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);

		

		СтруктураПараметровДДС = ПодготовкаСтруктурыПараметровДляДвиженияДенегЛокально(Перечисления.РасчетыВозврат.Расчеты, Перечисления.НаправленияДвижений.Поступление, Заголовок, КоррСчет, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность, СтруктураШапкиДокумента);



		Если Не (СтруктураПараметровДДС = Ложь) тогда

			СтруктураПараметровДДС.Вставить("ЭтоОплата",        Истина);

			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметровДДС,СтруктураДвижений,мВалютаРегламентированногоУчета,РежимПроведения,ЭтотОбъект,Отказ);

			Если РасчетыВВалюте тогда

				БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеОплата(СтруктураПараметровДДС,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,?(РежимВосстановленияПоследовательностейРасчетов,Null,ЭтотОбъект),Отказ);
			КонецЕсли;

		Конецесли;



	КонецЕсли;

	

	// Зафиксируем расчеты с поставщиками

	Если ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Количество() > 0 Тогда

		

		КоррСчет = СчетДт;

		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 

			и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда

			КоррСчет = ВспомогательныйСчет;

		КонецЕсли;

		СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);

		

		СтруктураПараметровДДС = ПодготовкаСтруктурыПараметровДляДвиженияДенегЛокально(Перечисления.РасчетыВозврат.Возврат, Перечисления.НаправленияДвижений.Поступление, Заголовок, КоррСчет, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность, СтруктураШапкиДокумента);
		Если Не (СтруктураПараметровДДС = Ложь) тогда

			СтруктураПараметровДДС.Вставить("ЭтоОплата",      Истина);

			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметровДДС,СтруктураДвижений,мВалютаРегламентированногоУчета,РежимПроведения,ЭтотОбъект,Отказ);

			Если РасчетыВВалюте тогда

				БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеОплата(СтруктураПараметровДДС,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,?(РежимВосстановленияПоследовательностейРасчетов,Null,ЭтотОбъект),Отказ);
			КонецЕсли;

		Конецесли;

			

	КонецЕсли;



	Если ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Количество() > 0 Тогда

		

		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

			Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда

				КоррСчет = СтруктураШапкиДокумента.СчетДт;

			Иначе

				КоррСчет = ВспомогательныйСчет;

			КонецЕсли;

			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентКредитор);

		Иначе

			КоррСчет = СтруктураШапкиДокумента.СчетКт;

			СтруктураШапкиДокумента.Вставить("Контрагент", КонтрагентДебитор);

		КонецЕсли;

		

		СтруктураПараметровДДС = ПодготовкаСтруктурыПараметровДляДвиженияДенегЛокально(Перечисления.РасчетыВозврат.Расчеты, Перечисления.НаправленияДвижений.Выбытие, Заголовок, КоррСчет, ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, СтруктураШапкиДокумента);



		Если Не (СтруктураПараметровДДС = Ложь) тогда

			СтруктураПараметровДДС.Вставить("ЭтоОплата",        Истина);

			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметровДДС,СтруктураДвижений,мВалютаРегламентированногоУчета,РежимПроведения,ЭтотОбъект,Отказ);

			Если РасчетыВВалюте тогда

				БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеОплата(СтруктураПараметровДДС,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,?(РежимВосстановленияПоследовательностейРасчетов,Null,ЭтотОбъект),Отказ);
			КонецЕсли;

		Конецесли;



	КонецЕсли;

	

	// Зафиксируем прочие расчеты

	Для каждого ТекущийПлатеж Из ТаблицаПоСуммамДолга Цикл

		Если ТекущийПлатеж.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению

		 или ТекущийПлатеж.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации

			Тогда

			// Договор обработан ранее 

			Продолжить;

		КонецЕсли; 

		

		Если ТекущийПлатеж.УвеличениеДолгаКонтрагента <> 0 Тогда

			

			ДтКт     = "Дт";

			КоррДтКт = "Кт";

			СчетРасчетов = ТекущийПлатеж.СчетУчетаРасчетов;

			

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;

			Проводка.Активность  = Истина;

			Проводка.Организация = СтруктураШапкиДокумента.Организация;

			Проводка.Содержание  = "Увеличение долга";



			Проводка["Счет" + ДтКт]= СчетРасчетов;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт],Проводка["Субконто" + ДтКт], "Контрагенты", 

				?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета,

				СтруктураШапкиДокумента.КонтрагентКредитор, СтруктураШапкиДокумента.КонтрагентДебитор));

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт],Проводка["Субконто" + ДтКт], "Договоры", ТекущийПлатеж.ДоговорКонтрагента);

				

			Если СчетРасчетов.Валютный тогда

				Проводка["Валюта" + ДтКт]        = ТекущийПлатеж.ВалютаВзаиморасчетов;

				Проводка["ВалютнаяСумма" + ДтКт] = ТекущийПлатеж.УвеличениеДолгаКонтрагента;

			КонецЕсли;

				

			Проводка["Счет" + КоррДтКт] = ТекущийПлатеж.КоррСчет;

			

			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

				

				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);

				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);

				

				Если ТекущийПлатеж.КоррСчет.Валютный Тогда

					Проводка["Валюта" + КоррДтКт] 		 = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;

					Проводка["ВалютнаяСумма" + КоррДтКт] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						ТекущийПлатеж.УвеличениеДолгаКонтрагента,

						ТекущийПлатеж.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,

						ТекущийПлатеж.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,

						ТекущийПлатеж.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);

				КонецЕсли;

					

			Иначе

				

				Для каждого ВидСубконтоКоррСчета из ТекущийПлатеж.КоррСчет.ВидыСубконто цикл

					БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], ВидСубконтоКоррСчета.НомерСтроки, СтруктураШапкиДокумента["Субконто" + КоррДтКт + ВидСубконтоКоррСчета.НомерСтроки]);

				КонецЦикла;

				

				Если ТекущийПлатеж.КоррСчет.Валютный Тогда

					Проводка["Валюта" + КоррДтКт] 		 = ТекущийПлатеж.ВалютаВзаиморасчетов;

					Проводка["ВалютнаяСумма" + КоррДтКт] = ТекущийПлатеж.УвеличениеДолгаКонтрагента;

				КонецЕсли;

				

			КонецЕсли;



			Проводка.Сумма = ТекущийПлатеж.СуммаСНДСРегл;

			

		КонецЕсли; 

		

		Если ТекущийПлатеж.УменьшениеДолгаКонтрагента <> 0 Тогда

			

			ДтКт     = "Кт";

			КоррДтКт = "Дт";              

			СчетРасчетов = ?(НЕ ЗначениеЗаполнено(ТекущийПлатеж.СчетУчетаАвансов),ТекущийПлатеж.СчетУчетаРасчетов, ТекущийПлатеж.СчетУчетаАвансов);

			

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;

			Проводка.Активность  = Истина;

			Проводка.Организация = СтруктураШапкиДокумента.Организация;

			Проводка.Содержание  = "Уменьшение долга";



			Проводка["Счет" + ДтКт]= СчетРасчетов;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт], Проводка["Субконто" + ДтКт], "Контрагенты", СтруктураШапкиДокумента.КонтрагентДебитор);

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКт], Проводка["Субконто" + ДтКт],"Договоры",     ТекущийПлатеж.ДоговорКонтрагента);

				

			Если СчетРасчетов.Валютный тогда

				Проводка["Валюта" + ДтКт]        = ТекущийПлатеж.ВалютаВзаиморасчетов;

				Проводка["ВалютнаяСумма" + ДтКт] = ТекущийПлатеж.УменьшениеДолгаКонтрагента;

			КонецЕсли;

				

			Проводка["Счет" + КоррДтКт] = ТекущийПлатеж.КоррСчет;

			

			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

				

				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);

				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);

				

				Если ТекущийПлатеж.КоррСчет.Валютный Тогда

					Проводка["Валюта" + КоррДтКт] 		 = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;

					Проводка["ВалютнаяСумма" + КоррДтКт] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						ТекущийПлатеж.УменьшениеДолгаКонтрагента,

						ТекущийПлатеж.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,

						ТекущийПлатеж.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВзаиморасчетов,

						ТекущийПлатеж.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВзаиморасчетов);

				КонецЕсли;

					

			Иначе

				

				Для каждого ВидСубконтоКоррСчета из ТекущийПлатеж.КоррСчет.ВидыСубконто цикл

					БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + КоррДтКт], Проводка["Субконто" + КоррДтКт], ВидСубконтоКоррСчета.НомерСтроки, СтруктураШапкиДокумента["Субконто" + КоррДтКт + ВидСубконтоКоррСчета.НомерСтроки]);

				КонецЦикла;

				

				Если ТекущийПлатеж.КоррСчет.Валютный Тогда

					Проводка["Валюта" + КоррДтКт] 		 = ТекущийПлатеж.ВалютаВзаиморасчетов;

					Проводка["ВалютнаяСумма" + КоррДтКт] = ТекущийПлатеж.УменьшениеДолгаКонтрагента;

				КонецЕсли;

				

			КонецЕсли;



			Проводка.Сумма = ТекущийПлатеж.СуммаСНДСРегл;

			

		КонецЕсли; 

		

	КонецЦикла;

	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 

		и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда

		

		БухгалтерскийУчетРасчетовСКонтрагентами.СопоставитьПроводкиКорректировкиДолгаСВспомогательнымСчетом(ПроводкиБУ);

		

	КонецЕсли; 
	
	Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыль
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности
		И СчетДт.НалоговыйУчет Тогда

		ЗаписыватьСуммуНУ = НЕ (СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);

		Для каждого Строка Из Движения.Хозрасчетный Цикл
			Если Строка.СчетДт = СчетДт Тогда
				Строка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Если ЗаписыватьСуммуНУ Тогда
					Строка.СуммаНУДт = Строка.Сумма;
				КонецЕсли;
			КонецЕсли;

			Если Строка.СчетКт = СчетДт Тогда
				Строка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Если ЗаписыватьСуммуНУ Тогда
					Строка.СуммаНУКт = Строка.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	ДвиженияПоСписаниюЗадолженнстиПоНалоговомуУчету(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	//Учет курсовых разниц

	Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
		ПроводкиБУ.Записать(Ложь);
		СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок);
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР,ПроводкиБУ,мВалютаРегламентированногоУчета,Истина);
		ПроводкиБУ.Записать(Ложь);
	КонецЕсли;

	
КонецПроцедуры


Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок) 
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС  Тогда
		Возврат;
	КонецЕсли; 
	
	НаборДвиженийПриобретений = Движения.ПриобретенияНалоговыйУчет; 	
	НаборДвиженийПродаж       = Движения.ПродажиНалоговыйУчет; 
	
	ВидЗадолженностиДебиторская  = Перечисления.ВидыЗадолженности.Дебиторская;
	ВидЗадолженностиКредиторская = Перечисления.ВидыЗадолженности.Кредиторская;
	
	Поставщик  = Перечисления.СтатусыКонтрагентов.Поставщик;
	Покупатель = Перечисления.СтатусыКонтрагентов.Покупатель;
	ПрочийКонтрагент = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	
	СобытияПродажи = Новый Соответствие();
	СобытияПродажи.Вставить("ВозвратОплаты", 	Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
	СобытияПродажи.Вставить("Оплата",   		Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
	СобытияПродажи.Вставить("Отгрузка",  		Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю);
	СобытияПродажи.Вставить("ВозвратОтгрузки",  Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
	
	СобытияПриобретения = Новый Соответствие();
	СобытияПриобретения.Вставить("ВозвратОплаты", 	Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
	СобытияПриобретения.Вставить("Оплата",   		Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику);
	СобытияПриобретения.Вставить("Отгрузка",		Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика);
	СобытияПриобретения.Вставить("ВозвратОтгрузки",	Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику);

	// разобъем таблицу ТаблицаПоСуммамДолга на две - соответственно для взаимоарсчетов по Поставщикам или Покупателям
	ТаблицаПриобретения = ТаблицаПоСуммамДолга.Скопировать();
	
	ТаблицаПриобретения.Колонки.Добавить("СуммаНДСПропорционально", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПриобретения.ЗагрузитьКолонку(ТаблицаПриобретения.ВыгрузитьКолонку("СуммаНДСПропорциональноКредит"),"СуммаНДСПропорционально");
	
	ТаблицаПриобретения.Колонки.Добавить("Событие");
	ТаблицаПриобретения.Колонки.Добавить("ДляХозяйственнойДеятельности");
	ТаблицаПриобретения.Колонки.Добавить("РасчетныйДокумент");
	ТаблицаПродажи = ТаблицаПриобретения.Скопировать();
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаПриобретения.Количество() Цикл
		
		Строка = ТаблицаПриобретения[Счетчик];
		
		КорректировкаДолгаМетодомВозврата = Ложь;
		Если (      СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
			   И НЕ СтруктураШапкиДокумента.НеПереноситьНОНК) 
		 ИЛИ  (      СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
			   И ЭтоОплата(Строка)) Тогда
		
			КорректировкаДолгаМетодомВозврата = Истина;	
		
		КонецЕсли;
		
		СоздаватьУказаннуюЗадолженность = Ложь;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
			СоздаватьУказаннуюЗадолженность = Истина;
		КонецЕсли;
		
		КлючСобытия = "";
		Если  Строка.ВидДоговора    = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			
			Если  СоздаватьУказаннуюЗадолженность
				И Строка.ТипКонтрагента = Поставщик Тогда
			
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "ВозвратОтгрузки";
				Иначе
					КлючСобытия = "Отгрузка";	
				КонецЕсли;				
			
			ИначеЕсли  КорректировкаДолгаМетодомВозврата
				И Строка.ТипКонтрагента = Поставщик Тогда
				
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "Отгрузка";
				Иначе
					КлючСобытия = "ВозвратОтгрузки";	
				КонецЕсли;
			
			ИначеЕсли НЕ КорректировкаДолгаМетодомВозврата
				       И Строка.ТипКонтрагента = Покупатель Тогда	
					   
				// долги закрываются по противоположному регистру - поставщиков
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "ВозвратОтгрузки";
				Иначе
					КлючСобытия = "Отгрузка";	
				КонецЕсли;
					   
			КонецЕсли;
			
		ИначеЕсли    Строка.ТипКонтрагента = Поставщик 
			    И НЕ Строка.ВидДоговора = ПрочийКонтрагент Тогда
			КлючСобытия = ПолучитьКлючСобытияПоНалоговомуУчету(Строка, СоздаватьУказаннуюЗадолженность, КорректировкаДолгаМетодомВозврата);
		КонецЕсли;	
		
		Если КлючСобытия = "" Тогда
			ТаблицаПриобретения.Удалить(Строка);
		Иначе
			Строка.Событие = СобытияПриобретения.Получить(КлючСобытия);
			Счетчик = Счетчик + 1;
		КонецЕсли; 
		
	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаПродажи.Количество() Цикл
		
		Строка = ТаблицаПродажи[Счетчик];
		
		КорректировкаДолгаМетодомВозврата = Ложь;
		Если (      СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
			   И НЕ СтруктураШапкиДокумента.НеПереноситьНОНК) 
		 ИЛИ  (      СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
			   И ЭтоОплата(Строка)) Тогда
		
			КорректировкаДолгаМетодомВозврата = Истина;	
		
		КонецЕсли;
		
		СоздаватьУказаннуюЗадолженность = Ложь;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
			СоздаватьУказаннуюЗадолженность = Истина;
		КонецЕсли;
		
		КлючСобытия = "";
		Если  Строка.ВидДоговора    = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			
			Если  СоздаватьУказаннуюЗадолженность
				И Строка.ТипКонтрагента = Покупатель Тогда
			
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "ВозвратОтгрузки";
				Иначе
					КлючСобытия = "Отгрузка";	
				КонецЕсли;				
			
			ИначеЕсли  КорректировкаДолгаМетодомВозврата
				И Строка.ТипКонтрагента = Покупатель Тогда
				
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "Отгрузка";
				Иначе
					КлючСобытия = "ВозвратОтгрузки";	
				КонецЕсли;
			
			ИначеЕсли НЕ КорректировкаДолгаМетодомВозврата
				       И Строка.ТипКонтрагента = Поставщик Тогда	
					   
				// долги закрываются по противоположному регистру - покупателей
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
				    КлючСобытия = "ВозвратОтгрузки";
				Иначе
					КлючСобытия = "Отгрузка";	
				КонецЕсли;
					   
			КонецЕсли;
			
		ИначеЕсли    Строка.ТипКонтрагента = Покупатель 
			    И НЕ Строка.ВидДоговора = ПрочийКонтрагент Тогда
			КлючСобытия = ПолучитьКлючСобытияПоНалоговомуУчету(Строка, СоздаватьУказаннуюЗадолженность, КорректировкаДолгаМетодомВозврата);
		КонецЕсли;	
		
		Если КлючСобытия = "" Тогда
			ТаблицаПродажи.Удалить(Строка);
		Иначе
			Строка.Событие = СобытияПродажи.Получить(КлючСобытия);
			Счетчик = Счетчик + 1;
		КонецЕсли;  
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		// Необходимо показать перенос долга на конрагента-получателя
		
		// разобъем таблицу ТаблицаПоСуммамДолга на две - соответственно для взаимоарсчетов по Поставщикам или Покупателям
		ТаблицаПриобретенияКопия = ТаблицаПоСуммамДолга.Скопировать();
		ТаблицаПриобретенияКопия.Колонки.Добавить("Событие");

		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, 				"ДоговорКонтрагента");
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.СделкаРегл,     					"СделкаРегл");
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента.Владелец,     "Контрагент");
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора, 	"ВидДоговора");
		
		Для каждого СтрокаТаблицы Из ТаблицаПриобретенияКопия Цикл
			
			Если СтрокаТаблицы.ТипКонтрагента = СтруктураШапкиДокумента.ТипКонтрагента Тогда
				Продолжить;	
			КонецЕсли;
			
			// если переносится оплата, например покупателя на поставщика, то новый долг будем считать не отгрузкой, а возвратом оплаты от поставщика
			СтрокаТаблицы.РасчетыВозврат = ?(СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат, Перечисления.РасчетыВозврат.Расчеты, Перечисления.РасчетыВозврат.Возврат);
			СтрокаТаблицы.ТипКонтрагента = СтруктураШапкиДокумента.ТипКонтрагента;
			
		КонецЦикла;
		
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНДС,					"СчетУчетаНДС");
		ТаблицаПриобретенияКопия.ЗаполнитьЗначения(Истина,													"ДобавленнаяСтрокаПереносаЗадолженности");
		
		ТаблицаПродажиКопия = ТаблицаПриобретенияКопия.Скопировать();
		
		// создадим указанные для переноса долги для нового контрагента
		Счетчик = 0;
		Пока Счетчик < ТаблицаПриобретенияКопия.Количество() Цикл
			
			Строка = ТаблицаПриобретенияКопия[Счетчик];
			
			КлючСобытия = "";
			Если  Строка.ВидДоговора    = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
				
				Если (Строка.ТипКонтрагента = Поставщик  И НЕ ЭтоОплата(Строка)) 
				 ИЛИ (Строка.ТипКонтрагента = Покупатель И    ЭтоОплата(Строка)) Тогда
					
					Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
						КлючСобытия = "ВозвратОтгрузки";
					Иначе
						КлючСобытия = "Отгрузка";	
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли    Строка.ТипКонтрагента = Поставщик 
					И НЕ Строка.ВидДоговора = ПрочийКонтрагент Тогда
				Если  ЭтоОплата(Строка) Тогда
					 Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						 КлючСобытия = "Оплата";
					 Иначе	
						 КлючСобытия = "ВозвратОплаты";
					 КонецЕсли;
				Иначе //отгрузка
					 Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						 КлючСобытия = "Отгрузка";	
					 Иначе	
						 КлючСобытия = "ВозвратОтгрузки";
					 КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			Если КлючСобытия = "" Тогда
				ТаблицаПриобретенияКопия.Удалить(Строка);
			Иначе
				Строка.Событие = СобытияПриобретения.Получить(КлючСобытия);
				Счетчик = Счетчик + 1;
			КонецЕсли;
								
		КонецЦикла;
		
		Счетчик = 0;
		Пока Счетчик < ТаблицаПродажиКопия.Количество() Цикл
			
			Строка = ТаблицаПродажиКопия[Счетчик];
			
			КлючСобытия = "";
			Если  Строка.ВидДоговора    = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
				
				Если (Строка.ТипКонтрагента = Покупатель И НЕ ЭтоОплата(Строка)) 
				 ИЛИ (Строка.ТипКонтрагента = Поставщик  И    ЭтоОплата(Строка)) Тогда
					
					Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
						КлючСобытия = "ВозвратОтгрузки";
					Иначе
						КлючСобытия = "Отгрузка";	
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли    Строка.ТипКонтрагента = Покупатель 
					И НЕ Строка.ВидДоговора = ПрочийКонтрагент Тогда
					
				Если  ЭтоОплата(Строка) Тогда
					 Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						 КлючСобытия = "Оплата";
					 Иначе	
						 КлючСобытия = "ВозвратОплаты";
					 КонецЕсли;
				Иначе //отгрузка
					 Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
						 КлючСобытия = "Отгрузка";	
					 Иначе	
						 КлючСобытия = "ВозвратОтгрузки";
					 КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
			Если КлючСобытия = "" Тогда
				ТаблицаПродажиКопия.Удалить(Строка);
			Иначе
				Строка.Событие = СобытияПродажи.Получить(КлючСобытия);
				Счетчик = Счетчик + 1;
			КонецЕсли;

		КонецЦикла;		
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретенияКопия, ТаблицаПриобретения);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродажиКопия, 	 ТаблицаПродажи);
		
	КонецЕсли;
	
	// Движения по регистру Продажи налоговый учет
	ТаблицаДвижений = НаборДвиженийПродаж.Выгрузить();
	ТаблицаДвижений.Очистить();
	ТаблицаПродажи.Колонки.СуммаВзаиморасчетовБУ.Имя = "СуммаВзаиморасчетов";
	ТаблицаПродажи.Колонки.СделкаРегл.Имя = "Сделка";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродажи, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		НаборДвиженийПродаж.мПериод = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПродаж.мТаблицаДвижений = ТаблицаДвижений;

		НаборДвиженийПродаж.ВыполнитьПриход();
		НаборДвиженийПродаж.Записать();
	КонецЕсли;
	
	// Движения по регистру Приобретения налоговый учет
	ТаблицаДвижений = НаборДвиженийПриобретений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ТаблицаПриобретения.Колонки.СуммаВзаиморасчетовБУ.Имя = "СуммаВзаиморасчетов";
	ТаблицаПриобретения.Колонки.СделкаРегл.Имя = "Сделка";
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретения, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		НаборДвиженийПриобретений.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПриобретений.мТаблицаДвижений = ТаблицаДвижений;

		НаборДвиженийПриобретений.ВыполнитьПриход();
		НаборДвиженийПриобретений.Записать();
	КонецЕсли;
	
	ПроводкиПоДоговорамСоСложнымНалоговымУчетом(СтруктураШапкиДокумента, ТаблицаПродажи, ТаблицаПриобретения);	
	
КонецПроцедуры

Процедура ПроводкиПоДоговорамСоСложнымНалоговымУчетом(СтруктураШапкиДокумента, ТаблицаПродажи, ТаблицаПриобретения)

	// для договоров со сложным нал. учетом
	СтрокиОтгрузок = Новый Массив;
	СтрокиОплат    = Новый Массив;
	
	ОиПНДСПродаж 		= Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	ОиПНДСПриобретений 	= Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	
	ЭтоСписаниеЗадолженности = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
	
	Для каждого Строка Из ТаблицаПродажи Цикл
		Если    Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю 
			ИЛИ Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя Тогда
			СтрокиОтгрузок.Добавить(Строка);
		Иначе
			СтрокиОплат.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для каждого Строка Из ТаблицаПриобретения Цикл
		Если    Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика
			ИЛИ Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику Тогда
			СтрокиОтгрузок.Добавить(Строка);
		Иначе
			СтрокиОплат.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;

	Для каждого Строка Из СтрокиОтгрузок Цикл
		
		// продажа или поступление	
		ЭтоПродажа = (    Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю
					  ИЛИ Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
					  
		ЭтоВозврат = (Строка.Событие     = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя
					  ИЛИ Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику);
					  
		ЭтоСписаниеЗадолженности = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
					  
		Если ЭтоПродажа Тогда
			Если ЭтоВозврат Тогда
			    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
			Иначе	
				СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
			КонецЕсли;
		Иначе	
			Если ЭтоВозврат Тогда
			    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
			Иначе	
				СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
			КонецЕсли;
		КонецЕсли;			  
		
		// проводки по регистру ОжидаемыйИПодтвержденныйНДС
		Если    СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
			
			ИЛИ (  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
			     И    СтруктураШапкиДокумента.НеПереноситьНОНК
				 И НЕ Строка.ДобавленнаяСтрокаПереносаЗадолженности)
				 
			ИЛИ (  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
			     И НЕ СтруктураШапкиДокумента.НеПереноситьНОНК) 
				 
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
		
			Если ЭтоПродажа Тогда
				Движение = ОиПНДСПродаж.Добавить();
				Движение.КодОперации 			= Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС;
			Иначе	
				Движение = ОиПНДСПриобретений.Добавить();
				Движение.КодОперации 			= Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Движение, Строка);
			
			Движение.ВидДвижения  			= ВидДвиженияНакопления.Приход;
			Движение.Период	 				= СтруктураШапкиДокумента.Дата;
			Движение.Организация 		  	= СтруктураШапкиДокумента.Организация;
			Движение.БазаНДС  				= Строка.СуммаВзаиморасчетов - Строка.СуммаНДСВал;
			Движение.СуммаНДС    			= Строка.СуммаНДСВал;
			Движение.СобытиеНДС 			= СобытиеНДС;
			Если НЕ ЭтоПродажа Тогда
				Движение.СуммаНДСПропорционально = Строка.СуммаНДСПропорциональноКредит;	
			КонецЕсли;
			
			Если  СтруктураШапкиДокумента.ЕстьНДС 
				И (    СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
				   ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности) Тогда
			
				СуммаПроводки = Строка.ПроводкиСуммаНДС;
				
				// для возвратов суммы отрицательные													
				Если ЭтоВозврат Тогда
					СуммаПроводки = - СуммаПроводки;
				КонецЕсли;													
				
				Если  СуммаПроводки <> 0 
					И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();

					Проводка.Период                                 = Дата;
					Проводка.Активность                             = Истина;
					Проводка.Организация                            = Организация;
					Проводка.Сумма                                  = СуммаПроводки;
					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности  Тогда
					    Проводка.Содержание                             = ?(ЭтоПродажа,"НДС: Изменение задолженности: обязательства", "НДС: Изменение задолженности: налоговый кредит") + ?(ЭтоВозврат, ", (сторно) отгрузка", ", отгрузка");
					Иначе//списание	
						Проводка.Содержание                             = ?(ЭтоПродажа,"НДС: Списание задолженности: обязательства", "НДС: Списание задолженности: налоговый кредит") + ?(ЭтоВозврат, ", (сторно) отгрузка", ", отгрузка");
					КонецЕсли;
					
					Проводка.НомерЖурнала                           = "";
					
					Если ЭтоПродажа Тогда
					    Если ЭтоСписаниеЗадолженности Тогда
							Проводка.СчетДт = СтруктураШапкиДокумента.СчетКт;	
						Иначе	
						    Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;	
						КонецЕсли;
					Иначе		
						Проводка.СчетДт = Строка.СчетУчетаНДС;		
					КонецЕсли;
					
					Если ЭтоПродажа Тогда
						Если ЭтоСписаниеЗадолженности Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтруктураШапкиДокумента.СубконтоКт1, Истина);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,СтруктураШапкиДокумента.СубконтоКт2);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,СтруктураШапкиДокумента.СубконтоКт3);
						Иначе	
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтруктураШапкиДокумента.СубконтоДт1, Истина);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,СтруктураШапкиДокумента.СубконтоДт2);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,СтруктураШапкиДокумента.СубконтоДт3);
						КонецЕсли;
					Иначе
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",	Строка.Контрагент, Истина);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",	Строка.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Сделки",		Строка.Сделка);
					КонецЕсли;
					
					Если ЭтоПродажа Тогда
						Проводка.СчетКт = Строка.СчетУчетаНДС;		
					Иначе		
					    Если ЭтоСписаниеЗадолженности Тогда
							Проводка.СчетКт = СтруктураШапкиДокумента.СчетДт;
							Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыль
								И СписыватьИзРезерваСомнительныхДолгов Тогда
								Проводка.СчетКт = СтруктураШапкиДокумента.СчетРезерваСомнительныхДолгов;	
							КонецЕсли;
						Иначе	
						    Проводка.СчетКт = СтруктураШапкиДокумента.СчетКт;	
						КонецЕсли;
					КонецЕсли;
					
					Если ЭтоПродажа Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",		Строка.Контрагент, Истина);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",		Строка.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Сделки",			Строка.Сделка);
					Иначе	
					    Если ЭтоСписаниеЗадолженности Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтруктураШапкиДокумента.СубконтоДт1, Истина);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СтруктураШапкиДокумента.СубконтоДт2);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СтруктураШапкиДокумента.СубконтоДт3);
						Иначе	
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтруктураШапкиДокумента.СубконтоКт1, Истина);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СтруктураШапкиДокумента.СубконтоКт2);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СтруктураШапкиДокумента.СубконтоКт3);
						КонецЕсли;
					КонецЕсли;
					
					Если  СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности
							И СтруктураШапкиДокумента.СчетДт.НалоговыйУчет = Истина Тогда
							
							ЗаписыватьСуммуНУ = НЕ (СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
							
							Если Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт Тогда
								Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
								Если ЗаписыватьСуммуНУ Тогда
									Проводка.СуммаНУДт = Проводка.Сумма;
								КонецЕсли;
							ИначеЕсли Проводка.СчетКт = СтруктураШапкиДокумента.СчетДт Тогда
								Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
								Если ЗаписыватьСуммуНУ Тогда
									Проводка.СуммаНУКт = Проводка.Сумма;
								КонецЕсли;
							КонецЕсли;
							
						ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
							    И ЭтоПродажа 
								И НЕ СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании Тогда
						
							ЗаписыватьСуммуНУ = НЕ (СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
							
							Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
							
							Если ЗаписыватьСуммуНУ Тогда
								Проводка.СуммаНУДт = Проводка.Сумма;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
						ИнвертироватьПроводку(Проводка);
					КонецЕсли;								
					
				КонецЕсли;		
				
			КонецЕсли;		
			
			Если  СтруктураШапкиДокумента.ЕстьНДС
				И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
				И НЕ Строка.ДобавленнаяСтрокаПереносаЗадолженности Тогда
			
				СуммаПроводки = Строка.ПроводкиСуммаНДС;
				
				// для возвратов суммы отрицательные													
				Если ЭтоВозврат Тогда
					СуммаПроводки = - СуммаПроводки;
				КонецЕсли;													
				
				Если  СуммаПроводки <> 0 
					И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка = Движения.Хозрасчетный.Добавить();

					Проводка.Период                                 = Дата;
					Проводка.Активность                             = Истина;
					Проводка.Организация                            = Организация;
					Проводка.Сумма                                  = СуммаПроводки;
					Проводка.Содержание                             = ?(ЭтоПродажа,"НДС: Перенос задолженности: обязательства", "НДС: Перенос задолженности: налоговый кредит") + ?(ЭтоВозврат, ", (сторно) отгрузка", ", отгрузка");
					Проводка.НомерЖурнала                           = "";
					
					Если ЭтоПродажа Тогда
						ПроводкаСчетДт		 = СтруктураШапкиДокумента.СчетУчетаНДС;
						КонтрагентДт		 = СтруктураШапкиДокумента.КонтрагентКредитор;
						ДоговорКонтрагентаДт = СтруктураШапкиДокумента.ДоговорКонтрагента;
						СделкаДт			 = СтруктураШапкиДокумента.СделкаРегл;
						
						ПроводкаСчетКт		 = Строка.СчетУчетаНДС;
						КонтрагентКт		 = Строка.Контрагент;
						ДоговорКонтрагентаКт = Строка.ДоговорКонтрагента;
						СделкаКт			 = Строка.Сделка;
					Иначе	
						ПроводкаСчетДт		 = Строка.СчетУчетаНДС;
						КонтрагентДт		 = Строка.Контрагент;
						ДоговорКонтрагентаДт = Строка.ДоговорКонтрагента;
						СделкаДт			 = Строка.Сделка;
						
						ПроводкаСчетКт		 = СтруктураШапкиДокумента.СчетУчетаНДС;
						КонтрагентКт		 = СтруктураШапкиДокумента.КонтрагентКредитор;
						ДоговорКонтрагентаКт = СтруктураШапкиДокумента.ДоговорКонтрагента;
						СделкаКт			 = СтруктураШапкиДокумента.СделкаРегл;
					КонецЕсли;
					
					Проводка.СчетДт = ПроводкаСчетДт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",					  КонтрагентДт, Истина);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",					  ДоговорКонтрагентаДт);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Сделки",						  СделкаДт);
					
					Проводка.СчетКт = ПроводкаСчетКт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",					 КонтрагентКт, Истина);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",					 ДоговорКонтрагентаКт);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Сделки",						 СделкаКт);
					
				КонецЕсли;		
				
			КонецЕсли;		

		КонецЕсли;

	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
       И СтруктураШапкиДокумента.НеПереноситьНОНК Тогда
       // для перенесенной задолженности, если это оплата, нужно сфорировать проводку
	   // по ожидаемому НДС как выписка налоговой накладной, т.к. последующая отгрузка
	   // сделает проводку по этому регистру в любом случае.
	   
	   Для каждого Строка Из СтрокиОплат Цикл
		   
		   Если НЕ Строка.ДобавленнаяСтрокаПереносаЗадолженности Тогда
				Продолжить;			   
		   КонецЕсли;
		   
			// продажа или поступление	
			ЭтоПродажа = (    Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем
						  ИЛИ Строка.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
						  
			ЭтоВозврат = (Строка.Событие     = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю
						  ИЛИ Строка.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
						  
			Если ЭтоПродажа Тогда
				Если ЭтоВозврат Тогда
				    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
				Иначе	
					СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
				КонецЕсли;
			Иначе	
				Если ЭтоВозврат Тогда
				    СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
				Иначе	
					СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
				КонецЕсли;
			КонецЕсли;			  
			
			// проводки по регистру ОжидаемыйИПодтвержденныйНДС
			Если ЭтоПродажа Тогда
				Движение = ОиПНДСПродаж.Добавить();
				Движение.КодОперации 			= Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ПодтвержденныйНДС;
			Иначе	
				Движение = ОиПНДСПриобретений.Добавить();
				Движение.КодОперации 			= Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ПодтвержденныйНДС;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Движение, Строка);
			
			Движение.ВидДвижения  			= ВидДвиженияНакопления.Расход;
			Движение.Период	 				= СтруктураШапкиДокумента.Дата;
			Движение.Организация 		  	= СтруктураШапкиДокумента.Организация;
			Движение.БазаНДС  				= Строка.СуммаВзаиморасчетов - Строка.СуммаНДСВал;
			Движение.СуммаНДС    			= Строка.СуммаНДСВал;
			Если НЕ ЭтоПродажа Тогда
				Движение.СуммаНДСПропорционально = Строка.СуммаНДСПропорциональноКредит;	
			КонецЕсли;
			Движение.СобытиеНДС 			= СобытиеНДС;
			
			Движение.Сделка 				= Строка.Сделка;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет тип "закрывающего/создающего" указанный долг события по налоговому учету
// Например, для долга вида "Отгрузка" закрывающим событием будет "Оплата", если не указан
// параметр ДелатьВозврат. Если параметр ДелатьВозврат = Истина, то данный долг будет
// закрыт как "Возврат отгрузки".
// Параметры:
//			Строка - Строка таблицы долга
//		    СоздаватьДолг - булево - указанный долг создается (Истина) или погашается (ЛОЖЬ)
//			ДелатьВозврат - булево - определяет метод закрытия долга
Функция ПолучитьКлючСобытияПоНалоговомуУчету(Строка, СоздаватьДолг = Ложь, ДелатьВозврат = Ложь)
	
	Если СоздаватьДолг Тогда
	
		Если ЭтоОплата(Строка) Тогда
			Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
				КлючСобытия = "Оплата";	 
			Иначе	
				КлючСобытия = "ВозвратОплаты";
			КонецЕсли;
		Иначе//отгрузка	
			Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
				КлючСобытия = "Отгрузка";
			Иначе	
				КлючСобытия = "ВозвратОтгрузки";
			КонецЕсли;
		КонецЕсли;
	
	Иначе
	
		Если ЭтоОплата(Строка) Тогда
			Если ДелатьВозврат Тогда
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
					КлючСобытия = "ВозвратОплаты";
				Иначе	
					КлючСобытия = "Оплата";
				КонецЕсли;
			Иначе
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
					КлючСобытия = "Отгрузка";	 
				Иначе	
					КлючСобытия = "ВозвратОтгрузки";
				КонецЕсли;
			КонецЕсли;
		Иначе//отгрузка	
			Если ДелатьВозврат Тогда
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
					КлючСобытия = "ВозвратОтгрузки";	
				Иначе	
					КлючСобытия = "Отгрузка";
				КонецЕсли;
			Иначе
				Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
					КлючСобытия = "Оплата";
				Иначе	
					КлючСобытия = "ВозвратОплаты";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КлючСобытия;	
	
КонецФункции


// Процедура формирует структуру шапки документа и дополнительных полей.

//

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.

	Перем ДеревоПолейЗапросаПоШапке;

	

	// Сформируем структуру реквизитов шапки документа

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);



	// Заголовок для сообщений об ошибках проведения.

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);



	// Заполним по шапке документа дерево параметров, нужных при проведении.

	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "СписыватьПартииПриПроведенииДокументов" , "СписыватьПартииПриПроведенииДокументов");

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");
	

	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация", "ДоговорОрганизация");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора", "ВидДоговора");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
		
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл", "ВедениеВзаиморасчетовРегл");
		
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом", "ВестиПоДокументамРасчетовСКонтрагентом");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");

	КонецЕсли; 

	

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа

	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	

	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

		Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаДокумента Тогда

			СтруктураШапкиДокумента.Вставить("КурсВзаиморасчетов",      СтруктураШапкиДокумента.КурсДокумента);

			СтруктураШапкиДокумента.Вставить("КратностьВзаиморасчетов", СтруктураШапкиДокумента.КратностьДокумента);

		Иначе

			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.Дата);
			СтруктураШапкиДокумента.Вставить("КурсВзаиморасчетов",      СтруктураКурса.Курс);

			СтруктураШапкиДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);

		КонецЕсли;

	КонецЕсли;

	
	Если  ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
		И (     СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
		СтруктураШапкиДокумента.Вставить("СделкаРегл", СтруктураШапкиДокумента.Сделка);	
	Иначе
    	СтруктураШапкиДокумента.Вставить("СделкаРегл", Неопределено);
	КонецЕсли;
	
	

	Если РежимВосстановленияПоследовательностейРасчетов Тогда

		СтруктураШапкиДокумента.Вставить("РежимВосстановленияПоследовательностейРасчетов", Истина);

	КонецЕсли;

	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
		
		// для общности алгоритмов перенесем данные по вспомогательному счету в счет Кт
		СтруктураШапкиДокумента.Вставить("СчетКт",      СтруктураШапкиДокумента.СчетДт);
		СтруктураШапкиДокумента.Вставить("СубконтоКт1", СтруктураШапкиДокумента.СубконтоДт1);
		СтруктураШапкиДокумента.Вставить("СубконтоКт2", СтруктураШапкиДокумента.СубконтоДт2);
		СтруктураШапкиДокумента.Вставить("СубконтоКт3", СтруктураШапкиДокумента.СубконтоДт3);
	
	КонецЕсли;	
	

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()



// Процедура формирует таблицы документа.

//

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,

	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность) Экспорт

	

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "СуммыДолга".

	СтруктураПолей = Новый Структура;

	

	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");

	СтруктураПолей.Вставить("ВестиПоДокументамРасчетовСКонтрагентом"  , "ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом");

	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");

	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");

	СтруктураПолей.Вставить("ВедениеВзаиморасчетовРегл"               , "ДоговорКонтрагента.ВедениеВзаиморасчетовРегл");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");

	СтруктураПолей.Вставить("ДоговорВид"                              , "ДоговорКонтрагента.ВидДоговора");

	СтруктураПолей.Вставить("ВидДоговора"                             , "ДоговорКонтрагента.ВидДоговора");

	СтруктураПолей.Вставить("КонтрагентДоговора"                      , "ДоговорКонтрагента.Владелец");

	СтруктураПолей.Вставить("Организация"                      		  , "ДоговорКонтрагента.Организация");



	СтруктураПолей.Вставить("СделкаВзаиморасчеты"                     , "Сделка");

	СтруктураПолей.Вставить("СделкаРасчеты"                           , "Сделка");

	СтруктураПолей.Вставить("СделкаРегл"	                          , "Сделка");
	СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом"           , "ДокументРасчетовСКонтрагентом");

	СтруктураПолей.Вставить("Сумма"                                   , "Сумма");

	СтруктураПолей.Вставить("СуммаВзаиморасчетовБУ"              	  , "Сумма");
	СтруктураПолей.Вставить("СуммаРегл"                               , "СуммаРегл");

	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");

	СтруктураПолей.Вставить("КурсВзаиморасчетов"                      , "КурсВзаиморасчетов");

	СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");

	

	ДополнитьСтруктуруПолейСуммДолгаРегл(СтруктураПолей);



	СтруктураСложныхПолей = Новый Структура;

	СтруктураСложныхПолей.Вставить("ДоговорКонтрагентаПредставление"            , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента)");

	СтруктураСложныхПолей.Вставить("СделкаПредставление"                        , "ПРЕДСТАВЛЕНИЕ(Док.Сделка)");

	СтруктураСложныхПолей.Вставить("ДокументРасчетовСКонтрагентомПредставление" , "ПРЕДСТАВЛЕНИЕ(Док.ДокументРасчетовСКонтрагентом)");

	СтруктураСложныхПолей.Вставить("ВалютаВзаиморасчетовПредставление"          , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента.ВалютаВзаиморасчетов)");

	

	РезультатЗапросаПоСуммамДолга = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей, ,СтруктураСложныхПолей);



	// Подготовим таблицы товаров для проведения.

	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);



	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();

	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();

	

	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();

	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();



	Счетчик = 0;

	Пока Счетчик < ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Количество() Цикл



		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Получить(Счетчик);

		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации

			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская

			Тогда

			ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);

		Иначе

			Счетчик = Счетчик + 1;

		КонецЕсли;



	КонецЦикла;



	Счетчик = 0;

	Пока Счетчик < ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Количество() Цикл



		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Получить(Счетчик);



		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации

			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская

			тогда

			ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);

		Иначе

			Счетчик = Счетчик + 1;

		КонецЕсли;



	КонецЦикла;

	

	Счетчик = 0;

	Пока Счетчик < ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Количество() Цикл



		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Получить(Счетчик);



		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 

			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская

			тогда

			ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);

		Иначе 

			Счетчик= Счетчик + 1;

		КонецЕсли;



	КонецЦикла;

	

	Счетчик = 0;

	Пока Счетчик < ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Количество() Цикл



		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Получить(Счетчик);

		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 

			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская

			Тогда

			ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);

		Иначе

			Счетчик = Счетчик + 1;

		КонецЕсли;



	КонецЦикла;



	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";

	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";

	

	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";

	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";

	

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";

	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";

	

	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";

	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";

	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
		
		// нужно изменить дебеторскую/кредиторскую задолженность для вида операции "изменение (фомрирование) задолженности"
		// так как для всех других видов операций (кроме еще ввода начальных остатков) указанная задолженность погашается,
		// а здесь наоборот, формируется.
		ВремТабл 						 					 = ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность;
		ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность = ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность;
		ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность  = ВремТабл;
		
		ВремТабл 						 					 = ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность;
		ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность = ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность;
		ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность  = ВремТабл;
	
	КонецЕсли;
	

КонецПроцедуры // СформироватьТаблицыДокумента()


// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация, , Заголовок);
		
		Если РежимВосстановленияПоследовательностейРасчетов Тогда

			СтруктураШапкиДокумента.Вставить("ОпределятьАвансыПриПроведенииДокумента", Истина);

		Иначе

			СтруктураШапкиДокумента.Вставить("ОпределятьАвансыПриПроведенииДокумента", мУчетнаяПолитикаБух.ОпределятьАвансыПриПроведенииДокумента);

		КонецЕсли;

		
	КонецЕсли;
	
	
	мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация, , Заголовок);
	
	Если НЕ Отказ Тогда
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаНУ.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаНУ.ЕстьНДС);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаДолга") Тогда

		ОрганизацияДебитор = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентДебитор);
		Если НЕ ЗначениеЗаполнено(ОрганизацияДебитор) Тогда

			ОрганизацияКредитор = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентКредитор);
			Если ЗначениеЗаполнено(ОрганизацияКредитор) Тогда

				Организация        = ОрганизацияКредитор;

				КонтрагентДебитор  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
				КонтрагентКредитор = Основание.КонтрагентДебитор;  

			Иначе

				Возврат;

			КонецЕсли;

		Иначе

			Организация = ОрганизацияДебитор;

			КонтрагентКредитор = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
			КонтрагентДебитор  = Основание.КонтрагентКредитор;  

		КонецЕсли;

		

		Для каждого СтрокаОснования Из Основание.СуммыДолга Цикл

			НоваяСтрока = СуммыДолга.Добавить();

			НоваяСтрока.ВидЗадолженности        = ?(СтрокаОснования.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, Перечисления.ВидыЗадолженности.Кредиторская, Перечисления.ВидыЗадолженности.Дебиторская);			

			

			ТекКонтрагент =  ?(НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, КонтрагентДебитор, КонтрагентКредитор);

			

			Запрос = Новый Запрос;

			Запрос.УстановитьПараметр("Контрагент",   ТекКонтрагент);

			Запрос.УстановитьПараметр("Организация", Организация);

				

			Запрос.Текст = "

			|ВЫБРАТЬ 

			|	Ссылка 

			|ИЗ Справочник.ДоговорыКонтрагентов

			|ГДЕ Справочник.ДоговорыКонтрагентов.Владелец = &Контрагент

			|	 И Справочник.ДоговорыКонтрагентов.Организация = &Организация";

				

			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда

				НоваяСтрока.ДоговорКонтрагента = Выборка.Ссылка;

			Иначе 

				ОбщегоНазначения.СообщитьОбОшибке("У контрагента " + ТекКонтрагент + " отсутствует договор на поставку с организацией " + Организация + ".");

			КонецЕсли;

			

			НоваяСтрока.КурсВзаиморасчетов      = СтрокаОснования.КурсВзаиморасчетов;

			НоваяСтрока.КратностьВзаиморасчетов = СтрокаОснования.КратностьВзаиморасчетов;

			НоваяСтрока.Сумма                   = СтрокаОснования.Сумма;
			НоваяСтрока.СуммаРегл               = СтрокаОснования.СуммаРегл;

			

		КонецЦикла;

			

	КонецЕсли;

	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда

		Возврат;

	КонецЕсли;

	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
		Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
			СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Строка Из СуммыДолга Цикл
		
		Если ОтражатьВБухгалтерскомУчете и ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
			// поправим налоговые реквизииты
			Если Строка.ЗаТару Тогда
			
				Строка.СтавкаНДС 		   = Перечисления.СтавкиНДС.НеНДС;
				Строка.СуммаНДС  	       = 0;
				Строка.СчетУчетаНДС 	   = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				Строка.Амортизируется 	   = ЛОЖЬ;
			
			КонецЕсли; 
			
			Если НЕ Строка.НетНалоговойНакладной И Строка.ВзаиморасчетыЗакрыты Тогда
				Строка.ВзаиморасчетыЗакрыты = Ложь;	
			КонецЕсли;
			
		Иначе
			Строка.ВзаиморасчетыЗакрыты = Ложь;	
		КонецЕсли; 
		
	КонецЦикла; 
	 

	мУдалятьДвижения = НЕ ЭтоНовый() И НЕ РежимВосстановленияПоследовательностейРасчетов;

	

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,

	      ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,

	      ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность;

	
	Если мУдалятьДвижения Тогда

		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

	ИначеЕсли РежимВосстановленияПоследовательностейРасчетов Тогда

		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
			//проведение документа в этом случае не требуется	
		    Возврат;
		КонецЕсли;
		
		УдалитьДвиженияДляВосстановленияПоследовательностейРасчетов(Отказ);
		

	КонецЕсли;

	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);



	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	
	// Проверим правильность заполнения шапки документа

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,

	                            ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,

	                            ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);

	// Проверить заполнение ТЧ 

	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок);

	

	// Движения по документу

	Если Не Отказ Тогда



		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 

	                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,

	                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность,

							Отказ, Заголовок);



	КонецЕсли; 


КонецПроцедуры	// ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)

	

	Если ОбменДанными.Загрузка  Тогда

		Возврат;

	КонецЕсли;



КонецПроцедуры


Процедура РассчитатьПропорциональныйНДС(Строка = Неопределено) Экспорт
	
	ПересчитыватьВсеСтроки = (Строка = Неопределено);
	
	Если мКоэффициентПропорциональногоНДС = Неопределено Тогда
		
		мКоэффициентПропорциональногоНДС = НалоговыйУчетПовтИсп.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата);
	
	КонецЕсли;
	
	Если   (НЕ мТекущаяСхемаНалогообложения.НДС = Истина)
		ИЛИ НЕ ОтражатьВБухгалтерскомУчете Тогда
		Если ПересчитыватьВсеСтроки Тогда
			Для каждого СтрокаРасшифровки Из СуммыДолга Цикл
				СтрокаРасшифровки.СуммаНДСПропорциональноКредит = 0;
			КонецЦикла;
		Иначе	
			Строка.СуммаНДСПропорциональноКредит = 0;
		КонецЕсли;
		возврат;
	КонецЕсли;
	
	Если ПересчитыватьВсеСтроки Тогда
		Для каждого СтрокаРасшифровки Из СуммыДолга Цикл
			Если НЕ СтрокаРасшифровки.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			    СтрокаРасшифровки.СуммаНДСПропорциональноКредит = 0;
			Иначе	
				СтрокаРасшифровки.СуммаНДСПропорциональноКредит = СтрокаРасшифровки.СуммаНДС * мКоэффициентПропорциональногоНДС;
			КонецЕсли;
		КонецЦикла;
	Иначе	
		Если НЕ Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			Строка.СуммаНДСПропорциональноКредит = 0;
		Иначе	
			Строка.СуммаНДСПропорциональноКредит = Строка.СуммаНДС * мКоэффициентПропорциональногоНДС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
   
Процедура ИнвертироватьПроводку(Проводка)
	
	// запоминаем данные по Дт
	ДанныеПоДт = Новый Структура();
	ДанныеПоДт.Вставить("СчетДт", 					Проводка.СчетДт);
	
	ДанныеПоДт.Вставить("ВалютаДт", 				Проводка.ВалютаДт);
	ДанныеПоДт.Вставить("НалоговоеНазначениеДт", 	Проводка.НалоговоеНазначениеДт);
	
	ДанныеПоДт.Вставить("ВалютнаяСуммаДт", 			Проводка.ВалютнаяСуммаДт);
	ДанныеПоДт.Вставить("КоличествоДт", 			Проводка.КоличествоДт);
	ДанныеПоДт.Вставить("СуммаНУДт", 				Проводка.СуммаНУДт);
	
	МаксКоличествоСубконто = -1;
	Для Каждого СтрокаСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
		МаксКоличествоСубконто = Проводка.СчетДт.ВидыСубконто.Индекс(СтрокаСубконто);
		
		ДанныеПоДт.Вставить("ВидСубконтоДт" + МаксКоличествоСубконто, СтрокаСубконто.ВидСубконто);
		ДанныеПоДт.Вставить("СубконтоДт"    + МаксКоличествоСубконто, Проводка.СубконтоДт[СтрокаСубконто.ВидСубконто]);
	КонецЦикла;

	// переносим данные из Кт в Дт
	Проводка.СчетДт 				= Проводка.СчетКт;
	
	Проводка.ВалютаДт 				= Проводка.ВалютаКт;
	Проводка.НалоговоеНазначениеДт  = Проводка.НалоговоеНазначениеКт;
	
	Проводка.ВалютнаяСуммаДт 		= - Проводка.ВалютнаяСуммаКт;
	Проводка.КоличествоДт 			= - Проводка.КоличествоКт;
	Проводка.СуммаНУДт				= - Проводка.СуммаНУКт;
	
	Проводка.СубконтоДт.Очистить();
	Для Каждого СтрокаСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
		ТекНомер = Проводка.СчетКт.ВидыСубконто.Индекс(СтрокаСубконто);
		Проводка.СубконтоДт[СтрокаСубконто.ВидСубконто] = Проводка.СубконтоКт[СтрокаСубконто.ВидСубконто];
	КонецЦикла;
	
	// восстанавливаем данные по ДТ в Кт
	Проводка.СчетКт 				= ДанныеПоДт.СчетДт;
	
	Проводка.ВалютаКт 				= ДанныеПоДт.ВалютаДт;
	Проводка.НалоговоеНазначениеКт  = ДанныеПоДт.НалоговоеНазначениеДт;
	
	Проводка.ВалютнаяСуммаКт 		= - ДанныеПоДт.ВалютнаяСуммаДт;
	Проводка.КоличествоКт 			= - ДанныеПоДт.КоличествоДт;
	Проводка.СуммаНУКт				= - ДанныеПоДт.СуммаНУДт;
	
	Проводка.СубконтоКт.Очистить();
	Для ТекНомер = 0 ПО МаксКоличествоСубконто Цикл
		Проводка.СубконтоКт[ДанныеПоДт["ВидСубконтоДт" + ТекНомер]] = ДанныеПоДт["СубконтоДт" + ТекНомер];
	КонецЦикла;
	
	// конвертируем балансовые суммы
	Проводка.Сумма = -Проводка.Сумма;
	
КонецПроцедуры

Процедура ДвиженияПоСписаниюЗадолженнстиПоНалоговомуУчету(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок) 
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		Возврат;
	КонецЕсли; 
	
	Если  НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого Строка Из ТаблицаПоСуммамДолга Цикл
		
		// списывается дебиторская задолженность за внесенный и необслуженный аванс поставщику
		// по НУ признается в сумме списания из резерва
		// имеется временная разница по начислению расходов - в БУ в момент формирования резерва
		// по НУ - в момент признания задолженности безнадежной (списания)
		Если  Строка.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская
			И Строка.ТипКонтрагента   = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
			
			Если НЕ СтруктураШапкиДокумента.СписыватьИзРезерваСомнительныхДолгов Тогда
				// в НУ такое списание не признается
				Продолжить;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.НачислятьРезервСомнительныхДолгов Тогда
				// покажем в БУ начисление резерва сомнительной задолженности
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = Строка.СуммаСНДСРегл - ?(СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании, Строка.ПроводкиСуммаНДС, 0);
				Проводка.Содержание                             = НСтр("ru = 'Начисление резерва сомнительной задолженности'; uk = 'Начисление резерву сумнінвої заборгованності'");
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоДт3);
				
				// не признается затратой в НУ
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = 0;
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетРезерваСомнительныхДолгов;
			
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				// Проводка по затратам в НУ - только по налоговому учету, не нехоз. деятельность
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru = 'Списание на затраты по НУ дебеторской задолженности поставщика'; uk = 'Списання на витрати по ПО дебеторської заборгованості постачальника'");
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоДт3);
				
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = Строка.СуммаСНДСРегл - ?(СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании, Строка.ПроводкиСуммаНДС, 0);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
			КонецЕсли;
			

		КонецЕсли;	
		
		// списывается дебиторская задолженность за отгруженный и неоплаченный покупателем товар
		// по НУ признается в сумме списания из резерва
		// имеется временная разница по начислению расходов - в БУ в момент формирования резерва
		// по НУ - в момент признания задолженности безнадежной (списания)
		// также (фактически еще до списания - при признании сомнительной, но мы реализуем в момент списания)
		// необходимо отсторнировать доход и себестоимость по отгрузке. Доход нам известен,
		// а себестоимость нужно вручную указать в ТЧ.
		Если  Строка.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская
			И Строка.ТипКонтрагента   = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
			
			// сторно доходов
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				
				// Проводка по только по НУ
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru = 'Сторно доходов при признании задолжености сомнительной (списании)'; uk = 'Сторно доходів при визнанні заборгованності сумнівною (списанні)'");
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
				Проводка.СчетКт = СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СчетДоходов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоДоходов1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоДоходов2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоДоходов3);
				
				Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУКт = - (Строка.СуммаСНДСРегл - Строка.ПроводкиСуммаНДС);
				
			КонецЕсли;
			
			
			// сторно себестоимости 
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				
				// Проводка по только по НУ
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru = 'Сторно себестоимости реализации при признании задолжености сомнительной (списании)'; uk = 'Сторно собівартості реалізації при визнанні заборгованності сумнівною (списанні)'");
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СчетСебестоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости3);
				
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = - (Строка.СуммаСебестоимостиНУ);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
					
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.СписыватьИзРезерваСомнительныхДолгов Тогда
				// в НУ такое списание не признается
				Продолжить;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.НачислятьРезервСомнительныхДолгов Тогда
				// покажем в БУ начисление резерва сомнительной задолженности
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = Строка.СуммаСНДСРегл - ?(СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании, Строка.ПроводкиСуммаНДС, 0);
				Проводка.Содержание                             = НСтр("ru = 'Начисление резерва сомнительной задолженности'; uk = 'Начисление резерву сумнінвої заборгованності'");
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоДт3);
				
				// не признается в НУ
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = 0;
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетРезерваСомнительныхДолгов;
			
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				// Проводка по затратам в НУ - только по налоговому учету, не нехоз. деятельность
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru = 'Списание на затраты по НУ дебеторской задолженности поставщика'; uk = 'Списання на витрати по ПО дебеторської заборгованості постачальника'");
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.СубконтоДт3);
				
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = Строка.СуммаСНДСРегл - ?(СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании, Строка.ПроводкиСуммаНДС, 0);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
					
			КонецЕсли;
			

		КонецЕсли;	
		
		// списывается кредиторская задолженность полученный и неоплаченный товар от поставщика
		// в НУ доход признается одновременно с БУ. Проводки сформированы выше. 
		// также необходимо отсторнировать себестомиость реализации данного товара только по НУ
		Если  Строка.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
			И Строка.ТипКонтрагента   = Перечисления.СтатусыКонтрагентов.Поставщик Тогда

			// отсторнируем показанные доходы на сумму НДС
			Если  СтруктураШапкиДокумента.НеОтноситьНаВРСуммуНДСПриСписании 
				И Строка.ПроводкиСуммаНДС > 0 Тогда
			
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru = 'Сторно расходов по НУ на сумму НДС'; uk = 'Сторно доходів по ПО на суму ПДВ'");
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтруктураШапкиДокумента.СубконтоКт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СтруктураШапкиДокумента.СубконтоКт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СтруктураШапкиДокумента.СубконтоКт3);
				
				Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУКт = - Строка.ПроводкиСуммаНДС;
				
			КонецЕсли;
			
			// сторно себестоимости 
			Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				
				// Проводка по только по НУ
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период                                 = Дата;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = 0; //только по НУ
				Проводка.Содержание                             = НСтр("ru = 'Сторно себестоимости реализации при признании задолжености сомнительной (списании)'; uk = 'Сторно собівартості реалізації при визнанні заборгованності сумнівною (списанні)'");
				Проводка.НомерЖурнала                           = "";
				
				Проводка.СчетДт = СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СчетСебестоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтруктураШапкиДокумента.ПараметрыСписанияСебестоимостиНУ.СубконтоСебестоимости3);
				
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = - (Строка.СуммаСНДСРегл - Строка.ПроводкиСуммаНДС);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		// списывается кредиторская задолженность за полученный и необслуженный аванс покупателя
		// в НУ доход признается одновременно с БУ. Проводки сформированы выше. дополнительных проводок 
		// не требуется
		Если  Строка.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
			И Строка.ТипКонтрагента   = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета 		= глЗначениеПеременной("ВалютаРегламентированногоУчета");
мДанныеВалютыРегламентированногоУчета 	= МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
мТекущаяСхемаНалогообложения = НалоговыйУчет.ПолучитьСхемуНалогообложения(Дата,Организация);

РежимВосстановленияПоследовательностейРасчетов = Ложь;