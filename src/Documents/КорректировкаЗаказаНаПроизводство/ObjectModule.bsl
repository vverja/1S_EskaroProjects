Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мСпособЗакрытияПотребностейЗаказовНаПроизводство Экспорт;
Перем мИспользоватьПотребностиЗаказовНаПроизводство Экспорт;

// Возвращает имя первой табличной части в которой есть строки
//
Функция ПолучитьПервуюЗаполненнуюТабЧасть(Источник, ТабЧасти)
	
	ИмяДокумента = Источник.Метаданные().Имя;
	
    Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Приоритет = 0;
	Для Каждого ТабЧасть Из ТабЧасти Цикл
		
		ТекстУсловий = "";
		Если ТипЗнч(ТабЧасть.Значение) = "Структура" Тогда
			Для Каждого Условие Из ТабЧасть.Значение Цикл
				
				ТекстУсловий = ТекстУсловий + ?(ТекстУсловий = "", "", Символы.ПС + "И")
				+ " ТабЧасть." + Условие.Ключ + " = &"+Условие.Ключ;
				
				Запрос.УстановитьПараметр(Условие.Ключ, Условие.Значение);
			КонецЦикла;
		КонецЕсли;		

		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","",Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС)+"
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	"""+ТабЧасть.Ключ+""" КАК ИмяТЧ,
		|	"+Приоритет+" КАК Приоритет
		|ИЗ
		|	Документ."+ИмяДокумента+"."+ТабЧасть.Ключ+" КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка = &Источник
		|" + ТекстУсловий;
		
		Приоритет = Приоритет + 1;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса +"
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Выборка.ИмяТЧ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
Процедура ВывестиТабличнуюЧастьВМакет(ТабДокумент, ЗапросТовары, ВыводитьКоды, Колонка, Макет)
    ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");


	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ВыборкаСтрокТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			ОбщегоНазначения.Сообщение("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары[Колонка];
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);


КонецПроцедуры
	

// Функция формирует табличный документ с печатной формой заказа,
// разработанного методистами (с учетом внесенных корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьЗаказа(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Подразделение КАК Подразделение,
	|	Организация КАК Руководители,
	|	Исполнитель,
	|	Организация КАК Поставщик
	|ИЗ
	|	Документ.КорректировкаЗаказаНаПроизводство КАК ДокЗаказ
	|
	|ГДЕ
	|	ДокЗаказ.Ссылка = &ТекущийДокумент";

	РезЗапросаШапка = Запрос.Выполнить();
	Шапка = РезЗапросаШапка.Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаПроизводство_Заказ";
	Макет = ПолучитьМакет("Заказ");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подразделение");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПодразделения = СокрЛП(Шапка.Подразделение.Наименование);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодовШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанныхШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");


    //ПРОДУКЦИЯ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	СУММА(ВложенныйЗапрос.Количество)               КАК Количество,
	|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) 			КАК НомерСтроки,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры      КАК Характеристика,
	|	NULL                                            КАК Серия,
	|	ВЫБОР
	|		КОГДА НЕ ВложенныйЗапрос.Номенклатура.Услуга ТОГДА 0
	|		КОГДА ВложенныйЗапрос.Номенклатура.Услуга    ТОГДА 1
	|	КОНЕЦ КАК УСЛУГА
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|		ДокЗаказ.Номенклатура               КАК Номенклатура,
	|		ДокЗаказ.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|		ДокЗаказ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ДокЗаказ.Количество                 КАК Количество,
	|		ДокЗаказ.НомерСтроки 				КАК НомерСтроки
	|	ИЗ
	|		Документ.КорректировкаЗаказаНаПроизводство.Продукция КАК ДокЗаказ
	|
	|	ГДЕ
	|		ДокЗаказ.Ссылка = &ТекущийДокумент
	|
	|
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Услуга,
	|	Номенклатура
	|";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

    ВсегоНаименований = 0;
	Если ЗапросТовары.Количество()>0 Тогда
        ВсегоНаименований = ЗапросТовары.Количество();
		Область = Макет.ПолучитьОбласть("ЗаголовокРаздела");
		Область.Параметры.ТекстРаздела = "Продукция (услуги)";
		ТабДокумент.Вывести(Область);
		
		ТабДокумент.Вывести(ОбластьНомераШапка);
		Если ВыводитьКоды Тогда
			ОбластьКодовШапка.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодовШапка);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанныхШапка);

        ВывестиТабличнуюЧастьВМакет(ТабДокумент, ЗапросТовары, ВыводитьКоды, Колонка, Макет);
	КонецЕсли;
	
	// МАТЕРИАЛЫ
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	СУММА(ВложенныйЗапрос.Количество)               КАК Количество,
	|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) 			КАК НомерСтроки,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры      КАК Характеристика,
	|	NULL                                            КАК Серия
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|		ДокЗаказ.Номенклатура               КАК Номенклатура,
	|		ДокЗаказ.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|		ДокЗаказ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ДокЗаказ.Количество                 КАК Количество,
	|		ДокЗаказ.НомерСтроки 				КАК НомерСтроки
	|	ИЗ
	|		Документ.КорректировкаЗаказаНаПроизводство.Материалы КАК ДокЗаказ
	|
	|	ГДЕ
	|		ДокЗаказ.Ссылка = &ТекущийДокумент
	|
	|
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Номенклатура
	|";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
    Если ЗапросТовары.Количество()>0 Тогда

		Область = Макет.ПолучитьОбласть("ЗаголовокРаздела");
		Область.Параметры.ТекстРаздела = "Материалы";
		ТабДокумент.Вывести(Область);
		
		ТабДокумент.Вывести(ОбластьНомераШапка);
		Если ВыводитьКоды Тогда
			ОбластьКодовШапка.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодовШапка);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанныхШапка);

        ВывестиТабличнуюЧастьВМакет(ТабДокумент, ЗапросТовары, ВыводитьКоды, Колонка, Макет);

	КонецЕсли;
	Если ВсегоНаименований>0 Тогда
		// Вывести количество наименований
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований продукции: " + ВсегоНаименований;
		ТабДокумент.Вывести(ОбластьМакета);
    КонецЕсли;
	
    //Подвал
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ФИОИсполнитель = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.Исполнитель);
	ОбластьМакета.Параметры.ФИОИсполнителя = ФИОИсполнитель;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьЗаказа()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Заказ" тогда
		ТабДокумент = ПечатьЗаказа(ИмяМакета);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ""), Ссылка);

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Заказ","Корректировка заказа на производство");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет таб.часть материалы
// по документу ТребованиеНакладная
//
Процедура ЗаполнитьТабЧастьМатериалыПоТребованиеНакладная(ТребованиеНакладная, ДопПараметры = Неопределено)

	Если НЕ ЗначениеЗаполнено(ЗаказНаПроизводство)
		ИЛИ НЕ ЗначениеЗаполнено(ТребованиеНакладная) Тогда
		
		Возврат;
	КонецЕсли; 
	
	Знак = 1;
	ИсключаяСвойства = "Количество,Спецификация,ВидВоспроизводства,Подразделение,Продукция,ХарактеристикаПродукции";
	
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("Знак") Тогда
			Знак = ДопПараметры.Знак;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТабЧастьМатериалы.Номенклатура КАК Номенклатура,
	               |	ТабЧастьМатериалы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТабЧастьМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	РегПотребности.Продукция КАК Продукция,
	               |	РегПотребности.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	               |	РегПотребности.ВидВоспроизводства КАК ВидВоспроизводства,
	               |	РегПотребности.Спецификация КАК Спецификация,
	               |	РегПотребности.Подразделение КАК Подразделение,
	               |	МИНИМУМ(ТабЧастьМатериалы.Коэффициент) КАК Коэффициент,
	               |	МИНИМУМ(ТабЧастьМатериалы.Количество) КАК Количество,
	               |	СУММА(ЕСТЬNULL(РегПотребности.КоличествоОстаток, 0) * ТабЧастьМатериалы.Коэффициент / ТабЧастьМатериалы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоПотребность
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТабЧастьМатериалы.Номенклатура КАК Номенклатура,
	               |		ТабЧастьМатериалы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |		ТабЧастьМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		МИНИМУМ(ТабЧастьМатериалы.Коэффициент) КАК Коэффициент,
	               |		СУММА(ТабЧастьМатериалы.Количество) КАК Количество
	               |	ИЗ
	               |		Документ.ТребованиеНакладная.Материалы КАК ТабЧастьМатериалы
	               |	ГДЕ
	               |		ТабЧастьМатериалы.Ссылка = &ТребованиеНакладная
	               |		И ТабЧастьМатериалы.ЗаказРезерв = &ЗаказНаПроизводство
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ТабЧастьМатериалы.Номенклатура,
	               |		ТабЧастьМатериалы.ХарактеристикаНоменклатуры,
	               |		ТабЧастьМатериалы.ЕдиницаИзмерения) КАК ТабЧастьМатериалы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПотребностиЗаказовНаПроизводство.Остатки(&ДатаОстатков, ЗаказНаПроизводство = &ЗаказНаПроизводство) КАК РегПотребности
	               |		ПО РегПотребности.Номенклатура = ТабЧастьМатериалы.Номенклатура
	               |			И РегПотребности.ХарактеристикаНоменклатуры = ТабЧастьМатериалы.ХарактеристикаНоменклатуры
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТабЧастьМатериалы.Номенклатура,
	               |	ТабЧастьМатериалы.ХарактеристикаНоменклатуры,
	               |	ТабЧастьМатериалы.ЕдиницаИзмерения,
	               |	РегПотребности.Продукция,
	               |	РегПотребности.ХарактеристикаПродукции,
	               |	РегПотребности.ВидВоспроизводства,
	               |	РегПотребности.Спецификация,
	               |	РегПотребности.Подразделение
	               |ИТОГИ
	               |	МИНИМУМ(Коэффициент),
	               |	МИНИМУМ(Количество)
	               |ПО
	               |	Номенклатура,
				   |	ЕдиницаИзмерения,
	               |	ХарактеристикаНоменклатуры";
		
    Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Запрос.УстановитьПараметр("ТребованиеНакладная", ТребованиеНакладная);
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	                                  
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	
	ОбходПоНоменклатуре = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоНоменклатуре.Следующий() Цикл
		ОбходПоЕдиницеИзмерения = ОбходПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоЕдиницеИзмерения.Следующий() Цикл
			ОбходПоХарактеристике = ОбходПоЕдиницеИзмерения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоХарактеристике.Следующий() Цикл
				Количество = ОбходПоХарактеристике.Количество;
				
				ДетальныеЗаписи = ОбходПоХарактеристике.Выбрать();
				Пока ДетальныеЗаписи.Следующий() Цикл
					НоваяСтрока = Материалы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ДетальныеЗаписи);
					Если ДетальныеЗаписи.КоличествоПотребность < Количество Тогда
						НоваяСтрока.Количество = Знак * ДетальныеЗаписи.КоличествоПотребность;
					Иначе
						НоваяСтрока.Количество = Знак * Количество;
					КонецЕсли; 
					
					// Рассчитать реквизиты табличной части.
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);			
					Количество = Количество - Знак * НоваяСтрока.Количество;
				КонецЦикла;
				
				Если Количество <> 0 Тогда
					//Оставшееся количество добавим без заполнения реквизитов потребности
					НоваяСтрока = Материалы.Добавить();			
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ОбходПоХарактеристике,,ИсключаяСвойства);
					НоваяСтрока.Количество = Знак * Количество;
					
					// Рассчитать реквизиты табличной части.
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабЧастьМатериалыПоТребованиеНакладная()

// Процедура заполняет таб.часть материалы
// по документам ОтчетПроизводстваЗаСмену и АктОбОказанииПроизводственныхУслуг
//
Процедура ЗаполнитьТабЧастьМатериалыПоДокументуОснованию(ДопПараметры = Неопределено)

	Если НЕ ЗначениеЗаполнено(ДокументОснование)
		ИЛИ НЕ ЗначениеЗаполнено(ЗаказНаПроизводство) Тогда
		
		Возврат;
	КонецЕсли;
	
	ТипОснования = ТипЗнч(ДокументОснование);
	ИмяТаблицы = "";
	ИмяТаблицыПродукция = "";
	ИмяТЧ = "";
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("ИмяТаблицыПродукция") Тогда
			ИмяТаблицыПродукция = ДопПараметры.ИмяТаблицыПродукция;
		КонецЕсли; 
		Если ДопПараметры.Свойство("ИмяТаблицы") Тогда
			ИмяТаблицы = ДопПараметры.ИмяТаблицы;
		КонецЕсли; 
		Если ДопПараметры.Свойство("ИмяТЧ") Тогда
			ИмяТЧ = ДопПараметры.ИмяТЧ;
		КонецЕсли; 
	КонецЕсли; 
	
	Если (ИмяТаблицыПродукция = "" ИЛИ ИмяТаблицы = "") Тогда
		Если ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда 
			
			ИмяТаблицы = "АктОбОказанииПроизводственныхУслуг";
			ИмяТаблицыПродукция = "Услуги";
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда	
			ИмяТаблицы = "ОтчетПроизводстваЗаСмену";
			ИмяТаблицыПродукция = "Продукция"; 
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТЧ = "" Тогда
		ТабЧасти = Новый Структура ();
		ТабЧасти.Вставить("РаспределениеМатериалов",Новый Структура ("ЗаказВыпуска",ЗаказНаПроизводство));
		ТабЧасти.Вставить("Материалы",Новый Структура ("ЗаказВыпуска",ЗаказНаПроизводство));
		ТабЧасти.Вставить(ИмяТаблицыПродукция,Новый Структура ("ЗаказВыпуска",ЗаказНаПроизводство));
		
		ИмяТЧ = ПолучитьПервуюЗаполненнуюТабЧасть(ДокументОснование, ТабЧасти);
	КонецЕсли; 
	
	Если ИмяТаблицы <> "АктОбОказанииПроизводственныхУслуг"
		И ИмяТаблицы <> "ОтчетПроизводстваЗаСмену"
		ИЛИ ПустаяСтрока(ИмяТЧ) Тогда
		
		Возврат;
	КонецЕсли; 
	
	ТекстУсловияРегПотребности = "";
	
	// Если в табличной части основания есть продукция, то будем брать ее
	// И в соединении будем ее использовать
	ПОЛЕ_Продукция = "";

	// От вида документа и табличной части зависит условие в виртуальной таблице
	// регистра потребностей.	
	Если ИмяТаблицы = "АктОбОказанииПроизводственныхУслуг" Тогда 
		Если ИмяТЧ = ИмяТаблицыПродукция Тогда
			ТекстУсловияРегПотребности = "(Продукция, Спецификация) В
			               |				(ВЫБРАТЬ
			               |						ТабЧасть.Номенклатура КАК Продукция
			               |					,	ТабЧасть.Спецификация КАК Спецификация
			               |				ИЗ
			               |					Документ." + ИмяТаблицы + "." + ИмяТЧ + " КАК ТабЧасть
			               |				ГДЕ
			               |					ТабЧасть.Ссылка = &ДокументОснование
						   |					И ТабЧасть.ЗаказВыпуска = &ЗаказНаПроизводство)"; 
		ИначеЕсли ИмяТЧ = "Материалы" Тогда			   
			ТекстУсловияРегПотребности = "(Номенклатура, ХарактеристикаНоменклатуры, Спецификация) В
			               |				(ВЫБРАТЬ
			               |						ТабЧасть.Номенклатура КАК Номенклатура
			               |					,	ТабЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			               |					,	ТабЧасть.Спецификация КАК Спецификация
			               |				ИЗ
			               |					Документ." + ИмяТаблицы + "." + ИмяТЧ + " КАК ТабЧасть
			               |				ГДЕ
			               |					ТабЧасть.Ссылка = &ДокументОснование
						   |					И ТабЧасть.ЗаказВыпуска = &ЗаказНаПроизводство)"; 
		ИначеЕсли ИмяТЧ = "РаспределениеМатериалов" Тогда			   
			ПОЛЕ_Продукция = "ТабЧастьМатериалы.Продукция";
			ТекстУсловияРегПотребности = "(Продукция, Номенклатура, ХарактеристикаНоменклатуры, Спецификация) В
			               |				(ВЫБРАТЬ
			               |						ТабЧасть.Продукция КАК Продукция
			               |					,	ТабЧасть.Номенклатура КАК Номенклатура
			               |					,	ТабЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			               |					,	ТабЧасть.Спецификация КАК Спецификация
			               |				ИЗ
			               |					Документ." + ИмяТаблицы + "." + ИмяТЧ + " КАК ТабЧасть
			               |				ГДЕ
			               |					ТабЧасть.Ссылка = &ДокументОснование
						   |					И ТабЧасть.ЗаказВыпуска = &ЗаказНаПроизводство)"; 
		КонецЕсли; 			   
	ИначеЕсли ИмяТаблицы = "ОтчетПроизводстваЗаСмену" Тогда	
		Если ИмяТЧ = ИмяТаблицыПродукция Тогда
			ТекстУсловияРегПотребности = "(Продукция, ХарактеристикаПродукции, Спецификация) В
			               |				(ВЫБРАТЬ
			               |						ТабЧасть.Номенклатура КАК Продукция
			               |					,	ТабЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции
			               |					,	ТабЧасть.Спецификация КАК Спецификация
			               |				ИЗ
			               |					Документ." + ИмяТаблицы + "." + ИмяТЧ + " КАК ТабЧасть
			               |				ГДЕ
			               |					ТабЧасть.Ссылка = &ДокументОснование
						   |					И ТабЧасть.ЗаказВыпуска = &ЗаказНаПроизводство)"; 
		ИначеЕсли ИмяТЧ = "Материалы" Тогда			   
			ТекстУсловияРегПотребности = "(Номенклатура, ХарактеристикаНоменклатуры, Спецификация) В
			               |				(ВЫБРАТЬ
			               |						ТабЧасть.Номенклатура КАК Номенклатура
			               |					,	ТабЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			               |					,	ТабЧасть.Спецификация КАК Спецификация
			               |				ИЗ
			               |					Документ." + ИмяТаблицы + "." + ИмяТЧ + " КАК ТабЧасть
			               |				ГДЕ
			               |					ТабЧасть.Ссылка = &ДокументОснование
						   |					И ТабЧасть.ЗаказВыпуска = &ЗаказНаПроизводство)"; 
		ИначеЕсли ИмяТЧ = "РаспределениеМатериалов" Тогда			   
			ПОЛЕ_Продукция = "ТабЧастьМатериалы.Продукция";
			ТекстУсловияРегПотребности = "(Продукция, ХарактеристикаПродукции, Номенклатура, ХарактеристикаНоменклатуры, Спецификация) В
			               |				(ВЫБРАТЬ
			               |						ТабЧасть.Продукция КАК Продукция
			               |					,	ТабЧасть.ХарактеристикаПродукции КАК ХарактеристикаПродукции
			               |					,	ТабЧасть.Номенклатура КАК Номенклатура
			               |					,	ТабЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			               |					,	ТабЧасть.Спецификация КАК Спецификация
			               |				ИЗ
			               |					Документ." + ИмяТаблицы + "." + ИмяТЧ + " КАК ТабЧасть
			               |				ГДЕ
			               |					ТабЧасть.Ссылка = &ДокументОснование
						   |					И ТабЧасть.ЗаказВыпуска = &ЗаказНаПроизводство)"; 
		КонецЕсли; 			   
	КонецЕсли;
	
	ТекстУсловияРегПотребности = СтрЗаменить(ТекстУсловияРегПотребности,"%ТабЧасть%",ИмяТЧ);
	
	ОтрицательноеКоличество = Ложь;
	
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("ОтрицательноеКоличество") Тогда
			ОтрицательноеКоличество = ДопПараметры.ОтрицательноеКоличество;
		КонецЕсли;
	КонецЕсли;
	
    Запрос = Новый Запрос;
	Если ИмяТЧ = ИмяТаблицыПродукция Тогда
		// Продукция или Услуги
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	РегПотребности.Номенклатура КАК Номенклатура,
					   |	РегПотребности.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
					   |	РегПотребности.ВидВоспроизводства КАК ВидВоспроизводства,
					   |	РегПотребности.Спецификация КАК Спецификация,
					   |	РегПотребности.Подразделение КАК Подразделение,
					   |	РегПотребности.КоличествоОстаток КАК Количество,
					   |	РегПотребности.КоличествоОстаток КАК КоличествоПотребность,
					   |	РегПотребности.Продукция КАК Продукция,
					   |	РегПотребности.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
					   |	РегПотребности.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
					   |ИЗ
					   |	РегистрНакопления.ПотребностиЗаказовНаПроизводство.Остатки(
					   |			&ДатаОстатков,
					   |			ЗаказНаПроизводство = &ЗаказНаПроизводство И " + ТекстУсловияРегПотребности + ") КАК РегПотребности
	                   |ГДЕ РегПотребности.КоличествоОстаток > 0";
	
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	РегПотребности.Номенклатура КАК Номенклатура,
					   |	РегПотребности.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
					   |	РегПотребности.ВидВоспроизводства КАК ВидВоспроизводства,
					   |	РегПотребности.Спецификация КАК Спецификация,
					   |	РегПотребности.Подразделение КАК Подразделение,
					   |	ЕСТЬNULL(ТабЧастьМатериалы.Количество, 0) КАК Количество,
					   |	РегПотребности.КоличествоОстаток КАК КоличествоПотребность,
					   |	РегПотребности.Продукция КАК Продукция,
					   |	РегПотребности.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
					   |	РегПотребности.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
					   |ИЗ
					   |	РегистрНакопления.ПотребностиЗаказовНаПроизводство.Остатки(
					   |			&ДатаОстатков,
					   |			ЗаказНаПроизводство = &ЗаказНаПроизводство И " + ТекстУсловияРегПотребности + ") КАК РегПотребности
					   |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					   |		ТабЧастьМатериалы.Номенклатура КАК Номенклатура,
					   |		ТабЧастьМатериалы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
					   |		ТабЧастьМатериалы.Спецификация КАК Спецификация,
					   |		" + ?(ПОЛЕ_Продукция = "", "", ПОЛЕ_Продукция + " КАК Продукция,") + "
					   |		СУММА(ТабЧастьМатериалы.Количество * ТабЧастьМатериалы.Коэффициент / ТабЧастьМатериалы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК Количество
					   |	ИЗ
					   |		Документ." + ИмяТаблицы+ "." + ИмяТЧ + " КАК ТабЧастьМатериалы
					   |	ГДЕ
					   |		ТабЧастьМатериалы.Ссылка = &ДокументОснование
					   |		И ТабЧастьМатериалы.ЗаказВыпуска = &ЗаказНаПроизводство
					   |	
					   |	СГРУППИРОВАТЬ ПО
					   |		ТабЧастьМатериалы.Номенклатура
					   |	,	ТабЧастьМатериалы.ХарактеристикаНоменклатуры
					   |	,	ТабЧастьМатериалы.Спецификация
					   |   " + ?(ПОЛЕ_Продукция = "", "", ",	" + ПОЛЕ_Продукция) + "
					   |		) КАК ТабЧастьМатериалы
					   |	ПО РегПотребности.Номенклатура = ТабЧастьМатериалы.Номенклатура
					   |		И РегПотребности.ХарактеристикаНоменклатуры = ТабЧастьМатериалы.ХарактеристикаНоменклатуры
					   |    	И РегПотребности.Спецификация = ТабЧастьМатериалы.Спецификация
					   |        " + ?(ПОЛЕ_Продукция = "", "", "И РегПотребности.Продукция = ТабЧастьМатериалы.Продукция") + "
					   |ГДЕ КоличествоОстаток > 0 И Количество > 0";
						   
	КонецЕсли;				   
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДетальныеЗаписи);
		
		НоваяСтрока.Количество = Мин(ДетальныеЗаписи.Количество, ДетальныеЗаписи.КоличествоПотребность);
		
		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабЧастьМатериалыПоДокументуОснованию()

// Процедура заполняет таб.часть материалы существующими резервами и размещением
//
Процедура ЗаполнитьТабЧастьМатериалыСуществующимРазмещением(СтруктПараметров, МассивКУдалению)
	ПустоеРазмещение = ОбщегоНазначения.МассивПустыхЗначений(ЭтотОбъект.Метаданные().ТабличныеЧасти.Материалы.Реквизиты.Размещение.Тип);

    ТекстЗапроса_УжеРазмещено = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокКорректировка.Номенклатура КАК Номенклатура,
		|	ДокКорректировка.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокКорректировка.НомерСтроки - 1 КАК НомерСтрокиДокумента,
		|	ДокКорректировка.Размещение КАК Размещение,
		|	ДокКорректировка.Количество КАК ДокКоличество
		|ИЗ
		|	Документ.КорректировкаЗаказаНаПроизводство.Материалы КАК ДокКорректировка
		|ГДЕ
		|	ДокКорректировка.Ссылка = &ДокСсылка
		|	И ДокКорректировка.Количество < 0
		|	И ДокКорректировка.Размещение НЕ В(&ПустоеРазмещение)
		|";
    Запрос = Новый Запрос;

	Запрос.Текст = ТекстЗапроса_УжеРазмещено;
	Запрос.УстановитьПараметр("ДокЗаказ",             ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("ДокСсылка",            Ссылка);
	Запрос.УстановитьПараметр("ПустоеРазмещение",     ПустоеРазмещение);
	ТабУжеРазмещено = Запрос.Выполнить().Выгрузить();

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокКорректировка.Номенклатура               КАК Номенклатура,
		|	ДокКорректировка.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	1                                КАК Источник,
		|	1                                КАК Порядок,
		|	ДокКорректировка.НомерСтроки - 1 КАК НомерСтрокиДокумента,
		|	NULL                             КАК Размещение,
		|	ДокКорректировка.Количество      КАК ДокКоличество,
		|	0                                КАК КолРазмещение
		|ИЗ
		|	Документ.КорректировкаЗаказаНаПроизводство.Материалы КАК ДокКорректировка
		|ГДЕ
		|	ДокКорректировка.Ссылка = &ДокСсылка
		|	И ДокКорректировка.Количество < 0
		|	И ДокКорректировка.Размещение В (&ПустоеРазмещение)
		|";
	
	Если СтруктПараметров.Авторезервирование Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РегРезерв.Номенклатура               КАК Номенклатура,
		|	РегРезерв.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	2                             КАК Источник,
		|	&ПорядокРезерва               КАК Порядок,
		|	0                             КАК НомерСтрокиДокумента,
		|	РегРезерв.Склад               КАК Размещение,
		|	0                             КАК ДокКоличество,
		|	- РегРезерв.КоличествоОстаток КАК КолРазмещение
		|ИЗ
		|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва = &ДокЗаказ) КАК РегРезерв
		|ГДЕ
		|   РегРезерв.КоличествоОстаток > 0
		|";
	КонецЕсли;
	Если СтруктПараметров.Авторазмещение Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РегРазмещение.Номенклатура               КАК Номенклатура,
		|	РегРазмещение.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	3                                 КАК Источник,
		|	&ПорядокРазмещения                КАК Порядок,
		|	0                                 КАК НомерСтрокиДокумента,
		|	РегРазмещение.ЗаказПоставщику     КАК Размещение,
		|	0                                 КАК ДокКоличество,
		|	- РегРазмещение.КоличествоОстаток КАК КолРазмещение
		|ИЗ
		|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ДокЗаказ) КАК РегРазмещение
		|ГДЕ
		|   РегРазмещение.КоличествоОстаток > 0
		|";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|
		|ИТОГИ
		|	СУММА(ДокКоличество),
		|	СУММА(КолРазмещение)
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокЗаказ",  ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("ДокСсылка", Ссылка);
	ПустоеРазмещение = ОбщегоНазначения.МассивПустыхЗначений(Метаданные().ТабличныеЧасти.Материалы.Реквизиты.Размещение.Тип);
	Запрос.УстановитьПараметр("ПустоеРазмещение", ПустоеРазмещение);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Если СтруктПараметров.СтратегияАвторезервированияПоЗаказам = Перечисления.СтратегииАвторезервированияНоменклатуры.СначалаВЗаказахПоставщикамПотомНаСкладах Тогда
		Запрос.УстановитьПараметр("ПорядокРезерва",    3);
		Запрос.УстановитьПараметр("ПорядокРазмещения", 2);
	Иначе
		Запрос.УстановитьПараметр("ПорядокРезерва",    2);
		Запрос.УстановитьПараметр("ПорядокРазмещения", 3);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	ОбходНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходНоменклатура.Следующий() Цикл
		ОбходХарактеристика = ОбходНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходХарактеристика.Следующий() Цикл
		
			Если ОбходХарактеристика.ДокКоличество = 0 Тогда
				Продолжить; // Нет такой номенклатуры/характеристики в документе
			КонецЕсли;
			
			МассивСтрок.Очистить();
			
			Обход = ОбходХарактеристика.Выбрать();
			Пока Обход.Следующий() Цикл
				Если Обход.Источник = 1 Тогда // Это исходная строка документа
					МассивСтрок.Добавить(Материалы[Обход.НомерСтрокиДокумента]);
				Иначе
					// Нашли резерв/размещение
					// ВАЖНО количество отрицательное!!! Это надо учитывать при сравнении.
					КолРазмещение = Обход.КолРазмещение;
					Пока МассивСтрок.Количество() > 0 И КолРазмещение < 0 Цикл
						
						струОтбор = новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Размещение", Обход.Номенклатура,Обход.ХарактеристикаНоменклатуры, Обход.Размещение);
						СтрокиУжеРазмещено = ТабУжеРазмещено.НайтиСтроки(струОтбор);
						КоличествоУжеРазмещено = 0;
						Для каждого Строка из СтрокиУжеРазмещено цикл
							КоличествоУжеРазмещено = КоличествоУжеРазмещено+Строка.ДокКоличество;
						КонецЦикла;
						КолРазмещение = КолРазмещение - КоличествоУжеРазмещено;
						Если КолРазмещение>=0 Тогда Продолжить; КонецЕсли;
						
						НоваяСтрока = Материалы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивСтрок[0]);
						
						МожноРазместить = Макс(КолРазмещение, МассивСтрок[0].Количество);
						
						НоваяСтрока.Количество = МожноРазместить;
						НоваяСтрока.Размещение = Обход.Размещение;
						
						МассивСтрок[0].Количество = МассивСтрок[0].Количество - МожноРазместить;
						КолРазмещение = КолРазмещение - МожноРазместить;
						
						Если МассивСтрок[0].Количество = 0 Тогда
							МассивКУдалению.Добавить(МассивСтрок[0]);
							МассивСтрок.Удалить(0);
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла; // Обход по Характеристикам номенклатуры
	КонецЦикла; // Обход по Номенклатуре
	
КонецПроцедуры // ЗаполнитьТабЧастьМатериалыСуществующимРазмещением()

// Процедура заполняет таб.часть "Материалы" при нажатии кнопки "Заполнить и провести"
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(СтруктПараметров) Экспорт

	Если НЕ (СтруктПараметров.Авторезервирование ИЛИ СтруктПараметров.Авторазмещение) Тогда
		Возврат;
	КонецЕсли;
	
	МассивКУдалению = Новый Массив;
	
    ЗаполнитьТабЧастьМатериалыСуществующимРазмещением(СтруктПараметров, МассивКУдалению);
    ЗаказыНаПроизводствоИПереработку.ЗаполнитьТабЧастьМатериалыВозможнымРазмещением(ЭтотОбъект, Материалы, СтруктПараметров, МассивКУдалению);
    
	Для Каждого К Из МассивКУдалению Цикл
		Материалы.Удалить(К);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	Возврат РезультатЗапросаПоТоварам.Выгрузить();

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ЗаказНаПроизводство, Организация, Подразделение");
					
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
     Если ЗначениеЗаполнено(ЗаказНаПроизводство) И НЕ ЗаказНаПроизводство.Проведен Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нельзя корректировать непроведенный документ!", Отказ, Заголовок);
	КонецЕсли;
    	//Проверка подразделения
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Подразделение)
		И СтруктураШапкиДокумента.Подразделение.ВидПодразделения <> Перечисления.ВидыПодразделений.ОсновноеПроизводство
		И СтруктураШапкиДокумента.Подразделение.ВидПодразделения <> Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("В шапке документа должно быть указано подразделение с видом ""Основное производство"" или ""Вспомогательное производство""!", Отказ, Заголовок);
	КонецЕсли;

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПродукция(ТаблицаПоПродукции, ТаблицаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Продукция";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураОбязательныхПолей, Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Продукция", ТаблицаПоПродукции, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", ТаблицаПоМатериалам, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Материалы", ТаблицаПоМатериалам, Отказ, Заголовок);
	
	//Если не все заполнено, обход строк табличной части можно не делать
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоМатериалам Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Подразделение)
		   И СтрокаТЧ.Подразделение.ВидПодразделения<>Перечисления.ВидыПодразделений.ОсновноеПроизводство
		   И СтрокаТЧ.Подразделение.ВидПодразделения<>Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
		   
		    ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " табличной части ""Материалы"" должно быть указано подразделение с видом ""Основное производство"" или ""Вспомогательное производство""!", Отказ, Заголовок);
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаЗаказаНаПроизводство.ЗакрытиеПотребностейЗаказаНаПроизводство И СтрокаТЧ.Количество<0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " табличной части ""Материалы"" указано отрицательное количество. " + Символы.ПС + "Нельзя указывать отрицательное количество при виде операции ""Закрытие потребностей заказа на производство"".", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти()

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоМатериалам, ИмяКолонкиРазмещение="Размещение", ТипЗначенияРазмещения)

	ТаблицаПоТоварамРазмещение = ТаблицаПоМатериалам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиРазмещение]) 
		 или не ТипЗначенияРазмещения.СодержитТип(ТипЗнч(СтрокаТаблицы[ИмяКолонкиРазмещение])) Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРазмещение.Колонки[ИмяКолонкиРазмещение].Имя = "ЗаказПоставщику";
			
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // СоздатьТаблицуРазмещенияЗаказов()

// Функция удаляет из исходной таблицы строки не требующие резервирования
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоМатериалам)

	ТаблицаПоТоварамРезервирование = ТаблицаПоМатериалам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
	
	Возврат ТаблицаПоТоварамРезервирование;
	
КонецФункции // СоздатьТаблицуРезервированияПодЗаказ()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоПродукции, ТаблицаПоМатериалам,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции,
							ТаблицаПоМатериалам, Отказ, Заголовок);
							  
КонецПроцедуры // ДвиженияПоРегистрам()

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоПродукции, ТаблицаПоМатериалам,
	                          Отказ, Заголовок);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаЗаказаНаПроизводство.КорректировкаЗаказаНаПроизводство Тогда
		// ПРОДУКЦИЯ ПО РЕГИСТРУ ЗаказыНаПроизводство.
			
		НаборДвижений = Движения.ЗаказыНаПроизводство;
				
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоПродукции", ТаблицаПоПродукции);
						
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказНаПроизводство", СтруктураШапкиДокумента.ЗаказНаПроизводство);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",   Подразделение, "ТаблицаПоПродукции");
						
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		
		// По регистру РазмещениеЗаказовПокупателей
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
		ТаблицаПоПродукцииРазмещение = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоПродукции, "Заказ",новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство,ДокументСсылка.ЗаказПокупателя,ДокументСсылка.ВнутреннийЗаказ"));
		//для данной ТЧ имена колонок другие нежели в остальных случаях - надо поменять
		ТаблицаПоПродукцииРазмещение.Колонки.ЗаказПоставщику.Имя = "ЗаказПокупателя";
    
		Если ТаблицаПоМатериалам.Количество() > 0 Тогда
			ТаблицаПоМатериаламРазмещение = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоМатериалам,,новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику,ДокументСсылка.ВнутреннийЗаказ,ДокументСсылка.ЗаказНаПроизводство"));
			
			Если ТаблицаПоМатериаламРазмещение.Количество() > 0 Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				СтруктТаблицДокумента = Новый Структура;
			КонецЕсли;
		Иначе	
			ТаблицаПоМатериаламРазмещение = новый ТаблицаЗначений;
		КонецЕсли;
			
		Если не Отказ и (ТаблицаПоПродукцииРазмещение.Количество()>0 или ТаблицаПоМатериаламРазмещение.Количество() > 0)
			Тогда
			СтруктТаблицДокумента = Новый Структура;
			Если ТаблицаПоПродукцииРазмещение.Количество()>0 Тогда
				СтруктТаблицДокумента.Вставить("ТаблицаПоПродукции", ТаблицаПоПродукцииРазмещение);
			КонецЕсли;
			Если ТаблицаПоМатериаламРазмещение.Количество()>0 Тогда
				СтруктТаблицДокумента.Вставить("ТаблицаПоМатериалам", ТаблицаПоМатериаламРазмещение);
			КонецЕсли;
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			Если ТаблицаПоПродукцииРазмещение.Количество()>0 Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", СтруктураШапкиДокумента.ЗаказНаПроизводство, "ТаблицаПоПродукции");
			КонецЕсли;
			Если ТаблицаПоМатериаламРазмещение.Количество()>0 Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", СтруктураШапкиДокумента.ЗаказНаПроизводство, "ТаблицаПоМатериалам");
			КонецЕсли;
				
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар);

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;
		
	
		Если ТаблицаПоМатериалам.Количество() > 0 Тогда
			
			ТаблицаПоТоварамРезервирование = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоМатериалам);
			
			Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
				
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
				
				// Контроль остатков товара
				Если Материалы.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоМатериалам", ТаблицаПоТоварамРезервирование);
						
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", СтруктураШапкиДокумента.ЗаказНаПроизводство);
			
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;					
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// ДВИЖЕНИЯ ПО РЕГИСТРУ ПотребностиЗаказовНаПроизводство
	Если мИспользоватьПотребностиЗаказовНаПроизводство Тогда
		
		НаборДвижений = Движения.ПотребностиЗаказовНаПроизводство;
		
		// Контроль остатков производится неоперативно, а на дату документа
		ДопПараметры = Новый Структура;
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаЗаказаНаПроизводство.КорректировкаЗаказаНаПроизводство Тогда
			ДопПараметры.Вставить("КоличествоСМинусом",  Истина);
		КонецЕсли;
		
		ДопПараметры.Вставить("ЗаказНаПроизводство", ЗаказНаПроизводство);
		
		ФлагОтказа = Ложь;
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Материалы", ДопПараметры, Отказ, Заголовок, РежимПроведения);
		 
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоМатериалам);
							
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказНаПроизводство", ЗаказНаПроизводство);
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаЗаказаНаПроизводство.КорректировкаЗаказаНаПроизводство Тогда
			ВидДвижения = ВидДвиженияНакопления.Приход;
		Иначе
			ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвижения, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
		
		
КонецПроцедуры // ДвиженияПоРегистрамУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	ДокументОснование     = Основание;
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		// Заполнение шапки.
		ВидОперации = Перечисления.ВидыОперацийКорректировкаЗаказаНаПроизводство.КорректировкаЗаказаНаПроизводство;
		Подразделение         = Основание.Подразделение;
		Организация           = Основание.Организация;
		ЗаказНаПроизводство   = Основание;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ОтрицательноеКоличество", Истина);
		
		ЗаказыНаПроизводствоИПереработку.ЗаполнитьТабличнуюЧастьПродукцияПоОстаткамЗаказовНаПроизводство(Продукция, Основание, Дата, ДопПараметры);
		ЗаказыНаПроизводствоИПереработку.ЗаполнитьТабличнуюЧастьМатериалыПоОстаткам(Материалы, Основание, ДопПараметры);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ТребованиеНакладная") Тогда

		Если НЕ мИспользоватьПотребностиЗаказовНаПроизводство
			ИЛИ мСпособЗакрытияПотребностейЗаказовНаПроизводство <> Перечисления.СпособыЗакрытияПотребностейЗаказовНаПроизводство.Явно Тогда
			
			Возврат;
		КонецЕсли; 
		ВидОперации = Перечисления.ВидыОперацийКорректировкаЗаказаНаПроизводство.ЗакрытиеПотребностейЗаказаНаПроизводство;

		// Заполнение шапки.
		Подразделение         = Основание.Подразделение;
		Организация           = Основание.Организация;
		
		//Получим заказ из табличной части основания
		СтруктТабЧастей = Новый Структура;
		СтруктТабЧастей.Вставить("Материалы", "ЗаказРезерв");
		СтруктПараметры = Новый Структура;
		СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
		СтруктПараметры.Вставить("Основание", Основание);
		
		ТипыВозможныхЗаказов = Новый СписокЗначений;
		ТипыВозможныхЗаказов.Добавить("Документ.ЗаказНаПроизводство");
		СтруктПараметры.Вставить("ТипыВозможныхЗаказов", ТипыВозможныхЗаказов);
		
		ЗаказНаПроизводство = УправлениеЗаказами.ВыбратьЗаказИзДокументаОснования(СтруктПараметры);
		
		//Заполним табличную часть по основанию
		ЗаполнитьТабЧастьМатериалыПоТребованиеНакладная(ДокументОснование, ДопПараметры);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") 
		ИЛИ ТипОснования = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		Если НЕ мИспользоватьПотребностиЗаказовНаПроизводство
			ИЛИ мСпособЗакрытияПотребностейЗаказовНаПроизводство <> Перечисления.СпособыЗакрытияПотребностейЗаказовНаПроизводство.Явно Тогда
			
			Возврат;
		КонецЕсли; 
		ВидОперации = Перечисления.ВидыОперацийКорректировкаЗаказаНаПроизводство.ЗакрытиеПотребностейЗаказаНаПроизводство;

		Подразделение         = Основание.Подразделение;
		Организация           = Основание.Организация;
		
		//Получим заказ из табличной части основания
		Если ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда 
			ИмяТаблицыПродукция = "Услуги"; 
			ИмяТаблицы = "АктОбОказанииПроизводственныхУслуг"; 
		Иначе
			ИмяТаблицыПродукция = "Продукция"; 
			ИмяТаблицы = "ОтчетПроизводстваЗаСмену"; 
		КонецЕсли;
		
		ТабЧасти = Новый Структура ();
		ТабЧасти.Вставить("РаспределениеМатериалов","");
		ТабЧасти.Вставить("Материалы","");
		ТабЧасти.Вставить(ИмяТаблицыПродукция,"");
		
		ИмяТЧ = ПолучитьПервуюЗаполненнуюТабЧасть(ДокументОснование, ТабЧасти);
		Если ПустаяСтрока(ИмяТЧ) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктТабЧастей = Новый Структура;
		СтруктТабЧастей.Вставить(ИмяТЧ, "ЗаказВыпуска");
		СтруктПараметры = Новый Структура;
		СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
		СтруктПараметры.Вставить("Основание", Основание);
		                              
		ТипыВозможныхЗаказов = Новый СписокЗначений;
		ТипыВозможныхЗаказов.Добавить("Документ.ЗаказНаПроизводство");
		СтруктПараметры.Вставить("ТипыВозможныхЗаказов", ТипыВозможныхЗаказов);
		
		ЗаказНаПроизводство = УправлениеЗаказами.ВыбратьЗаказИзДокументаОснования(СтруктПараметры);
		
		//Заполним табличную часть по основанию
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяТЧ", ИмяТЧ);
		ДопПараметры.Вставить("ИмяТаблицы", ИмяТаблицы);
		ДопПараметры.Вставить("ИмяТаблицыПродукция", ИмяТаблицыПродукция);
		
		ЗаполнитьТабЧастьМатериалыПоДокументуОснованию(ДопПараметры);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		Если НЕ мИспользоватьПотребностиЗаказовНаПроизводство
			ИЛИ мСпособЗакрытияПотребностейЗаказовНаПроизводство <> Перечисления.СпособыЗакрытияПотребностейЗаказовНаПроизводство.Явно Тогда
			
			Возврат;
		КонецЕсли; 
		Если НЕ (Основание.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции
			И Основание.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка) Тогда
			Возврат;
		КонецЕсли;
		Если НЕ (ЗначениеЗаполнено(Основание.ЗаказВыпуска) И ТипЗнч(Основание.ЗаказВыпуска)=Тип("ДокументСсылка.ЗаказНаПроизводство")) Тогда
			Возврат;
		КонецЕсли;
		
		ВидОперации = Перечисления.ВидыОперацийКорректировкаЗаказаНаПроизводство.ЗакрытиеПотребностейЗаказаНаПроизводство;

		Подразделение         = Основание.Подразделение;
		Организация           = Основание.Организация;
	    ЗаказНаПроизводство   = Основание.ЗаказВыпуска;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	   |	РегПотребности.Номенклатура КАК Номенклатура,
	   |	РегПотребности.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	   |	РегПотребности.ВидВоспроизводства КАК ВидВоспроизводства,
	   |	РегПотребности.Спецификация КАК Спецификация,
	   |	РегПотребности.Подразделение КАК Подразделение,
	   |	ЕСТЬNULL(ТабЧастьМатериалы.Количество, 0) КАК Количество,
	   |	РегПотребности.КоличествоОстаток КАК КоличествоПотребность,
	   |	РегПотребности.Продукция КАК Продукция,
	   |	РегПотребности.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	   |	РегПотребности.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	   |	РегПотребности.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
	   |ИЗ
	   |	РегистрНакопления.ПотребностиЗаказовНаПроизводство.Остатки(
	   |			&ДатаОстатков,
	   |			ЗаказНаПроизводство = &ЗаказНаПроизводство И 
	   |			(Номенклатура, ХарактеристикаНоменклатуры) В
	   |				(ВЫБРАТЬ
	   |						ТабЧасть.Номенклатура КАК Номенклатура
	   |					,	ТабЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	   |				ИЗ
	   |					Документ.КомплектацияНоменклатуры.Комплектующие КАК ТабЧасть
	   |				ГДЕ
	   |					ТабЧасть.Ссылка = &ДокументОснование) 
	   |			) КАК РегПотребности
	   |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	   |		ТабЧастьМатериалы.Номенклатура КАК Номенклатура,
	   |		ТабЧастьМатериалы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	   |		СУММА(ТабЧастьМатериалы.Количество * ТабЧастьМатериалы.Коэффициент / ТабЧастьМатериалы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК Количество
	   |	ИЗ
	   |		Документ.КомплектацияНоменклатуры.Комплектующие КАК ТабЧастьМатериалы
	   |	ГДЕ
	   |		ТабЧастьМатериалы.Ссылка = &ДокументОснование
	   |	
	   |	СГРУППИРОВАТЬ ПО
	   |		ТабЧастьМатериалы.Номенклатура
	   |	,	ТабЧастьМатериалы.ХарактеристикаНоменклатуры
	   |		) КАК ТабЧастьМатериалы
	   |	ПО РегПотребности.Номенклатура = ТабЧастьМатериалы.Номенклатура
	   |		И РегПотребности.ХарактеристикаНоменклатуры = ТабЧастьМатериалы.ХарактеристикаНоменклатуры
	   |ГДЕ КоличествоОстаток > 0 И Количество > 0 И РегПотребности.Спецификация=&Спецификация
	   |	И РегПотребности.Продукция=&Продукция И РегПотребности.ХарактеристикаПродукции=&ХарактеристикаПродукции";
	   
	   Запрос = новый Запрос;
	   Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
		Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
		Запрос.УстановитьПараметр("Спецификация", Основание.Спецификация);
		Запрос.УстановитьПараметр("Продукция", Основание.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаПродукции", Основание.ХарактеристикаНоменклатуры);
		
		РезультатЗапроса = Запрос.Выполнить();
		ДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ДетальныеЗаписи);
			
			НоваяСтрока.Количество = Мин(ДетальныеЗаписи.Количество, ДетальныеЗаписи.КоличествоПотребность);
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаЗаказаНаПроизводство.ПустаяСсылка() Тогда
		ВидОперации = Перечисления.ВидыОперацийКорректировкаЗаказаНаПроизводство.КорректировкаЗаказаНаПроизводство;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаЗаказаНаПроизводство.ЗакрытиеПотребностейЗаказаНаПроизводство  Тогда
		Если Продукция.Количество()>0  Тогда
			Продукция.Очистить();
		КонецЕсли;
		Для каждого СтрокаТЧ из Материалы Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Размещение) Тогда
				СтрокаТЧ.Размещение = неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Продукция);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Материалы);

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Продукция".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	
	СтруктураПолей.Вставить("ВидВоспроизводства"        , "ВидВоспроизводства");
	СтруктураПолей.Вставить("Заказ"        				, "Заказ");
	СтруктураПолей.Вставить("Спецификация"        		, "Спецификация");
	
	РезультатЗапросаПоПродукции = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей);

	// Подготовим таблицу продукции для проведения.
	ТаблицаПоПродукции = ПодготовитьТаблицуТоваров(РезультатЗапросаПоПродукции, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Материалы".
	СтруктураПолей.Вставить("Подразделение"             , "Подразделение");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");
	СтруктураПолей.Вставить("Продукция",                  "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции",    "ХарактеристикаПродукции");

	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);

	// Подготовим таблицу материалов для проведения.
	ТаблицаПоМатериалам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
	// Проверить заполнение табличных частей.
	ПроверитьЗаполнениеТабличнойЧастиПродукция(ТаблицаПоПродукции, ТаблицаПоМатериалам,  СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции,
							ТаблицаПоМатериалам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Продукция", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСпособЗакрытияПотребностейЗаказовНаПроизводство = глЗначениеПеременной("СпособЗакрытияПотребностейЗаказовНаПроизводство");
мИспользоватьПотребностиЗаказовНаПроизводство 		= глЗначениеПеременной("ИспользоватьПотребностиЗаказовНаПроизводство");

