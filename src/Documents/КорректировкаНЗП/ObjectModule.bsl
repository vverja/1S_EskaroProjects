Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мВалютаРегламентированногоУчета Экспорт; // (Упр)
Перем мВалютаУправленческогоУчета     Экспорт; // (Регл)

Перем мИспользоватьЗаказыНаПроизводство;

Перем мУчетнаяПолитика;                 // (Общ)
Перем УчетнаяПолитикаРегл;               // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирование печатной формы документа "Корректировка НЗП"
//
Функция ПечатьКорректировкаНЗП(ТипУчета)
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	КорректировкаНЗП.Ссылка,
		|	КорректировкаНЗП.Представление,
		|	КорректировкаНЗП.Организация,
		|	ВЫБОР
		|		КОГДА &ТипУчета = ""Упр""
		|			ТОГДА КорректировкаНЗП.Подразделение
		|		ИНАЧЕ КорректировкаНЗП.ПодразделениеОрганизации
		|	КОНЕЦ КАК Подразделение,
		|	КорректировкаНЗП.Организация.Представление КАК ПечОрганизация,
		|	ВЫБОР
		|		КОГДА &ТипУчета = ""Упр""
		|			ТОГДА КорректировкаНЗП.Подразделение.Представление
		|		ИНАЧЕ КорректировкаНЗП.ПодразделениеОрганизации.Представление
		|	КОНЕЦ КАК ПечПодразделение,
		|	КорректировкаНЗП.Материалы.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Материал,
		|		ХарактеристикаНоменклатуры КАК Характеристика,
		|		СерияНоменклатуры КАК Серия,
		|		КоличествоМест КАК КолМест,
		|		ЕдиницаИзмеренияМест КАК ЕдИзмМест,
		|		ЕдиницаИзмерения КАК ЕдИзм,
		|		Количество,
		|		ВЫБОР КОГДА &ТипУчета = ""Бух"" И Ссылка.ОтражатьВУправленческомУчете ТОГДА
		|			ВЫБОР КОГДА Количество = 0 ТОГДА
		|				СуммаРегл
		|			ИНАЧЕ
		|				СуммаРегл / Количество
		|			КОНЕЦ
		|		ИНАЧЕ
		|			Цена
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР
		|			КОГДА &ТипУчета = ""Упр""
		|				ТОГДА КорректировкаНЗП.Материалы.Сумма
		|			ИНАЧЕ КорректировкаНЗП.Материалы.СуммаРегл
		|		КОНЕЦ КАК Сумма,
		|		СтатьяЗатрат,
		|		Заказ,
		|		НоменклатурнаяГруппа                         КАК НомГруппа,
		|		СчетЗатрат                                   КАК Счет,
		|		СтатьяЗатрат.Представление                   КАК ПечСтатьяЗатрат,
		|		Заказ.Представление                          КАК ПечЗаказ,
		|		НоменклатурнаяГруппа.Представление           КАК ПечНомГруппа,
		|		СчетЗатрат.Представление                     КАК ПечСчет,
		|		СтатьяЗатрат.ХарактерЗатрат                  КАК ПечХарактЗатрат,
		|		ЕдиницаИзмерения.Представление               КАК ПечЕдИзм,
		|		ЕдиницаИзмеренияМест.Представление           КАК ПечЕдИзмМест,
		|		Номенклатура.Код                             КАК Код,
		|		Номенклатура.Артикул                         КАК Артикул,
		|		ЗаказПолучатель                              КАК ЗаказПолучатель,
		|		ЗаказПолучатель.Представление                КАК ПечЗаказПолучатель,
		|		ВЫБОР КОГДА  &ТипУчета = ""Упр"" ТОГДА
		|			ПодразделениеПолучатель
		|		ИНАЧЕ
		|			ПодразделениеОрганизацииПолучатель
		|		КОНЕЦ                                        КАК ПодрПолучатель,
		|		ВЫБОР КОГДА  &ТипУчета = ""Упр"" ТОГДА
		|			ПодразделениеПолучатель.Представление
		|		ИНАЧЕ
		|			ПодразделениеОрганизацииПолучатель.Представление
		|		КОНЕЦ                                        КАК ПечПодрПолучатель,
		|		СтатьяЗатратПолучатель                       КАК СтатПолучатель,
		|		СтатьяЗатратПолучатель.Представление         КАК ПечСтатПолучатель,
		|		СчетЗатратПолучатель                         КАК СчетПолучатель,
		|		СчетЗатратПолучатель.Представление           КАК ПечСчетПолучатель,
		|		НоменклатурнаяГруппаПолучатель               КАК НомГруппаПолучатель, 
		|		НоменклатурнаяГруппаПолучатель.Представление КАК ПечНомГруппаПолучатель
		|	)
		|ИЗ
		|	Документ.КорректировкаНЗП КАК КорректировкаНЗП
		|ГДЕ
		|	КорректировкаНЗП.Ссылка = &ТекДок
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "ТекДок",   Ссылка);
	Запрос.УстановитьПараметр( "ТипУчета", ТипУчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	Шапка = РезультатЗапроса.Выбрать();
	Шапка.Следующий();
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаНЗП_КорректировкаНЗП";
	
	Макет  = ПолучитьМакет("КорректировкаНЗП");
	Если ТипУчета <> "Бух" Тогда
		Макет.УдалитьОбласть( Макет.Область("Счет"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	// Параметры вывода
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	КолАртикул = ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул, "Артикул",
				 ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код,     "Код", ""));
	ФлагВыводКода = НЕ ПустаяСтрока(КолАртикул);
	ИмяСекцииКода = ?( ФлагВыводКода, "САртикулом", "");
	ФлагВыводСумм = ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная;
	
	// Вывод заголовка
	Область = Макет.ПолучитьОбласть("Заголовок|Данные");
	Область.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента( ЭтотОбъект);
	Область.Параметры.Подразделение    = Шапка.Подразделение;
	Область.Параметры.ПечПодразделение = Шапка.ПечПодразделение;
	Область.Параметры.Организация      = Шапка.Организация;
	Область.Параметры.ПечОрганизация   = Шапка.ПечОрганизация;
		
	ТабДок.Вывести( Область);
	
	Если ФлагВыводСумм Тогда
		ОбластьСум = Макет.ПолучитьОбласть("Заголовок|Суммы");
		ТабДок.Присоединить( ОбластьСум);
	КонецЕсли;
	
	// Вывод шапки табличной части
	ОбластьНач = Макет.ПолучитьОбласть("ТабШапка" + ИмяСекцииКода + "|Данные");
	Если ФлагВыводКода Тогда
		ОбластьНач.Параметры.ЗаголовокАртикул = КолАртикул;;
	КонецЕсли;
	
	Если НЕ ФлагВыводСумм Тогда
		ОбластьНач.Область( 1, ОбластьНач.ШиринаТаблицы - 1, 1, ОбластьНач.ШиринаТаблицы - 1).ГраницаСправа = Новый Линия( ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
		ТабДок.Вывести( ОбластьНач);
	Иначе
		ТабДок.Вывести( ОбластьНач);
		ОбластьСум = Макет.ПолучитьОбласть("ТабШапка" + ИмяСекцииКода + "|Суммы");
		ТабДок.Присоединить( ОбластьСум);
	КонецЕсли;
	
	// Вывод табличной части
	ОбластьНач = Макет.ПолучитьОбласть("ТабСтрока" + ИмяСекцииКода + "|Данные");
	ОбластьСум = Макет.ПолучитьОбласть("ТабСтрока" + ИмяСекцииКода + "|Суммы");
	
	ТабЧасть   = Шапка.Материалы.Выбрать();
	СуммаИтого = 0;
	
	Пока ТабЧасть.Следующий() Цикл
		
		ОбластьНач.Параметры.ПечНомер = ТабЧасть.НомерСтроки;
		
		ОбластьНач.Параметры.ПечМатериал     = СокрЛП( ТабЧасть.Материал) + ФормированиеПечатныхФорм.ПредставлениеСерий( ТабЧасть);
		ОбластьНач.Параметры.Материал        = ТабЧасть.Материал;
		ОбластьНач.Параметры.ПечСтатьяЗатрат = ТабЧасть.ПечСтатьяЗатрат;
		ОбластьНач.Параметры.СтатьяЗатрат    = ТабЧасть.СтатьяЗатрат;
		ОбластьНач.Параметры.ПечЗаказ        = ТабЧасть.ПечЗаказ;
		ОбластьНач.Параметры.Заказ           = ТабЧасть.Заказ;
		ОбластьНач.Параметры.ПечНомГруппа    = ТабЧасть.ПечНомГруппа;
		ОбластьНач.Параметры.НомГруппа       = ТабЧасть.НомГруппа;
		
		ОбластьНач.Параметры.ПечПодрПолучатель      = ТабЧасть.ПечПодрПолучатель;
		ОбластьНач.Параметры.ПодрПолучатель         = ТабЧасть.ПодрПолучатель;
		ОбластьНач.Параметры.ПечСтатПолучатель      = ТабЧасть.ПечСтатПолучатель;
		ОбластьНач.Параметры.СтатПолучатель         = ТабЧасть.СтатПолучатель;
		ОбластьНач.Параметры.ПечЗаказПолучатель     = ТабЧасть.ПечЗаказПолучатель;
		ОбластьНач.Параметры.ЗаказПолучатель        = ТабЧасть.ЗаказПолучатель;
		ОбластьНач.Параметры.ПечНомГруппаПолучатель = ТабЧасть.ПечНомГруппаПолучатель;
		ОбластьНач.Параметры.НомГруппаПолучатель    = ТабЧасть.НомГруппаПолучатель;
		
		ОбластьНач.Параметры.ПечЕдИзм = ТабЧасть.ПечЕдИзм;
		ОбластьНач.Параметры.Колво    = ТабЧасть.Количество;
		
		Если ТипУчета = "Бух" Тогда
			ОбластьНач.Параметры.ПечСчет = ТабЧасть.ПечСчет;
			ОбластьНач.Параметры.Счет    = ТабЧасть.Счет;
		КонецЕсли;
		
		Если НЕ ФлагВыводСумм Тогда
			ОбластьНач.Область( 1, ОбластьНач.ШиринаТаблицы, 1, ОбластьНач.ШиринаТаблицы).ГраницаСправа = Новый Линия( ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьНач);
		
		Если ФлагВыводСумм Тогда
			ОбластьСум.Параметры.Цена  = ТабЧасть.Цена;
			ОбластьСум.Параметры.Сумма = ТабЧасть.Сумма;
			ТабДок.Присоединить(ОбластьСум);
		КонецЕсли;
		
		СуммаИтого = СуммаИтого + ТабЧасть.Сумма;
		
	КонецЦикла;
	
	// Вывод итогов документа
	Если ФлагВыводСумм Тогда
		
		ОбластьИтог = Макет.ПолучитьОбласть( "ИтогСумма|Данные");
		ВалСумм = ?(ТипУчета = "Бух", мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета);
		ОбластьИтог.Параметры.ИтоговаяСтрока = "Всего наименований: " + ТабЧасть.Количество() + ", на сумму " + ОбщегоНазначения.ФорматСумм( СуммаИтого, ВалСумм);
		ОбластьИтог.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью( СуммаИтого, ВалСумм);
		ТабДок.Вывести( ОбластьИтог);
		
		ОбластьИтог = Макет.ПолучитьОбласть( "ИтогСумма|Суммы");
		ОбластьИтог.Параметры.ИтогоСумма = СуммаИтого;
		ТабДок.Присоединить( ОбластьИтог);
		
	Иначе
		
		ОбластьИтог = Макет.ПолучитьОбласть("ИтогКол|Данные");
		ОбластьИтог.Параметры.ИтоговаяСтрока = "Всего наименований: " + ТабЧасть.Количество();
		ТабДок.Вывести( ОбластьИтог);
		
		Если ФлагВыводСумм Тогда
			ОбластьИтог = Макет.ПолучитьОбласть( "ИтогКол|Суммы");
			ТабДок.Присоединить( ОбластьИтог);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьКорректировкаНЗП()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировкаНЗП" ИЛИ ИмяМакета = "КорректировкаНЗП_Упр" ИЛИ ИмяМакета = "КорректировкаНЗП_Бух" Тогда
		
		ТипУчета = ?( ИмяМакета = "КорректировкаНЗП_Упр", "Упр",
				   ?( ИмяМакета = "КорректировкаНЗП_Бух", "Бух",
				   ?( ОтражатьВУправленческомУчете, "Упр", "Бух")));
				   
		ТабДокумент = ПечатьКорректировкаНЗП(ТипУчета);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечФорм = Новый Структура;
	Если ОтражатьВУправленческомУчете И ОтражатьВБухгалтерскомУчете Тогда
		СтруктПечФорм.Вставить( "КорректировкаНЗП_Упр", "Корректировка НЗП (упр.)");
		СтруктПечФорм.Вставить( "КорректировкаНЗП_Бух", "Корректировка НЗП (регл.)");
	Иначе
		СтруктПечФорм.Вставить( "КорректировкаНЗП", "Корректировка НЗП");
	КонецЕсли;
	
	Возврат СтруктПечФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение, Материалы.Сумма, Получатели.ПодразделениеПолучатель";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
		|Материалы.СчетЗатрат, Материалы.СуммаРегл, Материалы.СуммаНал,
		|Материалы.НалоговоеНазначение, Материалы.СуммаНДС, Материалы.СуммаНДСКредит,
		|Получатели.СчетЗатратПолучатель, Получатели.ПодразделениеОрганизацииПолучатель,
		|Получатели.СтатьяЗатратПолучатель, Получатели.НалоговоеНазначениеПолучатель";
		
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура проверяет правильность заполнения реквизитов документа
//
Функция ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	РеквизитыШапки = "Организация, ТипСтоимости";
	ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);
	
	РеквизитыТЧ    = "Номенклатура, Количество, ЕдиницаИзмерения, СтатьяЗатрат";

	ДополнитьРеквизитыТабличнойЧастиУпр(РеквизитыТЧ, СтруктураШапкиДокумента);
	ДополнитьРеквизитыТабличнойЧастиРегл(РеквизитыТЧ, СтруктураШапкиДокумента);

	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧ,    СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "Материалы");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТЧ), Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	УправлениеЗатратами.ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ЭтотОбъект, Материалы, "Материалы", "ПодразделениеОрганизацииПолучатель", Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);	
	
	// Здесь услуг быть не должно.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СтатьяЗатрат", 			"СтатьяЗатрат");
	СтруктураПолей.Вставить("СтатусМатериальныхЗатрат", "СтатьяЗатрат.СтатусМатериальныхЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат",   		"СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("СтатьяЗатратПолучатель", 			  "СтатьяЗатратПолучатель");
	СтруктураПолей.Вставить("СтатусМатериальныхЗатратПолучатель", "СтатьяЗатратПолучатель.СтатусМатериальныхЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатратПолучатель",   		  "СтатьяЗатратПолучатель.ХарактерЗатрат");
	СтруктураПолей.Вставить("ПодразделениеПолучатель",   		  "ПодразделениеПолучатель");
	СтруктураПолей.Вставить("ПодразделениеОрганизацииПолучатель", "ПодразделениеОрганизацииПолучатель");
	СтруктураПолей.Вставить("СчетЗатратПолучатель", 			  "СчетЗатратПолучатель");
	СтруктураПолей.Вставить("НалоговоеНазначение", 			              "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеПолучатель", 			  "НалоговоеНазначениеПолучатель");
	
	ТаблицаМатериалов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();

	Для Каждого СтрокаТаблицы Из ТаблицаМатериалов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ХарактерЗатрат) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан характер затрат в статье затрат (строка № " + СтрокаТаблицы.НомерСтроки + " табличной части ""Материалы"")", Отказ, Заголовок);
		ИначеЕсли СтрокаТаблицы.ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нельзя указывать статью затрат с хар-ром затрат """+СтрокаТаблицы.ХарактерЗатрат+""". Статья затрат """ + СтрокаТаблицы.СтатьяЗатрат + """ (строка № " + СтрокаТаблицы.НомерСтроки + " табличной части ""Материалы"")", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ХарактерЗатратПолучатель) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан характер затрат в статье затрат (строка № " + СтрокаТаблицы.НомерСтроки + " табличной части ""Получатели"")", Отказ, Заголовок);
		ИначеЕсли СтрокаТаблицы.ХарактерЗатратПолучатель <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нельзя указывать статью затрат с хар-ром затрат """+СтрокаТаблицы.ХарактерЗатратПолучатель+""". Статья затрат """ + СтрокаТаблицы.СтатьяЗатратПолучатель + """ (строка № " + СтрокаТаблицы.НомерСтроки + " табличной части ""Получатели"")", Отказ, Заголовок);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеПолучатель) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);	
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеОрганизацииПолучатель) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение организации в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатратПолучатель) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана статья затрат в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратПолучатель) И (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан счет затрат (БУ) в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) И (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Материалы"")", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеПолучатель) И (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение-получатель в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);
		КонецЕсли;
		
		НалоговыйУчет.ПроверитьНалоговыеНазначенияПриВыпускеПродукции(
			"Материалы",
			СтрокаТаблицы.НомерСтроки,
			Отказ, 
			Заголовок,
			СтрокаТаблицы.НалоговоеНазначение
		);
		
		НалоговыйУчет.ПроверитьНалоговыеНазначенияПриВыпускеПродукции(
			"Материалы",
			СтрокаТаблицы.НомерСтроки,
			Отказ, 
			Заголовок,
			СтрокаТаблицы.НалоговоеНазначениеПолучатель
		);
		
	КонецЦикла;
	
	Возврат СтруктураШапкиДокумента;

КонецФункции // ПроверкаРеквизитов()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") + "Подразделение";

КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") + "ПодразделениеОрганизации";

КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиУпр(Реквизиты, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Реквизиты = Реквизиты + ", ПодразделениеПолучатель";
		Если ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
			Реквизиты = Реквизиты + ", Сумма";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиРегл(Реквизиты, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Реквизиты = Реквизиты + ", СчетЗатрат";
		Если ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
			Реквизиты = Реквизиты + ", СуммаРегл";
		КонецЕсли;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Реквизиты = Реквизиты + ", НалоговоеНазначение";
	КонецЕсли;	
	
КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок)

	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,  Отказ, Заголовок);
	
	// Формирование движений по регистрам "Затраты на выпуск продукции".				
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(
		СтруктураШапкиДокумента, 
		"КорректировкаНЗП",
		мУчетнаяПолитика,
		УчетнаяПолитикаРегл
		);
	
	// Формирование движений по регистрам "Выпуск продукции" и направлениям выпуска.
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска(
		СтруктураШапкиДокумента, 
		,
		мУчетнаяПолитика, 
		УчетнаяПолитикаРегл
		);

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка остатков
	Движения.МатериалыВПроизводстве.КонтрольОстатков(
		СтруктураШапкиДокумента, 
		Отказ, 
		Заголовок, 
		РежимПроведения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений расход по регистру "Материалы в производстве".
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоМатериаламВПроизводстве(
		СтруктураШапкиДокумента, 
		мУчетнаяПолитика
	);
		
КонецПроцедуры // ДвиженияПоРегистрамУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"	  , "УчетЗатратПоЗаказамНаПроизводство"			 , "УчетЗатратПоЗаказамНаПроизводство");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		// Заполнение шапки
		Организация                  = Основание.Организация;
		Подразделение                = Основание.Подразделение;
		ПодразделениеОрганизации     = Основание.ПодразделениеОрганизации;
		
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		
		Для Каждого ТекСтрокаМатериалы Из Основание.Материалы Цикл
			
			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.Номенклатура               = ТекСтрокаМатериалы.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаМатериалы.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаМатериалы.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаМатериалы.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаМатериалы.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаМатериалы.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаМатериалы.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаМатериалы.Коэффициент;
			
			НоваяСтрока.НоменклатурнаяГруппа       = ТекСтрокаМатериалы.НоменклатурнаяГруппа;
			НоваяСтрока.СтатьяЗатрат               = ТекСтрокаМатериалы.СтатьяЗатрат;
			НоваяСтрока.СчетЗатрат                 = ТекСтрокаМатериалы.СчетЗатрат;
			
			НоваяСтрока.НалоговоеНазначение        = ТекСтрокаМатериалы.НалоговоеНазначениеДоходовИЗатрат;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	Если ЗаполнятьБУ = Истина Тогда
		СчетаУчета = СчетаУчетаВДокументах.ПолучитьСчетаУчетаНоменклатурыИзНастроек(Организация, СтрокаТЧ.Номенклатура, , Дата);
		СтрокаТЧ.НалоговоеНазначение = СчетаУчета.НалоговоеНазначен;
	КонецЕсли;     	
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");
мИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();

