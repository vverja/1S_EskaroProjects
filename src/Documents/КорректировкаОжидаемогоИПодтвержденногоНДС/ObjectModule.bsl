Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПриобретения(РезультатЗапросаПоПриобретениям, СтруктураШапкиДокумента, Подтвержденый )

	ТаблицаПриобретения = РезультатЗапросаПоПриобретениям.Выгрузить();
	
	// по некоторым строкам не движений не предполагется вовсе, их можно удалить заранее
	СтруктураПоиска = Новый Структура;
	// по этим видам остатков не нужны корректировки
	Если Подтвержденый Тогда
		СтруктураПоиска.Вставить("ВидОстатка",Перечисления.ВидыОстатковНДСПриобретенийПодтвержденный.ПолученыЗаранее);
	Иначе	
		СтруктураПоиска.Вставить("ВидОстатка",Перечисления.ВидыОстатковНДСПриобретенийОжидаемый.ЕщеНеПолучены);
	КонецЕсли; 
	
	НайденныеСтроки = ТаблицаПриобретения.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из НайденныеСтроки Цикл
		ТаблицаПриобретения.Удалить(Строка);
	КонецЦикла; 
	
	ТаблицаПриобретения.Колонки.Добавить("НДСКредит"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));

	Для каждого СтрокаТаблицы Из ТаблицаПриобретения Цикл
		
		// проверим, есть ли право на налоговый кредит
		Если НалоговыйУчетПовтИсп.ЕстьПравоНаНалоговыйКредит(СтрокаТаблицы.НалоговоеНазначение) Тогда
			СтрокаТаблицы.НДСКредит = СтрокаТаблицы.СуммаНДС;
		Иначе
			СтрокаТаблицы.НДСКредит		= 0;
		КонецЕсли;
		
		Если Подтвержденый Тогда
			// увеличение на самом деле отражается в регистре как расход с минусом
			
			СтрокаТаблицы.БазаНДС 				  = - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.СуммаНДС 			  	  = - СтрокаТаблицы.СуммаНДС;
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
			СтрокаТаблицы.Сделка = Неопределено;
		КонецЕсли;
	
	КонецЦикла;

	Возврат ТаблицаПриобретения;

КонецФункции // ПодготовитьТаблицуПриобретения()

Функция ПодготовитьТаблицуПродажи(РезультатЗапросаПоПродажам, СтруктураШапкиДокумента, Подтвержденный)

	ТаблицаПродажи = РезультатЗапросаПоПродажам.Выгрузить();
	
	// по некоторым строкам не движений не предполагется вовсе, их можно удалить заранее
	СтруктураПоиска = Новый Структура;
	// по этим видам остатков не нужны корректировки
	Если Подтвержденный Тогда
		СтруктураПоиска.Вставить("ВидОстатка",Перечисления.ВидыОстатковНДСПродажПодтвержденный.ВыписаныЗаранее);
	Иначе	
		СтруктураПоиска.Вставить("ВидОстатка",Перечисления.ВидыОстатковНДСПродажОжидаемый.ЕщеНеВыписаны);
	КонецЕсли; 
	
	НайденныеСтроки = ТаблицаПродажи.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из НайденныеСтроки Цикл
		ТаблицаПродажи.Удалить(Строка);
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из ТаблицаПродажи Цикл
		
		Если Подтвержденный Тогда
			// увеличение на самом деле отражается в регистре как расход с минусом
			
			СтрокаТаблицы.БазаНДС 				  = - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.СуммаНДС		  		  = - СтрокаТаблицы.СуммаНДС;
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
			СтрокаТаблицы.Сделка = Неопределено;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаПродажи;

КонецФункции // ПодготовитьТаблицуПродажи()

// Проверяет правильность заполнения строк табличной части "Приобретения".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПриобретениям  - таблица значений, содержащая данные для проведения и проверки
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПриобретения(ТаблицаПоПриобретениям, СтруктураШапкиДокумента, Отказ, Заголовок, Подтвердженный)
	
    Если Подтвердженный Тогда
		ИмяТабличнойЧасти = "ПриобретенияПодтвержденный";
		// Список видов остатков, по которым обязательно заполнение счета НДС
		СписокВидыОстатковСПроводками = Новый СписокЗначений;
		СписокВидыОстатковСПроводками.Добавить(Перечисления.ВидыОстатковНДСПриобретенийПодтвержденный.НеправильноЗарегистрированы);
		СписокВидыОстатковСПроводками.Добавить(Перечисления.ВидыОстатковНДСПриобретенийПодтвержденный.ПолученыИзлишне);
	Иначе
		ИмяТабличнойЧасти = "ПриобретенияОжидаемый";
		// Список видов остатков, по которым обязательно заполнение счета НДС
		СписокВидыОстатковСПроводками = Новый СписокЗначений;
		СписокВидыОстатковСПроводками.Добавить(Перечисления.ВидыОстатковНДСПриобретенийОжидаемый.ПравильнаяРегистрация);
		СписокВидыОстатковСПроводками.Добавить(Перечисления.ВидыОстатковНДСПриобретенийОжидаемый.НеБудутПолучены);
	КонецЕсли; 
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОстатка,Контрагент, ДоговорКонтрагента,СобытиеНДС,СтавкаНДС,НалоговоеНазначение,СчетУчетаНДС,БазаНДС");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоПриобретениям, Отказ, Заголовок);
	
	ПредставлениеТабличнойЧасти = Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	Для каждого Строка Из ТаблицаПоПриобретениям Цикл
		
		Если  НЕ ЗначениеЗаполнено(Строка.Сделка)
			И (    Строка.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			   ИЛИ Строка.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
		
			СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
			ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ Строка.НомерСтроки + """ табличной части " + ИмяТабличнойЧасти +" " + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;				
									   
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПриобретения()

// Проверяет правильность заполнения строк табличной части "Продажи".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПродажам  		- таблица значений, содержащая данные для проведения и проверки
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПродажи(ТаблицаПоПродажам, СтруктураШапкиДокумента, Отказ, Заголовок, Подтвержденный)

    Если Подтвержденный Тогда
		ИмяТабличнойЧасти = "ПродажиПодтвержденный";
	Иначе
		ИмяТабличнойЧасти = "ПродажиОжидаемый";
	КонецЕсли; 
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент, ДоговорКонтрагента,СобытиеНДС,СтавкаНДС,НалоговоеНазначение,СчетУчетаНДС,БазаНДС");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоПродажам, Отказ, Заголовок);
	
	// Дополнительные проверки:
	Для каждого Строка Из ТаблицаПоПродажам Цикл
		
		Если  НЕ ЗначениеЗаполнено(Строка.Сделка)
			И (    Строка.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			   ИЛИ Строка.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
		
			СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
			ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ Строка.НомерСтроки + """ табличной части " + ИмяТабличнойЧасти +" " + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;				
		
	КонецЦикла;

	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПродажи()

Процедура ПроверитьСоответсвиеСуммПоИзмерениямПриобретения(ТаблицаПриобретенияПодтвержденный, ТаблицаПоПриобретениямОжидаемый, Отказ, Заголовок)
	
	// проверка сумм на соответсвие
	ТаблицаКопияПодтвержденный = ТаблицаПриобретенияПодтвержденный.Скопировать();
	ТаблицаКопияПодтвержденный.Свернуть("ВидОстатка,Контрагент,ДоговорКонтрагента,Сделка, ВозвратнаяТара,СобытиеНДС,СтавкаНДС","БазаНДС,СуммаНДС");
	
	ТаблицаКопияОжидаемый = ТаблицаПоПриобретениямОжидаемый.Скопировать();
	ТаблицаКопияОжидаемый.Свернуть("ВидОстатка,Контрагент,ДоговорКонтрагента,Сделка, ВозвратнаяТара,СобытиеНДС,СтавкаНДС","БазаНДС,СуммаНДС");
	ТаблицаКопияОжидаемый.Колонки.Добавить("ФлагПроверки");
	
	Для Каждого СтрокаТаблицыПодтвержденный Из ТаблицаКопияПодтвержденный Цикл
		
		Если СтрокаТаблицыПодтвержденный.ВидОстатка <> Перечисления.ВидыОстатковНДСПриобретенийПодтвержденный.НеправильноЗарегистрированы Тогда
			// проверять соответсвие нужно только для неправильно зарегистрированных
			Продолжить;
		
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидОстатка"			,Перечисления.ВидыОстатковНДСПриобретенийОжидаемый.ПравильнаяРегистрация);
		СтруктураПоиска.Вставить("Контрагент"			,СтрокаТаблицыПодтвержденный.Контрагент);
		СтруктураПоиска.Вставить("ДоговорКонтрагента"	,СтрокаТаблицыПодтвержденный.ДоговорКонтрагента);
		СтруктураПоиска.Вставить("Сделка"				,СтрокаТаблицыПодтвержденный.Сделка);		
		СтруктураПоиска.Вставить("ВозвратнаяТара"		,СтрокаТаблицыПодтвержденный.ВозвратнаяТара);
		СтруктураПоиска.Вставить("СобытиеНДС"			,СтрокаТаблицыПодтвержденный.СобытиеНДС);
		СтруктураПоиска.Вставить("СтавкаНДС"			,СтрокаТаблицыПодтвержденный.СтавкаНДС);
		
		НайденныеСтроки = ТаблицаКопияОжидаемый.НайтиСтроки(СтруктураПоиска);
		
		// выполним проверку на корректность заполнения табличных частей
		// суммы БазаНС и НДС по измерениям должны совпадать
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОжидаемыйБазаНДС 					= НайденныеСтроки[0].БазаНДС;
			ОжидаемыйСуммаНДС	 				= НайденныеСтроки[0].СуммаНДС;
			// установим флаг, что мы уже проверяли эту строку
			НайденныеСтроки[0].ФлагПроверки = Истина;
		Иначе 
			ОжидаемыйБазаНДС  = 0;
			ОжидаемыйСуммаНДС = 0;
		КонецЕсли;
		
		Если НЕ (-СтрокаТаблицыПодтвержденный.БазаНДС 				 = ОжидаемыйБазаНДС И
			 	 -СтрокаТаблицыПодтвержденный.СуммаНДС   			 = ОжидаемыйСуммаНДС) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоги в табличных частях по приобретениям !
						|По измерениям контрагент: "+СтрокаТаблицыПодтвержденный.Контрагент+", договор: "+СтрокаТаблицыПодтвержденный.ДоговорКонтрагента+", сделка: "+СтрокаТаблицыПодтвержденный.Сделка+
						" возвратная тара: "+СтрокаТаблицыПодтвержденный.ВозвратнаяТара+", событие: "+СтрокаТаблицыПодтвержденный.СобытиеНДС+
						" ставка НДС: "+СтрокаТаблицыПодтвержденный.СтавкаНДС+":
						|   В табличной части ""Подтвержденный"" база НДС:"+(-СтрокаТаблицыПодтвержденный.БазаНДС) +", НДС :" + (-СтрокаТаблицыПодтвержденный.СуммаНДС) + "
						|   А в табличной части ""Ожидаемый""    база НДС:"+ОжидаемыйБазаНДС +", НДС :" + ОжидаемыйСуммаНДС + "!", Отказ, Заголовок);
		
		
		КонецЕсли;
		
	КонецЦикла;
	
	// теперь нужно выполнить проверку "по ожидаемым"
	Для Каждого СтрокаТаблицыОжидаемый Из ТаблицаКопияОжидаемый Цикл
		
		Если СтрокаТаблицыОжидаемый.ВидОстатка <> Перечисления.ВидыОстатковНДСПриобретенийОжидаемый.ПравильнаяРегистрация 
			ИЛИ СтрокаТаблицыОжидаемый.ФлагПроверки = Истина Тогда
			// проверять соответсвие нужно только для "правильной регистрации", 
			// и если эту строку не проеверяли в предыдущем цикле
			Продолжить;
		
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидОстатка"			,Перечисления.ВидыОстатковНДСПриобретенийПодтвержденный.НеправильноЗарегистрированы);
		СтруктураПоиска.Вставить("Контрагент"			,СтрокаТаблицыОжидаемый.Контрагент);
		СтруктураПоиска.Вставить("ДоговорКонтрагента"	,СтрокаТаблицыОжидаемый.ДоговорКонтрагента);
		СтруктураПоиска.Вставить("Сделка"				,СтрокаТаблицыОжидаемый.Сделка);		
		СтруктураПоиска.Вставить("ВозвратнаяТара"		,СтрокаТаблицыОжидаемый.ВозвратнаяТара);
		СтруктураПоиска.Вставить("СобытиеНДС"			,СтрокаТаблицыОжидаемый.СобытиеНДС);
		СтруктураПоиска.Вставить("СтавкаНДС"			,СтрокаТаблицыОжидаемый.СтавкаНДС);
		
		НайденныеСтроки = ТаблицаКопияПодтвержденный.НайтиСтроки(СтруктураПоиска);
		
		// выполним проверку на корректность заполнения табличных частей
		// суммы БазаНС и НДС по измерениям должны совпадать
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПодтвержденныйБазаНДС 					= - НайденныеСтроки[0].БазаНДС;
			ПодтвержденныйСуммаНДС  				= - НайденныеСтроки[0].СуммаНДС;
		Иначе 
			ПодтвержденныйБазаНДС  = 0;
			ПодтвержденныйСуммаНДС = 0;
		КонецЕсли;
		
		Если НЕ (СтрокаТаблицыОжидаемый.БазаНДС 			 = ПодтвержденныйБазаНДС И
			 	 СтрокаТаблицыОжидаемый.СуммаНДС 			 = ПодтвержденныйСуммаНДС) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоги в табличных частях по приобретениям !
						|По измерениям контрагент: "+СтрокаТаблицыОжидаемый.Контрагент+", договор: "+СтрокаТаблицыОжидаемый.ДоговорКонтрагента+", сделка: "+СтрокаТаблицыОжидаемый.Сделка+
						" возвратная тара: "+СтрокаТаблицыОжидаемый.ВозвратнаяТара+", событие: "+СтрокаТаблицыОжидаемый.СобытиеНДС+
						" ставка НДС: "+СтрокаТаблицыОжидаемый.СтавкаНДС+":
						|   В табличной части ""Подтвержденный"" база НДС:"+ПодтвержденныйБазаНДС +", НДС :" + ПодтвержденныйСуммаНДС + "
						|   А в табличной части ""Ожидаемый""    база НДС:"+СтрокаТаблицыОжидаемый.БазаНДС +", НДС :" + СтрокаТаблицыОжидаемый.СуммаНДС + "!", Отказ, Заголовок);
		
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоответсвиеСуммПоИзмерениямПродажи(ТаблицаПродажиПодтвержденный , ТаблицаПродажиОжидаемый , Отказ, Заголовок)
	
	// проверка сумм на соответсвие
	ТаблицаКопияПодтвержденный = ТаблицаПродажиПодтвержденный.Скопировать();
	ТаблицаКопияПодтвержденный.Свернуть("ВидОстатка,Контрагент,ДоговорКонтрагента,Сделка,ВозвратнаяТара,СобытиеНДС,СтавкаНДС","БазаНДС,СуммаНДС");
	
	ТаблицаКопияОжидаемый = ТаблицаПродажиОжидаемый.Скопировать();
	ТаблицаКопияОжидаемый.Свернуть("ВидОстатка,Контрагент,ДоговорКонтрагента,Сделка,ВозвратнаяТара,СобытиеНДС,СтавкаНДС","БазаНДС,СуммаНДС");
	ТаблицаКопияОжидаемый.Колонки.Добавить("ФлагПроверки");
	
	Для Каждого СтрокаТаблицыПодтвержденный Из ТаблицаКопияПодтвержденный Цикл
		
		Если СтрокаТаблицыПодтвержденный.ВидОстатка <> Перечисления.ВидыОстатковНДСПродажПодтвержденный.НеправильноЗарегистрированы Тогда
			// проверять соответсвие нужно только для неправильно зарегистрированных
			Продолжить;
		
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидОстатка"			,Перечисления.ВидыОстатковНДСПродажОжидаемый.ПравильнаяРегистрация);
		СтруктураПоиска.Вставить("Контрагент"			,СтрокаТаблицыПодтвержденный.Контрагент);
		СтруктураПоиска.Вставить("ДоговорКонтрагента"	,СтрокаТаблицыПодтвержденный.ДоговорКонтрагента);
		СтруктураПоиска.Вставить("Сделка"				,СтрокаТаблицыПодтвержденный.Сделка);
		СтруктураПоиска.Вставить("ВозвратнаяТара"		,СтрокаТаблицыПодтвержденный.ВозвратнаяТара);
		СтруктураПоиска.Вставить("СобытиеНДС"			,СтрокаТаблицыПодтвержденный.СобытиеНДС);
		СтруктураПоиска.Вставить("СтавкаНДС"			,СтрокаТаблицыПодтвержденный.СтавкаНДС);
		
		НайденныеСтроки = ТаблицаКопияОжидаемый.НайтиСтроки(СтруктураПоиска);
		
		// выполним проверку на корректность заполнения табличных частей
		// суммы БазаНС и НДС по измерениям должны совпадать
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОжидаемыйБазаНДС 					= НайденныеСтроки[0].БазаНДС;
			ОжидаемыйСуммаНДС 				    = НайденныеСтроки[0].СуммаНДС;
			// установим флаг, что мы уже проверяли эту строку
			НайденныеСтроки[0].ФлагПроверки = Истина;
		Иначе 
			ОжидаемыйБазаНДС 					= 0;
			ОжидаемыйСуммаНДС 					= 0;
		КонецЕсли;
		
		Если НЕ (-СтрокаТаблицыПодтвержденный.БазаНДС 				  = ОжидаемыйБазаНДС И
			 	 -СтрокаТаблицыПодтвержденный.СуммаНДС 			 	  = ОжидаемыйСуммаНДС) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоги в табличных частях по продажам !
						|По измерениям контрагент: "+СтрокаТаблицыПодтвержденный.Контрагент+", договор: "+СтрокаТаблицыПодтвержденный.ДоговорКонтрагента+", сделка: "+СтрокаТаблицыПодтвержденный.Сделка+
						" возвратная тара: "+СтрокаТаблицыПодтвержденный.ВозвратнаяТара+", событие: "+СтрокаТаблицыПодтвержденный.СобытиеНДС+
						" ставка НДС: "+СтрокаТаблицыПодтвержденный.СтавкаНДС+":
						|   В табличной части ""Подтвержденный НДС"" база НДС:"+(-СтрокаТаблицыПодтвержденный.БазаНДС) +", НДС :" + (-СтрокаТаблицыПодтвержденный.СуммаНДС) + "
						|   А в табличной части ""Ожидаемый НДС""    база НДС:"+ОжидаемыйБазаНДС +", НДС :" + ОжидаемыйСуммаНДС + "!", Отказ, Заголовок);
		
		
		КонецЕсли;
		
	КонецЦикла;
	
	// теперь нужно выполнить проверку "по ожидаемым"
	Для Каждого СтрокаТаблицыОжидаемый Из ТаблицаКопияОжидаемый Цикл
		
		Если СтрокаТаблицыОжидаемый.ВидОстатка <> Перечисления.ВидыОстатковНДСПродажОжидаемый.ПравильнаяРегистрация 
			ИЛИ СтрокаТаблицыОжидаемый.ФлагПроверки = Истина Тогда
			// проверять соответсвие нужно только для "правильной регистрации", 
			// и если эту строку не проеверяли в предыдущем цикле
			Продолжить;
		
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидОстатка"			,Перечисления.ВидыОстатковНДСПродажПодтвержденный.НеправильноЗарегистрированы);
		СтруктураПоиска.Вставить("Контрагент"			,СтрокаТаблицыОжидаемый.Контрагент);
		СтруктураПоиска.Вставить("ДоговорКонтрагента"	,СтрокаТаблицыОжидаемый.ДоговорКонтрагента);
		СтруктураПоиска.Вставить("Сделка"				,СтрокаТаблицыОжидаемый.Сделка);
		СтруктураПоиска.Вставить("ВозвратнаяТара"		,СтрокаТаблицыОжидаемый.ВозвратнаяТара);
		СтруктураПоиска.Вставить("СобытиеНДС"			,СтрокаТаблицыОжидаемый.СобытиеНДС);
		СтруктураПоиска.Вставить("СтавкаНДС"			,СтрокаТаблицыОжидаемый.СтавкаНДС);
		
		НайденныеСтроки = ТаблицаКопияПодтвержденный.НайтиСтроки(СтруктураПоиска);
		
		// выполним проверку на корректность заполнения табличных частей
		// суммы БазаНС и НДС по измерениям должны совпадать
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПодтвержденныйБазаНДС 					= - НайденныеСтроки[0].БазаНДС;
			ПодтвержденныйСуммаНДС 					= - НайденныеСтроки[0].СуммаНДС;
		Иначе 
			ПодтвержденныйБазаНДС 					= 0;
			ПодтвержденныйСуммаНДС		 				= 0;
		КонецЕсли;
		
		Если НЕ (СтрокаТаблицыОжидаемый.БазаНДС 	= ПодтвержденныйБазаНДС И
			 	 СтрокаТаблицыОжидаемый.СуммаНДС 	= ПодтвержденныйСуммаНДС) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоги в табличных частях по продажам !
						|По измерениям контрагент: "+СтрокаТаблицыОжидаемый.Контрагент+", договор: "+СтрокаТаблицыОжидаемый.ДоговорКонтрагента+", сделка: "+СтрокаТаблицыОжидаемый.Сделка+
						" возвратная тара: "+СтрокаТаблицыОжидаемый.ВозвратнаяТара+", событие: "+СтрокаТаблицыОжидаемый.СобытиеНДС+
						" ставка НДС: "+СтрокаТаблицыОжидаемый.СтавкаНДС+":
						|   В табличной части ""Подтвержденный НДС"" база НДС:"+ПодтвержденныйБазаНДС +", НДС :" + ПодтвержденныйСуммаНДС + "
						|   А в табличной части ""Ожидаемый НДС""    база НДС:"+СтрокаТаблицыОжидаемый.БазаНДС +", НДС :" + СтрокаТаблицыОжидаемый.СуммаНДС + "!", Отказ, Заголовок);
		
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По выбранной организации не ведется учет НДС!", Отказ, Заголовок);
	КонецЕсли; 
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,СчетУчетаНДС,СчетУчетаДоходов,СчетУчетаЗатрат");

	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		СтруктураОбязательныхПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");
		
		//проверим указание субконто для заполнения декларации по прибыли
		Если ЗначениеЗаполнено(СчетУчетаДоходов) 
			И НЕ НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность ТОгда
		
			ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
			Для НомСубконто = 1 По 3 Цикл
				Если СчетУчетаДоходов.ВидыСубконто.Количество()<НомСубконто Тогда
					Прервать;
				КонецЕсли;
				ВидСубконто = СчетУчетаДоходов.ВидыСубконто[НомСубконто-1].ВидСубконто;
				Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
					 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
					 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
					ЕстьСубконтоСтатьяЗатратДоходов = Истина;
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
			Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
				СтруктураОбязательныхПолей.Вставить("ДоходыСубконто" + НомСубконто, НСТР("ru = 'Не заполнено значение субконто: '; uk = 'Не заповнене значення субконто: '") + ВидСубконто);
			КонецЕсли;
		
		КонецЕсли;
		
		//проверим указание субконто для заполнения декларации по прибыли
		Если ЗначениеЗаполнено(СчетУчетаЗатрат)
			И НЕ НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
			
			ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетУчетаЗатрат);
			
			Если ПроизводственныеРасходы Тогда
				СтруктураОбязательныхПолей.Вставить("СтатьяЗатрат");
				СтруктураОбязательныхПолей.Вставить("ПодразделениеОрганизации");
			Иначе	
				ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
				Для НомСубконто = 1 По 3 Цикл
					Если СчетУчетаЗатрат.ВидыСубконто.Количество()<НомСубконто Тогда
						Прервать;
					КонецЕсли;
					
					ВидСубконто = СчетУчетаЗатрат.ВидыСубконто[НомСубконто-1].ВидСубконто;
					Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
						 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
						 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
						ЕстьСубконтоСтатьяЗатратДоходов = Истина;
						Прервать;
					КонецЕсли;
				
				КонецЦикла;
				
				Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
					СтруктураОбязательныхПолей.Вставить("ЗатратыСубконто" + НомСубконто, НСТР("ru = 'Не заполнено значение субконто: '; uk = 'Не заповнене значення субконто: '") + ВидСубконто); 	
				КонецЕсли;
			КонецЕсли;	
		
		КонецЕсли;
		
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоПриобретениям    - таблица значений, содержащая данные для проведения и проверки ТЧ Приобретения
//  ТаблицаПоПродажам         - таблица значений, содержащая данные для проведения и проверки ТЧ Продажи,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый,  
							  ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый, Отказ, Заголовок)
							  
	ДвиженияПоРегистрамПриобретения(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый, Отказ, Заголовок);
							  
	ДвиженияПоРегистрамПродажи(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоДоходамИЗатратам(СтруктураШапкиДокумента, СтрокаТаблицы, СуммаНДС)

	ПроводкиБУ = Движения.Хозрасчетный;
	
	Если СуммаНДС = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаНДС< 0 Тогда
	
		// на доходы
		
		Проводка = ПроводкиБУ.Добавить();
	
		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		
		Проводка.Сумма                      = СуммаНДС;
		
		Проводка.СчетДт						= СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтрокаТаблицы.ДоговорКонтрагента);
		
		Проводка.СчетКт						= СтруктураШапкиДокумента.СчетУчетаДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтруктураШапкиДокумента.ДоходыСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтруктураШапкиДокумента.ДоходыСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3 , СтруктураШапкиДокумента.ДоходыСубконто3);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
			Проводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СуммаНДС);
		КонецЕсли;
		
		Проводка.Содержание					= "Отнесение корректировок на доходы";
		
	Иначе
		
		// на затраты
		
		// по бухгалтерскому учету
		Проводка = ПроводкиБУ.Добавить();
	
		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		
		Проводка.Сумма                      = СуммаНДС;
		
		Проводка.СчетДт						= СтруктураШапкиДокумента.СчетУчетаЗатрат;
		
		ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтруктураШапкиДокумента.СчетУчетаЗатрат);

		Если ПроизводственныеРасходы Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения"       , СтруктураШапкиДокумента.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат"        , СтруктураШапкиДокумента.СтатьяЗатрат);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ЗатратыСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ЗатратыСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ЗатратыСубконто3);
		КонецЕсли;
		
		Проводка.СчетКт						= СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтрокаТаблицы.ДоговорКонтрагента);
		
		Проводка.Содержание					= "Отнесение корректировок на расходы";
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
			Проводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СуммаНДС);
		КонецЕсли;
		
		
		// по регистрам затрат
		ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();

		НоваяСтрока = ТаблицаЗатрат.Добавить();
		
		НоваяСтрока.Подразделение 		 = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		НоваяСтрока.СтатьяЗатрат 		 = СтруктураШапкиДокумента.СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		НоваяСтрока.СчетЗатрат 			 = СтруктураШапкиДокумента.СчетУчетаЗатрат;
		НоваяСтрока.НалоговоеНазначение  = СтрокаТаблицы.НалоговоеНазначение;
		НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
		
		НоваяСтрока.СуммаБух = СуммаНДС;
		НоваяСтрока.СуммаНал = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат, СуммаНДС);

		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			СтруктураШапкиДокумента, 
			ТаблицаЗатрат,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
		);
			
	КонецЕсли; 

КонецПроцедуры
 
Процедура ДвиженияПоРегистрамПриобретения(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый, Отказ, Заголовок);

  	ПроводкиБУ = Движения.Хозрасчетный;
	
	ВсегоКорректировкаНДСКредит = 0;
	
	// Проводки по изменению налогового кредита
	ТаблицаКопияПодтвержденный = ТаблицаПриобретенияПодтвержденный.Скопировать();
	ТаблицаКопияПодтвержденный.Свернуть("ВидОстатка,СчетУчетаНДС,СобытиеНДС,Контрагент,ДоговорКонтрагента,Сделка","СуммаНДС");
	
	Для Каждого СтрокаТаблицыПодтвержденный Из ТаблицаКопияПодтвержденный Цикл
		
		// тут суммы отрицательные 
		
		ПроводкаНДСКредит = СтрокаТаблицыПодтвержденный.СуммаНДС;
		
		Если СтрокаТаблицыПодтвержденный.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат Тогда
			ПроводкаНДСКредит = - ПроводкаНДСКредит;
		КонецЕсли; 
		
		Если ПроводкаНДСКредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// делаем "сторно" налогового кредита 
		ВсегоКорректировкаНДСКредит = ВсегоКорректировкаНДСКредит + ПроводкаНДСКредит;
		
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = ПроводкаНДСКредит;
		Проводка.Содержание                 = "НДС кредит, корректировка по неправильному оформлению";
		Проводка.НомерЖурнала               = "";

		Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаКорректировкиНДСКредит;

		Проводка.СчетКт                     = СтрокаТаблицыПодтвержденный.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицыПодтвержденный.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицыПодтвержденный.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   ,   СтрокаТаблицыПодтвержденный.Сделка);
			
	КонецЦикла;
	
	ТаблицаКопияОжидаемый = ТаблицаПриобретенияОжидаемый.Скопировать();
	ТаблицаКопияОжидаемый.Свернуть("ВидОстатка,СчетУчетаНДС,СобытиеНДС,Контрагент,ДоговорКонтрагента,Сделка,НалоговоеНазначение","СуммаНДС");
	
	Для Каждого СтрокаТаблицыОжидаемый Из ТаблицаКопияОжидаемый Цикл
		
		ПроводкаНДСКредит = СтрокаТаблицыОжидаемый.СуммаНДС;
		
		Если СтрокаТаблицыОжидаемый.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат Тогда
			ПроводкаНДСКредит = - ПроводкаНДСКредит;
		КонецЕсли; 
		
		Если ПроводкаНДСКредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицыОжидаемый.ВидОстатка = Перечисления.ВидыОстатковНДСПриобретенийОжидаемый.ПравильнаяРегистрация Тогда
			
			ВсегоКорректировкаНДСКредит = ВсегоКорректировкаНДСКредит + ПроводкаНДСКредит;
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = ПроводкаНДСКредит;
			Проводка.Содержание                 = "НДС кредит, корректировка";
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаКорректировкиНДСКредит;
			
			Проводка.СчетКт                     = СтрокаТаблицыОжидаемый.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицыОжидаемый.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицыОжидаемый.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   ,   СтрокаТаблицыОжидаемый.Сделка);
			
		ИначеЕсли СтрокаТаблицыОжидаемый.ВидОстатка = Перечисления.ВидыОстатковНДСПриобретенийОжидаемый.НеБудутПолучены  Тогда
			
			ДвиженияПоДоходамИЗатратам(СтруктураШапкиДокумента, СтрокаТаблицыОжидаемый, ПроводкаНДСКредит);
			
		КонецЕсли;

	КонецЦикла;
	
	// откорректируем регистр ОжидаемыйИПодтвержденныйНДСПриобретений
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаКопияПодтвержденный = ТаблицаПриобретенияПодтвержденный.Скопировать();
	ТаблицаКопияПодтвержденный.Свернуть("ДоговорКонтрагента, Сделка, СобытиеНДС,СтавкаНДС, ВозвратнаяТара, НалоговоеНазначение, Амортизируется", "БазаНДС,СуммаНДС");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопияПодтвержденный, ТаблицаДвижений);
	
	ТаблицаКопияОжидаемый = ТаблицаПриобретенияОжидаемый.Скопировать();
	ТаблицаКопияОжидаемый.Свернуть("ДоговорКонтрагента, Сделка, СобытиеНДС,СтавкаНДС, ВозвратнаяТара, НалоговоеНазначение, Амортизируется", "БазаНДС,СуммаНДС");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопияОжидаемый, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.КорректировкаНеправильноОформленныхНалоговыхДокументов,  "КодОперации");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьРасход();
	
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамПриобретения()

Процедура ДвиженияПоРегистрамПродажи(РежимПроведения, СтруктураШапкиДокумента, 
	                           ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый, Отказ, Заголовок);

							   
  	ПроводкиБУ = Движения.Хозрасчетный;
	
	// Проводки по изменению налогового кредита
	ТаблицаКопияПодтвержденный = ТаблицаПродажиПодтвержденный.Скопировать();
	ТаблицаКопияПодтвержденный.Свернуть("СчетУчетаНДС,СобытиеНДС,Контрагент,ДоговорКонтрагента,Сделка","СуммаНДС");
	
	Для Каждого СтрокаТаблицыПодтвержденный Из ТаблицаКопияПодтвержденный Цикл
		
		// тут суммы отрицательные 
		
		ПроводкаНДСОбязательства = СтрокаТаблицыПодтвержденный.СуммаНДС;
		
		Если СтрокаТаблицыПодтвержденный.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат Тогда
			ПроводкаНДСОбязательства = - ПроводкаНДСОбязательства;
		КонецЕсли; 
		
		Если ПроводкаНДСОбязательства = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// делаем "сторно" налогового кредита 
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = ПроводкаНДСОбязательства;
		Проводка.Содержание                 = "НДС обязательства, корректировка по неправильному оформлению";
		Проводка.НомерЖурнала               = "";

		Проводка.СчетДт                     = СтрокаТаблицыПодтвержденный.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицыПодтвержденный.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицыПодтвержденный.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , СтрокаТаблицыПодтвержденный.Сделка);
		
		Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.НДССубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.НДССубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.НДССубконто3);

	КонецЦикла;
	
	ТаблицаКопияОжидаемый = ТаблицаПродажиОжидаемый.Скопировать();
	ТаблицаКопияОжидаемый.Свернуть("СчетУчетаНДС,СобытиеНДС,Контрагент,ДоговорКонтрагента,Сделка","СуммаНДС");
	
	Для Каждого СтрокаТаблицыОжидаемый Из ТаблицаКопияОжидаемый Цикл
		
		ПроводкаНДСОбязательства = СтрокаТаблицыОжидаемый.СуммаНДС;
		
		Если СтрокаТаблицыОжидаемый.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат Тогда
			ПроводкаНДСОбязательства = - ПроводкаНДСОбязательства;
		КонецЕсли; 
		
		Если ПроводкаНДСОбязательства = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = ПроводкаНДСОбязательства;
		Проводка.Содержание                 = "НДС обязательства, корректировка";
		Проводка.НомерЖурнала               = "";

		Проводка.СчетДт                     = СтрокаТаблицыОжидаемый.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицыОжидаемый.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицыОжидаемый.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , СтрокаТаблицыОжидаемый.Сделка);
			
		Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.НДССубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.НДССубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.НДССубконто3);
			
	КонецЦикла;
	
	// откорректируем регистр ОжидаемыйИПодтвержденныйНДСПродаж
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// ТОВАРЫ
	ТаблицаКопияПодтвержденный = ТаблицаПродажиПодтвержденный.Скопировать();
	ТаблицаКопияПодтвержденный.Свернуть("ДоговорКонтрагента, Сделка, СобытиеНДС,СтавкаНДС,ВозвратнаяТара, НалоговоеНазначение", "БазаНДС, СуммаНДС");
	ТаблицаКопияОжидаемый = ТаблицаПродажиОжидаемый.Скопировать();
	ТаблицаКопияОжидаемый.Свернуть("ДоговорКонтрагента, Сделка, СобытиеНДС,СтавкаНДС,ВозвратнаяТара, НалоговоеНазначение", "БазаНДС,СуммаНДС");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопияПодтвержденный, ТаблицаДвижений);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопияОжидаемый	 , ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.КорректировкаНеправильноОформленныхНалоговыхДокументов,  "КодОперации");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьРасход();
	
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамПродажи()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Прежде всего, проверим заполнение реквизита Организация в шапке документа
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	// Теперь позовем общую процедуру проверки
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	// Организация не заполнена, получать учетную политику нет смысла
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация, , Заголовок);
	
	Если НЕ Отказ Тогда
	
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитикаНУ.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитикаНУ.ЕстьНДС);
	
	КонецЕсли; 
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ПриобретенияУвеличение".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("Контрагент"                           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорОрганизация"                   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовРегл"            , "ДоговорКонтрагента.ВедениеВзаиморасчетовРегл");
	СтруктураПолей.Вставить("Сделка"            				   , "Сделка");
	СтруктураПолей.Вставить("ВозвратнаяТара"                       , "ВозвратнаяТара");
	СтруктураПолей.Вставить("СобытиеНДС"                           , "СобытиеНДС");
	СтруктураПолей.Вставить("СтавкаНДС"                  		   , "СтавкаНДС");
	СтруктураПолей.Вставить("НалоговоеНазначение"         		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("Амортизируется"             		   , "Амортизируется");
	СтруктураПолей.Вставить("БазаНДС"                          	   , "БазаНДС");
	СтруктураПолей.Вставить("СуммаНДС"                             , "СуммаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"                         , "СчетУчетаНДС");
	СтруктураПолей.Вставить("ВидОстатка"                           , "ВидОстатка");
	
	РезультатЗапросаПриобретенияПодтвержденный 	= УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПриобретенияПодтвержденный", СтруктураПолей);
	// табличные части с одинаковой структурой
	РезультатЗапросаПриобретенияОжидаемый 		= УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПриобретенияОжидаемый", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Продажи...".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("Контрагент"                           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорОрганизация"                   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовРегл"            , "ДоговорКонтрагента.ВедениеВзаиморасчетовРегл");
	СтруктураПолей.Вставить("Сделка"            				   , "Сделка");
	СтруктураПолей.Вставить("ВозвратнаяТара"                       , "ВозвратнаяТара");
	СтруктураПолей.Вставить("СобытиеНДС"                           , "СобытиеНДС");
	СтруктураПолей.Вставить("СтавкаНДС"                  		   , "СтавкаНДС");
	СтруктураПолей.Вставить("НалоговоеНазначение"         		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("СчетУчетаНДС"                         , "СчетУчетаНДС");
	СтруктураПолей.Вставить("БазаНДС"                          	   , "БазаНДС");
	СтруктураПолей.Вставить("СуммаНДС"                             , "СуммаНДС");
	СтруктураПолей.Вставить("ВидОстатка"                           , "ВидОстатка");
	
	РезультатЗапросаПродажиПодтвержденный 	= УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПродажиПодтвержденный", СтруктураПолей);
	// табличные части с одинаковой структурой
	РезультатЗапросаПродажиОжидаемый 		= УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПродажиОжидаемый"		, СтруктураПолей);
	
	// Подготовим таблицы для проведения.
	ТаблицаПриобретенияПодтвержденный  	= ПодготовитьТаблицуПриобретения(РезультатЗапросаПриобретенияПодтвержденный	, СтруктураШапкиДокумента, Истина);
	ТаблицаПриобретенияОжидаемый      	= ПодготовитьТаблицуПриобретения(РезультатЗапросаПриобретенияОжидаемый		, СтруктураШапкиДокумента, Ложь	 );
	
	// Подготовим таблицы для проведения.
	ТаблицаПродажиПодтвержденный     	= ПодготовитьТаблицуПродажи(РезультатЗапросаПродажиПодтвержденный	, СтруктураШапкиДокумента, Истина);
	ТаблицаПродажиОжидаемый      		= ПодготовитьТаблицуПродажи(РезультатЗапросаПродажиОжидаемый		, СтруктураШапкиДокумента, Ложь	 );
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиПриобретения(ТаблицаПриобретенияПодтвержденный	, СтруктураШапкиДокумента, Отказ, Заголовок, Истина);
	ПроверитьЗаполнениеТабличнойЧастиПриобретения(ТаблицаПриобретенияОжидаемый		, СтруктураШапкиДокумента, Отказ, Заголовок, Ложь  );
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиПродажи(ТаблицаПродажиПодтвержденный	, СтруктураШапкиДокумента, Отказ, Заголовок, Истина);
	ПроверитьЗаполнениеТабличнойЧастиПродажи(ТаблицаПродажиОжидаемый		, СтруктураШапкиДокумента, Отказ, Заголовок, Ложь  );
	
	// проверки на соответсвие сумм между табличными частями
	ПроверитьСоответсвиеСуммПоИзмерениямПриобретения(ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый, Отказ, Заголовок);
	ПроверитьСоответсвиеСуммПоИзмерениямПродажи(ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПриобретенияПодтвержденный, ТаблицаПриобретенияОжидаемый, 
							ТаблицаПродажиПодтвержденный, ТаблицаПродажиОжидаемый, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
