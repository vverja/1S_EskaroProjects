Перем мУдалятьДвижения;

Перем мУчетнаяПолитикаРегл Экспорт;                 // (Общ)

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мСодержаниеПроводки;
Перем Заголовок;
Перем СтруктураШапкиДокумента;

Перем ИспользоватьРасширеннуюАналитику Экспорт;

Перем мМассивСчетовТребующихУчетаКМС Экспорт; // Список счетов требующих учета коэффициента мат.составляющей

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ПолучитьСодержаниеПроводки(РазделУчета)
	
	Возврат НСтр("ru='Корректировка остатков НКУ на 01.04.2011 по разделу: ';uk='Коригування залишків ПКУ 01.04.2011 по розділу: '") + """" + РазделУчета + """.";
	
КонецФункции

Процедура ПолучитьУчетнуюПолитику() Экспорт

	мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата + 24*60*60, Организация);
				
КонецПроцедуры // ПолучитьУчетнуюПолитику()

Функция ПолучитьНалоговоеНазначениеНКУ(НалоговоеНазначение) Экспорт
	
	НалоговоеНазначениеНКУ = НалоговоеНазначение;
	Если НалоговоеНазначениеНКУ.ГруппаНалоговогоНазначения = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоНКУ Тогда
		Если НалоговоеНазначениеНКУ.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда
			НалоговоеНазначениеНКУ = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
		ИначеЕсли НалоговоеНазначениеНКУ.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.НеОблагаемая Тогда
			НалоговоеНазначениеНКУ = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		Иначе
			НалоговоеНазначениеНКУ = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НалоговоеНазначениеНКУ;
	
КонецФункции

Функция ПолучитьНалоговоеНазначениеСтроки(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ОС Тогда
		// Для ОС можно установить хоз/нехоз налоговое назначение, даже если организация не плательщик НДС
		Возврат ТекущиеДанные.НалоговоеНазначение;
		
	ИначеЕсли Не мУчетнаяПолитикаРегл.ЕстьНДС Тогда
		//  Для всех остальных, кроме ОС, принудительно ставим
		Возврат Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
	КонецЕсли;
	
	
	Возврат ТекущиеДанные.НалоговоеНазначение;
	
КонецФункции

Функция ПолучитьСуммуНУСтроки(ТекущиеДанные) Экспорт
	
	Если СуммаНУВсегдаНулевая(ТекущиеДанные) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ТекущиеДанные.СуммаНУ;
	
КонецФункции

Функция ПолучитьБалансовуюСтоимостьНУСтрокиОСНМА(ТекущиеДанные) Экспорт
	
	Если СуммаНУВсегдаНулевая(ТекущиеДанные) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ТекущиеДанные.БалансоваяСтоимостьНУ;
	
КонецФункции

Функция СуммаНУВсегдаНулевая(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Расходы по малоченке отражаются при вводе в эксплуатацию
		
	НалоговоеНазначение = ПолучитьНалоговоеНазначениеСтроки(ТекущиеДанные);
	
	Если НалоговоеНазначение.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьСуммыНУВТабличнойЧасти(ТаблинаяЧасть)
	
	Для Каждого Строка Из ТаблинаяЧасть Цикл
		ЗаполнитьСуммуНУВСтроке(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуНУВСтроке(ТекущиеДанные) Экспорт
	
	СуммаБУ = ТекущиеДанные.Сумма;
	
	Если СуммаНУВсегдаНулевая(ТекущиеДанные) Тогда
		ТекущиеДанные.СуммаНУ = 0;
	ИначеЕсли мМассивСчетовТребующихУчетаКМС.Найти(ТекущиеДанные.СчетУчета) <> Неопределено Тогда		
		ТекущиеДанные.СуммаНУ = СуммаБУ*КоэффициентМатериальнойСоставляющей; // НУ = БУ*КМС
    Иначе
		ТекущиеДанные.СуммаНУ = СуммаБУ; // НУ = БУ
	КонецЕсли;

КонецПроцедуры


Функция ПолучитьИнвентарныйНомерОС(ОсновноеСредство) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ИнвентарныйНомер;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции


// Формирует движения по регистрам
// СтруктураКурсыВалют - структура, содержащая курсы необходимых для расчетов валют.
//
Процедура ДвиженияПоРегистрам(СтруктураКурсыВалют)
	
	
КонецПроцедуры// ДвиженияПоРегистрам()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Истина);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	//проверка заполнения шапки
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("РазделУчета");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	// Получим данные учетной политики
	ПолучитьУчетнуюПолитику();
	Если ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль", мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"           , мУчетнаяПолитикаРегл.ЕстьНДС);	
	КонецЕсли;
	
	мСодержаниеПроводки = ПолучитьСодержаниеПроводки(СтруктураШапкиДокумента.РазделУчета);
	
	Если РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ОС Тогда
		ОбработкаПроведения_ОсновныеСредства(Отказ);
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.НМА Тогда
		ОбработкаПроведения_НематериальныеАктивы(Отказ);
	Иначе
		ОбработкаПроведения_ЗатратыЗапасы(Отказ);
	КонецЕсли;	
		
		
КонецПроцедуры

Процедура ОбработкаПроведения_ЗатратыЗапасы(Отказ)
	
	Если ИспользоватьРасширеннуюАналитику Тогда
		ОбработкаПроведения_ЗатратыЗапасыРАУЗ(Отказ);
		Возврат;	
	КонецЕсли;	
	
	НалУчет    =  СтруктураШапкиДокумента.ЕстьНалогНаПрибыль;
	НалУчетОбщ = (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС);	
	
	//проверка заполнения табличной части
	СтруктураОбязательныхПолей = Новый Структура;
	Если НалУчетОбщ тогда
		СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеРегистров", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ТаблицаОбъединенная = ДанныеРегистров.Выгрузить();
	
	Если РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ЗапасыПереданные Тогда
		
		ТаблицаОбъединенная.Колонки.Сумма.Имя 	= "Стоимость";
		ТаблицаОбъединенная.Колонки.СуммаНУ.Имя = "СтоимостьНУ";
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.Удалить("НДСВходящий");
		ТаблицаБУСтарая.Колонки.Удалить("НДСКредит");
		ТаблицаБУСтарая.Колонки.Удалить("СтоимостьНУ");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииТоваровПереданныеБухгалтерскийУчет, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииТоваровПереданныеБухгалтерскийУчет, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаОбъединенная), Дата);
		
		ТаблицаОбъединенная.Колонки.Стоимость.Имя 	= "Сумма";
		ТаблицаОбъединенная.Колонки.СтоимостьНУ.Имя = "СуммаНУ";
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.ДоговорКонтрагента.Владелец);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.ДоговорКонтрагента.Владелец);
			
		КонецЦикла;	
		
		// ТоварыОрганизацийРегл
		Если ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(Дата) Тогда
			
			ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
			ТаблицаБУСтарая.Колонки.СчетУчета.Имя 	= "СчетУчетаБУ";
			ТаблицаБУСтарая.Колонки.Контрагент.Имя 	= "Комиссионер";
			ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
			ТаблицаБУСтарая.Колонки.НалоговоеНазначениеСтарое.Имя 	= "НалоговоеНазначение";
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
			
			ТаблицаБУНовая = ТаблицаОбъединенная.Скопировать();
			ТаблицаБУНовая.Колонки.СчетУчета.Имя 	= "СчетУчетаБУ";
			ТаблицаБУНовая.Колонки.Контрагент.Имя 	= "Комиссионер";
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаБУНовая), Дата);

		КонецЕсли; 
		
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ЗапасыНаСкладах Тогда	
		
		ТаблицаОбъединенная.Колонки.Сумма.Имя 	= "Стоимость";
		ТаблицаОбъединенная.Колонки.СуммаНУ.Имя = "СтоимостьНУ";
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.Удалить("НДСВходящий");
		ТаблицаБУСтарая.Колонки.Удалить("НДСКредит");
		ТаблицаБУСтарая.Колонки.Удалить("СтоимостьНУ");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииТоваровНаСкладахБухгалтерскийУчет, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииТоваровНаСкладахБухгалтерскийУчет, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаОбъединенная), Дата);
		
		ТаблицаОбъединенная.Колонки.Стоимость.Имя 	= "Сумма";
		ТаблицаОбъединенная.Колонки.СтоимостьНУ.Имя = "СуммаНУ";
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаТаблицы.Склад);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаТаблицы.Склад);
				
		КонецЦикла;	
		
		// ТоварыОрганизацийРегл
		Если ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(Дата) Тогда
			
			ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
			ТаблицаБУСтарая.Колонки.СчетУчета.Имя 	= "СчетУчетаБУ";
			ТаблицаБУСтарая.Колонки.Контрагент.Имя 	= "Комиссионер";
			ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
			ТаблицаБУСтарая.Колонки.НалоговоеНазначениеСтарое.Имя 	= "НалоговоеНазначение";
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
			
			ТаблицаБУНовая = ТаблицаОбъединенная.Скопировать();
			ТаблицаБУНовая.Колонки.СчетУчета.Имя 	= "СчетУчетаБУ";
			ТаблицаБУНовая.Колонки.Контрагент.Имя 	= "Комиссионер";
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаБУНовая), Дата);

		КонецЕсли; 
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.КапитальныеИнвестиции Тогда	
		
		ТаблицаОбъединенная.Колонки.Сумма.Имя 	= "Стоимость";
		ТаблицаОбъединенная.Колонки.СуммаНУ.Имя = "СтоимостьНУ";
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("СчетУчета");
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.НалоговоеНазначениеСтарое.Имя = "НалоговоеНазначение";
		
		ТаблицаБУСтарая.Колонки.Удалить("Стоимость");
		ТаблицаБУСтарая.Колонки.Удалить("СтоимостьНУ");
		ТаблицаБУСтарая.Колонки.СуммаНУСтарая.Имя = "СтоимостьНУ";
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаОбъединенная), Дата);
		
		ТаблицаОбъединенная.Колонки.Стоимость.Имя 	= "Сумма";
		ТаблицаОбъединенная.Колонки.СтоимостьНУ.Имя = "СуммаНУ";
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы.ОбъектСтроительства);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтрокаТаблицы.ОбъектСтроительства);
				
		КонецЦикла;			
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.РасходыБудущихПериодов Тогда	
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыБудущихПериодов", СтрокаТаблицы.РБП);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыБудущихПериодов", СтрокаТаблицы.РБП);
				
		КонецЦикла;			
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ПартииМатериаловВЭксплуатации Тогда
			
		ТаблицаОбъединенная.Колонки.Сумма.Имя 	= "Стоимость";
		ТаблицаОбъединенная.Колонки.СуммаНУ.Имя = "СтоимостьНУ";
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.Удалить("НДСВходящий");
		ТаблицаБУСтарая.Колонки.Удалить("НДСКредит");
		ТаблицаБУСтарая.Колонки.Удалить("СтоимостьНУ");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаОбъединенная), Дата);
		
		ТаблицаОбъединенная.Колонки.Стоимость.Имя 	= "Сумма";
		ТаблицаОбъединенная.Колонки.СтоимостьНУ.Имя = "СуммаНУ";
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Если СтрокаТаблицы.ВидМатериала = Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда
				Продолжить;
			КонецЕсли;	
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы, "СчетПередачиБУ");
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы, "СчетАмортизацииБУ");
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			
			
		КонецЦикла;	
		
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ТЗР Тогда	
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.Удалить("НДСВходящий");
		ТаблицаБУСтарая.Колонки.Удалить("НДСКредит");
		ТаблицаБУСтарая.Колонки.Удалить("СуммаНУ");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗатратыБухгалтерскийУчет, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗатратыБухгалтерскийУчет, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаОбъединенная), Дата);
		
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
				
		КонецЦикла;		
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.БракВПроизводстве Тогда	
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.Удалить("НДСВходящий");
		ТаблицаБУСтарая.Колонки.Удалить("НДСКредит");
		ТаблицаБУСтарая.Колонки.Удалить("СуммаНУ");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.БракВПроизводствеБухгалтерскийУчет, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.БракВПроизводствеБухгалтерскийУчет, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаОбъединенная), Дата);
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
		КонецЦикла;	
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.НезавершенноеПроизводство Тогда	
		
		ТаблицаОбъединенная.Колонки.Сумма.Имя 	= "Стоимость";
		ТаблицаОбъединенная.Колонки.СуммаНУ.Имя = "СтоимостьНУ";
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.Удалить("НДСВходящий");
		ТаблицаБУСтарая.Колонки.Удалить("НДСКредит");
		ТаблицаБУСтарая.Колонки.Удалить("СтоимостьНУ");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.НезавершенноеПроизводствоБухгалтерскийУчет, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.НезавершенноеПроизводствоБухгалтерскийУчет, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаОбъединенная), Дата);
		
		ТаблицаОбъединенная.Колонки.Стоимость.Имя 	= "Сумма";
		ТаблицаОбъединенная.Колонки.СтоимостьНУ.Имя = "СуммаНУ";
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
		КонецЦикла;			
	КонецЕсли;	
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаПроведения_ЗатратыЗапасыРАУЗ(Отказ)
	
	НалУчет    =  СтруктураШапкиДокумента.ЕстьНалогНаПрибыль;
	НалУчетОбщ = (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС);	
	
	//проверка заполнения табличной части
	СтруктураОбязательныхПолей = Новый Структура;
	Если НалУчетОбщ тогда
		СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеРегистров", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ТаблицаОбъединенная = ДанныеРегистров.Выгрузить();
	
	Если РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ЗапасыПереданные Тогда
		
		///////////////////////////////////////////////////////////////////////
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.НалоговоеНазначениеСтарое.Имя 	= "НалоговоеНазначение";
		
		ТаблицаБУСтарая.Колонки.Удалить("СтатьяЗатрат");
		
		ТаблицаБУСтарая.Колонки.Удалить("Затрата");
		ТаблицаБУСтарая.Колонки.Удалить("ХарактеристикаЗатраты");
		ТаблицаБУСтарая.Колонки.Удалить("СерияЗатраты");
		
		ТаблицаБУСтарая.Колонки.Номенклатура.Имя 				= "Затрата";
		ТаблицаБУСтарая.Колонки.ХарактеристикаНоменклатуры.Имя 	= "ХарактеристикаЗатраты";
		ТаблицаБУСтарая.Колонки.СерияНоменклатуры.Имя 			= "СерияЗатраты";
		
		ТаблицаБУСтарая.Колонки.РазделУчетаРАУЗ.Имя 			= "РазделУчета";
		
		ТаблицаБУСтарая.Колонки.Сумма.Имя 						= "Стоимость";
		
		ТаблицаБУСтарая.Колонки.СтоимостьНУРАУЗ.Имя 			= "СтоимостьНУ";
		ТаблицаБУСтарая.Колонки.КоличествоНУРАУЗ.Имя 			= "КоличествоНУ";
		
		ТаблицаБУСтарая.Колонки.Контрагент.Имя 					= "Комиссионер";
		ТаблицаБУСтарая.Колонки.ДоговорКонтрагента.Имя 			= "ДоговорКомиссионера";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУСтарая, Дата, ВидДвиженияНакопления.Расход);
		
		ТаблицаБУНовая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУНовая.Колонки.Удалить("СчетУчетаНУ");

		ТаблицаБУНовая.Колонки.Удалить("СтатьяЗатрат");
		
		ТаблицаБУНовая.Колонки.Удалить("Затрата");
		ТаблицаБУНовая.Колонки.Удалить("ХарактеристикаЗатраты");
		ТаблицаБУНовая.Колонки.Удалить("СерияЗатраты");
		
		ТаблицаБУНовая.Колонки.Номенклатура.Имя 				= "Затрата";
		ТаблицаБУНовая.Колонки.ХарактеристикаНоменклатуры.Имя 	= "ХарактеристикаЗатраты";
		ТаблицаБУНовая.Колонки.СерияНоменклатуры.Имя 			= "СерияЗатраты";
		
		ТаблицаБУНовая.Колонки.РазделУчетаРАУЗ.Имя 				= "РазделУчета";
		
		ТаблицаБУНовая.Колонки.Сумма.Имя 						= "Стоимость";
		
		ТаблицаБУНовая.Колонки.СуммаНУ.Имя 						= "СтоимостьНУ";
		ТаблицаБУНовая.Колонки.КоличествоНУРАУЗ.Имя 			= "КоличествоНУ";
		
		ТаблицаБУНовая.Колонки.Контрагент.Имя 					= "Комиссионер";
		ТаблицаБУНовая.Колонки.ДоговорКонтрагента.Имя 			= "ДоговорКомиссионера";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУНовая, Дата, ВидДвиженияНакопления.Приход);
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.ДоговорКонтрагента.Владелец);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.ДоговорКонтрагента.Владелец);
			
		КонецЦикла;	
		
		// ТоварыОрганизацийРегл
		Если ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(Дата) Тогда
			
			ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
			ТаблицаБУСтарая.Колонки.СчетУчета.Имя 	= "СчетУчетаБУ";
			ТаблицаБУСтарая.Колонки.Контрагент.Имя 	= "Комиссионер";
			ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
			ТаблицаБУСтарая.Колонки.НалоговоеНазначениеСтарое.Имя 	= "НалоговоеНазначение";
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
			
			ТаблицаБУНовая = ТаблицаОбъединенная.Скопировать();
			ТаблицаБУНовая.Колонки.СчетУчета.Имя 	= "СчетУчетаБУ";
			ТаблицаБУНовая.Колонки.Контрагент.Имя 	= "Комиссионер";
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаБУНовая), Дата);

		КонецЕсли; 
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ЗапасыНаСкладах Тогда	

		///////////////////////////////////////////////////////////////////////
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.НалоговоеНазначениеСтарое.Имя 	= "НалоговоеНазначение";
		
		ТаблицаБУСтарая.Колонки.Удалить("СтатьяЗатрат");
		
		ТаблицаБУСтарая.Колонки.Удалить("Затрата");
		ТаблицаБУСтарая.Колонки.Удалить("ХарактеристикаЗатраты");
		ТаблицаБУСтарая.Колонки.Удалить("СерияЗатраты");
		
		ТаблицаБУСтарая.Колонки.Номенклатура.Имя = "Затрата";
		ТаблицаБУСтарая.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаЗатраты";
		ТаблицаБУСтарая.Колонки.СерияНоменклатуры.Имя = "СерияЗатраты";
		
		ТаблицаБУСтарая.Колонки.РазделУчетаРАУЗ.Имя 	= "РазделУчета";
		
		ТаблицаБУСтарая.Колонки.Сумма.Имя 	= "Стоимость";
		
		ТаблицаБУСтарая.Колонки.СтоимостьНУРАУЗ.Имя 	= "СтоимостьНУ";
		ТаблицаБУСтарая.Колонки.КоличествоНУРАУЗ.Имя 	= "КоличествоНУ";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУСтарая, Дата, ВидДвиженияНакопления.Расход);
		
		ТаблицаБУНовая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУНовая.Колонки.Удалить("СчетУчетаНУ");

		ТаблицаБУНовая.Колонки.Удалить("СтатьяЗатрат");
		
		ТаблицаБУНовая.Колонки.Удалить("Затрата");
		ТаблицаБУНовая.Колонки.Удалить("ХарактеристикаЗатраты");
		ТаблицаБУНовая.Колонки.Удалить("СерияЗатраты");
		
		ТаблицаБУНовая.Колонки.Номенклатура.Имя = "Затрата";
		ТаблицаБУНовая.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаЗатраты";
		ТаблицаБУНовая.Колонки.СерияНоменклатуры.Имя = "СерияЗатраты";
		
		ТаблицаБУНовая.Колонки.РазделУчетаРАУЗ.Имя 	= "РазделУчета";
		
		ТаблицаБУНовая.Колонки.Сумма.Имя 	= "Стоимость";
		
		ТаблицаБУНовая.Колонки.СуммаНУ.Имя 	= "СтоимостьНУ";
		ТаблицаБУНовая.Колонки.КоличествоНУРАУЗ.Имя 	= "КоличествоНУ";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУНовая, Дата, ВидДвиженияНакопления.Приход);
		
		
		///////////////////////////////////////////////////////////////////////
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаТаблицы.Склад);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаТаблицы.Склад);
				
		КонецЦикла;	
		
		// ТоварыОрганизацийРегл
		Если ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(Дата) Тогда
			
			ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
			ТаблицаБУСтарая.Колонки.СчетУчета.Имя 	= "СчетУчетаБУ";
			ТаблицаБУСтарая.Колонки.Контрагент.Имя 	= "Комиссионер";
			ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
			ТаблицаБУСтарая.Колонки.НалоговоеНазначениеСтарое.Имя 	= "НалоговоеНазначение";
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
			
			ТаблицаБУНовая = ТаблицаОбъединенная.Скопировать();
			ТаблицаБУНовая.Колонки.СчетУчета.Имя 	= "СчетУчетаБУ";
			ТаблицаБУНовая.Колонки.Контрагент.Имя 	= "Комиссионер";
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаБУНовая), Дата);

		КонецЕсли; 
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.КапитальныеИнвестиции Тогда	
		
		ТаблицаОбъединенная.Колонки.Сумма.Имя 	= "Стоимость";
		ТаблицаОбъединенная.Колонки.СуммаНУ.Имя = "СтоимостьНУ";
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("СчетУчета");
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.НалоговоеНазначениеСтарое.Имя = "НалоговоеНазначение";
		
		ТаблицаБУСтарая.Колонки.Удалить("Стоимость");
		ТаблицаБУСтарая.Колонки.Удалить("СтоимостьНУ");
		ТаблицаБУСтарая.Колонки.СуммаНУСтарая.Имя = "СтоимостьНУ";
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет, ВидДвиженияНакопления.Расход, Новый Структура("Таблица", ТаблицаБУСтарая), Дата);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет, ВидДвиженияНакопления.Приход, Новый Структура("Таблица", ТаблицаОбъединенная), Дата);
		
		ТаблицаОбъединенная.Колонки.Стоимость.Имя 	= "Сумма";
		ТаблицаОбъединенная.Колонки.СтоимостьНУ.Имя = "СуммаНУ";
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы.ОбъектСтроительства);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтрокаТаблицы.ОбъектСтроительства);
				
		КонецЦикла;		
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.РасходыБудущихПериодов Тогда	
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыБудущихПериодов", СтрокаТаблицы.РБП);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыБудущихПериодов", СтрокаТаблицы.РБП);
				
		КонецЦикла;			
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ПартииМатериаловВЭксплуатации Тогда
		
		///////////////////////////////////////////////////////////////////////
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		
		ТаблицаБУСтарая.Колонки.Удалить("СтатьяЗатрат");
		
		ТаблицаБУСтарая.Колонки.Удалить("Затрата");
		ТаблицаБУСтарая.Колонки.Удалить("ХарактеристикаЗатраты");
		ТаблицаБУСтарая.Колонки.Удалить("СерияЗатраты");
		
		ТаблицаБУСтарая.Колонки.Номенклатура.Имя = "Затрата";
		ТаблицаБУСтарая.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаЗатраты";
		ТаблицаБУСтарая.Колонки.СерияНоменклатуры.Имя = "СерияЗатраты";
		
		ТаблицаБУСтарая.Колонки.Подразделение.Имя 		= "ПодразделениеОрганизации";
		
		ТаблицаБУСтарая.Колонки.РазделУчетаРАУЗ.Имя 	= "РазделУчета";
		
		ТаблицаБУСтарая.Колонки.Сумма.Имя 	= "Стоимость";
		
		ТаблицаБУСтарая.Колонки.СтоимостьНУРАУЗ.Имя 	= "СтоимостьНУ";
		ТаблицаБУСтарая.Колонки.КоличествоНУРАУЗ.Имя 	= "КоличествоНУ";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУСтарая, Дата, ВидДвиженияНакопления.Расход);
		
		ТаблицаБУНовая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУНовая.Колонки.Удалить("СчетУчетаНУ");

		ТаблицаБУНовая.Колонки.Удалить("СтатьяЗатрат");
		
		ТаблицаБУНовая.Колонки.Удалить("Затрата");
		ТаблицаБУНовая.Колонки.Удалить("ХарактеристикаЗатраты");
		ТаблицаБУНовая.Колонки.Удалить("СерияЗатраты");
		
		ТаблицаБУНовая.Колонки.Номенклатура.Имя = "Затрата";
		ТаблицаБУНовая.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаЗатраты";
		ТаблицаБУНовая.Колонки.СерияНоменклатуры.Имя = "СерияЗатраты";
		
		ТаблицаБУНовая.Колонки.Подразделение.Имя 	= "ПодразделениеОрганизации";
		
		ТаблицаБУНовая.Колонки.РазделУчетаРАУЗ.Имя 	= "РазделУчета";
		
		ТаблицаБУНовая.Колонки.Сумма.Имя 	= "Стоимость";
		
		ТаблицаБУНовая.Колонки.СуммаНУ.Имя 	= "СтоимостьНУ";
		ТаблицаБУНовая.Колонки.КоличествоНУРАУЗ.Имя 	= "КоличествоНУ";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУНовая, Дата, ВидДвиженияНакопления.Приход);
		
		
		///////////////////////////////////////////////////////////////////////
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Если СтрокаТаблицы.ВидМатериала = Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда
				Продолжить;
			КонецЕсли;	
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы, "СчетПередачиБУ");
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы, "СчетАмортизацииБУ");
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
			
			
		КонецЦикла;	
		
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ТЗР Тогда	
		
		///////////////////////////////////////////////////////////////////////
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.НалоговоеНазначениеСтарое.Имя 	= "НалоговоеНазначение";
		
		ТаблицаБУСтарая.Колонки.РазделУчетаРАУЗ.Имя 			= "РазделУчета";
		
		ТаблицаБУСтарая.Колонки.Подразделение.Имя 				= "ПодразделениеОрганизации";
		
		ТаблицаБУСтарая.Колонки.Сумма.Имя 						= "Стоимость";
		
		ТаблицаБУСтарая.Колонки.СтоимостьНУРАУЗ.Имя 			= "СтоимостьНУ";
		ТаблицаБУСтарая.Колонки.КоличествоНУРАУЗ.Имя 			= "КоличествоНУ";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУСтарая, Дата, ВидДвиженияНакопления.Расход);
		
		ТаблицаБУНовая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУНовая.Колонки.Удалить("СчетУчетаНУ");

		ТаблицаБУНовая.Колонки.РазделУчетаРАУЗ.Имя 				= "РазделУчета";
		
		ТаблицаБУНовая.Колонки.Подразделение.Имя 				= "ПодразделениеОрганизации";
		
		ТаблицаБУНовая.Колонки.Сумма.Имя 						= "Стоимость";
		
		ТаблицаБУНовая.Колонки.СуммаНУ.Имя 						= "СтоимостьНУ";
		ТаблицаБУНовая.Колонки.КоличествоНУРАУЗ.Имя 			= "КоличествоНУ";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУНовая, Дата, ВидДвиженияНакопления.Приход);
		
		
		///////////////////////////////////////////////////////////////////////
		
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
				
		КонецЦикла;		
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.БракВПроизводстве Тогда	
		
		
		///////////////////////////////////////////////////////////////////////
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.НалоговоеНазначениеСтарое.Имя 	= "НалоговоеНазначение";
		
		ТаблицаБУСтарая.Колонки.РазделУчетаРАУЗ.Имя 			= "РазделУчета";
		
		ТаблицаБУСтарая.Колонки.Подразделение.Имя 				= "ПодразделениеОрганизации";
		
		ТаблицаБУСтарая.Колонки.Сумма.Имя 						= "Стоимость";
		
		ТаблицаБУСтарая.Колонки.СтоимостьНУРАУЗ.Имя 			= "СтоимостьНУ";
		ТаблицаБУСтарая.Колонки.КоличествоНУРАУЗ.Имя 			= "КоличествоНУ";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУСтарая, Дата, ВидДвиженияНакопления.Расход);
		
		ТаблицаБУНовая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУНовая.Колонки.Удалить("СчетУчетаНУ");

		ТаблицаБУНовая.Колонки.РазделУчетаРАУЗ.Имя 				= "РазделУчета";
		
		ТаблицаБУНовая.Колонки.Подразделение.Имя 				= "ПодразделениеОрганизации";
		
		ТаблицаБУНовая.Колонки.Сумма.Имя 						= "Стоимость";
		
		ТаблицаБУНовая.Колонки.СуммаНУ.Имя 						= "СтоимостьНУ";
		ТаблицаБУНовая.Колонки.КоличествоНУРАУЗ.Имя 			= "КоличествоНУ";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУНовая, Дата, ВидДвиженияНакопления.Приход);
		
		
		///////////////////////////////////////////////////////////////////////
		
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
		КонецЦикла;	
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.НезавершенноеПроизводство Тогда	
		
		///////////////////////////////////////////////////////////////////////
		
		ТаблицаБУСтарая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУСтарая.Колонки.Удалить("НалоговоеНазначение");
		ТаблицаБУСтарая.Колонки.НалоговоеНазначениеСтарое.Имя 	= "НалоговоеНазначение";
		
		ТаблицаБУСтарая.Колонки.РазделУчетаРАУЗ.Имя 			= "РазделУчета";
		
		ТаблицаБУСтарая.Колонки.Подразделение.Имя 				= "ПодразделениеОрганизации";
		
		ТаблицаБУСтарая.Колонки.Сумма.Имя 						= "Стоимость";
		
		ТаблицаБУСтарая.Колонки.СтоимостьНУРАУЗ.Имя 			= "СтоимостьНУ";
		ТаблицаБУСтарая.Колонки.КоличествоНУРАУЗ.Имя 			= "КоличествоНУ";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУСтарая, Дата, ВидДвиженияНакопления.Расход);
		
		ТаблицаБУНовая = ТаблицаОбъединенная.Скопировать();
		ТаблицаБУНовая.Колонки.Удалить("СчетУчетаНУ");

		ТаблицаБУНовая.Колонки.РазделУчетаРАУЗ.Имя 				= "РазделУчета";
		
		ТаблицаБУНовая.Колонки.Подразделение.Имя 				= "ПодразделениеОрганизации";
		
		ТаблицаБУНовая.Колонки.Сумма.Имя 						= "Стоимость";
		
		ТаблицаБУНовая.Колонки.СуммаНУ.Имя 						= "СтоимостьНУ";
		ТаблицаБУНовая.Колонки.КоличествоНУРАУЗ.Имя 			= "КоличествоНУ";
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаБУНовая, Дата, ВидДвиженияНакопления.Приход);
		
		
		///////////////////////////////////////////////////////////////////////
		
		Операция = ЭтотОбъект.Движения.Хозрасчетный;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъединенная Цикл
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаТаблицы);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", СтрокаТаблицы.СтатьяЗатрат);
			
		КонецЦикла;			
	КонецЕсли;	
	
КонецПроцедуры // ОбработкаПроведения()

Функция СформироватьПроводкуБух(Операция, СтрокаТаблицы, ИмяСчетУчета = "СчетУчета")
	
	Проводка = Неопределено;
	
	СчетУчета 		= СтрокаТаблицы[ИмяСчетУчета];
	ВидСчетаУчета 	= СчетУчета.Вид;
	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		
		Проводка = Операция.Добавить();
		Проводка.Период      = ЭтотОбъект.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = мСодержаниеПроводки;
		
		
		Если ВидСчетаУчета = ВидСчета.Активный Тогда
			ОтразитьПоДебету = Истина;
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
			ОтразитьПоДебету = Ложь;
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
			ОтразитьПоДебету = Истина;
			//Если СтрокаБухСправки.Сумма <> 0 Тогда
			//	Проводка.Сумма       = СтрокаБухСправки.Сумма;
			//	ОтразитьПоДебету = Истина;
			//Иначе
			//	Проводка.Сумма       = СтрокаБухСправки.СуммаКт;
			//	ОтразитьПоДебету = Ложь;
			//КонецЕсли;
		КонецЕсли;	
		
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			Проводка.КоличествоКт = СтрокаТаблицы.Количество;
		КонецЕсли;	
		
		НалоговоеНазначение 	= ПолучитьНалоговоеНазначениеСтроки(СтрокаТаблицы);
		СуммаНУ 	 			= ПолучитьСуммуНУСтроки(СтрокаТаблицы);
		
		Если ОтразитьПоДебету Тогда
			Проводка.НалоговоеНазначениеДт = НалоговоеНазначение;
			Проводка.СуммаНУДт             = СуммаНУ;
		Иначе
			Проводка.НалоговоеНазначениеКт = НалоговоеНазначение;
			Проводка.СуммаНУКт             = СуммаНУ;
		КонецЕсли;
		
		Проводка.СчетДт = СчетУчета;
		Проводка.СчетКт = СчетУчета;
		
	КонецЕсли;
	
	Возврат Проводка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКИ ПРОВЕДЕНИЯ ПО РАЗЛИЧНЫМ РАЗДЕЛАМ

// Основные средства

Процедура ОбработкаПроведения_ОсновныеСредства(Отказ)
	
	НалУчет    =  СтруктураШапкиДокумента.ЕстьНалогНаПрибыль;
	НалУчетОбщ = (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС);	
	
	// Проверим правильность заполнения табличной части документа
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ОсновноеСредство");
	СтруктураОбязательныхПолей.Вставить("ИнвентарныйНомерРегл");
	Если НалУчет Тогда
		СтруктураОбязательныхПолей.Вставить("НалоговаяГруппаОС");
	КонецЕсли;	
	Если НалУчетОбщ тогда
		СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
	КонецЕсли;
	
	//проверка заполнения обязательных реквизитов
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("НомерСтроки",      "НомерСтроки");
	СтруктураПолей.Вставить("ИнвентарныйНомерРегл", "ИнвентарныйНомерРегл");

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
		
    УправлениеВнеоборотнымиАктивами.ПроверитьДублированиеОСиНМАвТабличнойЧасти(ОС, "ОсновноеСредство", НСтр("ru='Основное средство';uk='Основний засіб'"), Отказ, Заголовок);
	
	Если ВводитьОСВременнаяНалоговаяРазница Тогда
		ОбязательныеРеквизиты = "ОсновноеСредствоВременнаяНалоговаяРазница, СтоимостьНУВременнаяНалоговаяРазница";
		
		//проверка заполнения обязательных реквизитов
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);
		
		УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьПринятияКУчетуОС(ОсновноеСредствоВременнаяНалоговаяРазница, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
	КонецЕсли;	
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрамОС(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрамОС(ЭтотОбъект, СтруктураШапкиДокумента, Отказ,Заголовок)

	ТабОС = ЭтотОбъект.ОС.Выгрузить();
	
	ФормированиеПроводокБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	
	ДвижениеПоРегиструСтоимостьОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	
	ДвижениеПоРегиструПервоначальныеСведенияОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	ДвижениеПоРегиструПервоначальныеСведенияОСНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	ДвижениеПоРегиструПараметрыАмортизацииБух    (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	
	ДвижениеПоРегиструНачислениеАмортизацииНал   (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок);
	ДвижениеПоРегиструПараметрыАмортизацииНал    (ЭтотОбъект, ТабОС, СтруктураШапкиДокумента);
	
	ДвижениеПоРегиструНалоговыеНазначенияОС(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок);
	
	ФормированиеДвиженияОСВременнаяНалоговаяРазница(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрамОС()

Процедура ФормированиеПроводокБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			
			// Ввод текущей стоимости ОС.
			Проводка = Операция.Добавить();
			Проводка.Период      = ЭтотОбъект.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = мСодержаниеПроводки;
			Проводка.Сумма       = СтрокаОС.ПервоначальнаяСтоимостьБУ;
			
			Проводка.НалоговоеНазначениеДт 	= ПолучитьНалоговоеНазначениеСтроки(СтрокаОС);
			Проводка.СуммаНУДт 	 			= ПолучитьБалансовуюСтоимостьНУСтрокиОСНМА(СтрокаОС);
			
			Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			Проводка.СчетКт = СтрокаОС.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОС.СчетАмортизацииБУ) Тогда
			
			// Ввод текущей стоимости ОС.
			Проводка = Операция.Добавить();
			Проводка.Период      = ЭтотОбъект.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = мСодержаниеПроводки;
			Проводка.Сумма       = СтрокаОС.НакопленнаяАмортизацияБУ;
			
			Проводка.СчетДт = СтрокаОС.СчетАмортизацииБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			Проводка.НалоговоеНазначениеКт 	= ПолучитьНалоговоеНазначениеСтроки(СтрокаОС);
			Проводка.СуммаНУКт 	 			= 0;
			
			Проводка.СчетКт = СтрокаОС.СчетАмортизацииБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокБух

Процедура ДвижениеПоРегиструСтоимостьОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	// Стоимость ОС
	НаборДвижений   = ЭтотОбъект.Движения.СтоимостьОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		НоваяСтрока.СтоимостьНУ        = ПолучитьБалансовуюСтоимостьНУСтрокиОСНМА(СтрокаОС);
		НоваяСтрока.АмортизацияНУ      = 0;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();

	
КонецПроцедуры // ДвижениеПоРегиструСтоимостьОСБух

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ СтрокаОС.ИзмененыПараметрыАмортизации Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = ЭтотОбъект.Дата;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомерРегл;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработкиБУ;
			
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = ЭтотОбъект.Дата;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НалоговаяГруппаОС           = СтрокаОС.НалоговаяГруппаОС;
		
		НоваяСтрока.ПервоначальнаяСтоимостьНУ   = ПолучитьБалансовуюСтоимостьНУСтрокиОСНМА(СтрокаОС);
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииБух(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ СтрокаОС.ИзмененыПараметрыАмортизации Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = ЭтотОбъект.Дата;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		НоваяСтрока.СрокПолезногоИспользования                  = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
		НоваяСтрока.ОбъемПродукцииРабот                         = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
		НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		НоваяСтрока.ЛиквидационнаяСтоимость						= СтрокаОС.ЛиквидационнаяСтоимостьБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС НУ.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = ЭтотОбъект.Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		НоваяСтрока.СтоимостьДляВычисленияАмортизации           = ПолучитьБалансовуюСтоимостьНУСтрокиОСНМА(СтрокаОС);
		НоваяСтрока.СрокПолезногоИспользования   				= СтрокаОС.СрокИспользованияДляВычисленияАмортизацииНУ;
		НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

// Процедура формирования движений по регистру Начисление амортизации НУ.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииНал(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = ЭтотОбъект.Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = ЭтотОбъект.Дата;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииБух()
 
// Процедура формирования движений по регистру НалоговыеНазначенияОС.
//
Процедура ДвижениеПоРегиструНалоговыеНазначенияОС(ЭтотОбъект, ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = ЭтотОбъект.Движения.НалоговыеНазначенияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период     		    = ЭтотОбъект.Дата;
		НоваяСтрока.ОсновноеСредство    = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация         = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.НалоговоеНазначение = ПолучитьНалоговоеНазначениеСтроки(СтрокаОС);
		
	КонецЦикла;
    		
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры 

Процедура ФормированиеДвиженияОСВременнаяНалоговаяРазница(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ ВводитьОСВременнаяНалоговаяРазница Тогда
		Возврат;
	КонецЕсли;
	
	Счет1091 	= ПланыСчетов.Хозрасчетный.ДругиеОсновныеСредства; 
	Счет131 	= ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств; 
	
	// Хозрасчетный
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Проводка = Операция.Добавить();
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = мСодержаниеПроводки;
	
	Проводка.НалоговоеНазначениеДт 	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
	Проводка.СуммаНУДт 	 			= СтоимостьНУВременнаяНалоговаяРазница;
	
	Проводка.СчетДт = Счет1091;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ОсновноеСредствоВременнаяНалоговаяРазница);
	
	Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	// Стоимость ОС
	НаборДвижений   = ЭтотОбъект.Движения.СтоимостьОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	НоваяСтрока = ТаблицаДвижений.Добавить();
	НоваяСтрока.Период           	= Дата;
	НоваяСтрока.Организация      	= СтруктураШапкиДокумента.Организация;
	НоваяСтрока.ОсновноеСредство 	= ОсновноеСредствоВременнаяНалоговаяРазница;
	
	НоваяСтрока.СтоимостьНУ        	= СтоимостьНУВременнаяНалоговаяРазница;
	НоваяСтрока.АмортизацияНУ      	= 0;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
	
	// СчетаБухгалтерскогоУчетаОС
	НаборДвижений   = Этотобъект.Движения.СчетаБухгалтерскогоУчетаОС;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период     		  = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.ОсновноеСредство  = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.СчетУчета         = Счет1091;
	НоваяСтрока.СчетНачисленияАмортизации = Счет131;
	
	// СостоянияОСОрганизаций
	НаборДвижений   = ЭтотОбъект.Движения.СостоянияОСОрганизаций;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.ДатаСостояния     = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.ОсновноеСредство  = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.Состояние         = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
						
	// СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет
	НаборДвижений   = ЭтотОбъект.Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период            = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.ОсновноеСредство  = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = Справочники.СпособыОтраженияРасходовПоАмортизации.ВременнаяРазницаОСНа01042011;
	
	//НачислениеАмортизацииОСНалоговыйУчет
	НаборДвижений   = ЭтотОбъект.Движения.НачислениеАмортизацииОСНалоговыйУчет;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период               = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.ОсновноеСредство     = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.НачислятьАмортизацию = Истина;

	//ПервоначальныеСведенияОСБухгалтерскийУчет
	НаборДвижений   = ЭтотОбъект.Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период                      = ЭтотОбъект.Дата;
	НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.ОсновноеСредство            = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.ИнвентарныйНомер            = ОсновноеСредствоВременнаяНалоговаяРазница.Код;
	НоваяСтрока.ПервоначальнаяСтоимость     = 0;
	НоваяСтрока.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный;
	
	//ПервоначальныеСведенияОСНалоговыйУчет
	НаборДвижений   = ЭтотОбъект.Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период            = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.ОсновноеСредство  = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСВременнаяНалоговаяРазница;
	
	НоваяСтрока.ПервоначальнаяСтоимостьНУ = СтоимостьНУВременнаяНалоговаяРазница;
	
	
	// ПараметрыАмортизацииОСНалоговыйУчет 
	НаборДвижений   = ЭтотОбъект.Движения.ПараметрыАмортизацииОСНалоговыйУчет;

	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период           = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.ОсновноеСредство = ОсновноеСредствоВременнаяНалоговаяРазница;
	
	НоваяСтрока.СтоимостьДляВычисленияАмортизации           = СтоимостьНУВременнаяНалоговаяРазница;
	НоваяСтрока.СрокПолезногоИспользования   				= 36; // 3 года
	НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = 36; // 3 года
	
	//НалоговыеНазначенияОС
	НаборДвижений   = ЭтотОбъект.Движения.НалоговыеНазначенияОС;
	
	НоваяСтрока = НаборДвижений.Добавить();
	НоваяСтрока.Период     		    = ЭтотОбъект.Дата;
	НоваяСтрока.ОсновноеСредство    = ОсновноеСредствоВременнаяНалоговаяРазница;
	НоваяСтрока.Организация         = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;;	
	
КонецПроцедуры

// Нематериальные активы

Процедура ОбработкаПроведения_НематериальныеАктивы(Отказ)
	
	НалУчет    =  СтруктураШапкиДокумента.ЕстьНалогНаПрибыль;
	НалУчетОбщ = (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС);	
	
	// Проверим правильность заполнения табличной части документа
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("НематериальныйАктив");
	Если НалУчет Тогда
		СтруктураОбязательныхПолей.Вставить("НалоговаяГруппаОС");
	КонецЕсли;	
	Если НалУчетОбщ тогда
		СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
	КонецЕсли;
	
	//проверка заполнения обязательных реквизитов
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеВнеоборотнымиАктивами.ПроверитьДублированиеОСиНМАвТабличнойЧасти(НМА, "НематериальныйАктив", НСтр("ru='Нематериальный актив';uk='Нематеріальний актив'"), Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрамНМА(Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движений регистров
Процедура ДвиженияПоРегистрамНМА(Отказ,Заголовок)
	
	ТабНМА = НМА.Выгрузить();
	
	Для Каждого СтрокаНМА ИЗ ТабНМА Цикл
		ДвиженияПоРегистрамРеглНМА(СтрокаНМА, Отказ,Заголовок);
	КонецЦикла;
	
КонецПроцедуры // ФормированиеДвижений()

// Процедура формирования движений регл. регистров
Процедура ДвиженияПоРегистрамРеглНМА(СтрокаНМА, Отказ,Заголовок)

	Проводки = Движения.Хозрасчетный;
	
	Если ЗначениеЗаполнено(СтрокаНМА.СчетУчетаБУ) Тогда 
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
		Проводка.Содержание = мСодержаниеПроводки;
		
		Проводка.НомерЖурнала = "НА";
		Проводка.Сумма        = СтрокаНМА.ПервоначальнаяСтоимостьБУ;
		
		Проводка.НалоговоеНазначениеДт 	= ПолучитьНалоговоеНазначениеСтроки(СтрокаНМА);
		Проводка.СуммаНУДт 	 			= ПолучитьБалансовуюСтоимостьНУСтрокиОСНМА(СтрокаНМА);
		
		Проводка.СчетДт       = СтрокаНМА.СчетУчетаБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);			
		
		Проводка.СчетКт       = СтрокаНМА.СчетУчетаБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);			
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаНМА.СчетАмортизацииБУ) Тогда 
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
		Проводка.Содержание = мСодержаниеПроводки;
		
		Проводка.НомерЖурнала = "НА";
		Проводка.Сумма        = СтрокаНМА.НакопленнаяАмортизацияБУ;
		
		Проводка.СчетДт       = СтрокаНМА.СчетАмортизацииБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);			
		
		Проводка.НалоговоеНазначениеКт 	= ПолучитьНалоговоеНазначениеСтроки(СтрокаНМА);
		Проводка.СуммаНУКт 	 			= 0;
		
		Проводка.СчетКт       = СтрокаНМА.СчетАмортизацииБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаНМА.НематериальныйАктив);			
		
	КонецЕсли;
	
	// Движения по регистру ПервоначальныеСведенияНМАНалоговыйУчет
	Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
	Движение.НематериальныйАктив	= СтрокаНМА.НематериальныйАктив;
	Движение.Организация           	= СтруктураШапкиДокумента.Организация;
	Движение.Период                	= СтруктураШапкиДокумента.Дата;
	Движение.НалоговоеНазначение   	= ПолучитьНалоговоеНазначениеСтроки(СтрокаНМА);
	
	Движение.НачислятьАмортизацию 	    = СтрокаНМА.НачислятьАмортизациюНУ;
	Движение.ПервоначальнаяСтоимость  	= ПолучитьБалансовуюСтоимостьНУСтрокиОСНМА(СтрокаНМА);
	Движение.СрокПолезногоИспользования = СтрокаНМА.СрокПолезногоИспользованияНУ;
	Движение.НалоговаяГруппаОС          = СтрокаНМА.НалоговаяГруппаОС;			
	
	// Стоимость НМА
	Движение   = Движения.СтоимостьНМАБухгалтерскийУчет.ДобавитьПриход();
	
	Движение.Период           		= СтруктураШапкиДокумента.Дата;
	Движение.Организация      		= СтруктураШапкиДокумента.Организация;
	Движение.НематериальныйАктив 	= СтрокаНМА.НематериальныйАктив;
	
	Движение.СтоимостьНУ        	= ПолучитьБалансовуюСтоимостьНУСтрокиОСНМА(СтрокаНМА);
	Движение.АмортизацияНУ      	= 0;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Функция формирует текст запроса по регистру "Брак в производстве".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструБракВПроизводстве() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	БракВПроизводствеБух.Организация КАК Организация,
	               |	БракВПроизводствеБух.Подразделение КАК Подразделение,
	               |	БракВПроизводствеБух.СчетУчета КАК СчетУчета,
	               |	БракВПроизводствеБух.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	БракВПроизводствеБух.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	БракВПроизводствеБух.Заказ КАК Заказ,
	               |	БракВПроизводствеБух.Продукция КАК Продукция,
	               |	БракВПроизводствеБух.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	               |	БракВПроизводствеБух.СерияПродукции КАК СерияПродукции,
	               |	БракВПроизводствеНал.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	БракВПроизводствеНал.НДСВходящийОстаток КАК НДСВходящий,
	               |	БракВПроизводствеНал.НДСКредитОстаток КАК НДСКредит,
	               |	БракВПроизводствеНал.СуммаОстаток КАК СуммаНУ,
	               |	ВЫБОР
	               |		КОГДА БракВПроизводствеНалВсего.СуммаОстаток <> 0
	               |			ТОГДА БракВПроизводствеБух.СуммаОстаток * (БракВПроизводствеНал.СуммаОстаток / БракВПроизводствеНалВсего.СуммаОстаток)
	               |		ИНАЧЕ БракВПроизводствеБух.СуммаОстаток
	               |	КОНЕЦ КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.БракВПроизводствеБухгалтерскийУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение И НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)) КАК БракВПроизводствеБух
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УДАЛИТЬБракВПроизводствеНалоговыйУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение) КАК БракВПроизводствеНал
	               |		ПО БракВПроизводствеБух.Организация = БракВПроизводствеНал.Организация
	               |			И БракВПроизводствеБух.Подразделение = БракВПроизводствеНал.Подразделение
	               |			И БракВПроизводствеБух.СтатьяЗатрат = БракВПроизводствеНал.СтатьяЗатрат
	               |			И БракВПроизводствеБух.НоменклатурнаяГруппа = БракВПроизводствеНал.НоменклатурнаяГруппа
	               |			И БракВПроизводствеБух.Заказ = БракВПроизводствеНал.Заказ
	               |			И БракВПроизводствеБух.Продукция = БракВПроизводствеНал.Продукция
	               |			И БракВПроизводствеБух.ХарактеристикаПродукции = БракВПроизводствеНал.ХарактеристикаПродукции
	               |			И БракВПроизводствеБух.СерияПродукции = БракВПроизводствеНал.СерияПродукции
	               |			И БракВПроизводствеБух.СчетУчета = БракВПроизводствеНал.СчетУчетаБУ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УДАЛИТЬБракВПроизводствеНалоговыйУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение) КАК БракВПроизводствеНалВсего
	               |		ПО (БракВПроизводствеНалВсего.Организация = БракВПроизводствеНал.Организация)
	               |			И (БракВПроизводствеНалВсего.Подразделение = БракВПроизводствеНал.Подразделение)
	               |			И (БракВПроизводствеНалВсего.СтатьяЗатрат = БракВПроизводствеНал.СтатьяЗатрат)
	               |			И (БракВПроизводствеНалВсего.НоменклатурнаяГруппа = БракВПроизводствеНал.НоменклатурнаяГруппа)
	               |			И (БракВПроизводствеНалВсего.Заказ = БракВПроизводствеНал.Заказ)
	               |			И (БракВПроизводствеНалВсего.Продукция = БракВПроизводствеНал.Продукция)
	               |			И (БракВПроизводствеНалВсего.ХарактеристикаПродукции = БракВПроизводствеНал.ХарактеристикаПродукции)
	               |			И (БракВПроизводствеНалВсего.СерияПродукции = БракВПроизводствеНал.СерияПродукции)
	               |			И (БракВПроизводствеНалВсего.СчетУчетаБУ = БракВПроизводствеНал.СчетУчетаБУ)";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструБракВПроизводстве()

// Функция формирует текст запроса по регистру "Брак в производстве".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструБракВПроизводстве_РАУЗ() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты) КАК РазделУчетаРАУЗ,
	               |	РегистрАналитикаВидаУчета.Организация КАК Организация,
	               |	РегистрАналитикаУчетаЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	РегистрАналитикаВидаУчета.ПодразделениеОрганизации КАК Подразделение,
	               |	РегистрАналитикаВидаУчета.СчетУчета КАК СчетУчета,
	               |	РегистрАналитикаВидаУчета.СчетУчетаНУ КАК СчетУчетаНУ,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначениеСтарое,
	               |	РегистрАналитикаУчетаПартий.Заказ КАК Заказ,
	               |	РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	РегистрАналитикаРаспределенияЗатрат.Продукция КАК Продукция,
	               |	РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	               |	РегистрАналитикаРаспределенияЗатрат.СерияПродукции КАК СерияПродукции,
	               |	УчетЗатрат.СтоимостьОстаток КАК Сумма,
	               |	УчетЗатрат.СтоимостьНУОстаток КАК СтоимостьНУРАУЗ,
	               |	УчетЗатрат.НДСВходящийОстаток КАК НДСВходящий,
	               |	УчетЗатрат.НДСКредитОстаток КАК НДСКредит,
	               |	УчетЗатрат.КоличествоОстаток КАК Количество,
	               |	УчетЗатрат.КоличествоНУОстаток КАК КоличествоНУРАУЗ
	               |ИЗ
	               |	РегистрНакопления.УчетЗатратРегл.Остатки(
	               |			&ГраницаПериода,
	               |			АналитикаВидаУчета В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					РегистрАналитикаВидаУчета.Ссылка
	               |				ИЗ
	               |					РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |				ГДЕ
	               |					РегистрАналитикаВидаУчета.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты))
	               |					И РегистрАналитикаВидаУчета.Организация = &Организация
	               |					И РегистрАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ(&МассивСчетов)
				   |					И РегистрАналитикаВидаУчета.ПодразделениеОрганизации = &Подразделение)) КАК УчетЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |		ПО УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	               |		ПО УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	               |		ПО УчетЗатрат.АналитикаРаспределенияЗатрат = РегистрАналитикаРаспределенияЗатрат.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	               |		ПО УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструБракВПроизводстве_РАУЗ()

// Функция формирует текст запроса по регистру "Незавершенное производство".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструНезавершенноеПроизводство() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	НезавершенноеПроизводствоБух.Организация КАК Организация,
	               |	НезавершенноеПроизводствоБух.Подразделение КАК Подразделение,
	               |	НезавершенноеПроизводствоБух.СчетУчета КАК СчетУчета,
	               |	НезавершенноеПроизводствоБух.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	НезавершенноеПроизводствоБух.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	НезавершенноеПроизводствоБух.Заказ КАК Заказ,
	               |	НезавершенноеПроизводствоБух.Затрата КАК Затрата,
	               |	НезавершенноеПроизводствоБух.ХарактеристикаЗатраты КАК ХарактеристикаЗатраты,
	               |	НезавершенноеПроизводствоБух.СерияЗатраты КАК СерияЗатраты,
	               |	НезавершенноеПроизводствоНал.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	НезавершенноеПроизводствоНал.НДСВходящийОстаток КАК НДСВходящий,
	               |	НезавершенноеПроизводствоНал.НДСКредитОстаток КАК НДСКредит,
	               |	НезавершенноеПроизводствоНал.КоличествоОстаток КАК КоличествоНУ,
	               |	НезавершенноеПроизводствоНал.СтоимостьОстаток КАК СуммаНУ,
	               |	ВЫБОР
	               |		КОГДА НезавершенноеПроизводствоНалВсего.КоличествоОстаток <> 0
	               |			ТОГДА НезавершенноеПроизводствоБух.КоличествоОстаток * (НезавершенноеПроизводствоНал.КоличествоОстаток / НезавершенноеПроизводствоНалВсего.КоличествоОстаток)
	               |		ИНАЧЕ НезавершенноеПроизводствоБух.КоличествоОстаток
	               |	КОНЕЦ КАК Количество,
	               |	ВЫБОР
	               |		КОГДА НезавершенноеПроизводствоНалВсего.КоличествоОстаток <> 0
	               |			ТОГДА НезавершенноеПроизводствоБух.СтоимостьОстаток * (НезавершенноеПроизводствоНал.КоличествоОстаток / НезавершенноеПроизводствоНалВсего.КоличествоОстаток)
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА НезавершенноеПроизводствоНалВсего.СтоимостьОстаток <> 0
	               |					ТОГДА НезавершенноеПроизводствоБух.СтоимостьОстаток * (НезавершенноеПроизводствоНал.СтоимостьОстаток / НезавершенноеПроизводствоНалВсего.СтоимостьОстаток)
	               |				ИНАЧЕ НезавершенноеПроизводствоБух.СтоимостьОстаток
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.НезавершенноеПроизводствоБухгалтерскийУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение И НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)) КАК НезавершенноеПроизводствоБух
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УДАЛИТЬНезавершенноеПроизводствоНалоговыйУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение) КАК НезавершенноеПроизводствоНал
	               |		ПО НезавершенноеПроизводствоБух.Организация = НезавершенноеПроизводствоНал.Организация
	               |			И НезавершенноеПроизводствоБух.Подразделение = НезавершенноеПроизводствоНал.Подразделение
	               |			И НезавершенноеПроизводствоБух.СтатьяЗатрат = НезавершенноеПроизводствоНал.СтатьяЗатрат
	               |			И НезавершенноеПроизводствоБух.НоменклатурнаяГруппа = НезавершенноеПроизводствоНал.НоменклатурнаяГруппа
	               |			И НезавершенноеПроизводствоБух.Заказ = НезавершенноеПроизводствоНал.Заказ
	               |			И НезавершенноеПроизводствоБух.Затрата = НезавершенноеПроизводствоНал.Затрата
	               |			И НезавершенноеПроизводствоБух.ХарактеристикаЗатраты = НезавершенноеПроизводствоНал.ХарактеристикаЗатраты
	               |			И НезавершенноеПроизводствоБух.СерияЗатраты = НезавершенноеПроизводствоНал.СерияЗатраты
	               |			И НезавершенноеПроизводствоБух.СчетУчета = НезавершенноеПроизводствоНал.СчетУчетаБУ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УДАЛИТЬНезавершенноеПроизводствоНалоговыйУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение) КАК НезавершенноеПроизводствоНалВсего
	               |		ПО (НезавершенноеПроизводствоНалВсего.Организация = НезавершенноеПроизводствоНал.Организация)
	               |			И (НезавершенноеПроизводствоНалВсего.Подразделение = НезавершенноеПроизводствоНал.Подразделение)
	               |			И (НезавершенноеПроизводствоНалВсего.СтатьяЗатрат = НезавершенноеПроизводствоНал.СтатьяЗатрат)
	               |			И (НезавершенноеПроизводствоНалВсего.НоменклатурнаяГруппа = НезавершенноеПроизводствоНал.НоменклатурнаяГруппа)
	               |			И (НезавершенноеПроизводствоНалВсего.Заказ = НезавершенноеПроизводствоНал.Заказ)
	               |			И (НезавершенноеПроизводствоНалВсего.Затрата = НезавершенноеПроизводствоНал.Затрата)
	               |			И (НезавершенноеПроизводствоНалВсего.ХарактеристикаЗатраты = НезавершенноеПроизводствоНал.ХарактеристикаЗатраты)
	               |			И (НезавершенноеПроизводствоНалВсего.СерияЗатраты = НезавершенноеПроизводствоНал.СерияЗатраты)
	               |			И (НезавершенноеПроизводствоНалВсего.СчетУчетаБУ = НезавершенноеПроизводствоНал.СчетУчетаБУ)";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструНезавершенноеПроизводство()	

// Функция формирует текст запроса по регистру "Незавершенное производство".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструНезавершенноеПроизводство_РАУЗ() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РегистрАналитикаВидаУчета.РазделУчета КАК РазделУчетаРАУЗ,
	               |	РегистрАналитикаВидаУчета.Организация КАК Организация,
	               |	РегистрАналитикаУчетаЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	РегистрАналитикаВидаУчета.ПодразделениеОрганизации КАК Подразделение,
	               |	РегистрАналитикаВидаУчета.СчетУчета КАК СчетУчета,
	               |	РегистрАналитикаВидаУчета.СчетУчетаНУ КАК СчетУчетаНУ,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначениеСтарое,
	               |	РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	РегистрАналитикаУчетаПартий.Заказ КАК Заказ,
	               |	РегистрАналитикаУчетаЗатрат.Затрата КАК Затрата,
	               |	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаЗатраты,
	               |	РегистрАналитикаУчетаЗатрат.СерияЗатраты КАК СерияЗатраты,
	               |	РегистрАналитикаУчетаЗатрат.СпособРаспределенияЗатрат КАК СпособРаспределенияЗатрат,
	               |	РегистрАналитикаУчетаЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	               |	РегистрАналитикаРаспределенияЗатрат.Продукция КАК Продукция,
	               |	РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	               |	РегистрАналитикаРаспределенияЗатрат.СерияПродукции КАК СерияПродукции,
	               |	РегистрАналитикаРаспределенияЗатрат.Спецификация КАК Спецификация,
	               |	УчетЗатрат.СтоимостьОстаток КАК Сумма,
	               |	УчетЗатрат.СтоимостьНУОстаток КАК СтоимостьНУРАУЗ,
	               |	УчетЗатрат.НДСВходящийОстаток КАК НДСВходящий,
	               |	УчетЗатрат.НДСКредитОстаток КАК НДСКредит,
	               |	УчетЗатрат.КоличествоОстаток КАК Количество,
	               |	УчетЗатрат.КоличествоНУОстаток КАК КоличествоНУРАУЗ
	               |ИЗ
	               |	РегистрНакопления.УчетЗатратРегл.Остатки(
	               |			&ГраницаПериода,
	               |			АналитикаВидаУчета В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					РегистрАналитикаВидаУчета.Ссылка
	               |				ИЗ
	               |					РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |				ГДЕ
	               |					РегистрАналитикаВидаУчета.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты), ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Наработка))
	               |					И РегистрАналитикаВидаУчета.Организация = &Организация
	               |					И РегистрАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ(&МассивСчетов)
				   |					И РегистрАналитикаВидаУчета.ПодразделениеОрганизации = &Подразделение)) КАК УчетЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |		ПО УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	               |		ПО УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	               |		ПО УчетЗатрат.АналитикаРаспределенияЗатрат = РегистрАналитикаРаспределенияЗатрат.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	               |		ПО УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции // _РАУЗ()	

// Функция формирует текст запроса по регистру "Строительство (монтаж) ОС в бухгалтерском и налоговом учете".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструСтроительствоОбъектовОсновныхСредств() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.Организация,
	               |	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	               |	СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.НалоговоеНазначение,
	               |	СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.НалоговоеНазначение КАК НалоговоеНазначениеСтарое,
	               |	СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.ОбъектСтроительства,
	               |	ВЫБОР
	               |		КОГДА СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстаткиВсего.СтоимостьНУОстаток <> 0
	               |			ТОГДА ХозрасчетныйОстатки.СуммаОстаток * (СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.СтоимостьНУОстаток / СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстаткиВсего.СтоимостьНУОстаток)
	               |		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	               |	КОНЕЦ КАК Сумма,
	               |	СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.СтоимостьНУОстаток КАК СуммаНУ,
	               |	СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.СтоимостьНУОстаток КАК СуммаНУСтарая,
	               |	СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.НДСВходящийОстаток КАК НДСВходящий,
	               |	СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.НДСКредитОстаток КАК НДСКредит
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&ГраницаПериода,
	               |			Счет В ИЕРАРХИИ (&МассивСчетов),
	               |			,
	               |			Организация = &Организация
	               |				И НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)) КАК ХозрасчетныйОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Остатки(&ГраницаПериода, Организация = &Организация) КАК СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки
	               |		ПО СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.Организация = ХозрасчетныйОстатки.Организация
	               |			И СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.ОбъектСтроительства = ХозрасчетныйОстатки.Субконто1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Остатки(&ГраницаПериода, Организация = &Организация) КАК СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстаткиВсего
	               |		ПО СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.Организация = СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстаткиВсего.Организация
	               |			И СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстатки.ОбъектСтроительства = СтроительствоОбъектовОсновныхСредствБухгалтерскийУчетОстаткиВсего.ОбъектСтроительства";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструНезавершенноеПроизводство()	

// Функция формирует текст запроса по регистру "Строительство (монтаж) ОС в бухгалтерском и налоговом учете".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРБП() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ХозрасчетныйОстатки.Счет КАК СчетУчета,
				   |	ХозрасчетныйОстатки.Субконто1 КАК РБП,
				   |	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&ГраницаПериода,
	               |			Счет В ИЕРАРХИИ (&МассивСчетов),
	               |			,
	               |			Организация = &Организация
	               |				И НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)) КАК ХозрасчетныйОстатки";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструНезавершенноеПроизводство()	

// Функция формирует текст запроса по регистру "Партии материалов в эксплуатации".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструПартииМатериаловВЭксплуатации() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПартииМатериаловВЭксплуатацииБух.Организация КАК Организация,
	               |	ПартииМатериаловВЭксплуатацииБух.Подразделение КАК Подразделение,
	               |	ПартииМатериаловВЭксплуатацииБух.Номенклатура КАК Номенклатура,
	               |	ПартииМатериаловВЭксплуатацииБух.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ПартииМатериаловВЭксплуатацииБух.СерияНоменклатуры КАК СерияНоменклатуры,
	               |	ПартииМатериаловВЭксплуатацииБух.ДокументПередачи КАК ДокументПередачи,
	               |	ПартииМатериаловВЭксплуатацииБух.ФизЛицо КАК ФизЛицо,
	               |	ПартииМатериаловВЭксплуатацииБух.Качество КАК Качество,
	               |	ПартииМатериаловВЭксплуатацииБух.ДокументОприходования КАК ДокументОприходования,
	               |	ПартииМатериаловВЭксплуатацииБух.СхемаНазначенияИспользования КАК СхемаНазначенияИспользования,
	               |	ПартииМатериаловВЭксплуатацииБух.СхемаНазначенияИспользования.ВидМатериала КАК ВидМатериала,
	               |	ПартииМатериаловВЭксплуатацииБух.СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,
	               |	ПартииМатериаловВЭксплуатацииБух.СхемаНазначенияИспользования.СчетАмортизацииБУ КАК СчетАмортизацииБУ,
	               |	ПартииМатериаловВЭксплуатацииБух.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	               |	ПартииМатериаловВЭксплуатацииБух.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
				   |	ПартииМатериаловВЭксплуатацииНал.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	ПартииМатериаловВЭксплуатацииНал.НДСВходящийОстаток КАК НДСВходящий,
	               |	ПартииМатериаловВЭксплуатацииНал.НДСКредитОстаток КАК НДСКредит,
	               |	ПартииМатериаловВЭксплуатацииНал.КоличествоОстаток КАК КоличествоНУ,
	               |	ПартииМатериаловВЭксплуатацииНал.СтоимостьОстаток КАК СуммаНУ,
	               |	ВЫБОР
	               |		КОГДА ПартииМатериаловВЭксплуатацииНалВсего.КоличествоОстаток <> 0
	               |			ТОГДА ПартииМатериаловВЭксплуатацииБух.КоличествоОстаток * (ПартииМатериаловВЭксплуатацииНал.КоличествоОстаток / ПартииМатериаловВЭксплуатацииНалВсего.КоличествоОстаток)
	               |		ИНАЧЕ ПартииМатериаловВЭксплуатацииБух.КоличествоОстаток
	               |	КОНЕЦ КАК Количество,
	               |	ВЫБОР
	               |		КОГДА ПартииМатериаловВЭксплуатацииНалВсего.КоличествоОстаток <> 0
	               |			ТОГДА ПартииМатериаловВЭксплуатацииБух.СтоимостьОстаток * (ПартииМатериаловВЭксплуатацииНал.КоличествоОстаток / ПартииМатериаловВЭксплуатацииНалВсего.КоличествоОстаток)
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПартииМатериаловВЭксплуатацииНалВсего.СтоимостьОстаток <> 0
	               |					ТОГДА ПартииМатериаловВЭксплуатацииБух.СтоимостьОстаток * (ПартииМатериаловВЭксплуатацииНал.СтоимостьОстаток / ПартииМатериаловВЭксплуатацииНалВсего.СтоимостьОстаток)
	               |				ИНАЧЕ ПартииМатериаловВЭксплуатацииБух.СтоимостьОстаток
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение И НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)) КАК ПартииМатериаловВЭксплуатацииБух
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УДАЛИТЬПартииМатериаловВЭксплуатацииНалоговыйУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение) КАК ПартииМатериаловВЭксплуатацииНал
	               |		ПО ПартииМатериаловВЭксплуатацииБух.Организация = ПартииМатериаловВЭксплуатацииНал.Организация
	               |			И ПартииМатериаловВЭксплуатацииБух.Подразделение = ПартииМатериаловВЭксплуатацииНал.Подразделение
	               |			И ПартииМатериаловВЭксплуатацииБух.Номенклатура = ПартииМатериаловВЭксплуатацииНал.Номенклатура
	               |			И ПартииМатериаловВЭксплуатацииБух.ХарактеристикаНоменклатуры = ПартииМатериаловВЭксплуатацииНал.ХарактеристикаНоменклатуры
	               |			И ПартииМатериаловВЭксплуатацииБух.СерияНоменклатуры = ПартииМатериаловВЭксплуатацииНал.СерияНоменклатуры
	               |			И ПартииМатериаловВЭксплуатацииБух.ДокументПередачи = ПартииМатериаловВЭксплуатацииНал.ДокументПередачи
	               |			И ПартииМатериаловВЭксплуатацииБух.ФизЛицо = ПартииМатериаловВЭксплуатацииНал.ФизЛицо
	               |			И ПартииМатериаловВЭксплуатацииБух.Качество = ПартииМатериаловВЭксплуатацииНал.Качество
	               |			И ПартииМатериаловВЭксплуатацииБух.ДокументОприходования = ПартииМатериаловВЭксплуатацииНал.ДокументОприходования
	               |			И ПартииМатериаловВЭксплуатацииБух.СхемаНазначенияИспользования = ПартииМатериаловВЭксплуатацииНал.СхемаНазначенияИспользования
	               |			И ПартииМатериаловВЭксплуатацииБух.СпособОтраженияРасходов = ПартииМатериаловВЭксплуатацииНал.СпособОтраженияРасходов
	               |			И ПартииМатериаловВЭксплуатацииБух.СрокПолезногоИспользования = ПартииМатериаловВЭксплуатацииНал.СрокПолезногоИспользования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УДАЛИТЬПартииМатериаловВЭксплуатацииНалоговыйУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение) КАК ПартииМатериаловВЭксплуатацииНалВсего
	               |		ПО (ПартииМатериаловВЭксплуатацииНалВсего.Организация = ПартииМатериаловВЭксплуатацииНал.Организация)
	               |			И (ПартииМатериаловВЭксплуатацииНалВсего.Подразделение = ПартииМатериаловВЭксплуатацииНал.Подразделение)
	               |			И ПартииМатериаловВЭксплуатацииНалВсего.Номенклатура = ПартииМатериаловВЭксплуатацииНал.Номенклатура
	               |			И ПартииМатериаловВЭксплуатацииНалВсего.ХарактеристикаНоменклатуры = ПартииМатериаловВЭксплуатацииНал.ХарактеристикаНоменклатуры
	               |			И ПартииМатериаловВЭксплуатацииНалВсего.СерияНоменклатуры = ПартииМатериаловВЭксплуатацииНал.СерияНоменклатуры
	               |			И ПартииМатериаловВЭксплуатацииНалВсего.ДокументПередачи = ПартииМатериаловВЭксплуатацииНал.ДокументПередачи
	               |			И ПартииМатериаловВЭксплуатацииНалВсего.ФизЛицо = ПартииМатериаловВЭксплуатацииНал.ФизЛицо
	               |			И ПартииМатериаловВЭксплуатацииНалВсего.Качество = ПартииМатериаловВЭксплуатацииНал.Качество
	               |			И ПартииМатериаловВЭксплуатацииНалВсего.ДокументОприходования = ПартииМатериаловВЭксплуатацииНал.ДокументОприходования
	               |			И ПартииМатериаловВЭксплуатацииНалВсего.СхемаНазначенияИспользования = ПартииМатериаловВЭксплуатацииНал.СхемаНазначенияИспользования
	               |			И ПартииМатериаловВЭксплуатацииНалВсего.СпособОтраженияРасходов = ПартииМатериаловВЭксплуатацииНал.СпособОтраженияРасходов
	               |			И ПартииМатериаловВЭксплуатацииНалВсего.СрокПолезногоИспользования = ПартииМатериаловВЭксплуатацииНал.СрокПолезногоИспользования
				   |";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструНезавершенноеПроизводство()	

// Функция формирует текст запроса по регистру "Партии материалов в эксплуатации".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструПартииМатериаловВЭксплуатации_РАУЗ() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РегистрАналитикаВидаУчета.РазделУчета КАК РазделУчетаРАУЗ,
	               |	РегистрАналитикаВидаУчета.Организация КАК Организация,
	               |	РегистрАналитикаВидаУчета.ПодразделениеОрганизации КАК Подразделение,
	               |	РегистрАналитикаВидаУчета.СчетУчета КАК СчетУчета,
	               |	РегистрАналитикаВидаУчета.СчетУчетаНУ КАК СчетУчетаНУ,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначениеСтарое,
	               |	РегистрАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
	               |	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры,
	               |	РегистрАналитикаУчетаЗатрат.СерияЗатраты КАК СерияНоменклатуры,
	               |	РегистрАналитикаУчетаЗатрат.Качество КАК Качество,
	               |	РегистрАналитикаУчетаПартий.ФизЛицо КАК ФизЛицо,
	               |	РегистрАналитикаУчетаПартий.СхемаНазначенияИспользования КАК СхемаНазначенияИспользования,
	               |	РегистрАналитикаУчетаПартий.СхемаНазначенияИспользования.ВидМатериала КАК ВидМатериала,
	               |	РегистрАналитикаУчетаПартий.СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,
	               |	РегистрАналитикаУчетаПартий.СхемаНазначенияИспользования.СчетАмортизацииБУ КАК СчетАмортизацииБУ,
	               |	РегистрАналитикаУчетаПартий.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	               |	РегистрАналитикаУчетаПартий.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	               |	РегистрАналитикаУчетаПартий.ДокументПередачи КАК ДокументПередачи,
	               |	УчетЗатрат.СтоимостьОстаток КАК Сумма,
	               |	УчетЗатрат.СтоимостьНУОстаток КАК СтоимостьНУРАУЗ,
	               |	УчетЗатрат.НДСВходящийОстаток КАК НДСВходящий,
	               |	УчетЗатрат.НДСКредитОстаток КАК НДСКредит,
	               |	УчетЗатрат.КоличествоОстаток КАК Количество,
	               |	УчетЗатрат.КоличествоНУОстаток КАК КоличествоНУРАУЗ
	               |ИЗ
	               |	РегистрНакопления.УчетЗатратРегл.Остатки(
	               |			&ГраницаПериода,
	               |			АналитикаВидаУчета В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					РегистрАналитикаВидаУчета.Ссылка
	               |				ИЗ
	               |					РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |				ГДЕ
	               |					РегистрАналитикаВидаУчета.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МатериалыВЭксплуатации))
	               |					И РегистрАналитикаВидаУчета.Организация = &Организация
				   |					И РегистрАналитикаВидаУчета.ПодразделениеОрганизации = &Подразделение)) КАК УчетЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |		ПО УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	               |		ПО УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	               |		ПО УчетЗатрат.АналитикаРаспределенияЗатрат = РегистрАналитикаРаспределенияЗатрат.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	               |		ПО УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
				   |";
	
	Возврат ТекстЗапроса;
	
	
КонецФункции // ПолучитьЗапросПоРегиструПартииМатериаловВЭксплуатации_РАУЗ()	

// Функция формирует текст запроса по регистру "Затраты".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструЗатраты() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗатратыБух.Организация КАК Организация,
	               |	ЗатратыБух.Подразделение КАК Подразделение,
	               |	ЗатратыБух.СчетУчета КАК СчетУчета,
	               |	ЗатратыБух.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	ЗатратыБух.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	ЗатратыБух.Заказ КАК Заказ,
	               |	ЗатратыНал.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	ЗатратыНал.НДСВходящийОстаток КАК НДСВходящий,
	               |	ЗатратыНал.НДСКредитОстаток КАК НДСКредит,
	               |	ЗатратыНал.СуммаОстаток КАК СуммаНУ,
	               |	ВЫБОР
	               |		КОГДА ЗатратыНалВсего.СуммаОстаток <> 0
	               |			ТОГДА ЗатратыБух.СуммаОстаток * (ЗатратыНал.СуммаОстаток / ЗатратыНалВсего.СуммаОстаток)
	               |		ИНАЧЕ ЗатратыБух.СуммаОстаток
	               |	КОНЕЦ КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ЗатратыБухгалтерскийУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение И НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)) КАК ЗатратыБух
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УДАЛИТЬЗатратыНалоговыйУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение) КАК ЗатратыНал
	               |		ПО ЗатратыБух.Организация = ЗатратыНал.Организация
	               |			И ЗатратыБух.Подразделение = ЗатратыНал.Подразделение
	               |			И ЗатратыБух.СтатьяЗатрат = ЗатратыНал.СтатьяЗатрат
	               |			И ЗатратыБух.НоменклатурнаяГруппа = ЗатратыНал.НоменклатурнаяГруппа
	               |			И ЗатратыБух.Заказ = ЗатратыНал.Заказ
	               |			И ЗатратыБух.СчетУчета = ЗатратыНал.СчетУчетаБУ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УДАЛИТЬЗатратыНалоговыйУчет.Остатки(&ГраницаПериода, Организация = &Организация И Подразделение = &Подразделение) КАК ЗатратыНалВсего
	               |		ПО (ЗатратыНалВсего.Организация = ЗатратыНал.Организация)
	               |			И (ЗатратыНалВсего.Подразделение = ЗатратыНал.Подразделение)
	               |			И (ЗатратыНалВсего.СтатьяЗатрат = ЗатратыНал.СтатьяЗатрат)
	               |			И (ЗатратыНалВсего.НоменклатурнаяГруппа = ЗатратыНал.НоменклатурнаяГруппа)
	               |			И (ЗатратыНалВсего.Заказ = ЗатратыНал.Заказ)
	               |			И (ЗатратыНалВсего.СчетУчетаБУ = ЗатратыНал.СчетУчетаБУ)
				   |ГДЕ ЗатратыБух.СтатьяЗатрат.ХарактерЗатрат = ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы)
				   |";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструЗатраты()

// Функция формирует текст запроса по регистру "Затраты".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструЗатраты_РАУЗ() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты) КАК РазделУчетаРАУЗ,
	               |	РегистрАналитикаВидаУчета.Организация КАК Организация,
	               |	РегистрАналитикаУчетаЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	РегистрАналитикаВидаУчета.ПодразделениеОрганизации КАК Подразделение,
	               |	РегистрАналитикаВидаУчета.СчетУчета КАК СчетУчета,
	               |	РегистрАналитикаВидаУчета.СчетУчетаНУ КАК СчетУчетаНУ,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначениеСтарое,
	               |	РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	УчетЗатрат.СтоимостьОстаток КАК Сумма,
	               |	УчетЗатрат.СтоимостьНУОстаток КАК СтоимостьНУРАУЗ,
	               |	УчетЗатрат.НДСВходящийОстаток КАК НДСВходящий,
	               |	УчетЗатрат.НДСКредитОстаток КАК НДСКредит,
	               |	УчетЗатрат.КоличествоОстаток КАК Количество,
	               |	УчетЗатрат.КоличествоНУОстаток КАК КоличествоНУРАУЗ
	               |ИЗ
	               |	РегистрНакопления.УчетЗатратРегл.Остатки(
	               |			&ГраницаПериода,
	               |			АналитикаВидаУчета В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					РегистрАналитикаВидаУчета.Ссылка
	               |				ИЗ
	               |					РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |				ГДЕ
	               |					РегистрАналитикаВидаУчета.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты))
	               |					И РегистрАналитикаВидаУчета.Организация = &Организация
	               |					И РегистрАналитикаВидаУчета.СчетУчета В ИЕРАРХИИ(&МассивСчетов)
				   |					И РегистрАналитикаВидаУчета.ПодразделениеОрганизации = &Подразделение)) КАК УчетЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |		ПО УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	               |		ПО УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	               |		ПО УчетЗатрат.АналитикаРаспределенияЗатрат = РегистрАналитикаРаспределенияЗатрат.Ссылка";
	
	Возврат ТекстЗапроса;

	
КонецФункции // ПолучитьЗапросПоРегиструЗатраты_РАУЗ()

// Функция формирует текст запроса по регистру "ПартииТоваровНаСкладах".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструПартииТоваровНаСкладах() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПартииТоваровБух.Организация КАК Организация,
	               |	ПартииТоваровБух.Номенклатура КАК Номенклатура,
	               |	ПартииТоваровБух.СчетУчета КАК СчетУчета,
	               |	ПартииТоваровБух.Склад КАК Склад,
	               |	ПартииТоваровБух.ДокументОприходования КАК ДокументОприходования,
	               |	ПартииТоваровБух.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ПартииТоваровБух.СерияНоменклатуры КАК СерияНоменклатуры,
	               |	ПартииТоваровБух.Заказ КАК Заказ,
	               |	ПартииТоваровБух.Качество КАК Качество,
	               |	ПартииТоваровБух.КоличествоОстаток КАК КоличествоБУ,
	               |	ПартииТоваровНал.КоличествоОстаток КАК КоличествоНУ,
	               |	ЕСТЬNULL(ТоварыОрганизацийРегл.КоличествоОстаток, 0) КАК КоличествоРегл,
	               |	ПартииТоваровБух.СтоимостьОстаток КАК СуммаБУ,
	               |	ПартииТоваровНал.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	ПартииТоваровНал.НалоговоеНазначение КАК НалоговоеНазначениеСтарое,
	               |	ПартииТоваровНал.НДСВходящийОстаток КАК НДСВходящий,
	               |	ПартииТоваровНал.НДСКредитОстаток КАК НДСКредит,
	               |	ПартииТоваровНал.СтоимостьОстаток КАК СуммаНУ
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	               |			&ГраницаПериода,
	               |			Организация = &Организация И НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	               |				И Склад = &Склад) КАК ПартииТоваровБух
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УДАЛИТЬПартииТоваровНаСкладахНалоговыйУчет.Остатки(
	               |				&ГраницаПериода,
	               |				Организация = &Организация
	               |					И Склад = &Склад) КАК ПартииТоваровНал
	               |		ПО ПартииТоваровБух.Организация = ПартииТоваровНал.Организация
	               |			И ПартииТоваровБух.Номенклатура = ПартииТоваровНал.Номенклатура
	               |			И ПартииТоваровБух.Склад = ПартииТоваровНал.Склад
	               |			И ПартииТоваровБух.ХарактеристикаНоменклатуры = ПартииТоваровНал.ХарактеристикаНоменклатуры
	               |			И ПартииТоваровБух.Заказ = ПартииТоваровНал.Заказ
	               |			И ПартииТоваровБух.ДокументОприходования = ПартииТоваровНал.ДокументОприходования
	               |			И ПартииТоваровБух.ХарактеристикаНоменклатуры = ПартииТоваровНал.ХарактеристикаНоменклатуры
	               |			И ПартииТоваровБух.СерияНоменклатуры = ПартииТоваровНал.СерияНоменклатуры
	               |			И ПартииТоваровБух.Качество = ПартииТоваровНал.Качество
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизацийРегл.Остатки(
	               |				&ГраницаПериода,
	               |				Организация = &Организация
	               |					И Склад = &Склад) КАК ТоварыОрганизацийРегл
	               |		ПО (ТоварыОрганизацийРегл.Организация = ПартииТоваровБух.Организация)
	               |			И (ТоварыОрганизацийРегл.Номенклатура = ПартииТоваровБух.Номенклатура)
	               |			И (ТоварыОрганизацийРегл.Склад = ПартииТоваровБух.Склад)
	               |			И (ТоварыОрганизацийРегл.ХарактеристикаНоменклатуры = ПартииТоваровБух.ХарактеристикаНоменклатуры)
	               |			И (ТоварыОрганизацийРегл.СерияНоменклатуры = ПартииТоваровБух.СерияНоменклатуры)
	               |			И (ТоварыОрганизацийРегл.СчетУчетаБУ = ПартииТоваровБух.СчетУчета)
	               |			И (ТоварыОрганизацийРегл.НалоговоеНазначение = ПартииТоваровНал.НалоговоеНазначение)
	               |			И (ТоварыОрганизацийРегл.Качество = ПартииТоваровБух.Качество)
	               |ГДЕ
	               |	ПартииТоваровБух.СчетУчета.Забалансовый = ЛОЖЬ
	               |ИТОГИ
	               |	МАКСИМУМ(СчетУчета),
	               |	СУММА(КоличествоБУ),
	               |	СУММА(КоличествоНУ),
	               |	СУММА(КоличествоРегл),
	               |	СУММА(СуммаБУ),
	               |	МАКСИМУМ(НалоговоеНазначение),
	               |	СУММА(НДСВходящий),
	               |	СУММА(НДСКредит),
	               |	СУММА(СуммаНУ)
	               |ПО
	               |	Заказ,
	               |	Склад,
	               |	СерияНоменклатуры,
	               |	ДокументОприходования,
	               |	Качество,
	               |	Организация,
	               |	ХарактеристикаНоменклатуры,
	               |	Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструПартииТоваровНаСкладах()

// Функция формирует текст запроса по регистру "ПартииТоваровНаСкладах".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструПартииТоваровНаСкладах_РАУЗ() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ) КАК РазделУчетаРАУЗ,
				   |	РегистрАналитикаВидаУчета.Организация КАК Организация,
	               |	РегистрАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
	               |	РегистрАналитикаВидаУчета.СчетУчета КАК СчетУчета,
	               |	РегистрАналитикаВидаУчета.СчетУчетаНУ КАК СчетУчетаНУ,
	               |	РегистрАналитикаВидаУчета.Склад КАК Склад,
	               |	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры,
	               |	РегистрАналитикаУчетаЗатрат.СерияЗатраты КАК СерияНоменклатуры,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначениеСтарое,
	               |	РегистрАналитикаУчетаЗатрат.Качество КАК Качество,
	               |	РегистрАналитикаУчетаПартий.ДокументПередачи КАК ДокументПередачи,
	               |	УчетЗатрат.СтоимостьОстаток КАК Сумма,
	               |	УчетЗатрат.СтоимостьНУОстаток КАК СтоимостьНУРАУЗ,
	               |	УчетЗатрат.НДСВходящийОстаток КАК НДСВходящий,
	               |	УчетЗатрат.НДСКредитОстаток КАК НДСКредит,
	               |	УчетЗатрат.КоличествоОстаток КАК Количество,
	               |	УчетЗатрат.КоличествоНУОстаток КАК КоличествоНУРАУЗ
	               |ИЗ
	               |	РегистрНакопления.УчетЗатратРегл.Остатки(
	               |			&ГраницаПериода,
	               |			АналитикаВидаУчета В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					РегистрАналитикаВидаУчета.Ссылка
	               |				ИЗ
	               |					РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |				ГДЕ
	               |					РегистрАналитикаВидаУчета.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ))
	               |					И РегистрАналитикаВидаУчета.Организация = &Организация
	               |					И РегистрАналитикаВидаУчета.Склад = &Склад)) КАК УчетЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |		ПО УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	               |		ПО УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	               |		ПО УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструПартииТоваровНаСкладах_РАУЗ()

// Функция формирует текст запроса по регистру "Партии товаров переданные".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструПартииТоваровПереданные() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПартииТоваровПереданныеБух.Организация КАК Организация,
	               |	ПартииТоваровПереданныеБух.Номенклатура КАК Номенклатура,
	               |	ПартииТоваровПереданныеБух.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ПартииТоваровПереданныеБух.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	ПартииТоваровПереданныеБух.СчетУчета КАК СчетУчета,
	               |	ПартииТоваровПереданныеБух.ДокументОприходования КАК ДокументОприходования,
	               |	ПартииТоваровПереданныеБух.ДокументПередачи КАК ДокументПередачи,
	               |	ПартииТоваровПереданныеБух.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ПартииТоваровПереданныеБух.КоличествоОстаток КАК КоличествоБУ,
	               |	ПартииТоваровПереданныеНал.КоличествоОстаток КАК КоличествоНУ,
	               |	ЕСТЬNULL(ТоварыОрганизацийРегл.КоличествоОстаток, 0) КАК КоличествоРегл,
	               |	ЕСТЬNULL(ТоварыОрганизацийРегл.Качество, 0) КАК Качество,
	               |	ПартииТоваровПереданныеБух.СтоимостьОстаток КАК СуммаБУ,
	               |	ПартииТоваровПереданныеНал.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	ПартииТоваровПереданныеНал.НалоговоеНазначение КАК НалоговоеНазначениеСтарое,
	               |	ПартииТоваровПереданныеНал.НДСВходящийОстаток КАК НДСВходящий,
	               |	ПартииТоваровПереданныеНал.НДСКредитОстаток КАК НДСКредит,
	               |	ПартииТоваровПереданныеНал.СтоимостьОстаток КАК СуммаНУ
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.Остатки(
	               |			&ГраницаПериода,
	               |			Организация = &Организация И НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	               |				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ПартииТоваровПереданныеБух
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УДАЛИТЬПартииТоваровПереданныеНалоговыйУчет.Остатки(
	               |				&ГраницаПериода,
	               |				Организация = &Организация
	               |					И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ПартииТоваровПереданныеНал
	               |		ПО ПартииТоваровПереданныеБух.Организация = ПартииТоваровПереданныеНал.Организация
	               |			И ПартииТоваровПереданныеБух.Номенклатура = ПартииТоваровПереданныеНал.Номенклатура
	               |			И ПартииТоваровПереданныеБух.ХарактеристикаНоменклатуры = ПартииТоваровПереданныеНал.ХарактеристикаНоменклатуры
	               |			И ПартииТоваровПереданныеБух.ДокументОприходования = ПартииТоваровПереданныеНал.ДокументОприходования
	               |			И ПартииТоваровПереданныеБух.ДоговорКонтрагента = ПартииТоваровПереданныеНал.ДоговорКонтрагента
	               |			И ПартииТоваровПереданныеБух.ДокументПередачи = ПартииТоваровПереданныеНал.ДокументПередачи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизацийРегл.Остатки(&ГраницаПериода, Организация = &Организация) КАК ТоварыОрганизацийРегл
	               |		ПО (ТоварыОрганизацийРегл.Организация = ПартииТоваровПереданныеБух.Организация)
	               |			И (ТоварыОрганизацийРегл.Номенклатура = ПартииТоваровПереданныеБух.Номенклатура)
	               |			И (ТоварыОрганизацийРегл.ХарактеристикаНоменклатуры = ПартииТоваровПереданныеБух.ХарактеристикаНоменклатуры)
	               |			И (ТоварыОрганизацийРегл.СчетУчетаБУ = ПартииТоваровПереданныеБух.СчетУчета)
	               |			И (ТоварыОрганизацийРегл.НалоговоеНазначение = ПартииТоваровПереданныеНал.НалоговоеНазначение)
	               |ГДЕ ПартииТоваровПереданныеБух.ДоговорКонтрагента.Владелец = &Контрагент
	               |ИТОГИ
	               |	МАКСИМУМ(СчетУчета),
	               |	СУММА(КоличествоБУ),
	               |	СУММА(КоличествоНУ),
	               |	СУММА(КоличествоРегл),
	               |	СУММА(СуммаБУ),
	               |	МАКСИМУМ(НалоговоеНазначение),
	               |	СУММА(НДСВходящий),
	               |	СУММА(НДСКредит),
	               |	СУММА(СуммаНУ)
	               |ПО
	               |	ДокументОприходования,
	               |	Организация,
	               |	ХарактеристикаНоменклатуры,
	               |	Номенклатура,
	               |	ДоговорКонтрагента,
	               |	ДокументПередачи";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструПартииТоваровНаСкладах()

// Функция формирует текст запроса по регистру "Партии товаров переданные".
//
// Параметры:
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструПартииТоваровПереданные_РАУЗ() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ТоварыОтгруженные) КАК РазделУчетаРАУЗ,
	               |	РегистрАналитикаВидаУчета.Организация КАК Организация,
	               |	РегистрАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
	               |	РегистрАналитикаВидаУчета.СчетУчета КАК СчетУчета,
	               |	РегистрАналитикаВидаУчета.СчетУчетаНУ КАК СчетУчетаНУ,
	               |	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры,
	               |	РегистрАналитикаУчетаЗатрат.СерияЗатраты КАК СерияНоменклатуры,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначениеСтарое,
	               |	РегистрАналитикаУчетаЗатрат.Качество КАК Качество,
	               |	РегистрАналитикаУчетаПартий.ДокументПередачи КАК ДокументПередачи,
	               |	РегистрАналитикаУчетаПартий.Комиссионер КАК Контрагент,
	               |	РегистрАналитикаУчетаПартий.ДоговорКомиссионера КАК ДоговорКонтрагента,
	               |	УчетЗатрат.СтоимостьОстаток КАК Сумма,
	               |	УчетЗатрат.СтоимостьНУОстаток КАК СтоимостьНУРАУЗ,
	               |	УчетЗатрат.НДСВходящийОстаток КАК НДСВходящий,
	               |	УчетЗатрат.НДСКредитОстаток КАК НДСКредит,
	               |	УчетЗатрат.КоличествоОстаток КАК Количество,
	               |	УчетЗатрат.КоличествоНУОстаток КАК КоличествоНУРАУЗ
	               |ИЗ
	               |	РегистрНакопления.УчетЗатратРегл.Остатки(
	               |			&ГраницаПериода,
	               |			АналитикаВидаУчета В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					РегистрАналитикаВидаУчета.Ссылка
	               |				ИЗ
	               |					РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |				ГДЕ
	               |					РегистрАналитикаВидаУчета.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ТоварыОтгруженные))
	               |					И РегистрАналитикаВидаУчета.Организация = &Организация)) КАК УчетЗатрат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	               |		ПО УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	               |		ПО УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	               |		ПО УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
	               |ГДЕ РегистрАналитикаУчетаПартий.Комиссионер = &Комиссионер И РегистрАналитикаУчетаПартий.ДоговорКомиссионера = &ДоговорКомиссионера";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструПартииТоваровПереданные_РАУЗ()

Процедура ЗаполнитьТЧТекущимиОстатками() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодКонец",Дата);
	Запрос.УстановитьПараметр("ГраницаПериода",Новый Граница(Дата,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",Организация);
	
	
	
	Если РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.БракВПроизводстве Тогда
		
		Если ИспользоватьРасширеннуюАналитику Тогда
			
			Запрос.Текст = ПолучитьЗапросПоРегиструБракВПроизводстве_РАУЗ();
			
			Запрос.УстановитьПараметр("МассивСчетов", ПланыСчетов.Хозрасчетный.БракВПроизводстве);
			
			Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РегистрАналитикаВидаУчета.ПодразделениеОрганизации = &Подразделение", "");
			КонецЕсли;	
			
		Иначе	
			
			Запрос.Текст = ПолучитьЗапросПоРегиструБракВПроизводстве();
			
			Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Подразделение = &Подразделение", "");
			КонецЕсли;	
			
		КонецЕсли;
		
			
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОстаткиБУ = РезультатЗапроса.Выгрузить();
		
		Для Каждого СтрокаОстаткиБУ Из ОстаткиБУ Цикл	
			
			НоваяСтрока = ДанныеРегистров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиБУ);	
			
			Если ЗначениеЗаполнено(СтрокаОстаткиБУ.НалоговоеНазначение) Тогда
				// Если налоговые назначения не были обновлены, то самостоятельно выполним мэпинг		
				НоваяСтрока.НалоговоеНазначение = ПолучитьНалоговоеНазначениеНКУ(СтрокаОстаткиБУ.НалоговоеНазначение);
			КонецЕсли;
			
			НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
			
		КонецЦикла; 	
		
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.НезавершенноеПроизводство Тогда
		
		Если ИспользоватьРасширеннуюАналитику Тогда
			
			Запрос.Текст = ПолучитьЗапросПоРегиструНезавершенноеПроизводство_РАУЗ();
			
			МассивСчетов = Новый Массив;
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
			
			Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
			
			Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РегистрАналитикаВидаУчета.ПодразделениеОрганизации = &Подразделение", "");
			КонецЕсли;	
			
		Иначе	
			
			Запрос.Текст = ПолучитьЗапросПоРегиструНезавершенноеПроизводство();
			
			Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Подразделение = &Подразделение", "");
			КонецЕсли;	
			
		КонецЕсли;
		
			
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОстаткиБУ = РезультатЗапроса.Выгрузить();
		
		Для Каждого СтрокаОстаткиБУ Из ОстаткиБУ Цикл	
			
			НоваяСтрока = ДанныеРегистров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиБУ);	
			
			Если ЗначениеЗаполнено(СтрокаОстаткиБУ.НалоговоеНазначение) Тогда
				// Если налоговые назначения не были обновлены, то самостоятельно выполним мэпинг		
				НоваяСтрока.НалоговоеНазначение = ПолучитьНалоговоеНазначениеНКУ(СтрокаОстаткиБУ.НалоговоеНазначение);
			КонецЕсли;
			
			НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
			
		КонецЦикла; 	
		
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ПартииМатериаловВЭксплуатации Тогда
		
		
		Если ИспользоватьРасширеннуюАналитику Тогда
			
			Запрос.Текст = ПолучитьЗапросПоРегиструПартииМатериаловВЭксплуатации_РАУЗ();
			
			Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РегистрАналитикаВидаУчета.ПодразделениеОрганизации = &Подразделение", "");
			КонецЕсли;	
			
		Иначе	
			
			Запрос.Текст = ПолучитьЗапросПоРегиструПартииМатериаловВЭксплуатации();
			
			Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Подразделение = &Подразделение", "");
			КонецЕсли;	
			
		КонецЕсли;
		
			
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОстаткиБУ = РезультатЗапроса.Выгрузить();
		
		Если ИспользоватьРасширеннуюАналитику Тогда
			Если мУчетнаяПолитикаРегл.ЕстьНДС Тогда
				НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
			Иначе	
				НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
			КонецЕсли;	
			ОстаткиБУ.ЗаполнитьЗначения(НалоговоеНазначение,"НалоговоеНазначение");
		КонецЕсли;	
		
		Для Каждого СтрокаОстаткиБУ Из ОстаткиБУ Цикл	
			
			НоваяСтрока = ДанныеРегистров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиБУ);	
			
			Если НЕ ИспользоватьРасширеннуюАналитику И ЗначениеЗаполнено(СтрокаОстаткиБУ.НалоговоеНазначение) Тогда
				// Если налоговые назначения не были обновлены, то самостоятельно выполним мэпинг		
				НоваяСтрока.НалоговоеНазначение = ПолучитьНалоговоеНазначениеНКУ(СтрокаОстаткиБУ.НалоговоеНазначение);
			КонецЕсли;
			
			НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
			
		КонецЦикла; 	
		
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ТЗР Тогда
		
		Если ИспользоватьРасширеннуюАналитику Тогда
			
			Запрос.Текст = ПолучитьЗапросПоРегиструЗатраты_РАУЗ();
			
			МассивСчетов = Новый Массив;
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы);
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары);
			
			Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
			
			Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РегистрАналитикаВидаУчета.ПодразделениеОрганизации = &Подразделение", "");
			КонецЕсли;	
			
		Иначе	
			
			Запрос.Текст = ПолучитьЗапросПоРегиструЗатраты();
			
			Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Подразделение = &Подразделение", "");
			КонецЕсли;	
			
		КонецЕсли;
		
			
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОстаткиБУ = РезультатЗапроса.Выгрузить();
		
		Для Каждого СтрокаОстаткиБУ Из ОстаткиБУ Цикл	
			
			НоваяСтрока = ДанныеРегистров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиБУ);	
			
			Если ЗначениеЗаполнено(СтрокаОстаткиБУ.НалоговоеНазначение) Тогда
				// Если налоговые назначения не были обновлены, то самостоятельно выполним мэпинг		
				НоваяСтрока.НалоговоеНазначение = ПолучитьНалоговоеНазначениеНКУ(СтрокаОстаткиБУ.НалоговоеНазначение);
			КонецЕсли;
			
			НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
			
		КонецЦикла; 	
		
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.КапитальныеИнвестиции Тогда
		
		Запрос.Текст = ПолучитьЗапросПоРегиструСтроительствоОбъектовОсновныхСредств();
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КапитальноеСтроительство); // 151
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИзготовлениеОсновныхСредств); // 1522
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИзготовлениеДругихНеоборотныхМатериальныхАктивов); //1532
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИзготовлениеНематериальныхАктивов); //1542
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживаниеИРемонт); //235
		
		Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОстаткиБУ = РезультатЗапроса.Выгрузить();
		
		Для Каждого СтрокаОстаткиБУ Из ОстаткиБУ Цикл	
			
			НоваяСтрока = ДанныеРегистров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиБУ);	
			
			Если ЗначениеЗаполнено(СтрокаОстаткиБУ.НалоговоеНазначение) Тогда
				// Если налоговые назначения не были обновлены, то самостоятельно выполним мэпинг		
				НоваяСтрока.НалоговоеНазначение = ПолучитьНалоговоеНазначениеНКУ(СтрокаОстаткиБУ.НалоговоеНазначение);
			КонецЕсли;
			
		КонецЦикла; 	
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.РасходыБудущихПериодов Тогда
		
		Запрос.Текст = ПолучитьЗапросПоРБП();
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов); // 39
		
		Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОстаткиБУ = РезультатЗапроса.Выгрузить();
		
		Для Каждого СтрокаОстаткиБУ Из ОстаткиБУ Цикл	
			
			НоваяСтрока = ДанныеРегистров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиБУ);	
			
			НалоговоеНазначениеНУ = НалоговоеНазначениеРБП(СтрокаОстаткиБУ);
			
			Если ЗначениеЗаполнено(НалоговоеНазначениеНУ) Тогда
				// Если налоговые назначения не были обновлены, то самостоятельно выполним мэпинг		
				НоваяСтрока.НалоговоеНазначение = ПолучитьНалоговоеНазначениеНКУ(НалоговоеНазначениеНУ);
			КонецЕсли;
			
		КонецЦикла; 	
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ЗапасыНаСкладах Тогда
		
		Если ИспользоватьРасширеннуюАналитику Тогда
			Запрос.Текст = ПолучитьЗапросПоРегиструПартииТоваровНаСкладах_РАУЗ();
			
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РегистрАналитикаВидаУчета.Склад = &Склад", "");
			КонецЕсли;	
			
	        Запрос.УстановитьПараметр("Склад", Склад);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ОстаткиБУ = РезультатЗапроса.Выгрузить();
			
			Для Каждого СтрокаОстаткиБУ Из ОстаткиБУ Цикл	
				
				НоваяСтрока = ДанныеРегистров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиБУ);	
				
				Если ЗначениеЗаполнено(СтрокаОстаткиБУ.НалоговоеНазначение) Тогда
					// Если налоговые назначения не были обновлены, то самостоятельно выполним мэпинг		
					НоваяСтрока.НалоговоеНазначение = ПолучитьНалоговоеНазначениеНКУ(СтрокаОстаткиБУ.НалоговоеНазначение);
				КонецЕсли;
				
				НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
				
			КонецЦикла; 	
			
		Иначе	
			Запрос.Текст = ПолучитьЗапросПоРегиструПартииТоваровНаСкладах();
			
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Склад = &Склад", "");
			КонецЕсли;	
		
	        Запрос.УстановитьПараметр("Склад", Склад);

			РезультатЗапроса = Запрос.Выполнить();

			ТаблицаТоварыРегл = РезультатЗапроса.Выгрузить();
			ТаблицаТоварыРегл.Очистить();
			
			ОбходПоГруппировке1 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //Организация
			Пока ОбходПоГруппировке1.Следующий() Цикл
				ОбходПоГруппировке2 = ОбходПоГруппировке1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //Номенклатура
				Пока ОбходПоГруппировке2.Следующий() Цикл
					ОбходПоГруппировке3 = ОбходПоГруппировке2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //Склад
					Пока ОбходПоГруппировке3.Следующий() Цикл
						ОбходПоГруппировке4 = ОбходПоГруппировке3.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //ДокументОприходования
						Пока ОбходПоГруппировке4.Следующий() Цикл
							ОбходПоГруппировке5 = ОбходПоГруппировке4.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //ХарактеристикаНоменклатуры
							Пока ОбходПоГруппировке5.Следующий() Цикл
								ОбходПоГруппировке6 = ОбходПоГруппировке5.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //СерияНоменклатуры
								Пока ОбходПоГруппировке6.Следующий() Цикл
									ОбходПоГруппировке7 = ОбходПоГруппировке6.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //Заказ
									Пока ОбходПоГруппировке7.Следующий() Цикл
										ОбходПоГруппировке8 = ОбходПоГруппировке7.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //Качество
										Пока ОбходПоГруппировке8.Следующий() Цикл
											
											ТаблицаТоварыРегл.Очистить();
											
											Обход = ОбходПоГруппировке8.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
											Пока Обход.Следующий() Цикл
												
												НоваяСтрокаТаблицыТоварыРегл = ТаблицаТоварыРегл.Добавить();
												ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыТоварыРегл, Обход);
												
											КонецЦикла;	
											
											ТаблицаОстатковБУ = ТаблицаТоварыРегл.Скопировать();
											ТаблицаОстатковБУ.Свернуть("СчетУчета, КоличествоБУ, СуммаБУ");
											
											ТаблицаОстатковНУ = ТаблицаТоварыРегл.Скопировать();
											ТаблицаОстатковНУ.Свернуть("НалоговоеНазначение, КоличествоНУ, СуммаНУ, НДСВходящий, НДСКредит");
											
											ТаблицаПартий = СформироватьОбъединеннуюТаблицуПартий(РазделУчета, ТаблицаТоварыРегл, ТаблицаОстатковБУ, ТаблицаОстатковНУ);
											
											ТаблицаПартий.Колонки.КоличествоБУ.Имя 	= "Количество";
											ТаблицаПартий.Колонки.СуммаБУ.Имя 	= "Сумма";
											
											Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
												НоваяСтрока = ДанныеРегистров.Добавить();
												ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоГруппировке8);
												ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
												
												Если ЗначениеЗаполнено(НоваяСтрока.НалоговоеНазначение) Тогда
													// Если налоговые назначения не были обновлены, то самостоятельно выполним мэпинг		
													НоваяСтрока.НалоговоеНазначение = ПолучитьНалоговоеНазначениеНКУ(НоваяСтрока.НалоговоеНазначение);
												КонецЕсли;
												
												НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
												
											КонецЦикла;	
											
										КонецЦикла;	
									КонецЦикла;	
								КонецЦикла;	
							КонецЦикла;	
						КонецЦикла;	
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;				
	
		КонецЕсли;
		
	ИначеЕсли РазделУчета = Перечисления.РазделыУчетаДляКорректировкиОстатковНКУна01042011.ЗапасыПереданные Тогда
		
		Если ИспользоватьРасширеннуюАналитику Тогда
			Запрос.Текст = ПолучитьЗапросПоРегиструПартииТоваровПереданные_РАУЗ();
			
			Запрос.УстановитьПараметр("ДоговорКомиссионера", ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Комиссионер", Контрагент);
			
			Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РегистрАналитикаУчетаПартий.ДоговорКомиссионера = &ДоговорКомиссионера", "");
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ РегистрАналитикаУчетаПартий.Комиссионер = &Комиссионер", "");
			КонецЕсли;	
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ОстаткиБУ = РезультатЗапроса.Выгрузить();
			
			Для Каждого СтрокаОстаткиБУ Из ОстаткиБУ Цикл	
				
				НоваяСтрока = ДанныеРегистров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиБУ);	
				
				Если ЗначениеЗаполнено(СтрокаОстаткиБУ.НалоговоеНазначение) Тогда
					// Если налоговые назначения не были обновлены, то самостоятельно выполним мэпинг		
					НоваяСтрока.НалоговоеНазначение = ПолучитьНалоговоеНазначениеНКУ(СтрокаОстаткиБУ.НалоговоеНазначение);
				КонецЕсли;
				
				НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
				
			КонецЦикла; 	
			
		Иначе	
			Запрос.Текст = ПолучитьЗапросПоРегиструПартииТоваровПереданные();
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			
			Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДоговорКонтрагента = &ДоговорКонтрагента", "");
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ ПартииТоваровПереданныеБух.ДоговорКонтрагента.Владелец = &Контрагент", "");
			КонецЕсли;	

			РезультатЗапроса = Запрос.Выполнить();

			ТаблицаТоварыРегл = РезультатЗапроса.Выгрузить();
			ТаблицаТоварыРегл.Очистить();
			
			
			ОбходПоГруппировке1 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //Номенклатура
			Пока ОбходПоГруппировке1.Следующий() Цикл
				ОбходПоГруппировке2 = ОбходПоГруппировке1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //Организация
				Пока ОбходПоГруппировке2.Следующий() Цикл
					ОбходПоГруппировке3 = ОбходПоГруппировке2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //ДоговорКонтрагента
					Пока ОбходПоГруппировке3.Следующий() Цикл
						ОбходПоГруппировке4 = ОбходПоГруппировке3.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //ДокументПередачи
						Пока ОбходПоГруппировке4.Следующий() Цикл
							ОбходПоГруппировке5 = ОбходПоГруппировке4.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //ДокументОприходования
							Пока ОбходПоГруппировке5.Следующий() Цикл
								ОбходПоГруппировке6 = ОбходПоГруппировке5.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //ХарактеристикаНоменклатуры
								Пока ОбходПоГруппировке6.Следующий() Цикл
											
									ТаблицаТоварыРегл.Очистить();
									
									Обход = ОбходПоГруппировке6.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									Пока Обход.Следующий() Цикл
										
										НоваяСтрокаТаблицыТоварыРегл = ТаблицаТоварыРегл.Добавить();
										ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыТоварыРегл, Обход);
										
									КонецЦикла;	
									
									ТаблицаОстатковБУ = ТаблицаТоварыРегл.Скопировать();
									ТаблицаОстатковБУ.Свернуть("СчетУчета, КоличествоБУ, СуммаБУ");
									
									ТаблицаОстатковНУ = ТаблицаТоварыРегл.Скопировать();
									ТаблицаОстатковНУ.Свернуть("НалоговоеНазначение, КоличествоНУ, СуммаНУ, НДСВходящий, НДСКредит");
									
									ТаблицаПартий = СформироватьОбъединеннуюТаблицуПартий(РазделУчета, ТаблицаТоварыРегл, ТаблицаОстатковБУ, ТаблицаОстатковНУ);
									
									ТаблицаПартий.Колонки.КоличествоБУ.Имя 	= "Количество";
									ТаблицаПартий.Колонки.СуммаБУ.Имя 	= "Сумма";
									
									Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
										НоваяСтрока = ДанныеРегистров.Добавить();
										ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоГруппировке6);
										ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
										
										Если ЗначениеЗаполнено(НоваяСтрока.НалоговоеНазначение) Тогда
											// Если налоговые назначения не были обновлены, то самостоятельно выполним мэпинг		
											НоваяСтрока.НалоговоеНазначение = ПолучитьНалоговоеНазначениеНКУ(НоваяСтрока.НалоговоеНазначение);
										КонецЕсли;
										
										НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
										
									КонецЦикла;	
											
								КонецЦикла;	
							КонецЦикла;	
						КонецЦикла;	
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;		
		КонецЕсли;	
	КонецЕсли;	
	
	ЗаполнитьСуммыНУВТабличнойЧасти(ДанныеРегистров);
	
КонецПроцедуры

Функция СформироватьОбъединеннуюТаблицуПартий(РазделУчета, ТаблицаТоварыРегл, ТаблицаОстатковБУ, ТаблицаОстатковНУ)

	Если ТаблицаТоварыРегл.Количество() <= 1 Тогда
		Возврат ТаблицаТоварыРегл.Скопировать();
	КонецЕсли;	
	
	
	Если ТаблицаТоварыРегл.Итог("КоличествоРегл") > 0 Тогда
		// Есть данные по регистру "Товары организаций (регл)"
		
		ТаблицаПартийРезультат = ТаблицаТоварыРегл.СкопироватьКолонки();
		
		
		СтруктураОтбораБУ = Новый Структура("СчетУчета");
		СтруктураОтбораНУ = Новый Структура("НалоговоеНазначение");
		
		Для Каждого СтрокаРегл Из ТаблицаТоварыРегл Цикл
			
			Если СтрокаРегл.КоличествоРегл = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			КвоСписуемРегл = Мин(СтрокаРегл.КоличествоРегл, СтрокаРегл.КоличествоБУ);
			
			// отбираем строки с такими же измерениями в таблице НУ
			ЗаполнитьЗначенияСвойств(СтруктураОтбораНУ, СтрокаРегл);
			МассивСтрокНУ = ТаблицаОстатковНУ.НайтиСтроки(СтруктураОтбораНУ);
			Для Каждого СтрокаНУ Из МассивСтрокНУ Цикл
				
				Если СтрокаНУ.КоличествоНУ > 0 Тогда
				
					КвоСписуем = Мин(СтрокаНУ.КоличествоНУ, КвоСписуемРегл);
					
					// добавляем строки в результирующую таблицу
					СтрокаРезультат = ТаблицаПартийРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаРегл);
					
					Если СтрокаРезультат.КоличествоРегл <> КвоСписуем Тогда
						СтрокаРезультат.КоличествоРегл = КвоСписуем;
					КонецЕсли;	
					
					
					Если КвоСписуем = СтрокаНУ.КоличествоНУ Тогда
						СуммаСписуем = СтрокаНУ.СуммаНУ;
					Иначе
						СуммаСписуем = Окр((КвоСписуем/СтрокаНУ.КоличествоНУ) * СтрокаНУ.СуммаНУ, 2);
					КонецЕсли;
					
					СтрокаРезультат.КоличествоБУ = СтрокаРезультат.КоличествоРегл;
					СтрокаРезультат.СуммаБУ = СуммаСписуем;
					
					СтрокаРезультат.СуммаНУ  = ОКР((КвоСписуем / СтрокаНУ.КоличествоНУ) * СтрокаНУ.СуммаНУ, 2);
					СтрокаРезультат.НДСВходящий = ОКР((КвоСписуем / СтрокаНУ.КоличествоНУ) * СтрокаНУ.НДСВходящий, 2);
					СтрокаРезультат.НДСКредит = ОКР((КвоСписуем / СтрокаНУ.КоличествоНУ) * СтрокаНУ.НДСКредит, 2);
					
					СтрокаНУ.КоличествоНУ = СтрокаНУ.КоличествоНУ - КвоСписуем;
					СтрокаНУ.СуммаНУ = СтрокаНУ.СуммаНУ - СуммаСписуем;
					
					СтрокаНУ.НДСВходящий = СтрокаНУ.НДСВходящий - СтрокаРезультат.НДСВходящий;
					СтрокаНУ.НДСКредит = СтрокаНУ.НДСКредит - СтрокаРезультат.НДСКредит;
					
					
					КвоСписуемРегл = КвоСписуемРегл - КвоСписуем;
					
				КонецЕсли;	
				
				Если КвоСписуемРегл = 0 Тогда
					Прервать;
				КонецЕсли; 
				
			КонецЦикла;	
			
			// отбираем строки с такими же измерениями в таблице БУ
			ЗаполнитьЗначенияСвойств(СтруктураОтбораБУ, СтрокаРегл);
			МассивСтрокБУ = ТаблицаОстатковБУ.НайтиСтроки(СтруктураОтбораБУ);
			Для Каждого СтрокаБУ Из МассивСтрокБУ Цикл
				
				Если СтрокаБУ.КоличествоБУ > 0 Тогда
				
					КвоСписуем = Мин(СтрокаБУ.КоличествоБУ, КвоСписуемРегл);
					
					Если КвоСписуем = СтрокаБУ.КоличествоБУ Тогда
						СуммаСписуем = СтрокаБУ.СуммаБУ;
					Иначе
						СуммаСписуем = Окр((КвоСписуем/СтрокаБУ.КоличествоБУ) * СтрокаБУ.СуммаБУ, 2);
					КонецЕсли;
					
					СтрокаБУ.КоличествоБУ = СтрокаБУ.КоличествоБУ - КвоСписуем;
					СтрокаБУ.СуммаБУ = СтрокаБУ.СуммаБУ - СуммаСписуем;
					
				КонецЕсли;
				
				
			КонецЦикла;	
			
			
			
		КонецЦикла;	
		
	Иначе
		// Нет данныхпо регистру "Товары организаций (регл)"
		
		ТаблицаПартийРезультат = ТаблицаОстатковБУ.СкопироватьКолонки();
		Для Каждого Колонка Из ТаблицаОстатковНУ.Колонки Цикл
			Если ТаблицаПартийРезультат.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				ТаблицаПартийРезультат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
			КонецЕсли; 
		КонецЦикла; 
		
		
		Для Каждого СтрокаБУ Из ТаблицаОстатковБУ Цикл
			КвоСписуемБУ = СтрокаБУ.КоличествоБУ;
			СуммаСписуемБУ = СтрокаБУ.СуммаБУ;
			
			Для Каждого СтрокаНУ Из ТаблицаОстатковНУ Цикл
				
				Если СтрокаНУ.КоличествоНУ > 0 Тогда
					КвоСписуем = Мин(СтрокаНУ.КоличествоНУ, КвоСписуемБУ);
					
					// добавляем строки в результирующую таблицу
					СтрокаРезультат = ТаблицаПартийРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаБУ);
					ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаНУ);
					//СтрокаРезультат.НалоговоеНазначение = СтрокаНУ.НалоговоеНазначение;
					//СтрокаРезультат.Количество = КвоСписуем;
					СтрокаРезультат.КоличествоБУ = КвоСписуем;
					Если КвоСписуем = КвоСписуемБУ Тогда
						СуммаСписуем = СуммаСписуемБУ;
					Иначе
						СуммаСписуем = Окр((КвоСписуем/СтрокаБУ.КоличествоБУ) * СтрокаБУ.СуммаБУ, 2);
					КонецЕсли;
					СтрокаРезультат.СуммаБУ = СуммаСписуем;
					
					СтрокаРезультат.КоличествоНУ = КвоСписуем;

					СтрокаРезультат.СуммаНУ = ОКР((КвоСписуем / СтрокаНУ.КоличествоНУ) * СтрокаНУ.СуммаНУ, 2);
					СтрокаРезультат.НДСВходящий = ОКР((КвоСписуем / СтрокаНУ.КоличествоНУ) * СтрокаНУ.НДСВходящий, 2);
					СтрокаРезультат.НДСКредит = ОКР((КвоСписуем / СтрокаНУ.КоличествоНУ) * СтрокаНУ.НДСКредит, 2);
					
					СтрокаНУ.КоличествоНУ = СтрокаНУ.КоличествоНУ - КвоСписуем;
					
					СтрокаНУ.СуммаНУ = СтрокаНУ.СуммаНУ - СуммаСписуем;
					
					СтрокаНУ.НДСВходящий = СтрокаНУ.НДСВходящий - СтрокаРезультат.НДСВходящий;
					СтрокаНУ.НДСКредит = СтрокаНУ.НДСКредит - СтрокаРезультат.НДСКредит;
					
					КвоСписуемБУ = КвоСписуемБУ - КвоСписуем;
					СуммаСписуемБУ = СуммаСписуемБУ - СуммаСписуем;
					
				КонецЕсли; 
				
				Если КвоСписуемБУ = 0 Тогда
					Прервать;
				КонецЕсли; 
				
			КонецЦикла; 
			
			// если КвоСписуемБУ > 0 - то в НУ уже нет такой номенклатуры
			// добавим строку с пустым налоговым назначением, с пустым счетом учета НУ и пустыми ресурсами НУ
			Если КвоСписуемБУ > 0 Тогда
				СтрокаРезультат = ТаблицаПартийРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаБУ);
				СтрокаРезультат.КоличествоБУ = КвоСписуемБУ;
				СтрокаРезультат.СуммаБУ  = СуммаСписуемБУ;
			КонецЕсли; 
			
		КонецЦикла;
		
		
	КонецЕсли;	
	
	
	
	
	Возврат ТаблицаПартийРезультат;
	
КонецФункции // СформироватьОбъединеннуюТаблицуПартий()	

Функция НалоговоеНазначениеРБП(ТекущиеДанные) Экспорт	
	
	// Для производственных и строительных РБП налоговое назначение должно получаться через точку
	// для остальных РБП налоговое назначение устанавливается в документе
	Аналитика = ТекущиеДанные.РБП;
	Если ТипЗнч(Аналитика) = Тип("СправочникСсылка.РасходыБудущихПериодов")Тогда
		ХарактерЗатратРБП = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(Аналитика.СчетБУ, Неопределено);
		
		Если ХарактерЗатратРБП = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы 
			ИЛИ ХарактерЗатратРБП = Перечисления.ХарактерЗатрат.АдминистративныеРасходы
			ИЛИ ХарактерЗатратРБП = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы
			ИЛИ ХарактерЗатратРБП = Перечисления.ХарактерЗатрат.РасходыНаСбыт
			Тогда
			
			Возврат Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
			
		ИначеЕсли ХарактерЗатратРБП = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			Если ЗначениеЗаполнено(Аналитика.НоменклатурнаяГруппа.НалоговоеНазначение) Тогда
				Возврат Аналитика.НоменклатурнаяГруппа.НалоговоеНазначение;
			КонецЕсли;
		КонецЕсли;	
		
		Возврат Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;

	КонецЕсли;
	
	Возврат Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();;
	
КонецФункции

// Функция формирует значение нового ключа строки табличной части.
//
// Параметры:
//  ИмяТЧ          – имя табличной части объекта.
//
Функция ПолучитьНовыйКлючСтроки(ИмяТЧ = "ДанныеРегистров") Экспорт

	Если ЭтотОбъект[ИмяТЧ].Количество() = 0 Тогда
		МаксКлюч = 1;
	Иначе
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей.ЗагрузитьЗначения(ЭтотОбъект[ИмяТЧ].ВыгрузитьКолонку("КлючСтроки"));
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЕсли;

	Возврат МаксКлюч;

КонецФункции // ПолучитьНовыйКлючСвязи()

ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= '20110331235959');
