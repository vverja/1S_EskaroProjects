Перем мУдалятьДвижения;

// Структура соответствия измерений бюджетирования наименованиям субконто
Перем СтруктураСоответствия;

// Переменные, в которых будут храниться данные для пересчета сумм по курсам
Перем КурсВалютыОперации Экспорт;
Перем КратностьВалютыОперации Экспорт;
	
Перем КурсВалютыУпрУчета Экспорт;
Перем КратностьВалютыУпрУчета Экспорт;

Перем КурсВалютыРеглУчета Экспорт;
Перем КратностьВалютыРеглУчета Экспорт;
	
Перем КурсВалютыСценария Экспорт;
Перем КратностьВалютыСценария Экспорт;

Перем ВалютаУпр Экспорт;
Перем ВалютаСценария Экспорт;
Перем ВалютаРегл Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда

// Производит пересчет двух других сумм остатка строки ТЧ при изменении третьей
//
// Параметры
//  ТипСуммы: строка - наименование изменившегося поля.
//
Процедура РасчетСумм(ТипСуммы,СтрокаТЧ) Экспорт
	
	СтруктураКурсыВалютыОперации=Бюджетирование.КурсВалютыПоСценарию(СтрокаТЧ.Валюта,ДатаНачала,Сценарий);
    КурсВалютыОперации=СтруктураКурсыВалютыОперации.Курс;
	КратностьВалютыОперации=СтруктураКурсыВалютыОперации.Кратность;
	
	Если ТипСуммы="СуммаУпр" Тогда
		
		Если СтрокаТЧ.Счет.Валютный и НЕ СтрокаТЧ.Валюта.Пустая() Тогда
			
			СтрокаТЧ.ВалютнаяСумма=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпр, ВалютаУпр, СтрокаТЧ.Валюта, КурсВалютыУпрУчета, КурсВалютыОперации, 
								КратностьВалютыУпрУчета, КратностьВалютыОперации);
			
		КонецЕсли;
		
		Если НЕ Сценарий.Пустая() Тогда
			
			СтрокаТЧ.СуммаСценария=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпр, ВалютаУпр, ВалютаСценария, КурсВалютыУпрУчета, КурсВалютыСценария, 
								КратностьВалютыУпрУчета, КратностьВалютыСценария);
			
		КонецЕсли;
		
	ИначеЕсли ТипСуммы="ВалютнаяСумма" Тогда
		
		СтрокаТЧ.СуммаУпр=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.ВалютнаяСумма, СтрокаТЧ.Валюта, ВалютаУпр,КурсВалютыОперации ,КурсВалютыУпрУчета, 
								КратностьВалютыОперации,КратностьВалютыУпрУчета);
								
								
		Если НЕ Сценарий.Пустая() Тогда						
			СтрокаТЧ.СуммаСценария=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.ВалютнаяСумма,СтрокаТЧ.Валюта,ВалютаСценария,КурсВалютыОперации ,КурсВалютыСценария, 
								КратностьВалютыОперации,КратностьВалютыСценария);
		КонецЕсли;
								
	ИначеЕсли ТипСуммы="СуммаСценария" Тогда
								
        Если СтрокаТЧ.Счет.Валютный и НЕ СтрокаТЧ.Валюта.Пустая() Тогда
			
			СтрокаТЧ.ВалютнаяСумма=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаСценария, ВалютаСценария, СтрокаТЧ.Валюта, КурсВалютыСценария, КурсВалютыОперации, 
								КратностьВалютыСценария, КратностьВалютыОперации);
			
		КонецЕсли;
		
		СтрокаТЧ.СуммаУпр=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаСценария, ВалютаСценария, ВалютаУпр, КурсВалютыСценария, КурсВалютыУпрУчета, 
								КратностьВалютыСценария, КратностьВалютыУпрУчета);
								
	КонецЕсли;
	

КонецПроцедуры // РасчетСумм()

// Заполняет таблицу на основании показателей источников данных, указанных
// в реквизитах счетов
//
// Параметры: нет
//
Процедура ЗаполнитьПоДаннымИсточников() Экспорт

	// Выберем счета, для которых возможно получить данные (указан источник)
	Запрос=Новый Запрос;
	СтруктураПараметров=Новый Структура;
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	Бюджетирование.Ссылка КАК Счет,
	             |	Бюджетирование.Валютный КАК Валютный,
	             |	Бюджетирование.Количественный КАК Количественный,
	             |	БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	             |	БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	             |	БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3,
	             |	Бюджетирование.ИсточникДанныхДляФакта.ТекстЗапроса КАК ТекстЗапроса,
	             |	Бюджетирование.ИсточникДанныхДляФакта.НастройкиПостроителя КАК НастройкиПостроителя,
				 |	Бюджетирование.ИсточникДанныхДляФакта.ПроизвольныйЗапрос КАК ПроизвольныйЗапрос,
	             |	Бюджетирование.ПоказательИсточникаДанныхДляФактаСум КАК ПоказательИсточникаДанныхДляФактаСум,
				 |	Бюджетирование.КоэффициентДляФактаСум КАК КоэффициентДляФактаСум,
	             |	Бюджетирование.СпособОпределенияВалютыОборотаФакт КАК СпособОпределенияВалюты,
	             |	Бюджетирование.ПоказательИсточникаДанныхДляФактаКол КАК ПоказательИсточникаДанныхДляФактаКол,
				  |	Бюджетирование.КоэффициентДляФактаКол КАК КоэффициентДляФактаКол,
	             |	Бюджетирование.ИсточникДанныхДляФакта.ИзмеренияИсточника КАК ИзмеренияИсточника,
	             |	Бюджетирование.ИсточникДанныхДляФакта.ДатыОтбораДанныхИсточника КАК ДатыОтбораДанныхИсточника,
	             |	Бюджетирование.Представление
	             |ИЗ
	             |	ПланСчетов.Бюджетирование КАК Бюджетирование
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	             |		ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	             |		ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	             |		ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)
	             |
	             |ГДЕ
	             |	НЕ Бюджетирование.ИсточникДанныхДляФакта = &ПустойИсточник";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("ПустойИсточник",Новый(Тип("СправочникСсылка.ИсточникиДанныхДляРасчетовБюджетирования")));
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();

	НовыеОстаткиПоСчетамБюджетирования.Очистить();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		ПолучитьДанныеПоСчету(РезультатЗапроса);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоДаннымИсточников()

// Формирует строку (строки) таблицы "НовыеОстаткиПоСчетамБюджетирования" по данным источника,
// указанного для счета
//
// Параметры
//  Счет: строка результата запроса - содержит данные, необходимые для 
//  получения фактических данных.
//
Процедура ПолучитьДанныеПоСчету(Счет)
	
	ПостроительОтчета=Новый ПостроительОтчета;
	
	ПостроительОтчета.Текст = Счет.ТекстЗапроса;
	
	СохраненнаяНастройка=Счет.НастройкиПостроителя.Получить();
	
	Если ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		
		Если Счет.ПроизвольныйЗапрос Тогда
			ПостроительОтчета.ЗаполнитьНастройки();
		КонецЕсли;
		
		ПостроительОтчета.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
		
		Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
			ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЦикла;
		
	КонецЕсли;
		
	Граница=Счет.ДатыОтбораДанныхИсточника.Выбрать();
	
	Пока Граница.Следующий() Цикл
		
		Если Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.ФиксированнаяДата Тогда
			ДатаГраницы=КонецДня(Граница.ДатаНачальнойГраницыОтсчета);
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.НачалоПериода Тогда
			ДатаГраницы=НачалоДня(ДатаНачала);
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
			ДатаГраницы=?(НЕ ЗначениеЗаполнено(ДатаНачала), КонецДня(ТекущаяДата()), КонецДня(ДатаНачала));
		КонецЕсли;
		
		ПостроительОтчета.Параметры.Вставить(Граница.ИмяДатаГраницы, ДатаГраницы);
		
	КонецЦикла;

	ПостроительОтчета.Выполнить();
	ТабИсточника=ПостроительОтчета.Результат.Выгрузить();
	
	Если ТабИсточника.Количество()=0 Тогда
		Сообщить("Нет данных по счету "+Счет.Представление);
		Возврат;
	КонецЕсли;
	
	ИзмерениеИсточника=Счет.ИзмеренияИсточника.Выбрать();
	СоставИзмерений=Новый Структура;
	
	// Эта структура необходимо, что бы при изменении имен колонок таблицы, при попытке установить две колонки
	// с одинаковыми именами все не повалилось, в дальнейшем, будем обращаться к значениям строк через эту структуру
	СоответствиеКолонок = Новый Структура();
	
	ИндексКолонки = 0;
	Пока ИзмерениеИсточника.Следующий() Цикл
		
		ТабИсточника.Колонки[ИзмерениеИсточника.ИмяПоляИсточника].Имя = "_" + Строка(ИндексКолонки);
		СоответствиеКолонок.Вставить(ИзмерениеИсточника.ИзмерениеБюджетирования, ("_" + Строка(ИндексКолонки)));
		СоставИзмерений.Вставить(ИзмерениеИсточника.ИзмерениеБюджетирования,ИзмерениеИсточника.ИзмерениеБюджетирования);
		
		ИндексКолонки = ИндексКолонки + 1;
		
	КонецЦикла;
	
	// Теперь переименуем оставшиеся колонки, что бы все соответствия имен у нас были в одной структуре
	Для каждого КолонкаТаблицы Из ТабИсточника.Колонки Цикл
	
		Если Сред(КолонкаТаблицы.Имя, 1, 1) = "_" Тогда
			Продолжить;;
		КонецЕсли; 
		
		СоответствиеКолонок.Вставить(КолонкаТаблицы.Имя, ("_" + Строка(ИндексКолонки)));
		КолонкаТаблицы.Имя = "_" + Строка(ИндексКолонки);
		
		ИндексКолонки = ИндексКолонки + 1;
		
	КонецЦикла; 
	
	ИмяИзмерения="";
	
	Для Каждого СтрокаИсточник Из ТабИсточника Цикл
	
		СтрокаСчет=НовыеОстаткиПоСчетамБюджетирования.Добавить();
		СтрокаСчет.Счет=Счет.Счет;
		
		Если НЕ Счет.ПоказательИсточникаДанныхДляФактаСум="" Тогда
			
			Если НЕ СтрокаИсточник[СоответствиеКолонок[Счет.ПоказательИсточникаДанныхДляФактаСум]]=NULL Тогда
				
				СуммаИсточник = СтрокаИсточник[СоответствиеКолонок[Счет.ПоказательИсточникаДанныхДляФактаСум]]*Счет.КоэффициентДляФактаСум;
				
			Иначе
				
				СуммаИсточник=0;
				
			КонецЕсли;
			
		Иначе
			
			СуммаИсточник=0;
			
		КонецЕсли;
		
		Если НЕ Счет.ПоказательИсточникаДанныхДляФактаКол="" Тогда
			
			Если НЕ СтрокаИсточник[СоответствиеКолонок[Счет.ПоказательИсточникаДанныхДляФактаКол]]=NULL Тогда
				
				КоличествоИсточник = СтрокаИсточник[СоответствиеКолонок[Счет.ПоказательИсточникаДанныхДляФактаКол]]*Счет.КоэффициентДляФактаКол;
				
			Иначе
				
				КоличествоИсточник=0;
				
			КонецЕсли;
			
		Иначе
			
			КоличествоИсточник=0;
			
		КонецЕсли;
		
		// Определяем значения субконто
		
		Если НЕ Счет.НаименованиеСубконто1 = NULL И СтруктураСоответствия.Свойство(Счет.НаименованиеСубконто1,ИмяИзмерения) Тогда // Проверяем, есть ли такое
			                                                                               // измерение бюджетирования
			Если СоставИзмерений.Свойство(ИмяИзмерения) Тогда // Проверяем, было ли такое измерение в источнике
				СтрокаСчет.Субконто1 = СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]];
			КонецЕсли;
			ИмяИзмерения="";
		КонецЕсли;
		
		Если НЕ Счет.НаименованиеСубконто2 = NULL И СтруктураСоответствия.Свойство(Счет.НаименованиеСубконто2,ИмяИзмерения) Тогда
			Если СоставИзмерений.Свойство(ИмяИзмерения) Тогда
				СтрокаСчет.Субконто2=СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]];
			КонецЕсли;
			ИмяИзмерения="";
		КонецЕсли;
		
		Если НЕ Счет.НаименованиеСубконто3 = NULL И СтруктураСоответствия.Свойство(Счет.НаименованиеСубконто3,ИмяИзмерения) Тогда
			Если СоставИзмерений.Свойство(ИмяИзмерения) Тогда
				СтрокаСчет.Субконто3=СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]];
			КонецЕсли;
			ИмяИзмерения="";
		КонецЕсли;
		
		// Определяем валюту, в которой получены остатки по источнику
		Если Счет.СпособОпределенияВалюты=Перечисления.СпособыОпределенияВалютыОборотаПоСтатье.ВалютаУправленческогоУчета Тогда
			ВалютаОстатка=глЗначениеПеременной("ВалютаУправленческогоУчета");
			СтрокаСчет.СуммаУпр=СуммаИсточник;
		ИначеЕсли Счет.СпособОпределенияВалюты=Перечисления.СпособыОпределенияВалютыОборотаПоСтатье.ВалютаРегламентированногоУчета Тогда
			ВалютаОстатка=мВалютаРегламентированногоУчета;
			СтрокаСчет.СуммаУпр=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаИсточник, ВалютаОстатка, глЗначениеПеременной("ВалютаУправленческогоУчета"), КурсВалютыРеглУчета, КурсВалютыУпрУчета, 
									КратностьВалютыРеглУчета, КратностьВалютыУпрУчета);
			
		ИначеЕсли Счет.СпособОпределенияВалюты=Перечисления.СпособыОпределенияВалютыОборотаПоСтатье.ВалютаИсточникаДанных Тогда
			Если СоставИзмерений.Свойство("Валюта") Тогда
				ВалютаОстатка=СтрокаИсточник[СоответствиеКолонок["Валюта"]];
			Иначе // По умолчанию
				ВалютаОстатка=глЗначениеПеременной("ВалютаУправленческогоУчета");
				СтрокаСчет.СуммаУпр=СуммаИсточник;
			КонецЕсли;
		КонецЕсли;

		
		Если Счет.Валютный Тогда
			СтрокаСчет.Валюта=ВалютаОстатка;
			СтрокаСчет.ВалютнаяСумма=СуммаИсточник;
			РасчетСумм("ВалютнаяСумма",СтрокаСчет);
		Иначе
			РасчетСумм("СуммаУпр",СтрокаСчет);
		КонецЕсли;
		
		Если Счет.Количественный И НЕ Счет.ПоказательИсточникаДанныхДляФактаКол="" Тогда
			СтрокаСчет.Количество=КоличествоИсточник;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры //ПолучитьДанныеПоСчету()

#КонецЕсли

//
//
Процедура КорректировкаОстатков()

	Запрос=Новый Запрос;
	
	Если НЕ ВыборочнаяКорректировка Тогда
		
		ТекстЗапроса="ВЫБРАТЬ
		|	ТаблицаСравнения.Счет КАК Счет,
		|	ТаблицаСравнения.Счет.Вид КАК ВидСчета,
		|	ТаблицаСравнения.Счет.Забалансовый КАК Забалансовый,
		|	ТаблицаСравнения.Субконто1,
		|	ТаблицаСравнения.Субконто2,
		|	ТаблицаСравнения.Субконто3,
		|	ТаблицаСравнения.Валюта,
		|	СУММА(ТаблицаСравнения.КоличествоНовыйОстаток) - СУММА(ТаблицаСравнения.КоличествоТекущийОстаток) КАК КорректировкаКоличество,
		|	СУММА(ТаблицаСравнения.СуммаУпрНовыйОстаток) - СУММА(ТаблицаСравнения.СуммаУпрТекущийОстаток) КАК КорректировкаСуммаУпр,
		|	СУММА(ТаблицаСравнения.ВалютнаяСуммаНовыйОстаток) - СУММА(ТаблицаСравнения.ВалютнаяСуммаТекущийОстаток) КАК КорректировкаВалютнаяСумма,
		|	СУММА(ТаблицаСравнения.СуммаСценарияНовыйОстаток) - СУММА(ТаблицаСравнения.СуммаСценарияТекущийОстаток) КАК КорректировкаСуммаСценария
		|ИЗ
		|	(ВЫБРАТЬ
		|		БюджетированиеОстатки.Счет КАК Счет,
		|		БюджетированиеОстатки.Субконто1 КАК Субконто1,
		|		БюджетированиеОстатки.Субконто2 КАК Субконто2,
		|		БюджетированиеОстатки.Субконто3 КАК Субконто3,
		|		БюджетированиеОстатки.Валюта КАК Валюта,
		|		ВЫБОР КОГДА БюджетированиеОстатки.Счет.Вид=&Пассивный Тогда БюджетированиеОстатки.КоличествоОстаток*(-1) ИНАЧЕ БюджетированиеОстатки.КоличествоОстаток КОНЕЦ КАК КоличествоТекущийОстаток,
		|		ВЫБОР КОГДА БюджетированиеОстатки.Счет.Вид=&Пассивный Тогда БюджетированиеОстатки.СуммаУпрОстаток*(-1) ИНАЧЕ БюджетированиеОстатки.СуммаУпрОстаток КОНЕЦ КАК СуммаУпрТекущийОстаток,
		|		ВЫБОР КОГДА БюджетированиеОстатки.Счет.Вид=&Пассивный Тогда БюджетированиеОстатки.ВалютнаяСуммаОстаток*(-1) ИНАЧЕ БюджетированиеОстатки.ВалютнаяСуммаОстаток КОНЕЦ КАК ВалютнаяСуммаТекущийОстаток,
		|		ВЫБОР КОГДА БюджетированиеОстатки.Счет.Вид=&Пассивный Тогда БюджетированиеОстатки.СуммаСценарияОстаток*(-1) ИНАЧЕ БюджетированиеОстатки.СуммаСценарияОстаток КОНЕЦ КАК СуммаСценарияТекущийОстаток,
		|		0 КАК КоличествоНовыйОстаток,
		|		0 КАК СуммаУпрНовыйОстаток,
		|		0 КАК ВалютнаяСуммаНовыйОстаток,
		|		0 КАК СуммаСценарияНовыйОстаток
		|	ИЗ
		|		РегистрБухгалтерии.Бюджетирование.Остатки(&ДатаНачала, , , Сценарий = &Сценарий) КАК БюджетированиеОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДокументКорректировка.Счет,
		|		ДокументКорректировка.Субконто1,
		|		ДокументКорректировка.Субконто2,
		|		ДокументКорректировка.Субконто3,
		|		ДокументКорректировка.Валюта,
		|		0,
		|		0,
		|		0,
		|		0,
		|		ДокументКорректировка.Количество,
		|		ДокументКорректировка.СуммаУпр,
		|		ДокументКорректировка.ВалютнаяСумма,
		|		ДокументКорректировка.СуммаСценария
		|	ИЗ
		|		Документ.КорректировкаОстатковПоПрогнознымБалансам.НовыеОстаткиПоСчетамБюджетирования КАК ДокументКорректировка
		|	ГДЕ
		|		ДокументКорректировка.Ссылка = &Ссылка) КАК ТаблицаСравнения
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСравнения.Счет,
		|	ТаблицаСравнения.Субконто1,
		|	ТаблицаСравнения.Субконто2,
		|	ТаблицаСравнения.Субконто3,
		|	ТаблицаСравнения.Валюта,
		|	ТаблицаСравнения.Счет.Вид,
		|	ТаблицаСравнения.Счет.Забалансовый";
		
	Иначе
		
		ТекстЗапроса="ВЫБРАТЬ
		|	ТаблицаДокумента.Счет КАК Счет,
		|	ТаблицаДокумента.Счет.Вид КАК ВидСчета,
		|	ТаблицаДокумента.Счет.Забалансовый КАК Забалансовый,
		|	ТаблицаДокумента.Субконто1 КАК Субконто1,
		|	ТаблицаДокумента.Субконто2 КАК Субконто2,
		|	ТаблицаДокумента.Субконто3 КАК Субконто3,
		|	ТаблицаДокумента.Валюта КАК Валюта,
		|	ТаблицаДокумента.КолСубконто КАК КолСубконто,
		|	ВЫБОР
		|		КОГДА ТекущиеОстатки.КоличествоТекущийОстаток ЕСТЬ NULL 
		|			ТОГДА ТаблицаДокумента.Количество
		|		ИНАЧЕ ТаблицаДокумента.Количество - ТекущиеОстатки.КоличествоТекущийОстаток
		|	КОНЕЦ КАК КорректировкаКоличество,
		|	ВЫБОР
		|		КОГДА ТекущиеОстатки.СуммаУпрТекущийОстаток ЕСТЬ NULL 
		|			ТОГДА ТаблицаДокумента.СуммаУпр
		|		ИНАЧЕ ТаблицаДокумента.СуммаУпр - ТекущиеОстатки.СуммаУпрТекущийОстаток
		|	КОНЕЦ КАК КорректировкаСуммаУпр,
		|	ВЫБОР
		|		КОГДА ТекущиеОстатки.ВалютнаяСуммаТекущийОстаток ЕСТЬ NULL 
		|			ТОГДА ТаблицаДокумента.ВалютнаяСумма
		|		ИНАЧЕ ТаблицаДокумента.ВалютнаяСумма - ТекущиеОстатки.ВалютнаяСуммаТекущийОстаток
		|	КОНЕЦ КАК КорректировкаВалютнаяСумма,
		|	ВЫБОР
		|		КОГДА ТекущиеОстатки.СуммаСценарияТекущийОстаток ЕСТЬ NULL 
		|			ТОГДА ТаблицаДокумента.СуммаСценария
		|		ИНАЧЕ ТаблицаДокумента.СуммаСценария - ТекущиеОстатки.СуммаСценарияТекущийОстаток
		|	КОНЕЦ КАК КорректировкаСуммаСценария
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТабКорректировок.Счет КАК Счет,
		|		ТабКорректировок.Субконто1 КАК Субконто1,
		|		ТабКорректировок.Субконто2 КАК Субконто2,
		|		ТабКорректировок.Субконто3 КАК Субконто3,
		|		КоличествоСубконто.КолСубконто КАК КолСубконто,
		|		ТабКорректировок.Валюта КАК Валюта,
		|		ТабКорректировок.Количество КАК Количество,
		|		ТабКорректировок.СуммаУпр КАК СуммаУпр,
		|		ТабКорректировок.ВалютнаяСумма КАК ВалютнаяСумма,
		|		ТабКорректировок.СуммаСценария КАК СуммаСценария
		|	ИЗ
		|		Документ.КорректировкаОстатковПоПрогнознымБалансам.НовыеОстаткиПоСчетамБюджетирования КАК ТабКорректировок
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				БюджетированиеВидыСубконто.Ссылка КАК Счет,
		|				КОЛИЧЕСТВО(БюджетированиеВидыСубконто.ВидСубконто) КАК КолСубконто
		|			ИЗ
		|				ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто
		|			
		|			СГРУППИРОВАТЬ ПО
		|				БюджетированиеВидыСубконто.Ссылка) КАК КоличествоСубконто
		|			ПО ТабКорректировок.Счет = КоличествоСубконто.Счет
		|	ГДЕ
		|		ТабКорректировок.Ссылка = &Ссылка) КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			БюджетированиеОстатки.Счет КАК Счет,
		|			БюджетированиеОстатки.Субконто1 КАК Субконто1,
		|			БюджетированиеОстатки.Субконто2 КАК Субконто2,
		|			БюджетированиеОстатки.Субконто3 КАК Субконто3,
		|			БюджетированиеОстатки.Валюта КАК Валюта,
		|			ВЫБОР КОГДА БюджетированиеОстатки.Счет.Вид=&Пассивный Тогда БюджетированиеОстатки.КоличествоОстаток*(-1) ИНАЧЕ БюджетированиеОстатки.КоличествоОстаток КОНЕЦ КАК КоличествоТекущийОстаток,
		|			ВЫБОР КОГДА БюджетированиеОстатки.Счет.Вид=&Пассивный Тогда БюджетированиеОстатки.СуммаУпрОстаток*(-1) ИНАЧЕ БюджетированиеОстатки.СуммаУпрОстаток КОНЕЦ КАК СуммаУпрТекущийОстаток,
		|			ВЫБОР КОГДА БюджетированиеОстатки.Счет.Вид=&Пассивный Тогда БюджетированиеОстатки.ВалютнаяСуммаОстаток*(-1) ИНАЧЕ БюджетированиеОстатки.ВалютнаяСуммаОстаток КОНЕЦ КАК ВалютнаяСуммаТекущийОстаток,
		|			ВЫБОР КОГДА БюджетированиеОстатки.Счет.Вид=&Пассивный Тогда БюджетированиеОстатки.СуммаСценарияОстаток*(-1) ИНАЧЕ БюджетированиеОстатки.СуммаСценарияОстаток КОНЕЦ КАК СуммаСценарияТекущийОстаток
		|		ИЗ
		|			РегистрБухгалтерии.Бюджетирование.Остатки(&ДатаНачала, , , Сценарий = &Сценарий) КАК БюджетированиеОстатки) КАК ТекущиеОстатки
		|		ПО ТаблицаДокумента.Счет = ТекущиеОстатки.Счет
		|			И (ТаблицаДокумента.КолСубконто ЕСТЬ NULL 
		|				ИЛИ ТаблицаДокумента.Субконто1 = ТекущиеОстатки.Субконто1)
		|			И (ТаблицаДокумента.КолСубконто ЕСТЬ NULL 
		|				ИЛИ ТаблицаДокумента.КолСубконто = 1
		|				ИЛИ ТаблицаДокумента.КолСубконто > 1
		|					И ТаблицаДокумента.Субконто2 = ТекущиеОстатки.Субконто2)
		|			И (ТаблицаДокумента.КолСубконто ЕСТЬ NULL 
		|				ИЛИ ТаблицаДокумента.КолСубконто <= 2
		|				ИЛИ ТаблицаДокумента.КолСубконто > 2
		|					И ТаблицаДокумента.Субконто3 = ТекущиеОстатки.Субконто3)
		|			И (НЕ ТаблицаДокумента.Счет.Валютный
		|				ИЛИ ТаблицаДокумента.Валюта = ТекущиеОстатки.Валюта)";
		
	КонецЕсли;
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("Пассивный",ВидСчета.Пассивный);
	
	КорректировкаОстатков=Запрос.Выполнить().Выбрать();
	
	Пока КорректировкаОстатков.Следующий() Цикл
		
		Движение=Движения.Бюджетирование.Добавить();
		
		// Дебетовая сторона проводки
		Если КорректировкаОстатков.ВидСчета=ВидСчета.Пассивный Тогда
			Если НЕ КорректировкаОстатков.Забалансовый Тогда
				Движение.СчетДт=ПланыСчетов.Бюджетирование.Служебный;
			КонецЕсли;
			Движение.СчетКт=КорректировкаОстатков.Счет;
		Иначе
			Движение.СчетДт=КорректировкаОстатков.Счет;
			Если НЕ КорректировкаОстатков.Забалансовый Тогда
				Движение.СчетКт=ПланыСчетов.Бюджетирование.Служебный;
			КонецЕсли;
		КонецЕсли;
		
		ВидыСубконто=Движение.СчетДт.ВидыСубконто;
		
		Для Индекс=1 По ВидыСубконто.Количество() Цикл
			
			Движение.СубконтоДт[ВидыСубконто[Индекс-1].ВидСубконто]=КорректировкаОстатков["Субконто"+Индекс];
			
		КонецЦикла; 		
		
		Если Движение.СчетДт.Валютный Тогда
			
			Движение.ВалютаДт=КорректировкаОстатков.Валюта;
			Движение.ВалютнаяСуммаДт=КорректировкаОстатков.КорректировкаВалютнаяСумма;
			
		КонецЕсли;
		
		Если Движение.СчетДт.Количественный Тогда
			
			Движение.КоличествоДт=КорректировкаОстатков.КорректировкаКоличество;
			
		КонецЕсли;		
		
		ВидыСубконто=Движение.СчетКт.ВидыСубконто;
		
		Для Индекс=1 По ВидыСубконто.Количество() Цикл
			
			Движение.СубконтоКт[ВидыСубконто[Индекс-1].ВидСубконто]=КорректировкаОстатков["Субконто"+Индекс];
			
		КонецЦикла; 	
		
		Если Движение.СчетКт.Валютный Тогда
			
			Движение.ВалютаКт=КорректировкаОстатков.Валюта;
			Движение.ВалютнаяСуммаКт=КорректировкаОстатков.КорректировкаВалютнаяСумма;
			
		КонецЕсли;
		
		Если Движение.СчетКт.Количественный Тогда
			
			Движение.КоличествоКт=КорректировкаОстатков.КорректировкаКоличество;
			
		КонецЕсли;
		
		// Общие реквизиты проводки
		Движение.Период=ДатаНачала;
		Движение.Сценарий=Сценарий;
		Движение.СуммаУпр=КорректировкаОстатков.КорректировкаСуммаУпр;
		Движение.СуммаСценария=КорректировкаОстатков.КорректировкаСуммаСценария;
		
	КонецЦикла;
			
КонецПроцедуры // КорректировкаОстатков()

Процедура ОбработкаПроведения(Отказ)
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		#Если Клиент Тогда
		Сообщить("Не указана дата корректировки остатков");
		#КонецЕсли
		Отказ=Истина;
	КонецЕсли;
	
	// Проверим балансы корректировок. Он должен быть равным 0
	
	БалансКорректировкиУпр=0;
	БалансКорректировкиСценарий=0;
	
	Для Каждого Строка Из НовыеОстаткиПоСчетамБюджетирования Цикл
		
		Если Строка.Счет.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Счет.Вид=ВидСчета.Пассивный Тогда
			БалансКорректировкиУпр=БалансКорректировкиУпр-Строка.СуммаУпр;
			Если Не Сценарий.Пустая() Тогда
				БалансКорректировкиСценарий=БалансКорректировкиСценарий-Строка.СуммаСценария;
			КонецЕсли;
		Иначе
			БалансКорректировкиУпр=БалансКорректировкиУпр+Строка.СуммаУпр;
			Если Не Сценарий.Пустая() Тогда
				БалансКорректировкиСценарий=БалансКорректировкиСценарий+Строка.СуммаСценария;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Окр(?(БалансКорректировкиУпр>0,БалансКорректировкиУпр,БалансКорректировкиУпр*(-1)),1,1)>0 Тогда
		#Если Клиент Тогда
		Сообщить("Сумма корректировок остатка в валюте упр. учета по активу и пассиву должна равняться нулю!");
		#КонецЕсли
		Отказ=Истина;
	КонецЕсли;
	
	Если Окр(?(БалансКорректировкиСценарий>0,БалансКорректировкиСценарий,БалансКорректировкиСценарий*(-1)),1,1)>0 Тогда
		#Если Клиент Тогда
		Сообщить("Сумма корректировок остатка в валюте сценария по активу и пассиву должна равняться нулю!");
		#КонецЕсли
		Отказ=Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		КорректировкаОстатков();
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

//ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

СтруктураСоответствия=Новый Структура;
СтруктураСоответствия.Вставить("ЦФО","ЦФО");
СтруктураСоответствия.Вставить("Проекты","Проект");
СтруктураСоответствия.Вставить("Контрагенты","Контрагент");
СтруктураСоответствия.Вставить("Номенклатура","Номенклатура");
СтруктураСоответствия.Вставить("СтатьиОборотов","СтатьяОборотов");


