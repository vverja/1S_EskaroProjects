Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мЕстьКолонкаСерии;
Перем мРазрешитьНулевыеЦеныВРознице Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаСерийИХарактеристикТоваров.Номер,
	|	КорректировкаСерийИХарактеристикТоваров.Дата,
	|	КорректировкаСерийИХарактеристикТоваров.Организация,
	|	КорректировкаСерийИХарактеристикТоваров.Организация.Представление КАК Поставщик
	|ИЗ
	|	Документ.КорректировкаСерийИХарактеристикТоваров КАК КорректировкаСерийИХарактеристикТоваров
	|
	|ГДЕ
	|	КорректировкаСерийИХарактеристикТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.Текст =  
	"ВЫБРАТЬ
	|	КорректировкаСерийИХарактеристикТоваровТовары.НомерСтроки,
	|	КорректировкаСерийИХарактеристикТоваровТовары.Номенклатура,
	|	КорректировкаСерийИХарактеристикТоваровТовары.Номенклатура.Код                КАК Код,
	|	КорректировкаСерийИХарактеристикТоваровТовары.Номенклатура.Артикул            Как Артикул,
	|	КорректировкаСерийИХарактеристикТоваровТовары.Номенклатура.НаименованиеПолное КАК Товар,
	|	КорректировкаСерийИХарактеристикТоваровТовары.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	КорректировкаСерийИХарактеристикТоваровТовары.КоличествоМест,
	|	КорректировкаСерийИХарактеристикТоваровТовары.Количество,
	|	КорректировкаСерийИХарактеристикТоваровТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	КорректировкаСерийИХарактеристикТоваровТовары.ХарактеристикаНоменклатурыСтарая.Представление КАК ХарактеристикаНоменклатурыСтарая,
	|	КорректировкаСерийИХарактеристикТоваровТовары.СерияНоменклатурыСтарая.Представление КАК СерияНоменклатурыСтарая,
	|	КорректировкаСерийИХарактеристикТоваровТовары.ХарактеристикаНоменклатурыНовая.Представление КАК ХарактеристикаНоменклатурыНовая,
	|	КорректировкаСерийИХарактеристикТоваровТовары.СерияНоменклатурыНовая.Представление КАК СерияНоменклатурыНовая
	|ИЗ
	|	Документ.КорректировкаСерийИХарактеристикТоваров.Товары КАК КорректировкаСерийИХарактеристикТоваровТовары
	|
	|ГДЕ
	|	КорректировкаСерийИХарактеристикТоваровТовары.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаСерийИХарактеристикТоваровТовары.НомерСтроки";

	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаСерийИХарактеристикТоваров_Накладная";

	Макет = ПолучитьМакет("Накладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка,НСтр("ru='Корректировка серий и характеристик товаров';uk='Корегування серій і характеристик товарів'",КодЯзыкаПечать), КодЯзыкаПечать); 	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,КодЯзыкаПечать), "ПолноеНаименование,",,КодЯзыкаПечать);
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	Пока ВыборкаСтрок.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрок);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрок.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрок.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрок);
		ТабДокумент.Присоединить(ОбластьДанных);
	КонецЦикла;

	// Вывести подвал
	ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	//если места в документе не заполнены,
	МестВсего = ЗапросПоТоварам.Выполнить().Выгрузить().Итог("КоличествоМест");
	Если МестВсего = 0 Тогда
		УниверсальныеМеханизмы.СкрытьКолонкиВТабличномДокументе(ТабДокумент, "Мест",3);
    КонецЕсли;


	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "МакетДокумента" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;


	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("МакетДокумента","Корректировка серий и характеристик товаров");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


#Если Клиент Тогда
Процедура ЗаполнитьНалоговыеНазначенияЗапасов() Экспорт 
	
	НалоговыйУчет.ЗаполнитьНалоговыеНазначенияЗапасов(ЭтотОбъект, "Товары", Ложь);

КонецПроцедуры // ЗаполнитьНалоговыеНазначенияЗапасов
#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполнение табличной части "Товары" по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваровУпр(ДокументОснование, ИмяТЧ = "Товары") Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Товар", Перечисления.ТоварТара.Товар);

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;
	ЗаполнятьПоОборудованию = ложь;

	Если ДокументОснованиеИмя = "ПоступлениеТоваровУслуг" Тогда
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаСерийИХарактеристикТоваров.Оборудование И
			//Смартис Лиманчук начало 05.12.2012
			ДокументОснование.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал И
			//Смартис Лиманчук окончание 05.12.2012
			ДокументОснование.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			Сообщить("Вид операции документа поступления не соответствует виду операции текущего документа. Заполнение не выполнено", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		ЗаполнятьПоТоварам = истина;
		//Смартис Лиманчук начало 05.12.2012
		//Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
		Если (ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование ИЛИ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал)
		//Смартис Лиманчук окончание 05.12.2012
				И ВидОперации = Перечисления.ВидыОперацийКорректировкаСерийИХарактеристикТоваров.Оборудование Тогда
			ЗаполнятьПоОборудованию = истина;	
		КонецЕсли;					   
	КонецЕсли;
	


	Если ЗаполнятьПоОборудованию Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Номенклатура                    КАК Номенклатура,
		|	Док.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
		|	Док.ЕдиницаИзмеренияМест            КАК ЕдиницаИзмеренияМест,
		|	Док.Коэффициент                     КАК Коэффициент,
		|	Док.Количество                      КАК Количество,
		|	Док.КоличествоМест                  КАК КоличествоМест,
		|	Док.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
		|	Док.СерияНоменклатуры               КАК СерияНоменклатуры,
		|	Док.Склад               			КАК Склад
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК Док
		|
		|ГДЕ
		|	Док.Ссылка = &ДокументОснование 
		|	И (Док.Номенклатура.ВестиУчетПоСериям ИЛИ Док.Номенклатура.ВестиУчетПоХарактеристикам)
		|	%УсловиеПоСкладу%
		|";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Номенклатура                    КАК Номенклатура,
		|	Док.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
		|	Док.ЕдиницаИзмеренияМест            КАК ЕдиницаИзмеренияМест,
		|	Док.Коэффициент                     КАК Коэффициент,
		|	Док.Количество                      КАК Количество,
		|	Док.КоличествоМест                  КАК КоличествоМест," +
		?(Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ, "
		|	Док.ЦенаВРознице                    КАК ЦенаВРознице, ", "") + "
		|	" + ?(ИмяТЧ = "БланкиСтрогогоУчета", " ", 
												 "Док.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
												 |	Док.СерияНоменклатуры               КАК СерияНоменклатуры, ") + "
		|	Док.Склад               			КАК Склад
		|ИЗ
		|	Документ." + ДокументОснованиеИмя + "." + ИмяТЧ + " КАК Док
		|
		|ГДЕ
		|	Док.Ссылка = &ДокументОснование 
		|	И (Док.Номенклатура.ВестиУчетПоСериям ИЛИ Док.Номенклатура.ВестиУчетПоХарактеристикам)
		|	%УсловиеПоСкладу%
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоСкладу%",
		?(НЕ ЗначениеЗаполнено(Склад), "", "И Док.Склад = &Склад"));
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезЗапроса = Запрос.Выполнить();

	Выборка = РезЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.КоличествоМест       = Выборка.КоличествоМест;

		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ
		   И Не ЗаполнятьПоОборудованию Тогда
			СтрокаТабличнойЧасти.Цена = Выборка.ЦенаВРознице;
		КонецЕсли;

		// Учет БСУ не ведется в разрезе характеристик и серий.
		Если ИмяТЧ <> "БланкиСтрогогоУчета" Тогда 			
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатурыСтарая = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатурыНовая  = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.СерияНоменклатурыСтарая          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.СерияНоменклатурыНовая           = Выборка.СерияНоменклатуры;		
		КонецЕсли; // ИмяТЧ <> "БланкиСтрогогоУчета" 
		СтрокаТабличнойЧасти.Качество                         = Справочники.Качество.Новый;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованиюУпр()

// Процедура выполняет заполнение табличной части "Товары" по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоПриходномуОрдеруУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура                    КАК Номенклатура,
	|	Док.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест            КАК ЕдиницаИзмеренияМест,
	|	Док.Коэффициент                     КАК Коэффициент,
	|	Док.Количество                      КАК Количество,
	|	Док.КоличествоМест                  КАК КоличествоМест,
	|	Док.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры               КАК СерияНоменклатуры,
	|	&ДокументОснование	                КАК ПриходныйОрдер
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Товары КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|	И (Док.Номенклатура.ВестиУчетПоСериям ИЛИ Док.Номенклатура.ВестиУчетПоХарактеристикам)
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();
        ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатурыСтарая = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатурыНовая  = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатурыСтарая          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатурыНовая           = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Качество                         = Справочники.Качество.Новый;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоПриходномуОрдеруУпр()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Процедура выполняет обход по всем строка указанной табличной части и заполняет счета учета
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ);

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(Отказ) Экспорт

	Если не мЕстьКолонкаСерии Тогда
		Отказ = истина;
		Сообщить("Использование серий номенклатуры отключено. Заполнение невозможно", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
		ТоварыТабличнойЧасти = Товары.Выгрузить();
	
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");

	МассивНоменклатуры   = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = новый Массив;
	МассивСклады.Добавить(Склад);
	ТаблицаСерий         = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры,,Склад.ВидСклада=Перечисления.ВидыСкладов.НТТ);
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();
	
	//по строкам ТЧ Товары, у которых уже заполнена серия - проверим остаток, 
	//	исключим это количество из таблицы серий
	Для каждого Строка из ТоварыТабличнойЧасти цикл
		Если НЕ ЗначениеЗаполнено(Строка.СерияНоменклатурыСтарая) Тогда
			Продолжить;
		КонецЕсли;
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               Строка.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатурыСтарая);
		СтуктураПоиска.Вставить("СерияНоменклатуры", Строка.СерияНоменклатурыСтарая);
		СтуктураПоиска.Вставить("Качество",                   Строка.Качество);
		СтуктураПоиска.Вставить("Склад",                      Склад);
		Если Склад.ВидСклада=Перечисления.ВидыСкладов.НТТ Тогда
			СтуктураПоиска.Вставить("Цена",                      Строка.Цена);
		КонецЕсли;
			

		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КоличествоОсталосьПогасить = Строка.Количество*Строка.Коэффициент;
		Для каждого СтрокаСерий из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаСерий.Остаток<=0 Тогда Продолжить; КонецЕсли;
			Если СтрокаСерий.Остаток >= КоличествоОсталосьПогасить Тогда
				СтрокаСерий.Остаток = СтрокаСерий.Остаток - КоличествоОсталосьПогасить;
				КоличествоОсталосьПогасить = 0;
				Прервать;
			Иначе
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СтрокаСерий.Остаток;
				СтрокаСерий.Остаток = 0;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоОсталосьПогасить>0 Тогда
			Сообщить("Для строки "+Строка.НомерСтроки+" остатка по серии "+Строка.СерияНоменклатурыСтарая+" недостаточно: не хватает "+КоличествоОсталосьПогасить+" "+Строка.Номенклатура.ЕдиницаХраненияОстатков, СтатусСообщения.Важное);
		КонецЕсли;
		НоваяСтрока = Товары.Добавить();

		НоваяСтрока.Номенклатура                        = Строка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения                    = Строка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                         = Строка.Коэффициент;
		НоваяСтрока.ЕдиницаИзмеренияМест                = Строка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Цена                                = Строка.Цена;
		НоваяСтрока.ХарактеристикаНоменклатурыСтарая    = Строка.ХарактеристикаНоменклатурыСтарая;
		НоваяСтрока.ХарактеристикаНоменклатурыНовая     = Строка.ХарактеристикаНоменклатурыНовая;
		НоваяСтрока.СерияНоменклатурыСтарая             = Строка.СерияНоменклатурыСтарая;
		НоваяСтрока.СерияНоменклатурыНовая                = Строка.СерияНоменклатурыНовая;

		НоваяСтрока.Качество                            = Строка.Качество;
		НоваяСтрока.Количество                          = Строка.Количество;
			
		НоваяСтрока.СчетУчетаБУ                			= Строка.СчетУчетаБУ;
		НоваяСтрока.СчетУчетаНУ                         = Строка.СчетУчетаНУ;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

	КонецЦикла;

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
    ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании");
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
        Если ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатурыСтарая) Тогда
			Продолжить;
		КонецЕсли;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией        = Неопределено;

		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатурыСтарая);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтуктураПоиска.Вставить("Склад",                      Склад);
		Если Склад.ВидСклада=Перечисления.ВидыСкладов.НТТ Тогда
			СтуктураПоиска.Вставить("Цена",                      ИсходнаяСтрока.Цена);
		КонецЕсли;
				
		НайденныеСтроки            = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
			
		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			НоваяСтрока = Товары.Добавить();

			НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.ЕдиницаИзмеренияМест                = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
			НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатурыСтарая    = ИсходнаяСтрока.ХарактеристикаНоменклатурыСтарая;
			НоваяСтрока.ХарактеристикаНоменклатурыНовая     = ИсходнаяСтрока.ХарактеристикаНоменклатурыНовая;
			Если НЕ ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатурыСтарая) Тогда
				НоваяСтрока.СерияНоменклатурыСтарая               = Строка.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатурыСтарая               = ИсходнаяСтрока.СерияНоменклатурыСтарая;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатурыНовая) Тогда
				НоваяСтрока.СерияНоменклатурыНовая                = Строка.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатурыНовая                = ИсходнаяСтрока.СерияНоменклатурыНовая;
			КонецЕсли;

			НоваяСтрока.Качество                            = ИсходнаяСтрока.Качество;
			НоваяСтрока.Количество                          = СписанноеКоличество;
				
			НоваяСтрока.СчетУчетаБУ                			= ИсходнаяСтрока.СчетУчетаБУ;
			НоваяСтрока.СчетУчетаНУ                         = ИсходнаяСтрока.СчетУчетаНУ;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатурыСтарая) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;

		КонецЦикла;
		Если КоличествоОсталосьПогасить > 0 Тогда

			Если СтрокаСПустойСерией = Неопределено Тогда

				НоваяСтрока = Товары.Добавить();

				НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.ЕдиницаИзмеренияМест                = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
				НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатурыСтарая    = ИсходнаяСтрока.ХарактеристикаНоменклатурыСтарая;
				НоваяСтрока.ХарактеристикаНоменклатурыНовая     = ИсходнаяСтрока.ХарактеристикаНоменклатурыНовая;
				НоваяСтрока.Качество                            = ИсходнаяСтрока.Качество;
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;
				НоваяСтрока.СчетУчетаБУ                			= ИсходнаяСтрока.СчетУчетаБУ;
				НоваяСтрока.СчетУчетаНУ                         = ИсходнаяСтрока.СчетУчетаНУ;

				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе

				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
    //Заполним счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтрРеквизитов = "Номенклатура, Количество";
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаСерийИХарактеристикТоваров.ТоварыПродукция Тогда
		СтрРеквизитов = СтрРеквизитов + ", Качество";
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ
	   И Не мРазрешитьНулевыеЦеныВРознице Тогда
		СтрРеквизитов = СтрРеквизитов + ", Цена";
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура(СтрРеквизитов);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	//Проверить на наличие строк, которые ничего не меняют
	ПроверитьНаличиеИзменяемыхРеквизитов(ТаблицаПоТоварам, Отказ, Заголовок);
	
	//Проверим счета учета
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоТоварам,
		"Товары",
		Отказ, 
		Заголовок, 
		"Перемещение"
	);	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьНаличиеИзменяемыхРеквизитов(ТаблицаПоТоварам, Отказ, Заголовок)
	Для каждого Строка из ТаблицаПоТоварам цикл
		Если Строка.ХарактеристикаНоменклатурыСтарая = Строка.ХарактеристикаНоменклатурыНовая И
			Строка.СерияНоменклатурыСтарая = Строка.СерияНоменклатурыНовая Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке № "+СокрЛП(Строка.НомерСтроки)+" не происходит изменений серии и характеристики товара", Отказ, Заголовок);

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,	ТаблицаПоТоварам, Отказ, Заголовок)

	Перем	ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая;
	
	ТаблицаПоТоварамСтарая = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамСтарая.Колонки.ХарактеристикаНоменклатурыСтарая.Имя = "ХарактеристикаНоменклатуры";
	ТаблицаПоТоварамСтарая.Колонки.СерияНоменклатурыСтарая.Имя = "СерияНоменклатуры";
	
	ТаблицаПоТоварамНовая = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамНовая.Колонки.ХарактеристикаНоменклатурыНовая.Имя = "ХарактеристикаНоменклатуры";
	ТаблицаПоТоварамНовая.Колонки.СерияНоменклатурыНовая.Имя = "СерияНоменклатуры";
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок);
	
	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента,	ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок);
	ДвиженияПоТоварамОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента,	ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок);
	
	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок);

	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Расход.
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			НаборДвижений = Движения.ТоварыВНТТ;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			НаборДвижений = Движения.ТоварыВРознице;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
		Иначе
			НаборДвижений = Движения.ТоварыНаСкладах;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамСтарая);
										
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
				
			Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар);
					
			ИначеЕсли СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				
				ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента.ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
				УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента.ТаблицаПоТоварам, ТаблицаПоЦенам);
					
			КонецЕсли;
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Приход.
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамНовая);
										
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
				
			Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар);
					
			ИначеЕсли СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				
				ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента.ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
				УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента.ТаблицаПоТоварам, ТаблицаПоЦенам);
				
				// Проверка наличия продажных цен на приходуемый товар.
				УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицыДанныхДокумента.ТаблицаПоТоварам, Отказ, Заголовок);
					
			КонецЕсли;
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

		КонецЕсли;

		
	КонецЕсли; // Если ОтражатьВУправленческомУчете ...
	
КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Проверка остатков
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	Если Не Отказ Тогда
	
		// РАСХОД
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамСтарая);
												                   
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
								
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		// ПРИХОД
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамНовая);
												                   
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
								
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	НаборДвижений = Движения.ТоварыОрганизацийРегл;

	Если Не Отказ Тогда
	
		// РАСХОД
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамСтарая);
												                   
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ЗначСклад = ?(ВестиПартионныйУчетПоСкладамРегл, Склад, Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
								
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		// ПРИХОД
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамНовая);
												                   
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ЗначСклад = ?(ВестиПартионныйУчетПоСкладамРегл, Склад, Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыУпр(ТаблицаДвижений)
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаСерийИХарактеристикТоваров.Оборудование Тогда
		ТаблицаДвижений.ЗаполнитьЗначения( Перечисления.СтатусыПартийТоваров.Оборудование, "ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения( Перечисления.СтатусыПартийТоваров.Купленный,    "ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения( Перечисления.СтатусыПартийТоваров.Продукция,    "ДопустимыйСтатус2");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения( Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения( ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыРегл(ТаблицаДвижений, СтруктураШапкиДокумента)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,    "Организация");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ТабИмен = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварамСтарая, ТабИмен, "НалоговоеНазначение"     , "НалоговоеНазначениеПоФакту");

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамСтарая, ТаблицаДвижений);
	
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТоварамСтарая, ТабИмен);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТаблицыПоТоварам = ТаблицаПоТоварамСтарая[Инд];
		
		// определимся надо ли нам изменять серию и характеристику на пустую при проведении по партиям
		Строка.ИзменитьСерию = НЕ ЗначениеЗаполнено(Строка.СерияНоменклатурыНовая);
		Строка.ИзменитьХарактеристику = НЕ ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатурыНовая);
		
		// если не ведется учет по сериям очистим серию в регистре "СписанныеТовары"
		Если НЕ СтрокаТаблицыПоТоварам.ВестиПартионныйУчетПоСериям тогда
			Строка.СерияНоменклатурыНовая = Неопределено;
		КонецЕсли;
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		
		Строка.ПринятыеСчетУчетаБУ = Неопределено;
		
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Склад,  "Склад");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.КорректировкаСерийИХарактеристик,"КодОперацииПартииТоваров");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыУпр(ТаблицаДвижений);
	ЗаполнитьКолонкиРегистраСписанныеТоварыРегл(ТаблицаДвижений, СтруктураШапкиДокумента);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры//ДвиженияПоРегиструСписанныеТовары

Процедура ДополнитьСтруктуруПолейШапкиРегл(СтруктураПолей, СтруктураПростыхПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ"                     , "СчетУчетаБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение", 		"НалоговоеНазначение");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийКорректировкаСерийИХарактеристикТоваров.Оборудование;
		//Смартис Лиманчук начало 05.12.2012
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал Тогда
			ВидОперации = Перечисления.ВидыОперацийКорректировкаСерийИХарактеристикТоваров.Оборудование;
		//Смартис Лиманчук окончание 05.12.2012
		Иначе
			ВидОперации = Перечисления.ВидыОперацийКорректировкаСерийИХарактеристикТоваров.ТоварыПродукция;
		КонецЕсли;
		
#Если КЛИЕНТ Тогда
		// Выбор склада
		УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
		СкладВТабЧасти  = УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления
					  ИЛИ УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации;
					  
		Если СкладВТабЧасти Тогда
		
			СтруктТабЧастей = Новый Структура;
			Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
				СтруктТабЧастей.Вставить("Оборудование", "Склад");
			//Смартис Лиманчук начало 05.12.2012
			ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал Тогда
				СтруктТабЧастей.Вставить("Оборудование", "Склад");
			//Смартис Лиманчук окончание 05.12.2012
			Иначе
				СтруктТабЧастей.Вставить("Товары",       "Склад");
			КонецЕсли;
			
			СтруктПараметры = Новый Структура;
			СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
			СтруктПараметры.Вставить("ИмяСкладаВШапке", "СкладОрдер");
			
			Склад = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(Основание, СтруктПараметры);
			
		КонецЕсли;
#КонецЕсли

		Если Основание.Проведен Тогда
			ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание);
			// Дополнить бланками ТЧ Товары.
			//Смартис Лиманчук начало 05.12.2012
			//Если Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			Если (Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование ИЛИ Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал) Тогда
			//Смартис Лиманчук окончание 05.12.2012
				ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание, "БланкиСтрогогоУчета");
			КонецЕсли;	
			ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Если Основание.БезПраваПродажи Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Если Основание.Проведен Тогда
			ЗаполнитьТоварыПоПриходномуОрдеруУпр(Основание);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

 	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"      , "ВидСклада"                       , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура"                    , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                      , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЦенаВРознице"                    , "Цена");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатурыСтарая", "ХарактеристикаНоменклатурыСтарая");
	СтруктураПолей.Вставить("СерияНоменклатурыСтарая"         , "СерияНоменклатурыСтарая");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатурыНовая" , "ХарактеристикаНоменклатурыНовая");
	СтруктураПолей.Вставить("СерияНоменклатурыНовая"          , "СерияНоменклатурыНовая");
	СтруктураПолей.Вставить("Услуга"                          , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                           , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                        , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"     , "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Качество"                        , "Качество");
	СтруктураПолей.Вставить("ВидСклада"                       , "Ссылка.Склад.ВидСклада");
	ДополнитьСтруктуруПолейШапкиРегл(СтруктураПолей, СтруктураПростыхПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));
	
КонецПроцедуры// ОбработкаПроведения()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мЕстьКолонкаСерии = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");
мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();
