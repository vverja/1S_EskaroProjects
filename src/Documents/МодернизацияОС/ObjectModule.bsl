Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "Стоимость,
								|Событие,
								|ОС.СрокПолезногоИспользованияУУ,
								|ОС.ФактСрокИспользованияУУ,
								|ОС.ОбъемПродукцииРаботУУ,
								|ОС.ФактОбъемПродукцииРаботУУ,
								|ОС.ОстОбъемПродукцииРаботУУ,
								|ОС.СтоимостьУУ,
								|ОС.СуммаМодернизацииУУ,
								|ОС.АмортизацияУУ,
								|ОС.АмортизацияЗаМесяцУУ,
								|ОС.СрокИспользованияДляВычисленияАмортизацииУУ,
								|ОС.СтоимостьДляВычисленияАмортизацииУУ,
								|ОС.СуммаУлучшенияВПределахНормУУ,
								|ОС.ЛиквидационнаяСтоимостьУУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "СтоимостьБУ,
								|СобытиеРегл,
								|СчетУчетаБУВнеоборотногоАктива,
								|ОС.СрокПолезногоИспользованияБУ,
								|ОС.ФактСрокИспользованияБУ,
								|ОС.ОбъемПродукцииРаботБУ,
								|ОС.ФактОбъемПродукцииРаботБУ,
								|ОС.ОстОбъемПродукцииРаботБУ,
								|ОС.СтоимостьБУ,
								|ОС.СуммаМодернизацииБУ,
								|ОС.АмортизацияБУ,
								|ОС.АмортизацияЗаМесяцБУ,
								|ОС.СрокПолезногоИспользованияНУ,
								|ОС.ФактСрокИспользованияНУ,
								|ОС.СтоимостьНУ,
								|ОС.СуммаМодернизацииНУ,
								|ОС.АмортизацияНУ,
								|ОС.АмортизацияЗаМесяцНУ,
								|ОС.СрокИспользованияДляВычисленияАмортизацииБУ,
								|ОС.СрокИспользованияДляВычисленияАмортизацииНУ,
								|ОС.СтоимостьДляВычисленияАмортизацииБУ,
								|ОС.СтоимостьДляВычисленияАмортизацииНУ,
								|ОС.СуммаУлучшенияВПределахНормНУ,
								|ОС.ЛиквидационнаяСтоимостьБУ";

	мСтрокаРеквизитыНалУчета =  "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Функция заполняет список значений доступных видов событий
// только для регламентированного учета
//
Функция ПолучитьСписокЗначенийВидыСобытий() Экспорт
	
	ВидыСобытий = Новый СписокЗначений;
	
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Ремонт);
	
	Возврат ВидыСобытий;
	
 КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

#Если Клиент Тогда

// Функция формирует табличный документ унифицированной формы ОЗ-2
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме ОЗ-2.
//
Функция ПечатьОЗ2(ПечатьПоДаннымУпрУчета = Истина)

	Макет       = ПолучитьОбщийМакет("ОЗ2");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Форма_ОЗ2";
	
	Если Не ПечатьПоДаннымУпрУчета Тогда
		
		Запрос       = Новый Запрос;
		Запрос.УстановитьПараметр("Период",         МоментВремени());
		Запрос.УстановитьПараметр("ТекОрганизация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КодыОрганизацииСрезПоследних.Организация.НаименованиеПолное
		|	                                      КАК СТРОКА(1000))     КАК Организация,
		|	КодыОрганизацииСрезПоследних.КодПоЕДРПОУ                    КАК ЕДРПОУ
		|ИЗ
		|	РегистрСведений.КодыОрганизации.СрезПоследних(&Период, Организация = &ТекОрганизация)
		|	               КАК КодыОрганизацииСрезПоследних";
		ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
		ВыборкаПоШапке.Следующий();
		
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",         Ссылка);
	Запрос.УстановитьПараметр("Период",         МоментВремени());
	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	
	Если ПечатьПоДаннымУпрУчета Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МодернизацияОСОС.Ссылка.Номер                        КАК НомерАкта,
		|	МодернизацияОСОС.Ссылка.Дата                         КАК ДатаАкта,
		|	МодернизацияОСОС.Ссылка.Событие                      КАК ВидОперации,
		|	МодернизацияОСОС.ОсновноеСредство.Код                КАК ИнвентарныйНомер,
		|	МодернизацияОСОС.ОсновноеСредство.ЗаводскойНомер     КАК ЗаводскойНомер,
		|	МодернизацияОСОС.ОсновноеСредство.НаименованиеПолное КАК ОсновноеСредствоНаименование,
		|	МодернизацияОСОС.СуммаМодернизацииУУ                 КАК СуммаМодернизации,
		|	МодернизацияОСОС.ЛиквидационнаяСтоимостьУУ           КАК ЛиквидационнаяСтоимость,
		|	МодернизацияОСОС.СрокПолезногоИспользованияУУ        КАК СрокПолезногоИспользования,
		|	МодернизацияОСОС.ОбъемПродукцииРаботУУ               КАК ОбъемПродукцииРабот,
		|	МодернизацияОСОС.Ссылка.Сдал       					 КАК Сдал,
		|	МодернизацияОСОС.Ссылка.Принял       				 КАК Принял,
		|	МодернизацияОСОС.Ссылка.ДатаНачалаМодернизации       КАК ДатаНачала,
		|	МодернизацияОСОС.Ссылка.ДатаОкончанияМодернизации    КАК ДатаОкончания,
		|	МодернизацияОСОС.Ссылка.ЧтоНеВыполнено 				 КАК ЧтоНеВыполнено,
		|	МодернизацияОСОС.Ссылка.ЧтоИзменилось                КАК ЧтоИзменилось,
		|	РАЗНОСТЬДАТ(МодернизацияОСОС.Ссылка.ДатаНачалаМодернизации,
		|	            МодернизацияОСОС.Ссылка.ДатаОкончанияМодернизации,
		|	            ДЕНЬ)                                    КАК КоличествоДней,
		|	МестонахождениеОС.МОЛ.Код                            КАК КодМОЛа,
		|	МестонахождениеОС.Местонахождение.Наименование       КАК Подразделение
		|ИЗ
		|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.МестонахождениеОС.СрезПоследних КАК МестонахождениеОС
		|		ПО МодернизацияОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|ГДЕ
		|	МодернизацияОСОС.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МодернизацияОСОС.Ссылка.Номер                          КАК НомерАкта,
		|	МодернизацияОСОС.Ссылка.Дата                           КАК ДатаАкта,
		|	МодернизацияОСОС.Ссылка.СобытиеРегл                    КАК ВидОперации,
		|	МодернизацияОСОС.ОсновноеСредство.ЗаводскойНомер       КАК ЗаводскойНомер,
		|	МодернизацияОСОС.ОсновноеСредство.НаименованиеПолное   КАК ОсновноеСредствоНаименование,
		|	МодернизацияОСОС.СуммаМодернизацииБУ                   КАК СуммаМодернизации,
		|	МодернизацияОСОС.ЛиквидационнаяСтоимостьБУ             КАК ЛиквидационнаяСтоимость,
		|	МодернизацияОСОС.СрокПолезногоИспользованияБУ          КАК СрокПолезногоИспользования,
		|	МодернизацияОСОС.ОбъемПродукцииРаботБУ                 КАК ОбъемПродукцииРабот,
		|	МодернизацияОСОС.Ссылка.СчетУчетаБУВнеоборотногоАктива КАК СчетКт,
		|	МодернизацияОСОС.ОсновноеСредство.Код                  КАК КодАналитикиДт,
		|	МодернизацияОСОС.Ссылка.ОбъектСтроительства.Код        КАК КодАналитикиКт,
		|	МодернизацияОСОС.Ссылка.Сдал       					   КАК Сдал,
		|	МодернизацияОСОС.Ссылка.Принял       				   КАК Принял,
		|	МодернизацияОСОС.Ссылка.ДатаНачалаМодернизации 		   КАК ДатаНачала,
		|	МодернизацияОСОС.Ссылка.ДатаОкончанияМодернизации	   КАК ДатаОкончания,
		|	МодернизацияОСОС.Ссылка.ЧтоНеВыполнено 				   КАК ЧтоНеВыполнено,
		|	МодернизацияОСОС.Ссылка.ЧтоИзменилось 				   КАК ЧтоИзменилось,
		|	РАЗНОСТЬДАТ(МодернизацияОСОС.Ссылка.ДатаНачалаМодернизации,
		|	            МодернизацияОСОС.Ссылка.ДатаОкончанияМодернизации,
		|	            ДЕНЬ)                                      КАК КоличествоДней,
		|	СчетаУчетаОСБУ.СчетУчета                               КАК СчетДт,
		|	ПервоначальныеСведенияОСБУ.ИнвентарныйНомер            КАК ИнвентарныйНомер,
		|	МестонахождениеОС.МОЛ.Код                              КАК КодМОЛа,
		|	МестонахождениеОС.Местонахождение.Наименование         КАК Подразделение
		|ИЗ
		|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
		|		                    &Период,
		|		                    Организация = &ТекОрганизация
		|		                    И ОсновноеСредство В (&СписокОС)) КАК СчетаУчетаОСБУ
		|		ПО МодернизацияОСОС.ОсновноеСредство = СчетаУчетаОСБУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|		                    &Период,
		|		                    Организация = &ТекОрганизация
		|		                    И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБУ
		|		ПО МодернизацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|		                    &Период,
		|		                    Организация = &ТекОрганизация
		|		                    И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|		ПО МодернизацияОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|ГДЕ
		|	МодернизацияОСОС.Ссылка = &Ссылка";
	КонецЕсли;
	
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	НеПервая = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если НеПервая Тогда
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОЗ2");
		
		Если Не ПечатьПоДаннымУпрУчета Тогда
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
			ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
			
		Иначе
			
			ОбластьМакета.Параметры.Организация = "Управлінський облік";
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(Выборка);
		//ЧтоИзменилось = "";
		//
		//Если ЗначениеЗаполнено(Выборка.СрокПолезногоИспользования) Тогда
		//	
		//	ЧтоИзменилось = "Строк корисного використання (в місяцях): " + Выборка.СрокПолезногоИспользования + "; ";
		//	
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(Выборка.ОбъемПродукцииРабот) Тогда
		//	
		//	ЧтоИзменилось = ЧтоИзменилось + "Очікуваний об'єм продукції (в натуральних од.): " + Выборка.ОбъемПродукцииРабот + "; ";
		//	
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(Выборка.ЛиквидационнаяСтоимость) Тогда
		//	
		//	ЧтоИзменилось = ЧтоИзменилось + "Ліквідаційна вартість (в " + глЗначениеПеременной("ВалютаРегламентированногоУчета") + "): " + Выборка.ЛиквидационнаяСтоимость + "; ";
		//	
		//КонецЕсли;
		//	
		//ОбластьМакета.Параметры.ЧтоИзменилось = ЧтоИзменилось;
		ТабДокумент.Вывести(ОбластьМакета);
		НеПервая = Истина;
	
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьОЗ2()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОЗ2упр" тогда
		ТабДокумент = ПечатьОЗ2();
	ИначеЕсли ИмяМакета = "ОЗ2бух" тогда
		ТабДокумент = ПечатьОЗ2(Ложь);
    ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
              
	КонецЕсли;
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Модернизация ОС"));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	СтруктураПечатныхФорм = новый Структура;
	Если  ОтражатьВУправленческомУчете тогда 
		СтруктураПечатныхФорм.Вставить("ОЗ2упр","Форма ОЗ-2(упр. учет)");
	КонецЕсли;
	Если  ОтражатьВБухгалтерскомУчете тогда 
		СтруктураПечатныхФорм.Вставить("ОЗ2бух","Форма ОЗ-2(бух. учет)");
	КонецЕсли;
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
///////////////////////////////////////////////////////////////////////////////

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если ОтражатьВУправленческомУчете Тогда
		
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ_УУ", мУчетнаяПолитика.УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
 	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
			СтруктураШапкиДокумента.Вставить("УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ", мУчетнаяПолитикаРегл.УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДока = Дата;

	СобытиеОС           = Движения.СобытияОС;
	АмортизацияОС         = Движения.СтоимостьОС;
	ПараметрыАмортизацииОС= Движения.ПараметрыАмортизацииОС;
	НазваниеДокумента      = Метаданные().Представление();

	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Амортизация",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
	ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	
	ТекНаправление = СтруктураШапкиДокумента.СпособОтраженияРасходов;
	
	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		СуммаВСтоимостьУУ 	= 0;
		СуммаНаЗатратыУУ 	= 0;
		
		// в зависимости от вида улучшения
		Если ВидУлучшения = Перечисления.ВидыУлучшения.Ремонт Тогда
			Если СтруктураШапкиДокумента.УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ_УУ Тогда
				СуммаВСтоимостьУУ 	= Макс(0, СтрокаТЧ.СуммаМодернизацииУУ - СтрокаТЧ.СуммаУлучшенияВПределахНормУУ);
				СуммаНаЗатратыУУ 	= Макс(0, СтрокаТЧ.СуммаУлучшенияВПределахНормУУ);
			Иначе	
				СуммаВСтоимостьУУ 	= 0;
				СуммаНаЗатратыУУ 	= СтрокаТЧ.СуммаМодернизацииУУ;
			КонецЕсли;	
		Иначе // Модернизация 
			Если СтруктураШапкиДокумента.УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ_УУ Тогда
				СуммаВСтоимостьУУ 	= Макс(0, СтрокаТЧ.СуммаМодернизацииУУ - СтрокаТЧ.СуммаУлучшенияВПределахНормУУ);
				СуммаНаЗатратыУУ 	= Макс(0, СтрокаТЧ.СуммаУлучшенияВПределахНормУУ);
			Иначе	 
				СуммаВСтоимостьУУ 	= СтрокаТЧ.СуммаМодернизацииУУ;
				СуммаНаЗатратыУУ 	= 0;
			КонецЕсли;	
		КонецЕсли;	 
		
		// Движения по регистру СобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Событие              = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента    = НазваниеДокумента;
		Движение.НомерДокумента       = Номер;
		Движение.СуммаЗатрат          = СтрокаТЧ.СуммаМодернизацииУУ;
		

		Если СуммаВСтоимостьУУ <> 0 Тогда
			// Движения по регистру ПараметрыАмортизацииОС
			Движение = ПараметрыАмортизацииОС.Добавить();
			Движение.Период                  = ДатаДока;
			Движение.ОсновноеСредство        = ТекОС;
			Движение.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияУУ;
			Движение.СрокИспользованияДляВычисленияАмортизации    = СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииУУ;
			Движение.СтоимостьДляВычисленияАмортизации    		  = СтрокаТЧ.СтоимостьДляВычисленияАмортизацииУУ;
			Движение.ЛиквидационнаяСтоимость                     = СтрокаТЧ.ЛиквидационнаяСтоимостьУУ;
			Движение.ОбъемПродукцииРабот                         = СтрокаТЧ.ОбъемПродукцииРаботУУ;
			Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = Макс(0, СтрокаТЧ.ОбъемПродукцииРаботУУ - СтрокаТЧ.ФактОбъемПродукцииРаботУУ);
			Движение.ПрименитьВТекущемМесяце = Ложь;
			
			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			Движение.ОсновноеСредство        = ТекОС;
			Движение.Амортизация             = 0;
			Движение.Стоимость               = СуммаВСтоимостьУУ;
		КонецЕсли;	

		Если СуммаНаЗатратыУУ > 0 Тогда

			Если ТаблицаНаправлений <> Неопределено Тогда
				
				//Затраты списываются по способу отражения расходов по амортзации
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаТЧ.ОсновноеСредство,"ОС_УУ");
				ТекНаправление = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_УУ);
				                                          
			КонецЕсли;
			
			ТекМестонахождение = Неопределено;
			Если ТаблицаМестонахождений <> Неопределено Тогда
				
				//Затраты списываются по способу отражения расходов по амортзации
				ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаТЧ.ОсновноеСредство,"ОС_УУ");
				ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_УУ);
				                                          
			КонецЕсли;
			
			НоваяСтрока    = ТабАмортизации.Добавить();

			НоваяСтрока.Амортизация            	= СуммаНаЗатратыУУ;
			НоваяСтрока.ОбъектУчета            	= СтрокаТЧ.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации 	= ТекНаправление;
			НоваяСтрока.Местонахождение 		= ТекМестонахождение;

		КонецЕсли;
		

	КонецЦикла;

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьПриход();
	
	// вызов процедуры списания амортизации по направлениям
	УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);
	
	// Движения по регистру Строительство
	СтроительствоОС       = Движения.СтроительствоОбъектовОсновныхСредств;
	ТаблицаСтроительство = СтроительствоОС.Выгрузить();
	Движение = ТаблицаСтроительство.Добавить();
	Движение.ОбъектСтроительства        = СтруктураШапкиДокумента.ОбъектСтроительства;
	Движение.Сумма                      = ТаблицаПоОС.Итог("СуммаМодернизацииУУ");
	
	СтроительствоОС.мПериод          = ДатаДока;
	СтроительствоОС.мТаблицаДвижений = ТаблицаСтроительство;
	Движения.СтроительствоОбъектовОсновныхСредств.ВыполнитьРасход();


КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)


	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		Возврат;
	КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	СписокОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	УправлениеВнеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(МоментВремени(), ТекОрганизация, ТаблицаПоОС,
	                                                  СтруктураШапкиДокумента, 
													  Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;

	ТЗНалоговыеНазначения = Неопределено;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// Сформируем движения по НДС до отражения в бухгалтерском учете, 
		// поскольку бухгалтерская стоимость зависит от права на налоговый кредит
		ТЗНалоговыеНазначения = ТаблицаПоОС.Скопировать();
		ФормированиеДвиженийПоПодсистемеНДС(СтруктураШапкиДокумента, ТЗНалоговыеНазначения, Отказ, Заголовок);
		
	КонецЕсли; 

	ТаблицаПоОС.Колонки.Добавить("СуммаНалоговогоКредита"); // в том числе
	ТаблицаПоОС.ЗаполнитьЗначения(0,"СуммаНалоговогоКредита");
	ТаблицаПоОС.Колонки.Добавить("СуммаНалоговогоКредитаНУ"); // в том числе
	ТаблицаПоОС.ЗаполнитьЗначения(0,"СуммаНалоговогоКредитаНУ");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если (ТЗНалоговыеНазначения <> Неопределено) и (ТЗНалоговыеНазначения.Количество() > 0) Тогда
			// Распределим по всем основным средствам пропорционально корректировки по налоговому кредиту
			
			Для каждого СтрокаТЗ Из ТЗНалоговыеНазначения Цикл
				
				СтруктураВидовДеятельности = Новый Структура("НалоговоеНазначение_ОС");
				СтруктураВидовДеятельности.НалоговоеНазначение_ОС = СтрокаТЗ.НалоговоеНазначениеПоФакту;
				
				ОбщаяСуммаМодернизацииБУ = 0;
				ОбщаяСуммаМодернизацииНУ = 0;
				
				МассивСтрок = ТаблицаПоОС.НайтиСтроки(СтруктураВидовДеятельности);
				КвоСтрокВМассиве = МассивСтрок.ВГраница();
				
				Для Н = 0 По КвоСтрокВМассиве Цикл
				
					ОбщаяСуммаМодернизацииБУ = ОбщаяСуммаМодернизацииБУ + МассивСтрок[Н].СуммаМодернизацииБУ;
					
					ОбщаяСуммаМодернизацииНУ = ОбщаяСуммаМодернизацииНУ + МассивСтрок[Н].СуммаМодернизацииНУ;
				
				КонецЦикла;
				
				Если ОбщаяСуммаМодернизацииБУ = 0 И ОбщаяСуммаМодернизацииНУ = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				// стоимость сторнируем только когда восстанавливаем НДС, то есть сумма корректировки НДС > 0
				Если СтрокаТЗ.СуммаКорректировкиНалоговогоКредита > 0 Тогда
					Коэф		= СтрокаТЗ.СуммаКорректировкиНалоговогоКредита / ОбщаяСуммаМодернизацииБУ;	
					КоэфНУ		= СтрокаТЗ.СуммаКорректировкиНалоговогоКредита / ОбщаяСуммаМодернизацииНУ;
				Иначе
					Коэф		= 0;
					КоэфНУ		= 0;
				КонецЕсли; 
				
				Погрешность	= 0;
				
				ПогрешностьНУ	= 0;
				
				
				Для  Н = 0 По КвоСтрокВМассиве Цикл
					
					СтрокаОС = МассивСтрок[Н];
					СтрокаОС.СуммаНалоговогоКредита	 = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэф*СтрокаОС.СуммаМодернизацииБУ, 2, Погрешность);
					
					СтрокаОС.СуммаНалоговогоКредитаНУ = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(КоэфНУ*СтрокаОС.СуммаМодернизацииНУ, 2, ПогрешностьНУ);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СобытиеОС            	= Движения.СобытияОСОрганизаций;
		АмортизацияОС          	= Движения.СтоимостьОСБухгалтерскийУчет;
		ПараметрыАмортизацииОС 		= Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
		ПараметрыАмортизацииОС_НУ 	= Движения.ПараметрыАмортизацииОСНалоговыйУчет;
		ПроводкиБУ             	= Движения.Хозрасчетный;
		НазваниеДокумента 		= Метаданные().Представление();

		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Амортизация",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("АмортизацияНУ",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("НалоговоеНазначение", 		Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		ТекНаправление                = СтруктураШапкиДокумента.СпособОтраженияРасходов;
		СчетУчетаОбъектаСтроительства = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
		
		
		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();

		Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
			
			СуммаВСтоимостьБУ 	= 0;
			СуммаНаЗатратыБУ 	= 0;
			
			СуммаВСтоимостьНУ 	= Макс(0, СтрокаТЧ.СуммаМодернизацииНУ - СтрокаТЧ.СуммаУлучшенияВПределахНормНУ);
			СуммаНаЗатратыНУ 	= СтрокаТЧ.СуммаУлучшенияВПределахНормНУ;
			
			// в зависимости от вида улучшения
			Если ВидУлучшения = Перечисления.ВидыУлучшения.Ремонт Тогда
				Если СтруктураШапкиДокумента.УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ Тогда
					СуммаВСтоимостьБУ 	= Макс(0, СтрокаТЧ.СуммаМодернизацииНУ - СтрокаТЧ.СуммаУлучшенияВПределахНормНУ);
					СуммаНаЗатратыБУ 	= Макс(0, СтрокаТЧ.СуммаУлучшенияВПределахНормНУ + СтрокаТЧ.СуммаМодернизацииБУ - СтрокаТЧ.СуммаМодернизацииНУ);
				Иначе	
					СуммаВСтоимостьБУ 	= 0;
					СуммаНаЗатратыБУ 	= СтрокаТЧ.СуммаМодернизацииБУ;
				КонецЕсли;	
			Иначе // Модернизация 
				Если СтруктураШапкиДокумента.УвеличиватьСтоимостьОСНаСуммуУлучшенияВПорядкеНКУ Тогда
					СуммаВСтоимостьБУ 	= Макс(0, СтрокаТЧ.СуммаМодернизацииНУ - СтрокаТЧ.СуммаУлучшенияВПределахНормНУ);
					СуммаНаЗатратыБУ 	= Макс(0, СтрокаТЧ.СуммаУлучшенияВПределахНормНУ + СтрокаТЧ.СуммаМодернизацииБУ - СтрокаТЧ.СуммаМодернизацииНУ);
				Иначе	 
					СуммаВСтоимостьБУ 	= СтрокаТЧ.СуммаМодернизацииБУ;
					СуммаНаЗатратыБУ 	= 0;
				КонецЕсли;	
			КонецЕсли;	 
			

			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			СчетУчетаСтоимости  = СтрокаТЧ.СчетУчетаБУ;
			
			// Движения по регистру событияОСОрганизаций
			Движение = СобытиеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
			Движение.СуммаЗатратБУ 		  = СтрокаТЧ.СуммаМодернизацииБУ - СтрокаТЧ.СуммаНалоговогоКредита;
			Движение.НомерДокумента       = Номер;
			Движение.НазваниеДокумента    = НазваниеДокумента;
				

			Если СуммаВСтоимостьБУ > 0 ИЛИ СуммаВСтоимостьНУ > 0 Тогда
				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.ОсновноеСредство      = ТекОС;
				Движение.Организация           = ТекОрганизация;
				Движение.Амортизация           = 0;
				Движение.Стоимость             = СуммаВСтоимостьБУ - СтрокаТЧ.СуммаНалоговогоКредита;
				Движение.АмортизацияНУ         = 0;
				Движение.СтоимостьНУ           = СуммаВСтоимостьНУ - СтрокаТЧ.СуммаНалоговогоКредитаНУ;
				Движение.ВидОперации           = СтруктураШапкиДокумента.ВидОперацийСОсновнымиСредствами;
				Движение.СуммаЗатрат           = СтрокаТЧ.СуммаМодернизацииБУ - СтрокаТЧ.СуммаНалоговогоКредита;
			КонецЕсли;	
				
			Если СуммаВСтоимостьБУ > 0 Тогда
				// Движения по регистру ПараметрыАмортизацииОС
				Движение = ПараметрыАмортизацииОС.Добавить();
				Движение.Период           = ДатаДока;
				Движение.ОсновноеСредство = ТекОС;
				Движение.Организация      = ТекОрганизация;
				Движение.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияБУ;
				Движение.СрокИспользованияДляВычисленияАмортизации 	 = СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииБУ;
				Движение.СтоимостьДляВычисленияАмортизации 			 = СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ - СтрокаТЧ.СуммаНалоговогоКредита;
				Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = Макс(0, СтрокаТЧ.ОбъемПродукцииРаботБУ - СтрокаТЧ.ФактОбъемПродукцииРаботБУ);
				Движение.ОбъемПродукцииРабот                         = СтрокаТЧ.ОбъемПродукцииРаботБУ;
				Движение.ЛиквидационнаяСтоимость                     = СтрокаТЧ.ЛиквидационнаяСтоимостьБУ;
			КонецЕсли;	
			
			Если СуммаВСтоимостьНУ > 0 Тогда
				// Движения по регистру ПараметрыАмортизацииНУ
				Движение = ПараметрыАмортизацииОС_НУ.Добавить();
				Движение.Период 									= ДатаДока;
				Движение.ОсновноеСредство 							= ТекОС;
				Движение.Организация 								= ТекОрганизация;
				Движение.СрокПолезногоИспользования 				= СтрокаТЧ.СрокПолезногоИспользованияНУ;
				Движение.СрокИспользованияДляВычисленияАмортизации 	= СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииНУ;
				Движение.СтоимостьДляВычисленияАмортизации 			= СтрокаТЧ.СтоимостьДляВычисленияАмортизацииНУ - СтрокаТЧ.СуммаНалоговогоКредита;
			КонецЕсли;
			
			// Корректировка налогового кредита
			СуммаПроводки 	=  -СтрокаТЧ.СуммаНалоговогоКредита;
			СуммаПроводкиНУ =  -СтрокаТЧ.СуммаНалоговогоКредитаНУ;
			
			Если СуммаПроводки <> 0 ИЛИ СуммаПроводкиНУ <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.НомерЖурнала = "ОС";
				Проводка.Содержание   = "Корректировка налогового кредита";
				Проводка.Сумма        = СуммаПроводки;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеДт  = СтруктураШапкиДокумента.НалоговоеНазначениеОбъектаСтроительства;
					Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СуммаПроводкиНУ);
					
				КонецЕсли;
				
				Проводка.СчетДт       = СчетУчетаОбъектаСтроительства;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
				
			КонецЕсли;
			
			
			Если СуммаНаЗатратыБУ > 0 ИЛИ СуммаНаЗатратыНУ > 0 Тогда
				
				Если ТаблицаНаправлений <> Неопределено Тогда
					
					//Затраты списываются по способу отражения расходов по амортзации
					ТекНаправление = ТаблицаНаправлений.Найти(СтрокаТЧ.ОсновноеСредство,"ОС_БУ");
					ТекНаправление = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_БУ);
					
				КонецЕсли;
				
				ТекМестонахождение = Неопределено;
				Если ТаблицаМестонахождений <> Неопределено Тогда
					
					//Затраты списываются по способу отражения расходов по амортзации
					ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаТЧ.ОсновноеСредство,"ОС_БУ");
					ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_БУ);
					                                          
				КонецЕсли;
				
				НоваяСтрока = ТабАмортизации.Добавить();
				НоваяСтрока.Амортизация            = СуммаНаЗатратыБУ;
				НоваяСтрока.АмортизацияНУ          = СуммаНаЗатратыНУ;
				НоваяСтрока.ОбъектУчета            = СтрокаТЧ.ОсновноеСредство;
				НоваяСтрока.НаправлениеАмортизации = ТекНаправление;
				НоваяСтрока.СчетАмортизации        = СчетУчетаОбъектаСтроительства;
				НоваяСтрока.НалоговоеНазначение    = СтруктураШапкиДокумента.НалоговоеНазначениеОбъектаСтроительства;
				НоваяСтрока.ИмяСубконто = "ОбъектыСтроительства";
				
				НоваяСтрока.Местонахождение 		= ТекМестонахождение;
				
			КонецЕсли;			
			
			Если СуммаВСтоимостьБУ > 0 ИЛИ СуммаВСтоимостьНУ > 0 Тогда
			
				// Проводки по модернизации Д СчетУчетаСтоимости К СчетУчетаБУВнеоборотногоАктива
		 		СуммаПроводки = СуммаВСтоимостьБУ - СтрокаТЧ.СуммаНалоговогоКредита;
				СуммаПроводкиНУ = СуммаВСтоимостьНУ - СтрокаТЧ.СуммаНалоговогоКредита;

				Если СуммаПроводки <> 0 ИЛИ СуммаПроводкиНУ <> 0 Тогда	

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Модернизация";
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма        = СуммаПроводки;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Проводка.НалоговоеНазначениеДт  = СтрокаТЧ.НалоговоеНазначение_ОС;
						Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СуммаПроводкиНУ);
						
					КонецЕсли;
					
					Проводка.СчетДт       = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Проводка.НалоговоеНазначениеКт  = СтруктураШапкиДокумента.НалоговоеНазначениеОбъектаСтроительства;
						Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СуммаПроводкиНУ);
						
					КонецЕсли;
					
					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);

				КонецЕсли;
				
			КонецЕсли;	

		КонецЦикла;

		АмортизацияОС.мПериод          = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();
		
		//вызов процедуры списания амортизации по направлениям
		УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "ОС");
		
	КонецЕсли;


		
КонецПроцедуры

// Процедура формирования движений по регистрам подсистемы учета НДС
//
// Параметры:
//		СтруктураШапкиДокумента
//		ТЗНалоговыеНазначения	- таблица с бухгалтерскими данными по основным средствам, в которую будет добавлена 
// 				информация о корректировке налогового кредита
Процедура ФормированиеДвиженийПоПодсистемеНДС(СтруктураШапкиДокумента, ТЗНалоговыеНазначения, Отказ, Заголовок)
	
	ДатаДока = Дата;

	// Объекты строительства
	
	// Спишем накопленный НДС из регистра. 
	// Суммы списываем в той пропорции, в какой стоимость принимаемых к учету объектов 
	// находится к стоимости всего остатка по налоговому учету
	
	ТекОрганизация         = СтруктураШапкиДокумента.Организация;
	ТекОбъектСтроительства = СтруктураШапкиДокумента.ОбъектСтроительства;
	ТекСтоимостьНУ         = СтруктураШапкиДокумента.СтоимостьНУ;
	ТекСтоимостьБУ         = СтруктураШапкиДокумента.СтоимостьБУ;
	
	Если ТекСтоимостьНУ = 0 И ТекСтоимостьБУ = 0 Тогда
		
		//Проверять нечего.
		ТЗНалоговыеНазначения = Неопределено;
		Возврат
		
	КонецЕсли;
	
	// Получим остатки из регистра НДС
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
		
	Если ИспользоватьРасширеннуюАналитику Тогда
		ПериодГраница = Новый Граница (КонецМесяца(Дата), ВидГраницы.Включая);
	Иначе	
		ПериодГраница = Новый Граница (Дата, ВидГраницы.Включая);
	КонецЕсли;

	ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Остатки(ПериодГраница,
		             Новый Структура("Организация,ОбъектСтроительства, СчетУчета", ТекОрганизация, ТекОбъектСтроительства, СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива));
	
	ОстатокСтоимостиНУ = ВыборкаЗаписей.Итог("СтоимостьНУ");
	ОстатокСтоимостиБУ = ВыборкаЗаписей.Итог("Стоимость");
	
	Если ОстатокСтоимостиНУ = 0 И ОстатокСтоимостиБУ = 0 Тогда	
		
		ТЗНалоговыеНазначения = Неопределено;
		ОбщегоНазначения.СообщитьОбОшибке("Остаточная стоимость по налоговому учету объекта строительства """ + ТекОбъектСтроительства + """ равна 0",Отказ, Заголовок);
		Возврат
	ИначеЕсли ОстатокСтоимостиНУ < ТекСтоимостьНУ Тогда
		
		ТЗНалоговыеНазначения = Неопределено;
		ОбщегоНазначения.СообщитьОбОшибке("Остаточная стоимость по налоговому учету объекта строительства """ + ТекОбъектСтроительства + """ равна "
		                    + Формат(ОстатокСтоимостиНУ,"ЧЦ=15; ЧДЦ=2") + " что меньше, указанной в документе "
							+ Формат(ТекСтоимостьНУ,"ЧЦ=15; ЧДЦ=2"), Отказ, Заголовок);
		Возврат
		
	ИначеЕсли ОстатокСтоимостиБУ < ТекСтоимостьБУ Тогда
		
		ТЗНалоговыеНазначения = Неопределено;
		ОбщегоНазначения.СообщитьОбОшибке("Остаточная стоимость по бухгалтерскому учету объекта строительства """ + ТекОбъектСтроительства + """ равна "
		                    + Формат(ОстатокСтоимостиБУ,"ЧЦ=15; ЧДЦ=2") + " что меньше, указанной в документе "
							+ Формат(ТекСтоимостьБУ,"ЧЦ=15; ЧДЦ=2"), Отказ, Заголовок);
		Возврат
	
	КонецЕсли;
	
	//Получим суммы модернизации в разрезе налогового назначения ОС
	ТЗНалоговыеНазначения.Свернуть("НалоговоеНазначение_ОС", "СуммаМодернизацииНУ, СуммаМодернизацииБУ");
	
	Для каждого СтрокаТЗ Из ТЗНалоговыеНазначения Цикл
		
		//Определим часть списания приходящуюся на: НалоговоеНазначение_ОС 
		Коэф 	= ?(ОстатокСтоимостиНУ = 0, 0, СтрокаТЗ.СуммаМодернизацииНУ / ОстатокСтоимостиНУ);
		
		КоэфБУ 	= ?(ОстатокСтоимостиБУ = 0, 0, СтрокаТЗ.СуммаМодернизацииБУ / ОстатокСтоимостиБУ);
		
		Если Коэф = 0 И КоэфБУ = 0 Тогда
			
			Продолжить
			
		КонецЕсли;
		
		//Распределяем с учетом погрешности
		Погрешность            = 0;
		ПогрешностьНДСВходящий = 0;
		ПогрешностьНДСКредит   = 0;
		
		Для каждого ЗаписьПоОстаткуНДС Из ВыборкаЗаписей Цикл
			
			Движение = Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.ДобавитьРасход();
			
			Движение.Период							= ДатаДока;
			Движение.ОбъектСтроительства			= ТекОбъектСтроительства;
			Движение.Организация					= ТекОрганизация;
	 		Движение.НалоговоеНазначение     		= ЗаписьПоОстаткуНДС.НалоговоеНазначение;
			
			Движение.СчетУчета						= СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
			Движение.Стоимость						= КоэфБУ * ЗаписьПоОстаткуНДС.Стоимость;
			
			// Ресурсы списываем с учетом коэффициента и погрешности в пределах комбинации: ВидНалоговойДеятельности_ОС, ВидДеятельностиНДС_ОС
			Движение.СтоимостьНУ					= ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэф * ЗаписьПоОстаткуНДС.СтоимостьНУ, 2, Погрешность);
			Движение.НДСВходящий					= ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэф * ЗаписьПоОстаткуНДС.НДСВходящий, 2, ПогрешностьНДСВходящий);
			Движение.НДСКредит						= ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэф * ЗаписьПоОстаткуНДС.НДСКредит,   2, ПогрешностьНДСКредит);
			
			// Устанавливаем реквизиты фактической принадлежности объекта строительства
			// к облагаемой деятельности
 		    Движение.НалоговоеНазначениеПоФакту      	= СтрокаТЗ.НалоговоеНазначение_ОС;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	// Обработаем корректировки налогового кредита, к которым привело такое фактическое использование объектов строительства
	ТаблицаСписанияНДС = Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Выгрузить();
	НалоговыйУчет.ПолучитьТаблицуКорректировокНалоговогоКредита(ТаблицаСписанияНДС);
	
	Для каждого СтрокаСписанияНДС Из ТаблицаСписанияНДС Цикл
	
		Если СтрокаСписанияНДС.СуммаКорректировкиНалоговогоКредита = 0 Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		// Зафиксируем в регистре необходимость корректировки
		Движение = Движения.КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет.ДобавитьПриход();
		
		Движение.Период							 = ДатаДока;
		Движение.Организация					 = СтрокаСписанияНДС.Организация;
		Движение.ОбъектСтроительства			 = СтрокаСписанияНДС.ОбъектСтроительства;
 		Движение.НалоговоеНазначение		 	 = СтрокаСписанияНДС.НалоговоеНазначение;
	 	Движение.НалоговоеНазначениеПоФакту 	 = СтрокаСписанияНДС.НалоговоеНазначениеПоФакту;
		
		Движение.НДСКредит						 = СтрокаСписанияНДС.НДСКредит;
		Движение.НДСКредитПоФакту				 = СтрокаСписанияНДС.НДСКредит + СтрокаСписанияНДС.СуммаКорректировкиНалоговогоКредита;
		
		Движение.КодОперации = Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПредполагаемаяКорректрировка;
		
	КонецЦикла; 
	
	// Изменение стоимости основных средств из-за потери/получения права на налоговый кредит в резрезе НалоговоеНазначениеПоФакту
	ТаблицаСписанияНДС.Свернуть("НалоговоеНазначениеПоФакту", "СуммаКорректировкиНалоговогоКредита");
	ТЗНалоговыеНазначения = ТаблицаСписанияНДС;
	
КонецПроцедуры // ФормированиеДвиженийПоПодсистемеНДС()

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("ОбъектСтроительства");
	
	Если СтруктураШапкиДокумента.ИспользоватьОбщийСпособОтраженияРасходов Тогда
		
		СтруктураПолей.Вставить("СпособОтраженияРасходов");
		
	КонецЕсли;
	
		СтруктураПолей.Вставить("ВидУлучшения");

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС)Тогда
		
		СтруктураПолей.Вставить("НалоговоеНазначениеОбъектаСтроительства");
		
	КонецЕсли;
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения, ТаблицаПоОС, Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; 
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		// Проверим возможность изменения состояния ОС
		Для каждого СтрокаОС из ТаблицаПоОС Цикл
			Если ОтражатьВБухгалтерскомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьИзмененияСостоянияОС(СтрокаОС.ОсновноеСредство,Дата,СобытиеРегл,Отказ,Организация);
			КонецЕсли;
			Если ОтражатьВУправленческомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьИзмененияСостоянияОС(СтрокаОС.ОсновноеСредство,Дата,Событие,Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	
КонецПроцедуры // ПроверкаРеквизитов()

// Проверяет заполнение табличной части документа
// для управленческого учета
Процедура ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок)
	
	// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
	Если ТаблицаОС.Итог("СуммаМодернизацииУУ")<> СтруктураШапкиДокумента.СтоимостьУУ Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("По управленческому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);		
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если ТаблицаОС.Итог("СуммаМодернизацииБУ")<> СтруктураШапкиДокумента.СтоимостьБУ Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("По бухгалтерскому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		
			// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
			Если ТаблицаОС.Итог("СуммаМодернизацииНУ")<> СтруктураШапкиДокумента.СтоимостьНУ Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("По налоговому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(РежимПроведения, ТаблицаПоОС, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		
		ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
			И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
			
		Если ИспользоватьРасширеннуюАналитику Тогда
			ПериодГраница = Новый Граница (КонецМесяца(Дата), ВидГраницы.Включая);
		Иначе	
			ПериодГраница = Новый Граница (Дата, ВидГраницы.Включая);
		КонецЕсли;
			
		ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.Остатки(ПериодГраница,Новый Структура("ОбъектСтроительства",СтруктураШапкиДокумента.ОбъектСтроительства));
		
		ОстатокСтоимости = ВыборкаЗаписей.Итог("Сумма");
		
		Требуется = СтруктураШапкиДокумента.СтоимостьУУ;
		
		Если Требуется > ОстатокСтоимости Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("По управленческому учету для объекта строительства остаток суммы меньше суммы модернизации"+ Символы.ПС + Символы.Таб +
			                    "Не хватает " + ?(ОстатокСтоимости > 0 , Требуется - ОстатокСтоимости, Требуется ) +
			                    "; Остаток " + ОстатокСтоимости +
			                    "; Требуется " + Требуется , Отказ,Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("Событие");
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	// Проверим чем заполнено событие
	ВидыСобытий = ПолучитьСписокЗначенийВидыСобытий();
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
							  ВидыСобытий,
							  ПредставлениеРеквизита,Отказ);
	
	ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеДокументаРегл( СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("СобытиеРегл");
	СтруктураПолей.Вставить("СчетУчетаБУВнеоборотногоАктива");
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	// Проверим чем заполнено событие
	ВидыСобытий = ПолучитьСписокЗначенийВидыСобытий();
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
							  ВидыСобытий,
							  ПредставлениеРеквизита,Отказ);
	
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоОС;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидОперацийСОсновнымиСредствами", Перечисления.ВидыСобытийОС.Ремонт);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("ОсновноеСредство",         "ОсновноеСредство");
	
	СтруктураПолей.Вставить("СтоимостьУУ",          "СтоимостьУУ");
	СтруктураПолей.Вставить("СуммаМодернизацииУУ",  "СуммаМодернизацииУУ");
	СтруктураПолей.Вставить("АмортизацияУУ",        "АмортизацияУУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцУУ", "АмортизацияЗаМесяцУУ");
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияУУ", "СрокПолезногоИспользованияУУ");
	СтруктураПолей.Вставить("ФактСрокИспользованияУУ",      "ФактСрокИспользованияУУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботУУ",        "ОбъемПродукцииРаботУУ");
	СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьУУ",    "ЛиквидационнаяСтоимостьУУ");
	
	СтруктураПолей.Вставить("ФактОбъемПродукцииРаботУУ",    "ФактОбъемПродукцииРаботУУ");

	СтруктураПолей.Вставить("СтоимостьБУ",                  "СтоимостьБУ");
	СтруктураПолей.Вставить("СуммаМодернизацииБУ",          "СуммаМодернизацииБУ");
	СтруктураПолей.Вставить("АмортизацияБУ",                "АмортизацияБУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ",         "АмортизацияЗаМесяцБУ");
	СтруктураПолей.Вставить("ЛиквидационнаяСтоимостьБУ",    "ЛиквидационнаяСтоимостьБУ");
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ", "СрокПолезногоИспользованияБУ");
	СтруктураПолей.Вставить("ФактСрокИспользованияБУ",      "ФактСрокИспользованияБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботБУ",        "ОбъемПродукцииРаботБУ");
	
	СтруктураПолей.Вставить("ФактОбъемПродукцииРаботБУ",    "ФактОбъемПродукцииРаботБУ");
	
	СтруктураПолей.Вставить("СуммаМодернизацииНУ",          "СуммаМодернизацииНУ");
	
	СтруктураПолей.Вставить("СтоимостьНУ",                  "СтоимостьНУ");
	СтруктураПолей.Вставить("АмортизацияНУ",                "АмортизацияНУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ",         "АмортизацияЗаМесяцНУ");
	СтруктураПолей.Вставить("ФактСрокИспользованияНУ",      "ФактСрокИспользованияНУ");
	СтруктураПолей.Вставить("СрокПолезногоИспользованияНУ", "СрокПолезногоИспользованияНУ");
	
	СтруктураПолей.Вставить("СуммаУлучшенияВПределахНормУУ", 			"СуммаУлучшенияВПределахНормУУ");
	СтруктураПолей.Вставить("СуммаУлучшенияВПределахНормНУ", 			"СуммаУлучшенияВПределахНормНУ");
	
	СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииУУ", 	"СрокИспользованияДляВычисленияАмортизацииУУ");
	СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииБУ", 	"СрокИспользованияДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииНУ", 	"СрокИспользованияДляВычисленияАмортизацииНУ");
	СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииУУ", 			"СтоимостьДляВычисленияАмортизацииУУ");
	СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииБУ", 			"СтоимостьДляВычисленияАмортизацииБУ");
	СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииНУ", 			"СтоимостьДляВычисленияАмортизацииНУ");

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ПроверитьЗаполнениеДокумента(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
    	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
	
	ТаблицаНаправлений = Неопределено;

	Если НЕ СтруктураШапкиДокумента.ИспользоватьОбщийСпособОтраженияРасходов Тогда
		
		Упр  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
		Бухг = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
		
		Запрос   = Новый Запрос;
		Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ТекПериод",      МоментВремени());
		Запрос.УстановитьПараметр("СписокОС",       ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"));
		Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
						|	СпособыОтраженияУУ.ОсновноеСредство                      КАК ОС_УУ,
						|	СпособыОтраженияУУ.СпособыОтраженияРасходовПоАмортизации КАК Направление_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
						|	СпособыОтраженияБУ.ОсновноеСредство                      КАК ОС_БУ,
						|	СпособыОтраженияБУ.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ", "") + "
						|ИЗ" + ?(Упр,"
						|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(
						|		            &ТекПериод,
						|		            ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияУУ", "") + ?(Упр и Бухг,"
						|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг," 
						|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
						|			                &ТекПериод, 
						|			                ОсновноеСредство В (&СписокОС)
						|		                    И Организация = &ТекОрганизация) КАК СпособыОтраженияБУ", "") + ?(Упр и Бухг,"
						|		ПО СпособыОтраженияУУ.ОсновноеСредство = СпособыОтраженияБУ.ОсновноеСредство", "");
		ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Упр  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бухг = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      МоментВремени());
	Запрос.УстановитьПараметр("СписокОС",       ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
					|	МестонахождениеОСУУ.ОсновноеСредство 	КАК ОС_УУ,
					|	МестонахождениеОСУУ.Местонахождение 	КАК Местонахождение_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
					|	МестонахождениеОСБУ.ОсновноеСредство 	КАК ОС_БУ,
					|	МестонахождениеОСБУ.Местонахождение 	КАК Местонахождение_БУ", "") + "
					|ИЗ" + ?(Упр,"
					|	РегистрСведений.МестонахождениеОС.СрезПоследних(
					|		            &ТекПериод,
					|		            ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОСУУ", "") + ?(Упр и Бухг,"
					|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг," 
					|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
					|			                &ТекПериод, 
					|			                ОсновноеСредство В (&СписокОС)
					|		                    И Организация = &ТекОрганизация) КАК МестонахождениеОСБУ", "") + ?(Упр и Бухг,"
					|		ПО МестонахождениеОСУУ.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство", "");
	ТаблицаМестонахождений = Запрос.Выполнить().Выгрузить();
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()
                 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

