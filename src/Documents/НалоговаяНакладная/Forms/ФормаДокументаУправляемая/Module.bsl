////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура УстановитьВидимость()
	
	УстановитьВидимостьСчетаУчетаНДСВТабличныхЧастях();
		Элементы.СчетДт.Видимость = Ложь;
		Элементы.СубконтоДт1.Видимость = Ложь;
		Элементы.СубконтоДт2.Видимость = Ложь;
		Элементы.СубконтоДт3.Видимость = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.СчетНДС) Тогда
		Элементы.СубконтоКт1.Видимость = Ложь;
		Элементы.СубконтоКт2.Видимость = Ложь;
		Элементы.СубконтоКт3.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьЧастичнойОтгрузки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетаУчетаНДСВТабличныхЧастях()
	// Видимость счета учета НДС в табличных частях - только для старых документов, в которых уже были заполнены эти счета
	Элементы.ТоварыСчетУчетаНДС.Видимость  = ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(Объект.Товары);
	Элементы.УслугиСчетУчетаНДС.Видимость  = ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(Объект.Услуги);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЧастичнойОтгрузки()
	Если Объект.ЧастичнаяОтгрузка.Количество() = 0 Тогда
		Элементы.СтраницаЧастичнаяОтгрузка.Видимость  = Ложь;
	Иначе
		Элементы.СтраницаЧастичнаяОтгрузка.Видимость  = Истина;
	КонецЕсли;
КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Количество, Коэффициент, СведенияЕдиницаИзмеренияМест;
	Перем ХарактеристикаНоменклатуры, СерияНоменклатуры;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",					Номенклатура);
	ЗначениеВыбора.Свойство("ХарактеристикаНоменклатуры",	ХарактеристикаНоменклатуры);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",				ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("ЕдиницаИзмеренияМест",			ЕдиницаИзмеренияМест);
	ЗначениеВыбора.Свойство("Коэффициент",					Коэффициент);
	ЗначениеВыбора.Свойство("Количество",					Количество);
	ЗначениеВыбора.Свойство("СведенияЕдиницаИзмеренияМест", СведенияЕдиницаИзмеренияМест);


	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	Если ИмяТабличнойЧасти = "Товары" Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
		
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		Если ИмяТабличнойЧасти <> "ВозвратнаяТара" Тогда
			ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
			РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, Новый Структура("УчитыватьНДС, СуммаВключаетНДС", Объект.УчитыватьНДС, Объект.СуммаВключаетНДС));
		КонецЕсли;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.Количество       			= Количество;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест		= ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент      			= Коэффициент;
			РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, СведенияЕдиницаИзмеренияМест);
		КонецЕсли;
		//Для заполнения цен, сумм и ставок НДС вызовем обработчики изменения номенклатуры
		Если ИмяТабличнойЧасти = "Товары" Тогда
			ИзменениеНоменклатурыКлиент(СтрокаТабличнойЧасти);
		ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
			ИзменениеНоменклатурыУслугиКлиент(СтрокаТабличнойЧасти)
		ИначеЕсли ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
			ИзменениеНоменклатурыТараКлиент(СтрокаТабличнойЧасти);
		КонецЕсли;
		//Заполним реквизиты новой строки табличной части из реквизитов шапки
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
	РассчитатьСуммуДокумента();

КонецПроцедуры //

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	ЕстьУслуги = Ложь;
	Если ИмяТабличнойЧасти = "Товары" Тогда
		Команда = "ПодборВТабличнуюЧастьТовары";
	ИначеЕсли ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Команда = "ПодборВТабличнуюЧастьВозвратняТара";
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		Команда = "ПодборВТабличнуюЧастьУслуги";
		ЕстьУслуги = Истина;
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги", ЕстьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Истина);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Это существующий документ. 
		// Проверим, что его можно менять.
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(РеквизитФормыВЗначение("Объект"), ЭтаФорма);
		
	Иначе
		Если ЗначениеЗаполнено(Параметры.АдресВременногоХранилища) Тогда
			// во временном хранилище уже есть готовый объект НалоговаяНакладная
			НалоговаяНакладнаяОбъект = ПолучитьИзВременногоХранилища(Параметры.АдресВременногоХранилища);
			ЗначениеВРеквизитФормы(НалоговаяНакладнаяОбъект, "Объект");
			Объект.Товары.Очистить();
			Объект.Товары.Загрузить(НалоговаяНакладнаяОбъект.Товары.Выгрузить());
			Объект.Услуги.Очистить();
			Объект.Услуги.Загрузить(НалоговаяНакладнаяОбъект.Услуги.Выгрузить());
			Объект.ВозвратнаяТара.Очистить();
			Объект.ВозвратнаяТара.Загрузить(НалоговаяНакладнаяОбъект.ВозвратнаяТара.Выгрузить());
			Объект.ОткрытиеИзОбработкиФормирования = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации;
	КонецЕсли;
	
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И ЗначениеЗаполнено(Объект.ДокументОснование) 
		И НЕ Объект.ОткрытиеИзОбработкиФормирования Тогда
	  	СтруктураВозврата = ЗаполнитьНалоговуюНакладнуюПоОснованию();
		Если СтруктураВозврата <> Неопределено Тогда
			ОбработатьСтруктуруВозврата(СтруктураВозврата);
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	УстановитьДоступность();
	РассчитатьСуммуДокумента(Истина);
	ОбновитьНадписиИтоговыеСуммы();
	УстановитьВидимость();
	
	УстановитьВидимостьСубконтоКт(Объект.СчетНДС);
	

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора("Товары", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратняТара" Тогда
			ОбработкаПодбора("ВозвратнаяТара", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора("Услуги", ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// ЗАПОЛНЕНИЕ НА ОСНОВАНИИ

&НаСервере
Функция ЗаполнитьНалоговуюНакладнуюПоОснованию()
	
	СтруктураВозврата = НалоговыйУчетСервер.ЗаполнитьНалоговуюНакладнуюПоОснованиюУФ(Объект, Объект.ДокументОснование, УникальныйИдентификатор);
	
	Если (НЕ СтруктураВозврата.Ошибка) И СтруктураВозврата.СтрокаВозврата = "Сформированы документы" Тогда
		МассивАдресов = ПолучитьИзВременногоХранилища(СтруктураВозврата.АдресВременногоХранилища);
		Если МассивАдресов.Количество() = 1 Тогда
			НалоговаяНакладнаяОбъект = ПолучитьИзВременногоХранилища(МассивАдресов[0]);
			ЗначениеВРеквизитФормы(НалоговаяНакладнаяОбъект, "Объект");
			СтруктураВозврата = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДокумент(АдресВременногоХранилища)

	ПараметрыФормы = Новый Структура("АдресВременногоХранилища", АдресВременногоХранилища);
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ОткрытьФорму("Документ.НалоговаяНакладная.Форма.ФормаДокументаУправляемая", ПараметрыФормы,,КлючУникальности);

КонецПроцедуры // ОткрытьДокумент()
 
&НаКлиенте
Процедура ОткрытьДокументы(СтруктураВозврата)
	
	МассивАдресов = ПолучитьИзВременногоХранилища(СтруктураВозврата.АдресВременногоХранилища);
	Для Каждого АдресВременногоХранилища Из МассивАдресов Цикл
		ОткрытьДокумент(АдресВременногоХранилища);
	КонецЦикла; 
	
КонецПроцедуры // ОткрытьДокументы()

 &НаКлиенте
Процедура ОбработатьСтруктуруВозврата(СтруктураВозврата)
	
	ОткрытьОбработку = Ложь; 
	ОткрытьДокументы = Ложь;
	
	Если СтруктураВозврата.Ошибка Тогда
		Если СтруктураВозврата.СтрокаВозврата = "По данному документу не возникают налоговые обязательства!" Тогда
			Предупреждение(СтруктураВозврата.СтрокаВозврата);
			Возврат;
		Иначе
			// оповестим об ошибке при выполнении
			Предупреждение(СтруктураВозврата.СтрокаВозврата);
			Возврат;
		КонецЕсли;	
	Иначе
		Если ЗначениеЗаполнено(СтруктураВозврата.ВариантыОтветов) Тогда
			ВариантыОтвета = РежимДиалогаВопрос.ОКОтмена;
			Ответ = Вопрос(СтруктураВозврата.СтрокаВозврата, ВариантыОтвета);
			
			Если Ответ = КодВозвратаДиалога.ОК Тогда
					
				// открываем НН заполненную полностью строками документа-основания с заполненной тч ЧастичнаяОтрузка
				НоваяСтруктураВозврата = СформироватьЧастичнуюОтгрузку(СтруктураВозврата);
				ОбработатьСтруктуруВозврата(НоваяСтруктураВозврата);
				Возврат;
				
			Иначе	
				Возврат;	
			КонецЕсли; 
		
		ИначеЕсли СтруктураВозврата.СтрокаВозврата = "Открыть обработку" Тогда
			ОткрытьОбработку = Истина;
		ИначеЕсли СтруктураВозврата.СтрокаВозврата = "Сформированы документы" Тогда
			ОткрытьДокументы = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если ОткрытьОбработку Тогда
		Предупреждение("Обработка формирования налоговых накладных в управляемом режиме пока не реализована!");
	КонецЕсли; 
	
	Если ОткрытьДокументы Тогда
		ОткрытьДокументы(СтруктураВозврата);
	КонецЕсли;	

КонецПроцедуры // ОбработатьСтруктуруВозврата()

&НаСервере
Функция СформироватьЧастичнуюОтгрузку(СтруктураВозврата)
	
	ОбработкаФормированияНН	= ПолучитьИзВременногоХранилища(СтруктураВозврата.АдресВременногоХранилища[0]);
	СтруктураОтбора	= ПолучитьИзВременногоХранилища(СтруктураВозврата.АдресВременногоХранилища[1]);
	ТаблицаЧастичнойОтгрузки = ПолучитьИзВременногоХранилища(СтруктураВозврата.АдресВременногоХранилища[2]);
	
	ОбработкаФормированияНН.ОткрыватьДокументы = Ложь;
	ОбработкаФормированияНН.ОткрытиеИзУФ = Истина;
	
	ОбработкаФормированияНН.СформироватьНалоговыеДокументы(УникальныйИдентификатор, ТаблицаЧастичнойОтгрузки);
	
	НоваяСтруктураВозврата = Новый Структура("Ошибка, СтрокаВозврата, АдресВременногоХранилища, ВариантыОтветов");
	
	НоваяСтруктураВозврата.Ошибка = Ложь;
	НоваяСтруктураВозврата.СтрокаВозврата = "Сформированы документы";
	НоваяСтруктураВозврата.АдресВременногоХранилища = ОбработкаФормированияНН.АдресВременногоХранилища;
	НоваяСтруктураВозврата.ВариантыОтветов = "";
	
	Возврат НоваяСтруктураВозврата;
	
КонецФункции // СформироватьЧастичнуюОтгрузку()


// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ ДАННЫХ ИЗ НАСТРОЕК

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ДобавитьДополнительныеДанныеВНастройку(Объект, Настройки, Документы.НалоговаяНакладная.СтруктураДополнительныхДанныхФормы());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектДополнительнымиДанными(Объект, Настройки, Документы.НалоговаяНакладная.СтруктураДополнительныхДанныхФормы());
	Модифицированность = Истина;
	
	// Заполним курс и кратность валюты
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("ВалютаДокумента", Настройки["Объект.ВалютаДокумента"]);
	ДанныеДляЗаполнения.Вставить("Дата",            Объект.Дата);
	ЗаполнитьЗначенияСвойств(Объект, РаботаСДиалогамиСервер.ПолучитьКурсВалюты(ДанныеДляЗаполнения));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияДляЗаполнения);
	УстановитьДоступность();
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ДанныеОбменаССервером = Новый Структура("ДоговорКонтрагента, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ЗначенияДляЗаполнения = ИзменениеДоговораСервер(ДанныеОбменаССервером);
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияДляЗаполнения);
	ДоговорПоЗаказам = ЗначенияДляЗаполнения.ДоговорПоЗаказам;
	ДоговорПоСчетам = ЗначенияДляЗаполнения.ДоговорПоСчетам;
	УстановитьДоступность();
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Объект.Номер) Тогда
		ПрефиксацияОбъектовСобытия.ОчиститьНомерОбъекта(Объект.Номер, Объект.Организация);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНДСПриИзменении(Элемент)
	
	УстановитьВидимостьСубконтоКт(Объект.СчетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	УстановитьВидимостьСубконтоДт(Объект.СчетДт);

КонецПроцедуры
    
&НаСервере
Процедура УстановитьВидимостьСубконтоКт(Счет)
	Если ЗначениеЗаполнено(Счет) Тогда
		КоличествоСубконто = 0;
		МассивЗаголовков = Новый Массив;
					
		ПолучитьПараметрыСчета(Объект.СчетНДС, КоличествоСубконто, МассивЗаголовков);
		
		Для ном = 1 По 3 Цикл
			Если ном <= КоличествоСубконто Тогда
				Элементы["СубконтоКт" + ном].Видимость = Истина;
				Элементы["СубконтоКт" + ном].Заголовок = МассивЗаголовков[ном-1];
			Иначе
				Элементы["СубконтоКт" + ном].Видимость = Ложь;
				Элементы["СубконтоКт" + ном].Заголовок = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для ном = 1 По 3 Цикл
			Элементы["СубконтоКт" + ном].Видимость = Ложь;
			Элементы["СубконтоКт" + ном].Заголовок = Ложь;
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСубконтоДт(Счет)
	Если ЗначениеЗаполнено(Счет) Тогда
		КоличествоСубконто = 0;
		МассивЗаголовков = Новый Массив;
			
		ПолучитьПараметрыСчета(Объект.СчетДт, КоличествоСубконто, МассивЗаголовков);
		
		Для ном = 1 По 3 Цикл
			Если ном <= КоличествоСубконто Тогда
				Элементы["СубконтоДт" + ном].Видимость = Истина;
				Элементы["СубконтоДт" + ном].Заголовок = МассивЗаголовков[ном-1];
			Иначе
				Элементы["СубконтоДт" + ном].Видимость = Ложь;
				Элементы["СубконтоДт" + ном].Заголовок = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для ном = 1 По 3 Цикл
			Элементы["СубконтоДт" + ном].Видимость = Ложь;
			Элементы["СубконтоДт" + ном].Заголовок = Ложь;
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыСчета(Счет, Количество, Заголовки)
	
	Количество = Счет.ВидыСубконто.Количество();
	
	индекс = 1;
	Пока индекс <= Счет.ВидыСубконто.Количество() Цикл
		
		Заголовки.Добавить(Счет.ВидыСубконто[индекс - 1].ВидСубконто.Наименование);	
		индекс = индекс + 1;
	КонецЦикла;	
	 	
КонецПроцедуры	

&НаКлиенте
Процедура ПродажаНижеОбычнойЦеныПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры
                         
////////////////////////////////////////////////////////////////////////////////
// ПОВТОРЯЮЩИЕСЯ ДЕЙСТВИЯ ПРИ ИЗМЕНЕНИИ РАЗНЫХ РЕКВИЗИТОВ

// Процедура устанавливает доступность элементов формы
//
&НаКлиенте
Процедура УстановитьДоступность()
	ДоступностьНДС = Объект.УчитыватьНДС;
	Элементы.ТоварыСтавкаНДС.Доступность 	= ДоступностьНДС;
	Элементы.ТоварыСуммаНДС.Доступность 	= ДоступностьНДС;
	Элементы.УслугиСтавкаНДС.Доступность 	= ДоступностьНДС;
	Элементы.УслугиСуммаНДС.Доступность 	= ДоступностьНДС;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента(РасчитатьТолькоСуммуНДС = Ложь)
	НДСВсего = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
	Если РасчитатьТолькоСуммуНДС Тогда
		Возврат;
	КонецЕсли;
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента + НДСВсего;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписиИтоговыеСуммы()
	Элементы.СуммаДокумента.Заголовок = "Всего, " + Объект.ВалютаДокумента;
	Элементы.НДСВсего.Заголовок = "НДС (" + ?(Объект.СуммаВключаетНДС, "в т.ч.", "сверху") + ")";
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ В ШАПКЕ

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения, СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаСервереБезКонтекста
Функция ИзменениеДоговораСервер(ДанныеДляЗаполнения)
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ПриИзмененииЗначенияДоговора(ДанныеДляЗаполнения);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруПараметровДляРасчетаСуммы()
	Возврат Новый Структура("УчитыватьНДС,СуммаВключаетНДС", Объект.УчитыватьНДС, Объект.СуммаВключаетНДС);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ В ТАБЛИЧНОЙ ЧАСТИ

&НаСервереБезКонтекста
Функция ИзменениеНоменклатурыСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеНоменклатуры(ДанныеДляЗаполнения);
	ЗначенияДляЗаполнения.Вставить("СтавкаНДС",			ДанныеДляЗаполнения.Номенклатура.СтавкаНДС);
	Если ДанныеДляЗаполнения.Свойство("ТипЦен") Тогда
		//Добавим сведения о ценах
		ДанныеДляЗаполнения.Вставить("ЕдиницаИзмерения", ЗначенияДляЗаполнения.ЕдиницаИзмерения);
		ДанныеДляЗаполнения.Вставить("СтавкаНДС", ЗначенияДляЗаполнения.СтавкаНДС);
		Цена = ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения);
		ЗначенияДляЗаполнения.Вставить("Цена", Цена);
	КонецЕсли;
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеНоменклатурыКлиент(СтрокаТабличнойЧасти)
	ДанныеОбменаССервером = Новый Структура("Номенклатура, УчитыватьНДС, СуммаВключаетНДС");
	//Сведения, необходимые для расчета цены
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбменаССервером.Вставить("ТипЦен");
		ДанныеОбменаССервером.Вставить("Дата");
		ДанныеОбменаССервером.Вставить("ХарактеристикаНоменклатуры");
		ДанныеОбменаССервером.Вставить("Контрагент");
		ДанныеОбменаССервером.Вставить("ВалютаДокумента");
		ДанныеОбменаССервером.Вставить("КурсВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("КратностьВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("ДоговорКонтрагента");
		ДанныеОбменаССервером.Вставить("УсловиеПродаж");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
	
	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = ИзменениеНоменклатурыСервер(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДанныеОбменаССервером.СведенияЕдиницаИзмеренияМест);
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ДанныеОбменаССервером);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеНоменклатурыУслугиСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = Новый Структура();
	
	// Основные реквизиты
	ЗначенияДляЗаполнения.Вставить("СтавкаНДС",				ДанныеДляЗаполнения.Номенклатура.СтавкаНДС);
	ЗначенияДляЗаполнения.Вставить("НалоговоеНазначение",	НалоговыйУчетПовтИсп.ОпределитьНалоговоеНазначениеУслугПоВидуДеятельностиНДС(НалоговыйУчет.ПолучитьВидДеятельностиНДС(ДанныеДляЗаполнения.Номенклатура.СтавкаНДС)));
	ЗначенияДляЗаполнения.Вставить("НоменклатурнаяГруппа",	ДанныеДляЗаполнения.Номенклатура.НоменклатурнаяГруппаЗатрат);
	ЗначенияДляЗаполнения.Вставить("СтатьяЗатрат",			ДанныеДляЗаполнения.Номенклатура.СтатьяЗатрат);
	ЗначенияДляЗаполнения.Вставить("Содержание",			?(ЗначениеЗаполнено(ДанныеДляЗаполнения.Номенклатура.НаименованиеПолное), ДанныеДляЗаполнения.Номенклатура.НаименованиеПолное, ДанныеДляЗаполнения.Номенклатура.Наименование));
	Если ДанныеДляЗаполнения.Свойство("ТипЦен") Тогда
		//Добавим сведения о ценах
		ДанныеДляЗаполнения.Вставить("СтавкаНДС", ЗначенияДляЗаполнения.СтавкаНДС);
		ДанныеДляЗаполнения.Вставить("ХарактеристикаНоменклатуры", Неопределено);
		ДанныеДляЗаполнения.Вставить("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
		Цена = ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения);
		ЗначенияДляЗаполнения.Вставить("Цена", Цена);
	КонецЕсли;
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьНалоговоеНазначениеНДСПоСтавкеНДС(СтавкаНДС)
    Возврат НалоговыйУчетПовтИсп.ОпределитьНалоговоеНазначениеУслугПоВидуДеятельностиНДС(НалоговыйУчет.ПолучитьВидДеятельностиНДС(СтавкаНДС));
КонецФункции 

&НаКлиенте
Процедура ИзменениеНоменклатурыУслугиКлиент(СтрокаТабличнойЧасти)
	ДанныеОбменаССервером = Новый Структура("Номенклатура, УчитыватьНДС, СуммаВключаетНДС");
	//Сведения, необходимые для расчета цены
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбменаССервером.Вставить("ТипЦен");
		ДанныеОбменаССервером.Вставить("Дата");
		ДанныеОбменаССервером.Вставить("Контрагент");
		ДанныеОбменаССервером.Вставить("ВалютаДокумента");
		ДанныеОбменаССервером.Вставить("КурсВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("КратностьВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("ДоговорКонтрагента");
		ДанныеОбменаССервером.Вставить("УсловиеПродаж");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);


	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = ИзменениеНоменклатурыУслугиСервер(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ДанныеОбменаССервером);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеНоменклатурыТараСервер(ДанныеДляЗаполнения)
	//Заполняем только цену номенклатуры
	ЗначенияДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("СуммаВключаетНДС", Истина);
	ДанныеДляЗаполнения.Вставить("СтавкаНДС", ДанныеДляЗаполнения.Номенклатура.СтавкаНДС);
	ДанныеДляЗаполнения.Вставить("ХарактеристикаНоменклатуры", Неопределено);
	ДанныеДляЗаполнения.Вставить("ЕдиницаИзмерения", ДанныеДляЗаполнения.Номенклатура.ЕдиницаХраненияОстатков);
	Цена = ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения);
	ЗначенияДляЗаполнения.Вставить("Цена", Цена);
	
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаКлиенте
Процедура ИзменениеНоменклатурыТараКлиент(СтрокаТабличнойЧасти)
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбменаССервером = Новый Структура();
		ДанныеОбменаССервером.Вставить("Дата");
		ДанныеОбменаССервером.Вставить("УчитыватьНДС");
		ДанныеОбменаССервером.Вставить("ТипЦен");
		ДанныеОбменаССервером.Вставить("Номенклатура");
		ДанныеОбменаССервером.Вставить("Контрагент");
		ДанныеОбменаССервером.Вставить("ВалютаДокумента");
		ДанныеОбменаССервером.Вставить("КурсВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("КратностьВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("ДоговорКонтрагента");
		ДанныеОбменаССервером.Вставить("УсловиеПродаж");
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
		
		// Получим все необходимые данные на сервере
		ЗначенияДляЗаполнения = ИзменениеНоменклатурыТараСервер(ДанныеОбменаССервером);
		
		// Заполним реквизиты строки
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
		РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеЕдиницыИзмеренияСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеЕдиницыИзмерения(ДанныеДляЗаполнения);
	//Пересчитаем цену с учетом коэффициента
	Если ДанныеДляЗаполнения.Цена <> 0 И ДанныеДляЗаполнения.Коэффициент <> ЗначенияДляЗаполнения.Коэффициент
		И ДанныеДляЗаполнения.Коэффициент <> 0 Тогда
		Цена = ДанныеДляЗаполнения.Цена * ЗначенияДляЗаполнения.Коэффициент / ДанныеДляЗаполнения.Коэффициент;
		ДанныеДляЗаполнения.Вставить("Цена", Цена);
	КонецЕсли;

	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения)
	Цена = Ценообразование.ПолучитьЦенуКонтрагента(ДанныеДляЗаполнения.Номенклатура, 
										ДанныеДляЗаполнения.ХарактеристикаНоменклатуры, 
										ДанныеДляЗаполнения.Контрагент,
										ДанныеДляЗаполнения.ТипЦен, 
										ДанныеДляЗаполнения.Дата, 
										ДанныеДляЗаполнения.ЕдиницаИзмерения,
										ДанныеДляЗаполнения.ВалютаДокумента, 
										ДанныеДляЗаполнения.КурсВзаиморасчетов,
										ДанныеДляЗаполнения.КратностьВзаиморасчетов,
										ДанныеДляЗаполнения.ДоговорКонтрагента,
										ДанныеДляЗаполнения.УсловиеПродаж);

	// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
	Если ЗначениеЗаполнено(Цена) Тогда

		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
										ДанныеДляЗаполнения.ТипЦен.ЦенаВключаетНДС,
										ДанныеДляЗаполнения.УчитыватьНДС, 
										ДанныеДляЗаполнения.СуммаВключаетНДС, 
										Ценообразование.ПолучитьСтавкуНДС(ДанныеДляЗаполнения.СтавкаНДС));
	КонецЕсли;
	Возврат Цена;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ТОВАРЫ" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ИзменениеНоменклатурыКлиент(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	//При изменении характеристики меняются только цены
	//Если тип цен не заполнен, ничего делать не надо
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДанныеОбменаССервером = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, СтавкаНДС, 
								|Дата,Контрагент, ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, 
								|ДоговорКонтрагента, УсловиеПродаж, УчитыватьНДС, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Цена = ОпределитьЦенуНоменклатуры(ДанныеОбменаССервером);
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ДанныеОбменаССервером);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ДанныеОбменаССервером = Новый Структура("ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Коэффициент, Цена");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);

	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = ИзменениеЕдиницыИзмеренияСервер(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);

	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДанныеОбменаССервером.СведенияЕдиницаИзмеренияМест);
	// могла измениться цена в табличной части
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы())

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
				
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	ДействиеПодбор("Товары");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "УСЛУГИ" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ИзменениеНоменклатурыУслугиКлиент(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
	

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
	
	СтрокаТабличнойЧасти.НалоговоеНазначение = ОпределитьНалоговоеНазначениеНДСПоСтавкеНДС(СтрокаТабличнойЧасти.СтавкаНДС);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПодбор(Команда)
	ДействиеПодбор("Услуги");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ВОЗВРАТНАЯ ТАРА" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ИзменениеНоменклатурыТараКлиент(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПодбор(Команда)
	ДействиеПодбор("ВозвратнаяТара");
КонецПроцедуры


&НаСервере
Функция ПроверитьЧастичнуюОтгрузку()
	
	Результат = Ложь;
	Если Объект.ЧастичнаяОтгрузка.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатПроверки = Объект.Товары.Выгрузить();
	УслугиСвернутая = Объект.Услуги.Выгрузить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(УслугиСвернутая, РезультатПроверки);
	
	
	РезультатПроверки.Свернуть("СтавкаНДС, НалоговоеНазначение", "Сумма, СуммаНДС");
	
	тзЧастичнаяОтгрузка = Объект.ЧастичнаяОтгрузка.Выгрузить();
	
	СтруктураПоиска = Новый Структура("СтавкаНДС, НалоговоеНазначение");
	
	Для Каждого СтрокаПроверки Из РезультатПроверки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПроверки);
		НайденныеСтроки = тзЧастичнаяОтгрузка.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			СтрокаПроверки.Сумма    = СтрокаПроверки.Сумма - НайденныеСтроки[0].Сумма;
			Если Объект.СуммаВключаетНДС Тогда
				СтрокаПроверки.Сумма = СтрокаПроверки.Сумма - НайденныеСтроки[0].СуммаНДС;
			КонецЕсли; 
			СтрокаПроверки.СуммаНДС = СтрокаПроверки.СуммаНДС - НайденныеСтроки[0].СуммаНДС;
		КонецЕсли; 
	КонецЦикла; 
	
	СообщениеПользователю = Новый СообщениеПользователю;
	
	Для Каждого СтрокаПроверки Из РезультатПроверки Цикл
		Если СтрокаПроверки.Сумма <> 0 ИЛИ СтрокаПроверки.СуммаНДС <> 0 Тогда
			СообщениеПользователю.Текст = "Не совпадают сумма и(или) сумма НДС в документе и налоговых обязательств для ставки НДС " + СтрокаПроверки.СтавкаНДС + ", налоговое назначение " + СтрокаПроверки.НалоговоеНазначение;
			СообщениеПользователю.Сообщить();
			СообщениеПользователю.Текст = "Разница составляет - сумма " + СтрокаПроверки.Сумма + ", сумма НДС " + СтрокаПроверки.СуммаНДС;
			СообщениеПользователю.Сообщить();
			Результат = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ПроверитьЧастичнуюОтгрузку()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		РезПроверки = ПроверитьЧастичнуюОтгрузку();
		Если РезПроверки = Истина Тогда
			ТекстВопроса = "Налоговая накладная выписана на сумму, не совпадающую с суммой налоговых обязательств. Завершить редактирование и сохранить документ?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры
