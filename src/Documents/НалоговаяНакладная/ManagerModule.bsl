// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст ошибки)
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в которой был выведен объект)
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НалоговаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НалоговаяНакладная", "Налоговая накладная", ПечатьДокумента(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
КонецПроцедуры

// Функция формирует табличный документ с регламентированной печатной формой 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Ложь) Экспорт	
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Дата,
	|	ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены
	|ИЗ
	|	Документ.НалоговаяНакладная КАК НалоговаяНакладная
	|
	|ГДЕ
	|	НалоговаяНакладная.Ссылка = &ТекущийДокумент";
	
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Если ЗначениеЗаполнено(Шапка.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) И НЕ ТолькоФормироватьСтруктуруПоказателейПечатнойФормы Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат ПечатьДокументаНалоговыйКодекс(Ссылка, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы, ОбъектыПечати);
		
	КонецЦикла; 	
	
КонецФункции  //ПечатьДокумента()

// Функция формирует табличный документ с регламентированной печатной формой 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокументаНалоговыйКодекс(НалоговаяНакладнаяСсылка, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Ложь, ОбъектыПечати = Неопределено) Экспорт	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", НалоговаяНакладнаяСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	ВключенаВЕдиныйРеестрНалоговыхНакладных,
	|	ТипПричиныНевыдачиПокупателю,
	|	СпецРежимНалогообложения,
	|	ДоговорКонтрагента.Дата  КАК ДатаДоговора,
	|	ДоговорКонтрагента.Номер КАК НомерДоговора,
	|	Дата,
	|	Контрагент,
	|	Организация,
	|	ЛьготаНДС,
	|	УсловиеПродажи,
	|	ВидДоговора,
	|	ФормаРасчетов,
	|	ВидОперации,
	|	ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены,
	|	КтоВыписалНалоговуюНакладную.Представление КАК КтоВыписалНалоговуюНакладную,
	|	ПродажаНижеОбычнойЦены,
	|	НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены,
	|	ВалютаДокумента
	|ИЗ
	|	Документ.НалоговаяНакладная КАК НалоговаяНакладная
	|
	|ГДЕ
	|	НалоговаяНакладная.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
	
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5_");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G9");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G10");
		
		СтруктураПоказателей.Вставить("НалоговыйДокументЗЦ", 	Новый Структура());	// данные табличной части по накладной по "обычным ценам"
		СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R",  Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокументЗЦ.R = СтруктураПоказателей.НалоговыйДокумент.R.Скопировать();
		
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	
	СимволДляПустыхПоказателей = "X";
	ВыводитьНомерДоговораБезКлеточек = Ложь;
	УчетнаяПолитика	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Шапка.Дата, Шапка.Организация);
	УчетнаяПолитикаНеЗадана = (УчетнаяПолитика = Неопределено);
	Если НЕ УчетнаяПолитикаНеЗадана тогда
		СимволДляПустыхПоказателей = УчетнаяПолитика.СимволПустыхПоказателейВНалоговойНакладной; 
		ВыводитьНомерДоговораБезКлеточек = УчетнаяПолитика.ВыводитьНомерДоговораБезКлеточек; 
	КонецЕсли;
	
	// Подготовим таблицы
	Отказ = Ложь;
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ,, Шапка.Организация, НалоговаяНакладнаяСсылка); 
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НалоговаяНакладная_НалоговаяНакладная";

	Макет = ПолучитьОбщийМакет("НалоговаяНакладная2011");
	
	
	
	ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Шапка.ВидОперации, НалоговаяНакладнаяСсылка);
	
	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	  , ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	  , ТаблицаНоменклатуры);	
	
	// свернем подобные строки
	ТаблицаНоменклатуры.Свернуть(
		"ДатаОтгрузкиОплаты, Номенклатура, Характеристика, ТекстДляПечатиВКолонкеКоличество, ЕдиницаИзмерения, ЦенаБезНДСРегл, СтавкаНДС", 
		"Количество, СуммаБезНДСРегл, СуммаНДСРегл, СуммаБезНДСПревышенияРегл, СуммаНДСПревышенияРегл"
	);   	
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаБезНДСРегл.Имя 				 = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.СуммаБезНДСРегл.Имя 			 = "Сумма";
	ТаблицаНоменклатуры.Колонки.СуммаНДСРегл.Имя				 = "СуммаНДС";
	
	// Для печати второго экземпляра накладной понадобится исходная таблица, которая в процессе печати первого экземпляра будет свернута
	ТаблицаНоменклатурыКопия = ТаблицаНоменклатуры.Скопировать();
	
	Для Страница = 1 По 2 Цикл
	
		// Выводим область оригинал/копия
		Если Страница = 1 Тогда
			
			ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
			
			ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных = Шапка.ВключенаВЕдиныйРеестрНалоговыхНакладных;
			
			Если Шапка.ТипПричиныНевыдачиПокупателю = 0  Тогда
				
				ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
				
			ИначеЕсли Шапка.ТипПричиныНевыдачиПокупателю = 1  Тогда	
				
				// т.к. причина лишь превышение над обычной ценой, то первый экземпляр таки должен быть выдан покупателю
				ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
				
			Иначе
				
				// накладная остается у поставщика
				ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца = "Х";
				ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
				ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(Шапка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
			
		ИначеЕсли Страница = 2 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПерваяКопия");
			ТабДокумент.Вывести(ОбластьМакета);
			ТаблицаНоменклатуры = ТаблицаНоменклатурыКопия.Скопировать();
		КонецЕсли;
		
		// Выводим отступ
		ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		//Дата
		ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
		Для Инд = 1 По 8 Цикл
			ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
		КонецЦикла; 
		
		// Номер
		ТекНомер = Прав("       " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(НалоговаяНакладнаяСсылка)), 7);
		Для Инд = 1 По 7 Цикл                                                                 
			ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
		КонецЦикла; 
		
		// филиал/спецрежим
		ТекНомерФилиал = "";
		Если ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения) Тогда
			ТекНомерФилиал	= "" + Шапка.СпецРежимНалогообложения + ТекНомерФилиал; 
		КонецЕсли;
		Для Инд = 1 По 4 Цикл                                                                 
			ОбластьМакета.Параметры["НомерФилиал_"+Инд]    = Сред(ТекНомерФилиал, Инд, 1);
		КонецЦикла; 


		Если  Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
			// налоговые реквизиты не указыватюся
			СведенияОПродавце   			= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата, Истина, Неопределено, "uk");
			ИННОрганизации					= "0";
			НомерСвидетельстваОрганизации	= "0"	
		Иначе	
			СведенияОПродавце   			= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, Истина, Неопределено, "uk");
			ИННОрганизации					= ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
			НомерСвидетельстваОрганизации 	= ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПродавце,    "НомерСвидетельства,",Ложь);
		КонецЕсли;
		
		ОбластьМакета.Параметры.НазваниеОрганизации           = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
		ОбластьМакета.Параметры.АдресОрганизации              = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПродавце,    "ЮридическийАдресПочтовый,",  Ложь);
		
		// телефон
		ТекТелефоныОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПродавце,    "Телефоны,",          Ложь);
		ТекТелефоныОрганизации = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
		ДлинаСтрокиТелефонов = СтрДлина(ТекТелефоныОрганизации);

		Для НомерСимвола = 1 По ДлинаСтрокиТелефонов ЦИкл
			ОбластьМакета.Параметры["ТелефоныОрганизации_"+НомерСимвола] = Сред(ТекТелефоныОрганизации, НомерСимвола, 1);
		КонецЦикла;
		
		ИННОрганизации = Прав("            " + ИННОрганизации, 12);
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
		КонецЦикла; 
		НомерСвидетельстваОрганизации = Прав("            " + НомерСвидетельстваОрганизации, 10);
		Для Инд = 1 По 10 Цикл
			ОбластьМакета.Параметры["НомерСвидетельстваОрганизации_"+Инд] = Сред(НомерСвидетельстваОрганизации, Инд, 1);
		КонецЦикла; 
		
		Если  Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
		  ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС 
		  ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
			// в этом случае контрагентом выступает организация
			СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, Истина, Неопределено, "uk");
		Иначе
			СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата, Истина, Неопределено, "uk");
		КонецЕсли; 
		
		ОбластьМакета.Параметры.НазваниеКонтрагента           = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		ОбластьМакета.Параметры.АдресКонтрагента              = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе,    "ЮридическийАдресПочтовый,",  Ложь);
		
		// телефон
		ТекТелефоныКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
		ТекТелефоныКонтрагента = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		ДлинаСтрокиТелефонов = СтрДлина(ТекТелефоныКонтрагента);

		Для НомерСимвола = 1 По ДлинаСтрокиТелефонов ЦИкл
			ОбластьМакета.Параметры["ТелефоныКонтрагента_"+НомерСимвола] = Сред(ТекТелефоныКонтрагента, НомерСимвола, 1);
		КонецЦикла;

		НомерСвидетельстваКонтрагента                         = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе,  "НомерСвидетельства,",Ложь);
		Если    Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
   			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС 
			ИЛИ НЕ ЗначениеЗаполнено(НомерСвидетельстваКонтрагента)
			ИЛИ Найти("0123456789",Лев(СокрЛ(НомерСвидетельстваКонтрагента),1)) = 0 Тогда
			НомерСвидетельстваКонтрагента = "0";
		КонецЕсли; 
		НомерСвидетельстваКонтрагента = Прав("            " + НомерСвидетельстваКонтрагента, 10);
		Для Инд = 1 По 10 Цикл
			ОбластьМакета.Параметры["НомерСвидетельстваКонтрагента_"+Инд] = Сред(НомерСвидетельстваКонтрагента, Инд, 1);
		КонецЦикла; 

		ИННКонтрагента                                        = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН,"               ,Ложь);
		Если    Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
   			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС 
			ИЛИ НЕ ЗначениеЗаполнено(ИННКонтрагента)
			ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
			ИННКонтрагента = "0";
		КонецЕсли; 
		ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
		Для Инд = 1 По 12 Цикл
			ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
		КонецЦикла; 
		
		ТекНомерДоговора = СокрЛП("" + Шапка.НомерДоговора);
		Если ЗначениеЗаполнено(ТекНомерДоговора) Тогда
			Для Инд = 1 По 6 Цикл
				ОбластьМакета.Параметры["НомерДоговора_"+Инд]    = Сред(ТекНомерДоговора, Инд, 1);
			КонецЦикла; 
		КонецЕсли;
		
		Если ВыводитьНомерДоговораБезКлеточек = Истина Тогда
			ОбластьНомера = ОбластьМакета.Область("НомерДоговора");	
		    ОбластьНомера.Объединить();
			ОбластьМакета.Параметры.НомерДоговора_1 = ТекНомерДоговора;
		КонецЕсли;
		
		
		ТекДатаДоговора = Шапка.ДатаДоговора;
		Если ЗначениеЗаполнено(ТекДатаДоговора) Тогда
			ТекДатаДоговора = Формат(ТекДатаДоговора,"ДФ=ddMMyyyy");
			Для Инд = 1 По 8 Цикл
				ОбластьМакета.Параметры["ДатаДоговора_"+Инд]    = Сред(ТекДатаДоговора, Инд, 1);
			КонецЦикла; 
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG",	ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",	Формат(ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных, "БЛ=; БИ=Х"));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	""+ОбластьМакетаЗаголовок.Параметры.ТипПричины1+ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HCOPY",	"");
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	Шапка.Дата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	Лев(ТекНомерФилиал, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	Сред(ТекНомерФилиал, 2,3));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	ОбластьМакета.Параметры.НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	ОбластьМакета.Параметры.НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNSPDVSEL",НомерСвидетельстваОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNSPDVBUY",НомерСвидетельстваКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCSEL",	ОбластьМакета.Параметры.АдресОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCBUY",	ОбластьМакета.Параметры.АдресКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELSEL",	ТекТелефоныОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELBUY",	ТекТелефоныКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G1S",	ОбластьМакета.Параметры.ВидДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G2D",	Шапка.ДатаДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G3S",	ТекНомерДоговора);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G1S",	ОбластьМакета.Параметры.ФормаРасчетов);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G1S",	Шапка.КтоВыписалНалоговуюНакладную);
			Если    Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации
			    ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	Шапка.ЛьготаНДС);	
			Иначе
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	"");	
			КонецЕсли;

			Если Шапка.ПродажаНижеОбычнойЦены Тогда
				
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HORIG",		СтруктураПоказателей.НалоговыйДокумент.HORIG);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HORIG1",		СтруктураПоказателей.НалоговыйДокумент.HORIG1);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HERPN",		СтруктураПоказателей.НалоговыйДокумент.HERPN);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HTYPR",		1);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HCOPY",		СтруктураПоказателей.НалоговыйДокумент.HCOPY);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HFILL",		СтруктураПоказателей.НалоговыйДокумент.HFILL);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNUM",		СтруктураПоказателей.НалоговыйДокумент.HNUM);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNUM1",		СтруктураПоказателей.НалоговыйДокумент.HNUM1);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNUM2",		СтруктураПоказателей.НалоговыйДокумент.HNUM2);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNAMESEL",	СтруктураПоказателей.НалоговыйДокумент.HNAMESEL);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNAMEBUY",	СтруктураПоказателей.НалоговыйДокумент.HNAMEBUY);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HKSEL",		СтруктураПоказателей.НалоговыйДокумент.HKSEL);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HKBUY",		СтруктураПоказателей.НалоговыйДокумент.HKBUY);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNSPDVSEL",	СтруктураПоказателей.НалоговыйДокумент.HNSPDVSEL);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNSPDVBUY",	СтруктураПоказателей.НалоговыйДокумент.HNSPDVBUY);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HLOCSEL",	СтруктураПоказателей.НалоговыйДокумент.HLOCSEL);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HLOCBUY",	СтруктураПоказателей.НалоговыйДокумент.HLOCBUY);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HTELSEL",	СтруктураПоказателей.НалоговыйДокумент.HTELSEL);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HTELBUY",	СтруктураПоказателей.НалоговыйДокумент.HTELBUY);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("H01G1S",		СтруктураПоказателей.НалоговыйДокумент.H01G1S);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("H01G2D",		СтруктураПоказателей.НалоговыйДокумент.H01G2D);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("H01G3S",		СтруктураПоказателей.НалоговыйДокумент.H01G3S);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("H02G1S",		СтруктураПоказателей.НалоговыйДокумент.H02G1S);
                СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("H10G1S",		СтруктураПоказателей.НалоговыйДокумент.H10G1S);
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R003G10S",	СтруктураПоказателей.НалоговыйДокумент.R003G10S);
			
			КонецЕсли;
			
		КонецЕсли;
				
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("РазделI");
		ЭтоПерваяСтрока = Истина;
		// Выведем на печать все строки таблицы в раздел I
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			
			Если ЭтоПерваяСтрока Тогда	
				// в первой строке раздела укажем номер раздела
				ОбластьМакета.Параметры.НомерРаздела = "I";
				ЭтоПерваяСтрока = Ложь;
			Иначе
				ОбластьМакета.Параметры.НомерРаздела = "";
			КонецЕсли;	
			
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество) Тогда
				ОбластьМакета.Параметры.Количество = СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество;
			КонецЕсли;
			
			// дата отгрузки/оплаты
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОтгрузкиОплаты) Тогда
				// укажем дату выписки накладной
				ОбластьМакета.Параметры.ДатаОтгрузкиОплаты = Шапка.Дата;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И Страница = 1 Тогда
				Сообщить("В одной из строк не заполнено наименование номенклатуры - проверьте заполнение документа!", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			// номенклатура с учетом характеристики
			ОбластьМакета.Параметры.Номенклатура = "" + СтрокаТаблицы.Номенклатура + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), "", "(" + СтрокаТаблицы.Характеристика +")");
			
			ОбластьМакета.Параметры.Сумма20 	= СимволДляПустыхПоказателей;
			ОбластьМакета.Параметры.Сумма0Укр 	= СимволДляПустыхПоказателей;
			ОбластьМакета.Параметры.Сумма0Эксп	= СимволДляПустыхПоказателей;
			ОбластьМакета.Параметры.СуммаБезНДС = СимволДляПустыхПоказателей;
			
			// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
			Колонка = "Сумма" + ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, Шапка.ВалютаДокумента);
			ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ТабДокумент.Вывести(ОбластьМакета);
			
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
				
				СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
				СтрокаСтруктуры.G2D = ОбластьМакета.Параметры.ДатаОтгрузкиОплаты;
				СтрокаСтруктуры.G3S = ОбластьМакета.Параметры.Номенклатура;
				СтрокаСтруктуры.G4S = ОбластьМакета.Параметры.ЕдиницаИзмерения;
				СтрокаСтруктуры.G5_ = ОбластьМакета.Параметры.Количество;
				СтрокаСтруктуры.G5  = ?(ЗначениеЗаполнено(СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество),0,ОбластьМакета.Параметры.Количество);
				СтрокаСтруктуры.G5S = ?(ЗначениеЗаполнено(СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество),СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество,"_");
				СтрокаСтруктуры.G6  = ОбластьМакета.Параметры.ЦенаБезНДС;
				
				КолонкаДляСуммы = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, Шапка.ВалютаДокумента);
				Если КолонкаДляСуммы = "20" Тогда
					СтрокаСтруктуры.G7  = СтрокаТаблицы.Сумма;	
				ИначеЕсли КолонкаДляСуммы = "0Укр" Тогда
					СтрокаСтруктуры.G8  = СтрокаТаблицы.Сумма;	
				ИначеЕсли КолонкаДляСуммы = "0Эксп" Тогда
					СтрокаСтруктуры.G9  = СтрокаТаблицы.Сумма;	
				ИначеЕсли КолонкаДляСуммы = "БезНДС" Тогда
					СтрокаСтруктуры.G10 = СтрокаТаблицы.Сумма;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим итог по I разделу
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогРазделI");
		ОбластьМакета.Параметры.Сумма20 	= СимволДляПустыхПоказателей;
		ОбластьМакета.Параметры.Сумма0Укр 	= СимволДляПустыхПоказателей;
		ОбластьМакета.Параметры.Сумма0Эксп	= СимволДляПустыхПоказателей;
		ОбластьМакета.Параметры.СуммаБезНДС	= СимволДляПустыхПоказателей;
		
		Сумма1разд = 0;
		
		// Получим итоговые суммы по товарам
		ТаблицаНоменклатуры.Свернуть("СтавкаНДС", " Сумма, СуммаНДС");
		
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			СуффиксКолонки = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, Шапка.ВалютаДокумента);
			
			Сумма = СтрокаТаблицы.Сумма; 
			
			Колонка = "Сумма"; 
			Сумма1разд = Сумма1разд + Сумма;
			
			ОбластьМакета.Параметры[Колонка + СуффиксКолонки] = ОбщегоНазначения.ФорматСумм(Сумма, ,"0,00");
						
		КонецЦикла;	
		
		// колонка 11 по товарам (раздел I)
		ОбластьМакета.Параметры.Сумма1разд = ОбщегоНазначения.ФорматСумм(Сумма1разд, ,"0,00");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим раздел II (тара)
		ОбластьМакета = Макет.ПолучитьОбласть("ВозврТара");
		ТаблицаПоТаре.Свернуть("", "СуммаСНДСРегл");
		
		СуммаВозвратнойТары = 0;
		Для каждого СтрокаТаблицы из ТаблицаПоТаре Цикл
			//В таблице не более одной строки
			СуммаВозвратнойТары = СтрокаТаблицы.СуммаСНДСРегл;
		КонецЦикла;
		
		ОбластьМакета.Параметры.ВозвТара = ОбщегоНазначения.ФорматСумм(СуммаВозвратнойТары, ,"0,00");
		
		ТабДокумент.Вывести(ОбластьМакета);		
		
		Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G11",	СуммаВозвратнойТары);
			
		КонецЕсли;
		
		
		// Выводим разделы III - IV (итоги)
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		
		ИтогНДС = 0;
		Всего = СуммаВозвратнойТары;
		
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			
			СуффиксКолонки = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, Шапка.ВалютаДокумента);
					
			// Итоги
			ОбластьМакета.Параметры["ИтогНДС" 		  + СуффиксКолонки] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			Если СуффиксКолонки = "БезНДС" Тогда
				// п.10 Порядка заполнения налоговой накладной устанавливает особые правила заполнения этой ячейки:
				ОбластьМакета.Параметры["ИтогНДС" 	  + СуффиксКолонки] = "Без ПДВ";
			ИначеЕсли СуффиксКолонки = "0Укр"
				  ИЛИ СуффиксКолонки = "0Эксп" Тогда
				// п.11 Порядка заполнения налоговой накладной устанавливает особые правила заполнения этой ячейки:
				ОбластьМакета.Параметры["ИтогНДС0Укр"]  = "0";
				ОбластьМакета.Параметры["ИтогНДС0Эксп"] = "0";
			КонецЕсли;
			ОбластьМакета.Параметры["ИтогСуммаСНДС"   + СуффиксКолонки] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
				
				Если СуффиксКолонки = "20" Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7",	СтрокаТаблицы.СуммаНДС);
				ИначеЕсли СуффиксКолонки = "0Укр" Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G8",	СтрокаТаблицы.СуммаНДС);
				ИначеЕсли СуффиксКолонки = "0Эксп" Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G9",	СтрокаТаблицы.СуммаНДС);
				ИначеЕсли СуффиксКолонки = "БезНДС" Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",	СтрокаТаблицы.СуммаНДС);
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЦикла;
		
		// Итоги в 11 колонке
		ТаблицаНоменклатуры.Свернуть("","Сумма,СуммаНДС");
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			//в таблице не более одной строки
			ИтогНДС 		= СтрокаТаблицы.СуммаНДС;
			Всего 			= Всего + СтрокаТаблицы.Сумма + ИтогНДС;
		КонецЦикла;
		ОбластьМакета.Параметры.ИтогНДС			= ОбщегоНазначения.ФорматСумм(ИтогНДС, ,"0,00");
		ОбластьМакета.Параметры.Всего 			= ОбщегоНазначения.ФорматСумм(Всего, ,"0,00");
		
		ТабДокумент.Вывести(ОбластьМакета);	
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = Шапка.КтоВыписалНалоговуюНакладную;
		
		Если    Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации
		    ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
			ОбластьМакета.Параметры.ЛьготаНДС = Шапка.ЛьготаНДС;	
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если Страница <> 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла; 

	
	Если Шапка.ПродажаНижеОбычнойЦены Тогда
		
		ТаблицаНоменклатуры = ТаблицаНоменклатурыКопия.Скопировать();
		
		//удалим лишние колонки
		ТаблицаНоменклатуры.Колонки.Удалить(ТаблицаНоменклатуры.Колонки.ЦенаБезНДС);
		ТаблицаНоменклатуры.Колонки.Удалить(ТаблицаНоменклатуры.Колонки.Сумма);
		ТаблицаНоменклатуры.Колонки.Удалить(ТаблицаНоменклатуры.Колонки.СуммаНДС);
		
		// переименуем колонки
		ТаблицаНоменклатуры.Колонки.СуммаБезНДСПревышенияРегл.Имя 	 = "Сумма";
		ТаблицаНоменклатуры.Колонки.СуммаНДСПревышенияРегл.Имя		 = "СуммаНДС";
		
		// Для печати второго экземпляра накладной понадобится исходная таблица, которая в процессе печати первого экземпляра будет свернута
		ТаблицаНоменклатурыКопия = ТаблицаНоменклатуры.Скопировать();
	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	    Для Страница = 1 По 2 Цикл
		
			// Выводим область оригинал/копия
			Если Страница = 1 Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Оригинал");
				
				ОбластьМакета.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных = Шапка.ВключенаВЕдиныйРеестрНалоговыхНакладных;
				
				// накладная остается у поставщика
				ОбластьМакета.Параметры.ОстаетсяУПродавца = "Х";
				ОбластьМакета.Параметры.ТипПричины1 = "0";
				ОбластьМакета.Параметры.ТипПричины2 = "1";
				
				ТабДокумент.Вывести(ОбластьМакета);
				
			ИначеЕсли Страница = 2 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПерваяКопия");
				ТабДокумент.Вывести(ОбластьМакета);
				ТаблицаНоменклатуры = ТаблицаНоменклатурыКопия.Скопировать();
			КонецЕсли;

			// Выводим отступ
			ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Выводим заголовок накладной
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			
			//Дата
			ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
			Для Инд = 1 По 8 Цикл
				ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
			КонецЦикла; 
			
			// Номер
			Если ЗначениеЗаполнено(Шапка.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
			    ТекНомер = Прав("       " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены)), 7);
			Иначе	
				ТекНомер = Прав("       " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(НалоговаяНакладнаяСсылка)), 7);
			КонецЕсли;
			
			Для Инд = 1 По 7 Цикл                                                                 
				ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
			КонецЦикла; 
			
			// филиал/спецрежим
			ТекНомерФилиал = "";
			Если ЗначениеЗаполнено(Шапка.СпецРежимНалогообложения) Тогда
				ТекНомерФилиал	= "" + Шапка.СпецРежимНалогообложения + ТекНомерФилиал; 
			КонецЕсли;
			Для Инд = 1 По 4 Цикл                                                                 
				ОбластьМакета.Параметры["НомерФилиал_"+Инд]    = Сред(ТекНомерФилиал, Инд, 1);
			КонецЦикла; 
					
			Если  Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
				// налоговые реквизиты не указыватюся
				СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
				ИННОрганизации					= "0";
				НомерСвидетельстваОрганизации	= "0"	
			Иначе	
				СведенияОПродавце   		    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
				ИННОрганизации					= ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
				НомерСвидетельстваОрганизации 	= ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПродавце,    "НомерСвидетельства,",Ложь);
			КонецЕсли;
			ОбластьМакета.Параметры.НазваниеОрганизации           = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПродавце,    "ПолноеНаименование,",Ложь);
			ОбластьМакета.Параметры.АдресОрганизации              = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПродавце,    "ЮридическийАдресПочтовый,",  Ложь);
			
			// телефон
			ТекТелефоныОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПродавце,    "Телефоны,",          Ложь);
			ТекТелефоныОрганизации = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
			ДлинаСтрокиТелефонов = СтрДлина(ТекТелефоныОрганизации);

			Для НомерСимвола = 1 По ДлинаСтрокиТелефонов ЦИкл
				ОбластьМакета.Параметры["ТелефоныОрганизации_"+НомерСимвола] = Сред(ТекТелефоныОрганизации, НомерСимвола, 1);
			КонецЦикла;
			ИННОрганизации = Прав("            " + ИННОрганизации, 12);
			Для Инд = 1 По 12 Цикл
				ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
			КонецЦикла; 
			НомерСвидетельстваОрганизации = Прав("            " + НомерСвидетельстваОрганизации, 10);
			Для Инд = 1 По 10 Цикл
				ОбластьМакета.Параметры["НомерСвидетельстваОрганизации_"+Инд] = Сред(НомерСвидетельстваОрганизации, Инд, 1);
			КонецЦикла; 
			
			Если    Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
	   			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС 
				ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
				// в этом случае контрагентом выступает организация
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
			Иначе
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
			КонецЕсли; 
			
			ОбластьМакета.Параметры.НазваниеКонтрагента           = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
			ОбластьМакета.Параметры.АдресКонтрагента              = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе,    "ЮридическийАдресПочтовый,",  Ложь);
			
			// телефон
			ТекТелефоныКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
			ТекТелефоныКонтрагента = ФормированиеПечатныхФормСервер.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
			ДлинаСтрокиТелефонов = СтрДлина(ТекТелефоныКонтрагента);

			Для НомерСимвола = 1 По ДлинаСтрокиТелефонов ЦИкл
				ОбластьМакета.Параметры["ТелефоныКонтрагента_"+НомерСимвола] = Сред(ТекТелефоныКонтрагента, НомерСимвола, 1);
			КонецЦикла;
			
			НомерСвидетельстваКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе,  "НомерСвидетельства,",Ложь);
			Если    Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
				ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС 
	   			ИЛИ НЕ ЗначениеЗаполнено(НомерСвидетельстваКонтрагента)
			    ИЛИ Найти("0123456789",Лев(СокрЛ(НомерСвидетельстваКонтрагента),1)) = 0 Тогда
				НомерСвидетельстваКонтрагента = "0";
			КонецЕсли; 
			НомерСвидетельстваКонтрагента = Прав("            " + НомерСвидетельстваКонтрагента, 10);
			Для Инд = 1 По 10 Цикл
				ОбластьМакета.Параметры["НомерСвидетельстваКонтрагента_"+Инд] = Сред(НомерСвидетельстваКонтрагента, Инд, 1);
			КонецЦикла; 

			ИННКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
			Если    Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
				ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС 
	   			ИЛИ НЕ ЗначениеЗаполнено(ИННКонтрагента)
			    ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
				ИННКонтрагента = "0";
			КонецЕсли; 
			ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
			Для Инд = 1 По 12 Цикл
				ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
			КонецЦикла; 
			
			ТекНомерДоговора = СокрЛП("" + Шапка.НомерДоговора);
			Если ЗначениеЗаполнено(ТекНомерДоговора) Тогда
				Для Инд = 1 По 6 Цикл
					ОбластьМакета.Параметры["НомерДоговора_"+Инд]    = Сред(ТекНомерДоговора, Инд, 1);
				КонецЦикла; 
			КонецЕсли;
			
			Если ВыводитьНомерДоговораБезКлеточек = Истина Тогда
				ОбластьНомера = ОбластьМакета.Область("НомерДоговора");	
			    ОбластьНомера.Объединить();
				ОбластьМакета.Параметры.НомерДоговора_1 = ТекНомерДоговора;
			КонецЕсли;
			
			ТекДатаДоговора = Шапка.ДатаДоговора;
			Если ЗначениеЗаполнено(ТекДатаДоговора) Тогда
				ТекДатаДоговора = Формат(ТекДатаДоговора,"ДФ=ddMMyyyy");
				Для Инд = 1 По 8 Цикл
					ОбластьМакета.Параметры["ДатаДоговора_"+Инд]    = Сред(ТекДатаДоговора, Инд, 1);
				КонецЦикла; 
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьМакета);

			// Выводим шапку накладной
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ТабДокумент.Вывести(ОбластьМакета);

			// Выводим табличную часть
			ОбластьМакета = Макет.ПолучитьОбласть("РазделI");
			ЭтоПерваяСтрока = Истина;
			// Выведем на печать все строки таблицы в раздел I
			Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
				
				Если СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.СуммаНДС = 0 Тогда
					Продолжить
				КонецЕсли;
				
				Если ЭтоПерваяСтрока Тогда	
					// в первой строке раздела укажем номер раздела
					ОбластьМакета.Параметры.НомерРаздела = "I";
					ЭтоПерваяСтрока = Ложь;
				Иначе
					ОбластьМакета.Параметры.НомерРаздела = "";
				КонецЕсли;	
				
				ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество) Тогда
					ОбластьМакета.Параметры.Количество = СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество;
				КонецЕсли;
			
				// дата отгрузки/оплаты
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОтгрузкиОплаты) Тогда
					// укажем дату выписки накладной
					ОбластьМакета.Параметры.ДатаОтгрузкиОплаты = Шапка.Дата;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					Сообщить("В одной из строк не заполнено наименование номенклатуры - проверьте заполнение документа!", СтатусСообщения.Важное);
				КонецЕсли;
				
				// номенклатура с учетом характеристики и текста дополнения
				ОбластьМакета.Параметры.Номенклатура = "" + СтрокаТаблицы.Номенклатура + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), "", "(" + СтрокаТаблицы.Характеристика +")")
					+ " "+ Шапка.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены;
				
				
				ОбластьМакета.Параметры.Сумма20 	= СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.Сумма0Укр 	= СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.Сумма0Эксп	= СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.СуммаБезНДС = СимволДляПустыхПоказателей;
				
				// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
				Колонка = "Сумма"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, Шапка.ВалютаДокумента);
				ОбластьМакета.Параметры[Колонка] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
				
				ТабДокумент.Вывести(ОбластьМакета);
				
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
					
					СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокументЗЦ.R.Добавить();
					СтрокаСтруктуры.G2D = ОбластьМакета.Параметры.ДатаОтгрузкиОплаты;
					СтрокаСтруктуры.G3S = ОбластьМакета.Параметры.Номенклатура;
					СтрокаСтруктуры.G4S = ОбластьМакета.Параметры.ЕдиницаИзмерения;
					СтрокаСтруктуры.G5_ = ОбластьМакета.Параметры.Количество;
					СтрокаСтруктуры.G5  = ?(ЗначениеЗаполнено(СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество),0,ОбластьМакета.Параметры.Количество);
					СтрокаСтруктуры.G5S = ?(ЗначениеЗаполнено(СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество),СтрокаТаблицы.ТекстДляПечатиВКолонкеКоличество,"");
					СтрокаСтруктуры.G6  = ОбластьМакета.Параметры.ЦенаБезНДС;
					
					КолонкаДляСуммы = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, Шапка.ВалютаДокумента);
					Если КолонкаДляСуммы = "20" Тогда
						СтрокаСтруктуры.G7  = СтрокаТаблицы.Сумма;	
					ИначеЕсли КолонкаДляСуммы = "0Укр" Тогда
						СтрокаСтруктуры.G8  = СтрокаТаблицы.Сумма;	
					ИначеЕсли КолонкаДляСуммы = "0Эксп" Тогда
						СтрокаСтруктуры.G9  = СтрокаТаблицы.Сумма;	
					ИначеЕсли КолонкаДляСуммы = "БезНДС" Тогда
						СтрокаСтруктуры.G10 = СтрокаТаблицы.Сумма;	
					КонецЕсли;
					
				КонецЕсли;
					
			КонецЦикла;
			
		
			// Выводим итог по I разделу и раздел II
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогРазделI");
			ОбластьМакета.Параметры.Сумма20 	= СимволДляПустыхПоказателей;
			ОбластьМакета.Параметры.Сумма0Укр 	= СимволДляПустыхПоказателей;
			ОбластьМакета.Параметры.Сумма0Эксп	= СимволДляПустыхПоказателей;
			ОбластьМакета.Параметры.СуммаБезНДС	= СимволДляПустыхПоказателей;
			
			Сумма1разд = 0;
			
			// Получим итоговые суммы по товарам и товаротранспортным затратам
			ТаблицаНоменклатуры.Свернуть("СтавкаНДС", " Сумма, СуммаНДС");
			
			Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
				СуффиксКолонки = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, Шапка.ВалютаДокумента);
				
				Сумма = СтрокаТаблицы.Сумма; 
			
				Колонка = "Сумма"; 
				Сумма1разд = Сумма1разд + Сумма;
				
				ОбластьМакета.Параметры[Колонка + СуффиксКолонки] = ОбщегоНазначения.ФорматСумм(Сумма, ,"0,00");
				
			КонецЦикла;	
			
			// колонка 11 по товарам (раздел I)
			ОбластьМакета.Параметры.Сумма1разд = ОбщегоНазначения.ФорматСумм(Сумма1разд, ,"0,00");
			
			ТабДокумент.Вывести(ОбластьМакета);

			
			// Выводим раздел II (тара)
			ОбластьМакета = Макет.ПолучитьОбласть("ВозврТара");
			
			СуммаВозвратнойТары = 0;
			
			ОбластьМакета.Параметры.ВозвТара = ОбщегоНазначения.ФорматСумм(СуммаВозвратнойТары, ,"0,00");
			
			ТабДокумент.Вывести(ОбластьМакета);		
			
			// Выводим разделы III..IV
			ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
			ТаблицаНоменклатуры.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
			
			ИтогНДС = 0;
			Всего = СуммаВозвратнойТары;
			
			Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
				
				СуффиксКолонки = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, Шапка.ВалютаДокумента);
						
				// Итоги
				ОбластьМакета.Параметры["ИтогНДС" 		  + СуффиксКолонки] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
				Если СуффиксКолонки = "БезНДС" Тогда
					// п.10 Порядка заполнения налоговой накладной устанавливает особые правила заполнения этой ячейки:
					ОбластьМакета.Параметры["ИтогНДС" 	  + СуффиксКолонки] = "Без ПДВ ";
				ИначеЕсли СуффиксКолонки = "0Укр"
					  ИЛИ СуффиксКолонки = "0Эксп" Тогда
					// п.11 Порядка заполнения налоговой накладной устанавливает особые правила заполнения этой ячейки:
					ОбластьМакета.Параметры["ИтогНДС0Укр"]  = "0";
					ОбластьМакета.Параметры["ИтогНДС0Эксп"] = "0";
				КонецЕсли;
				ОбластьМакета.Параметры["ИтогСуммаСНДС"   + СуффиксКолонки] = ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС, ,"0,00");
				
				Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
					
					Если СуффиксКолонки = "20" Тогда
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R03G7",	СтрокаТаблицы.СуммаНДС);
					ИначеЕсли СуффиксКолонки = "0Укр" Тогда
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R03G8",	СтрокаТаблицы.СуммаНДС);
					ИначеЕсли СуффиксКолонки = "0Эксп" Тогда
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R03G9",	СтрокаТаблицы.СуммаНДС);
					ИначеЕсли СуффиксКолонки = "БезНДС" Тогда
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R03G10",	СтрокаТаблицы.СуммаНДС);
					КонецЕсли;
					
				КонецЕсли;
							
			КонецЦикла;
			
			// Итоги в 11 колонке
			ТаблицаНоменклатуры.Свернуть("","Сумма, СуммаНДС");
			Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
				//в таблице не более одной строки
				ИтогНДС 		= СтрокаТаблицы.СуммаНДС;
				Всего 			= Всего + СтрокаТаблицы.Сумма + ИтогНДС;
			КонецЦикла;
			ОбластьМакета.Параметры.ИтогНДС			= ОбщегоНазначения.ФорматСумм(ИтогНДС, ,"0,00");
			ОбластьМакета.Параметры.Всего 			= ОбщегоНазначения.ФорматСумм(Всего, ,"0,00");
			
			ТабДокумент.Вывести(ОбластьМакета);	
			
			// Выводим подвал накладной
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			
			ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = Шапка.КтоВыписалНалоговуюНакладную;	
			
			Если    Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации
			    ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
				ОбластьМакета.Параметры.ЛьготаНДС = Шапка.ЛьготаНДС;	
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);

			Если Страница <> 2 Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;	
	
	
	Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		Возврат СтруктураПоказателей;
		
	Иначе	
		
		Если ОбъектыПечати <> Неопределено Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 1, ОбъектыПечати, НалоговаяНакладнаяСсылка);
		КонецЕсли; 
		
		Возврат ТабДокумент;
		
	КонецЕсли;
	
КонецФункции  //ПечатьДокументаНалоговыйКодекс()

// В функции описано, какие данные следует сохранять в шаблоне
Функция СтруктураДополнительныхДанныхФормы() Экспорт
	
	Возврат ХранилищаНастроек.ДанныеФорм.СформироватьСтруктуруДополнительныхДанных("Товары,ВозвратнаяТара,Услуги,ОС,НематериальныеАктивы");
	
КонецФункции

// Функция по СтавкеНДС определяет суффикс имени параметра табличного документа:
// фактически колонкку таблицы налоговой накладной 20%, 0%... где должна отображаться соответствующая сумма
//
Функция ОпределитьКолонкуТаблицы(СтавкаНДС=Неопределено, ВалютаДокумента)
мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			Возврат "0Укр";
		Иначе
			Возврат "0Эксп";
		КонецЕсли;
	ИначеЕсли  СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат "БезНДС";
	Иначе
		Возврат "20";	
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьСтруктуруШапкиДокумента(Отказ, Заголовок = "", Организация, ЭтотОбъект)
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента;
	
    мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "Организация"                      , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидДоговора"                      , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке,  "ДоговорКонтрагента", "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// дополним структуру значением виртуального реквизита
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
	
	// Прежде всего, проверим заполнение реквизита Организация в шапке документа
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	// Теперь позовем общую процедуру проверки
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Организация не заполнена, получать учетную политику нет смысла
	Если Отказ Тогда
		Возврат СтруктураШапкиДокумента;
	КонецЕсли;
	
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(ЭтотОбъект.Дата), Организация,истина, Заголовок);
	
	Если НЕ Отказ Тогда
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитикаРегл.ЕстьНДС);
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции

Процедура ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, ВидОперации, ЭтотОбъект)
	
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияПревышение = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;

	
	// ТОВАРЫ
	// Получим необходимые для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей        = Новый Структура();
    СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("Количество"            	, "Количество");	
	СтруктураПолей.Вставить("Цена"                      , "Цена");	
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоСкидкиНаценки"	, "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("Характеристика"			, "ХарактеристикаНоменклатуры");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПолей.Вставить("ТекстДляПечатиВКолонкеКоличество", "Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
	СтруктураПростыхПолей.Вставить("ТовароТранспортная", Ложь);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение,ЭтотОбъект);

	// УСЛУГИ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "Услуги".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Содержание");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.БазоваяЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("Количество"            	, "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");		
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");	
	СтруктураПолей.Вставить("ТовароТранспортная"  		, "ТовароТранспортная");	
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"		, "ПроцентСкидкиНаценки");	
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПолей.Вставить("ТекстДляПечатиВКолонкеКоличество", "Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
	СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Услуг для проведения или печати
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение,ЭтотОбъект);

	
	// ОСНОВНЫЕ СРЕДСТВА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ОС".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "ОсновноеСредство.НаименованиеПолное");
	СтруктураПолей.Вставить("Цена"                      , "Сумма");			
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");	
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт.");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	СтруктураПростыхПолей.Вставить("ПроцентСкидкиНаценки", 0);
    СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
    СтруктураПростыхПолей.Вставить("ТовароТранспортная", Ложь);
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Основных Средств для проведения или печати
	ТаблицаПоОС = ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение,ЭтотОбъект);

	// НЕМАТЕРИАЛЬНЫЕ АКТИВЫ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "НематериальныеАктивы".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "НематериальныйАктив.НаименованиеПолное");
	СтруктураПолей.Вставить("Цена"                      , "Сумма");			
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");	
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт.");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	СтруктураПростыхПолей.Вставить("ПроцентСкидкиНаценки", 0);
    СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
    СтруктураПростыхПолей.Вставить("ТовароТранспортная", Ложь);
	
	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Нематериальных активов для проведения или печати
	ТаблицаПоНМА = ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение,ЭтотОбъект);

	// ТАРА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ВозвратнаяТара".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"  , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);

	// Подготовим таблицу тары для проведения или печати.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
КонецПроцедуры

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений  и печати
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение, ЭтотОбъект) Экспорт
	мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

	Если ТаблицаТоваров.Колонки.Найти("ПроцентАвтоСкидкиНаценки") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоСкидкиНаценки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	
		ТаблицаТоваров.ЗаполнитьЗначения(0, "ПроцентАвтоСкидкиНаценки");	
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ТекстДляПечатиВКолонкеКоличество") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("ТекстДляПечатиВКолонкеКоличество", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));	
		ТаблицаТоваров.ЗаполнитьЗначения("", "ТекстДляПечатиВКолонкеКоличество");	
	КонецЕсли;
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСПревышенияРегл" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСПревышенияРегл"    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСПревышенияРегл"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Колонки, необходимые для печати документа
	ТаблицаТоваров.Колонки.Добавить("ЦенаМестаБезНДСБезСкидкиРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,5)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидкиБезНДСРегл"   	  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСБезСкидкиРегл"	  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	
	ТаблицаТоваров.Колонки.Добавить("ЦенаБезНДСРегл", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(18,5));
	
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(ЭтотОбъект.СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
												СтруктураШапкиДокумента.УчитыватьНДС,
												Истина,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругления);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы превыешния в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСПревышенияРегл = СтрокаТаблицы.СуммаПревышения + СтрокаТаблицы.СуммаНДСПревышения;
			СтрокаТаблицы.СуммаНДСПревышенияРегл = СтрокаТаблицы.СуммаНДСПревышения;
		Иначе
			
			СтрокаТаблицы.СуммаСНДСПревышенияРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПревышения + СтрокаТаблицы.СуммаНДСПревышения, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												, ПогрешностиОкругленияПревышение, "СуммаСНДСРегл");
			
			СтрокаТаблицы.СуммаНДСПревышенияРегл  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаНДСПревышения,
												СтруктураШапкиДокумента.УчитыватьНДС,
												Истина,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругленияПревышение);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСПревышенияРегл = СтрокаТаблицы.СуммаСНДСПревышенияРегл - СтрокаТаблицы.СуммаНДСПревышенияРегл;
		
		// Поля, используемые при печати документа
		// Скидка
		ПроцентСкидкиНаценки = СтрокаТаблицы.ПроцентСкидкиНаценки + СтрокаТаблицы.ПроцентАвтоСкидкиНаценки;
		Если ПроцентСкидкиНаценки = 100  Тогда
			СтрокаТаблицы.СуммаСкидкиБезНДСРегл = 0;
		Иначе
			СтрокаТаблицы.СуммаСкидкиБезНДСРегл = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(СтрокаТаблицы.СуммаБезНДСРегл * ПроцентСкидкиНаценки / (100 - ПроцентСкидкиНаценки), 2);			
		КонецЕсли;
		
		// Суммы
		СтрокаТаблицы.СуммаБезНДСБезСкидкиРегл 		= СтрокаТаблицы.СуммаБезНДСРегл + СтрокаТаблицы.СуммаСкидкиБезНДСРегл;
		
		Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		  ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
		    СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл = 0;
		ИначеЕсли  СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
			И НЕ СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
			СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл = СтрокаТаблицы.Цена;
		Иначе
			СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл 	= СтрокаТаблицы.СуммаБезНДСБезСкидкиРегл /?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);	 
		КонецЕсли;
		
		Если СтрокаТаблицы.Количество = 0 Тогда
			СтрокаТаблицы.ЦенаБезНДСРегл = СтрокаТаблицы.СуммаБезНДСРегл; 
		Иначе	
			Если     СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
				И НЕ СтруктураШапкиДокумента.СуммаВключаетНДС
				И    СтрокаТаблицы.СуммаСкидкиБезНДСРегл = 0 Тогда
				СтрокаТаблицы.ЦенаБезНДСРегл = 	СтрокаТаблицы.Цена;
			Иначе	
				СтрокаТаблицы.ЦенаБезНДСРегл = СтрокаТаблицы.СуммаБезНДСРегл / СтрокаТаблицы.Количество; 
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТоваров, СтруктураШапкиДокумента);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение, ЭтотОбъект)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение, ЭтотОбъект);

	Если    ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		ИЛИ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
		// очистим колонку ВидНалоговой деятельности
		
		ТаблицаТоваров.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(), "НалоговоеНазначение");
				
	КонецЕсли;

	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение, ЭтотОбъект)

	Возврат ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение,ЭтотОбъект);

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение, ЭтотОбъект)

	Возврат  ПодготовитьТаблицуТоваров(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение,ЭтотОбъект);

КонецФункции // ПодготовитьТаблицуОС()

Функция ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение,ЭтотОбъект)

	Возврат  ПодготовитьТаблицуТоваров(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение,ЭтотОбъект);

КонецФункции // ПодготовитьТаблицуНМА()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("СтавкаНДС", 	  Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТары.Колонки.Добавить("СуммаСНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаСНДСВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Надо заполнить новые колонки.
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		СтрокаТаблицы.СуммаСНДСВал   = СтрокаТаблицы.Сумма;

		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												,ПогрешностиОкругления, "СуммаСНДСРегл");
		КонецЕсли;

	КонецЦикла;
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()