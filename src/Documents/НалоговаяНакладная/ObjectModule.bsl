Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

// используется при заполнении документа из других объектов 
Перем мВидОперацииДляЗаполнения Экспорт;
Перем мЗаполнятьВозвратнуюТару Экспорт;

Перем мНеОткрыватьФормуДокумента Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	

// Функция предназначена только для выгрузки налоговой накладной в XML, печать - через функции модуля менеджера
Функция ПечатьДокумента(ТолькоФормироватьСтруктуруПоказателейПечатнойФормы) Экспорт	
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы <> Истина Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	
	Возврат Документы.НалоговаяНакладная.ПечатьДокумента(МассивСсылок, Неопределено, Истина);
	
КонецФункции // ПечатьДокумента()


// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации Тогда
		// такие операции не предусматривают выписки налоговых накладных
		Возврат	
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если  ИмяМакета = "НалоговаяНакладная" Тогда
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.НалоговаяНакладная", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.НалоговаяНакладная", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураПечатныхФорм = Новый Структура("НалоговаяНакладная", "Налоговая накладная");

	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

Процедура ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНалоговогоУчетаНДСРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета) Экспорт

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	// Установим значения по умолчанию
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НалоговоеНазначение", МетаданныеДокумента, ИмяТабЧасти) Тогда
		СтрокаТЧ.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
	КонецЕсли;
    				
КонецПроцедуры


Процедура ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, ИмяТабЧасти) Экспорт
	
	МетаданныеДокумента = Метаданные();
	
	Если НЕ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			Возврат
	КонецЕсли;

	Если  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
	  
		Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
			СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20ПоставкаОФ;
		Иначе	
			СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20;
		КонецЕсли;
	  
  	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		
		СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.НДС_НОНерезидентУслуги;	
	
	ИначеЕсли СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		
		// 20%
		Если (ИмяТабЧасти = "ОС" ИЛИ ИмяТабЧасти = "НематериальныеАктивы") Тогда
			
			СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20ПоставкаОФ;	
			
		Иначе		
				
			СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20;
				
		КонецЕсли;
		
	ИначеЕсли СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		
		// 0%
		Если ЗначениеЗаполнено(ДоговорКонтрагента) 
			   И ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
			
			// договор - внешнеэкономический
			СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Экспорт;	
			
		Иначе
			
			// на терриории Украины
			СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Другие;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		
		// освобожденные операции (п.5 Закона)
		СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.НДС_НООсвобожден;
		
	ИначеЕсли СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС Тогда
		
		// операция не является объектом налогообложения (п.3 Закона)
		СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОбъектНалог;
		
	Иначе
		
		//в строке ТЧ не указаны ставка НДС
		СтрокаТЧ.СтатьяКнигиПродаж = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти) Экспорт

	СчетаУчета = СчетаУчетаВДокументах.ПолучитьСчетаУчетаНоменклатурыИзНастроек(Организация, СтрокаТЧ.Номенклатура, , Дата);

	ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета);
	ЗаполнитьРеквизитыНалоговогоУчетаНДСРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета);	
	ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧ, ИмяТабЧасти);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Обновляет значение реквизита ЛьготаНДС при изменении номенклатуры или вида операции
Процедура ОбновитьЗначениеЛьготыНДС(СтрокаТабличнойЧасти = Неопределено) Экспорт
	
	Если Не (    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации 
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		     ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации) Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Для каждого СтрокаТЧ Из Товары Цикл
		
			ОбновитьЗначениеЛьготыНДС(СтрокаТЧ);
		
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Услуги Цикл
		
			ОбновитьЗначениеЛьготыНДС(СтрокаТЧ);
		
		КонецЦикла;
		
	Иначе
		
		ЛьготаНДС = СокрЛП(ЛьготаНДС);

		ЛьготаТовара = СокрЛП(СтрокаТабличнойЧасти.Номенклатура.ЛьготаНДС);
		Если СтрДлина(ЛьготаТовара) = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		Если Найти(ЛьготаНДС, ЛьготаТовара) = 0 Тогда
			
			Если СтрДлина(ЛьготаНДС) = 0 Тогда
			    ЛьготаНДС = ЛьготаТовара;
			Иначе	
			    ЛьготаНДС = ЛьготаНДС + ", " + ЛьготаТовара;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли
	
КонецПроцедуры

Процедура ЗаполнитьПоОстаткам(ТабличнаяЧасть, МоментВремени = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если МоментВремени = Неопределено Тогда
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Иначе	
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Если    ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		Запрос.УстановитьПараметр("Сделка", Сделка);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	КонецЕсли;
	                                                                                      
	Если ТабличнаяЧасть = Товары Тогда
		Запрос.УстановитьПараметр("ВозвратнаяТара", Ложь);
		Запрос.УстановитьПараметр("СтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	Иначе
		Запрос.УстановитьПараметр("ВозвратнаяТара", Истина);
		Запрос.УстановитьПараметр("СтавкиНДС", Перечисления.СтавкиНДС.НеНДС);
	КонецЕсли;
	
	СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация; 
	ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда	
		// в регистре информация по НДС начисленному при условной продаже хранится отдельно
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа; 
		ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;	
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда	
		  
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.РеализацияРозница; 
	    ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
		
	КонецЕсли; 
	
	ДанныеОВалютеВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата);
	
	Запрос.УстановитьПараметр("СобытиеНДС", СобытиеНДС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтавкаНДС,
	|	НалоговоеНазначение,
	|	СуммаНДСОстаток,
	|	БазаНДСОстаток
	|ИЗ
	|	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПродаж.Остатки(&МоментВремени, 
	|											  			Организация 		= &Организация 
	|											 		  И ДоговорКонтрагента 	= &ДоговорКонтрагента 
	|											 		  И Сделка 				= &Сделка 
	|													  И СтавкаНДС 			В (&СтавкиНДС)
	|													  И СобытиеНДС  		= &СобытиеНДС 
	|													  И ВозвратнаяТара 		= &ВозвратнаяТара) КАК НДСПриобретенийОстатки
	|ГДЕ
	|     СуммаНДСОстаток >= 0
	|   И БазаНДСОстаток >= 0
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТабличнаяЧасть = Товары Тогда
			СтрокаТабличнойЧасти = Товары.Добавить();
				
			Товар = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НоменклатураДляЗаполненияНалоговыхНакладных");	
			Если НЕ ЗначениеЗаполнено(Товар) Тогда
				Сообщить("Для пользователя не указано значение ""Номенклатура для автоматического заполнения налоговых накладных"" в индивидуальных настройках!", СтатусСообщения.Важное);
			КонецЕсли; 
			
			СтрокаТабличнойЧасти.Номенклатура	  = Товар;
			
			
			Если  ВидОперации <> Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		  		И ВидОперации <> Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
				
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.Количество		  = 1;
				
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтавкаНДС       	 	= Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.НалоговоеНазначение	= Выборка.НалоговоеНазначение;
			
			СуммаНДС 	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДСОстаток, 
													ВалютаВзаиморасчетов, ВалютаДокумента, 
													ДанныеОВалютеВзаиморасчетов.Курс, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
													ДанныеОВалютеВзаиморасчетов.Кратность, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
													
			СтрокаТабличнойЧасти.СуммаНДС = СуммаНДС;										
			
			СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.БазаНДСОстаток, 
													ВалютаВзаиморасчетов, ВалютаДокумента, 
													ДанныеОВалютеВзаиморасчетов.Курс, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
													ДанныеОВалютеВзаиморасчетов.Кратность, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
			
			СтрокаТабличнойЧасти.Сумма = СуммаБезНДС + ?(СуммаВключаетНДС, СуммаНДС, 0);
			
			ЗаполнитьСтатьюКнигиПродаж(СтрокаТабличнойЧасти, "Товары");
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары");

		Иначе
			
			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();
			
			СтрокаТабличнойЧасти.Сумма		            = Выборка.БазаНДСОстаток;
			СтрокаТабличнойЧасти.НалоговоеНазначение	= Выборка.НалоговоеНазначение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьТовары(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;
		
	Если Основание.Метаданные().ТабличныеЧасти.Найти("Товары") = Неопределено Тогда
		// нет такой табличной части
		Возврат
	КонецЕсли;
	
	ЕстьНалоговоеНазначение    		= Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("ЕстьНалоговоеНазначение") <> Неопределено; 
	ЕстьПроцентСкидкиНаценки		= Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("ПроцентСкидкиНаценки") <> Неопределено; 
	ЕстьПроцентАвтоматическихСкидок	= Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("ПроцентАвтоматическихСкидок") <> Неопределено; 
	ЕстьЕдиницаИзмеренияМест		= Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("ЕдиницаИзмеренияМест") <> Неопределено; 
	ЕстьКоличествоМест				= Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("КоличествоМест") <> Неопределено; 
	ОснованиемЯвляетсяЧекККМ 		= ( ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ") );
	ЕстьЗаказПокупателяВТЧ 			= Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("ЗаказПокупателя") <> Неопределено; 
	ЕстьЗаказПоставщикуВТЧ 			= Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("ЗаказПоставщику") <> Неопределено; 
	
	
	ПогрешностиОкругления = Новый Соответствие;
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", 	Основание);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС",ОпределитьДопустимыеСтавкиНДС());
	Запрос.УстановитьПараметр("ВалютаРеглУчета", 	мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Сделка", 			Сделка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ЕдиницаИзмерения,
	|	Основание.Количество,";
	Если ЕстьКоличествоМест Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.КоличествоМест,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +"	
	|	Основание.Коэффициент,
	|	Основание.Номенклатура,
	|	Основание.ХарактеристикаНоменклатуры,
	|	Основание.Цена,
	|	Основание.Сумма,";
	Если ЕстьЕдиницаИзмеренияМест Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.ЕдиницаИзмеренияМест,";
	КонецЕсли;
	Если ЕстьПроцентСкидкиНаценки Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.ПроцентСкидкиНаценки,";
	КонецЕсли;
	Если ЕстьПроцентАвтоматическихСкидок Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.ПроцентАвтоматическихСкидок,";
	КонецЕсли;
	Если ЕстьНалоговоеНазначение Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.НалоговоеНазначение КАК НалоговоеНазначение,";
	КонецЕсли;
	Если ОснованиемЯвляетсяЧекККМ Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	&ВалютаРеглУчета 		КАК ВалютаДокумента,
	|	1 						КАК КурсДокумента,
	|	1 						КАК КратностьДокумента,
	|	Основание.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	0 						КАК СуммаНДС,
	|	ИСТИНА 					КАК УчитыватьНДС,
	|	ИСТИНА 					КАК СуммаВключаетНДС,";
	Иначе
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+".Товары КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование";
	Если ОснованиемЯвляетсяЧекККМ Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|   И Основание.Номенклатура.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|   И Основание.Номенклатура.Услуга = Ложь";
	Иначе
		ТекстЗапроса = ТекстЗапроса +"	
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)";
	КонецЕсли;
	Если ЕстьЗаказПокупателяВТЧ
		И ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		И (    ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		   ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		ТекстЗапроса = ТекстЗапроса +"	
	|   И Основание.ЗаказПокупателя = (&Сделка)";
	КонецЕсли;
	Если ЕстьЗаказПоставщикуВТЧ
		И ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		И (    ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		   ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		ТекстЗапроса = ТекстЗапроса +"	
	|   И Основание.ЗаказПоставщику = (&Сделка)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		Если ЕстьЕдиницаИзмеренияМест Тогда		
			НоваяСтрока.ЕдиницаИзмеренияМест   = Выборка.ЕдиницаИзмеренияМест;		
		КонецЕсли;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;
		Если ЕстьКоличествоМест Тогда
			НоваяСтрока.КоличествоМест             = Выборка.КоличествоМест;
		КонецЕсли; 

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
											Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
											Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
											Выборка.СуммаВключаетНДС,
											УчитыватьНДС,
											СуммаВключаетНДС,
											Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		Если ЕстьПроцентСкидкиНаценки Тогда		
			НоваяСтрока.ПроцентСкидкиНаценки     = Выборка.ПроцентСкидкиНаценки;		
		КонецЕсли;
		
		Если ЕстьПроцентАвтоматическихСкидок Тогда		
			НоваяСтрока.ПроцентАвтоматическихСкидок = Выборка.ПроцентАвтоматическихСкидок;		
		КонецЕсли;
		
		Если (НоваяСтрока.ПроцентСкидкиНаценки + НоваяСтрока.ПроцентАвтоматическихСкидок)= 100 Тогда
			НоваяСтрока.Цена = 0;
		ИначеЕсли НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма 
			/( (1-(НоваяСтрока.ПроцентСкидкиНаценки + НоваяСтрока.ПроцентАвтоматическихСкидок)/100) * НоваяСтрока.Количество);
		КонецЕсли;	
		
		Если НЕ ОснованиемЯвляетсяЧекККМ Тогда
			
			НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
															  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
															  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		Иначе
			
			НоваяСтрока.СуммаНДС  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(Выборка.Сумма,
																			 УчитыватьНДС,
																			 СуммаВключаетНДС,
																			 Выборка.СтавкаНДС,
																			 ПогрешностиОкругления);
		КонецЕсли;
														  
		Если Выборка.ДатаОтгрузки < Дата Тогда
			НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;
		КонецЕсли;
		
		Если НЕ ЕстьНалоговоеНазначение 
			 ИЛИ НЕ ЗначениеЗаполнено(Выборка.НалоговоеНазначение) Тогда
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары");
			
		Иначе
			
			НоваяСтрока.НалоговоеНазначение    = Выборка.НалоговоеНазначение;
			ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Товары");
	
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

Процедура СкопироватьТоварыИзИзмененияНалоговогоНазначенияОС(Основание) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("Метод",Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ОсновноеСредство,
	|	Основание.СуммаНДС,
	|	Основание.НалоговоеНазначениеНовое КАК НалоговоеНазначение,
	|	Основание.Ссылка.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ИзменениеНалоговогоНазначенияОС.ОС КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СуммаНДС > 0
	|	И Основание.МетодКорректировкиНалоговогоКредита = &Метод 
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство		   = Выборка.ОсновноеСредство;

		НоваяСтрока.СтавкаНДС                  = Перечисления.СтавкиНДС.НДС20;

		НоваяСтрока.СуммаНДС 				   = Выборка.СуммаНДС;
		
		НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		
		СуммаБезНДС = Окр(НоваяСтрока.СуммаНДС*100/Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20), 2);
		
		НоваяСтрока.Сумма = СуммаБезНДС + ?(СуммаВключаетНДС, НоваяСтрока.СуммаНДС, 0);
		
		Если Выборка.ДатаОтгрузки < Дата Тогда
			НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;
		КонецЕсли;
			
		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "ОС");
			
	КонецЦикла;

КонецПроцедуры

// Данная процедура предназначена для заполнения ТЧ в особом случае - по документу Корректировка долга по возвратной таре
Процедура СкопироватьТаруВТовары(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;
		
	// это может быть только Корректировка долга по таре
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Основание.Количество,
	|	Основание.Количество КАК КоличествоМест,
	|	Основание.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	Основание.Номенклатура,
	|	NULL КАК ХарактеристикаНоменклатуры,
	|	Основание.Цена,
	|	0 КАК ПроцентСкидкиНаценки,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС КАК СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ."+ВидДокумента+".ВозвратнаяТара КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.КоличествоМест             = Выборка.КоличествоМест;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
								МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
									Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
									Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
									Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
									Выборка.СуммаВключаетНДС,
									УчитыватьНДС,
									СуммаВключаетНДС,
									Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.ПроцентСкидкиНаценки             = Выборка.ПроцентСкидкиНаценки;		
		
		Если НоваяСтрока.ПроцентСкидкиНаценки = 100 Тогда
			НоваяСтрока.Цена = 0;
		ИначеЕсли НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма 
			/ ((1 - НоваяСтрока.ПроцентСкидкиНаценки / 100)
			* НоваяСтрока.Количество);
		КонецЕсли;	
		
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
		Если Выборка.ДатаОтгрузки < Дата Тогда
			НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;
		КонецЕсли;
			
		НоваяСтрока.НалоговоеНазначение    		= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Товары");
			
	КонецЦикла;

КонецПроцедуры // СкопироватьТаруВТовары()

// Данная процедура предназначена для заполнения ТЧ в особом случае - по документу Подтверждение корректировок использования (налоговый учет)
Процедура СкопироватьПартииТоваровВТовары(Основание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("Метод",Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Номенклатура,
	|	Основание.ХарактеристикаНоменклатуры,
	|	Основание.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Основание.Количество,
	|	Основание.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	Основание.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Основание.НДСКредит - Основание.НДСКредитПодтвержденный КАК СуммаНДС,
	|	Основание.Ссылка.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ПодтверждениеКорректировокИспользованияНалоговыйУчет.ПартииТоваров КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.НДСКредит > Основание.НДСКредитПодтвержденный
	|	И Основание.МетодКорректировкиНалоговогоКредита = &Метод 
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Количество = 1;
		КонецЕсли;
		
		НоваяСтрока.СтавкаНДС                  = Перечисления.СтавкиНДС.НДС20;

		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, мВалютаРегламентированногоУчета, ВалютаДокумента,
														  1, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  1, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
														  
		СуммаБезНДС = Окр(НоваяСтрока.СуммаНДС*100/Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20), 2);
		НоваяСтрока.Сумма = СуммаБезНДС + ?(СуммаВключаетНДС, НоваяСтрока.СуммаНДС, 0);
		НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
			
		
		Если Выборка.ДатаОтгрузки < Дата Тогда
			НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;
		КонецЕсли;
			
		НоваяСтрока.НалоговоеНазначение    = Выборка.НалоговоеНазначение;
		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Товары");
			
	КонецЦикла;

КонецПроцедуры

// Данная процедура предназначена для заполнения ТЧ в особом случае - по документу Подтверждение корректировок использования (налоговый учет)
Процедура СкопироватьТЧСВидомЗатратВУслуги(Основание) Экспорт
	
	// это может быть только Подтверждение корректировок использования (налоговый учет)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("Метод",Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.СтатьяЗатрат.Наименование 					КАК Содержание,
	|	Основание.НалоговоеНазначение	КАК НалоговоеНазначение,
	|	Основание.НДСКредит - Основание.НДСКредитПодтвержденный КАК СуммаНДС,
	|	Основание.Ссылка.Дата 									КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ПодтверждениеКорректировокИспользованияНалоговыйУчет.НезавершенноеПроизводство КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.НДСКредит > Основание.НДСКредитПодтвержденный
	|	И Основание.МетодКорректировкиНалоговогоКредита = &Метод 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	| ВЫБРАТЬ
	|	Основание.СтатьяЗатрат.Наименование,
	|	Основание.НалоговоеНазначение,
	|	Основание.НДСКредит - Основание.НДСКредитПодтвержденный,
	|	Основание.Ссылка.Дата
	|ИЗ
	|	Документ.ПодтверждениеКорректировокИспользованияНалоговыйУчет.БракВПроизводстве КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.НДСКредит > Основание.НДСКредитПодтвержденный
	|	И Основание.МетодКорректировкиНалоговогоКредита = &Метод 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	| ВЫБРАТЬ
	|	Основание.СтатьяЗатрат.Наименование,
	|	Основание.НалоговоеНазначение,
	|	Основание.НДСКредит - Основание.НДСКредитПодтвержденный,
	|	Основание.Ссылка.Дата
	|ИЗ
	|	Документ.ПодтверждениеКорректировокИспользованияНалоговыйУчет.Затраты КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.НДСКредит > Основание.НДСКредитПодтвержденный
	|	И Основание.МетодКорректировкиНалоговогоКредита = &Метод 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	| ВЫБРАТЬ
	|	Основание.ОбъектСтроительства.Наименование,
	|	Основание.НалоговоеНазначение,
	|	Основание.НДСКредит - Основание.НДСКредитПодтвержденный,
	|	Основание.Ссылка.Дата
	|ИЗ
	|	Документ.ПодтверждениеКорректировокИспользованияНалоговыйУчет.СтроительствоОбъектовОсновныхСредств КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.НДСКредит > Основание.НДСКредитПодтвержденный
	|	И Основание.МетодКорректировкиНалоговогоКредита = &Метод 
	|	";

	Запрос.Текст = ТекстЗапроса;
	
	Товар = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НоменклатураДляЗаполненияНалоговыхНакладных");	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура               = Товар;
		НоваяСтрока.Содержание                 = Выборка.Содержание;
		НоваяСтрока.Количество                 = 1;
		
		НоваяСтрока.СтавкаНДС                  = Перечисления.СтавкиНДС.НДС20;

		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, мВалютаРегламентированногоУчета, ВалютаДокумента,
														  1, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  1, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
														  
		СуммаБезНДС = Окр(НоваяСтрока.СуммаНДС*100/Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20), 2);
		НоваяСтрока.Сумма = СуммаБезНДС + ?(СуммаВключаетНДС, НоваяСтрока.СуммаНДС, 0);
		НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
		
		Если Выборка.ДатаОтгрузки < Дата Тогда
			НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;
		КонецЕсли;
			
		НоваяСтрока.НалоговоеНазначение    = Выборка.НалоговоеНазначение;
		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Услуги");
			
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьВозвратнуюТару(Основание = Неопределено) Экспорт
		
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;
	
	Если Основание.Метаданные().ТабличныеЧасти.Найти("ВозвратнаяТара") = Неопределено Тогда
		// нет такой табличной части
		Возврат
	КонецЕсли;
	
	ЕстьНалоговоеНазначение = Основание.Метаданные().ТабличныеЧасти.ВозвратнаяТара.Реквизиты.Найти("НалоговоеНазначение") <> Неопределено; 
	ЕстьЗаказПокупателяВТЧ 			= Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("ЗаказПокупателя") <> Неопределено; 
	ЕстьЗаказПоставщикуВТЧ 			= Основание.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("ЗаказПоставщику") <> Неопределено; 

	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("Сделка", 			Сделка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Количество,
	|	Основание.Номенклатура,
	|	Основание.Сумма,
	|	Основание.Цена,";
	Если ЕстьНалоговоеНазначение Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	Основание.НалоговоеНазначение КАК НалоговоеНазначение,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ."+ВидДокумента+".ВозвратнаяТара КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|";
	Если ЕстьЗаказПокупателяВТЧ
		И ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		И (    ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		   ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		ТекстЗапроса = ТекстЗапроса +"	
	|   И Основание.ЗаказПокупателя = (&Сделка)";
	КонецЕсли;
	Если ЕстьЗаказПоставщикуВТЧ
		И ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		И (    ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		   ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		ТекстЗапроса = ТекстЗапроса +"	
	|   И Основание.ЗаказПоставщику = (&Сделка)";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
							Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		Если Не ЕстьНалоговоеНазначение
			 ИЛИ НЕ ЗначениеЗаполнено(Выборка.НалоговоеНазначение) Тогда
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Тара");
			
		Иначе
			
			НоваяСтрока.НалоговоеНазначение    = Выборка.НалоговоеНазначение;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

Процедура СкопироватьУслуги(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;

	ОснованиемЯвляетсяЧекККМ = ( ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ") );

	Если ОснованиемЯвляетсяЧекККМ Тогда
		
		ЕстьНалоговоеНазначение = Ложь; 
		ЕстьСодержаниеУслуги = Ложь; 
		ЕстьЗаказПокупателяВТЧ = Ложь; 
		ЕстьЗаказПоставщикуВТЧ = Ложь; 
		
	Иначе
		
		Если Основание.Метаданные().ТабличныеЧасти.Найти("Услуги") = Неопределено Тогда
			// нет такой табличной части
			Возврат
		КонецЕсли;
		
		ЕстьНалоговоеНазначение = Основание.Метаданные().ТабличныеЧасти.Услуги.Реквизиты.Найти("НалоговоеНазначение") <> Неопределено; 
		ЕстьСодержаниеУслуги = Основание.Метаданные().ТабличныеЧасти.Услуги.Реквизиты.Найти("Содержание")   <> Неопределено; 
		ЕстьЗаказПокупателяВТЧ = Основание.Метаданные().ТабличныеЧасти.Услуги.Реквизиты.Найти("ЗаказПокупателя") <> Неопределено; 
		ЕстьЗаказПоставщикуВТЧ = Основание.Метаданные().ТабличныеЧасти.Услуги.Реквизиты.Найти("ЗаказПоставщику") <> Неопределено; 
	
	КонецЕсли; 
	ЭтоРаботыОтНерезидента = (ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента);	
	
	ПогрешностиОкругления = Новый Соответствие;
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",   Основание);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	Запрос.УстановитьПараметр("ВалютаРеглУчета", 	 мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Сделка", 			 Сделка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Количество,
	|	Основание.Номенклатура,
	|	Основание.Цена,
	|	Основание.Сумма,";
	Если ЕстьСодержаниеУслуги Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Содержание,";
	Иначе
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Номенклатура.Представление КАК Содержание,";
	КонецЕсли;
	Если ЕстьНалоговоеНазначение Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.НалоговоеНазначение КАК НалоговоеНазначение,";
	КонецЕсли;
	Если ОснованиемЯвляетсяЧекККМ Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	&ВалютаРеглУчета 		КАК ВалютаДокумента,
	|	1 						КАК КурсДокумента,
	|	1 						КАК КратностьДокумента,
	|	Основание.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	0 						КАК СуммаНДС,
	|	ИСТИНА 					КАК УчитыватьНДС,
	|	ИСТИНА 					КАК СуммаВключаетНДС,";
	Иначе
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,";
	Если ЭтоРаботыОтНерезидента Тогда
		// НДС на стоимость услуг начисляется исходя из их стоимости.
		// Документ поступления не должен учитывать НДС.
		ТекстЗапроса = ТекстЗапроса +"
	|	ЛОЖЬ КАК СуммаВключаетНДС,";
	Иначе
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС,";
	КонецЕсли;	
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+?(ОснованиемЯвляетсяЧекККМ,".Товары",".Услуги")+" КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование";
	Если ОснованиемЯвляетсяЧекККМ Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|   И Основание.Номенклатура.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|   И Основание.Номенклатура.Услуга = Истина";
	ИначеЕсли НЕ ЭтоРаботыОтНерезидента Тогда
		ТекстЗапроса = ТекстЗапроса +"	
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)";
	КонецЕсли;
	Если ЕстьЗаказПокупателяВТЧ
		И ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		И (    ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		   ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		ТекстЗапроса = ТекстЗапроса +"	
	|   И Основание.ЗаказПокупателя = (&Сделка)";
	КонецЕсли;
	Если ЕстьЗаказПоставщикуВТЧ
		И ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		И (    ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		   ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		ТекстЗапроса = ТекстЗапроса +"	
	|   И Основание.ЗаказПоставщику = (&Сделка)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.Содержание                 = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;

		Если ЭтоРаботыОтНерезидента Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			НоваяСтрока.СтавкаНДС = Выборка.СтавкаНДС;
		КонецЕсли;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
										МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
										Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
										Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
										Выборка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
				
		Если НЕ ОснованиемЯвляетсяЧекККМ Тогда
			
			Если ЭтоРаботыОтНерезидента Тогда
				
				НоваяСтрока.СуммаНДС = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(НоваяСтрока.Сумма,
																			УчитыватьНДС,
																			СуммаВключаетНДС,
																			НоваяСтрока.СтавкаНДС,
																			ПогрешностиОкругления);
			Иначе	

				НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
																  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
																  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
																
			КонецЕсли;
		Иначе
			
			НоваяСтрока.СуммаНДС  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(Выборка.Сумма,
																			 УчитыватьНДС,
																			 СуммаВключаетНДС,
																			 Выборка.СтавкаНДС,
																			 ПогрешностиОкругления);
		КонецЕсли;
		
		Если Выборка.ДатаОтгрузки < Дата Тогда
			НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;
		КонецЕсли;
		
		Если НЕ ЕстьНалоговоеНазначение
			ИЛИ ЭтоРаботыОтНерезидента
			ИЛИ НЕ ЗначениеЗаполнено(Выборка.НалоговоеНазначение) Тогда
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги");
			
		Иначе
			
			НоваяСтрока.НалоговоеНазначение    = Выборка.НалоговоеНазначение;
			ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Услуги");
	
		КонецЕсли;
			
	КонецЦикла;

	
КонецПроцедуры // СкопироватьУслуги()

Процедура СкопироватьОС(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;

	
	Если Основание.Метаданные().ТабличныеЧасти.Найти("ОС") = Неопределено Тогда
		// нет такой табличной части
		Возврат
	КонецЕсли;
	
	ЕстьНалоговоеНазначение = Основание.Метаданные().ТабличныеЧасти.ОС.Реквизиты.Найти("НалоговоеНазначение") <> Неопределено; 
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияОС") Тогда
		ЕстьНалоговоеНазначение = Истина;
	КонецЕсли;
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	Запрос.УстановитьПараметр("ВалютаРеглУчета", 	мВалютаРегламентированногоУчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ОсновноеСредство,";
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияОС") Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.НалоговоеНазначение,";
	ИначеЕсли ЕстьНалоговоеНазначение Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.НалоговоеНазначение КАК НалоговоеНазначение,";
	КонецЕсли;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияОС") Тогда
	ТекстЗапроса = ТекстЗапроса +"
	|	&ВалютаРеглУчета 	КАК ВалютаДокумента,
	|	1 					КАК КурсДокумента,
	|	1					КАК КратностьДокумента,";
	Иначе
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.ВалютаДокумента 	   КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КратностьДокумента,";
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ."+ВидДокумента+".ОС 	   КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство           = Выборка.ОсновноеСредство;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
													  
														  
		Если Выборка.ДатаОтгрузки < Дата Тогда
			НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;
		КонецЕсли;

		
			
 			НоваяСтрока.НалоговоеНазначение    = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
			ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "ОС");
	
		
	
	КонецЦикла;
	
КонецПроцедуры // СкопироватьОС()

Процедура СкопироватьНематериальныеАктивы(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;

	Если Основание.Метаданные().ТабличныеЧасти.Найти("НематериальныеАктивы") = Неопределено Тогда
		// нет такой табличной части
		Возврат
	КонецЕсли;
	
	ЕстьНалоговоеНазначение = Основание.Метаданные().ТабличныеЧасти.НематериальныеАктивы.Реквизиты.Найти("НалоговоеНазначение") <> Неопределено; 
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.НематериальныйАктив,";
	Если ЕстьНалоговоеНазначение Тогда
		ТекстЗапроса = ТекстЗапроса +"
	|	Основание.НалоговоеНазначение,";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +"
	|	Основание.Ссылка.ВалютаДокумента 	   КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ."+ВидДокумента+".НематериальныеАктивы 	   КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НематериальныеАктивы.Добавить();
		НоваяСтрока.НематериальныйАктив        = Выборка.НематериальныйАктив;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
													  
														  
		Если Выборка.ДатаОтгрузки < Дата Тогда
			НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;
		КонецЕсли;

			

 			НоваяСтрока.НалоговоеНазначение    = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
			ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "НематериальныеАктивы");
	
	
	КонецЦикла;
	
КонецПроцедуры // СкопироватьНематериальныеАктивы()

Процедура СкопироватьУслугуПоКомиссии(Основание = Неопределено) Экспорт
		
		Если Основание = Неопределено Тогда
			Основание = ДокументОснование;
		КонецЕсли;
		
		Если НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			Возврат;
		КонецЕсли; 
	
		СтрокаУслуг = Услуги.Добавить();
		
		УслугаКомиссии = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяУслугаКомиссии");
		Если НЕ ЗначениеЗаполнено(УслугаКомиссии) Тогда
			Сообщить("Для текущего пользователя в настройках не задана """"Основная номенклатура-услуга по комиссии"""" ");
		КонецЕсли; 
		СтрокаУслуг.Номенклатура 	= УслугаКомиссии;
		СтрокаУслуг.Содержание 	 	= УслугаКомиссии.НаименованиеПолное;
		
		СтрокаУслуг.Количество 		= 1;
		СтрокаУслуг.СтавкаНДС  		= Основание.СтавкаНДСВознаграждения;
		
		СтрокаУслуг.Цена 			= Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
												МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Товары.Итог("СуммаВознаграждения"), Основание.ВалютаДокумента, ВалютаДокумента,
																		   Основание.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
																		   Основание.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
												Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
												Основание.СуммаВключаетНДС,
												УчитыватьНДС,
												СуммаВключаетНДС,
												Ценообразование.ПолучитьСтавкуНДС(СтрокаУслуг.СтавкаНДС));

		
		СтрокаУслуг.Сумма 			= СтрокаУслуг.Цена;
		СтрокаУслуг.СуммаНДС 		= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Товары.Итог("СуммаНДСВознаграждения"), Основание.ВалютаДокумента, ВалютаДокумента,
																 Основание.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
																 Основание.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
											  

		СтрокаУслуг.НалоговоеНазначение = Основание.НалоговоеНазначение;
		
		ЗаполнитьСтатьюКнигиПродаж(СтрокаУслуг, "Услуги");
		
КонецПроцедуры

Процедура СкопироватьУслугиКомиссииОтНерезидента(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;

	Если НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		// эта процедура работет только с документом  ОтчетКомиссионераОПродажах
		Возврат
	КонецЕсли;
	
	ПогрешностиОкругления = Новый Соответствие;
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", 	мВалютаРегламентированногоУчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Номенклатура,
	|	1 КАК Количество,
	|	Основание.СуммаВознаграждения КАК Цена,
	|	Основание.СуммаВознаграждения КАК Сумма,
	|	""Продажа "" + ВЫРАЗИТЬ(Основание.Номенклатура.Наименование КАК СТРОКА(100)) КАК Содержание,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КратностьДокумента,
	|	ЛОЖЬ  КАК СуммаВключаетНДС,
	|	Основание.Ссылка.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+".Товары КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование";
	
	Запрос.Текст = ТекстЗапроса;
	
	Товар = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НоменклатураДляЗаполненияНалоговыхНакладных");	
	Если НЕ ЗначениеЗаполнено(Товар) Тогда
		Сообщить("Для пользователя не указано значение ""Номенклатура для автоматического заполнения налоговых накладных"" в индивидуальных настройках!", СтатусСообщения.Важное);
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура               = Товар;
		НоваяСтрока.Содержание                 = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;

		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
										МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
										Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
										Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
										Выборка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		НоваяСтрока.СуммаНДС = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(НоваяСтрока.Сумма,
																	УчитыватьНДС,
																	СуммаВключаетНДС,
																	НоваяСтрока.СтавкаНДС,
																	ПогрешностиОкругления);
															  
		
		Если Выборка.ДатаОтгрузки < Дата Тогда
			НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;
		КонецЕсли;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги");
		
		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Услуги");
			
	КонецЦикла;

	
КонецПроцедуры // СкопироватьУслугиКомиссииОтНерезидента()

Процедура ЗаполнитьОСПоСписаниюОС(Основание) Экспорт
	
	Если Основание.Метаданные().ТабличныеЧасти.Найти("ОС") = Неопределено Тогда
		// странно, нет такой табличной части
		Возврат
	КонецЕсли;
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ОсновноеСредство	КАК ОсновноеСредство,
	|	Основание.СтоимостьБУ - Основание.АмортизацияБУ - Основание.АмортизацияЗаМесяцБУ КАК Сумма,
	|	Основание.Ссылка.Дата		КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+".ОС КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
		НоваяСтрока.СтавкаНДС        = Перечисления.СтавкиНДС.НДС20;
		НоваяСтрока.Сумма 			 = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											Выборка.Сумма,
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
											Ложь,
											УчитыватьНДС,
											СуммаВключаетНДС,
											Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
											
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
														  
		НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;

		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "ОС");
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьНМАПоСписаниюНМА(Основание) Экспорт
	
	Если Основание.Метаданные().ТабличныеЧасти.Найти("НематериальныеАктивы") = Неопределено Тогда
		// странно, нет такой табличной части
		Возврат
	КонецЕсли;
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.НематериальныйАктив	КАК НематериальныйАктив,
	|	Основание.СтоимостьБУ - Основание.АмортизацияБУ - Основание.АмортизацияЗаМесяцБУ КАК Сумма,
	|	Основание.Ссылка.Дата		КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+".НематериальныеАктивы КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НематериальныеАктивы.Добавить();
		НоваяСтрока.НематериальныйАктив = Выборка.НематериальныйАктив;
		НоваяСтрока.СтавкаНДС        = Перечисления.СтавкиНДС.НДС20;
		НоваяСтрока.Сумма 			 = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											Выборка.Сумма,
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
											Ложь,
											УчитыватьНДС,
											СуммаВключаетНДС,
											Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
											
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
														  
		НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;

		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "НематериальныеАктивы");
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТоварыПоСписаниюМатериаловИзЭксплуатации(Основание) Экспорт

	Если Основание.Метаданные().ТабличныеЧасти.Найти("Материалы") = Неопределено Тогда
		// странно нет такой табличной части
		Возврат
	КонецЕсли;
	
	ВидДокумента = Основание.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", 	Основание);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Номенклатура,
	|	Основание.ХарактеристикаНоменклатуры,
	|	Основание.КоличествоМест,
	|	Основание.ЕдиницаИзмеренияМест,
	|	Основание.Количество,
	|	Основание.ЕдиницаИзмерения,
	|	Основание.Коэффициент,
	|	Основание.Ссылка.Дата 	КАК ДатаОтгрузки
	|ИЗ
	|	Документ."+ВидДокумента+".Материалы КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест   	   = Выборка.ЕдиницаИзмеренияМест;		
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.КоличествоМест             = Выборка.КоличествоМест;

		НоваяСтрока.СтавкаНДС                  = Перечисления.СтавкиНДС.НДС20;
		
		НоваяСтрока.ДатаОтгрузкиОплаты = Выборка.ДатаОтгрузки;
		
		ЗаполнитьСтатьюКнигиПродаж(НоваяСтрока, "Товары");
			
	КонецЦикла;	

КонецПроцедуры

// Процедура выполняет заполнение текста условий продажи.
//
// Параметры:
//   Нет.
//
Процедура ЗаполнитьУсловиеПродажи(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;
	КонецЕсли;
	
	УсловиеПродажи = "";
	
	Если    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации	Тогда
		
		НаименованиеДоговора = ДоговорКонтрагента.НаименованиеДляПечати;
		
		Если НЕ ЗначениеЗаполнено(НаименованиеДоговора) Тогда
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента.Номер) Тогда
			
				НаименованиеДоговора = "№ " + ДоговорКонтрагента.Номер;
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента.Дата) Тогда
			
				НаименованиеДоговора = НаименованиеДоговора +" від " + Формат(ДоговорКонтрагента.Дата, "ДФ='дд.ММ.гггг'");
			
			КонецЕсли;
		
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(НаименованиеДоговора) Тогда
			УсловиеПродажи = "Договiр "+СокрЛП(НаименованиеДоговора);	
		КонецЕсли;
		
	КонецЕсли; 
	
	Если    ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	  	  И ЗначениеЗаполнено(Сделка) Тогда
	
		УсловиеПродажи = ?(ЗначениеЗаполнено(УсловиеПродажи),УсловиеПродажи + ", ","") +  "замовлення № "+ОбщегоНазначения.ПолучитьНомерНаПечать(Сделка)+" вiд "+Формат(Сделка.Дата, "ДФ='дд.ММ.гггг'");
		
	ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
		    И ЗначениеЗаполнено(Сделка) Тогда
			
		УсловиеПродажи = ?(ЗначениеЗаполнено(УсловиеПродажи),УсловиеПродажи + ", ","") +  "рахунок № "+ОбщегоНазначения.ПолучитьНомерНаПечать(Сделка)+" вiд "+Формат(Сделка.Дата, "ДФ='дд.ММ.гггг'");
		
	КонецЕсли;
		
	// заполним текстовые реквизиты по-украински
	Если    ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке")Тогда
		
		УсловиеПродажи = ?(ЗначениеЗаполнено(УсловиеПродажи),УсловиеПродажи + ", ","") + "акт № "+ОбщегоНазначения.ПолучитьНомерНаПечать(Основание)+" вiд "+Формат(Основание.Дата, "ДФ='дд.ММ.гггг'");
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЕстьТовары = (Основание.Товары.Количество() > 0);
		ЕстьУслуги = (Основание.Услуги.Количество() > 0);
		
		Если ЕстьУслуги И НЕ ЕстьТовары Тогда
			УсловиеПродажи = ?(ЗначениеЗаполнено(УсловиеПродажи),УсловиеПродажи + ", ","") + "акт № "+ОбщегоНазначения.ПолучитьНомерНаПечать(Основание)+" вiд "+Формат(Основание.Дата, "ДФ='дд.ММ.гггг'");
		//ИначеЕсли НЕ ЕстьУслуги И ЕстьТовары Тогда
	 	Иначе	
			УсловиеПродажи = ?(ЗначениеЗаполнено(УсловиеПродажи),УсловиеПродажи + ", ","") + "накладна № "+ОбщегоНазначения.ПолучитьНомерНаПечать(Основание)+" вiд "+Формат(Основание.Дата, "ДФ='дд.ММ.гггг'");
		//Иначе
		//	УсловиеПродажи = ?(ЗначениеЗаполнено(УсловиеПродажи),УсловиеПродажи + ", ","") + "накладна(акт) № "+ОбщегоНазначения.ПолучитьНомерНаПечать(Основание)+" вiд "+Формат(Основание.Дата, "ДФ='дд.ММ.гггг'");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
		ИЛИ   ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаОС")
		ИЛИ   ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаНМА") Тогда
		
		УсловиеПродажи = ?(ЗначениеЗаполнено(УсловиеПродажи),УсловиеПродажи + ", ","") + "накладна № "+ОбщегоНазначения.ПолучитьНомерНаПечать(Основание)+" вiд "+Формат(Основание.Дата, "ДФ='дд.ММ.гггг'");
		
	ИначеЕсли  ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") 
		И НЕ ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам	Тогда
		
		УсловиеПродажи = ?(ЗначениеЗаполнено(УсловиеПродажи),УсловиеПродажи + ", ","") + "рахунок № "+ОбщегоНазначения.ПолучитьНомерНаПечать(Основание)+" вiд "+Формат(Основание.Дата, "ДФ='дд.ММ.гггг'");
		
	ИначеЕсли  ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И НЕ ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам	Тогда
		
		УсловиеПродажи = ?(ЗначениеЗаполнено(УсловиеПродажи),УсловиеПродажи + ", ","") + "замовлення № "+ОбщегоНазначения.ПолучитьНомерНаПечать(Основание)+" вiд "+Формат(Основание.Дата, "ДФ='дд.ММ.гггг'");
		
	ИначеЕсли  ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		УсловиеПродажи = ?(ЗначениеЗаполнено(УсловиеПродажи),УсловиеПродажи + ", ","") + "звіт комісіонера № "+ОбщегоНазначения.ПолучитьНомерНаПечать(Основание)+" вiд "+Формат(Основание.Дата, "ДФ='дд.ММ.гггг'");
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		УсловиеПродажи = "Касовий чек № "+Основание.НомерЧекаККМ+" вiд "+Формат(Основание.Дата, "ДФ='дд.ММ.гггг'");
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПодтверждениеКорректировокИспользованияНалоговыйУчет") Тогда	
		
		УсловиеПродажи = "Умовний продаж ";
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьУсловиеПродажи()

// Функция по СтавкеНДС определяет суффикс имени параметра табличного документа:
// фактически колонкку таблицы налоговой накладной 20%, 0%... где должна отображаться соответствующая сумма
//
Функция ОпределитьКолонкуТаблицы(СтавкаНДС=Неопределено)
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			Возврат "0Укр";
		Иначе
			Возврат "0Эксп";
		КонецЕсли;
	ИначеЕсли  СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат "БезНДС";
	Иначе
		Возврат "20";	
	КонецЕсли;
	
КонецФункции

Функция ОпределитьДопустимыеСтавкиНДС() Экспорт
	СписокСтавокНДС = Новый СписокЗначений();
	
	Если    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации Тогда
				
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НеНДС);
		
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
		
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
		
	КонецЕсли;
		
	Возврат СписокСтавокНДС;
	
КонецФункции

Функция ОпределитьВозможныеВидыОперацийПоОснованию(Основание) Экспорт
	
	ТаблицаВидовОпераций = Новый ТаблицаЗначений();
	ТаблицаВидовОпераций.Колонки.Добавить("ВидОперации", ,"Вид операции",60);

	ОснованиеЧек = (ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ"));
	
	Если НЕ ОснованиеЧек Тогда
		
		// теперь функция работает только для ЧекККМ
		Возврат ТаблицаВидовОпераций;
		
	КонецЕсли;
		
	ТекстЗапроса =  "";
				
	Если Основание.Метаданные().ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
		Если ОснованиеЧек Тогда
			ТекстЗапроса = " 
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Док.Номенклатура.СтавкаНДС КАК СтавкаНДС
			|ИЗ 
			|	Документ." + Основание.Метаданные().Имя + ".Товары КАК Док
			|ГДЕ
			|	Док.Ссылка = &Основание
			|";
		Иначе
			ТекстЗапроса = " 
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Док.СтавкаНДС
			|ИЗ 
			|	Документ." + Основание.Метаданные().Имя + ".Товары КАК Док
			|ГДЕ
			|	Док.Ссылка = &Основание
			|";
		КонецЕсли;
	КонецЕсли;
	
	Если Основание.Метаданные().ТабличныеЧасти.Найти("Услуги") <> Неопределено Тогда
		Если ТекстЗапроса <> "" Тогда
			ТекстЗапроса = ТекстЗапроса +"
			| ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " 
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.СтавкаНДС
		|ИЗ 
		|	Документ." + Основание.Метаданные().Имя + ".Услуги КАК Док
		|ГДЕ
		|	Док.Ссылка = &Основание
		|";
	КонецЕсли;
	
	Если Основание.Метаданные().ТабличныеЧасти.Найти("ОС") <> Неопределено Тогда
		Если ТекстЗапроса <> "" Тогда
			ТекстЗапроса = ТекстЗапроса +"
			| ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " 
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.СтавкаНДС
		|ИЗ 
		|	Документ." + Основание.Метаданные().Имя + ".ОС КАК Док
		|ГДЕ
		|	Док.Ссылка = &Основание
		|";
	КонецЕсли;
	
	Если Основание.Метаданные().ТабличныеЧасти.Найти("НематериальныеАктивы") <> Неопределено Тогда
		Если ТекстЗапроса <> "" Тогда
			ТекстЗапроса = ТекстЗапроса +"
			| ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " 
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.СтавкаНДС
		|ИЗ 
		|	Документ." + Основание.Метаданные().Имя + ".НематериальныеАктивы КАК Док
		|ГДЕ
		|	Док.Ссылка = &Основание
		|";
	КонецЕсли;
	
	Если ТекстЗапроса = "" Тогда
		// в этом документе нет обрабатываемых подходящих табличных частей
		Возврат ТаблицаВидовОпераций;
	КонецЕсли;
	
	ЗапросПоСтавкамНДС = Новый Запрос(ТекстЗапроса);
	ЗапросПоСтавкамНДС.УстановитьПараметр("Основание", Основание); 
	
	Выборка = ЗапросПоСтавкамНДС.Выполнить().Выбрать();	
	
	ВключатьОблагаемыеОперации = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			СтрокаТаблицы = ТаблицаВидовОпераций.Добавить();
			Если ОснованиеЧек Тогда
				СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации;
			Иначе
				СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации;
			КонецЕсли;
		ИначеЕсли Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС Тогда
			СтрокаТаблицы = ТаблицаВидовОпераций.Добавить();
			СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации;
		Иначе
			//0% или 20% - один вид операции
			ВключатьОблагаемыеОперации = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если  ВключатьОблагаемыеОперации Тогда
		СтрокаТаблицы = ТаблицаВидовОпераций.Добавить();
		Если ОснованиеЧек Тогда
			СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации;
		Иначе
			СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаВидовОпераций;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений  и печати
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение) Экспорт
	
	Если ТаблицаТоваров.Колонки.Найти("ПроцентАвтоСкидкиНаценки") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоСкидкиНаценки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	
		ТаблицаТоваров.ЗаполнитьЗначения(0, "ПроцентАвтоСкидкиНаценки");	
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ТекстДляПечатиВКолонкеКоличество") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("ТекстДляПечатиВКолонкеКоличество", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));	
		ТаблицаТоваров.ЗаполнитьЗначения("", "ТекстДляПечатиВКолонкеКоличество");	
	КонецЕсли;
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСПревышенияРегл" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСПревышенияРегл"    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСПревышенияРегл"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Колонки, необходимые для печати документа
	ТаблицаТоваров.Колонки.Добавить("ЦенаМестаБезНДСБезСкидкиРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,5)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидкиБезНДСРегл"   	  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСБезСкидкиРегл"	  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	
	ТаблицаТоваров.Колонки.Добавить("ЦенаБезНДСРегл", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(18,5));
	
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
												СтруктураШапкиДокумента.УчитыватьНДС,
												Истина,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругления);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы превыешния в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСПревышенияРегл = СтрокаТаблицы.СуммаПревышения + СтрокаТаблицы.СуммаНДСПревышения;
			СтрокаТаблицы.СуммаНДСПревышенияРегл = СтрокаТаблицы.СуммаНДСПревышения;
		Иначе
			
			СтрокаТаблицы.СуммаСНДСПревышенияРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПревышения + СтрокаТаблицы.СуммаНДСПревышения, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												, ПогрешностиОкругленияПревышение, "СуммаСНДСРегл");
			
			СтрокаТаблицы.СуммаНДСПревышенияРегл  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаНДСПревышения,
												СтруктураШапкиДокумента.УчитыватьНДС,
												Истина,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругленияПревышение);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСПревышенияРегл = СтрокаТаблицы.СуммаСНДСПревышенияРегл - СтрокаТаблицы.СуммаНДСПревышенияРегл;
		
		// Поля, используемые при печати документа
		// Скидка
		ПроцентСкидкиНаценки = СтрокаТаблицы.ПроцентСкидкиНаценки + СтрокаТаблицы.ПроцентАвтоСкидкиНаценки;
		Если ПроцентСкидкиНаценки = 100  Тогда
			СтрокаТаблицы.СуммаСкидкиБезНДСРегл = 0;
		Иначе
			СтрокаТаблицы.СуммаСкидкиБезНДСРегл = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(СтрокаТаблицы.СуммаБезНДСРегл * ПроцентСкидкиНаценки / (100 - ПроцентСкидкиНаценки), 2);			
		КонецЕсли;
		
		// Суммы
		СтрокаТаблицы.СуммаБезНДСБезСкидкиРегл 		= СтрокаТаблицы.СуммаБезНДСРегл + СтрокаТаблицы.СуммаСкидкиБезНДСРегл;
		
		Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		  ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
		    СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл = 0;
		ИначеЕсли  СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
			И НЕ СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
			СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл = СтрокаТаблицы.Цена;
		Иначе
			СтрокаТаблицы.ЦенаМестаБезНДСБезСкидкиРегл 	= СтрокаТаблицы.СуммаБезНДСБезСкидкиРегл /?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);	 
		КонецЕсли;
		
		Если СтрокаТаблицы.Количество = 0 Тогда
			СтрокаТаблицы.ЦенаБезНДСРегл = СтрокаТаблицы.СуммаБезНДСРегл; 
		Иначе	
			Если     СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
				И НЕ СтруктураШапкиДокумента.СуммаВключаетНДС
				И    СтрокаТаблицы.СуммаСкидкиБезНДСРегл = 0 Тогда
				СтрокаТаблицы.ЦенаБезНДСРегл = 	СтрокаТаблицы.Цена;
			Иначе	
				СтрокаТаблицы.ЦенаБезНДСРегл = СтрокаТаблицы.СуммаБезНДСРегл / СтрокаТаблицы.Количество; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТоваров, СтруктураШапкиДокумента);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	Если    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
		// очистим колонку ВидНалоговой деятельности
		
		ТаблицаТоваров.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(), "НалоговоеНазначение");
				
	КонецЕсли;

	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение)

	Возврат ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение)

	Возврат  ПодготовитьТаблицуТоваров(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

КонецФункции // ПодготовитьТаблицуОС()

Функция ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение)

	Возврат  ПодготовитьТаблицуТоваров(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

КонецФункции // ПодготовитьТаблицуНМА()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("СтавкаНДС", 	  Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТары.Колонки.Добавить("СуммаСНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаСНДСВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Надо заполнить новые колонки.
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		СтрокаТаблицы.СуммаСНДСВал   = СтрокаТаблицы.Сумма;

		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												,ПогрешностиОкругления, "СуммаСНДСРегл");
		КонецЕсли;

	КонецЦикла;
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// по фирме не ведется учет НДС, проводить документ не имеет смысла		
		ОбщегоНазначения.СообщитьОбОшибке("Фирма не является плательщиком НДС!", Отказ, Заголовок);
	КонецЕсли;
	
	// Укажем, что надо проверить:
	Если  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
	  
		СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, СчетНДС, СчетУчетаНДС");	
		
		Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
			СтруктураОбязательныхПолей.Удалить("СчетУчетаНДС");
		КонецЕсли;
			
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
	      ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда 
		  
		СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, СчетНДС,СчетУчетаНДС");
		
	Иначе
		
		СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетНДС, СчетУчетаНДС");
		
	КонецЕсли;
	
	СтруктураОбязательныхПолей.Вставить("ВидОперации");
	
	Если ПродажаНижеОбычнойЦены 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда					   
		СтруктураОбязательныхПолей.Вставить("СчетДт");
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			СтруктураОбязательныхПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				СтруктураОбязательныхПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");
				
				//проверим указание субконто для заполнения декларации по прибыли
				Если ЗначениеЗаполнено(СчетДт) Тогда
					
					ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
					Для НомСубконто = 1 По 3 Цикл
						Если СчетДт.ВидыСубконто.Количество()<НомСубконто Тогда
							Прервать;
						КонецЕсли;
						
						ВидСубконто = СчетДт.ВидыСубконто[НомСубконто-1].ВидСубконто;
						Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
							 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
							 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
							ЕстьСубконтоСтатьяЗатратДоходов = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
						СтруктураОбязательныхПолей.Вставить("СубконтоДт" + НомСубконто, НСТР("ru = 'Не заполнено значение субконто: '; uk = 'Не заповнене значення субконто: '") + ВидСубконто); 	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если    СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
	    СтруктураОбязательныхПолей.Вставить("Сделка");	
	КонецЕсли;
	
	Если ВключаетсяВУточняющийРасчет Тогда
		СтруктураОбязательныхПолей.Вставить("УточняемыйПериод");
	КонецЕсли;
	
 	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения, Сумма, СтавкаНДС, СтатьяКнигиПродаж");
	
	// в итоговых розниных накладных количество может быть и не указано
	Если    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации Тогда
		
		СтруктураОбязательныхПолей.Удалить("Количество");
		СтруктураОбязательныхПолей.Удалить("ЕдиницаИзмерения");
		
	КонецЕсли;

	// при обычных операциях (не розничных и не УП при списании ОС) обязательно нужно указывать ВНД
	Если    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
		
		СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
		
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, ИмяТабличнойЧасти, Неопределено, Отказ, Заголовок);	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Содержание, Количество, Сумма, СтавкаНДС, СтатьяКнигиПродаж");

	// при обычных оепрациях (не розничных) обязательно нужно указывать ВНД
	Если    ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации Тогда
		
		СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
		
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, ИмяТабличнойЧасти, Неопределено, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
                                                          Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма, НалоговоеНазначение");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "ВозвратнаяТара", Неопределено, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

Процедура ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок)
   	ИмяТабличнойЧасти = "ОС";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма, СтатьяКнигиПродаж");
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
		СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
	КонецЕсли;
		
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиНематериальныеАктивы(ТаблицаПоНМА, СтруктураШапкиДокумента, Отказ, Заголовок)
   	ИмяТабличнойЧасти = "НематериальныеАктивы";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив, Сумма, СтатьяКнигиПродаж");
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
		СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА,
							  Отказ, Заголовок)

	ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоОС, ТаблицаПоНМА, Отказ);

	ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ);
	
	ДвиженияПоРегиструКнигаПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ);
	
						  
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаПоОС, ТаблицаПоНМА, Отказ)
	
	Если  НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации 
	    И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа 
		И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС 
		И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		
		// По необлагаемым и освобожденным от НДС операциям проводки не формируются
		
		Возврат
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;

	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СчетУчетаНДС","СуммаНДСРегл, СуммаНДСПревышенияРегл");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СчетУчетаНДС","СуммаНДСРегл, СуммаНДСПревышенияРегл");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// ОС
	ТаблицаКопия = ТаблицаПоОС.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СчетУчетаНДС","СуммаНДСРегл, СуммаНДСПревышенияРегл");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// НМА
	ТаблицаКопия = ТаблицаПоНМА.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СчетУчетаНДС","СуммаНДСРегл, СуммаНДСПревышенияРегл");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.Свернуть("СделкаРегл,СчетУчетаНДС","СуммаНДСРегл, СуммаНДСПревышенияРегл");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.СуммаНДСРегл <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.СуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговое обязательство: налоговая накладная";
			Проводка.НомерЖурнала               = "";

			Если НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , СтрокаТаблицы.СделкаРегл);
			Иначе
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
					Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
						Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНДСПревышенияРегл;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);

			
		КонецЕсли;

	КонецЦикла;
	
	// проводки на сумму начисленых обязательств по НДС в связи с продажей по цене ниже обычной
	Если ПродажаНижеОбычнойЦены Тогда
		 ТаблицаДвижений.Свернуть("", "СуммаНДСПревышенияРегл");
		 Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если  СтрокаТаблицы.СуммаНДСПревышенияРегл <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период                     = СтруктураШапкиДокумента.Дата;
				Проводка.Активность                 = Истина;
				Проводка.Организация                = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма                      = СтрокаТаблицы.СуммаНДСПревышенияРегл;
				Проводка.Содержание                 = "НДС: налоговое обязательство: продажа ниже ОЦ";
				Проводка.НомерЖурнала               = "";

				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
					Если НЕ СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
						Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНДСПревышенияРегл;
					КонецЕсли;
				КонецЕсли;
				
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);

				
			КонецЕсли;
		 КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ)


	Если  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		// при данных операциях регистр не двигается
		Возврат;
	КонецЕсли;	
	
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаДвиженийТара 	  = ТаблицаДвижений.Скопировать();
	ТаблицаДвиженийОплата 	  = ТаблицаДвижений.Скопировать();
	
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение","СуммаБезНДСВал,СуммаНДСВал");
	ТаблицаПродаж = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение","СуммаБезНДСВал,СуммаНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);
	
	// ОС
	ТаблицаКопия = ТаблицаПоОС.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение","СуммаБезНДСВал,СуммаНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);

	// НМА
	ТаблицаКопия = ТаблицаПоНМА.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение","СуммаБезНДСВал,СуммаНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);
	
	ТаблицаПродаж.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение","СуммаБезНДСВал,СуммаНДСВал");
	ТаблицаПродаж.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
	ТаблицаПродаж.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
	ТаблицаПродаж.Колонки.СделкаРегл    .Имя = "Сделка";
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.РеализацияРозница;

	Иначе	
		
		СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
		
	КонецЕсли; 
	ТаблицаДвижений.ЗаполнитьЗначения(СобытиеНДС, "СобытиеНДС");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ПодтвержденныйНДС, "КодОперации");
	
	// ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение","СуммаСНДСВал");
	ТаблицаКопия.Колонки.СуммаСНДСВал.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.СделкаРегл.Имя   = "Сделка";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина            , "ВозвратнаяТара");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ПодтвержденныйНДС, "КодОперации");

	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьРасход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
	
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьРасход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
		
	КонецЕсли;

КонецПроцедуры // 							  

Процедура ДвиженияПоРегиструКнигаПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ)
			
	НаборДвижений = Движения.КнигаПродаж;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "СуммаБезНДСРегл, СуммаНДСРегл");
	ТаблицаКопия.Колонки.СуммаБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.СуммаНДСРегл	.Имя = "НДС";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "СуммаБезНДСРегл, СуммаНДСРегл");
	ТаблицаКопия.Колонки.СуммаБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.СуммаНДСРегл	.Имя = "НДС";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// ОС
	ТаблицаКопия = ТаблицаПоОС.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "СуммаБезНДСРегл, СуммаНДСРегл");
	ТаблицаКопия.Колонки.СуммаБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.СуммаНДСРегл	.Имя = "НДС";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	// НМА
	ТаблицаКопия = ТаблицаПоНМА.Скопировать();
    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "СуммаБезНДСРегл, СуммаНДСРегл");
	ТаблицаКопия.Колонки.СуммаБезНДСРегл.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.СуммаНДСРегл	.Имя = "НДС";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	Если ПродажаНижеОбычнойЦены Тогда
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "СуммаБезНДСПревышенияРегл, СуммаНДСПревышенияРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСПревышенияРегл	.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСПревышенияРегл		.Имя = "НДС";
		ТаблицаКопия.Колонки.Добавить("ПродажаНижеОбычнойЦены", Новый ОписаниеТипов("Булево"));
		ТаблицаКопия.ЗаполнитьЗначения(Истина,"ПродажаНижеОбычнойЦены");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "СуммаБезНДСПревышенияРегл, СуммаНДСПревышенияРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСПревышенияРегл	.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСПревышенияРегл		.Имя = "НДС";
		ТаблицаКопия.Колонки.Добавить("ПродажаНижеОбычнойЦены", Новый ОписаниеТипов("Булево"));
		ТаблицаКопия.ЗаполнитьЗначения(Истина,"ПродажаНижеОбычнойЦены");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		// ОС
		ТаблицаКопия = ТаблицаПоОС.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "СуммаБезНДСПревышенияРегл, СуммаНДСПревышенияРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСПревышенияРегл	.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСПревышенияРегл		.Имя = "НДС";
		ТаблицаКопия.Колонки.Добавить("ПродажаНижеОбычнойЦены", Новый ОписаниеТипов("Булево"));
		ТаблицаКопия.ЗаполнитьЗначения(Истина,"ПродажаНижеОбычнойЦены");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		// НМА
		ТаблицаКопия = ТаблицаПоНМА.Скопировать();
	    ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПродаж", "СуммаБезНДСПревышенияРегл, СуммаНДСПревышенияРегл");
		ТаблицаКопия.Колонки.СуммаБезНДСПревышенияРегл	.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСПревышенияРегл		.Имя = "НДС";
		ТаблицаКопия.Колонки.Добавить("ПродажаНижеОбычнойЦены", Новый ОписаниеТипов("Булево"));
		ТаблицаКопия.ЗаполнитьЗначения(Истина,"ПродажаНижеОбычнойЦены");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	КонецЕсли;	
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ФормаРасчетов, "ФормаРасчетов");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.КнигаПродаж.ДобавитьДвижение();
	
	КонецЕсли;
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
 
// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипОснования) И (Основание <> Неопределено) Тогда 
		Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
			ДокументОснование = Основание;
			Возврат;
		Иначе
			НалоговыйУчет.ЗаполнитьНалоговуюНакладнуюПоОснованию(ЭтотОбъект, Основание);
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Если ТипОснования = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.НалоговаяНакладная.СтруктураДополнительныхДанныхФормы());
	КонецЕсли;
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
	
	Если Не ЗначениеЗаполнено(Основание) Тогда
		КтоВыписалНалоговуюНакладную = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалНалоговуюНакладную");
		// Этот документ всегда имеет установленный флаг УчитыватьНДС
		УчитыватьНДС = Истина;
		СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
		СчетДт  = ПланыСчетов.Хозрасчетный.ВычетыИзДохода;
		
		Если СчетУчетаНДС.Пустая() Тогда
			Если  ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
			  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
			  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации 
			  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации Тогда
				СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
				СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;		
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
				СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;	
			ИначеЕсли НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
				СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
				СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
            СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
		КонецЕсли;	
		
		УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
	КонецЕсли; 
	
	
	
КонецПроцедуры // ОбработкаЗаполнения()


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если Товары.Количество() > 0
	   И (ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента) Тогда

		Товары.Очистить();

	КонецЕсли;


	// Если договор внешнеэкономический, либо это спец операции -  надо почистить закладки
	Если ВозвратнаяТара.Количество() > 0
		И (ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС) Тогда

		ВозвратнаяТара.Очистить();

	КонецЕсли;
	Если Услуги.Количество() > 0
		И ( ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС) Тогда

		Услуги.Очистить();

	КонецЕсли;	
	Если ОС.Количество() > 0
		И ( ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации) Тогда

		ОС.Очистить();

	КонецЕсли;	
	Если НематериальныеАктивы.Количество() > 0
		И ( ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОблагаемыеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента) Тогда

		НематериальныеАктивы.Очистить();

	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
		//очистим колонки СчетУчетаНДС и ВидНалоговойДеятелности в ТЧ товары и ОС
		
		Для каждого Строка Из Товары Цикл
			Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
			Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЦикла;
		Для каждого Строка Из ОС Цикл
			Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
			Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЦикла;
		Для каждого Строка Из НематериальныеАктивы Цикл
			Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();		
			Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПродажаНижеОбычнойЦены Тогда
		
		Для каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.ЦенаОбычная = 0;
			СтрокаТЧ.СуммаПревышения = 0;
			СтрокаТЧ.СуммаНДСПревышения = 0;
		КонецЦикла; 
		Для каждого СтрокаТЧ Из Услуги Цикл
			СтрокаТЧ.ЦенаОбычная = 0;
			СтрокаТЧ.СуммаПревышения = 0;
			СтрокаТЧ.СуммаНДСПревышения = 0;
		КонецЦикла; 
		Для каждого СтрокаТЧ Из ОС Цикл
			СтрокаТЧ.ЦенаОбычная = 0;
			СтрокаТЧ.СуммаПревышения = 0;
			СтрокаТЧ.СуммаНДСПревышения = 0;
		КонецЦикла; 
		Для каждого СтрокаТЧ Из НематериальныеАктивы Цикл
			СтрокаТЧ.ЦенаОбычная = 0;
			СтрокаТЧ.СуммаПревышения = 0;
			СтрокаТЧ.СуммаНДСПревышения = 0;
		КонецЦикла; 
		
	КонецЕсли;
	
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары              , ЭтотОбъект, ПогрешностиОкругления, "Товары");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги              , ЭтотОбъект, ПогрешностиОкругления, "Услуги");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(ОС                  , ЭтотОбъект, ПогрешностиОкругления, "ОС");
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(НематериальныеАктивы, ЭтотОбъект, ПогрешностиОкругления, "НематериальныеАктивы");
	КонецЕсли;

	// Посчитать суммы документа и записать их в соответствующие реквизиты шапки для показа в журналах
	СуммаДокумента 	  = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект); //с учетом стоимости возвратнонй тары
	СуммаНДСДокумента = Ценообразование.ПолучитьНДСДокумента(ЭтотОбъект);
	
	Если  НЕ ЗначениеЗаполнено(Сделка) 
		И НЕ Сделка = Неопределено Тогда
		Сделка = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента)
		И НЕ (    ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		      ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
	    И ЗначениеЗаполнено(Сделка) Тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Услуги Цикл
		СтрокаТаблицы.НалоговоеНазначение = НалоговыйУчетПовтИсп.ОпределитьНалоговоеНазначениеУслугПоВидуДеятельностиНДС(НалоговыйУчет.ПолучитьВидДеятельностиНДС(СтрокаТаблицы.СтавкаНДС));
	КонецЦикла;
	
	УчетнаяПолитика	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	УчетнаяПолитикаНеЗадана = (УчетнаяПолитика = Неопределено);	
	Если УчетнаяПолитикаНеЗадана тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ 
		ИЛИ УчетнаяПолитикаНеЗадана 
		ИЛИ НЕ УчетнаяПолитика.ВестиРаздельнуюНумерациюНалоговыхНакладныхПоОбычнымЦенам = Истина  Тогда
		// манипуляций со служебной налоговой не делаем
	ИначеЕсли ПродажаНижеОбычнойЦены Тогда
		
		Если ЗначениеЗаполнено(НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены)  Тогда
			Если НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект() = Неопределено Тогда
				НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены = Неопределено;	
			КонецЕсли;
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
			
			
			// в начале получим номер, если его еще нет, т.к. хорошо бы номер основной налоговой был меньше налоговой по ОЦ
			Если НЕ ЗначениеЗаполнено(Номер) Тогда
				УстановитьНовыйНомер();
			КонецЕсли;	
			
			Док = Документы.НалоговаяНакладная.СоздатьДокумент();	
			ЗаполнитьЗначенияСвойств(Док, ЭтотОбъект);
			
			Док.Номер = "";
			Док.ПродажаНижеОбычнойЦены = Ложь;
			Док.ПодтверждаетсяГТД = Ложь;
			Док.Проведен = Ложь;
			Док.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Неопределено;
			Док.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены 		   = Неопределено;
			
			Док.УстановитьНовыйНомер();
			Док.ОбменДанными.Загрузка = Истина;
			Док.Записать(РежимЗаписиДокумента.Запись);
			
			// пропишем вспомогательный документ для номера в реквизит
			НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены = Док.Ссылка; 
			
		Иначе	
			
			// возможно нужно изменить номер документа (при изменении даты/организации)
			Док = НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект();	
			Док.Дата = Дата;
			Док.Организация = Организация;
			ОбщегоНазначения.ПроверитьНомерНалоговогоДокумента(Док);
			Если Не ЗначениеЗаполнено(Док.Номер) Тогда
				Док.УстановитьНовыйНомер();
				Док.ОбменДанными.Загрузка = Истина;
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
		    // "освободим" сформированную налоговую
			Док = НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект();	
			Док.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Неопределено;
			Док.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены 		   = Неопределено;
			Док.ОбменДанными.Загрузка = Истина;
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены = Неопределено;
		
	КонецЕсли;
	
	
КонецПроцедуры // ПередЗаписью


Функция ПодготовитьСтруктуруШапкиДокумента(Отказ, Заголовок = "")
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "Организация"                      , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидДоговора"                      , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке,  "ДоговорКонтрагента", "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// дополним структуру значением виртуального реквизита
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
	
	// Прежде всего, проверим заполнение реквизита Организация в шапке документа
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	// Теперь позовем общую процедуру проверки
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Организация не заполнена, получать учетную политику нет смысла
	Если Отказ Тогда
		Возврат СтруктураШапкиДокумента;
	КонецЕсли;
	
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация,истина, Заголовок);
	
	Если НЕ Отказ Тогда
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитикаРегл.ЕстьНДС);
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции


Процедура ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА)
	
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияПревышение = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;

	
	// ТОВАРЫ
	// Получим необходимые для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей        = Новый Структура();
    СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("Количество"            	, "Количество");	
	СтруктураПолей.Вставить("Цена"                      , "Цена");	
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоСкидкиНаценки"	, "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("Характеристика"			, "ХарактеристикаНоменклатуры");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПолей.Вставить("ТекстДляПечатиВКолонкеКоличество", "Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	// УСЛУГИ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "Услуги".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Содержание");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.БазоваяЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("Количество"            	, "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");		
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");	
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"		, "ПроцентСкидкиНаценки");	
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПолей.Вставить("ТекстДляПечатиВКолонкеКоличество", "Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
	СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Услуг для проведения или печати
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	
	// ОСНОВНЫЕ СРЕДСТВА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ОС".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "ОсновноеСредство.НаименованиеПолное");
	СтруктураПолей.Вставить("Цена"                      , "Сумма");			
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");	
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт.");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	СтруктураПростыхПолей.Вставить("ПроцентСкидкиНаценки", 0);
    СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Основных Средств для проведения или печати
	ТаблицаПоОС = ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	// НЕМАТЕРИАЛЬНЫЕ АКТИВЫ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "НематериальныеАктивы".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "НематериальныйАктив.НаименованиеПолное");
	СтруктураПолей.Вставить("Цена"                      , "Сумма");			
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ДатаОтгрузкиОплаты"  		, "ДатаОтгрузкиОплаты");
	СтруктураПолей.Вставить("СтатьяКнигиПродаж"  		, "СтатьяКнигиПродаж");	
	СтруктураПолей.Вставить("СуммаПревышения"           , "СуммаПревышения");
	СтруктураПолей.Вставить("СуммаНДСПревышения"        , "СуммаНДСПревышения");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт.");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
	СтруктураПростыхПолей.Вставить("ПроцентСкидкиНаценки", 0);
    СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу Нематериальных активов для проведения или печати
	ТаблицаПоНМА = ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента, ПогрешностиОкругления, ПогрешностиОкругленияПревышение);

	// ТАРА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ВозвратнаяТара".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"  , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);

	// Подготовим таблицу тары для проведения или печати.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(СтруктураШапкиДокумента.Дата), Отказ, СтруктураШапкиДокумента.Организация,"Нал");
		
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитика.ЕстьНалогНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ЕстьНДС);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
	
	
	Если ЗначениеЗаполнено(ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Подготовим структуру шапки документа
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(Отказ, Заголовок); 
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим таблицы
	ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиНематериальныеАктивы(ТаблицаПоНМА, СтруктураШапкиДокумента, Отказ, Заголовок);


	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,
							ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()


Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитика	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	УчетнаяПолитикаНеЗадана = (УчетнаяПолитика = Неопределено);
	Если УчетнаяПолитикаНеЗадана тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ 
	   И НЕ УчетнаяПолитикаНеЗадана 
	   И УчетнаяПолитика.ВестиРаздельнуюНумерациюНалоговыхНакладныхПоОбычнымЦенам = Истина   
	   И ПродажаНижеОбычнойЦены Тогда
	   
	   	// установим в служебном документе ссылку на текущую накладную.
		Если ЗначениеЗаполнено(НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
			
			Док = НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект();	
			
			Если НЕ Док.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Ссылка Тогда
				Док.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Ссылка;
				Док.ОбменДанными.Загрузка = Истина;
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены = Неопределено;
	ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Неопределено;
	
КонецПроцедуры

Процедура ЗаполнитьВидДоговора() Экспорт

	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		ВидДоговора = "Договір бартерної поставки";
	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
		  ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	    ВидДоговора = "Договір комісії";
	Иначе
		ВидДоговора = "Договір поставки";
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию() Экспорт
	
	Если  НЕ ВалютаДокумента = мВалютаРегламентированногоУчета 
		И НЕ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента Тогда
		
		ТипПричиныНевыдачиПокупателю = 7;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа Тогда
		
	    ТипПричиныНевыдачиПокупателю = 4;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС Тогда
		
	    ТипПричиныНевыдачиПокупателю = 5;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОблагаемыеОперации 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации Тогда
		
	    ТипПричиныНевыдачиПокупателю = 11;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент.ИНН)
   		    ИЛИ Найти("0123456789",Лев(СокрЛ(Контрагент.ИНН),1)) = 0 Тогда		
		
		ТипПричиныНевыдачиПокупателю = 2;
		
	ИначеЕсли ПродажаНижеОбычнойЦены Тогда
		
		ТипПричиныНевыдачиПокупателю = 1;
		
	Иначе	
		
		ТипПричиныНевыдачиПокупателю = 0;
		
	КонецЕсли;
	
КонецПроцедуры


мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мВидОперацииДляЗаполнения = Неопределено;
мЗаполнятьВозвратнуюТару  = Истина;
мНеОткрыватьФормуДокумента = Ложь;
