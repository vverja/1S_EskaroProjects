////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Выполняет распределение общей суммы дивидендов между акционерами пропорционально количеству акций
Процедура Рассчитать() Экспорт
	
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	ДатыПособий.НомерСтроки,
                          |	ДатыПособий.Сотрудник,
                          |	ДатыПособий.Физлицо,
                          |	ДатыПособий.ВидРасчета,
                          |	ДатыПособий.ДатаСобытия,
                          |	ГосударственныеПособия.Размер  КАК Результат
                          |ИЗ
                          |	(ВЫБРАТЬ
                          |		МАКСИМУМ(ГосударственныеПособия.Период) КАК Период,
                          |		НачислениеЕдиновременныхПособийЗаСчетФССНачисления.НомерСтроки КАК НомерСтроки,
                          |		НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Сотрудник КАК Сотрудник,
                          |		НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Физлицо КАК Физлицо,
                          |		НачислениеЕдиновременныхПособийЗаСчетФССНачисления.ВидРасчета КАК ВидРасчета,
                          |		НачислениеЕдиновременныхПособийЗаСчетФССНачисления.ДатаСобытия КАК ДатаСобытия
                          |	ИЗ
                          |		Документ.НачислениеЕдиновременныхПособийЗаСчетФСС.Начисления КАК НачислениеЕдиновременныхПособийЗаСчетФССНачисления
                          |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыЗаконодательноУстановленныхВыплат КАК ГосударственныеПособия
                          |			ПО НачислениеЕдиновременныхПособийЗаСчетФССНачисления.ВидРасчета = ГосударственныеПособия.ВидРасчета И НачислениеЕдиновременныхПособийЗаСчетФССНачисления.ДатаСобытия >= ГосударственныеПособия.Период
                          |	
                          |	ГДЕ
                          |		НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Ссылка = &ДокументСсылка
                          |	
                          |	СГРУППИРОВАТЬ ПО
                          |		НачислениеЕдиновременныхПособийЗаСчетФССНачисления.НомерСтроки,
                          |		НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Сотрудник,
                          |		НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Физлицо,
                          |		НачислениеЕдиновременныхПособийЗаСчетФССНачисления.ВидРасчета,
                          |		НачислениеЕдиновременныхПособийЗаСчетФССНачисления.ДатаСобытия
                          |	) КАК ДатыПособий
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыЗаконодательноУстановленныхВыплат КАК ГосударственныеПособия
                          |		ПО ДатыПособий.Период = ГосударственныеПособия.Период И ДатыПособий.ВидРасчета = ГосударственныеПособия.ВидРасчета");
	
	Запрос.УстановитьПараметр("ДокументСсылка",Ссылка);
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "
	|Выбрать 
	|	ПериодРегистрации, 
	|	Организация,
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Организация ИНАЧЕ Организация.ГоловнаяОрганизация КОНЕЦ Как ГоловнаяОрганизация, 
    |	Организация КАК ОбособленноеПодразделение,
	|	Ответственный, 
	| 	Ссылка
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
   	Запрос.УстановитьПараметр("ДатаНачисления", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
    // Описание текста запроса:
    // 1. Выборка "НачислениеЕдиновременныхПособийЗаСчетФССНачисления": 
	//		Выбираются строки документа.  
	// 2. Выборка "РаботникиОрганизаций": 
	//		Из регистра сведений о работниках выбираем информацию о подразделении работника организации
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачислениеЕдиновременныхПособийЗаСчетФССНачисления.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР КОГДА НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) 
	|         ТОГДА НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Сотрудник.ОсновноеНазначение
	|         ИНАЧЕ НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Сотрудник
	|	КОНЕЦ КАК Сотрудник,
	|	НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Сотрудник КАК Назначение,
	|	НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|	НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Сотрудник.Наименование КАК ФизЛицоНаименование,
	|	НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Результат,
	|	НачислениеЕдиновременныхПособийЗаСчетФССНачисления.ВидРасчета,
	|	НачислениеЕдиновременныхПособийЗаСчетФССНачисления.ДатаСобытия,
	|	РаботникиОрганизаций.ПодразделениеОрганизации
	|ИЗ
	|	Документ.НачислениеЕдиновременныхПособийЗаСчетФСС.Начисления КАК НачислениеЕдиновременныхПособийЗаСчетФССНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачисления, Организация = &ГоловнаяОрганизация И (Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство ИЛИ (Сотрудник.ВидЗанятости) ЕСТЬ NULL ) И Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	НачислениеЕдиновременныхПособийЗаСчетФСС.Сотрудник ИЗ Документ.НачислениеЕдиновременныхПособийЗаСчетФСС.Начисления КАК НачислениеЕдиновременныхПособийЗаСчетФСС ГДЕ 	НачислениеЕдиновременныхПособийЗаСчетФСС.Ссылка = &ДокументСсылка )) КАК РаботникиОрганизаций
	|		ПО РаботникиОрганизаций.Сотрудник = НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Сотрудник
	|
	|ГДЕ
	|	НачислениеЕдиновременныхПособийЗаСчетФССНачисления.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано ответственное лицо!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизаций" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан работник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидПособия
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид пособия!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаСобытия
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаСобытия) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата события!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	
	Движение = Движения.ОсновныеНачисленияРаботниковОрганизаций.Добавить();

	// Свойства
	Движение.ПериодРегистрации				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияНачало			= ВыборкаПоСтрокамДокумента.ДатаСобытия;
	Движение.ПериодДействияКонец			= ВыборкаПоСтрокамДокумента.ДатаСобытия;
	Движение.БазовыйПериодНачало			= ВыборкаПоСтрокамДокумента.ДатаСобытия;
	Движение.БазовыйПериодКонец				= ВыборкаПоСтрокамДокумента.ДатаСобытия;
	Движение.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчета;
	
	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Назначение						= ВыборкаПоСтрокамДокумента.Назначение;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;

	// Реквизиты
	Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	
	Движение.Авторасчет						= Истина;
	
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// Свойства
	Движение.Период                 = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Движение.СчетУчета			    = ВыборкаПоТЧ.ВидРасчета.СчетУчета;
	Движение.Сотрудник              = ВыборкаПоТЧ.Сотрудник;
	Движение.ПериодВзаиморасчетов	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат; 
	
	//Реквизиты
	Движение.КодОперации			= Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления;
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			
			// получим реквизиты табличной части
			РезультатЗапросаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента);
			ВыборкаПоНачислениям = РезультатЗапросаПоНачислениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					ИспользуетсяЕСВ = ПроведениеРасчетов.ИспользуетсяЕСВ(ПериодРегистрации); 
					Если НЕ ИспользуетсяЕСВ Тогда
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					Иначе
						Если  НЕ ВыборкаПоНачислениям.ВидРасчета.НачислениеЗаСчетФСС Тогда
							ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
						КонецЕсли;
                  	КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(Начисления);
	
КонецПроцедуры

