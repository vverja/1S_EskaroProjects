Перем мДатаНачалаРаботы;
Перем ОткрытаФормаДокумента Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДЛЯ ПЕЧАТЬ

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	
	СтруктураПечатныхФорм.Вставить("ПечатнаяФормаНДФЛ",НСтр("ru='НДФЛ';uk='ПДФО'"));
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",   Ссылка);
    Запрос.УстановитьПараметр("ДатаДокумента",	  Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.УстановитьПараметр("Руководитель",	  Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		Запрос.УстановитьПараметр("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		
		Запрос.Текст =
		"ВЫБРАТЬ Разрешенные 
		|	Зарплата.Номер										КАК НомерДок,
		|	Зарплата.Дата										КАК ДатаДок,
		|	Зарплата.Организация.НаименованиеПолное				КАК НазваниеОрганизации,
		|	Зарплата.ПодразделениеОрганизации.Наименование		КАК НазваниеПодразделенияОрганизации,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихРуководитель.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОРуководителя,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихГлБух.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихГлБух.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОГлБуха,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.Должность.Наименование КАК ДолжностьРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.Должность.Наименование
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК Зарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследнихРуководитель
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо = ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо
		|		ПО Зарплата.Организация = ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &ГлавныйБухгалтер) КАК ОтветственныеЛицаОрганизацийСрезПоследнихГлБух
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследнихГлБух
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ФизическоеЛицо = ФИОФизЛицСрезПоследнихГлБух.ФизЛицо
		|		ПО Зарплата.Организация = ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	Зарплата.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.УстановитьПараметр("ТабельныйНомер", "");
		Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
		Запрос.Текст = "
		|ВЫБРАТЬ Разрешенные 
		|	ЗарплатаРаботники.Физлицо							КАК Физлицо,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  ТОГДА ЗарплатаРаботники.Физлицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КОНЕЦ КАК ФИО,
		|	РаботникиОрганизации.Должность						КАК Должность,
		|	РаботникиОрганизации.Сотрудник.Код					КАК ТабельныйНомер
		|
		|ИЗ	Документ.НачислениеЗарплатыРаботникамОрганизаций.РаботникиОрганизации КАК ЗарплатаРаботники
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, 
		|			Физлицо В (
		|				ВЫБРАТЬ РАЗЛИЧНЫЕ 	
		|					ЗарплатаРаботники.Физлицо КАК Физлицо 
		|				ИЗ Документ.НачислениеЗарплатыРаботникамОрганизаций.РаботникиОрганизации КАК ЗарплатаРаботники 
		|				ГДЕ 	ЗарплатаРаботники.Ссылка = &ДокументСсылка 
		|			)) КАК ФИОФизЛицСрезПоследних
		|	ПО ЗарплатаРаботники.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, 
		|			 Сотрудник В (
		|				ВЫБРАТЬ РАЗЛИЧНЫЕ 	
		|					ЗарплатаРаботники.Сотрудник КАК Сотрудник
		|					ИЗ Документ.НачислениеЗарплатыРаботникамОрганизаций.РаботникиОрганизации КАК ЗарплатаРаботники 
		|				ГДЕ 	ЗарплатаРаботники.Ссылка = &ДокументСсылка 
		|			)) КАК РаботникиОрганизации
		|	ПО ЗарплатаРаботники.Сотрудник = РаботникиОрганизации.Сотрудник
		|	И РаботникиОрганизации.Организация = &Организация
		|
		|ГДЕ
		|	ЗарплатаРаботники.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо";

	ИначеЕсли Режим = "ПоТабличнойЧастиНДФЛ" Тогда
		
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.УстановитьПараметр("ТабельныйНомер", "");
		Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
		Запрос.Текст = "
		|ВЫБРАТЬ Разрешенные 
		|	НДФЛ.Сотрудник	КАК Сотрудник,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  ТОГДА НДФЛ.Сотрудник.Физлицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КОНЕЦ+"" (""+НДФЛ.Сотрудник.ФизЛицо.КодПоДРФО+"")"" КАК СотрудникИНН,
		|	НДФЛ.Доход	КАК Доход,
		|	НДФЛ.Налог	КАК Налог,
		|	НДФЛ.ДоходНДФЛ	КАК ДоходНДФЛ,
		|	НДФЛ.НалоговыйПериод	КАК НалоговыйПериод
		|
		|ИЗ	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК НДФЛ
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, 
		|			Физлицо В (
		|				ВЫБРАТЬ РАЗЛИЧНЫЕ 	
		|					ЗарплатаРаботники.Физлицо КАК Физлицо 
		|				ИЗ Документ.НачислениеЗарплатыРаботникамОрганизаций.РаботникиОрганизации КАК ЗарплатаРаботники 
		|				ГДЕ 	ЗарплатаРаботники.Ссылка = &ДокументСсылка 
		|			)) КАК ФИОФизЛицСрезПоследних
		|	ПО НДФЛ.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|ГДЕ
		|	НДФЛ.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

Функция ПечатьНДФЛ()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизаций_Ведомость";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет 		= ПолучитьМакет("ПечатнаяФормаНДФЛ");
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиНДФЛ").Выбрать();
	
	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаКолонтитул		= Макет.ПолучитьОбласть("Колонтитул");
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
	
	//ОбластьМакетаШапка.Параметры.ПериодОтчета = "за " + Формат(ПериодРегистрации, "Л=uk_UA; ДФ='MMMM yyyy'");
	ОбластьМакетаШапка.Параметры.Заполнить(ЭтотОбъект);
	ОбластьМакетаШапка.Параметры.ИмяОрганизации = Организация.Наименование;
	ОбластьМакетаШапка.Параметры.ПериодРегистрации = Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	КодЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, КонецМесяца(ПериодРегистрации), СписокПоказателей).КодПоЕДРПОУ;
	Для Инд = 1 По 8 Цикл
		ОбластьМакетаШапка.Параметры["ЕДРПОУ" + Инд] = Сред(КодЕДРПОУ, Инд, 1);
	КонецЦикла; 
	
	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	ТабДокумент.Вывести(ОбластьМакетаКолонтитул);
	
	ВыведеноСтраниц = 0; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; ИтогНалог = 0;
    // выводим данные по строкам документа.
	Пока ВыборкаРаботники.Следующий() Цикл
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакетаСтрока.Параметры.НалоговыйПериод = Формат(ВыборкаРаботники.НалоговыйПериод, "Л="+Локализация.ОпределитьКодЯзыкаДляФормат(Локализация.КодЯзыкаИнтерфейса())+"; ДФ='MMMM гггг'");
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
	    ОбластьМакетаСтрока.Параметры.НомерПП = ВыведеноСтрок;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			
			ТабДокумент.Вывести(ОбластьМакетаПодвал);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаКолонтитул);
			ВыведеноСтраниц = ВыведеноСтраниц + 1;
			ИтогоНаСтранице = 0;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		ИтогНалог = ИтогНалог + ОбластьМакетаСтрока.Параметры.Налог;

	КонецЦикла;
	
	ОбластьМакетаПодвал.Параметры.ИтогНалог = ИтогНалог;
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТабельБланк()

#Если Клиент Тогда
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru='Документ можно распечатать только после его записи';uk='Документ можна роздрукувати тільки після його запису'"));
		Возврат;
	КонецЕсли; 

	Если ИмяМакета = "ПечатнаяФормаНДФЛ" тогда
		
		ТабДокумент = ПечатьНДФЛ();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, НСтр("ru='НДФЛ';uk='ПДФО'"), НепосредственнаяПечать);
		
	КонецЕсли;


КонецПроцедуры // Печать

#КонецЕсли


#Если Клиент Тогда
	
// Функция заполняет табличный документ "РасчетныйЛисток"
//
// Параметры:
//	ФизЛицо	- элемент справочника "ФизическиеЛица"
//
// Возвращаемое значение:
//	Табличный документ с заполненным расчетным листком
//
Функция ЗаполнитьТаблицуРасчетногоЛистка(ТекущийСотрудник) Экспорт
	
	ЗапросРЛ = Новый Запрос;
	ЗапросРЛ.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
	ЗапросРЛ.УстановитьПараметр("КонецПериодаРегистрации",		КонецМесяца(ПериодРегистрации));
	ЗапросРЛ.УстановитьПараметр("Приход",						ВидДвиженияНакопления.Приход);
	ЗапросРЛ.УстановитьПараметр("Расход",						ВидДвиженияНакопления.Расход);
	Авансы = Новый Массив;
	Авансы.Добавить(Перечисления.ХарактерВыплатыЗарплаты.Аванс);
	ЗапросРЛ.УстановитьПараметр("Аванс",						Авансы);
	
	ЗапросРЛ.УстановитьПараметр("Организация",					Организация);
	ЗапросРЛ.УстановитьПараметр("ГоловнаяОрганизация",			ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросРЛ.УстановитьПараметр("Работник",						ТекущийСотрудник);
	ЗапросРЛ.УстановитьПараметр("Ссылка",						Ссылка);
		
	//из запроса исключаем данные по регистратору - этот документ, если документ проведен и модифицирован
	ИсключитьДанныеПоРегистратору = Проведен И Модифицированность();
	
	//добавляем данные в расчетный листок из документа, если он не проведен или проведен и модифицирован
	ДобавитьДанныеИзДокумента = Модифицированность() Или Не Проведен;
	
	Если ДобавитьДанныеИзДокумента Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Работник",ТекущийСотрудник);
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник = &Работник
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации = &ПериодРегистрации
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация = &Организация";
	КонецЕсли;

	ТекстНеполаченоФСС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтметкаНеоплаченныхНачисленийФССВРасчетныхЛистках");
	
	Если ТекстНеполаченоФСС <> "" Тогда
		ЗапросФСС = Новый Запрос();
		ЗапросФСС.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросФСС.УстановитьПараметр("ПериодРегистрации", 	  	    ПериодРегистрации);
		ЗапросФСС.УстановитьПараметр("КонецПериодаРегистрации", 	КонецМесяца(ПериодРегистрации));
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| ОсновныеНачисленияРаботниковОрганизации.Регистратор КАК Документ
		|ПОМЕСТИТЬ ВТНачисленияФСС
		|ИЗ
		| РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
		|ГДЕ
		| ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		| И ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.НачислениеЗаСчетФСС
		| И ОсновныеНачисленияРаботниковОрганизации.Результат <> 0
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		ЗапросФСС.Выполнить();
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| ВзаиморасчетыФСС.Документ КАК Документ
		|ПОМЕСТИТЬ ВТПолученоОтФСС
		|ИЗ  РегистрНакопления.ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыФСС
		|ГДЕ
		|	ВзаиморасчетыФСС.Документ.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации 
		|	И ВзаиморасчетыФСС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		ЗапросФСС.Выполнить();
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| НачисленияФСС.Документ КАК Документ
		|ИЗ  ВТНачисленияФСС КАК НачисленияФСС
		| ЛЕВОЕ СОЕДИНЕНИЕ
		| ВТПолученоОтФСС КАК ПолученоОтФСС
		| ПО НачисленияФСС.Документ = ПолученоОтФСС.Документ
		|ГДЕ
		|	ПолученоОтФСС.Документ ЕСТЬ NULL
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		НеоплаченоФСС = ЗапросФСС.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
		ТекстНеполаченоФСС = " " + ТекстНеполаченоФСС;
	Иначе
		НеоплаченоФСС = Новый Массив();
	КонецЕсли;	
	ЗапросРЛ.УстановитьПараметр("НеоплаченоФСС",  НеоплаченоФСС);
	ЗапросРЛ.УстановитьПараметр("ТекстНеполаченоФСС",  ТекстНеполаченоФСС);

	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияУдержания.ВидДвижения КАК ВидДвижения,
	|	НачисленияУдержания.НомерСтроки КАК НомерСтроки,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.ВидРасчета КАК ВидРасчета,
	|	НачисленияУдержания.ПорядокВидаРасчета КАК ПорядокВидаРасчета,
	|	НачисленияУдержания.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияУдержания.ПериодДействияКонец КАК ПериодДействияКонец,
	|	НачисленияУдержания.ОтработаноДней КАК ОтработаноДней,
	|	НачисленияУдержания.ОтработаноЧасов КАК ОтработаноЧасов,
	|	НачисленияУдержания.ОплаченоДней КАК ОплаченоДней,
	|	НачисленияУдержания.ОплаченоЧасов КАК ОплаченоЧасов,
	|	НачисленияУдержания.Начисления КАК Начисления,
	|	НачисленияУдержания.Удержания КАК Удержания,
	|	Сальдо.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
	|	Сальдо.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток,
	|	НачисленияУдержания.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(НачисленияУдержания.Регистратор) КАК ОписаниеРегистратора
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
	|				ТОГДА 6
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ВидДвижения,
	|		ОсновныеНачисленияРаботниковОрганизации.Регистратор КАК Регистратор,
	|		ОсновныеНачисленияРаботниковОрганизации.Организация КАК Организация,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации КАК ПериодРегистрации,
	|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|		ВЫБОР КОГДА ОсновныеНачисленияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ЗаменыОрганизаций 
	|				И ОсновныеНачисленияРаботниковОрганизации.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Замещение)
	|				ТОГДА ""Замена: ""
	|			 КОГДА ОсновныеНачисленияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ЗаменыОрганизаций 
	|				И ОсновныеНачисленияРаботниковОрганизации.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Совмещение)
	|				ТОГДА ""Совмещение: ""
	|				ИНАЧЕ """"
	|		КОНЕЦ
	|		+ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизации.Назначение.ВидЗанятости, Значение(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				ТОГДА """"
	|			ИНАЧЕ "" (по внутр. совмест-ву)""
	|		КОНЕЦ
	|		 + ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.НачислениеЗаСчетФСС И ОсновныеНачисленияРаботниковОрганизации.Регистратор В (&НеоплаченоФСС)
	|				ТОГДА &ТекстНеполаченоФСС
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК ВидРасчета,
	|		""А"" + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Код КАК ПорядокВидаРасчета,
	|		ОсновныеНачисленияРаботниковОрганизации.НомерСтроки КАК НомерСтроки,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало КАК ПериодДействияНачало,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец КАК ПериодДействияКонец,
	|		ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней КАК ОтработаноДней,
	|		ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов КАК ОтработаноЧасов,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимДням)
	|				ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоКалендарнымДням)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
	|				ТОГДА 0
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОплаченоДней,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимДням)
	|				ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоКалендарнымДням)
	|				ТОГДА 0
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|			ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
	|			ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОплаченоЧасов,
	|		ОсновныеНачисленияРаботниковОрганизации.Результат КАК Начисления,
	|		0 КАК Удержания,
	|		NULL КАК СуммаВзаиморасчетовНачальныйОстаток,
	|		NULL КАК СуммаВзаиморасчетовКонечныйОстаток
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
	|	ГДЕ
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ОсновныеНачисленияРаботниковОрганизации.Организация = &Организация
	|		И ОсновныеНачисленияРаботниковОрганизации.Сотрудник = &Работник
	|		И (НЕ(ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней = 0
	|					И ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов = 0
	|					И ВЫБОР
	|						КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|							ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|						ИНАЧЕ 0
	|					КОНЕЦ = 0
	|					И ВЫБОР
	|						КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|							ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
	|							ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы)
	|							ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|						ИНАЧЕ 0
	|					КОНЕЦ = 0
	|					И ОсновныеНачисленияРаботниковОрганизации.Результат = 0))
	|		"+?(ИсключитьДанныеПоРегистратору,"И ОсновныеНачисленияРаботниковОрганизации.Регистратор <> &Ссылка","")+"	
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		5,
	|		УдержанияРаботниковОрганизации.Регистратор,
	|		УдержанияРаботниковОрганизации.Организация,
	|		УдержанияРаботниковОрганизации.ПериодРегистрации,
	|		УдержанияРаботниковОрганизации.Сотрудник,
	|		УдержанияРаботниковОрганизации.ВидРасчета.Наименование,
	|		""А"" + УдержанияРаботниковОрганизации.ВидРасчета.Код,
	|		NULL,
	|		УдержанияРаботниковОрганизации.БазовыйПериодНачало,
	|		УдержанияРаботниковОрганизации.БазовыйПериодКонец,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		УдержанияРаботниковОрганизации.Результат,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
	|	ГДЕ
	|		УдержанияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И УдержанияРаботниковОрганизации.Организация = &Организация
	|		И УдержанияРаботниковОрганизации.Сотрудник = &Работник
	|		"+?(ИсключитьДанныеПоРегистратору,"И УдержанияРаботниковОрганизации.Регистратор <> &Ссылка","")+"	
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		3,
	|		ВзносыВФонды.Регистратор,
	|		ВзносыВФонды.Организация,
	|		ВзносыВФонды.ПериодРегистрации,
	|		ВзносыВФонды.Сотрудник,
	|		ВЫБОР КОГДА ВзносыВФонды.ВидРасчета.ЕСВ 
	|			ТОГДА ""ЕСВ"" 
	|			ИНАЧЕ ВзносыВФонды.Налог.Наименование
	|		КОНЕЦ,
	|		""Б"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(ВзносыВФонды.Результат),
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
	|	ГДЕ
	|		ВзносыВФонды.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ВзносыВФонды.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Взносы)
	|		И ВзносыВФонды.Организация = &Организация
	|		И ВзносыВФонды.Сотрудник = &Работник
	|		"+?(ИсключитьДанныеПоРегистратору,"И ВзносыВФонды.Регистратор <> &Ссылка","")+"	
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзносыВФонды.Организация,
	|		ВзносыВФонды.ПериодРегистрации,
	|		НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ),
	|		ВзносыВФонды.Сотрудник,
	|		ВЫБОР КОГДА ВзносыВФонды.ВидРасчета.ЕСВ 
	|			ТОГДА ""ЕСВ"" 
	|			ИНАЧЕ ВзносыВФонды.Налог.Наименование
	|		КОНЕЦ,
	|		ВзносыВФонды.Регистратор
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		4,
	|		ВзаиморасчетыПоНДФЛ.Регистратор,
	|		ВзаиморасчетыПоНДФЛ.Организация,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период, МЕСЯЦ),
	|		ВзаиморасчетыПоНДФЛ.Сотрудник,
	|		""НДФЛ "",
	|		""Б"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(ВзаиморасчетыПоНДФЛ.Налог),
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
	|	ГДЕ
	|		ВзаиморасчетыПоНДФЛ.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ВзаиморасчетыПоНДФЛ.ВидДвижения = &Приход
	|		И ВзаиморасчетыПоНДФЛ.Организация = &Организация
	|		И ВзаиморасчетыПоНДФЛ.Сотрудник = &Работник
	|		"+?(ИсключитьДанныеПоРегистратору,"И ВзаиморасчетыПоНДФЛ.Регистратор <> &Ссылка","")+"	
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзаиморасчетыПоНДФЛ.Организация,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ),
	|		ВзаиморасчетыПоНДФЛ.Сотрудник,
	|		ВзаиморасчетыПоНДФЛ.Регистратор
	|	
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		5,
	|		ПогашениеЗаймовРаботникамиОрганизаций.Регистратор,
	|		ПогашениеЗаймовРаботникамиОрганизаций.Организация,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник,
	|		""Погашение займа"",
	|		""В"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(ПогашениеЗаймовРаботникамиОрганизаций.ОсновнойДолг + ПогашениеЗаймовРаботникамиОрганизаций.Проценты),
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОрганизаций
	|	ГДЕ
	|		ПогашениеЗаймовРаботникамиОрганизаций.ВидДвижения = &Расход
	|		И ПогашениеЗаймовРаботникамиОрганизаций.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ПогашениеЗаймовРаботникамиОрганизаций.УдержаноИзЗарплаты
	|		И ПогашениеЗаймовРаботникамиОрганизаций.Организация = &Организация
	|		И ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник = &Работник
	|		"+?(ИсключитьДанныеПоРегистратору,"И ПогашениеЗаймовРаботникамиОрганизаций.Регистратор <> &Ссылка","")+"	
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПогашениеЗаймовРаботникамиОрганизаций.ДоговорЗайма,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		ПогашениеЗаймовРаботникамиОрганизаций.Организация,
	|		ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник,
	|		ПогашениеЗаймовРаботникамиОрганизаций.Регистратор,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ)
	|	
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		8,
	|		Взаиморасчеты.Регистратор,
	|		Взаиморасчеты.Организация,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
	|		Взаиморасчеты.Сотрудник,
	|		ВЫБОР
	|			КОГДА Взаиморасчеты.СпособВыплаты = Значение(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|				ТОГДА ""Через кассу ""
	|			КОГДА Взаиморасчеты.СпособВыплаты = Значение(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|				ТОГДА ""Перечислено в банк ""
	|			ИНАЧЕ ""Способ выплаты не указан ""
	|		КОНЕЦ + ВЫБОР
	|			КОГДА Взаиморасчеты.ХарактерВыплаты В(&Аванс)
	|				ТОГДА ""(аванс)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				ТОГДА ""(под расчет)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов > 0
	|				ТОГДА ""(не указано)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов < 0
	|				ТОГДА ""(погашено задолженности)""
	|			ИНАЧЕ ""(межрасчет)""
	|		КОНЕЦ,
	|		""Г"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(Взаиморасчеты.СуммаВзаиморасчетов - Взаиморасчеты.СуммаОкругления),
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
	|	ГДЕ
	|		Взаиморасчеты.ВидДвижения = &Расход
	|		И (Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ (Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата))
	|		И Взаиморасчеты.СуммаВзаиморасчетов <> 0
	|		И Взаиморасчеты.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И Взаиморасчеты.Организация = &Организация
	|		И Взаиморасчеты.Сотрудник = &Работник
	|		"+?(ИсключитьДанныеПоРегистратору,"И Взаиморасчеты.Регистратор <> &Ссылка","")+"	
	|	
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Взаиморасчеты.Организация,
	|		Взаиморасчеты.Сотрудник,
	|		ВЫБОР
	|			КОГДА Взаиморасчеты.СпособВыплаты = Значение(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|				ТОГДА ""Через кассу ""
	|			КОГДА Взаиморасчеты.СпособВыплаты = Значение(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|				ТОГДА ""Перечислено в банк ""
	|			ИНАЧЕ ""Способ выплаты не указан ""
	|		КОНЕЦ + ВЫБОР
	|			КОГДА Взаиморасчеты.ХарактерВыплаты В(&Аванс)
	|				ТОГДА ""(аванс)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				ТОГДА ""(под расчет)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов > 0
	|				ТОГДА ""(не указано)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = Значение(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов < 0
	|				ТОГДА ""(погашено задолженности)""
	|			ИНАЧЕ ""(межрасчет)""
	|		КОНЕЦ,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|	    Взаиморасчеты.Регистратор) КАК НачисленияУдержания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
	|				ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток
	|			ИЗ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.ОстаткиИОбороты(
	|					&ПериодРегистрации,
	|					&КонецПериодаРегистрации,
	|					Месяц,
	|					,
	|					Организация = &Организация
	|						И Сотрудник = &Работник) КАК ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты) КАК Сальдо
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДвижения,
	|	ПорядокВидаРасчета,
	|	ВидРасчета,
	|	ПериодДействияНачало";
		
	ЗапросРЛ.Текст		= ТекстЗапроса;
	РезультатЗапроса	= ЗапросРЛ.Выполнить();
	
	Макет						= ПолучитьМакет("РасчетныйЛисток");
	ОбластьШапка				= Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТЧ			= Макет.ПолучитьОбласть("Заголовок");
	ОбластьНачисленоУдержано	= Макет.ПолучитьОбласть("НачисленоУдержано");
	ОбластьНатурДоходыВыплаты	= Макет.ПолучитьОбласть("НатурДоходыВыплаты");
	ОбластьВсего				= Макет.ПолучитьОбласть("Всего");
	ОбластьНатуральныеДоходы	= Макет.ПолучитьОбласть("НатуральныеДоходы");
	ОбластьПодвал				= Макет.ПолучитьОбласть("Подвал");
	
	КолонкаНачислено		= 2;
	КолонкаПериодНачислено	= 3;
	КолонкаОтработаноДней	= 5;
	КолонкаОтработаноЧасов	= 6;
	КолонкаОплаченоДней		= 7;
	КолонкаОплаченоЧасов	= 8;
	КолонкаСуммаНачислено	= 9;
	КолонкаУдержано			= 11;
	КолонкаПериодУдержано	= 14;
	КолонкаСуммаУдержано	= 16;
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	НеНайденыЗаписиВЗапросе	= Истина;
		
	// В этот табличный документ будет собираться данные для РЛ
	ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
	
	ФИОФизлица = ТекущийСотрудник.Наименование;
	
	Если ДобавитьДанныеИзДокумента Тогда
		//к результату запроса необходимо добавить данные из табличных полей документа
		
		СтруктураПоиска    = Новый Структура("Сотрудник",ТекущийСотрудник);
		
		ТаблицаРезультатовЗапроса = РезультатЗапроса.Выгрузить();
		
		Если ТаблицаРезультатовЗапроса.Количество()>0 Тогда
			СуммаНаНачалоПериода = ТаблицаРезультатовЗапроса[0].СуммаВзаиморасчетовНачальныйОстаток;
			Если НЕ ЗначениеЗаполнено(СуммаНаНачалоПериода) Тогда
				СуммаНаНачалоПериода = 0;
			КонецЕсли; 
		Иначе	
			СуммаНаНачалоПериода = 0;
			ЗапросСуммаНаНачалоПериода = Новый Запрос;
			ЗапросСуммаНаНачалоПериода.УстановитьПараметр("Работник", ТекущийСотрудник);
			ЗапросСуммаНаНачалоПериода.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
			ЗапросСуммаНаНачалоПериода.УстановитьПараметр("КонецПериодаРегистрации",		КонецМесяца(ПериодРегистрации));
			ЗапросСуммаНаНачалоПериода.УстановитьПараметр("Организация",					Организация);


			ЗапросСуммаНаНачалоПериода.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(Сальдо.СуммаВзаиморасчетовНачальныйОстаток) КАК СуммаВзаиморасчетовНачальныйОстаток			
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.ОстаткиИОбороты(
			|			&ПериодРегистрации,
			|			&КонецПериодаРегистрации,
			|			Месяц,
			|			,
			|			Организация = &Организация
			|			И Сотрудник = &Работник) КАК ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты) КАК Сальдо    ";
			Выборка = ЗапросСуммаНаНачалоПериода.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				СуммаНаНачалоПериода = 	Выборка.СуммаВзаиморасчетовНачальныйОстаток;
			КонецЦикла

		КонецЕсли;
		
		Если ЗначениеЗаполнено(СуммаНаНачалоПериода) Тогда
			СуммаНаКонецПериода = СуммаНаНачалоПериода;
		Иначе
			СуммаНаКонецПериода = 0;
			СуммаНаНачалоПериода = 0;
		КонецЕсли;
		
		
		ТекстПериода = Формат(ПериодРегистрации, "ДФ = 'ММММ гггг ''г.'''");
		
		// Очистим временный табличный документ
		ВременныйТабличныйДокумент.Очистить();
		
		ОбластьШапка.Параметры.Работник = "Работник: " + ФИОФизлица;
		ВременныйТабличныйДокумент.Вывести(ОбластьШапка);

		ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧ);
		ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
			
		ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
			
		ВсегоНачисления = 0; КоличествоНачислений = 0;
		ВсегоУдержания = 0; КоличествоУдержаний  = 0;
		ИтогиНачисленийИУдержанийВыведены = Ложь;

		// Добавим основные начисления
		Строки = Начисления.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаНачислений Из Строки Цикл
			
			мВидЗанятости = "";
			Если СтрокаНачислений.Назначение.ОсновноеНазначение = СтрокаНачислений.Сотрудник Тогда
				мВидЗанятости = " (по внутр. совмест-ву)"
			КонецЕсли;
				
			Если СтрокаНачислений.ГрафикРаботы = Неопределено Или (ТипЗнч(СтрокаНачислений.ГрафикРаботы)=Тип("СправочникСсылка.СотрудникиОрганизаций")) Тогда 
				ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(СтрокаНачислений.ВидРасчета.СпособРасчета, СтрокаНачислений.ВидРасчета.ВидВремени, ложь);
			Иначе	
				ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(СтрокаНачислений.ВидРасчета.СпособРасчета, СтрокаНачислений.ВидРасчета.ВидВремени, СтрокаНачислений.ГрафикРаботы.СуммированныйУчетРабочегоВремени);
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
			
			СтрокаТаблицы.ВидДвижения			= ?(СтрокаНачислений.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме,6,1);
			
			ДопСтрока = "";
			Если  СтрокаНачислений.ДокументОснование <> Неопределено
				И СтрокаНачислений.ДокументОснование.Метаданные().Имя = "ЗаменыОрганизаций" Тогда
				Если СтрокаНачислений.ДокументОснование.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Замещение Тогда
					ДопСтрока = "Замена: ";
				Иначе
					ДопСтрока = "Совмещение: ";
				КонецЕсли;
			КонецЕсли;
			СтрокаТаблицы.ВидРасчета			= ДопСтрока + СтрокаНачислений.ВидРасчета.Наименование + мВидЗанятости;
			
			СтрокаТаблицы.ПорядокВидаРасчета	= "А" + СтрокаНачислений.ВидРасчета.Код;
			СтрокаТаблицы.ПериодДействияНачало	= СтрокаНачислений.ДатаНачала;
			СтрокаТаблицы.ПериодДействияКонец	= КонецДня(СтрокаНачислений.ДатаОкончания);
			СтрокаТаблицы.ОтработаноДней		= СтрокаНачислений.ОтработаноДней;
			СтрокаТаблицы.ОтработаноЧасов		= СтрокаНачислений.ОтработаноЧасов;
			СтрокаТаблицы.ОплаченоДней			= ?(ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, СтрокаНачислений.ОплаченоДнейЧасов, 0);
			СтрокаТаблицы.ОплаченоЧасов			= ?(ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам 
													ИЛИ СтрокаНачислений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы
													ИЛИ СтрокаНачислений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы
													, СтрокаНачислений.ОплаченоДнейЧасов, 0);
			СтрокаТаблицы.Начисления			= СтрокаНачислений.Результат;
			СтрокаТаблицы.Удержания				= 0;
			СтрокаТаблицы.Регистратор			= Неопределено;
			
		КонецЦикла;
	
		// добавим Взносы
		ИспользуетсяЕСВ = ПроведениеРасчетов.ИспользуетсяЕСВ(ПериодРегистрации); 
		ВзносыКопия = Взносы.Выгрузить();
		Если ИспользуетсяЕСВ Тогда
			ВзносыКопия.Свернуть("Сотрудник,БазовыйПериодНачало","Результат");	
		КонецЕсли;	
		СтрокиВзносы = ВзносыКопия.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаВзносы Из СтрокиВзносы Цикл
				
			СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
			
			СтрокаТаблицы.ВидДвижения			= 3;
			Если ИспользуетсяЕСВ Тогда
				СтрокаТаблицы.ВидРасчета			= "ЕСВ";
				СтрокаТаблицы.ПорядокВидаРасчета	= "Б";
			Иначе	
				СтрокаТаблицы.ВидРасчета			= СтрокаВзносы.Налог.Наименование;
				СтрокаТаблицы.ПорядокВидаРасчета	= "Б"+СтрокаВзносы.Налог.Код;
			КонецЕсли;	
			СтрокаТаблицы.ПериодДействияНачало	= СтрокаВзносы.БазовыйПериодНачало;
			СтрокаТаблицы.ПериодДействияКонец	= КонецМесяца(СтрокаВзносы.БазовыйПериодНачало);
			СтрокаТаблицы.ОтработаноДней		= 0;
			СтрокаТаблицы.ОтработаноЧасов		= 0;
			СтрокаТаблицы.ОплаченоДней			= 0;
			СтрокаТаблицы.ОплаченоЧасов			= 0;
			СтрокаТаблицы.Начисления			= 0;
			СтрокаТаблицы.Удержания				= СтрокаВзносы.Результат;
			СтрокаТаблицы.Регистратор			= Неопределено;
			
		КонецЦикла;
			
		// добавим НДФЛ
		СтрокиНДФЛ = НДФЛ.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаНДФЛ Из СтрокиНДФЛ Цикл
				
			СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
			
			СтрокаТаблицы.ВидДвижения			= 3;
			СтрокаТаблицы.ВидРасчета			= "НДФЛ";
			СтрокаТаблицы.ПорядокВидаРасчета	= "В";
			СтрокаТаблицы.ПериодДействияНачало	= СтрокаНДФЛ.НалоговыйПериод;
			СтрокаТаблицы.ПериодДействияКонец	= КонецМесяца(СтрокаНДФЛ.НалоговыйПериод);
			СтрокаТаблицы.ОтработаноДней		= 0;
			СтрокаТаблицы.ОтработаноЧасов		= 0;
			СтрокаТаблицы.ОплаченоДней			= 0;
			СтрокаТаблицы.ОплаченоЧасов			= 0;
			СтрокаТаблицы.Начисления			= 0;
			СтрокаТаблицы.Удержания				= СтрокаНДФЛ.Налог;
			СтрокаТаблицы.Регистратор			= Неопределено;
			
		КонецЦикла;
			
		// добавим удержания
		СтрокиУдержано = Удержания.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаУдержаний Из СтрокиУдержано Цикл
			
			СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
			
			СтрокаТаблицы.ВидДвижения			= 4;
			СтрокаТаблицы.ВидРасчета			= СтрокаУдержаний.ВидРасчета.Наименование;
			СтрокаТаблицы.ПорядокВидаРасчета	= "Г" + СтрокаУдержаний.ВидРасчета.Код;
			СтрокаТаблицы.ПериодДействияНачало	= СтрокаУдержаний.ДатаНачала;
			СтрокаТаблицы.ПериодДействияКонец	= КонецДня(СтрокаУдержаний.ДатаОкончания);
			СтрокаТаблицы.ОтработаноДней		= 0;
			СтрокаТаблицы.ОтработаноЧасов		= 0;
			СтрокаТаблицы.ОплаченоДней			= 0;
			СтрокаТаблицы.ОплаченоЧасов			= 0;
			СтрокаТаблицы.Начисления			= 0;
			СтрокаТаблицы.Удержания				= СтрокаУдержаний.Результат;
			СтрокаТаблицы.Регистратор			= Неопределено;
				
		КонецЦикла;
			
		// добавим строки займов
		СтрокиЗаймов = ПогашениеЗаймов.НайтиСтроки(СтруктураПоиска); 
		Для Каждого СтрокаЗаймов Из СтрокиЗаймов Цикл
				
			СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
			
			СтрокаТаблицы.ВидДвижения			= 5;
			СтрокаТаблицы.ВидРасчета			= "Погашение займа";
			СтрокаТаблицы.ПорядокВидаРасчета	= "Д";
			СтрокаТаблицы.ПериодДействияНачало	= ПериодРегистрации;
			СтрокаТаблицы.ПериодДействияКонец	= КонецДня(КонецМесяца(ПериодРегистрации));
			СтрокаТаблицы.ОтработаноДней		= 0;
			СтрокаТаблицы.ОтработаноЧасов		= 0;
			СтрокаТаблицы.ОплаченоДней			= 0;
			СтрокаТаблицы.ОплаченоЧасов			= 0;
			СтрокаТаблицы.Начисления			= 0;
			СтрокаТаблицы.Удержания				= СтрокаЗаймов.ПогашеноЗайма;
			СтрокаТаблицы.Регистратор			= Неопределено;
				
		КонецЦикла;
		
		ТаблицаРезультатовЗапроса.Сортировать("ВидДвижения, ПорядокВидаРасчета, ВидРасчета, ПериодДействияНачало"); 
		
		Для Каждого СтрокаТаблицы Из ТаблицаРезультатовЗапроса Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДействияКонец) Тогда
				ДатаОкончанияПериода = СтрокаТаблицы.ПериодДействияКонец
			Иначе
				ДатаОкончанияПериода = КонецМесяца(СтрокаТаблицы.ПериодДействияНачало);
			КонецЕсли;
			
			Если СтрокаТаблицы.ВидДвижения < 3 Тогда
				НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = СтрокаТаблицы.ВидРасчета;
				
				Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
				КонецЕсли;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОбщегоНазначения.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= СтрокаТаблицы.ОтработаноДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= СтрокаТаблицы.ОтработаноЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= СтрокаТаблицы.ОплаченоДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= СтрокаТаблицы.ОплаченоЧасов;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(СтрокаТаблицы.Начисления,"ЧЦ=15; ЧДЦ=2");
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;				
				
				КоличествоНачислений = КоличествоНачислений + 1;
				ВсегоНачисления = ВсегоНачисления + СтрокаТаблицы.Начисления;
				СуммаНаКонецПериода = СуммаНаКонецПериода + СтрокаТаблицы.Начисления;
				
			ИначеЕсли СтрокаТаблицы.ВидДвижения < 6 Тогда
				
				НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = СтрокаТаблицы.ВидРасчета;
				
				Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
				КонецЕсли;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОбщегоНазначения.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаТаблицы.Удержания,"ЧЦ=15; ЧДЦ=2");
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
				
				КоличествоУдержаний = КоличествоУдержаний + 1;
				ВсегоУдержания = ВсегоУдержания + СтрокаТаблицы.Удержания;
				СуммаНаКонецПериода = СуммаНаКонецПериода - СтрокаТаблицы.Удержания;
				
			Иначе
				
				// подведем итоги раздела начислений и удержаний
				// начнем раздел доходов в натуральной форме и выплат
				Если Не ИтогиНачисленийИУдержанийВыведены Тогда
					
					КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
					
					Если КолвоРасчетов > 0 Тогда
						РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
					КонецЕсли; 
					
					ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
					ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
					ИтогиНачисленийИУдержанийВыведены = Не ИтогиНачисленийИУдержанийВыведены;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьНатурДоходыВыплаты);
					ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
					ВсегоНачисления = 0; КоличествоНачислений = 0;
					ВсегоУдержания = 0; КоличествоУдержаний  = 0;
					
				КонецЕсли;
				
				Если СтрокаТаблицы.ВидДвижения < 8 Тогда
					
					НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = СтрокаТаблицы.ВидРасчета;
					
					Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
					КонецЕсли;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОбщегоНазначения.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= СтрокаТаблицы.ОтработаноДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= СтрокаТаблицы.ОтработаноЧасов;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= СтрокаТаблицы.ОплаченоДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= СтрокаТаблицы.ОплаченоЧасов;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(СтрокаТаблицы.Начисления,"ЧЦ=15; ЧДЦ=2");
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
					
					КоличествоНачислений = КоличествоНачислений + 1;
					ВсегоНачисления = ВсегоНачисления + СтрокаТаблицы.Начисления;
					СуммаНаКонецПериода = СуммаНаКонецПериода + СтрокаТаблицы.Начисления;
					
				Иначе // остались выплаты
					
					НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = СтрокаТаблицы.ВидРасчета;
					
					Если СтрокаТаблицы.Регистратор <> Неопределено Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = СтрокаТаблицы.ОписаниеРегистратора;
					КонецЕсли;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОбщегоНазначения.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаТаблицы.Удержания,"ЧЦ=15; ЧДЦ=2");
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
					
					КоличествоУдержаний = КоличествоУдержаний + 1;
					ВсегоУдержания = ВсегоУдержания + СтрокаТаблицы.Удержания;
					СуммаНаКонецПериода = СуммаНаКонецПериода - СтрокаТаблицы.Удержания;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// расчертим линиями низ расчетного листками
		КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
			
		Если КолвоРасчетов > 0 Тогда
			РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
		КонецЕсли;
			
		Если Не ИтогиНачисленийИУдержанийВыведены Тогда // есть только начисления и удержания
			ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
			
		ИначеЕсли КолвоРасчетов > 0 Тогда  // остались итоги по натуральным доходам и выплатам
			ОбластьНатуральныеДоходы.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьНатуральныеДоходы.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьНатуральныеДоходы);
			
		КонецЕсли;
			
		Если СуммаНаНачалоПериода >= 0  Тогда
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за организацией на начало месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = СуммаНаНачалоПериода;
		Иначе
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за работником на начало месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0 - СуммаНаНачалоПериода;
		КонецЕсли;
				
		Если СуммаНаКонецПериода >= 0  Тогда
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за организацией на конец месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = СуммаНаКонецПериода;
		Иначе
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0 - СуммаНаКонецПериода;
		КонецЕсли;
				
		ВременныйТабличныйДокумент.Вывести(ОбластьПодвал);
		
	Иначе //выводим в отчет только данные запроса
			
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 0 Тогда
			//нет данных в запросе
			Возврат ВременныйТабличныйДокумент;	
		КонецЕсли;
		
		ТекстПериода = Формат(ПериодРегистрации, "ДФ = 'ММММ гггг ''г.'''");
		
		// Очистим временный табличный документ
		ВременныйТабличныйДокумент.Очистить();
		
		ОбластьШапка.Параметры.Работник 	   = "Работник: " + ФИОФизлица;
		ВременныйТабличныйДокумент.Вывести(ОбластьШапка);

		ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧ);
		ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
			
		ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
			
		ВсегоНачисления = 0; КоличествоНачислений = 0;
		ВсегоУдержания = 0; КоличествоУдержаний  = 0;
		ИтогиНачисленийИУдержанийВыведены = Ложь;

		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ПериодДействияКонец) Тогда
				ДатаОкончанияПериода = Выборка.ПериодДействияКонец;
				
			Иначе
				ДатаОкончанияПериода = КонецМесяца(Выборка.ПериодДействияНачало);
				
			КонецЕсли;
			
			Если Выборка.ВидДвижения < 3 Тогда
				НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = Выборка.ВидРасчета;
				Если Выборка.Регистратор <> Ссылка Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = Выборка.Регистратор;
				КонецЕсли;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОбщегоНазначения.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
					
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= Выборка.ОтработаноДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= Выборка.ОтработаноЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= Выборка.ОплаченоДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= Выборка.ОплаченоЧасов;
					
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(Выборка.Начисления,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
				
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
				
					
				КоличествоНачислений = КоличествоНачислений + 1;
				ВсегоНачисления = ВсегоНачисления + Выборка.Начисления;
					
			ИначеЕсли Выборка.ВидДвижения < 6 Тогда
					
				НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = Выборка.ВидРасчета;
				Если Выборка.Регистратор <> Ссылка Тогда
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = Выборка.Регистратор;
				КонецЕсли;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
					
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОбщегоНазначения.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
					
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(Выборка.Удержания,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;								
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
					
				КоличествоУдержаний = КоличествоУдержаний + 1;
				ВсегоУдержания = ВсегоУдержания + Выборка.Удержания;
					
			Иначе
					
				// подведем итоги раздела начислений и удержаний
				// начнем раздел доходов в натуральной форме и выплат
				Если Не ИтогиНачисленийИУдержанийВыведены Тогда
						
					КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
						
					Если КолвоРасчетов > 0 Тогда
						РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
					КонецЕсли;
						
					ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
					ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
						
					ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
					ИтогиНачисленийИУдержанийВыведены = Не ИтогиНачисленийИУдержанийВыведены;
						
					ВременныйТабличныйДокумент.Вывести(ОбластьНатурДоходыВыплаты);
					ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
					ВсегоНачисления = 0; КоличествоНачислений = 0;
					ВсегоУдержания = 0; КоличествоУдержаний  = 0;
						
				КонецЕсли;
					
				Если Выборка.ВидДвижения < 8 Тогда
						
					НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = Выборка.ВидРасчета;
					Если Выборка.Регистратор <> Ссылка Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = Выборка.Регистратор;
					КонецЕсли;

					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = ОбщегоНазначения.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
						
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= Выборка.ОтработаноДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= Выборка.ОтработаноЧасов;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= Выборка.ОплаченоДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= Выборка.ОплаченоЧасов;
						
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(Выборка.Начисления,"ЧЦ=15; ЧДЦ=2");
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
						
					КоличествоНачислений = КоличествоНачислений + 1;
					ВсегоНачисления = ВсегоНачисления + Выборка.Начисления;
						
				Иначе // остались выплаты
						
					НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = Выборка.ВидРасчета;
					Если Выборка.Регистратор <> Ссылка Тогда
						ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Примечание.Текст = Выборка.Регистратор;
					КонецЕсли;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
						
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = ОбщегоНазначения.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
						
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(Выборка.Удержания,"ЧЦ=15; ЧДЦ=2");
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
						
					КоличествоУдержаний = КоличествоУдержаний + 1;
					ВсегоУдержания = ВсегоУдержания + Выборка.Удержания;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Данные для подвала
		СуммаНаНачалоПериода = Выборка.СуммаВзаиморасчетовНачальныйОстаток;
		СуммаНаКонецПериода  = Выборка.СуммаВзаиморасчетовКонечныйОстаток;

		// расчертим линиями низ расчетного листками
		КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
			
		Если КолвоРасчетов > 0 Тогда
			РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
		КонецЕсли;
			
		Если Не ИтогиНачисленийИУдержанийВыведены Тогда // есть только начисления и удержания
			ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
		ИначеЕсли КолвоРасчетов > 0 Тогда  // остались итоги по натуральным доходам и выплатам
			ОбластьНатуральныеДоходы.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьНатуральныеДоходы.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьНатуральныеДоходы);
		КонецЕсли;
			
		Если СуммаНаНачалоПериода = NULL Тогда
				
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за организацией на начало месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0;
				
		Иначе
				
			Если СуммаНаНачалоПериода >= 0  Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за организацией на начало месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = СуммаНаНачалоПериода;
			Иначе
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за работником на начало месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0 - СуммаНаНачалоПериода;
			КонецЕсли;
				
		КонецЕсли;
		
		Если СуммаНаКонецПериода = NULL Тогда
				
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0;
				
		Иначе
				
			Если СуммаНаКонецПериода >= 0  Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за организацией на конец месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = СуммаНаКонецПериода;
			Иначе
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0 - СуммаНаКонецПериода;
			КонецЕсли;
				
		КонецЕсли;
		
		ВременныйТабличныйДокумент.Вывести(ОбластьПодвал);

	КонецЕсли;
	
	Возврат ВременныйТабличныйДокумент;
		
КонецФункции //ЗаполнитьТаблицуРасчетногоЛистка()

#КонецЕсли

#Если Клиент Тогда
	
// Расчерчивает разделы расчетного листка линиями
//
// Параметры
//  ВременныйТабличныйДокумент - Табличный документ с уже выведенными строками расчетного листка
//  СтрокПропустить - целое число уже обработанных ранее строк т.д.
//  СтрокРасчертить - целое число строк т.д., которым требуется указать границы
//
Процедура РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,СтрокПропустить,СтрокРасчертить)

	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Для Сч = 0 По СтрокРасчертить - 1 Цикл
		
		НомерСтроки = СтрокПропустить + Сч;
		
		Для Ссч = 2 По 17 Цикл
			
			Если Ссч = 4 ИЛИ Ссч = 10 ИЛИ Ссч = 13 ИЛИ Ссч = 15 Тогда
				Продолжить
			КонецЕсли; 
			
			ВременныйТабличныйДокумент.Область(НомерСтроки, Ссч).ГраницаСлева = Линия;
			
		КонецЦикла;
		
		ВременныйТабличныйДокумент.Область(НомерСтроки, 15).ГраницаСправа = Линия;
		ВременныйТабличныйДокумент.Область(НомерСтроки, 2, НомерСтроки, 15).ГраницаСнизу = Линия;
		
	КонецЦикла;
	
КонецПроцедуры // РасчертитьРасчетныйЛисток()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ общие для ЗАПОЛНЕНИЯ, РАСЧЕТА
//

Функция ПолучитьДокументыРасчетаЗаВесьМесяц() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент",ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("Сотрудники",РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"));
	Запрос.УстановитьПараметр("ЭтоПересчетНДФЛ", ЭтоПересчетНДФЛ);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументНачисление.Ссылка КАК Ссылка,
	|	ДокументНачисление.Сотрудник КАК Сотрудник,
	|	ДокументНачисление.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ДокументНачисление.Ссылка) КАК Представление
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.РаботникиОрганизации КАК ДокументНачисление
	|ГДЕ
	|	ДокументНачисление.Ссылка.ПериодРегистрации = &ПериодРегистрации
	|	И ДокументНачисление.Ссылка.ПерерассчитываемыйДокумент = &ПерерассчитываемыйДокумент
	|	И ДокументНачисление.Ссылка <> &Ссылка
	|	И ДокументНачисление.Ссылка.Проведен
	|	И ДокументНачисление.Сотрудник В(&Сотрудники)
	|	И НЕ ДокументНачисление.Ссылка.ЭтоПересчетНДФЛ <> &ЭтоПересчетНДФЛ
	|	И НЕ ДокументНачисление.Ссылка.ПредварительныйРасчет
	|ИТОГИ ПО
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПлучитьПериодДляНДФЛ( МинимальнаяДата, МаксимальнаяДата ) Экспорт

	МинимальнаяДата		= НачалоМесяца( ПериодРегистрации );
	МаксимальнаяДата	= КонецМесяца( ПериодРегистрации );
	
	ИмяРегистратора = Ссылка.Метаданные().Имя;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МИНИМУМ( Основной.НалоговыйПериод )	КАК МинимальнаяДата, 
	|	МАКСИМУМ( Основной.НалоговыйПериод )	КАК МаксимальнаяДата
	|ИЗ	Документ."+ИмяРегистратора+".НДФЛ КАК Основной
	|ГДЕ Основной.Ссылка = &парамРегистратор
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка );
	ВыборкаДат = Запрос.Выполнить().Выбрать();
	Если ВыборкаДат.Следующий() Тогда
		МинимальнаяДата = ВыборкаДат.МинимальнаяДата;
		МаксимальнаяДата = ВыборкаДат.МаксимальнаяДата;
	КонецЕсли; 

КонецПроцедуры

Процедура РаспределитьОплатуГПХПоПериодам(ВыборкаНачисления)
	
	ДатаНачалаДоговор = ВыборкаНачисления.ДокументОснование.ДатаНачала;
	ДатаОтсчета = НачалоМесяца(ДатаНачалаДоговор);
	ДатаОкончанияДоговор =  ВыборкаНачисления.ДокументОснование.ДатаОкончания;
	КоличествоМесяцев = (Год(ДатаОкончанияДоговор)-Год(ДатаНачалаДоговор))*12+Месяц(ДатаОкончанияДоговор)-Месяц(ДатаНачалаДоговор)+1;
	СуммаДоговор = ВыборкаНачисления.Показатель1;
	СуммаОстаток = СуммаДоговор;
	Пока ДатаОтсчета <= ДатаОкончанияДоговор Цикл
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаНачисления);
		Если ДатаОтсчета > ДатаНачалаДоговор Тогда
			НоваяСтрока.ДатаНачала  = ДатаОтсчета;
			Новаястрока.БазовыйПериодНачало = ДатаОтсчета;
		Иначе
			НоваяСтрока.ДатаНачала  = ДатаНачалаДоговор;
			Новаястрока.БазовыйПериодНачало = ДатаНачалаДоговор;
		КонецЕсли;
		Если КонецМесяца(ДатаОтсчета) < ДатаОкончанияДоговор Тогда
			НоваяСтрока.ДатаОкончания = КонецМесяца(ДатаОтсчета);
			НоваяСтрока.БазовыйПериодКонец = КонецМесяца(ДатаОтсчета);
		КонецЕсли;	
		НоваяСтрока.Показатель1 = Цел(СуммаДоговор/КоличествоМесяцев*100)/100;
		
		НоваяСтрока.Авторасчет = Истина;
		
		СуммаОстаток = СуммаОстаток - НоваяСтрока.Показатель1;
		ДатаОтсчета = ДобавитьМесяц(ДатаОтсчета,1);
	КонецЦикла;
	
	Если СуммаОстаток <> 0  Тогда
		НоваяСтрока.Показатель1 = НоваяСтрока.Показатель1 + СуммаОстаток;
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТА

Процедура АвтозаполнениеНачисления(Регистратор, Начисления, Сотрудники ) Экспорт
	
	ЕстьПерерассчитываемыйДокумент	= ЗначениеЗаполнено(Регистратор.ПерерассчитываемыйДокумент);
	мПериодРегистрации	= ?(ЗначениеЗаполнено(Регистратор.ПерерассчитываемыйДокумент), Регистратор.ПерерассчитываемыйДокумент.ПериодРегистрации, Регистратор.ПериодРегистрации);
	мПерерассчитываемыйДокумент	= Регистратор.ПерерассчитываемыйДокумент;
	
	//Получим список видов расчета, использующих тарифную ставку
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисленияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		| ОсновныеНачисленияОрганизаций.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы) 
		| ИЛИ ОсновныеНачисленияОрганизаций.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
		| ИЛИ ОсновныеНачисленияОрганизаций.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеУмножитьНаПроцент)
		| 
		| ОБЪЕДИНИТЬ	ВСЕ
		| 
		| ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисленияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		| ОсновныеНачисленияОрганизаций.Показатель.ТарифнаяСтавка
		|";
	МассивТребуетОклад = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	
	// Запрос собирает данные по следующей схеме:
	// 
	// 1. Движения ВСЕХ сотрудников за месяц (ДатаНачала, ДатаОкончания)   (ВСЕХ = Просто сотрудники, внутренние совместители и сотрудники которых заменяли сотрудтни из ТЧ РаботникиОрганизации)
	//						+ Значение "Оклада" на каждую дату начала  (по пустому реквизиту ВидРасчетаИзмерение в регистре ПлановыеНачисленияРаботниковОрганизаций)
	//						+ Значение надбавок по ШР на каждую дату начала
	// 2. Начисления Сотрудников ТЧ РаботникиОрганизации (Основные, совместители и вн. совместители) (ДатаНачала, ДатаОкончания)
	// 3. Сотрудники ТЧ РаботникиОрганизации 
	//                      + Договора подряда (ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамПериодРегистрации" , мПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудник",Сотрудники); 
	
	Запрос.УстановитьПараметр("парамНачало" , мПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(мПериодРегистрации));
	
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("парамРегистратор" , Регистратор);

	МассивДействий = Новый Массив(2);
	МассивДействий[0] = Перечисления.ВидыДействияСНачислением.Изменить;
	МассивДействий[1] = Перечисления.ВидыДействияСНачислением.Начать;
	Запрос.УстановитьПараметр("парамДействиеНачатьИзменить", МассивДействий);
	Запрос.УстановитьПараметр("парамПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	
	Запрос.УстановитьПараметр("парамТребуетОклад" , МассивТребуетОклад);
	
	Запрос.УстановитьПараметр("парамДатаВалютногоУчета" , мПериодРегистрации);
	Запрос.УстановитьПараметр("парамПустаяВалюта" , Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("парамМассивСпособовРасчетовБезВалюты" , ПроведениеРасчетов.ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты());
	//Запрос.УстановитьПараметр("Ежемесячно", Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно);
	Запрос.УстановитьПараметр("парамИндивидуальныйПоказатель",Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный);		
	Запрос.УстановитьПараметр("парамПоПодраделению",Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению);
	
	
	//	ВТСписокРаботникиИЗамены
	Если Истина Тогда 
		//	Описание:
		// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
		//		Для п.1.
		ТекстЗапроса = "
		|// ---------------
		|// Сотрудники, самые обыкновенные основные работники и внешние совместители
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР	КОГДА Сотрудники.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) 
		|				ТОГДА Сотрудники.Ссылка 
		|			ИНАЧЕ Сотрудники.ОсновноеНазначение 
		|	КОНЕЦ КАК Сотрудник,
		|	Сотрудники.Ссылка КАК Назначение
		|ПОМЕСТИТЬ ВТСписокРаботникиИЗамены	
		|ИЗ Справочник.СотрудникиОрганизаций КАК Сотрудники
		|ГДЕ	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ В ( &парамСотрудник )
		|
		|// ---------------
		|// Сотрудники, которые были внутренними совместителями и перешли в основных
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.Ссылка КАК Назначение
		|ИЗ Справочник.СотрудникиОрганизаций КАК Сотрудники
		|ГДЕ	Сотрудники.ОсновноеНазначение<>ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|	И	Сотрудники.Ссылка.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|	И	Сотрудники.Ссылка В ( &парамСотрудник )
		|
		|// ---------------
		|// Сотрудники, которые кого-либо заменяли
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Замены.Сотрудник КАК Сотрудник,
		|	Замены.ЗаменаСотрудник КАК Назначение
		|ИЗ Документ.ЗаменыОрганизаций КАК Замены
		|ГДЕ	Замены.Сотрудник В ( &парамСотрудник )
		|	И	НАЧАЛОПЕРИОДА(Замены.ДатаНачала,МЕСЯЦ)<= &парамНачало
		|	И	КОНЕЦПЕРИОДА(Замены.ДатаОкончания,МЕСЯЦ)>= &парамНачало
		|	И	Замены.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТСписокРаботникиИЗамены = "ВТСписокРаботникиИЗамены";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСписокРаботникиИЗамены";
	
	//	ВТЗамены
	Если Истина Тогда 
		//	Описание:
		// 		Все сотрудники из табличной части РаботникиОрганизации которые кого-либо заменяли
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Замены.Сотрудник КАК Сотрудник,
		|	Замены.ЗаменаСотрудник КАК Назначение,
		|	Замены.Ссылка КАК ДокументОснование,
		|	ВЫБОР КОГДА Замены.ДатаНачала < &парамНачало ТОГДА &парамНачало ИНАЧЕ Замены.ДатаНачала КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР КОГДА Замены.ДатаОкончания > &парамКонец ТОГДА &парамКонец ИНАЧЕ Замены.ДатаОкончания КОНЕЦ КАК ДатаОкончания,
		|	Замены.ВидРасчета					КАК ВидРасчета,
		|	Замены.ЗаменаГрафикРаботы				КАК ГрафикРаботы,
		|	Замены.ЗаменаПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|	Замены.ЗаменаДолжность					КАК Должность
		|ПОМЕСТИТЬ ВТЗамены	
		|ИЗ Документ.ЗаменыОрганизаций КАК Замены
		|
		|ГДЕ	Замены.Сотрудник В ( &парамСотрудник )                             
		|	И	Замены.ДатаНачала <= &парамКонец
		|	И	Замены.ДатаОкончания >= &парамНачало
		|	И	Замены.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТЗамены = "ВТЗамены";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЗамены";

	
	//	ВТСписокРаботники
	Если Истина Тогда 
		//	Описание:
		// 		Все сотрудники из табличной части, их внутренние совместительства БЕЗ ЗАМЕН
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ КАК Сотрудник,
		|	Сотрудники.Ссылка КАК Назначение
		|ПОМЕСТИТЬ ВТСписокРаботники	
		|ИЗ Справочник.СотрудникиОрганизаций КАК Сотрудники
		|ГДЕ	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ
		|			В ( &парамСотрудник )
		|
		|// ---------------
		|// Сотрудники, которые были внутренними совместителями и перешли в основных
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.Ссылка КАК Назначение
		|ИЗ Справочник.СотрудникиОрганизаций КАК Сотрудники
		|ГДЕ	Сотрудники.ОсновноеНазначение<>ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|	И	Сотрудники.Ссылка.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|	И	Сотрудники.Ссылка В ( &парамСотрудник )
		|
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТСписокРаботники = "ВТСписокРаботники";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСписокРаботники";
	
	
	//	ВТДвиженияРаботников
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру РаботникиОрганизации (Сотрудники из ВТСписокРаботникиИЗамены)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Работники.Сотрудник					КАК Сотрудник,
		|	Работники.ДатаНачала				КАК ДатаНачала,
		| ";
		ПеременнаяДатаОкончания = "
		|   	ВЫБОР	КОГДА  Окончания.Период ЕСТЬ NULL									// работник никуда не перемещался по регистру
		|         					ТОГДА КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)
		|         				КОГДА НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период	// начало дня это кадровое перемещение, значит надо закрыть предыдущим днем
		|                           ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1)
		|                       ИНАЧЕ  КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)							// непоняная ситуация, но поставим конец месяца
		|				КОНЕЦ";
		ТекстЗапроса = ТекстЗапроса + "
		|	МИНИМУМ (" + ПеременнаяДатаОкончания + ")	КАК ДатаОкончания,
		|	Работники.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|	Работники.ГрафикРаботы				КАК ГрафикРаботы,
		|	Работники.Должность					КАК Должность
		|ПОМЕСТИТЬ ВТДвиженияРаботников	
		|ИЗ (
		|	ВЫБРАТЬ 
		|		РаботникиОрганизаций.Сотрудник					КАК Сотрудник,
		|		&парамНачало									КАК ДатаНачала,
		|		РаботникиОрганизаций.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|		РаботникиОрганизаций.ГрафикРаботы				КАК ГрафикРаботы,
		|		РаботникиОрганизаций.Должность					КАК Должность
		|	ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Сотрудник В ( ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК СписокРаботников )
		|			) КАК РаботникиОрганизаций
		|	ГДЕ	РаботникиОрганизаций.ЗанимаемыхСтавок > 0
		|
		|	ОБЪЕДИНИТЬ
		|	ВЫБРАТЬ
		|		РаботникиОрганизаций.Сотрудник					КАК Сотрудник,
		|		РаботникиОрганизаций.Период					КАК ДатаНачала,
		|		РаботникиОрганизаций.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|		РаботникиОрганизаций.ГрафикРаботы				КАК ГрафикРаботы,
		|		РаботникиОрганизаций.Должность					КАК Должность
		|	ИЗ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ГДЕ		РаботникиОрганизаций.Сотрудник В ( ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК СписокРаботников )
		|		И	НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ) = &парамНачало
		|		И	РаботникиОрганизаций.Период > &парамНачало
		|		И	РаботникиОрганизаций.ЗанимаемыхСтавок > 0
		|   ) КАК Работники
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Окончания
		|ПО  НАЧАЛОПЕРИОДА(Окончания.Период, МЕСЯЦ) = &парамНачало // все движения за месяц
		|	И	Окончания.Сотрудник = Работники.Сотрудник
		|	И	Работники.ДатаНачала < Окончания.Период 
		|       
		|СГРУППИРОВАТЬ ПО
		|	Работники.Сотрудник,
		|	Работники.ДатаНачала,
		|	Работники.ПодразделениеОрганизации,
		|	Работники.ГрафикРаботы,
		|	Работники.Должность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаНачала
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТДвиженияРаботников = "ВТДвиженияРаботников";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДвиженияРаботников";
	
	//	ВТПлановыеНачисления
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру ПлановыеНачисленияРаботниковОрганизаций (Сотрудники из ВТСписокРаботникиИЗамены)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ПеременнаяОкончания = "
		|   	ВЫБОР	КОГДА  Окончания.Период ЕСТЬ NULL									// работник никуда не перемещался по регистру
		|         					ТОГДА КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)
		|         				КОГДА НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период	// начало дня это кадровое перемещение, значит надо закрыть предыдущим днем
		|                           ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1)
		|         				КОГДА КОНЕЦПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период		// это увольнение, значит надо закрыть предыдущим днем
		|                           ТОГДА  Окончания.Период
		|                       ИНАЧЕ  КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)							// непоняная ситуация, но поставим конец месяца
		|				КОНЕЦ";
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		ПлановыеНачисления.Сотрудник 				КАК Сотрудник,
		|		ПлановыеНачисления.ДатаНачала				КАК ДатаНачала,
		|		МИНИМУМ (" + ПеременнаяОкончания + ")	КАК ДатаОкончания,
		|		ПлановыеНачисления.ОсновноеНачисление 		КАК ОсновноеНачисление, // Истина = Оклад
		|		ПлановыеНачисления.ВидРасчета 				КАК ВидРасчета,
		|		ПлановыеНачисления.ДокументОснование,
		|		ПлановыеНачисления.Действие,
		|		ПлановыеНачисления.Показатель1,
		|		ПлановыеНачисления.Показатель2,
		|		ПлановыеНачисления.Показатель3,
		|		ПлановыеНачисления.Показатель4,
		|		ПлановыеНачисления.Показатель5,
		|		ПлановыеНачисления.Показатель6,
		|		ПлановыеНачисления.Валюта1,
		|		ПлановыеНачисления.Валюта2,
		|		ПлановыеНачисления.Валюта3,
		|		ПлановыеНачисления.Валюта4,
		|		ПлановыеНачисления.Валюта5,
		|		ПлановыеНачисления.Валюта6,
		|		ПлановыеНачисления.ВидУчетаВремениДляСредней
		|	ПОМЕСТИТЬ ВТПлановыеНачисления	
		|	ИЗ (
		|		ВЫБРАТЬ
		|			Начисления.Сотрудник			КАК Сотрудник,
		|			Начисления.ВидРасчетаИзмерение	КАК ВидРасчетаИзмерение,
		|			&парамНачало					КАК ДатаНачала,
		|			ВЫБОР	КОГДА Начисления.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ							КАК ОсновноеНачисление, // Оклад
		|			Начисления.ВидРасчета			КАК ВидРасчета,
		|			Начисления.Действие				КАК Действие,
		|			Начисления.ДокументОснование	КАК ДокументОснование,
		|";
		Показатель1Текст = "
		|			ВЫБОР	КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
		|						ТОГДА ТарифныеСтавки1.Размер
		|					ИНАЧЕ Начисления.Показатель1
		|			КОНЕЦ";
		Показатель2Текст = СтрЗаменить(Показатель1Текст, "1", "2");
		Показатель3Текст = СтрЗаменить(Показатель1Текст, "1", "3");
		Показатель4Текст = СтрЗаменить(Показатель1Текст, "1", "4");
		Показатель5Текст = СтрЗаменить(Показатель1Текст, "1", "5");
		Показатель6Текст = СтрЗаменить(Показатель1Текст, "1", "6");
		ТекстЗапроса = ТекстЗапроса + "
		|			" + Показатель1Текст + "	КАК Показатель1,
		|			" + Показатель2Текст + "	КАК Показатель2,
		|			" + Показатель3Текст + "	КАК Показатель3,
		|			" + Показатель4Текст + "	КАК Показатель4,
		|			" + Показатель5Текст + "	КАК Показатель5,
		|			" + Показатель6Текст + "	КАК Показатель6,
		|";
		Валюта1Текст = "
		|			ВЫБОР	КОГДА Начисления.ВидРасчета.ТребуетВводаТарифногоРазряда
		|						ТОГДА ТарифныеСтавки1.Валюта
		|					ИНАЧЕ Начисления.Валюта1
		|			КОНЕЦ";
		Валюта2Текст = СтрЗаменить(Валюта1Текст, "1", "2");
		Валюта3Текст = СтрЗаменить(Валюта1Текст, "1", "3");
		Валюта4Текст = СтрЗаменить(Валюта1Текст, "1", "4");
		Валюта5Текст = СтрЗаменить(Валюта1Текст, "1", "5");
		Валюта6Текст = СтрЗаменить(Валюта1Текст, "1", "6");
		ТекстЗапроса = ТекстЗапроса + "
		|			" + Валюта1Текст + "		КАК Валюта1,
		|			" + Валюта2Текст + "		КАК Валюта2,
		|			" + Валюта3Текст + "		КАК Валюта3,
		|			" + Валюта4Текст + "		КАК Валюта4,		
		|			" + Валюта5Текст + "		КАК Валюта5,		
		|			" + Валюта6Текст + "		КАК Валюта6,		
		|			Начисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|
		|			ИЗ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|					&парамНачало, 
		|			    	Сотрудник В (ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК Работники)
		|				) КАК Начисления
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки1
		|			ПО Начисления.ТарифныйРазряд1 = ТарифныеСтавки1.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки2
		|			ПО Начисления.ТарифныйРазряд2 = ТарифныеСтавки2.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки3
		|			ПО Начисления.ТарифныйРазряд3 = ТарифныеСтавки3.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки4
		|			ПО Начисления.ТарифныйРазряд4 = ТарифныеСтавки4.ТарифныйРазряд		
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки5
		|			ПО Начисления.ТарифныйРазряд5 = ТарифныеСтавки5.ТарифныйРазряд		
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки6
		|			ПО Начисления.ТарифныйРазряд6 = ТарифныеСтавки6.ТарифныйРазряд		
		|	
		|			ГДЕ Начисления.Актуальность
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			ВЫБРАТЬ
		|				Начисления.Сотрудник			КАК Сотрудник,
		|				Начисления.ВидРасчетаИзмерение	КАК ВидРасчетаИзмерение,
		|				Начисления.Период				КАК ДатаНачала,
		|				ВЫБОР	КОГДА Начисления.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ 							КАК ОсновноеНачисление,
		|				Начисления.ВидРасчета			КАК ВидРасчета,
		|				Начисления.Действие				КАК Действие,
		|				Начисления.ДокументОснование	КАК ДокументОснование,
		|				" + Показатель1Текст + "	КАК Показатель1,
		|				" + Показатель2Текст + "	КАК Показатель2,
		|				" + Показатель3Текст + "	КАК Показатель3,
		|				" + Показатель4Текст + "	КАК Показатель4,
		|				" + Показатель5Текст + "	КАК Показатель5,
		|				" + Показатель6Текст + "	КАК Показатель6,
		|				" + Валюта1Текст + "		КАК Валюта1,
		|				" + Валюта2Текст + "		КАК Валюта2,
		|				" + Валюта3Текст + "		КАК Валюта3,
		|				" + Валюта4Текст + "		КАК Валюта4,		
		|				" + Валюта5Текст + "		КАК Валюта5,		
		|				" + Валюта6Текст + "		КАК Валюта6,		
		|				Начисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|			ИЗ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки1
		|			ПО Начисления.ТарифныйРазряд1 = ТарифныеСтавки1.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки2
		|			ПО Начисления.ТарифныйРазряд2 = ТарифныеСтавки2.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки3
		|			ПО Начисления.ТарифныйРазряд3 = ТарифныеСтавки3.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки4
		|			ПО Начисления.ТарифныйРазряд4 = ТарифныеСтавки4.ТарифныйРазряд		
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки5
		|			ПО Начисления.ТарифныйРазряд5 = ТарифныеСтавки5.ТарифныйРазряд		
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки6
		|			ПО Начисления.ТарифныйРазряд6 = ТарифныеСтавки6.ТарифныйРазряд		
		|
		|			ГДЕ		Начисления.Актуальность 
		|				И	Начисления.Период > &парамНачало
		|				И	Начисления.Период <= &парамКонец
		|				И	Начисления.Сотрудник В ( ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК СписокРаботников )
		|	) КАК ПлановыеНачисления		
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Окончания
		|	ПО		НАЧАЛОПЕРИОДА(Окончания.Период, Месяц) = &парамНачало // все движения за месяц
		|		И	Окончания.Сотрудник = ПлановыеНачисления.Сотрудник
		|		И	Окончания.ВидРасчетаИзмерение = ПлановыеНачисления.ВидРасчетаИзмерение
		|		И	Окончания.Период > ПлановыеНачисления.ДатаНачала
		|	СГРУППИРОВАТЬ ПО
		|		ПлановыеНачисления.Сотрудник,
		|		ПлановыеНачисления.ДатаНачала,
		|		ПлановыеНачисления.ОсновноеНачисление, 
		|		ПлановыеНачисления.ВидРасчета,
		|		ПлановыеНачисления.Действие,
		|		ПлановыеНачисления.ДокументОснование,
		|		ПлановыеНачисления.Показатель1,
		|		ПлановыеНачисления.Показатель2,
		|		ПлановыеНачисления.Показатель3,
		|		ПлановыеНачисления.Показатель4,
		|		ПлановыеНачисления.Показатель5,
		|		ПлановыеНачисления.Показатель6,
		|		ПлановыеНачисления.Валюта1,
		|		ПлановыеНачисления.Валюта2,
		|		ПлановыеНачисления.Валюта3,
		|		ПлановыеНачисления.Валюта4,		
		|		ПлановыеНачисления.Валюта5,		
		|		ПлановыеНачисления.Валюта6,		
		|		ПлановыеНачисления.ВидУчетаВремениДляСредней
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ОсновноеНачисление,
		|	ДатаНачала,
		|	ДатаОкончания,
		|	ВидРасчета
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТПлановыеНачисления = "ВТПлановыеНачисления";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПлановыеНачисления";

	
	//	ВТШтатноеРасписание
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру НадбавкиПоШтатномуРасписаниюОрганизаций (по всем подразделениям которые принадлежат организации)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|		ШтатныеНадбавки.Должность					КАК Должность,
		|		ШтатныеНадбавки.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|		ШтатныеНадбавки.ДатаНачала					КАК ДатаНачала,
		|		МИНИМУМ (" + ПеременнаяДатаОкончания + ")	КАК ДатаОкончания,
		|		ШтатныеНадбавки.ВидНадбавки	КАК ВидРасчета,
		|		ШтатныеНадбавки.Показатель1	КАК Показатель1,
		|		ШтатныеНадбавки.Показатель2	КАК Показатель2,
		|		ШтатныеНадбавки.Показатель3	КАК Показатель3,
		|		ШтатныеНадбавки.Показатель4	КАК Показатель4,		
		|		ШтатныеНадбавки.Показатель5	КАК Показатель5,		
		|		ШтатныеНадбавки.Показатель6	КАК Показатель6,		
		|		ШтатныеНадбавки.Валюта1		КАК Валюта1,
		|		ШтатныеНадбавки.Валюта2		КАК Валюта2,
		|		ШтатныеНадбавки.Валюта3		КАК Валюта3,
		|		ШтатныеНадбавки.Валюта4		КАК Валюта4,		
		|		ШтатныеНадбавки.Валюта5		КАК Валюта5,		
		|		ШтатныеНадбавки.Валюта6		КАК Валюта6		
		|
		|	ПОМЕСТИТЬ ВТШтатноеРасписание	
		|	ИЗ (
		|			ВЫБРАТЬ
		|				Надбавки.Должность					КАК Должность,
		|				Надбавки.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|				Надбавки.ВидНадбавки				КАК ВидНадбавки,
		|				&парамНачало			КАК ДатаНачала,
		|				Надбавки.Показатель1	КАК Показатель1,
		|				Надбавки.Показатель2	КАК Показатель2,
		|				Надбавки.Показатель3	КАК Показатель3,
		|				Надбавки.Показатель4	КАК Показатель4,		
		|				Надбавки.Показатель5	КАК Показатель5,		
		|				Надбавки.Показатель6	КАК Показатель6,		
		|				Надбавки.Валюта1		КАК Валюта1,
		|				Надбавки.Валюта2		КАК Валюта2,
		|				Надбавки.Валюта3		КАК Валюта3,
		|				Надбавки.Валюта4		КАК Валюта4,		
		|				Надбавки.Валюта5		КАК Валюта5,		
		|				Надбавки.Валюта6		КАК Валюта6		
		|			ИЗ РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&парамНачало, ПодразделениеОрганизации.Владелец = &парамОрганизация) КАК Надбавки
		|			ГДЕ		Надбавки.Показатель1 > 0 
		|				ИЛИ	Надбавки.Показатель2 > 0 
		|				ИЛИ	Надбавки.Показатель3 > 0 		
		|				ИЛИ	Надбавки.Показатель4 > 0
		|				ИЛИ	Надбавки.Показатель5 > 0
		|				ИЛИ	Надбавки.Показатель6 > 0
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|			ВЫБРАТЬ
		|				Надбавки.Должность		КАК Должность,
		|				Надбавки.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|				Надбавки.ВидНадбавки	КАК ВидНадбавки,
		|				Надбавки.Период			КАК ДатаНачала,
		|				Надбавки.Показатель1	КАК Показатель1,
		|				Надбавки.Показатель2	КАК Показатель2,
		|				Надбавки.Показатель3	КАК Показатель3,
		|				Надбавки.Показатель4	КАК Показатель4,		
		|				Надбавки.Показатель5	КАК Показатель5,		
		|				Надбавки.Показатель6	КАК Показатель6,		
		|				Надбавки.Валюта1		КАК Валюта1,
		|				Надбавки.Валюта2		КАК Валюта2,
		|				Надбавки.Валюта3		КАК Валюта3,
		|				Надбавки.Валюта4		КАК Валюта4,		
		|				Надбавки.Валюта5		КАК Валюта5,		
		|				Надбавки.Валюта6		КАК Валюта6		
		|			ИЗ РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций КАК Надбавки
		|			ГДЕ		НАЧАЛОПЕРИОДА(Надбавки.Период,МЕСЯЦ) = &парамНачало И Надбавки.Период > &парамНачало
		|				И	Надбавки.ПодразделениеОрганизации.Владелец = &парамОрганизация
		|				И	(Надбавки.Показатель1 > 0 
		|				ИЛИ	Надбавки.Показатель2 > 0 
		|				ИЛИ	Надбавки.Показатель3 > 0 		
		|				ИЛИ	Надбавки.Показатель4 > 0
		|				ИЛИ	Надбавки.Показатель5 > 0
		|				ИЛИ	Надбавки.Показатель6 > 0)
		|	) КАК ШтатныеНадбавки
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций КАК Окончания
		|	ПО		НАЧАЛОПЕРИОДА(Окончания.Период) = &парамНачало // все движения за месяц
		|		И	Окончания.ПодразделениеОрганизации.Владелец = &парамОрганизация
		|		И	ШтатныеНадбавки.ДатаНачала < Окончания.Период
		|			
		|	СГРУППИРОВАТЬ ПО
		|		ШтатныеНадбавки.Должность,
		|		ШтатныеНадбавки.ПодразделениеОрганизации,
		|		ШтатныеНадбавки.ВидНадбавки,
		|		ШтатныеНадбавки.ДатаНачала,
		|		ШтатныеНадбавки.Показатель1,
		|		ШтатныеНадбавки.Показатель2,
		|		ШтатныеНадбавки.Показатель3,
		|		ШтатныеНадбавки.Показатель4,		
		|		ШтатныеНадбавки.Показатель5,		
		|		ШтатныеНадбавки.Показатель6,		
		|		ШтатныеНадбавки.Валюта1,
		|		ШтатныеНадбавки.Валюта2,
		|		ШтатныеНадбавки.Валюта3,
		|		ШтатныеНадбавки.Валюта4,		
		|		ШтатныеНадбавки.Валюта5,		
		|		ШтатныеНадбавки.Валюта6		
		|";			
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТШтатноеРасписание = "ВТШтатноеРасписание";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТШтатноеРасписание";

	
	//	ВТВсеНачисления
	Если НЕ ПредварительныйРасчет Тогда
		ТекстЗапросаВТ = "
		|// (п.1.2.3.) Оклады по назначениям (основные, совместители) и штатные надбавки
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		РаботникиОрганизации.Сотрудник,
		|		РаботникиОрганизации.Назначение,
		|		ОсновныеНачисления.ВидРасчета,
		|		ИСТИНА											КАК ОсновноеНачисление,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаНачала <= ОсновныеНачисления.ДатаНачала			ТОГДА ОсновныеНачисления.ДатаНачала		ИНАЧЕ ДвиженияРаботников.ДатаНачала		КОНЕЦ КАК ДатаНачала,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаОкончания <= ОсновныеНачисления.ДатаОкончания	ТОГДА ДвиженияРаботников.ДатаОкончания	ИНАЧЕ ОсновныеНачисления.ДатаОкончания	КОНЕЦ КАК ДатаОкончания,
		|		ДвиженияРаботников.ПодразделениеОрганизации,
		|		ДвиженияРаботников.ГрафикРаботы,
		|		ДвиженияРаботников.Должность,
		//|		NULL											КАК ДокументОснование,
		|		ОсновныеНачисления.ДокументОснование	КАК ДокументОснование,
		|
		|		ОсновныеНачисления.Показатель1,
		|		ОсновныеНачисления.Показатель2,
		|		ОсновныеНачисления.Показатель3,
		|		ОсновныеНачисления.Показатель4,
		|		ОсновныеНачисления.Показатель5,
		|		ОсновныеНачисления.Показатель6,
		|		ОсновныеНачисления.Валюта1,
		|		ОсновныеНачисления.Валюта2,
		|		ОсновныеНачисления.Валюта3,
		|		ОсновныеНачисления.Валюта4,		
		|		ОсновныеНачисления.Валюта5,		
		|		ОсновныеНачисления.Валюта6,		
		|		ОсновныеНачисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|ПОМЕСТИТЬ ВТВсеНачисления	
		|	ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников	
		|	ПО		РаботникиОрганизации.Назначение = ДвиженияРаботников.Сотрудник	
		|
 		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК ОсновныеНачисления	
		|	ПО		РаботникиОрганизации.Назначение = ОсновныеНачисления.Сотрудник	
		|		И	ОсновныеНачисления.ОсновноеНачисление
		|		И	ДвиженияРаботников.ДатаНачала <= ОсновныеНачисления.ДатаОкончания
		|		И	ОсновныеНачисления.ДатаНачала <= ДвиженияРаботников.ДатаОкончания
		|
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.2.3.) Оклады заменам
		|	ВЫБРАТЬ
		|		Замены.Сотрудник,
		|		Замены.Назначение,
		|		ОсновныеНачисления.ВидРасчета,
		|		ИСТИНА							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|		Замены.ДокументОснование		КАК ДокументОснование,
		|		ОсновныеНачисления.Показатель1,
		|		ОсновныеНачисления.Показатель2,
		|		ОсновныеНачисления.Показатель3,
		|		ОсновныеНачисления.Показатель4,
		|		ОсновныеНачисления.Показатель5,
		|		ОсновныеНачисления.Показатель5,
		|		ОсновныеНачисления.Валюта1,
		|		ОсновныеНачисления.Валюта2,
		|		ОсновныеНачисления.Валюта3,
		|		ОсновныеНачисления.Валюта4,		
		|		ОсновныеНачисления.Валюта5,		
		|		ОсновныеНачисления.Валюта6,		
		|		ОсновныеНачисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|	ИЗ ВТЗамены КАК Замены
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК ОсновныеНачисления	
		|	ПО		Замены.Назначение = ОсновныеНачисления.Сотрудник	
		|		И	ОсновныеНачисления.ОсновноеНачисление
		|       // данные на начало замены
		|		И	Замены.ДатаНачала <= ОсновныеНачисления.ДатаОкончания
		|		И	ОсновныеНачисления.ДатаНачала <= Замены.ДатаНачала
		|
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Основные, совместители и их штатные надбавки
		|	ВЫБРАТЬ
		|		РаботникиОрганизации.Сотрудник,
		|		РаботникиОрганизации.Назначение,
		|		ШтатныеНадбавки.ВидРасчета,
		|		ЛОЖЬ											КАК ОсновноеНачисление,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаНачала			ТОГДА ШтатныеНадбавки.ДатаНачала		ИНАЧЕ ДвиженияРаботников.ДатаНачала КОНЕЦ КАК ДатаНачала,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаОкончания <= ШтатныеНадбавки.ДатаОкончания	ТОГДА ДвиженияРаботников.ДатаОкончания	ИНАЧЕ ШтатныеНадбавки.ДатаОкончания	КОНЕЦ КАК ДатаОкончания,
		|		ДвиженияРаботников.ПодразделениеОрганизации		КАК ПодразделениеОрганизации,
		|		ДвиженияРаботников.ГрафикРаботы,
		|		ДвиженияРаботников.Должность,
		|		NULL											КАК ДокументОснование,
		|
		|		ШтатныеНадбавки.Показатель1,
		|		ШтатныеНадбавки.Показатель2,
		|		ШтатныеНадбавки.Показатель3,
		|		ШтатныеНадбавки.Показатель4,
		|		ШтатныеНадбавки.Показатель5,
		|		ШтатныеНадбавки.Показатель6,
		|		ШтатныеНадбавки.Валюта1,
		|		ШтатныеНадбавки.Валюта2,
		|		ШтатныеНадбавки.Валюта3,
		|		ШтатныеНадбавки.Валюта4,		
		|		ШтатныеНадбавки.Валюта5,		
		|		ШтатныеНадбавки.Валюта6,		
		|		NULL	КАК ВидУчетаВремениДляСредней
		|	ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников	
		|	ПО		РаботникиОрганизации.Назначение = ДвиженияРаботников.Сотрудник	
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШтатноеРасписание + " КАК ШтатныеНадбавки	
		|	ПО		ШтатныеНадбавки.ПодразделениеОрганизации = ДвиженияРаботников.ПодразделениеОрганизации
		|		И	ШтатныеНадбавки.Должность = ДвиженияРаботников.Должность
		|		И	ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаОкончания
		|		И	ШтатныеНадбавки.ДатаНачала <= ДвиженияРаботников.ДатаОкончания
		|
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Замены и их штатные надбавки
		|	ВЫБРАТЬ
		|		Замены.Сотрудник,
		|		Замены.Назначение,
		|		ШтатныеНадбавки.ВидРасчета,
		|		ЛОЖЬ							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|		NULL							КАК ДокументОснование,
		|		ШтатныеНадбавки.Показатель1,
		|		ШтатныеНадбавки.Показатель2,
		|		ШтатныеНадбавки.Показатель3,
		|		ШтатныеНадбавки.Показатель4,
		|		ШтатныеНадбавки.Показатель5,
		|		ШтатныеНадбавки.Показатель6,
		|		ШтатныеНадбавки.Валюта1,
		|		ШтатныеНадбавки.Валюта2,
		|		ШтатныеНадбавки.Валюта3,
		|		ШтатныеНадбавки.Валюта4,		
		|		ШтатныеНадбавки.Валюта5,		
		|		ШтатныеНадбавки.Валюта6,		
		|		NULL	КАК ВидУчетаВремениДляСредней
		|	ИЗ ВТЗамены КАК Замены
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШтатноеРасписание + " КАК ШтатныеНадбавки	
		|	ПО		ШтатныеНадбавки.ПодразделениеОрганизации = Замены.ПодразделениеОрганизации
		|		И	ШтатныеНадбавки.Должность = Замены.Должность
		|		И	Замены.ДатаНачала <= ШтатныеНадбавки.ДатаОкончания
		|		И	ШтатныеНадбавки.ДатаНачала <= Замены.ДатаНачала
		|
		|
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.2.) Прочие плановые начисления по работникам кроме начислений по которым заменяли
		|	ВЫБРАТЬ
		|		РаботникиОрганизации.Сотрудник,
		|       ВЫБОР	КОГДА		Начисления.ДокументОснование ССЫЛКА Документ.ОплатаПоСреднемуЗаработку	
		|       				И	Начисления.ДокументОснование.Назначение <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|				ТОГДА Начисления.ДокументОснование.Назначение
		|				ИНАЧЕ РаботникиОрганизации.Назначение
		|		КОНЕЦ 									КАК Назначение,
		|		Начисления.ВидРасчета,
		|		ЛОЖЬ									КАК ОсновноеНачисление,
		|		Начисления.ДатаНачала,
		|		Начисления.ДатаОкончания,
		|   	ВЫБОР КОГДА ДвиженияРаботников.ПодразделениеОрганизации	ЕСТЬ NULL
		|				ТОГДА Начисления.ДокументОснование.ПодразделениеОрганизации
		|        	 ИНАЧЕ
		|				ДвиженияРаботников.ПодразделениеОрганизации	
		|   	КОНЕЦ                                                КАК ПодразделениеОрганизации,
		|
		|		ДвиженияРаботников.ГрафикРаботы,
		|		ДвиженияРаботников.Должность,
		|		Начисления.ДокументОснование,
		|
		|		Начисления.Показатель1,
		|		Начисления.Показатель2,
		|		Начисления.Показатель3,
		|		Начисления.Показатель4,
		|		Начисления.Показатель5,
		|		Начисления.Показатель6,
		|		Начисления.Валюта1,
		|		Начисления.Валюта2,
		|		Начисления.Валюта3,
		|		Начисления.Валюта4,		
		|		Начисления.Валюта5,		
		|		Начисления.Валюта6,		
		|		Начисления.ВидУчетаВремениДляСредней
		|
		|	ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК Начисления	
		|	ПО		РаботникиОрганизации.Назначение = Начисления.Сотрудник	
		|		И	НЕ Начисления.ОсновноеНачисление
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (	
		|		ВЫБРАТЬ
		|			ПлановыеНачисления.Сотрудник  КАК Сотрудник,
		|			ПлановыеНачисления.ВидРасчета  КАК ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала  КАК ДатаНачала,
		|			МАКСИМУМ(Движения.ДатаНачала)  КАК АктуальнаяДата
		|		ИЗ " + ТекстЗапросаВТПлановыеНачисления + " КАК ПлановыеНачисления	
		|		ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК Движения
		|   	ПО		Движения.Сотрудник = ПлановыеНачисления.Сотрудник
		|			И	Движения.ДатаНачала <= ПлановыеНачисления.ДатаНачала
		|		ГДЕ	НЕ ПлановыеНачисления.ОсновноеНачисление
		|		СГРУППИРОВАТЬ ПО
		|			ПлановыеНачисления.Сотрудник,
		|			ПлановыеНачисления.ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала
		|	) КАК ПериодАктуальногоДвижения
		|	ПО 		ПериодАктуальногоДвижения.Сотрудник = Начисления.Сотрудник
		|		И	ПериодАктуальногоДвижения.ВидРасчета = Начисления.ВидРасчета		
		|		И	ПериодАктуальногоДвижения.ДатаНачала = Начисления.ДатаНачала		
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников
		|	ПО		ДвиженияРаботников.Сотрудник = РаботникиОрганизации.Назначение
		|		И	ПериодАктуальногоДвижения.АктуальнаяДата = ДвиженияРаботников.ДатаНачала
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Надо вытеснить основной оклад если было Замещение
		|	ВЫБРАТЬ
		|		Замены.Сотрудник КАК Сотрудник,
		|		Замены.Сотрудник КАК Назначение,
		|		Замены.ВидРасчета,
		|		ЛОЖЬ							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|		NULL КАК ДокументОснование,
		|
		|		NULL КАК Показатель1,
		|		NULL КАК Показатель2,
		|		NULL КАК Показатель3,
		|		NULL КАК Показатель4,
		|		NULL КАК Показатель5,
		|		NULL КАК Показатель6,
		|		&парамВалютаРегламентУчета КАК Валюта1,
		|		NULL КАК Валюта2,
		|		NULL КАК Валюта3,
		|		NULL КАК Валюта4,		
		|		NULL КАК Валюта5,		
		|		NULL КАК Валюта6,		
		|		NULL КАК ВидУчетаВремениДляСредней
		|
		|	ИЗ ВТЗамены КАК Замены
		|	
		|	ГДЕ Замены.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Замещение)
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТВсеНачисления = "ВТВсеНачисления";
	Иначе
		ТекстЗапросаВТ = "
		|// (п.1.2.3.) Оклады по назначениям (основные, совместители) и штатные надбавки
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		РаботникиОрганизации.Сотрудник,
		|		РаботникиОрганизации.Назначение,
		|		ОсновныеНачисления.ВидРасчета,
		|		ИСТИНА											КАК ОсновноеНачисление,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаНачала <= ОсновныеНачисления.ДатаНачала			ТОГДА ОсновныеНачисления.ДатаНачала		ИНАЧЕ ДвиженияРаботников.ДатаНачала		КОНЕЦ КАК ДатаНачала,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаОкончания <= ОсновныеНачисления.ДатаОкончания	ТОГДА ДвиженияРаботников.ДатаОкончания	ИНАЧЕ ОсновныеНачисления.ДатаОкончания	КОНЕЦ КАК ДатаОкончания,
		|		ДвиженияРаботников.ПодразделениеОрганизации,
		|		ДвиженияРаботников.ГрафикРаботы,
		|		ДвиженияРаботников.Должность,
		//|		NULL											КАК ДокументОснование,
		|		ОсновныеНачисления.ДокументОснование	КАК ДокументОснование,
		|
		|		ОсновныеНачисления.Показатель1,
		|		ОсновныеНачисления.Показатель2,
		|		ОсновныеНачисления.Показатель3,
		|		ОсновныеНачисления.Показатель4,
		|		ОсновныеНачисления.Показатель5,
		|		ОсновныеНачисления.Показатель6,
		|		ОсновныеНачисления.Валюта1,
		|		ОсновныеНачисления.Валюта2,
		|		ОсновныеНачисления.Валюта3,
		|		ОсновныеНачисления.Валюта4,		
		|		ОсновныеНачисления.Валюта5,		
		|		ОсновныеНачисления.Валюта6,		
		|		ОсновныеНачисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|ПОМЕСТИТЬ ВТВсеНачисленияБезФильтра	
		|	ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников	
		|	ПО		РаботникиОрганизации.Назначение = ДвиженияРаботников.Сотрудник	
		|
 		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК ОсновныеНачисления	
		|	ПО		РаботникиОрганизации.Назначение = ОсновныеНачисления.Сотрудник	
		|		И	ОсновныеНачисления.ОсновноеНачисление
		|		И	ДвиженияРаботников.ДатаНачала <= ОсновныеНачисления.ДатаОкончания
		|		И	ОсновныеНачисления.ДатаНачала <= ДвиженияРаботников.ДатаОкончания
		|
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.2.3.) Оклады заменам
		|	ВЫБРАТЬ
		|		Замены.Сотрудник,
		|		Замены.Назначение,
		|		ОсновныеНачисления.ВидРасчета,
		|		ИСТИНА							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|		Замены.ДокументОснование		КАК ДокументОснование,
		|		ОсновныеНачисления.Показатель1,
		|		ОсновныеНачисления.Показатель2,
		|		ОсновныеНачисления.Показатель3,
		|		ОсновныеНачисления.Показатель4,
		|		ОсновныеНачисления.Показатель5,
		|		ОсновныеНачисления.Показатель5,
		|		ОсновныеНачисления.Валюта1,
		|		ОсновныеНачисления.Валюта2,
		|		ОсновныеНачисления.Валюта3,
		|		ОсновныеНачисления.Валюта4,		
		|		ОсновныеНачисления.Валюта5,		
		|		ОсновныеНачисления.Валюта6,		
		|		ОсновныеНачисления.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней
		|	ИЗ ВТЗамены КАК Замены
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК ОсновныеНачисления	
		|	ПО		Замены.Назначение = ОсновныеНачисления.Сотрудник	
		|		И	ОсновныеНачисления.ОсновноеНачисление
		|       // данные на начало замены
		|		И	Замены.ДатаНачала <= ОсновныеНачисления.ДатаОкончания
		|		И	ОсновныеНачисления.ДатаНачала <= Замены.ДатаНачала
		|
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Основные, совместители и их штатные надбавки
		|	ВЫБРАТЬ
		|		РаботникиОрганизации.Сотрудник,
		|		РаботникиОрганизации.Назначение,
		|		ШтатныеНадбавки.ВидРасчета,
		|		ЛОЖЬ											КАК ОсновноеНачисление,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаНачала			ТОГДА ШтатныеНадбавки.ДатаНачала		ИНАЧЕ ДвиженияРаботников.ДатаНачала КОНЕЦ КАК ДатаНачала,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаОкончания <= ШтатныеНадбавки.ДатаОкончания	ТОГДА ДвиженияРаботников.ДатаОкончания	ИНАЧЕ ШтатныеНадбавки.ДатаОкончания	КОНЕЦ КАК ДатаОкончания,
		|		ДвиженияРаботников.ПодразделениеОрганизации		КАК ПодразделениеОрганизации,
		|		ДвиженияРаботников.ГрафикРаботы,
		|		ДвиженияРаботников.Должность,
		|		NULL											КАК ДокументОснование,
		|
		|		ШтатныеНадбавки.Показатель1,
		|		ШтатныеНадбавки.Показатель2,
		|		ШтатныеНадбавки.Показатель3,
		|		ШтатныеНадбавки.Показатель4,
		|		ШтатныеНадбавки.Показатель5,
		|		ШтатныеНадбавки.Показатель6,
		|		ШтатныеНадбавки.Валюта1,
		|		ШтатныеНадбавки.Валюта2,
		|		ШтатныеНадбавки.Валюта3,
		|		ШтатныеНадбавки.Валюта4,		
		|		ШтатныеНадбавки.Валюта5,		
		|		ШтатныеНадбавки.Валюта6,		
		|		NULL	КАК ВидУчетаВремениДляСредней
		|	ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников	
		|	ПО		РаботникиОрганизации.Назначение = ДвиженияРаботников.Сотрудник	
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШтатноеРасписание + " КАК ШтатныеНадбавки	
		|	ПО		ШтатныеНадбавки.ПодразделениеОрганизации = ДвиженияРаботников.ПодразделениеОрганизации
		|		И	ШтатныеНадбавки.Должность = ДвиженияРаботников.Должность
		|		И	ДвиженияРаботников.ДатаНачала <= ШтатныеНадбавки.ДатаОкончания
		|		И	ШтатныеНадбавки.ДатаНачала <= ДвиженияРаботников.ДатаОкончания
		|
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Замены и их штатные надбавки
		|	ВЫБРАТЬ
		|		Замены.Сотрудник,
		|		Замены.Назначение,
		|		ШтатныеНадбавки.ВидРасчета,
		|		ЛОЖЬ							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|		NULL							КАК ДокументОснование,
		|		ШтатныеНадбавки.Показатель1,
		|		ШтатныеНадбавки.Показатель2,
		|		ШтатныеНадбавки.Показатель3,
		|		ШтатныеНадбавки.Показатель4,
		|		ШтатныеНадбавки.Показатель5,
		|		ШтатныеНадбавки.Показатель6,
		|		ШтатныеНадбавки.Валюта1,
		|		ШтатныеНадбавки.Валюта2,
		|		ШтатныеНадбавки.Валюта3,
		|		ШтатныеНадбавки.Валюта4,		
		|		ШтатныеНадбавки.Валюта5,		
		|		ШтатныеНадбавки.Валюта6,		
		|		NULL	КАК ВидУчетаВремениДляСредней
		|	ИЗ ВТЗамены КАК Замены
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШтатноеРасписание + " КАК ШтатныеНадбавки	
		|	ПО		ШтатныеНадбавки.ПодразделениеОрганизации = Замены.ПодразделениеОрганизации
		|		И	ШтатныеНадбавки.Должность = Замены.Должность
		|		И	Замены.ДатаНачала <= ШтатныеНадбавки.ДатаОкончания
		|		И	ШтатныеНадбавки.ДатаНачала <= Замены.ДатаНачала
		|
		|
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.2.) Прочие плановые начисления по работникам кроме начислений по которым заменяли
		|	ВЫБРАТЬ
		|		РаботникиОрганизации.Сотрудник,
		|       ВЫБОР	КОГДА		Начисления.ДокументОснование ССЫЛКА Документ.ОплатаПоСреднемуЗаработку	
		|       				И	Начисления.ДокументОснование.Назначение <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|				ТОГДА Начисления.ДокументОснование.Назначение
		|				ИНАЧЕ РаботникиОрганизации.Назначение
		|		КОНЕЦ 									КАК Назначение,
		|		Начисления.ВидРасчета,
		|		ЛОЖЬ									КАК ОсновноеНачисление,
		|		Начисления.ДатаНачала,
		|		Начисления.ДатаОкончания,
		|   	ВЫБОР КОГДА ДвиженияРаботников.ПодразделениеОрганизации	ЕСТЬ NULL
		|				ТОГДА Начисления.ДокументОснование.ПодразделениеОрганизации
		|        	 ИНАЧЕ
		|				ДвиженияРаботников.ПодразделениеОрганизации	
		|   	КОНЕЦ                                                КАК ПодразделениеОрганизации,
		|
		|		ДвиженияРаботников.ГрафикРаботы,
		|		ДвиженияРаботников.Должность,
		|		Начисления.ДокументОснование,
		|
		|		Начисления.Показатель1,
		|		Начисления.Показатель2,
		|		Начисления.Показатель3,
		|		Начисления.Показатель4,
		|		Начисления.Показатель5,
		|		Начисления.Показатель6,
		|		Начисления.Валюта1,
		|		Начисления.Валюта2,
		|		Начисления.Валюта3,
		|		Начисления.Валюта4,		
		|		Начисления.Валюта5,		
		|		Начисления.Валюта6,		
		|		Начисления.ВидУчетаВремениДляСредней
		|
		|	ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеНачисления + " КАК Начисления	
		|	ПО		РаботникиОрганизации.Назначение = Начисления.Сотрудник	
		|		И	НЕ Начисления.ОсновноеНачисление
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (	
		|		ВЫБРАТЬ
		|			ПлановыеНачисления.Сотрудник  КАК Сотрудник,
		|			ПлановыеНачисления.ВидРасчета  КАК ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала  КАК ДатаНачала,
		|			МАКСИМУМ(Движения.ДатаНачала)  КАК АктуальнаяДата
		|		ИЗ " + ТекстЗапросаВТПлановыеНачисления + " КАК ПлановыеНачисления	
		|		ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК Движения
		|   	ПО		Движения.Сотрудник = ПлановыеНачисления.Сотрудник
		|			И	Движения.ДатаНачала <= ПлановыеНачисления.ДатаНачала
		|		ГДЕ	НЕ ПлановыеНачисления.ОсновноеНачисление
		|		СГРУППИРОВАТЬ ПО
		|			ПлановыеНачисления.Сотрудник,
		|			ПлановыеНачисления.ВидРасчета,
		|			ПлановыеНачисления.ДатаНачала
		|	) КАК ПериодАктуальногоДвижения
		|	ПО 		ПериодАктуальногоДвижения.Сотрудник = Начисления.Сотрудник
		|		И	ПериодАктуальногоДвижения.ВидРасчета = Начисления.ВидРасчета		
		|		И	ПериодАктуальногоДвижения.ДатаНачала = Начисления.ДатаНачала		
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников
		|	ПО		ДвиженияРаботников.Сотрудник = РаботникиОрганизации.Назначение
		|		И	ПериодАктуальногоДвижения.АктуальнаяДата = ДвиженияРаботников.ДатаНачала
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|// (п.1.) Надо вытеснить основной оклад если было Замещение
		|	ВЫБРАТЬ
		|		Замены.Сотрудник КАК Сотрудник,
		|		Замены.Сотрудник КАК Назначение,
		|		Замены.ВидРасчета,
		|		ЛОЖЬ							КАК ОсновноеНачисление,
		|		Замены.ДатаНачала				КАК ДатаНачала,
		|		Замены.ДатаОкончания			КАК ДатаОкончания,
		|		Замены.ПодразделениеОрганизации,
		|		Замены.ГрафикРаботы,
		|		Замены.Должность,
		|		NULL КАК ДокументОснование,
		|
		|		NULL КАК Показатель1,
		|		NULL КАК Показатель2,
		|		NULL КАК Показатель3,
		|		NULL КАК Показатель4,
		|		NULL КАК Показатель5,
		|		NULL КАК Показатель6,
		|		&парамВалютаРегламентУчета КАК Валюта1,
		|		NULL КАК Валюта2,
		|		NULL КАК Валюта3,
		|		NULL КАК Валюта4,		
		|		NULL КАК Валюта5,		
		|		NULL КАК Валюта6,		
		|		NULL КАК ВидУчетаВремениДляСредней
		|
		|	ИЗ ВТЗамены КАК Замены
		|	
		|	ГДЕ Замены.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Замещение)
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		
		Запрос.УстановитьПараметр("НачисленияПредварительногоРасчета",ПроведениеРасчетов.ПолучитьСписокНачисленийДляПредварительногоРасчета());
		Запрос.УстановитьПараметр("ДатаПредварительногоРасчета",Дата);
		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		Начисления.Сотрудник,
		|		Начисления.Назначение,
		|		Начисления.ВидРасчета,
		|		Начисления.ОсновноеНачисление,
		|		Начисления.ДатаНачала,
		|		ВЫБОР КОГДА Начисления.ДатаОкончания <= &ДатаПредварительногоРасчета	ТОГДА Начисления.ДатаОкончания	ИНАЧЕ &ДатаПредварительногоРасчета	КОНЕЦ КАК ДатаОкончания,
		|		Начисления.ПодразделениеОрганизации,
		|		Начисления.ГрафикРаботы,
		|		Начисления.Должность,
		|		Начисления.ДокументОснование,
		|		Начисления.Показатель1,
		|		Начисления.Показатель2,
		|		Начисления.Показатель3,
		|		Начисления.Показатель4,
		|		Начисления.Показатель5,
		|		Начисления.Показатель6,
		|		Начисления.Валюта1,
		|		Начисления.Валюта2,
		|		Начисления.Валюта3,
		|		Начисления.Валюта4,		
		|		Начисления.Валюта5,		
		|		Начисления.Валюта6,		
		|		Начисления.ВидУчетаВремениДляСредней
		|ПОМЕСТИТЬ ВТВсеНачисления	
		|	ИЗ ВТВсеНачисленияБезФильтра КАК Начисления
		|	ГДЕ Начисления.ВидРасчета В (&НачисленияПредварительногоРасчета)
		|     И Начисления.ДатаНачала <= &ДатаПредварительногоРасчета
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		
		ТекстЗапросаВТВсеНачисления = "ВТВсеНачисления";

	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВсеНачисления";
	
	// ВТСводныеИндивидуальныеГрафики
	Если Истина Тогда 
		ТекстЗапросаВТ = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СводныеИндивидуальныеГрафики.Сотрудник КАК Сотрудник,
		|	СводныеИндивидуальныеГрафики.Назначение КАК Назначение,
		|	СводныеИндивидуальныеГрафики.Месяц КАК Месяц,
		|	СводныеИндивидуальныеГрафики.Дней КАК НормаДнейПоГрафику,
		|	СводныеИндивидуальныеГрафики.Часов КАК НормаЧасовПоГрафику
		|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафики
		|ИЗ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|ГДЕ	СводныеИндивидуальныеГрафики.Сотрудник в (&парамСотрудник)
		|	И	СводныеИндивидуальныеГрафики.Месяц = &парамПериодРегистрации
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСводныеИндивидуальныеГрафики";
	
	
	//	ВТОкладТариф
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.Организация	КАК Организация,
		|	Начисления.Сотрудник	КАК Назначение,
		|	Начисления.ВидРасчета	КАК ВидРасчета,
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
		|				ТОГДА ""ЗА МЕСЯЦ""
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
		|			ТОГДА ""ЗА ДЕНЬ""
		|			ИНАЧЕ ""ЗА ЧАС""
		|	КОНЕЦ					КАК СпособУчетаВремени,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Размер
		|			ИНАЧЕ Начисления.Показатель1
		|	КОНЕЦ	КАК ОкладТариф,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Валюта
		|			ИНАЧЕ Начисления.Валюта1
		|	КОНЕЦ		КАК Валюта1,
		|	Начисления.Период		КАК ДатаНачала,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1),ДЕНЬ))	КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОкладТариф	
		|ИЗ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК РазмерТарифныхСтавок
		|ПО Начисления.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Окончания
		|ПО Начисления.ВидРасчетаИзмерение <> Начисления.ВидРасчета
		|	И	Начисления.Актуальность 
		|	И	Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник = Окончания.Сотрудник
		|	И	Начисления.ВидРасчетаИзмерение = Окончания.ВидРасчетаИзмерение
		|	И	Начисления.Период < Окончания.Период
		|
		|
		|ГДЕ	Начисления.ВидРасчетаИзмерение <> Начисления.ВидРасчета
		|	И	Начисления.Актуальность 
		|	И	Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник В (ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК Работники)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Организация,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
		|				ТОГДА ""ЗА МЕСЯЦ""
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
		|			ТОГДА ""ЗА ДЕНЬ""
		|			ИНАЧЕ ""ЗА ЧАС""
		|	КОНЕЦ,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Размер
		|			ИНАЧЕ Начисления.Показатель1
		|	КОНЕЦ,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Валюта
		|			ИНАЧЕ Начисления.Валюта1
		|	КОНЕЦ,
		|	Начисления.Период
 		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТОкладТариф";
	
	
		//	ВТЗначенияПоказателей
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ПериодДействия КАК ПериодДействия,
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателей.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
		|		И НЕ (ЗначенияПоказателей.Валюта В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))
		|			ТОГДА ЗначенияПоказателей.Значение * ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
		|		ИНАЧЕ ЗначенияПоказателей.Значение
		|	КОНЕЦ КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПоказателей
		|ИЗ 
		|   (ВЫБРАТЬ 
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) КАК ПериодДействия,
		|	ЗначенияПоказателей.Валюта,
		|	ЗначенияПоказателей.Значение
		|	ИЗ РегистрСведений.ЗначенияПоказателейСхемМотивации КАК ЗначенияПоказателей
		|	
		|	ОБЪЕДИНИТЬ
		|
		|   ВЫБРАТЬ 
		|	ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка),
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	&парамНачало,
		|	ЗначенияПоказателей.Валюта,
		|	ЗначенияПоказателей.Значение
		|	ИЗ РегистрСведений.ПериодическиеЗначенияПоказателейСхемМотивации.СрезПоследних(&парамКонец, Организация = &парамОрганизация) КАК ЗначенияПоказателей
		|   ) КАК ЗначенияПоказателей
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты
		|ПО Валюты.Валюта = ЗначенияПоказателей.Валюта 
		|	
		|ГДЕ	ЗначенияПоказателей.Организация = &парамОрганизация
		|	И	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) = &парамНачало
		|	И	(ЗначенияПоказателей.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|	ИЛИ	ЗначенияПоказателей.Сотрудник В (ВЫБРАТЬ Назначение ИЗ ВТСписокРаботникиИЗамены КАК Работники))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЗначенияПоказателей";
	
	
	//	ВТПоказатели
	Если Истина Тогда 
		//	Описание:
		// 		
		//		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПодразделенияВПоказателях.Сотрудник КАК Сотрудник,
		|	СотрудникиПодразделенияВПоказателях.Подразделение КАК Подразделение,
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6,
		|	ЗначенияПоказателей1.Значение КАК Показатель1,
		|	ЗначенияПоказателей2.Значение КАК Показатель2,
		|	ЗначенияПоказателей3.Значение КАК Показатель3,
		|	ЗначенияПоказателей4.Значение КАК Показатель4,
		|	ЗначенияПоказателей5.Значение КАК Показатель5,
		|	ЗначенияПоказателей6.Значение КАК Показатель6
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ (ВЫБРАТЬ РАЗЛИЧНЫЕ Подразделение, Сотрудник ИЗ ВТЗначенияПоказателей КАК ЗначенияПоказателей) КАК СотрудникиПодразделенияВПоказателях
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Показатели.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
		|	ПО Показатели.Ссылка = Показатели1.Ссылка И Показатели1.НомерСтроки = 1
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели2
		|	ПО Показатели.Ссылка = Показатели2.Ссылка И Показатели2.НомерСтроки = 2
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели3
		|	ПО Показатели.Ссылка = Показатели3.Ссылка И Показатели3.НомерСтроки = 3
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели4
		|	ПО Показатели.Ссылка = Показатели4.Ссылка И Показатели4.НомерСтроки = 4
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели5
		|	ПО Показатели.Ссылка = Показатели5.Ссылка И Показатели5.НомерСтроки = 5
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели6
		|	ПО Показатели.Ссылка = Показатели6.Ссылка И Показатели6.НомерСтроки = 6
		|	
		|) КАК ПоказателиВидовРасчета
		|ПО ИСТИНА
		|	
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей1
		|ПО 	ПоказателиВидовРасчета.Показатель1 = ЗначенияПоказателей1.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей1.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей1.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей2
		|ПО		ПоказателиВидовРасчета.Показатель2 = ЗначенияПоказателей2.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей2.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей2.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей3
		|ПО		ПоказателиВидовРасчета.Показатель3 = ЗначенияПоказателей3.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей3.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей3.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей4
		|ПО		ПоказателиВидовРасчета.Показатель4 = ЗначенияПоказателей4.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей4.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей4.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей5
		|ПО		ПоказателиВидовРасчета.Показатель5 = ЗначенияПоказателей5.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей5.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей5.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей6
		|ПО		ПоказателиВидовРасчета.Показатель6 = ЗначенияПоказателей6.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей6.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей6.Подразделение
		|
		|ГДЕ	ЗначенияПоказателей1.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей2.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей3.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей4.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей5.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей6.Значение ЕСТЬ НЕ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПоказатели";
	
	
	Запрос.Текст = " 
	|	ВЫБРАТЬ 
	|		СписокНачислений1.Сотрудник			КАК Сотрудник,
	|		СписокНачислений1.Назначение		КАК Назначение,
	|		СписокНачислений1.ДатаНачала		КАК ДатаНачала,
	|		СписокНачислений1.ДатаОкончания		КАК ДатаОкончания,
	|		СписокНачислений1.ВидРасчета		КАК ВидРасчета,
	|		СписокНачислений1.ДокументОснование	КАК ДокументОснование,
	|		МАКСИМУМ(Оклады1.ДатаНачала) КАК ДатаНачалаОклада
	|	ИЗ " + ТекстЗапросаВТВсеНачисления + " КАК СписокНачислений1
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады1
	|	ПО		СписокНачислений1.Назначение = Оклады1.Назначение
	| 		И  (СписокНачислений1.ДатаНачала <= Оклады1.ДатаОкончания ИЛИ Оклады1.ДатаОкончания ЕСТЬ NULL)
	| 		И  Оклады1.ДатаНачала <= СписокНачислений1.ДатаОкончания
	|	СГРУППИРОВАТЬ ПО 
	|		СписокНачислений1.Сотрудник,
	|		СписокНачислений1.Назначение,
	|		СписокНачислений1.ДатаНачала,
	|		СписокНачислений1.ДатаОкончания,
	|		СписокНачислений1.ВидРасчета,
	|		СписокНачислений1.ДокументОснование
	|";

	//Основной текст запроса
	ОсновнойТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокНачислений.Сотрудник		КАК Сотрудник,
	|	СписокНачислений.Назначение		КАК Назначение,
	|	ВЫБОР КОГДА ЕСТЬNULL(Оклады.ДатаНачала,СписокНачислений.ДатаНачала) <= СписокНачислений.ДатаНачала		ТОГДА СписокНачислений.ДатаНачала	ИНАЧЕ Оклады.ДатаНачала		КОНЕЦ			КАК ДатаНачала,
	|	ВЫБОР КОГДА ЕСТЬNULL(Оклады.ДатаОкончания,СписокНачислений.ДатаОкончания) < СписокНачислений.ДатаОкончания	ТОГДА Оклады.ДатаОкончания	ИНАЧЕ СписокНачислений.ДатаОкончания	КОНЕЦ	КАК ДатаОкончания,
	|	ВЫБОР КОГДА ЕСТЬNULL(Оклады.ДатаНачала,СписокНачислений.ДатаНачала) <= СписокНачислений.ДатаНачала		ТОГДА СписокНачислений.ДатаНачала	ИНАЧЕ Оклады.ДатаНачала		КОНЕЦ 			КАК БазовыйПериодНачало,
	|	ВЫБОР КОГДА ЕСТЬNULL(Оклады.ДатаОкончания,СписокНачислений.ДатаОкончания) < СписокНачислений.ДатаОкончания	ТОГДА Оклады.ДатаОкончания	ИНАЧЕ СписокНачислений.ДатаОкончания	КОНЕЦ	КАК БазовыйПериодКонец,
	|	СписокНачислений.ОсновноеНачисление КАК ОсновноеНачисление,
	|	СписокНачислений.ВидРасчета КАК ВидРасчета,
	|	СписокНачислений.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
	|	СписокНачислений.Валюта1 КАК Валюта,
	|
	|	ВЫБОР
	|		КОГДА СписокНачислений.Валюта1 = &парамВалютаРегламентУчета
	|				ИЛИ СписокНачислений.Валюта1 = &парамПустаяВалюта
	|			ТОГДА 1
	|		ИНАЧЕ Валюты1.Курс
	|	КОНЕЦ КАК КурсВалюты,		
	|";
	НормаЧасовЗаМесяц =  "
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику
	|			ИНАЧЕ  ДанныеКалендаря.НормаЧасовЗаМесяц
	|	КОНЕЦ
	|	";
	НормаДнейЗаМесяц =  "
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаДнейПоГрафику, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.НормаДнейПоГрафику
	|			ИНАЧЕ  ДанныеКалендаря.НормаДнейЗаМесяц
	|	КОНЕЦ
	|	";
	ОсновнойТекстЗапроса =  ОсновнойТекстЗапроса + "
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаДнейПоГрафику, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.НормаДнейПоГрафику
	|			ИНАЧЕ  ДанныеКалендаря.НормаДнейЗаМесяц
	|	КОНЕЦ	КАК НормаДнейЗаМесяц,
	|	" + НормаЧасовЗаМесяц + "	КАК НормаЧасовЗаМесяц,
	|	";
	
	
	////ТекстПоказатель1 = "
	////|	ВЫБОР 
	////|		КОГДА 		ЗначенияПоказателейСхемМотивации.Показатель = ТипПоказатель1.Показатель 
	////|				И	ЗначенияПоказателейСхемМотивации.Значение ЕСТЬ НЕ NULL
	////|			ТОГДА
	////|				ВЫБОР
	////|					КОГДА СписокНачислений.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
	////|							ИЛИ ЗначенияПоказателейСхемМотивации.Валюта = &парамВалютаРегламентУчета
	////|							ИЛИ ЗначенияПоказателейСхемМотивации.Валюта = &парамПустаяВалюта
	////|						ТОГДА ЗначенияПоказателейСхемМотивации.Значение 
	////|					ИНАЧЕ ЗначенияПоказателейСхемМотивации.Значение * ЕСТЬNULL(ЗначенияПоказателейСхемМотивации.Курс / ЗначенияПоказателейСхемМотивации.Кратность, 0) 
	////|				КОНЕЦ
	////|		ИНАЧЕ		
	////|			ВЫБОР
	////|				КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
	////|					ТОГДА 0
	////|				КОГДА СписокНачислений.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
	////|						ИЛИ СписокНачислений.Валюта1 = &парамВалютаРегламентУчета
	////|						ИЛИ СписокНачислений.Валюта1 = &парамПустаяВалюта
	////|					ТОГДА //СписокНачислений.Показатель1
	////|					ВЫБОР КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная) ИЛИ ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	////|						ТОГДА	ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И (" + НормаЧасовЗаМесяц + ") > 0
	////|											ТОГДА Оклады.ОкладТариф/(" + НормаЧасовЗаМесяц + ")
	////|									КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	////|											ТОГДА Оклады.ОкладТариф/8
	////|									ИНАЧЕ Оклады.ОкладТариф
	////|							КОНЕЦ
	////|						ИНАЧЕ СписокНачислений.Показатель1
	////|					КОНЕЦ
	////|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная) ИЛИ ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	////|					ТОГДА ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0) * 
	////|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И (" + НормаЧасовЗаМесяц + ") > 0
	////|										ТОГДА Оклады.ОкладТариф/(" + НормаЧасовЗаМесяц + ")
	////|								КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	////|										ТОГДА Оклады.ОкладТариф/8
	////|								ИНАЧЕ Оклады.ОкладТариф
	////|						КОНЕЦ
	////|				ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
	////|			КОНЕЦ
	////|	КОНЕЦ
	////|	";
	
	
		ТекстПоказатель1 = "
	|			ВЫБОР
	|				КОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1
	|				КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
	|					И СписокНачислений.ВидРасчета.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы)
	|					И СписокНачислений.ВидРасчета.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
	|					ТОГДА 0
	|				КОГДА СписокНачислений.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
	|						ИЛИ СписокНачислений.Валюта1 = &парамВалютаРегламентУчета
	|						ИЛИ СписокНачислений.Валюта1 = &парамПустаяВалюта
	|					ТОГДА 
	|					ВЫБОР КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|                       //СПЕЦИАЛЬНЫЕ
	|						ТОГДА	ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И (" + НормаЧасовЗаМесяц + ") > 0
	|											ТОГДА Оклады.ОкладТариф/(" + НормаЧасовЗаМесяц + ")
	|									КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|											ТОГДА Оклады.ОкладТариф/8
	|									ИНАЧЕ Оклады.ОкладТариф
	|							КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|					ТОГДА 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И (" + НормаДнейЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф/(" + НормаДнейЗаМесяц + ")
	|								КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|										ТОГДА Оклады.ОкладТариф
	|								ИНАЧЕ Оклады.ОкладТариф*8
	|						КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|					ТОГДА 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ""
	|										ТОГДА Оклады.ОкладТариф
	|								КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""  И (" + НормаДнейЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф*(" + НормаДнейЗаМесяц + ")
	|								ИНАЧЕ Оклады.ОкладТариф*(" + НормаЧасовЗаМесяц + ")
	|						КОНЕЦ
	|						ИНАЧЕ СписокНачислений.Показатель1
	|					КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|					ТОГДА ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0) * 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И (" + НормаЧасовЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф/(" + НормаЧасовЗаМесяц + ")
	|								КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|										ТОГДА Оклады.ОкладТариф/8
	|								ИНАЧЕ Оклады.ОкладТариф
	|						КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|					ТОГДА ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0) * 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И (" + НормаДнейЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф/(" + НормаДнейЗаМесяц + ")
	|								КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|										ТОГДА Оклады.ОкладТариф
	|								ИНАЧЕ Оклады.ОкладТариф*8
	|						КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|					ТОГДА ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0) * 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ""
	|										ТОГДА Оклады.ОкладТариф
	|								КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""  И (" + НормаДнейЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф*(" + НормаДнейЗаМесяц + ")
	|								ИНАЧЕ Оклады.ОкладТариф*(" + НормаЧасовЗаМесяц + ")
	|						КОНЕЦ
	|				ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
	|			КОНЕЦ
	|	";

	
	
	ТекстПоказатель2 = СтрЗаменить(ТекстПоказатель1, "1", "2");
	ТекстПоказатель3 = СтрЗаменить(ТекстПоказатель1, "1", "3");
	ТекстПоказатель4 = СтрЗаменить(ТекстПоказатель1, "1", "4");
	ТекстПоказатель5 = СтрЗаменить(ТекстПоказатель1, "1", "5");
	ТекстПоказатель6 = СтрЗаменить(ТекстПоказатель1, "1", "6");
	
	//Некоторые способы расчета имеют "виртуальный" показатель 1 "часовой тариф"
	ТекстПоказатель1 = СтрЗаменить(ТекстПоказатель1, "//СПЕЦИАЛЬНЫЕ", 
	"ИЛИ СписокНачислений.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы) 
	|ИЛИ СписокНачислений.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
	|ИЛИ СписокНачислений.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеУмножитьНаПроцент)");
	
	ОсновнойТекстЗапроса =  ОсновнойТекстЗапроса + "
	|	Оклады.ОкладТариф КАК ОкладТариф,
	|	" + ТекстПоказатель1 + " КАК Показатель1,
	|	" + ТекстПоказатель2 + " КАК Показатель2,
	|	" + ТекстПоказатель3 + " КАК Показатель3,
	|	" + ТекстПоказатель4 + " КАК Показатель4,
	|	" + ТекстПоказатель5 + " КАК Показатель5,
	|	" + ТекстПоказатель6 + " КАК Показатель6,
	|	СписокНачислений.ДокументОснование,
	|	СписокНачислений.ВидУчетаВремениДляСредней,
	|	ВЫБОР	КОГДА ГрафикРаботыПоСотруднику.Назначение ЕСТЬ NULL
	|				ТОГДА СписокНачислений.ГрафикРаботы 
	|				ИНАЧЕ СписокНачислений.Назначение
	|	КОНЕЦ								КАК ГрафикРаботы,
	|
	|	ЕСТЬNULL(СписокНачислений.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СписокНачислений.ПодразделениеОрганизации,
	|";
	// если не перерасчет - проверяем проведенность в расчетном периоде
	Если НЕ ЕстьПерерассчитываемыйДокумент Тогда
		ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УжеПроведен,";
	Иначе
		ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
		|	ЛОЖЬ Как УжеПроведен,";
	КонецЕсли;
	ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
	|	СписокНачислений.Сотрудник.Наименование КАК СотрудникНаименование
	|ИЗ " + ТекстЗапросаВТВсеНачисления + " КАК СписокНачислений
	|
	|//-----------------------
	|// курсы валюты 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты1
	|ПО Валюты1.Валюта = СписокНачислений.Валюта1 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты2
	|ПО Валюты2.Валюта = СписокНачислений.Валюта2 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты3
	|ПО Валюты3.Валюта = СписокНачислений.Валюта3 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты4
	|ПО Валюты4.Валюта = СписокНачислений.Валюта4 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты5
	|ПО Валюты5.Валюта = СписокНачислений.Валюта5 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты6
	|ПО Валюты6.Валюта = СписокНачислений.Валюта6 
	|
	|//-----------------------
	|// данные о видах показателей
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ТипПоказатель1
	|ПО		ТипПоказатель1.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель1.НомерСтроки = 1
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ТипПоказатель2
	|ПО		ТипПоказатель2.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель2.НомерСтроки = 2
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ТипПоказатель3
	|ПО		ТипПоказатель3.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель3.НомерСтроки = 3
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ТипПоказатель4
	|ПО		ТипПоказатель4.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель4.НомерСтроки = 4
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ТипПоказатель5
	|ПО		ТипПоказатель5.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель5.НомерСтроки = 5
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ТипПоказатель6
	|ПО		ТипПоказатель6.Ссылка = СписокНачислений.ВидРасчета И ТипПоказатель6.НомерСтроки = 6
	|";
	// Выборка сведений о уже выполненных начислениях за отработанное время 
	Если НЕ ЕстьПерерассчитываемыйДокумент Тогда
		ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
		|
		|//-----------------------
		|// Выборка сведений о уже выполненных начислениях за отработанное время 
		|ЛЕВОЕ СОЕДИНЕНИЕ (
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ОсновныеНачисления.Сотрудник				КАК Сотрудник,
		|		ОсновныеНачисления.Назначение				КАК Назначение,
		|		ОсновныеНачисления.ПодразделениеОрганизации	КАК ПодразделениеОрганизации
		|	ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТСписокРаботникиИЗамены + " КАК ТаблицаДвиженийРаботников
		|	ПО ОсновныеНачисления.Назначение = ТаблицаДвиженийРаботников.Назначение
		|	ГДЕ		ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
		|		И	ОсновныеНачисления.ПериодДействияКонец <= &парамКонец
		|		И	ОсновныеНачисления.ПериодДействияНачало >= &парамНачало
		|		И	ОсновныеНачисления.Организация = &парамОрганизация
		|		И	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
		|		И	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени
		|		И	НЕ ОсновныеНачисления.Сторно
		|		И	ОсновныеНачисления.Регистратор <> &парамРегистратор
		|		И	ОсновныеНачисления.Регистратор ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций		
		|		И	ОсновныеНачисления.Организация = &парамОрганизация
		|) КАК ОсновныеНачисления
		|ПО		ОсновныеНачисления.Сотрудник = СписокНачислений.Сотрудник
		|	И	ОсновныеНачисления.ПодразделениеОрганизации = СписокНачислений.ПодразделениеОрганизации		
		|";
	КонецЕсли;
	ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
	|
	|//-----------------------
	|// если есть индивидуальный график и он зарегистрирвоан в регистре сведений ГрафикиРаботыПоВидамВремени
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СтрокиНачисления.Сотрудник		КАК Сотрудник,
	|		СтрокиНачисления.Назначение		КАК Назначение
	|	ИЗ " + ТекстЗапросаВТВсеНачисления + " Как СтрокиНачисления
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|   ПО		ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СтрокиНачисления.Сотрудник
	|   	И	ГрафикиРаботыПоВидамВремени.Сотрудник = СтрокиНачисления.Назначение
	|		И	ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ)
	|) КАК ГрафикРаботыПоСотруднику       
	|ПО		СписокНачислений.Сотрудник = ГрафикРаботыПоСотруднику.Сотрудник
	|	И	СписокНачислений.Назначение = ГрафикРаботыПоСотруднику.Назначение
	|       
	|
	|//-----------------------
	|// данные нормы календаря по индивидуальным графикам
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = &парамНачало 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И	ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеИндивидуальногоКалендаря
	|ПО		ВЫБОР	КОГДА ГрафикРаботыПоСотруднику.Сотрудник = СписокНачислений.Сотрудник	// это индивидуальный график и не сокращенное время работы
	|				ТОГДА ДанныеИндивидуальногоКалендаря.ГрафикРаботы = СписокНачислений.Сотрудник 
	|		     		И ДанныеИндивидуальногоКалендаря.Сотрудник = СписокНачислений.Назначение
	|				ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ 
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = &парамНачало 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеКалендаря
	|ПО		ВЫБОР	КОГДА СписокНачислений.ГрафикРаботы.СокращенноеРабочееВремя	
	|		     		ТОГДА ДанныеКалендаря.ГрафикРаботы = СписокНачислений.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|				ИНАЧЕ ДанныеКалендаря.ГрафикРаботы = СписокНачислений.ГрафикРаботы
	|		КОНЕЦ 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|ПО		СписокНачислений.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|	И	СписокНачислений.Назначение = СводныеИндивидуальныеГрафики.Назначение
	|	И	НАЧАЛОПЕРИОДА(СписокНачислений.ДатаНачала, МЕСЯЦ) = СводныеИндивидуальныеГрафики.Месяц
	|
	|//-----------------------
	|// данные показателей Схем Мотиваций
	|// по конкретным сотрудникам
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоСотруднику
	|ПО		СписокНачислений.ВидРасчета = ПоказателиСхемМотивацийПоСотруднику.ВидРасчета
	|	И	СписокНачислений.Назначение = ПоказателиСхемМотивацийПоСотруднику.Сотрудник
	|
	|// по подразделению
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоПодразделению
	|ПО		СписокНачислений.ВидРасчета = ПоказателиСхемМотивацийПоПодразделению.ВидРасчета
	|	И	СписокНачислений.ПодразделениеОрганизации = ПоказателиСхемМотивацийПоПодразделению.Подразделение
	|
	|// организации
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоОрганизации
	|ПО		СписокНачислений.ВидРасчета = ПоказателиСхемМотивацийПоОрганизации.ВидРасчета
	|	И	ПоказателиСхемМотивацийПоОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И	ПоказателиСхемМотивацийПоОрганизации.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) 
	|
	|
	|// данные об окладах
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады
	|ПО		СписокНачислений.Назначение = Оклады.Назначение
	| 	И  (СписокНачислений.ДатаНачала <= Оклады.ДатаОкончания ИЛИ Оклады.ДатаОкончания ЕСТЬ NULL)
	| 	И  Оклады.ДатаНачала <= СписокНачислений.ДатаОкончания
	|	И СписокНачислений.ВидРасчета В (&парамТребуетОклад)
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникНаименование,
	|	СписокНачислений.Сотрудник,
	|	// основные начисления должны быть ввержу, а внутренее совместительство и замены внизу
	|	ВЫБОР КОГДА СписокНачислений.Сотрудник = СписокНачислений.Назначение ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ, 
	|	СписокНачислений.Назначение,
	|	СписокНачислений.ОсновноеНачисление Убыв, // основное начисление должно встретиться в выборке первым
	|	СписокНачислений.ДатаНачала,
	|	СписокНачислений.ВидРасчета
	|";
	
	Запрос.Текст = ОсновнойТекстЗапроса;
	
	ВыборкаНачисления = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНачисления.Следующий() Цикл
		
		Если  ВыборкаНачисления.УжеПроведен Тогда
			
			// пропускаем такие записи: они уже введены другими документами или соответствуют окончанию назначения работника
			// необходимо сообщить пользователю что работник уже посчитан; 
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч(ВыборкаНачисления.ДокументОснование) = Тип("ДокументСсылка.ДоговорНаВыполнениеРаботСФизЛицом") Тогда
			Если ВыборкаНачисления.ДокументОснование.ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.ОднократноВКонцеСрока Тогда
				//Работа по договору ГПХ с однократной выплатой должна быть распределена по месяцам
				РаспределитьОплатуГПХПоПериодам(ВыборкаНачисления);
			Иначе
				НоваяСтрока	= Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНачисления);
				НоваяСтрока.Авторасчет					= Истина;
			КонецЕсли;	
		Иначе	
			НоваяСтрока	= Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНачисления);
			НоваяСтрока.Авторасчет					= Истина;
		КонецЕсли;	
			
	КонецЦикла;
	
	Записать();
	
	Если ТипЗнч(Сотрудники) = Тип("СписокЗначений") Тогда
		ПроведениеРасчетов.УдалитьСведенияОПерезаполненииДокумента(Ссылка, Сотрудники.ВыгрузитьЗначения());
	ИначеЕсли ТипЗнч(Сотрудники) = Тип("Массив") Тогда
		ПроведениеРасчетов.УдалитьСведенияОПерезаполненииДокумента(Ссылка, Сотрудники);	
	КонецЕсли;	

КонецПроцедуры

Процедура АвтозаполнениеВзносы( Регистратор, Взносы, ЭтоВзносы, Сотрудники ) Экспорт
	
	ПроведениеРасчетов.АвтозаполнениеВзносы( Регистратор, Взносы, ЭтоВзносы, Сотрудники);
	Записать();

КонецПроцедуры // АвтозаполнениеВзносы

Процедура АвтозаполнениеНДФЛ( Регистратор, НДФЛ, Сотрудники, СНачалаГода = Ложь, ГодЗаполнения = 0 ) Экспорт
	
	ПроведениеРасчетов.АвтозаполнениеНДФЛ( Регистратор, НДФЛ, Сотрудники,,СНачалаГода, ГодЗаполнения);
	Записать();

КонецПроцедуры // АвтозаполнениеНДФЛ

Процедура АвтозаполнениеУдержания(Регистратор, Удержания, Сотрудники) Экспорт

	ЕстьПерерассчитываемыйДокумент	= ЗначениеЗаполнено(Регистратор.ПерерассчитываемыйДокумент);
	мПериодРегистрации	= ?(ЗначениеЗаполнено(Регистратор.ПерерассчитываемыйДокумент), Регистратор.ПерерассчитываемыйДокумент.ПериодРегистрации, Регистратор.ПериодРегистрации);
	мПерерассчитываемыйДокумент	= Регистратор.ПерерассчитываемыйДокумент;

	//Получим список видов расчета, использующих тарифную ставку
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.Ссылка
		|ИЗ
		|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Удержания
		|ГДЕ
		| Удержания.Показатель.ТарифнаяСтавка
		|";
	МассивТребуетОклад = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамПериодРегистрации" , мПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудник",Сотрудники); 
	
	Запрос.УстановитьПараметр("парамНачало" , мПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(мПериодРегистрации));
	
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("парамРегистратор" , Регистратор);

	МассивДействий = Новый Массив(2);
	МассивДействий[0] = Перечисления.ВидыДействияСНачислением.Изменить;
	МассивДействий[1] = Перечисления.ВидыДействияСНачислением.Начать;
	Запрос.УстановитьПараметр("парамДействиеНачатьИзменить", МассивДействий);
	Запрос.УстановитьПараметр("парамПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	
	Запрос.УстановитьПараметр("парамТребуетОклад" , МассивТребуетОклад);
		
	Запрос.УстановитьПараметр("парамДатаВалютногоУчета" , мПериодРегистрации);
	Запрос.УстановитьПараметр("парамПустаяВалюта" , Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("парамМассивСпособовРасчетовБезВалюты" , ПроведениеРасчетов.ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты());
	//Запрос.УстановитьПараметр("Ежемесячно", Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно);
	Запрос.УстановитьПараметр("парамИндивидуальныйПоказатель",Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный);		
	Запрос.УстановитьПараметр("парамПоПодраделению",Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению);
	
		//	ВТСписокРаботники
	Если Истина Тогда 
		//	Описание:
		// 		Все сотрудники из табличной части, их внутренние совместительства БЕЗ ЗАМЕН
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ КАК Сотрудник,
		|	Сотрудники.Ссылка КАК Назначение
		|ПОМЕСТИТЬ ВТСписокРаботники	
		|ИЗ Справочник.СотрудникиОрганизаций КАК Сотрудники
		|ГДЕ	ВЫБОР КОГДА Сотрудники.ОсновноеНазначение=ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) ТОГДА Сотрудники.Ссылка ИНАЧЕ Сотрудники.ОсновноеНазначение КОНЕЦ
		|			В ( &парамСотрудник )
		|
		|// ---------------
		|// Сотрудники, которые были внутренними совместителями и перешли в основных
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.Ссылка КАК Назначение
		|ИЗ Справочник.СотрудникиОрганизаций КАК Сотрудники
		|ГДЕ	Сотрудники.ОсновноеНазначение<>ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|	И	Сотрудники.Ссылка.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
		|	И	Сотрудники.Ссылка В ( &парамСотрудник )
		|
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТСписокРаботники = "ВТСписокРаботники";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСписокРаботники";

	

		//ВТДвиженияРаботников
	Если ИСТИНА Тогда
    		ПеременнаяОкончания = "
		|   	ВЫБОР	КОГДА  Окончания.Период ЕСТЬ NULL									// работник никуда не перемещался по регистру
		|         					ТОГДА КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)
		|         				КОГДА НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период	// начало дня это кадровое перемещение, значит надо закрыть предыдущим днем
		|                           ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1)
		|         				КОГДА КОНЕЦПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период		// это увольнение, значит надо закрыть предыдущим днем
		|                           ТОГДА  Окончания.Период
		|                       ИНАЧЕ  КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)							// непоняная ситуация, но поставим конец месяца
		|				КОНЕЦ";
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		ПлановыеУдержания.Сотрудник 					 КАК Сотрудник,
		|		ПлановыеУдержания.ВидРасчета					 КАК ВидРасчета,
		|		ПлановыеУдержания.ДатаНачала					 КАК ДатаНачала,
		|		МИНИМУМ (" + ПеременнаяОкончания + ")			 КАК ДатаОкончания,
		|		РаботникиОрганизаций.ПодразделениеОрганизации    КАК ПодразделениеОрганизации,
		|		РаботникиОрганизаций.ГрафикРаботы 				 КАК ГрафикРаботы,
		|		РаботникиОрганизаций.Должность					 КАК Должность
		|		
		|	ПОМЕСТИТЬ ВТДвиженияРаботников	
		|	ИЗ (
		|		ВЫБРАТЬ
		|			Удержания.Сотрудник			КАК Сотрудник,
		|			Удержания.ВидРасчета 		КАК ВидРасчета,
		|			(&парамНачало)				КАК ДатаНачала
		|
		|			ИЗ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(
		|					&парамНачало, 
		|			    	Сотрудник В (ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК Работники)
		|				) КАК Удержания
		|	
		|			ГДЕ Удержания.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			ВЫБРАТЬ
		|				Удержания.Сотрудник			КАК Сотрудник,
		|				Удержания.ВидРасчета		КАК ВидРасчета,
   		|				Удержания.Период			КАК ДатаНачала
		|			ИЗ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК Удержания
		|
		|			ГДЕ		Удержания.Период > &парамНачало
		|				И	Удержания.Период <= &парамКонец
		|				И	Удержания.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|				И	Удержания.Сотрудник В ( ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК СписокРаботников )
		|	) КАК ПлановыеУдержания		
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК Окончания
		|	ПО		НАЧАЛОПЕРИОДА(Окончания.Период, Месяц) = &парамНачало // все движения за месяц
		|		И 	Окончания.ВидРасчета = ПлановыеУдержания.ВидРасчета
		|		И	Окончания.Сотрудник = ПлановыеУдержания.Сотрудник
		|		И	Окончания.Период > ПлановыеУдержания.ДатаНачала
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ПО		НАЧАЛОПЕРИОДА(Окончания.Период, Месяц) = &парамНачало //все движения за месяц
		|		И РаботникиОрганизаций.Сотрудник = ПлановыеУдержания.Сотрудник
		|		И РаботникиОрганизаций.Период > ПлановыеУдержания.ДатаНачала
		|	СГРУППИРОВАТЬ ПО
		|		ПлановыеУдержания.Сотрудник,
		|		ПлановыеУдержания.ВидРасчета,
		|		ПлановыеУдержания.ДатаНачала,
		|		РаботникиОрганизаций.ПодразделениеОрганизации,
		|		РаботникиОрганизаций.ГрафикРаботы,
		|		РаботникиОрганизаций.Должность
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета,
		|	ДатаНачала,
		|	ДатаОкончания,
		|	ПодразделениеОрганизации,
		|	ГрафикРаботы,
		|	Должность
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТДвиженияРаботников = "ВТДвиженияРаботников";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДвиженияРаботников";

	
	
	//	ВТПлановыеУдержания
	Если Истина Тогда 
		//	Описание:
		// 		Получим движения по регистру ПлановыеНачисленияРаботниковОрганизаций (Сотрудники из ВТСписокРаботникиИЗамены)
		//		Начало дня - это начало события, Конец дня это закрытие события
		//		Для п.1.
		ПеременнаяОкончания = "
		|   	ВЫБОР	КОГДА  Окончания.Период ЕСТЬ NULL									// работник никуда не перемещался по регистру
		|         					ТОГДА КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)
		|         				КОГДА НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период	// начало дня это кадровое перемещение, значит надо закрыть предыдущим днем
		|                           ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1)
		|         				КОГДА КОНЕЦПЕРИОДА(Окончания.Период, ДЕНЬ) = Окончания.Период		// это увольнение, значит надо закрыть предыдущим днем
		|                           ТОГДА  Окончания.Период
		|                       ИНАЧЕ  КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ)							// непоняная ситуация, но поставим конец месяца
		|				КОНЕЦ";
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		ПлановыеУдержания.Сотрудник 				КАК Сотрудник,
		|		ПлановыеУдержания.ДатаНачала				КАК ДатаНачала,
		|		МИНИМУМ (" + ПеременнаяОкончания + ")		КАК ДатаОкончания,
		|		ПлановыеУдержания.ВидРасчета 				КАК ВидРасчета,
		|		ПлановыеУдержания.ДокументОснование,
		|		ПлановыеУдержания.Действие,
		|		ПлановыеУдержания.Показатель1,
		|		ПлановыеУдержания.Показатель2,
		|		ПлановыеУдержания.Показатель3,
		|		ПлановыеУдержания.Показатель4,
		|		ПлановыеУдержания.Показатель5,
		|		ПлановыеУдержания.Показатель6,
		|		ПлановыеУдержания.Валюта1,
		|		ПлановыеУдержания.Валюта2,
		|		ПлановыеУдержания.Валюта3,
		|		ПлановыеУдержания.Валюта4,
		|		ПлановыеУдержания.Валюта5,
		|		ПлановыеУдержания.Валюта6
		|	ПОМЕСТИТЬ ВТПлановыеУдержания	
		|	ИЗ (
		|		ВЫБРАТЬ
		|			Удержания.Сотрудник			КАК Сотрудник,
		|			Удержания.ВидРасчета		КАК ВидРасчета,
		|			(&парамНачало)				КАК ДатаНачала,
		|			Удержания.Действие			КАК Действие,
		|			Удержания.ДокументОснование	КАК ДокументОснование,
		|			Удержания.Показатель1		КАК Показатель1,
		|			Удержания.Показатель2		КАК Показатель2,
		|			Удержания.Показатель3		КАК Показатель3,
		|			Удержания.Показатель4		КАК Показатель4,
		|			Удержания.Показатель5		КАК Показатель5,
		|			Удержания.Показатель6		КАК Показатель6,
		|			Удержания.Валюта1 			КАК Валюта1,
		|			Удержания.Валюта2			КАК Валюта2,
		|			Удержания.Валюта3			КАК Валюта3,
		|			Удержания.Валюта4			КАК Валюта4,
		|			Удержания.Валюта5			КАК Валюта5,
		|			Удержания.Валюта6			КАК Валюта6
		|
		|			ИЗ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(
		|					&парамНачало, 
		|			    	Сотрудник В (ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК Работники)
		|				) КАК Удержания
		|	
		|			ГДЕ Удержания.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			ВЫБРАТЬ
		|				Удержания.Сотрудник			КАК Сотрудник,
		|				Удержания.ВидРасчета			КАК ВидРасчета,
   		|				Удержания.Период				КАК ДатаНачала,
		|				Удержания.Действие				КАК Действие,
		|				Удержания.ДокументОснование		КАК ДокументОснование,
		|				Удержания.Показатель1			КАК Показатель1,
		|				Удержания.Показатель2			КАК Показатель2,
		|				Удержания.Показатель3			КАК Показатель3,
		|				Удержания.Показатель4			КАК Показатель4,
		|				Удержания.Показатель5			КАК Показатель5,
		|				Удержания.Показатель6			КАК Показатель6,
		|				Удержания.Валюта1				КАК Валюта1,
		|				Удержания.Валюта2				КАК Валюта2,
		|				Удержания.Валюта3				КАК Валюта3,
		|				Удержания.Валюта4				КАК Валюта4,
		|				Удержания.Валюта5				КАК Валюта5,
		|				Удержания.Валюта6				КАК Валюта6
		|			ИЗ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК Удержания
		|
		|			ГДЕ		Удержания.Период > &парамНачало
		|				И	Удержания.Период <= &парамКонец
		|				И	Удержания.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|				И	Удержания.Сотрудник В ( ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК СписокРаботников )
		|	) КАК ПлановыеУдержания		
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК Окончания
		|	ПО		НАЧАЛОПЕРИОДА(Окончания.Период, Месяц) = &парамНачало // все движения за месяц
		|		И	Окончания.Сотрудник = ПлановыеУдержания.Сотрудник
		|		И	Окончания.ВидРасчета = ПлановыеУдержания.ВидРасчета
		|		И	Окончания.Период > ПлановыеУдержания.ДатаНачала
		|	СГРУППИРОВАТЬ ПО
		|		ПлановыеУдержания.Сотрудник,
		|		ПлановыеУдержания.ДатаНачала,
		|		ПлановыеУдержания.ВидРасчета,
		|		ПлановыеУдержания.Действие,
		|		ПлановыеУдержания.ДокументОснование,
		|		ПлановыеУдержания.Показатель1,
		|		ПлановыеУдержания.Показатель2,
		|		ПлановыеУдержания.Показатель3,
		|		ПлановыеУдержания.Показатель4,
		|		ПлановыеУдержания.Показатель5,
		|		ПлановыеУдержания.Показатель6,
		|		ПлановыеУдержания.Валюта1,
		|		ПлановыеУдержания.Валюта2,
		|		ПлановыеУдержания.Валюта3,
		|		ПлановыеУдержания.Валюта4,		
		|		ПлановыеУдержания.Валюта5,		
		|		ПлановыеУдержания.Валюта6		
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаНачала,
		|	ДатаОкончания,
		|	ВидРасчета
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТПлановыеУдержания = "ВТПлановыеУдержания";
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПлановыеУдержания";
	
	//	ВТВсеУдержания
	Если Истина Тогда
		ТекстЗапросаВТ = "
		|// (п.1.2.3.) Оклады по назначениям (основные, совместители)   
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		РаботникиОрганизации.Сотрудник,
		|		РаботникиОрганизации.Назначение,
		|		ОсновныеУдержания.ВидРасчета,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаНачала <= ОсновныеУдержания.ДатаНачала			ТОГДА ОсновныеУдержания.ДатаНачала		ИНАЧЕ ДвиженияРаботников.ДатаНачала		КОНЕЦ КАК ДатаНачала,
		|		ВЫБОР КОГДА ДвиженияРаботников.ДатаОкончания <= ОсновныеУдержания.ДатаОкончания	ТОГДА ДвиженияРаботников.ДатаОкончания	ИНАЧЕ ОсновныеУдержания.ДатаОкончания	КОНЕЦ КАК ДатаОкончания,
		|		ДвиженияРаботников.ПодразделениеОрганизации,
		|		ДвиженияРаботников.ГрафикРаботы,
		|		ДвиженияРаботников.Должность,
		|		ОсновныеУдержания.ДокументОснование	КАК ДокументОснование,
		|
		|		ОсновныеУдержания.Показатель1,
		|		ОсновныеУдержания.Показатель2,
		|		ОсновныеУдержания.Показатель3,
		|		ОсновныеУдержания.Показатель4,
		|		ОсновныеУдержания.Показатель5,
		|		ОсновныеУдержания.Показатель6,
		|		ОсновныеУдержания.Валюта1,
		|		ОсновныеУдержания.Валюта2,
		|		ОсновныеУдержания.Валюта3,
		|		ОсновныеУдержания.Валюта4,		
		|		ОсновныеУдержания.Валюта5,		
		|		ОсновныеУдержания.Валюта6
		|ПОМЕСТИТЬ ВТВсеУдержания	
		|	ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК РаботникиОрганизации
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДвиженияРаботников + " КАК ДвиженияРаботников	
		|	ПО		РаботникиОрганизации.Назначение = ДвиженияРаботников.Сотрудник	
		|
 		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПлановыеУдержания+ " КАК ОсновныеУдержания
		|	ПО		РаботникиОрганизации.Назначение = ОсновныеУдержания.Сотрудник	
		|		И	ДвиженияРаботников.ДатаНачала <= ОсновныеУдержания.ДатаОкончания
		|		И	ДвиженияРаботников.ВидРасчета = ОсновныеУдержания.ВидРасчета
		|		И	ОсновныеУдержания.ДатаНачала <= ДвиженияРаботников.ДатаОкончания
		|
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТВсеУдержания = "ВТВсеУдержания";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВсеУдержания";
	
	// НакопленныеДанные
	Если Истина Тогда
			// уже начислено по другим регистраторам в данном расчетном периоде и за всю историю
			// применяется для расчета удержаний "нарастающим итогом за месяц"
			ТекстЗапросаВТ = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА НакопленныеДанные.ПериодРегистрации < &парамПериодРегистрации ТОГДА НакопленныеДанные.Результат ИНАЧЕ 0 КОНЕЦ) КАК УжеНачисленоЗаВсюИсторию,
			|	НакопленныеДанные.Сотрудник,
			|	НакопленныеДанные.ВидРасчета,
			|	НакопленныеДанные.ДокументОснование,
			|	ИсполнительныеЛисты.Предел
			|ПОМЕСТИТЬ ВТНакопленныеДанные
			|ИЗ	РегистрРасчета.УдержанияРаботниковОрганизаций КАК НакопленныеДанные
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсполнительныйЛист КАК ИсполнительныеЛисты	
			|	ПО	НакопленныеДанные.ДокументОснование = ИсполнительныеЛисты.Ссылка
			|
			|ГДЕ
			|	НакопленныеДанные.Сотрудник В (&парамСотрудник)
			|   И (НакопленныеДанные.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.АлиментыПроцентомДоПредела)
			|   ИЛИ НакопленныеДанные.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.АлиментыФиксСуммойДоПредела)
			|   ИЛИ НакопленныеДанные.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела)
			|   ИЛИ НакопленныеДанные.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела))
			|
			|СГРУППИРОВАТЬ ПО
			|	НакопленныеДанные.Сотрудник,
			|	НакопленныеДанные.ВидРасчета,
			|	НакопленныеДанные.ДокументОснование,
			|	ИсполнительныеЛисты.Предел
			|ИНДЕКСИРОВАТЬ ПО 
			|	НакопленныеДанные.Сотрудник,
			|	НакопленныеДанные.ВидРасчета,
			|	НакопленныеДанные.ДокументОснование";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
	КонецЕсли;
	
	// ВТСводныеИндивидуальныеГрафики
	Если Истина Тогда 
		ТекстЗапросаВТ = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СводныеИндивидуальныеГрафики.Сотрудник КАК Сотрудник,
		|	СводныеИндивидуальныеГрафики.Назначение КАК Назначение,
		|	СводныеИндивидуальныеГрафики.Месяц КАК Месяц,
		|	СводныеИндивидуальныеГрафики.Дней КАК НормаДнейПоГрафику,
		|	СводныеИндивидуальныеГрафики.Часов КАК НормаЧасовПоГрафику
		|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафики
		|ИЗ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|ГДЕ	СводныеИндивидуальныеГрафики.Сотрудник в (&парамСотрудник)
		|	И	СводныеИндивидуальныеГрафики.Месяц = &парамПериодРегистрации
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли; 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСводныеИндивидуальныеГрафики";
	

	//	ВТОкладТариф
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.Организация	КАК Организация,
		|	Начисления.Сотрудник	КАК Назначение,
		|	Начисления.ВидРасчета	КАК ВидРасчета,
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
		|				ТОГДА ""ЗА МЕСЯЦ""
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
		|			ТОГДА ""ЗА ДЕНЬ""
		|			ИНАЧЕ ""ЗА ЧАС""
		|	КОНЕЦ					КАК СпособУчетаВремени,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Размер
		|			ИНАЧЕ Начисления.Показатель1
		|	КОНЕЦ	КАК ОкладТариф,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Валюта
		|			ИНАЧЕ Начисления.Валюта1
		|	КОНЕЦ		КАК Валюта1,
		|	Начисления.Период		КАК ДатаНачала,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1),ДЕНЬ))	КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОкладТариф	
		|ИЗ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК РазмерТарифныхСтавок
		|ПО Начисления.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Окончания
		|ПО Начисления.ВидРасчетаИзмерение <> Начисления.ВидРасчета
		|	И	Начисления.Актуальность 
		|	И	Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник = Окончания.Сотрудник
		|	И	Начисления.ВидРасчетаИзмерение = Окончания.ВидРасчетаИзмерение
		|	И	Начисления.Период < Окончания.Период
		|
		|
		|ГДЕ	Начисления.ВидРасчетаИзмерение <> Начисления.ВидРасчета
		|	И	Начисления.Актуальность 
		|	И	Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник В (ВЫБРАТЬ Назначение ИЗ " + ТекстЗапросаВТСписокРаботники + " КАК Работники)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Организация,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
		|				ТОГДА ""ЗА МЕСЯЦ""
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
		|			ТОГДА ""ЗА ДЕНЬ""
		|			ИНАЧЕ ""ЗА ЧАС""
		|	КОНЕЦ,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Размер
		|			ИНАЧЕ Начисления.Показатель1
		|	КОНЕЦ,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Валюта
		|			ИНАЧЕ Начисления.Валюта1
		|	КОНЕЦ,
		|	Начисления.Период
 		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТОкладТариф";
	
	
	
		//	ВТЗначенияПоказателей
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ПериодДействия КАК ПериодДействия,
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателей.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
		|		И НЕ (ЗначенияПоказателей.Валюта В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))
		|			ТОГДА ЗначенияПоказателей.Значение * ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
		|		ИНАЧЕ ЗначенияПоказателей.Значение
		|	КОНЕЦ КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПоказателей
		|ИЗ 
		|   (ВЫБРАТЬ 
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) КАК ПериодДействия,
		|	ЗначенияПоказателей.Валюта,
		|	ЗначенияПоказателей.Значение
		|	ИЗ РегистрСведений.ЗначенияПоказателейСхемМотивации КАК ЗначенияПоказателей
		|	
		|	ОБЪЕДИНИТЬ
		|
		|   ВЫБРАТЬ 
		|	ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка),
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	&парамНачало,
		|	ЗначенияПоказателей.Валюта,
		|	ЗначенияПоказателей.Значение
		|	ИЗ РегистрСведений.ПериодическиеЗначенияПоказателейСхемМотивации.СрезПоследних(&парамКонец, Организация = &парамОрганизация) КАК ЗначенияПоказателей
		|   ) КАК ЗначенияПоказателей
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты
		|ПО Валюты.Валюта = ЗначенияПоказателей.Валюта 
		|	
		|ГДЕ	ЗначенияПоказателей.Организация = &парамОрганизация
		|	И	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) = &парамНачало
		|	И	(ЗначенияПоказателей.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|	ИЛИ	ЗначенияПоказателей.Сотрудник В (ВЫБРАТЬ Назначение ИЗ ВТСписокРаботники КАК Работники))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЗначенияПоказателей";	
	
	//	ВТПоказатели
	Если Истина Тогда 
		//	Описание:
		// 		
		//		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПодразделенияВПоказателях.Сотрудник КАК Сотрудник,
		|	СотрудникиПодразделенияВПоказателях.Подразделение КАК Подразделение,
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6,
		|	ЗначенияПоказателей1.Значение КАК Показатель1,
		|	ЗначенияПоказателей2.Значение КАК Показатель2,
		|	ЗначенияПоказателей3.Значение КАК Показатель3,
		|	ЗначенияПоказателей4.Значение КАК Показатель4,
		|	ЗначенияПоказателей5.Значение КАК Показатель5,
		|	ЗначенияПоказателей6.Значение КАК Показатель6
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ (ВЫБРАТЬ РАЗЛИЧНЫЕ Подразделение, Сотрудник ИЗ ВТЗначенияПоказателей КАК ЗначенияПоказателей) КАК СотрудникиПодразделенияВПоказателях
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Показатели.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели1
		|	ПО Показатели.Ссылка = Показатели1.Ссылка И Показатели1.НомерСтроки = 1
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели2
		|	ПО Показатели.Ссылка = Показатели2.Ссылка И Показатели2.НомерСтроки = 2
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели3
		|	ПО Показатели.Ссылка = Показатели3.Ссылка И Показатели3.НомерСтроки = 3
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели4
		|	ПО Показатели.Ссылка = Показатели4.Ссылка И Показатели4.НомерСтроки = 4
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели5
		|	ПО Показатели.Ссылка = Показатели5.Ссылка И Показатели5.НомерСтроки = 5
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели6
		|	ПО Показатели.Ссылка = Показатели6.Ссылка И Показатели6.НомерСтроки = 6
		|	
		|) КАК ПоказателиВидовРасчета
		|ПО ИСТИНА
		|	
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей1
		|ПО 	ПоказателиВидовРасчета.Показатель1 = ЗначенияПоказателей1.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей1.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей1.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей2
		|ПО		ПоказателиВидовРасчета.Показатель2 = ЗначенияПоказателей2.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей2.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей2.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей3
		|ПО		ПоказателиВидовРасчета.Показатель3 = ЗначенияПоказателей3.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей3.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей3.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей4
		|ПО		ПоказателиВидовРасчета.Показатель4 = ЗначенияПоказателей4.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей4.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей4.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей5
		|ПО		ПоказателиВидовРасчета.Показатель5 = ЗначенияПоказателей5.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей5.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей5.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей6
		|ПО		ПоказателиВидовРасчета.Показатель6 = ЗначенияПоказателей6.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей6.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей6.Подразделение
		|
		|ГДЕ	ЗначенияПоказателей1.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей2.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей3.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей4.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей5.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей6.Значение ЕСТЬ НЕ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПоказатели";
		
	
		//Основной текст запроса
	ОсновнойТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокУдержаний.Сотрудник		КАК Сотрудник,
	|	СписокУдержаний.Назначение		КАК Назначение,
	|	ВЫБОР КОГДА ЕСТЬNULL(Оклады.ДатаНачала,СписокУдержаний.ДатаНачала) <= СписокУдержаний.ДатаНачала		ТОГДА СписокУдержаний.ДатаНачала	ИНАЧЕ Оклады.ДатаНачала		КОНЕЦ			КАК ДатаНачала,
	|	ВЫБОР КОГДА ЕСТЬNULL(Оклады.ДатаОкончания,СписокУдержаний.ДатаОкончания) < СписокУдержаний.ДатаОкончания	ТОГДА Оклады.ДатаОкончания	ИНАЧЕ СписокУдержаний.ДатаОкончания	КОНЕЦ	КАК ДатаОкончания,
	|	ВЫБОР КОГДА ЕСТЬNULL(Оклады.ДатаНачала,СписокУдержаний.ДатаНачала) <= СписокУдержаний.ДатаНачала		ТОГДА СписокУдержаний.ДатаНачала	ИНАЧЕ Оклады.ДатаНачала		КОНЕЦ 			КАК БазовыйПериодНачало,
	|	ВЫБОР КОГДА ЕСТЬNULL(Оклады.ДатаОкончания,СписокУдержаний.ДатаОкончания) < СписокУдержаний.ДатаОкончания	ТОГДА Оклады.ДатаОкончания	ИНАЧЕ СписокУдержаний.ДатаОкончания	КОНЕЦ	КАК БазовыйПериодКонец,
	|	СписокУдержаний.ВидРасчета КАК ВидРасчета,
	|	СписокУдержаний.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
	|	СписокУдержаний.Валюта1 КАК Валюта,
	|
	|	ВЫБОР
	|		КОГДА СписокУдержаний.Валюта1 = &парамВалютаРегламентУчета
	|				ИЛИ СписокУдержаний.Валюта1 = &парамПустаяВалюта
	|			ТОГДА 1
	|		ИНАЧЕ Валюты1.Курс
	|	КОНЕЦ КАК КурсВалюты,		
	|";
	НормаЧасовЗаМесяц =  "
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику
	|			ИНАЧЕ  ДанныеКалендаря.НормаЧасовЗаМесяц
	|	КОНЕЦ
	|	";
	НормаДнейЗаМесяц =  "
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаДнейПоГрафику, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.НормаДнейПоГрафику
	|			ИНАЧЕ  ДанныеКалендаря.НормаДнейЗаМесяц
	|	КОНЕЦ
	|	";
	ОсновнойТекстЗапроса =  ОсновнойТекстЗапроса + "
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаДнейПоГрафику, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.НормаДнейПоГрафику
	|			ИНАЧЕ  ДанныеКалендаря.НормаДнейЗаМесяц
	|	КОНЕЦ	КАК НормаДнейЗаМесяц,
	|	" + НормаЧасовЗаМесяц + "	КАК НормаЧасовЗаМесяц,
	|	";
	
	
	ТекстПоказатель1 = "
	|			ВЫБОР
	|				КОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1
	|				КОГДА СписокУдержаний.Показатель1 ЕСТЬ NULL 
	|					ТОГДА 0
	|				КОГДА СписокУдержаний.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
	|						ИЛИ СписокУдержаний.Валюта1 = &парамВалютаРегламентУчета
	|						ИЛИ СписокУдержаний.Валюта1 = &парамПустаяВалюта
	|					ТОГДА 
	|					ВЫБОР КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|						ТОГДА	ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И (" + НормаЧасовЗаМесяц + ") > 0
	|											ТОГДА Оклады.ОкладТариф/(" + НормаЧасовЗаМесяц + ")
	|									КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|											ТОГДА Оклады.ОкладТариф/8
	|									ИНАЧЕ Оклады.ОкладТариф
	|							КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|					ТОГДА 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И (" + НормаДнейЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф/(" + НормаДнейЗаМесяц + ")
	|								КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|										ТОГДА Оклады.ОкладТариф
	|								ИНАЧЕ Оклады.ОкладТариф*8
	|						КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|					ТОГДА 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ""
	|										ТОГДА Оклады.ОкладТариф
	|								КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""  И (" + НормаДнейЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф*(" + НормаДнейЗаМесяц + ")
	|								ИНАЧЕ Оклады.ОкладТариф*(" + НормаЧасовЗаМесяц + ")
	|						КОНЕЦ
	|						ИНАЧЕ СписокУдержаний.Показатель1
	|					КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|					ТОГДА ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0) * 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И (" + НормаЧасовЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф/(" + НормаЧасовЗаМесяц + ")
	|								КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|										ТОГДА Оклады.ОкладТариф/8
	|								ИНАЧЕ Оклады.ОкладТариф
	|						КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|					ТОГДА ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0) * 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И (" + НормаДнейЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф/(" + НормаДнейЗаМесяц + ")
	|								КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|										ТОГДА Оклады.ОкладТариф
	|								ИНАЧЕ Оклады.ОкладТариф*8
	|						КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|					ТОГДА ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0) * 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ""
	|										ТОГДА Оклады.ОкладТариф
	|								КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""  И (" + НормаДнейЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф*(" + НормаДнейЗаМесяц + ")
	|								ИНАЧЕ Оклады.ОкладТариф*(" + НормаЧасовЗаМесяц + ")
	|						КОНЕЦ
	|				ИНАЧЕ СписокУдержаний.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
	|			КОНЕЦ
	|	";

	
	
	ТекстПоказатель2 = СтрЗаменить(ТекстПоказатель1, "1", "2");
	ТекстПоказатель3 = СтрЗаменить(ТекстПоказатель1, "1", "3");
	ТекстПоказатель4 = СтрЗаменить(ТекстПоказатель1, "1", "4");
	ТекстПоказатель5 = СтрЗаменить(ТекстПоказатель1, "1", "5");
	ТекстПоказатель6 = СтрЗаменить(ТекстПоказатель1, "1", "6");
	ОсновнойТекстЗапроса =  ОсновнойТекстЗапроса + "
	|	Оклады.ОкладТариф КАК ОкладТариф,
	|	" + ТекстПоказатель1 + " КАК Показатель1,
	|	" + ТекстПоказатель2 + " КАК Показатель2,
	|	" + ТекстПоказатель3 + " КАК Показатель3,
	|	" + ТекстПоказатель4 + " КАК Показатель4,
	|	" + ТекстПоказатель5 + " КАК Показатель5,
	|	" + ТекстПоказатель6 + " КАК Показатель6,
	|	СписокУдержаний.ДокументОснование,
	|	УжеНачислено.Предел,
	|	УжеНачислено.УжеНачисленоЗаВсюИсторию,
	|	ВЫБОР	КОГДА ГрафикРаботыПоСотруднику.Назначение ЕСТЬ NULL
	|				ТОГДА СписокУдержаний.ГрафикРаботы 
	|				ИНАЧЕ СписокУдержаний.Назначение
	|	КОНЕЦ								КАК ГрафикРаботы,
	|
	|	ЕСТЬNULL(СписокУдержаний.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СписокУдержаний.ПодразделениеОрганизации,
	|";
	// если не перерасчет - проверяем проведенность в расчетном периоде
		ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
		|	ЛОЖЬ Как УжеПроведен,";
	ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
	|	СписокУдержаний.Сотрудник.Наименование КАК СотрудникНаименование
	|ИЗ " + ТекстЗапросаВТВсеУдержания + " КАК СписокУдержаний
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеДанные Как УжеНачислено
	|ПО СписокУдержаний.Сотрудник = УжеНачислено.Сотрудник
	| И СписокУдержаний.ДокументОснование = УжеНачислено.ДокументОснование
	|
	|//-----------------------
	|// курсы валюты 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты1
	|ПО Валюты1.Валюта = СписокУдержаний.Валюта1 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты2
	|ПО Валюты2.Валюта = СписокУдержаний.Валюта2 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты3
	|ПО Валюты3.Валюта = СписокУдержаний.Валюта3 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты4
	|ПО Валюты4.Валюта = СписокУдержаний.Валюта4 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты5
	|ПО Валюты5.Валюта = СписокУдержаний.Валюта5 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамДатаВалютногоУчета) Как Валюты6
	|ПО Валюты6.Валюта = СписокУдержаний.Валюта6 
	|
	|//-----------------------
	|// данные о видах показателей
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК ТипПоказатель1
	|ПО		ТипПоказатель1.Ссылка = СписокУдержаний.ВидРасчета И ТипПоказатель1.НомерСтроки = 1
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК ТипПоказатель2
	|ПО		ТипПоказатель2.Ссылка = СписокУдержаний.ВидРасчета И ТипПоказатель2.НомерСтроки = 2
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК ТипПоказатель3
	|ПО		ТипПоказатель3.Ссылка = СписокУдержаний.ВидРасчета И ТипПоказатель3.НомерСтроки = 3
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК ТипПоказатель4
	|ПО		ТипПоказатель4.Ссылка = СписокУдержаний.ВидРасчета И ТипПоказатель4.НомерСтроки = 4
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК ТипПоказатель5
	|ПО		ТипПоказатель5.Ссылка = СписокУдержаний.ВидРасчета И ТипПоказатель5.НомерСтроки = 5
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК ТипПоказатель6
	|ПО		ТипПоказатель6.Ссылка = СписокУдержаний.ВидРасчета И ТипПоказатель6.НомерСтроки = 6
	|";
	ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
	|
	|//-----------------------
	|// если есть индивидуальный график и он зарегистрирвоан в регистре сведений ГрафикиРаботыПоВидамВремени
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СтрокиУдержания.Сотрудник		КАК Сотрудник,
	|		СтрокиУдержания.Назначение		КАК Назначение
	|	ИЗ " + ТекстЗапросаВТВсеУдержания + " КАК СтрокиУдержания
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|   ПО		ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СтрокиУдержания.Сотрудник
	|   	И	ГрафикиРаботыПоВидамВремени.Сотрудник = СтрокиУдержания.Назначение
	|		И	ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиУдержания.ДатаНачала, МЕСЯЦ)
	|) КАК ГрафикРаботыПоСотруднику       
	|ПО		СписокУдержаний.Сотрудник = ГрафикРаботыПоСотруднику.Сотрудник
	|	И	СписокУдержаний.Назначение = ГрафикРаботыПоСотруднику.Назначение
	|       
	|
	|//-----------------------
	|// данные нормы календаря по индивидуальным графикам
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = &парамНачало 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И	ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеИндивидуальногоКалендаря
	|ПО		ВЫБОР	КОГДА ГрафикРаботыПоСотруднику.Сотрудник = СписокУдержаний.Сотрудник	// это индивидуальный график и не сокращенное время работы
	|				ТОГДА ДанныеИндивидуальногоКалендаря.ГрафикРаботы = СписокУдержаний.Сотрудник 
	|		     		И ДанныеИндивидуальногоКалендаря.Сотрудник = СписокУдержаний.Назначение
	|				ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ 
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = &парамНачало 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеКалендаря
	|ПО		ВЫБОР	КОГДА СписокУдержаний.ГрафикРаботы.СокращенноеРабочееВремя	
	|		     		ТОГДА ДанныеКалендаря.ГрафикРаботы = СписокУдержаний.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|				ИНАЧЕ ДанныеКалендаря.ГрафикРаботы = СписокУдержаний.ГрафикРаботы
	|		КОНЕЦ 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|ПО		СписокУдержаний.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|	И	СписокУдержаний.Назначение = СводныеИндивидуальныеГрафики.Назначение
	|	И	НАЧАЛОПЕРИОДА(СписокУдержаний.ДатаНачала, МЕСЯЦ) = СводныеИндивидуальныеГрафики.Месяц
	|
	|//-----------------------
	|// данные показателей Схем Мотиваций
	|// по конкретным сотрудникам
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоСотруднику
	|ПО		СписокУдержаний.ВидРасчета = ПоказателиСхемМотивацийПоСотруднику.ВидРасчета
	|	И	СписокУдержаний.Назначение = ПоказателиСхемМотивацийПоСотруднику.Сотрудник
	|
	|// по подразделению
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоПодразделению
	|ПО		СписокУдержаний.ВидРасчета = ПоказателиСхемМотивацийПоПодразделению.ВидРасчета
	|	И	СписокУдержаний.ПодразделениеОрганизации = ПоказателиСхемМотивацийПоПодразделению.Подразделение
	|
	|// организации
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоОрганизации
	|ПО		СписокУдержаний.ВидРасчета = ПоказателиСхемМотивацийПоОрганизации.ВидРасчета
	|	И	ПоказателиСхемМотивацийПоОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И	ПоказателиСхемМотивацийПоОрганизации.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) 
	|
	|
	|// данные об окладах
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады
	|ПО		СписокУдержаний.Назначение = Оклады.Назначение
	| 	И  (СписокУдержаний.ДатаНачала <= Оклады.ДатаОкончания ИЛИ Оклады.ДатаОкончания ЕСТЬ NULL)
	| 	И  Оклады.ДатаНачала <= СписокУдержаний.ДатаОкончания
	|	И СписокУдержаний.ВидРасчета В (&парамТребуетОклад)
	|
	|ГДЕ (ЕСТЬNULL(УжеНачислено.Предел, 0) = 0)
	|	ИЛИ (ЕСТЬNULL(УжеНачислено.Предел, 0) > ЕСТЬNULL(УжеНачислено.УжеНачисленоЗаВсюИсторию, 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникНаименование,
	|	СписокУдержаний.Сотрудник,
	|	// основные начисления должны быть ввержу, а внутренее совместительство и замены внизу
	|	ВЫБОР КОГДА СписокУдержаний.Сотрудник = СписокУдержаний.Назначение ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ, 
	|	СписокУдержаний.Назначение,
	|	СписокУдержаний.ДатаНачала,
	|	СписокУдержаний.ВидРасчета
	|";
	
	Запрос.Текст = ОсновнойТекстЗапроса;


	ВыборкаУдержания = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаУдержания.Следующий() Цикл
		
		
		НоваяСтрока	= Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаУдержания);
		
		НоваяСтрока.Авторасчет					= Истина;
		
	КонецЦикла;
	
	
	

	
КонецПроцедуры

Процедура АвтозаполнениеЗаймы( Регистратор, ПогашениеЗаймов, Сотрудники ) Экспорт
	
	// АВТОЗАПОЛНЕНИЕ ТЧ "ПогашениеЗаймов"
	
	// Установим параметры запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамНачало" , Регистратор.ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("парамОрганизация" , Регистратор.Организация);
	
	Если НЕ ЗначениеЗаполнено(Регистратор.ПерерассчитываемыйДокумент) Тогда
		// погашение займов
		ТекстЗапросаУдержаний = 
		"ВЫБРАТЬ
		|	ПогашениеЗаймовРаботникамиОстатки.Сотрудник,
		|	ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма
		|ИЗ
		|	РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций.Остатки(
		|		&парамНачало,
		|		Организация = &парамОрганизация
		|			И (ДоговорЗайма.НачалоПогашения <= &парамНачало
		|					ИЛИ ДоговорЗайма.ПроцентЗаПользованиеЗаймом > 0)
		|			И Сотрудник В (&парамСотрудники)) КАК ПогашениеЗаймовРаботникамиОстатки
		|	
		|ГДЕ ПогашениеЗаймовРаботникамиОстатки.ОсновнойДолгОстаток <> 0 
		|	 ИЛИ ПогашениеЗаймовРаботникамиОстатки.ПроцентыОстаток <> 0
		|		
		|ОБЪЕДИНИТЬ		
		|ВЫБРАТЬ
		|			ПогашениеЗаймовРаботникамиОстатки.Сотрудник,
		|			ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма
		|		ИЗ
		|			РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций.Обороты(
		|				&парамНачало, КОНЕЦПЕРИОДА(&парамНачало, МЕСЯЦ),,
		|				Организация = &парамОрганизация
		|					И (ДоговорЗайма.НачалоПогашения <= &парамНачало
		|							ИЛИ ДоговорЗайма.ПроцентЗаПользованиеЗаймом > 0)
		|					И Сотрудник В (&парамСотрудники)
		|					) КАК ПогашениеЗаймовРаботникамиОстатки
		|			
		|		ГДЕ ПогашениеЗаймовРаботникамиОстатки.ОсновнойДолгПриход <> 0 
		|";
		
		Запрос.Текст = ТекстЗапросаУдержаний;
		СтруктураПоиска = Новый Структура("Сотрудник,ДоговорЗайма");
		Для каждого СтрокаУдержания Из Запрос.Выполнить().Выгрузить() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаУдержания);	
			Если ПогашениеЗаймов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ПогашениеЗаймов.Добавить(),СтрокаУдержания);	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Записать();

КонецПроцедуры // АвтозаполнениеЗаймы

Функция ЗаполнитьРаботникиОрганизации(ЭтоУволенные = Ложь) экспорт
	
    РаботникиОрганизации.Загрузить(ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации( Ссылка,,,ЭтоУволенные ).Выгрузить());
	Записать();

КонецФункции // АвтозаполнениеРаботникиОрганизации()

Функция ЗаполнитьВзносы(Сотрудники, ТЧВзносы, ЭтоВзносы = Истина) Экспорт

	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
	Если Отказ Тогда
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		Возврат Не Отказ;
	КонецЕсли;
	
	АвтозаполнениеВзносы( Ссылка, ТЧВзносы, ЭтоВзносы, Сотрудники );
	
	// Все закончено - удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
КонецФункции  // РассчитатьВзносы()

Функция ЗаполнитьНДФЛ(Сотрудники, СНачалаГода = Ложь, ГодЗаполнения = 0) Экспорт

	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;

	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
	Если Отказ Тогда
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		Возврат Не Отказ;
	КонецЕсли;
	
	АвтозаполнениеНДФЛ(  Ссылка, НДФЛ, Сотрудники, СНачалаГода, ГодЗаполнения );
	
	// Все закончено - удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	
КонецФункции  // РассчитатьВзносы()

// Заполняет табличную часть РаботникиОрганизации и все начисления, удержания, взносы и налоги по работнику
//
Функция ЗаполнитьВсе( Сотрудники, мРежимДоНачалаРаботы ) Экспорт
	
	// ЗаполнитьРаботникиОрганизации();
	АвтозаполнениеНачисления( Ссылка, Начисления, Сотрудники );
	Если НЕ мРежимДоНачалаРаботы И НЕ ПредварительныйРасчет Тогда
		ЗаполнитьВзносы(Сотрудники, Взносы);
		ЗаполнитьНДФЛ(Сотрудники);
		АвтозаполнениеУдержания( Ссылка, Удержания, Сотрудники );
		ЗаполнитьВзносы(Сотрудники, ВзносыФОТ, Ложь);
		АвтозаполнениеЗаймы( Ссылка, ПогашениеЗаймов, Сотрудники );
	КонецЕсли;

КонецФункции // АвтозаполнениеРаботникиОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАСЧЕТА ТБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТА

Функция РассчитатьНачисления(Сотрудники, КомментироватьРасчет = Ложь) Экспорт
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	МассивИндексыСтрокНачисления = Новый Массив();
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	// Если встретим почасовое отклонение, то записываем движения в регистр РабочееВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = РегистрыНакопления.РабочееВремяРаботниковОрганизаций.СоздатьНаборЗаписей();	
	НаборЗаписейРабочееВремя.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления, Истина);
			ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, НаборЗаписейРабочееВремя);
			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	НаборЗаписейРабочееВремя.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборЗаписейРабочееВремя.Очистить();
		НаборЗаписейРабочееВремя.Записать();
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		
		// Заполним записи в наборе записей регистра
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		Движение.СторнируемыйДокумент = СтрокаСторно.Регистратор;

		// и в табличной части
		Движение = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.ДатаНачала		= СтрокаСторно.ПериодДействияНачало;   
		Движение.ДатаОкончания	= СтрокаСторно.ПериодДействияКонец; 
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		Движение.СторнируемыйДокумент = СтрокаСторно.Регистратор;

		МассивИндексыСтрокНачисления.Добавить(Движение.НомерСтроки-1);
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
		
	// рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники, 
														КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборЗаписейРабочееВремя.Очистить();
	НаборЗаписейРабочееВремя.Записать();
	
	Записать();
	
	Возврат Не Отказ;
	
КонецФункции // РассчитатьНачисления()

Процедура РассчитатьВзносы( ТЧВзносы, ИмяТаблицы = "Взносы", Сотрудники = Неопределено, КомментироватьРасчет = Ложь ) Экспорт
	
	Отказ = Ложь;
	МассивИндексыСтрокВзносыВФонды = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления( Сотрудники).Выбрать();
	ВыборкаПоВзносам = СформироватьЗапросПоВзносы( ИмяТаблицы, Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// создадим наборы
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
			МассивИндексыСтрокВзносыВФонды.Добавить(ВыборкаПоВзносам.НомерСтроки-1);
		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	// если что-то не так, то очистим созданные наборы
	Если Отказ Тогда
		
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		Возврат;
	КонецЕсли;
	
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ВзносыВФонды", 
														НаборВзносыВФонды, 
														ТЧВзносы, 
														МассивИндексыСтрокВзносыВФонды, 
														Сотрудники, 
														КомментироватьРасчет);
	
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьУдержания()

Процедура РассчитатьНДФЛ( Сотрудники, КомментироватьРасчет = Ложь ) Экспорт
	
	Отказ = Ложь;
	МассивИндексыСтрокНДФЛ = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(Сотрудники).Выбрать();
	ВыборкаПоВзносам = СформироватьЗапросПоВзносы( , Сотрудники).Выбрать();
	ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
			
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);

		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
	НаборНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНДФЛ.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, НаборНДФЛ);
			МассивИндексыСтрокНДФЛ.Добавить(ВыборкаПоНДФЛ.НомерСтроки-1);

		КонецЕсли;
	КонецЦикла;
	НаборНДФЛ.Записать();

	Если Отказ Тогда
		
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		НаборНДФЛ.Очистить();
		НаборНДФЛ.Записать();
		
		Возврат;
	КонецЕсли;
	
	ПроведениеРасчетов.РассчитатьЗаписиНДФЛ(НаборНДФЛ, НДФЛ, МассивИндексыСтрокНДФЛ, Сотрудники, КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ.Очистить();
	НаборНДФЛ.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьУдержания
	
Процедура РассчитатьУдержания( Сотрудники, КомментироватьРасчет = Ложь ) Экспорт
	
	Отказ = Ложь;
	МассивИндексыСтрокУдержания = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления( Сотрудники).Выбрать();
	ВыборкаПоВзносам = СформироватьЗапросПоВзносы(, Сотрудники).Выбрать();
	ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ(Сотрудники).Выбрать();
	ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// сформируем движения по данным табличных частей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
	НаборНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНДФЛ.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, НаборНДФЛ);
		КонецЕсли;
	КонецЦикла;
	НаборНДФЛ.Записать();

	НаборУдержания = РегистрыРасчета.УдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоУдержаниям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, НаборУдержания);
			МассивИндексыСтрокУдержания.Добавить(ВыборкаПоУдержаниям.НомерСтроки - 1); 
		КонецЕсли;
	КонецЦикла;
	НаборУдержания.Записать();
	
	Если Отказ Тогда
		
		// Удаляем движения
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		НаборНДФЛ.Очистить();
		НаборНДФЛ.Записать();
		НаборУдержания.Очистить();
		НаборУдержания.Записать();
		Возврат;
		
	КонецЕсли;
	
	// удержания - в последнюю очередь
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания,Удержания, МассивИндексыСтрокУдержания, Сотрудники, КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ.Очистить();
	НаборНДФЛ.Записать();
	
	НаборУдержания.Очистить();
	НаборУдержания.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьУдержания

Процедура РассчитатьПогашениеЗаймов(Сотрудники, КомментироватьРасчет = Ложь ) Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамРегистратор",Ссылка);
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("парамПустаяВалюта" , Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамКонецГода",КонецГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("НачалоРасчетногоПериода",ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецРасчетногоПериода",КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДнейВГоду",(КонецГода(ПериодРегистрации) + 1 - НачалоГода(ПериодРегистрации)) / 86400);
	
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	////СписокФизлицТекст = "Сотрудник В (&парамСотрудники)";
	////УсловиеНаСотрудникТекст = " И НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сотрудник В (&парамСотрудники) ";
	
	// ТаблицаПериодыПогашения
	// Описание
	// 1.из таблицы остатков и оборотов рег-ра ПогашениеЗаймовРаботникамиОрганизаций (выборка ПогашениеЗаймов)
	// выбираются дни, в которые были произведены какие-либо движения по займу - период движений определяет  
	// начало периода погашения (в течение которого остаток долга не изменяется) - поле ДатаС;
	// рассчитывается остаток основного долга на конец месяца (поле ОсновнойДолгНаКонецМесяца)
	// рассчитывается остаток непогашенных процентов на начало месяца (поле ПроцентыНачальныйОстаток)
	// 2.из основной таблицы того же рег-ра присоединяются даты окончания периодов погашения - поле ДатаПО  
	// 3.из договора займа выбираются его параметры: проценты, сумма займа (переведенная в валюту регламентированного учета),
	// флажок исчисления мат.выгоды и пр.
	//
	
	//	ВТПериодыПогашения
	Если Истина Тогда 
		//	Описание:
		// 		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПогашениеЗаймов.Период КАК ДатаС,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, ДЕНЬ)) КАК ДатаПО,
		|	ПогашениеЗаймов.Сотрудник КАК Сотрудник,
		|	ПогашениеЗаймов.ДоговорЗайма КАК ДоговорЗайма,
		|	ПогашениеЗаймов.ДоговорЗайма.ПроцентЗаПользованиеЗаймом КАК ДоговорЗаймаПроцентЗаПользованиеЗаймом,
		|	ПогашениеЗаймов.ДоговорЗайма.ПорядокПогашенияЗайма КАК ПорядокПогашенияЗайма,
		|	ВЫБОР
		|		КОГДА ПогашениеЗаймов.ДоговорЗайма.НачалоПогашения < ПогашениеЗаймов.ДоговорЗайма.Дата
		|			ТОГДА ПогашениеЗаймов.ДоговорЗайма.Дата
		|		ИНАЧЕ ПогашениеЗаймов.ДоговорЗайма.НачалоПогашения
		|	КОНЕЦ КАК ДоговорЗаймаНачалоПогашения,
		|	ПогашениеЗаймов.ДоговорЗайма.СрокПогашения КАК ДоговорЗаймаСрокПогашения,
		|	ПогашениеЗаймов.ДоговорЗайма.СуммаЗайма * ВЫБОР
		|		КОГДА ПогашениеЗаймов.ДоговорЗайма.ВалютаДокумента В(&парамВалютаРегламентУчета, &парамПустаяВалюта)
		|			ТОГДА 1
		|		ИНАЧЕ ПогашениеЗаймов.ДоговорЗайма.КурсДокумента / ПогашениеЗаймов.ДоговорЗайма.КратностьДокумента
		|	КОНЕЦ КАК СуммаЗайма,
		|	ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток КАК ОсновнойДолгКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(ПогашениеЗаймов.Период, ДЕНЬ) = &КонецРасчетногоПериода
		|			ТОГДА ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОсновнойДолгНаКонецМесяца,
		|	ПогашениеЗаймов.ПроцентыПриход КАК ПроцентыПриход,
		|	ПогашениеЗаймов.ПроцентыРасход КАК ПроцентыРасход,
		|	ПогашениеЗаймов.ПроцентыОборот КАК ПроцентыОборот,
		|	ВЫБОР
		|		КОГДА ПогашениеЗаймов.Период = &НачалоРасчетногоПериода
		|			ТОГДА ПогашениеЗаймов.ПроцентыНачальныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентыНачальныйОстаток
		|ПОМЕСТИТЬ ВТПериодыПогашения	
		|ИЗ
		|	РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций.ОстаткиИОбороты(
		|		&НачалоРасчетногоПериода,
		|		&КонецРасчетногоПериода,
		|		День,
		|		ДвиженияИГраницыПериода,
		|		Организация = &парамОрганизация
		|			И Сотрудник В (&парамСотрудники)) КАК ПогашениеЗаймов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОрганизаций
		|		ПО ПогашениеЗаймов.Сотрудник = ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник
		|			И ПогашениеЗаймов.Организация = ПогашениеЗаймовРаботникамиОрганизаций.Организация
		|			И ПогашениеЗаймов.ДоговорЗайма = ПогашениеЗаймовРаботникамиОрганизаций.ДоговорЗайма
		|			И (ПогашениеЗаймов.Период < НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, ДЕНЬ))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПогашениеЗаймов.Период,
		|	ПогашениеЗаймов.Сотрудник,
		|	ПогашениеЗаймов.ПроцентыНачальныйОстаток,
		|	ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток,
		|	ПогашениеЗаймов.ПроцентыПриход,
		|	ПогашениеЗаймов.ДоговорЗайма,
		|	ПогашениеЗаймов.ПроцентыРасход,
		|	ПогашениеЗаймов.ПроцентыОборот
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПериодыПогашения";
	
	// Основной текст запроса
	// 1. Выборка ДанныеОПогашении
	//  поле ПогашатьЗаймВЭтомМесяце - Определяем, нужно ли погашать займ по условиям договора в текущем месяце
	//  поле ПогашеноЗайма - Рассчитывается сумма займа к погашению: как месячная доля займа или 
	//                       остаток по основному долгу на конец месяца - по условиям договора
	//  поля ПроцентыПриход и ПроцентыРасход - Суммируются начисленные и погашенные проценты по займу за месяц
	//  поле ПроцентыНачальныйОстаток - остаток непогашенных процентов на начало месяца, также будет предложен у погашению
	//  поле НачисленоПроцентов - Рассчитывается сумма процентов к начислению за месяц (по ежедневным 
	//      остаткам основного долга) как сумма по всем периодам из таблицы ПериодыПогашения начисленных по 
	//      следующей формуле процентов: 
	//            %% к начислению за период = кадендарных дней в периоде / кадендарных дней в году * процент по займу
	// 2. В основной выборке рассчитываются все показатели т.ч. документа
	//  поле НачисленоПроцентов - доначисляются проценты за пользование займом
	//  поле ПогашеноПроцентов - если займ в текущем месяце погашается, предлагается остаток %% с учетом начисленных за месяц
	//  поле ПогашеноЗайма - если займ в текущем месяце погашается, предлагается рассчитанная ранее сумма к 
	//                       погашению основного долга + сумма погашаемых %%
	//

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сотрудник,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ДоговорЗайма,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ДанныеОПогашении.НачисленоПроцентов > ДанныеОПогашении.ПроцентыПриход
	|			ТОГДА ДанныеОПогашении.НачисленоПроцентов - ДанныеОПогашении.ПроцентыПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоПроцентов,
	|	ВЫБОР
	|		КОГДА ДанныеОПогашении.ПогашатьЗаймВЭтомМесяце
	|			ТОГДА ДанныеОПогашении.НачисленоПроцентов + ДанныеОПогашении.ПроцентыНачальныйОстаток - ДанныеОПогашении.ПроцентыРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПогашеноПроцентов,
	|	ВЫБОР
	|		КОГДА ДанныеОПогашении.ПогашатьЗаймВЭтомМесяце
	|			ТОГДА ДанныеОПогашении.ПогашеноЗайма + ДанныеОПогашении.НачисленоПроцентов + ДанныеОПогашении.ПроцентыНачальныйОстаток - ДанныеОПогашении.ПроцентыРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПогашеноЗайма
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыПогашения.Сотрудник КАК Сотрудник,
	|			ПериодыПогашения.ДоговорЗайма КАК ДоговорЗайма,
	|			ВЫБОР
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|							И &КонецРасчетногоПериода >= ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДоговорЗаймаНачалоПогашения, МЕСЯЦ, ПериодыПогашения.ДоговорЗаймаСрокПогашения)
	|					ТОГДА ИСТИНА
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|							И &КонецРасчетногоПериода >= ПериодыПогашения.ДоговорЗаймаНачалоПогашения
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ПогашатьЗаймВЭтомМесяце,
	|			ВЫБОР
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|					ТОГДА МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|				КОГДА ПериодыПогашения.СуммаЗайма / ПериодыПогашения.ДоговорЗаймаСрокПогашения > МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|					ТОГДА МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|				ИНАЧЕ ПериодыПогашения.СуммаЗайма / ПериодыПогашения.ДоговорЗаймаСрокПогашения
	|			КОНЕЦ КАК ПогашеноЗайма,
	|			СУММА(ПериодыПогашения.ПроцентыНачальныйОстаток) КАК ПроцентыНачальныйОстаток,
	|			СУММА(ПериодыПогашения.ПроцентыПриход) КАК ПроцентыПриход,
	|			СУММА(ПериодыПогашения.ПроцентыРасход) КАК ПроцентыРасход,
	|			СУММА(ВЫРАЗИТЬ(ПериодыПогашения.ОсновнойДолгКонечныйОстаток * РАЗНОСТЬДАТ(ВЫБОР
	|							КОГДА ПериодыПогашения.ОсновнойДолгКонечныйОстаток > 0
	|									И ПериодыПогашения.ДатаС = &НачалоРасчетногоПериода
	|								ТОГДА ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДатаС, ДЕНЬ, -1)
	|							ИНАЧЕ ПериодыПогашения.ДатаС
	|						КОНЕЦ, ВЫБОР
	|							КОГДА ПериодыПогашения.ДатаПО > &КонецРасчетногоПериода
	|									ИЛИ ПериодыПогашения.ДатаПО ЕСТЬ NULL 
	|								ТОГДА &КонецРасчетногоПериода
	|							ИНАЧЕ ПериодыПогашения.ДатаПО
	|						КОНЕЦ, ДЕНЬ) / &ДнейВГоду * ПериодыПогашения.ДоговорЗаймаПроцентЗаПользованиеЗаймом / 100 КАК ЧИСЛО(15, 2))) КАК НачисленоПроцентов
	|		
	|		ИЗ	ВТПериодыПогашения КАК ПериодыПогашения
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыПогашения.Сотрудник,
	|			ПериодыПогашения.ДоговорЗайма,
	|			ПериодыПогашения.ПорядокПогашенияЗайма,
	|			ПериодыПогашения.ДоговорЗаймаНачалоПогашения,
	|			ПериодыПогашения.ДоговорЗаймаСрокПогашения,
	|			ПериодыПогашения.СуммаЗайма) КАК ДанныеОПогашении
	|		ПО НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сотрудник = ДанныеОПогашении.Сотрудник
	|			И НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ДоговорЗайма = ДанныеОПогашении.ДоговорЗайма
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Ссылка = &парамРегистратор
	|	И НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сотрудник В (&парамСотрудники)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаПоСсудам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоСсудам.Следующий() Цикл
		Если КомментироватьРасчет Тогда
				КомментарийВидаРасчета = ОбщегоНазначения.КомментарийРасчета("Расчет ", , ВыборкаПоСсудам.ДоговорЗайма, ВыборкаПоСсудам.ДоговорЗайма);
				ОбщегоНазначения.КомментарийРасчета("Начислено процентов: " + ВыборкаПоСсудам.НачисленоПроцентов, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Погашено займа: " + ВыборкаПоСсудам.ПогашеноЗайма, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Погашено процентов: " + ВыборкаПоСсудам.ПогашеноПроцентов, КомментарийВидаРасчета);
		КонецЕсли;
		СтрокаТабличнойЧасти = ПогашениеЗаймов.Получить(ВыборкаПоСсудам.НомерСтроки-1);
		СтрокаТабличнойЧасти.НачисленоПроцентов = ВыборкаПоСсудам.НачисленоПроцентов;
		СтрокаТабличнойЧасти.ПогашеноЗайма	  = ВыборкаПоСсудам.ПогашеноЗайма;
		СтрокаТабличнойЧасти.ПогашеноПроцентов  = ВыборкаПоСсудам.ПогашеноПроцентов;
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры

Процедура РассчитатьВсе( Сотрудники, КомментироватьРасчет = Ложь ) Экспорт 
	
	РассчитатьНачисления( Сотрудники, КомментироватьРасчет);
	Если НЕ ПредварительныйРасчет Тогда
		РассчитатьВзносы( Взносы,"Взносы", Сотрудники, КомментироватьРасчет);
		РассчитатьНДФЛ( Сотрудники, КомментироватьРасчет);
		РассчитатьУдержания( Сотрудники, КомментироватьРасчет);
		РассчитатьПогашениеЗаймов(Сотрудники, КомментироватьРасчет);
		РассчитатьВзносы( ВзносыФОТ,"ВзносыФОТ", Сотрудники, КомментироватьРасчет);
	КонецЕсли;	
		
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоШапке() Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизаций.Дата,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизаций.Организация
	|		ИНАЧЕ НачислениеЗарплатыРаботникамОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	НачислениеЗарплатыРаботникамОрганизаций.Организация КАК Организация,
	|	НачислениеЗарплатыРаботникамОрганизаций.Организация КАК ОбособленноеПодразделение,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачисления( Сотрудники )

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	// Свойства
	|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиНачисления.ДатаНачала					КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания				КАК ПериодДействияКонец,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.Сторно,
	|
	// Измерения
	|	СтрокиНачисления.Ссылка.Организация КАК организация,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Назначение,
	|
	// Ресурсы
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	// Реквизиты 
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.СторнируемыйДокумент,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
	|				ТОГДА СтрокиНачисления.ГрафикРаботы
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
	|   			ТОГДА NULL
	|			ИНАЧЕ СтрокиНачисления.Назначение
	|	КОНЕЦ КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ДокументОснование,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|
	// Специализированные параметры для регистра Взаиморасчеты с работников организации и др.
	|	СтрокиНачисления.ВидРасчета.СпособРасчета	КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.СчетУчета		КАК СчетУчета,
	|	СтрокиНачисления.ВидРасчета.ВидВремени		КАК ВидВремени,
	|	ЕСТЬNULL(СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени	КАК ВидИспользованияРабочегоВремени,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В(ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ										КАК ЯвляетсяПочасовымОтклонением,
	|
	// Проверки
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = СтрокиНачисления.Ссылка.Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|ГДЕ	СтрокиНачисления.Ссылка = &ДокументСсылка
	|   И	СтрокиНачисления.Сотрудник В (&парамСотрудники)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

Функция СформироватьЗапросПоВзносы( ИмяТаблицы = "Взносы", Сотрудники)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиВзносы.НомерСтроки				КАК НомерСтрокиТЧ,
	|	СтрокиВзносы.Ссылка.Организация			КАК Организация,
	|	СтрокиВзносы.Ссылка.ПериодРегистрации	КАК Период,
	|	СтрокиВзносы.Ссылка.ПериодРегистрации	КАК ПериодВзаиморасчетов,
	|	СтрокиВзносы.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиВзносы.Сотрудник,
	|	СтрокиВзносы.ПодразделениеОрганизации,
	|	СтрокиВзносы.ВидРасчета,
	|	СтрокиВзносы.НомерСтроки			КАК НомерСтроки,
	|	СтрокиВзносы.БазовыйПериодНачало	КАК БазовыйПериодНачало,
	|	СтрокиВзносы.БазовыйПериодКонец		КАК БазовыйПериодКонец,
	|	СтрокиВзносы.ДатаНачала				КАК ДатаНачала,
	|	СтрокиВзносы.ДатаОкончания			КАК ДатаОкончания,
	|	СтрокиВзносы.Предел,
	|	СтрокиВзносы.Налог,
	|	СтрокиВзносы.СтатьяНалоговойДекларации,
	|	СтрокиВзносы.Ставка,
	|	СтрокиВзносы.НомерПорога,
	|	СтрокиВзносы.База,
	|	СтрокиВзносы.БазаВзноса,
	|	СтрокиВзносы.БазаВычет,
	|	СтрокиВзносы.Результат,
	|	СтрокиВзносы.Сторно,
	|	СтрокиВзносы.ОтработаноДней,
	|	СтрокиВзносы.ОтработаноДнейВсего,
	|	СтрокиВзносы.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиВзносы.КодКатегорииЗЛ КАК КодКатегорииЗЛ,
	|	СтрокиВзносы.ТипНачисления  КАК ТипНачисления,
	|	СтрокиВзносы.Авторасчет КАК Авторасчет
	|ИЗ Документ.НачислениеЗарплатыРаботникамОрганизаций."+ИмяТаблицы+" КАК СтрокиВзносы
	|
	|ГДЕ	СтрокиВзносы.Ссылка = &ДокументСсылка
	|	И	СтрокиВзносы.Сотрудник В (&парамСотрудники)	
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВзносы()

Функция СформироватьЗапросПоНДФЛ(Сотрудники)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНДФЛ.Ссылка.Организация			КАК Организация,
	|	СтрокиНДФЛ.Ссылка.ПериодРегистрации		КАК Период,
	|	СтрокиНДФЛ.Ссылка.ПериодРегистрации		КАК ПериодВзаиморасчетов,
	|	СтрокиНДФЛ.НомерСтроки					КАК НомерСтроки,
	|	СтрокиНДФЛ.Сотрудник,
	|	СтрокиНДФЛ.ВидСтавки,
	|	СтрокиНДФЛ.ДоходНДФЛ,
	|	СтрокиНДФЛ.НалоговыйПериод,
	|	СтрокиНДФЛ.Льгота,
	|	СтрокиНДФЛ.Налог,
	|	СтрокиНДФЛ.Доход,
	|	СтрокиНДФЛ.КоличествоЛьгот,
	|	СтрокиНДФЛ.УвеличеннаяСтавка,
	|	СтрокиНДФЛ.ДоходПолный,
	|	СтрокиНДФЛ.Авторасчет КАК Авторасчет
	|ИЗ Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|
	|ГДЕ	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|	И	СтрокиНДФЛ.Сотрудник В (&парамСотрудники)	
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛ()

Функция СформироватьЗапросПоУдержания(Сотрудники)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиУдержания.Ссылка.Организация КАК Организация,
	|	СтрокиУдержания.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СтрокиУдержания.Сотрудник,
	|	СтрокиУдержания.ВидРасчета,
	|	СтрокиУдержания.ДатаНачала,
	|	СтрокиУдержания.ДатаОкончания,
	|	СтрокиУдержания.ДатаНачала КАК БазовыйПериодНачало,
	|	КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) КАК БазовыйПериодКонец,
	|	СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|	СтрокиУдержания.ДокументОснование,
	|	СтрокиУдержания.Показатель1		КАК Показатель1,
	|	СтрокиУдержания.Показатель2		КАК Показатель2,
	|	СтрокиУдержания.Показатель3		КАК Показатель3,
	|	СтрокиУдержания.Показатель4		КАК Показатель4,
	|	СтрокиУдержания.Показатель5		КАК Показатель5,
	|	СтрокиУдержания.Показатель6		КАК Показатель6,
	|	СтрокиУдержания.Результат,
	|	СтрокиУдержания.Сторно,
	|	СтрокиУдержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиУдержания.Авторасчет КАК Авторасчет
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК СтрокиУдержания
	|
	|ГДЕ	СтрокиУдержания.Ссылка = &ДокументСсылка
	|	И	СтрокиУдержания.Сотрудник В (&парамСотрудники)	
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

Функция СформироватьЗапросПоПогашениеЗайма(Сотрудники)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиПогашениеЗайма.Ссылка.Организация КАК Организация,
	|	СтрокиПогашениеЗайма.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СтрокиПогашениеЗайма.НомерСтроки,
	|	СтрокиПогашениеЗайма.Сотрудник,
	|	СтрокиПогашениеЗайма.ДоговорЗайма,
	|	СтрокиПогашениеЗайма.НачисленоПроцентов,
	|	СтрокиПогашениеЗайма.ПогашеноПроцентов,
	|	СтрокиПогашениеЗайма.ПогашеноЗайма
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК СтрокиПогашениеЗайма
	|
	|ГДЕ	СтрокиПогашениеЗайма.Ссылка = &ДокументСсылка
	|	И	СтрокиПогашениеЗайма.Сотрудник В (&парамСотрудники)	
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоПогашениеЗайма


// ПРОВЕРИТЬ ЗАПОЛНЕНИЕ
//

Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой начисляется зарплата!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		Отказ = Истина;
		Возврат;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
	КонецЕсли;
	

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Базовыйпериодначало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода начисления!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода начисления!", Отказ, Заголовок);
	КонецЕсли;
	//
	//Если ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
	//	// ВидИспользованияРабочегоВремени
	//	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени) Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан учет времени для вида расчета!", Отказ, Заголовок);
	//	КонецЕсли;
	//	
	//	// ОплачиватьЧасов
	//	Если ВыборкаПоСтрокамДокумента.ОплачиватьЧасов <= 0 
	//		 Или ВыборкаПоСтрокамДокумента.ОплачиватьЧасов > 24 Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "число оплачиваемых часов должно быть от 1 до 24!", Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Взносы"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Налог) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан вид взноса!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()

Процедура ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""НДФЛ"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НалоговыйПериод) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан налоговый период!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()

Процедура ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Удержания"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой и 
		ВыборкаПоСтрокамДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда

		// Дата начала
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала удержания!", Отказ, Заголовок);
		КонецЕсли;
		
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания удержания!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиУдержания()

Процедура ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
 									""" табл. части ""Погашение займов"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
	// ДоговорЗайма
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДоговорЗайма) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан договор займа погашение которого выполняется!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ДоговорЗайма.Сотрудник <> ВыборкаПоСтрокамДокумента.Сотрудник Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "сотрудник не совпадает с сотрудником указанным в договоре займа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()


// ДОБАВИТЬ СТРОКУ
// 

Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей, ОбнулитьРезультат = Ложь)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
 	Движение.ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидВремени, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Если ОбнулитьРезультат И ВыборкаПоСтрокамДокумента.Авторасчет Тогда
		Движение.Результат = 0;
		Движение.ОплаченоДнейЧасов = 0;
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

Процедура ДобавитьСтрокуВзносы(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры // ДобавитьСтрокуДоговора

Процедура ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Если ВыборкаПоСтрокамДокумента.Результат = 0 Тогда
	   Возврат;
	КонецЕсли;

	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
	
	//Если ввод остатков, то сразу закрываем регистр
	Если ЗначениеЗаполнено(мДатаНачалаРаботы) И ПериодРегистрации<мДатаНачалаРаботы Тогда
		
		Движение = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
		Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВзаиморасчетыПоВзносамВФонды

Процедура ДобавитьСтрокуНДФЛ(ВыборкаПоСтрокамДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
	
	//Если ввод остатков, то сразу закрываем регистр
	Если ЗначениеЗаполнено(мДатаНачалаРаботы) И ПериодРегистрации < мДатаНачалаРаботы Тогда
		
		Движение = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
		Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛ

Процедура ДобавитьСтрокуУдержаний(ВыборкаПоСтрокамДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры // ДобавитьСтрокуУдержаний

Процедура ДобавитьСтрокуПогашениеЗайма(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	КонецМесяца = КонецМесяца(ПериодРегистрации);

	// начислено процентов
	Если ВыборкаПоСтрокамДокумента.НачисленоПроцентов <> 0 Тогда
		Движение = НаборЗаписей.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.Сотрудник                  = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.Организация				= ВыборкаПоСтрокамДокумента.Организация;
	 	Движение.ДоговорЗайма				= ВыборкаПоСтрокамДокумента.ДоговорЗайма;

		// Ресурсы
		Движение.Проценты					= ВыборкаПоСтрокамДокумента.НачисленоПроцентов;
		Движение.УдержаноИзЗарплаты			= Истина;
	КонецЕсли;
	
	// пошашено процентов и основного долга
	Движение = НаборЗаписей.Добавить(); 
	// запись в регистр складываем всегда, даже если реально погашения не было
	// запись служит признаком того, что с займом уже работали

	// Свойства
	Движение.Период			= КонецМесяца;
	Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
	
	// Измерения
	Движение.Сотрудник		= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Организация	= ВыборкаПоСтрокамДокумента.Организация;
	Движение.ДоговорЗайма	= ВыборкаПоСтрокамДокумента.ДоговорЗайма;
	
	// Ресурсы
	Движение.Проценты		= ВыборкаПоСтрокамДокумента.ПогашеноПроцентов;
	// даже если начисленные проценты не погашены не увеличиваем основной долг - ограничиваем снизу 
	// размер погашения основного долга нулем
	Движение.ОсновнойДолг	= Макс(0, ВыборкаПоСтрокамДокумента.ПогашеноЗайма - ВыборкаПоСтрокамДокумента.ПогашеноПроцентов);
	
	// Реквизиты
	Движение.УдержаноИзЗарплаты	= Истина;
	
КонецПроцедуры // ДобавитьСтрокуПогашениеЗайма

Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, НаборЗаписей)
	
	Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период = ВыборкаПоНачислениям.ПериодДействияНачало;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоНачислениям.Сотрудник;
		Движение.Организация 						= ВыборкаПоНачислениям.Организация;
		Движение.ВидИспользованияРабочегоВремени 	= ВыборкаПоНачислениям.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Часов			= ВыборкаПоНачислениям.ОплачиватьЧасов;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()


Процедура СформироватьВзаиморасчетыСРаботниками( Сотрудники = Неопределено )
	
	ИспользуетсяЕСВ = ПроведениеРасчетов.ИспользуетсяЕСВ(ПериодРегистрации);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("парамПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамОрганизация",		Организация);
	
	Если Сотрудники = Неопределено Тогда
		Сотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	Запрос.УстановитьПараметр("парамСотрудники",		Сотрудники);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	//ВТНачисления
	Если Истина Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.Сотрудник	КАК Сотрудник,
		|	Начисления.КодОперации  КАК КодОперации,
		|	Начисления.СчетУчета	КАК СчетУчета,
		|	Начисления.Сумма		КАК Сумма,
		|	Начисления.СуммаДокумента	КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	
		|(	//-----------------------------------------------------------------------------------
		|	// Начисления - начало
		|	//
		|	ВЫБРАТЬ
		|		Взаиморасчеты.Сотрудник				КАК Сотрудник,
		|		Взаиморасчеты.КодОперации			КАК КодОперации,
		|		Взаиморасчеты.СчетУчета				КАК СчетУчета,
		|	    ВЫБОР	КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	    		ТОГДА Взаиморасчеты.СуммаВзаиморасчетов
		|	    		ИНАЧЕ - Взаиморасчеты.СуммаВзаиморасчетов
		|	    КОНЕЦ			КАК Сумма,
		|		0				КАК СуммаДокумента
		|	ИЗ  РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
		|	ГДЕ		Взаиморасчеты.Регистратор <> &парамСсылка
		|		И	Взаиморасчеты.Организация = &парамОрганизация
		|		И	НАЧАЛОПЕРИОДА(Взаиморасчеты.Период,МЕСЯЦ) = &парамПериодРегистрации 
		|		И	Сотрудник в (&парамСотрудники)
		|		И	Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
        |	
		|	ВЫБРАТЬ
		|		ВзаиморасчетыФСС.Сотрудник				КАК Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления)			КАК КодОперации,
		|		ВзаиморасчетыФСС.СчетУчета				КАК СчетУчета,
		|	    ВЫБОР	КОГДА ВзаиморасчетыФСС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	    		ТОГДА ВзаиморасчетыФСС.Сумма
		|	    		ИНАЧЕ - ВзаиморасчетыФСС.Сумма
		|	    КОНЕЦ			КАК Сумма,
		|		0				КАК СуммаДокумента
		|	ИЗ  РегистрНакопления.ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыФСС
		|	ГДЕ		ВзаиморасчетыФСС.Организация = &парамОрганизация
		|		И	НАЧАЛОПЕРИОДА(ВзаиморасчетыФСС.Период,МЕСЯЦ) = &парамПериодРегистрации
		|		И	ВзаиморасчетыФСС.Документ.ПериодРегистрации = &парамПериодРегистрации 
		|		И	Сотрудник в (&парамСотрудники)
        |
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ     
		|		Основной.Сотрудник 						КАК Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
		|		ВЫБОР	КОГДА Основной.ВидРасчета.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) 
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате)
		|				ИНАЧЕ Основной.ВидРасчета.СчетУчета
		|		КОНЕЦ									КАК СчетУчета,
		|		Основной.Результат						КАК Сумма,
		|		Основной.Результат 						КАК СуммаДокумента
		|	ИЗ	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основной
		|	ГДЕ	  Основной.Ссылка = &парамСсылка
		|		И (НЕ Основной.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)
		|	// 
		|	// Начисления - конец
		|	//-----------------------------------------------------------------------------------
		|) КАК Начисления
		|" ;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНачисления";
	
	//ВТУдержания
	Если Истина Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Удержания.Сотрудник		КАК Сотрудник,
		|	Удержания.КодОперации	КАК КодОперации,
		|	Удержания.СчетУчета		КАК СчетУчета,
		|	Удержания.Сумма			КАК Сумма,
		|	Удержания.СуммаДокумента	КАК СуммаДокумента
		|ПОМЕСТИТЬ
		|	ВТУдержания
		|ИЗ
		|(
		|	//-----------------------------------------------------------------------------------
		|	// Удержания - начало
		|	//
		|	ВЫБРАТЬ
		|		Взаиморасчеты.Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления)	КАК КодОперации,
		|		Взаиморасчеты.СчетУчета,
		|	    ВЫБОР	КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	    		ТОГДА Взаиморасчеты.СуммаВзаиморасчетов
		|	    		ИНАЧЕ - Взаиморасчеты.СуммаВзаиморасчетов
		|	    КОНЕЦ			КАК Сумма,
		|		0				КАК СуммаДокумента
		|	ИЗ  РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
		|	ГДЕ		Взаиморасчеты.Регистратор <> &парамСсылка
		|		И	Взаиморасчеты.Организация = &парамОрганизация
		|		И	НАЧАЛОПЕРИОДА(Взаиморасчеты.Период,МЕСЯЦ) = &парамПериодРегистрации 
		|		И	Сотрудник в (&парамСотрудники)
		|		И	Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Удержания)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		Основной.Сотрудник		КАК Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Удержания) КАК КодОперации,
		|		NULL					КАК СчетУчета,
		|		0						КАК Сумма,
		|		Основной.Результат 		КАК СуммаДокумента
		|	ИЗ	Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК Основной
		|	ГДЕ	  Основной.Ссылка = &парамСсылка
		|	// 
		|	// Удержания - конец
		|	//-----------------------------------------------------------------------------------
		|) КАК Удержания
		|";
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТУдержания";
	
	//ВТВзносы
	Если Истина Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Взносы.Сотрудник		КАК Сотрудник,
		|	Взносы.КодОперации		КАК КодОперации,
		|	Взносы.СчетУчета		КАК СчетУчета,
		|	Взносы.Сумма			КАК Сумма,
		|	Взносы.СуммаДокумента	КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТВзносы
		|	
		|ИЗ
		|(
		|	//-----------------------------------------------------------------------------------
		|	// Взносы - начало
		|	//
		|	ВЫБРАТЬ
		|		Взаиморасчеты.Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления)	КАК КодОперации,
		|		Взаиморасчеты.СчетУчета,
		|	    ВЫБОР	КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	    		ТОГДА Взаиморасчеты.СуммаВзаиморасчетов
		|	    		ИНАЧЕ - Взаиморасчеты.СуммаВзаиморасчетов
		|	    КОНЕЦ			КАК Сумма,
		|		0				КАК СуммаДокумента
		|	ИЗ  РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
		|	ГДЕ		Взаиморасчеты.Регистратор <> &парамСсылка
		|		И	Взаиморасчеты.Организация = &парамОрганизация
		|		И	НАЧАЛОПЕРИОДА(Взаиморасчеты.Период,МЕСЯЦ) = &парамПериодРегистрации 
		|		И	Сотрудник в (&парамСотрудники)
		|		И	Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Взносы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		Основной.Сотрудник 		КАК Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Взносы) КАК КодОперации,
		|		"+?(ИспользуетсяЕСВ,"СпособыОтраженияВзносов.СпособОтраженияВРеглУчете.СчетДт","NULL")+"	КАК СчетУчета,
		|		0				 		КАК Сумма,
		|		Основной.Результат 		КАК СуммаДокумента
		|	ИЗ	Документ.НачислениеЗарплатыРаботникамОрганизаций.Взносы КАК Основной
		|		"+?(ИспользуетсяЕСВ,"ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеВзносовВРеглУчете.СрезПоследних(&парамПериодРегистрации) КАК СпособыОтраженияВзносов
		|		ПО Основной.Налог = СпособыОтраженияВзносов.Налог","")+"                                                                                     
		|	ГДЕ	  Основной.Ссылка = &парамСсылка
		|	// 
		|	// Взносы - конец
		|	//-----------------------------------------------------------------------------------
		|) КАК Взносы
		|";
		Запрос.Выполнить();
		
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВзносы";
	
	// ВТНДФЛ
	Если Истина Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НДФЛ.Сотрудник		КАК Сотрудник,
		|	НДФЛ.КодОперации	КАК КодОперации,
		|	НДФЛ.СчетУчета		КАК СчетУчета,
		|	НДФЛ.Сумма			КАК Сумма,
		|	НДФЛ.СуммаДокумента	КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТНДФЛ
		|ИЗ
		|(
		|	//-----------------------------------------------------------------------------------
		|	// НДФЛ - начало
		|	//
		|	ВЫБРАТЬ
		|		Взаиморасчеты.Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления)	КАК КодОперации,
		|		Взаиморасчеты.СчетУчета,
		|	    ВЫБОР	КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	    		ТОГДА Взаиморасчеты.СуммаВзаиморасчетов
		|	    		ИНАЧЕ - Взаиморасчеты.СуммаВзаиморасчетов
		|	    КОНЕЦ			КАК Сумма,
		|		0				КАК СуммаДокумента
		|	ИЗ  РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
		|	ГДЕ		Взаиморасчеты.Регистратор <> &парамСсылка
		|		И	Взаиморасчеты.Организация = &парамОрганизация
		|		И	НАЧАЛОПЕРИОДА(Взаиморасчеты.Период,МЕСЯЦ) = &парамПериодРегистрации 
		|		И	Сотрудник в (&парамСотрудники)
		|		И	Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.НДФЛ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		Основной.Сотрудник		КАК Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.НДФЛ) КАК КодОперации,
		|		Основной.ДоходНДФЛ.СпособОтраженияВРеглУчете.СчетДт	КАК СчетУчета,
		|		0			 			КАК Сумма,
		|		Основной.Налог			КАК СуммаДокумента
		|	ИЗ	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК Основной
		|	ГДЕ   Основной.Ссылка = &парамСсылка
		|	//
		|	// НДФЛ - конец
		|	//-----------------------------------------------------------------------------------
		|) КАК НДФЛ
		|";	
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНДФЛ";
	
	//ВТПогашениеЗаймов
	Если Истина Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПогашениеЗаймов.Сотрудник		КАК Сотрудник,
		|	ПогашениеЗаймов.КодОперации 	КАК КодОперации,
		|	ПогашениеЗаймов.СчетУчета		КАК СчетУчета,
		|	ПогашениеЗаймов.Сумма			КАК Сумма,
		|	ПогашениеЗаймов.СуммаДокумента	КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТПогашениеЗаймов
		|	
		|ИЗ
		|(
		|	//-----------------------------------------------------------------------------------
		|	// ПогашениеЗаймов - начало
		|	//
		|	ВЫБРАТЬ
		|		Взаиморасчеты.Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
		|		Взаиморасчеты.СчетУчета,
		|	    ВЫБОР	КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	    		ТОГДА Взаиморасчеты.СуммаВзаиморасчетов
		|	    		ИНАЧЕ - Взаиморасчеты.СуммаВзаиморасчетов
		|	    КОНЕЦ			КАК Сумма,
		|		0				КАК СуммаДокумента
		|	ИЗ  РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
		|	ГДЕ		Взаиморасчеты.Регистратор <> &парамСсылка
		|		И	Взаиморасчеты.Организация = &парамОрганизация
		|		И	НАЧАЛОПЕРИОДА(Взаиморасчеты.Период,МЕСЯЦ) = &парамПериодРегистрации 
		|		И	Сотрудник в (&парамСотрудники)
		|		И	Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Займы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		Основной.Сотрудник		КАК Сотрудник,
		|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Займы) КАК КодОперации,
		|		NULL 					КАК СчетУчета,
		|		0					 	КАК ВсяСумма,
		|		Основной.ПогашеноЗайма	КАК СуммаДокумента
		|	ИЗ	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК Основной
		|	ГДЕ   Основной.Ссылка = &парамСсылка
		|	//
		|	// ПогашениеЗаймов - конец
		|	//-----------------------------------------------------------------------------------
		|)КАК ПогашениеЗаймов
		|";
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПогашениеЗаймов";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Доходы.Сотрудник				КАК Сотрудник,
	|	ВЫБОР	КОГДА Доходы.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате)
	|				ТОГДА -1
	|			КОГДА Доходы.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДругимВыплатам)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|	КОНЕЦ				КАК ПорядокСчетУчета,
	|	Доходы.СчетУчета				КАК СчетУчета,
	|	Доходы.КодОперации				КАК КодОперации,
	|	СУММА(Доходы.ПриходСумма)			КАК ПриходСумма,
	|	СУММА(Доходы.ПриходСуммаДокумента)	КАК ПриходСуммаДокумента,
	|	СУММА(Доходы.РасходСуммаДокумента)	КАК РасходСуммаДокумента
	|ИЗ 
	|(
	|	
	|	ВЫБРАТЬ
	|		Начисления.Сотрудник		КАК Сотрудник,
	|		Начисления.КодОперации		КАК КодОперации,
	|		Начисления.СчетУчета		КАК СчетУчета,
	|		Начисления.Сумма			КАК ПриходСумма,
	|		Начисления.СуммаДокумента	КАК ПриходСуммаДокумента,
	|		0							КАК РасходСуммаДокумента
	|	ИЗ ВТНачисления КАК Начисления
	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Удержания.Сотрудник			КАК Сотрудник,
	|		Удержания.КодОперации		КАК КодОперации,
	|		Удержания.СчетУчета			КАК СчетУчета,
	|		-Удержания.Сумма			КАК ПриходСумма,
	|		0							КАК ПриходСуммаДокумента,
	|		Удержания.СуммаДокумента	КАК РасходСуммаДокумента
	|	ИЗ ВТУдержания КАК Удержания
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Взносы.Сотрудник		КАК Сотрудник,
	|		Взносы.КодОперации		КАК КодОперации,
	|		Взносы.СчетУчета		КАК СчетУчета,
	|		-Взносы.Сумма			КАК ПриходСумма,
	|		0						КАК ПриходСуммаДокумента,
	|		Взносы.СуммаДокумента	КАК РасходСуммаДокумента
	|	ИЗ ВТВзносы КАК Взносы
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		НДФЛ.Сотрудник		КАК Сотрудник,
	|		НДФЛ.КодОперации	КАК КодОперации,
	|		НДФЛ.СчетУчета		КАК СчетУчета,
	|		- НДФЛ.Сумма		КАК ПриходСумма,
	|		0					КАК ПриходСуммаДокумента,
	|		НДФЛ.СуммаДокумента	КАК РасходСуммаДокумента
	|	ИЗ ВТНДФЛ КАК НДФЛ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ПогашениеЗаймов.Сотрудник		КАК Сотрудник,
	|		ПогашениеЗаймов.КодОперации 	КАК КодОперации,
	|		ПогашениеЗаймов.СчетУчета		КАК СчетУчета,
	|		-ПогашениеЗаймов.Сумма			КАК ПриходСумма,
	|		0								КАК ПриходСуммаДокумента,
	|		ПогашениеЗаймов.СуммаДокумента	КАК РасходСуммаДокумента
	|	ИЗ ВТПогашениеЗаймов	КАК ПогашениеЗаймов	
	|	
	|) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Сотрудник,
	|	ВЫБОР	КОГДА Доходы.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате)
	|				ТОГДА -1
	|			КОГДА Доходы.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДругимВыплатам)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|	КОНЕЦ,
	|	Доходы.СчетУчета,
	|	Доходы.КодОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ПорядокСчетУчета,
	|	СчетУчета,
	|	КодОперации.Порядок
	|
	|ИТОГИ    
	|	СУММА(ПриходСумма), 
	|	СУММА(ПриходСуммаДокумента),
	|	СУММА(РасходСуммаДокумента)
	|ПО
	|	Сотрудник,  
	|	СчетУчета
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаСотрудники = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СчетУчетаПоУмолчанию = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	СчетУчета663 = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам;
	Приход = ВидДвиженияНакопления.Приход;
	Расход = ВидДвиженияНакопления.Расход;
	
	тбНачисления = Новый ТаблицаЗначений;
	тбНачисления.Колонки.Добавить("ПорядокСчетУчета");
	тбНачисления.Колонки.Добавить("СчетУчета");
	тбНачисления.Колонки.Добавить("ПриходСумма");
	
	тбУдержания = Новый ТаблицаЗначений;
	тбУдержания.Колонки.Добавить("КодОперации");
	тбУдержания.Колонки.Добавить("РасходСумма");
	
	// сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока ВыборкаСотрудники.Следующий() Цикл
		
		мСотрудник = ВыборкаСотрудники.Сотрудник;
		тбНачисления.Очистить();
		тбУдержания.Очистить();
		
		// Шаг 1. В этом цикле сделаем движения по Настмлениям и сформируем таблицу для определения счетов учета других удержаний
		ВыборкаСчетУчета = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетУчета.Следующий() Цикл
			
			ПриходСумма = ВыборкаСчетУчета.ПриходСумма;
			Выборка = ВыборкаСчетУчета.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				
				// 1. Начисления по документу двигаем всегда, если сумма по документу не равна нулю
				// 2. Удержания
				Если Выборка.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления Тогда
					// Начисления по документу двигаем всегда, если сумма по документу не равна нулю
					Если Выборка.ПриходСуммаДокумента <> 0 Тогда
						ДобавитьСтрокуВзаиморасчеты(Приход, мСотрудник, Выборка.СчетУчета, Выборка.ПриходСуммаДокумента, Выборка.КодОперации);
						
						СтрокаТб = тбНачисления.Добавить();
						СтрокаТб.ПорядокСчетУчета = ВыборкаСчетУчета.ПорядокСчетУчета;
						СтрокаТб.СчетУчета = ВыборкаСчетУчета.СчетУчета;
						СтрокаТб.ПриходСумма = Выборка.ПриходСумма;
					Иначе
						СтрокаТб = тбНачисления.Добавить();
						СтрокаТб.ПорядокСчетУчета = ВыборкаСчетУчета.ПорядокСчетУчета;
						СтрокаТб.СчетУчета = ВыборкаСчетУчета.СчетУчета;
						СтрокаТб.ПриходСумма = Выборка.ПриходСумма;
					КонецЕсли;
					
				Иначе
					// Удержания может быть два варианта:
					Если Выборка.СчетУчета = NULL Тогда
						// 	- Счет учета не определен - 
						Если Выборка.РасходСуммаДокумента <> 0 Тогда
							// запомним его сразу в таблицу удержаний
							СтрокаТб = тбУдержания.Добавить();
							СтрокаТб.КодОперации = Выборка.КодОперации;
							СтрокаТб.РасходСумма = Выборка.РасходСуммаДокумента;
						КонецЕсли;
						
					Иначе
						//  - Счет учета определен
						Если Выборка.РасходСуммаДокумента < 0 Тогда
							// счет учета определен и это сторно - списываем все с указанного счета
							// в таблице начислений фиксируем, то что мы эту сумму списали списали
							ДобавитьСтрокуВзаиморасчеты(Расход, мСотрудник, Выборка.СчетУчета, Выборка.РасходСуммаДокумента, Выборка.КодОперации);
							
							СтрокаТб = тбНачисления.Добавить();
							СтрокаТб.ПорядокСчетУчета = ВыборкаСчетУчета.ПорядокСчетУчета;
							СтрокаТб.СчетУчета = ВыборкаСчетУчета.СчетУчета;
							СтрокаТб.ПриходСумма = - Выборка.РасходСуммаДокумента;
							
						ИначеЕсли ПриходСумма > 0 Тогда  //И Выборка.РасходСуммаДокумента > 0 
							// самый нормальный сценарий 
							РасходСумма = Мин(ПриходСумма, Выборка.РасходСуммаДокумента);
							ДобавитьСтрокуВзаиморасчеты(Расход, мСотрудник, Выборка.СчетУчета, РасходСумма, Выборка.КодОперации);
							
							// уменьшим начисления
							СтрокаТб = тбНачисления.Добавить();
							СтрокаТб.ПорядокСчетУчета = ВыборкаСчетУчета.ПорядокСчетУчета;
							СтрокаТб.СчетУчета = ВыборкаСчетУчета.СчетУчета;
							СтрокаТб.ПриходСумма = - РасходСумма;
							
							// если списали не весь расход, запомним его в таблицу удержаний
							Если Выборка.РасходСуммаДокумента - РасходСумма > 0 Тогда
								СтрокаТб = тбУдержания.Добавить();
								СтрокаТб.КодОперации = Выборка.КодОперации;
								СтрокаТб.РасходСумма = Выборка.РасходСуммаДокумента - РасходСумма;
							КонецЕсли;
							
							
						Иначе // Если ПриходСумма <= 0 И Выборка.РасходСуммаДокумента > 0 Тогда
							
							// запомним его сразу в таблицу удержаний
							СтрокаТб = тбУдержания.Добавить();
							СтрокаТб.КодОперации = Выборка.КодОперации;
							СтрокаТб.РасходСумма = Выборка.РасходСуммаДокумента;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		тбНачисления.Свернуть("ПорядокСчетУчета, СчетУчета","ПриходСумма");
		тбНачисления.Сортировать("ПорядокСчетУчета, СчетУчета");
		
		тбУдержания.Свернуть("КодОперации","РасходСумма");
		тбУдержания.Сортировать("РасходСумма"); // от - к +
		
		// Шаг 2. Сначала списываем в таблице те удержания, которые явно поместились в начисления + или -
		//  сами начисления уже проведены либо другими документами, либо текущим документом в обходе запроса выше
		Для каждого СтрокаТб Из тбУдержания Цикл
			Для каждого СтрокаТбНач Из тбНачисления Цикл
				// Н(+)У(+) - спишем сколько можно и нач. и уд.
				// Н(-)У(-) - спишем сколько можно и нач. и уд.
				// другие варианты
				Если СтрокаТбНач.ПриходСумма > 0 И СтрокаТб.РасходСумма > 0 Тогда
					РасходСумма = Мин(СтрокаТбНач.ПриходСумма,СтрокаТб.РасходСумма);
					СтрокаТбНач.ПриходСумма = СтрокаТбНач.ПриходСумма - РасходСумма;
					СтрокаТб.РасходСумма = СтрокаТб.РасходСумма - РасходСумма;
					ДобавитьСтрокуВзаиморасчеты(Расход, мСотрудник, СтрокаТбНач.СчетУчета, РасходСумма, СтрокаТб.КодОперации);
					
				ИначеЕсли СтрокаТбНач.ПриходСумма < 0 И СтрокаТб.РасходСумма < 0 Тогда
					РасходСумма = - Мин(-СтрокаТбНач.ПриходСумма,-СтрокаТб.РасходСумма);
					СтрокаТбНач.ПриходСумма = СтрокаТбНач.ПриходСумма - РасходСумма;
					СтрокаТб.РасходСумма = СтрокаТб.РасходСумма - РасходСумма;
					ДобавитьСтрокуВзаиморасчеты(Расход, мСотрудник, СтрокаТбНач.СчетУчета, РасходСумма, СтрокаТб.КодОперации);
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		// Шаг 3 "хвост" кидаем на счет по умолчанию (661)
		Для каждого СтрокаТб Из тбУдержания Цикл
			
			Если СтрокаТб.РасходСумма <> 0 Тогда
				ДобавитьСтрокуВзаиморасчеты(Расход, мСотрудник, СчетУчетаПоУмолчанию, СтрокаТб.РасходСумма, СтрокаТб.КодОперации);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры   // СформироватьВзаиморасчетыСРаботниками

Процедура ДобавитьСтрокуВзаиморасчеты(ВидДвижения, Сотрудник, СчетУчета, Сумма, КодОперации)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// свойства                              
	Движение.Период 				= ПериодРегистрации;
	Движение.ВидДвижения			= ВидДвижения;
	
	// измерения 
	Движение.Организация 			= Организация;          
	Движение.ПериодВзаиморасчетов 	= ПериодРегистрации;
	Движение.Сотрудник				= Сотрудник;
	Движение.СчетУчета  			= СчетУчета;
	
	// ресурсы
	Движение.СуммаВзаиморасчетов 	= Сумма;
	
	// реквизиты
	Движение.КодОперации = КодОперации;
	//ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	//
	//Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПЕРЕРАСЧЕТА

Функция ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	
	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		// получим список Сотрудников для перерасчета
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент
		|
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ВзносыВФонды.ПерерасчетВзносовВФонды КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент
		|	
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрСведений.ЗаполнениеПлановыхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектЗаполнения = &ПерерассчитываемыйДокумент		
		|";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	ИначеЕсли Сотрудники <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	Иначе
		// получим список Сотрудников для перерасчета
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ Документ."+ИсходныйДокумент.Метаданные().Имя+".РаботникиОрганизации КАК Перерасчет
		|ГДЕ Перерасчет.Ссылка = &ПерерассчитываемыйДокумент
		|";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	КонецЕсли;	
	
	Если СотрудникиПерерасчета.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////////
	// Выполним заполнение данных из перерасчитываемого документа
	// по всем табличным частям, кроме займов. Займы в перереасчетах не учтены
	
	// ТЧ РаботникиОрганизации
	РаботникиОрганизации.Загрузить(Результат);
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("СотрудникиПерерасчета", СотрудникиПерерасчета);
	// ТЧ Начисления
	Если Истина Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Назначение,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.ДокументОснование,
		|	Начисления.ВидУчетаВремениДляСредней,
		|	Начисления.НормаДнейЗаМесяц,
		|	Начисления.НормаЧасовЗаМесяц,
		|	-Начисления.Результат КАК Результат,
		|	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|	-Начисления.ОтработаноДней КАК ОтработаноДней,
		|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	-Начисления.КалендарныеДни КАК КалендарныеДни,
		|	-Начисления.НормаДней КАК НормаДней,
		|	-Начисления.НормаЧасов КАК НормаЧасов,
		|	ИСТИНА КАК Сторно,
		|	Начисления.Ссылка КАК СторнируемыйДокумент,
		|	ЛОЖЬ КАК Авторасчет
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И Начисления.Сотрудник В(&СотрудникиПерерасчета)
		|	И Начисления.Ссылка.Проведен";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	// ТЧ Взносы, ТЧ НДФЛ, ТЧ ВзносыФОТ - сторно записи создавать не будем, 
	// так как при расчете учтутся все ранее начисленные суммы и мы получим 
	// реальную картину
	
	// ТЧ Удержания
	Если Истина Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Основной.Сотрудник,
		|	Основной.ВидРасчета,
		|	Основной.Показатель1,
		|	Основной.Показатель2,
		|	Основной.Показатель3,
		|	Основной.Показатель4,
		|	Основной.Показатель5,
		|	Основной.Показатель6,
		|	Основной.ДатаНачала,
		|	Основной.ДатаОкончания,
		|	Основной.ДокументОснование,
		|	-Основной.Результат КАК Результат,
		|	ИСТИНА КАК Сторно,
		|	Основной.Ссылка КАК СторнируемыйДокумент,
		|	ЛОЖЬ КАК Авторасчет
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК Основной
		|ГДЕ
		|	Основной.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Основной.Сторно)
		|	И Основной.Сотрудник В(&СотрудникиПерерасчета)
		|	И Основной.Ссылка.Проведен";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(Удержания.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////////
	// Выполним заполнение новых данных, по ПериодуРегистрации указанному 
	// в перерасчитываемом документе, по всем табличным частям
	
	Записать();
	АвтозаполнениеНачисления( Ссылка, Начисления, СотрудникиПерерасчета );
	ЗаполнитьВзносы( СотрудникиПерерасчета, Взносы);
	ЗаполнитьНДФЛ( СотрудникиПерерасчета );
	ЗаполнитьВзносы( СотрудникиПерерасчета, ВзносыФОТ, Ложь);
	АвтозаполнениеУдержания( Ссылка, Удержания, СотрудникиПерерасчета );
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьПоПерерассчитываемомуДокументу()

Процедура Перерассчитать( Сотрудники = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых сорудников
	СотрудникиСписок = Новый СписокЗначений;
	СотрудникиСписокПерезаполнения = Новый СписокЗначений;
	Если Сотрудники = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|	
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ВзносыВФонды.ПерерасчетВзносовВФонды КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор		
		|	
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрСведений.ЗаполнениеПлановыхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектЗаполнения = &парамРегистратор		
		|	
		|";
		
		Запрос.Текст = ТекстЗапроса;
		СотрудникиСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
		//*Запрос = Новый Запрос;
		//Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		//
		//ТекстЗапроса = "
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	Перерасчет.Сотрудник
		//|ИЗ РегистрСведений.ЗаполнениеПлановыхНачислений КАК Перерасчет
		//|ГДЕ Перерасчет.ОбъектЗаполнения = &парамРегистратор		
		//|	
		//|";
		//
		//Запрос.Текст = ТекстЗапроса;
		//СотрудникиСписокПерезаполнения.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		//
	Иначе
		
		СотрудникиСписок = Сотрудники;
		
	КонецЕсли;
	
	// если не перерассчитываем никого - возврат
	Если СотрудникиСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// читаем все данные 
	НачатьТранзакцию();
	Прочитать();
	
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.ВзносыВФонды.Прочитать();
	Движения.УдержанияРаботниковОрганизаций.Прочитать();
	
	Движения.ВзаиморасчетыПоНДФЛ.Прочитать();
	Движения.ВзаиморасчетыПоВзносамВФонды.Прочитать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
	
	ЗафиксироватьТранзакцию();
	
	////////////////////////////////////////////////////////////////////////
	// Основные начисления
	Если Истина Тогда
		//*Если СотрудникиСписокПерезаполнения.Количество()<>0 Тогда
		//	//По этим сотрудникам требуется перезаполнение документа,
		//	//поскольку поменяться могли показатели для расчета
		//	ПроведениеРасчетов.УдалитьСтрокиПоУсловию( Начисления, СотрудникиСписокПерезаполнения );
		//	АвтозаполнениеНачисления( Ссылка, Начисления, СотрудникиСписокПерезаполнения );
		//КонецЕсли;	
		
		// перерассчитываем записи начислений
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
											Движения.ОсновныеНачисленияРаботниковОрганизаций, 
											Начисления, 
											, 
											СотрудникиСписок);
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// Взносы и Взносы ФОТ
	Если Истина Тогда
		
		// перезаполним данные по исчисленному Взносы 
		// сначала удалим сторно-записи Взносы по перерассчитываемым физлицам, потому, что при расчете
		ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( Движения.ВзносыВФонды, СотрудникиСписок );
		Движения.ВзносыВФонды.Записать();
		ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( Взносы, СотрудникиСписок );
		ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( ВзносыФОТ, СотрудникиСписок );
		
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета( "ВзносыВФонды", 
											Движения.ВзносыВФонды, 
											Взносы, 
											, 
											СотрудникиСписок);
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета( "ВзносыВФонды", 
											Движения.ВзносыВФонды, 
											ВзносыФОТ, 
											, 
											СотрудникиСписок);
											
		Движения.ВзносыВФонды.Записать();
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// НДФЛ Расчеты с бюджетом
	Если Истина Тогда
		
		// перезаполним данные по исчисленному НДФЛ 
		// сначала удалим сторно-записи НДФЛ по перерассчитываемым физлицам, потому, что при расчете
		ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( Движения.ВзаиморасчетыПоНДФЛ, СотрудникиСписок );
		Движения.ВзаиморасчетыПоНДФЛ.Записать();
		ПроведениеРасчетов.УдалитьСтрокиСторноПоУсловию( НДФЛ, СотрудникиСписок );
		
		МассивИндексыСтрокНДФЛ = Новый Массив();
		ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ( СотрудникиСписок).Выбрать();
		Пока ВыборкаПоНДФЛ.Следующий() Цикл
			МассивИндексыСтрокНДФЛ.Добавить(ВыборкаПоНДФЛ.НомерСтроки-1);
		КонецЦикла;
		
		ПроведениеРасчетов.РассчитатьЗаписиНДФЛ(Движения.ВзаиморасчетыПоНДФЛ, 
											НДФЛ, 
											,//*МассивИндексыСтрокНДФЛ,
											СотрудникиСписок);
											
		Движения.ВзаиморасчетыПоНДФЛ.Записать();
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// Удержания работников
	Если Истина Тогда
		
		// в конце - перерасчет удержаний, так как им могут понадобиться данные расчета НДФЛ
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", 
											Движения.УдержанияРаботниковОрганизаций,
											Удержания, 
											, 
											Сотрудники);
		// запишем
		Движения.УдержанияРаботниковОрганизаций.Записать(Истина, Истина);
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// Погашение займов
	Если Истина Тогда
		
		РассчитатьПогашениеЗаймов(Сотрудники);
		
	КонецЕсли;
	
	// записываем документ перед вызовом СформироватьВзаиморасчетыСРаботниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Взаиморасчеты с работниками
	Если Истина Тогда
		// сначала удалим сведения о взаиморасчетах с работниками
		ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
		ПоследнееДвижение = ВзаиморасчетыСРаботникамиОрганизаций.Количество()-1;
		// удалим записи по всем сотрудника полученного списка
		// обходим в обратном порядке
		Для Сч = 0 По ПоследнееДвижение Цикл
			Если СотрудникиСписок.НайтиПоЗначению(ВзаиморасчетыСРаботникамиОрганизаций[ПоследнееДвижение - Сч].Сотрудник) <> Неопределено Тогда
				ВзаиморасчетыСРаботникамиОрганизаций.Удалить(ПоследнееДвижение - Сч);
			КонецЕсли;
		КонецЦикла;
		
		// теперь сформируем начисления к выплате по начислениям документа для перерассчитываемых работников
		СформироватьВзаиморасчетыСРаботниками( СотрудникиСписок );
		
	КонецЕсли;
			
	////////////////////////////////////////////////////////////////////////
	// Взаиморасчеты по взносам в фонды
	Если Истина Тогда
		
		// сначала удалим сведения о взаиморасчетах с работниками
 		ВзаиморасчетыПоВзносамВФонды = Движения.ВзаиморасчетыПоВзносамВФонды;
		ПоследнееДвижение = ВзаиморасчетыПоВзносамВФонды.Количество()-1;
		Для Сч = 0 По ПоследнееДвижение Цикл
			// удалим записи по всем сотрудникаv полученного списка
			// обходим в обратном порядке
			Если СотрудникиСписок.НайтиПоЗначению(ВзаиморасчетыПоВзносамВФонды[ПоследнееДвижение - Сч].Сотрудник) <> Неопределено Тогда
				ВзаиморасчетыПоВзносамВФонды.Удалить(ПоследнееДвижение - Сч);
			КонецЕсли;
		КонецЦикла;
		
		// Взносы
		ВыборкаПоВзносы = СформироватьЗапросПоВзносы("Взносы", СотрудникиСписок).Выбрать();
		Пока ВыборкаПоВзносы.Следующий() Цикл 
			ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоВзносы, Движения.ВзаиморасчетыПоВзносамВФонды);
		КонецЦикла;
		
		// Взносы ФОТ
		ВыборкаПоВзносыФОТ = СформироватьЗапросПоВзносы("ВзносыФОТ", СотрудникиСписок).Выбрать();
		Пока ВыборкаПоВзносыФОТ.Следующий() Цикл 
			ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоВзносыФОТ, Движения.ВзаиморасчетыПоВзносамВФонды);
		КонецЦикла;
		//
		//Движения.ВзносыВФонды.Записать();
		
	КонецЕсли;
	
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоКоторымВыполненПерерасчет(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыРасчета.ВзносыВФонды.Перерасчеты.ПерерасчетВзносовВФонды.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоКоторымВыполненПерерасчет(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоЗаполнениеПлановыхНачислений(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
КонецПроцедуры // Перерассчитать()




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если ПредварительныйРасчет Тогда
		//Никаких движений не формируем
		Возврат;
	КонецЕсли;
	
	мРежимДоНачалаРаботы = Ложь;
	// Если режим ввода остатков, то взаиморасчеты не вносим
	ПараметрыРасчета = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура("Организация", Организация));
	Если ПараметрыРасчета <> Неопределено Тогда
		мДатаНачалаРаботы = ПараметрыРасчета.ДатаНачалаРаботы;
		Если мДатаНачалаРаботы > ПериодРегистрации Тогда
			мРежимДоНачалаРаботы = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
 		мСотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			////////////////////////////////////////////////////////////////////////
			// основные Начисления
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(мСотрудники).Выбрать();
			Пока ВыборкаПоНачислениям.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ, Заголовок);
				Если Отказ  Тогда
					Возврат;
				КонецЕсли;	
				
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
					////ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
				КонецЕсли;
			КонецЦикла;
			
			
			////////////////////////////////////////////////////////////////////////
			// Если режим ввода до начала работы, то прочие движения не вносим
   			Если НЕ мРежимДоНачалаРаботы Тогда
				
				////////////////////////////////////////////////////////////////////////
				// Взносы
				ВыборкаПоВзносы = СформироватьЗапросПоВзносы(,мСотрудники).Выбрать();
				Пока ВыборкаПоВзносы.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносы, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуВзносы(ВыборкаПоВзносы, Движения.ВзносыВФонды);
						ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоВзносы, Движения.ВзаиморасчетыПоВзносамВФонды);
						
					КонецЕсли;
				КонецЦикла;
				
				
				////////////////////////////////////////////////////////////////////////
				// Взносы ФОТ
				ВыборкаПоВзносыФОТ = СформироватьЗапросПоВзносы("ВзносыФОТ",мСотрудники).Выбрать();
				Пока ВыборкаПоВзносыФОТ.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносыФОТ, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуВзносы(ВыборкаПоВзносыФОТ, Движения.ВзносыВФонды);
						ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоВзносыФОТ, Движения.ВзаиморасчетыПоВзносамВФонды);
						
					КонецЕсли;
				КонецЦикла;
				
				
				////////////////////////////////////////////////////////////////////////
				// исчисленный НДФЛ
				ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ(мСотрудники ).Выбрать();
				Пока ВыборкаПоНДФЛ.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, Движения.ВзаиморасчетыПоНДФЛ);
					КонецЕсли;
				КонецЦикла;
				
				
				////////////////////////////////////////////////////////////////////////
				// удержания
				ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(мСотрудники).Выбрать();
				Пока ВыборкаПоУдержаниям.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, Движения.УдержанияРаботниковОрганизаций);
					КонецЕсли;
				КонецЦикла;
				
				
				////////////////////////////////////////////////////////////////////////
				// погашение займов
				ВыборкаПоПогашениеЗаймов = СформироватьЗапросПоПогашениеЗайма(мСотрудники).Выбрать();
				Пока ВыборкаПоПогашениеЗаймов.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоПогашениеЗаймов, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуПогашениеЗайма(ВыборкаПоПогашениеЗаймов, Движения.ПогашениеЗаймовРаботникамиОрганизаций);
					КонецЕсли;
				КонецЦикла;
				
				
				////////////////////////////////////////////////////////////////////////
				// взаиморасчеты с работниками
				СформироватьВзаиморасчетыСРаботниками();
				
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПревышениеПороговПоШтатномуРасписанию(Отказ)
	РазрешатьПроведение = РольДоступна("ПолныеПрава");
	
	ЗапросШР = Новый Запрос;
	ЗапросРО = Новый Запрос;
	ЗапросШР.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.МинимальнаяТарифнаяСтавка,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.МаксимальнаяТарифнаяСтавка
	|ИЗ
	|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(
	|			&НаДату,
	|			ПодразделениеОрганизации = &ПодразделениеОрганизации
	|				И Должность = &Должность) КАК ШтатноеРасписаниеОрганизацийСрезПоследних";
	
	ЗапросРО.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацийСрезПоследних.Должность
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НаДату,
	|			Сотрудник = &Сотрудник
	|				И Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних";
	
	ЗапросШР.УстановитьПараметр("НаДату", Дата);
	ЗапросРО.УстановитьПараметр("НаДату", Дата);
	ЗапросРО.УстановитьПараметр("Организация", Организация);
	
	ЕстьОшибки = Ложь;
	Для каждого Начисление Из Начисления Цикл                                                                  
		ЗапросРО.УстановитьПараметр("Сотрудник", Начисление.Сотрудник);
		тзРезультат = ЗапросРО.Выполнить().Выгрузить();
        Если тзРезультат.Количество() > 0 Тогда
            ТекДолжность = тзРезультат[0].Должность;	
        Иначе
            Сообщить("Очевидно работник "+ Начисление.Сотрудник +" на " + Дата + " еще не был принят");
            Возврат;
        КонецЕсли; 
		
		
		ТекПодразделение = Начисление.ПодразделениеОрганизации;
		Выполнять = Истина;
		Пока Выполнять Цикл
			ЗапросШР.УстановитьПараметр("ПодразделениеОрганизации", ТекПодразделение);
			ЗапросШР.УстановитьПараметр("Должность", ТекДолжность);
			тзРезультат = ЗапросШР.Выполнить().Выгрузить();
			
			Если тзРезультат.Количество() = 0 Тогда
				Если ЗначениеЗаполнено(ТекПодразделение.Родитель) Тогда
					ТекПодразделение = ТекПодразделение.Родитель;
				Иначе
					Выполнять = Ложь;
				КонецЕсли;
			Иначе
				Выполнять = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если тзРезультат.Количество() = 0 Тогда
			Сообщить("Не установлено штатное расписание для сотрудника " + Начисление.Сотрудник, СтатусСообщения.Важное);
			
			Если НЕ РазрешатьПроведение Тогда
				Отказ = Истина;
			КонецЕсли;
		Иначе
			МинимальныйПорог = тзРезультат[0].МинимальнаяТарифнаяСтавка;
			МаксимальныйПорог = тзРезультат[0].МаксимальнаяТарифнаяСтавка;
			
			Если Начисление.Результат > МаксимальныйПорог ИЛИ Начисление.Результат < МинимальныйПорог Тогда
				Если ОткрытаФормаДокумента ИЛИ НЕ РазрешатьПроведение Тогда
					Сообщить("По сотруднику " + Начисление.Сотрудник + " превышен максимальный/минимальный порог оклада по его должности согласно Штатному расписанию для сотрудника", СтатусСообщения.Важное);
				КонецЕсли;
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Если РазрешатьПроведение Тогда
			Если НЕ Проведен ИЛИ ОткрытаФормаДокумента Тогда
				Если Вопрос("Провести документ с несоответствиями?", РежимДиалогаВопрос.ОКОтмена) <> КодВозвратаДиалога.ОК Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ОткрытаФормаДокумента = Истина Тогда
		Иначе
			ОткрытаФормаДокумента = Ложь;
		КонецЕсли;
		//ПроверитьПревышениеПороговПоШтатномуРасписанию(Отказ);
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(РаботникиОрганизации);
	
	Если ПерерассчитываемыйДокумент = Ссылка И НЕ Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть исправлением самого себя!",Отказ);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Возврат;	
КонецПроцедуры
