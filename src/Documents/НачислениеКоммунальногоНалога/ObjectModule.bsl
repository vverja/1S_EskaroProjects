Перем мСведенияОСчетах;
Перем мСведенияОСтатьяхЗатрат;
Перем мПустойСчет;

Перем мУдалятьДвижения;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует запрос по шапке документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Дата                                               	КАК Дата, 
	|	ПериодРегистрации                                  	КАК ПериодРегистрации, 
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &парамПустаяОрганизация 
	|			ТОГДА Организация 
	|			ИНАЧЕ Организация.ГоловнаяОрганизация 
	|		  КОНЕЦ                                         КАК ГоловнаяОрганизация, 
	|	Организация											КАК Организация, 
	|	Организация											КАК ОбособленноеПодразделение, 
	| 	Ссылка                                              КАК Ссылка
	| 
	|	ИЗ	Документ.НачислениеКоммунальногоНалога
	| 
	|ГДЕ	Ссылка = &ДокументСсылка
	|";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// проверяет должен ли быть указан или нет счет учета по НУ
//
// Параметры
//  СчетДт,СчетКт - счета хозрасчетного плана счетов
//  СчетДтНУ	  - счет налогового плана счетов - будущий счет дебета
//
// Возвращаемое значение:
//   булево   – если сочетание корректно, то истина
//
Функция КорректноеСочетаниеСчетов(Выборка,Сообщение)
	
	Сообщение = "";
	
	СчетКт = Выборка.СчетКт;
	СчетДт = Выборка.СчетДт;
	
	Если (СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоОплатеТруда 
		или СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеФинансовыеДоходы) Тогда
		Сообщение = Локализация.СтрШаблон("Проводки в дебет ¤1¤ не должны отражаться в налоговом учете!", Выборка.НаименованиеСчетДт);
	КонецЕсли;
	
	Возврат НЕ ЗначениеЗаполнено(Сообщение)
	
КонецФункции // КорректноеСочетаниеСчетов()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура АвтозаполнениеПроводок() Экспорт
	
	
	ОтражениеВУчете.Очистить();
	Записать();  // запишем документ
	
	ВыборкаПоПроводкам = СформироватьЗапросПроводки().Выбрать();
	
	ПлохиеДанные = Ложь;
	
	Пока ВыборкаПоПроводкам.Следующий() Цикл
		ДобавитьСтрокуВПроводки(ВыборкаПоПроводкам, ОтражениеВУчете);
	КонецЦикла;
	
	Если ПлохиеДанные Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры  // АвтозаполнениеПроводок

///////////////////////////////////////////////////////////////////////////
// общие функции для всех Автозаполнений

Функция ДобавитьСтрокуВПроводки(ДанныеУчета, ТЧ)
	
	СтрокаДанных = ТЧ.Добавить();
	
	// ресурсы
	НеоблагаемыйМинимум = 0;
	СтавкаКоммунальногоНалога = 0;
	ПроведениеРасчетов.ОпределитьРегламентированныеПараметрыДляРасчетаКоммунальногоНалога(СтавкаКоммунальногоНалога, НеоблагаемыйМинимум, ПериодРегистрации, Организация );
	СуммаНалога = СреднесписочнаяЧисленность * СтавкаКоммунальногоНалога * НеоблагаемыйМинимум; 
	СтрокаДанных.Сумма			= СуммаНалога;
	
	// реквизиты
	СтрокаДанных.НалоговоеНазначение        = ДанныеУчета.НалоговоеНазначение;
	
	СтрокаДанных.СчетДт      = ДанныеУчета.СчетДт;
	СтрокаДанных.СубконтоДт1 = ДанныеУчета.СубконтоДт1;
	СтрокаДанных.СубконтоДт2 = ДанныеУчета.СубконтоДт2;
	СтрокаДанных.СубконтоДт3 = ДанныеУчета.СубконтоДт3;
	
	СтрокаДанных.СчетКт      = ДанныеУчета.СчетКт;
	СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1;
	СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2;
	СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3;
	
	
	СтрокаДанных.СтатьяВаловыхРасходов	= ДанныеУчета.СтатьяВаловыхРасходов;
	
	Возврат СтрокаДанных;
	
КонецФункции     // ДобавитьСтрокуВПроводки()

///////////////////////////////////////////////////////////////////////////
// Автозаполнения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПроводки()
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса  = "
	|ВЫБРАТЬ
	|	Основные.НалоговоеНазначение        КАК НалоговоеНазначение,
	|	Основные.СчетДт						КАК СчетДт,
	|	Основные.СубконтоДт1				КАК СубконтоДт1,
	|	Основные.СубконтоДт2				КАК СубконтоДт2,
	|	Основные.СубконтоДт3				КАК СубконтоДт3,
	|	Основные.СчетКт						КАК СчетКт,
	|	Основные.СубконтоКт1				КАК СубконтоКт1,
	|	Основные.СубконтоКт2				КАК СубконтоКт2,
	|	Основные.СубконтоКт3				КАК СубконтоКт3,    
	|	Основные.СтатьяВаловыхРасходов		КАК СтатьяВаловыхРасходов
	|	
	|ИЗ	Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК Основные
	|ГДЕ Основные.Ссылка = &парамКоммунальный
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамКоммунальный", СпособОтраженияВБухучете);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПроводки()

Функция СформироватьЗапросПоОтражениюВУчете()
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОтражениеЗарплаты.НомерСтроки				КАК НомерСтроки,
	|	ОтражениеЗарплаты.СтатьяВаловыхРасходов 	КАК СтатьяВаловыхРасходов,
	|	ОтражениеЗарплаты.НалоговоеНазначение  		КАК НалоговоеНазначение,
	|	ОтражениеЗарплаты.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности,
	|	ОтражениеЗарплаты.НалоговоеНазначение.ВидДеятельностиНДС  	   КАК ВидДеятельностиНДС,
	|	ОтражениеЗарплаты.НалоговоеНазначение.Амортизируется  		   КАК Амортизируется,
	|
	|	ОтражениеЗарплаты.Подразделение                     КАК Подразделение,
	|	ОтражениеЗарплаты.ПодразделениеОрганизации	        КАК ПодразделениеОрганизации,
	|	ОтражениеЗарплаты.СтатьяЗатрат	                    КАК СтатьяЗатрат,
	|	ОтражениеЗарплаты.СтатьяЗатрат.ХарактерЗатрат 		КАК ХарактерЗатрат,
	|	ОтражениеЗарплаты.НоменклатурнаяГруппа	            КАК НоменклатурнаяГруппа,
	|	ОтражениеЗарплаты.СпособРаспределенияЗатратНаВыпуск	КАК СпособРаспределенияЗатратНаВыпуск,
	|	ОтражениеЗарплаты.Проект	                        КАК Проект,
	|
	|	ОтражениеЗарплаты.СчетДт				КАК СчетДт,
	|	ОтражениеЗарплаты.СчетДт.Наименование	КАК НаименованиеСчетДт,
	|	ОтражениеЗарплаты.СубконтоДт1			КАК СубконтоДт1,
	|	ОтражениеЗарплаты.СубконтоДт2			КАК СубконтоДт2,
	|	ОтражениеЗарплаты.СубконтоДт3			КАК СубконтоДт3,
	|	ВидСубконтоДт1.ВидСубконто				КАК ВидСубконтоДт1,
	|	ВидСубконтоДт2.ВидСубконто 				КАК ВидСубконтоДт2,
	|	ВидСубконтоДт3.ВидСубконто 				КАК ВидСубконтоДт3,
	|
	|	ОтражениеЗарплаты.СчетКт				КАК СчетКт,
	|	ОтражениеЗарплаты.СубконтоКт1			КАК СубконтоКт1,
	|	ОтражениеЗарплаты.СубконтоКт2			КАК СубконтоКт2,
	|	ОтражениеЗарплаты.СубконтоКт3			КАК СубконтоКт3,
	|	ВидСубконтоКт1.ВидСубконто 				КАК ВидСубконтоКт1,
	|	ВидСубконтоКт2.ВидСубконто 				КАК ВидСубконтоКт2,
	|	ВидСубконтоКт3.ВидСубконто 				КАК ВидСубконтоКт3,
	|
	|	ОтражениеЗарплаты.Сумма					КАК Сумма
	|
	|ИЗ	Документ.НачислениеКоммунальногоНалога.ОтражениеВУчете КАК ОтражениеЗарплаты
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт1
	|ПО ВидСубконтоДт1.Ссылка = ОтражениеЗарплаты.СчетДт И (ВидСубконтоДт1.НомерСтроки = 1)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт2
	|ПО ВидСубконтоДт2.Ссылка = ОтражениеЗарплаты.СчетДт И (ВидСубконтоДт2.НомерСтроки = 2)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт3
	|ПО ВидСубконтоДт3.Ссылка = ОтражениеЗарплаты.СчетДт И (ВидСубконтоДт3.НомерСтроки = 3)
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоКт1
	|ПО ВидСубконтоКт1.Ссылка = ОтражениеЗарплаты.СчетКт И (ВидСубконтоКт1.НомерСтроки = 1)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоКт2
	|ПО ВидСубконтоКт2.Ссылка = ОтражениеЗарплаты.СчетКт И (ВидСубконтоКт2.НомерСтроки = 2)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоКт3
	|ПО ВидСубконтоКт3.Ссылка = ОтражениеЗарплаты.СчетКт И (ВидСубконтоКт3.НомерСтроки = 3)
	|
	|
	|ГДЕ	ОтражениеЗарплаты.Ссылка = &парамРегистратор
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	Запрос.УстановитьПараметр("РасходыБудущихПериодов", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
	
	Возврат Запрос.Выполнить();
	
КонецФункции  // СформироватьЗапросПоОтражениюВУчете()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задана организация!", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан период за который выполняется отражение начислений в бухгалтерском учете!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиОтраженияВУчете(СтруктураШапкиДокумента, ВыборкаПоДоходам, Отказ, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = Локализация.СтрШаблон("В строке номер ""¤1¤"" табл. части ""Отражение в учете"": ", СокрЛП(ВыборкаПоДоходам.НомерСтроки));
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.СтатьяЗатрат) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указана статья затрат!", Отказ);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ХарактерЗатрат = ВыборкаПоДоходам.ХарактерЗатрат;
		
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
		 ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы
		 ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		 	Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.Подразделение) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указано подразделение!", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.СчетДт) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан счет дебета!", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.СчетКт) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указан счет кредита!", Отказ);
		КонецЕсли;
		
		Сообщение = "";
		Если Не КорректноеСочетаниеСчетов(ВыборкаПоДоходам, Сообщение) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Сообщение, Отказ, Заголовок);
		КонецЕсли;
		
		
		ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоДоходам.СчетДт, ВыборкаПоДоходам.СтатьяЗатрат);
		
		Если ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
		 ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.АдминистративныеРасходы
		 ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		 	Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.ПодразделениеОрганизации) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указано подразделение организации!", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ОтражатьПоЗатратамБУ = (ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
								ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.АдминистративныеРасходы
								ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
								ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы
								ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.РасходыНаСбыт
								ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы
								);
							
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если ОтражатьПоЗатратамБУ Тогда
			 	Если НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.НалоговоеНазначение) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не указано налоговое назначение!", Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиОтраженияВУчете()

Процедура ДобавитьСтрокуВДвиженияПоОтражениюВУчете(СтруктураШапкиДокумента, ВыборкаПоДоходам)
	
	Если ВыборкаПоДоходам.Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// проводка по бухгалтерскому регистру
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Активность = Истина;
	Проводка.Период     = СтруктураШапкиДокумента.Дата;
	
	Проводка.Организация	= Организация;
	Проводка.Сумма			= ВыборкаПоДоходам.Сумма;
	Проводка.НомерЖурнала	= "ЗП";
	
	// бухучет
	Проводка.СчетДт       = ВыборкаПоДоходам.СчетДт;
	
	ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(Проводка.СчетДт);
	
	Если ПроизводственныеРасходы Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения"       , ВыборкаПоДоходам.ПодразделениеОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", ВыборкаПоДоходам.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат"        , ВыборкаПоДоходам.СтатьяЗатрат);
	Иначе
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ВыборкаПоДоходам.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ВыборкаПоДоходам.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ВыборкаПоДоходам.СубконтоДт3);
	КонецЕсли;
	
	Проводка.СчетКт       = ВыборкаПоДоходам.СчетКт;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоДоходам.СубконтоКт1);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоДоходам.СубконтоКт2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ВыборкаПоДоходам.СубконтоКт3);
	
	// Проверим, отражать ли в налоговом учете
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльНал Тогда
		
		Если  ВыборкаПоДоходам.ВидНалоговойДеятельности <> Справочники.ВидыНалоговойДеятельности.НеОблагаемая
			И НЕ ВыборкаПоДоходам.Амортизируется 
			И ЗначениеЗаполнено(ВыборкаПоДоходам.СтатьяВаловыхРасходов) Тогда
			     
			// проводка по ВР
			Проводка = Движения.Налоговый.Добавить();

			Проводка.Период                                 = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                             = Истина;
			Проводка.Организация                            = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                                  = ВыборкаПоДоходам.Сумма;
			Проводка.Содержание                             = "ВР: коммунальный налог";
			Проводка.НомерЖурнала                           = "";
				
			Проводка.СчетДт                           		= ПланыСчетов.Налоговый.ВаловыеРасходы;
			Проводка.СубконтоДт.ВидыНалоговойДеятельности  	= ВыборкаПоДоходам.ВидНалоговойДеятельности;
			Проводка.СубконтоДт.СтатьиНалоговогоУчета 		= ВыборкаПоДоходам.СтатьяВаловыхРасходов;
			
			Проводка.СчетКт                           		= ПланыСчетов.Налоговый.ВаловыеРасходы;
			Проводка.СубконтоКт.ВидыНалоговойДеятельности  	= ВыборкаПоДоходам.ВидНалоговойДеятельности;
			Проводка.СубконтоКт.СтатьиНалоговогоУчета 		= ВыборкаПоДоходам.СтатьяВаловыхРасходов;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  // ДобавитьСтрокуВДвиженияПоОтражениюВУчете()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если ПроведениеРасчетов.ИспользуетсяНК(ПериодРегистрации) Тогда
		Сообщить("С 01.01.2011 г. коммунальный налог отменен и документ больше не используется",СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("ЕстьНалогНаПрибыльНал");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал",СтруктураПолейУчетнойПолитикиНУ);
		
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапросПоОтражениюВУчете = СформироватьЗапросПоОтражениюВУчете();
	ВыборкаПоОтражениюВУчете = СформироватьЗапросПоОтражениюВУчете().Выбрать();
	
	Пока ВыборкаПоОтражениюВУчете.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиОтраженияВУчете(СтруктураШапкиДокумента, ВыборкаПоОтражениюВУчете, Отказ, Заголовок);
		
		Если Не Отказ Тогда
			ДобавитьСтрокуВДвиженияПоОтражениюВУчете(СтруктураШапкиДокумента, ВыборкаПоОтражениюВУчете);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим структуру таблицы для отражения затрат.
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	
	ТаблицаОтражение = РезультатЗапросПоОтражениюВУчете.Выгрузить();
	
	// подготовим таблицу затрат
	ВалютаРеглУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	КурсВалютыРеглУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРеглУчета, КонецМесяца(ПериодРегистрации));
	КурсВалютыУпрУчета  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета,  КонецМесяца(ПериодРегистрации));
	
	Для Каждого СтрокаОтражение Из ТаблицаОтражение Цикл
		СтрокаЗатрат = ТаблицаЗатрат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗатрат, СтрокаОтражение);
		
		СтрокаЗатрат.СуммаРегл = СтрокаЗатрат.Сумма;
		СтрокаЗатрат.СчетЗатрат = СтрокаОтражение.СчетДт;
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			// пересчитаем сумму в валюту упр. учета
			СтрокаЗатрат.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗатрат.СуммаРегл, 
									ВалютаРеглУчета, 
			                     	ВалютаУпрУчета,
			                        КурсВалютыРеглУчета.Курс, 
			                        КурсВалютыУпрУчета.Курс,
			                        КурсВалютыРеглУчета.Кратность, 
			                        КурсВалютыУпрУчета.Кратность);
		Иначе
			СтрокаЗатрат.Сумма = 0;
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И (НЕ СтрокаОтражение.Амортизируется) Тогда
			СтрокаЗатрат.СуммаВР = СтрокаЗатрат.СуммаРегл;
		Иначе
			СтрокаЗатрат.СуммаВР = 0;
		КонецЕсли;
		
	КонецЦикла;	
	
	// отразим затраты
	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента,
		ТаблицаЗатрат,
		Неопределено 
	);

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

мПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
мСведенияОСчетах = Новый Соответствие;
мСведенияОСтатьяхЗатрат = Новый Соответствие;
