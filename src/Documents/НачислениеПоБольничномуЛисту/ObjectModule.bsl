////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ
//

#Если Клиент Тогда
	
Функция ПечатьБЛ() Экспорт
	
	ТабельныйНомер = Сотрудник.Код;
	тПодразделение = РегистрыСведений.РаботникиОрганизаций.ПолучитьПоследнее(ДатаНачала,Новый Структура("Организация,Сотрудник,",Организация,Сотрудник)).ПодразделениеОрганизации;
	
	Подразделение = тПодразделение;
	Пока ЗначениеЗаполнено(тПодразделение.Родитель) Цикл
		тПодразделение = тПодразделение.Родитель;
		Подразделение = "" + тПодразделение + "/ " + Подразделение;
	КонецЦикла;
	//
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("БольничныйЛист");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ЭтотОбъект);
	ОбластьШапка.Параметры.ТабельныйНомер = ТабельныйНомер;
	ОбластьШапка.Параметры.Подразделение = Подразделение;
	ОбластьШапка.Параметры.ДатаНачала = Формат(ДатаНачала,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ДатаОкончания = Формат(ДатаОкончания,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПериодРасчетаСреднегоНачало = Формат(ПериодРасчетаСреднегоНачало,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПериодРасчетаСреднегоКонец = Формат(ПериодРасчетаСреднегоКонец,"ДФ=dd.MM.yyyy");	
	ОбластьШапка.Параметры.НомерБольничногоЛиста = НомерБольничногоЛиста;
	ОбластьШапка.Параметры.СерияБольничногоЛиста = СерияБольничногоЛиста;

	ТабДокумент.Вывести(ОбластьШапка);
	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСреднего");
	
	табСредняя = РасчетСреднего.Выгрузить();
	табСредняя.Колонки.Добавить("РезультатПропорционально");
	Для каждого стрСредняя ИЗ табСредняя Цикл
		Если стрСредняя.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛПропорционально Тогда
			стрСредняя.РезультатПропорционально = стрСредняя.Результат;
			стрСредняя.Результат = 0;
			стрСредняя.ОтработаноДней = 0;
			стрСредняя.ОтработаноЧасов = 0;
		КонецЕсли;
	КонецЦикла;

	табСредняя.Свернуть("БазовыйПериодНачало","Результат,РезультатПропорционально,СуммаПредела,ОтработаноДней,ОтработаноЧасов");
	
	СуммаДляРасчета=0;
	Для Каждого СтрокаТЧ Из табСредняя Цикл
		//ОбластьСтроки.Параметры.Заполнить(СтрокаТЧ);
		ОбластьСтроки.Параметры.Результат = СтрокаТЧ.Результат;
		ОбластьСтроки.Параметры.РезультатПропорционально = СтрокаТЧ.РезультатПропорционально;
		ОбластьСтроки.Параметры.СуммаПредела = СтрокаТЧ.СуммаПредела;
		ОбластьСтроки.Параметры.ОтработаноДней = СтрокаТЧ.ОтработаноДней;
		ОбластьСтроки.Параметры.ОтработаноЧасов = СтрокаТЧ.ОтработаноЧасов;
		ОбластьСтроки.Параметры.Месяц = СтрокаТЧ.БазовыйПериодНачало;
		ОбластьСтроки.Параметры.Год = Формат(Год(СтрокаТЧ.БазовыйПериодНачало),"ЧГ=0");
		ТабДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	ОбластьИтогиСреднего 									= Макет.ПолучитьОбласть("ИтогиСреднего");
	ОбластьИтогиСреднего.Параметры.Результат				= табСредняя.Итог("Результат");
	ОбластьИтогиСреднего.Параметры.РезультатПропорционально	= табСредняя.Итог("РезультатПропорционально");
	ОбластьИтогиСреднего.Параметры.ОтработаноДней			= табСредняя.Итог("ОтработаноДней");
	ОбластьИтогиСреднего.Параметры.ОтработаноЧасов			= табСредняя.Итог("ОтработаноЧасов");
    ТабДокумент.Вывести(ОбластьИтогиСреднего);
	
	ОбластьШапка2 = Макет.ПолучитьОбласть("Шапка2");
	Если Начисления.Количество() > 0
		И (Начисления[0].ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ
		Или Начисления[0].ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации
		ИЛИ Начисления[0].ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеВБыту
		ИЛИ Начисления[0].ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве
		ИЛИ Начисления[0].ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам)
		Тогда
		ОбластьШапка2.Параметры.СреднедневнаяОграниченнаяПределомТекст = ?(ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам,"Среднечасовая ограниченная пределом:","Среднедневная ограниченная пределом:");
		ОбластьШапка2.Параметры.ПределСреднее = СуммаПределаСредней;
	КонецЕсли;
	ОбластьШапка2.Параметры.Процент = ПроцентОплаты;
	Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ОбластьШапка2.Параметры.ДнейЧасов = "Раб.дней";
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ОбластьШапка2.Параметры.ДнейЧасов = "Часов";
	Иначе 
		ОбластьШапка2.Параметры.ДнейЧасов = "Кал.дней";
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьШапка2);
	
	ОбластьСтроки2 = Макет.ПолучитьОбласть("СтрокаНачисления");
	
	Для Каждого СтрокаТЧ Из Начисления Цикл
		ОбластьСтроки2.Параметры.Заполнить(СтрокаТЧ);
		ОбластьСтроки2.Параметры.НормаДнейЧасов = СтрокаТЧ.ОплаченоДнейЧасов;
		ТабДокумент.Вывести(ОбластьСтроки2);
	КонецЦикла;
	
	ОбластьИтогиНачислений = Макет.ПолучитьОбласть("ИтогиНачислений");
	ОбластьИтогиНачислений.Параметры.НормаДнейЧасов = Начисления.Итог("ОплаченоДнейЧасов");
	ОбластьИтогиНачислений.Параметры.Результат = Начисления.Итог("Результат");
    ТабДокумент.Вывести(ОбластьИтогиНачислений);

	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Ответственный = Ответственный.ФизЛицо.Наименование;
	ТабДокумент.Вывести(ОбластьПодвал);	
	
	Возврат ТабДокумент;
	
КонецФункции	 
	
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если  ИмяМакета = "БольничныйЛист" Тогда
		ТабДокумент = ПечатьБЛ()
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Начисление по больничному листу "));
	
КонецФункции	 

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	Возврат Новый Структура("БольничныйЛист","Расчет средней");
КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ТБЛИЧНОЙ ЧАСТИ РасчетСреднего

Процедура РасчитатьПараметрыСредней() Экспорт
	Перем тДень, тМесяц, тГод;
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоМесяцев = ПричинаНетрудоспособности.ЧислоМесяцев;
	
	Если ПервичныйБольничныйЛист <> Документы.НачислениеПоБольничномуЛисту.ПустаяСсылка() Тогда
		ПериодРасчетаСреднегоНачало		= ПервичныйБольничныйЛист.ПериодРасчетаСреднегоНачало;
		ПериодРасчетаСреднегоКонец		= ПервичныйБольничныйЛист.ПериодРасчетаСреднегоКонец;
		ПроцентОплаты					= ПервичныйБольничныйЛист.ПроцентОплаты;
		СуммаНижнейГраницыСредней		= ПервичныйБольничныйЛист.СуммаНижнейГраницыСредней;
		ТекстСредняяЗПпоВсемВидамЭД		= ПервичныйБольничныйЛист.ТекстСредняяЗПпоВсемВидамЭД;
		СуммаПределаСредней				= ПервичныйБольничныйЛист.СуммаПределаСредней;
		ОплачивалВзносыМеньше6Месяцев	= ПервичныйБольничныйЛист.ОплачивалВзносыМеньше6Месяцев;
		Стаж 							= ПервичныйБольничныйЛист.Стаж;
			
	Иначе
		ПолучитьПериодИПрочиеПараметрыСреднейПоРаботнику();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПериодИПрочиеПараметрыСреднейПоРаботнику() 
	Перем ДатаОкончанияСобытия, ДатаПриемаПервыйРабочийДень;
	Перем тДень, тМесяц, тГод;
	
	// -1- работает дольше 6-и месяцев
	// -2- работает меньше 6 месяцев, но дольше 1-го месяца
	// -3- работает меньше целого месяца, но на больничный не в первый рабочий день - заполняеи реальный период с даты приема
	// -4- на больничный в первый рабочий день, нет начисленной зарплаты
	ДатаНачалаСобытия = ДатаНачала;
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	НеПроработалЦелогоМесяца = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДатаПриема) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев)>= ДатаПриема Тогда
		// -1- работает дольше 6-и месяцев
		ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев);
		ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		
	ИначеЕсли КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1)) >= ДатаПриема Тогда
		// -2-3-
		Если ДатаПриемаПервыйРабочийДень Тогда
			// -2- работает меньше 6-и месяцев, но дольше 1-го месяца
			// если дата приема первый рабочий день месяца, то месяц считаем целым
			ПериодРасчетаСреднегоНачало	= ДатаПриема;	
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		ИначеЕсли ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -1) > ДатаПриема Тогда
			// -2- работает меньше 6 месяцев, но дольше 1-го месяца
			// если дата приема не первый рабочий день месяца, но есть целые отработанные месяцы
			ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаПриема),1);
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		Иначе
			// -3- работает меньше целого месяца, но в отпуск не в первый рабочий день 
			//    - заполняеи реальный период с даты приема
			ПериодРасчетаСреднегоНачало	= ДатаПриема;	
			ПериодРасчетаСреднегоКонец	= НачалоДня(ДатаНачалаСобытия-1);
			НеПроработалЦелогоМесяца = Истина;
		КонецЕсли;
		
	ИначеЕсли ДатаНачалаСобытия = ДатаПриема Тогда
		// -4- в отпуск в первый рабочий день, нет начисленной зарплаты
		ПериодРасчетаСреднегоНачало	= ДатаПриема;
		ПериодРасчетаСреднегоКонец	= ДатаПриема;
		НеПроработалЦелогоМесяца = Истина;
		
	Иначе
		// -3- работает меньше целого месяца, но в отпуск не в первый рабочий день 
		//    - заполняеи реальный период с даты приема
		// прием в месяце начала события
		ПериодРасчетаСреднегоНачало	= ДатаПриема;	
		ПериодРасчетаСреднегоКонец	= НачалоДня(ДатаНачалаСобытия-1);
		НеПроработалЦелогоМесяца = Истина;
		
	КонецЕсли;
	
	// Прочие дополнительные параметры средней: ВидУчетаВремениДляСредней, Стаж, ПроцентОплаты
	// Пределы средней (ограничения снизу, сверху)
	ВыборкаПараметры = ПолучитьГрафикВыслугуПредел();
	Если ВыборкаПараметры.Следующий() Тогда
		
		// - Процент оплаты
		ПроцентОплаты	= ?(ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам ИЛИ ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ТравмаНаПроизводстве, 100, ВыборкаПараметры.ПроцентОплаты);
		
		// - Стаж
		ПроведениеРасчетов.ПересчитатьСтажИзДаты(ДатаНачала, ВыборкаПараметры.ДатаСтажа, тДень, тМесяц, тГод);
		Стаж = "Стаж для больничного: "+тГод+"г."+тМесяц+"мес. "+тДень+"д.";
		
		// - Вид учета времени для средней
		ГрафикРаботы = ВыборкаПараметры.ГрафикРаботы;
		ОсновнойВидРасчета = ВыборкаПараметры.ОсновнойВидРасчета;
		Если Дата >= '20091215000000' И ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками; 
			
		ИначеЕсли	ГрафикРаботы = NULL Тогда
			ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням;
			
		ИначеЕсли	ГрафикРаботы.НеполныйРабочийДень
				И	Дата >= '20091215000000' Тогда
			ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам; 
			
		ИначеЕсли	ГрафикРаботы.СуммированныйУчетРабочегоВремени
				ИЛИ	ОсновнойВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
				ИЛИ	ОсновнойВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке
			Тогда
			ВидУчетаВремениДляСредней	= Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам;
			
		Иначе
			ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням;
			
		КонецЕсли;
		
		// - Пределы средней
		ВыборкаОграниченя	= ПолучитьОграниченияНаСреднюю();
		Если ВыборкаОграниченя.Следующий() Тогда
			
				ТекстСредняяЗПпоВсемВидамЭД = "";
				
				Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками Тогда
					СуммаПределаСредней = ВыборкаОграниченя.СуммаПределаСреднейПоКалендарным;
				ИначеЕсли ВидУчетаВремениДляСредней	= Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
					СуммаПределаСредней = ВыборкаОграниченя.СуммаПределаСреднейПоЧасам;
				Иначе
					СуммаПределаСредней = ВыборкаОграниченя.СуммаПределаСредней;
				КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПолучитьПериодПоРаботнику()

Функция		ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень)
	
	ЭтоПервыйРабочийДень = Ложь;
	ДатаПриема = Дата('00010101');
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|       ПриемРаботников.ДатаПриема КАК ДатаПриема,
	|		СУММА(ЕСТЬNULL(Графики.ОсновноеЗначение,0)) КАК ОтработаноДнейСНачалаМесяца
	|   ИЗ (
	|		ВЫБРАТЬ 
	|          	МИНИМУМ(Работники.Период) КАК ДатаПриема
	|		ИЗ РегистрСведений.РаботникиОрганизаций КАК Работники
	|   	ГДЕ Работники.Сотрудник = &парамСотрудник
	|       ) КАК ПриемРаботников
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники 
	|   	ПО		Работники.Сотрудник = &парамСотрудник
	|			И	Работники.Период = ПриемРаботников.ДатаПриема
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК Графики
	|   	ПО  	Графики.Дата >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	|			И	Графики.Дата < Работники.Период
	|			И	Графики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|			// индивидуальные графики и табели не анализируем, так как нас интерисует только норма времени
	|			И	ВЫБОР КОГДА Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА  Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|                     ИНАЧЕ Работники.ГрафикРаботы
	|				КОНЕЦ = Графики.ГрафикРаботы
	|    СГРУППИРОВАТЬ ПО
	|       ПриемРаботников.ДатаПриема
	|";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПриема = Выборка.ДатаПриема;
		ДатаПриемаПервыйРабочийДень = Выборка.ОтработаноДнейСНачалаМесяца = 0;
	КонецЕсли;

	Возврат ДатаПриема;
	
КонецФункции  // ПолучитьДанныеОПриеме()

Функция		ПолучитьГрафикВыслугуПредел()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ДатаНачала );
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	Запрос.УстановитьПараметр("парамФизЛицо",		Сотрудник.Физлицо );
	Запрос.УстановитьПараметр("парамОрганизация",	Организация );
	Если НЕ ПроведениеРасчетов.ИспользуетсяЕСВ(ДатаНачала) Тогда
		Запрос.УстановитьПараметр("парамНалог",	Справочники.Налоги.Соцстрах);
	Иначе	
	    Запрос.УстановитьПараметр("парамНалог",	Справочники.Налоги.ЕСВРаботники);
	КонецЕсли;
	
		
	//	ВТСведенияОСтаже
	Если Истина Тогда
		//	Описание:
		// 		В этой таблице только сотрудники по которым есть Вид расчета Индексация и периоды по которым надо расчиать тндексацию
		//		Для п.1.
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ
		|  ПриказОПриеме.ДатаПриема		КАК ДатаПриема,
		|  СУММА( ЕСТЬNULL(ОбщийСтаж.ДнейСтажа, 0))  КАК ДнейСтажа
		|ПОМЕСТИТЬ ВТСведенияОСтаже	
		|	ИЗ (	ВЫБРАТЬ 
		|           	МИНИМУМ(Работники.Период) КАК ДатаПриема
		|			ИЗ РегистрСведений.РаботникиОрганизаций КАК Работники
		|   		ГДЕ Работники.Сотрудник = &парамСотрудник
		|	) КАК ПриказОприеме
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ( 
		|	ВЫБРАТЬ
		|		Стаж.ФизЛицо,
		|		Стаж.ДнейСтажа
		|	ИЗ РегистрСВедений.НачальныеСведенияОСтажеРаботниковОрганизации КАК Стаж
		|	ГДЕ	Стаж.Организация	= &парамОрганизация
		|	И	Стаж.ВидСтажа		= ЗНАЧЕНИЕ(Справочник.ВидыСтажа.СтраховойСтажДляБольничного)
		|
		|) КАК ОбщийСтаж		
		|ПО ОбщийСтаж.ФизЛицо = &парамФизЛицо
		|   
		|СГРУППИРОВАТЬ ПО  
		|  ПриказОПриеме.ДатаПриема
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСведенияОСтаже";
	
	//	ВТПараметрыВыслуги
	Если Истина Тогда
		//	Описание:
		// 		
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ 
		|		ПараметрыВыслуги.Ставка  			КАК Ставка,
		|		ПараметрыВыслуги.Порог   		 	КАК Порог,
		|		МАКСИМУМ(ЕСТЬNULL(Выслуга.Порог,0))	КАК НижнийПорог
		|
		|ПОМЕСТИТЬ ВТПараметрыВыслуги	
		|	ИЗ РегистрСведений.ШкалаВыслугиЛет.СрезПоследних(&ДатаНачалаСобытия, ВидСтажа = ЗНАЧЕНИЕ(Справочник.ВидыСтажа.СтраховойСтажДляБольничного) 
		|      ) КАК ПараметрыВыслуги
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаВыслугиЛет.СрезПоследних(&ДатаНачалаСобытия, 
		|		ВидСтажа	= ЗНАЧЕНИЕ(Справочник.ВидыСтажа.СтраховойСтажДляБольничного)
		|       ) КАК Выслуга
		|	ПО		Выслуга.Порог < ПараметрыВыслуги.Порог
		|   
		|   ГДЕ  ПараметрыВыслуги.ВидСтажа = ЗНАЧЕНИЕ(Справочник.ВидыСтажа.СтраховойСтажДляБольничного)
		|
		|	СГРУППИРОВАТЬ ПО 
		|		ПараметрыВыслуги.Ставка,
		|		ПараметрыВыслуги.Порог
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли;
	
	МинусДней = "
	|   ВЫБОР	КОГДА ЕСТЬNULL(Дней,0)=0 ТОГДА 0 ИНАЧЕ -Дней КОНЕЦ
	|   "; 
			
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Работники.ГрафикРаботы					КАК ГрафикРаботы,
	|	ОсновноеНачисление.ВидРасчета			КАК ОсновнойВидРасчета,
	|	СтавкиВыслуги.Ставка*100				КАК ПроцентОплаты,   
	|	ДОБАВИТЬКДАТЕ( Стаж.ДатаПриема, ДЕНЬ, "+СтрЗаменить(МинусДней,"Дней","Стаж.ДнейСтажа")+")	КАК ДатаСтажа,   
	|   ДанныеОПределе.Предел					КАК СуммаПредела
	|ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник) КАК Работники
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник И ВидРасчетаИзмерение <> ВидРасчета) КАК ОсновноеНачисление 
	|ПО   ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОСтаже КАК Стаж
	|ПО   ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыВыслуги КАК СтавкиВыслуги
	|ПО ДОБАВИТЬКДАТЕ( Стаж.ДатаПриема, ДЕНЬ, "+СтрЗаменить(МинусДней,"Дней","Стаж.ДнейСтажа")+")
	|		<= ДОБАВИТЬКДАТЕ( &ДатаНачалаСобытия, ГОД,"+СтрЗаменить(МинусДней,"Дней","СтавкиВыслуги.НижнийПорог")+") 
	|   И ДОБАВИТЬКДАТЕ( Стаж.ДатаПриема, ДЕНЬ,"+СтрЗаменить(МинусДней,"Дней","Стаж.ДнейСтажа")+") 
	|		> ДОБАВИТЬКДАТЕ( &ДатаНачалаСобытия, ГОД,"+СтрЗаменить(МинусДней,"Дней","СтавкиВыслуги.Порог")+")  
	|
	|// данные для расчета предела
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВзносахВФонды.СрезПоследних( &ДатаНачалаСобытия, Налог = &парамНалог ) КАК ДанныеОПределе
	|ПО	ИСТИНА
	|";
	
	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции  // ПолучитьГрафикВыслугуПредел()

Функция	ПолучитьОграниченияНаСреднюю() Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ПериодРасчетаСреднегоКонец ); // 27573
	
	Запрос.УстановитьПараметр("СреднемесячныеКалендарныеДни", 30.44);
	Запрос.УстановитьПараметр("КалендарныхДнейСПраздниками", День(КонецМесяца(ПериодРасчетаСреднегоКонец)) ); // 27573
	Запрос.УстановитьПараметр("ДатаСобытияДляСрелЗППоЭепоказателям", ДобавитьМесяц(НачалоМесяца(ДатаНачала),-1) ); // 27573
	
	Если НЕ ПроведениеРасчетов.ИспользуетсяЕСВ(НачалоМесяца(ПериодРасчетаСреднегоКонец)) Тогда
		Запрос.УстановитьПараметр("парамНалог",	Справочники.Налоги.Соцстрах);
	Иначе	
	    Запрос.УстановитьПараметр("парамНалог",	Справочники.Налоги.ЕСВРаботники);
	КонецЕсли;

	
	//	ВТДанныеГрафика
	Если Истина Тогда
		//	Описание:
		// 		График и норма за месяц дней, часов и календарных дней
		//		
		ТекстЗапросаВТ = "
	  	|	ВЫБРАТЬ 
	  	|		Работники.ГрафикРаботы    	КАК ГрафикРаботы,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение)			КАК НормаДнейЗаМесяц,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)	КАК НормаЧасовЗаМесяц,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьКалендарныеДни)	КАК КалендарныеДни
		|ПОМЕСТИТЬ ВТДанныеГрафика	
	  	|	ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник) КАК Работники 
	  	|		   
	  	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	  	|	ПО		ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
	  	|		И	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = Работники.ГрафикРаботы
	  	|		И	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	  	|	СГРУППИРОВАТЬ ПО 
	  	|		Работники.ГрафикРаботы
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанныеГрафика = "ВТДанныеГрафика";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДанныеГрафика";
	
	МинусДней = "
	|   ВЫБОР	КОГДА ЕСТЬNULL(Дней,0)=0 ТОГДА 0 ИНАЧЕ -Дней КОНЕЦ
	|   "; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеКалендаряБЛ.ГрафикРаботы			КАК ГрафикРаботы,   
	|	ДанныеОМинимальнойЗарплате.Размер/&КалендарныхДнейСПраздниками		КАК МинимальнаяЗПЗаМесяц,   
	|	ЕСТЬNULL(СредняяЗППоВсемВидамЭкономическойДеятельности.Размер,0)	КАК СредняяЗППоВсемВидамЭкономическойДеятельности,   
	|	ЕСТЬNULL(СредняяЗППоВсемВидамЭкономическойДеятельности.Размер/&КалендарныхДнейСПраздниками,0)	КАК СредняяЗППоВсемВидамЭДЗаКлендДень,   
	|	ВЫБОР	КОГДА ДанныеОПределе.Предел ЕСТЬ NULL 
	|			ТОГДА 0
	|			ИНАЧЕ ДанныеОПределе.Предел / &СреднемесячныеКалендарныеДни
	|   КОНЕЦ   КАК  СуммаПределаСреднейПоКалендарным, 
	|   " + ?(ОплачивалВзносыМеньше6Месяцев,"
	|	ВЫБОР	КОГДА ДанныеКалендаряБЛ.НормаДнейЗаМесяц	ЕСТЬ NULL ИЛИ ДанныеКалендаряБЛ.НормаДнейЗаМесяц = 0 ИЛИ ДанныеОПределе.Предел ЕСТЬ NULL 
	|			ТОГДА 0
	|			ИНАЧЕ ДанныеОМинимальнойЗарплате.Размер / ДанныеКалендаряБЛ.НормаДнейЗаМесяц
	|   КОНЕЦ", "
	|	ВЫБОР	КОГДА ДанныеКалендаряБЛ.НормаДнейЗаМесяц	ЕСТЬ NULL ИЛИ ДанныеКалендаряБЛ.НормаДнейЗаМесяц = 0 ИЛИ ДанныеОПределе.Предел ЕСТЬ NULL 
	|			ТОГДА 0
	|			ИНАЧЕ ДанныеОПределе.Предел / ДанныеКалендаряБЛ.НормаДнейЗаМесяц
	|   КОНЕЦ ")+"
    |  											КАК СуммаПределаСредней,
	|   " + ?(ОплачивалВзносыМеньше6Месяцев,"
	|	ВЫБОР	КОГДА ДанныеКалендаряБЛ.НормаЧасовЗаМесяц	ЕСТЬ NULL ИЛИ ДанныеКалендаряБЛ.НормаЧасовЗаМесяц = 0 ИЛИ ДанныеОПределе.Предел ЕСТЬ NULL 
	|			ТОГДА 0
	|			ИНАЧЕ ДанныеОМинимальнойЗарплате.Размер / ДанныеКалендаряБЛ.НормаЧасовЗаМесяц
	|   КОНЕЦ", "
	|	ВЫБОР	КОГДА ДанныеКалендаряБЛ.НормаЧасовЗаМесяц	ЕСТЬ NULL ИЛИ ДанныеКалендаряБЛ.НормаЧасовЗаМесяц = 0 ИЛИ ДанныеОПределе.Предел ЕСТЬ NULL 
	|			ТОГДА 0
	|			ИНАЧЕ ДанныеОПределе.Предел / ДанныеКалендаряБЛ.НормаЧасовЗаМесяц
	|   КОНЕЦ ")+"
    |  											КАК СуммаПределаСреднейПоЧасам
	|
	|
	|// данные о минимальной зарплате
	|ИЗ РегистрСведений.МинимальнаяОплатаТруда.СрезПоследних( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), ) КАК ДанныеОМинимальнойЗарплате
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СредняяЗППоВсемВидамЭкономическойДеятельности.СрезПоследних(&ДатаСобытияДляСрелЗППоЭепоказателям) КАК СредняяЗППоВсемВидамЭкономическойДеятельности
	|ПО Истина
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДанныеГрафика + " КАК ДанныеКалендаряБЛ
	|ПО	ИСТИНА
	|
	|// данные для расчета предела
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВзносахВФонды.СрезПоследних( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), Налог = &парамНалог) КАК ДанныеОПределе
	|ПО	ИСТИНА
	|";
	
	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьОграниченияНаСреднюю()

Функция ПолучитьДатуНачалаСобытия()
	
	ДатаНачСоб = ДатаНачала;
	ДокПервичныйБольничныйЛист = ПервичныйБольничныйЛист;        		
	Пока ДокПервичныйБольничныйЛист <> Документы.НачислениеПоБольничномуЛисту.ПустаяСсылка() Цикл
		ДатаНачСоб = ПервичныйБольничныйЛист.ДатаНачала;
		ДокПервичныйБольничныйЛист = ДокПервичныйБольничныйЛист.ПервичныйБольничныйЛист;
	КонецЦикла; 
	
	Возврат ДатаНачСоб;

КонецФункции 


// Расчитывает сумму средней по значениям в ТЧ РасчетСреднего 
//
Функция РасчитатьСреднюю() Экспорт
	
	Если ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		
		СуммаСредней = ПервичныйБольничныйЛист.СуммаСредней;
		
	Иначе
		
		СуммаСредней = 0;
		ОплачиваемоеВремя = 0;
		
		Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
			ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноДней");
			
		ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
			ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноЧасов");
			
		Иначе
			ОплачиваемоеВремя = РасчетСреднего.Итог("КалендарныеДни");
			
		КонецЕсли;
		
		СуммаСреднейПолная = ?(ОплачиваемоеВремя = 0 , 0, РасчетСреднего.Итог("Результат") / ОплачиваемоеВремя);
		
		Если Дата >= '20091215000000' 
			И ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам 
			И ПериодРасчетаСреднегоНачало <> НачалоМесяца(ПериодРасчетаСреднегоНачало)  
			Тогда
			// в связи с Постановление КМУ 1332 от 08.12.2009
			Если СуммаПределаСредней > 0 Тогда
				СуммаСредней = Макс(Мин(СуммаСреднейПолная,СуммаПределаСредней), СуммаНижнейГраницыСредней);
			Иначе
				СуммаСредней = Макс(СуммаСреднейПолная, СуммаНижнейГраницыСредней);
			КонецЕсли;
		Иначе
			СуммаСредней = Мин(СуммаСреднейПолная,СуммаПределаСредней);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции  // РасчитатьСреднюю()

Функция АвтозаполнениеРасчетСреднего() Экспорт
	Перем ДатаПриемаПервыйРабочийДень;
	
	// Проверим есть ли каки-либо начисления за последние 10 месяце
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "парамСотрудник", Сотрудник );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоНачало", ПериодРасчетаСреднегоНачало );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоКонец", ПериодРасчетаСреднегоКонец );
	Запрос.УстановитьПараметр( "ДатаНачалаРаботы", РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ДатаНачалаРаботы);
    ВидыНалогов = Новый Массив();
	ВидыНалогов.Добавить(Справочники.Налоги.Соцстрах);
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВИнвалидыУТОГУТОС);
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВЛетчики);
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВРаботники);
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВРаботникиСР);
	Запрос.УстановитьПараметр( "парамНалог", ВидыНалогов);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СУММА( Основной.СуммаВзносов ) КАК СуммаВзносов,
	|	СУММА( Основной.ЕстьДопустимыеНевыходы ) КАК ЕстьДопустимыеНевыходы
	|ИЗ (
	|	ВЫБРАТЬ
	|		СУММА( ЕСТЬNULL(Начисления.Результат, 0) ) КАК СуммаВзносов,
	|		СУММА( ВЫБОР КОГДА Начисления.ВидРасчета В
	|		(ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве)
	|		,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ)
	|		,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации)
	|		,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам)
	|		,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты))
	|			ТОГДА 1
	|		КОНЕЦ )	КАК ЕстьДопустимыеНевыходы
	|	ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|	ГДЕ		Начисления.Сотрудник = &парамСотрудник
	|		И	Начисления.ПериодДействия МЕЖДУ &ПериодРасчетаСреднегоНачало И &ПериодРасчетаСреднегоКонец
	|		И	Начисления.ПериодДействия <= &ДатаНачалаРаботы
	|
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ
	|		СУММА( ЕСТЬNULL(Взносы.Результат, 0) ) КАК СуммаВзносов,
	|		СУММА( ВЫБОР КОГДА Начисления.ВидРасчета В
	|		(ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве)
	|		,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ)
	|		,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации)
	|		,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам)
	|		,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты))
	|		ТОГДА 1
	|		КОНЕЦ )	КАК ЕстьДопустимыеНевыходы
	|	ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВзносыВФонды КАК Взносы
	|	ПО		Взносы.Налог В (&парамНалог)
	|		И	Взносы.Сотрудник = &парамСотрудник
	|		И	Взносы.БазовыйПериодНачало МЕЖДУ &ПериодРасчетаСреднегоНачало И &ПериодРасчетаСреднегоКонец
	|
	|	ГДЕ		Начисления.Сотрудник = &парамСотрудник
	|		И	Начисления.ПериодДействияНачало МЕЖДУ &ПериодРасчетаСреднегоНачало И &ПериодРасчетаСреднегоКонец
	|) КАК Основной
	|";
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьНачисленияВФондСоцстраха = Ложь;
	ЕстьДопустимыеНевыходы = Ложь;
	Если Выборка.Следующий() Тогда
		ЕстьНачисленияВФондСоцстраха = ?(Выборка.СуммаВзносов= NULL ИЛИ Выборка.СуммаВзносов <= 0, Ложь,Истина);
		ЕстьДопустимыеНевыходы = ?(Выборка.ЕстьДопустимыеНевыходы= NULL ИЛИ Выборка.ЕстьДопустимыеНевыходы <= 0, Ложь,Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр( "парамПериодРегистрации"		, ПериодРегистрации );
	
	//	ВТПределы
	Если Истина Тогда
		//	Описание:
		// 		Суммы пределов
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ
		|		ДанныеОНалогах.Предел	КАК СуммаПредела,
		|		ДанныеОНалогах.Период	КАК ПериодНачало,
		|		МИНИМУМ( ВЫБОР	КОГДА ДанныеОНалогах1.Период ЕСТЬ NULL 
		|					ТОГДА  КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ( ДанныеОНалогах1.Период, СЕКУНДА, -1 )	
		|				КОНЕЦ )			КАК ПериодКонец
		|ПОМЕСТИТЬ ВТПределы	
		|	ИЗ	РегистрСведений.СведенияОВзносахВФонды КАК ДанныеОНалогах
		|
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВзносахВФонды КАК ДанныеОНалогах1
		|	ПО		ДанныеОНалогах1.Налог = ЗНАЧЕНИЕ(Справочник.Налоги.ЕСВРаботники) 
		|		И   ДанныеОНалогах1.Период > ДанныеОНалогах.Период
		|		
		|	ГДЕ   ДанныеОНалогах.Налог = ЗНАЧЕНИЕ(Справочник.Налоги.ЕСВРаботники) 
		|		
		|   СГРУППИРОВАТЬ ПО
		|		ДанныеОНалогах.Предел,
		|		ДанныеОНалогах.Период
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТПределы = "ВТПределы";
	КонецЕсли;
	
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	Если  ПериодРасчетаСреднегоНачало = ПериодРасчетаСреднегоКонец // на больничный в первый рабочий день
		
		// были разрешенные невыходы 6 месяцев 
		ИЛИ  НЕ ЕстьНачисленияВФондСоцстраха И ЕстьДопустимыеНевыходы 
	
		// на больничный в первый месяц работы еще нет начисленной ЗП
		ИЛИ  ДатаПриема = ПериодРасчетаСреднегоНачало И ПериодРасчетаСреднегоКонец < НачалоДня(КонецМесяца(ДатаПриема))	И НачалоМесяца(ДатаПриема) = ПериодРегистрации	
		Тогда
		
		// проработал меньше целого месяца
		// если есть за что платить, пользователю прийдется заполнить эти суммы вручную
		//
		ВидРасчетаСЗ = ПланыВидовРасчета.СреднийЗаработок.ПоОкладу;
		ВидРасчетаСЗ1 = "";
		
		//	ВТВремя
		Если Истина Тогда
			//	Описание:
			// 		таблица периодов для расчета средней
			//		
			Начало = ПериодРасчетаСреднегоНачало;
			Запрос.УстановитьПараметр( "парамНачало1", НачалоМесяца(ПериодРасчетаСреднегоКонец) );
			Запрос.УстановитьПараметр( "парамКонец1", КонецМесяца(ПериодРасчетаСреднегоКонец) );
			ТекстЗапросаВТ = " 
			|		ВЫБРАТЬ
			|			&парамНачало1	КАК БазовыйПериодНачало,
			|			&парамКонец1	КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТВремя	
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВремя = "ВТВремя";
		КонецЕсли;
		
		
		Если Дата >= '20091215000000' И ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			ВыборкаОграниченя	= ПолучитьОграниченияНаСреднюю();
			Если ВыборкаОграниченя.Следующий() Тогда
	    		ТекстСредняяЗПпоВсемВидамЭД = "Средняя з/п по всем видам ЭД: " + ВыборкаОграниченя.СредняяЗППоВсемВидамЭкономическойДеятельности+"грн";
				СуммаПределаСредней = ВыборкаОграниченя.СредняяЗППоВсемВидамЭДЗаКлендДень;
				СуммаНижнейГраницыСредней = ВыборкаОграниченя.МинимальнаяЗПЗаМесяц;
			КонецЕсли;
        КонецЕсли;
		
	Иначе
		
		ВидРасчетаСЗ = ?(ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам,ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБерИРоды,ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
		ВидРасчетаСЗ1 = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛПропорционально;
		//	ВТВремя
		Если Истина Тогда
			//	Описание:
			// 		таблица периодов для расчета средней
			//		
			Начало = ПериодРасчетаСреднегоНачало;
			Конец = ПериодРасчетаСреднегоКонец;
			Запрос.УстановитьПараметр( "парамНачало1", Начало );
			Запрос.УстановитьПараметр( "парамКонец1", Мин( КонецМесяца(Начало), Конец ) );
			ТекстЗапросаВТ = " 
			|		ВЫБРАТЬ
			|			&парамНачало1	КАК БазовыйПериодНачало,
			|			&парамКонец1	КАК БазовыйПериодКонец
			|ПОМЕСТИТЬ ВТВремя	
			|";
			
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
			Инд = 2;
			Пока Начало <= Конец Цикл
				
				Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
				Запрос.УстановитьПараметр( "парамКонец"+Инд    , Мин( КонецМесяца(Начало), Конец ) );
				ТекстЗапросаВТ = ТекстЗапросаВТ + " 
				|	ОБЪЕДИНИТЬ	  
				|	ВЫБРАТЬ
				|		&парамНачало"+Инд+"	КАК БазовыйПериодНачало,
				|		&парамКонец"+Инд+"	КАК БазовыйПериодКонец
				|";	  
				Инд = Инд + 1;
				Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
				
			КонецЦикла;
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВремя = "ВТВремя";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Время.БазовыйПериодНачало		КАК БазовыйПериодНачало,
	|	Время.БазовыйПериодКонец		КАК БазовыйПериодКонец,
	|	ДанныеОПределе.СуммаПредела		КАК СуммаПредела
	|ИЗ "+ТекстЗапросаВТВремя+" КАК Время			
	|			
	|ЛЕВОЕ СОЕДИНЕНИЕ	"+ТекстЗапросаВТПределы+" КАК ДанныеОПределе		
	|ПО   ДанныеОПределе.ПериодНачало <= Время.БазовыйПериодКонец
	|	И Время.БазовыйПериодНачало <= ДанныеОПределе.ПериодКонец  
	|";			
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СоздатьСтрокуРасчетСреднего( ВидРасчетаСЗ, Выборка.СуммаПредела, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
		Если ВидРасчетаСЗ1 <> "" Тогда
			СоздатьСтрокуРасчетСреднего( ВидРасчетаСЗ1, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец );
		КонецЕсли;
		
	КонецЦикла;
	
	Записать();
	
КонецФункции  // ЗаполнитьРасчетаСреднего_Заполнение()

Функция РассчитатьРасчетСреднего( КомментироватьРасчет  = Ложь ) Экспорт
	
	// очистить расчитываемые поля в ТЧ РасчетСреднего
	Для каждого ТекущаяСтрока Из РасчетСреднего Цикл
		Если ТекущаяСтрока.Авторасчет Тогда
			ТекущаяСтрока.ОтработаноДней = 0;
			ТекущаяСтрока.ОтработаноЧасов = 0;
			ТекущаяСтрока.КалендарныеДни = 0;
			ТекущаяСтрока.Результат = 0;
			ТекущаяСтрока.РезультатПолный = 0;
		КонецЕсли;
	КонецЦикла;
	Записать();
	
	Если  РасчетСреднего.Количество() > 0 
		И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоОкладу 
		И РасчетСреднего[0].Авторасчет 
		Тогда
		
		ПараметрыОклада = ПроведениеРасчетов.ПолучитьПараметыОклада(ДатаНачала, Сотрудник,ПериодРасчетаСреднегоНачало, ПериодРасчетаСреднегоКонец, ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ПоБеременностиИРодам);
		РасчетСреднего[0].Результат			= Мин(ПараметрыОклада["Оклад"],РасчетСреднего[0].СуммаПредела);
		РасчетСреднего[0].РезультатПолный	= ПараметрыОклада["Оклад"];
		РасчетСреднего[0].ОтработаноДней	= ПараметрыОклада["НормаДней"];
		РасчетСреднего[0].ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
		РасчетСреднего[0].КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
		
		РасчитатьСреднюю();
		Записать();
		Возврат Истина;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	Отказ = Ложь;
	НаборСредних = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборСредних.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоСредним.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, НаборСредних);
		КонецЕсли;
		
	КонецЦикла;
	НаборСредних.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения
		НаборСредних.Очистить();
		НаборСредних.Записать();
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	РассчитатьСреднююПорядок1266( КомментироватьРасчет );
	
	НаборСредних.Очистить();
	НаборСредних.Записать();
	
	РасчитатьСреднюю();
	Записать();
	
КонецФункции  // ЗаполнитьРасчетаСреднего_Заполнение()

Функция РассчитатьСреднююПорядок1266( КомментироватьРасчет = Ложь ) Экспорт
	
	// очистить расчитываемые поля в ТЧ РасчетСреднего
	Для каждого ТекущаяСтрока Из РасчетСреднего Цикл
		Если ТекущаяСтрока.Авторасчет Тогда
			ТекущаяСтрока.ОтработаноДней = 0;
			ТекущаяСтрока.ОтработаноЧасов = 0;
			ТекущаяСтрока.КалендарныеДни = 0;
			ТекущаяСтрока.Результат = 0;
			ТекущаяСтрока.РезультатПолный = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если  РасчетСреднего.Количество() > 0
		И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоОкладу 
		И РасчетСреднего[0].Авторасчет 
		Тогда
		
		СтрокаРасчетаСреднего = РасчетСреднего[0];
		ПараметрыОклада = ПроведениеРасчетов.ПолучитьПараметыОклада(СтрокаРасчетаСреднего.БазовыйПериодКонец, Сотрудник,ПериодРасчетаСреднегоНачало, ПериодРасчетаСреднегоКонец);
		
		СтрокаРасчетаСреднего.Результат			= ПараметрыОклада["Оклад"];
		СтрокаРасчетаСреднего.ОтработаноДней	= ПараметрыОклада["НормаДней"];
		СтрокаРасчетаСреднего.ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
		СтрокаРасчетаСреднего.КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
		
		Возврат Истина;
	КонецЕсли;
	
	// Описание:
	//		1. В колонку Сумма (полная) заполняем все суммы 
	//		соответсвенно с базами видов расчета средних (больничные, больничные пропорционально)
	//		их сумма должна дать полный доход для расчета средней
	//		2. Больничные пропорционально надо уменьшить отностительно отработанного времени
	//		3. И Больничные и Больничные Пропорцианально (уже уменьшенные) надо гораничить сверху Суммой предела
	//
	Запрос = Новый Запрос;     
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр( "Регистратор", Ссылка );
	Запрос.УстановитьПараметр( "ПарамСотрудник", Сотрудник );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоНачало",ПериодРасчетаСреднегоНачало );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоКонец", ПериодРасчетаСреднегоКонец );
	
	мНеУчитыватьСовместителейДляСредних = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).НеУчитыватьСовместителейДляСредних;
	
    ВидыНалогов = Новый Массив();
	ВидыНалогов.Добавить(Справочники.Налоги.Соцстрах);
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВИнвалидыУТОГУТОС);
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВЛетчики);
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВРаботники);
	ВидыНалогов.Добавить(Справочники.Налоги.ЕСВРаботникиСР);
	Запрос.УстановитьПараметр( "парамНалог", ВидыНалогов);

	
	//	ВТБазаСреднегоПолная
	Если Истина Тогда
		//	Описание:
		// 		1. Заполняем все базовые суммы
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		Основной.НомерСтроки				КАК НомерСтроки,
		|		Основной.Авторасчет					КАК Авторасчет,
		|		Основной.ВидРасчета					КАК ВидРасчета,
		|		Основной.СуммаПредела				КАК СуммаПредела,
		|		Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|		СУММА(Основной.База)				КАК База,
		|		СУММА(Основной.БазаВзноса)			КАК БазаВзноса,
		|		СУММА(Основной.Результат)			КАК Результат,
		|		СУММА(Основной.РезультатПолный)		КАК РезультатПолный,
		|		СУММА(Основной.ПропорцияОтработаноДней)	КАК ПропорцияОтработаноДней,
		|		СУММА(Основной.ПропорцияОтработаноЧасов)	КАК ПропорцияОтработаноЧасов,
		|		СУММА(Основной.ОтработаноДней)				КАК ОтработаноДней,
		|		СУММА(Основной.ОтработаноЧасов)				КАК ОтработаноЧасов,
		|		СУММА(Основной.КалендарныеДни)				КАК КалендарныеДни,
		|		СУММА(Основной.КалендарныеДниСПраздниками)	КАК КалендарныеДниСПраздниками,
		|		СУММА(Основной.НормаДней)			КАК НормаДней,
		|		СУММА(Основной.НормаЧасов)		КАК НормаЧасов
		|ПОМЕСТИТЬ ВТБазаСреднегоПолная
		|	ИЗ (
		|		ВЫБРАТЬ
		|			Начисления.НомерСтроки				КАК НомерСтроки,
		|			Начисления.Авторасчет				КАК Авторасчет,
		|			Начисления.ВидРасчета				КАК ВидРасчета,
		|			Начисления.СуммаПредела				КАК СуммаПредела,
		|			Начисления.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Начисления.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			0	КАК База,
		|			0	КАК БазаВзноса,
		|			ВЫБОР КОГДА Начисления.Авторасчет ТОГДА Начисления.РезультатБаза ИНАЧЕ Начисления.Результат КОНЕЦ		КАК Результат,
		|			ВЫБОР КОГДА Начисления.Авторасчет ТОГДА Начисления.РезультатБаза ИНАЧЕ Начисления.РезультатПолный КОНЕЦ	КАК РезультатПолный,
		|			0	КАК ПропорцияОтработаноДней,
		|			0	КАК ПропорцияОтработаноЧасов,
		|			0	КАК ОтработаноДней,
		|			0	КАК ОтработаноЧасов,
		|			0	КАК КалендарныеДни,
		|			0	КАК КалендарныеДниСПраздниками,
		|			0	КАК НормаДней,
		|			0	КАК НормаЧасов
		|		ИЗ РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного,&парамИзмеренияБазового
		|			"+ ?(мНеУчитыватьСовместителейДляСредних,",&парамРазрезыБазового",",")+",Регистратор = &Регистратор ) КАК Начисления
		|		ГДЕ ИСТИНА
		|		// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
		|		"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.НазначениеРазрез.ОсновноеНазначение <> Начисления.Сотрудник","")+"
		|			
		|		// -время-без календарных-------------------------------------------	
		|		ОБЪЕДИНИТЬ ВСЕ	
		|		ВЫБРАТЬ
		|			Средняя.НомерСтроки				КАК НомерСтроки,
		|			Средняя.Авторасчет				КАК Авторасчет,
		|			Средняя.ВидРасчета				КАК ВидРасчета,
		|			Средняя.СуммаПредела			КАК СуммаПредела,
		|			Средняя.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			0	КАК База,
		|			0	КАК БазаВзноса,
		|			0	КАК Результат,
		|			0	КАК РезультатПолный,
		|			СУММА(	ВЫБОР КОГДА НЕ Начисления.ВидРасчета В( ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве)
		|			                 ,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ)
		|			                 ,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации)
		|			                 ,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам)
		|			                 ,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты))
		|						ТОГДА Начисления.НормаДней
		|						ИНАЧЕ Начисления.ОтработаноДней
		|			     	КОНЕЦ)                                   КАК ПропорцияОтработаноДней,
		|			СУММА(	ВЫБОР КОГДА НЕ Начисления.ВидРасчета В( ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве)
		|			                 ,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ)
		|			                 ,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации)
		|			                 ,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам)
		|			                 ,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты))
		|						ТОГДА Начисления.НормаЧасов
		|						ИНАЧЕ Начисления.ОтработаноЧасов
		|			     	КОНЕЦ)                                   КАК ПропорцияОтработаноЧасов,
		|			
		|			СУММА(Начисления.ОтработаноДней)		КАК ОтработаноДней,
		|			СУММА(Начисления.ОтработаноЧасов)		КАК ОтработаноЧасов,
		|			0		КАК КалендарныеДни,
		|			0		КАК КалендарныеДниСПраздниками,
		|			СУММА(Начисления.НормаДней)				КАК НормаДней,
		|			СУММА(Начисления.НормаЧасов)			КАК НормаЧасов
		|		ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
		|		ПО		НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало, МЕСЯЦ) = Начисления.ПериодДействия
		|			И	Средняя.Сотрудник = Начисления.Сотрудник	
		|			И	Средняя.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ),ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБерИРоды))
		|			И	Начисления.Назначение = Начисления.Сотрудник	
		|			И	Начисления.ПериодРегистрации <	Средняя.ПериодРегистрации
		|			
		|		ГДЕ Средняя.Регистратор = &Регистратор			
		|		СГРУППИРОВАТЬ ПО
		|			Средняя.НомерСтроки,
		|			Средняя.Авторасчет,
		|			Средняя.ВидРасчета,
		|			Средняя.СуммаПредела,
		|			Средняя.БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец
		|
		|		// -время-календарные с вычетом праздников и без-------------------------------------------	
		|		ОБЪЕДИНИТЬ ВСЕ	
		|		ВЫБРАТЬ
		|			Средняя.НомерСтроки				КАК НомерСтроки,
		|			Средняя.Авторасчет				КАК Авторасчет,
		|			Средняя.ВидРасчета				КАК ВидРасчета,
		|			Средняя.СуммаПредела			КАК СуммаПредела,
		|			Средняя.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			0	КАК База,
		|			0	КАК БазаВзноса,
		|			0	КАК Результат,
		|			0	КАК РезультатПолный,
		|			0   КАК ПропорцияОтработаноДней,
		|			0   КАК ПропорцияОтработаноЧасов,
		|			
		|			0	КАК ОтработаноДней,
		|			0	КАК ОтработаноЧасов,
		|			СУММА( ВЫБОР КОГДА Начисления.Сторно 
		|			      ТОГДА -Начисления.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия
		|			      ИНАЧЕ Начисления.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия
		|			КОНЕЦ)       КАК КалендарныеДни,
		|			СУММА( ВЫБОР КОГДА Начисления.Сторно 
		|			      ТОГДА -Начисления.ПроизводственныйКалендарьКалендарныеДниСПраздникамиФактическийПериодДействия
		|			      ИНАЧЕ Начисления.ПроизводственныйКалендарьКалендарныеДниСПраздникамиФактическийПериодДействия
		|			КОНЕЦ)       КАК КалендарныеДниСПраздниками,
		|			0	КАК НормаДней,
		|			0	КАК НормаЧасов
		|		ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя
		|			
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(
		|		Назначение = &парамСотрудник И ПериодДействияНачало <= &ПериодРасчетаСреднегоКонец И ПериодДействияКонец >= &ПериодРасчетаСреднегоНачало
		|			
		|		) КАК Начисления
		|		ПО		Начисления.ПериодДействияНачало <= Средняя.БазовыйПериодКонец  
		|			И	Начисления.ПериодДействияКонец >= Средняя.БазовыйПериодНачало  
		|			И	Начисления.ВидРасчета.ЗачетКалендарных  
		|			И	Начисления.Сотрудник = Начисления.Назначение  
        |			И   Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени НЕ В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь),ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам))
        |
		|
		|		ГДЕ		Средняя.Авторасчет		
		|			И	Средняя.Регистратор = &Регистратор			
		|			И	Средняя.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ),ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБерИРоды))
		|
		|		СГРУППИРОВАТЬ ПО
		|			Средняя.НомерСтроки,
		|			Средняя.Авторасчет,
		|			Средняя.ВидРасчета,
		|			Средняя.СуммаПредела,
		|			Средняя.БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец
		|
		|		// - база взносов --------------------------------------------	
		|		ОБЪЕДИНИТЬ ВСЕ	
		|		ВЫБРАТЬ
		|			Средняя.НомерСтроки				КАК НомерСтроки,
		|			Средняя.Авторасчет				КАК Авторасчет,
		|			Средняя.ВидРасчета				КАК ВидРасчета,
		|			Средняя.СуммаПредела			КАК СуммаПредела,
		|			Средняя.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			СУММА(Взносы.База)				КАК База,
		|			СУММА(Взносы.БазаВзноса)		КАК БазаВзноса,
		|			0	КАК Результат,
		|			0	КАК РезультатПолный,
		|			0	КАК ПропорцияОтработаноДней,
		|			0	КАК ПропорцияОтработаноЧасов,
		|			
		|			0	КАК ОтработаноДней,
		|			0	КАК ОтработаноЧасов,
		|			0	КАК КалендарныеДни,
		|			0	КАК КалендарныеДниСПраздниками,
		|			0	КАК НормаДней,
		|			0	КАК НормаЧасов
		|		ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВзносыВФонды КАК Взносы
		|		ПО		НАЧАЛОПЕРИОДА(Взносы.БазовыйПериодНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало, МЕСЯЦ)
		|			И	Взносы.Сотрудник = &ПарамСотрудник	
		//|			И	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ)
		|			И	Взносы.Налог В (&парамНалог)	
		|			И	Взносы.ПериодРегистрации <	Средняя.ПериодРегистрации
		|			
		|		ГДЕ Средняя.Регистратор = &Регистратор			
		|		СГРУППИРОВАТЬ ПО
		|			Средняя.НомерСтроки,
		|			Средняя.Авторасчет,
		|			Средняя.ВидРасчета,
		|			Средняя.СуммаПредела,
		|			Средняя.БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец
		|	) КАК Основной		
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки,
		|		Основной.Авторасчет,
		|		Основной.ВидРасчета,
		|		Основной.СуммаПредела,
		|		Основной.БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец
		|			
		|ИНДЕКСИРОВАТЬ ПО			
		|	НомерСтроки		
		|";
		Измерения = Новый Массив(2);
		Измерения[0] = "Сотрудник";
		Измерения[1] = "Организация";
		Разрезы = Новый Массив(1);
		Разрезы[0] = "Назначение";
		// для начислений сопоставляемые измерения основного и базового регистров совпадают
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		Запрос.УстановитьПараметр("парамРазрезыБазового", Разрезы);
		
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТБазаСреднегоПолная = "ВТБазаСреднегоПолная";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТБазаСреднегоПолная";
	
	//	ВТБазаСреднего
	Если Истина Тогда
		//	Описание:
		// 		2. В запросе расчитывается результат для записей больничный пропорционально
		//		   в случае авторасчета берем суммы из таблицы
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ
		|		Основной.НомерСтроки				КАК НомерСтроки,
		|		Основной.Авторасчет					КАК Авторасчет,
		|		Основной.ВидРасчета					КАК ВидРасчета,
		|
		|		ВЫБОР	КОГДА		Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланвидовРасчета.СреднийЗаработок.ПоЗаработкуБЛПропорционально)   
		|					ТОГДА   Начисления.СуммаПредела
		|				ИНАЧЕ		Основной.СуммаПредела
		|		КОНЕЦ	 							КАК СуммаПредела,
		|			
		|		Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|
		|		Основной.База		КАК База,
		|		Основной.БазаВзноса	КАК БазаВзноса,
		|			
		|		ВЫБОР	КОГДА		НЕ Основной.Авторасчет   
		|					ТОГДА   Основной.Результат
		|
		|				КОГДА		ЕСТЬNULL(Основной.База,0)<>0 И Основной.База > Основной.БазаВзноса   
		|                   // Нужна пропорция для отпускных, применялось ограничение
		|					ТОГДА ВЫБОР	КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланвидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ),ЗНАЧЕНИЕ(ПланвидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБерИРоды))   
		|									ТОГДА	Основной.РезультатПолный * Основной.БазаВзноса / Основной.База
		|
		|								КОГДА		Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланвидовРасчета.СреднийЗаработок.ПоЗаработкуБЛПропорционально)   
		|										И	ЕСТЬNULL(Начисления.НормаЧасов,0) <> 0   
		|										И	Начисления.ПропорцияОтработаноЧасов >= Начисления.НормаЧасов   
		|									ТОГДА   Основной.РезультатПолный * Основной.БазаВзноса / Основной.База
		|
		|						  		КОГДА		Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланвидовРасчета.СреднийЗаработок.ПоЗаработкуБЛПропорционально)   
		|										И	ЕСТЬNULL(Начисления.НормаЧасов,0) <> 0   
		|									ТОГДА   Основной.РезультатПолный * (Начисления.ПропорцияОтработаноЧасов/Начисления.НормаЧасов)  
		|															 * Основной.БазаВзноса / Основной.База
		|
		|						  		ИНАЧЕ		0
		|				          КОНЕЦ
		|				ИНАЧЕ   
		|                   // для взносов ограничение не применялось
		|					ВЫБОР	КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланвидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ),ЗНАЧЕНИЕ(ПланвидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБерИРоды))   
		|								ТОГДА	Основной.РезультатПолный
		|
		|							КОГДА		Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланвидовРасчета.СреднийЗаработок.ПоЗаработкуБЛПропорционально)   
		|									И	ЕСТЬNULL(Начисления.НормаЧасов,0) <> 0   
		|									И	Начисления.ПропорцияОтработаноЧасов >= Начисления.НормаЧасов   
		|								ТОГДА   Основной.РезультатПолный
		|
		|							КОГДА		Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланвидовРасчета.СреднийЗаработок.ПоЗаработкуБЛПропорционально)   
		|									И	ЕСТЬNULL(Начисления.НормаЧасов,0) <> 0   
		|								ТОГДА   Основной.РезультатПолный * Начисления.ПропорцияОтработаноЧасов/Начисления.НормаЧасов
		|
		|							ИНАЧЕ		0
		|				КОНЕЦ
		|		КОНЕЦ	 							КАК Результат,
		|			
		|		Основной.РезультатПолный			КАК РезультатПолный,
		|		Основной.ОтработаноДней				КАК ОтработаноДней,
		|		Основной.ОтработаноЧасов			КАК ОтработаноЧасов,
		|		Основной.КалендарныеДни				КАК КалендарныеДни,
		|		Основной.КалендарныеДниСПраздниками	КАК КалендарныеДниСПраздниками,
		|		Основной.НормаДней					КАК НормаДней,
		|		Основной.НормаЧасов					КАК НормаЧасов
		|ПОМЕСТИТЬ ВТБазаСреднего	
		|	ИЗ " + ТекстЗапросаВТБазаСреднегоПолная + " КАК Основной
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТБазаСреднегоПолная + " КАК Начисления		
		|	ПО		Начисления.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ),ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБерИРоды))			
		|		И	Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛПропорционально)
		|		И	Основной.БазовыйПериодНачало = Начисления.БазовыйПериодНачало
		|		И	Основной.БазовыйПериодКонец = Начисления.БазовыйПериодКонец
		|			
		|ИНДЕКСИРОВАТЬ ПО			
		|	НомерСтроки		
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТБазаСреднего = "ВТБазаСреднего";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТБазаСреднего";
	
	//	ВТРезультат
	Если Истина Тогда
		//	Описание:
		// 		2. В запросе расчитывается результат для записей больничный пропорционально
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ
		|		Основной.НомерСтроки			КАК НомерСтроки,
		|		Основной.БазовыйПериодНачало	КАК БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			
		|		ВЫБОР	КОГДА		Не Основной.Авторасчет 	
		|					ТОГДА	Основной.Результат
		|				КОГДА		Основной.СуммаПредела < Начисления.Результат 	
		|			        	И	ЕСТЬNULL(Начисления.Результат, 0) <> 0
		|					ТОГДА	ВЫРАЗИТЬ( Основной.Результат * (Основной.СуммаПредела - ЕСТЬNULL(НачисленияНеАвторасчет.Результат,0))/(Начисления.Результат - ЕСТЬNULL(НачисленияНеАвторасчет.Результат,0))  КАК ЧИСЛО(16, 2))
		|				ИНАЧЕ		Основной.Результат
		|		КОНЕЦ								КАК Результат
		|		
		|ПОМЕСТИТЬ ВТРезультат	
		|	ИЗ " + ТекстЗапросаВТБазаСреднего + " КАК Основной
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ (		
		|		ВЫБРАТЬ
		|			Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Основной.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|			СУММА(Основной.Результат)			КАК Результат
		|		ИЗ " + ТекстЗапросаВТБазаСреднего + " КАК Основной
		|		СГРУППИРОВАТЬ ПО
		|			Основной.БазовыйПериодНачало,
		|			Основной.БазовыйПериодКонец
		|	) КАК Начисления		
		|	ПО		Основной.БазовыйПериодНачало = Начисления.БазовыйПериодНачало
		|		И	Основной.БазовыйПериодКонец = Начисления.БазовыйПериодКонец
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ (		
		|		ВЫБРАТЬ
		|			Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Основной.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|			СУММА(Основной.Результат)			КАК Результат
		|		ИЗ " + ТекстЗапросаВТБазаСреднего + " КАК Основной
		|		ГДЕ Не Основной.Авторасчет
		|		СГРУППИРОВАТЬ ПО
		|			Основной.БазовыйПериодНачало,
		|			Основной.БазовыйПериодКонец
		|	) КАК НачисленияНеАвторасчет		
		|	ПО		Основной.БазовыйПериодНачало = Начисления.БазовыйПериодНачало
		|		И	Основной.БазовыйПериодКонец = Начисления.БазовыйПериодКонец
		|			
		|ИНДЕКСИРОВАТЬ ПО			
		|	НомерСтроки		
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТРезультат = "ВТРезультат";
	КонецЕсли;
	
	//	ВТКопейкиОкругления
	Если Истина Тогда
		//	Описание:
		// 		3.1 В этой таблице будут только копейки - ошибки округления
		//		
		ТекстЗапросаВТ = "
		|	ВЫБРАТЬ
		|		Основной.НомерСтрокиКопейки				КАК НомерСтрокиКопейки,
		|		Основной.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец				КАК БазовыйПериодКонец,
		|		Основной.Результат-Начисления.Результат	КАК Копейка
		|		
		|ПОМЕСТИТЬ ВТКопейкиОкругления	
		|	ИЗ (		
		|		ВЫБРАТЬ
		|			Результаты.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Результаты.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			МИНИМУМ(Результаты.НомерСтроки)		КАК НомерСтрокиКопейки,
		|			СУММА(Результаты.Результат)			КАК Результат
		|		ИЗ " + ТекстЗапросаВТРезультат + " КАК Результаты
		|		СГРУППИРОВАТЬ ПО
		|			Результаты.БазовыйПериодНачало,
		|			Результаты.БазовыйПериодКонец
		|		) КАК Основной		
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ (		
		|		ВЫБРАТЬ
		|			БазаСреднегоПолная.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|			БазаСреднегоПолная.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|			СУММА(БазаСреднегоПолная.Результат)			КАК Результат
		|		ИЗ " + ТекстЗапросаВТБазаСреднегоПолная + " КАК БазаСреднегоПолная
		|		СГРУППИРОВАТЬ ПО
		|			БазаСреднегоПолная.БазовыйПериодНачало,
		|			БазаСреднегоПолная.БазовыйПериодКонец
		|	) КАК Начисления		
		|	ПО		Основной.БазовыйПериодНачало = Начисления.БазовыйПериодНачало
		|		И	Основной.БазовыйПериодКонец = Начисления.БазовыйПериодКонец
		|			
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТКопейкиОкругления = "ВТКопейкиОкругления";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Основной.НомерСтроки			КАК НомерСтроки,
	|	Основной.Авторасчет				КАК Авторасчет,
	|	Основной.БазовыйПериодНачало	КАК БазовыйПериодНачало,
	|	Основной.БазовыйПериодКонец		КАК БазовыйПериодКонец,
	|
	|	Основной.База		КАК База,
	|	Основной.БазаВзноса	КАК БазаВзноса,
	|
	|	Начисления.Результат			КАК Результат,
	|
	|	ЕСТЬNULL(КопейкиОкругления.Копейка, 0)	КАК Копейка,
	|
	|	Основной.РезультатПолный			КАК РезультатПолный,
	|	Основной.ОтработаноДней				КАК ОтработаноДней,
	|	Основной.ОтработаноЧасов			КАК ОтработаноЧасов,
	|	Основной.НормаДней					КАК НормаДней,
	|	Основной.НормаЧасов					КАК НормаЧасов,
	|	Основной.КалендарныеДни				КАК КалендарныеДни,
	|	Основной.КалендарныеДниСПраздниками	КАК КалендарныеДниСПраздниками
	|
	|ИЗ " + ТекстЗапросаВТБазаСреднегоПолная + " КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТРезультат + " КАК Начисления
	|ПО		Основной.НомерСтроки = Начисления.НомерСтроки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТКопейкиОкругления + " КАК КопейкиОкругления
	|ПО		Основной.НомерСтроки = КопейкиОкругления.НомерСтрокиКопейки
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	тБазовыйПериодНачало = Дата('00010101');
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.БазовыйПериодНачало <> тБазовыйПериодНачало Тогда
			тБазовыйПериодНачало = Выборка.БазовыйПериодНачало;
			Копейка = Выборка.Копейка;
		КонецЕсли;
		
		Если НЕ Выборка.Авторасчет Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = РасчетСреднего.Получить( Выборка.НомерСтроки - 1 );
		
		СтрокаТабличнойЧасти.Результат			= Выборка.Результат;  
		СтрокаТабличнойЧасти.РезультатПолный	= Выборка.РезультатПолный;
		
		СтрокаТабличнойЧасти.ОтработаноДней		= Выборка.ОтработаноДней;
		СтрокаТабличнойЧасти.ОтработаноЧасов	= Выборка.ОтработаноЧасов;
		
		СтрокаТабличнойЧасти.База				= Выборка.База;
		СтрокаТабличнойЧасти.БазаВзноса			= Выборка.БазаВзноса;
		Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
			И (СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ
			ИЛИ СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБерИРоды)
			Тогда
			СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДниСПраздниками;
		Иначе
			СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДни;
		КонецЕсли;
		СтрокаТабличнойЧасти.НормаДней			= Выборка.НормаДней;
		СтрокаТабличнойЧасти.НормаЧасов			= Выборка.НормаЧасов;
		
		Копейка = 0;
		
		//КонецЕсли;
	КонецЦикла;
	
	РасчитатьСреднюю();
	
	Записать();
	
КонецФункции  // ЗаполнитьРасчетаСреднего_Заполнение()

Функция СоздатьСтрокуРасчетСреднего( ВидРасч, СуммаПредела, Начало, Конец ) 
	
	СтрокаТабличнойЧасти =  РасчетСреднего.Добавить();
	
	СтрокаТабличнойЧасти.Авторасчет 			= Истина;
	СтрокаТабличнойЧасти.ВидРасчета 			= ВидРасч;
	СтрокаТабличнойЧасти.БазовыйПериодНачало 	= Начало;
	СтрокаТабличнойЧасти.БазовыйПериодКонец 	= Конец;
	СтрокаТабличнойЧасти.СуммаПредела 			= СуммаПредела;
	СтрокаТабличнойЧасти.КоэффициентПовышенияОкладов = 1;
	
КонецФункции  // СоздатьСтрокуРасчетСреднего()




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ТБЛИЧНОЙ ЧАСТИ Начисления

Процедура АвтозаполнениеНачисления() Экспорт
	
	мПериодРегистрации	= ?(ЗначениеЗаполнено(ПерерассчитываемыйДокумент), ПерерассчитываемыйДокумент.ПериодРегистрации, ПериодРегистрации);
	
	// запрос по всем назначениям включая внутреннее совместительство
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамРегистратор",	Ссылка);
	Запрос.УстановитьПараметр("парамОрганизация",	Организация);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ПолучитьДатуНачалаСобытия());
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("парамВидРасчета",					ПричинаНетрудоспособности.ВидРасчета);
	Запрос.УстановитьПараметр("парамВидРасчетаЗаСчетОрганизации",	ПричинаНетрудоспособности.ВидРасчетаЗаСчетОрганизации);
	Запрос.УстановитьПараметр("парамКвоДнейЗаСчетОрганизации",		ПричинаНетрудоспособности.КвоДнейЗаСчетОрганизации);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Основной.Дата,
	//|	Основной.ПериодРегистрации,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|	Основной.Сотрудник,
	|	Основной.ПроцентОплаты,
	|	Основной.СуммаПределаСредней, 
	|	Основной.ПричинаНетрудоспособности,
	|	Основной.ПервичныйБольничныйЛист,
	|	Основной.ДатаНачала,
	|	Основной.ДатаОкончания,
	|	Основной.СуммаСредней,
	|	Основной.ПроцентОплаты,
	|	Основной.ВидУчетаВремениДляСредней,
	|  	Основной.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоНачало,
	|  	Основной.ПериодРасчетаСреднегоКонец		КАК ПериодРасчетаСреднегоКонец,
	|
	|	&парамВидРасчета						КАК ВидРасчета,
	|	&парамВидРасчетаЗаСчетОрганизации		КАК ВидРасчетаЗаСчетОрганизации,
	|	&парамКвоДнейЗаСчетОрганизации 			КАК КвоДнейЗаСчетОрганизации,
	|   РАЗНОСТЬДАТ(&ДатаНачалаСобытия, Основной.ДатаНачала, ДЕНЬ) КАК КвоДнейЗаСчетОрганизацииОплачено,//продление больничного
	|
	|	РаботникиОрганизацииСрезПоследних.Сотрудник КАК Назначение,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|
	|
	|ИЗ Документ.НачислениеПоБольничномуЛисту КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник ИЛИ Сотрудник.ОсновноеНазначение = &парамСотрудник ) КАК РаботникиОрганизацииСрезПоследних
	|ПО		ИСТИНА
	|
	|ГДЕ Основной.Ссылка = &парамРегистратор	
	|	И  ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок,0) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Основной.Дата,
	//|	Основной.ПериодРегистрации,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|	Основной.Сотрудник,
	|	Основной.ПроцентОплаты,
	|	Основной.СуммаПределаСредней, 
	|	Основной.ПричинаНетрудоспособности,
	|	Основной.ПервичныйБольничныйЛист,
	|	ВЫБОР КОГДА ЗаменыОрганизаций.ДатаНачала <= Основной.ДатаНачала ТОГДА Основной.ДатаНачала ИНАЧЕ ЗаменыОрганизаций.ДатаНачала КОНЕЦ  КАК ДатаНачала,
	|	ВЫБОР КОГДА Основной.ДатаОкончания <= ЗаменыОрганизаций.ДатаОкончания ТОГДА Основной.ДатаОкончания ИНАЧЕ ЗаменыОрганизаций.ДатаОкончания КОНЕЦ  КАК ДатаОкончания,
	|	Основной.СуммаСредней,
	|	Основной.ПроцентОплаты,
	|	Основной.ВидУчетаВремениДляСредней,
	|  	Основной.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоНачало,
	|  	Основной.ПериодРасчетаСреднегоКонец		КАК ПериодРасчетаСреднегоКонец,
	|
	|	&парамВидРасчета						КАК ВидРасчета,
	|	&парамВидРасчетаЗаСчетОрганизации		КАК ВидРасчетаЗаСчетОрганизации,
	|	0 										КАК КвоДнейЗаСчетОрганизации,
	|   0 										КАК КвоДнейЗаСчетОрганизацииОплачено,//продление больничного
	|
	|	ЗаменыОрганизаций.ЗаменаСотрудник КАК Назначение,
	|	ЗаменыОрганизаций.ЗаменаПодразделениеОрганизации КАК ПодразделениеОрганизации
	|
	|
	|ИЗ Документ.НачислениеПоБольничномуЛисту КАК Основной
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаменыОрганизаций КАК ЗаменыОрганизаций
	|ПО		ЗаменыОрганизаций.Сотрудник = Основной.Сотрудник 
	|	И	ЗаменыОрганизаций.ДатаНачала <= Основной.ДатаОкончания
	|	И	Основной.ДатаНачала <= ЗаменыОрганизаций.ДатаОкончания
	|
	|ГДЕ Основной.Ссылка = &парамРегистратор	
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КвоДнейЗаСчетОрганизации = 0;
		КвоДнейЗаСчетОрганизации = Выборка.КвоДнейЗаСчетОрганизации;
		Если ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
			ТекущаяДатаОкончанияЗаСчетОрганизации	= КонецДня(ПервичныйБольничныйЛист.ДатаНачала + 86400*Макс(0, КвоДнейЗаСчетОрганизации - 1));
			КвоДнейЗаСчетОрганизации = ?(Выборка.КвоДнейЗаСчетОрганизацииОплачено > Выборка.КвоДнейЗаСчетОрганизации, 0, Выборка.КвоДнейЗаСчетОрганизации - Выборка.КвоДнейЗаСчетОрганизацииОплачено);
		Иначе
			КвоДнейЗаСчетОрганизации = ?(Выборка.КвоДнейЗаСчетОрганизацииОплачено > Выборка.КвоДнейЗаСчетОрганизации, 0, Выборка.КвоДнейЗаСчетОрганизации - Выборка.КвоДнейЗаСчетОрганизацииОплачено);
			ТекущаяДатаОкончанияЗаСчетОрганизации	= КонецДня(ДатаНачала + 86400*Макс(0, КвоДнейЗаСчетОрганизации - 1));
		КонецЕсли;
		
		ТекущаяДатаНачала						= ДатаНачала;
		ТекущаяДатаОкончания 					= КонецДня(Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания, ?(КвоДнейЗаСчетОрганизации = 0, ДатаОкончания, ТекущаяДатаОкончанияЗаСчетОрганизации) ));
		
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			
			// строка движений
			НоваяСтрока = Начисления.Добавить();
			
			// Свойства
			НоваяСтрока.Авторасчет          		= Истина;
			НоваяСтрока.ДатаНачала       			= НачалоДня(ТекущаяДатаНачала);
			НоваяСтрока.ДатаОкончания				= КонецДня(ТекущаяДатаОкончания);
			НоваяСтрока.БазовыйПериодНачало       	= мПериодРегистрации;
			НоваяСтрока.БазовыйПериодКонец			= КонецМесяца(мПериодРегистрации);
			
			Если ТекущаяДатаОкончания <= ТекущаяДатаОкончанияЗаСчетОрганизации И Выборка.КвоДнейЗаСчетОрганизации > 0 Тогда
				НоваяСтрока.ВидРасчета					= Выборка.ВидРасчетаЗаСчетОрганизации;
			Иначе
				НоваяСтрока.ВидРасчета					= Выборка.ВидРасчета;
			КонецЕсли; 
			
			// Измерения
			НоваяСтрока.Сотрудник                   = Сотрудник;
			НоваяСтрока.Назначение					= Выборка.Назначение;
			
			// Реквизиты
			ПроведениеРасчетов.ПроставитьДанныеСтроки(Сотрудник, Выборка.Назначение, НоваяСтрока.ДатаНачала, ПериодРегистрации, НоваяСтрока.ВидРасчета, НоваяСтрока);
			НоваяСтрока.Показатель1  	        	= ?(Сотрудник = Выборка.Назначение,Выборка.СуммаСредней,0); // только для основного назначения
			НоваяСтрока.Показатель2  	        	= Выборка.ПроцентОплаты;
			НоваяСтрока.ВидУчетаВремениДляСредней	= Выборка.ВидУчетаВремениДляСредней;
			
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			Если ТекущаяДатаОкончания < ТекущаяДатаОкончанияЗаСчетОрганизации Тогда
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания, ТекущаяДатаОкончанияЗаСчетОрганизации);
			Иначе
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания );
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры

Процедура РассчитатьНачисления( Сотрудники, КомментироватьРасчет = Ложь ) Экспорт
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	МассивИндексыСтрокНачисления = Новый Массив();
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);

			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		
		// Заполним записи в наборе записей регистра
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;

		// и в табличной части
		Движение = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.ДатаНачала		= СтрокаСторно.ПериодДействияНачало;   
		Если Час(СтрокаСторно.ПериодДействияНачало)=0 И Минута(СтрокаСторно.ПериодДействияНачало)=0 И Секунда(СтрокаСторно.ПериодДействияНачало)=1 Тогда
			//Если это первая секунда дня - начнем с следующего
			Движение.ДатаНачала = СтрокаСторно.ПериодДействияНачало+86400;
		КонецЕсли;	
		Движение.ДатаОкончания	= СтрокаСторно.ПериодДействияКонец; 
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;

		МассивИндексыСтрокНачисления.Добавить(Движение.НомерСтроки-1);
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
		
	// рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники, 
														КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьНачисления


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПЕРЕРАСЧЕТА

Функция ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	// проверять необходимость перерасчета не будем,
	// если процедура запущена, то будем заполнять и пересчитывать
	
	//////////////////////////////////////////////////////////////////////////////////
	// Выполним заполнение данных из перерасчитываемого документа
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный, ДатаНачала, ДатаОкончания"); // кроме указанных
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ИсходныйДокумент.ДатаНачала;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = ИсходныйДокумент.ДатаОкончания;
	КонецЕсли;
	
	// ТЧ Начисления
	Если Истина Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Назначение,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.ДокументОснование,
		|	Начисления.ВидУчетаВремениДляСредней,
		|	Начисления.НормаДнейЗаМесяц,
		|	Начисления.НормаЧасовЗаМесяц,
		|	-Начисления.Результат КАК Результат,
		|	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|	-Начисления.ОтработаноДней КАК ОтработаноДней,
		|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	-Начисления.КалендарныеДни КАК КалендарныеДни,
		|	-Начисления.НормаДней КАК НормаДней,
		|	-Начисления.НормаЧасов КАК НормаЧасов,
		|	ИСТИНА КАК Сторно,
		|	Начисления.Ссылка КАК СторнируемыйДокумент,
		|	Начисления.Авторасчет КАК Авторасчет
		|ИЗ
		|	Документ."+Метаданные().Имя+".Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И Начисления.Ссылка.Проведен";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	// Сторнировать расчет средней не надо, так как при их расчете все расчитывается заново
	
	//////////////////////////////////////////////////////////////////////////////////
	// Выполним заполнение новых данных, по ПериодуРегистрации указанному 
	// в перерасчитываемом документе, по всем табличным частям
	Записать();
	АвтозаполнениеРасчетСреднего();
	РассчитатьРасчетСреднего();

	АвтозаполнениеНачисления();
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьПоПерерассчитываемомуДокументу()

Процедура Перерассчитать( Сотрудники = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых сорудников
	СотрудникиСписок = Новый СписокЗначений;
	Если Сотрудники = Неопределено Тогда
		
		СотрудникиСписок.Добавить(Сотрудник);
		
	Иначе
		
		СотрудникиСписок = Сотрудники;
		
	КонецЕсли;
	
	// если не перерассчитываем никого - возврат
	Если СотрудникиСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// читаем все данные 
	НачатьТранзакцию();
	Прочитать();
	
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.РасчетСреднегоЗаработка.Прочитать();
	ЗафиксироватьТранзакцию();
	
	////////////////////////////////////////////////////////////////////////
	// Расчет средней
	Если Истина Тогда
		// перерассчитываем записи начислений
		РассчитатьСреднююПорядок1266();
		Движения.РасчетСреднегоЗаработка.Записать(Истина, Истина);
	
		РасчитатьСреднюю();
	КонецЕсли;
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Основные начисления
	
	Если Истина Тогда
		Для Каждого Строка из Движения.ОсновныеНачисленияРаботниковОрганизаций Цикл
			Если Строка.Сторно или НЕ Строка.Авторасчет Тогда
				Продолжить;
			КонецЕсли;
			СпособРасчета = Строка.ВидРасчета.СпособРасчета;
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуКомпенсацияОтпуска
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыходноеПособие Тогда
				Строка.Показатель1 = СуммаСредней;
			КонецЕсли;	
		КонецЦикла;
		Для Каждого Строка из Начисления Цикл
			Если Строка.Сторно или НЕ Строка.Авторасчет Тогда
				Продолжить;
			КонецЕсли;
			СпособРасчета = Строка.ВидРасчета.СпособРасчета;
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуКомпенсацияОтпуска
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыходноеПособие Тогда
				Строка.Показатель1 = СуммаСредней;
			КонецЕсли;	
		КонецЦикла;
		
		// перерассчитываем записи начислений
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
											Движения.ОсновныеНачисленияРаботниковОрганизаций, 
											Начисления, 
											, 
											СотрудникиСписок);
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	КонецЕсли;
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Взаиморасчеты с работниками
	Если Истина Тогда
		// сначала удалим сведения о взаиморасчетах с работниками
		ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
		ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
		
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			ИспользуетсяЕСВ = ПроведениеРасчетов.ИспользуетсяЕСВ(ПериодРегистрации); 
			Если НЕ ИспользуетсяЕСВ Тогда
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям);
			Иначе
				Если  НЕ ВыборкаПоНачислениям.ВидРасчета.НачислениеЗаСчетФСС Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям);
				КонецЕсли;
           	КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоРегиструРасчета(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоРегиструРасчета(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
КонецПроцедуры // Перерассчитать()



////////////////////////////////////////////////////////////////////////////////
//////// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		Основной.Ссылка,
	|		Основной.Дата,
	|		Основной.ПериодРегистрации,
	|		Основной.Организация,
	|		Основной.Сотрудник,
	|		Основной.СуммаСредней, 
	|		Основной.ПроцентОплаты,
	|		Основной.СуммаПределаСредней, 
	|		Основной.ПричинаНетрудоспособности,
	|		Основной.ПервичныйБольничныйЛист,
	|		Основной.ДатаНачала,
	|		Основной.ДатаОкончания,
	|		Основной.ПериодРасчетаСреднегоНачало,
	|		Основной.ПериодРасчетаСреднегоКонец,
	|		Основной.ВидУчетаВремениДляСредней,
	|		Основной.ПерерассчитываемыйДокумент
	|
	|	ИЗ Документ.НачислениеПоБольничномуЛисту КАК Основной
	|
	|	ГДЕ Основной.Ссылка = &ДокументСсылка	
	|";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачислениям()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Ссылка.Организация,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.НомерСтроки,  
	|	СтрокиНачисления.Авторасчет,
	|   ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
	|
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Назначение,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета		КАК СпособРасчета,
    |
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодВзаиморасчетов,
	|	СтрокиНачисления.ВидРасчета.СчетУчета			КАК СчетУчета,
	|	СтрокиНачисления.Результат						КАК СуммаВзаиморасчетов,
	|
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ДатаНачала			КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания		КАК ПериодДействияКонец,
	|
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
	|			ТОГДА ЗНАЧЕНИЕ(	Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	ВЫБОР	КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В(&парамСписокПочасовыхОтклонений) 
	|				ТОГДА	ИСТИНА 
	|			ИНАЧЕ		ЛОЖЬ 
	|	КОНЕЦ														КАК ЯвляетсяПочасовымОтклонением,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени, 
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|	СтрокиНачисления.СторнируемыйДокумент,
	|	СтрокиНачисления.Сторно
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

Функция СформироватьЗапросПоРасчетСреднего()

	ИмяРегистратора = Ссылка.Метаданные().Имя;
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));

	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокаРасчетСреднего.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	               |	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
	               |	СтрокаРасчетСреднего.Ссылка.Организация КАК Организация,
				   
	               |	СтрокаРасчетСреднего.НомерСтроки,
	               |	СтрокаРасчетСреднего.Авторасчет,
	               |	СтрокаРасчетСреднего.ВидРасчета,
	               |	СтрокаРасчетСреднего.БазовыйПериодНачало,
	               |	СтрокаРасчетСреднего.БазовыйПериодКонец,
	               |	СтрокаРасчетСреднего.КоэффициентПовышенияОкладов,
	               |	СтрокаРасчетСреднего.СуммаПредела,
				   
	               |	СтрокаРасчетСреднего.ОтработаноДней,
	               |	СтрокаРасчетСреднего.ОтработаноЧасов,
	               |	СтрокаРасчетСреднего.НормаДней,
	               |	СтрокаРасчетСреднего.НормаЧасов,
	               |	СтрокаРасчетСреднего.КалендарныеДни,
				   
	               |	СтрокаРасчетСреднего.Результат,
	               |	СтрокаРасчетСреднего.РезультатПолный
	               |ИЗ Документ."+Ссылка.Метаданные().Имя+".РасчетСреднего КАК СтрокаРасчетСреднего
	               |
	               |ГДЕ СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
	               |";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()


Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ) Экспорт

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой выполняется начисление!", Отказ);
	КонецЕсли;

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		Отказ = Истина;
		Возврат;
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран сотрудник лицо!", Отказ);
	КонецЕсли;

	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала оплачиваемого события!", Отказ);
	КонецЕсли;
	
	// ДатаОкончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата окончания оплачиваемого события!", Отказ);
	КонецЕсли;
	
	//
	Если ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата окончания оплачиваемого события не должна быть меньше даты начала!", Отказ);
	КонецЕсли; 

////	// ВидЗанятости
////	Если ВыборкаПоШапкеДокумента.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
////		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть оформлен на внутреннего совместителя!", Отказ);
////	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана причина нетрудоспособности!", Отказ);
	КонецЕсли;
	
	// Процент оплаты
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПроцентОплаты) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан процент оплаты!", Отказ);
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
	КонецЕсли;
	

	// БазовыйПериодНачало
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода начисления!", Отказ, Заголовок);
	КонецЕсли;

	// БазовыйПериодКонец
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода начисления!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()


Процедура ДобавитьСтрокуОсновныхНачислений(Выборка, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Выборка);
	
 	Движение.ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(Выборка.СпособРасчета, Выборка.ВидРасчета.ВидВремени, Выборка.СуммированныйУчетРабочегоВремени,Движение.ВидУчетаВремениДляСредней);

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСтрокамДокумента, НаборРасчетСреднего)
	
	Движение = НаборРасчетСреднего.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры 

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоСтрокамДокумента)
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Проверим непрерывночть следования записей начислений
    //ПроверитьНепрерывностьЗаписейНачислений(Отказ);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	Если Отказ  Тогда
		Возврат;
	КонецЕсли;	
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		////////////////////////////////////////////////////////////////////////
		// основные Начисления
		
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ );   //,Заголовок
			Если НЕ Отказ Тогда
				ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
				ИспользуетсяЕСВ = ПроведениеРасчетов.ИспользуетсяЕСВ(ПериодРегистрации); 
				Если НЕ ИспользуетсяЕСВ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям);
				Иначе
					Если  НЕ ВыборкаПоНачислениям.ВидРасчета.НачислениеЗаСчетФСС Тогда
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям);
					КонецЕсли;
                КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////
		// Расчет средней
		
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоСредним.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЕсли; 

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
		
		// Скопируем параметры начисления
		ПервичныйБольничныйЛист = Основание.Ссылка;
		ДатаНачала = КонецДня(Основание.ДатаОкончания) + 1;
		ДатаОкончания = ДатаНачала;
		Организация = Основание.Организация;
		Сотрудник = Основание.Сотрудник;
		ПричинаНетрудоспособности = Основание.ПричинаНетрудоспособности;
		
		СуммаСредней = Основание.СуммаСредней;
		ПериодРасчетаСреднегоНачало = Основание.ПериодРасчетаСреднегоНачало;
		ПериодРасчетаСреднегоКонец = Основание.ПериодРасчетаСреднегоКонец;
		ВидУчетаВремениДляСредней = Основание.ВидУчетаВремениДляСредней;
		ПроцентОплаты = Основание.ПроцентОплаты;
		СуммаПределаСредней = Основание.СуммаПределаСредней;
		ЧислоМесяцев = Основание.ЧислоМесяцев;
		
		// Скопируем средний заработок
		РасчетСреднего.Загрузить(Основание.РасчетСреднего.Выгрузить());
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтсутствиеНаРаботеОрганизаций") Тогда
		
		// Заполнение шапки
		Запрос = Новый Запрос;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Основной.НомерСтроки			КАК НомерСтроки,
		|	Основной.Сотрудник				КАК Сотрудник,
		|	Основной.ПричинаОтсутствия		КАК ПричинаОтсутствия,
		|	Основной.ДатаНачала				КАК ДатаНачала,
		|	МИНИМУМ( ДОБАВИТЬКДАТЕ( ЕСТЬNULL(Левый.ДатаНачала, ДОБАВИТЬКДАТЕ( КОНЕЦПЕРИОДА(Основной.ДатаНачала, МЕСЯЦ),СЕКУНДА,1)) ,СЕКУНДА, -1))		КАК ДатаОкончания
        |
		|ИЗ	Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК Основной
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК Левый
		|ПО Основной.Сотрудник = Левый.Сотрудник
		|	И	Основной.ДатаНачала < Левый.ДатаНачала
		|	И	Основной.Ссылка = Левый.Ссылка
        |
		|ГДЕ	Основной.Ссылка = &парамРегистратор
		|	И	Основной.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание)
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.НомерСтроки,
		|	Основной.Сотрудник,
		|	Основной.ПричинаОтсутствия,
		|	Основной.ДатаНачала
		|";
		
		
		Запрос.УстановитьПараметр("парамРегистратор",	Основание);
		Запрос.Текст = ТекстЗапроса;
		ВсеБольничные = Запрос.Выполнить().Выгрузить();
		Если ВсеБольничные.Количество() = 0 тогда
			мНеСоздаватьДокумент = Истина;
			#Если Клиент Тогда
			Предупреждение("В документе нет больничных");
			#КонецЕсли
			Возврат;
		КонецЕсли;	
		
		ТекущаяСтрока = ВсеБольничные.ВыбратьСтроку("Выберите работника:");
		
		Если ТекущаяСтрока <> Неопределено Тогда
			
			Комментарий = Основание.Комментарий;
			Организация = Основание.Организация;
			Сотрудник	= ТекущаяСтрока.Сотрудник;
			
			ДатаНачала = ТекущаяСтрока.ДатаНачала;
			ДатаОкончания = ТекущаяСтрока.ДатаОкончания;
			РасчитатьПараметрыСредней();
			
		Иначе
			мНеСоздаватьДокумент = Истина;
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицо(ЭтотОбъект);
	
	Если ПерерассчитываемыйДокумент = Ссылка И НЕ Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть исправлением самого себя!",Отказ);
	КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА


