////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция РассчитатьНачисления(Сотрудники = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	МассивИндексыСтрокНачисления = Новый Массив();
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
		
	// Если почасовое отклонение, то записываем движения в регистр ВнутрисменноеВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = РегистрыНакопления.ВнутрисменноеВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейРабочееВремя.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
			ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, НаборЗаписейРабочееВремя);

			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	НаборЗаписейРабочееВремя.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборЗаписейРабочееВремя.Очистить();
		НаборЗаписейРабочееВремя.Записать();
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		
		// Заполним записи в наборе записей регистра
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		Движение.СторнируемыйДокумент = СтрокаСторно.Регистратор;

		// и в табличной части
		Движение = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.ДатаНачала		= СтрокаСторно.ПериодДействияНачало;   
		Движение.ДатаОкончания	= СтрокаСторно.ПериодДействияКонец; 
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		Движение.СторнируемыйДокумент = СтрокаСторно.Регистратор;
		
		МассивИндексыСтрокНачисления.Добавить(Движение.НомерСтроки-1);
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
		
	// рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники, 
														КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборЗаписейРабочееВремя.Очистить();
	НаборЗаписейРабочееВремя.Записать();
	
	Записать();
	
	Возврат Не Отказ;
	
КонецФункции // РассчитатьНачисления()

Процедура Перерассчитать( Сотрудники = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых сорудников
	СотрудникиСписок = Новый СписокЗначений;
	Если Сотрудники = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|";
		
		Запрос.Текст = ТекстЗапроса;
		СотрудникиСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
	Иначе
		
		СотрудникиСписок = Сотрудники;
		
	КонецЕсли;
	
	// если не перерассчитываем никого - возврат
	Если СотрудникиСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// читаем все данные 
	НачатьТранзакцию();
	Прочитать();
	
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
	ЗафиксироватьТранзакцию();
	
	////////////////////////////////////////////////////////////////////////
	// Основные начисления
	Если Истина Тогда
		// перерассчитываем записи начислений
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
											Движения.ОсновныеНачисленияРаботниковОрганизаций, 
											Начисления, 
											, 
											СотрудникиСписок);
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	КонецЕсли;
	
	// записываем документ перед вызовом СформироватьВзаиморасчетыСРаботниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Взаиморасчеты с работниками
	Если Истина Тогда
		// сначала удалим сведения о взаиморасчетах с работниками
		ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
		ПоследнееДвижение = ВзаиморасчетыСРаботникамиОрганизаций.Количество()-1;
		// удалим записи по всем сотрудника полученного списка
		// обходим в обратном порядке
		Для Сч = 0 По ПоследнееДвижение Цикл
			Если СотрудникиСписок.НайтиПоЗначению(ВзаиморасчетыСРаботникамиОрганизаций[ПоследнееДвижение - Сч].Сотрудник) <> Неопределено Тогда
				ВзаиморасчетыСРаботникамиОрганизаций.Удалить(ПоследнееДвижение - Сч);
			КонецЕсли;
		КонецЦикла;
		
		// теперь сформируем начисления к выплате по начислениям документа для перерассчитываемых работников
		////СформироватьВзаиморасчетыСРаботниками( СотрудникиСписок );
		
	КонецЕсли;
	
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоКоторымВыполненПерерасчет(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
КонецПроцедуры // Перерассчитать()

Функция ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	

	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		// получим список Сотрудников для перерасчета
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент
		|";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	ИначеЕсли Сотрудники <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	Иначе
		// получим список Сотрудников для перерасчета
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ Документ.НевыходыВОрганизациях.Начисления КАК Перерасчет
		|ГДЕ Перерасчет.Ссылка = &ПерерассчитываемыйДокумент
		|";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	КонецЕсли;	
	
	Если СотрудникиПерерасчета.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("СотрудникиПерерасчета", СотрудникиПерерасчета);
	
	// выполним запрос к Начисления
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Назначение,
	|	Начисления.ФизЛицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.НормаДнейЗаМесяц,
	|	Начисления.НормаЧасовЗаМесяц,
	|	-Начисления.ОплаченоДнейЧасов	КАК ОплаченоДнейЧасов,
	|	-Начисления.Результат			КАК Результат,
	|	-Начисления.ОтработаноДней		КАК ОтработаноДней,
	|	-Начисления.ОтработаноЧасов		КАК ОтработаноЧасов,
	|	-Начисления.НормаДней			КАК НормаДней,
	|	-Начисления.НормаЧасов			КАК НормаЧасов,
	|	-Начисления.КалендарныеДни		КАК КалендарныеДни,
	|	Начисления.ГрафикРаботы,
	|	Начисления.ВидУчетаВремениДляСредней,
	|	Начисления.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	ИСТИНА КАК Сторно,
	|	Начисления.Ссылка КАК СторнируемыйДокумент,
	|	Начисления.НомерСтроки,
	|	Начисления.Авторасчет
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И Начисления.Сотрудник В(&СотрудникиПерерасчета)
	|	И Начисления.Ссылка.Проведен
	|
    |ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Назначение,
	|	Начисления.ФизЛицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.НормаДнейЗаМесяц,
	|	Начисления.НормаЧасовЗаМесяц,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Начисления.ГрафикРаботы,
	|	Начисления.ВидУчетаВремениДляСредней,
	|	Начисления.ОплачиватьЧасов,
	|	ЛОЖЬ,
	|	NULL,
	|	Начисления.НомерСтроки,
	|	Начисления.Авторасчет
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И Начисления.Сотрудник В(&СотрудникиПерерасчета)
	|	И Начисления.Ссылка.Проведен
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сторно УБЫВ,Начисления.НомерСтроки";
	
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Записать();
	
	Возврат Истина;
	
КонецФункции  // ЗаполнитьПоПерерассчитываемомуДокументу()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,
	|	ПериодРегистрации, 
	|	Ответственный, 
	| 	Ссылка
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачислениям( Сотрудники = Неопределено )

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Если НЕ (Сотрудники = Неопределено) Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = " И СтрокиНачисления.Сотрудник В (&парамСотрудники) ";
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;
	СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокСтруктурныхПодразделений.Добавить(Организация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений", СписокСтруктурныхПодразделений);

	Запрос.Текст =
	"ВЫБРАТЬ
	// Свойства
	|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.ДатаНачала					КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания				КАК ПериодДействияКонец,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.СторнируемыйДокумент,
	|
	// Измерения
	|	СтрокиНачисления.Ссылка.Организация КАК организация,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Назначение,
	|
	// Ресурсы
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	// Реквизиты
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.ГрафикРаботы,
	|	СтрокиНачисления.ОплачиватьЧасов,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
	|			ТОГДА NULL
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|
	// Специализированные параметры для регистра Взаиморасчеты с работников организации и др.
	|	СтрокиНачисления.ВидРасчета.СпособРасчета	КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.СчетУчета		КАК СчетУчета,
	|	СтрокиНачисления.ВидРасчета.ВидВремени		КАК ВидВремени,
	|	ЕСТЬNULL(СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени	КАК ВидИспользованияРабочегоВремени,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В(ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ										КАК ЯвляетсяПочасовымОтклонением,
	|	ВЫБОР
	|		КОГДА (НЕ СтрокиНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|
	// Проверки
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = СтрокиНачисления.Ссылка.Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка" + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()


Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации (месяц)!", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано ответственное лицо!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
	КонецЕсли;
	

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Базовыйпериодначало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода начисления!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода начисления!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()


Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
 	Движение.ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидВремени, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, НаборЗаписей)
	
	Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период = ВыборкаПоНачислениям.ПериодДействияНачало;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоНачислениям.Сотрудник;
		Движение.Назначение							= ВыборкаПоНачислениям.Назначение;
		Движение.Организация 						= ВыборкаПоНачислениям.Организация;
		Движение.ВидИспользованияРабочегоВремени 	= ВыборкаПоНачислениям.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Часов			= ВыборкаПоНачислениям.ОплачиватьЧасов;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

Процедура ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций(ВыборкаПоСтрокамДокумента)
	
	Если ВыборкаПоСтрокамДокумента.Результат <> 0 Тогда
		
		Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период					= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.Организация			= ВыборкаПоСтрокамДокумента.Организация;
		Движение.Сотрудник				= ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
		Движение.СчетУчета				= ВыборкаПоСтрокамДокумента.СчетУчета;
	

		// Ресурсы
		Движение.СуммаВзаиморасчетов	= ВыборкаПоСтрокамДокумента.Результат;
		
		Движение.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления;		
		
	КонецЕсли;

	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.			
			
			// получим реквизиты табличной части
			РезультатЗапросаПоНачисления = СформироватьЗапросПоНачислениям();
			ВыборкаПоНачислениям = РезультатЗапросаПоНачисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);

				Если НЕ Отказ Тогда
					
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
					ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
					ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций(ВыборкаПоНачислениям);
						
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтсутствиеНаРаботеОрганизаций") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		// Заполнение табличной части
		Запрос = Новый Запрос;
		Запрос.Текст = "
		               |ВЫБРАТЬ
		               |	ТЧРаботникиОрганизации.Сотрудник	КАК Сотрудник,
					   |    ВЫБОР КОГДА ТЧРаботникиОрганизации.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
					   |     ТОГДА ТЧРаботникиОрганизации.Сотрудник
					   |     ИНАЧЕ ТЧРаботникиОрганизации.Сотрудник.ОсновноеНазначение
					   |    КОНЕЦ КАК Назначение,
					   |	ТЧРаботникиОрганизации.ДатаНачала	КАК ДатаНачала,
		               |	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		               |	ДОБАВИТЬКДАТЕ(МИНИМУМ(ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала), ДЕНЬ, -(1)) КАК ДатаОкончания,
					   |	ТЧРаботникиОрганизации.ДатаНачала	КАК БазовыйПериодНачало,
		               |	ДОБАВИТЬКДАТЕ(МИНИМУМ(ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала), ДЕНЬ, -(1)) КАК БазовыйПериодКонец,
					   |	ИСТИНА КАК Авторасчет,
					   |
		               |	&ВидРасчета КАК ВидРасчета
		               |
		               |	ИЗ	Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		               |
		               |	ЛЕВОЕ СОЕДИНЕНИЕ (
		               |            ВЫБРАТЬ
		               |				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		               |				МАКСИМУМ(Работники.Период) КАК Период
		               |		
		               |			ИЗ	Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		               |
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		               |				ПО	ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник 
		               |				И	Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала
		               |		
		               |			ГДЕ ТЧРаботникиОрганизации.Ссылка = &ДокументОснование
		               |		
		               |			СГРУППИРОВАТЬ ПО
		               |				ТЧРаботникиОрганизации.НомерСтроки
		               |		
		               |			) КАК ДатыПоследнихДвиженийРаботников	
		               |		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
		               |		
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		               |		ПО ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник 
		               |		И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
		               |		
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации
		               |		ПО ТЧРаботникиОрганизации.Ссылка = ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.Ссылка 
		               |		И ТЧРаботникиОрганизации.Сотрудник = ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.Сотрудник 
		               |		И ТЧРаботникиОрганизации.ДатаНачала < ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала 
		               |		И (ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ПричинаОтсутствия = &Работает)
		               |
		               |ГДЕ
		               |	ТЧРаботникиОрганизации.Ссылка = &ДокументОснование И
		               |	ТЧРаботникиОрганизации.ПричинаОтсутствия = &Отсутствие
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТЧРаботникиОрганизации.Сотрудник,
					   |    ВЫБОР КОГДА ТЧРаботникиОрганизации.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
					   |     ТОГДА ТЧРаботникиОрганизации.Сотрудник
					   |     ИНАЧЕ ТЧРаботникиОрганизации.Сотрудник.ОсновноеНазначение
					   |    КОНЕЦ,
		               |	ТЧРаботникиОрганизации.ДатаНачала,
		               |	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации";
					   
		Запрос.УстановитьПараметр("Отсутствие", Перечисления.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине);					   
		Запрос.УстановитьПараметр("ДокументОснование", Основание);					   
		Запрос.УстановитьПараметр("Работает", Перечисления.СостоянияРаботникаОрганизации.Работает);					   
		Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НевыходРегл);					   
		Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтпускаОрганизаций") Тогда
		
		Запрос = Новый Запрос;
		
		ТекстЗапроса = "ВЫБРАТЬ
	   |	ВидыОтпусков.ссылка КАК ВидОтпуска,
	   |	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
	   |ИЗ
	   |	Справочник.ВидыОтпусков КАК ВидыОтпусков
	   |	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	   |	ПО ВидыОтпусков.Ссылка = ОсновныеНачисленияОрганизаций.ВидОтпуска
	   |
	   |УПОРЯДОЧИТЬ ПО
	   |    ОсновныеНачисленияОрганизаций.Ссылка.Предопределенный
	   |";
		
		Запрос.Текст = ТекстЗапроса;
		ВидыРасчетов = Запрос.Выполнить().Выгрузить();
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		// Заполнение табличной части
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТЧРаботникиОрганизации.Сотрудник,
		               |	ТЧРаботникиОрганизации.ВидОтпуска,
		               |	ТЧРаботникиОрганизации.ДатаНачала,
		               |	ТЧРаботникиОрганизации.ДатаОкончания,
		               |	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации,
		               |	ДанныеПоРаботникуДоНазначения.ГрафикРаботы
		               |		               
					   |ИЗ  Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		               |		               
		               |ЛЕВОЕ СОЕДИНЕНИЕ (
		               |		
		               |	ВЫБРАТЬ
		               |		ТЧРаботникиОрганизации.НомерСтроки			КАК НомерСтроки,
		               |		МАКСИМУМ(РегРаботникиОрганизации.Период)	КАК Период
		               |	
		               |	ИЗ	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		               |	
		               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РегРаботникиОрганизации
		               |	ПО	ТЧРаботникиОрганизации.Сотрудник = РегРаботникиОрганизации.Сотрудник 
					   |	И	РегРаботникиОрганизации.Период <= ТЧРаботникиОрганизации.ДатаНачала
		               |		
		               |	ГДЕ	ТЧРаботникиОрганизации.Ссылка = &ДокументОснование
		               |		
		               |	СГРУППИРОВАТЬ ПО
		               |		ТЧРаботникиОрганизации.НомерСтроки
		               |		
		               |) КАК ДатыПоследнихДвиженийРаботников
		               |ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
		               |		
		               |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		               |ПО	ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник 
					   |И	ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
		               |
		               |ГДЕ
		               |	ТЧРаботникиОрганизации.Ссылка = &ДокументОснование И
		               |	ТЧРаботникиОрганизации.ВидОтпуска В(&МассивПричин)";
					   
		МассивПричин = Новый Массив;
		Для Каждого ВидРасчета Из ВидыРасчетов Цикл
			Если НЕ ЗначениеЗаполнено(ВидРасчета.ВидРасчета) Тогда
				Продолжить;
			Конецесли;	
			Если ВидРасчета.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
				МассивПричин.Добавить(ВидРасчета.ВидОтпуска);
			КонецЕсли;	
		КонецЦикла;	
		Запрос.УстановитьПараметр("МассивПричин", МассивПричин);					   
		Запрос.УстановитьПараметр("ДокументОснование", Основание);					   
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() цикл
			
			НачДата = Выборка.ДатаНачала;
			
			Пока НачДата <= Выборка.ДатаОкончания Цикл
				
				КонДата = Мин(КонецМесяца(НачДата), Выборка.ДатаОкончания);
				
				НоваяСтрока = Начисления.Добавить();
				НоваяСтрока.Сотрудник = Выборка.Сотрудник;
				Если ЗначениеЗаполнено(Выборка.Сотрудник.ОсновноеНазначение) Тогда
					НоваяСтрока.Назначение = Выборка.Сотрудник.ОсновноеНазначение;
				Иначе
					НоваяСтрока.Назначение = Выборка.Сотрудник;
				КонецЕсли;	
				НоваяСтрока.ДатаНачала = НачДата;
				НоваяСтрока.ДатаОкончания = КонДата;
				НоваяСтрока.БазовыйПериодНачало = НачДата;
				НоваяСтрока.БазовыйПериодКонец = КонДата;
				НоваяСтрока.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
				НоваяСтрока.ГрафикРаботы = Выборка.ГрафикРаботы;
				
				ВидРасчета = ВидыРасчетов.Найти(Выборка.ВидОтпуска,"ВидОтпуска");
				Если ВидРасчета = Неопределено Тогда 
					НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
				ИначеЕсли ВидРасчета.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда 
					НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
				Иначе
					НоваяСтрока.ВидРасчета = ВидРасчета.ВидРасчета;
				КонецЕсли;
				
				НачДата = ДобавитьМесяц(НачалоМесяца(НачДата), 1);
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(Начисления);
	
	Если ПерерассчитываемыйДокумент = Ссылка И НЕ Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть исправлением самого себя!",Отказ);
	КонецЕсли;	
	
КонецПроцедуры
