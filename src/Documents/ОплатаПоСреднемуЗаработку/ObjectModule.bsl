////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ
//
#Если Клиент Тогда

Функция ПечатьСредняя() Экспорт
	ТабельныйНомер = Сотрудник.Код;

	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Средняя");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ЭтотОбъект);
	ОбластьШапка.Параметры.ТабельныйНомер = ТабельныйНомер;
	ОбластьШапка.Параметры.Дата = Формат(Дата,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ДатаНачала = Формат(ДатаНачала,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ДатаОкончания = Формат(ДатаОкончания,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПериодРасчетаСреднегоНачало = Формат(ПериодРасчетаСреднегоНачало,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПериодРасчетаСреднегоКонец = Формат(ПериодРасчетаСреднегоКонец,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьШапка);
	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСреднего");
	
	табСредняяКоэф = РасчетСреднего.Выгрузить();
    табСредняяКоэф.Свернуть("БазовыйПериодНачало,БазовыйПериодКонец","КоэффициентПовышенияОкладов");
    табСредняяКоэф.Сортировать("БазовыйПериодНачало Убыв");
	Коэф = КоэффициентПовышенияОкладов;
	КоэфТек = 1;
	Для Каждого СтрКоэф Из табСредняяКоэф Цикл
		Коэф = Коэф * КоэфТек;
		КоэфТек = СтрКоэф.КоэффициентПовышенияОкладов;
		СтрКоэф.КоэффициентПовышенияОкладов = Коэф;
	КонецЦикла;
    табСредняяКоэф.Сортировать("БазовыйПериодНачало");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета КАК ВидРасчета,
	|	СУММА(ОплатаПоСреднемуЗаработку.Результат) КАК Результат,
	|	СУММА(ОплатаПоСреднемуЗаработку.КалендарныеДни) КАК КалендарныеДни,
	|	СУММА(ОплатаПоСреднемуЗаработку.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(ОплатаПоСреднемуЗаработку.ОтработаноЧасов) КАК ОтработаноЧасов
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку.РасчетСреднего КАК ОплатаПоСреднемуЗаработку
	|ГДЕ
	|	ОплатаПоСреднемуЗаработку.Ссылка.Ссылка = &парамСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПоСреднемуЗаработку.ВидРасчета,
	|	ОплатаПоСреднемуЗаработку.БазовыйПериодНачало
	|УПОРЯДОЧИТЬ ПО
	|	ОплатаПоСреднемуЗаработку.ВидРасчета,
	|	ОплатаПоСреднемуЗаработку.БазовыйПериодНачало
	|ИТОГИ ПО
	|   ОБЩИЕ,
	|	БазовыйПериодНачало,
	|	ВидРасчета
	|";
	
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	табСредняя = Запрос.Выполнить().Выгрузить();
	Рез = Запрос.Выполнить();
	Результат = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидРасчета");
	
	ОбластьШапкаРасетСреднего_Начало 	 = Макет.ПолучитьОбласть("ШапкаСредней|Начало");
	ОбластьШапкаРасетСреднего_ВидРасчета = Макет.ПолучитьОбласть("ШапкаСредней|ВидРасчета");
	ОбластьШапкаРасетСреднего_Конец 	 = Макет.ПолучитьОбласть("ШапкаСредней|Конец");
	
	СтрокаСреднего_Начало				 = Макет.ПолучитьОбласть("СтрокаСреднего|Начало");
	СтрокаСреднего_ВидРасчета            = Макет.ПолучитьОбласть("СтрокаСреднего|ВидРасчета");
	СтрокаСреднего_Конец                 = Макет.ПолучитьОбласть("СтрокаСреднего|Конец");
	
	ТабДокумент.Вывести(ОбластьШапкаРасетСреднего_Начало);
	
	КоличествоВставляемыхОбластей = 0;
	Пока Результат.Следующий() Цикл
		ОбластьШапкаРасетСреднего_ВидРасчета.Параметры.ВидРасчета = Результат.ВидРасчета;
		ТабДокумент.Присоединить(ОбластьШапкаРасетСреднего_ВидРасчета);
		КоличествоВставляемыхОбластей = КоличествоВставляемыхОбластей + 1;
	КонецЦикла;
	ОбластьДляОбъединения = ТабДокумент.Область(15,5,15,5+КоличествоВставляемыхОбластей-1);
	ОбластьДляОбъединения.Объединить();
	
	ТабДокумент.Присоединить(ОбластьШапкаРасетСреднего_Конец);
	
	ИндКоэф = 0;
	ВыборкаПериод = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БазовыйПериодНачало");
	Пока ВыборкаПериод.Следующий() Цикл
		СтрКоєф = табСредняяКоэф[ИндКоэф];
		СтрокаСреднего_Начало.Параметры.Год   =	Формат(Год(ВыборкаПериод.БазовыйПериодНачало),"ЧГ=0");
		СтрокаДатыМесяца = "";
		Если СтрКоєф.БазовыйПериодНачало <> НачалоМесяца(СтрКоєф.БазовыйПериодНачало)
			ИЛИ СтрКоєф.БазовыйПериодКонец <> НачалоДня(КонецМесяца(СтрКоєф.БазовыйПериодКонец)) Тогда
			СтрокаДатыМесяца = "
			|("+День(СтрКоєф.БазовыйПериодНачало)+"-"+День(СтрКоєф.БазовыйПериодКонец)+")";
		КонецЕсли;
		СтрокаСреднего_Начало.Параметры.Месяц = Формат(СтрКоєф.БазовыйПериодНачало, "ДФ='ММММ'")+СтрокаДатыМесяца;
		ТабДокумент.Вывести(СтрокаСреднего_Начало);
		
		ВыборкаВидРасчета = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидРасчета");
		Пока ВыборкаВидРасчета.Следующий() Цикл
			
			СтрокаСреднего_ВидРасчета.Параметры.Результат = ВыборкаВидРасчета.Результат;
			ТабДокумент.Присоединить(СтрокаСреднего_ВидРасчета);
			
			СтрокаСреднего_Конец.Параметры.КоэффициентПовышенияОкладов = СтрКоєф.КоэффициентПовышенияОкладов;
			
		КонецЦикла;
		
		СтрокаСреднего_Конец.Параметры.ОтработаноДней = ВыборкаПериод.ОтработаноДней;	
		СтрокаСреднего_Конец.Параметры.ОтработаноЧасов = ВыборкаПериод.ОтработаноЧасов;	
		СтрокаСреднего_Конец.Параметры.КалендарныеДни = ВыборкаПериод.КалендарныеДни;	
		
		ТабДокумент.Присоединить(СтрокаСреднего_Конец);	
		ИндКоэф = ИндКоэф + 1;
	КонецЦикла;
	
	ОбластьИтогиСреднего_Начало			= Макет.ПолучитьОбласть("ИтогиСреднего|Начало");
	ОбластьИтогиСреднего_ВидРасчета		= Макет.ПолучитьОбласть("ИтогиСреднего|ВидРасчета");
	ОбластьИтогиСреднего_Конец			= Макет.ПолучитьОбласть("ИтогиСреднего|Конец");
	
	ОбластьИтогиСреднего_ВидРасчета.Параметры.Результат		= табСредняя.Итог("Результат");
	
	ТабДокумент.Вывести(ОбластьИтогиСреднего_Начало);
	Результат.Сбросить();
	ВыборкаВидРасчета = Результат;
    Пока ВыборкаВидРасчета.Следующий() Цикл
		ОбластьИтогиСреднего_ВидРасчета.Параметры.Результат = ВыборкаВидРасчета.Результат;
		ТабДокумент.Присоединить(ОбластьИтогиСреднего_ВидРасчета);
	КонецЦикла;
	
	Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Пока Выборка.Следующий() Цикл
		ОбластьИтогиСреднего_Конец.Параметры.ОтработаноДней		= Выборка.ОтработаноДней;
		ОбластьИтогиСреднего_Конец.Параметры.ОтработаноЧасов	= Выборка.ОтработаноЧасов;
		ОбластьИтогиСреднего_Конец.Параметры.КалендарныеДни		= Выборка.КалендарныеДни;
	КонецЦикла;
	ТабДокумент.Присоединить(ОбластьИтогиСреднего_Конец);
	
	ОбластьШапка2 = Макет.ПолучитьОбласть("Шапка2");
	Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ОбластьШапка2.Параметры.СредняяТекст = "Среднедневная (по рабочим дням):";
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ОбластьШапка2.Параметры.СредняяТекст = "Среднечасовая (по рабочим часам):";
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
		ОбластьШапка2.Параметры.СредняяТекст = "Среднедневная (по календарным дням с вычетом праздников):";
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
		ОбластьШапка2.Параметры.СредняяТекст = "Среднедневная (по календарным дням без вычета праздников):";
	КонецЕсли;
	ОбластьШапка2.Параметры.СуммаСредней = СуммаСредней;
	ТабДокумент.Вывести(ОбластьШапка2);
	
	ОбластьСтроки2 = Макет.ПолучитьОбласть("СтрокаНачисления");
	
	Для Каждого СтрокаТЧ Из Начисления Цикл
		ОбластьСтроки2.Параметры.Заполнить(СтрокаТЧ);
		ТабДокумент.Вывести(ОбластьСтроки2);
	КонецЦикла;
	
	ОбластьИтогиНачислений = Макет.ПолучитьОбласть("ИтогиНачислений");
	ОбластьИтогиНачислений.Параметры.НормаДней = Начисления.Итог("НормаДней");
	ОбластьИтогиНачислений.Параметры.НормаЧасов = Начисления.Итог("НормаЧасов");
	ОбластьИтогиНачислений.Параметры.КалендарныеДни = Начисления.Итог("КалендарныеДни");
	ОбластьИтогиНачислений.Параметры.Результат = Начисления.Итог("Результат");
    ТабДокумент.Вывести(ОбластьИтогиНачислений);

	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Ответственный = Ответственный.ФизЛицо.Наименование;
	ТабДокумент.Вывести(ОбластьПодвал);	
	
	Возврат ТабДокумент;	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если  ИмяМакета = "Средняя" Тогда
		ТабДокумент = ПечатьСредняя()
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Начисление отпуска "));

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	Возврат Новый Структура("Средняя", "Расчет средней");
КонецФункции // ПолучитьСтруктуруПечатныхФорм()




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ТБЛИЧНОЙ ЧАСТИ РасчетСреднего

// Расчитывает сумму средней по значениям в ТЧ РасчетСреднего 
//
Функция РасчитатьСреднюю() Экспорт
	
	СуммаСредней = 0;
	ОплачиваемоеВремя = 0;
	
	Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноДней");
		
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноЧасов");
		
	Иначе
		ОплачиваемоеВремя = РасчетСреднего.Итог("КалендарныеДни");
		
	КонецЕсли;
	
	СуммаСредней = ?(ОплачиваемоеВремя = 0 , 0, РасчетСреднего.Итог("Результат") / ОплачиваемоеВремя);
	
КонецФункции  // РасчитатьСреднюю()

Функция АвтозаполнениеРасчетСреднего() Экспорт
	
	//	1. Проверка если данных для расчета средней ещ нет (человек мало проработал, начисляем по окладу)
	//
	Если  НачалоДня(ДобавитьМесяц(ПериодРасчетаСреднегоНачало,1)-1) > ПериодРасчетаСреднегоКонец Тогда
		
		// проработал меньше целого месяца
		// если есть за что платить, пользователю прийдется заполнить эти суммы вручную
		//
		СоздатьСтрокуРасчетСреднего( ПланыВидовРасчета.СреднийЗаработок.ПоОкладу, 1, НачалоМесяца(ПериодРасчетаСреднегоНачало), КонецМесяца(ПериодРасчетаСреднегоНачало));
	
		Записать();
	
		Возврат Истина;
	КонецЕсли;

	
	// 2. Данные для расчета есть - рассчитываем
	//
	
	// Сначала определим коэффициент увеличения оклада 
	// если он вдруг поменялся за время пока за человеком 
	// сохранялась средняя ЗП
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
	Запрос.УстановитьПараметр( "парамНачало",		КонецДня(ПериодРасчетаСреднегоКонец) + 1 );
	Запрос.УстановитьПараметр( "парамКонец",		ДатаОкончания );
	ТекстЗапроса = " 
	|ВЫБРАТЬ
	|	КоэффициентПовышения.Период,
	|	КоэффициентПовышения.Коэффициент
	|ИЗ РегистрСведений.КоэффициентыПовышенияОкладов КАК	КоэффициентПовышения		
	|ГДЕ	КоэффициентПовышения.Сотрудник	= &парамСотрудник
	|	И	КоэффициентПовышения.Период >= &парамНачало
	|	И	КоэффициентПовышения.Период <= &парамКонец
	|";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Коэф = 1;
	Пока Выборка.Следующий() Цикл
		Коэф = Коэф * Выборка.Коэффициент;
	КонецЦикла;
	КоэффициентПовышенияОкладов = Коэф;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
	Запрос.УстановитьПараметр( "парамНачало",		ПериодРасчетаСреднегоНачало );
	Запрос.УстановитьПараметр( "парамКонец",		ПериодРасчетаСреднегоКонец );
	
	//	ВТВремя
	Если Истина Тогда
		//	Описание:
		// 		таблица периодов для расчета средней
		//		
		Начало = ПериодРасчетаСреднегоНачало;
		Конец = ПериодРасчетаСреднегоКонец;
		Запрос.УстановитьПараметр( "парамНачало1", Начало );
		Запрос.УстановитьПараметр( "парамКонец1", Мин( КонецМесяца(Начало), Конец ) );
		ТекстЗапросаВТ = " 
		|	ВЫБРАТЬ
		|		&парамНачало1	КАК БазовыйПериодНачало,
		|		&парамКонец1	КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТВремя	
		|";
		
		Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
		Инд = 2;
		Пока Начало <= Конец Цикл
			
			Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
			Запрос.УстановитьПараметр( "парамКонец"+Инд    , Мин( КонецМесяца(Начало), Конец ) );
			ТекстЗапросаВТ = ТекстЗапросаВТ + " 
			|	ОБЪЕДИНИТЬ	  
			|	ВЫБРАТЬ
			|		&парамНачало"+Инд+"	КАК БазовыйПериодНачало,
			|		&парамКонец"+Инд+"	КАК БазовыйПериодКонец
			|";	  
			Инд = Инд + 1;
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
			
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТВремя = "ВТВремя";
		
		ТекстЗапросаВТ =" 
		|	ОБЪЕДИНИТЬ *  
		|	ИЗ ВТВремя
		|";	  
		Запрос.Текст = ТекстЗапросаВТ;
	КонецЕсли;
	
	//	ВТКоэффициент
	Если Истина Тогда
		//	Описание:
		// 		таблица с коффициентами для оклада и периодами (нижняя граница)
		//		
		ТекстЗапросаВТ = " 
		|	ВЫБРАТЬ
		|		КоэффициентПовышения.Период			КАК ПериодНачало,
		|		КоэффициентПовышения.Коэффициент	КАК Коэффициент,
		|		МИНИМУМ(
		|			ВЫБОР	КОГДА КоэффициентПовышения1.Период ЕСТЬ NULL 
		|						ТОГДА &парамКонец 	
		|					ИНАЧЕ ДОБАВИТЬКДАТЕ(КоэффициентПовышения1.Период,СЕКУНДА,-1) 
		|			КОНЕЦ ) КАК ПериодКонец
		|ПОМЕСТИТЬ ВТКоэффициент	
		|	ИЗ (
		|			ВЫБРАТЬ
		|				&парамНачало	КАК Период,
		|				1	КАК Коэффициент
		|	
		|	    	ОБЪЕДИНИТЬ 
		|			ВЫБРАТЬ
		|				КоэффициентПовышения.Период,
		|				КоэффициентПовышения.Коэффициент
		|			ИЗ РегистрСведений.КоэффициентыПовышенияОкладов КАК	КоэффициентПовышения		
		|			ГДЕ		КоэффициентПовышения.Сотрудник	= &парамСотрудник
		|				И	КоэффициентПовышения.Период > &парамНачало
		|	)КАК КоэффициентПовышения
		|	
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КоэффициентыПовышенияОкладов 	КАК КоэффициентПовышения1
		|	ПО		КоэффициентПовышения1.Сотрудник	= &парамСотрудник
		|		И	КоэффициентПовышения1.Период > КоэффициентПовышения.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		КоэффициентПовышения.Период,
		|		КоэффициентПовышения.Коэффициент
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТКоэффициент = "ВТКоэффициент";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало >= ВсеПериоды.БазовыйПериодНачало И КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.Коэффициент ИНАЧЕ 1 КОНЕЦ	КАК Коэффициент,
	|	ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодНачало ТОГДА ВсеПериоды.БазовыйПериодНачало ИНАЧЕ КоэффициентПериоды.ПериодНачало КОНЕЦ	КАК БазовыйПериодНачало,
	|	ВЫБОР КОГДА КоэффициентПериоды.ПериодКонец <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.ПериодКонец ИНАЧЕ ВсеПериоды.БазовыйПериодКонец КОНЕЦ	КАК БазовыйПериодКонец
	|ИЗ ВТВремя КАК ВсеПериоды
	|	
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоэффициент КАК КоэффициентПериоды
	|ПО		ВсеПериоды.БазовыйПериодНачало <= КоэффициентПериоды.ПериодКонец
	|И		КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец	
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР	КОГДА КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодНачало 
	|				ТОГДА ВсеПериоды.БазовыйПериодНачало
	|			ИНАЧЕ КоэффициентПериоды.ПериодНачало КОНЕЦ УБЫВ
	|";			
	Запрос.Текст = ТекстЗапроса;
	
	мЕстьПремии = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
	мЕстьГодоваяПремия = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку, Выборка.Коэффициент, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
		Если мЕстьПремии  Тогда
			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
		КонецЕсли;
		Если мЕстьГодоваяПремия Тогда
			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
		КонецЕсли;
		
	КонецЦикла;
	
	Записать();
	
КонецФункции  // АвтозаполнениеРасчетСреднего()


Функция РассчитатьРасчетСреднего(КомментироватьРасчет = Ложь) Экспорт
	
	// очистить расчитываемые поля в ТЧ РасчетСреднего
	Для каждого ТекущаяСтрока Из РасчетСреднего Цикл
		
		Если ТекущаяСтрока.Авторасчет Тогда
			ТекущаяСтрока.Результат = 0;
			ТекущаяСтрока.РезультатПолный = 0;
			
			ТекущаяСтрока.ОтработаноДней = 0;
			ТекущаяСтрока.ОтработаноЧасов = 0;
			ТекущаяСтрока.КалендарныеДни = 0;
			ТекущаяСтрока.НормаДней = 0;
			ТекущаяСтрока.НормаЧасов = 0;
		КонецЕсли;
		
	КонецЦикла;
	Записать();
	
	// 1. Если расчет по Окладу
	//
	Если  РасчетСреднего.Количество() > 0 И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоОкладу Тогда
		
		ПараметрыОклада = ПроведениеРасчетов.ПолучитьПараметыОклада(ДатаНачала, Сотрудник);
		РасчетСреднего[0].Результат			= ПараметрыОклада["Оклад"];
		РасчетСреднего[0].ОтработаноДней	= ПараметрыОклада["НормаДней"];
		РасчетСреднего[0].ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
		РасчетСреднего[0].КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
		
		РасчитатьСреднюю();
		Записать();
		Возврат Истина;
		
	КонецЕсли;
	
	// 2. Стандартный расчет
    //
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	Отказ = Ложь;
	НаборСредних = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборСредних.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоСредним.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, НаборСредних);
		КонецЕсли;
		
	КонецЦикла;
	НаборСредних.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения
		НаборСредних.Очистить();
		НаборСредних.Записать();
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	ОсновнойВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	тКоэффициентПовышенияОкладов = КоэффициентПовышенияОкладов;
	
	Выборка = ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка).Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = РасчетСреднего.Получить( Выборка.НомерСтроки - 1 );
		
		Если НЕ СтрокаТабличнойЧасти.Авторасчет Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Результат				= Окр(Выборка.Результат,2) * тКоэффициентПовышенияОкладов;
		СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
		
		СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
		СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
		Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
			И СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку Тогда
			СтрокаТабличнойЧасти.КалендарныеДни		= 1 + День(Выборка.БазовыйПериодКонец) - День(Выборка.БазовыйПериодНачало);
		Иначе
			СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДни;
		КонецЕсли;
		СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
		СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
		
		Если Выборка.ВидРасчета = ОсновнойВидРасчета Тогда
			тКоэффициентПовышенияОкладов = тКоэффициентПовышенияОкладов * Выборка.КоэффициентПовышенияОкладов;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборСредних.Очистить();
	НаборСредних.Записать();
	
	РасчитатьСреднюю();
	Записать();
	
КонецФункции  // РассчитатьРасчетСреднего()

Функция СоздатьСтрокуРасчетСреднего( ВидРасч, Коэффициент, БазовыйПериодНачало, БазовыйПериодКонец) 
	
	// строку втавляем на первую позицию, потому что коэффициент считали в обратном порядке
	СтрокаТабличнойЧасти =  РасчетСреднего.Вставить(0);
	
	СтрокаТабличнойЧасти.Авторасчет 			= Истина;
	СтрокаТабличнойЧасти.ВидРасчета 			= ВидРасч;
	СтрокаТабличнойЧасти.БазовыйПериодНачало 	= БазовыйПериодНачало;
	СтрокаТабличнойЧасти.БазовыйПериодКонец 	= БазовыйПериодКонец;
	СтрокаТабличнойЧасти.КоэффициентПовышенияОкладов = Коэффициент;
	
КонецФункции  // СоздатьСтрокуРасчетСреднего()


Процедура ПолучитьПериодПоРаботнику() Экспорт
	Перем ДатаОкончанияСобытия;
	Перем ДатаПриемаПервыйРабочийДень;
	Перем ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета;
	
	ДатаНачалаСобытия = ДатаНачала;
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	ГрафикРаботы = ПолучитьДанныеОбОтработанномВремени(ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета);
	ПериодПолучен = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДатаПриема) Тогда
		Возврат;
	КонецЕсли;	
	
	// Получим период
	// -1- работает дольше 2-х месяцев
	// -2- работает меньше 2 месяцев, но дольше 1-го месяца
	// -3- работает меньше целого месяца, но в командировку не в первый рабочий день - заполняеи реальный период с даты приема
	// -4- в командировку в первый рабочий день, нет начисленной зарплаты
	Если КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1)) < ДатаПриема Тогда
		// -3- работает меньше целого месяца, но в командировку не в первый рабочий день 
		//    - заполняеи реальный период с даты приема
		// прием в месяце ухода в отпуск
		ПериодРасчетаСреднегоНачало	= ДатаПриема;	
		ПериодРасчетаСреднегоКонец	= НачалоДня(ДатаНачалаСобытия-1);
		ПериодПолучен = Истина;
		
	ИначеЕсли ДатаНачалаСобытия = ДатаПриема Тогда
		// -4- в отпуск в первый рабочий день, нет начисленной зарплаты
		ПериодРасчетаСреднегоНачало	= ДатаПриема;
		ПериодРасчетаСреднегоКонец	= ДатаПриема;
		ПериодПолучен = Истина;
		
	Иначе
		
		Если ОтработаноЗа2Мес Тогда
			ПериодПолучен = Истина;
			Если ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев)>= ДатаПриема Тогда
				// -1- работает дольше 2-и месяцев
				ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев);
				ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
				
			ИначеЕсли КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1)) >= ДатаПриема Тогда
				//-2-3-
				Если ДатаПриемаПервыйРабочийДень Тогда
					// -2- работает меньше 2 месяцев, но дольше 1-го месяца
					// если дата приема первый рабочий день месяца, то месяц считаем целым
					ПериодРасчетаСреднегоНачало	= ДатаПриема;	
					ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
				ИначеЕсли ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -1) > ДатаПриема Тогда
					// -2- работает меньше 2 месяцев, но дольше 1-го месяца
					// если дата приема не первый рабочий день месяца, но есть целые отработанные месяцы
					ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаПриема),1);
					ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
				Иначе
					// -3- работает меньше целого месяца, но в командировку не в первый рабочий день 
					//    - заполняеи реальный период с даты приема
					ПериодРасчетаСреднегоНачало	= ДатаПриема;	
					ПериодРасчетаСреднегоКонец	= НачалоДня(ДатаНачалаСобытия-1);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПериодПолучен И ОтработаноЗа4Мес Тогда
			ПериодПолучен = Истина;
			
			Если ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -4)>= ДатаПриема Тогда
				// -1- работает дольше 2-и месяцев
				ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -4);
				ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия,-2))-1);
				
			ИначеЕсли КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -3)) >= ДатаПриема Тогда
				//-2-3-
				Если ДатаПриемаПервыйРабочийДень Тогда
					// -2- работает меньше 4 месяцев, но дольше 3-го месяца
					// если дата приема первый рабочий день месяца, то месяц считаем целым
					ПериодРасчетаСреднегоНачало	= ДатаПриема;	
					ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия,-2))-1);
					
				ИначеЕсли ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -3) > ДатаПриема Тогда
					// -2- работает меньше 2 месяцев, но дольше 1-го месяца
					// если дата приема не первый рабочий день месяца, но есть целые отработанные месяцы
					ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаПриема),1);
					ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия,-2))-1);;
					
				Иначе
					// -3- работает меньше 3 ех целых месяцев, и в 2 последних месяца ничего не заработал 
					//    - заполняем период с даты приема до конца месяца приема
					ПериодРасчетаСреднегоНачало	= ДатаПриема;	
					ПериодРасчетаСреднегоКонец	= НачалоДня(КонецМесяца(ДатаПриема));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПериодПолучен Тогда
			// -4- расчет по окладу
			ПериодРасчетаСреднегоНачало	= ДатаПриема;
			ПериодРасчетаСреднегоКонец	= ДатаПриема;
			ПериодПолучен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим Вид учета времени для средней
	Если ГрафикРаботы.СуммированныйУчетРабочегоВремени 
		ИЛИ СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены
		ИЛИ ОсновнойВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоЧасам
		ИЛИ ОсновнойВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой
		Тогда
		ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам;
		
	Иначе
		ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПериодПоРаботнику()

Функция		ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень)
	
	ЭтоПервыйРабочийДень = Ложь;
	ДатаПриема = Дата('00010101');
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|       ПриемРаботников.ДатаПриема КАК ДатаПриема,
	|		СУММА(ЕСТЬNULL(Графики.ОсновноеЗначение,0)) КАК ОтработаноДнейСНачалаМесяца
	|   ИЗ (
	|		ВЫБРАТЬ 
	|          	МИНИМУМ(Работники.Период) КАК ДатаПриема
	|		ИЗ РегистрСведений.РаботникиОрганизаций КАК Работники
	|   	ГДЕ Работники.Сотрудник = &парамСотрудник
	|       ) КАК ПриемРаботников
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники 
	|   	ПО		Работники.Сотрудник = &парамСотрудник
	|			И	Работники.Период = ПриемРаботников.ДатаПриема
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК Графики
	|   	ПО  	Графики.Дата >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	|			И	Графики.Дата < Работники.Период
	|			И	Графики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|			// индивидуальные графики и табели не анализируем, так как нас интерисует только норма времени
	|			И	ВЫБОР КОГДА Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА  Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|                     ИНАЧЕ Работники.ГрафикРаботы
	|				КОНЕЦ = Графики.ГрафикРаботы
	|    СГРУППИРОВАТЬ ПО
	|       ПриемРаботников.ДатаПриема
	|";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПриема = Выборка.ДатаПриема;
		ДатаПриемаПервыйРабочийДень = Выборка.ОтработаноДнейСНачалаМесяца = 0;
	КонецЕсли;

	Возврат ДатаПриема;
	
КонецФункции  // ПолучитьДанныеОПриеме()

Функция		ПолучитьДанныеОбОтработанномВремени(ОтработаноЗа2Мес, ОтработаноЗа4Мес, ОсновнойВидРасчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ДатаНачала );
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОсновноеНачисление.ВидРасчета				КАК ОсновнойВидРасчета,
	|	Работники.ГрафикРаботы						КАК ГрафикРаботы,
	|	ЕСТЬNULL(Время2Месяца.ОтработаноЧасов,0)	КАК ОтработаноЗа2Мес,
	|	ЕСТЬNULL(Время4Месяца.ОтработаноЧасов,0)	КАК ОтработаноЗа4Мес
	|ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник) КАК Работники
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		СУММА(Начисления.ОтработаноЧасов)	КАК ОтработаноЧасов
	|   ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|   ГДЕ		Начисления.Сотрудник = &парамСотрудник
	|		И	Начисления.ПериодРегистрации < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
	|       И	Начисления.ПериодДействия >= ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -2)
	|       И	Начисления.ПериодДействия < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
	|) КАК Время2Месяца
	|ПО   ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		СУММА(Начисления.ОтработаноЧасов)	КАК ОтработаноЧасов
	|   ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|   ГДЕ		Начисления.Сотрудник = &парамСотрудник
	|		И	Начисления.ПериодРегистрации < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
	|       И	Начисления.ПериодДействия >= ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -4)
	|       И	Начисления.ПериодДействия <= КОНЕЦПЕРИОДА( ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -3), МЕСЯЦ)
	|) КАК Время4Месяца
	|ПО   ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник И ВидРасчетаИзмерение <> ВидРасчета) КАК ОсновноеНачисление 
	|ПО   ИСТИНА
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОсновнойВидРасчета = Выборка.ОсновнойВидРасчета;
		ГрафикРаботы = Выборка.ГрафикРаботы;
		ОтработаноЗа2Мес = Выборка.ОтработаноЗа2Мес;
		ОтработаноЗа4Мес = Выборка.ОтработаноЗа4Мес;
    КонецЕсли;
		
	Возврат ГрафикРаботы;
	
КонецФункции  // ПолучитьДанныеОПриеме()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ТБЛИЧНОЙ ЧАСТИ Начисления

Процедура АвтозаполнениеНачисления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор",	Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ДатаНачала);
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("парамВидРасчета",	ВидРасчета);
	
	//	ВТВремя
	Если Истина Тогда
		//	Описание:
		// 		таблица периодов по месяцам
		//		
		Начало = ДатаНачала;
		Конец = ДатаОкончания;
		Запрос.УстановитьПараметр( "парамНачало1", Начало );
		ТекстЗапросаВТ = " 
		|	ВЫБРАТЬ
		|		&парамНачало1	КАК ДатаМесяца
		|ПОМЕСТИТЬ ВТВремя	
		|";
		
		Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
		Инд = 2;
		Пока Начало <= Конец Цикл
			Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
			ТекстЗапросаВТ = ТекстЗапросаВТ + " 
			|	ОБЪЕДИНИТЬ	  
			|	ВЫБРАТЬ
			|		&парамНачало"+Инд+"	КАК ДатаМесяца
			|";	  
			Инд = Инд + 1;
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТВремя = "ВТВремя";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Основной.Дата,
	|	Основной.ПериодРегистрации,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|	Основной.Сотрудник,
	|	ВЫБОР КОГДА Основной.ДатаНачала >= Время.ДатаМесяца ТОГДА Основной.ДатаНачала ИНАЧЕ Время.ДатаМесяца КОНЕЦ	КАК ДатаНачала,
	|	ВЫБОР КОГДА Основной.ДатаОкончания <= КОНЕЦПЕРИОДА(Время.ДатаМесяца, МЕСЯЦ) ТОГДА Основной.ДатаОкончания ИНАЧЕ КОНЕЦПЕРИОДА(Время.ДатаМесяца, МЕСЯЦ) КОНЕЦ	КАК ДатаОкончания,
	|	ВЫБОР КОГДА Работники.Сотрудник = Основной.Сотрудник ТОГДА Основной.СуммаСредней ИНАЧЕ 0 КОНЕЦ КАК СуммаСредней,
	|	Основной.ОплачиватьЧасов,
	|	Основной.ВидУчетаВремениДляСредней,
	|  	Основной.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоНачало,
	|  	Основной.ПериодРасчетаСреднегоКонец		КАК ПериодРасчетаСреднегоКонец,
	|
	|	&парамВидРасчета					КАК ВидРасчета,
	|
	|	Работники.Сотрудник 				КАК Назначение,
	|	Работники.ПодразделениеОрганизации	КАК ПодразделениеОрганизации
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+" КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник ИЛИ Сотрудник.ОсновноеНазначение = &парамСотрудник ) КАК Работники
	|ПО		ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТВремя+" КАК Время
	|ПО	ИСТИНА
	|
	|ГДЕ Основной.Ссылка = &парамРегистратор	
	|	И  ЕСТЬNULL(Работники.ЗанимаемыхСтавок,1) > 0
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Основной.Дата,
	|	Основной.ПериодРегистрации,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|	Основной.Сотрудник,
	|	ВЫБОР КОГДА Основной.ДатаНачала >= Время.ДатаМесяца ТОГДА Основной.ДатаНачала ИНАЧЕ Время.ДатаМесяца КОНЕЦ	КАК ДатаНачала,
	|	ВЫБОР КОГДА Основной.ДатаОкончания <= КОНЕЦПЕРИОДА(Время.ДатаМесяца, МЕСЯЦ) ТОГДА Основной.ДатаОкончания ИНАЧЕ КОНЕЦПЕРИОДА(Время.ДатаМесяца, МЕСЯЦ) КОНЕЦ	КАК ДатаОкончания,
	|	0 КАК СуммаСредней,
	|	Основной.ОплачиватьЧасов,
	|	Основной.ВидУчетаВремениДляСредней,
	|  	Основной.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоНачало,
	|  	Основной.ПериодРасчетаСреднегоКонец		КАК ПериодРасчетаСреднегоКонец,
	|
	|	&парамВидРасчета					КАК ВидРасчета,
	|
	|	ЗаменыОрганизаций.ЗаменаСотрудник КАК Назначение,
	|	ЗаменыОрганизаций.ЗаменаПодразделениеОрганизации КАК ПодразделениеОрганизации
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+" КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТВремя+" КАК Время
	|ПО	ИСТИНА
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаменыОрганизаций КАК ЗаменыОрганизаций
	|ПО		ЗаменыОрганизаций.Сотрудник = Основной.Сотрудник 
	|	И	ЗаменыОрганизаций.ДатаНачала <= Основной.ДатаОкончания
	|	И	Основной.ДатаНачала <= ЗаменыОрганизаций.ДатаОкончания
	|
	|ГДЕ Основной.Ссылка = &парамРегистратор	
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;

	Выборка = Запрос.Выполнить().Выбрать();
	
	// каждый цикл это назначение
	Пока Выборка.Следующий() Цикл
		
		// строка движений
		НоваяСтрока = Начисления.Добавить();
		
		// Свойства
		НоваяСтрока.Авторасчет			= Истина;
		НоваяСтрока.ДатаНачала			= Выборка.ДатаНачала;
		НоваяСтрока.ДатаОкончания		= Выборка.ДатаОкончания;
		НоваяСтрока.БазовыйПериодНачало	= Выборка.ДатаНачала;
		НоваяСтрока.БазовыйПериодКонец	= Выборка.ДатаОкончания;
		НоваяСтрока.ВидРасчета			= Выборка.ВидРасчета;
		
		// Измерения
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.Назначение = Выборка.Назначение;
		
		// Реквизиты
		ПроведениеРасчетов.ПроставитьДанныеСтроки(Сотрудник, Выборка.Назначение, НоваяСтрока.ДатаНачала, ПериодРегистрации, Выборка.ВидРасчета, НоваяСтрока);
		НоваяСтрока.Показатель1					= ?(Сотрудник = Выборка.Назначение,Выборка.СуммаСредней, 0);
		НоваяСтрока.ВидУчетаВремениДляСредней	= Выборка.ВидУчетаВремениДляСредней;
		НоваяСтрока.ОплачиватьЧасов				= Выборка.ОплачиватьЧасов; // на случай часовых отклонений
		
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры  // АвтозаполнениеНачисления()

Процедура РассчитатьНачисления( Сотрудники, КомментироватьРасчет = Ложь ) Экспорт
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	МассивИндексыСтрокНачисления = Новый Массив();
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	// Если встретим почасовое отклонение, то записываем движения в регистр РабочееВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = РегистрыНакопления.ВнутрисменноеВремяРаботниковОрганизаций.СоздатьНаборЗаписей();	
	НаборЗаписейРабочееВремя.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента,ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
			ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, НаборЗаписейРабочееВремя);

			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	НаборЗаписейРабочееВремя.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборЗаписейРабочееВремя.Очистить();
		НаборЗаписейРабочееВремя.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		
		// Заполним записи в наборе записей регистра
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		Движение.СторнируемыйДокумент = СтрокаСторно.Регистратор;

		// и в табличной части
		Движение = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);
		Движение.ДатаНачала		= СтрокаСторно.ПериодДействияНачало;   
		Движение.ДатаОкончания	= СтрокаСторно.ПериодДействияКонец; 
		Движение.Сторно						= Истина;
		Движение.Авторасчет					= Истина;
		Движение.СторнируемыйДокумент = СтрокаСторно.Регистратор;

		МассивИндексыСтрокНачисления.Добавить(Движение.НомерСтроки-1);
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
		
	// рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники, 
														КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборЗаписейРабочееВремя.Очистить();
	НаборЗаписейРабочееВремя.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьНачисления


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПЕРЕРАСЧЕТА

Функция ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	// проверять необходимость перерасчета не будем,
	// если процедура запущена, то будем заполнять и пересчитывать
	
	//////////////////////////////////////////////////////////////////////////////////
	// Выполним заполнение данных из перерасчитываемого документа
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	
	// ТЧ Начисления
	Если Истина Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Назначение,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.ВидУчетаВремениДляСредней,
		|	Начисления.НормаДнейЗаМесяц,
		|	Начисления.НормаЧасовЗаМесяц,
		|	-Начисления.Результат КАК Результат,
		|	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|	-Начисления.ОтработаноДней КАК ОтработаноДней,
		|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	-Начисления.КалендарныеДни КАК КалендарныеДни,
		|	-Начисления.НормаДней КАК НормаДней,
		|	-Начисления.НормаЧасов КАК НормаЧасов,
		|	ИСТИНА КАК Сторно,
		|	Начисления.Ссылка КАК СторнируемыйДокумент,
		|	Начисления.Авторасчет КАК Авторасчет
		|ИЗ
		|	Документ."+Метаданные().Имя+".Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И Начисления.Ссылка.Проведен";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	// Сторнировать расчет средней не надо, так как при их расчете все расчитывается заново
	
	//////////////////////////////////////////////////////////////////////////////////
	// Выполним заполнение новых данных, по ПериодуРегистрации указанному 
	// в перерасчитываемом документе, по всем табличным частям
	Записать();
	АвтозаполнениеРасчетСреднего();
	РассчитатьРасчетСреднего();

	АвтозаполнениеНачисления();
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьПоПерерассчитываемомуДокументу()

Процедура Перерассчитать( Сотрудники = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых сорудников
	СотрудникиСписок = Новый СписокЗначений;
	Если Сотрудники = Неопределено Тогда
		
		СотрудникиСписок.Добавить(Сотрудник);

	Иначе
		
		СотрудникиСписок = Сотрудники;
		
	КонецЕсли;
	
	// если не перерассчитываем никого - возврат
	Если СотрудникиСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// читаем все данные 
	НачатьТранзакцию();
	Прочитать();
	
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.РасчетСреднегоЗаработка.Прочитать();
	ЗафиксироватьТранзакцию();
	
	////////////////////////////////////////////////////////////////////////
	// Расчет средней
	Если Истина Тогда
		// перерассчитываем записи начислений
		
		ОсновнойВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
		КоэффициентПовышенияОкладов = 1;
		тКоэффициентПовышенияОкладов = 1;
		
		Выборка = ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка).Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ВидРасчета = ОсновнойВидРасчета Тогда
				КоэффициентПовышенияОкладов = КоэффициентПовышенияОкладов * тКоэффициентПовышенияОкладов;
				тКоэффициентПовышенияОкладов = Выборка.КоэффициентПовышенияОкладов;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = РасчетСреднего.Получить( Выборка.НомерСтроки - 1 );
			
			Если НЕ СтрокаТабличнойЧасти.Авторасчет Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Результат				= Выборка.Результат * КоэффициентПовышенияОкладов;
			СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
			
			СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
			СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
			Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
				И СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку Тогда
				СтрокаТабличнойЧасти.КалендарныеДни		= 1 + День(Выборка.БазовыйПериодКонец) - День(Выборка.БазовыйПериодНачало);
			Иначе
				СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДни;
			КонецЕсли;
			СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
			СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
			
		КонецЦикла;
		
		Движения.РасчетСреднегоЗаработка.Записать(Истина, Истина);
		
		РасчитатьСреднюю();
	КонецЕсли;
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Основные начисления
	
	Если Истина Тогда
		Для Каждого Строка из Движения.ОсновныеНачисленияРаботниковОрганизаций Цикл
			Если Строка.Сторно или НЕ Строка.Авторасчет Тогда
				Продолжить;
			КонецЕсли;
			СпособРасчета = Строка.ВидРасчета.СпособРасчета;
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуКомпенсацияОтпуска
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыходноеПособие Тогда
				Строка.Показатель1 = СуммаСредней;
			КонецЕсли;	
		КонецЦикла;
		Для Каждого Строка из Начисления Цикл
			Если Строка.Сторно или НЕ Строка.Авторасчет Тогда
				Продолжить;
			КонецЕсли;
			СпособРасчета = Строка.ВидРасчета.СпособРасчета;
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуКомпенсацияОтпуска
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС
				Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыходноеПособие Тогда
				Строка.Показатель1 = СуммаСредней;
			КонецЕсли;	
		КонецЦикла;
		
		// перерассчитываем записи начислений
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
											Движения.ОсновныеНачисленияРаботниковОрганизаций, 
											Начисления, 
											, 
											СотрудникиСписок);
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	КонецЕсли;
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Взаиморасчеты с работниками
	Если Истина Тогда
		// сначала удалим сведения о взаиморасчетах с работниками
		ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
		ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
		
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям)
		КонецЦикла;
		
	КонецЕсли;
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоРегиструРасчета(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоРегиструРасчета(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
КонецПроцедуры // Перерассчитать()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	МассивВидовВремени = Новый Массив;
	МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
	Запрос.УстановитьПараметр("ПочасовоеОтклонение",	МассивВидовВремени);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.Дата						КАК Дата,
	|	ОплатаПоСреднемуЗаработку.ПериодРегистрации			КАК ПериодРегистрации,
	|	ОплатаПоСреднемуЗаработку.Организация				КАК Организация,
	|	ОплатаПоСреднемуЗаработку.Ссылка					КАК Ссылка,
	|	ОплатаПоСреднемуЗаработку.Сотрудник					КАК Сотрудник,
	|	ОплатаПоСреднемуЗаработку.СуммаСредней				КАК СуммаСредней,
	|	ОплатаПоСреднемуЗаработку.ВидУчетаВремениДляСредней	КАК ВидУчетаВремениДляСредней,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета				КАК ВидРасчета,
	|	ОплатаПоСреднемуЗаработку.ДатаНачала				КАК ДатаНачала,
	|	ОплатаПоСреднемуЗаработку.ДатаОкончания				КАК ДатаОкончания,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета.СпособРасчета	КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.ВидРасчета.ВидВремени В (&ПочасовоеОтклонение)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	|	
	|   ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|   ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоКонец	КАК ПериодРасчетаСреднегоЗаработкаКонец
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+" КАК ОплатаПоСреднемуЗаработку
	|
	|ГДЕ ОплатаПоСреднемуЗаработку.Ссылка = &ДокументСсылка
	|";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачислениям()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Ссылка.Организация,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.НомерСтроки,  
	|	СтрокиНачисления.Авторасчет,
	|   ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
	|
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Назначение,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета		КАК СпособРасчета,
    |
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодВзаиморасчетов,
	|	СтрокиНачисления.ВидРасчета.СчетУчета			КАК СчетУчета,
	|	СтрокиНачисления.Результат						КАК СуммаВзаиморасчетов,
	|
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ДатаНачала			КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания		КАК ПериодДействияКонец,
	|
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ГрафикРаботы,
	|   ВЫБОР	КОГДА СтрокиНачисления.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
	|			ТОГДА NULL
	|			ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ						КАК ГрафикРаботыСотрудник,
	|	СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	ВЫБОР	КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В(&парамСписокПочасовыхОтклонений) 
	|				ТОГДА	ИСТИНА 
	|			ИНАЧЕ		ЛОЖЬ 
	|	КОНЕЦ														КАК ЯвляетсяПочасовымОтклонением,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени, 
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|	СтрокиНачисления.Ссылка.ОплачиватьЧасов,
	|	СтрокиНачисления.СторнируемыйДокумент,
	|	СтрокиНачисления.Сторно
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

Функция СформироватьЗапросПоРасчетСреднего()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаРасчетСреднего.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
	|	СтрокаРасчетСреднего.Ссылка.Организация КАК Организация,
	|
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Авторасчет,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало,
	|	СтрокаРасчетСреднего.БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.КоэффициентПовышенияОкладов,
	|
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.НормаДней,
	|	СтрокаРасчетСреднего.НормаЧасов,
	|	СтрокаРасчетСреднего.КалендарныеДни,
	|
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.РезультатПолный
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".РасчетСреднего КАК СтрокаРасчетСреднего
	|
	|ГДЕ СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
	|";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРасчетСреднего()


Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ) Экспорт

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой выполняется начисление!", Отказ);
	КонецЕсли;

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано физическое лицо!", Отказ);
	КонецЕсли;

	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала оплачиваемого события!", Отказ);
	КонецЕсли;
	
	// ДатаОкончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата окончания оплачиваемого события!", Отказ);
	КонецЕсли;
	
	//
	Если ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата окончания оплачиваемого события не должна быть меньше даты начала!", Отказ);
	КонецЕсли; 
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид расчета!", Отказ);
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ);
	КонецЕсли;
	
	// Дата начала 
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ);
	Иначе
		// Дата окончания 
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ);
			Иначе	
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ);
	КонецЕсли;
	
	Если НЕ ВыборкаПоСтрокамДокумента.Сторно И  (ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаНачала > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания) 
		ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "период начисления выходит за временные границы оплачиваемого события!", Ложь);
	КонецЕсли; 

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()


Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
 	Движение.ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидРасчета.ВидВремени, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, НаборЗаписей)
	
	Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
		Движение = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоНачислениям);
		
		// Свойства
		Движение.Период = ВыборкаПоНачислениям.ПериодДействияНачало;
		
		// Ресурсы
		Движение.Часов			= ВыборкаПоНачислениям.ОплачиватьЧасов;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСтрокамДокумента, НаборРасчетСреднего)
	
	Движение = НаборРасчетСреднего.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры 

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоСтрокамДокумента)
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента)
	
	// начало
	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоШапкеДокумента);
	
	Движение.Актуальность				= Истина;
	Движение.ВидРасчетаИзмерение		= ВыборкаПоШапкеДокумента.ВидРасчета;
	Движение.ДокументОснование			= Ссылка;
	Движение.Период						= ВыборкаПоШапкеДокумента.ДатаНачала;
	Движение.Показатель1				= ВыборкаПоШапкеДокумента.СуммаСредней;
	Движение.Показатель2				= 100;
	Движение.ВидУчетаВремениДляСредней	= ВыборкаПоШапкеДокумента.ВидУчетаВремениДляСредней;
	
	
	// конец
	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоШапкеДокумента);
	
	Движение.Актуальность				= Ложь;
	Движение.ВидРасчетаИзмерение		= ВыборкаПоШапкеДокумента.ВидРасчета;
	Движение.ДокументОснование			= Ссылка;
	Движение.Период						= КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания);
	Движение.Показатель1				= ВыборкаПоШапкеДокумента.СуммаСредней;
	Движение.Показатель2				= 100;
	Движение.ВидУчетаВремениДляСредней	= ВыборкаПоШапкеДокумента.ВидУчетаВремениДляСредней;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		////////////////////////////////////////////////////////////////////////
		// основные Начисления
		
		Если ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента);
			
		Иначе
			ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
			Пока ВыборкаПоНачислениям.Следующий() Цикл 
				
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
					ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям,Движения.ВнутрисменноеВремяРаботниковОрганизаций);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям)
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		////////////////////////////////////////////////////////////////////////
		// Расчет средней
		
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоСредним.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаменыОрганизаций") Тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням;
		СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
		
		Сотрудник = Основание.Сотрудник;
		Назначение = Основание.ЗаменаСотрудник;
		Организация = Основание.Организация;
		ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаДоСреднего;
		ДатаНачала = Основание.ДатаНачала;
		ДатаОкончания = Основание.ДатаОкончания;
		
		ЧислоМесяцев = 2;
		ПолучитьПериодПоРаботнику();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицо(ЭтотОбъект);
	
	Если ПерерассчитываемыйДокумент = Ссылка И НЕ Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть исправлением самого себя!",Отказ);
	КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА

