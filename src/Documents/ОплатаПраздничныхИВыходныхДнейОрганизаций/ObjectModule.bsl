////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет документ для отобранного пользователем списка работников
//
// Параметры:
//	ПостроительЗапроса - построитель запроса, настроенный пользователем 
//							в обработке ФормированиеСпискаРаботников
//	Реквизиты - структура данных для заполнения, соответствующих реквизитам 
//							 т.ч.документа, пришедшая из обработки ФормированиеСпискаРаботников
//
Процедура Автозаполнение(ПостроительЗапроса,Реквизиты) Экспорт
	
	ИсходныйТекстПостроителя = ПостроительЗапроса.Текст;
	ТекстЗапросаПоСпискуРаботников = СтрЗаменить(ИсходныйТекстПостроителя,"РАЗРЕШЕННЫЕ","");
	ТекстЗапросаПоСпискуРаботников = Лев(ТекстЗапросаПоСпискуРаботников, Найти(ТекстЗапросаПоСпискуРаботников,"УПОРЯДОЧИТЬ") - 1);
	
	ПостроительЗапроса.Параметры.Вставить("РегламентВалюта",		глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	ПостроительЗапроса.Параметры.Вставить("ПустаяВалюта",			Справочники.Валюты.ПустаяСсылка());
	ПостроительЗапроса.Параметры.Вставить("ДатаНачала",				ПериодРегистрации);
	ПостроительЗапроса.Параметры.Вставить("ДатаВалютногоУчета",		ПериодРегистрации);
	ПостроительЗапроса.Параметры.Вставить("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ПостроительЗапроса.Параметры.Вставить("РабочийДень",			Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	ПостроительЗапроса.Параметры.Вставить("ПредпраздничныйДень",	Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	ПостроительЗапроса.Параметры.Вставить("НачальнаяДата",			'00010101');
	ПостроительЗапроса.Параметры.Вставить("Год",					Год(Реквизиты.ДатаВыхода));
	ПостроительЗапроса.Параметры.Вставить("ДатаВыхода",				Реквизиты.ДатаВыхода);
	ПостроительЗапроса.Параметры.Вставить("ОтработаноЧасов",		Реквизиты.ОтработаноЧасов);
	ПостроительЗапроса.Параметры.Вставить("ЧасовДвойных",			Реквизиты.ЧасовДвойных);
	РасчетыПоЧасам = Новый Массив(2);
	РасчетыПоЧасам[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке;
	РасчетыПоЧасам[1] = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок;
	ПостроительЗапроса.Параметры.Вставить("РасчетыПоЧасам",РасчетыПоЧасам);
	МесячныеСтавки = Новый Массив(2);
	МесячныеСтавки[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням;
	МесячныеСтавки[1] = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам;
	ПостроительЗапроса.Параметры.Вставить("МесячныеСтавки",			МесячныеСтавки);
	ПостроительЗапроса.Параметры.Вставить("ПоДневнойСтавке",		Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	ПостроительЗапроса.Параметры.Вставить("ПоДням",					Перечисления.ВидыУчетаВремени.ПоДням);
	ПостроительЗапроса.Параметры.Вставить("Оплата",					ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных);
	ПостроительЗапроса.Параметры.Вставить("Доплата",				ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);
	                                                                
	ОсновнойТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиИНачисления.Сотрудник,
	|	РаботникиИНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	РаботникиИНачисления.ПодразделениеОрганизации,
	|	&ДатаВыхода КАК ДатаВыхода,
	|	&ЧасовДвойных КАК ЧасовДвойных,
	|	&ОтработаноЧасов КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА РаботникиИНачисления.СпособРасчета В (&РасчетыПоЧасам)
	|			ТОГДА РаботникиИНачисления.ОкладТариф
	|		КОГДА РаботникиИНачисления.СпособРасчета В (&МесячныеСтавки)
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеКалендаря.НормаЧасовЗаМесяц = 0
	|						ТОГДА 0
	|					ИНАЧЕ РаботникиИНачисления.ОкладТариф / ДанныеКалендаря.НормаЧасовЗаМесяц
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Размер,
	|	(&ОтработаноЧасов + 2*&ЧасовДвойных)* ВЫБОР
	|		КОГДА РаботникиИНачисления.СпособРасчета В (&РасчетыПоЧасам)
	|			ТОГДА РаботникиИНачисления.ОкладТариф
	|		КОГДА РаботникиИНачисления.СпособРасчета В (&МесячныеСтавки)
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеКалендаря.НормаЧасовЗаМесяц = 0
	|						ТОГДА 0
	|					ИНАЧЕ РаботникиИНачисления.ОкладТариф / ДанныеКалендаря.НормаЧасовЗаМесяц
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Результат,
	|	ВЫБОР
	|		КОГДА РаботникиИНачисления.ОсновноеЗначение = 0
	|			ТОГДА &Оплата
	|		ИНАЧЕ &Доплата
	|	КОНЕЦ КАК ВидРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписокРаботников.Сотрудник КАК Сотрудник,
	|		СписокРаботников.Подразделение КАК ПодразделениеОрганизации,
	|		СписокРаботников.ГрафикРаботы,
	|		ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.ТребуетВводаТарифногоРазряда
	|						ТОГДА РазмерТарифныхСтавокСрезПоследних.Размер
	|					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1
	|		КОНЕЦ * ВЫБОР КОГДА ВЫБОР
	|			КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.ТребуетВводаТарифногоРазряда
	|						ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
	|					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Валюта1
	|				КОНЕЦ В (&РегламентВалюта, &ПустаяВалюта)
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|		КОНЕЦ КАК ОкладТариф,
	|		ЕСТЬNULL(СписокРаботников.ГрафикРаботы.ДлительностьРабочейНедели, 0) КАК ДлительностьРабочейНедели,
	|		СписокРаботников.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
	|		ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|		ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) КАК ЧислоРабочихДней,
	|		ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0) КАК ЧислоПредпраздничныхДней,
	|		ГрафикиРаботыПоВидамВремени.ОсновноеЗначение КАК ОсновноеЗначение
	|	ИЗ
	|		(" + ТекстЗапросаПоСпискуРаботников + ") КАК СписокРаботников
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаВыхода, ) КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаВыхода, ) КАК РазмерТарифныхСтавокСрезПоследних
	|				ПО (ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ТарифныйРазряд1 = РазмерТарифныхСтавокСрезПоследних.ТарифныйРазряд)
	|			ПО СписокРаботников.Сотрудник = ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Сотрудник
	|				И (ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаИзмерение.Ссылка ЕСТЬ NULL )
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|			ПО (Валюты.Период = &ДатаВалютногоУчета)
	|				И (Валюты.Валюта = ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
	|							ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Валюта1
	|				КОНЕЦ)
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				СУММА(ВЫБОР
	|						КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = &РабочийДень
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ) КАК ЧислоРабочихДней,
	|				СУММА(ВЫБОР
	|						КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = &ПредпраздничныйДень
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|			ИЗ
	|				РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|			ГДЕ
	|				РегламентированныйПроизводственныйКалендарь.Год = &Год) КАК ДанныеПроизводственногоКалендаря
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|			ПО СписокРаботников.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|				И (ГрафикиРаботыПоВидамВремени.Дата = &ДатаВыхода)
	|				И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ПоДням)) КАК РаботникиИНачисления
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеКалендаря
	|ПО		ВЫБОР	КОГДА РаботникиИНачисления.ГрафикРаботы.СокращенноеРабочееВремя	
	|		     		ТОГДА ДанныеКалендаря.ГрафикРаботы = РаботникиИНачисления.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|				ИНАЧЕ ДанныеКалендаря.ГрафикРаботы = РаботникиИНачисления.ГрафикРаботы
	|		КОНЕЦ 
	|
	|
	|";
	
	//Основной текст запроса
	ПостроительЗапроса.Текст = ОсновнойТекстЗапроса;
	ПостроительЗапроса.Выполнить();
	Начисления.Загрузить(ПостроительЗапроса.Результат.Выгрузить());
	
КонецПроцедуры //Автозаполнение()

// Заполняет документ работниками, работавшими в праздники
//
Функция ЗаполнитьРаботавшимиВПраздники() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уволен",				Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("Работает",			Перечисления.СостоянияРаботникаОрганизации.Работает);
	Запрос.УстановитьПараметр("Праздники",			Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	Запрос.УстановитьПараметр("РабочийДень",		Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ПредпраздничныйДень",Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	Запрос.УстановитьПараметр("НачальнаяДата",		'00010101');
	Запрос.УстановитьПараметр("Год",				Год(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаНачала",			НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания",		КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("ПоДням",				Перечисления.ВидыУчетаВремени.ПоДням);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ТрудовойДоговор",	Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	Запрос.УстановитьПараметр("Доплата",			ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);
	Запрос.УстановитьПараметр("РегламентВалюта",	глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("ПустаяВалюта",		Справочники.Валюты.ПустаяСсылка());
	РасчетыПоЧасам = Новый Массив(2);
	РасчетыПоЧасам[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке;
	РасчетыПоЧасам[1] = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок;
	Запрос.УстановитьПараметр("РасчетыПоЧасам",		РасчетыПоЧасам);
	МесячныеСтавки = Новый Массив(2);
	МесячныеСтавки[0] = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням;
	МесячныеСтавки[1] = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам;
	Запрос.УстановитьПараметр("МесячныеСтавки",		МесячныеСтавки);
	Запрос.УстановитьПараметр("ПоДневнойСтавке",	Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	
	//Запрос.УстановитьПараметр("РабочееВремя",Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	
	// ПраздничныеДаты
	//		Список праздников текущего месяца
	// 
	//	Поля:
	//		ДатаКалендаря - дата, общегосударственный праздник
	// 
	// Описание:
	//
	//	выбираем из РегистрСведений.РегламентированныйПроизводственныйКалендарь дни,  
	//	помеченные пользователем как праздники
		
	ПраздничныеДатыТекст =
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня В(&Праздники)
	|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.Текст = ПраздничныеДатыТекст;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда // в этом месяце праздничных дней не оказалось
		Возврат Ложь
	КонецЕсли;
	
	ПраздникиТекущегоМесяца = Результат.Выгрузить().ВыгрузитьКолонку("ДатаКалендаря");
	Запрос.УстановитьПараметр("ПраздникиТекущегоМесяца", ПраздникиТекущегоМесяца);
	
	// СотрудникиПоПраздникам
	//		Таблица работающих по состоянию на каждый праздничный день с их кадровыми данными
	// 
	//	Поля:
	//		ПраздничныйДень - дата, общегосударственный праздник
	//		Сотрудник,
	//		ПодразделениеОрганизации,
	//		ГрафикРаботы,
	//		ВидГрафика,
	//		ДлительностьРабочейНедели
	// 
	// Описание:
	// 
	//	"псевдосрез" последних из РегистрСведений.РаботникиОрганизаций 
	//	для списка праздников текущего месяца
		
	СотрудникиПоПраздникамТекст =
	"ВЫБРАТЬ
	|	Даты.ПраздничныйДень КАК ПраздничныйДень,
	|	Даты.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы,
	|	РаботникиОрганизаций.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
	|	ЕСТЬNULL(РаботникиОрганизаций.ГрафикРаботы.ДлительностьРабочейНедели, 0) КАК ДлительностьРабочейНедели
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПраздничныеДаты.ДатаКалендаря КАК ПраздничныйДень,
	|		РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|	ИЗ
	|		("+ ПраздничныеДатыТекст + ") КАК ПраздничныеДаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ПраздничныеДаты.ДатаКалендаря >= РаботникиОрганизаций.Период
	|	ГДЕ
	|		РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиОрганизаций.Сотрудник,
	|		ПраздничныеДаты.ДатаКалендаря) КАК Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО Даты.Период = РаботникиОрганизаций.Период
	|			И Даты.Сотрудник = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	И 
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния  <> &Уволен
	|	И 
	|	РаботникиОрганизаций.ОбособленноеПодразделение  = &Организация";	
	
	// ФактическиОтработано
	//		Таблица сотрудников и рабочих дней при табельном учете времени
	// 
	//	Поля:
	//		РабочийДень - дата, отмеченная как рабочий день при табельном учете времени
	//		Сотрудник,
	//		Часы - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени,	
	//	введенные доком Табель как "факт"
		
	ФактическиОтработаноТекст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК Сотрудник,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК РабочийДень,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение КАК Часы
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0
	|	И (НЕ ГрафикиРаботыПоВидамВремени.План)
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ПоДням
	|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.СотрудникиОрганизаций
	|	И ГрафикиРаботыПоВидамВремени.Месяц = &ПериодРегистрации
	|	И ВЫБОР
	|			КОГДА ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.СотрудникиОрганизаций
	|				ТОГДА ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Организация = &ГоловнаяОрганизация
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ГрафикиРаботыПоВидамВремени.Дата В(&ПраздникиТекущегоМесяца)";
	
	// СостояниеСотрудниковПоПраздникам
	//		Таблица состояний работников на каждый праздничный день
	// 
	//	Поля:
	//		ПраздничныйДень - дата, общегосударственный праздник
	//		Сотрудник,
	//		Состояние
	// 
	// Описание:
	//
	//	"псевдосрез" последних из РегистрСведений.СостояниеРаботниковОрганизаций 
	//	для списка праздников текущего месяца
		
	СостояниеСотрудниковПоПраздникамТекст =
	"ВЫБРАТЬ
	|	Даты.ПраздничныйДень КАК ПраздничныйДень,
	|	Даты.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА СостояниеРаботниковОрганизаций.ПериодЗавершения <= Даты.ПраздничныйДень
	|				И СостояниеРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СостояниеРаботниковОрганизаций.СостояниеЗавершения
	|		ИНАЧЕ СостояниеРаботниковОрганизаций.Состояние
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПраздничныеДаты.ДатаКалендаря КАК ПраздничныйДень,
	|		СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(СостояниеРаботниковОрганизаций.Период) КАК Период
	|	ИЗ
	|		("+ ПраздничныеДатыТекст + ") КАК ПраздничныеДаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|			ПО ПраздничныеДаты.ДатаКалендаря >= СостояниеРаботниковОрганизаций.Период
	|	ГДЕ
	|		СостояниеРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СостояниеРаботниковОрганизаций.Сотрудник,
	|		ПраздничныеДаты.ДатаКалендаря) КАК Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|		ПО Даты.Период = СостояниеРаботниковОрганизаций.Период
	|			И Даты.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|ГДЕ
	|	СостояниеРаботниковОрганизаций.Организация = &ГоловнаяОрганизация";

	// ИндивидуальныеГрафикиРаботы
	//		Данные индивидуальных графиков сотрудников
	// 
	//	Поля:
	//		РабочийДень - дата, отмеченная как рабочий день в индивидуальном графике
	//		Сотрудник,
	//		Часы
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени,	
	//	введенные документом ВводИндивидуальныхГрафиков
		
	ИндивидуальныеГрафикиРаботыТекст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК Сотрудник,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК РабочийДень,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение КАК Часы
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	
	|	ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ПоДням
	|	И ГрафикиРаботыПоВидамВремени.Месяц = &ПериодРегистрации
	|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.СотрудникиОрганизаций
	|	И ВЫБОР
	|			КОГДА ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.СотрудникиОрганизаций
	|				ТОГДА ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Организация = &ГоловнаяОрганизация
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ГрафикиРаботыПоВидамВремени.Дата В(&ПраздникиТекущегоМесяца)";
	
	// ОбщиеГрафикиРаботы
	//		Данные графиков работы
	// 
	//	Поля:
	//		РабочийДень - дата, отмеченная как рабочий день в индивидуальном графике
	//		ГрафикРаботы,
	//		Часы
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени для элементов спр-ка ГрафикиРаботы
	
	ОбщиеГрафикиРаботыТекст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК РабочийДень,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение КАК Часы
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0
	|	И ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ПоДням
	|	И ГрафикиРаботыПоВидамВремени.Месяц = &ПериодРегистрации
	|	И ГрафикиРаботыПоВидамВремени.Дата В(&ПраздникиТекущегоМесяца)
	|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы";
	
	// СводныеИндивидуальныеГрафикиРаботы
	//		Сотрудники, для которых введены сводные данные об их графике
	// 
	//	Поля:
	//		Сотрудник
	// 
		
	СводныеИндивидуальныеГрафикиРаботыТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Месяц = &ПериодРегистрации
	|	И СводныеИндивидуальныеГрафики.Сотрудник.Организация = &ГоловнаяОрганизация";
	
	// СводныеТабелиРаботы
	//		Сотрудники, для которых введены сводные данные об их графике
	// 
	//	Поля:
	//		Сотрудник
	// 
		
	СводныеТабелиРаботыТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочееВремяРаботниковОрганизаций.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	|ГДЕ
	|	РабочееВремяРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
	|	И НАЧАЛОПЕРИОДА(РабочееВремяРаботниковОрганизаций.Период, ДЕНЬ) = &ПериодРегистрации
	|	И РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод
	|	И РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени.РабочееВремя";
		
	// ПлановыеНачисленияРаботниковОрганизаций
	//		Данные о плановых начислениях работников по состоянию на каждый праздничный день
	// 
	//	Поля:
	//		ПраздничныйДень - дата, общегосударственный праздник
	//		Сотрудник,
	//		Валюта,СпособРасчета,Размер
	// 
	// Описание:
	//
	//	"псевдосрезы" последних из рег-ров ПлановыеНачисленияРаботниковОрганизаций и РазмерТарифныхСтавок 
	//	для списка праздников текущего месяца
		
	ПлановыеНачисленияРаботниковОрганизацийТекст =
	"ВЫБРАТЬ
	|	Даты.ПраздничныйДень КАК ПраздничныйДень,
	|	Даты.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|			КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА РазмерТарифныхСтавок.Валюта
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта1
	|	КОНЕЦ КАК Валюта,
	|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР
	|			КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА РазмерТарифныхСтавок.Размер
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель1
	|	КОНЕЦ КАК Размер
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПраздничныеДаты.ДатаКалендаря КАК ПраздничныйДень,
	|		ПлановыеНачисленияРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК Период
	|	ИЗ
	|		("+ ПраздничныеДатыТекст + ") КАК ПраздничныеДаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|			ПО ПраздничныеДаты.ДатаКалендаря >= ПлановыеНачисленияРаботниковОрганизаций.Период
	|	ГДЕ
	|		ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
	|		И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
	|		ПраздничныеДаты.ДатаКалендаря) КАК Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПраздничныеДаты.ДатаКалендаря КАК ПраздничныйДень,
	|			РазмерТарифныхСтавок.ТарифныйРазряд КАК ТарифныйРазряд,
	|			МАКСИМУМ(РазмерТарифныхСтавок.Период) КАК ПериодРазряда
	|		ИЗ
	|			("+ ПраздничныеДатыТекст + ") КАК ПраздничныеДаты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|				ПО ПраздничныеДаты.ДатаКалендаря >= РазмерТарифныхСтавок.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РазмерТарифныхСтавок.ТарифныйРазряд,
	|			ПраздничныеДаты.ДатаКалендаря) КАК ДатыТарифныхРазрядов
	|		ПО Даты.ПраздничныйДень = ДатыТарифныхРазрядов.ПраздничныйДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|		ПО Даты.Период = ПлановыеНачисленияРаботниковОрганизаций.Период
	|			И Даты.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|		ПО ДатыТарифныхРазрядов.ПериодРазряда = РазмерТарифныхСтавок.Период
	|			И ДатыТарифныхРазрядов.ТарифныйРазряд = РазмерТарифныхСтавок.ТарифныйРазряд
	|			И ВЫБОР КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ТребуетВводаТарифногоРазряда 
	|				ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
	|			ИНАЧЕ
	|				ЛОЖЬ
	|			КОНЕЦ
	|ГДЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
	|	И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|	И ВЫБОР КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ТребуетВводаТарифногоРазряда Тогда
	|		РазмерТарифныхСтавок.ТарифныйРазряд <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
	|	  ИНАЧЕ
	|		ИСТИНА
	|	  КОНЕЦ
	|";
	
	// ДанныеПроизводственногоКалендаря
	//		Данные производственного календаря для расчета среднемесячного количества часов
	// 
	//	Поля:
	//		ЧислоРабочихДней,
	//		ЧислоПредпраздничныхДней
	// 
	// Описание:
	//
	//	данные по рабочим и предпраздничным дням выбираются из РегистрСведений.РегламентированныйПроизводственныйКалендарь	
		
	ДанныеПроизводственногоКалендаряТекст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = &РабочийДень
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоРабочихДней,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = &ПредпраздничныйДень
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.Год = &Год";
	
	ТекстПоляОтработаноЧасов = 
	"	ВЫБОР
	|		КОГДА ФактическиОтработано.Сотрудник ЕСТЬ НЕ NULL 
	|			ТОГДА ФактическиОтработано.Часы
	|		КОГДА ИндивидуальныеГрафикиРаботы.Сотрудник ЕСТЬ НЕ NULL 
	|			ТОГДА ИндивидуальныеГрафикиРаботы.Часы
	|		ИНАЧЕ ОбщиеГрафикиРаботы.Часы
	|	КОНЕЦ";
	
	ТекстПоляРазмер = 
	"	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.СпособРасчета В (&РасчетыПоЧасам)
	|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Размер * ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта В (&РегламентВалюта, &ПустаяВалюта)
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|				КОНЕЦ
	|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.СпособРасчета В (&МесячныеСтавки)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ДанныеКалендаря.НормаЧасовЗаМесяц, 0) = 0
	|						ТОГДА 0
	|					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Размер * ВЫБОР
	|							КОГДА ПлановыеНачисленияРаботниковОрганизаций.Валюта В (&РегламентВалюта, &ПустаяВалюта)
	|								ТОГДА 1
	|							ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|						КОНЕЦ / ЕСТЬNULL(ДанныеКалендаря.НормаЧасовЗаМесяц, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	//  Основной текст запроса
	// 
	//	Поля:
	//		соответствуют реквизитам т.ч. документа
	//	
	// Описание:
	//
	// из всех сотрудников организации отбираются только те, по которым в ИБ присутствуют
	// следующие данные:
	//  или документом Табель введено фактически отработанное время в дни праздников
	//  или введен индивидуальный график, в котором праздничный день помечен как рабочий
	//  или в назначенном работнику по состоянию на дату праздника графике праздничный день помечен как рабочий
	//
	// из выборки исключаются работники, по которым не введено фактически отработанное время
	// в дни праздников, но:
	//  введен сводный индивидуальный график или сводный табель
	//  по данным кадрового учета они отсутствуют на рабочем месте, т.е. болеют, находятся в отпуске и т.п.
	//
	// отработано часов выбирается в следующем порядке:
	//	фактически отработанное время (выборка ФактическиОтработано), 
	//	затем данные индивидуального графика работы (выборка ИндивидуальныеГрафикиРаботы),
	//	затем данные текущего графика работы сотрудника (выборка ОбщиеГрафикиРаботы)
	// размер (часовая тарифная ставка) определяется в зависимости от порядка расчета основного начисления сотрудника
	//	с использованием среднемесячного количества часов и длительности рабочей недели графика 
	// в качестве вида расчета вводим доплату за праздничный день
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	СотрудникиПоПраздникам.Сотрудник,
	|	СотрудникиПоПраздникам.Сотрудник.Физлицо КАК Физлицо,
	|	СотрудникиПоПраздникам.ПодразделениеОрганизации,
	|	СотрудникиПоПраздникам.ПраздничныйДень КАК ДатаВыхода,
	|	" + ТекстПоляОтработаноЧасов + " КАК ОтработаноЧасов,
	|	0 КАК ЧасовДвойных,
	|	" + ТекстПоляРазмер + " КАК Размер,
	|	" + ТекстПоляОтработаноЧасов + " * " + ТекстПоляРазмер + " КАК Результат,
	|	&Доплата КАК ВидРасчета
	|ИЗ
	|	(" + СотрудникиПоПраздникамТекст + ") КАК СотрудникиПоПраздникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ФактическиОтработаноТекст + ") КАК ФактическиОтработано
	|		ПО СотрудникиПоПраздникам.ПраздничныйДень = ФактическиОтработано.РабочийДень
	|			И СотрудникиПоПраздникам.Сотрудник = ФактическиОтработано.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + СостояниеСотрудниковПоПраздникамТекст + ") КАК СостояниеСотрудниковПоПраздникам
	|		ПО СотрудникиПоПраздникам.ПраздничныйДень = СостояниеСотрудниковПоПраздникам.ПраздничныйДень
	|			И СотрудникиПоПраздникам.Сотрудник = СостояниеСотрудниковПоПраздникам.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ИндивидуальныеГрафикиРаботыТекст + ") КАК ИндивидуальныеГрафикиРаботы
	|		ПО СотрудникиПоПраздникам.ПраздничныйДень = ИндивидуальныеГрафикиРаботы.РабочийДень
	|			И СотрудникиПоПраздникам.Сотрудник = ИндивидуальныеГрафикиРаботы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ОбщиеГрафикиРаботыТекст + ") КАК ОбщиеГрафикиРаботы
	|		ПО СотрудникиПоПраздникам.ПраздничныйДень = ОбщиеГрафикиРаботы.РабочийДень
	|			И СотрудникиПоПраздникам.ГрафикРаботы = ОбщиеГрафикиРаботы.ГрафикРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + СводныеИндивидуальныеГрафикиРаботыТекст + ") КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО СотрудникиПоПраздникам.Сотрудник = СводныеИндивидуальныеГрафикиРаботы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + СводныеТабелиРаботыТекст + ") КАК СводныеТабелиРаботы
	|		ПО СотрудникиПоПраздникам.Сотрудник = СводныеТабелиРаботы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПлановыеНачисленияРаботниковОрганизацийТекст + ") КАК ПлановыеНачисленияРаботниковОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|			ПО (Валюты.Период = &ПериодРегистрации)
	|				И Валюты.Валюта = ПлановыеНачисленияРаботниковОрганизаций.Валюта
	|		ПО СотрудникиПоПраздникам.ПраздничныйДень = ПлановыеНачисленияРаботниковОрганизаций.ПраздничныйДень
	|			И СотрудникиПоПраздникам.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДанныеПроизводственногоКалендаряТекст + ") КАК ДанныеПроизводственногоКалендаря
	|		ПО (ИСТИНА)
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеКалендаря
	|ПО		ВЫБОР	КОГДА СотрудникиПоПраздникам.ГрафикРаботы.СокращенноеРабочееВремя	
	|		     		ТОГДА ДанныеКалендаря.ГрафикРаботы = СотрудникиПоПраздникам.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|				ИНАЧЕ ДанныеКалендаря.ГрафикРаботы = СотрудникиПоПраздникам.ГрафикРаботы
	|		КОНЕЦ 
	|
	|
	|ГДЕ
	|	" + ТекстПоляОтработаноЧасов + " <> 0 И  
	|	ВЫБОР
	|			КОГДА ФактическиОтработано.Сотрудник ЕСТЬ НЕ NULL 
	|				ТОГДА ФактическиОтработано.Сотрудник
	|			КОГДА ИндивидуальныеГрафикиРаботы.Сотрудник ЕСТЬ НЕ NULL 
	|				ТОГДА ИндивидуальныеГрафикиРаботы.Сотрудник
	|			ИНАЧЕ ОбщиеГрафикиРаботы.ГрафикРаботы
	|		КОНЕЦ ЕСТЬ НЕ NULL 
	|	И (НЕ ВЫБОР
	|				КОГДА СводныеТабелиРаботы.Сотрудник ЕСТЬ НЕ NULL 
	|					ТОГДА ИСТИНА
	|				КОГДА ФактическиОтработано.Сотрудник ЕСТЬ НЕ NULL 
	|					ТОГДА ЛОЖЬ
	|				КОГДА СводныеИндивидуальныеГрафикиРаботы.Сотрудник ЕСТЬ НЕ NULL 
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)  // ЭтоСотрудникСоСводнымГрафиком
	|	И ВЫБОР
	|			КОГДА ФактическиОтработано.Сотрудник ЕСТЬ НЕ NULL 
	|				ТОГДА &Работает
	|			ИНАЧЕ ЕСТЬNULL(СостояниеСотрудниковПоПраздникам.Состояние, &Работает)
	|		КОНЕЦ = &Работает";
	
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Возврат Истина
	
КонецФункции //ЗаполнитьРаботавшимиВПраздники()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


	
		
		
		
		
	
	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаПраздничныхИВыходныхДнейОрганизаций.Дата,
	|	ОплатаПраздничныхИВыходныхДнейОрганизаций.Организация,
	|	ОплатаПраздничныхИВыходныхДнейОрганизаций.Организация КАК ГоловнаяОрганизация,
	|	ОплатаПраздничныхИВыходныхДнейОрганизаций.Организация КАК ОбособленноеПодразделение,
	|	ОплатаПраздничныхИВыходныхДнейОрганизаций.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	ОплатаПраздничныхИВыходныхДнейОрганизаций.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	ОплатаПраздничныхИВыходныхДнейОрганизаций.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ОплатаПраздничныхИВыходныхДнейОрганизаций.ПериодРегистрации,
	|	ОплатаПраздничныхИВыходныхДнейОрганизаций.Ответственный,
	|	ОплатаПраздничныхИВыходныхДнейОрганизаций.Ссылка
	|ИЗ
	|	Документ.ОплатаПраздничныхИВыходныхДнейОрганизаций КАК ОплатаПраздничныхИВыходныхДнейОрганизаций
	|ГДЕ
	|	ОплатаПраздничныхИВыходныхДнейОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры:
//	Режим		- режим проведения.
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента)


	Запрос = Новый Запрос;
	
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("Организация",					Организация);
	Запрос.УстановитьПараметр("ПустаяДата",						'00010101');
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ГоловнаяОрганизация);
	// Описание текста запроса:
	// 1. Выборка "ТЧНачисления":
	//		Выбираются строки документа.
	// 2. Выборка "ПересекающиесяСтроки":
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР КОГДА ТЧНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) 
	|         ТОГДА ТЧНачисления.Сотрудник.ОсновноеНазначение
	|         ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК Сотрудник,
	|	ТЧНачисления.Сотрудник КАК Назначение,
	|	ТЧНачисления.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|	ТЧНачисления.ПодразделениеОрганизации,
	|	ТЧНачисления.ДатаВыхода КАК ДатаВыхода,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|			ТОГДА ТЧНачисления.ОтработаноЧасов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|			ТОГДА ТЧНачисления.ЧасовДвойных
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовДвойных,
	|	ТЧНачисления.ОтработаноЧасов + ТЧНачисления.ЧасовДвойных КАК ОплаченоДннйЧасов,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ДатыПоследнихДвиженийРаботников.Период	КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ТЧНачисления.ВидРасчета.ДоходНДФЛ КАК ДоходНДФЛ,
	|	ТЧНачисления.Размер,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.Сторно,
	|	ТЧНачисления.СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL
	|			ТОГДА
	|				ДанныеПоРаботникуДоНазначения.ГрафикРаботы
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ВЫБОР
	|		КОГДА (НЕ ТЧНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации
	|ИЗ
	|	Документ.ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК ТЧНачисления
	|
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|		ИЗ
	|			Документ.ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО РаботникиОрганизации.Период <= ТЧНачисления.ДатаВыхода
	|					И ТЧНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧНачисления.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
	|			И ТЧНачисления.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК ТЧНачисления2
	|				ПО (ТЧНачисления2.Ссылка = &ДокументСсылка)
	|					И ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|					И ТЧНачисления.НомерСтроки > ТЧНачисления2.НомерСтроки
	|					И ТЧНачисления.ДатаВыхода = ТЧНачисления2.ДатаВыхода
	|					И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|			И (НЕ ТЧНачисления.Сторно)
	|			И (НЕ ТЧНачисления2.Сторно)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧНачисления.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		
	|       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки Как НомерСтроки
	|       ИЗ
	|			Документ.ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК СтрокиНачисления
	|       	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|       	ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СтрокиНачисления.Сотрудник
	|				И ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаВыхода, МЕСЯЦ)
	|       ГДЕ
	|       	СтрокиНачисления.Ссылка = &ДокументСсылка) КАК ГрафикРаботыПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации (месяц)!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по товарам документа, 
//	Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаВыхода
	НетДатаВыхода = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаВыхода);
	Если НетДатаВыхода Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата выхода на работу!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид оплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ НетДатаВыхода Тогда
		Возврат; // Дальше не проверяем
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВыхода, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВыхода, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		
	КонецЕсли;
	
	// График работы
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "указана повторяющаяся строка (см. строку  № " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачислений()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	Движение = Движения.ОсновныеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.ПериодРегистрации			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияНачало		= ВыборкаПоСтрокамДокумента.ДатаВыхода;
	Движение.ПериодДействияКонец		= КонецДня(ВыборкаПоСтрокамДокумента.ДатаВыхода);
	Движение.БазовыйПериодНачало		= ВыборкаПоСтрокамДокумента.ДатаВыхода;
	Движение.БазовыйПериодКонец		= КонецДня(ВыборкаПоСтрокамДокумента.ДатаВыхода);
	Движение.ВидРасчета					= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;
	
	// Измерения
	Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Назначение					= ВыборкаПоСтрокамДокумента.Назначение;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	
	// ресурсы по отработанному времени
	тОтработаноЧасов = ВыборкаПоСтрокамДокумента.ОтработаноЧасов + ВыборкаПоСтрокамДокумента.ЧасовДвойных;
	Если тОтработаноЧасов <> 0 Тогда
		Движение.ОтработаноЧасов		= тОтработаноЧасов;
		Движение.ОтработаноДней			= ?(тОтработаноЧасов < 0,-1,1);
	КонецЕсли;
	Движение.ОплаченоДнейЧасов		= ВыборкаПоСтрокамДокумента.ОплаченоДннйЧасов;
	
	// Реквизиты
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Размер;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ВидУчетаВремени			= Перечисления.ВидыУчетаВремени.ПоЧасам;
	Движение.СторнируемыйДокумент		= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;

	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента						- выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Движение.Сотрудник				= ВыборкаПоТЧ.Сотрудник;
	Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
	Движение.СчетУчета				= ВыборкаПоТЧ.ВидРасчета.СчетУчета;
	
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
	
	Движение.КодОперации			= Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПЕРЕРАСЧЕТА

Функция ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	

	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		// получим список Сотрудников для перерасчета
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент
		|";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	ИначеЕсли Сотрудники <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	Иначе
		// получим список Сотрудников для перерасчета
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ Документ.ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК Перерасчет
		|ГДЕ Перерасчет.Ссылка = &ПерерассчитываемыйДокумент
		|";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		СотрудникиПерерасчета = Результат.ВыгрузитьКолонку("Сотрудник");
		
	КонецЕсли;	
	
	Если СотрудникиПерерасчета.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("СотрудникиПерерасчета", СотрудникиПерерасчета);
		// ТЧ Начисления
	Если Истина Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Физлицо,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.ДатаВыхода,
		|	Начисления.ВидРасчета,
		|	Начисления.Размер,
		|	-Начисления.Результат КАК Результат,
		|	-Начисления.ЧасовДвойных КАК ЧасовДвойных,
		|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	ИСТИНА КАК Сторно,
		|	Начисления.Ссылка КАК СторнируемыйДокумент,
		|	Начисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И Начисления.Сотрудник В(&СотрудникиПерерасчета)
		|	И Начисления.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Физлицо,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.ДатаВыхода,
		|	Начисления.ВидРасчета,
		|	Начисления.Размер,
		|	0,
		|	0,
		|	0,
		|	ЛОЖЬ,
		|	NULL,
		|	Начисления.НомерСтроки
		|ИЗ
		|	Документ.ОплатаПраздничныхИВыходныхДнейОрганизаций.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И Начисления.Сотрудник В(&СотрудникиПерерасчета)
		|	И Начисления.Ссылка.Проведен
		|УПОРЯДОЧИТЬ ПО
		|	Сторно УБЫВ,
		|	НомерСтроки";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Записать();
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьПоПерерассчитываемомуДокументу()

Процедура Перерассчитать( Сотрудники = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых сорудников
	СотрудникиСписок = Новый СписокЗначений;
	Если Сотрудники = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|	
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ВзносыВФонды.ПерерасчетВзносовВФонды КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор		
		|	
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрСведений.ЗаполнениеПлановыхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектЗаполнения = &парамРегистратор		
		|	
		|";
		
		Запрос.Текст = ТекстЗапроса;
		СотрудникиСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
	Иначе
		
		СотрудникиСписок = Сотрудники;
		
	КонецЕсли;
	
	// если не перерассчитываем никого - возврат
	Если СотрудникиСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// читаем все данные 
	НачатьТранзакцию();
	Прочитать();
	
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
	ЗафиксироватьТранзакцию();
	
	////////////////////////////////////////////////////////////////////////
	// Основные начисления
	Если Истина Тогда
		// перерассчитываем записи начислений
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
											Движения.ОсновныеНачисленияРаботниковОрганизаций, 
											Начисления, 
											, 
											СотрудникиСписок);
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	КонецЕсли;
	
	// записываем документ перед вызовом СформироватьВзаиморасчетыСРаботниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Взаиморасчеты с работниками
	Если Истина Тогда
		// сначала удалим сведения о взаиморасчетах с работниками
		ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
		ПоследнееДвижение = ВзаиморасчетыСРаботникамиОрганизаций.Количество()-1;
		// удалим записи по всем сотрудника полученного списка
		// обходим в обратном порядке
		Для Сч = 0 По ПоследнееДвижение Цикл
			Если СотрудникиСписок.НайтиПоЗначению(ВзаиморасчетыСРаботникамиОрганизаций[ПоследнееДвижение - Сч].Сотрудник) <> Неопределено Тогда
				ВзаиморасчетыСРаботникамиОрганизаций.Удалить(ПоследнееДвижение - Сч);
			КонецЕсли;
		КонецЦикла;
		
		// теперь сформируем начисления к выплате по начислениям документа для перерассчитываемых работников
		////СформироватьВзаиморасчетыСРаботниками( СотрудникиСписок );
		
	КонецЕсли;
	
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоКоторымВыполненПерерасчет(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоЗаполнениеПлановыхНачислений(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
КонецПроцедуры // Перерассчитать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			
			// получим реквизиты табличной части
			РезультатЗапросаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента);
			ВыборкаПоНачислениям = РезультатЗапросаПоНачислениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				КонецЕсли;

			КонецЦикла;

			Если НЕ ПерерассчитываемыйДокумент.Пустая() Тогда
				// выполним удаление перерасчетов перерассчитываемого документа
				НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
				НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ПерерассчитываемыйДокумент;
				НаборЗаписейПерерасчета.Записать();
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(Начисления);
	
	Если ПерерассчитываемыйДокумент = Ссылка И НЕ Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть исправлением самого себя!",Отказ);
	КонецЕсли;	
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
