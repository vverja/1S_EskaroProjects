////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Количество, Коэффициент, СведенияЕдиницаИзмеренияМест, Качество;
	Перем ХарактеристикаНоменклатуры, СерияНоменклатуры;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",					Номенклатура);
	ЗначениеВыбора.Свойство("ХарактеристикаНоменклатуры",	ХарактеристикаНоменклатуры);
	ЗначениеВыбора.Свойство("СерияНоменклатуры",			СерияНоменклатуры);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",				ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("ЕдиницаИзмеренияМест",			ЕдиницаИзмеренияМест);
	ЗначениеВыбора.Свойство("Коэффициент",					Коэффициент);
	ЗначениеВыбора.Свойство("Количество",					Количество);
	ЗначениеВыбора.Свойство("Качество",						Качество);
	ЗначениеВыбора.Свойство("СведенияЕдиницаИзмеренияМест", СведенияЕдиницаИзмеренияМест);


	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("Качество", Качество);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	СтруктураОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);


	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
		РассчитатьСумму(СтрокаТабличнойЧасти);
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.Количество       			= Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест		= ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент      			= Коэффициент;
		СтрокаТабличнойЧасти.Качество      				= Качество;
		РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, СведенияЕдиницаИзмеренияМест);
	КонецЕсли;
КонецПроцедуры //

&НаКлиенте
Процедура ДействиеПодбор()

	Команда = "ПодборВТабличнуюЧастьМатериалы";
	ЕстьУслуги = Ложь;
	
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги", ЕстьУслуги);
	Если ЕстьУслуги Тогда
		СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);
	КонецЕсли;
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Это существующий документ. 
		// Проверим, что его можно менять.
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	КонецЕсли;

	ТипСтоимостиРассчитывается = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается;
	ТипСтоимостиФиксированная  = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная;
	
	// Определим значение реквизита ИспользуетсяУправленческийУчетЗатрат.
	// Значение используется в диалогах заполнения.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Дата = ТекущаяДата();
	Иначе
		Дата = Объект.Дата;
	КонецЕсли;
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата)
	    И НЕ УправлениеЗапасами.ИспользуетсяУправленческийУчетЗатрат() Тогда
		ИспользуетсяУправленческийУчетЗатрат = Ложь;
	Иначе
		ИспользуетсяУправленческийУчетЗатрат = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого СтрокаТЧ Из ТекущийОбъект.Материалы Цикл
		ТекСтатусВозврата = Перечисления.СтатусыПартийТоваров.Купленный;
		Если СтрокаТЧ.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			ТекСтатусВозврата = Перечисления.СтатусыПартийТоваров.ВПереработку;
		ИначеЕсли СтрокаТЧ.Номенклатура.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство
			  ИЛИ СтрокаТЧ.Номенклатура.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка Тогда
			ТекСтатусВозврата = Перечисления.СтатусыПартийТоваров.Продукция;
		КонецЕсли;
		Если СтрокаТЧ.СтатусВозврата <> ТекСтатусВозврата Тогда
			СтрокаТЧ.СтатусВозврата = ТекСтатусВозврата;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора("Материалы", ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ ДАННЫХ ИЗ НАСТРОЕК

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ДобавитьДополнительныеДанныеВНастройку(Объект, Настройки, Документы.ОприходованиеМатериаловИзПроизводства.СтруктураДополнительныхДанныхФормы());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектДополнительнымиДанными(Объект, Настройки, Документы.ОприходованиеМатериаловИзПроизводства.СтруктураДополнительныхДанныхФормы());
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Объект.Номер) Тогда
		ПрефиксацияОбъектовСобытия.ОчиститьНомерОбъекта(Объект.Номер, Объект.Организация);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ В ТАБЛИЧНОЙ ЧАСТИ

&НаКлиенте
Процедура РассчитатьСумму(СтрокаТабличнойЧасти)
	
	// У пользователя может не быть прав на реквизиты Цена, Сумма, СуммаРегл,
	// поэтому готовим структуру, поля которой будут всегда доступны,
	// с помощью ЗаполнитьЗначенияСвойств(),
	// и арифметические операции выполняем над элементами структуры.
	
	СтруктураСумм = Новый Структура("Количество,Цена,Сумма,СуммаРегл", 0, 0, 0, 0);
	ЗаполнитьЗначенияСвойств(СтруктураСумм, СтрокаТабличнойЧасти);
	
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтруктураСумм, Новый Структура());
	СтруктураСумм.СуммаРегл = СтруктураСумм.Сумма;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСумм, , "Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦену(СтрокаТабличнойЧасти)
	
	// У пользователя может не быть прав на реквизиты Цена, Сумма, СуммаРегл,
	// поэтому готовим структуру, поля которой будут всегда доступны,
	// с помощью ЗаполнитьЗначенияСвойств(),
	// и арифметические операции выполняем над элементами структуры.
	
	СтруктураСумм = Новый Структура("Количество,Цена,Сумма,СуммаРегл", 0, 0, 0, 0);
	ЗаполнитьЗначенияСвойств(СтруктураСумм, СтрокаТабличнойЧасти);
	
	РаботаСДиалогамиКлиент.ПриИзмененииСуммыТабЧасти(СтруктураСумм);
	СтруктураСумм.СуммаРегл = СтруктураСумм.Сумма;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураСумм, , "Количество");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "МАТЕРИАЛЫ" И ЕЁ РЕКВИЗИТОВ

&НаСервере
Процедура ЗаполнитьОстаткамиМатериаловВПроизводствеСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
		
	ДокументОбъект.ЗаполнитьОстаткамиМатериаловВПроизводстве();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьОстаткамиМатериаловВПроизводстве(Команда)
	
	Если РаботаСДиалогамиКлиент.ПользовательОтказалсяПерезаполнитьТабличнуюЧасть(Объект.Материалы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОстаткамиМатериаловВПроизводствеСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоОстаткамСервер(ПоДаннымРеглУчета)
	
	ВидУчета = 
		?(ПоДаннымРеглУчета, 
		Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете, 
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.Материалы.Очистить();
	
	РеквизитыДоИзменения = Новый Структура();
	УправлениеПроизводством.ПодготовитьШапкуДокументаДляЗаполненияОстаткамиЗатрат(ДокументОбъект, ВидУчета, РеквизитыДоИзменения);
	УправлениеПроизводством.ЗаполнитьМатериалыПоОстаткамНЗП(ДокументОбъект, ДокументОбъект.Материалы, Истина, Истина, Истина, Ложь, Ложь, Истина);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДоИзменения);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	Для Каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		СтрокаТабличнойЧасти.Качество  = Справочники.Качество.Новый;
	КонецЦикла;
	
КонецПроцедуры

// Реализует диалог с пользователем при заполнении данными упр. учета о затратах.
// Проверяет, что упр. учет затрат ведется.
//
// Возвращаемое значение:
//  Истина - можно выполнять заполнение: упр. учет затрат ведется 
//           или пользователь согласился заполнять данными регл. учета
//  Ложь   - нельзя выполнять заполнение: упр. учет затрат НЕ ведется 
//           и пользователь НЕ согласился заполнять данными регл. учета
//
// Параметры:
//  ЗаполнятьДаннымиРеглУчета - в параметр будет возвращено Истина, если пользователь согласился заполнять данными регл. учета
&НаКлиенте
Функция ПроверитьИспользуетсяУправленческийУчетЗатрат(ЗаполнятьДаннымиРеглУчета)
	
	Если НЕ ИспользуетсяУправленческийУчетЗатрат Тогда
		
		ТекстВопроса = Нстр("ru = 'Управленческий учет затрат не ведется. Заполнить по данным регламентированного учета?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнятьДаннымиРеглУчета = Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМатериалыПоОстаткам(ПоДаннымРеглУчета) 
	
	Если Объект.Проведен Тогда
		СтрокаСообщения = Нстр("ru = 'Заполнение возможно только в непроведенном документе'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, Объект);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтрокаСообщения = Нстр("ru = 'Не указано подразделение.
			|Заполнение невозможно'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,, "Подразделение");
		Возврат;
	КонецЕсли;
	
	Если НЕ ПоДаннымРеглУчета Тогда
		Если НЕ ПроверитьИспользуетсяУправленческийУчетЗатрат(ПоДаннымРеглУчета) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если РаботаСДиалогамиКлиент.ПользовательОтказалсяПерезаполнитьТабличнуюЧасть(Объект.Материалы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМатериалыПоОстаткамСервер(ПоДаннымРеглУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоОстаткамУпр(Команда)
	
	ЗаполнитьМатериалыПоОстаткам(Ложь); // По данным упр. учета
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоОстаткамРегл(Команда)
	
	ЗаполнитьМатериалыПоОстаткам(Истина); // По данным регл. учета
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	ДанныеОбменаССервером = Новый Структура();
	ДанныеОбменаССервером.Вставить("Номенклатура",  СтрокаТабличнойЧасти.Номенклатура);
	
	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеНоменклатуры(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДанныеОбменаССервером.СведенияЕдиницаИзмеренияМест);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	ДанныеОбменаССервером = Новый Структура();
	ДанныеОбменаССервером.Вставить("ЕдиницаИзмерения",     СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ДанныеОбменаССервером.Вставить("ЕдиницаИзмеренияМест", СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест);
	
	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеЕдиницыИзмерения(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДанныеОбменаССервером.СведенияЕдиницаИзмеренияМест);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.ОчиститьКоличествоМестПриОчисткеЕдиницыМест(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
	
	РассчитатьСумму(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти);
	
	РассчитатьСумму(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыТипСтоимостиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ТипСтоимости = ТипСтоимостиРассчитывается Тогда
		// Цена не имеет смысла, установим её равной 0
		СтрокаТабличнойЧасти.Цена      = 0;
		СтрокаТабличнойЧасти.Сумма     = 0;
		СтрокаТабличнойЧасти.СуммаРегл = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.Цена <> 0 Тогда
		СтрокаТабличнойЧасти.ТипСтоимости = ТипСтоимостиФиксированная; 
	КонецЕсли;
	РассчитатьСумму(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.Сумма <> 0 Тогда
		СтрокаТабличнойЧасти.ТипСтоимости = ТипСтоимостиФиксированная; 
	КонецЕсли;
	РассчитатьЦену(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаРеглПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.СуммаРегл <> 0 Тогда
		СтрокаТабличнойЧасти.ТипСтоимости = ТипСтоимостиФиксированная; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПодбор(Команда)
	ДействиеПодбор();
КонецПроцедуры


&НаСервереБезКонтекста
Функция ИзменениеНалоговогоНазначенияСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеНалоговогоНазначения(ДанныеДляЗаполнения);
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

