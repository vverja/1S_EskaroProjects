Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мУчетнаяПолитика;                 // (Общ)
Перем мУчетнаяПолитикаРегл;             // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

Перем мИспользоватьЗаказыНаПроизводство Экспорт;
Перем мУказаниеПроектовВТабличнойЧастиДокументов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(Нстр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(Нстр("ru = 'Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	Иначе
		//Печать форм Накладная, НакладнаяУпр, НакладнаяРегл
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ОприходованиеМатериаловИзПроизводства", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ОприходованиеМатериаловИзПроизводства", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;

	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	Если ОтражатьВБухгалтерскомУчете И ОтражатьВУправленческомУчете Тогда
		СтруктураМакетов.Вставить( "НакладнаяУпр",  "Накладная на оприходование материалов (упр.)");
		СтруктураМакетов.Вставить( "НакладнаяРегл", "Накладная на оприходование материалов (регл.)");
	Иначе
		СтруктураМакетов.Вставить( "Накладная", "Накладная на оприходование материалов");
	КонецЕсли;
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти) Экспорт

	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	
КонецПроцедуры // ПриИзмененииНоменклатурыМатериалов()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
							   |Материалы.Счет, Материалы.СчетЗатрат, Материалы.НалоговоеНазначение";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетУчетаНоменклатуры=Истина, ЗаполнятьСчетаУчетаЗатрат = Истина) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетУчетаНоменклатуры, ЗаполнятьСчетаУчетаЗатрат);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетУчетаНоменклатуры=Истина, ЗаполнятьСчетаУчетаЗатрат = Истина) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьСчетаУчетаЗатрат,ЗаполнятьСчетУчетаНоменклатуры);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Процедура заполняет табличную часть "Материалы" остатками материалов в производстве
// на дату документа
Процедура ЗаполнитьОстаткамиМатериаловВПроизводстве() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МатериалыВПроизводствеОстатки.Затрата КАК Номенклатура,
	|	МатериалыВПроизводствеОстатки.Затрата.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	МатериалыВПроизводствеОстатки.Затрата.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	МатериалыВПроизводствеОстатки.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры,
	|	МатериалыВПроизводствеОстатки.СерияЗатраты КАК СерияНоменклатуры,
	|	МатериалыВПроизводствеОстатки.Заказ КАК Заказ,
	|	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество,
	|	МатериалыВПроизводствеОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.МатериалыВПроизводстве.Остатки(&Дата, Подразделение = &Подразделение) КАК МатериалыВПроизводствеОстатки
	|ГДЕ
	|	МатериалыВПроизводствеОстатки.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Коэффициент,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	Заказ
	|АВТОУПОРЯДОЧИВАНИЕ"
	);
	Запрос.УстановитьПараметр("Дата",          Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	ОстаткиМатериалов = Запрос.Выполнить().Выгрузить();
	Материалы.Загрузить(ОстаткиМатериалов);
	
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция проверяет правильность заполнения документа
// Возврат - структура с данными шапки документа
//
Функция ПроверкаРеквизитов(Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // ПроверкаРеквизитов()

Процедура ПроверкаРеквизитовТЧ(ТаблицаМатериалов, СтруктураШапкиДокумента, Отказ, Заголовок)
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	
	ПроверятьЗаполнениеНУ = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
							И (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС);

	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатусПартии) Тогда
			СтрокаСообщения = Нстр("ru = 'Не указан статус возврата (строка №'") + СтрокаТЧ.НомерСтроки + ")";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатьяЗатрат) Тогда
			СтрокаСообщения = Нстр("ru = 'Не указана статья затрат! (строка №'") + СтрокаТЧ.НомерСтроки + ")";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
			Продолжить;
		ИначеЕсли СтрокаТЧ.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается
		   И Не СтрокаТЧ.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		   	СтрокаСообщения = Нстр("ru = 'Возвращать по рассчитываемой стоимости можно только по производственным статьям затрат! (строка №'") + СтрокаТЧ.НомерСтроки + ")";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.ВозвратныеОтходы Тогда
			Если СтрокаТЧ.СтатьяЗатрат.ХарактерЗатрат<>Перечисления.ХарактерЗатрат.ПроизводственныеРасходы 
				ИЛИ СтрокаТЧ.СтатьяЗатрат.ВидЗатрат<>Перечисления.ВидыЗатрат.Материальные Тогда
				СтрокаСообщения = Нстр("ru = 'При виде операции ""Возвратные отходы"" можно указывать только статьи затрат с характером затрат ""Производственные расходы"" и видом затрат ""Материальные""! (строка №'") + СтрокаТЧ.НомерСтроки + ")";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
			КонецЕсли;
		Иначе
			Если СтрокаТЧ.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
				СтрокаСообщения = Нстр("ru = 'При виде операции ""Материалы"" нельзя указывать статьи затрат с характером затрат ""Прочие""! (строка №'") + СтрокаТЧ.НомерСтроки + ")";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
			КонецЕсли;
		КонецЕсли;
		// Проверим заполнение налоговых реквизитов
		Если ПроверятьЗаполнениеНУ Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначение) Тогда
				СтрокаСообщения = Нстр("ru = 'Не указано налоговое назначение! (строка №'") + СтрокаТЧ.НомерСтроки + ")";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УправлениеЗапасами.ПроверитьЧтоНетУслуг( ЭтотОбъект, "Материалы",, Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаМатериалов,
		"Материалы",
		Отказ, 
		Заголовок, 
		"Производство"
	);	
	
	

КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,  ТаблицаПоМатериалам, Отказ, Заголовок);
	
	
	// Формирование движений по регистрам бухгалтерии "Хозрасчетный"
	//
	// Формируются движения только для РАУЗ и вида операции ВозвратныеОтходы.
	//
	// 	Для "традиционного" режима учета затрат движения формируются 
	//	в модуле УправлениеПроизводствомДвиженияПоРегистрам.
	//
	//	Для РАУЗ и вида операции Материалы - в подписке на событие 
	//	ПриПроведенииРасширеннаяАналитикаЗапасовИзменениеСостояния
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику 
	   И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	   И СтруктураШапкиДокумента.ВидОперации = 
	     Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.ВозвратныеОтходы Тогда
		 
		 УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(
			СтруктураШапкиДокумента, 
			Отказ, 
			ТаблицаПоМатериалам,
			,// ТаблицаПоТаре
			,// ТаблицаПоУслугам=неопределено
			,// ТаблицаПоОборудованию_ТаблицаПоКомплектам
			,// ТаблицаПоОбъектамСтроительства
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете);
			
	КонецЕсли;
	
	// Формирование движений по регистрам "Затраты на выпуск продукции".				
	// Формирует движения только для "традиционного" режима учета затрат
	// При РАУЗ движения формируются в подписке на событие ПриПроведенииРасширеннаяАналитикаЗапасовИзменениеСостояния
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(
		СтруктураШапкиДокумента, 
		"ОприходованиеМатериаловИзПроизводства",
		мУчетнаяПолитика,
		мУчетнаяПолитикаРегл
		);
		
	// Формирование движений по регистрам "Выпуск продукции" и направлениям выпуска.
	// Формирует движения только для "традиционного" режима учета затрат
	// При РАУЗ движения формируются в подписке на событие ПриПроведенииРасширеннаяАналитикаЗапасовИзменениеСостояния
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска(
		СтруктураШапкиДокумента, 
		"ОприходованиеМатериаловИзПроизводства",
		мУчетнаяПолитика, 
		мУчетнаяПолитикаРегл
		);

	// Зарегистрируем документ в последовательности.
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект, 
		Дата, 
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
	);
		
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистру "Товары на складах"
// (по данным ТЧ Материалы)
Процедура ПоступлениеТоваровНаСклад(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		// При использовании традиционного режима движения по регистрам выполняются в процедуре 
		// СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска()
		Возврат;
	КонецЕсли;
		
	//ТОВАРЫ НА СКЛАДАХ
	НаборДвижений = Движения.ТоварыНаСкладах;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);
	
	НаборДвижений.мПериод          = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистру "Товары в резерве на складах"
// (по данным ТЧ Материалы - только с заполненными заказами)
Процедура РезервированиеТоваровНаСкладе(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		// При использовании традиционного режима движения по регистрам выполняются в процедуре 
		// СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска()
		Возврат;
	КонецЕсли;
		
	//ТОВАРЫ В РЕЗЕРВЕ НА СКЛАДАХ
	ТаблицаПоМатериаламРезервирование = ТаблицаПоМатериалам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоМатериаламРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоМатериаламРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) Тогда
			 ТаблицаПоМатериаламРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	Если ТаблицаПоМатериаламРезервирование.Количество() > 0 Тогда
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериаламРезервирование, ТаблицаДвижений);
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РезервированиеТоваровНаСкладе

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		// При использовании традиционного режима движения по регистрам выполняются в процедуре 
		// СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска()
		Возврат;
	КонецЕсли;
		
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		// При использовании традиционного режима движения по регистрам выполняются в процедуре 
		// СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска()
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизацийРегл.

	НаборДвижений = Движения.ТоварыОрганизацийРегл;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

	Если Не ВестиПартионныйУчетПоСкладамРегл Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизацийРегл.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка остатков при оперативном проведении.
	Движения.МатериалыВПроизводстве.КонтрольОстатков(
		СтруктураШапкиДокумента, 
		Отказ, 
		Заголовок, 
		РежимПроведения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений расход по регистру "Материалы в производстве".
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоМатериаламВПроизводстве(
		СтруктураШапкиДокумента, 
		мУчетнаяПолитика
	);
	
	// Движения по регистру ЛимитноЗаборныеКарты.
	Если УправлениеПроизводством.ИспользоватьЛимитыОтпускаМатериалов() Тогда
		
		РезультатЗапросаЛимиты = 
		УправлениеПроизводством.СформироватьЗапросЛимитыОтпускаМатериаловПоТабличнойЧасти(ЭтотОбъект);
			
		Если НЕ РезультатЗапросаЛимиты.Пустой() Тогда
			
			НаборДвижений = Движения.ЛимитноЗаборныеКарты;
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
				РезультатЗапросаЛимиты.Выгрузить(), 
				ТаблицаДвижений);

			СтруктураТаблицДокумента = Новый Структура("ТаблицаДвижений", ТаблицаДвижений);
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, СтруктураТаблицДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоступлениеТоваровНаСклад(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	РезервированиеТоваровНаСкладе(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПОДГОТОВКИ ТАБЛИЦ ЗНАЧЕНИЙ ДЛЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, истина);
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()
 
// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Материалы",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоМатериалам.Выгрузить();
		
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуМатериалов()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ПроверкаРеквизитов(Отказ);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "СписыватьПартииПриПроведенииДокументов", "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиПартионныйУчетПоСкладам",           "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",       		"ВидСклада",                              "ВидСклада");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", 	"ВедениеУчетаЗатратПоПроектам", 		  "ВедениеУчетаЗатратПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", 	"УчетЗатратПоЗаказамНаПроизводство", 	  "УчетЗатратПоЗаказамНаПроизводство");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуруШапкиПодразделениемОрганизации(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	СтруктураШапкиДокумента.Вставить(
		"ИспользоватьРасширеннуюАналитику", 
		УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата));
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоМатериалам) Экспорт
	
	// Подготовим таблицу материалов для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        				, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              				, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               				, "Номенклатура.Набор");
	СтруктураПолей.Вставить("ВестиОперативныйУчетОстатковНЗП"	, "Номенклатура.ВестиОперативныйУчетОстатковНЗП");
	СтруктураПолей.Вставить("Количество"          				, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	
	СтруктураПолей.Вставить("Склад"        						, "Ссылка.Склад");
	СтруктураПолей.Вставить("Подразделение"        				, "Ссылка.Подразделение");
	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"		, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         		, "СерияНоменклатуры");
	
	СтруктураПолей.Вставить("Продукция"        					, "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции"			, "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукции"         			, "СерияПродукции");
	СтруктураПолей.Вставить("Затрата"        					, "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаЗатраты"				, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияЗатраты"         				, "СерияНоменклатуры");
	
	СтруктураПолей.Вставить("ЗаказПокупателя"					, "Заказ");
	СтруктураПолей.Вставить("Контрагент"						, "Заказ.Контрагент");
	СтруктураПолей.Вставить("ЗаказРезерв"				        , "ЗаказРезерв");
	СтруктураПолей.Вставить("ЗаказПолучатель"				    , "ЗаказРезерв");
	СтруктураПолей.Вставить("ДокументРезерва"				    , "ЗаказРезерв");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"               , "ЗаказРезерв.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"             , "ЗаказРезерв.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
							"ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("СтатьяЗатрат"						, "СтатьяЗатрат");
	СтруктураПолей.Вставить("СтатусМатериальныхЗатрат"			, "СтатьяЗатрат.СтатусМатериальныхЗатрат");
	СтруктураПолей.Вставить("СтатьяЗатратПоВозврату"			, "СтатьяЗатрат");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"				, "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("НоменклатурнаяГруппаНЗП"			, "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("ХарактерЗатрат"					, "СтатьяЗатрат.ХарактерЗатрат");
	
	СтруктураПолей.Вставить("СтатусПартии"         				, "СтатусВозврата");
	СтруктураПолей.Вставить("Качество"         					, "Качество");
	СтруктураПолей.Вставить("Проект"         					, "Проект");
		
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"		, "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("ВестиУчетПоСериямВНЗП"				, "Номенклатура.ВестиУчетПоСериямВНЗП");
	
	СтруктураПолей.Вставить("ПродукцияБракВПроизводстве"        , "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукцииБракВПроизводстве", "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукцииБракВПроизводстве"   , "СерияПродукции");
	
	СтруктураПолей.Вставить("ОбъектСтроительства"   			, "ОбъектСтроительства");
	СтруктураПолей.Вставить("НалоговоеНазначение"   		    , "НалоговоеНазначение");  
	
	СтруктураПолей.Вставить("Счет"   							, "Счет");
	СтруктураПолей.Вставить("СчетУчетаБУ"   					, "Счет");
	СтруктураПолей.Вставить("СчетЗатрат"   						, "СчетЗатрат");
	
	СтруктураПростыхПолей = Новый Структура;

	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("ТипСтоимости",  "ВЫБОР КОГДА ТипСтоимости = Значение(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА ТипСтоимости ИНАЧЕ Значение(Перечисление.ВидыНормативнойСтоимостиПроизводства.Рассчитывается) КОНЕЦ");
	СтруктураСложныхПолей.Вставить("СтоимостьУпр",  "ВЫБОР КОГДА ТипСтоимости = Значение(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА Сумма        ИНАЧЕ 0 КОНЕЦ");
	СтруктураСложныхПолей.Вставить("СтоимостьРегл", "ВЫБОР КОГДА ТипСтоимости = Значение(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА СуммаРегл    ИНАЧЕ 0 КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("СтоимостьНал",  "ВЫБОР КОГДА ТипСтоимости = Значение(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА СуммаНал    ИНАЧЕ 0 КОНЕЦ");
	СтруктураСложныхПолей.Вставить("СуммаНДСРегл",  "ВЫБОР КОГДА ТипСтоимости = Значение(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА СуммаНДС    ИНАЧЕ 0 КОНЕЦ");
	СтруктураСложныхПолей.Вставить("ПроводкиСуммаНДСРегл", "ВЫБОР КОГДА ТипСтоимости = Значение(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА СуммаНДСКредит  ИНАЧЕ 0 КОНЕЦ");
	
	СтруктураОбрабатываемыхКолонок = Новый Структура();
	ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок);
	
	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
   	ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
	//Заполнение незаполненных СтатьиЗатрат и НоменклатурнойГруппы по Номенклатуре в Таблице материалов
	ОбщегоНазначенияКлиентСервер.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВТаблицеДокумента(ТаблицаПоМатериалам, СтруктураОбрабатываемыхКолонок);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

//Процедура добавляет в структуру полей сведения о СтатьеЗатрат и НоменклатурнойГруппе из Номенклатуры
//	Эти сведения впоследствии могут пригодиться для заполнения незаполненных Статьи и НоменклатурнойГруппы
//	Также процедура готовит структуру, сопоставляющую поля из табличной части документа и поля из номенклатуры
Процедура ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок)
	СтруктураПолей.Вставить("СтатьяЗатратНоменклатуры"			, "Номенклатура.СтатьяЗатрат");
	СтруктураПолей.Вставить("СтатусМатериальныхЗатратНоменклатуры", "Номенклатура.СтатьяЗатрат.СтатусМатериальныхЗатрат");
	СтруктураПолей.Вставить("СтатьяЗатратПоВозвратуНоменклатуры", "Номенклатура.СтатьяЗатрат");
	СтруктураПолей.Вставить("НоменклатурнаяГруппаНоменклатуры"	, "Номенклатура.НоменклатурнаяГруппаЗатрат");
	СтруктураПолей.Вставить("НоменклатурнаяГруппаНЗПНоменклатуры", "Номенклатура.НоменклатурнаяГруппаЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатратНоменклатуры"		, "Номенклатура.СтатьяЗатрат.ХарактерЗатрат");
	
	СтруктураОбрабатываемыхКолонок = Новый Структура();
	СтруктураОбрабатываемыхКолонок.Вставить("СтатьяЗатрат", 			"СтатьяЗатратНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("СтатусМатериальныхЗатрат", "СтатусМатериальныхЗатратНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("СтатьяЗатратПоВозврату", 	"СтатьяЗатратПоВозвратуНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("НоменклатурнаяГруппа", 	"НоменклатурнаяГруппаНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("НоменклатурнаяГруппаНЗП", 	"НоменклатурнаяГруппаНЗПНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("ХарактерЗатрат", 			"ХарактерЗатратНоменклатуры");
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоМатериалам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоМатериалам);
	
	//Проверим заполнение счетов учета.
	//В документе еще проверяется балансовость счета затрат в зависимости от статуса затрат
	//(перебором по строкам).
	//(см. комментарий "Проверка балансовости счетов зависит от статуса затрат")
	//Так как эта проверка выполняется "через точку" и до проверки заполнения счетов учета,
	//то возможна ситуация, когда будет выдано неправильное сообщение об ошибке:
	//	с учета БУ не заполнен, счет затрат - забалансовый, 
	//	указана статья затрат со статусом мат. Затрат "принятые в переработку"
	//	При проведении появляется сообщение:
	//	<Для давальческого сырья надо использовать забалансовые счет учета и счет затрат!> 
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Материалы", ТаблицаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(ТаблицаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	КонецЕсли;
	
	// Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам));
	
КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		
		// Заполнение шапки
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		Организация                  = Основание.Организация;
		Подразделение                = Основание.Подразделение;
		ПодразделениеОрганизации     = Основание.ПодразделениеОрганизации;
		Комментарий   = Основание.Комментарий;
		Ответственный = Основание.Ответственный;
		Склад         = Основание.Склад;
		ВидОперации   = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы;
		
		Для Каждого ТекСтрокаМатериалы Из Основание.Материалы Цикл
			НоваяСтрока = Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаМатериалы);
			
			Если НоваяСтрока.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
				НоваяСтрока.СтатусВозврата = Перечисления.СтатусыПартийТоваров.ВПереработку;
			Иначе
				НоваяСтрока.СтатусВозврата = Перечисления.СтатусыПартийТоваров.Купленный;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияНЗП") Тогда
		
		// Заполнение шапки
		ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИнвентаризацияНЗПМатериалы.Номенклатура,
		|	ИнвентаризацияНЗПМатериалы.СерияНоменклатуры,
		|	ИнвентаризацияНЗПМатериалы.ХарактеристикаНоменклатуры,
		|	ИнвентаризацияНЗПМатериалы.ЕдиницаИзмеренияМест,
		|	ИнвентаризацияНЗПМатериалы.КоличествоМест,
		|	ИнвентаризацияНЗПМатериалы.ЕдиницаИзмерения,
		|	ИнвентаризацияНЗПМатериалы.Коэффициент,
		|	ИнвентаризацияНЗПМатериалы.Количество,
		|	ИнвентаризацияНЗПМатериалы.НоменклатурнаяГруппа,
		|	ИнвентаризацияНЗПМатериалы.СтатьяЗатрат,
		|	ИнвентаризацияНЗПМатериалы.Заказ,
		|	ВЫБОР
		|		КОГДА ИнвентаризацияНЗПМатериалы.СтатьяЗатрат.СтатусМатериальныхЗатрат = ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
		|			ТОГДА ИнвентаризацияНЗПМатериалы.Заказ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ЗаказРезерв,
		|	ВЫБОР
		|		КОГДА ИнвентаризацияНЗПМатериалы.СтатьяЗатрат.СтатусМатериальныхЗатрат = ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВПереработку)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Купленный)
		|	КОНЕЦ КАК СтатусВозврата,
		|	ИнвентаризацияНЗПМатериалы.СчетЗатрат,
		|	ИнвентаризацияНЗПМатериалы.НалоговоеНазначение,
		|	ИнвентаризацияНЗПМатериалы.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество
		|ИЗ
		|	Документ.ИнвентаризацияНЗП.Материалы КАК ИнвентаризацияНЗПМатериалы
		|ГДЕ
		|	ИнвентаризацияНЗПМатериалы.Ссылка = &Ссылка
		|	И (НЕ ИнвентаризацияНЗПМатериалы.Номенклатура.Набор)
		|	И (НЕ ИнвентаризацияНЗПМатериалы.Номенклатура.Услуга)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		);
		Запрос.УстановитьПараметр("Ссылка", Основание);
		
		Материалы.Загрузить(Запрос.Выполнить().Выгрузить());
		
		ЗаполнитьСчетаУчетаВТабЧасти(
			Материалы, 
			"Материалы", 
			ОтражатьВБухгалтерскомУчете, 
			Истина,  // Заполняем счета учета номенклатуры
			Ложь);   // Не заполняем счета учета затрат (уже заполнены из документа-основания)
			
	КонецЕсли;
			
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		
		// Заполнение по настройке
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.ОприходованиеМатериаловИзПроизводства.СтруктураДополнительныхДанныхФормы());
		
	Иначе
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		Если НЕ ЗначениеЗаполнено(Проект) Тогда
			Проект = Подразделение.ОсновнойПроект;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Материалы,		// ТабличнаяЧастьТовары
			Неопределено,	// ТабличнаяЧастьВозвратнаяТара
			Неопределено,   // ТабличнаяЧастьУслуги
			Неопределено,   // ТабличнаяЧастьОборудование
			Неопределено, 	// ТабличнаяЧастьОбъектыСтроительства
			Неопределено 	// ТабличнаяЧастьБланкиСтрогогоУчета
		);
	
	КонецЕсли;	

	
	Если Не мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.ЗаполнитьПроектВСтрокахТабЧасти(ЭтотОбъект, Материалы);
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;

	Если НЕ ОтражатьВУправленческомУчете Тогда
		//Заполнение подразделения проверять не требуется
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("Подразделение");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Материалы, ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");

мИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
мУказаниеПроектовВТабличнойЧастиДокументов = УправлениеПроектами.УказаниеПроектовВТабличнойЧастиДокументов();
