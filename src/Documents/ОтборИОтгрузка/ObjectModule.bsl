Перем НомераКомплектаций, НомераПополнений, ПредварительноеПроведение Экспорт;
Перем ДокументИзменен;
Перем ЭтоПерепроведение;
Перем ЭтоУстановкаСтатуса Экспорт;
Перем тзОтгрузкаСохр Экспорт;
Перем СписокМаршрутов Экспорт;
Перем СписокЯчеек Экспорт;
Перем ТЗДок Экспорт;
Перем ЗаполненноеЗаданиеНаТранспортировку Экспорт;
Перем ЗаполненноеКомплектацияЯчейка Экспорт;

Процедура СформироватьТекстЗапроса(Назначение, Запрос, ВнутриЗоны = Неопределено, ПоРавенству = Ложь) Экспорт
	Если Назначение = "БуферныеЯчейкиХранения" Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РазмещениеТоваровНаСкладахОстатки.Ячейка,
		|	РазмещениеТоваровНаСкладахОстатки.НомерПаллета,
		|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) КАК КоличествоЕХООстаток
		|ПОМЕСТИТЬ РазмещенияНоменклатуры
		|ИЗ
		|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
		|			&НаДату,
		|			Склад = &Склад
		|				И Номенклатура = &Номенклатура
		|				И НЕ Статус = &СтатусВыполнениеРазмещения) КАК РазмещениеТоваровНаСкладахОстатки
		|ГДЕ
		|	НЕ РазмещениеТоваровНаСкладахОстатки.Ячейка В (&ИсключаемыеЯчейки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазмещенияНоменклатуры.Ячейка,
		|	СостояниеЗонЯчеекСрезПоследних.Зона,
		|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки,
		|	РазмещенияНоменклатуры.КоличествоЕХООстаток КАК ОбщийОстатокВЕХО,
		|	РазмещенияНоменклатуры.НомерПаллета
		|ПОМЕСТИТЬ РазмещениеСОтбором
		|ИЗ
		|	РазмещенияНоменклатуры КАК РазмещенияНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗонЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеЗонЯчеекСрезПоследних
		|		ПО РазмещенияНоменклатуры.Ячейка = СостояниеЗонЯчеекСрезПоследних.Ячейка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеВидовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеВидовЯчеекСрезПоследних
		|		ПО РазмещенияНоменклатуры.Ячейка = СостояниеВидовЯчеекСрезПоследних.Ячейка
		|ГДЕ
		|	СостояниеЗонЯчеекСрезПоследних.Зона " + ?(ВнутриЗоны, "=", "<>") + " &Зона
		|	И РазмещенияНоменклатуры.КоличествоЕХООстаток " + ?(ПоРавенству, "=", "<") + " &КоличествоКОтгрузке
		//|	СостояниеЗонЯчеекСрезПоследних.Зона <> &Зона
		//|	И РазмещенияНоменклатуры.КоличествоЕХООстаток = &КоличествоКОтгрузке
		|	И СостояниеВидовЯчеекСрезПоследних.ВидЯчейки = &ВидЯчейкиБуферная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РазмещениеТоваровНаСкладах.Период) КАК ДатаПоступления,
		|	РазмещениеТоваровНаСкладах.Ячейка КАК Ячейка
		|ПОМЕСТИТЬ ДатыПриемок
		|ИЗ
		|	РегистрНакопления.РазмещениеТоваровНаСкладах КАК РазмещениеТоваровНаСкладах
		|ГДЕ
		|	РазмещениеТоваровНаСкладах.Склад = &Склад
		|	И РазмещениеТоваровНаСкладах.Номенклатура = &Номенклатура
		|	И РазмещениеТоваровНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И 1 В
		|			(ВЫБРАТЬ
		|				1 КАК Поле1
		|			ИЗ
		|				РазмещениеСОтбором КАК РазмещениеСОтбором
		|			ГДЕ
		|				РазмещениеТоваровНаСкладах.Ячейка = РазмещениеСОтбором.Ячейка)
		|	И РазмещениеТоваровНаСкладах.Статус <> &СтатусВыполнениеРазмещения
		|
		|СГРУППИРОВАТЬ ПО
		|	РазмещениеТоваровНаСкладах.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ДатыПриемок.ДатаПоступления) КАК ДатаПоступления
		|ПОМЕСТИТЬ СамаяРанняяДата
		|ИЗ
		|	ДатыПриемок КАК ДатыПриемок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПриемок.Ячейка
		|ПОМЕСТИТЬ ЯчейкиПоФИФО
		|ИЗ
		|	ДатыПриемок КАК ДатыПриемок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СамаяРанняяДата КАК СамаяРанняяДата
		|		ПО ДатыПриемок.ДатаПоступления = СамаяРанняяДата.ДатаПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазмещениеСОтбором.Ячейка,
		|	РазмещениеСОтбором.Ячейка.НомерРяда,
		|	РазмещениеСОтбором.Ячейка.НомерЯруса,
		|	РазмещениеСОтбором.Ячейка.НомерЯчейки,
		|	РазмещениеСОтбором.Зона,
		|	РазмещениеСОтбором.ОбщийОстатокВЕХО,
		|	РазмещениеСОтбором.НомерПаллета
		|ПОМЕСТИТЬ ДоступныеЯчейки
		|ИЗ
		|	РазмещениеСОтбором КАК РазмещениеСОтбором
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЯчейкиПоФИФО КАК ЯчейкиПоФИФО
		|		ПО РазмещениеСОтбором.Ячейка = ЯчейкиПоФИФО.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеЯчейки.Ячейка,
		|	ДоступныеЯчейки.ЯчейкаНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаНомерЯчейки,
		|	ЕСТЬNull(СУММА(СкладскиеЯчейкиВысота.ВысотаЯчейки), 0) КАК Высота,
		|	ДоступныеЯчейки.Зона,
		|	ДоступныеЯчейки.ОбщийОстатокВЕХО,
		|	ДоступныеЯчейки.НомерПаллета
		|ПОМЕСТИТЬ ВысотаЯчеек
		|ИЗ
		|	ДоступныеЯчейки КАК ДоступныеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиВысота
		|		ПО ДоступныеЯчейки.ЯчейкаНомерРяда = СкладскиеЯчейкиВысота.НомерРяда
		|			И (1 = СкладскиеЯчейкиВысота.НомерЯчейки)
		|			И ДоступныеЯчейки.ЯчейкаНомерЯруса > СкладскиеЯчейкиВысота.НомерЯруса
		|			И (СкладскиеЯчейкиВысота.Владелец = &Склад)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеЯчейки.Ячейка,
		|	ДоступныеЯчейки.ЯчейкаНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаНомерЯчейки,
		|	ДоступныеЯчейки.Зона,
		|	ДоступныеЯчейки.ОбщийОстатокВЕХО,
		|	ДоступныеЯчейки.НомерПаллета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВысотаЯчеек.Ячейка,
		|	ВысотаЯчеек.ЯчейкаНомерЯруса,
		|	ЕСТЬNULL(СУММА(СкладыРасстояния.Расстояние), 0) + ЕСТЬNULL(СУММА(СкладскиеЯчейкиДлина.ДлинаЯчейки), 0) КАК Расстояние,
		|	ВысотаЯчеек.Высота КАК Высота,
		|	ВысотаЯчеек.Зона,
		|	ВысотаЯчеек.ОбщийОстатокВЕХО,
		|	ВысотаЯчеек.НомерПаллета
		|ПОМЕСТИТЬ Расстояния
		|ИЗ
		|	ВысотаЯчеек КАК ВысотаЯчеек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиДлина
		|		ПО ВысотаЯчеек.ЯчейкаНомерРяда = СкладскиеЯчейкиДлина.НомерРяда
		|			И ВысотаЯчеек.ЯчейкаНомерЯруса = СкладскиеЯчейкиДлина.НомерЯруса
		|			И ВысотаЯчеек.ЯчейкаНомерЯчейки > СкладскиеЯчейкиДлина.НомерЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.Расстояния КАК СкладыРасстояния
		|		ПО ВысотаЯчеек.ЯчейкаНомерРяда = СкладыРасстояния.НомерРяда
		|
		|СГРУППИРОВАТЬ ПО
		|	ВысотаЯчеек.Ячейка,
		|	ВысотаЯчеек.ЯчейкаНомерЯруса,
		|	ВысотаЯчеек.Высота,
		|	ВысотаЯчеек.Зона,
		|	ВысотаЯчеек.ОбщийОстатокВЕХО,
		|	ВысотаЯчеек.НомерПаллета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расстояния.Зона КАК Зона,
		|	Расстояния.Ячейка КАК Ячейка,
		|	Расстояния.ЯчейкаНомерЯруса КАК НомерЯруса,
		|	Расстояния.Расстояние / &СкоростьДвижения + Расстояния.Высота / &СкоростьПодъема * 2 КАК ВремяОтгрузки,
		|	Расстояния.ОбщийОстатокВЕХО,
		|	Расстояния.НомерПаллета
		|ПОМЕСТИТЬ ЯчейкиВремя
		|ИЗ
		|	Расстояния КАК Расстояния
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиВремя.ВремяОтгрузки) КАК ВремяОтгрузки
		|ПОМЕСТИТЬ МинимальноеВремя
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиВремя.Зона,
		|	ЯчейкиВремя.Ячейка,
		|	ЯчейкиВремя.ВремяОтгрузки,
		|	ЯчейкиВремя.НомерЯруса,
		|	ЯчейкиВремя.ОбщийОстатокВЕХО,
		|	ЯчейкиВремя.НомерПаллета
		|ПОМЕСТИТЬ ЯчейкиСМинимальнымВременем
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальноеВремя КАК МинимальноеВремя
		|		ПО ЯчейкиВремя.ВремяОтгрузки = МинимальноеВремя.ВремяОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиСМинимальнымВременем.НомерЯруса) КАК НомерЯруса
		|ПОМЕСТИТЬ МинимальныйЯрус
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиСМинимальнымВременем.Ячейка,
		|	ЯчейкиСМинимальнымВременем.Зона КАК ЗонаЯчейки,
		|	ЯчейкиСМинимальнымВременем.ВремяОтгрузки,
		|	ЯчейкиСМинимальнымВременем.ОбщийОстатокВЕХО,
		|	ЯчейкиСМинимальнымВременем.НомерПаллета
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйЯрус КАК МинимальныйЯрус
		|		ПО ЯчейкиСМинимальнымВременем.НомерЯруса = МинимальныйЯрус.НомерЯруса";
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ОтобранныеЯчейки.Ячейка,
		//|	ОтобранныеЯчейки.ЗонаЯчейки,
		//|	ОтобранныеЯчейки.ВремяОтгрузки,
		//|	ОтобранныеЯчейки.ОбщийОстатокВЕХО,
		//|	ОтобранныеЯчейки.НомерПаллета
		//|ИЗ
		//|	ОтобранныеЯчейки КАК ОтобранныеЯчейки
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ОтобранныеЯчейки.Ячейка,
		//|	ОтобранныеЯчейки.ЗонаЯчейки,
		//|	ОтобранныеЯчейки.ВремяОтгрузки,
		//|	ОтобранныеЯчейки.ОбщийОстатокВЕХО,
		//|	ОтобранныеЯчейки.НомерПаллета";
	ИначеЕсли Назначение = "БуферныеЯчейкиХраненияСМинимальнымОстатком" Тогда
		//|	И РазмещенияНоменклатуры.КоличествоЕХООстаток " + ?(ПоРавенству, "=", "<") + " &КоличествоКОтгрузке
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РазмещениеТоваровНаСкладахОстатки.Ячейка,
		|	РазмещениеТоваровНаСкладахОстатки.НомерПаллета,
		|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) КАК КоличествоЕХООстаток
		|ПОМЕСТИТЬ РазмещенияНоменклатуры
		|ИЗ
		|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
		|			&НаДату,
		|			Склад = &Склад
		|				И Номенклатура = &Номенклатура
		|				И НЕ Статус = &СтатусВыполнениеРазмещения) КАК РазмещениеТоваровНаСкладахОстатки
		|ГДЕ
		|	НЕ РазмещениеТоваровНаСкладахОстатки.Ячейка В (&ИсключаемыеЯчейки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазмещенияНоменклатуры.Ячейка,
		|	СостояниеЗонЯчеекСрезПоследних.Зона,
		|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки,
		|	РазмещенияНоменклатуры.КоличествоЕХООстаток КАК ОбщийОстатокВЕХО,
		|	РазмещенияНоменклатуры.НомерПаллета
		|ПОМЕСТИТЬ РазмещениеСОтбором
		|ИЗ
		|	РазмещенияНоменклатуры КАК РазмещенияНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗонЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеЗонЯчеекСрезПоследних
		|		ПО РазмещенияНоменклатуры.Ячейка = СостояниеЗонЯчеекСрезПоследних.Ячейка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеВидовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеВидовЯчеекСрезПоследних
		|		ПО РазмещенияНоменклатуры.Ячейка = СостояниеВидовЯчеекСрезПоследних.Ячейка
		|ГДЕ
		|	СостояниеЗонЯчеекСрезПоследних.Зона " + ?(ВнутриЗоны, "=", "<>") + " &Зона
		//|	СостояниеЗонЯчеекСрезПоследних.Зона <> &Зона
		|	И РазмещенияНоменклатуры.КоличествоЕХООстаток < &КоличествоКОтгрузке
		|	И СостояниеВидовЯчеекСрезПоследних.ВидЯчейки = &ВидЯчейкиБуферная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(РазмещениеСОтбором.ОбщийОстатокВЕХО) КАК ОбщийОстатокВЕХО
		|ПОМЕСТИТЬ МинимальныйОстаток
		|ИЗ
		|	РазмещениеСОтбором КАК РазмещениеСОтбором
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазмещениеСОтбором.Ячейка,
		|	РазмещениеСОтбором.Зона,
		|	РазмещениеСОтбором.ВидЯчейки,
		|	РазмещениеСОтбором.ОбщийОстатокВЕХО,
		|	РазмещениеСОтбором.НомерПаллета
		|ПОМЕСТИТЬ ЯчейкиСМинимальнымОстатком
		|ИЗ
		|	РазмещениеСОтбором КАК РазмещениеСОтбором
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйОстаток КАК МинимальныйОстаток
		|		ПО РазмещениеСОтбором.ОбщийОстатокВЕХО = МинимальныйОстаток.ОбщийОстатокВЕХО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РазмещениеТоваровНаСкладах.Период) КАК ДатаПоступления,
		|	РазмещениеТоваровНаСкладах.Ячейка КАК Ячейка
		|ПОМЕСТИТЬ ДатыПриемок
		|ИЗ
		|	РегистрНакопления.РазмещениеТоваровНаСкладах КАК РазмещениеТоваровНаСкладах
		|ГДЕ
		|	РазмещениеТоваровНаСкладах.Склад = &Склад
		|	И РазмещениеТоваровНаСкладах.Номенклатура = &Номенклатура
		|	И РазмещениеТоваровНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И 1 В
		|			(ВЫБРАТЬ
		|				1 КАК Поле1
		|			ИЗ
		|				ЯчейкиСМинимальнымОстатком КАК ЯчейкиСМинимальнымОстатком
		|			ГДЕ
		|				РазмещениеТоваровНаСкладах.Ячейка = ЯчейкиСМинимальнымОстатком.Ячейка)
		|	И РазмещениеТоваровНаСкладах.Статус <> &СтатусВыполнениеРазмещения
		|
		|СГРУППИРОВАТЬ ПО
		|	РазмещениеТоваровНаСкладах.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ДатыПриемок.ДатаПоступления) КАК ДатаПоступления
		|ПОМЕСТИТЬ СамаяРанняяДата
		|ИЗ
		|	ДатыПриемок КАК ДатыПриемок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПриемок.Ячейка
		|ПОМЕСТИТЬ ЯчейкиПоФИФО
		|ИЗ
		|	ДатыПриемок КАК ДатыПриемок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СамаяРанняяДата КАК СамаяРанняяДата
		|		ПО ДатыПриемок.ДатаПоступления = СамаяРанняяДата.ДатаПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиСМинимальнымОстатком.Ячейка,
		|	ЯчейкиСМинимальнымОстатком.Ячейка.НомерРяда,
		|	ЯчейкиСМинимальнымОстатком.Ячейка.НомерЯруса,
		|	ЯчейкиСМинимальнымОстатком.Ячейка.НомерЯчейки,
		|	ЯчейкиСМинимальнымОстатком.Зона,
		|	ЯчейкиСМинимальнымОстатком.ОбщийОстатокВЕХО,
		|	ЯчейкиСМинимальнымОстатком.НомерПаллета
		|ПОМЕСТИТЬ ДоступныеЯчейки
		|ИЗ
		|	ЯчейкиСМинимальнымОстатком КАК ЯчейкиСМинимальнымОстатком
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЯчейкиПоФИФО КАК ЯчейкиПоФИФО
		|		ПО ЯчейкиСМинимальнымОстатком.Ячейка = ЯчейкиПоФИФО.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеЯчейки.Ячейка,
		|	ДоступныеЯчейки.ЯчейкаНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаНомерЯчейки,
		|	СУММА(СкладскиеЯчейкиВысота.ВысотаЯчейки) КАК Высота,
		|	ДоступныеЯчейки.Зона,
		|	ДоступныеЯчейки.ОбщийОстатокВЕХО,
		|	ДоступныеЯчейки.НомерПаллета
		|ПОМЕСТИТЬ ВысотаЯчеек
		|ИЗ
		|	ДоступныеЯчейки КАК ДоступныеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиВысота
		|		ПО ДоступныеЯчейки.ЯчейкаНомерРяда = СкладскиеЯчейкиВысота.НомерРяда
		|			И (1 = СкладскиеЯчейкиВысота.НомерЯчейки)
		|			И ДоступныеЯчейки.ЯчейкаНомерЯруса > СкладскиеЯчейкиВысота.НомерЯруса
		|			И (СкладскиеЯчейкиВысота.Владелец = &Склад)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеЯчейки.Ячейка,
		|	ДоступныеЯчейки.ЯчейкаНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаНомерЯчейки,
		|	ДоступныеЯчейки.Зона,
		|	ДоступныеЯчейки.ОбщийОстатокВЕХО,
		|	ДоступныеЯчейки.НомерПаллета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВысотаЯчеек.Ячейка,
		|	ВысотаЯчеек.ЯчейкаНомерЯруса,
		|	ЕСТЬNULL(СУММА(СкладыРасстояния.Расстояние), 0) + ЕСТЬNULL(СУММА(СкладскиеЯчейкиДлина.ДлинаЯчейки), 0) КАК Расстояние,
		|	ВысотаЯчеек.Высота КАК Высота,
		|	ВысотаЯчеек.Зона,
		|	ВысотаЯчеек.ОбщийОстатокВЕХО,
		|	ВысотаЯчеек.НомерПаллета
		|ПОМЕСТИТЬ Расстояния
		|ИЗ
		|	ВысотаЯчеек КАК ВысотаЯчеек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиДлина
		|		ПО ВысотаЯчеек.ЯчейкаНомерРяда = СкладскиеЯчейкиДлина.НомерРяда
		|			И ВысотаЯчеек.ЯчейкаНомерЯруса = СкладскиеЯчейкиДлина.НомерЯруса
		|			И ВысотаЯчеек.ЯчейкаНомерЯчейки > СкладскиеЯчейкиДлина.НомерЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.Расстояния КАК СкладыРасстояния
		|		ПО ВысотаЯчеек.ЯчейкаНомерРяда = СкладыРасстояния.НомерРяда
		|
		|СГРУППИРОВАТЬ ПО
		|	ВысотаЯчеек.Ячейка,
		|	ВысотаЯчеек.ЯчейкаНомерЯруса,
		|	ВысотаЯчеек.Высота,
		|	ВысотаЯчеек.Зона,
		|	ВысотаЯчеек.ОбщийОстатокВЕХО,
		|	ВысотаЯчеек.НомерПаллета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расстояния.Зона КАК Зона,
		|	Расстояния.Ячейка КАК Ячейка,
		|	Расстояния.ЯчейкаНомерЯруса КАК НомерЯруса,
		|	Расстояния.Расстояние / &СкоростьДвижения + Расстояния.Высота / &СкоростьПодъема * 2 КАК ВремяОтгрузки,
		|	Расстояния.ОбщийОстатокВЕХО,
		|	Расстояния.НомерПаллета
		|ПОМЕСТИТЬ ЯчейкиВремя
		|ИЗ
		|	Расстояния КАК Расстояния
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиВремя.ВремяОтгрузки) КАК ВремяОтгрузки
		|ПОМЕСТИТЬ МинимальноеВремя
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиВремя.Зона,
		|	ЯчейкиВремя.Ячейка,
		|	ЯчейкиВремя.ВремяОтгрузки,
		|	ЯчейкиВремя.НомерЯруса,
		|	ЯчейкиВремя.ОбщийОстатокВЕХО,
		|	ЯчейкиВремя.НомерПаллета
		|ПОМЕСТИТЬ ЯчейкиСМинимальнымВременем
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальноеВремя КАК МинимальноеВремя
		|		ПО ЯчейкиВремя.ВремяОтгрузки = МинимальноеВремя.ВремяОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиСМинимальнымВременем.НомерЯруса) КАК НомерЯруса
		|ПОМЕСТИТЬ МинимальныйЯрус
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиСМинимальнымВременем.Ячейка,
		|	ЯчейкиСМинимальнымВременем.Зона КАК ЗонаЯчейки,
		|	ЯчейкиСМинимальнымВременем.ВремяОтгрузки,
		|	ЯчейкиСМинимальнымВременем.ОбщийОстатокВЕХО,
		|	ЯчейкиСМинимальнымВременем.НомерПаллета
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйЯрус КАК МинимальныйЯрус
		|		ПО ЯчейкиСМинимальнымВременем.НомерЯруса = МинимальныйЯрус.НомерЯруса";
	ИначеЕсли Назначение = "ПаллетыДляПеремещения" Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РазмещениеТоваровНаСкладахОстатки.Ячейка,
		|	РазмещениеТоваровНаСкладахОстатки.НомерПаллета,
		|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) КАК КоличествоЕХООстаток
		|ПОМЕСТИТЬ РазмещенияНоменклатуры
		|ИЗ
		|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
		|			&НаДату,
		|			Склад = &Склад
		|				И Номенклатура = &Номенклатура
		|				И НЕ Статус = &СтатусВыполнениеРазмещения) КАК РазмещениеТоваровНаСкладахОстатки
		|ГДЕ
		|	НЕ РазмещениеТоваровНаСкладахОстатки.Ячейка В (&ИсключаемыеЯчейки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазмещенияНоменклатуры.Ячейка,
		|	СостояниеЗонЯчеекСрезПоследних.Зона,
		|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки,
		|	РазмещенияНоменклатуры.КоличествоЕХООстаток КАК ОбщийОстатокВЕХО,
		|	РазмещенияНоменклатуры.НомерПаллета
		|ПОМЕСТИТЬ РазмещениеСОтбором
		|ИЗ
		|	РазмещенияНоменклатуры КАК РазмещенияНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗонЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеЗонЯчеекСрезПоследних
		|		ПО РазмещенияНоменклатуры.Ячейка = СостояниеЗонЯчеекСрезПоследних.Ячейка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеВидовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеВидовЯчеекСрезПоследних
		|		ПО РазмещенияНоменклатуры.Ячейка = СостояниеВидовЯчеекСрезПоследних.Ячейка
		|ГДЕ
		|	СостояниеЗонЯчеекСрезПоследних.Зона " + ?(ВнутриЗоны, "=", "<>") + " &Зона
		|	И РазмещенияНоменклатуры.КоличествоЕХООстаток > &КоличествоКОтгрузке
		//|	СостояниеЗонЯчеекСрезПоследних.Зона <> &Зона
		|	И СостояниеВидовЯчеекСрезПоследних.ВидЯчейки = &ВидЯчейкиБуферная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РазмещениеТоваровНаСкладах.Период) КАК ДатаПоступления,
		|	РазмещениеТоваровНаСкладах.Ячейка КАК Ячейка
		|ПОМЕСТИТЬ ДатыПриемок
		|ИЗ
		|	РегистрНакопления.РазмещениеТоваровНаСкладах КАК РазмещениеТоваровНаСкладах
		|ГДЕ
		|	РазмещениеТоваровНаСкладах.Склад = &Склад
		|	И РазмещениеТоваровНаСкладах.Номенклатура = &Номенклатура
		|	И РазмещениеТоваровНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И 1 В
		|			(ВЫБРАТЬ
		|				1 КАК Поле1
		|			ИЗ
		|				РазмещениеСОтбором КАК РазмещениеСОтбором
		|			ГДЕ
		|				РазмещениеТоваровНаСкладах.Ячейка = РазмещениеСОтбором.Ячейка)
		|	И РазмещениеТоваровНаСкладах.Статус <> &СтатусВыполнениеРазмещения
		|
		|СГРУППИРОВАТЬ ПО
		|	РазмещениеТоваровНаСкладах.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ДатыПриемок.ДатаПоступления) КАК ДатаПоступления
		|ПОМЕСТИТЬ СамаяРанняяДата
		|ИЗ
		|	ДатыПриемок КАК ДатыПриемок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПриемок.Ячейка
		|ПОМЕСТИТЬ ЯчейкиПоФИФО
		|ИЗ
		|	ДатыПриемок КАК ДатыПриемок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СамаяРанняяДата КАК СамаяРанняяДата
		|		ПО ДатыПриемок.ДатаПоступления = СамаяРанняяДата.ДатаПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазмещениеСОтбором.Ячейка,
		|	РазмещениеСОтбором.Ячейка.НомерРяда,
		|	РазмещениеСОтбором.Ячейка.НомерЯруса,
		|	РазмещениеСОтбором.Ячейка.НомерЯчейки,
		|	РазмещениеСОтбором.Зона,
		|	РазмещениеСОтбором.ОбщийОстатокВЕХО,
		|	РазмещениеСОтбором.НомерПаллета
		|ПОМЕСТИТЬ ДоступныеЯчейки
		|ИЗ
		|	РазмещениеСОтбором КАК РазмещениеСОтбором
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЯчейкиПоФИФО КАК ЯчейкиПоФИФО
		|		ПО РазмещениеСОтбором.Ячейка = ЯчейкиПоФИФО.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеЯчейки.Ячейка,
		|	ДоступныеЯчейки.ЯчейкаНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаНомерЯчейки,
		|	ЕСТЬNULL(СУММА(СкладскиеЯчейкиВысота.ВысотаЯчейки), 0) КАК Высота,
		|	ДоступныеЯчейки.Зона,
		|	ДоступныеЯчейки.ОбщийОстатокВЕХО,
		|	ДоступныеЯчейки.НомерПаллета
		|ПОМЕСТИТЬ ВысотаЯчеек
		|ИЗ
		|	ДоступныеЯчейки КАК ДоступныеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиВысота
		|		ПО ДоступныеЯчейки.ЯчейкаНомерРяда = СкладскиеЯчейкиВысота.НомерРяда
		|			И (1 = СкладскиеЯчейкиВысота.НомерЯчейки)
		|			И ДоступныеЯчейки.ЯчейкаНомерЯруса > СкладскиеЯчейкиВысота.НомерЯруса
		|			И (СкладскиеЯчейкиВысота.Владелец = &Склад)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеЯчейки.Ячейка,
		|	ДоступныеЯчейки.ЯчейкаНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаНомерЯчейки,
		|	ДоступныеЯчейки.Зона,
		|	ДоступныеЯчейки.ОбщийОстатокВЕХО,
		|	ДоступныеЯчейки.НомерПаллета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВысотаЯчеек.Ячейка,
		|	ВысотаЯчеек.ЯчейкаНомерЯруса,
		|	ЕСТЬNULL(СУММА(СкладыРасстояния.Расстояние), 0) + ЕСТЬNULL(СУММА(СкладскиеЯчейкиДлина.ДлинаЯчейки), 0) КАК Расстояние,
		|	ВысотаЯчеек.Высота КАК Высота,
		|	ВысотаЯчеек.Зона,
		|	ВысотаЯчеек.ОбщийОстатокВЕХО,
		|	ВысотаЯчеек.НомерПаллета
		|ПОМЕСТИТЬ Расстояния
		|ИЗ
		|	ВысотаЯчеек КАК ВысотаЯчеек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиДлина
		|		ПО ВысотаЯчеек.ЯчейкаНомерРяда = СкладскиеЯчейкиДлина.НомерРяда
		|			И ВысотаЯчеек.ЯчейкаНомерЯруса = СкладскиеЯчейкиДлина.НомерЯруса
		|			И ВысотаЯчеек.ЯчейкаНомерЯчейки > СкладскиеЯчейкиДлина.НомерЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.Расстояния КАК СкладыРасстояния
		|		ПО ВысотаЯчеек.ЯчейкаНомерРяда = СкладыРасстояния.НомерРяда
		|
		|СГРУППИРОВАТЬ ПО
		|	ВысотаЯчеек.Ячейка,
		|	ВысотаЯчеек.ЯчейкаНомерЯруса,
		|	ВысотаЯчеек.Высота,
		|	ВысотаЯчеек.Зона,
		|	ВысотаЯчеек.ОбщийОстатокВЕХО,
		|	ВысотаЯчеек.НомерПаллета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расстояния.Зона КАК Зона,
		|	Расстояния.Ячейка КАК Ячейка,
		|	Расстояния.ЯчейкаНомерЯруса КАК НомерЯруса,
		|	Расстояния.Расстояние / &СкоростьДвижения + Расстояния.Высота / &СкоростьПодъема * 2 КАК ВремяОтгрузки,
		|	Расстояния.ОбщийОстатокВЕХО,
		|	Расстояния.НомерПаллета
		|ПОМЕСТИТЬ ЯчейкиВремя
		|ИЗ
		|	Расстояния КАК Расстояния
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиВремя.ВремяОтгрузки) КАК ВремяОтгрузки
		|ПОМЕСТИТЬ МинимальноеВремя
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиВремя.Зона,
		|	ЯчейкиВремя.Ячейка,
		|	ЯчейкиВремя.ВремяОтгрузки,
		|	ЯчейкиВремя.НомерЯруса,
		|	ЯчейкиВремя.ОбщийОстатокВЕХО,
		|	ЯчейкиВремя.НомерПаллета
		|ПОМЕСТИТЬ ЯчейкиСМинимальнымВременем
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальноеВремя КАК МинимальноеВремя
		|		ПО ЯчейкиВремя.ВремяОтгрузки = МинимальноеВремя.ВремяОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиСМинимальнымВременем.НомерЯруса) КАК НомерЯруса
		|ПОМЕСТИТЬ МинимальныйЯрус
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиСМинимальнымВременем.Ячейка,
		|	ЯчейкиСМинимальнымВременем.Зона КАК ЗонаЯчейки,
		|	ЯчейкиСМинимальнымВременем.ВремяОтгрузки,
		|	ЯчейкиСМинимальнымВременем.ОбщийОстатокВЕХО,
		|	ЯчейкиСМинимальнымВременем.НомерПаллета
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйЯрус КАК МинимальныйЯрус
		|		ПО ЯчейкиСМинимальнымВременем.НомерЯруса = МинимальныйЯрус.НомерЯруса";
	КонецЕсли;	
КонецПроцедуры

Процедура ПроверитьОтбор(Отказ)
	
	Если РольДоступна("АдминистраторЛогистики") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = Новый Запрос;
	ЗапросВТ.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
	|	Отбор.Номенклатура,
	|	Отбор.ЕдиницаИзмерения,
	|	Отбор.Количество,
	|	Отбор.НомерПаллета,
	|	Отбор.Зона,
	|	Отбор.ВидЯчейки,
	|	Отбор.ЯчейкаПлан,
	|	Отбор.ЯчейкаФакт
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТабОтбор КАК Отбор";
	
	ЗапросВТ.УстановитьПараметр("ТабОтбор", Отбор.Выгрузить());
	ЗапросВТ.Выполнить();	
	
	//|				И ТаблицаДокумента.ВидЯчейки <> &ВидЯчейкиОбщая)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмещениеТоваровНаСкладахОстатки.Ячейка,
	|	РазмещениеТоваровНаСкладахОстатки.Номенклатура,
	|	РазмещениеТоваровНаСкладахОстатки.НомерПаллета,
	|	СУММА(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток) КАК КоличествоЕХООстаток
	|ПОМЕСТИТЬ ОбщиеОстаткиЕХО
	|ИЗ
	|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
	|			&НаДату,
	|			Склад = &Склад
	|				И НЕ Статус = &СтатусВыполнениеРазмещения) КАК РазмещениеТоваровНаСкладахОстатки
	|ГДЕ
	|	1 В
	|			(ВЫБРАТЬ
	|				1 КАК Поле1
	|			ИЗ
	|				ТаблицаДокумента КАК ТаблицаДокумента
	|			ГДЕ
	|				РазмещениеТоваровНаСкладахОстатки.Ячейка = ТаблицаДокумента.ЯчейкаФакт)
	|
	|СГРУППИРОВАТЬ ПО
	|	РазмещениеТоваровНаСкладахОстатки.Ячейка,
	|	РазмещениеТоваровНаСкладахОстатки.Номенклатура,
	|	РазмещениеТоваровНаСкладахОстатки.НомерПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков КАК ЕХО,
	|	ТаблицаДокумента.ЕдиницаИзмерения,
	|	ТаблицаДокумента.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЕдиницаИзмерения = ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков
	|			ТОГДА ТаблицаДокумента.Количество
	|		ИНАЧЕ ТаблицаДокумента.Количество * ТаблицаДокумента.ЕдиницаИзмерения.СодержитЕХО
	|	КОНЕЦ КАК КоличествоЕХО,
	|	ТаблицаДокумента.НомерПаллета,
	|	ТаблицаДокумента.Зона,
	|	ТаблицаДокумента.ВидЯчейки,
	|	ТаблицаДокумента.ЯчейкаПлан,
	|	ТаблицаДокумента.ЯчейкаФакт,
	|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) КАК КоличествоЕХООстаток,
	|	РазмещениеТоваровНаСкладахОстатки.НомерПаллета КАК НомерПаллетаВОстатке,
	|	ЕСТЬNULL(СостояниеБлокировокЯчеекСрезПоследних.Заблокирована, ЛОЖЬ) КАК Заблокирована,
	|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки КАК ТекущийВидЯчейки,
	|	СостояниеЗонЯчеекСрезПоследних.Зона КАК ТекущаяЗонаЯчейки,
	|	ЕСТЬNULL(СостояниеРезервовЯчеекСрезПоследних.Заблокирована, ЛОЖЬ) КАК Зарезервирована,
	|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка КАК ЯчейкаКомплектации,
	|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.МаксимальноеКоличество
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбщиеОстаткиЕХО КАК РазмещениеТоваровНаСкладахОстатки
	|		ПО ТаблицаДокумента.Номенклатура = РазмещениеТоваровНаСкладахОстатки.Номенклатура
	|			И ТаблицаДокумента.ЯчейкаФакт = РазмещениеТоваровНаСкладахОстатки.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеБлокировокЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеБлокировокЯчеекСрезПоследних
	|		ПО ТаблицаДокумента.ЯчейкаФакт = СостояниеБлокировокЯчеекСрезПоследних.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗонЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеЗонЯчеекСрезПоследних
	|		ПО ТаблицаДокумента.ЯчейкаФакт = СостояниеЗонЯчеекСрезПоследних.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеВидовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеВидовЯчеекСрезПоследних
	|		ПО ТаблицаДокумента.ЯчейкаФакт = СостояниеВидовЯчеекСрезПоследних.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРезервовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеРезервовЯчеекСрезПоследних
	|		ПО ТаблицаДокумента.ЯчейкаФакт = СостояниеРезервовЯчеекСрезПоследних.Ячейка
	|			И (СостояниеРезервовЯчеекСрезПоследних.Регистратор <> &ПеремещениеПоОтгрузке)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаХраненияНоменклатурыНаСкладах.СрезПоследних(&НаДату, Склад = &Склад) КАК АдресаХраненияНоменклатурыНаСкладахСрезПоследних
	|		ПО ТаблицаДокумента.Номенклатура = АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Номенклатура";
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ТаблицаДокумента.Номенклатура,
	//|	ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков,
	//|	ТаблицаДокумента.ЕдиницаИзмерения,
	//|	ТаблицаДокумента.Количество,
	//|	ВЫБОР
	//|		КОГДА ТаблицаДокумента.ЕдиницаИзмерения = ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков
	//|			ТОГДА ТаблицаДокумента.Количество
	//|		ИНАЧЕ ТаблицаДокумента.Количество * ТаблицаДокумента.ЕдиницаИзмерения.СодержитЕХО
	//|	КОНЕЦ,
	//|	ТаблицаДокумента.НомерПаллета,
	//|	ТаблицаДокумента.Зона,
	//|	ТаблицаДокумента.ВидЯчейки,
	//|	ТаблицаДокумента.ЯчейкаПлан,
	//|	ТаблицаДокумента.ЯчейкаФакт,
	//|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(БудущиеПеремещенияСрезПоследних.РазмещаемоеКоличество, 0) - ЕСТЬNULL(РезервированиеТовараВЯчейкахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ПерекомплектацияОтбор.ОтбираемоеКоличество, 0) + ЕСТЬNULL(ПерекомплектацияРазмещение.РазмещаемоеКоличество, 0),
	//|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) - ЕСТЬNULL(РезервированиеТовараВЯчейкахОстатки.КоличествоЕХООстаток, 0) - ЕСТЬNULL(ВЫБОР
	//|			КОГДА ТаблицаДокумента.ЕдиницаИзмерения = ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков
	//|				ТОГДА ПерекомплектацияОтбор.ОтбираемоеКоличество
	//|			ИНАЧЕ ПерекомплектацияОтбор.ОтбираемоеКоличество * ТаблицаДокумента.ЕдиницаИзмерения.СодержитЕХО
	//|		КОНЕЦ, 0) + ЕСТЬNULL(ВЫБОР
	//|			КОГДА ТаблицаДокумента.ЕдиницаИзмерения = ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков
	//|				ТОГДА ПерекомплектацияРазмещение.РазмещаемоеКоличество
	//|			ИНАЧЕ ПерекомплектацияРазмещение.РазмещаемоеКоличество * ТаблицаДокумента.ЕдиницаИзмерения.СодержитЕХО
	//|		КОНЕЦ, 0) + ЕСТЬNULL(ВЫБОР
	//|			КОГДА ТаблицаДокумента.ЕдиницаИзмерения = ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков
	//|				ТОГДА БудущиеПеремещенияСрезПоследних.РазмещаемоеКоличество
	//|			ИНАЧЕ БудущиеПеремещенияСрезПоследних.РазмещаемоеКоличество * ТаблицаДокумента.ЕдиницаИзмерения.СодержитЕХО
	//|		КОНЕЦ, 0),
	//|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.НомерПаллета, 0),
	//|	ЕСТЬNULL(СостояниеБлокировокЯчеекСрезПоследних.Заблокирована, ЛОЖЬ),
	//|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки,
	//|	СостояниеЗонЯчеекСрезПоследних.Зона,
	//|	ЕСТЬNULL(СостояниеРезервовЯчеекСрезПоследних.Заблокирована, ЛОЖЬ),
	//|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка,
	//|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.МаксимальноеКоличество";
	
	//Запрос.УстановитьПараметр("ТабРазмещение", Размещение.Выгрузить());
	МоментДокумента = Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("НаДату", МоментДокумента);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СтатусВыполнениеРазмещения", Перечисления.СтатусыРазмещенийВЯчейках.ВыполнениеРазмещения);
	//Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	ДокПеремещение = УправлениеСкладскойЛогистикой.ПолучитьДокументПеремещения(Ссылка);
	Запрос.УстановитьПараметр("ПеремещениеПоОтгрузке", ДокПеремещение);
	
	Запрос.МенеджерВременныхТаблиц = ЗапросВТ.МенеджерВременныхТаблиц;
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	тзОбщиеОстатки = тзРезультат.Скопировать();
	тзОбщиеОстатки.Свернуть("Номенклатура, ЕХО, ЯчейкаФакт, ВидЯчейки, МаксимальноеКоличество", "КоличествоЕХО, КоличествоЕХООстаток"); 
	
	Для Каждого стрРез Из тзРезультат Цикл
		Если стрРез.ТекущаяЗонаЯчейки = Null ИЛИ стрРез.Зона <> стрРез.ТекущаяЗонаЯчейки Тогда
			Сообщить("Ячейка """ + стрРез.ЯчейкаФакт + """ не входит в зону """ + СокрЛП(стрРез.Зона) + """", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		Если стрРез.ТекущийВидЯчейки = Null ИЛИ стрРез.ВидЯчейки <> стрРез.ТекущийВидЯчейки Тогда
			Сообщить("Вид ячейки """ + стрРез.ЯчейкаФакт + """ отличается от установленного", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		Если стрРез.Заблокирована Тогда
			Сообщить("Ячейка """ + стрРез.ЯчейкаФакт + """ заблокирована", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		Если стрРез.Зарезервирована Тогда
			Сообщить("Ячейка """ + стрРез.ЯчейкаФакт + """ зарезервирована", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если стрРез.ТекущийВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная И стрРез.НомерПаллета <> стрРез.НомерПаллетаВОстатке Тогда
			Сообщить("Номер (" + стрРез.НомерПаллетаВОстатке + ") размещенной паллеты в ячейке """ + стрРез.ЯчейкаФакт + """ не совпадает с отобраным (" + стрРез.НомерПаллета + ")", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если стрРез.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Комплектация Тогда
			Если стрРез.ЯчейкаФакт <> стрРез.ЯчейкаКомплектации Тогда
				Сообщить("Ячейка """ + стрРез.ЯчейкаФакт + """ не является ячейкой комплектации номенклатуры """ + стрРез.Номенклатура + """", СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Для каждого стрРез Из тзОбщиеОстатки Цикл
			Если стрРез.КоличествоЕХООстаток - стрРез.КоличествоЕХО < 0 Тогда
				Сообщить("Обнаружен отбор большего количества, чем присутствует в ячейке """ + стрРез.ЯчейкаФакт
				+ """! Остаток: " + стрРез.КоличествоЕХООстаток + " " + стрРез.ЕХО + ", отбор: " + стрРез.КоличествоЕХО + " " + стрРез.ЕХО
				, СтатусСообщения.Важное);
				
				Отказ = Истина;
			КонецЕсли;
			
			Если стрРез.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная Тогда
				Если стрРез.КоличествоЕХО < стрРез.КоличествоЕХООстаток Тогда
					Сообщить("Обнаружен отбор меньшего количества, чем присутствует в буферной ячейке """ + стрРез.ЯчейкаФакт
					+ """! Остаток: " + стрРез.КоличествоЕХООстаток + " " + стрРез.ЕХО + ", отбор: " + стрРез.КоличествоЕХО + " " + стрРез.ЕХО
					, СтатусСообщения.Важное);
					
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ПерекомплектацияОтбор.Номенклатура,
	//|	ПерекомплектацияОтбор.Номенклатура.ЕдиницаХраненияОстатков КАК ЕХО,
	//|	ПерекомплектацияОтбор.ОтбираемаяЕдиница,
	//|	ПерекомплектацияОтбор.ОтбираемоеКоличество,
	//|	ВЫБОР
	//|		КОГДА ПерекомплектацияОтбор.ОтбираемаяЕдиница = ПерекомплектацияОтбор.Номенклатура.ЕдиницаХраненияОстатков
	//|			ТОГДА ПерекомплектацияОтбор.ОтбираемоеКоличество
	//|		ИНАЧЕ ПерекомплектацияОтбор.ОтбираемоеКоличество * ПерекомплектацияОтбор.ОтбираемаяЕдиница.СодержитЕХО
	//|	КОНЕЦ КАК КоличествоЕХО,
	//|	ПерекомплектацияОтбор.Ячейка,
	//|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(БудущиеПеремещенияСрезПоследних.РазмещаемоеКоличество, 0) - ЕСТЬNULL(РезервированиеТовараВЯчейкахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	//|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) - ЕСТЬNULL(РезервированиеТовараВЯчейкахОстатки.КоличествоЕХООстаток, 0) + ЕСТЬNULL(ВЫБОР
	//|			КОГДА ПерекомплектацияОтбор.ОтбираемаяЕдиница = ПерекомплектацияОтбор.Номенклатура.ЕдиницаХраненияОстатков
	//|				ТОГДА БудущиеПеремещенияСрезПоследних.РазмещаемоеКоличество
	//|			ИНАЧЕ БудущиеПеремещенияСрезПоследних.РазмещаемоеКоличество * ПерекомплектацияОтбор.ОтбираемаяЕдиница.СодержитЕХО
	//|		КОНЕЦ, 0) КАК КоличествоЕХООстаток,
	//|	ЕСТЬNULL(СостояниеБлокировокЯчеекСрезПоследних.Заблокирована, ЛОЖЬ) КАК Заблокирована,
	//|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки КАК ТекущийВидЯчейки,
	//|	СостояниеЗонЯчеекСрезПоследних.Зона КАК ТекущаяЗонаЯчейки,
	//|	ЕСТЬNULL(СостояниеРезервовЯчеекСрезПоследних.Заблокирована, ЛОЖЬ) КАК Зарезервирована
	//|ИЗ
	//|	ТаблицаПерекомплектация КАК ПерекомплектацияОтбор
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(&НаДату, Склад = &Склад) КАК РазмещениеТоваровНаСкладахОстатки
	//|		ПО ПерекомплектацияОтбор.Номенклатура = РазмещениеТоваровНаСкладахОстатки.Номенклатура
	//|			И ПерекомплектацияОтбор.ОтбираемаяЕдиница = РазмещениеТоваровНаСкладахОстатки.Единица
	//|			И ПерекомплектацияОтбор.Ячейка = РазмещениеТоваровНаСкладахОстатки.Ячейка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервированиеТовараВЯчейках.Остатки(&НаДату, Склад = &Склад) КАК РезервированиеТовараВЯчейкахОстатки
	//|		ПО ПерекомплектацияОтбор.Номенклатура = РезервированиеТовараВЯчейкахОстатки.Номенклатура
	//|			И ПерекомплектацияОтбор.ОтбираемаяЕдиница = РезервированиеТовараВЯчейкахОстатки.Единица
	//|			И ПерекомплектацияОтбор.Ячейка = РезервированиеТовараВЯчейкахОстатки.Ячейка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БудущиеПеремещения.СрезПоследних(&НаДату, ДокументОтгрузки = &ЭтотДокумент) КАК БудущиеПеремещенияСрезПоследних
	//|		ПО ПерекомплектацияОтбор.Номенклатура = БудущиеПеремещенияСрезПоследних.Номенклатура
	//|			И ПерекомплектацияОтбор.ОтбираемаяЕдиница = БудущиеПеремещенияСрезПоследних.РазмещаемаяЕдиница
	//|			И ПерекомплектацияОтбор.Ячейка = БудущиеПеремещенияСрезПоследних.ЯчейкаПланКуда
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеБлокировокЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеБлокировокЯчеекСрезПоследних
	//|		ПО ПерекомплектацияОтбор.Ячейка = СостояниеБлокировокЯчеекСрезПоследних.Ячейка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗонЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеЗонЯчеекСрезПоследних
	//|		ПО ПерекомплектацияОтбор.Ячейка = СостояниеЗонЯчеекСрезПоследних.Ячейка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеВидовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеВидовЯчеекСрезПоследних
	//|		ПО ПерекомплектацияОтбор.Ячейка = СостояниеВидовЯчеекСрезПоследних.Ячейка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРезервовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеРезервовЯчеекСрезПоследних
	//|		ПО ПерекомплектацияОтбор.Ячейка = СостояниеРезервовЯчеекСрезПоследних.Ячейка
	//|			И СостояниеРезервовЯчеекСрезПоследних.Регистратор <> &ПеремещениеПоОтгрузке
	//|ГДЕ
	//|	НЕ 1 В
	//|				(ВЫБРАТЬ
	//|					1 КАК Поле1
	//|				ИЗ
	//|					ТаблицаДокумента КАК ТаблицаДокумента
	//|				ГДЕ
	//|					ТаблицаДокумента.Номенклатура = ПерекомплектацияОтбор.Номенклатура
	//|					И ТаблицаДокумента.ЕдиницаИзмерения = ПерекомплектацияОтбор.ОтбираемаяЕдиница
	//|					И ТаблицаДокумента.ЯчейкаФакт = ПерекомплектацияОтбор.Ячейка)";
	//
	//тзРезультат = Запрос.Выполнить().Выгрузить();
	//
	//Для Каждого стрРез Из тзРезультат Цикл
	//	Если стрРез.Заблокирована Тогда
	//		Сообщить("Ячейка """ + стрРез.Ячейка + """ заблокирована", СтатусСообщения.Важное);
	//		Отказ = Истина;
	//	КонецЕсли;
	//	Если стрРез.Зарезервирована Тогда
	//		Сообщить("Ячейка """ + стрРез.Ячейка + """ зарезервирована", СтатусСообщения.Важное);
	//		Отказ = Истина;
	//	КонецЕсли;
	//	
	//	Если стрРез.ОтбираемаяЕдиница.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.Паллета Тогда
	//		Сообщить("В ячейке """ + стрРез.Ячейка + """ (таб. Перекомплектация) отсутствует паллета", СтатусСообщения.Важное);
	//		Отказ = Истина;
	//		//Если стрРез.КоличествоОстаток = 0 Тогда
	//		//	Сообщить("В ячейке """ + стрРез.ЯчейкаФакт + """ отсутствует паллета", СтатусСообщения.Важное);
	//		//	Отказ = Истина;
	//		//КонецЕсли;
	//	Иначе
	//		//Если стрРез.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Комплектация Тогда
	//		//	Если стрРез.ЯчейкаФакт <> стрРез.ЯчейкаКомплектации Тогда
	//		//		Сообщить("Ячейка """ + стрРез.ЯчейкаФакт + """ не является ячейкой комплектации номенклатуры """ + стрРез.Номенклатура + """", СтатусСообщения.Важное);
	//		//		Отказ = Истина;
	//		//	КонецЕсли;
	//		//КонецЕсли;
	//		//
	//		Если НЕ Отказ Тогда
	//			Если стрРез.ОтбираемоеКоличество > стрРез.КоличествоОстаток Тогда
	//				Сообщить("В ячейке """ + стрРез.Ячейка + """ (таб. Перекомплектация) нехватает количества единиц """ + стрРез.ОтбираемаяЕдиница + """ для отбора номенклатуры """ + стрРез.Номенклатура
	//				+ """! Остаток: " + стрРез.КоличествоОстаток + ", отбор: " + стрРез.ОтбираемоеКоличество
	//				, СтатусСообщения.Важное);
	//				Отказ = Истина;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

Процедура ПроверитьОснования(Отказ)
	ЗапросВТ = Новый Запрос;
	ЗапросВТ.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
	|	Отгрузка.НомерСтроки,
	|	Отгрузка.Номенклатура,
	|	Отгрузка.ЕдиницаХраненияОстатков КАК ЕХО,
	|	Отгрузка.КоличествоФактическиОтгруженное КАК Количество,
	|	Отгрузка.ДокументОснование
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТабОтгрузка КАК Отгрузка";
	
	ЗапросВТ.УстановитьПараметр("ТабОтгрузка", Отгрузка.Выгрузить());
	ЗапросВТ.Выполнить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтборИОтгрузкаОтгрузка.Номенклатура,
	|	СУММА(ОтборИОтгрузкаОтгрузка.КоличествоФактическиОтгруженное) КАК КоличествоФактическиОтгруженное
	|ПОМЕСТИТЬ Отгрузки
	|ИЗ
	|	Документ.ОтборИОтгрузка.Отгрузка КАК ОтборИОтгрузкаОтгрузка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента
	|		ПО ОтборИОтгрузкаОтгрузка.ДокументОснование = ТаблицаДокумента.ДокументОснование
	|			И ОтборИОтгрузкаОтгрузка.Номенклатура = ТаблицаДокумента.Номенклатура
	|ГДЕ
	|	ОтборИОтгрузкаОтгрузка.Ссылка.Проведен
	|	И ОтборИОтгрузкаОтгрузка.Ссылка.МоментВремени < &МоментДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтборИОтгрузкаОтгрузка.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.ЕХО,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.ДокументОснование,
	|	ЕСТЬNULL(МАКСИМУМ(ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения), ЕСТЬNULL(МАКСИМУМ(ПеремещениеТоваровТовары.ЕдиницаИзмерения), ЕСТЬNULL(МАКСИМУМ(СписаниеТоваровТовары.ЕдиницаИзмерения), ЕСТЬNULL(МАКСИМУМ(ВнутреннийЗаказТовары.ЕдиницаИзмерения), ЕСТЬNULL(МАКСИМУМ(РезервированиеТоваровТовары.ЕдиницаИзмерения), МАКСИМУМ(ЗаказПокупателяТовары.ЕдиницаИзмерения)))))) КАК ЕдиницаОснования,
	|	ЕСТЬNULL(СУММА(ВозвратТоваровПоставщикуТовары.Количество), ЕСТЬNULL(СУММА(ПеремещениеТоваровТовары.Количество), ЕСТЬNULL(СУММА(СписаниеТоваровТовары.Количество), ЕСТЬNULL(СУММА(ВнутреннийЗаказТовары.Количество), ЕСТЬNULL(СУММА(РезервированиеТоваровТовары.Количество), СУММА(ЗаказПокупателяТовары.Количество)))))) КАК КоличествоОснования,
	|	ЕСТЬNULL(Отгрузки.КоличествоФактическиОтгруженное, 0) КАК КоличествоВДругихОтгрузках
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ПО ТаблицаДокумента.ДокументОснование = ВозвратТоваровПоставщикуТовары.Ссылка
	|			И ТаблицаДокумента.Номенклатура = ВозвратТоваровПоставщикуТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РезервированиеТоваров.Товары КАК РезервированиеТоваровТовары
	|		ПО ТаблицаДокумента.ДокументОснование = РезервированиеТоваровТовары.Ссылка
	|			И ТаблицаДокумента.Номенклатура = РезервированиеТоваровТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ПО ТаблицаДокумента.ДокументОснование = ПеремещениеТоваровТовары.Ссылка
	|			И ТаблицаДокумента.Номенклатура = ПеремещениеТоваровТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	|		ПО ТаблицаДокумента.ДокументОснование = СписаниеТоваровТовары.Ссылка
	|			И ТаблицаДокумента.Номенклатура = СписаниеТоваровТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
	|		ПО ТаблицаДокумента.ДокументОснование = ВнутреннийЗаказТовары.Ссылка
	|			И ТаблицаДокумента.Номенклатура = ВнутреннийЗаказТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Отгрузки КАК Отгрузки
	|		ПО ТаблицаДокумента.Номенклатура = Отгрузки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|		ПО ТаблицаДокумента.Номенклатура = ЗаказПокупателяТовары.Номенклатура
	|			И ТаблицаДокумента.ДокументОснование = ЗаказПокупателяТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.ЕХО,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.ДокументОснование,
	|	ЕСТЬNULL(Отгрузки.КоличествоФактическиОтгруженное, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.МенеджерВременныхТаблиц = ЗапросВТ.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МоментДокумента", Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("Склад", Склад);
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	тзОснования = тзРезультат.Скопировать();
	тзОснования.Свернуть("ДокументОснование");
	
	Для каждого стрОсн Из тзОснования Цикл
		Если НЕ стрОсн.ДокументОснование.Проведен Тогда
			Отказ = Истина;
			Сообщить("Документ-основание """ + СокрЛП(стрОсн.ДокументОснование) + """ не проведен", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Для каждого стрРез Из тзРезультат Цикл
			Если стрРез.ЕдиницаОснования = Null И стрРез.КоличествоОснования = Null Тогда
				Отказ = Истина;
				Сообщить("Номенклатура """ + СокрЛП(стрРез.Номенклатура) + """ отсутствует в документе-основание """
				+ СокрЛП(стрРез.ДокументОснование) + """", СтатусСообщения.Важное);
			КонецЕсли;
			
			Если НЕ Отказ И стрРез.ЕдиницаОснования <> стрРез.ЕХО Тогда
				Отказ = Истина;
				Сообщить("Единица измерения в документе-основание """ + СокрЛП(стрРез.ДокументОснование) + 
				""" не является единицей хранения остатков номенклатуры """ + СокрЛП(стрРез.Номенклатура) + """", СтатусСообщения.Важное);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				Если ТипЗнч(стрРез.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					Если стрРез.КоличествоВДругихОтгрузках <> 0 Тогда
						Если стрРез.КоличествоОснования < стрРез.Количество + стрРез.КоличествоВДругихОтгрузках Тогда
							Отказ = Истина;
							Сообщить("Количество номенклатуры """ + СокрЛП(стрРез.Номенклатура) + """: " + стрРез.КоличествоОснования + 
							" в документе-основание """ + СокрЛП(стрРез.ДокументОснование) + """, меньше чем сумма фактически отгруженного количества по данному документу: "
							+ стрРез.Количество + " и по раннее оформленым отгрузкам: " + стрРез.КоличествоВДругихОтгрузках, СтатусСообщения.Важное);
						КонецЕсли;
					Иначе
						Если стрРез.КоличествоОснования < стрРез.Количество Тогда
							Отказ = Истина;
							Сообщить("Количество номенклатуры """ + СокрЛП(стрРез.Номенклатура) + """: " + стрРез.КоличествоОснования + 
							" в документе-основание """ + СокрЛП(стрРез.ДокументОснование) + """, меньше чем фактически отгруженное количество: " + стрРез.Количество, СтатусСообщения.Важное);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если стрРез.КоличествоВДругихОтгрузках <> 0 Тогда
						Отказ = Истина;
						Сообщить("Для номенклатуры """ + СокрЛП(стрРез.Номенклатура) + """ на основании документа """
						+ СокрЛП(стрРез.ДокументОснование) + """ ранее уже была оформлена отгрузка", СтатусСообщения.Важное);
					ИначеЕсли стрРез.КоличествоОснования <> стрРез.Количество Тогда
						Отказ = Истина;
						Сообщить("Количество номенклатуры """ + СокрЛП(стрРез.Номенклатура) + """: " + стрРез.КоличествоОснования + 
						" в документе-основание """ + СокрЛП(стрРез.ДокументОснование) + """, не совпадает с фактически отгруженным количеством: " + стрРез.Количество, СтатусСообщения.Важное);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьСоответствиеОтбораОтгрузке(Отказ)
	ЗапросВТ = Новый Запрос;
	ЗапросВТ.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
    //ЗапросВТ.Текст = 
    //"ВЫБРАТЬ
    //|	Отгрузка.НомерСтроки,
    //|	Отгрузка.Номенклатура,
    //|	Отгрузка.ЕдиницаХраненияОстатков КАК ЕХО,
    //|	Отгрузка.КоличествоФактическиОтгруженное КАК ОбщееКоличествоЕХО,
    //|	Отгрузка.КоличествоПаллет,
    //|	Отгрузка.КоличествоКоробок,
    //|	Отгрузка.КоличествоЕХО,
    //|	Отгрузка.ДокументОснование
    //|ПОМЕСТИТЬ ТаблицаОтгрузка
    //|ИЗ
    //|	&ТабОтгрузка КАК Отгрузка";
    //
    //ЗапросВТ.УстановитьПараметр("ТабОтгрузка", Отгрузка.Выгрузить());
    
    //Верескул для возможности отбора одинаковой номенклатуры в нескольких позициях
    ТО = Отгрузка.Выгрузить();
    ТО.Свернуть("Номенклатура, ЕдиницаХраненияОстатков","КоличествоФактическиОтгруженное"); 
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
    |   Отгрузка.Номенклатура,
    |   Отгрузка.ЕдиницаХраненияОстатков КАК ЕХО,
    |   Отгрузка.КоличествоФактическиОтгруженное КАК ОбщееКоличествоЕХО
    |ПОМЕСТИТЬ ТаблицаОтгрузка
    |ИЗ
    |   &ТабОтгрузка КАК Отгрузка";
	
	ЗапросВТ.УстановитьПараметр("ТабОтгрузка", ТО);
	
    ЗапросВТ.Выполнить();	
	
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
	|	Отбор.Номенклатура,
	|	Отбор.ЕдиницаИзмерения,
	|	Отбор.Количество
	|ПОМЕСТИТЬ ТаблицаОтбор
	|ИЗ
	|	&ТабОтбор КАК Отбор";
	
	ЗапросВТ.УстановитьПараметр("ТабОтбор", Отбор.Выгрузить());
	ЗапросВТ.Выполнить();	
	
	Запрос = Новый Запрос;
	//Запрос.Текст = 
    //"ВЫБРАТЬ
    //|	ТаблицаОтбор.Номенклатура КАК Номенклатура,
    //|	ТаблицаОтбор.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
    //|	СУММА(ТаблицаОтбор.Количество) КАК Количество
    //|ПОМЕСТИТЬ ОтборСгруппировано
    //|ИЗ
    //|	ТаблицаОтбор КАК ТаблицаОтбор
    //|
    //|СГРУППИРОВАТЬ ПО
    //|	ТаблицаОтбор.Номенклатура,
    //|	ТаблицаОтбор.ЕдиницаИзмерения
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|ВЫБРАТЬ
    //|	Отгрузка.НомерСтроки КАК НомерСтроки,
    //|	Отгрузка.Номенклатура КАК НоменклатураОтгруженная,
    //|	Отгрузка.ЕХО,
    //|	Отгрузка.ОбщееКоличествоЕХО,
    //|	ОтборСгруппировано.Номенклатура КАК НоменклатураОтобранная,
    //|	ОтборСгруппировано.Количество КАК ОтобранноеКоличествоЕХО
    //|ИЗ
    //|	ТаблицаОтгрузка КАК Отгрузка
    //|		ПОЛНОЕ СОЕДИНЕНИЕ ОтборСгруппировано КАК ОтборСгруппировано
    //|		ПО Отгрузка.Номенклатура = ОтборСгруппировано.Номенклатура
    //|			И Отгрузка.ЕХО = ОтборСгруппировано.ЕдиницаИзмерения";
    //
    //Верескул 
    Запрос.Текст = 
	"ВЫБРАТЬ
    |   ТаблицаОтбор.Номенклатура КАК Номенклатура,
    |   ТаблицаОтбор.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
    |   СУММА(ТаблицаОтбор.Количество) КАК Количество
    |ПОМЕСТИТЬ ОтборСгруппировано
    |ИЗ
    |   ТаблицаОтбор КАК ТаблицаОтбор
    |
    |СГРУППИРОВАТЬ ПО
    |   ТаблицаОтбор.Номенклатура,
    |   ТаблицаОтбор.ЕдиницаИзмерения
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   Отгрузка.Номенклатура КАК НоменклатураОтгруженная,
    |   Отгрузка.ЕХО,
    |   Отгрузка.ОбщееКоличествоЕХО,
    |   ОтборСгруппировано.Номенклатура КАК НоменклатураОтобранная,
    |   ОтборСгруппировано.Количество КАК ОтобранноеКоличествоЕХО
    |ИЗ
    |   ТаблицаОтгрузка КАК Отгрузка
    |       ПОЛНОЕ СОЕДИНЕНИЕ ОтборСгруппировано КАК ОтборСгруппировано
    |       ПО Отгрузка.Номенклатура = ОтборСгруппировано.Номенклатура
    |           И Отгрузка.ЕХО = ОтборСгруппировано.ЕдиницаИзмерения";
	Запрос.МенеджерВременныхТаблиц = ЗапросВТ.МенеджерВременныхТаблиц;
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	
	Для каждого стрРез Из тзРезультат Цикл
		Если стрРез.НоменклатураОтобранная = Null Тогда
			Отказ = Истина;
			Сообщить("Отсутствует отбор для номенклатуры """ + СокрЛП(стрРез.НоменклатураОтгруженная) + """", СтатусСообщения.Важное);
		КонецЕсли;
		Если стрРез.НоменклатураОтгруженная = Null Тогда
			Отказ = Истина;
			Сообщить("Номенклатура """ + СокрЛП(стрРез.НоменклатураОтгруженная) + """ отсутвует в таблице ""Отгрузка"", но присутствует в таблице ""Отбор""", СтатусСообщения.Важное);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			Если стрРез.ОбщееКоличествоЕХО <> стрРез.ОтобранноеКоличествоЕХО Тогда
				Отказ = Истина;
				Сообщить("Не совпадает количество ед. хранения остатков номенклатуры """ + СокрЛП(стрРез.НоменклатураОтгруженная) + """. Отгрузка: "
				+ стрРез.ОбщееКоличествоЕХО + ". Отбор: " + стрРез.ОтобранноеКоличествоЕХО, СтатусСообщения.Важное);
				
			КонецЕсли;
			//Если стрРез.КоличествоПаллет <> стрРез.ОтобранноеКоличествоПаллет Тогда
			//	Отказ = Истина;
			//	Сообщить("Не совпадает количество паллет номенклатуры """ + СокрЛП(стрРез.НоменклатураОтгруженная) + """. Отгрузка: "
			//			+ стрРез.КоличествоПаллет + ". Отбор: " + стрРез.ОтобранноеКоличествоПаллет, СтатусСообщения.Важное);
			//	
			//КонецЕсли;
			//Если стрРез.КоличествоКоробок <> стрРез.ОтобранноеКоличествоКоробок Тогда
			//	Отказ = Истина;
			//	Сообщить("Не совпадает количество коробок номенклатуры """ + СокрЛП(стрРез.НоменклатураОтгруженная) + """. Отгрузка: "
			//			+ стрРез.КоличествоКоробок + ". Отбор: " + стрРез.ОтобранноеКоличествоКоробок, СтатусСообщения.Важное);
			//	
			//КонецЕсли;
			//Если стрРез.КоличествоЕХО <> стрРез.ОтобранноеКоличествоЕХО Тогда
			//	Отказ = Истина;
			//	Сообщить("Не совпадает количество ед. хранения остатков номенклатуры """ + СокрЛП(стрРез.НоменклатураОтгруженная) + """. Отгрузка: "
			//			+ стрРез.КоличествоЕХО + ". Отбор: " + стрРез.ОтобранноеКоличествоЕХО, СтатусСообщения.Важное);
			//	
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьДокумент(Отказ) Экспорт
	Если НЕ РольДоступна("АдминистраторЛогистики") И НЕ РольДоступна("ЗаведующийСкладом") Тогда
		ПроверитьОснования(Отказ);
		//ПроверитьРаспределение(Отказ);
		Если НЕ ПредварительноеПроведение Тогда
			ПроверитьСоответствиеОтбораОтгрузке(Отказ);
		КонецЕсли;
		ПроверитьОтбор(Отказ);
		
		Если НЕ Отказ И НЕ ЭтоУстановкаСтатуса И НЕ ПредварительноеПроведение
			И (НЕ ЭтоПерепроведение ИЛИ ДокументИзменен) Тогда
			
			мсвЯчейки = Отбор.ВыгрузитьКолонку("ЯчейкаФакт");
			//мсвЯчейкиПерекомплектации = Перекомплектация.ВыгрузитьКолонку("Ячейка");
			//Для каждого ЯчейкаП Из мсвЯчейкиПерекомплектации Цикл
			//	Если мсвЯчейки.Найти(ЯчейкаП) = Неопределено Тогда
			//		мсвЯчейки.Добавить(ЯчейкаП);
			//	КонецЕсли;
			//КонецЦикла;
			
			ГраницаДокумента = Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Включая);
			мсвДокументы = Новый Массив;
			УправлениеСкладскойЛогистикой.ПроверитьНаПрисутствиеВПозднихДокументах(Отказ, ГраницаДокумента, мсвЯчейки, мсвДокументы);
			Если Отказ Тогда
				Сообщить("Существуют более поздние проведенные документы, осуществляющие движения по ячейкам использованным в данном документе:", СтатусСообщения.Важное);
				
				Если мсвДокументы.Количество() > 50 Тогда
					Сообщить("Количество документов больше 50, список не выводится", СтатусСообщения.Важное);
				Иначе
					Для каждого Док Из мсвДокументы Цикл
						Сообщить(СокрЛП(Док));
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Кабаченко_Смартис 04_12_2015
	//проверяем, если заведующий складом проводит документ, обязательно должны быть ответственные
    Если НЕ Отбор.Количество()=0 Тогда
        Если РольДоступна("ЗаведующийСкладом") Тогда
            Если СписокМаршрутов = неопределено Тогда
                СписокЯчеек = Новый СписокЗначений;
                СписокМаршрутов = Новый СписокЗначений;
                Для Каждого строкаОтбор из Отбор Цикл
                    //12_02_16
                    //Кабаченко_Смартис
                    //доработка по видам ячеек
                    Если строкаОтбор.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная Тогда
                        Маршрут = ВыделитьСлово(строкаОтбор.ЯчейкаПлан.Наименование);
                        МаршрутЧисло = Число(Маршрут);
                        СписокЯчеек.Добавить(МаршрутЧисло);
                    КонецЕсли;
                КонецЦикла;
                СписокЯчеек.СортироватьПоЗначению(НаправлениеСортировки.Возр);
                Запрос = Новый Запрос;
                Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
                |	СкладыСтратегияОбхода.НомерМаршрута
                |ИЗ
                |	Справочник.Склады.СтратегияОбхода КАК СкладыСтратегияОбхода
                |ГДЕ
                |	СкладыСтратегияОбхода.НомерРяда В(&СписокЯчеек)
                |	И СкладыСтратегияОбхода.Ссылка = &Склад";
                Запрос.УстановитьПараметр("СписокЯчеек",СписокЯчеек);
                Запрос.УстановитьПараметр("Склад",Склад);
                Результат = Запрос.Выполнить().Выгрузить();
                Для Каждого СтрокаРезультат из Результат Цикл
                    СписокМаршрутов.Добавить(Строка(СтрокаРезультат.НомерМаршрута) + "Б");
                КонецЦикла;
                Для Каждого строкаОтбор из Отбор Цикл
                    //12_02_16
                    //Кабаченко_Смартис
                    //доработка по видам ячеек
                    Если строкаОтбор.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Комплектация Тогда
                        Маршрут = ВыделитьСлово(строкаОтбор.ЯчейкаПлан.Наименование);
                        МаршрутЧисло = Число(Маршрут);
                        СписокЯчеек.Добавить(МаршрутЧисло);
                    КонецЕсли;
                КонецЦикла;
                СписокЯчеек.СортироватьПоЗначению(НаправлениеСортировки.Возр);
                Запрос = Новый Запрос;
                Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
                |	СкладыСтратегияОбхода.НомерМаршрута
                |ИЗ
                |	Справочник.Склады.СтратегияОбхода КАК СкладыСтратегияОбхода
                |ГДЕ
                |	СкладыСтратегияОбхода.НомерРяда В(&СписокЯчеек)
                |	И СкладыСтратегияОбхода.Ссылка = &Склад";
                Запрос.УстановитьПараметр("СписокЯчеек",СписокЯчеек);
                Запрос.УстановитьПараметр("Склад",Склад);
                Результат = Запрос.Выполнить().Выгрузить();
                Для Каждого СтрокаРезультат из Результат Цикл
                    СписокМаршрутов.Добавить(Строка(СтрокаРезультат.НомерМаршрута) + "К");
                КонецЦикла;
                
            КонецЕсли;
            ФлагЗаполненности = Истина;
            Если Исполнители.Количество() = 0 И НЕ ЗначениеЗаполнено(ИсполнительОтгрузки) Тогда
                //Отказ = Истина;
                Сообщить("Исполнители не заполнены!");
            Иначе
                //Кабаченко_Смартис_04_12_2015
                //если указан исполнитель в шапке копирцуем его в табличную часть исполнители
                Если Исполнители.Количество() = 0 Тогда
                    Если ЗначениеЗаполнено(ИсполнительОтгрузки) Тогда
                        НоваяСтрокаИсполнители =  Исполнители.Добавить();
                        НоваяСтрокаИсполнители.Работники = ИсполнительОтгрузки;
                        Для каждого строкаМаршрут из СписокМаршрутов Цикл
                            строкаМаршрута = Маршруты.Добавить();
                            строкаМаршрута.Маршрут = строкаМаршрут.Значение ;
                        КонецЦикла;
                    КонецЕсли;
                КонецЕсли;
                //Кабаченко_Смартис_04_12_2015
                
                Отказ = Ложь;
            КонецЕсли;
            Если Маршруты.Количество() = 0 Тогда
                //Отказ = Истина;
                ФлагЗаполненности = Ложь;
                
            Иначе	
                Для Каждого Элемент из СписокМаршрутов  Цикл
                    Для Каждого строкаМаршрут из Маршруты Цикл
                        Если Элемент.Значение = строкаМаршрут.Маршрут Тогда 
                            ФлагЗаполненности = Истина;
                            //Отказ = Ложь;
                            прервать;
                        Иначе
                            //Отказ = Истина;
                            ФлагЗаполненности = Ложь;
                            //Сообщить("Распределены не все маршруты!");
                        КонецЕсли;	
                    КонецЦикла
                КонецЦикла;
            КонецЕсли;
            Если ФлагЗаполненности = Ложь Тогда
                Сообщить("Распределены не все маршруты!");
            КонецЕсли
        КонецЕсли;  
    КонецЕсли;

	//
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Движения.СостояниеРезервовЯчеек.Записывать = Истина;
	Движения.СостояниеРезервовЯчеек.Очистить();
	Движения.РазмещениеТоваровНаСкладах.Записывать = Истина;
	Движения.РазмещениеТоваровНаСкладах.Очистить();
	
	ПроверитьДокумент(Отказ);

	// Движения по отбору
	Для Каждого ТекСтрокаОтбор Из Отбор Цикл
		Движение = Движения.РазмещениеТоваровНаСкладах.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Склад = Склад;
		Движение.Ячейка = ТекСтрокаОтбор.ЯчейкаФакт;
		Движение.Номенклатура = ТекСтрокаОтбор.Номенклатура;
		Движение.КоличествоЕХО = ТекСтрокаОтбор.Количество;
		Если ТекСтрокаОтбор.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная Тогда
			Движение.НомерПаллета = ТекСтрокаОтбор.НомерПаллета;
		КонецЕсли;
		
		Если Статус = Перечисления.СтатусыСкладскихОтгрузок.Выполнение Тогда
			Движение.Статус = Перечисления.СтатусыРазмещенийВЯчейках.ВыполнениеОтбора;
		Иначе
			Движение.Статус = Перечисления.СтатусыРазмещенийВЯчейках.Завершено;
		КонецЕсли;
	КонецЦикла;
    
    //ЭТО ДЕЛАЛ СМАРТИС
//    Если РольДоступна("ЗаведующийСкладом") ТОГДА // ИЛИ РольДоступна("РольГрузчик") Тогда
//	Если НЕ Отбор.Количество()= 0 Тогда
//	ФлагИсполнитель = Ложь;
//	Для Каждого строкаИсполнители из Исполнители Цикл
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ
//						|	ЗаданиеНаРаботу.Ссылка
//						|ИЗ
//						|	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
//						|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтборИОтгрузка КАК ОтборИОтгрузка
//						|		ПО ЗаданиеНаРаботу.ДокументОснование = ОтборИОтгрузка.Ссылка
//						|ГДЕ
//						|	ЗаданиеНаРаботу.Проведен = ИСТИНА
//						|	И ЗаданиеНаРаботу.ПометкаУдаления = ЛОЖЬ
//						|	И ОтборИОтгрузка.Ссылка = &ДокСсылка";
//		Запрос.УстановитьПараметр("ДокСсылка",ЭтотОбъект.Ссылка);
//		Результат = Запрос.Выполнить().Выгрузить();
//		Если Результат.Количество() > 0 Тогда
//			Для Каждого строкаРезультат из Результат Цикл
//				Если строкаРезультат.Ссылка.Исполнитель = строкаИсполнители.Работники Тогда
//					ФлагИсполнитель = Истина;
//					прервать;
//				Иначе 
//					ФлагИсполнитель = Ложь;
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//		Если ФлагИсполнитель = Ложь Тогда
//			ДокументЗаданиеНаРаботу = Документы.ЗаданиеНаРаботу.СоздатьДокумент();
//			ДокументЗаданиеНаРаботу.Дата = ТекущаяДата();
//			ДокументЗаданиеНаРаботу.Организация = Организация;                         
//			ДокументЗаданиеНаРаботу.ДокументОснование = ЭтотОбъект.Ссылка;
//			ДокументЗаданиеНаРаботу.ВидЗадания = Перечисления.ВидЗаданияНаРаботу.Отгрузка;
//			ДокументЗаданиеНаРаботу.ПоставщикПолучатель = Получатель;
//			ДокументЗаданиеНаРаботу.Склад = Склад;
//			ДокументЗаданиеНаРаботу.Исполнитель = строкаИсполнители.Работники;
//			СтруктураПоиска = Новый Структура("Ключ", строкаИсполнители.Ключ); 			
//			МассивНайденныхСтрок = Маршруты.НайтиСтроки(СтруктураПоиска); 
//            //Для Каждого строкаОтбор из Отбор Цикл
//            //	Если строкаОтбор.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная Тогда
//            //		Маршрут = ВыделитьСлово(строкаОтбор.ЯчейкаПлан.Наименование);
//            //		МаршрутЧисло = Число(Маршрут);
//            //		СписокЯчеек.Добавить(МаршрутЧисло);
//            //	КонецЕсли;
//            //КонецЦикла;
//			
//			Если МассивНайденныхСтрок.Количество() > 0 Тогда
//				Для Каждого строкаМассивНайденныхСтрок из МассивНайденныхСтрок Цикл
//					ЗапросМаршрут = Новый Запрос;
//					ЗапросМаршрут.Текст = "";
//					Если ТЗДок =неопределено Тогда
//						ТЗДок = Отбор.Выгрузить();
//						Для Каждого строкаОтгрузка из ТЗДок Цикл
//							//доработки 11.02.2016
//							//разделение маршрутов
//							//по буферным ячейкам
//							Если строкаОтгрузка.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная Тогда
//								НомерРяда = ВыделитьСлово(строкаОтгрузка.ЯчейкаПлан.Наименование);
//								НомерРядаЧисло = Число(НомерРяда);
//								строкаОтгрузка.НомерРяда = НомерРядаЧисло;
//								Запрос = Новый Запрос;
//								Запрос.Текст = "ВЫБРАТЬ
//												|	СкладыСтратегияОбхода.НомерМаршрута
//												|ИЗ
//												|	Справочник.Склады.СтратегияОбхода КАК СкладыСтратегияОбхода
//												|ГДЕ
//												|	СкладыСтратегияОбхода.НомерРяда = &НомерРяда
//												|	И СкладыСтратегияОбхода.Ссылка = &Склад";
//								Запрос.УстановитьПараметр("НомерРяда",НомерРядаЧисло);
//								Запрос.УстановитьПараметр("Склад",Склад);
//								
//								Результат = Запрос.Выполнить().Выгрузить();
//								Если Результат.Количество() > 0 Тогда
//									строкаОтгрузка.НомерМаршрута = Строка(Результат[0].НомерМаршрута) + "Б";
//								КонецЕсли;
//							КонецЕсли;
//						КонецЦикла;
//						Для Каждого строкаОтгрузка из ТЗДок Цикл
//							//доработки 11.02.2016
//							//разделение маршрутов
//							//по  ячейкам комплектации
//							Если строкаОтгрузка.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Комплектация Тогда
//								НомерРяда = ВыделитьСлово(строкаОтгрузка.ЯчейкаПлан.Наименование);
//								НомерРядаЧисло = Число(НомерРяда);
//								строкаОтгрузка.НомерРяда = НомерРядаЧисло;
//								
//								//	КонецЦикла;
//								Запрос = Новый Запрос;
//								Запрос.Текст = "ВЫБРАТЬ
//												|	СкладыСтратегияОбхода.НомерМаршрута
//												|ИЗ
//												|	Справочник.Склады.СтратегияОбхода КАК СкладыСтратегияОбхода
//												|ГДЕ
//												|	СкладыСтратегияОбхода.НомерРяда = &НомерРяда
//												|	И СкладыСтратегияОбхода.Ссылка = &Склад";
//								Запрос.УстановитьПараметр("НомерРяда",НомерРядаЧисло);
//								Запрос.УстановитьПараметр("Склад",Склад);
//								
//								Результат = Запрос.Выполнить().Выгрузить();
//								Если Результат.Количество() > 0 Тогда
//									строкаОтгрузка.НомерМаршрута = Строка(Результат[0].НомерМаршрута) + "К";
//								КонецЕсли;
//							КонецЕсли;
//						КонецЦикла;
//						
//					КонецЕсли;
//					Для Каждого ТекстрокаОтбор из ТЗДок Цикл
//						Если  строкаМассивНайденныхСтрок.Маршрут = ТекстрокаОтбор.НомерМаршрута Тогда 
//							НоваяСтрока = ДокументЗаданиеНаРаботу.Задание.Добавить();
//							НоваяСтрока.ВидЯчейки = ТекстрокаОтбор.ВидЯчейки;
//							НоваяСтрока.ЕдиницаИзмерения = ТекстрокаОтбор.ЕдиницаИзмерения;
//							НоваяСтрока.Зона = ТекстрокаОтбор.Зона;
//							НоваяСтрока.Количество = ТекстрокаОтбор.Количество;
//							НоваяСтрока.КоличествоФакт = ТекстрокаОтбор.Количество;
//							НоваяСтрока.Номенклатура = ТекстрокаОтбор.Номенклатура;
//							НоваяСтрока.НомерПаллета = ТекстрокаОтбор.НомерПаллета;
//							НоваяСтрока.ЯчейкаПлан = ТекстрокаОтбор.ЯчейкаПлан;
//							//прервать;	
//						КонецЕсли;
//					КонецЦикла;
//				КонецЦикла;
//			КонецЕсли;
//			ДокументЗаданиеНаРаботу.Записать(РежимЗаписиДокумента.Проведение);
//		КонецЕсли;
//	КонецЦикла;
//КонецЕсли;
//КонецЕсли;
КонецПроцедуры

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

СтруктураМакетов = Новый Структура();
СтруктураМакетов.Вставить("ЖурналОтгрузкиТовара", "Журнал отгрузки товара");
СтруктураМакетов.Вставить("ЗаданиеНаТранспортировку", "Задание на транспортировку (отгрузка)");
СтруктураМакетов.Вставить("КомплектацияЯчейка", "Комплектация (по маршрутам)");
СтруктураМакетов.Вставить("КомплектацияОбщая", "Комплектация (общая)");
СтруктураМакетов.Вставить("ИнформационныйЛистКонверт", "Информационный лист (конверт)");
СтруктураМакетов.Вставить("УпаковочныйЛист", "Упаковочный лист");
Возврат СтруктураМакетов;

КонецФункции // ПолучитьТаблицуПечатныхФорм()

Функция ПечатьЖурналОтгрузкиТовара() Экспорт

ТабДок = Новый ТабличныйДокумент;
ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемкаИРазмещение_ЖурналОтгрузкиТовара";
Макет = Документы.ОтборИОтгрузка.ПолучитьМакет("ЖурналОтгрузкиТовара");

КС_ТЧ = Отгрузка.Количество();
КС_ПЛ = 28;
КС_СЛ = 32;
КСтр_Д = (КС_ТЧ - КС_ПЛ)/КС_СЛ;
Ост = КСтр_Д - Цел(КСтр_Д);
Если Ост = 0 Тогда
КСтр = 1 +Цел(КСтр_Д);
Иначе
Если КСтр_Д < 0 Тогда 
	КСтр = Цел(КСтр_Д)+1;
Иначе
	КСтр = Цел(КСтр_Д)+2;
КонецЕсли;
КонецЕсли;
НомерСтр = 1;
н=0;
ИтогоПаллет = 0;
ИтогоКоробок = 0;
ИтогоШтук = 0;

Для ф = НомерСтр по КСтр Цикл

// Заголовок
Область = Макет.ПолучитьОбласть("Заголовок");
Область.Параметры.НомерСтраницы = НомерСтр;
Область.Параметры.ДатаПечати = Формат(ТекущаяДата(),"ДЛФ=Д");
Область.Параметры.ВремяПечати = Формат(ТекущаяДата(),"ДЛФ=В");
ТабДок.Вывести(Область);
// Шапка
Если НомерСтр = 1 ТОгда
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Склад = Склад;
	Шапка.Параметры.Номер = Номер;
	Шапка.Параметры.Дата = Дата;
	Шапка.Параметры.Получатель = Получатель;
	Шапка.Параметры.ТорговаяТочка = ТорговаяТочка;
	Шапка.Параметры.ЯчейкаОтгрузки = ЯчейкаОтгрузки;
	ТабДок.Вывести(Шапка);
КонецЕсли;
// Приемка
Область = Макет.ПолучитьОбласть("ОтгрузкаШапка");
ТабДок.Вывести(Область);
ОбластьОтгрузка = Макет.ПолучитьОбласть("Отгрузка");
ТаблицаОтгрузка = Отгрузка.Выгрузить();
ТаблицаОтгрузка.Сортировать("Номенклатура Возр"); //сортировка по алфавиту

Если НомерСтр = 1 ТОгда
	Для к=н по н+27 Цикл
		Если н <= (КС_ТЧ-1) Тогда
			//ИЗМЕНЕНО Верескул Игорь(Начало 24.09.2014
			ОбластьОтгрузка.Параметры.НомерПП=н+1;
			//Окончание)Верескул Игорь 
			ОбластьОтгрузка.Параметры.КодНоменклатура = ТаблицаОтгрузка[н].Номенклатура.Код;
			ОбластьОтгрузка.Параметры.Номенклатура = ТаблицаОтгрузка[н].Номенклатура;
			
			ИЕУ_Паллета = ПолучитьИЕУ(ТаблицаОтгрузка[н].Номенклатура,Справочники.КлассификаторЕдиницИзмерения.Паллета);
			Паллет = Цел(ТаблицаОтгрузка[н].КоличествоФактическиОтгруженное/?(ИЕУ_Паллета=0,1,ИЕУ_Паллета));
			ОбластьОтгрузка.Параметры.КоличествоПаллет = ?(ИЕУ_Паллета=0,0,Паллет);
			ИтогоПаллет = ИтогоПаллет + ОбластьОтгрузка.Параметры.КоличествоПаллет;
			Ост = ТаблицаОтгрузка[н].КоличествоФактическиОтгруженное - Паллет*ИЕУ_Паллета;
			ИЕУ_Коробка = ПолучитьИЕУ(ТаблицаОтгрузка[н].Номенклатура,Справочники.КлассификаторЕдиницИзмерения.Коробка);
			Коробок =  Цел(Ост/?(ИЕУ_Коробка=0,1,ИЕУ_Коробка));
			ОбластьОтгрузка.Параметры.КоличествоКоробок = ?(ИЕУ_Коробка=0,0,Коробок);
			ИтогоКоробок = ИтогоКоробок + ОбластьОтгрузка.Параметры.КоличествоКоробок;
			Ост = Ост - Коробок*ИЕУ_Коробка;
			ОбластьОтгрузка.Параметры.КоличествоЕХО = Ост;
			ИтогоШтук = ИтогоШтук + ОбластьОтгрузка.Параметры.КоличествоЕХО;
			Если Паллет <> 0 Тогда
				ОбластьОтгрузка.Параметры.КоличествоЕИУ = ИЕУ_Паллета; 
			ИначеЕсли Коробок <> 0 Тогда
				ОбластьОтгрузка.Параметры.КоличествоЕИУ = ИЕУ_Коробка;
			Иначе
				ОбластьОтгрузка.Параметры.КоличествоЕИУ = 0;
			КонецЕсли;
			
			ТабДок.Вывести(ОбластьОтгрузка);
		КонецЕсли;
		н=н+1;
	КонецЦикла;
Иначе	
	Для к=н по н+31 Цикл
		Если н <= (КС_ТЧ-1) Тогда
			ОбластьОтгрузка.Параметры.КодНоменклатура = ТаблицаОтгрузка[н].Номенклатура.Код;
			ОбластьОтгрузка.Параметры.Номенклатура = ТаблицаОтгрузка[н].Номенклатура;
			
			ИЕУ_Паллета = ПолучитьИЕУ(ТаблицаОтгрузка[н].Номенклатура,Справочники.КлассификаторЕдиницИзмерения.Паллета);
			Паллет = Цел(ТаблицаОтгрузка[н].КоличествоФактическиОтгруженное/?(ИЕУ_Паллета=0,1,ИЕУ_Паллета));
			ОбластьОтгрузка.Параметры.КоличествоПаллет = ?(ИЕУ_Паллета=0,0,Паллет);
			ИтогоПаллет = ИтогоПаллет + ОбластьОтгрузка.Параметры.КоличествоПаллет;
			Ост = ТаблицаОтгрузка[н].КоличествоФактическиОтгруженное - Паллет*ИЕУ_Паллета;
			ИЕУ_Коробка = ПолучитьИЕУ(ТаблицаОтгрузка[н].Номенклатура,Справочники.КлассификаторЕдиницИзмерения.Коробка);
			Коробок =  Цел(Ост/?(ИЕУ_Коробка=0,1,ИЕУ_Коробка));
			ОбластьОтгрузка.Параметры.КоличествоКоробок = ?(ИЕУ_Коробка=0,0,Коробок);
			ИтогоКоробок = ИтогоКоробок + ОбластьОтгрузка.Параметры.КоличествоКоробок;
			Ост = Ост - Коробок*ИЕУ_Коробка;
			ОбластьОтгрузка.Параметры.КоличествоЕХО = Ост;
			ИтогоШтук = ИтогоШтук + ОбластьОтгрузка.Параметры.КоличествоЕХО;
			Если Паллет <> 0 Тогда
				ОбластьОтгрузка.Параметры.КоличествоЕИУ = ИЕУ_Паллета; 
			ИначеЕсли Коробок <> 0 Тогда
				ОбластьОтгрузка.Параметры.КоличествоЕИУ = ИЕУ_Коробка;
			Иначе
				ОбластьОтгрузка.Параметры.КоличествоЕИУ = 0;
			КонецЕсли;
			
			ТабДок.Вывести(ОбластьОтгрузка);
		КонецЕсли;
		н=н+1;
	КонецЦикла;
КонецЕсли;
Если НомерСтр <> КСтр Тогда      
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
КонецЕсли;
НомерСтр = НомерСтр + 1;
КонецЦикла;

ОбластьИтого = Макет.ПолучитьОбласть("Итого");
ОбластьИтого.Параметры.ИтогоПаллет = ИтогоПаллет; 
ОбластьИтого.Параметры.ИтогооКоробок = ИтогоКоробок; 
ОбластьИтого.Параметры.ИтогоЕХО = ИтогоШтук; 
ТабДок.Вывести(ОбластьИтого);

ТабДок.ОтображатьСетку = Ложь;
ТабДок.Защита = Ложь;
ТабДок.ТолькоПросмотр = Ложь;
ТабДок.ОтображатьЗаголовки = Ложь;
ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
ТабДок.ПолеСверху = 2;
ТабДок.ПолеСлева = 2;
ТабДок.ПолеСнизу = 2;
ТабДок.ПолеСправа = 2;

Возврат ТабДок;

КонецФункции

Функция ПечатьЗаданияНаТранспортировку() Экспорт
	
	ЗаполненноеЗаданиеНаТранспортировку = Ложь;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемкаИРазмещение_ЗаданияНаТранспортировку";
	Макет = Документы.ОтборИОтгрузка.ПолучитьМакет("ЗаданиеНаТранспортировку");
	
	ТаблицаОтбор = Отбор.Выгрузить();
	ТаблицаОтбор.Очистить();
	Для каждого Строка из Отбор Цикл
		Если (Строка.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная И Строка.НомерПаллета <> 0) ИЛИ 
			(Строка.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Общая И Строка.НомерПаллета <> 0) ТОгда
			НоваяСтрока = ТаблицаОтбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		КонецЕсли;	
	КонецЦикла;	
	ТаблицаОтбор.Сортировать("Номенклатура Возр"); //сортировка по алфавиту
	
	КС_ТЧ = ТаблицаОтбор.Количество();
	//КС_ТЧ = Отбор.Количество();
	КС_ПЛ = 16;
	КС_СЛ = 19;
	КСтр_Д = (КС_ТЧ - КС_ПЛ)/КС_СЛ;
	Ост = КСтр_Д - Цел(КСтр_Д);
	Если Ост = 0 Тогда
		КСтр = 1 +Цел(КСтр_Д);
	Иначе
		Если КСтр_Д < 0 Тогда 
			КСтр = Цел(КСтр_Д)+1;
		Иначе
			КСтр = Цел(КСтр_Д)+2;
		КонецЕсли;
	КонецЕсли;
	НомерСтр = 1;
	н=0;
	ИтогШтук = 0;
	
	Для ф = НомерСтр по КСтр Цикл
		
		// Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.НомерСтраницы = НомерСтр;
		Область.Параметры.ДатаПечати = Формат(ТекущаяДата(),"ДЛФ=Д");
		Область.Параметры.ВремяПечати = Формат(ТекущаяДата(),"ДЛФ=В");
		ТабДок.Вывести(Область);
		// Шапка
		Если НомерСтр = 1 ТОгда
			Шапка = Макет.ПолучитьОбласть("Шапка");
			Шапка.Параметры.Склад = Склад;
			Шапка.Параметры.Номер = Номер;
			Шапка.Параметры.Дата = Дата;
			Шапка.Параметры.Получатель = Получатель;
			Шапка.Параметры.ТорговаяТочка = ТорговаяТочка;
			Шапка.Параметры.ЯчейкаОтгрузки = ЯчейкаОтгрузки;
			ТабДок.Вывести(Шапка);
		КонецЕсли;
		// Приемка
		Область = Макет.ПолучитьОбласть("ОтгрузкаШапка");
		ТабДок.Вывести(Область);
		ОбластьОтгрузка = Макет.ПолучитьОбласть("Отгрузка");
		
		//ТаблицаОтбор = Отбор.Выгрузить();
		//ТаблицаОтбор.Очистить();
		//Для каждого Строка из Отбор Цикл
		//	Если (Строка.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная И Строка.НомерПаллета <> 0) ИЛИ 
		//		 (Строка.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Общая И Строка.НомерПаллета <> 0) ТОгда
		//		 НоваяСтрока = ТаблицаОтбор.Добавить();
		//		 ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		//	КонецЕсли;	
		//КонецЦикла;	
		//
		////ПараметрыОтбора = Новый Структура();
		////ПараметрыОтбора = Новый Структура("ВидЯчейки");
		////ПараметрыОтбора.Вставить("ВидЯчейки", Перечисления.ВидыСкладскихЯчеек.Буферная);
		////ПараметрыОтбора.Вставить("ВидЯчейки", Перечисления.ВидыСкладскихЯчеек.Общая);
		////ТаблицаОтбор = Отбор.Выгрузить(ПараметрыОтбора);
		//ТаблицаОтбор.Сортировать("Номенклатура Возр"); //сортировка по алфавиту
		
		Если НомерСтр = 1 ТОгда
			Для к=н по н+15 Цикл
				Если н <= (ТаблицаОтбор.Количество()-1) Тогда
					ОбластьОтгрузка.Параметры.КодНоменклатура = ТаблицаОтбор[н].Номенклатура.Код;
					ОбластьОтгрузка.Параметры.Номенклатура = ТаблицаОтбор[н].Номенклатура;
					ОбластьОтгрузка.Параметры.КоличествоПаллет = ТаблицаОтбор[н].Количество;
					ИтогШтук = ИтогШтук + ОбластьОтгрузка.Параметры.КоличествоПаллет;
					ОбластьОтгрузка.Параметры.НомерПалетта = ТаблицаОтбор[н].НомерПаллета;
					ОбластьОтгрузка.Параметры.ЯчейкаПлан = ТаблицаОтбор[н].ЯчейкаПлан;
					//Коновалова 01062013 +
					Если ТаблицаОтбор[н].ЯчейкаПлан <> ТаблицаОтбор[н].ЯчейкаФакт ТОгда
						ОбластьОтгрузка.Параметры.ЯчейкаФакт = ТаблицаОтбор[н].ЯчейкаФакт;
					Иначе
						ОбластьОтгрузка.Параметры.ЯчейкаФакт = "";
					КонецЕсли;	
					//Коновалова 01062013 -
					ТабДок.Вывести(ОбластьОтгрузка);
					ЗаполненноеЗаданиеНаТранспортировку = Истина;
				КонецЕсли;
				н=н+1;
			КонецЦикла;
		Иначе	
			Для к=н по н+18 Цикл
				Если н <= (ТаблицаОтбор.Количество()-1) Тогда
					ОбластьОтгрузка.Параметры.КодНоменклатура = ТаблицаОтбор[н].Номенклатура.Код;
					ОбластьОтгрузка.Параметры.Номенклатура = ТаблицаОтбор[н].Номенклатура;
					ОбластьОтгрузка.Параметры.КоличествоПаллет = ТаблицаОтбор[н].Количество;
					ИтогШтук = ИтогШтук + ОбластьОтгрузка.Параметры.КоличествоПаллет;
					ОбластьОтгрузка.Параметры.НомерПалетта = ТаблицаОтбор[н].НомерПаллета;
					ОбластьОтгрузка.Параметры.ЯчейкаПлан = ТаблицаОтбор[н].ЯчейкаПлан;
					//Коновалова 01062013 +
					Если ТаблицаОтбор[н].ЯчейкаПлан <> ТаблицаОтбор[н].ЯчейкаФакт ТОгда
						ОбластьОтгрузка.Параметры.ЯчейкаФакт = ТаблицаОтбор[н].ЯчейкаФакт;
					Иначе
						ОбластьОтгрузка.Параметры.ЯчейкаФакт = "";
					КонецЕсли;	
					//Коновалова 01062013 -
					ТабДок.Вывести(ОбластьОтгрузка);
					ЗаполненноеЗаданиеНаТранспортировку = Истина;
				КонецЕсли;
				н=н+1;
			КонецЦикла;
		КонецЕсли;
		Если НомерСтр <> КСтр Тогда      
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НомерСтр = НомерСтр + 1;
	КонецЦикла;
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьИтого.Параметры.ИтогоПаллет = ИтогШтук; 
	ТабДок.Вывести(ОбластьИтого);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ПолеСверху = 2;
	ТабДок.ПолеСлева = 2;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСправа = 2;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьКомплектацияОбщая() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемкаИРазмещение_КомплектацияОбщая";
	Макет = Документы.ОтборИОтгрузка.ПолучитьМакет("КомплектацияОбщая");
	
	КС_ТЧ = Отбор.Количество();
	КС_ПЛ = 16;
	КС_СЛ = 19;
	КСтр_Д = (КС_ТЧ - КС_ПЛ)/КС_СЛ;
	Ост = КСтр_Д - Цел(КСтр_Д);
	Если Ост = 0 Тогда
		КСтр = 1 +Цел(КСтр_Д);
	Иначе
		Если КСтр_Д < 0 Тогда 
			КСтр = Цел(КСтр_Д)+1;
		Иначе
			КСтр = Цел(КСтр_Д)+2;
		КонецЕсли;
	КонецЕсли;
	НомерСтр = 1;
	н=0;
	ИтогПаллет = 0;
	ИтогКоробок = 0;
	ИтогЕХО = 0;
	Для ф = НомерСтр по КСтр Цикл
		
		// Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.НомерСтраницы = НомерСтр;
		Область.Параметры.Номер = Номер;
		Область.Параметры.ДатаПечати = Формат(ТекущаяДата(),"ДЛФ=Д");
		Область.Параметры.ВремяПечати = Формат(ТекущаяДата(),"ДЛФ=В");
		ТабДок.Вывести(Область);
		// Шапка
		Если НомерСтр = 1 ТОгда
			Шапка = Макет.ПолучитьОбласть("Шапка");
			Шапка.Параметры.Склад = Склад;
			Шапка.Параметры.Дата = Дата;
			Шапка.Параметры.Получатель = Получатель;
			Шапка.Параметры.ТорговаяТочка = ТорговаяТочка;
			Шапка.Параметры.ЯчейкаОтгрузки = ЯчейкаОтгрузки;
			ТабДок.Вывести(Шапка);
		КонецЕсли;
		// Приемка
		Область = Макет.ПолучитьОбласть("ОтгрузкаШапка");
		ТабДок.Вывести(Область);
		ОбластьОтгрузка = Макет.ПолучитьОбласть("Отгрузка");
		//ПараметрыОтбора = Новый Структура("ВидЯчейки");
		//ПараметрыОтбора.Вставить("ВидЯчейки", Перечисления.ВидыСкладскихЯчеек.Комплектация);
		//ТаблицаОтбор = Отбор.Выгрузить(ПараметрыОтбора);
		
		ТаблицаОтбор = Отбор.Выгрузить();
		ТаблицаОтбор.Очистить();
		Для каждого Строка из Отбор Цикл
			Если (Строка.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Комплектация) ИЛИ 
				(Строка.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Общая И Строка.НомерПаллета = 0) ТОгда
				НоваяСтрока = ТаблицаОтбор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			КонецЕсли;	
		КонецЦикла;	
		
		////// сортировка по стратегии обхода ///////
		ТаблицаОтбор.Колонки.Добавить("НомерРяда1");
		ТаблицаОтбор.Колонки.Добавить("НомерЯруса");
		ТаблицаОтбор.Колонки.Добавить("НомерЯчейка");
		ТаблицаОтбор.Колонки.Добавить("НомерСтрокиОбхода");
		ТаблицаОтбор.Колонки.Добавить("ПравилоЯчеек");
		
		ТаблицаСтратегииОбхода = Справочники.Склады.НайтиПоНаименованию(Склад).СтратегияОбхода.Выгрузить();
		ТаблицаСтратегииОбхода.Свернуть("НомерСтроки, ЯчейкаСтарт, ЯчейкаФиниш");
		ТаблицаСтратегииОбхода.Колонки.Добавить("НомерРядаСтарт");
		ТаблицаСтратегииОбхода.Колонки.Добавить("НомерЯрусаСтарт");
		ТаблицаСтратегииОбхода.Колонки.Добавить("НомерЯчейкаСтарт");
		ТаблицаСтратегииОбхода.Колонки.Добавить("НомерЯчейкаФиниш");
		ТаблицаСтратегииОбхода.Колонки.Добавить("ПравилоЯчеек");
		Для каждого стр из ТаблицаСтратегииОбхода Цикл 
			стр.НомерРядаСтарт = стр.ЯчейкаСтарт.Ссылка.НомерРяда;
			стр.НомерЯрусаСтарт = стр.ЯчейкаСтарт.Ссылка.НомерЯруса;
			стр.НомерЯчейкаСтарт = стр.ЯчейкаСтарт.Ссылка.НомерЯчейки;
			стр.НомерЯчейкаФиниш = стр.ЯчейкаФиниш.Ссылка.НомерЯчейки;
			Если стр.НомерЯчейкаСтарт < стр.НомерЯчейкаФиниш Тогда
				стр.ПравилоЯчеек = "Возр";
			ИначеЕсли стр.НомерЯчейкаСтарт > стр.НомерЯчейкаФиниш Тогда
				стр.ПравилоЯчеек = "Убыв";
			КонецЕсли;	
		КонецЦикла;
		ТаблицаСтратегииОбхода.Свернуть("НомерСтроки,НомерРядаСтарт,НомерЯрусаСтарт,НомерЯчейкаСтарт,НомерЯчейкаФиниш,ПравилоЯчеек");
		
		Для каждого СтрокаОтбора из ТаблицаОтбор Цикл
			СтрокаОтбора.НомерРяда1 = СтрокаОтбора.ЯчейкаПлан.Ссылка.НомерРяда;
			СтрокаОтбора.НомерЯруса = СтрокаОтбора.ЯчейкаПлан.Ссылка.НомерЯруса;
			СтрокаОтбора.НомерЯчейка = СтрокаОтбора.ЯчейкаПлан.Ссылка.НомерЯчейки;
			ПараметрыОтбора1 = Новый Структура("НомерРядаСтарт, НомерЯрусаСтарт");
			ПараметрыОтбора1.Вставить("НомерРядаСтарт", СтрокаОтбора.ЯчейкаПлан.Ссылка.НомерРяда);
			ПараметрыОтбора1.Вставить("НомерЯрусаСтарт", СтрокаОтбора.ЯчейкаПлан.Ссылка.НомерЯруса);
			НайденныеСтроки = ТаблицаСтратегииОбхода.НайтиСтроки(ПараметрыОтбора1);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаОтбора.НомерСтрокиОбхода = НайденныеСтроки[0].НомерСтроки;
				СтрокаОтбора.ПравилоЯчеек = НайденныеСтроки[0].ПравилоЯчеек;
			КонецЕсли;
		КонецЦикла;
		/////////////////////////////////////////////
		ТаблицаОтбор.Сортировать("НомерСтрокиОбхода Возр");
		////////// необходимо отсортировать таблицу внутри строк обхода по значениям ячеек, согласно правил ячеек /////////
		ТаблицаИндексов = ТаблицаОтбор.Скопировать();
		ТаблицаИндексов.Свернуть("НомерСтрокиОбхода");
		ТаблицаОтборОбщая = ТаблицаОтбор.Скопировать();
		ТаблицаОтборОбщая.Очистить();
		
		Для каждого строк из ТаблицаИндексов Цикл
			ПараметрыОтбора2 = Новый Структура("НомерСтрокиОбхода");
			ПараметрыОтбора2.Вставить("НомерСтрокиОбхода", строк.НомерСтрокиОбхода);
			НайденныеСтроки1 = ТаблицаОтбор.НайтиСтроки(ПараметрыОтбора2);
			ТаблицаБуфер = ТаблицаОтбор.Скопировать();
			ТаблицаБуфер.Очистить();
			Для каждого НайденнаяСтрока из НайденныеСтроки1 Цикл
				НоваяСтрока = ТаблицаБуфер.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);
			КонецЦикла;
			ТаблицаБуфер.Сортировать("НомерЯчейка " + ТаблицаБуфер[0].ПравилоЯчеек);
			Для каждого СтрокаТаблицыБуфера из ТаблицаБуфер Цикл
				НоваяСтрокаОтборОбщая = ТаблицаОтборОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОтборОбщая,СтрокаТаблицыБуфера);
			КонецЦикла;
		КонецЦикла;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		Если НомерСтр = 1 ТОгда
			Для к=н по н+15 Цикл
				Если н <= (ТаблицаОтборОбщая.Количество()-1) Тогда
					ОбластьОтгрузка.Параметры.КодНоменклатура = ТаблицаОтборОбщая[н].Номенклатура.Код;
					ОбластьОтгрузка.Параметры.Номенклатура = ТаблицаОтборОбщая[н].Номенклатура;
					ОбластьОтгрузка.Параметры.КоличествоКоробок = ТаблицаОтборОбщая[н].Количество;
					ОбластьОтгрузка.Параметры.ЯчейкаПлан = ТаблицаОтборОбщая[н].ЯчейкаПлан;
					//Коновалова 01062013 +
					Если ТаблицаОтборОбщая[н].ЯчейкаПлан <> ТаблицаОтборОбщая[н].ЯчейкаФакт ТОгда
						ОбластьОтгрузка.Параметры.ЯчейкаФакт = ТаблицаОтборОбщая[н].ЯчейкаФакт;
					Иначе
						ОбластьОтгрузка.Параметры.ЯчейкаФакт = "";
					КонецЕсли;	
					//Коновалова 01062013 -
					ПризнакПополнения = ПолучитьПризнакПополнения(ТаблицаОтборОбщая[н].Номенклатура);
					ОбластьОтгрузка.Параметры.ПризнакПополнения = ?(ПризнакПополнения," + ", "");
					
					КоличествоПополнения = ПолучитьКоличествоЕХО(ТаблицаОтборОбщая[н].Номенклатура,ТаблицаОтборОбщая[н].ЯчейкаПлан);
					ОбластьОтгрузка.Параметры.ОстатокПослеОтбора = КоличествоПополнения;
					
					ТабДок.Вывести(ОбластьОтгрузка);
				КонецЕсли;
				н=н+1;
			КонецЦикла;
		Иначе	
			Для к=н по н+18 Цикл
				Если н <= (ТаблицаОтборОбщая.Количество()-1) Тогда
					ОбластьОтгрузка.Параметры.КодНоменклатура = ТаблицаОтборОбщая[н].Номенклатура.Код;
					ОбластьОтгрузка.Параметры.Номенклатура = ТаблицаОтборОбщая[н].Номенклатура;
					ОбластьОтгрузка.Параметры.КоличествоКоробок = ТаблицаОтборОбщая[н].Количество;
					ОбластьОтгрузка.Параметры.ЯчейкаПлан = ТаблицаОтборОбщая[н].ЯчейкаПлан;
					//Коновалова 01062013 +
					Если ТаблицаОтборОбщая[н].ЯчейкаПлан <> ТаблицаОтборОбщая[н].ЯчейкаФакт ТОгда
						ОбластьОтгрузка.Параметры.ЯчейкаФакт = ТаблицаОтборОбщая[н].ЯчейкаФакт;
					Иначе
						ОбластьОтгрузка.Параметры.ЯчейкаФакт = "";
					КонецЕсли;	
					//Коновалова 01062013 -
					ПризнакПополнения = ПолучитьПризнакПополнения(ТаблицаОтборОбщая[н].Номенклатура);
					ОбластьОтгрузка.Параметры.ПризнакПополнения = ?(ПризнакПополнения," + ", "");
					
					КоличествоПополнения = ПолучитьКоличествоЕХО(ТаблицаОтборОбщая[н].Номенклатура,ТаблицаОтборОбщая[н].ЯчейкаПлан);
					ОбластьОтгрузка.Параметры.ОстатокПослеОтбора = КоличествоПополнения;
					
					ТабДок.Вывести(ОбластьОтгрузка);
				КонецЕсли;
				н=н+1;
			КонецЦикла;
		КонецЕсли;
		Если НомерСтр <> КСтр Тогда      
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НомерСтр = НомерСтр + 1;
	КонецЦикла;
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьИтого.Параметры.ИтогооКоробок = ТаблицаОтборОбщая.Итог("Количество"); 
	ТабДок.Вывести(ОбластьИтого);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ПолеСверху = 2;
	ТабДок.ПолеСлева = 2;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСправа = 2;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьКомплектацияЯчейка() Экспорт
	
	ЗаполненноеКомплектацияЯчейка = Ложь;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемкаИРазмещение_КомплектацияЯчейка";
	Макет = Документы.ОтборИОтгрузка.ПолучитьМакет("КомплектацияЯчейка");
	
	////// сортировка по стратегии обхода ///////
	
	ТаблицаОтбор = Отбор.Выгрузить();
	ТаблицаОтбор.Очистить();
	Для каждого Строка из Отбор Цикл
		Если (Строка.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Комплектация) ИЛИ 
			(Строка.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Общая И Строка.НомерПаллета = 0) ТОгда
			НоваяСтрока = ТаблицаОтбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	//ПараметрыОтбора = Новый Структура("ВидЯчейки");
	//ПараметрыОтбора.Вставить("ВидЯчейки", Перечисления.ВидыСкладскихЯчеек.Комплектация);
	//ТаблицаОтбор = Отбор.Выгрузить(ПараметрыОтбора);
	
	ТаблицаОтбор.Колонки.Добавить("НомерРяда1");
	ТаблицаОтбор.Колонки.Добавить("НомерЯруса");
	ТаблицаОтбор.Колонки.Добавить("НомерЯчейка");
	ТаблицаОтбор.Колонки.Добавить("НомерСтрокиОбхода");
	ТаблицаОтбор.Колонки.Добавить("ПравилоЯчеек");
	ТаблицаОтбор.Колонки.Добавить("НомерМаршрута1");
	
	ТаблицаСтратегииОбхода = Справочники.Склады.НайтиПоНаименованию(Склад).СтратегияОбхода.Выгрузить();
	ТаблицаСтратегииОбхода.Свернуть("НомерСтроки, ЯчейкаСтарт, ЯчейкаФиниш, НомерМаршрута");
	ТаблицаСтратегииОбхода.Колонки.Добавить("НомерРядаСтарт");
	ТаблицаСтратегииОбхода.Колонки.Добавить("НомерЯрусаСтарт");
	ТаблицаСтратегииОбхода.Колонки.Добавить("НомерЯчейкаСтарт");
	ТаблицаСтратегииОбхода.Колонки.Добавить("НомерЯчейкаФиниш");
	ТаблицаСтратегииОбхода.Колонки.Добавить("ПравилоЯчеек");
	Для каждого стр из ТаблицаСтратегииОбхода Цикл 
		стр.НомерРядаСтарт = стр.ЯчейкаСтарт.Ссылка.НомерРяда;
		стр.НомерЯрусаСтарт = стр.ЯчейкаСтарт.Ссылка.НомерЯруса;
		стр.НомерЯчейкаСтарт = стр.ЯчейкаСтарт.Ссылка.НомерЯчейки;
		стр.НомерЯчейкаФиниш = стр.ЯчейкаФиниш.Ссылка.НомерЯчейки;
		Если стр.НомерЯчейкаСтарт < стр.НомерЯчейкаФиниш Тогда
			стр.ПравилоЯчеек = "Возр";
		ИначеЕсли стр.НомерЯчейкаСтарт > стр.НомерЯчейкаФиниш Тогда
			стр.ПравилоЯчеек = "Убыв";
		КонецЕсли;	
	КонецЦикла;
	ТаблицаСтратегииОбхода.Свернуть("НомерСтроки,НомерРядаСтарт,НомерЯрусаСтарт,НомерЯчейкаСтарт,НомерЯчейкаФиниш,ПравилоЯчеек, НомерМаршрута");
	
	Для каждого СтрокаОтбора из ТаблицаОтбор Цикл
		СтрокаОтбора.НомерРяда1 = СтрокаОтбора.ЯчейкаПлан.Ссылка.НомерРяда;
		СтрокаОтбора.НомерЯруса = СтрокаОтбора.ЯчейкаПлан.Ссылка.НомерЯруса;
		СтрокаОтбора.НомерЯчейка = СтрокаОтбора.ЯчейкаПлан.Ссылка.НомерЯчейки;
		ПараметрыОтбора1 = Новый Структура("НомерРядаСтарт, НомерЯрусаСтарт");
		ПараметрыОтбора1.Вставить("НомерРядаСтарт", СтрокаОтбора.ЯчейкаПлан.Ссылка.НомерРяда);
		ПараметрыОтбора1.Вставить("НомерЯрусаСтарт", СтрокаОтбора.ЯчейкаПлан.Ссылка.НомерЯруса);
		НайденныеСтроки = ТаблицаСтратегииОбхода.НайтиСтроки(ПараметрыОтбора1); 
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаОтбора.НомерСтрокиОбхода = НайденныеСтроки[0].НомерСтроки;
			СтрокаОтбора.ПравилоЯчеек = НайденныеСтроки[0].ПравилоЯчеек;
			СтрокаОтбора.НомерМаршрута1 = НайденныеСтроки[0].НомерМаршрута;
		КонецЕсли;
	КонецЦикла;
	/////////////////////////////////////////////
	ТаблицаОтбор.Сортировать("НомерСтрокиОбхода Возр");
	////////// необходимо отсортировать таблицу внутри строк обхода по значениям ячеек, согласно правил ячеек /////////
	ТаблицаИндексов = ТаблицаОтбор.Скопировать();
	ТаблицаИндексов.Свернуть("НомерСтрокиОбхода");
	ТаблицаОтборОбщая_ = ТаблицаОтбор.Скопировать();
	ТаблицаОтборОбщая_.Очистить();
	
	Для каждого строк из ТаблицаИндексов Цикл
		ПараметрыОтбора2 = Новый Структура("НомерСтрокиОбхода");
		ПараметрыОтбора2.Вставить("НомерСтрокиОбхода", строк.НомерСтрокиОбхода);
		НайденныеСтроки1 = ТаблицаОтбор.НайтиСтроки(ПараметрыОтбора2);
		ТаблицаБуфер = ТаблицаОтбор.Скопировать();
		ТаблицаБуфер.Очистить();
		Для каждого НайденнаяСтрока из НайденныеСтроки1 Цикл
			НоваяСтрока = ТаблицаБуфер.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);
		КонецЦикла;
		ТаблицаБуфер.Сортировать("НомерЯчейка " + ТаблицаБуфер[0].ПравилоЯчеек);
		Для каждого СтрокаТаблицыБуфера из ТаблицаБуфер Цикл
			НоваяСтрокаОтборОбщая = ТаблицаОтборОбщая_.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОтборОбщая,СтрокаТаблицыБуфера);
		КонецЦикла;
	КонецЦикла;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	КоличествоМаршрутов = Справочники.Склады.НайтиПоНаименованию(Склад).СтратегияОбхода.Выгрузить();
	КоличествоМаршрутов.Свернуть("НомерМаршрута");
	КоличествоМаршрутов.Сортировать("НомерМаршрута Убыв");
	НН = КоличествоМаршрутов[0].НомерМаршрута; 
	Сч = 1;
	
	ДЛя Сч = 1 по НН Цикл 
		
		
		ПараметрыОтбора3 = Новый Структура("НомерМаршрута1");
		ПараметрыОтбора3.Вставить("НомерМаршрута1", Сч);
		НС_ТаблицаОтборОбщая = ТаблицаОтборОбщая_.НайтиСтроки(ПараметрыОтбора3);
		ТаблицаОтборОбщая = ТаблицаОтборОбщая_.Скопировать();
		ТаблицаОтборОбщая.Очистить();
		
		Для каждого Строка_НС из НС_ТаблицаОтборОбщая Цикл
			НоваяСтрока_ТОО = ТаблицаОтборОбщая.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока_ТОО,Строка_НС);
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(ТаблицаОтборОбщая) ТОгда
			
			КС_ТЧ = ТаблицаОтборОбщая.Количество();
			КС_ПЛ = 16;
			КС_СЛ = 19;
			КСтр_Д = (КС_ТЧ - КС_ПЛ)/КС_СЛ;
			Ост = КСтр_Д - Цел(КСтр_Д);
			Если Ост = 0 Тогда
				КСтр = 1 +Цел(КСтр_Д);
			Иначе
				Если КСтр_Д < 0 Тогда 
					КСтр = Цел(КСтр_Д)+1;
				Иначе
					КСтр = Цел(КСтр_Д)+2;
				КонецЕсли;
			КонецЕсли;
			
			НомерСтр = 1;
			н=0;
			ИтогПаллет = 0;
			ИтогКоробок = 0;
			ИтогЕХО = 0;
			Для ф = НомерСтр по КСтр Цикл
				
				// Заголовок
				Область = Макет.ПолучитьОбласть("Заголовок");
				Область.Параметры.НомерСтраницы = НомерСтр;
				Область.Параметры.Номер = Номер + " / " + Сч;
				НомераКомплектаций.Добавить(Номер + " / " + Сч);
				Область.Параметры.ДатаПечати = Формат(ТекущаяДата(),"ДЛФ=Д");
				Область.Параметры.ВремяПечати = Формат(ТекущаяДата(),"ДЛФ=В");
				ТабДок.Вывести(Область);
				// Шапка
				Если НомерСтр = 1 ТОгда
					Шапка = Макет.ПолучитьОбласть("Шапка");
					Шапка.Параметры.Склад = Склад;
					Шапка.Параметры.Дата = Дата;
					Шапка.Параметры.Получатель = Получатель;
					Шапка.Параметры.ТорговаяТочка = ТорговаяТочка;
					Шапка.Параметры.ЯчейкаОтгрузки = ЯчейкаОтгрузки;
					ТабДок.Вывести(Шапка);
				КонецЕсли;
				// Приемка
				Область = Макет.ПолучитьОбласть("ОтгрузкаШапка");
				ТабДок.Вывести(Область);
				ОбластьОтгрузка = Макет.ПолучитьОбласть("Отгрузка");
				
				
				Если НомерСтр = 1 ТОгда
					Для к=н по н+15 Цикл
						Если н <= (ТаблицаОтборОбщая.Количество()-1) Тогда
							ОбластьОтгрузка.Параметры.КодНоменклатура = ТаблицаОтборОбщая[н].Номенклатура.Код;
							ОбластьОтгрузка.Параметры.Номенклатура = ТаблицаОтборОбщая[н].Номенклатура;
							
							ОбластьОтгрузка.Параметры.КоличествоКоробок = ТаблицаОтборОбщая[н].Количество;
							ОбластьОтгрузка.Параметры.ЯчейкаПлан = ТаблицаОтборОбщая[н].ЯчейкаПлан;
							//Коновалова 01062013 +
							Если ТаблицаОтборОбщая[н].ЯчейкаПлан <> ТаблицаОтборОбщая[н].ЯчейкаФакт ТОгда
								ОбластьОтгрузка.Параметры.ЯчейкаФакт = ТаблицаОтборОбщая[н].ЯчейкаФакт;
							Иначе
								ОбластьОтгрузка.Параметры.ЯчейкаФакт = "";
							КонецЕсли;	
							//Коновалова 01062013 -
							ПризнакПополнения = ПолучитьПризнакПополнения(ТаблицаОтборОбщая[н].Номенклатура);
							ОбластьОтгрузка.Параметры.ПризнакПополнения = ?(ПризнакПополнения," + ", "");
							
							КоличествоПополнения = ПолучитьКоличествоЕХО(ТаблицаОтборОбщая[н].Номенклатура,ТаблицаОтборОбщая[н].ЯчейкаПлан);
							ОбластьОтгрузка.Параметры.ОстатокПослеОтбора = КоличествоПополнения;
							
							ТабДок.Вывести(ОбластьОтгрузка);
							
							ЗаполненноеКомплектацияЯчейка = Истина;
							
						КонецЕсли;
						н=н+1;
					КонецЦикла;
				Иначе	
					Для к=н по н+18 Цикл
						Если н <= (ТаблицаОтборОбщая.Количество()-1) Тогда
							ОбластьОтгрузка.Параметры.КодНоменклатура = ТаблицаОтборОбщая[н].Номенклатура.Код;
							ОбластьОтгрузка.Параметры.Номенклатура = ТаблицаОтборОбщая[н].Номенклатура;
							
							ОбластьОтгрузка.Параметры.КоличествоКоробок = ТаблицаОтборОбщая[н].Количество;
							ОбластьОтгрузка.Параметры.ЯчейкаПлан = ТаблицаОтборОбщая[н].ЯчейкаПлан;
							//Коновалова 01062013 +
							Если ТаблицаОтборОбщая[н].ЯчейкаПлан <> ТаблицаОтборОбщая[н].ЯчейкаФакт ТОгда
								ОбластьОтгрузка.Параметры.ЯчейкаФакт = ТаблицаОтборОбщая[н].ЯчейкаФакт;
							Иначе
								ОбластьОтгрузка.Параметры.ЯчейкаФакт = "";
							КонецЕсли;	
							//Коновалова 01062013 -
							ПризнакПополнения = ПолучитьПризнакПополнения(ТаблицаОтборОбщая[н].Номенклатура);
							ОбластьОтгрузка.Параметры.ПризнакПополнения = ?(ПризнакПополнения," + ", "");
							
							КоличествоПополнения = ПолучитьКоличествоЕХО(ТаблицаОтборОбщая[н].Номенклатура,ТаблицаОтборОбщая[н].ЯчейкаПлан);
							ОбластьОтгрузка.Параметры.ОстатокПослеОтбора = КоличествоПополнения;
							
							ТабДок.Вывести(ОбластьОтгрузка);
							
							ЗаполненноеКомплектацияЯчейка = Истина;
							
						КонецЕсли;
						н=н+1;
					КонецЦикла;
				КонецЕсли;
				Если НомерСтр <> КСтр Тогда      
					ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				НомерСтр = НомерСтр + 1;
			КонецЦикла;
			
			ОбластьИтого = Макет.ПолучитьОбласть("Итого");
			ОбластьИтого.Параметры.ИтогооКоробок = ТаблицаОтборОбщая.Итог("Количество"); 
			ТабДок.Вывести(ОбластьИтого);
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла;		
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ПолеСверху = 2;
	ТабДок.ПолеСлева = 2;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСправа = 2;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьИнформационныйЛистКонверт() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемкаИРазмещение_ИнформационныйЛистКонверт";
	Макет = Документы.ОтборИОтгрузка.ПолучитьМакет("ИнформационныйЛистКонверт");
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Склад = Склад;
	Область.Параметры.ВидОтгрузки = ВидОтгрузки;
	Область.Параметры.Номер = Номер;
	Область.Параметры.Дата = Дата;
	Область.Параметры.Получатель = Получатель;
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Область1");
	//Коновалова 18022013 +
	//Область.Параметры.СтрокаПрописью = "По документу " + ДокументОтгрузки;
	ТабОтгрузка = Отгрузка.Выгрузить();
	ТабОтгрузка.Свернуть("ДокументОснование");
	Строка_Отгр = "";
	Для каждого стр из ТабОтгрузка Цикл
		Строка_Отгр = Строка_Отгр + стр.ДокументОснование + ", ";
	КонецЦикла;
	Область.Параметры.СтрокаПрописью = "По документу " + СокрЛП(Строка_Отгр);
	Область.Параметры.ЗаданиеНаТранспортировку = Номер;
	//Коновалова 18022013 -
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Область1_СтрокиКомплектации");
	Для каждого строка из НомераКомплектаций Цикл
		Область.Параметры.НомерКомплектации = строка.Значение;
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Область2");
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Область2_СтрокиПополнения");
	//Для каждого строка из НомераПополнений Цикл
	Область.Параметры.НомерПополнения = УправлениеСкладскойЛогистикой.ПолучитьДокументПеремещения(Ссылка);;
	ТабДок.Вывести(Область);
	//КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подписи");
	Область.Параметры.Оператор = Ответственный;
	Область.Параметры.ИсполнительОтгрузки = ИсполнительОтгрузки;
	Область.Параметры.ИсполнительОтбора = ИсполнительОтбора;
	ТабДок.Вывести(Область);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 2;
	ТабДок.ПолеСлева = 2;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСправа = 2;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьИЕУ(номен, единица) Экспорт
	
	Запрос = новый Запрос("ВЫБРАТЬ
	|	ЕдиницыИзмерения.СодержитЕХО
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору");
	Запрос.УстановитьПараметр("Владелец",номен);
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору",единица);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(Результат) ТОгда
		Возврат Результат[0].СодержитЕХО;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#Если Клиент Тогда
      	
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "ЖурналОтгрузкиТовара" Тогда
		ТабДокумент = ПечатьЖурналОтгрузкиТовара();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	ИначеЕсли ИмяМакета = "ЗаданиеНаТранспортировку" Тогда
		ТабДокумент = ПечатьЗаданияНаТранспортировку();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	ИначеЕсли ИмяМакета = "ИнформационныйЛистКонверт" Тогда
		ТабДокумент = ПечатьИнформационныйЛистКонверт();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	ИначеЕсли ИмяМакета = "КомплектацияОбщая" Тогда	
		ТабДокумент = ПечатьКомплектацияОбщая();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	ИначеЕсли ИмяМакета = "КомплектацияЯчейка" Тогда	
		ТабДокумент = ПечатьКомплектацияЯчейка();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	ИначеЕсли ИмяМакета = "УпаковочныйЛист" Тогда
		ТабДокумент = ПечатьУпаковочныйЛист();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	КонецЕсли;
	
КонецПроцедуры // Печать()

Процедура ПечатьПакета() Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ТабДокумент = ПечатьЖурналОтгрузкиТовара();
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Истина, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	
	ТабДокумент = ПечатьЗаданияНаТранспортировку();
	Если ЗаполненноеЗаданиеНаТранспортировку Тогда
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Истина, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	КонецЕсли;
	
	ТабДокумент = ПечатьКомплектацияЯчейка();
	Если ЗаполненноеКомплектацияЯчейка ТОгда
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Истина, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	КонецЕсли;
	
	ТабДокумент = ПечатьИнформационныйЛистКонверт();
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Истина, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	
КонецПроцедуры // Печать()

Функция ПечатьУпаковочныйЛист()
	
	ДокОснование = Отгрузка[0].ДокументОснование;
	Шапка = Новый Структура;
	Шапка.Вставить("Год", Год(ДокОснование.Дата));
	Шапка.Вставить("Дата", ДокОснование.Дата);
    Шапка.Вставить("НомерИнвойса","");
	Шапка.Вставить("Организация", ДокОснование.Организация);
    Шапка.Вставить("Контрагент", ДокОснование.Контрагент);
    Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РезервированиеТоваров") Тогда
        
    иначе
        
    КонецЕсли; 
   
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Шапка.Вставить("ЗаказПокупателяEDI", ДокОснование.НомерПокупателя);
         Шапка.Вставить("ТорговаяТочка", ДокОснование.кпкТорговаяТочка.Наименование + Символы.ПС + ДокОснование.кпкТорговаяТочка.Адрес);
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РезервированиеТоваров")  Тогда 
		Шапка.Вставить("ЗаказПокупателяEDI", ДокОснование.Заказ.НомерПокупателя);
         Шапка.Вставить("ТорговаяТочка", ДокОснование.Заказ.кпкТорговаяТочка.Наименование + Символы.ПС + ДокОснование.Заказ.кпкТорговаяТочка.Адрес);
	КонецЕсли; 
	
	Шапка.Вставить("ВнутреннийНомер", ДокОснование.Номер);
	
	ЗапросТов = Новый Запрос;
	ЗапросТов.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.ТорговаяМарка);
	ЗапросТов.УстановитьПараметр("УИД",Строка(Ссылка.УникальныйИдентификатор()));
	ЗапросТов.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросТов.Текст = "ВЫБРАТЬ
                      | ЗаданиеНаРаботуЗадание.КодНоменклатуры КАК КодНоменклатуры,
                      | ЗаданиеНаРаботуЗадание.УпаковочныйЛист,
                      | ЗаданиеНаРаботуЗадание.ЯчейкаПлан
                      |ПОМЕСТИТЬ Задания
                      |ИЗ
                      | Документ.ЗаданиеНаРаботу.Задание КАК ЗаданиеНаРаботуЗадание
                      |ГДЕ
                      | ЗаданиеНаРаботуЗадание.Ссылка.УИД = &УИД
                      | И ЗаданиеНаРаботуЗадание.Ссылка.ВидЗадания = ""Проверка""
                      |
                      |ИНДЕКСИРОВАТЬ ПО
                      | КодНоменклатуры
                      |;
                      |
                      |////////////////////////////////////////////////////////////////////////////////
                      |ВЫБРАТЬ
                      | ОтборИОтгрузкаОтгрузка.Номенклатура КАК Номенклатура,
                      | ОтборИОтгрузкаОтгрузка.Номенклатура.Родитель КАК Родитель,
                      | ОтборИОтгрузкаОтгрузка.Коэффициент,
                      | ЗначенияСвойствОбъектов.Значение КАК ТорговаяМарка,
                      | Штрихкоды.Штрихкод,
                      | НоменклатураАртикулыКонтрагентов.Артикул,
                      | Задания.УпаковочныйЛист КАК УпаковочныйЛист,
                      | ОтборИОтгрузкаОтбор.Количество КАК Количество,
                      | ОтборИОтгрузкаОтбор.Количество * ОтборИОтгрузкаОтгрузка.Коэффициент КАК НЕТТО,
                      | ОтборИОтгрузкаОтгрузка.ДокументОснование.НомерПокупателя КАК ЗаказПокупателяEDI
                      |ИЗ
                      | РегистрСведений.Штрихкоды КАК Штрихкоды
                      |     ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборИОтгрузка.Отгрузка КАК ОтборИОтгрузкаОтгрузка
                      |         ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
                      |         ПО ОтборИОтгрузкаОтгрузка.Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
                      |         ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.АртикулыКонтрагентов КАК НоменклатураАртикулыКонтрагентов
                      |         ПО (НоменклатураАртикулыКонтрагентов.Ссылка = ОтборИОтгрузкаОтгрузка.Номенклатура)
                      |             И (НоменклатураАртикулыКонтрагентов.Контрагент = ОтборИОтгрузкаОтгрузка.Ссылка.Получатель)
                      |         ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборИОтгрузка.Отбор КАК ОтборИОтгрузкаОтбор
                      |             ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задания КАК Задания
                      |             ПО ОтборИОтгрузкаОтбор.ЯчейкаПлан.Наименование = Задания.ЯчейкаПлан
                      |                 И ОтборИОтгрузкаОтбор.Номенклатура.Код = Задания.КодНоменклатуры
                      |         ПО ОтборИОтгрузкаОтгрузка.Ссылка = ОтборИОтгрузкаОтбор.Ссылка
                      |             И ОтборИОтгрузкаОтгрузка.Номенклатура = ОтборИОтгрузкаОтбор.Номенклатура
                      |     ПО Штрихкоды.Владелец = ОтборИОтгрузкаОтгрузка.Номенклатура
                      |ГДЕ
                      | ЗначенияСвойствОбъектов.Свойство = &Свойство
                      | И ОтборИОтгрузкаОтгрузка.Ссылка = &ТекущийДокумент
                      | И Штрихкоды.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код = ""796""
                      |
                      |УПОРЯДОЧИТЬ ПО
                      | УпаковочныйЛист,
                      | Номенклатура
                      |ИТОГИ ПО
                      | УпаковочныйЛист";
	ЗапросТовары = ЗапросТов.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	РазобратьСложныйУЛ(ЗапросТовары);
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПолучитьМакет("УпаковочныйЛист");
    СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата,,,);
     
	Для каждого Строка0 Из ЗапросТовары.Строки Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НомерУпаковочногоЛиста = Строка0.УпаковочныйЛист + " от " + Формат(Шапка.Дата,"ДЛФ=Д");
		ОбластьМакета.Параметры.Организация = СтрЗаменить(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,ЮридическийАдрес,",,),"юр. адрес: ","");
		ОбластьМакета.Параметры.Контрагент = СтрЗаменить(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,ЮридическийАдрес,",,),"юр. адрес: ","");
		
		ТабДокумент.Вывести(ОбластьМакета);  
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета); 
	    КоличествоМест = 0;
		КоличествоПоддонов = 0;
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ном = 0;
		ВсегоМест = 0;
		ВсегоПоддонов = 0;
		ИтогНетто = 0;
		Для каждого Строка1 Из Строка0.Строки Цикл
			ном = ном + 1;
			ОбластьСтрокаТаблицы.Параметры.Номер = ном;
			ОбластьСтрокаТаблицы.Параметры.Заполнить(Строка1);
			КоличествоИЕУ = ПолучитьИЕУ(Строка1.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Коробка);
			Если КоличествоИЕУ <> 0 Тогда
				ОбластьСтрокаТаблицы.Параметры.УпаковкаТовара = ?(КоличествоИЕУ=1,"банка","коробка ("+ КоличествоИЕУ + " шт)");
				КоличествоМест = ?(Строка1.Количество = 0, 0, Формат(Строка1.Количество/КоличествоИЕУ, "ЧДЦ=2"));
				ОбластьСтрокаТаблицы.Параметры.Мест = КоличествоМест;
			КонецЕсли;
			ОбластьСтрокаТаблицы.Параметры.Артикул = СокрЛП(Строка1.Артикул);
			ОбластьСтрокаТаблицы.Параметры.ТорговаяМарка = Строка1.ТорговаяМарка;
			КоличествоИЕУ_ = ПолучитьИЕУ(Строка1.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Паллета);
			КоличествоПоддонов = ?(КоличествоИЕУ_=0,0,Строка1.Количество/КоличествоИЕУ_);
			КоличествоПоддонов=Окр(КоличествоПоддонов,2);
			ВсегоМест = ВсегоМест + Число(КоличествоМест);
			ВсегоПоддонов = ВсегоПоддонов + КоличествоПоддонов;
			ИтогНетто = ИтогНетто + Строка1.Нетто;
			ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЦикла;
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогиДокумента");
		ОбластьМакета.Параметры.ИтогоМест = ВсегоМест;
		ОбластьМакета.Параметры.ИтогоНетто = ИтогНетто;
		ОбластьМакета.Параметры.ИтогоПоддонов = ВсегоПоддонов;
		ТабДокумент.Вывести(ОбластьМакета);                                            
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(ОбластьМакета); 
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла; 
	Возврат ТабДокумент;
КонецФункции // ПечатьУпаковочныйЛист()

Процедура РазобратьСложныйУЛ(ЗапросТовары)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("УпаковочныйЛист");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЗаказПокупателяEDI");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Коэффициент");
	ТЗ.Колонки.Добавить("НЕТТО");
	ТЗ.Колонки.Добавить("Номенклатура");
	ТЗ.Колонки.Добавить("ТорговаяМарка");
	ТЗ.Колонки.Добавить("Штрихкод");
	ТЗ.Колонки.Добавить("Использован");
	Для каждого Строка0 Из ЗапросТовары.Строки Цикл
		Для каждого Строка1 Из Строка0.Строки Цикл
			Позиция = Найти(Строка1.УпаковочныйЛист,"[");
			СтрПоиска = Строка1.УпаковочныйЛист;
			Пока Позиция <> 0 Цикл
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.УпаковочныйЛист = Лев(СтрПоиска, Позиция-1);
				СтрПоиска = Прав(СтрПоиска, СтрДлина(СтрПоиска)-Позиция);
				Позиция = Найти(СтрПоиска, "]");
				Количество = Число(Лев(СтрПоиска, Позиция-1));
				СтрПоиска = Прав(СтрПоиска, СтрДлина(СтрПоиска)-Позиция-1);
				СтрокаТЗ.Артикул = Строка1.Артикул;
				СтрокаТЗ.ЗаказПокупателяEDI = Строка1.ЗаказПокупателяEDI;
				СтрокаТЗ.Количество = Количество;
				СтрокаТЗ.Коэффициент = Строка1.Коэффициент;
				СтрокаТЗ.НЕТТО = Строка1.Коэффициент * Количество;
				СтрокаТЗ.Номенклатура = Строка1.Номенклатура;
				СтрокаТЗ.ТорговаяМарка = Строка1.ТорговаяМарка;
				СтрокаТЗ.Штрихкод = Строка1.Штрихкод;				
				Позиция = Найти(СтрПоиска,"[");
			КонецЦикла;
			Если Найти(Строка1.УпаковочныйЛист,"[") <> 0 Тогда
				Строка0.Строки.Удалить(Строка1);
			КонецЕсли; 
		КонецЦикла;
		Если Найти(Строка0.УпаковочныйЛист,"[") <> 0 Тогда
			ЗапросТовары.Строки.Удалить(Строка0);
		КонецЕсли;
	КонецЦикла; 
	Для каждого Строка0 Из ЗапросТовары.Строки Цикл
		НайденнаяСтрока = ТЗ.Найти(Строка0.УпаковочныйЛист,"УпаковочныйЛист");
		Если НайденнаяСтрока <> Неопределено Тогда
			Строка1 = Строка0.Строки.Добавить();
			Строка1.УпаковочныйЛист = Строка0.УпаковочныйЛист;
			Строка1.Артикул = НайденнаяСтрока.Артикул;
			Строка1.ЗаказПокупателяEDI = НайденнаяСтрока.ЗаказПокупателяEDI;
			Строка1.Количество = НайденнаяСтрока.Количество;
			Строка1.Коэффициент = НайденнаяСтрока.Коэффициент;
			Строка1.НЕТТО = НайденнаяСтрока.НЕТТО;
			Строка1.Номенклатура = НайденнаяСтрока.Номенклатура;
			Строка1.ТорговаяМарка = НайденнаяСтрока.ТорговаяМарка;
			Строка1.Штрихкод = НайденнаяСтрока.Штрихкод;
			НайденнаяСтрока.Использован = 1;
		КонецЕсли; 		
	КонецЦикла;
	Для каждого Строка Из ТЗ Цикл
		Если Строка.Использован <> 1 Тогда
			Строка0=ЗапросТовары.Строки.Добавить();		
			Строка0.УпаковочныйЛист = Строка.УпаковочныйЛист;
			Строка1 = Строка0.Строки.Добавить();
			Строка1.Артикул = Строка.Артикул;
			Строка1.ЗаказПокупателяEDI = Строка.ЗаказПокупателяEDI;
			Строка1.Количество = Строка.Количество;
			Строка1.Коэффициент = Строка.Коэффициент;
			Строка1.НЕТТО = Строка.НЕТТО;
			Строка1.Номенклатура = Строка.Номенклатура;
			Строка1.ТорговаяМарка = Строка.ТорговаяМарка;
			Строка1.Штрихкод = Строка.Штрихкод;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры
 

#КонецЕсли 

Функция ПолучитьПризнакПополнения(номен) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПеремещениеПоСкладуПеремещение.КоличествоФактическиПеремещенное
	|ИЗ
	|	Документ.ПеремещениеПоСкладу.Перемещение КАК ПеремещениеПоСкладуПеремещение
	|ГДЕ
	|	ПеремещениеПоСкладуПеремещение.Номенклатура = &Номенклатура
	|	И ПеремещениеПоСкладуПеремещение.Ссылка.ДокументОтгрузки = &Ссылка
	|	И ПеремещениеПоСкладуПеремещение.Ссылка.Проведен = ИСТИНА
	|	И ПеремещениеПоСкладуПеремещение.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ПеремещениеПоСкладуПеремещение.КоличествоФактическиПеремещенное > 0");
	
	Запрос.УстановитьПараметр("Номенклатура",номен);
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(Результат) ТОгда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКоличествоПеремещения(номен, ячейка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПеремещениеПоСкладуПеремещение.РазмещаемаяЕдиница.СодержитЕХО = 0
	|			ТОГДА ПеремещениеПоСкладуПеремещение.РазмещаемоеКоличество
	|		ИНАЧЕ ПеремещениеПоСкладуПеремещение.РазмещаемоеКоличество * ПеремещениеПоСкладуПеремещение.РазмещаемаяЕдиница.СодержитЕХО
	|	КОНЕЦ КАК Поле1,
	|	ПеремещениеПоСкладуПеремещение.Ссылка
	|ИЗ
	|	Документ.ПеремещениеПоСкладу.Перемещение КАК ПеремещениеПоСкладуПеремещение
	|ГДЕ
	|	ПеремещениеПоСкладуПеремещение.Номенклатура = &Номенклатура
	|	И ПеремещениеПоСкладуПеремещение.Ссылка.ДокументОтгрузки = &Ссылка
	|	И ПеремещениеПоСкладуПеремещение.ЯчейкаПланОткуда = &ЯчейкаПланОткуда");
	
	Запрос.УстановитьПараметр("Номенклатура",номен);
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ЯчейкаПланОткуда",ячейка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	СтруктураВозврата = Новый Структура("Количество, Ссылка");
	Если ЗначениеЗаполнено(Результат) ТОгда
		СтруктураВозврата.Вставить("Количество", Результат[0].Количество);
		СтруктураВозврата.Вставить("Ссылка", Ссылка);
	Иначе
		СтруктураВозврата.Вставить("Количество", 0);
		СтруктураВозврата.Вставить("Ссылка", Документы.ПеремещениеПоСкладу.ПустаяСсылка());
	КонецЕсли;	
	
	//Если ЗначениеЗаполнено(Результат) ТОгда
	//	 Возврат Результат[0].Количество;
	//Иначе
	Возврат СтруктураВозврата;
	//КонецЕсли;
	
КонецФункции

Функция ПолучитьКоличествоЕХО(Номен,Ячейка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток,
	|	РазмещениеТоваровНаСкладахОстатки.Номенклатура
	|ИЗ
	|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
	|			&ДатаКон,
	|			Номенклатура = &Номенклатура
	|				И Склад = &Склад
	|				И Ячейка = &Ячейка) КАК РазмещениеТоваровНаСкладахОстатки
	|ГДЕ
	|	РазмещениеТоваровНаСкладахОстатки.Статус <> &Статус
	|	И РазмещениеТоваровНаСкладахОстатки.Статус <> &СтатусПустой");
	
	//Коновалова 28012013 +					  
	МоментДокумента = Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаКон", МоментДокумента);
	//Запрос.УстановитьПараметр("ДатаКон",Дата);
	//Коновалова 28012013 -
	
	Запрос.УстановитьПараметр("Номенклатура",Номен);					  
	Запрос.УстановитьПараметр("Склад",Склад);					  
	Запрос.УстановитьПараметр("Ячейка",Ячейка);
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыРазмещенийВЯчейках.ВыполнениеРазмещения);
	Запрос.УстановитьПараметр("СтатусПустой",Перечисления.СтатусыРазмещенийВЯчейках.ПустаяСсылка());
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(Результат) ТОгда
		Результат.Свернуть("Номенклатура","КоличествоЕХООстаток");
		Возврат Результат[0].КоличествоЕХООстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если РольДоступна("ЗаведующийСкладом") Тогда
	
		Иначе
	ДокументИзменен = Модифицированность();
	ЭтоПерепроведение = (Проведен = Истина И РежимЗаписи = РежимЗаписиДокумента.Проведение);
	
	Если Статус <> Перечисления.СтатусыСкладскихОтгрузок.Выполнение
		И НЕ ЭтоУстановкаСтатуса
		И НЕ УправлениеСкладскойЛогистикой.ДоступноПоРолям("ИзменениеЗавершенныхДокументов") Тогда
		
		Отказ = Истина;
		Сообщить("Запрещено изменение завершенных документов по логистике", СтатусСообщения.Важное);
	КонецЕсли;
	
	Если НЕ Отказ И Дата < Дата(2013, 03, 25) И НЕ РольДоступна("АдминистраторЛогистики") Тогда
		Отказ = Истина;
		Сообщить("Запрещено изменение документов по логистике оформленных до 25.03.2013", СтатусСообщения.Важное);
	КонецЕсли;
	
	Если НЕ Отказ
		И НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И Статус = Перечисления.СтатусыСкладскихОтгрузок.Отгружено Тогда
		
		ДокПеремещение = УправлениеСкладскойЛогистикой.ПолучитьДокументПеремещения(Ссылка);
		
		Если НЕ (ДокПеремещение = Неопределено ИЛИ ДокПеремещение = Документы.ПеремещениеПоСкладу.ПустаяСсылка())
			И ДокПеремещение.Статус = Перечисления.СтатусыСкладскихПеремещений.Выполнение  Тогда
			
			ТекстВопроса = "Сначала требуется завершить документ """ + ДокПеремещение + """" + Символы.ПС + "Завершить?";
			#Если Клиент Тогда 
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
				Попытка
					обДокументПеремещения = ДокПеремещение.ПолучитьОбъект();
					обДокументПеремещения.ЭтоУстановкаСтатуса = Истина;
					обДокументПеремещения.Статус = Перечисления.СтатусыСкладскихПеремещений.Завершено;
					обДокументПеремещения.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Отказ = Истина;
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Отказ = Истина;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ЗапросВТ = Новый Запрос;
		ЗапросВТ.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ЗапросВТ.Текст = 
		"ВЫБРАТЬ
		|	Отгрузка.НомерСтроки,
		|	Отгрузка.Номенклатура,
		|	Отгрузка.ЕдиницаХраненияОстатков КАК ЕХО,
		|	Отгрузка.КоличествоФактическиОтгруженное КАК ОбщееКоличествоЕХО,
		|	Отгрузка.КоличествоПаллет,
		|	Отгрузка.КоличествоКоробок,
		|	Отгрузка.КоличествоЕХО,
		|	Отгрузка.ДокументОснование
		|ПОМЕСТИТЬ ТаблицаОтгрузка
		|ИЗ
		|	&ТабОтгрузка КАК Отгрузка";
		
		ЗапросВТ.УстановитьПараметр("ТабОтгрузка", Отгрузка.Выгрузить());
		ЗапросВТ.Выполнить();
		
		ЗапросЗаказы = Новый Запрос;
		ЗапросЗаказы.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОтгрузка.ДокументОснование КАК Заказ
		|ИЗ
		|	ТаблицаОтгрузка КАК ТаблицаОтгрузка
		|ГДЕ
		|	ТаблицаОтгрузка.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтгрузка.ДокументОснование";
		
		ЗапросЗаказы.МенеджерВременныхТаблиц = ЗапросВТ.МенеджерВременныхТаблиц;
		
		тзТекущиеЗаказы = ЗапросЗаказы.Выполнить().Выгрузить();
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			//Устанавливаем флаги
			Для каждого стрТЗ Из тзТекущиеЗаказы Цикл
				Заказ = стрТЗ.Заказ;
				Если НЕ Заказ.ОформленОтбор Тогда
					обЗаказ = Заказ.ПолучитьОбъект();
					обЗаказ.ОформленОтбор = Истина;
					
					Попытка
						обЗаказ.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						Сообщить("Не удалось изменить флаг в документе """ + Заказ + """, описание ошибки: " + ОписаниеОшибки(), СтатусСообщения.Важное);
						Отказ = Истина;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ЭтоНовый() И тзОтгрузкаСохр <> Неопределено Тогда //Выполняется из формы документа
				//Убираем флаги
				ЗапросВТ.Текст = 
				"ВЫБРАТЬ
				|	Отгрузка.ДокументОснование
				|ПОМЕСТИТЬ ТаблицаОтгрузкаСтарая
				|ИЗ
				|	&ТабОтгрузка КАК Отгрузка";
				
				ЗапросВТ.УстановитьПараметр("ТабОтгрузка", тзОтгрузкаСохр);
				ЗапросВТ.Выполнить();
				
				ЗапросЗаказы.Текст = 
				"ВЫБРАТЬ
				|	ТаблицаОтгрузка.ДокументОснование КАК Заказ
				|ПОМЕСТИТЬ ТаблицаЗаказы
				|ИЗ
				|	ТаблицаОтгрузка КАК ТаблицаОтгрузка
				|ГДЕ
				|	ТаблицаОтгрузка.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаОтгрузка.ДокументОснование
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаОтгрузкаСтарая.ДокументОснование КАК Заказ
				|ПОМЕСТИТЬ ТаблицаЗаказыСтарая
				|ИЗ
				|	ТаблицаОтгрузкаСтарая КАК ТаблицаОтгрузкаСтарая
				|ГДЕ
				|	ТаблицаОтгрузкаСтарая.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаОтгрузкаСтарая.ДокументОснование
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаЗаказыСтарая.Заказ
				|ИЗ
				|	ТаблицаЗаказыСтарая КАК ТаблицаЗаказыСтарая
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтборИОтгрузка.Отгрузка КАК ОтборИОтгрузкаОтгрузка
				|		ПО ТаблицаЗаказыСтарая.Заказ = ОтборИОтгрузкаОтгрузка.ДокументОснование
				|			И (ОтборИОтгрузкаОтгрузка.Ссылка.Проведен)
				|			И (ОтборИОтгрузкаОтгрузка.Ссылка <> &ЭтотДокумент)
				|ГДЕ
				|	НЕ 1 В
				|				(ВЫБРАТЬ
				|					1 КАК Поле1
				|				ИЗ
				|					ТаблицаЗаказы КАК ТаблицаЗаказы
				|				ГДЕ
				|					ТаблицаЗаказы.Заказ = ТаблицаЗаказыСтарая.Заказ)
				|	И ОтборИОтгрузкаОтгрузка.Ссылка ЕСТЬ NULL ";
				
				
				ЗапросЗаказы.УстановитьПараметр("ЭтотДокумент", Ссылка);
				тзРезультат = ЗапросЗаказы.Выполнить().Выгрузить();
				
				Для каждого стрТЗ Из тзРезультат Цикл
					Заказ = стрТЗ.Заказ;
					Если Заказ.ОформленОтбор Тогда
						обЗаказ = Заказ.ПолучитьОбъект();
						обЗаказ.ОформленОтбор = Ложь;
						
						Попытка
							обЗаказ.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							Сообщить("Не удалось изменить флаг в документе """ + Заказ + """, описание ошибки: " + ОписаниеОшибки(), СтатусСообщения.Важное);
							Отказ = Истина;
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			тзОтгрузкаСохр = Отгрузка.Выгрузить();
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Проведен Тогда
			//Убираем флаги
			Если тзОтгрузкаСохр = Неопределено Тогда //Выполняется не из формы документа
				ЗапросЗаказы.Текст = 
				"ВЫБРАТЬ
				|	ТаблицаОтгрузка.ДокументОснование КАК Заказ
				|ПОМЕСТИТЬ ТаблицаЗаказы
				|ИЗ
				|	ТаблицаОтгрузка КАК ТаблицаОтгрузка
				|ГДЕ
				|	ТаблицаОтгрузка.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаОтгрузка.ДокументОснование
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаЗаказы.Заказ
				|ИЗ
				|	ТаблицаЗаказы КАК ТаблицаЗаказы
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтборИОтгрузка.Отгрузка КАК ОтборИОтгрузкаОтгрузка
				|		ПО ТаблицаЗаказы.Заказ = ОтборИОтгрузкаОтгрузка.ДокументОснование
				|			И (ОтборИОтгрузкаОтгрузка.Ссылка <> &ЭтотДокумент)
				|			И (ОтборИОтгрузкаОтгрузка.Ссылка.Проведен)
				|ГДЕ
				|	ОтборИОтгрузкаОтгрузка.Ссылка ЕСТЬ NULL ";
				
				
				ЗапросЗаказы.УстановитьПараметр("ЭтотДокумент", Ссылка);
				тзРезультат = ЗапросЗаказы.Выполнить().Выгрузить();
				
				Для каждого стрТЗ Из тзРезультат Цикл
					Заказ = стрТЗ.Заказ;
					Если Заказ.ОформленОтбор Тогда
						обЗаказ = Заказ.ПолучитьОбъект();
						обЗаказ.ОформленОтбор = Ложь;
						
						Попытка
							обЗаказ.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							Сообщить("Не удалось изменить флаг в документе """ + Заказ + """, описание ошибки: " + ОписаниеОшибки(), СтатусСообщения.Важное);
							Отказ = Истина;
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЗапросВТ.Текст = 
				"ВЫБРАТЬ
				|	Отгрузка.НомерСтроки,
				|	Отгрузка.Номенклатура,
				|	Отгрузка.ЕдиницаХраненияОстатков КАК ЕХО,
				|	Отгрузка.КоличествоФактическиОтгруженное КАК ОбщееКоличествоЕХО,
				|	Отгрузка.КоличествоПаллет,
				|	Отгрузка.КоличествоКоробок,
				|	Отгрузка.КоличествоЕХО,
				|	Отгрузка.ДокументОснование
				|ПОМЕСТИТЬ ТаблицаОтгрузкаСтарая
				|ИЗ
				|	&ТабОтгрузка КАК Отгрузка";
				
				ЗапросВТ.УстановитьПараметр("ТабОтгрузка", тзОтгрузкаСохр);
				ЗапросВТ.Выполнить();
				
				ЗапросЗаказы.Текст = 
				"ВЫБРАТЬ
				|	ТаблицаОтгрузка.ДокументОснование КАК Заказ
				|ПОМЕСТИТЬ ТаблицаЗаказы
				|ИЗ
				|	ТаблицаОтгрузкаСтарая КАК ТаблицаОтгрузка
				|ГДЕ
				|	ТаблицаОтгрузка.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаОтгрузка.ДокументОснование
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаЗаказы.Заказ
				|ИЗ
				|	ТаблицаЗаказы КАК ТаблицаЗаказы
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтборИОтгрузка.Отгрузка КАК ОтборИОтгрузкаОтгрузка
				|		ПО ТаблицаЗаказы.Заказ = ОтборИОтгрузкаОтгрузка.ДокументОснование
				|			И (ОтборИОтгрузкаОтгрузка.Ссылка <> &ЭтотДокумент)
				|			И (ОтборИОтгрузкаОтгрузка.Ссылка.Проведен)
				|ГДЕ
				|	ОтборИОтгрузкаОтгрузка.Ссылка ЕСТЬ NULL ";
				
				
				ЗапросЗаказы.УстановитьПараметр("ЭтотДокумент", Ссылка);
				тзРезультат = ЗапросЗаказы.Выполнить().Выгрузить();
				
				Для каждого стрТЗ Из тзРезультат Цикл
					Заказ = стрТЗ.Заказ;
					Если Заказ.ОформленОтбор Тогда
						обЗаказ = Заказ.ПолучитьОбъект();
						обЗаказ.ОформленОтбор = Ложь;
						
						Попытка
							обЗаказ.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							Сообщить("Не удалось изменить флаг в документе """ + Заказ + """, описание ошибки: " + ОписаниеОшибки(), СтатусСообщения.Важное);
							Отказ = Истина;
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			тзОтгрузкаСохр = Отгрузка.Выгрузить();
		КонецЕсли;
	КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

//Кабаченко_Смартис
//09_12_2015
Функция ВыделитьСлово(ИсходнаяСтрока)   Экспорт
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, "-");
	
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела-1));
	//   ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

Процедура ПриЗаписи(Отказ)

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РезервированиеТоваров") Тогда         
		Если ПроверкаДокументаОснования(ДанныеЗаполнения.Ссылка) Тогда
			Возврат;	
		КонецЕсли; 
        ВидОтгрузки = Перечисления.ВидыСкладскихОтгрузок.Внешняя;
        Статус = Перечисления.СтатусыСкладскихОтгрузок.Выполнение;
		ПлановаяДатаОтгрузки = ДанныеЗаполнения.Заказ.ДатаОтгрузки;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Получатель = ДанныеЗаполнения.Контрагент;
		ТорговаяТочка = ДанныеЗаполнения.Заказ.кпкТорговаяТочка;
		Организация = ДанныеЗаполнения.Организация;
		Ответственный = ДанныеЗаполнения.Ответственный;
		Склад = ДанныеЗаполнения.Заказ.СкладГруппа;
        ЯчейкаОтгрузки = 1;
		Погрузчик = Справочники.ТранспортныеСредства.НайтиПоНаименованию("Ричтрак");
        ЗаполнениеТабличнойЧастиНаОсновании(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВнутреннийЗаказ") 
		И ДанныеЗаполнения.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда 
		ВидОтгрузки = Перечисления.ВидыСкладскихОтгрузок.Внутренняя;
        Статус = Перечисления.СтатусыСкладскихОтгрузок.Выполнение;
		ПлановаяДатаОтгрузки = ДанныеЗаполнения.ДатаОтгрузки;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Получатель = ДанныеЗаполнения.Заказчик;
		Организация = ДанныеЗаполнения.Организация;
		Ответственный = ДанныеЗаполнения.Ответственный;
		Если ДанныеЗаполнения.Товары.Количество() > 0 Тогда
			Склад = ДанныеЗаполнения.Товары [0].Размещение;	
		КонецЕсли; 
		Погрузчик = Справочники.ТранспортныеСредства.НайтиПоНаименованию("Ричтрак");
        ЯчейкаОтгрузки = 1;
		ЗаполнениеТабличнойЧастиНаОсновании(ДанныеЗаполнения);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнениеТабличнойЧастиНаОсновании(Знач ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыВРезервеНаСкладах.Номенклатура,
	|	ТоварыВРезервеНаСкладах.Количество,
	|	ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ТоварыВРезервеНаСкладах.ДокументРезерва
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах КАК ТоварыВРезервеНаСкладах
	|ГДЕ
	|	ТоварыВРезервеНаСкладах.Регистратор = &ДокументРезерва"; 
	Запрос.УстановитьПараметр("ДокументРезерва", ДанныеЗаполнения.Ссылка);
	ДанныеРезерва = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрокаТовары Из ДанныеРезерва Цикл
		НоваяСтрока = Отгрузка.Добавить();
		НоваяСтрока.ЕдиницаХраненияОстатков = ТекСтрокаТовары.ЕдиницаИзмерения;
		НоваяСтрока.КоличествоКОтгрузке = ТекСтрокаТовары.Количество;
		НоваяСтрока.КоличествоФактическиОтгруженное = ТекСтрокаТовары.Количество;
		НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
		НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
		НоваяСтрока.ДокументОснование = ДанныеЗаполнения.Ссылка;
	КонецЦикла;

КонецПроцедуры


Функция ПроверкаДокументаОснования(Ссылка)
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ОтборИОтгрузкаОтгрузка.Ссылка
	                    |ИЗ
	                    |	Документ.ОтборИОтгрузка.Отгрузка КАК ОтборИОтгрузкаОтгрузка
	                    |ГДЕ
	                    |	ОтборИОтгрузкаОтгрузка.ДокументОснование = &ДокументОснование
	                    |	И ОтборИОтгрузкаОтгрузка.Ссылка.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Сообщить("Данный документ участвует в отборе " + Выборка.Ссылка);
		Возврат Истина;
	КонецЕсли; 
	Возврат Ложь;
КонецФункции
  

НомераКомплектаций = Новый СписокЗначений();
НомераПополнений = Новый СписокЗначений();
ПредварительноеПроведение = Ложь;
ЭтоУстановкаСтатуса = Ложь;