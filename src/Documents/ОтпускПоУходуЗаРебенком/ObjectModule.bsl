Перем СоответствиеНеСуммовыхСпособовРасчета;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет заполнение таблицы плановых начислений 
Процедура ЗаполнитьПлановыйНачисления(РазмерПособияПоУходуДо3Лет) Экспорт
	
	ОсновныеНачисления.Очистить();
	
	// Пособие по уходу до 3 лет
	
	// Отпуск по уходу без оплаты
	Начисление = ОсновныеНачисления.Добавить();	
	Начисление.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты;
	Начисление.Действие = Перечисления.ВидыДействияСНачислением.Начать;
	Начисление.Показатель1 = 1;
	
	// Индексация пособия по уходу за ребёнком
	
	// Прекратим действующие до даты документа начисления работника
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности", ?(НЕ ЗначениеЗаполнено(ДатаНачала),Дата,ДатаНачала));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СрезПлановыхНачислений.ВидРасчета,
	|	СрезПлановыхНачислений.Показатель1,
	|	СрезПлановыхНачислений.Валюта1,
	|	СрезПлановыхНачислений.ТарифныйРазряд1,
	|	СрезПлановыхНачислений.Показатель2,
	|	СрезПлановыхНачислений.Валюта2,
	|	СрезПлановыхНачислений.ТарифныйРазряд2,
	|	СрезПлановыхНачислений.Показатель3,
	|	СрезПлановыхНачислений.Валюта3,
	|	СрезПлановыхНачислений.ТарифныйРазряд3,
	|	СрезПлановыхНачислений.Показатель4,
	|	СрезПлановыхНачислений.Валюта4,
	|	СрезПлановыхНачислений.ТарифныйРазряд4,
	|	СрезПлановыхНачислений.Показатель5,
	|	СрезПлановыхНачислений.Валюта5,
	|	СрезПлановыхНачислений.ТарифныйРазряд5,
	|	СрезПлановыхНачислений.Показатель6,
	|	СрезПлановыхНачислений.Валюта6,
	|	СрезПлановыхНачислений.ТарифныйРазряд6
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			Сотрудник = &Сотрудник
	|				И Активность) КАК СрезПлановыхНачислений
	|ГДЕ
	|	СрезПлановыхНачислений.ВидРасчета <> НЕОПРЕДЕЛЕНО
	|	И СрезПлановыхНачислений.Актуальность";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Начисление = ОсновныеНачисления.Добавить();	
		ЗаполнитьЗначенияСвойств(Начисление,Выборка);
		Начисление.Действие = Перечисления.ВидыДействияСНачислением.Прекратить;
	КонецЦикла;  
	
КонецПроцедуры

// Выполняет заполнение таблицы плановых удержаний 
Процедура ЗаполнитьПлановыйУдержания() Экспорт
	
	ПлановыеУдержания.Очистить();
	
	// Прекратим действующие до даты документа удержания работника
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ?(НЕ ЗначениеЗаполнено(ДатаНачала),Дата,ДатаНачала));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СрезПлановыхУдержаний.ВидРасчета,
	               |	СрезПлановыхУдержаний.Показатель1,
	               |	СрезПлановыхУдержаний.Валюта1,
				   |	СрезПлановыхУдержаний.Показатель2,
				   |	СрезПлановыхУдержаний.Валюта2,
				   |	СрезПлановыхУдержаний.Показатель3,
				   |	СрезПлановыхУдержаний.Валюта3,
				   |	СрезПлановыхУдержаний.Показатель4,
				   |	СрезПлановыхУдержаний.Валюта4,
				   |	СрезПлановыхУдержаний.Показатель5,
				   |	СрезПлановыхУдержаний.Валюта5,
				   |	СрезПлановыхУдержаний.Показатель6,
				   |	СрезПлановыхУдержаний.Валюта6,				   
	               |	СрезПлановыхУдержаний.ДокументОснование,
	               |	СрезПлановыхУдержаний.СпособОтраженияВБухучете,
	               |	&Действие КАК Действие
	               |ИЗ
	               |	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник И Организация = &Организация И Активность) КАК СрезПлановыхУдержаний
	               |
	               |ГДЕ
	               |	(СрезПлановыхУдержаний.Показатель1 <> 0
				   |	ИЛИ СрезПлановыхУдержаний.Показатель2 <> 0
				   |	ИЛИ СрезПлановыхУдержаний.Показатель3 <> 0
				   |	ИЛИ СрезПлановыхУдержаний.Показатель4 <> 0
				   |	ИЛИ СрезПлановыхУдержаний.Показатель5 <> 0
				   |	ИЛИ СрезПлановыхУдержаний.Показатель6 <> 0
				   |)";
	
	Запрос.УстановитьПараметр("Действие",Перечисления.ВидыДействияСНачислением.Прекратить);
	ПлановыеУдержания.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

// Выполняет заполнение таблицы плановых Взносов и ВзносовФОТ 
Процедура ЗаполнитьПлановыйВзносы() Экспорт
	
	Взносы.Очистить();
	ВзносыФОт.Очистить();
	
	
	// Прекратим действующие до даты документа удержания работника
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ?(НЕ ЗначениеЗаполнено(ДатаНачала),Дата,ДатаНачала));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзносыВФондыРаботниковОрганизацийСрезПоследних.Налог,
	               |	ВзносыВФондыРаботниковОрганизацийСрезПоследних.Налог.Родитель КАК НалогРодитель,
	               |	&Действие КАК Действие
	               |ИЗ
	               |	РегистрСведений.ВзносыВФондыРаботниковОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник И Организация = &Организация И Активность И Актуальность) КАК ВзносыВФондыРаботниковОрганизацийСрезПоследних
	               |
	               |ИТОГИ ПО
	               |	НалогРодитель";
				   
	Запрос.УстановитьПараметр("Действие",Перечисления.ВидыДействияСНачислением.Прекратить);
	ВыборкаПоРодителям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаПоРодителям.Следующий() Цикл
		Если ВыборкаПоРодителям.НалогРодитель = Справочники.Налоги.Взносы Тогда
			ТаблЧасть = Взносы
		ИначеЕсли ВыборкаПОРодителям.НалогРодитель = Справочники.Налоги.ВзносыФОТ Тогда
			ТаблЧасть = ВзносыФОТ
		Иначе
			Продолжить;
		КонецЕсли;
		Выборка = ВыборкаПоРодителям.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = ТаблЧасть.Добавить();
			СтрокаТЧ.Действие = Выборка.Действие;
			СтрокаТЧ.Налог = Выборка.Налог;
		КонецЦикла
	КонецЦикла		
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала" , ДатаНачала);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтпускПоУходуЗаРебенком.Дата,
				   |	ОтпускПоУходуЗаРебенком.ДатаНачала,
				   |	ОтпускПоУходуЗаРебенком.ДатаОкончания,
	               |	ОтпускПоУходуЗаРебенком.Организация,
	               |	ОтпускПоУходуЗаРебенком.Организация,
	               |	ОтпускПоУходуЗаРебенком.Ответственный,
	               |	ОтпускПоУходуЗаРебенком.Ссылка,
				   |	ОтпускПоУходуЗаРебенком.Сотрудник,
	               |	ОтпускПоУходуЗаРебенком.Сотрудник.ВидЗанятости КАК ВидЗанятости,
				   |	ОтпускПоУходуЗаРебенком.ОсвобождатьСтавку,
	               |	ОтпускПоУходуЗаРебенком.ДатаДействия,
				   |	Работники.ПодразделениеОрганизации,
				   |	Работники.Должность,
				   |	Работники.ЗанимаемыхСтавок,
				   |	ОтпускПоУходуЗаРебенком.ДатаДействия
	               |ИЗ
	               |	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
				   |    ЛЕВОЕ СОЕДИНЕНИЕ
				   |    РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачала) КАК Работники
				   |    ПО Работники.Сотрудник = ОтпускПоУходуЗаРебенком.Сотрудник
	               |
	               |ГДЕ
	               |	ОтпускПоУходуЗаРебенком.Ссылка = &ДокументСсылка";


	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ПлановыеНачисления" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоОсновнымНачислениям()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
 	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Начисления.НомерСтроки,
	               |	Начисления.Действие,
	               |	Начисления.ВидРасчета,
	               |	Начисления.Показатель1,
	               |	Начисления.Валюта1,
	               |	Начисления.ВидРасчета.ЗачетОтработанногоВремени КАК ОсновноеНачисление,
	               |	Начисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	               |	Начисления.Показатель2,
	               |	Начисления.Показатель3,
	               |	Начисления.Показатель4,
				   |	Начисления.Показатель5,
				   |	Начисления.Показатель6,
	               |	Начисления.Валюта2,
	               |	Начисления.Валюта3,
	               |	Начисления.Валюта4,
				   |	Начисления.Валюта5,
				   |	Начисления.Валюта6,
	               |	Начисления.ТарифныйРазряд1,
	               |	Начисления.ТарифныйРазряд2,
	               |	Начисления.ТарифныйРазряд3,
	               |	Начисления.ТарифныйРазряд4,
				   |	Начисления.ТарифныйРазряд5,
				   |	Начисления.ТарифныйРазряд6
	               |ИЗ
	               |	Документ.ОтпускПоУходуЗаРебенком.ОсновныеНачисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоПлановымНачислениям()

// Формирует запрос по таблице "ПлановыеУдержания" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоПлановымУдержаниям()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
 	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Удержания.НомерСтроки,
	               |	Удержания.Действие,
	               |	Удержания.ВидРасчета,
	               |	Удержания.Показатель1,
	               |	Удержания.Валюта1,
				   |	Удержания.Показатель2,
				   |	Удержания.Валюта2,
				   |	Удержания.Показатель3,
				   |	Удержания.Валюта3,
				   |	Удержания.Показатель4,
				   |	Удержания.Валюта4,
				   |	Удержания.Показатель5,
				   |	Удержания.Валюта5,
				   |	Удержания.Показатель6,
				   |	Удержания.Валюта6,
	               |	Удержания.ДокументОснование,
	               |	Удержания.СпособОтраженияВБухучете
	               |ИЗ
	               |	Документ.ОтпускПоУходуЗаРебенком.ПлановыеУдержания КАК Удержания
	               |
	               |ГДЕ
	               |	Удержания.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоПлановымУдержаниям()
   
// Формирует запрос по таблице "Взносы" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоВзносам()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
 	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ОтпускПоУходуЗаРебенкомВзносы.НомерСтроки,
	               |	ОтпускПоУходуЗаРебенкомВзносы.Действие,
	               |	ОтпускПоУходуЗаРебенкомВзносы.Налог
	               |ИЗ
	               |	Документ.ОтпускПоУходуЗаРебенком.Взносы КАК ОтпускПоУходуЗаРебенкомВзносы
	               |
	               |ГДЕ
	               |	ОтпускПоУходуЗаРебенкомВзносы.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоПлановымУдержаниям()
    
// Формирует запрос по таблице "ВзносыФОТ" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоВзносамФОТ()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
 	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ОтпускПоУходуЗаРебенкомВзносыФОТ.НомерСтроки,
	               |	ОтпускПоУходуЗаРебенкомВзносыФОТ.Действие,
	               |	ОтпускПоУходуЗаРебенкомВзносыФОТ.Налог
	               |ИЗ
	               |	Документ.ОтпускПоУходуЗаРебенком.ВзносыФОТ КАК ОтпускПоУходуЗаРебенкомВзносыФОТ
	               |
	               |ГДЕ
	               |	ОтпускПоУходуЗаРебенкомВзносыФОТ.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоПлановымУдержаниям()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ);
	КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран работник!", Отказ);
	КонецЕсли;

	// ВидЗанятости
	Если ВыборкаПоШапкеДокумента.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть оформлен на внутреннего совместителя!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ПлановыеНачисления" документа
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиОсновныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ);
	КонецЕсли;
	
	// Действие
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано действие!", Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения реквизитов в строке ТЧ "ПлановыеУдержания" документа
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиПлановыхУдержаний(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Удержания"": ";

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид удержания!", Отказ);
	КонецЕсли;
	
	// Действие
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано действие!", Отказ);
	КонецЕсли;
		
	// Размер оплаты
	Если ПроведениеРасчетов.СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.ВидРасчета.СпособРасчета) И (ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить) И (ВыборкаПоСтрокамДокумента.Показатель1 = 0 И ВыборкаПоСтрокамДокумента.Показатель2 = 0 И ВыборкаПоСтрокамДокумента.Показатель3 = 0 И
			ВыборкаПоСтрокамДокумента.Показатель4 = 0 И ВыборкаПоСтрокамДокумента.Показатель5 = 0 И ВыборкаПоСтрокамДокумента.Показатель6 = 0) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер удержания!", Отказ);
	КонецЕсли;

КонецПроцедуры
 
// Проверяет правильность заполнения реквизитов в строке ТЧ "Взносы" документа
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Взносы"": ";

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Налог) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан налог!", Отказ);
	КонецЕсли;
	
	// Действие
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано действие!", Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения реквизитов в строке ТЧ "ВзносыФОТ" документа
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиВзносыФОТ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""ВзносыФОТ"": ";

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Налог) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан налог!", Отказ);
	КонецЕсли;
	
	// Действие
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано действие!", Отказ);
	КонецЕсли;
	
КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по отпуску
//
// Параметры: 
//  ВыборкаПоШапкеДокумента 	- выборка из результата запроса по шапке документа,
//  ВыборкаПоРаботникиОрганизации 	- выборка из результата запроса по табличной чавсти документа,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОтпуска(ВыборкаПоШапкеДокумента)
	
	Движение = Движения.СостояниеРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= ВыборкаПоШапкеДокумента.ДатаНачала;
	
	// Измерения
	Движение.Сотрудник				= ВыборкаПоШапкеДокумента.Сотрудник;
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	
	// Ресурсы
	Движение.Состояние				= Перечисления.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		
			Движение = Движения.СостояниеРаботниковОрганизаций.Добавить();
		
			// Свойства
			Движение.Период					= ВыборкаПоШапкеДокумента.ДатаОкончания + мДлинаСуток;
			
			// Измерения
			Движение.Сотрудник				= ВыборкаПоШапкеДокумента.Сотрудник;
			Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
			
			// Ресурсы
			Движение.Состояние				= Перечисления.СостоянияРаботникаОрганизации.Работает;
	КонецЕсли;		

	Если ВыборкаПоШапкеДокумента.ОсвобождатьСтавку Тогда
		
		Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоШапкеДокумента.ДатаНачала;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоШапкеДокумента.Должность;
		
		// Ресурсы
		Движение.КоличествоСтавок			= ВыборкаПоШапкеДокумента.ЗанимаемыхСтавок; 
		
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
			
			Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
			// Свойства
			Движение.Период					= ВыборкаПоШапкеДокумента.ДатаОкончания + мДлинаСуток;
			Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			Движение.Должность					= ВыборкаПоШапкеДокумента.Должность;
			
			// Ресурсы
			Движение.КоличествоСтавок		= ВыборкаПоШапкеДокумента.ЗанимаемыхСтавок;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуОтпуска

// По строке выборки результата запроса по документу формируем движения по регистру ПлановыеНачисленияРаботниковОрганизаций
//
// Параметры: 
//  ВыборкаПоШапкеДокумента 	- выборка из результата запроса по шапке документа,
//  ВыборкаПоРаботникиОрганизации 	- выборка из результата запроса по табличной чавсти документа,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОсновныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)

	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период                     = ВыборкаПоШапкеДокумента.ДатаДействия;
	
	// Измерения
	// Реквизиты
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Движение.Сотрудник                  = ВыборкаПоШапкеДокумента.Сотрудник;
	Если НЕ ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
		Движение.ВидРасчетаИзмерение    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	КонецЕсли; 
	
	// Ресурсы
	Движение.ВидРасчета             = ВыборкаПоСтрокамДокумента.ВидРасчета;
	Если ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Движение.Актуальность			= Истина;
		Движение.Показатель1			= ВыборкаПоСтрокамДокумента.Показатель1;
		Движение.Валюта1				= ВыборкаПоСтрокамДокумента.Валюта1;
		Движение.ТарифныйРазряд1		= ВыборкаПоСтрокамДокумента.ТарифныйРазряд1;
		Движение.Показатель2			= ВыборкаПоСтрокамДокумента.Показатель2;
		Движение.Валюта2				= ВыборкаПоСтрокамДокумента.Валюта2;
		Движение.ТарифныйРазряд2		= ВыборкаПоСтрокамДокумента.ТарифныйРазряд2;				
		Движение.Показатель3			= ВыборкаПоСтрокамДокумента.Показатель3;
		Движение.Валюта3				= ВыборкаПоСтрокамДокумента.Валюта3;
		Движение.ТарифныйРазряд3		= ВыборкаПоСтрокамДокумента.ТарифныйРазряд3;				
		Движение.Показатель4			= ВыборкаПоСтрокамДокумента.Показатель4;
		Движение.Валюта4				= ВыборкаПоСтрокамДокумента.Валюта4;
		Движение.ТарифныйРазряд4		= ВыборкаПоСтрокамДокумента.ТарифныйРазряд4;				

	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистру ПлановыеУдержанияРаботниковОрганизаций
//
// Параметры: 
//  ВыборкаПоШапкеДокумента 	- выборка из результата запроса по шапке документа,
//  ВыборкаПоРаботникиОрганизации 	- выборка из результата запроса по табличной чавсти документа,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуПлановыхУдержаний(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)

	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ПлановыеУдержанияРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период                     = ВыборкаПоШапкеДокумента.ДатаДействия;

	// Измерения
	Движение.Сотрудник                  = ВыборкаПоШапкеДокумента.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Движение.ВидРасчета                 = ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.ДокументОснование          = ВыборкаПоСтрокамДокумента.ДокументОснование;
	
	// Ресурсы
	Если ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Движение.Размер					= ВыборкаПоСтрокамДокумента.Размер;
		Движение.Валюта					= ВыборкаПоСтрокамДокумента.Валюта;
		Движение.СпособОтраженияВБухучете = ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений
     
// По строке выборки результата запроса по документу формируем движения по регистру ВзносыВФондыРаботниковОрганизаций
//
// Параметры: 
//  ВыборкаПоШапкеДокумента 	- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента 	- выборка из результата запроса по табличной части документа,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВзносы(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)

	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ВзносыВФондыРаботниковОрганизаций.Добавить();
	
	Движение.Период                     = ВыборкаПоШапкеДокумента.ДатаДействия;
	
	// Измерения
	Движение.Сотрудник                  = ВыборкаПоШапкеДокумента.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Движение.Налог						= ВыборкаПоСтрокамДокумента.Налог;	
	
	// Ресурсы
	Если ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Движение.Актуальность	= Истина;
	Иначе
		Движение.Период	= КонецМесяца(ВыборкаПоШапкеДокумента.ДатаДействия-1);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	СоответствиеНеСуммовыхСпособовРасчета = ПроведениеРасчетов.ПолучитьСоответствиеСпособовРасчетаТребующихВалюту();
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
    Первый = Истина;
	Пока ВыборкаПоШапкеДокумента.Следующий() Цикл
//	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

		ДобавитьСтрокуОтпуска(ВыборкаПоШапкеДокумента);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоОсновнымНачислениям().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиОсновныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ);

				Если НЕ Отказ Тогда
					ДобавитьСтрокуОсновныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				КонецЕсли;

			КонецЦикла;
			
			
			// получим реквизиты табличной части
			ВыборкаПоУдержаниям = СформироватьЗапросПоПлановымУдержаниям().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоУдержаниям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиПлановыхУдержаний(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Отказ);

				Если НЕ Отказ Тогда
					ДобавитьСтрокуПлановыхУдержаний(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям);
				КонецЕсли;

			КонецЦикла;
			
			Если Первый Тогда 
				// получим реквизиты табличной части
				ВыборкаПоВзносам = СформироватьЗапросПоВзносам().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВзносам.Следующий() Цикл 

					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоШапкеДокумента, ВыборкаПоВзносам, Отказ);

					Если НЕ Отказ Тогда
						ДобавитьСтрокуВзносы(ВыборкаПоШапкеДокумента, ВыборкаПоВзносам);
					КонецЕсли;

				КонецЦикла;
			
				// получим реквизиты табличной части
				ВыборкаПоВзносамФОТ = СформироватьЗапросПоВзносамФОТ().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВзносамФОТ.Следующий() Цикл 

					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиВзносыФОТ(ВыборкаПоШапкеДокумента, ВыборкаПоВзносамФОТ, Отказ);

					Если НЕ Отказ Тогда
						ДобавитьСтрокуВзносы(ВыборкаПоШапкеДокумента, ВыборкаПоВзносамФОТ);
					КонецЕсли;

				КонецЦикла;
			   	Первый = Ложь;
			КонецЕсли;

			
		КонецЕсли; 		

//	КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");