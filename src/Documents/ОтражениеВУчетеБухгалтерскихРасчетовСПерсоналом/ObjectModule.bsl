// Процедура выполняет формирование движений по регистрам УправленческиеНачисления и ВзаиморасчетыСРаботниками
// предназначенным для расчетов с работниками
// Такие движения формируются только для тех, у кого выставлен флажок УчетНачисленийПоОрганизации
// Параметры:
//	Отказ		- признак отказа от проведения документа,
//	Заголовок	- Заголовок для сообщений об ошибках проведения.
//
Процедура СформироватьНачисленияРаботников(Отказ, КурсВалютыУпрУчета, ВалютаУпрУчета, Заголовок = "")
	
	// Проверка
	//	Поля:
	//		Физлицо
	// Проверка - есть ли хоть одна запись для отражения в упручете
	//
	
	ПроверкаТекст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Результаты.Сотрудник.ФизЛицо
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Результаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамКонец) КАК УчетЗаработкаРаботников
	|		ПО Результаты.сотрудник.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|
	|ГДЕ
	|	Результаты.ПериодРегистрации = &парамПериодРегистрации И
	|	(УчетЗаработкаРаботников.УчетНачисленийПоОрганизации)
	|";
	
	Запрос = Новый Запрос(ПроверкаТекст);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец", КонецМесяца(ПериодРегистрации));

	Если Запрос.Выполнить().Выбрать().Количество() = 0 Тогда
		// если нет работников по которым необходимо выполнить отражение 
		// зарплаты в упручете - возврат
		Возврат;
	КонецЕсли;
	
	
	// Периоды
	//	Поля:
	//		Период           - дата изменения состояния работника
	//		ФизЛицо
	//		ГрафикРаботы
	//		Подразделение
	//
	
	ПериодыТекст = 
	"ВЫБРАТЬ
	|	&парамНачало КАК Период,
	|	Срез.ФизЛицо КАК ФизЛицо,
	|	Срез.ГрафикРаботы КАК ГрафикРаботы,
	|	Срез.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(&парамНачало, ) КАК Срез
	|ГДЕ
	|	Срез.ПричинаИзмененияСостояния <> &парамУволен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Период,
	|	Работники.ФизЛицо,
	|	Работники.ГрафикРаботы,
	|	Работники.Подразделение
	|ИЗ
	|	РегистрСведений.Работники КАК Работники
	|ГДЕ
	|	Работники.Период > &парамНачало
	|	И Работники.Период <= &парамКонец";
	
	
	// ДанныеГрафика
	//	Поля:
	//		ДатаС
	//		ДатаПо
	//		ГрафикРаботы
	//		Дни
	//		Часы
	//		
	//	Данные по графикам работы с промежутками, встречающимися у работников из СписокФизлиц
	//
	ДанныеГрафикаТекст = 
	"ВЫБРАТЬ
	|	Периоды.ДатаС КАК ДатаС,
	|	Периоды.ДатаПо КАК ДатаПо,
	|	Периоды.ГрафикРаботы КАК ГрафикРаботы,
	|	СУММА(Графики.ОсновноеЗначение) КАК Дни,
	|	СУММА(Графики.ДополнительноеЗначение) КАК Часы
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПериодыОсновная.Период КАК ДатаС,
	|		ЕСТЬNULL(ДОБАВИТЬКДАТЕ(МИНИМУМ(ПериодыВспомогательная.Период), СЕКУНДА, -(1)), &парамКонец) КАК ДатаПо,
	|		ПериодыОсновная.ГрафикРаботы КАК ГрафикРаботы
	|	ИЗ
	|		(" + ПериодыТекст + ") КАК ПериодыОсновная
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + ПериодыТекст + ") КАК ПериодыВспомогательная
	|			ПО ПериодыВспомогательная.ФизЛицо = ПериодыОсновная.ФизЛицо И ПериодыВспомогательная.Период > ПериодыОсновная.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПериодыОсновная.Период,
	|		ПериодыОсновная.ФизЛицо,
	|		ПериодыОсновная.ГрафикРаботы) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК Графики
	|		ПО (Графики.ВидУчетаВремени = &парамПоДням) И Периоды.ГрафикРаботы = Графики.ГрафикРаботы И Графики.Дата >= Периоды.ДатаС И Графики.Дата <= Периоды.ДатаПо
    |
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ДатаС,
	|	Периоды.ДатаПо,
	|	Периоды.ГрафикРаботы";
	
	
	// РаботникиПериоды
	//	Поля:
	//		ДатаС          	- дата начала периода
	//		ДатаПо			- дата конца периода
	//		ФизЛицо			
	//		ГрафикРаботы
	//		Подразделение
	//		
	//	Список работников с периодами в которые действовали подразделение и график работы
	//
	РаботникиПериодыТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыОсновная.Период КАК ДатаС,
	|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(МИНИМУМ(ПериодыВспомогательная.Период), СЕКУНДА, -(1)), &парамКонец) КАК ДатаПо,
	|	ПериодыОсновная.ФизЛицо КАК ФизЛицо,
	|	ПериодыОсновная.ГрафикРаботы КАК ГрафикРаботы,
	|	ПериодыОсновная.Подразделение КАК Подразделение
	|ИЗ
	|	(" + ПериодыТекст + ") КАК ПериодыОсновная
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПериодыТекст + ") КАК ПериодыВспомогательная
	|		ПО ПериодыВспомогательная.ФизЛицо = ПериодыОсновная.ФизЛицо И ПериодыВспомогательная.Период > ПериодыОсновная.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыОсновная.Период,
	|	ПериодыОсновная.ФизЛицо,
	|	ПериодыОсновная.ГрафикРаботы,
	|	ПериодыОсновная.Подразделение";
	
		
	
	// Начисления
	//	Поля:
	//		Физлицо
	//		Результат
	//	Список начислений по физлицам
	//  Начислениями в пользу работников считается то, что лежит во 
	//  ВзаиморасчетыСРаботникамиОрганизаций и в регистре расчета с 
	//  удержаниями - все удержания (кроме НДФЛ) "гасят" задолженность компании 
	//  перед работником
	//
	НачисленияТекст = 
	"ВЫБРАТЬ
	|	Результаты.Физлицо КАК Физлицо,
	|	СУММА(Результаты.Результат) КАК Результат,
	|	СУММА(Результаты.РезультатСдельно) КАК РезультатСдельно,
	|	СУММА(Результаты.РезультатУдержания) КАК РезультатУдержания
	|ИЗ
	|	(ВЫБРАТЬ
	|		Результаты.сотрудник.ФизЛицо КАК Физлицо,
	|		Результаты.Результат КАК Результат,
	|		ВЫБОР КОГДА Результаты.ВидРасчета.СпособРасчета = &СдельныйЗаработок ТОГДА Результаты.Результат ИНАЧЕ 0 КОНЕЦ КАК РезультатСдельно,
	|		0 КАК РезультатУдержания
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Результаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамКонец) КАК УчетЗаработкаРаботников
	|			ПО Результаты.сотрудник.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|	
	|	ГДЕ
	|		Результаты.ПериодРегистрации = &парамНачало И
	|		(УчетЗаработкаРаботников.УчетНачисленийПоОрганизации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Результаты.сотрудник.ФизЛицо,
	|		0,
	|		0,
	|		Результаты.Результат
	|	ИЗ
	|		РегистрРасчета.ВзносыВФонды КАК Результаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамКонец) КАК УчетЗаработкаРаботников
	|			ПО Результаты.сотрудник.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|	
	|	ГДЕ
	|		Результаты.ПериодРегистрации >= &парамНачало И
	|		Результаты.ПериодРегистрации < &парамКонец И
	|		(УчетЗаработкаРаботников.УчетНачисленийПоОрганизации) И
	|       Результаты.ВидРасчета.СпособРасчета <> &ВзносыФОТ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Результаты.сотрудник.ФизЛицо,
	|		0,
	|		0,
	|		Результаты.Налог
	|	ИЗ
 	|		РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Результаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамКонец) КАК УчетЗаработкаРаботников
	|			ПО Результаты.сотрудник.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|	
	|	ГДЕ
	|		(НАЧАЛОПЕРИОДА(Результаты.Период, МЕСЯЦ) = &парамНачало) И
	|		Результаты.ВидДвижения = &парамПриход И
	|		(УчетЗаработкаРаботников.УчетНачисленийПоОрганизации)
	|) КАК Результаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Результаты.Физлицо";


	
	
	// НачисленияРаботников
	//	Поля:
	//		ДатаС
	//		ДатаПо
	//		ФизЛицо
	//		ГрафикРаботы
	//		Подразделение
	//		Дни
	//		Часы
	//		Результат
	//	Данные для ввода в регистр начислений работников. Результат - суммарный результат по 
	//	физлицу, который еще нужно распределить по всем строкам физлица пропорционально 
	//	отработанным дням
	
	НачисленияРаботниковТекст = 
	"ВЫБРАТЬ
	|	РаботникиПериоды.ДатаС,
	|	РаботникиПериоды.ДатаПо,
	|	Сотрудники.Сотрудник,
	|	Начисления.ФизЛицо,
	|	Начисления.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	РаботникиПериоды.ГрафикРаботы,
	|	РаботникиПериоды.Подразделение,
	|	ЕСТЬNULL(ДанныеГрафика.Дни, 0) КАК Дни,
	|	ЕСТЬNULL(ДанныеГрафика.Часы, 0) КАК Часы,
	|	Начисления.Результат,
	|	Начисления.РезультатСдельно,
	|	Начисления.РезультатУдержания
	|ИЗ
	|	(" + НачисленияТекст + ") КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + РаботникиПериодыТекст + ") КАК РаботникиПериоды
	|		ПО РаботникиПериоды.ФизЛицо = Начисления.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДанныеГрафикаТекст + ") КАК ДанныеГрафика
	|		ПО ДанныеГрафика.ГрафикРаботы = РаботникиПериоды.ГрафикРаботы И ДанныеГрафика.ДатаС = РаботникиПериоды.ДатаС И ДанныеГрафика.ДатаПо = РаботникиПериоды.ДатаПо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА (НЕ РаботникиОсновноеМесто.Сотрудник ЕСТЬ NULL )
	|					ТОГДА РаботникиОсновноеМесто.Сотрудник
	|				КОГДА (НЕ РаботникиСовместительство.Сотрудник ЕСТЬ NULL )
	|					ТОГДА РаботникиСовместительство.Сотрудник
	|				КОГДА (НЕ СотрудникиДУ.Сотрудник ЕСТЬ NULL )
	|					ТОГДА СотрудникиДУ.Сотрудник
	|				ИНАЧЕ NULL
	|			КОНЕЦ КАК Сотрудник,
	|			ВЫБОР
	|				КОГДА (НЕ РаботникиОсновноеМесто.Физлицо ЕСТЬ NULL )
	|					ТОГДА РаботникиОсновноеМесто.Физлицо
	|				КОГДА (НЕ РаботникиСовместительство.Физлицо ЕСТЬ NULL )
	|					ТОГДА РаботникиСовместительство.Физлицо
	|				КОГДА (НЕ СотрудникиДУ.Физлицо ЕСТЬ NULL )
	|					ТОГДА СотрудникиДУ.Физлицо
	|				ИНАЧЕ NULL
	|			КОНЕЦ КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Ссылка) КАК Сотрудник,
	|				СотрудникиДУ.Физлицо КАК Физлицо
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			ГДЕ
	|				СотрудникиДУ.ВидДоговора = &ДоговорУправленческий
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо) КАК СотрудникиДУ
	|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|					РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&ДатаАктуальности,
	|						Сотрудник.ВидДоговора = &ТрудовойДоговор
	|						    И Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы) КАК РаботникиОсновноеМесто
	|				ГДЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					РаботникиОсновноеМесто.Сотрудник.Физлицо) КАК РаботникиОсновноеМесто
	|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(РаботникиСовместительство.Сотрудник) КАК Сотрудник,
	|					РаботникиСовместительство.Сотрудник.Физлицо КАК Физлицо
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&ДатаАктуальности,
	|						Сотрудник.ВидДоговора = &ТрудовойДоговор
	|						    И Сотрудник.ВидЗанятости = &Совместительство) КАК РаботникиСовместительство
	|				ГДЕ РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					РаботникиСовместительство.Сотрудник.Физлицо) КАК РаботникиСовместительство
	|				ПО РаботникиОсновноеМесто.Физлицо = РаботникиСовместительство.Физлицо
	|			ПО СотрудникиДУ.Физлицо = РаботникиОсновноеМесто.Физлицо) КАК Сотрудники
	|		ПО Начисления.Физлицо = Сотрудники.Физлицо
	|	
	|Итоги Сумма(Дни) ПО
	|	Начисления.ФизЛицо";
	
	Запрос = Новый Запрос(НачисленияРаботниковТекст);
	
	Запрос.УстановитьПараметр("парамНачало", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
	Запрос.УстановитьПараметр("парамУволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("СдельныйЗаработок", Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	Запрос.УстановитьПараметр("парамПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ВзносыФОТ", Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ);
	
	Запрос.УстановитьПараметр("ДатаАктуальности",		КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ТрудовойДоговор",		Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	Запрос.УстановитьПараметр("ДоговорУправленческий",	Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	Запрос.УстановитьПараметр("ОсновноеМестоРаботы",	Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("Совместительство",		Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		// не нашли работников по которым нужно отразить зарплату в упручете
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		
		ТекущееФизлицо = Выборка.ФизЛицо;
		ОтработаноДней = Выборка.Дни;
		
		РаспределенныйРезультат = 0;
		РаспределенныйРезультатСдельно = 0;
		РаспределенныйРезультатУдержания = 0;
		
		Если ОтработаноДней = 0 Тогда
			
			// ошибка - не можем отразить зарплату в упручете
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнен рабочий график работника "+Выборка.ФизЛицоНаименование+" в управленческом учете!", Отказ, Заголовок);
			
		Иначе  // иначе - формируем движения
			
			ПоследняяСтрока = Неопределено;
			ПоследняяСтрокаСдельно = Неопределено;
			ПоследняяСтрокаУдержания = Неопределено;
			ПоследняяСтрокаВыборки = Ложь;
			
			ВыборкаНачислений = Выборка.Выбрать();
			ПерваяСтрокаВыборки = Истина;
			Пока ВыборкаНачислений.Следующий() Цикл
				
				Если ПерваяСтрокаВыборки Тогда
					
					// в регистр взаиморасчетов с работниками вносим одну запись на работника
					Строка = Движения.ВзаиморасчетыСРаботниками.Добавить();
					// свойства  
					Строка.Период 		= КонецМесяца(ПериодРегистрации);
					Строка.ВидДвижения	= ВидДвиженияНакопления.Приход;
					// измерения
					Строка.Физлицо		= ВыборкаНачислений.ФизЛицо;
					// ресурсы
					Строка.СуммаУпр		= (ВыборкаНачислений.Результат) / КурсВалютыУпрУчета;
					
					// для корректировки удержания с целью устранения ошибок округления
					СуммаВзаиморасчета  = Строка.СуммаУпр;
					
					РезультатВВалютеУпрУчета 		  = (ВыборкаНачислений.Результат - ВыборкаНачислений.РезультатСдельно)/ КурсВалютыУпрУчета;
					РезультатСдельноВВалютеУпрУчета   = ВыборкаНачислений.РезультатСдельно / КурсВалютыУпрУчета;
					РезультатУдержанияВВалютеУпрУчета = ВыборкаНачислений.РезультатУдержания / КурсВалютыУпрУчета;
					
					ПерваяСтрокаВыборки = Ложь;
				КонецЕсли;
				
				Результат 		 	= (ВыборкаНачислений.Результат - ВыборкаНачислений.РезультатСдельно)* ВыборкаНачислений.Дни / ОтработаноДней / КурсВалютыУпрУчета;
				РезультатСдельно 	= ВыборкаНачислений.РезультатСдельно * ВыборкаНачислений.Дни / ОтработаноДней / КурсВалютыУпрУчета;
				РезультатУдержания 	= ВыборкаНачислений.РезультатУдержания * ВыборкаНачислений.Дни / ОтработаноДней / КурсВалютыУпрУчета;
				
				РаспределенныйРезультат 	   	 = РаспределенныйРезультат + Результат;
				РаспределенныйРезультатСдельно 	 = РаспределенныйРезультатСдельно + РезультатСдельно;
				РаспределенныйРезультатУдержания = РаспределенныйРезультатУдержания + РезультатУдержания;
				
				// в регистр начислений по работникам
				Если Результат <> 0 Тогда 
					ПоследняяСтрока = Движения.УправленческиеНачисления.Добавить();
					
					ПоследняяСтрока.ПериодРегистрации		= ПериодРегистрации;
					ПоследняяСтрока.ПериодДействияНачало	= ВыборкаНачислений.ДатаС;
					ПоследняяСтрока.ПериодДействияКонец		= ВыборкаНачислений.ДатаПо;
					ПоследняяСтрока.ВидРасчета				= ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии;
					
					// измерения
					ПоследняяСтрока.ФизЛицо					= ВыборкаНачислений.ФизЛицо;
					
					// ресурсы
					ПоследняяСтрока.Результат				= Результат;
					ПоследняяСтрока.ОтработаноДней			= ВыборкаНачислений.Дни;
					ПоследняяСтрока.ОтработаноЧасов			= ВыборкаНачислений.Часы;
					
					// реквизиты
					ПоследняяСтрока.Подразделение			= ВыборкаНачислений.Подразделение;
				КонецЕсли;
				
				Если РезультатСдельно <> 0 Тогда 
					ПоследняяСтрокаСдельно = Движения.УправленческиеНачисления.Добавить();
					
					ПоследняяСтрокаСдельно.ПериодРегистрации	= ПериодРегистрации;
					ПоследняяСтрокаСдельно.ПериодДействияНачало	= ВыборкаНачислений.ДатаС;
					ПоследняяСтрокаСдельно.ПериодДействияКонец	= ВыборкаНачислений.ДатаПо;
					ПоследняяСтрокаСдельно.ВидРасчета			= ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно;
					
					// измерения
					ПоследняяСтрокаСдельно.ФизЛицо				= ВыборкаНачислений.ФизЛицо;
					
					// ресурсы
					ПоследняяСтрокаСдельно.Результат			= РезультатСдельно;
					ПоследняяСтрокаСдельно.ОтработаноДней		= ВыборкаНачислений.Дни;
					ПоследняяСтрокаСдельно.ОтработаноЧасов		= ВыборкаНачислений.Часы;
					
					// реквизиты
					ПоследняяСтрокаСдельно.Подразделение		= ВыборкаНачислений.Подразделение;
				КонецЕсли;
				
				Если РезультатУдержания <> 0 Тогда 
					ПоследняяСтрокаУдержания = Движения.УправленческиеУдержания.Добавить();
					
					ПоследняяСтрокаУдержания.ПериодРегистрации	= ПериодРегистрации;
					ПоследняяСтрокаУдержания.ВидРасчета			= ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии;
					
					// измерения
					ПоследняяСтрокаУдержания.ФизЛицо			= ВыборкаНачислений.ФизЛицо;
					
					// ресурсы
					ПоследняяСтрокаУдержания.Результат			= РезультатУдержания;
					
					// реквизиты
					ПоследняяСтрокаУдержания.Подразделение		= ВыборкаНачислений.Подразделение;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПоследняяСтрока <> Неопределено Тогда
				ПоследняяСтрока.Результат			= ПоследняяСтрока.Результат + (РезультатВВалютеУпрУчета - РаспределенныйРезультат);
			КонецЕсли;
			Если ПоследняяСтрокаСдельно <> Неопределено Тогда
				ПоследняяСтрокаСдельно.Результат	= ПоследняяСтрокаСдельно.Результат + (РезультатСдельноВВалютеУпрУчета - РаспределенныйРезультатСдельно);
			КонецЕсли;
			Если ПоследняяСтрокаУдержания <> Неопределено Тогда
				ПоследняяСтрокаУдержания.Результат	= ПоследняяСтрокаУдержания.Результат + (РезультатВВалютеУпрУчета + РезультатСдельноВВалютеУпрУчета - СуммаВзаиморасчета - РаспределенныйРезультатУдержания);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  // СформироватьНачисленияРаботников

Процедура СформироватьВыплатыРаботникам(Отказ, КурсВалютыУпрУчета)
	
	// сначала получим момент времени последнего проведенного отражения
	ЗапросМомента = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом.МоментВремени
	|ИЗ
	|	Документ.ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом КАК ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом
	|
	|ГДЕ
	|	ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом.Дата < &парамТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом.Дата УБЫВ");
	
	ЗапросМомента.УстановитьПараметр("парамТекущаяДата", Дата);
	Выборка = ЗапросМомента.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		МоментВремениПрошлый = Новый МоментВремени('0001.01.01', Документы.ОтражениеВУчетеБухгалтерскихРасчетовСПерсоналом.ПустаяСсылка());
	Иначе
		Выборка.Следующий();
		МоментВремениПрошлый = Выборка.МоментВремени;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Результаты.Сотрудник.Физлицо КАК ФизЛицо,
	|	СУММА(Результаты.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Результаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(&парамКонец) КАК Работники
	|		ПО Результаты.Сотрудник.Физлицо = Работники.Физлицо
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамКонец) КАК УчетЗаработкаРаботников
	|		ПО Результаты.сотрудник.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|	
	|ГДЕ
	|	УчетЗаработкаРаботников.УчетНачисленийПоОрганизации И
	|	Результаты.МоментВремени > &парамМоментВремениПрошлый И
	|	Результаты.МоментВремени < &парамМоментВремениТекущий И
	|	Результаты.ВидДвижения = &парамРасход
	|
	|СГРУППИРОВАТЬ ПО
	|	Результаты.Сотрудник.Физлицо");

	Запрос.УстановитьПараметр("парамКонец", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамМоментВремениПрошлый", МоментВремениПрошлый);
	Запрос.УстановитьПараметр("парамМоментВремениТекущий", МоментВремени());
	Запрос.УстановитьПараметр("парамРасход", ВидДвиженияНакопления.Расход);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		// не нашли работников по которым нужно отразить зарплату в упручете
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Строка = Движения.ВзаиморасчетыСРаботниками.Добавить();
		// свойства  
		Строка.Период 		= КонецМесяца(ПериодРегистрации);
		Строка.ВидДвижения	= ВидДвиженияНакопления.Расход;
		// измерения
		Строка.Физлицо		= Выборка.ФизЛицо;
		// ресурсы
		Строка.СуммаУпр		= Выборка.СуммаВзаиморасчетов / КурсВалютыУпрУчета;
		// реквизиты
		Строка.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;

	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем ВалютаУпрУчета;
	Перем КурсВалютыУпрУчета;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ПроведениеРасчетов.ПолучитьКурсВалютыУпрУчета(ПериодРегистрации, ВалютаУпрУчета, КурсВалютыУпрУчета, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	
	// если не задан курс валюты управленческого учета, то отражать в управленческом учете невозможно
	Если КурсВалютыУпрУчета = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан курс валюты управленческого учета!", Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	// сформируем начисления работников, начислдения которых отражаются в упручете
	// и проведем по регистрам УправленческиеНачисления и ВзаиморасчетыСРаботниками
	СформироватьНачисленияРаботников(Отказ, КурсВалютыУпрУчета, ВалютаУпрУчета, Заголовок);
	
	// сформируем выплаты по всем работникам
	СформироватьВыплатыРаботникам(Отказ, КурсВалютыУпрУчета);
	
КонецПроцедуры
