
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


// получение данных по частным предпринимателям за квартал
//
Процедура ЗаполнитьЧП() Экспорт

	Запрос = Новый Запрос;
	
	ТекстЗапроса = "                                                                                        
	|ВЫБРАТЬ
	|	ОстакиОбороты.Контрагент	КАК Контрагент,
	|	СУММА(ОстакиОбороты.УдержНДФЛ)  КАК УдержНДФЛ,
	|	СУММА(ВЫБОР	КОГДА (ОстакиОбороты.ОбКт -ОстакиОбороты.ОстДт + ВЫБОР	КОГДА ОстакиОбороты.Возврат < 0 ТОГДА ОстакиОбороты.Возврат ИНАЧЕ 0 КОНЕЦ )
	|	> (ОстакиОбороты.обДт - ОстакиОбороты.ОстКт - ВЫБОР	КОГДА ОстакиОбороты.Возврат > 0 ТОГДА ОстакиОбороты.Возврат ИНАЧЕ 0 КОНЕЦ)
	|			ТОГДА (ОстакиОбороты.ОбКт-ОстакиОбороты.ОстДт  + ВЫБОР	КОГДА ОстакиОбороты.Возврат < 0 ТОГДА ОстакиОбороты.Возврат ИНАЧЕ 0 КОНЕЦ)  // отнимаем возвраты товаром
	|			ИНАЧЕ (ОстакиОбороты.обДт -ОстакиОбороты.ОстКт - ВЫБОР	КОГДА ОстакиОбороты.Возврат > 0 ТОГДА ОстакиОбороты.Возврат ИНАЧЕ 0 КОНЕЦ)  // отнимаем возвраты деньгами  
	|		КОНЕЦ)  КАК НачисленоДохода
	|	
	|	ИЗ(
	|		ВЫБРАТЬ
	|			Хозрасчетный.Контрагент	КАК Контрагент,
	|			Хозрасчетный.Договор	КАК Договор,
	|			СУММА(Хозрасчетный.УдержНДФЛ)  КАК УдержНДФЛ,
	|			СУММА(Хозрасчетный.ОстКт)  КАК ОстКт,
	|			СУММА(Хозрасчетный.ОстДт)  КАК ОстДт,
	|			СУММА(Хозрасчетный.ОбКт)  КАК ОбКт,
	|			СУММА(Хозрасчетный.ОбДт)  КАК ОбДт,
	|			СУММА(Хозрасчетный.Возврат)  КАК Возврат
	|		ИЗ (
	|				ВЫБРАТЬ
	|					ХозрасчетныйОбороты.Субконто1	КАК Контрагент,
	|					ХозрасчетныйОбороты.Субконто2	КАК Договор,
	|	               	0                         		КАК УдержНДФЛ,
	|					ХозрасчетныйОбороты.СуммаОстатокДт  КАК ОстДт,
	|					ХозрасчетныйОбороты.СуммаОстатокКт  КАК ОстКт,
	|					0  КАК ОбДт,
	|					0  КАК ОбКт,
	|					0  КАК Возврат
	|					
	
	|				ИЗ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &парамОрганизация) КАК ХозрасчетныйОбороты
	
	|				ГДЕ ХозрасчетныйОбороты.Субконто1.ЮрФизЛицо = &ЧП
	
	|				ОБЪЕДИНИТЬ ВСЕ
	|				ВЫБРАТЬ
	|					ХозрасчетныйОбороты.Субконто1	КАК Контрагент,
	|					ХозрасчетныйОбороты.Субконто2	КАК Договор,
	|					ВЫБОР КОГДА ХозрасчетныйОбороты.КорСчет в (&Счет6411)
	|	               			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|	               			ИНАЧЕ 0 КОНЕЦ                         КАК УдержНДФЛ,
	|					0  КАК ОстДт,
	|					0  КАК ОстКт,
	|					ХозрасчетныйОбороты.СуммаОборотДт  КАК ОбДт,
	|					0  КАК ОбКт,
	|					ВЫБОР КОГДА ХозрасчетныйОбороты.КорСчет в (&СписокСчетовАвансы)    //черезСчет авансов
	|	               			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт 
	|	               			ИНАЧЕ 0 КОНЕЦ                         КАК Возврат
	|					
	|				ИЗ РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, ДЕНЬ, Счет В ИЕРАРХИИ (&СписокСчетовАвансы), , Организация = &парамОрганизация, , ) КАК ХозрасчетныйОбороты
	|
	|				ГДЕ ХозрасчетныйОбороты.Субконто1.ЮрФизЛицо = &ЧП
	
	|				ОБЪЕДИНИТЬ ВСЕ
	|				ВЫБРАТЬ
	|					ХозрасчетныйОбороты.Субконто1	КАК Контрагент,
	|					ХозрасчетныйОбороты.Субконто2	КАК Договор,
	|					ВЫБОР КОГДА ХозрасчетныйОбороты.КорСчет в (&Счет6411)
	|	               			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|	               			ИНАЧЕ 0 КОНЕЦ                         КАК УдержНДФЛ,
	|					0  КАК ОстДт,
	|					0  КАК ОстКт,
	|					0  КАК ОбДт,
	|					ХозрасчетныйОбороты.СуммаОборотКт  КАК ОбКт,
	|					ВЫБОР КОГДА ХозрасчетныйОбороты.КорСчет в (&СписокСчетовАвансы)    //черезСчет авансов
	|	               			ТОГДА -ХозрасчетныйОбороты.СуммаОборотДт 
	|	               			ИНАЧЕ 0 КОНЕЦ                         КАК Возврат
	|					
	|				ИЗ РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, ДЕНЬ, Счет В ИЕРАРХИИ (&СписокСчетовПоставщики), , Организация = &парамОрганизация, , ) КАК ХозрасчетныйОбороты
	|
	|				ГДЕ ХозрасчетныйОбороты.Субконто1.ЮрФизЛицо = &ЧП
	|		  ) КАК Хозрасчетный
	|
	|		СГРУППИРОВАТЬ ПО 
	|			Хозрасчетный.Контрагент,
	|			Хозрасчетный.Договор
	|	) КАК ОстакиОбороты	
	|
	|ГДЕ
	|	(ВЫБОР	КОГДА (ОстакиОбороты.ОбКт-ОстакиОбороты.ОстДт) > (ОстакиОбороты.обДт -ОстакиОбороты.ОстКт)
	|			ТОГДА (ОстакиОбороты.ОбКт-ОстакиОбороты.ОстДт)
	|			ИНАЧЕ (ОстакиОбороты.обДт -ОстакиОбороты.ОстКт)
	|		КОНЕЦ) > 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	ОстакиОбороты.Контрагент    
	|   
	|";
	
	Запрос.Текст = ТекстЗапроса;
	                                
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("ЧП", Перечисления.ЮрФизЛицо.ФизЛицо);
		Запрос.УстановитьПараметр("НачалоПериода", Началоквартала(ПериодРегистрации));
		Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(ПериодРегистрации) );
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками);				//631
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУчастникамиПФГ);				//633
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСДругимиКредиторамиВНациональнойВалюте);	//6851
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансамВНациональнойВалюте);	//3711
	
	СписокСчетовПоставщики = Новый СписокЗначений;
	СписокСчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками);				//631
	СписокСчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУчастникамиПФГ);				//633
	СписокСчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСДругимиКредиторамиВНациональнойВалюте);	//6851
	
	СписокСчетовАвансы = Новый СписокЗначений;
	СписокСчетовАвансы.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансамВНациональнойВалюте);	//3711
	
	Запрос.УстановитьПараметр("СписокСчетов"	, СписокСчетов);
	Запрос.УстановитьПараметр("СписокСчетовПоставщики"	, СписокСчетовПоставщики);
	Запрос.УстановитьПараметр("СписокСчетовАвансы"	, СписокСчетовАвансы);
	Запрос.УстановитьПараметр("Счет6411"		, ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ);
	Запрос.УстановитьПараметр("СчетАванс"		, ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансам);
	
	СписокСчетовБанкКасса = Новый СписокЗначений;
	СписокСчетовБанкКасса.Добавить(ПланыСчетов.Хозрасчетный.Касса);				//631
	СписокСчетовБанкКасса.Добавить(ПланыСчетов.Хозрасчетный.СчетаВБанках);	//3711
	Запрос.УстановитьПараметр("Счет30_31"		, СписокСчетовБанкКасса);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИНН = Выборка.Контрагент.КодПоЕДРПОУ;
		Если ИНН = Неопределено Тогда
			
			Сообщить ("Внимание! Для контрагента - ЧП  " + Выборка.Контрагент + " не заполнен идентификационный номер (реквизит ЕДРПОУ в справочнике Контрагенты). Информация о нем не включается в ведомость!");
			
		КонецЕсли;
		
		// сначала информацию в ТЧ Контрагенты
		ТекСтрока = Контрагенты.Добавить();
		ТекСтрока.Контрагент = Выборка.Контрагент;
			
			ТекСтрока = НДФЛ.Добавить();
			
			ТекСтрока.Контрагент = Выборка.Контрагент;
			ТекСтрока.ВидДохода = Справочники.ВидыДоходовНДФЛ.Код42;
			
			ТекСтрока.Доход = Выборка.НачисленоДохода;
			ТекСтрока.Налог = Выборка.УдержНДФЛ;
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьЧП()


// получение данных по частным предпринимателям за квартал
//
Процедура ЗаполнитьАлименты() Экспорт

	Запрос = Новый Запрос;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1.Получатель	КАК Контрагент,
	|	ХозрасчетныйОбороты.ПЕРИОД					КАК Период,
	|	
	|	СУММА( ХозрасчетныйОбороты.СуммаОборотКт      ) КАК НачисленоДохода,
	|	СУММА( ХозрасчетныйОбороты.СуммаОборотДт      ) КАК ВыплачДохода
	|	
	|	 
	|ИЗ РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, ДЕНЬ, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &парамОрганизация, , ) КАК ХозрасчетныйОбороты
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.Получатель,
	|	ХозрасчетныйОбороты.Период
	|
	|ИТОГИ ПО
	|	Контрагент
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("ПризнакФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		Запрос.УстановитьПараметр("НачалоПериода", Началоквартала(ПериодРегистрации));
		Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(ПериодРегистрации) );

	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументам);				//6853
	
	Запрос.УстановитьПараметр("СписокСчетов"	, СписокСчетов);

	ВыборкаКонтрагенты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагенты.Следующий() Цикл
		
		ИНН = ВыборкаКонтрагенты.Контрагент.КодПоЕДРПОУ;
		Если ИНН = Неопределено Тогда
			
			Сообщить ("Внимание! Для контрагента - получателя алиментов  " + ВыборкаКонтрагенты.Контрагент + " не заполнен идентификационный номер (реквизит ЕДРПОУ в справочнике Контрагенты). Информация о нем не включается в ведомость!");
			
		КонецЕсли;
		
		// сначала информацию в ТЧ Контрагенты
		ТекСтрока = Контрагенты.Добавить();
		ТекСтрока.Контрагент = ВыборкаКонтрагенты.Контрагент;
		
		
		ВыборкаПериоды = ВыборкаКонтрагенты.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Пока ВыборкаПериоды.Следующий() Цикл
			
			ТекСтрока = НДФЛ.Добавить();
			
			ТекСтрока.Контрагент = ВыборкаПериоды.Контрагент;
			ТекСтрока.ВидДохода = Справочники.ВидыДоходовНДФЛ.Код29;
			
			ТекСтрока.Доход = ВыборкаПериоды.НачисленоДохода;
			ТекСтрока.Налог = 0;
		
		КонецЦикла; 
		
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьАлименты()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,   
	|	ПериодРегистрации,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛ(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	// Описание текста запроса:
	// 1. Выборка "ТЧНДФЛ": 
	//		Выбираются строки документа.  
    //
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТЧНДФЛ.НомерСтроки КАК НомерСтроки,
	               |	ТЧНДФЛ.Контрагент,
	               |	ТЧНДФЛ.ВидДохода,
	               |	ТЧНДФЛ.Доход,
	               |	ТЧНДФЛ.Налог
				   |ИЗ
	               |	Документ." + Метаданные().Имя + ".НДФЛ КАК ТЧНДФЛ
	               |
	               |ГДЕ
	               |	ТЧНДФЛ.Ссылка = &ДокументСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, для которой ведется учет!", Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен период регистрации!", Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Работники организации"": ";

	// Контрагент
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран контрагент!", Отказ);
	КонецЕсли;
	
	// ВидДохода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидДохода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид дохода!", Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ТекСтрокаНДФЛ, ВидДвижения)
	
	Если ТекСтрокаНДФЛ.Доход = 0
		И ТекСтрокаНДФЛ.Налог = 0  Тогда
		Возврат;
	КонецЕсли;
	Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
	// Свойства
	Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;
	Движение.Период				= Дата;
	// Измерения
	Движение.ПериодВзаиморасчетов	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ВидСтавки			= Перечисления.ВидыСтавокНДФЛ.Основная;
	Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
	Движение.Сотрудник			= ТекСтрокаНДФЛ.Контрагент;
	Движение.ДоходНДФЛ			= ТекСтрокаНДФЛ.ВидДохода;
	// Ресурсы
	Движение.Доход = ТекСтрокаНДФЛ.Доход;
	Движение.Налог = ТекСтрокаНДФЛ.Налог;
	
	
	Если ТекСтрокаНДФЛ.Налог <> 0  Тогда
		Возврат;
	КонецЕсли;
	// если налог не начислен сразу закрываем сумму дохода для 1Дф
	Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
	// Свойства
	Движение.ВидДвижения		= ВидДвиженияНакопления.Расход;
	Движение.Период				= Дата;
	// Измерения
	Движение.ПериодВзаиморасчетов	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ВидСтавки			= Перечисления.ВидыСтавокНДФЛ.Основная;
	Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
	Движение.Сотрудник			= ТекСтрокаНДФЛ.Контрагент;
	Движение.ДоходНДФЛ			= ТекСтрокаНДФЛ.ВидДохода;
	// Ресурсы
	Движение.Доход = ТекСтрокаНДФЛ.Доход;
	Движение.Налог = 0;


КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке(Режим).Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
		
		Если НЕ Отказ Тогда
			
				// выполним выборку по табличной части документа
				РезультатЗапросаПоНДФЛ = СформироватьЗапросПоНДФЛ(Режим);
				ВыборкаСтрокЗапроса = РезультатЗапросаПоНДФЛ.Выбрать(ОбходРезультатаЗапроса.Прямой);
				
				// обходим строки запроса, проверяем данные и формируем движения
				Пока ВыборкаСтрокЗапроса.Следующий() Цикл
					
					ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ);
					Если НЕ Отказ Тогда
						
						// регистр ВзаиморасчетыПоНДФЛ Приход
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, ВидДвиженияНакопления.Приход);
						
					КонецЕсли; 
					
				КонецЦикла;					
			
			
			// записываем движения регистров
			Движения.ВзаиморасчетыПоНДФЛ.Записать();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
