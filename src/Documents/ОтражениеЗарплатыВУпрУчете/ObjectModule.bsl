Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПроверкаНаПустойСпособ( ИмяПараметра )
	
	ТекстПроверки = "
	|	ВЫБОР	КОГДА		Начисления.ВидРасчета.СпособОтраженияВУпрУчете <> &парамПустойСпособУУ 
	|				ТОГДА	Начисления.ВидРасчета.СпособОтраженияВУпрУчете." + ИмяПараметра + "  					
	|			КОГДА		УчетЗаработкаРаботников.СпособОтраженияВУпрУчете <> &парамПустойСпособУУ 
	|					И	НЕ УчетЗаработкаРаботников.СпособОтраженияВУпрУчете ЕСТЬ NULL 
	|				ТОГДА	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете." + ИмяПараметра + " 			
	|			ИНАЧЕ		&парамСпособПоУмолчанию" + ИмяПараметра + "  		КОНЕЦ
	|";
		
	Возврат ТекстПроверки;
КонецФункции // ПроверкаНаПустойСпособБУ()

Функция ПроверкаНаПустойСпособВзносы( ИмяПараметра )
	
	ТекстПроверки = "
	|	ВЫБОР	КОГДА		УчетЗаработкаРаботников.СпособОтраженияВУпрУчете <> &парамПустойСпособУУ 
	|					И	НЕ УчетЗаработкаРаботников.СпособОтраженияВУпрУчете ЕСТЬ NULL 
	|				ТОГДА	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете." + ИмяПараметра + " 			
	|			ИНАЧЕ		&парамСпособПоУмолчанию" + ИмяПараметра + "  		КОНЕЦ
	|";
		
	Возврат ТекстПроверки;
КонецФункции // ПроверкаНаПустойСпособБУ()

Процедура Автозаполнение() Экспорт
 	Перем ВалютаУпрУчета;
	Перем КурсВалютыУпрУчета;

	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ПроведениеРасчетов.ПолучитьКурсВалютыУпрУчета(ПериодРегистрации, ВалютаУпрУчета, КурсВалютыУпрУчета, ВалютаРегламентированногоУчета);
	
	ОтражениеВУчете.Очистить();
	
	// ДанныеУпрУчета
	//	Поля:
	//		СтатьяЗатрат           	- статья затрат управленческго учета
	//		НоменклатурнаяГруппа	- номенклатурная группа управленческго учета
	//		Подразделение
	//		Результат
	//
	//	Описание:
	//	Содержит данные для отражения начисленй в упр. учете
	РаботникПериодПодразделение = "
	|				ВЫБРАТЬ
	|					Работники.ФизЛицо КАК ФизЛицо,
	|					КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ) КАК Период,
	|					Работники.Подразделение КАК Подразделение
	|				ИЗ  РегистрСведений.Работники.СрезПоследних(КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)) КАК Работники
	|			
	|			    ОБЪЕДИНИТЬ
	|				ВЫБРАТЬ
	|					Работники.ФизЛицо КАК ФизЛицо,
	|					Работники.Период КАК Период,
	|					Работники.Подразделение КАК Подразделение
	|				ИЗ  РегистрСведений.Работники.СрезПоследних(КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)) КАК Работники
	|			    ГДЕ
	|			        Работники.Период >= &парамПериодРегистрации
	|			    И   Работники.Период <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|			    И   ПричинаИзмененияСостояния = &Увольнение
	|";
	
	ДанныеУпрУчетаТекст = "
	|ВЫБРАТЬ
	|	ВсеНачисления.СтатьяЗатрат				КАК СтатьяЗатрат,
	|	ВсеНачисления.НоменклатурнаяГруппа		КАК НоменклатурнаяГруппа,
	|	ВсеНачисления.СпособРаспределенияЗатрат	КАК СпособРаспределенияЗатрат,
	|	ВсеНачисления.ОбъектСтроительства 		КАК ОбъектСтроительства,
	|	ВсеНачисления.Подразделение КАК Подразделение,
	|	СУММА(ВсеНачисления.Сумма) КАК Сумма,
	|	СУММА(ВсеНачисления.СуммаКосвенныхЗатрат) КАК СуммаКосвенныхЗатрат
	|ИЗ (
	|	ВЫБРАТЬ
	|	" + ПроверкаНаПустойСпособ( "СтатьяЗатрат" ) + "				КАК СтатьяЗатрат,
	|	" + ПроверкаНаПустойСпособ( "НоменклатурнаяГруппа" ) + "		КАК НоменклатурнаяГруппа,
	|	" + ПроверкаНаПустойСпособ( "СпособРаспределенияЗатрат" ) + "	КАК СпособРаспределенияЗатрат,
	|	" + ПроверкаНаПустойСпособ( "ОбъектСтроительства" ) + " 		КАК ОбъектСтроительства,
	|	Начисления.Подразделение	КАК Подразделение,
	|	Начисления.Результат		КАК Сумма,
	|	0 							КАК СуммаКосвенныхЗатрат
	|	ИЗ  РегистрРасчета.УправленческиеНачисления КАК Начисления
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников КАК УчетЗаработкаРаботников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Начисления.ФизЛицо КАК ФизЛицо,
	|				МАКСИМУМ(УчетЗаработкаРаботников.Период) КАК Период
	|			ИЗ
	|				РегистрРасчета.УправленческиеНачисления КАК Начисления
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников КАК УчетЗаработкаРаботников
	|					ПО Начисления.ФизЛицо = УчетЗаработкаРаботников.Физлицо И УчетЗаработкаРаботников.Период <= Начисления.ПериодДействияНачало
	|			
	|			ГДЕ
	|				Начисления.ПериодРегистрации = &парамПериодРегистрации
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Начисления.ФизЛицо) КАК СведенияОРаботникахСрез
	|			ПО СведенияОРаботникахСрез.ФизЛицо = УчетЗаработкаРаботников.Физлицо И СведенияОРаботникахСрез.Период = УчетЗаработкаРаботников.Период
	|		ПО УчетЗаработкаРаботников.Физлицо = Начисления.ФизЛицо
	|
	|	ГДЕ
	|		Начисления.ПериодРегистрации = &парамПериодРегистрации
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		" + ПроверкаНаПустойСпособВзносы( "СтатьяЗатрат" ) + "				КАК СтатьяЗатрат,
	|		" + ПроверкаНаПустойСпособВзносы( "НоменклатурнаяГруппа" ) + "		КАК НоменклатурнаяГруппа,
	|		" + ПроверкаНаПустойСпособВзносы( "СпособРаспределенияЗатрат" ) + "	КАК СпособРаспределенияЗатрат,
	|		" + ПроверкаНаПустойСпособВзносы( "ОбъектСтроительства" ) + " 		КАК ОбъектСтроительства,
	|		СведенияОРаботниках.Подразделение КАК Подразделение,
	|		0 КАК Сумма,
	|		Начисления.Результат / &КурсВалютыУпрУчета КАК СуммаКосвенныхЗатрат
	|	ИЗ РегистрРасчета.ВзносыВФонды КАК Начисления
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников КАК УчетЗаработкаРаботников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|				ВЫБРАТЬ
	|					РаботникПериод.ФизЛицо КАК ФизЛицо,
	|					МАКСИМУМ(УчетЗаработкаРаботников.Период) КАК Период
	|				ИЗ ( " + РаботникПериодПодразделение + " ) КАК РаботникПериод
	|			
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников КАК УчетЗаработкаРаботников
	|				ПО		РаботникПериод.ФизЛицо = УчетЗаработкаРаботников.Физлицо 
	|					И 	УчетЗаработкаРаботников.Период <= РаботникПериод.Период
	|			
	|				СГРУППИРОВАТЬ ПО
	|					РаботникПериод.ФизЛицо
	|			
	|			) КАК СведенияОРаботникахСрез
	|			ПО		СведенияОРаботникахСрез.ФизЛицо = УчетЗаработкаРаботников.Физлицо 
	|				И	СведенияОРаботникахСрез.Период = УчетЗаработкаРаботников.Период
	|				
	|		ПО УчетЗаработкаРаботников.Физлицо = Начисления.Сотрудник.ФизЛицо
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ( " + РаботникПериодПодразделение + " ) КАК СведенияОРаботниках
	|		ПО		СведенияОРаботниках.ФизЛицо = Начисления.Сотрудник.Физлицо 
	|				
	|	ГДЕ
	|		Начисления.ПериодРегистрации = &парамПериодРегистрации
	|		И Начисления.ВидРасчета.СпособРасчета = &ВзносыФОТ
	|   ) КАК ВсеНачисления
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеНачисления.СтатьяЗатрат,
	|	ВсеНачисления.НоменклатурнаяГруппа,
	|	ВсеНачисления.СпособРаспределенияЗатрат,
	|	ВсеНачисления.ОбъектСтроительства,
	|	ВсеНачисления.Подразделение
	|	";
	
	Запрос = Новый Запрос(ДанныеУпрУчетаТекст);
	
	Запрос.УстановитьПараметр("парамПустойСпособУУ", Справочники.СпособыОтраженияЗарплатыВУпрУчете.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамСпособНеОтражать", Справочники.СпособыОтраженияЗарплатыВУпрУчете.НеОтражатьВУпручете);
	Запрос.УстановитьПараметр("парамСпособПоУмолчаниюСтатьяЗатрат", Справочники.СпособыОтраженияЗарплатыВУпрУчете.ОтражениеНачисленийПоУмолчанию.СтатьяЗатрат);
	Запрос.УстановитьПараметр("парамСпособПоУмолчаниюНоменклатурнаяГруппа", Справочники.СпособыОтраженияЗарплатыВУпрУчете.ОтражениеНачисленийПоУмолчанию.НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("парамСпособПоУмолчаниюСпособРаспределенияЗатрат", Справочники.СпособыОтраженияЗарплатыВУпрУчете.ОтражениеНачисленийПоУмолчанию.СпособРаспределенияЗатрат);
	Запрос.УстановитьПараметр("парамСпособПоУмолчаниюОбъектСтроительства", Справочники.СпособыОтраженияЗарплатыВУпрУчете.ОтражениеНачисленийПоУмолчанию.ОбъектСтроительства);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	
	Запрос.УстановитьПараметр("НачисленоПоБухгалтерииСдельно", ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);
	Запрос.УстановитьПараметр("СдельныйЗаработок", Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	Запрос.УстановитьПараметр("КурсВалютыУпрУчета", КурсВалютыУпрУчета);
	Запрос.УстановитьПараметр("ВзносыФОТ", Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ);
	Запрос.УстановитьПараметр("Увольнение", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	                            
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Строка = ОтражениеВУчете.Добавить();
		
		Строка.Подразделение = Выборка.Подразделение;
		Строка.СтатьяЗатрат = Выборка.СтатьяЗатрат;
		Строка.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
		Строка.СпособРаспределенияЗатрат = Выборка.СпособРаспределенияЗатрат;
		Строка.ОбъектСтроительства = Выборка.ОбъектСтроительства;
		Строка.Сумма = Выборка.Сумма;
		Строка.СуммаКосвенныхЗатрат = Выборка.СуммаКосвенныхЗатрат;
		
	КонецЦикла;
	
КонецПроцедуры //  Автозаполнение

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Формирует запрос по табличной части ОтражениеВУчете
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоДоходам()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Отражение.НомерСтроки,
	|	Отражение.Подразделение,
	|	Отражение.СтатьяЗатрат,
	|	Отражение.НоменклатурнаяГруппа,
	|	Отражение.СтатьяЗатрат.ХарактерЗатрат Как ХарактерЗатрат,
	|	Отражение.Проект,
	|	Отражение.СпособРаспределенияЗатрат КАК СпособРаспределенияЗатратНаВыпуск,
	|	Отражение.ОбъектСтроительства,
	|	Отражение.Сумма КАК Сумма,
	|	Отражение.СуммаКосвенныхЗатрат КАК СуммаКосвенныхЗатрат
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУпрУчете.ОтражениеВУчете КАК Отражение
	|
	|ГДЕ
	|	Отражение.Ссылка = &парамРегистратор
	|
	|");
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	Возврат Запрос.Выполнить();
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(Отказ)

	Если НЕ ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан период за который выполняется отражение начислений учете!", Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОтражениеВУчете" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиДохода(ВыборкаПоДоходам, Отказ)
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоДоходам.НомерСтроки)+": ";

	Если ВыборкаПоДоходам.Подразделение.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение!", Отказ);
	КонецЕсли;
	
	Если ВыборкаПоДоходам.СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана статья затрат!", Отказ);
	КонецЕсли;
	
	Если ВыборкаПоДоходам.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы и 
		НЕ ЗначениеЗаполнено(ВыборкаПоДоходам.ОбъектСтроительства) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан объект строительства!", Отказ);
	КонецЕсли;
	
	
Конецпроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	Перем ВалютаУпрУчета;
	Перем КурсВалютыУпрУчета;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоДоходам = СформироватьЗапросПоДоходам().Выгрузить();
	
	Для каждого СтрокаТаблицы из ТаблицаПоДоходам Цикл
		ПроверитьЗаполнениеСтрокиДохода(СтрокаТаблицы, Отказ);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// подготовим общую сумму
	Для каждого СтрокаТаблицы из ТаблицаПоДоходам Цикл
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаКосвенныхЗатрат;
	КонецЦикла;
	
	ТаблицаПоДоходам.Свернуть("Подразделение,СтатьяЗатрат,Проект,НоменклатурнаяГруппа,СпособРаспределенияЗатратНаВыпуск,ОбъектСтроительства","Сумма");
	
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДоходам,ТаблицаЗатрат);

	Если ТаблицаЗатрат.Количество() > 0 Тогда
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("КодОперацииНЗП",  Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
		ДопПараметры.Вставить("КодОперацииЗатр", Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
		
		ВремСтруктураШапкиДокумента = Новый Структура;
		ВремСтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете", Истина);
		ВремСтруктураШапкиДокумента.Вставить("Ссылка", Ссылка);
		ВремСтруктураШапкиДокумента.Вставить("Дата", КонецМесяца(ПериодРегистрации));
		
		ВремСтруктураШапкиДокумента.Вставить("ВидДокумента",  "ОтражениеЗарплатыВУпрУчете");
		
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			ВремСтруктураШапкиДокумента,
			ТаблицаЗатрат,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
		);
		
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры
