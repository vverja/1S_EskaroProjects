Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мУчетнаяПолитика;                 // (Общ)
Перем УчетнаяПолитикаБух;

Перем мСтруктураПараметровДляДокументовРасчетов Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаКомиссионера()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
    |	Сделка,
	|	Контрагент,
	|	Организация,
	|	Ответственный.ФизЛицо.Наименование КАК Получил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	СуммаВознаграждения,
	|	СуммаНДСВознаграждения,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры,
	|		Цена,
	|		СУММА(Количество)           	КАК Количество,
	|		СУММА(КоличествоМест)           КАК КоличествоМест,
	|		СУММА(Сумма     )           	КАК Сумма,
	|		СУММА(СуммаНДС  )           	КАК СуммаНДС,
	|		СУММА(СуммаВознаграждения)  	КАК СуммаВознаграждения,
	|		СУММА(СуммаНДСВознаграждения) 	КАК СуммаНДСВознаграждения
	|	
	|	ИЗ
	|		Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионера
	|
	|	ГДЕ
	|		ОтчетКомиссионера.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";

	ТаблицаТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомиссионераОПродажах_Накладная";

	Макет = ПолучитьМакет("Накладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата,,,КодЯзыкаПечать);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Отчет комиссионера';uk='Звіт комісіонера'",КодЯзыкаПечать),КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);      

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПолучателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"Телефоны,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.Получатель				= Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ОбластьМакета.Параметры.Вознаграждение  = НСтр("ru='Вознагр.';uk='Винагор.'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	
	ИтогоСумма    = 0;
	ИтогоСуммаНДС = 0;
	
	ИтогоСуммаВознаграждения = 0;
	ИтогоСуммаНДСВознаграждения = 0;

	Для каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьСтроки.Параметры.Заполнить(СтрокаТаблицыТовары);
		ОбластьСтроки.Параметры.НомерСтроки = ТаблицаТовары.Индекс(СтрокаТаблицыТовары) + 1;
		ОбластьСтроки.Параметры.Товар = СокрП(СтрокаТаблицыТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(СтрокаТаблицыТовары);
		ТабДокумент.Вывести(ОбластьСтроки);

		ИтогоСумма    = ИтогоСумма    + СтрокаТаблицыТовары.Сумма;
		ИтогоСуммаНДС = ИтогоСуммаНДС + СтрокаТаблицыТовары.СуммаНДС;
		
		ИтогоСуммаВознаграждения 	= ИтогоСуммаВознаграждения + СтрокаТаблицыТовары.СуммаВознаграждения;
		ИтогоСуммаНДСВознаграждения = ИтогоСуммаНДСВознаграждения + СтрокаТаблицыТовары.СуммаНДСВознаграждения;
		
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ИтогоСуммаНДС);
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = ИтогоСумма + ?(Шапка.СуммаВключаетНДС, 0, ИтогоСуммаНДС);
	СуммаВознагражденияКПрописи = ИтогоСуммаВознаграждения + ?(Шапка.СуммаВключаетНДС, 0, ИтогоСуммаНДСВознаграждения);
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ТаблицаТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);											 	
											
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + Символы.Таб + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));		
											
	ОбластьМакета.Параметры.СуммаВознаграждения = НСтр("ru='Сумма комиссионного вознаграждения составила ';uk='Сума комісійної винагороди склала '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаВознагражденияКПрописи, Шапка.ВалютаДокумента, КодЯзыкаПечать) 
										   + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + Символы.Таб + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаНДСВознаграждения, Шапка.ВалютаДокумента, КодЯзыкаПечать));
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	МестВсего = ТаблицаТовары.Итог("КоличествоМест");
    Если МестВсего = 0 Тогда
		УниверсальныеМеханизмы.СкрытьКолонкиВТабличномДокументе(ТабДокумент, "Мест",5, "ШапкаТаблицы");
    КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаКомиссионера()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Накладная" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаКомиссионера();	
		
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Процедура выполняет заполниение табличной части.
//
// Параметры:
//  ДокументПередачи - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыУпр(ДокументПередачи = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи);
	Запрос.УстановитьПараметр("СтатусПередачи",   Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("ДатаОстатков",     ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Если ДокументПередачи = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.СерияНоменклатуры,
		|	Остатки.КоличествоОстаток,
		|	Остатки.СуммаВзаиморасчетовОстаток КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,
		|												ДоговорКонтрагента   = &ДоговорКонтрагента
		|												И СтатусПередачи = &СтатусПередачи
		|" + ?(НЕ ЗначениеЗаполнено(Сделка), "", " И Сделка = &Сделка") + "
		|											) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|";
	Иначе
		ПараметрСделка = Сделка;
		УказаниеЗаказов = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
		УказаниеЗаказовВТЧ = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
						Или (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);
		ВедениеВзаиморасчетов = ДокументПередачи.ДоговорКонтрагента.ВедениеВзаиморасчетов;
		ПолеЗаказ             = "";
		УсловиеЗаказ          = "";
		ПолеГруппировкиЗаказ  = "";
		Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ПолеЗаказ = ", Документ.Сделка КАК ЗаказПокупателя";
			ПолеГруппировкиЗаказ = ", Документ.Сделка";
		Иначе
			Если УказаниеЗаказовВТЧ Тогда
				ПараметрСделка = Неопределено;
			КонецЕсли;
			ПолеЗаказ = ",	ВЫБОР	КОГДА ДокТабличнаяЧасть.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
						|			ТОГДА Неопределено
						|			ИНАЧЕ ДокТабличнаяЧасть.ЗаказПокупателя
						|	КОНЕЦ КАК ЗаказПокупателя";
			ПолеГруппировкиЗаказ = "
						|,	ВЫБОР	КОГДА ДокТабличнаяЧасть.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
						|			ТОГДА Неопределено
						|			ИНАЧЕ ДокТабличнаяЧасть.ЗаказПокупателя
						|	КОНЕЦ";
			Если ЗначениеЗаполнено(ПараметрСделка) Тогда
				УсловиеЗаказ = "
						| И ДокТабличнаяЧасть.ЗаказПокупателя = &Сделка";
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр("Сделка", ПараметрСделка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокТабличнаяЧасть.Номенклатура                КАК Номенклатура,
		|	ДокТабличнаяЧасть.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
		|	ДокТабличнаяЧасть.СерияНоменклатуры           КАК СерияНоменклатуры,
		|	ДокТабличнаяЧасть.СтавкаНДС                   КАК СтавкаНДС,
		|	МИНИМУМ(ДокТабличнаяЧасть.НомерСтроки)        КАК НомерСтроки,
		|	ДоговорыКонтрагентов.Ссылка                   КАК ДоговорКонтрагента,
		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов     КАК ВалютаВзаиморасчетов,
		|	СУММА(ДокТабличнаяЧасть.Количество)           КАК Количество
		|" + ПолеЗаказ + "
		|ПОМЕСТИТЬ ТабличнаяЧастьДок
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ДокТабличнаяЧасть
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг КАК Документ
		|ПО
		|	Документ.Ссылка = ДокТабличнаяЧасть.Ссылка
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ПО
		|	ДоговорыКонтрагентов.Ссылка = Документ.ДоговорКонтрагента
		|ГДЕ
		|	Документ.Ссылка = &ДокументПередачи
		|" + УсловиеЗаказ + "
		|СГРУППИРОВАТЬ ПО	Номенклатура,
		|					ХарактеристикаНоменклатуры,
		|					СерияНоменклатуры,
		|					СтавкаНДС,
		|					ДоговорыКонтрагентов.Ссылка,
		|					ДоговорыКонтрагентов.ВалютаВзаиморасчетов
		|" + ПолеГруппировкиЗаказ + "
		|ИНДЕКСИРОВАТЬ ПО	Номенклатура,
		|					ХарактеристикаНоменклатуры,
		|					СерияНоменклатуры,
		|					ЗаказПокупателя
		|";
		Запрос.Выполнить();

		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.ЗаказПокупателя КАК ЗаказПокупателя
		|ИЗ
		|	ТабличнаяЧастьДок КАК Док
		|УПОРЯДОЧИТЬ ПО ЗаказПокупателя
		|";

		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();

		Если ТаблицаЗаказов.Количество() = 0 Тогда
			возврат;
		ИначеЕсли ТаблицаЗаказов.Количество() = 1 Тогда
			ПараметрСделка = ТаблицаЗаказов[0]["ЗаказПокупателя"];
		Иначе
			СписокСделок = Новый СписокЗначений();
			Для Каждого элементСделка Из ТаблицаЗаказов Цикл
				Если ЗначениеЗаполнено(элементСделка.ЗаказПокупателя) Тогда
					СписокСделок.Добавить(элементСделка.ЗаказПокупателя, Строка(элементСделка.ЗаказПокупателя));
				Иначе
					СписокСделок.Добавить(Документы.ЗаказПокупателя.ПустаяСсылка(), "Пустой заказ");
				КонецЕсли;
			КонецЦикла;
			СтруктПараметры = Новый Структура("СписокВыбора, ЗаполнитьСписокВыбора", СписокСделок, Ложь);
			ВыбранноеЗначение = УправлениеЗаказами.ВыбратьЗаказИзДокументаОснования(СтруктПараметры);
			Если ВыбранноеЗначение = Неопределено Тогда
				возврат;
			КонецЕсли;

			ПараметрСделка = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, Неопределено);
		КонецЕсли;

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабличнаяЧастьДок.Номенклатура                     КАК Номенклатура,
		|	ТабличнаяЧастьДок.ХарактеристикаНоменклатуры       КАК ХарактеристикаНоменклатуры,
		|	ТабличнаяЧастьДок.ДоговорКонтрагента               КАК ДоговорКонтрагента,
		|	ТабличнаяЧастьДок.ВалютаВзаиморасчетов             КАК ВалютаВзаиморасчетов,
		|	ТабличнаяЧастьДок.СтавкаНДС                        КАК СтавкаНДС,
		|	ТабличнаяЧастьДок.СерияНоменклатуры                КАК СерияНоменклатуры,
		|	ТабличнаяЧастьДок.Количество                       КАК КоличествоПоДокументу,
		|	ТабличнаяЧастьДок.НомерСтроки                      КАК НомерСтроки,
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00)          КАК КоличествоОстатокПереданных,
		|	ЕСТЬNULL(Остатки.СуммаВзаиморасчетовОстаток, 0.00) КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		// Временная таблица документа
		|	ТабличнаяЧастьДок КАК ТабличнаяЧастьДок
		//
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|												ДоговорКонтрагента = &ДоговорКонтрагента
		|												И СтатусПередачи = &СтатусПередачи
		|												И Сделка = &ПараметрСделка
		|												И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ ТабличнаяЧастьДок)
		|											) КАК Остатки
		|ПО
		|	ТабличнаяЧастьДок.Номенклатура = Остатки.Номенклатура
		|	И ТабличнаяЧастьДок.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|	И ТабличнаяЧастьДок.СерияНоменклатуры = Остатки.СерияНоменклатуры
		|	И ТабличнаяЧастьДок.ЗаказПокупателя = Остатки.Сделка
		|ГДЕ
		|	ТабличнаяЧастьДок.ЗаказПокупателя = &ПараметрСделка
		|	И ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00) > 0
		|УПОРЯДОЧИТЬ ПО
		|	ТабличнаяЧастьДок.НомерСтроки
		|
		|ИТОГИ МАКСИМУМ(КоличествоОстатокПереданных) ПО ТабличнаяЧастьДок.Номенклатура, ТабличнаяЧастьДок.ХарактеристикаНоменклатуры
		|";
		Запрос.УстановитьПараметр("ПараметрСделка", ПараметрСделка);

		Сделка = ПараметрСделка;

	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			КолвоОстПереданных    = ?(Выборка.КоличествоОстатокПереданных = NULL, 0, Выборка.КоличествоОстатокПереданных);
			КолвоПереданных       = КолвоОстПереданных;
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;

		Если ДокументПередачи = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество       = Выборка.КоличествоОстаток;
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			СтрокаТабличнойЧасти.Количество = Мин(Выборка.КоличествоПоДокументу, КолвоОстПереданных);
			КолвоОстПереданных = КолвоОстПереданных - СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.СтавкаНДС         = Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		
		Если ДокументПередачи = Неопределено Тогда
			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / Выборка.КоличествоОстаток, 
			               ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			               КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		Иначе
			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / КолвоПереданных, 
			               ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			               КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		КонецЕсли;

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
											  Истина, УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
											  
		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                    * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																		УчитыватьНДС, СуммаВключаетНДС,
																		Ценообразование.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыУпр()

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (ИнвентаризацияТоваровОтданныхНаКомиссию).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента",    ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументОснование",     ДокументОснование);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаОстатков",    	   ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество) КАК Количество,
	|	(МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество)) * МАКСИМУМ(Остатки.СуммаВзаиморасчетовОстаток) / МАКСИМУМ(Остатки.КоличествоОстаток) КАК Стоимость
	|ИЗ
	|	Документ.ИнвентаризацияТоваровОтданныхНаКомиссию.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента) КАК Остатки
	|		ПО Док.Номенклатура = Остатки.Номенклатура
	|			И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|			И Док.СерияНоменклатуры = Остатки.СерияНоменклатуры
	|			И (Док.Ссылка.Сделка = Остатки.Сделка
	|				ИЛИ Док.Ссылка.Сделка = &ПустойЗаказПокупателя
	|					И Остатки.Сделка = НЕОПРЕДЕЛЕНО)
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|	И Док.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Сумма            = Выборка.Стоимость;
		СтрокаТабличнойЧасти.СуммаПередачи    = Выборка.Стоимость;

		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,  ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                         * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
			                                              УчитыватьНДС, СуммаВключаетНДС,
			                                              Ценообразование.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("Накладная","Отчет комиссионера");
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти) Экспорт

	Если СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		                                       * СтрокаТабличнойЧасти.Сумма / 100;

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		      * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;

	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																	Истина, Истина,
																	Ценообразование.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(ДоговорКонтрагента, Организация, МассивНоменклатуры, Контрагент);
	
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура", ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество", Справочники.Качество.Новый);
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;
		
		ЗаполненКлючСвязи = Ложь;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента  >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = Строка.СерияНоменклатуры;
			НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
			НоваяСтрока.Количество                 = СписанноеКоличество; 
			ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);
			
			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);

			НоваяСтрока.ЦенаПередачи               = ИсходнаяСтрока.ЦенаПередачи;
			НоваяСтрока.СуммаПередачи              = НоваяСтрока.ЦенаПередачи * НоваяСтрока.Количество;
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустыойСерией = НоваяСтрока;
			КонецЕсли;
			РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры          = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
				НоваяСтрока.ЦенаПередачи               = ИсходнаяСтрока.ЦенаПередачи;
				НоваяСтрока.СуммаПередачи              = НоваяСтрока.ЦенаПередачи * НоваяСтрока.Количество;
				НоваяСтрока.Количество                 = КоличествоОсталосьПогасить;
				НоваяСтрока.КоличествоМест             = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
				ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);

				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(НоваяСтрока, ЭтотОбъект);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
			Иначе
				СтрокаСПустойСерией.Количество    = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				СтрокаСПустойСерией.СуммаПередачи = СтрокаСПустойСерией.ЦенаПередачи * СтрокаСПустойСерией.Количество;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(НоваяСтрока, ЭтотОбъект);
				РассчитатьКомиссионноеВознаграждение(СтрокаСПустойСерией);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоСериям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Добавляем колонки, используемые при проведении.
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ВознаграждениеСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма + 
		                          ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.ВознаграждениеСНДС = СтрокаТаблицы.СуммаВознаграждения + 
		                          ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.СуммаНДСВознаграждения, 0);
								  
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"                     , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетовПередачи"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"                 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСПередачи"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"                       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаСНДСПередачи = СтрокаТаблицы.СуммаПередачи + 
	                                      ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.СуммаНДСПередачи, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДС,
		                                    ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДС, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КурсДокумента,
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.НДСУпр             = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КурсДокумента,
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СуммаВзаиморасчетовПередачи = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСПередачи,
		                                    ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    КратностьВзаиморасчетов);

		СтрокаТаблицы.СтоимостьБезСкидок  = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	//Заполнение счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаТоваров, 	СтруктураШапкиДокумента);
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	

// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
	// для отражения расходов по налогу на прибыль по списанной себестоимости
		
		ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		
		ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
		

	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь, Ложь, "Сумма");

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслугВознаграждения(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Свернуть("","СуммаВознаграждения,СуммаНДСВознаграждения");
	
	ТаблицаТоваров.Колонки.СуммаВознаграждения.Имя = "Сумма";
	ТаблицаТоваров.Колонки.СуммаНДСВознаграждения.Имя = "НДС";
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуУслугВознагражденияРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуУслугВознаграждения()

Процедура ПодготовитьТаблицуУслугВознагражденияРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("СчетЗатрат"			, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаТоваров.Колонки.Добавить("Забалансовый", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("СтатьяЗатрат"			, Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаТоваров.Колонки.Добавить("НоменклатурнаяГруппа"	, Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаТоваров.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ТаблицаТоваров.Колонки.Добавить("Субконто1");
	ТаблицаТоваров.Колонки.Добавить("Субконто2");
	ТаблицаТоваров.Колонки.Добавить("Субконто3");
	
	ТаблицаТоваров.Колонки.Добавить("СчетУчетаНДС"			, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС"				, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначение"	, Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеДоходовИЗатрат", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаТоваров.Колонки.Добавить("ВидДеятельностиНДС"	, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиНДС"));
	ТаблицаТоваров.Колонки.Добавить("ВидНалоговойДеятельности", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговойДеятельности"));
		
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаЗатрат, "СчетЗатрат");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаЗатрат.Забалансовый , "Забалансовый");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяЗатрат 	, "СтатьяЗатрат");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НоменклатурнаяГруппа 		, "НоменклатурнаяГруппа");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации , "ПодразделениеОрганизации");
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто1 		, "Субконто1");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто2 		, "Субконто2");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто3 		, "Субконто3");
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНДСПриобретений	, "СчетУчетаНДС");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтавкаНДСВознаграждения	, "СтавкаНДС");
		
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначение 	, "НалоговоеНазначение");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначение.ВидДеятельностиНДС 	, "ВидДеятельностиНДС");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначение.ВидНалоговойДеятельности , "ВидНалоговойДеятельности");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, "НалоговоеНазначениеДоходовИЗатрат");
	
    // Добавим колонку "Амортизируется" и заполним ее общим алгоритмом
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьПризнакАмортизируетсяПриПоступлении(
			, // ТаблицаПоТоварам
			, // ТаблицаПоТаре
			ТаблицаТоваров, // ТаблицаПоУслугам
			, // ТаблицаПоОборудованию
			, // ТаблицаПоОбъектамСтроительства 
			, //ТаблицаПоБланкам 
			"СчетЗатрат" // ИмяРеквизитаСчетЗатрат 
		);
	КонецЕсли; 	

	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Истина, Истина, "Сумма");

КонецПроцедуры // ПодготовитьТаблицуУслугВознагражденияРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Процедура ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента)

	// Создаем колонку "СуммаУпр"
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаВзаиморасчетов Цикл
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсВзаиморасчетов, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента)

	ТаблицаВзаиморасчетов = РезультатЗапросаПоДокументамРасчетовСКонтрагентами.Выгрузить();
	
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаРегл",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0), ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	// Если сумма взиморасчетов по документу превышает итог по таблице взаиморасчетов, то 
	// добавляем в таблицу новую строку со сылкой на проводимый документ
	СуммаВзаиморасчетовПоТекущемуДокументу = СуммаВзаиморасчетов - ТаблицаВзаиморасчетов.Итог("СуммаВзаиморасчетов");
	Если СуммаВзаиморасчетовПоТекущемуДокументу > 0 Тогда
		НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВзаиморасчетовПоТекущемуДокументу;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетовПоТекущемуДокументу, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														мВалютаРегламентированногоУчета,
														КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
	КонецЕсли;

	ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказПоставщику, 
		|ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика, Неопределено"), "Сделка");
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(Сделка, "Сделка");
	КонецЕсли;
	
	ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	// проверим соответсвие реквизитов налогового учета НДС
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда		
		
		Если НЕ СтруктураШапкиДокумента.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомиссионером_НК Тогда
			 
			ОбщегоНазначения.СообщитьОбОшибке("В договоре с комиссионером указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!",Отказ,Заголовок);
				 
		КонецЕсли;
		
		
	КонецЕсли;

	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		,                 // Проверка шапки, табличная часть не указывается
		,
		Отказ, 
		Заголовок, 
		"Поступление",    // ВидОперации
		Истина            // ЭтоЗатраты 
	);	
	

	                                
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента,Контрагент, ДоговорКонтрагента, СпособРасчетаКомиссионногоВознаграждения, КратностьВзаиморасчетов");

	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка");
	КонецЕсли;

	Если СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли
	 ИЛИ СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
		СтруктураОбязательныхПолей.Вставить("ПроцентКомиссионногоВознаграждения");
		
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, СтавкаНДС");
        
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для каждого СтрокаТабличнойЧасти из Товары цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТабличнойЧасти.НомерСтроки) +
		""" табличной части ""Товары"" обнаружено отрицательное значение в реквизитах: ";
		Выводить = Ложь;
		
		Если СтрокаТабличнойЧасти.Количество < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Количество,";
		КонецЕсли;
		Если СтрокаТабличнойЧасти.КоличествоМест < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Количество мест,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.Сумма < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаВознаграждения < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма вознаграждения,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаНДС < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаНДСВознаграждения < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС вознаграждения,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаНДСПередачи < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС передачи,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаПередачи < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма передачи,";
		КонецЕсли;
		Если Выводить Тогда
			СтрокаНачалаСообщенияОбОшибке = Лев(СтрокаНачалаСообщенияОбОшибке, СтрДлина(СтрокаНачалаСообщенияОбОшибке)-1);
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС +
				                   "Отрицательных значений здесь быть не должно!", Отказ, Заголовок);

		КонецЕсли;
		
	КонецЦикла;
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
    	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары");
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоТоварам,
					"Товары",
					Отказ, 
					Заголовок, 
					"Реализация",    // ВидОперации
					Ложь             // ЭтоЗатраты 
	);
	
	// Схемы реализации должны быть заполнены правильно
	СтруктураПараметровПроверки = Новый Структура;
	СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
	СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимости");
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "Товары", , ТаблицаПоТоварам, 
							                             СтруктураПараметровПроверки,
														 СтруктураШапкиДокумента,
							                             Отказ, Заголовок);	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Документы расчетов с контрагентом".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументРасчетовСКонтрагентом, СуммаВзаиморасчетов");

	// Теперь вызовем общую процедуру проверки.	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	Если (СуммаВзаиморасчетов - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0)) < ТаблицаПоДокументамРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма по таблице документов расчетов с контрагентами превышает сумму взаиморасчетов по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамВознаграждения,
								ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамВознаграждения, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	
	ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамВознаграждения, Отказ, Заголовок);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоДокументамРасчетовСКонтрагентом,
	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;
	  
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

КонецПроцедуры // ДвиженияПоРегистрам()

// Формируем движения по регистру ТоварыОрганизаций
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Количество()=0 Тогда Возврат; КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Проверка остатков
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
				
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// Формируем движения по регистру ТоварыОрганизацийРегл
Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	Если ТаблицаПоТоварам.Количество() = 0 Тогда 
		Возврат; 
	КонецЕсли;
	
	ТаблицаПоТоварамКопия = ТаблицаПоТоварам.Скопировать();
	Для Каждого СтрокаТоваров Из ТаблицаПоТоварамКопия Цикл
		Если СтрокаТоваров.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый Тогда
			СтрокаТоваров.СчетУчетаБУ             = СтрокаТоваров.ПринятыеСчетУчетаБУ;
			СтрокаТоваров.НалоговоеНазначение     = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли; 
	КонецЦикла; 
	
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	НаборДвижений = Движения.ТоварыОрганизацийРегл;
	
	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКопия);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		
		Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "НалоговоеНазначение", Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
		КонецЕсли; 
				
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

// По результату запроса по шапке документа формируем движения по упр. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		// Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
		СуммаДолга = ?(СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение, СуммаДокумента - СуммаВознаграждения, СуммаДокумента);

		// По регистру ВзаиморасчетыСКонтрагентами.
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументамРасчетовСКонтрагентом, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");

		ИначеЕсли СуммаДолга<>0 Тогда

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
			                                       СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                                       СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			                                       СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
			                                       СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                                       СтруктураШапкиДокумента.КурсДокумента, 
			                                       СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                                       СтруктураШапкиДокумента.КратностьДокумента, 
			                                       СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
		КонецЕсли;

		// Долг комиссионера за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение и СуммаВознаграждения<>0 Тогда

			// По регистру ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		  = Контрагент;
			СтрокаДвижений.Организация  	  = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		Если (НЕ ЗначениеЗаполнено(Сделка) 
		 Или ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя")) и (СуммаДолга<>0) Тогда
		
			// По регистру РасчетыСКонтрагентами
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента    = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		     = Контрагент;
			СтрокаДвижений.Организация  	     = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
														
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;

		// Долг перед комиссионером за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если (Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение) и (СуммаВознаграждения<>0) Тогда

			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		  = Контрагент;
			СтрокаДвижений.Организация  	  = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		Если  СуммаВознаграждения<>0 Тогда
			// По регистру Закупки.
			НаборДвижений = Движения.Закупки;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент 		  = Контрагент;
			СтрокаДвижений.Организация 		  = Организация;
			СтрокаДвижений.ДокументЗакупки    = Ссылка;
			СтрокаДвижений.Проект             = Проект;
			СтрокаДвижений.Подразделение      = Подразделение;
			СтрокаДвижений.СтатусПартии       = Перечисления.СтатусыПартийТоваров.Купленный;
			СтрокаДвижений.Номенклатура       = Неопределено;
			СтрокаДвижений.ХарактеристикаНоменклатуры = Неопределено;
		
			СтрокаДвижений.Количество         = 1;

			СтрокаДвижений.Стоимость          = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
			СтрокаДвижений.НДС                = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаНДСВознаграждения,
													СтруктураШапкиДокумента.ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
			НаборДвижений.мПериод             = Дата;
			НаборДвижений.мТаблицаДвижений    = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.Закупки.ВыполнитьДвижения();
			КонецЕсли;
        КонецЕсли;
        
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
		НаборДвижений = Движения.ТоварыПереданные;

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
		
			ТаблицаПереданные = ТаблицаПоТоварам.Скопировать();
			ТаблицаПереданные.Колонки.СуммаВзаиморасчетов.Имя = "СуммаВзаиморасчетовПродажи";
			ТаблицаПереданные.Колонки.СуммаВзаиморасчетовПередачи.Имя = "СуммаВзаиморасчетов";
				
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПереданные);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
							
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента, , Истина));
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
						
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ Продажи

		НаборДвижений = Движения.Продажи;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаПродажи = ТаблицаПоТоварам.Скопировать();
		ТаблицаПродажи.Колонки.СуммаУпр.Имя = "Стоимость";
		ТаблицаПродажи.Колонки.НДС.Имя      = "НДСВрем";
		ТаблицаПродажи.Колонки.НДСУпр.Имя   = "НДС";
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПродажи,ТаблицаДвижений,Проект,Дата,"Продажи");
			
		Иначе
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродажи, ТаблицаДвижений);
			
		КонецЕсли;
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,   "ДокументПродажи");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли;

	// Движения по посредническим услугам.
	Если СуммаВознаграждения <> 0 Тогда

		СуммаВознагражденияУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
													
		Если мУчетнаяПолитика.НеВключатьНДСВЗатраты Тогда
			СуммаНДСВознагражденияУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаНДСВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
													
			СуммаВознагражденияУпр = СуммаВознагражденияУпр - СуммаНДСВознагражденияУпр;
													
		КонецЕсли; 

		
		ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();

		НоваяСтрока = ТаблицаЗатрат.Добавить();
		НоваяСтрока.Подразделение = Подразделение;
		НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		НоваяСтрока.Заказ = Сделка;
		НоваяСтрока.Сумма = СуммаВознагражденияУпр;

		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			СтруктураШапкиДокумента, 
			ТаблицаЗатрат,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
		);
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамВознаграждению, Отказ, Заголовок)

	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в бухгалтерском учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
		
	// Движения по регистрам ...НалоговыйУчет		
	Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
			
		// ПО РАСЧЕТАМ ЗА ТОВАРЫ
		НаборДвижений = Движения.ПродажиНалоговыйУчет;
			
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСВал");
		ТаблицаПродаж = ТаблицаКопия.Скопировать();
		
		Сч = 0;
		Пока Сч < ТаблицаПродаж.Количество() Цикл
			СтрокаТаблицы = ТаблицаПродаж.Получить(Сч);
			Если СтрокаТаблицы.СуммаСНДСВал = 0 Тогда
				ТаблицаПродаж.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПродаж.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
		ТаблицаПродаж.Колонки.СделкаРегл.Имя = "Сделка";
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю, "Событие");
		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
			Движения.ПродажиНалоговыйУчет.Записать();
				
		КонецЕсли;
			
		Если СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда
				
			// Отразим зачет вознаграждения в регистре ПродажиНалоговыйУчет
			// Для этого последовательно "спишем суммы" из таблицы по проданным товарам,
			// уменьшив их на сумму возвнаграждения (СНДС)
			
			ТаблицаДвиженийЗачетЗадолженности = ТаблицаДвижений.Скопировать();
			ТаблицаДвиженийЗачетЗадолженности.Очистить();
			
			СуммаКСписанию 		= ТаблицаПоУслугамВознаграждению.Итог("СуммаСНДСВал");
			Для каждого Строка Из ТаблицаДвижений Цикл
				
				Если СуммаКСписанию <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.СуммаВзаиморасчетов <= 0 Тогда
					Продолжить;	
				КонецЕсли;
				
				СтрокаЗачета = ТаблицаДвиженийЗачетЗадолженности.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗачета, Строка);				
				
				СуммаЗачета = Мин(СуммаКСписанию, Строка.СуммаВзаиморасчетов);
				
				СтрокаЗачета.СуммаВзаиморасчетов     = СуммаЗачета;
				
				СуммаКСписанию = СуммаКСписанию - СуммаЗачета; 
				
			КонецЦикла;
			
			Если СуммаКСписанию > 0 Тогда
			    // очень странно, конечно
				Сообщить("Внимание! Сумма вознаграждения превышает задолженность за проданный товар!");	
			КонецЕсли;			
			
			ТаблицаДвиженийЗачетЗадолженности.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем, "Событие");
			
			Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
					
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийЗачетЗадолженности;
				
				Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
				Движения.ПродажиНалоговыйУчет.Записать();
					
			КонецЕсли;
		КонецЕсли;
			
		// ПО РАСЧЕТАМ ЗА УСЛУГУ КОМИССИОННОГО ВОЗНАГРАЖДЕНИЯ
		НаборДвижений = Движения.ПриобретенияНалоговыйУчет;
			
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
		ТаблицаКопия = ТаблицаПоУслугамВознаграждению.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСВал");
		ТаблицаПриобретений = ТаблицаКопия.Скопировать();
		
		Сч = 0;
		Пока Сч < ТаблицаПриобретений.Количество() Цикл
			СтрокаТаблицы = ТаблицаПриобретений.Получить(Сч);
			Если СтрокаТаблицы.СуммаСНДСВал = 0 Тогда
				ТаблицаПриобретений.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПриобретений.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
		ТаблицаПриобретений.Колонки.СделкаРегл.Имя   = "Сделка";
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
			Движения.ПриобретенияНалоговыйУчет.Записать();
				
		КонецЕсли;
			
		Если СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда
			//Отразим зачет вознаграждения регистре ПриобретенияНалоговыйУчет
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику, "Событие");
			
			Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
					
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
				Движения.ПриобретенияНалоговыйУчет.Записать();
					
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;	
		
	// ОжидаемыйИПодтвержденныйНДСПродаж
	Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// ПО ПРОДАЖАМ ТОВАРОВ	
		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
			
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл,СтавкаНДС,НалоговоеНазначение","СуммаБезНДСВал,СуммаНДСВал,СуммаСНДСПередачи,СуммаНДСПередачи");
		// оставим в таблице только отличия между ценой передачи и ценой продажи
		Инд = 0;
		
		Пока Инд < ТаблицаКопия.Количество() Цикл
			Строка = ТаблицаКопия[Инд];
			
			Если Строка.СуммаБезНДСВал = Строка.СуммаСНДСПередачи - Строка.СуммаНДСПередачи  Тогда
				ТаблицаКопия.Удалить(Строка);
			Иначе
				
				Строка.СуммаБезНДСВал = Строка.СуммаБезНДСВал - (Строка.СуммаСНДСПередачи - Строка.СуммаНДСПередачи);
				Строка.СуммаНДСВал    = Строка.СуммаНДСВал - Строка.СуммаНДСПередачи;
				
				Инд = Инд + 1;
			КонецЕсли;
			
		
		КонецЦикла;
		ТаблицаПродаж = ТаблицаКопия.Скопировать();
			
		ТаблицаПродаж.Свернуть("СделкаРегл,СтавкаНДС,НалоговоеНазначение","СуммаБезНДСВал,СуммаНДСВал");
		ТаблицаПродаж.Колонки.СделкаРегл.Имя 	 = "Сделка";
		ТаблицаПродаж.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаПродаж.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
		
		Сч = 0;
		Пока Сч < ТаблицаПродаж.Количество() Цикл
			СтрокаТаблицы = ТаблицаПродаж.Получить(Сч);
			Если СтрокаТаблицы.БазаНДС + СтрокаТаблицы.СуммаНДС = 0 Тогда
				ТаблицаПродаж.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
			
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
				
		КонецЕсли;
			
		// ПО УСЛУГЕ КОМИССИОННОГО ВОЗНАГРАЖДЕНИЯ
		// если комиссионер - нерезидент (т.е. документ не гривневый) его услуги считаются 
		// оказанными на территории Украины, а потому облагаются по ставке 20%.
		// В начале начисляются обязательства, в следующем месяце - кредит.

		Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			// Если резидент - тогда все согласно п. 4.7 Закона об НДС.
			
			НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
				
			ТаблицаКопия = ТаблицаПоУслугамВознаграждению.Скопировать();
			ТаблицаКопия.Свернуть("СДелкаРегл,СтавкаНДС,НалоговоеНазначение","СуммаБезНДСВал,СуммаНДСВал");
			ТаблицаКопия.Колонки.СДелкаРегл     .Имя = "СДелка";
			ТаблицаКопия.Колонки.СуммаБезНДСВал     .Имя = "БазаНДС";
			ТаблицаКопия.Колонки.СуммаНДСВал        .Имя = "СуммаНДС";
			
			Сч = 0;
			Пока Сч < ТаблицаКопия.Количество() Цикл
				СтрокаТаблицы = ТаблицаКопия.Получить(Сч);
				Если СтрокаТаблицы.БазаНДС + СтрокаТаблицы.СуммаНДС = 0 Тогда
					ТаблицаКопия.Удалить(СтрокаТаблицы);
				Иначе
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, "СобытиеНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС      , "КодОперации");
				
			Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
					
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
				Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
				Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
					
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;	

КонецПроцедуры

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
	// Долг перед комиссионером за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
	Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		И СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом
		И СуммаВознаграждения <> 0 Тогда
	   
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		
		ТаблицаВознаграждения = ТаблицаПоВзаиморасчетам.СкопироватьКолонки();		
		
		НоваяСтрока = ТаблицаВознаграждения.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.Сделка                        = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВознаграждения;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СуммаВознаграждения, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			КурсВзаиморасчетов, 1, 
			КратностьВзаиморасчетов, 1);
		
		УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаВознаграждения, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	   
	КонецЕсли;
	
КонецПроцедуры

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), "КратностьДокумента");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	КонецЕсли;
			
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для регл. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");

	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
		Строка.КорСубконтоБУ1 = СтрокаТЧ.СубконтоРасходовБУ1;
		Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоРасходовБУ2;
		Строка.КорСубконтоБУ3 = СтрокаТЧ.СубконтоРасходовБУ3;

		Строка.СчетУчетаБУ 			= Строка.СчетУчетаБУ;
		Строка.ПринятыеСчетУчетаБУ 	= Строка.ПринятыеСчетУчетаБУ;
		
		Строка.НалоговоеНазначениеПоФакту 		= СтрокаТЧ.НалоговоеНазначение;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл() 

// Заполняет регл. реквизиты строки табличной части
//
Процедура ЗаполнитьСтрокуТоварыРегл(СтрокаТабличнойЧасти, Выборка)

КонецПроцедуры // ЗаполнитьСтрокуТоварыРегл()

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам), ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		
	КонецЦикла; 
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");

	//Заполним общие поля для всех видов учета
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	// Заказ, на который списывается
	ТаблицаДвижений.ЗаполнитьЗначения(?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено),"ЗаказСписания");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия,"КодОперацииПартииТоваров");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	//Заполним поля специфичные для регл. учета
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	КонецЕсли;	

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для упр. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр()

// Процедура вызывается из тела процедуры ДвиженияПоПриобретениюУслуг
// Формирует движения по регистру подсистемы учета НДС "НДСПокупки"
// для отражения поступления услуг от комиссионера
Процедура ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШапкиДокумента, ТабЧасть,ТаблицаАвансов, Отказ) Экспорт
КонецПроцедуры // ДвиженияРегистровПодсистемыНДСПоступление()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ);

КонецПроцедуры

//Заполняет счета учета номенклатуры и затрат в шапке документа
Процедура ЗаполнитьСчетаУчетаВШапке() Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаШапки(ЭтотОбъект, ОтражатьВБухгалтерскомУчете, Истина, Ложь);
	
КонецПроцедуры

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина) Экспорт
 
	//Счета учета затрат в этом документе с использованием этой функции не заполняются
	
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;	
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
	
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",			СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансамПолученным",	СчетаУчета.СчетАвансовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоВознаграждению",	    СчетаУчета.СчетРасчетов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансамВыданным",		СчетаУчета.СчетАвансов);
		// счет НДС для вознаграждения заполним по умолчанию 6442-м
		СтруктураСчетов.Вставить("СчетУчетаНДСПродаж",			СчетаУчета.СчетУчетаНДСПродаж);
		СтруктураСчетов.Вставить("СчетУчетаНДСПриобретений",	СчетаУчета.СчетУчетаНДСПриобретений);
		
		СтруктураСчетов.Вставить("СчетУчетаНДСПродажПодтвержденный", СчетаУчета.СчетУчетаНДСПродажПодтвержденный);
		
	КонецЕсли;
	
	
	Возврат СтруктураСчетов;

КонецФункции

// Дополняет новую строку реквизитами регламентированного учета из исходной строки
//
// Параметры:
// НоваяСтрока    - строка, которую необходимо дополнить
// ИсходнаяСтрока - строка, из которой берутся исходные данные
//
Процедура ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока)
	
	НоваяСтрока.СчетУчетаБУ   	 			= ИсходнаяСтрока.СчетУчетаБУ;
	НоваяСтрока.СхемаРеализации  			= ИсходнаяСтрока.СхемаРеализации;	
	НоваяСтрока.ПринятыеСчетУчетаБУ   		= ИсходнаяСтрока.ПринятыеСчетУчетаБУ;
	НоваяСтрока.НалоговоеНазначение    	    = ИсходнаяСтрока.НалоговоеНазначение;
	НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат	= ИсходнаяСтрока.НалоговоеНазначениеДоходовИЗатрат;

КонецПроцедуры // ДополнитьСтрокуРегл

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоВознаграждению");
				
		Если  СтруктураШапкиДокумента.УчитыватьНДС 
			И СтруктураШапкиДокумента.ЕстьНДС Тогда 
			
			Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
				СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПриобретений");
			КонецЕсли;
			
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПродаж");
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПродажПодтвержденный");
			СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл()

//Формирует структуру параметров для передачи в процедуры зачета аванса по ссылке на документ
Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоУслугам(СтруктураШапкиДокумента, Заголовок = Неопределено, СуммаДокументаСНДС, ТаблицаПоВзаиморасчетам = Неопределено ) Экспорт
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("ВидДокумента,
										  |, Организация, ВалютаРегламентированногоУчета, СпособВеденияВзаиморасчетов
										  |, ОтражатьВБухгалтерскомУчете
										  |, ВалютаДокумента, КурсДокумента, КратностьДокумента
										  |, Контрагент, Сделка
										  |, ДоговорКонтрагента, УчетАгентскогоНДС, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом
										  |, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов
										  |");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	                                                               
	СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамВыданным);
	СтруктураПараметров.Вставить("ВидОперации", Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",СуммаДокументаСНДС);
	СтруктураПараметров.Вставить("Период",Дата);	
	СтруктураПараметров.Вставить("Дата",Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	
	//Определение вида операции
	СтруктураПараметров.Вставить("Направление", "Поступление");	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат",БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента,СтруктураПараметров.ВидОперации).РасчетыВозврат);
	
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	Возврат СтруктураПараметров;
КонецФункции

Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоТоварам(СтруктураШапкиДокумента, Заголовок = Неопределено, ТаблицаПоВзаиморасчетам = Неопределено) Экспорт	
		
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("ВидДокумента,
										  |, Организация, ВалютаРегламентированногоУчета, СпособВеденияВзаиморасчетов
										  |, ОтражатьВБухгалтерскомУчете
										  |, ВалютаДокумента, КурсДокумента, КратностьДокумента
										  |, Контрагент, Сделка
										  |, ДоговорКонтрагента, УчетАгентскогоНДС, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом
										  |, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов
										  |");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	                                                               
	СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамПолученным);
	СтруктураПараметров.Вставить("ВидОперации", Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	
	СтруктураПараметров.Вставить("Период",Дата);	
	СтруктураПараметров.Вставить("Дата",Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	
	//Определение вида операции
	СтруктураПараметров.Вставить("Направление", "Выбытие");	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат",БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента,СтруктураПараметров.ВидОперации).РасчетыВозврат);
	
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	Возврат СтруктураПараметров;
КонецФункции

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетов(СтруктураШапкиДокумента, ТаблицаПоТоварам, ПоВознаграждению = Ложь)

	// ТОВАРЫ
	ТаблицаДвижений  = ТаблицаПоТоварам.Скопировать();
	ТаблицаДвижений.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	
	ТаблицаДвижений.Колонки.Добавить("Контрагент");
	ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
	ТаблицаДвижений.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент        , "Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговораКонтрагента, "ВидДоговораКонтрагента");
	
	Если ПоВознаграждению Тогда
		// Контрагент выступает в качестве поставщика услуг
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВознаграждению		, "СчетОплаты");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамВыданным 	, "СчетАванса");
		
	Иначе
		// Контрагент выступает в качестве покупателя товаров
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом		, "СчетОплаты");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамПолученным 	, "СчетАванса");
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
КонецФункции

//Формирует структуру параметров для передачи в процедуры зачета аванса по ссылке на документ
Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаОтчетКомиссионера(СтруктураШапкиДокумента, Заголовок = Неопределено, ПоВознаграждению = Ложь) Экспорт

	ВидДокумента = Ссылка.Метаданные().Имя;
	Если НЕ ЗначениеЗаполнено(Заголовок) тогда
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли;
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("Организация,ВалютаДокумента,Контрагент,ДоговорКонтрагента,ОтражатьВБухгалтерскомУчете");
	
	Для Каждого Реквизит из СтруктураПараметров Цикл
		СтруктураПараметров.Вставить(Реквизит.Ключ,?(СтруктураШапкиДокумента.Свойство(Реквизит.Ключ),СтруктураШапкиДокумента[Реквизит.Ключ],Неопределено));
	КонецЦикла;
	
	Если ПоВознаграждению Тогда
		СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Поступление);	
	Иначе
		СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Выбытие);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Расчеты);
	                     
	СтруктураПараметров.Вставить("ВидДокумента"      , ВидДокумента);	
	СтруктураПараметров.Вставить("Регистратор"       , Ссылка);	
	СтруктураПараметров.Вставить("Заголовок"         , Заголовок);	
	СтруктураПараметров.Вставить("Период"            , Дата);	
	
	СтруктураПараметров.Вставить("КурсДокумента"     , ЗаполнениеДокументов.КурсДокумента(Ссылка,мВалютаРегламентированногоУчета));	
	СтруктураПараметров.Вставить("КратностьДокумента", ЗаполнениеДокументов.КратностьДокумента(Ссылка,мВалютаРегламентированногоУчета));	
	
	
	Возврат СтруктураПараметров;
КонецФункции

// По результату запроса по шапке документа формируем движения по регл. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамВознаграждения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений по регистру "Учет продаж и себестоимости".
	РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам
	);
	
	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
	
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СчетДоходовБУ,СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3","ПроводкиСуммаСНДСРегл");
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		// Выручка
		Если СтрокаТаблицы.ПроводкиСуммаСНДСРегл = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = "Реализация товаров";
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
		Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);

		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		    Проводка.СуммаНУКт 				= СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Проводки по НДС
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл,СчетУчетаНДС,СчетДоходовБУ,СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,НоменклатурнаяГруппа"+?(СтруктураШапкиДокумента.ЕстьНалогНаПрибыль,",НалоговоеНазначениеДоходовИЗатрат",""),"ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,СуммаНДСПередачи");
		
		Для Каждого СтрокаТаблицы Из ТаблицаКопия Цикл
			
			Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
				ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
				
				Если СтрокаТаблицы.ПроводкиСуммаНДСРегл <> СтрокаТаблицы.СуммаНДСПередачи Тогда
				    // сфорируем проводку по разнице по НДС в связи с разными ценами передачи и продажи
					
					ПроводкаКорректировки =  ПроводкиБУ.Добавить();
					
					ПроводкаКорректировки.Период                     = СтруктураШапкиДокумента.Дата;
					ПроводкаКорректировки.Организация                = СтруктураШапкиДокумента.Организация;
					ПроводкаКорректировки.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл - СтрокаТаблицы.СуммаНДСПередачи;
					ПроводкаКорректировки.Содержание                 = "НДС: налоговые обязательства: корректировка по цене продажи";
					ПроводкаКорректировки.НомерЖурнала               = "";

					ПроводкаКорректировки.СчетДт = СтруктураШапкиДокумента.СчетУчетаНДСПродажПодтвержденный;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "Сделки", 		СтрокаТаблицы.СделкаРегл);
							
					ПроводкаКорректировки.СчетКт = СтруктураШапкиДокумента.СчетУчетаНДСПродаж;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "Сделки", 		СтрокаТаблицы.СделкаРегл);
						
				КонецЕсли;													  
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период                     = СтруктураШапкиДокумента.Дата;
				Проводка.Организация                = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				Проводка.Содержание                 = "НДС: налоговые обязательства: отгрузка";
				Проводка.НомерЖурнала               = "";

				Проводка.СчетДт         = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаНДСПродажПодтвержденный;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла; 		
		
	КонецЕсли;	
	
	// Проводки по взаиморасчетам за товары
	СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаОтчетКомиссионера(СтруктураШапкиДокумента, Заголовок);
	
	ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетов(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации, Отказ);
		
	
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		
		БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляРасчетыПоПриобретениеРеализацияВВалюте(Ссылка);
		БухгалтерскийУчетРасчетовСКонтрагентами.СформироватьДвиженияПоРасчетыПриобретениеРеализацияВВалюте(СтруктураПараметров, Отказ, ЭтотОбъект);
		
		Если НЕ УдержатьКомиссионноеВознаграждение Тогда
			СтруктураПараметров.НаправлениеДвижения	= Перечисления.НаправленияДвижений.Поступление;
			СтруктураПараметров.РегистрРасчетов		= "РасчетыПоПриобретениюВВалютеОрганизации";
			
			РеестрПлатежей = Новый ТаблицаЗначений();
			РеестрПлатежей.Колонки.Добавить("ДоговорКонтрагента");
			РеестрПлатежей.Колонки.Добавить("СделкаРегл");
			РеестрПлатежей.Колонки.Добавить("СуммаСНДСВал");
			РеестрПлатежей.Колонки.Добавить("СуммаСНДСРегл");
			РеестрПлатежей.Колонки.Добавить("СчетОплаты");
			РеестрПлатежей.Колонки.Добавить("СчетАванса");
			
			Строка = РеестрПлатежей.Добавить();
			Строка.ДоговорКонтрагента= ДоговорКонтрагента;
			Строка.СделкаРегл        = ?(СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом, Неопределено, СтруктураШапкиДокумента.Сделка);
			Строка.СуммаСНДСВал		 = СуммаВознаграждения;
			Строка.СуммаСНДСРегл	 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаСНДСВал, СтруктураПараметров.ВалютаДокумента, мВалютаРегламентированногоУчета,
																			  СтруктураПараметров.КурсДокумента, 1, СтруктураПараметров.КратностьДокумента, 1);
			
			//Определяем, учитывается ли аванс в документе
			УчитыватьАванс = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределятьАвансыПриПроведении(СтруктураПараметров.Период, СтруктураПараметров.Организация);
			
			Если УчитыватьАванс Тогда
				Строка.СчетОплаты		 = СчетУчетаРасчетовПоАвансамВыданным;
				Строка.СчетАванса		 = СчетУчетаРасчетовПоВознаграждению;
			Иначе
				Строка.СчетОплаты		 = СчетУчетаРасчетовПоВознаграждению;
				Строка.СчетАванса		 = СчетУчетаРасчетовПоАвансамВыданным;
			КонецЕсли;
			
			СтруктураПараметров.Таблица = РеестрПлатежей;
			
			БухгалтерскийУчетРасчетовСКонтрагентами.СформироватьДвиженияПоРасчетыПриобретениеРеализацияВВалюте(СтруктураПараметров, Отказ, ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;

	Если СуммаВознаграждения <> 0 Тогда
		

		ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();

		НоваяСтрока = ТаблицаЗатрат.Добавить();
		НоваяСтрока.Подразделение = ПодразделениеОрганизации;
		НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		НоваяСтрока.Заказ = Сделка;
		НоваяСтрока.СчетЗатрат = СчетУчетаЗатрат;
		НоваяСтрока.НалоговоеНазначение = НалоговоеНазначение;
		НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеДоходовИЗатрат;
		НоваяСтрока.ПроводкиСуммаБезНДСРегл = ТаблицаПоУслугамВознаграждения.Итог("ПроводкиСуммаБезНДСРегл");
		НоваяСтрока.СуммаНДСРегл = ТаблицаПоУслугамВознаграждения.Итог("СуммаНДСРегл");
		НоваяСтрока.ПроводкиСуммаНДСРегл = ТаблицаПоУслугамВознаграждения.Итог("ПроводкиСуммаНДСРегл");

		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			СтруктураШапкиДокумента, 
			ТаблицаЗатрат,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
		);
			
		
		Для каждого СтрокаТаблицы Из ТаблицаПоУслугамВознаграждения Цикл
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период          = Дата;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
			Проводка.Содержание      = "Услуги вознаграждения";
			Проводка.НомерЖурнала    = "";

			Проводка.СчетДт          = СтрокаТаблицы.СчетЗатрат;
			
			ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТаблицы.СчетЗатрат);

			Если ПроизводственныеРасходы Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения"       , СтрокаТаблицы.ПодразделениеОрганизации);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат"        , СтрокаТаблицы.СтатьяЗатрат);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			КонецЕсли;
			
			Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВознаграждению;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;
			
			Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И
				СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
				СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат  <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				
				Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
				
			КонецЕсли;
			
		КонецЦикла;
				
		// Проводки по взаиморасчетам за услуги вознаграждения
		СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаОтчетКомиссионера(СтруктураШапкиДокумента, Заголовок, Истина);
			
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетов(СтруктураШапкиДокумента, ТаблицаПоУслугамВознаграждения, Истина);
		СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации, Отказ);
			
				
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
			Для каждого СтрокаТаблицы Из ТаблицаПоУслугамВознаграждения Цикл
				
				// НДС по услугам
				Если (СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
					ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0) Тогда
					
					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период                     = СтруктураШапкиДокумента.Дата;
					Проводка.Организация                = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					Проводка.Содержание                 = "НДС: налоговый кредит: отгрузка";
					Проводка.НомерЖурнала               = "";

					Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СДелки"   , СтрокаТаблицы.СделкаРегл);
					
					Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВознаграждению;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СДелки"   , СтрокаТаблицы.СделкаРегл);
					Проводка.ВалютаКт                   = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт            = СтрокаТаблицы.ПроводкиСуммаНДСВал;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураСложныхПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый", "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ",  "ПринятыеСчетУчетаБУ");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС", "Ссылка.СчетУчетаНДСПродаж");
	
	СтруктураПолей.Вставить("СхемаРеализации"          , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"            , "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"       , "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"       , "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"       , "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"           , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"      , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"      , "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"      , "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("НалоговоеНазначение" 	   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности" , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"       , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат",      "НалоговоеНазначениеДоходовИЗатрат");	
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат",       "НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидДоговора", "ВидДоговораКонтрагента");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "СхемаНалоговогоУчета", "СхемаНалоговогоУчета");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СчетУчетаЗатрат", "Ссылка", "СчетЗатрат");	
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "НеОтноситьНаЗатратыПоНУ", "НеОтноситьНаЗатратыПоНУ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НалоговоеНазначение", "ВидДеятельностиНДС", "ВидДеятельностиНДС");
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");

КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	СтруктураШапкиДокумента.Вставить("Комиссионер", Контрагент); // Для контроля по регистру "Остатки организаций"
	СтруктураШапкиДокумента.Вставить("Склад", Справочники.Склады.ПустаяССылка()); 

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"         , "ВалютаУправленческогоУчета"                , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"		   , "КурсВалютыУправленческогоУчета"            , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВедениеВзаиморасчетов"                     , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВалютаВзаиморасчетов"                      , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "Организация"                               , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВестиПоДокументамРасчетовСКонтрагентом"    , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"            , "ВидОперации"                               , "СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"	   , "ОтражатьВРегламентированномУчете"          , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"   , "ВедениеУчетаПоПроектам"                    , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидДоговора"                   			 , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");

	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("СписаниеПартий", Ложь);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);	
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ) 

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		Иначе
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитикаБух.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитикаБух.ЕстьНДС);
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугамВознаграждения, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураСложныхПолей=Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                  , "Сумма");
	СтруктураПолей.Вставить("СуммаПередачи"             , "СуммаПередачи");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                    , "СуммаНДС");
	СтруктураПолей.Вставить("СуммаНДСПередачи"          , "СуммаНДСПередачи");
	СтруктураПолей.Вставить("СуммаВознаграждения"       , "СуммаВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДСВознаграждения"   , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("СуммаНДСВознаграждения" 	, "СуммаНДСВознаграждения");	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"      , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры", "ПринадлежностьНоменклатуры");

	// Дополним полями, нужными для упр. и регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей,СтруктураСложныхПолей);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, ,СтруктураСложныхПолей);

	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияВознаграждение = Новый Соответствие;
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	

	// Отдельно подготовим таблицу "с услугами" по вознаграждению
	ТаблицаПоУслугамВознаграждения = ПодготовитьТаблицуУслугВознаграждения(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);

КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Возврат;
		КонецЕсли;

		Если Основание.Проведен Тогда

			// Сделку заполняем только если взаиморасчеты ведутся не по договору в целом
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 

			 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				Сделка = Основание.Сделка;
			КонецЕсли;

			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

			ЗаполнитьТоварыУпр(Основание);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда

			Сделка = Основание;

			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

			ЗаполнитьТоварыУпр();
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровОтданныхНаКомиссию") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Заполним флаги учета налогов.
		УчитыватьНДС     = Истина;
		СуммаВключаетНДС = Истина;

		Сделка                  = Основание.Сделка;
		ВалютаДокумента         = Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

		ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр(Основание);

	КонецЕсли;

	ОтражатьВБухгалтерскомУчете = Истина;
	ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете);

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Сделка) И Сделка <> Неопределено Тогда
		Сделка = Неопределено;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);

    // Очистим реквизиты НДС по вознаграждению, если комиссионер-нерезидент
	Если НЕ ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
	   СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.ПустаяСсылка();
	   Для каждого СтрокаТЧ Из Товары Цикл
	   		СтрокаТЧ.СуммаНДСВознаграждения = 0;	
	   КонецЦикла; 
   КонецЕсли;
   
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента(
			ЭтотОбъект,
			"СчетУчетаЗатрат",  // ИмяРеквизитаСчетЗатрат
			"Субконто",  		// ИмяРеквизитаСубконто
			Истина				// ЕстьРеквизитНалоговоеНазначение
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Реализация",
			Дата,
			Организация,
			Товары,				// ТабличнаяЧастьТовары
			Неопределено,		// ТабличнаяЧастьВозвратнаяТара
			Неопределено,   	// ТабличнаяЧастьУслуги
			Неопределено,   	// ТабличнаяЧастьОборудование
			Неопределено, 		// ТабличнаяЧастьОбъектыСтроительства
			Неопределено 	    // ТабличнаяЧастьБланкиСтрогогоУчета
		);
	
	КонецЕсли;	

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаНДСВознаграждения = Товары.Итог("СуммаНДСВознаграждения");
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения")+ 
	                      ?(УчитыватьНДС И (Не СуммаВключаетНДС), СуммаНДСВознаграждения, 0);	
						  
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	 
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоУслугамВознаграждения, ТаблицаПоТоварам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ);
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугамВознаграждения, ТаблицаПоТоварам);
		
	Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом = Истина Тогда
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом", "ДокументРасчетовСКонтрагентом");
		СтруктураПолей.Вставить("ДатаОплаты"                   , "ДатаОплаты");
		СтруктураПолей.Вставить("СуммаВзаиморасчетов"          , "СуммаВзаиморасчетов");
	
		РезультатЗапросаПоДокументамРасчетовСКонтрагентами = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураПолей);
		ТаблицаПоДокументамРасчетовСКонтрагентом = ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента);
		ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок);
	Иначе
		ТаблицаПоДокументамРасчетовСКонтрагентом = Неопределено;
	КонецЕсли;

	//Проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, мВалютаРегламентированногоУчета, 	
		                                     Ложь, Отказ, Заголовок);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамВознаграждения, 
								ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	КонецЕсли;
							
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));						
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;    		
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровДляДокументовРасчетов = Новый Структура;
мСтруктураПараметровДляДокументовРасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровДляДокументовРасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровДляДокументовРасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровДляДокументовРасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");

мСтруктураПараметровДляПолученияДоговора = Новый Структура();
мСписокДопустимыхВидовДоговоров = Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);
