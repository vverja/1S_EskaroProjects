Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мСтруктураПараметровДляДокументовРасчетов Экспорт;
Перем мУчетнаяПолитикаРегл;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаКомитенту()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
    |	Сделка,
	|	Контрагент,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|   ПредставительКонтрагента КАК ПредставительПокупателя,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	СтавкаНДСВознаграждения,
	|	СуммаВознаграждения,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ	
	|	ОтчетКомитентуОПродажах.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	ЦенаПоступления,
	|	СуммаПоступления,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	СуммаВознаграждения,
	|	СуммаНДСВознаграждения,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры,
	|		Цена,
	|		ЦенаПоступления,
	|		СУММА(Количество)           	КАК Количество,
	|		СУММА(КоличествоМест)           КАК КоличествоМест,
	|		СУММА(Сумма     )           	КАК Сумма,
	|		СУММА(СуммаНДС  )           	КАК СуммаНДС,
	|		СУММА(СуммаВознаграждения)  	КАК СуммаВознаграждения,
	|		СУММА(СуммаНДСВознаграждения) 	КАК СуммаНДСВознаграждения,
	|		СУММА(СуммаПоступления)         КАК СуммаПоступления
	|	
	|	ИЗ
	|		Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитенту
	|
	|	ГДЕ
	|		ОтчетКомитенту.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		ЦенаПоступления,
	|		Цена,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";

	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитентуОПродажах_ОтчетКомитентуОПродажах";
	Макет       = ПолучитьМакет("ОтчетКомитентуОПродажах");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Отчет комитенту';uk='Звіт комітенту'",КодЯзыкаПечать),КодЯзыкаПечать);                                                                                
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата,,,КодЯзыкаПечать);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте,"Телефоны,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.Поставщик               = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.Получатель              = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;	
	ТабДокумент.Вывести(ОбластьМакета);

	ИтогоСумма         	= 0;
	ИтогоСуммаНДС	  	= 0;
	
	ИтогоСуммаВознаграждения 	= 0;
	ИтогоСуммаНДСВознаграждения = 0;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(СтрокаТаблицыТовары);
		ОбластьМакета.Параметры.НомерСтроки = ТаблицаТовары.Индекс(СтрокаТаблицыТовары) + 1;
		ОбластьМакета.Параметры.Товар = СокрП(СтрокаТаблицыТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(СтрокаТаблицыТовары);
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоСумма 		= ИтогоСумма + СтрокаТаблицыТовары.Сумма;
		ИтогоСуммаНДС 	= ИтогоСуммаНДС + СтрокаТаблицыТовары.СуммаНДС;

		ИтогоСуммаВознаграждения 	= ИтогоСуммаВознаграждения + СтрокаТаблицыТовары.СуммаВознаграждения;
		ИтогоСуммаНДСВознаграждения = ИтогоСуммаНДСВознаграждения + СтрокаТаблицыТовары.СуммаНДСВознаграждения;
		
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ИтогоСумма;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ИтогоСуммаНДС);
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = ИтогоСумма + ?(Шапка.СуммаВключаетНДС, 0, ИтогоСуммаНДС);
	СуммаВознагражденияКПрописи = ИтогоСуммаВознаграждения + ?(Шапка.СуммаВключаетНДС, 0, ИтогоСуммаНДСВознаграждения);
													
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + Символы.Таб + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
																								
	ОбластьМакета.Параметры.СуммаВознаграждения = НСтр("ru='Сумма комиссионного вознаграждения составила ';uk='Сума комісійної винагороди склала '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаВознагражденияКПрописи, Шапка.ВалютаДокумента, КодЯзыкаПечать) 
										   + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + Символы.Таб + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаНДСВознаграждения, Шапка.ВалютаДокумента, КодЯзыкаПечать));											
																								
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ТаблицаТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);											
												
												
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 
		
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
								
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
	ОбластьМакета.Параметры.Получил = Шапка.ПредставительПокупателя;
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаКомитенту()

//  Функция формирует табличиный документ как акт об оказании услуг
// на сумму вознаграждения
// 
Функция ПечатьАкта()

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
  	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Контрагент.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|   ПредставительКонтрагента КАК ПредставительПокупателя,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	СУММА(СуммаВознаграждения) КАК СуммаВознаграждения,
	|	СУММА(СуммаНДСВознаграждения) КАК СуммаНДСВознаграждения
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ТекущийДокумент
	|
	|";
	ВыборкаУслуга = ЗапросУслуги.Выполнить().Выбрать();
	ВыборкаУслуга.Следующий();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитентуОПродажах_АктОбУслугах";
	Макет       = ПолучитьМакет("АктОбУслугах");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать =Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку Акта
	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	РуководителиОрганизации = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
	РуководителиКонтрагента = ФормированиеПечатныхФорм.ОтветственныеЛицаКонтрагента(Шапка.Покупатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ДолжностьРуководителяПоставщика = РуководителиОрганизации.РуководительДолжность;
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПоставщика 			=  РуководителиОрганизации.Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", "");
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(ПустаяСтрока(РуководителиКонтрагента.РуководительДолжность) И Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", РуководителиКонтрагента.РуководительДолжность);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПокупателя 			= РуководителиКонтрагента.РуководительПредставление;

	ТабДокумент.Вывести(ОбластьМакета);
	
	// Формируем заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='АКТ сдачи-приемки работ (оказания услуг)';uk='АКТ здачі-приймання робіт (надання послуг)'",КодЯзыкаПечать),КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);                                            

	// Начинаем формировать собственно текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаНачало");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// выводим сведения о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	// Заканчиваем формировать текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаКонец");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Таблица");
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьМакета.Параметры.СуммаЗаголовок = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ОбластьМакета.Параметры.Заполнить(ВыборкаУслуга);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");	
	СуммаКПрописиСНДС 	= ВыборкаУслуга.СуммаВознаграждения + ?(Шапка.СуммаВключаетНДС, 	   0, ВыборкаУслуга.СуммаНДСВознаграждения);
	СуммаКПрописиБезНДС = ВыборкаУслуга.СуммаВознаграждения - ?(Шапка.СуммаВключаетНДС, ВыборкаУслуга.СуммаНДСВознаграждения, 		 0);
	Если Шапка.УчитыватьНДС Тогда												 
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила без НДС ';uk='Загальна вартість робіт (послуг) без ПДВ склала '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', НДС ';uk=', ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(ВыборкаУслуга.СуммаНДСВознаграждения, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', общая стоимость работ (услуг) с НДС ';uk=', загальна вартість робіт (послуг) з ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиСНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 ".";								 
												 
 	Иначе
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила ';uk='Загальна вартість робіт (послуг) склала '",КодЯзыкаПечать)	+ ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) + ".";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 
		
	// выводим подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
								
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
	ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;
	
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	
	Возврат ТабДокумент;

КонецФункции // ПечатьАкта() 

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОтчетКомитентуОПродажах" Тогда

		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаКомитенту();
	ИначеЕсли ИмяМакета = "АктОбОказанииУслуг" Тогда

		// Напечатаем акт об оказании услуг на сумму комисиионного вознаграждения
		ТабДокумент = ПечатьАкта();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;	
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОтчетКомитентуОПродажах,АктОбОказанииУслуг","Отчет комитенту","Акт об оказании услуг");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполниение табличной части.
//
// Параметры:
//  ДокументПоставки - ссылка на документ основание.
//
Процедура ЗаполнитьТовары(ДокументПоставки = Неопределено, Реализованными = Ложь) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
	КонецЕсли;

	Запрос.УстановитьПараметр("ДокументПоставки"      , ДокументПоставки);
	Запрос.УстановитьПараметр("СтатусПолучения"       , Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("Купленный"             , Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("НаКомиссию"            , Перечисления.СтатусыПартийТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("ВидДвиженияРасход"     , ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ОперацияПередача",       Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
	Запрос.УстановитьПараметр("ОперацияРеализация",     Перечисления.КодыОперацийПартииТоваров.Реализация);
	Запрос.УстановитьПараметр("ДатаОстатков"		  , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));	

	ИмяДокумента = "ПоступлениеТоваровУслуг";

	Если ТипЗнч(ДокументПоставки)=Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		ИмяДокумента = "ПоступлениеТоваровУслугВНТТ";
	КонецЕсли;
	ТекстНоменклатура = "Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
		|   ИЗ Документ."+ИмяДокумента+".Товары
		|   ГДЕ Документ."+ИмяДокумента+".Товары.Ссылка = &ДокументПоставки)";


	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Полученные.Номенклатура                                     КАК Номенклатура,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|	Полученные.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры, 
	|	Полученные.СерияНоменклатуры                                КАК СерияНоменклатуры, 
	|" + ?(Реализованными, "СУММА(Партии.Количество)                КАК РасходПоПартиям,
	|   СУММА(ПартииПереданные.Количество)                          КАК КоличествоРеализованных,", "") + "
	|	СУММА(Полученные.КоличествоОстаток)                         КАК КоличествоОстаток,
	|	СУММА(Заказы.КоличествоОстаток)                             КАК ОстатокЗаказанного,
	|	СУММА(Полученные.СуммаВзаиморасчетовОстаток)                КАК СуммаВзаиморасчетовОстаток,
	|	СУММА(Заказы.СуммаВзаиморасчетовОстаток)                    КАК СуммаЗаказанного
	|ИЗ
	|	РегистрНакопления.ТоварыПолученные.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента
	|" + ?(ДокументПоставки <> Неопределено, ("И " + ТекстНоменклатура), "") + "
	|                                              И Сделка                = &Сделка
	|                                              И СтатусПолучения       = &СтатусПолучения) КАК Полученные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента
	|                                              И ЗаказПоставщику        = &Сделка
	|                                              И СтатусПартии           = &Купленный) КАК Заказы
	|ПО
	|	Полученные.Номенклатура = Заказы.Номенклатура
	| И Полученные.ХарактеристикаНоменклатуры = Заказы.ХарактеристикаНоменклатуры 
	| " + ?(Реализованными, "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Партии
	|ПО Партии.Номенклатура = Полученные.Номенклатура
	|	И Партии.ХарактеристикаНоменклатуры = Полученные.ХарактеристикаНоменклатуры
	|	" + ?(ДокументПоставки <> Неопределено, "И Партии.ДокументОприходования = &ДокументПоставки", "И Партии.ДокументОприходования.ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|	И Партии.СтатусПартии = &НаКомиссию
	|	И Партии.КодОперации = &ОперацияРеализация
	|	" + ?(ДокументПоставки <> Неопределено, ("И Партии." + ТекстНоменклатура), "") + "
	|	И Партии.ВидДвижения = &ВидДвиженияРасход
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииПередача
	|ПО ПартииПередача.Номенклатура = Полученные.Номенклатура
	|	И ПартииПередача.ХарактеристикаНоменклатуры = Полученные.ХарактеристикаНоменклатуры
	|	" + ?(ДокументПоставки <> Неопределено, "И ПартииПередача.ДокументОприходования = &ДокументПоставки", "И ПартииПередача.ДокументОприходования.ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|	И ПартииПередача.СтатусПартии = &НаКомиссию
	|	И ПартииПередача.КодОперации = &ОперацияПередача
	|	" + ?(ДокументПоставки <> Неопределено, ("И ПартииПередача." + ТекстНоменклатура), "") + "
	|	И ПартииПередача.ВидДвижения = &ВидДвиженияРасход
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ПартииТоваровПереданные КАК ПартииПереданные
	|		ПО ПартииПереданные.Номенклатура = ПартииПередача.Номенклатура
	|		   И ПартииПереданные.ХарактеристикаНоменклатуры = ПартииПередача.ХарактеристикаНоменклатуры
	|		   И ПартииПереданные.ДокументОприходования = ПартииПередача.ДокументОприходования
	|	       И ПартииПереданные.СтатусПартии = &НаКомиссию
	|	       И ПартииПереданные.КодОперации = &ОперацияРеализация
	|	       " + ?(ДокументПоставки <> Неопределено, ("И ПартииПереданные." + ТекстНоменклатура), "") + "
	|	       И ПартииПереданные.ВидДвижения = &ВидДвиженияРасход
	|", "") + "
	|СГРУППИРОВАТЬ ПО
	|	Полученные.Номенклатура,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	|	Полученные.ХарактеристикаНоменклатуры,
	|	Полученные.СерияНоменклатуры
	|";

	ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоОстатокЗаказанного = ?(Выборка.ОстатокЗаказанного = NULL, 0, Выборка. ОстатокЗаказанного);
		СуммаВзаиморасчетовОстаток   = ?(Выборка.СуммаВзаиморасчетовОстаток = NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
		КоличествоОстаток            = ?(Выборка.КоличествоОстаток = NULL, 0, Выборка.КоличествоОстаток);

		СуммаЗаказанного = ?(Выборка.СуммаЗаказанного = NULL, 0, Выборка.СуммаЗаказанного);

		Если Не Реализованными Тогда
			КоличествоДляОтчета = Выборка.КоличествоОстаток - КоличествоОстатокЗаказанного; 
		Иначе
			РасходПоПартиям = ?(Выборка.РасходПоПартиям = NULL, 0, Выборка.РасходПоПартиям) + ?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
			КоличествоДляОтчета = Мин(Выборка.КоличествоОстаток - КоличествоОстатокЗаказанного, РасходПоПартиям);
		КонецЕсли; 

		Если КоличествоДляОтчета <= 0 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Количество                 = КоличествоДляОтчета;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаХраненияОстатковКоэффициент;
		СтрокаТабличнойЧасти.ЦенаПоступления            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаВзаиморасчетовОстаток - СуммаЗаказанного, 
														ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, 
														ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)) 
														 / (КоличествоОстаток - КоличествоОстатокЗаказанного);
														 
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

		СтрокаТабличнойЧасти.СуммаПоступления    = СтрокаТабличнойЧасти.ЦенаПоступления * КоличествоДляОтчета ;
		СтрокаТабличнойЧасти.Цена                = СтрокаТабличнойЧасти.ЦенаПоступления;
		СтрокаТабличнойЧасти.Сумма               = СтрокаТабличнойЧасти.СуммаПоступления;
		СтрокаТабличнойЧасти.ДокументПоступления = ДокументПоставки;

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                    * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																		УчитыватьНДС, СуммаВключаетНДС, 
																		Ценообразование.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЦикла;

	
КонецПроцедуры // ЗаполнитьТовары()

// Процедура выполняет заполнение табличной части реализованными товарами
// на основании данных регистра "Реализованные товары комитента"
//
// ДокументПоставки - если задан, то заполняет товарами, полученными по 
//                    заданному документу
//
Процедура ЗаполнитьРеализованными(ДокументПоставки = Неопределено) Экспорт

	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
		ЗаполнитьРеализованнымиУпр(ДокументПоставки);
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументПоставки", ДокументПоставки);
	Запрос.УстановитьПараметр("ДатаОстатков",    ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Реализованные.Номенклатура,
	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	Реализованные.ХарактеристикаНоменклатуры,
	|	Реализованные.СерияНоменклатуры,
	|	Реализованные.ДокументПоставки,
	| 	МАКСИМУМ(Полученные.КоличествоОстаток)          КАК КоличествоПолученных, 
	|	МАКСИМУМ(Полученные.СуммаВзаиморасчетовОстаток) КАК СуммаПоступления,
	|	СУММА(Реализованные.ВыручкаОстаток)             КАК Выручка,
	|	СУММА(Реализованные.КоличествоОстаток)          КАК КоличествоРеализованных
	|ИЗ
	|	РегистрНакопления.РеализованныеТовары.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента И Сделка = &Сделка
	|                                                 " + ?(НЕ ЗначениеЗаполнено(ДокументПоставки), "", "И ДокументПоставки = &ДокументПоставки ") + ") КАК Реализованные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|   РегистрНакопления.ТоварыПолученные.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента
	|                                                И Сделка = &Сделка) КАК Полученные
	|ПО
	|	Полученные.Номенклатура                 = Реализованные.Номенклатура
	|	И Полученные.ХарактеристикаНоменклатуры = Реализованные.ХарактеристикаНоменклатуры
	|	И Полученные.СерияНоменклатуры          = Реализованные.СерияНоменклатуры
	|СГРУППИРОВАТЬ ПО
	|	Реализованные.Номенклатура,
	|	Реализованные.ХарактеристикаНоменклатуры,
	|	Реализованные.СерияНоменклатуры,
	|	Реализованные.ДокументПоставки
	|
	|";	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		КоличествоРеализованных = ?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
		КоличествоПолученных    = ?(Выборка.КоличествоПолученных = NULL, 0, Выборка.КоличествоПолученных);
		Выручка                 = ?(Выборка.Выручка = NULL, 0, Выборка.Выручка);
		Количество              = Мин(КоличествоПолученных, КоличествоРеализованных);

		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.ДокументПоступления        = Выборка.ДокументПоставки;
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		НоваяСтрока.Количество                 = Количество;
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		Выручка = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выручка, Неопределено, Истина,
						УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		
		НоваяСтрока.Сумма                      = ?(КоличествоРеализованных = 0, 0, Выручка * НоваяСтрока.Количество / КоличествоРеализованных);
		СуммаПоступления = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.СуммаПоступления, Неопределено, Истина,
						УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		НоваяСтрока.СуммаПоступления           = ?(КоличествоПолученных = 0, 0, СуммаПоступления * НоваяСтрока.Количество / КоличествоПолученных);
		НоваяСтрока.Цена                       = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		НоваяСтрока.ЦенаПоступления            = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.СуммаПоступления / НоваяСтрока.Количество);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * НоваяСтрока.Сумма / 100;
			НоваяСтрока.СуммаНДСВознаграждения = Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		УчитыватьНДС, СуммаВключаетНДС, 
																		Ценообразование.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		ИначеЕсли СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * (НоваяСтрока.Сумма - НоваяСтрока.СуммаПоступления) / 100;
			НоваяСтрока.СуммаНДСВознаграждения = Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		УчитыватьНДС, СуммаВключаетНДС, 
																		Ценообразование.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
	КонецЦикла;
	
	
КонецПроцедуры // ЗаполнитьРеализованными()

// Процедура выполняет заполнение табличной части реализованными товарами
// на основании данных регистра "Реализованные товары комитента"
//
// ДокументПоставки - если задан, то заполняет товарами, полученными по 
//                    заданному документу
//
Процедура ЗаполнитьРеализованнымиУпр(ДокументПоставки = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументПоставки", ДокументПоставки);
	Запрос.УстановитьПараметр("ДатаОстатков",    ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ
	               |	Реализованные.Номенклатура,
	               |	Реализованные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	Реализованные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	               |	Реализованные.ХарактеристикаНоменклатуры,
	               |	Реализованные.СерияНоменклатуры,
	               |	Реализованные.ДокументПоставки,
	               |//ЕстьДокПоставки	МАКСИМУМ(ВЫБОР
	               |//ЕстьДокПоставки			КОГДА ТоварыПолученныеОбороты.КоличествоПриход < Полученные.КоличествоОстаток
	               |//ЕстьДокПоставки				ТОГДА ТоварыПолученныеОбороты.КоличествоПриход
	               |//ЕстьДокПоставки			ИНАЧЕ Полученные.КоличествоОстаток
	               |//ЕстьДокПоставки		КОНЕЦ) КАК КоличествоПолученных,
	               |//ЕстьДокПоставки	МАКСИМУМ(ВЫБОР
	               |//ЕстьДокПоставки			КОГДА ТоварыПолученныеОбороты.СуммаВзаиморасчетовПриход < Полученные.СуммаВзаиморасчетовОстаток
	               |//ЕстьДокПоставки				ТОГДА ТоварыПолученныеОбороты.СуммаВзаиморасчетовПриход
	               |//ЕстьДокПоставки			ИНАЧЕ Полученные.СуммаВзаиморасчетовОстаток
	               |//ЕстьДокПоставки		КОНЕЦ) КАК СуммаПоступления,
	               |//НетДокПоставки	МАКСИМУМ(Полученные.КоличествоОстаток) КАК КоличествоПолученных,
	               |//НетДокПоставки	МАКСИМУМ(Полученные.СуммаВзаиморасчетовОстаток) КАК СуммаПоступления,				   
	               |	СУММА(Реализованные.ВыручкаОстаток) КАК Выручка,
	               |	СУММА(Реализованные.КоличествоОстаток) КАК КоличествоРеализованных
	               |ИЗ
	               |	РегистрНакопления.РеализованныеТовары.Остатки(&ДатаОстатков, ) КАК Реализованные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПолученные.Остатки(
	               |				&ДатаОстатков,
	               |				ДоговорКонтрагента = &ДоговорКонтрагента
	               |					И Сделка = &Сделка) КАК Полученные
	               |		ПО (Полученные.Номенклатура = Реализованные.Номенклатура)
	               |			И (Полученные.ХарактеристикаНоменклатуры = Реализованные.ХарактеристикаНоменклатуры)
	               |			И (Полученные.СерияНоменклатуры = Реализованные.СерияНоменклатуры)
	               |//ЕстьДокПоставки		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПолученные.Обороты(, , Регистратор, ) КАК ТоварыПолученныеОбороты
	               |//ЕстьДокПоставки		ПО Реализованные.Номенклатура = ТоварыПолученныеОбороты.Номенклатура
	               |//ЕстьДокПоставки			И Реализованные.ХарактеристикаНоменклатуры = ТоварыПолученныеОбороты.ХарактеристикаНоменклатуры
	               |//ЕстьДокПоставки			И Реализованные.СерияНоменклатуры = ТоварыПолученныеОбороты.СерияНоменклатуры
	               |//ЕстьДокПоставки			И (ТоварыПолученныеОбороты.Регистратор = &ДокументПоставки)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Реализованные.Номенклатура,
	               |	Реализованные.ХарактеристикаНоменклатуры,
	               |	Реализованные.СерияНоменклатуры,
	               |	Реализованные.ДокументПоставки,
	               |	Реализованные.Номенклатура.ЕдиницаХраненияОстатков,
	               |	Реализованные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент";	
				   
	Если ЗначениеЗаполнено(ДокументПоставки) ТОгда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ЕстьДокПоставки","");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//НетДокПоставки","");
	КонецЕсли;	
					   
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		КоличествоРеализованных = ?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
		Если КоличествоРеализованных < 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Обнаружено отрицательное количество реализованных товаров " + Выборка.Номенклатура + " " + Выборка.ХарактеристикаНоменклатуры + " " + Выборка.СерияНоменклатуры);
			Продолжить;
		КонецЕсли;	
		КоличествоПолученных    = ?(Выборка.КоличествоПолученных = NULL, 0, Выборка.КоличествоПолученных);
		Если КоличествоПолученных < 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Обнаружено отрицательное количество полученных на комиссию товаров " + Выборка.Номенклатура + " " + Выборка.ХарактеристикаНоменклатуры + " " + Выборка.СерияНоменклатуры);
			Продолжить;
		КонецЕсли;
		Выручка                 = ?(Выборка.Выручка = NULL, 0, Выборка.Выручка);
		Количество              = Мин(КоличествоПолученных, КоличествоРеализованных);

		мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
		СтруктраКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета,Дата);
		
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.ДокументПоступления        = ДокументПоставки;
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		НоваяСтрока.Количество                 = Количество;
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		Выручка = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выручка, Неопределено, Истина,
						УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
						
		Выручка	 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выручка
									,мВалютаУправленческогоУчета,ДоговорКонтрагента.ВалютаВзаиморасчетов
									,СтруктраКурса.Курс, КурсВзаиморасчетов
									,СтруктраКурса.Кратность, КратностьВзаиморасчетов);
						
		
		
		НоваяСтрока.Сумма                      = ?(КоличествоРеализованных = 0, 0, Выручка * НоваяСтрока.Количество / КоличествоРеализованных);
		СуммаПоступления = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.СуммаПоступления, Неопределено, Истина,
						УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		НоваяСтрока.СуммаПоступления           = ?(КоличествоПолученных = 0, 0, СуммаПоступления * НоваяСтрока.Количество / КоличествоПолученных);
		НоваяСтрока.Цена                       = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		НоваяСтрока.ЦенаПоступления            = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.СуммаПоступления / НоваяСтрока.Количество);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * НоваяСтрока.Сумма / 100;
			НоваяСтрока.СуммаНДСВознаграждения = Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		Истина, Истина, 
																		Ценообразование.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		ИначеЕсли СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * (НоваяСтрока.Сумма - НоваяСтрока.СуммаПоступления) / 100;
			НоваяСтрока.СуммаНДСВознаграждения = Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		Истина, Истина, 
																		Ценообразование.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеализованными()

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Возврат;
		КонецЕсли;
		
		Если Основание.Проведен Тогда

			Сделка = Основание;
			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;

			ЗаполнитьТовары();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДокументПоОснованиюУпр()

//Заполняет счета учета номенклатуры и затрат в шапке документа
Процедура ЗаполнитьСчетаУчетаВШапке() Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаШапки(ЭтотОбъект, ОтражатьВБухгалтерскомУчете, Ложь, Истина, "УслугаПоВознаграждению");
	
КонецПроцедуры

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом"	, СчетаУчета.СчетРасчетов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам"		, СчетаУчета.СчетАвансов);
		
		СтруктураСчетов.Вставить("НалоговоеНазначениеДоходовИЗатратПоВознаграждению", СчетаУчета.НалоговоеНазначениеПродаж);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Переименовывает указанную колонку, обычно используется перед записью
// таблицы в таблицу движений по регистру
//
// Параметры
//  ТаблицаЗначений – Таблица значений в которой производится переименование колонки
//  ИмяКолонки  	– Имя колонки, которую следует переименовать
//  НовоеИмяКолонки – Новое имя колонки
//
Процедура ПереименоватьКолонкуТаблицы(ТаблицаЗначений, ИмяКолонки, НовоеИмяКолонки)
	
	// Проверим, есть ли в талице колонка с новым именем
	КолонкаДубль = ТаблицаЗначений.Колонки.Найти(НовоеИмяКолонки);
	Если НЕ КолонкаДубль = Неопределено Тогда
		// есть колонка, уже с новым именем
		ТаблицаЗначений.Колонки.Удалить(КолонкаДубль);
		//ПереименоватьКолонкуТаблицы(ТаблицаЗначений, НовоеИмяКолонки, "_"+НовоеИмяКолонки);
	КонецЕсли;
	ТаблицаЗначений.Колонки[ИмяКолонки].Имя = НовоеИмяКолонки;
КонецПроцедуры // ПереименоватьКолонкуТаблицы()

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"         , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСВал"    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСВал"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы для налогового учета
	ТаблицаТоваров.Колонки.Добавить("СуммаВД"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Заполним значения в добавленых колонках 
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсВалютыДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьВалютыДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл  = Ценообразование.РассчитатьСуммуНДССУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
												СтруктураШапкиДокумента.УчитыватьНДС,
												Истина,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругления);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаСНДСВал = СтрокаТаблицы.СуммаСНДСВал;
		// Определим значение НДС в проводках
		Если СтруктураШапкиДокумента.УчитыватьНДС = Ложь Тогда
			// в документе НДС не указывается
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
		ИначеЕсли СтрокаТаблицы.НДСВключенВСтоимость = Истина Тогда
			// НДС включается в стоимость
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
		Иначе
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
		КонецЕсли;
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал = СтрокаТаблицы.ПроводкиСуммаСНДСВал - СтрокаТаблицы.ПроводкиСуммаНДСВал;
													
		// Суммы для налогового учета
		СтрокаТаблицы.СуммаВД = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		
	КонецЦикла;
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТоваров, СтруктураШапкиДокумента);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("СуммаНДСПоступления", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
								  
		СтрокаТаблицы.СуммаНДСПоступления = Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаПоступления,
																		УчитыватьНДС, СуммаВключаетНДС,
																		Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
																		
		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаПоступления + 
		                          ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.СуммаНДСПоступления, 0);
								  
	КонецЦикла;
	
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Добавляем колонки, используемые при проведении.
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр" ,             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Колонка для проведения по регистру ТоварыПолученные, не зависит от флага удержания вознаграждения.
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПоступления, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, 
										 СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		                                 

		// Стимость для регистра "Продажи" - сумма комиссионного вознаграждения в валюте упр. учета
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Стоимость;

	КонецЦикла;

КонецПроцедуры

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	Если НЕ УчитыватьНДС ИЛИ НЕ (СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслугВознаграждения(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаУслугВознаграждения = РезультатЗапросаПоТоварам.Выгрузить();
	
	ПереименоватьКолонкуТаблицы(ТаблицаУслугВознаграждения,"СуммаВознаграждения","Сумма");
	ПереименоватьКолонкуТаблицы(ТаблицаУслугВознаграждения,"НДСВознаграждения"	,"НДС");
	ТаблицаУслугВознаграждения.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаУслугВознаграждения Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
	ПодготовитьТаблицуУслугВознагражденияРегл(ТаблицаУслугВознаграждения, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуУслугВознагражденияУпр(ТаблицаУслугВознаграждения, СтруктураШапкиДокумента);

	Возврат ТаблицаУслугВознаграждения;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуУслугВознагражденияУпр(ТаблицаУслугВознаграждения, СтруктураШапкиДокумента)

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслугВознаграждения Цикл

		// Стимость для регистра "Продажи" - сумма комиссионного вознаграждения в валюте упр. учета
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СтрокаТаблицы.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры

Процедура ПодготовитьТаблицуУслугВознагражденияРегл(ТаблицаУслугВознаграждения, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаУслугВознаграждения.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
		ТаблицаУслугВознаграждения.ЗаполнитьЗначения(0                            , "НДС");
	Иначе
		ТаблицаУслугВознаграждения.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтавкаНДСВознаграждения, "СтавкаНДС");
	КонецЕсли;
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаУслугВознаграждения, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Процедура ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента)

	// Создаем колонку "СуммаУпр"
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаВзаиморасчетов Цикл
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсВзаиморасчетов, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента)

	ТаблицаВзаиморасчетов = РезультатЗапросаПоДокументамРасчетовСКонтрагентами.Выгрузить();
	
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаРегл",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0), ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	// Если сумма взиморасчетов по документу превышает итог по таблице взаиморасчетов, то 
	// добавляем в таблицу новую строку со сылкой на проводимый документ
	СуммаВзаиморасчетовПоТекущемуДокументу = СуммаВзаиморасчетов - ТаблицаВзаиморасчетов.Итог("СуммаВзаиморасчетов");
	Если СуммаВзаиморасчетовПоТекущемуДокументу > 0 Тогда
		НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВзаиморасчетовПоТекущемуДокументу;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетовПоТекущемуДокументу, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														мВалютаРегламентированногоУчета,
														КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
	КонецЕсли;

	ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции // ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами()

//Формирует структуру параметров для передачи в процедуры зачета аванса по ссылке на документ
Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаОтчетКомитенту(СтруктураШапкиДокумента, Заголовок = Неопределено, ПоВознаграждению = Ложь) Экспорт

	ВидДокумента = Ссылка.Метаданные().Имя;
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("Организация,ВалютаДокумента,Контрагент,ДоговорКонтрагента, ОтражатьВБухгалтерскомУчете");
	
	Для Каждого Реквизит из СтруктураПараметров Цикл
		СтруктураПараметров.Вставить(Реквизит.Ключ,?(СтруктураШапкиДокумента.Свойство(Реквизит.Ключ),СтруктураШапкиДокумента[Реквизит.Ключ],Неопределено));
	КонецЦикла;
	
	Если ПоВознаграждению Тогда
		СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Выбытие);	
	Иначе
		СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Поступление);
	КонецЕсли;
	СтруктураПараметров.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Расчеты);
	
	СтруктураПараметров.Вставить("ВидДокумента"      , ВидДокумента);	
	СтруктураПараметров.Вставить("Регистратор"       , Ссылка);	
	СтруктураПараметров.Вставить("Заголовок"         , Заголовок);	
	СтруктураПараметров.Вставить("Период"            , Дата);	
	
	СтруктураПараметров.Вставить("КурсДокумента"     , СтруктураШапкиДокумента.КурсДокумента);	
	СтруктураПараметров.Вставить("КратностьДокумента", СтруктураШапкиДокумента.КратностьДокумента);	
		
	Возврат СтруктураПараметров;
	
КонецФункции

//
Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетов(СтруктураШапкиДокумента, ТаблицаПоТоварам, ПоВознаграждению = Ложь)
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СДелкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	ТаблицаДвижений.Свернуть("СДелкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	
	ТаблицаДвижений.Колонки.Добавить("Контрагент");
	ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
	ТаблицаДвижений.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент        , "Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговораКонтрагента, "ВидДоговораКонтрагента");
	Если ПоВознаграждению Тогда
		// Контрагент выступает в качестве покупателя услуг
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВознаграждению		, "СчетОплаты");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамПолученным  , "СчетАванса");
	Иначе
		// Контрагент выступает в качестве поставщика
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом		, "СчетОплаты");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамВыданным  	, "СчетАванса");
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
КонецФункции


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, СпособРасчетаКомиссионногоВознаграждения, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОтражатьВБухгалтерскомУчете Тогда
	
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда

			Если Не СтруктураШапкиДокумента.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомитентом_НК Тогда
			   
				ОбщегоНазначения.СообщитьОбОшибке("В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!",Отказ,Заголовок);
			   
			КонецЕсли;			

		КонецЕсли;
		
		СтруктураПараметровПроверки = Новый Структура;
		СтруктураПараметровПроверки.Вставить("СчетДоходовПоВознаграждениюБУ",  "СчетДоходов");
		БухгалтерскийУчет.ПроверитьСхемыРеализацииШапкиНаЗаполненость(ЭтотОбъект,
		                                                     "СхемаРеализацииПоВознаграждению", 
								                             СтруктураПараметровПроверки,
															 СтруктураШапкиДокумента,
								                             Отказ, Заголовок);	

		НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					,                 // Проверка шапки, табличная часть не указывается
					,
					Отказ, 
					Заголовок, 
					"Реализация",    // ВидОперации
					Ложь             // ЭтоЗатраты 
		);	
	   
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоВознаграждению");
		
		СтруктураОбязательныхПолей.Вставить("СхемаРеализацииПоВознаграждению");
		Если УчитыватьНДС И СтруктураШапкиДокумента.ЕстьНДС Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПродаж");
			Если (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
				СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПриобретений");
				СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПриобретенийПодтвержденный");
			КонецЕсли;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			СтруктураОбязательныхПолей.Вставить("НалоговоеНазначениеДоходовИЗатратПоВознаграждению");
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, ДокументПоступления");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения регл. реквизитов строк табличной части "Товары".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// При реализации товаров должен быть указан конкретный вид налоговой деятельности.
	СтруктураПараметровПроверки = Новый Структура("ПроверятьРаспределяемую, ПроверятьНеОблагаемую");
	НалоговыйУчет.ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(ЭтотОбъект, "Товары", , ТаблицаПоТоварам, 
	                                                              СтруктураПараметровПроверки, 
	                                                              СтруктураШапкиДокумента, 
																  Отказ, Заголовок);
	// Схемы реализации должны быть заполнены правильно
	СтруктураПараметровПроверки = Новый Структура;
	СтруктураПараметровПроверки.Вставить("СчетВычетовИзДоходов",  "СчетВычетовИзДоходов");
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "Товары", , ТаблицаПоТоварам, 
							                             СтруктураПараметровПроверки,
														 СтруктураШапкиДокумента,
							                             Отказ, Заголовок);	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				ТаблицаПоТоварам,                 
				"Товары",
				Отказ, 
				Заголовок, 
				"Реализация",    // ВидОперации
				Ложь             // ЭтоЗатраты 
	);	
														 
														 
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыРегл()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураОбязательныхПолей.Вставить("СхемаРеализации");
		
		КомитентНерезидент = НЕ (СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета);
		Если НЕ КомитентНерезидент Тогда
			
			Если СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				СтруктураОбязательныхПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл()

// Проверяет правильность заполнения строк табличной части "Документы расчетов с контрагентом".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументРасчетовСКонтрагентом, СуммаВзаиморасчетов");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	Если (СуммаВзаиморасчетов - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0)) < ТаблицаПоДокументамРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма по таблице документов расчетов с контрагентами превышает сумму взаиморасчетов по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства()

// По результатам запросов и данным документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеСредства,
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамВознаграждения, 
								ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	                       ТаблицаПоУслугамВознаграждения, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);

	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоДокументамРасчетовСКонтрагентом,
	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							ТаблицаПоУслугамВознаграждения, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
							
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамВознаграждения, Отказ);							
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
		Движения.Хозрасчетный.Записать();
		Движения.Налоговый.Записать();
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоОтчетуКомитенту(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// По результатам запросов и данным документа формируем движения по регистрам упр. учета.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеСредства,
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
                                 ТаблицаПоУслугамВознаграждения, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		// Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
		СуммаДолга = ?(СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение, СуммаДокумента - СуммаВознаграждения, СуммаДокумента);

		// По регистру ВзаиморасчетыСКонтрагентами.
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументамРасчетовСКонтрагентом, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

			ТаблицаДвижений.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");

		Иначе
            Если  СуммаДолга<>0 Тогда
				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
				СтрокаДвижений.Контрагент  		   = Контрагент;
				СтрокаДвижений.Организация  	   = Организация;
				СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
				СтрокаДвижений.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, СтруктураШапкиДокумента.ВалютаДокумента,
													 СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													 СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
				СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, СтруктураШапкиДокумента.ВалютаДокумента,
													 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
            КонецЕсли;
		КонецЕсли;

		НаборДвижений.мПериод              = Дата;
		НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;

		// Долг перед комитентом за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		   И СуммаВознаграждения <> 0 Тогда

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаДокумента,
												 СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
												 СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			
			
			СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаДокумента,
												 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

			СтруктураПараметров = Новый Структура("ТаблицаСделок", ТаблицаДвижений);
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "", СтруктураШапкиДокумента, СтруктураПараметров, Отказ, Заголовок, РежимПроведения);
			
			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;

		// По регистру "РасчетыСКонтрагентами".
		НаборДвижений = Движения.РасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		Если СуммаДолга<>0 Тогда
			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, СтруктураШапкиДокумента.ВалютаДокумента,
												 СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
												 СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, СтруктураШапкиДокумента.ВалютаДокумента,
												 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;
											 
		НаборДвижений.мПериод              = Дата;
		НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;

		// Долг комитента за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		// При этих же условиях проводим по продажам.
		Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		   И СуммаВознаграждения <> 0 Тогда

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаДокумента,
												 СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
												 СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаДокумента,
												 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;

		ИтогНДС = ТаблицаПоТоварам.Итог("НДС");
		ИтогНДСВознаграждения = ТаблицаПоТоварам.Итог("НДСВознаграждения");
		Если СтруктураШапкиДокумента.СуммаВознаграждения <> 0 ИЛИ ИтогНДС <> 0 Тогда
			// По регистру ПРОДАЖИ.
			НаборДвижений = Движения.Продажи;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			НоваяСтрока = ТаблицаДвижений.Добавить();

			НоваяСтрока.Номенклатура               = СтруктураШапкиДокумента.УслугаПоВознаграждению;
			НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоваяСтрока.ДокументПродажи            = Ссылка;
			НоваяСтрока.ДоговорКонтрагента         = ДоговорКонтрагента;
			НоваяСтрока.Контрагент                 = Контрагент;
			НоваяСтрока.Организация                = Организация;
			НоваяСтрока.ЗаказПокупателя            = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			НоваяСтрока.Подразделение              = Подразделение;
			НоваяСтрока.Количество                 = 0;
			
			НоваяСтрока.Стоимость                  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВознаграждения,
				СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента,
				СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НоваяСтрока.СтоимостьБезСкидок         = НоваяСтрока.Стоимость;
			НоваяСтрока.НДС                        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ИтогНДСВознаграждения,
				СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента,
				СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
			Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
				НоваяСтрока.Проект = Проект;
			КонецЕсли;
				
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.Продажи.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли; 

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыПолученные.

		НаборДвижений = Движения.ТоварыПолученные;

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыПолученныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
							
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
						
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
			// ПО РЕГИСТРУ РеализованныеТовары
			НаборДвижений = Движения.РеализованныеТовары;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
							
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
								
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
							
			Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПоставки", Неопределено);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", Неопределено);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
				//При использовании РА в регистре Реализованные товары храниться сумма в валюте упр. учета
				
				мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
				СтруктраКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета,Дата);
				Для Каждого ТекущаяСтрока Из ТаблицыДанныхДокумента.ТаблицаПоТоварам Цикл
					ТекущаяСтрока.Выручка	 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущаяСтрока.Выручка
												,ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаУправленческогоУчета
												,КурсВзаиморасчетов, СтруктраКурса.Курс
												,КратностьВзаиморасчетов, СтруктраКурса.Кратность);
				КонецЦИкла;	
			КонецЕсли;	
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли; // НЕ Отказ
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()	

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
	// Долг комитента за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
	Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		И СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом
		И СуммаВознаграждения <> 0 Тогда
	   
		ВидДвижения = ВидДвиженияНакопления.Приход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		
		ТаблицаВознаграждения = ТаблицаПоВзаиморасчетам.СкопироватьКолонки();
		
		НоваяСтрока = ТаблицаВознаграждения.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.Сделка                        = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		НоваяСтрока.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, 
													СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, 
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		НоваяСтрока.СуммаРегл   		= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, 
													СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 1, 
													СтруктураШапкиДокумента.КратностьДокумента, 1);
		
		УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаВознаграждения, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	   
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
									ТаблицаПоУслугамВознаграждения, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; // Формирование бухгалтерских проводок

	ПроводкиБУ = Движения.Хозрасчетный;
	ДатаДока   = Дата;
	
	ТаблицаКопия = ТаблицаПоУслугамВознаграждения.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","ПроводкиСуммаСНДСРегл,ПроводкиСуммаСНДСВал");
	
	// по вознаграждению
	Для каждого СтрокаТаблицы Из ТаблицаКопия Цикл

		// Выручка
		Если СтрокаТаблицы.ПроводкиСуммаСНДСРегл = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = "Услуги комисси";
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВознаграждению;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
		Проводка.СчетКт         = СтруктураШапкиДокумента.СчетДоходовПоВознаграждениюБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппаПоВознаграждению);
				
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", СтруктураШапкиДокумента.ВидНалоговойДеятельностиПоВознаграждению);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
			Проводка.НалоговоеНазначениеКт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатратПоВознаграждению;
			Проводка.СуммаНУКт		       = Проводка.Сумма;
		КонецЕсли;	
		
	КонецЦикла;
	
	ТаблицаКопия = ТаблицаПоУслугамВознаграждения.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// НДС по вознаграждению
		Для каждого СтрокаТаблицы Из ТаблицаКопия Цикл

			// Выручка
			Если СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0 Тогда
				Продолжить;
			КонецЕсли;

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание      = "НДС: налоговые обязательства: отгрузка";
			Проводка.НомерЖурнала    = "";

			Проводка.СчетДт         = СтруктураШапкиДокумента.СчетДоходовПоВознаграждениюБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДоходовПоВознаграждениюБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппаПоВознаграждению);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", СтруктураШапкиДокумента.ВидНалоговойДеятельностиПоВознаграждению);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
				Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатратПоВознаграждению;
				Проводка.СуммаНУДт		       = Проводка.Сумма;
			КонецЕсли;	
			
			Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаНДСПродаж;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);

		КонецЦикла;
		
	КонецЕсли;
	
	// Зачет авансов по взаиморасчетам за вознаграждение
	СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаОтчетКомитенту(СтруктураШапкиДокумента, Заголовок, Истина);
	ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетов(СтруктураШапкиДокумента, ТаблицаПоУслугамВознаграждения, Истина);
	СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению, Отказ);
	
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
	
			СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляРасчетыПоПриобретениеРеализацияВВалюте(Ссылка);
			БухгалтерскийУчетРасчетовСКонтрагентами.СформироватьДвиженияПоРасчетыПриобретениеРеализацияВВалюте(СтруктураПараметров, Отказ, ЭтотОбъект);
			
			Если НЕ УдержатьКомиссионноеВознаграждение Тогда
				
				СтруктураПараметров.НаправлениеДвижения	= Перечисления.НаправленияДвижений.Выбытие;
				СтруктураПараметров.РегистрРасчетов		= "РасчетыПоРеализацииВВалютеОрганизации";
				
				РеестрПлатежей = Новый ТаблицаЗначений();
				РеестрПлатежей.Колонки.Добавить("ДоговорКонтрагента");
				РеестрПлатежей.Колонки.Добавить("СделкаРегл");
				РеестрПлатежей.Колонки.Добавить("СуммаСНДСВал");
				РеестрПлатежей.Колонки.Добавить("СуммаСНДСРегл");
				РеестрПлатежей.Колонки.Добавить("СчетОплаты");
				РеестрПлатежей.Колонки.Добавить("СчетАванса");
				
				Строка = РеестрПлатежей.Добавить();
				Строка.ДоговорКонтрагента= ДоговорКонтрагента;
				Строка.СделкаРегл	     = ?(СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом, Неопределено, СтруктураШапкиДокумента.Сделка);
				Строка.СуммаСНДСВал		 = -СуммаВознаграждения;
				Строка.СуммаСНДСРегл	 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаСНДСВал, СтруктураПараметров.ВалютаДокумента, мВалютаРегламентированногоУчета,
																				  СтруктураПараметров.КурсДокумента, 1, СтруктураПараметров.КратностьДокумента, 1);
				
				//Определяем, учитывается ли аванс в документе
				УчитыватьАванс = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределятьАвансыПриПроведении(СтруктураПараметров.Период, СтруктураПараметров.Организация);
				
				
				Если УчитыватьАванс Тогда
					Строка.СчетОплаты		 = СчетУчетаРасчетовПоАвансамПолученным;
					Строка.СчетАванса		 = СчетУчетаРасчетовПоВознаграждению;
				Иначе
					Строка.СчетОплаты		 = СчетУчетаРасчетовПоВознаграждению;
					Строка.СчетАванса		 = СчетУчетаРасчетовПоАвансамПолученным;
				КонецЕсли;
				
				СтруктураПараметров.Таблица = РеестрПлатежей;
				
				БухгалтерскийУчетРасчетовСКонтрагентами.СформироватьДвиженияПоРасчетыПриобретениеРеализацияВВалюте(СтруктураПараметров, Отказ, ЭтотОбъект);
				
			КонецЕсли;
			
		КонецЕсли;
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СчетВычетовИзДоходов, СубконтоВычетовИзДоходов1, СубконтоВычетовИзДоходов2, СубконтоВычетовИзДоходов3, НоменклатурнаяГруппа"+?(СтруктураШапкиДокумента.ЕстьНалогНаПрибыль,", НалоговоеНазначениеДоходовИЗатрат",""),"ПроводкиСуммаСНДСРегл,ПроводкиСуммаСНДСВал");
	
	// По товарам
	Для каждого СтрокаТаблицы Из ТаблицаКопия Цикл

		Если СтрокаТаблицы.ПроводкиСуммаСНДСРегл = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = "Долг за реализованные товары";
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт         = СтрокаТаблицы.СчетВычетовИзДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоВычетовИзДоходов1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоВычетовИзДоходов2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоВычетовИзДоходов3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
			Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			Проводка.СуммаНУДт		       = Проводка.Сумма;
		КонецЕсли;	
		
		Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
		
		Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ЕстьНДС И (СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		// если комитент-нерезидент входящего НДС не будет.
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл, СчетВычетовИзДоходов, СубконтоВычетовИзДоходов1, СубконтоВычетовИзДоходов2, СубконтоВычетовИзДоходов3, НоменклатурнаяГруппа, СчетУчетаНДС"+?(СтруктураШапкиДокумента.ЕстьНалогНаПрибыль,", НалоговоеНазначениеДоходовИЗатрат",""),"ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,СуммаНДСПоступления");
		ТаблицаДвижений = ТаблицаКопия.Скопировать();
		
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			
			Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
				ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
				
				Если СтрокаТаблицы.ПроводкиСуммаНДСРегл <> СтрокаТаблицы.СуммаНДСПоступления Тогда
				    // сформируем проводку по разнице по НДС в связи с разными ценами передачи и продажи
					
					ПроводкаКорректировки =  ПроводкиБУ.Добавить();
					
					ПроводкаКорректировки.Период                     = СтруктураШапкиДокумента.Дата;
					ПроводкаКорректировки.Организация                = СтруктураШапкиДокумента.Организация;
					ПроводкаКорректировки.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл - СтрокаТаблицы.СуммаНДСПоступления;
					ПроводкаКорректировки.Содержание                 = "НДС: налоговый кредит: корректировка по цене продажи";
					ПроводкаКорректировки.НомерЖурнала               = "";

					ПроводкаКорректировки.СчетДт = СтруктураШапкиДокумента.СчетУчетаНДСПриобретений;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетДт, ПроводкаКорректировки.СубконтоДт, "Сделки", СтрокаТаблицы.СделкаРегл);
							
					ПроводкаКорректировки.СчетКт = СтруктураШапкиДокумента.СчетУчетаНДСПриобретенийПодтвержденный;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаКорректировки.СчетКт, ПроводкаКорректировки.СубконтоКт, "Сделки", СтрокаТаблицы.СделкаРегл);
						
				КонецЕсли;													  
				
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период                     = СтруктураШапкиДокумента.Дата;
				Проводка.Активность                 = Истина;
				Проводка.Организация                = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				Проводка.Содержание                 = "НДС: налоговый кредит: отгрузка";
				Проводка.НомерЖурнала               = "";
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДСПриобретенийПодтвержденный;

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , СтрокаТаблицы.СделкаРегл);
				
				Проводка.СчетКт         = СтрокаТаблицы.СчетВычетовИзДоходов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоВычетовИзДоходов1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоВычетовИзДоходов2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоВычетовИзДоходов3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
					Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУКт		       = Проводка.Сумма;
				КонецЕсли;	
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;


	// Зачет авансов по взаиморасчетам за товары
	СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаОтчетКомитенту(СтруктураШапкиДокумента, Заголовок);
		
	ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетов(СтруктураШапкиДокумента, ТаблицаПоТоварам, Ложь);
	СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению, Отказ);
		
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ)
	
	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат
	КонецЕсли;
		
	// Движения по регистрам ...НалоговыйУчет		
			
	// ПО РАСЧЕТАМ ЗА ТОВАРЫ
	НаборДвижений = Движения.ПриобретенияНалоговыйУчет;
		
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСВал");
	ТаблицаПриобретений = ТаблицаКопия.Скопировать();
	
	Сч = 0;
	Пока Сч < ТаблицаПриобретений.Количество() Цикл
		СтрокаТаблицы = ТаблицаПриобретений.Получить(Сч);
		Если СтрокаТаблицы.СуммаСНДСВал = 0 Тогда
			ТаблицаПриобретений.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПриобретений.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПриобретений.Колонки.СделкаРегл.Имя   = "Сделка";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		Движения.ПриобретенияНалоговыйУчет.Записать();
			
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда
		// Отразим зачет вознаграждения регистре ПриобретенияНалоговыйУчет
		// Для этого последовательно "спишем суммы" из таблицы по проданным товарам,
		// уменьшив их на сумму возвнаграждения (СНДС)
		
		ТаблицаДвиженийЗачетЗадолженности = ТаблицаДвижений.Скопировать();
		ТаблицаДвиженийЗачетЗадолженности.Очистить();
		
		СуммаКСписанию 		= ТаблицаПоУслугам.Итог("СуммаСНДСВал");
		Для каждого Строка Из ТаблицаДвижений Цикл
			
			Если СуммаКСписанию <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.СуммаВзаиморасчетов <= 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			СтрокаЗачета = ТаблицаДвиженийЗачетЗадолженности.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗачета, Строка);				
			
			СуммаЗачета = Мин(СуммаКСписанию, Строка.СуммаВзаиморасчетов);
			
			СтрокаЗачета.СуммаВзаиморасчетов = СуммаЗачета;
				
			СуммаКСписанию = СуммаКСписанию - СуммаЗачета; 
			
		КонецЦикла;
		
		Если СуммаКСписанию > 0 Тогда
		    // очень странно, конечно
			Сообщить("Внимание! Сумма вознаграждения превышает задолженность за проданный товар!");	
		КонецЕсли;
			
		ТаблицаДвиженийЗачетЗадолженности.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику, "Событие");
			
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийЗачетЗадолженности;
			
			Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
			Движения.ПриобретенияНалоговыйУчет.Записать();
				
		КонецЕсли;
		
	КонецЕсли;
	
	// ПО РАСЧЕТАМ ЗА УСЛУГУ КОМИССИОННОГО ВОЗНАГРАЖДЕНИЯ
	НаборДвижений = Движения.ПродажиНалоговыйУчет;
		
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСВал");
	ТаблицаПродаж = ТаблицаКопия.Скопировать();
	
	Сч = 0;
	Пока Сч < ТаблицаПродаж.Количество() Цикл
		СтрокаТаблицы = ТаблицаПродаж.Получить(Сч);
		Если СтрокаТаблицы.СуммаСНДСВал  = 0 Тогда
			ТаблицаПродаж.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПродаж.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПродаж.Колонки.СделкаРегл.Имя   = "Сделка";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю, "Событие");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		Движения.ПродажиНалоговыйУчет.Записать();
			
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда
			
		//Отразим зачет вознаграждения в регистре ПродажиНалоговыйУчет
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем, "Событие");
		
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
			Движения.ПродажиНалоговыйУчет.Записать();
				
		КонецЕсли;
		
	КонецЕсли;
	
	// ОжидаемыйИПодтвержденныйНДС...
		
	// если комитент-нерезидент входящего НДС не будет.
	Если (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		
		// ПО ПРОДАЖАМ ТОВАРОВ	
		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
							
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СДелкаРегл, СтавкаНДС,НалоговоеНазначение","СуммаБезНДСВал,СуммаНДСВал,СуммаСНДС,СуммаНДСПоступления");
		// оставим в таблице только отличия между ценой передачи и ценой продажи
		Инд = 0;
		
		Пока Инд < ТаблицаКопия.Количество() Цикл
			Строка = ТаблицаКопия[Инд];
			
			Если Строка.СуммаБезНДСВал = Строка.СуммаСНДС - Строка.СуммаНДСПоступления  Тогда
				ТаблицаКопия.Удалить(Строка);
			Иначе
				
				Строка.СуммаБезНДСВал = Строка.СуммаБезНДСВал - (Строка.СуммаСНДС - Строка.СуммаНДСПоступления);
				Строка.СуммаНДСВал    = Строка.СуммаНДСВал - Строка.СуммаНДСПоступления;
				
				Инд = Инд + 1;
			КонецЕсли;
			
		
		КонецЦикла;
		ТаблицаКопия.Колонки.СДелкаРегл         .Имя = "СДелка";
		ТаблицаКопия.Колонки.СуммаБезНДСВал     .Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СуммаНДСВал        .Имя = "СуммаНДС";
		
		Сч = 0;
		Пока Сч < ТаблицаКопия.Количество() Цикл
			СтрокаТаблицы = ТаблицаКопия.Получить(Сч);
			Если СтрокаТаблицы.БазаНДС + СтрокаТаблицы.СуммаНДС = 0 Тогда
				ТаблицаКопия.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС      , "КодОперации");
			
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
				
		КонецЕсли;
		
	КонецЕсли; 
		
	// ПО УСЛУГЕ КОМИССИОННОГО ВОЗНАГРАЖДЕНИЯ
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
		
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
					
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СДелкаРегл,СтавкаНДС,НалоговоеНазначение","СуммаБезНДСВал,СуммаНДСВал");
	ТаблицаПродаж = ТаблицаКопия.Скопировать();
		
	ТаблицаПродаж.Свернуть("СДелкаРегл,СтавкаНДС,НалоговоеНазначение","СуммаБезНДСВал,СуммаНДСВал");
	ТаблицаПродаж.Колонки.СДелкаРегл.Имя 	 = "СДелка";
	ТаблицаПродаж.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
	ТаблицаПродаж.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
	
	Сч = 0;
	Пока Сч < ТаблицаПродаж.Количество() Цикл
		СтрокаТаблицы = ТаблицаПродаж.Получить(Сч);
		Если СтрокаТаблицы.БазаНДС + СтрокаТаблицы.СуммаНДС = 0 Тогда
			ТаблицаПродаж.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
		
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
			
	КонецЕсли;		
		
	
КонецПроцедуры

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидДоговора", "ВидДоговораКонтрагента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СхемаРеализацииПоВознаграждению", "СчетДоходов" , "СчетДоходовПоВознаграждениюБУ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СхемаРеализацииПоВознаграждению", "СубконтоДоходов1" , "СубконтоДоходовПоВознаграждениюБУ1");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СхемаРеализацииПоВознаграждению", "СубконтоДоходов2" , "СубконтоДоходовПоВознаграждениюБУ2");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СхемаРеализацииПоВознаграждению", "СубконтоДоходов3" , "СубконтоДоходовПоВознаграждениюБУ3");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УслугаПоВознаграждению"		    , "НоменклатурнаяГруппа" , "НоменклатурнаяГруппаПоВознаграждению");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "СхемаНалоговогоУчета", "СхемаНалоговогоУчета");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеРегл()

Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		Иначе
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураСложныхПолей)
	
	// для товаров
	СтруктураПолей.Вставить("СхемаРеализации"          , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетВычетовИзДоходов"     , "СхемаРеализации.СчетВычетовИзДоходов");
	СтруктураПолей.Вставить("СубконтоВычетовИзДоходов1", "СхемаРеализации.СубконтоВычетовИзДоходов1");
	СтруктураПолей.Вставить("СубконтоВычетовИзДоходов2", "СхемаРеализации.СубконтоВычетовИзДоходов2");
	СтруктураПолей.Вставить("СубконтоВычетовИзДоходов3", "СхемаРеализации.СубконтоВычетовИзДоходов3");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"      , "Ссылка.СчетУчетаНДСПриобретений");
	
	СтруктураПолей.Вставить("НалоговоеНазначение" 	   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС" 	   , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	СтавкаНДСВознаграждения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Сделку заполняем только если взаиморасчеты ведутся не по договору в целом
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Сделка = Основание.Сделка;
		КонецЕсли;

		Если Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Договор с контрагентом должен иметь вид договора с комитентом!");
			Возврат;
		КонецЕсли;

		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		Если Основание.Проведен Тогда
			ЗаполнитьРеализованными(Основание);
		КонецЕсли;

	КонецЕсли;

	ЗаполнитьДокументПоОснованиюУпр(Основание);

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Очистим реквизиты НДС по товарам, если комимитент-нерезидент
	Если НЕ ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		Для каждого СтрокаТЧ Из Товары Цикл
			
			СтрокаТЧ.СуммаНДС = 0;	
			СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			
		КонецЦикла; 
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если УчетнаяПолитика <> Неопределено И НЕ УчетнаяПолитика.ЕстьНалогНаПрибыль Тогда
			НалоговоеНазначениеДоходовИЗатратПоВознаграждению = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли; 
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Реализация",
			Дата,
			Организация,
			Товары,				// ТабличнаяЧастьТовары
			Неопределено,		// ТабличнаяЧастьВозвратнаяТара
			Неопределено,   	// ТабличнаяЧастьУслуги
			Неопределено,   	// ТабличнаяЧастьОборудование
			Неопределено, 		// ТабличнаяЧастьОбъектыСтроительства
			Неопределено 	    // ТабличнаяЧастьБланкиСтрогогоУчета
		);
	
	КонецЕсли;	
	
	
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругления, "Товары");
		
		// а теперь для вознаграждения
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругленияВознаграждение = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругленияВознаграждение, "Товары", "СуммаВознаграждения", "СуммаНДСВознаграждения", " вознаграждения");
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения");
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВедениеВзаиморасчетов"                  , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВалютаВзаиморасчетов"                   , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "Организация"                            , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВестиПоДокументамРасчетовСКонтрагентом" , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"     , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "ВидОперации"                          , "СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "Склад.ВидСклада"                      , "ВидСклада");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"               , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УслугаПоВознаграждению", "НоменклатурнаяГруппа"				  , "НоменклатурнаяГруппаУслугиПоВознаграждению");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НалоговоеНазначениеДоходовИЗатратПоВознаграждению", "ВидНалоговойДеятельности" , "ВидНалоговойДеятельностиПоВознаграждению");
	// Для корректной проверки в процедуре НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(...)
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НалоговоеНазначениеДоходовИЗатратПоВознаграждению", "Ссылка" , "НалоговоеНазначениеДоходовИЗатрат");

	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);
		
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамВознаграждения) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураСложныхПолей =Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"      , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЦенаПродажи"               , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Выручка"                   , "Сумма");
	СтруктураПолей.Вставить("СуммаПоступления"          , "СуммаПоступления");
	СтруктураПолей.Вставить("СуммаВознаграждения"       , "СуммаВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДСВознаграждения"   , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДС"   				, "СтавкаНДС");
	СтруктураПолей.Вставить("НДСВознаграждения"    		, "СуммаНДСВознаграждения");
	СтруктураПолей.Вставить("НДС"         				, "СуммаНДС");	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ДокументПоставки"          , "ДокументПоступления");
	
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей,СтруктураСложныхПолей);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, ,СтруктураСложныхПолей);

	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияВознаграждение = Новый Соответствие;
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// Отдельно подготовим таблицу "с услугами" по вознаграждению
	ТаблицаПоУслугамВознаграждения = ПодготовитьТаблицуУслугВознаграждения(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругленияВознаграждение);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамВознаграждения;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугамВознаграждения);
	
	Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом = Истина Тогда
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом", "ДокументРасчетовСКонтрагентом");
		СтруктураПолей.Вставить("ДатаОплаты"                   , "ДатаОплаты");
		СтруктураПолей.Вставить("СуммаВзаиморасчетов"          , "СуммаВзаиморасчетов");
	
		РезультатЗапросаПоДокументамРасчетовСКонтрагентами = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураПолей);
		ТаблицаПоДокументамРасчетовСКонтрагентом = ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента);
		ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок);
	Иначе
		ТаблицаПоДокументамРасчетовСКонтрагентом = Неопределено;
	КонецЕсли;
    
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Заполнение и проверка заполнения счетов учета доходов/расходов
	Если СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаШапки(СтруктураШапкиДокумента, Отказ, Заголовок, "УслугаПоВознаграждению");
	КонецЕсли;
    	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		                                                               СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		                                                               мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
		                    ТаблицаПоУслугамВознаграждения, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
	// Удаление записей регистрации из всех последовательностей
		
КонецПроцедуры

// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти) Экспорт

	Если СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			* (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПоступления);

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
		    * СтрокаТабличнойЧасти.Сумма;

	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;

	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
	        УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДляДокументовРасчетов = Новый Структура;
мСтруктураПараметровДляДокументовРасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровДляДокументовРасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровДляДокументовРасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровДляДокументовРасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");

мСтруктураПараметровДляПолученияДоговора = Новый Структура();
мСписокДопустимыхВидовДоговоров = Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);
