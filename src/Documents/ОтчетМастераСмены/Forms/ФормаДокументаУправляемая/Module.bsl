&НаКлиенте
Перем мПараметрыСвязиСтрокТЧ Экспорт; 	// Для создания новых КлючейСтроки для связи Выпуска и Параметров выпуска.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, Количество, Коэффициент;
	Перем ХарактеристикаНоменклатуры, СерияНоменклатуры;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",     Номенклатура);
	ЗначениеВыбора.Свойство("ХарактеристикаНоменклатуры",	ХарактеристикаНоменклатуры);
	ЗначениеВыбора.Свойство("СерияНоменклатуры",			СерияНоменклатуры);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Коэффициент",      Коэффициент);
	ЗначениеВыбора.Свойство("Количество",       Количество);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	СтруктураОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.Количество       			= Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      			= Коэффициент;
		
		Если ИмяТабличнойЧасти = "Выпуск" Тогда
			
			УстановитьСпецификациюВыпуска(СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры //

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)

	Если ИмяТабличнойЧасти = "Выпуск" Тогда
		Команда = "ПодборВТабличнуюЧастьВыпуск";
		ЕстьУслуги = Истина;
 	ИначеЕсли ИмяТабличнойЧасти = "РасходМатериалов" Тогда
		Команда = "ПодборВТабличнуюЧастьРасходМатериалов";
		ЕстьУслуги = Ложь;
	КонецЕсли;
	
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги", ЕстьУслуги);
	Если ЕстьУслуги Тогда
		СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);
	КонецЕсли;
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
		УстановитьПривилегированныйРежим(Истина);
		Если НЕ РольДоступна("ПолныеПрава")
			И Объект.ГраницаСмены <= РегистрыСведений.ЗавершенныеСмены.Получить(Новый Структура("Подразделение", Объект.Подразделение)).ГраницаСмены Тогда
			
			ТолькоПросмотр = Истина;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	ДобавитьРеквизитыПараметровВыпуска();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьПараметрыВыпуска();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мПараметрыСвязиСтрокТЧ = Новый Соответствие;
	мПараметрыСвязиСтрокТЧ.Вставить("Выпуск", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьВыпуск" Тогда
			ОбработкаПодбора("Выпуск", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьРасходМатериалов" Тогда
			ОбработкаПодбора("РасходМатериалов", ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ ДАННЫХ ИЗ НАСТРОЕК

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ДобавитьДополнительныеДанныеВНастройку(Объект, Настройки, Документы.ОтчетМастераСмены.СтруктураДополнительныхДанныхФормы());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектДополнительнымиДанными(Объект, Настройки, Документы.ОтчетМастераСмены.СтруктураДополнительныхДанныхФормы());
	Модифицированность = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПАРАМЕТРАМИ ВЫПУСКА В КОЛОНКАХ

// В табличном поле "Выпуск" создает колонки для отображения и редактирования параметров выпуска.
// Будут созданы колонки для всех видов параметров.
Процедура ДобавитьРеквизитыПараметровВыпуска()
	
	// Получим список всех возможных параметров
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыПараметровВыпускаПродукции.Ссылка,
	|	ВидыПараметровВыпускаПродукции.Наименование КАК Представление,
	|	ВидыПараметровВыпускаПродукции.ПометкаУдаления
	|ИЗ
	|	Справочник.ВидыПараметровВыпускаПродукции КАК ВидыПараметровВыпускаПродукции
	|ГДЕ
	|	(НЕ ВидыПараметровВыпускаПродукции.ЭтоГруппа)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление"
	);
	
	// Подготовим таблицу с перечнем параметров, используемых в форме
	Выборка = Запрос.Выполнить().Выбрать();
	ИндексРеквизита = 1;
	Пока Выборка.Следующий() Цикл
		
		// помеченные на удаление параметры отображаем только если их значения заданы в документе
		Если Выборка.ПометкаУдаления Тогда
			ОтборПоВидуПараметра = Новый Структура("ВидПараметра", Выборка.Ссылка);
			Если Объект.ПараметрыВыпуска.НайтиСтроки(ОтборПоВидуПараметра).Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// запомним добавленный реквизит в таблице параметров выпуска
		НоваяСтрока 				= мСоставПараметровВыпуска.Добавить();
		НоваяСтрока.Параметр 		= Выборка.Ссылка;
		НоваяСтрока.ИмяКолонки 		= Формат("ВыпускПараметрВыпуска" + ИндексРеквизита,"ЧГ=0");
		НоваяСтрока.Представление	= Выборка.Представление;
		
		ИндексРеквизита = ИндексРеквизита + 1;
		
	КонецЦикла;
	
	// Добавим реквизиты формы в коллекцию "Выпуск"
	
	// тип значения возьмем из метаданных - он будет таким же, как значение колонки, в которой хранятся данные
	ТипЗначенияРеквизита = Метаданные.Документы.ОтчетМастераСмены.ТабличныеЧасти.ПараметрыВыпуска.Реквизиты.Значение.Тип;
	
	ДобавленныеРеквизиты = Новый Массив;
	Для Каждого Колонка Из мСоставПараметровВыпуска Цикл
		ДобавленныеРеквизиты.Добавить(Новый РеквизитФормы(
			Колонка.ИмяКолонки, 
			ТипЗначенияРеквизита, 
			"Объект.Выпуск", 
			Колонка.Представление));
	КонецЦикла; 
		
	ИзменитьРеквизиты(ДобавленныеРеквизиты);
	
	// Добавим элементы формы для отображения значений реквизитов
	Для Каждого Колонка Из мСоставПараметровВыпуска Цикл
		
		НоваяКолонка = Элементы.Вставить(
			Колонка.ИмяКолонки, 
			Тип("ПолеФормы"), 
			Элементы.Выпуск, 
			Элементы.ВыпускКоличество); // Перед колонкой Количество
		НоваяКолонка.Вид                 = ВидПоляФормы.ПолеВвода;
		НоваяКолонка.ПутьКДанным         = "Объект.Выпуск." + Колонка.ИмяКолонки;
		НоваяКолонка.Заголовок           = Колонка.Представление;
		НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
		НоваяКолонка.УстановитьДействие("ПриИзменении", "ПриИзмененииЗначенияПараметраВыпуска");
		
	КонецЦикла;
	
	ПрочитатьПараметрыВыпуска();
	
КонецПроцедуры //СоздатьКолонкиПараметровВыпуска()

Процедура ПрочитатьПараметрыВыпуска()
	
	// Заполним значения реквизитов данными табличной части
	Для Каждого СтрокаВыпуск Из Объект.Выпуск Цикл
		
		Для Каждого ПараметрВыпуска Из мСоставПараметровВыпуска Цикл 
			// Найдем этот параметр в ТЧ "ПараметрыВыпуска".
			СтруктураПоиска = Новый Структура("КлючСвязи,ВидПараметра", СтрокаВыпуск.КлючСвязи, ПараметрВыпуска.Параметр);
			
			НайденныеСтроки = Объект.ПараметрыВыпуска.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() <> 0 Тогда
				СтрокаВыпуск[ПараметрВыпуска.ИмяКолонки] = НайденныеСтроки[0].Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры	

// Обработчик события ПередУдалением
// Удаляет данные в связанных табличных частях
//
&НаКлиенте
Процедура ВыпускПередУдалением(Элемент, Отказ)
	
	СтрокаТабличнойЧасти = Элементы.Выпуск.ТекущиеДанные;
	
	//узнаем у пользователя, может быть надо удалить материалы на этот выпуск
	ПохожийВыпуск			= Объект.Выпуск.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Спецификация", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.Спецификация));
	МатериалыПоПродукции 	= Объект.РасходМатериалов.НайтиСтроки(Новый Структура("Продукция,ХарактеристикаПродукции,Спецификация", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.Спецификация));
	Если ПохожийВыпуск.Количество() > 1 И МатериалыПоПродукции.Количество() > 0 Тогда
		//есть что удалять
		Ответ = Вопрос(НСтр("ru = 'На закладке ""Расход материалов"" указаны материалы на выпуск, указанный в удаляемой строке. 
		|Удалить эти строки с закладки ""Расход материалов"" автоматически?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да, НСтр("ru = 'Удаление строки выпуска'"));
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для Каждого УдаляемаяСтрока Из МатериалыПоПродукции Цикл
				Объект.РасходМатериалов.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//надо удалить и из параметров выпуска
	Если СтрокаТабличнойЧасти.КлючСвязи <> 0 Тогда
		СтруктураПоиска 	= Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		НайденныеПараметры 	= Объект.ПараметрыВыпуска.НайтиСтроки(СтруктураПоиска);
			
		Для Каждого ДанныеПараметра Из НайденныеПараметры Цикл
			Объект.ПараметрыВыпуска.Удалить(ДанныеПараметра);
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода в динамических колонках с параметрами выпуска
// Подключается в СоздатьКолонкиПараметровВыпуска()
// Сохраняет введенные значения в табличной части "ПараметрыВыпуска"
&НаКлиенте
Процедура ПриИзмененииЗначенияПараметраВыпуска(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Выпуск.ТекущиеДанные;
	
	// Определим ключ связи. Если он 0, то значит не задан.
	// Соответственно в связанных ТЧ не должно быть ключей = 0.
	КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
	
	Если КлючСвязи = 0 Тогда
		КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, Объект, "Выпуск", Истина);
	КонецЕсли;
	СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
	
	масДанных = мСоставПараметровВыпуска.НайтиСтроки(Новый Структура("ИмяКолонки", Элементы.Выпуск.ТекущийЭлемент.Имя));
	Если масДанных.Количество() = 0 Тогда
		// такого не должно случиться.
		// Мы не знаем, что это за параметр.
		// Поэтому ничего не делаем.
	Иначе
		ДанныеПараметра = масДанных[0];
		Значение = СтрокаТабличнойЧасти[Элемент.Имя];
		// Найдем этот параметр в ТЧ "Технологические параметры".
		СтруктураПоиска = Новый Структура("КлючСвязи,ВидПараметра", КлючСвязи, ДанныеПараметра.Параметр);
		НайденныеСтроки = Объект.ПараметрыВыпуска.НайтиСтроки(СтруктураПоиска);
		
		// Заменим найденные строки
		//  Удалим попавшие в отбор
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			Объект.ПараметрыВыпуска.Удалить(СтрокаТЧ);
		КонецЦикла;
		//  Добавим, если значение ненулевое
		Если Значение <> 0 Тогда
			НоваяСтрока = Объект.ПараметрыВыпуска.Добавить();
			НоваяСтрока.ВидПараметра = ДанныеПараметра.Параметр;
			НоваяСтрока.КлючСвязи	 = КлючСвязи;
			НоваяСтрока.Значение	 = Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЗначенияПараметраВыпуска()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ДАННЫМИ ТАБЛИЧНЫХ ЧАСТЕЙ

&НаСервереБезКонтекста
Процедура ИзменениеНоменклатурыСервер(СтруктураДанныхСтроки)

	СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", СтруктураДанныхСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	СтруктураДанныхСтроки.Вставить("Коэффициент",      СтруктураДанныхСтроки.ЕдиницаИзмерения.Коэффициент);
	
КонецПроцедуры //

&НаСервереБезКонтекста
Функция ИзменениеЕдиницыИзмеренияСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = Новый Структура();
	ЗначенияДляЗаполнения.Вставить("Коэффициент", ДанныеДляЗаполнения.ЕдиницаИзмерения.Коэффициент);

	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеСтрокиТЧ(СтрокаТабличнойЧасти)
	
	СтруктураДанныхСтроки = Новый Структура("Номенклатура,ЕдиницаИзмерения,Коэффициент");
	
	ЗаполнитьЗначенияСвойств(СтруктураДанныхСтроки, СтрокаТабличнойЧасти);
	
	Возврат СтруктураДанныхСтроки
	
КонецФункции // 

// Выполняет общие действия при изменении поля Номенклатура в строке табличной части Выпуск
//
&НаКлиенте
Процедура ИзменениеНоменклатуры(СтрокаТабличнойЧасти)
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
		
	СтруктураДанныхСтроки = ПолучитьДанныеСтрокиТЧ(СтрокаТабличнойЧасти);	
	ИзменениеНоменклатурыСервер(СтруктураДанныхСтроки);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураДанныхСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеЕдИзмерения(СтрокаТабличнойЧасти)
	
	ДанныеОбменаССервером = ПолучитьДанныеСтрокиТЧ(СтрокаТабличнойЧасти);	
	
	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = ИзменениеЕдиницыИзмеренияСервер(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	
КонецПроцедуры //

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "ВЫПУСК"

// В строке табличной части Выпуск устанавливает спецификацию по-умолчанию.
// 
// Параметры
//
//  СтрокаТабличнойЧасти - строка табличной части Выпуск, в которой нужно установить спецификацию
&НаКлиенте
Процедура УстановитьСпецификациюВыпуска(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Объект.Дата, Объект.Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элементы.Выпуск.ТекущиеДанные;
	
	Если НЕ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	//при копировании строки скопируем и параметры выпуска
	Если СтрокаТабличнойЧасти.КлючСвязи = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска 	= Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	НайденныеПараметры 	= Объект.ПараметрыВыпуска.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеПараметры.Количество()=0 Тогда
		//Нет параметров выпуска. Тогда и ключ связи нам не нужен.
		СтрокаТабличнойЧасти.КлючСвязи = 0;
	Иначе
		//Есть параметры выпуска. Продублируем их.
		КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, Объект, "Выпуск", Истина);
		СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		Для Каждого ДанныеПараметра Из НайденныеПараметры Цикл
			НоваяСтрока = Объект.ПараметрыВыпуска.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПараметра, , "КлючСвязи");
			НоваяСтрока.КлючСвязи = КлючСвязи;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Выпуск.ТекущиеДанные;
	ИзменениеНоменклатуры(СтрокаТабличнойЧасти);
	
	УстановитьСпецификациюВыпуска(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Выпуск.ТекущиеДанные;
	ИзменениеЕдИзмерения(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Выпуск.ТекущиеДанные;
	УстановитьСпецификациюВыпуска(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускСпецификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Выпуск.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		РаботаСДиалогамиКлиент.НачалоВыбораЗначенияСпецификации(СтрокаТабличнойЧасти.Номенклатура, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускПодбор(Команда)
	
	ДействиеПодбор("Выпуск");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "РАСХОД МАТЕРИАЛОВ"

&НаСервере
Функция ЗаполнитьПоСпецификациям(СообщениеОбОшибке = "")

	Если Объект.РасходМатериалов.Количество() > 0 Тогда
		Объект.РасходМатериалов.Очистить();
	КонецЕсли;
	
	//Сейчас ТЧ гарантированно пустая.
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Успешно = ДокументОбъект.РассчитатьМатериалыПоСпецификациям(СообщениеОбОшибке);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Возврат Успешно;
	
КонецФункции
 
&НаКлиенте
Процедура ЗаполнитьПоСпецификациямВыполнить(Команда)
	
	Если Объект.РасходМатериалов.Количество() > 0 Тогда
		Ответ = Вопрос(НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'"), РежимДиалогаВопрос.ДаНет, , , Нстр("ru='Заполнение по нормам'"));
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	Если НЕ ЗаполнитьПоСпецификациям(СообщениеОбОшибке) Тогда
		Предупреждение(СообщениеОбОшибке, , Нстр("ru='Заполнение по нормам'"));
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования табличного поля "РасходМатериалов"
// Не копируем значения в колонке КоличествоПоНормативу
&НаКлиенте
Процедура РасходМатериаловПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элементы.РасходМатериалов.ТекущиеДанные;
	
	Если Копирование Тогда
		
		СтрокаТабличнойЧасти.КоличествоПоНормативу = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ЕдиницаИзмерения
// Установка коэффициента
&НаКлиенте
Процедура РасходМатериаловЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасходМатериалов.ТекущиеДанные;
	ИзменениеЕдИзмерения(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасходМатериалов.ТекущиеДанные;
	ИзменениеНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловПодбор(Команда)
	
	ДействиеПодбор("РасходМатериалов");
	
КонецПроцедуры


