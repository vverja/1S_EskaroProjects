Перем мРазрешенОбходПроверкиЗапретаРедактированияЗакрытыхСмен Экспорт; // используется для выполнения регламентных действий над документами закрытых смен

Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  ИмяМакета - строка, название макета.
//	КоличествоЭкземпляров - количество экземпляров
//	НаПринтер - отправлять задание на принтер без вывода для просмотра пользователем
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли НЕ УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = 'Недостаточно полномочий для печати непроведенного документа'"));
		Возврат;
	КонецЕсли;

	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		// Напечатаем внешную печатную форму
		
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		Если ТабДокумент <> Неопределено Тогда
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		КонецЕсли; 
		
	Иначе
		// Напечатаем встроенную печатную форму
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ОтчетМастераСмены", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ОтчетМастераСмены", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // Печать()
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура();
	СтруктураПечатныхФорм.Вставить("ОтчетМастераСмены", "Отчет мастера смены");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ

// Производит заполнение табличной части "РасходМатериалов" согласно указанного выпуска и спецификаций
// Возвращаемое значение:
//  Истина - выполнено успешно
//  Ложь   - произошла ошибка. В этом случае в параметр СообщениеОбОшибке будут помещен текст сообщения об ошибке.
//
Функция РассчитатьМатериалыПоСпецификациям(СообщениеОбОшибке = "") Экспорт
	
	Если Выпуск.Количество() = 0 Тогда
		СообщениеОбОшибке = НСтр("ru = 'В табличной части ""Выпуск"" нет данных'");
		Возврат Ложь;
	КонецЕсли;
	
	// Подготовим таблицы
	ТабличнаяЧастьРасходМатериалов = РасходМатериалов.Выгрузить();
	ТабличнаяЧастьВыпуск           = Выпуск.Выгрузить();
	ПараметрыВыпускаПродукции      = ПараметрыВыпуска.Выгрузить();
	
	// Учтем технологические параметры в качестве не заданных параметров выпуска
	Для Каждого ПараметрВыпуска Из ТехнологическиеПараметры Цикл
		
		Для Каждого СтрокаВыпуска Из ТабличнаяЧастьВыпуск Цикл
			Отбор = Новый Структура("ВидПараметра, КлючСвязи", ПараметрВыпуска.ВидПараметра, СтрокаВыпуска.КлючСвязи);
			
			Если ПараметрыВыпускаПродукции.НайтиСтроки(Отбор).Количество() = 0 Тогда
				НоваяСтрока = ПараметрыВыпускаПродукции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрВыпуска);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// В колонке "СпецификацияВТабличнойЧасти" будет спецификация, заданная в табличной части явно ...
	ТабличнаяЧастьВыпуск.Колонки.Добавить("СпецификацияВТабличнойЧасти");
	ТабличнаяЧастьВыпуск.ЗагрузитьКолонку(ТабличнаяЧастьВыпуск.ВыгрузитьКолонку("Спецификация"), "СпецификацияВТабличнойЧасти");
	ТабличнаяЧастьРасходМатериалов.Колонки.Добавить("СпецификацияВТабличнойЧасти");
	
	// Из ТЧ "Выпуск" "перетащим" значения выпущенной номенклатуры
	ТабличнаяЧастьВыпуск.Колонки.Добавить("Продукция");
	ТабличнаяЧастьВыпуск.Колонки.Добавить("ХарактеристикаПродукции");
	ТабличнаяЧастьВыпуск.Колонки.Добавить("СерияПродукции");
	ТабличнаяЧастьВыпуск.ЗагрузитьКолонку(ТабличнаяЧастьВыпуск.ВыгрузитьКолонку("Номенклатура"),               "Продукция");
	ТабличнаяЧастьВыпуск.ЗагрузитьКолонку(ТабличнаяЧастьВыпуск.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"), "ХарактеристикаПродукции");
	ТабличнаяЧастьВыпуск.ЗагрузитьКолонку(ТабличнаяЧастьВыпуск.ВыгрузитьКолонку("СерияНоменклатуры"),          "СерияПродукции");
	
	// ... а в колонке "Спецификация" будут в том числе и спецификации, подобранные при заполнении по нормам
	НетСпецификаций = Истина;
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьВыпуск Цикл
		
		Если СтрокаТабличнойЧасти.Спецификация.Пустая() Тогда
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			НетСпецификаций = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим, что есть данные для заполнения
	Если НетСпецификаций Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не заполнены спецификации, по которым выпущена продукция'");
		Возврат Ложь;
	КонецЕсли;
	
	// Рассчитаем
	СтруктураДопКолонок = Новый Структура("Продукция, ХарактеристикаПродукции, СерияПродукции, СпецификацияВТабличнойЧасти"); // Значения этих колонок перенесем в ТЧ "Расход материалов"
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда); // Аналогично ОПзС

	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьРасходМатериалов, ТабличнаяЧастьВыпуск, СтруктураДопКолонок, Отбор, Дата, , ПараметрыВыпускаПродукции);
	
	// Заполним колонки Спецификация и КоличествоПоНормативу
	// В колонке "Спецификация" будут только спецификации, явно указанные в ТЧ выпуск
	ТабличнаяЧастьРасходМатериалов.ЗагрузитьКолонку(ТабличнаяЧастьРасходМатериалов.ВыгрузитьКолонку("Количество"), 					"КоличествоПоНормативу");
	ТабличнаяЧастьРасходМатериалов.ЗагрузитьКолонку(ТабличнаяЧастьРасходМатериалов.ВыгрузитьКолонку("СпецификацияВТабличнойЧасти"), "Спецификация");
	
	// Здесь можно задавать обобщение
	ТабличнаяЧастьРасходМатериалов.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Спецификация, Продукция, ХарактеристикаПродукции, СерияПродукции", "КоличествоПоНормативу, Количество");
	
	РасходМатериалов.Загрузить(ТабличнаяЧастьРасходМатериалов);
	
	Если РасходМатериалов.Количество() = 0 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Нет данных о расходе материалов'");
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции //РассчитатьМатериалыПоСпецификациям()

// Заполняет табличные части Выпуск, ПараметрыВыпуска, ТехнологическиеПараметры всеми данными за указанную смену.
//
// Параметры
//	лПодразделение 	- подразделение смены, по данным которой будут заполняться табличные части
//	лГраницаСмены 	- граница смены, по данным которой будут заполняться табличные части
//
Процедура ЗаполнитьДаннымиДругойСмены(лПодразделение, лГраницаСмены) Экспорт
	
	Выпуск.Очистить();
	ПараметрыВыпуска.Очистить();
	РасходМатериалов.Очистить();
	
	Если НЕ ЗначениеЗаполнено(лПодразделение) Тогда
		Возврат;
	КонецЕсли;
	
	//Заполняем как данными выпуска, так и данными параметров выпуска
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтчетМастераСменыПараметрыВыпуска.КлючСвязи КАК КлючСвязи,
	|	ОтчетМастераСменыПараметрыВыпуска.Ссылка КАК Ссылка,
	|	ОтчетМастераСменыПараметрыВыпуска.ВидПараметра,
	|	ОтчетМастераСменыПараметрыВыпуска.Значение
	|ИЗ
	|	Документ.ОтчетМастераСмены.ПараметрыВыпуска КАК ОтчетМастераСменыПараметрыВыпуска
	|ГДЕ
	|	(НЕ ОтчетМастераСменыПараметрыВыпуска.Ссылка.ПометкаУдаления)
	|	И ОтчетМастераСменыПараметрыВыпуска.Ссылка.ГраницаСмены = &Дата
	|	И ОтчетМастераСменыПараметрыВыпуска.Ссылка.Подразделение = &Подразделение"
	);
	
	Запрос.УстановитьПараметр("Подразделение", 	лПодразделение);
	Запрос.УстановитьПараметр("Дата", 			лГраницаСмены);
	
	ДанныеПараметровВыпуска = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтчетМастераСменыВыпуск.Номенклатура,
	|	ОтчетМастераСменыВыпуск.Количество КАК Количество,
	|	ОтчетМастераСменыВыпуск.ЕдиницаИзмерения,
	|	ОтчетМастераСменыВыпуск.Коэффициент,
	|	ОтчетМастераСменыВыпуск.ХарактеристикаНоменклатуры,
	|	ОтчетМастераСменыВыпуск.СерияНоменклатуры,
	|	ОтчетМастераСменыВыпуск.НомерПартии,
	|	ОтчетМастераСменыВыпуск.ВремяВыпуска,
	|	ОтчетМастераСменыВыпуск.Спецификация,
	|	ОтчетМастераСменыВыпуск.КлючСвязи КАК КлючСвязи,
	|	ОтчетМастераСменыВыпуск.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетМастераСмены.Выпуск КАК ОтчетМастераСменыВыпуск
	|ГДЕ
	|	(НЕ ОтчетМастераСменыВыпуск.Ссылка.ПометкаУдаления)
	|	И ОтчетМастераСменыВыпуск.Ссылка.ГраницаСмены = &Дата
	|	И ОтчетМастераСменыВыпуск.Ссылка.Подразделение = &Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетМастераСменыВыпуск.Ссылка.Дата,
	|	ОтчетМастераСменыВыпуск.НомерСтроки"
	);
	
	Запрос.УстановитьПараметр("Подразделение", 	лПодразделение);
	Запрос.УстановитьПараметр("Дата", 			лГраницаСмены);
	
	ПараметрыСвязиСтрокТЧ = Новый Соответствие;
	ПараметрыСвязиСтрокТЧ.Вставить("Выпуск", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
	
	ВыборкаСтрокВыпуска 	 = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСтрокВыпуска.Следующий() Цикл
		
		НоваяСтрока = Выпуск.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрокВыпуска,,"КлючСвязи");
		
		СтруктураПоиска = Новый Структура("КлючСвязи, Ссылка");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаСтрокВыпуска);
		ПараметрыСтрокиВыпуска = ДанныеПараметровВыпуска.НайтиСтроки(СтруктураПоиска);
		Если ПараметрыСтрокиВыпуска.Количество() > 0 Тогда
		 	// Нам нужен новый ключ связи, так как взятый из запроса может быть неуникальным, 
			// если исходные данные берутся из разных документов.
			КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(ПараметрыСвязиСтрокТЧ, ЭтотОбъект, "Выпуск", Истина);
			НоваяСтрока.КлючСвязи = КлючСвязи;

			Для Каждого ПараметрВыпуска Из ПараметрыСтрокиВыпуска Цикл
				НоваяСтрока = ПараметрыВыпуска.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрВыпуска,,"КлючСвязи");
				НоваяСтрока.КлючСвязи = КлючСвязи;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла; // по строкам выпуска
		
	
	// Заполняем технологические параметры.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетМастераСменыТехнологическиеПараметры.ВидПараметра,
	|	ОтчетМастераСменыТехнологическиеПараметры.Значение,
	|	ОтчетМастераСменыТехнологическиеПараметры.НомерСтроки КАК НомерСтроки,
	|	ОтчетМастераСменыТехнологическиеПараметры.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.ОтчетМастераСмены.ТехнологическиеПараметры КАК ОтчетМастераСменыТехнологическиеПараметры
	|ГДЕ
	|	(НЕ ОтчетМастераСменыТехнологическиеПараметры.Ссылка.ПометкаУдаления)
	|	И ОтчетМастераСменыТехнологическиеПараметры.Ссылка.ГраницаСмены = &Дата
	|	И ОтчетМастераСменыТехнологическиеПараметры.Ссылка.Подразделение = &Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	НомерСтроки"
	);
	
	Запрос.УстановитьПараметр("Подразделение", 	лПодразделение);
	Запрос.УстановитьПараметр("Дата", 			лГраницаСмены);
	
	ТехнологическиеПараметры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры //ЗаполнитьДаннымиДругойСмены()

// Заполняет табличные части всеми данными за предыдущую смену.
//
// Возвращаемое значение
//  Истина - есть предыдущие смены
//
Функция ЗаполнитьДаннымиПредыдущейСмены(СообщениеОбОшибке = "") Экспорт
	
	// Получим границу предыдущей смены
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОтчетМастераСмены.ГраницаСмены КАК ГраницаСмены
	|ИЗ
	|	Документ.ОтчетМастераСмены КАК ОтчетМастераСмены
	|ГДЕ
	|	ОтчетМастераСмены.Подразделение = &Подразделение
	|	И ОтчетМастераСмены.ГраницаСмены < &ГраницаСмены
	|	И ОтчетМастераСмены.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГраницаСмены УБЫВ"
	);
	Запрос.УстановитьПараметр("ГраницаСмены", 	ГраницаСмены);
	Запрос.УстановитьПараметр("Подразделение", 	Подразделение);
	Выборка = Запрос.Выполнить().Выбрать();
				
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьДаннымиДругойСмены(Подразделение, Выборка.ГраницаСмены);
		
		Если Выпуск.Количество() + ТехнологическиеПараметры.Количество() > 0 Тогда
			Возврат Истина;
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Данные для заполнения отсутствуют'");
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		СообщениеОбОшибке = НСтр("ru = 'Нет документов за предыдущие смены'");
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ЗаполнитьДаннымиПредыдущейСмены()

// Заполняет табличные части всеми данными за смену с этим же номером за предыдущий день.
//
Функция ЗаполнитьДаннымиВчерашнейСмены(СообщениеОбОшибке = "") Экспорт
	
	// Получим границу смены
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОтчетМастераСмены.ГраницаСмены КАК ГраницаСмены
	|ИЗ
	|	Документ.ОтчетМастераСмены КАК ОтчетМастераСмены
	|ГДЕ
	|	ОтчетМастераСмены.Подразделение = &Подразделение
	|	И НачалоПериода(ОтчетМастераСмены.ГраницаСмены, День) = &Вчера
	|	И ОтчетМастераСмены.Смена = &Смена
	|	И ОтчетМастераСмены.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГраницаСмены УБЫВ"
	);
	Вчера = НачалоДня(ГраницаСмены) - 24*60*60;
	Запрос.УстановитьПараметр("Вчера", 			Вчера);
	Запрос.УстановитьПараметр("Подразделение", 	Подразделение);
	Запрос.УстановитьПараметр("Смена", 			Смена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьДаннымиДругойСмены(Подразделение, Выборка.ГраницаСмены);
		
		Если Выпуск.Количество() + ТехнологическиеПараметры.Количество() > 0 Тогда
			Возврат Истина;
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Данные для заполнения отсутствуют'");
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Нет документов за смену &Смена'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "&Смена", ОперативныйУчетПроизводства.ПредставлениеСмены(Вчера, Смена));
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции // ЗаполнитьДаннымиВчерашнейСмены()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапроса 			- результат запроса по табличной части "Материалы",
//  СтруктураШапкиДокумента   	- выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалов(РезультатЗапроса, СтруктураШапкиДокумента)

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

// Формирует движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаМатериалов, Отказ, Заголовок)
	
	// Контроль остатков по регистру МатериалыВПроизводстве не производится
	
	// Движения формируются только по материалам с флагом ВестиОперативныйУчетОстатковНЗП
	
	ТаблицаМатериаловОперативныйУчет = ТаблицаМатериалов.Скопировать(Новый Структура("МатериалыВПроизводстве",Истина));
	
	НаборДвижений = Движения.МатериалыВПроизводстве;
	НаборДвижений.Очистить();
	СтруктураТаблицДокумента = Новый Структура;
	СтруктураТаблицДокумента.Вставить("Материалы", ТаблицаМатериаловОперативныйУчет);
						
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктураТаблицДокумента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение", Подразделение);
				
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	// Свернем движения в регистре
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборДвижений, ТаблицаДвижений, Истина);
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Обработчик события ОбработкаЗаполнения
// Заполняет данные документа на основании документа ОтчетОСоставеСмены
Процедура ОбработкаЗаполнения(Основание, СтандартнаяОбработка)
	
	ДатаСмены = ?(ЗначениеЗаполнено(Дата), Дата, ОбщегоНазначения.ПолучитьРабочуюДату());
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетОСоставеСмены") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, "Ответственный,Смена");
		
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.ОтчетМастераСмены.СтруктураДополнительныхДанныхФормы());
		
	Иначе
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		Смена = Документы.ОтчетМастераСмены.ПолучитьСмену(Подразделение, ГраницаСмены, Ответственный, ДатаСмены);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,, ОбъектКопирования.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "РасходМатериалов",, Отказ, "");
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "РасходМатериалов",, Отказ, "");
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	
	ГраницаСмены = ОперативныйУчетПроизводства.ПолучитьГраницуСменыПоДате(Дата, Смена);
	
	Если мРазрешенОбходПроверкиЗапретаРедактированияЗакрытыхСмен <> Истина Тогда
		ОперативныйУчетПроизводства.ПроверкаЗапретаРедактированияЗакрытыхСмен(ЭтотОбъект, Отказ, РежимЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета"));

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "РасходМатериалов".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура",          "Номенклатура");
	СтруктураПолей.Вставить("Затрата",               "Номенклатура");
	СтруктураПолей.Вставить("Услуга",                "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор",			     "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект",			     "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество",            "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаЗатраты", "ХарактеристикаНоменклатуры");
	
	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("МатериалыВПроизводстве", "ВЫБОР КОГДА Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент <> 0 И Номенклатура.ВестиОперативныйУчетОстатковНЗП ТОГДА Истина ИНАЧЕ ЛОЖЬ КОНЕЦ");
	СтруктураСложныхПолей.Вставить("СерияЗатраты",           "ВЫБОР КОГДА Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА СерияНоменклатуры ИНАЧЕ Значение(Справочник.СерииНоменклатуры.ПустаяСсылка) КОНЕЦ");
	
	СтруктураПростыхПолей = Новый Структура;
	РезультатЗапроса = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасходМатериалов", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу продукции для проведения.
	ТаблицаМатериалов = ПодготовитьТаблицуМатериалов(РезультатЗапроса, СтруктураШапкиДокумента);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаМатериалов, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

