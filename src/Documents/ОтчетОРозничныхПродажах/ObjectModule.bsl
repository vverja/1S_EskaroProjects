Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

Перем ЕстьБезналичныеРасчеты Экспорт;

Перем мУчетнаяПолитикаРегл;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьОтчетаОПродажахККМ()
  
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Организация						   КАК Поставщик,	
	|	КассаККМ.Представление	 		   КАК КассаККМ,
	|	Склад.Представление         	   КАК Склад,
	|	ИнвентаризацияТоваровНаСкладе 	   КАК Инвентаризация,
	|   Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	СуммаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		НомерСтроки,
	|		Склад,			
	|		Номенклатура,
	|		ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|		Номенклатура.Код     КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		ПроцентСкидкиНаценки КАК Скидка,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ЗапросТовары = Шапка.Товары.Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетОРозничныхПродажах_ОтчетККМ";

	Макет = ПолучитьМакет("ОтчетККМ");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Отчет о розничных продажах';uk='Звіт про роздрібні продажі'",КодЯзыкаПечать),КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим информацию об Организации
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КодПоЕДРПОУ,ИНН,НомерСвидетельства,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим реквизиты документа
	СписокДополнительныхПараметров = "КассаККМ,Склад,Инвентаризация";
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	//Печать табличной части
	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьСклада = Макет.ПолучитьОбласть("ШапкаТаблицы|Склад");	
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьСклада);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьСклада = Макет.ПолучитьОбласть("Строка|Склад");	
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В строке " + ВыборкаСтрокТовары.НомерСтроки + "  не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ВыборкаСтрокТовары.НомерСтроки;
		ТабДокумент.Вывести(ОбластьНомера);

		ОбластьСклада.Параметры.Склад = ВыборкаСтрокТовары.Склад;
		ТабДокумент.Присоединить(ОбластьСклада);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар   = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
			
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьСклада = Макет.ПолучитьОбласть("Итого|Склад");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьСклада);	
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьСклада = Макет.ПолучитьОбласть("ИтогоНДС|Склад");		
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		ТабДокумент.Присоединить(ОбластьСклада);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
	
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;		
		
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);										
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета);
											
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

    
КонецФункции // ПечатьОтчетаОПродажахККМ()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
//   по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка. Название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОтчетККМ" Тогда // получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаОПродажахККМ();
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать()
#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("ОтчетККМ","Отчет о розничных продажах");
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСЭквайрером", ПолучитьСчетРасчетовСПокупателем(Эквайрер, ДоговорВзаиморасчетовЭквайрера));
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ);

КонецПроцедуры

Функция ПолучитьСчетРасчетовСПокупателем(ЗначениеКонтрагента, ЗначениеДоговора)Экспорт

	Если ОтражатьВБухгалтерскомУчете Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ЗначениеКонтрагента, ЗначениеДоговора);
		Возврат  СчетаУчета.СчетРасчетовПокупателя;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;

КонецФункции //ПолучитьСчетРасчетовСПокупателем()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполниение табличной части проданными ТМЦ по инвентаризации товаров (розница).
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (Инвентаризация Товаров (розница)).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	УчитыватьНДС     = Истина;
	СуммаВключаетНДС = Истина;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка"         , Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТоварНовый"             , Справочники.Качество.Новый);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Ссылка.Склад                              КАК Склад,
	|	Док.Ссылка.Склад.ВидСклада                    КАК ВидСклада,
	|	МИНИМУМ(Док.НомерСтроки) 					  КАК НомерСтроки,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|       ДокСписание.Номенклатура,
	|       ДокСписание.ХарактеристикаНоменклатуры,
	|       ДокСписание.СерияНоменклатуры,
	|       ДокСписание.Качество,
	|       ДокСписание.Ссылка.Склад                         КАК Склад,
	|		ДокСписание.Количество                           КАК Количество,
	|       ДокСписание.Цена
	|	 ИЗ
	|       Документ.СписаниеТоваров.Товары КАК ДокСписание
	|    ГДЕ
	|       ДокСписание.Ссылка.Проведен
	|       И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|    ОБЪЕДИНИТЬ ВСЕ
	|
	|	 ВЫБРАТЬ 
	|       ДокОтчетККМ.Номенклатура,
	|       ДокОтчетККМ.ХарактеристикаНоменклатуры,
	|       ДокОтчетККМ.СерияНоменклатуры,
	|       &ТоварНовый                                      КАК Качество,
	|       ДокОтчетККМ.Склад                                КАК Склад,
	|       ДокОтчетККМ.Количество                           КАК Количество,
	|       ДокОтчетККМ.Цена
	|	 ИЗ
	|       Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|    ГДЕ
	|       ДокОтчетККМ.Ссылка <> &ДокументСсылка
	|       И ДокОтчетККМ.Ссылка.Проведен
	|       И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|ПО
	|      Док.Номенклатура               = ВложенныйЗапрос.Номенклатура
	|    И Док.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
	|    И Док.СерияНоменклатуры          = ВложенныйЗапрос.СерияНоменклатуры
	|    И Док.Качество                   = ВложенныйЗапрос.Качество
	|    И Док.Ссылка.Склад               = ВложенныйЗапрос.Склад
	|    И Док.Цена                       = ВложенныйЗапрос.Цена
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|   И ((Док.КоличествоУчет - Док.Количество) > 0)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЦенаВРознице,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Количество                 = КоличествоСписать;
		СтрокаТабличнойЧасти.Цена                       = Выборка.Цена;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Склад                      = Выборка.Склад;
  		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете);

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти   , ЭтотОбъект);
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЦикла;

#Если Клиент Тогда
	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары учетное количество которых превышает фактическое.");
	КонецЕсли;
#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Дополняет новую строку реквизитами регламентированного учета из исходной строки.
//
// Параметры:
// НоваяСтрока - строка, которую необходимо дополнить.
// ИсходнаяСтрока - строка, из которой берутся исходные данные.
//
Процедура ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока)


	НоваяСтрока.СчетУчетаБУ         		= ИсходнаяСтрока.СчетУчетаБУ;
	НоваяСтрока.ПринятыеСчетУчетаБУ 		= ИсходнаяСтрока.ПринятыеСчетУчетаБУ;
	НоваяСтрока.СхемаРеализации     		= ИсходнаяСтрока.СхемаРеализации;
	НоваяСтрока.НалоговоеНазначение 		= ИсходнаяСтрока.НалоговоеНазначение;
	НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = ИсходнаяСтрока.НалоговоеНазначениеДоходовИЗатрат;
	
КонецПроцедуры // ДополнитьСтрокуРегл()

// Заполняет табличную часть по сериям при оперативном проведении.
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(Склад, Организация, МассивНоменклатуры, ,ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах);
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахТовары.НомерСтроки,
	|	ОтчетОРозничныхПродажахТовары.Номенклатура,
	|	ОтчетОРозничныхПродажахТовары.ЕдиницаИзмерения,
	|	ОтчетОРозничныхПродажахТовары.Коэффициент,
	|	ОтчетОРозничныхПродажахТовары.Цена,
	|	ОтчетОРозничныхПродажахТовары.Количество,
	|	ОтчетОРозничныхПродажахТовары.Сумма,
	|	ОтчетОРозничныхПродажахТовары.ХарактеристикаНоменклатуры,
	|	ОтчетОРозничныхПродажахТовары.СерияНоменклатуры,
	|	ОтчетОРозничныхПродажахТовары.Склад,
	|	ОтчетОРозничныхПродажахТовары.ПроцентСкидкиНаценки,
	|	ОтчетОРозничныхПродажахТовары.СтавкаНДС,
	|	ОтчетОРозничныхПродажахТовары.СуммаНДС,
	|	ОтчетОРозничныхПродажахТовары.ПроцентАвтоматическихСкидок,
	|	ОтчетОРозничныхПродажахТовары.УсловиеАвтоматическойСкидки,
	|	ОтчетОРозничныхПродажахТовары.ЗначениеУсловияАвтоматическойСкидки,
	|	ОтчетОРозничныхПродажахТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	ОтчетОРозничныхПродажахТовары.СчетУчетаБУ,
	|	ОтчетОРозничныхПродажахТовары.ПринятыеСчетУчетаБУ,
	|	ОтчетОРозничныхПродажахТовары.СхемаРеализации,
	|	ОтчетОРозничныхПродажахТовары.НалоговоеНазначение,
	|	ОтчетОРозничныхПродажахТовары.НалоговоеНазначениеДоходовИЗатрат,
	|	ОтчетОРозничныхПродажахТовары.КлючСвязи
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Ссылка = &парамДокумент";
	
	Запрос.УстановитьПараметр("парамДокумент", Ссылка);
	
	ТоварыТабличнойЧасти = Запрос.Выполнить().Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"              , ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество"                  , Справочники.Качество.Новый);
		Если  ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			СтруктураПоиска.Вставить("Цена"                  , ИсходнаяСтрока.Цена);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницах = Строка.Остаток * ИсходнаяСтрока.КоэффициентХраненияОстатков / ИсходнаяСтрока.Коэффициент;
			Если ОстатокВЕдиницах >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницах;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницах * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры          = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры                   = Строка.СерияНоменклатуры;
			НоваяСтрока.ПроцентСкидкиНаценки                = ИсходнаяСтрока.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = ИсходнаяСтрока.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = ИсходнаяСтрока.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ИсходнаяСтрока.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = ИсходнаяСтрока.СтавкаНДС;
			НоваяСтрока.Склад                               = ИсходнаяСтрока.Склад;
			НоваяСтрока.Количество                          = СписанноеКоличество;
			НоваяСтрока.СчетУчетаБУ							= ИсходнаяСтрока.СчетУчетаБУ;
			НоваяСтрока.ПринятыеСчетУчетаБУ					= ИсходнаяСтрока.ПринятыеСчетУчетаБУ;
			НоваяСтрока.СхемаРеализации						= ИсходнаяСтрока.СхемаРеализации;
			НоваяСтрока.НалоговоеНазначение					= ИсходнаяСтрока.НалоговоеНазначение;
			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат   = ИсходнаяСтрока.НалоговоеНазначениеДоходовИЗатрат;
			ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество * ИсходнаяСтрока.Коэффициент
			                                / ИсходнаяСтрока.КоэффициентХраненияОстатков;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить <> 0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры          = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры                   = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ПроцентСкидкиНаценки                = ИсходнаяСтрока.ПроцентСкидкиНаценки;
				НоваяСтрока.ПроцентАвтоматическихСкидок         = ИсходнаяСтрока.ПроцентАвтоматическихСкидок;
				НоваяСтрока.УсловиеАвтоматическойСкидки         = ИсходнаяСтрока.УсловиеАвтоматическойСкидки;
				НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ИсходнаяСтрока.ЗначениеУсловияАвтоматическойСкидки;
				НоваяСтрока.СтавкаНДС                           = ИсходнаяСтрока.СтавкаНДС;
				НоваяСтрока.Склад                               = ИсходнаяСтрока.Склад;
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;
				НоваяСтрока.СчетУчетаБУ							= ИсходнаяСтрока.СчетУчетаБУ;
				НоваяСтрока.ПринятыеСчетУчетаБУ					= ИсходнаяСтрока.ПринятыеСчетУчетаБУ;
				НоваяСтрока.СхемаРеализации						= ИсходнаяСтрока.СхемаРеализации;
				НоваяСтрока.НалоговоеНазначение					= ИсходнаяСтрока.НалоговоеНазначение;
				НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат   = ИсходнаяСтрока.НалоговоеНазначениеДоходовИЗатрат;
				ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);

				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);
				
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество + КоличествоОсталосьПогасить;

				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоСериям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура выполняет необходимые действия при изменении реквизита "ВидОплаты" в ТЧ "ОплатаБанковскимиКредитами".
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПриИзмененииДисконтнойКарты(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.ВладелецДисконтнойКарты = ТекущаяСтрока.ДисконтнаяКарта.ВладелецКарты;

КонецПроцедуры // ПриИзмененииДисконтнойКарты()

// Процедура выполняет необходимые действия при изменении реквизита "ВидОплаты" в ТЧ "ОплатаБанковскимиКредитами".
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПриИзмененииВидаОплатыБанковскимКредитом(ТекущаяСтрока) Экспорт

	ТекВидОплаты = ТекущаяСтрока.ВидОплаты;
	ТекущаяСтрока.БанкКредитор = ТекВидОплаты.БанкКредитор;
	ТекущаяСтрока.БанкКредитор = ТекВидОплаты.БанкКредитор;
	ТекущаяСтрока.ДоговорВзаиморасчетовБанкаКредитора = ТекВидОплаты.ДоговорВзаиморасчетовБанкаКредитора;
	ТекущаяСтрока.ПроцентБанковскойКомиссии = ТекВидОплаты.ПроцентБанковскойКомиссии;

	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
	ПриИзмененииДоговораВзаиморасчетовБанкаКредитора(ТекущаяСтрока);

КонецПроцедуры // ПриИзмененииВидаОплатыБанковскимКредитом()

// Процедура пересчитывает значение банковской комиссии в переданной строке ТЧ.
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПересчитатьСуммуКомиссии(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.СуммаБанковскойКомиссии = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентБанковскойКомиссии / 100;

КонецПроцедуры // ПересчитатьСуммуКомиссии()

// Процедура выполняет необходимые действия при изменении реквизита "ДоговорВзаиморасчетовБанкаКредитора".
//
Процедура ПриИзмененииДоговораВзаиморасчетовБанкаКредитора(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ДоговорВзаиморасчетовБанкаКредитора.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ТекущаяСтрока.ДоговорВзаиморасчетовБанкаКредитора = Неопределено;
	КонецЕсли;
	
	ТекущаяСтрока.СчетУчетаРасчетовСКонтрагентом = ПолучитьСчетРасчетовСПокупателем(ТекущаяСтрока.БанкКредитор, ТекущаяСтрока.ДоговорВзаиморасчетовБанкаКредитора);

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении реквизита "ДоговорЭквайринга".
//
Процедура ПриИзмененииДоговораЭквайринга() Экспорт

	Эквайрер = ДоговорЭквайринга.Эквайрер;
	ДоговорВзаиморасчетовЭквайрера = ДоговорЭквайринга.ДоговорВзаиморасчетов;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());

КонецПроцедуры // ПриИзмененииДоговораЭквайринга()

// Процедура пересчитывает значение торговой уступки в переданной строке ТЧ.
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПересчитатьТорговуюУступку(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.СуммаТорговойУступки = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентТорговойУступки / 100;

КонецПроцедуры // ПересчитатьТорговуюУступку()

// Записывает суммы документа в соответствующие реквизиты шапки для показа в журналах.
//
Процедура РасчетСуммДокумента() Экспорт

	СуммаДокумента = Товары.Итог("Сумма");

КонецПроцедуры // РасчетСуммДокумента()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС" ".
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр",               Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ИмяКолонкиЦена = "ЦенаВРознице";
	Иначе
		ИмяКолонкиЦена = "Цена";
	КонецЕсли;

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаНДС             = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДС          = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СтрокаТаблицы.Стоимость            = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		ТекЦена = СтрокаТаблицы[ИмяКолонкиЦена];
		СтрокаТаблицы.СтоимостьБезСкидок = ТекЦена * ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.КоличествоДок), 0, СтрокаТаблицы.КоличествоДок);
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
												УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;		
		СтрокаТаблицы.Стоимость            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, мВалютаРегламентированногоУчета,
		                                   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.НДСУпр               = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, мВалютаРегламентированногоУчета,
		                                   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СтоимостьБезСкидок   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, мВалютаРегламентированногоУчета,
		                                   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ПолучательСкидки");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ИмяКолонкиЦена = "ЦенаВРознице";
	Иначе
		ИмяКолонкиЦена = "Цена";
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы[ИмяКолонкиЦена] * ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.КоличествоВЕдиницахДокумента), 0, СтрокаТаблицы.КоличествоВЕдиницахДокумента), 2), мВалютаРегламентированногоУчета,
		   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;

		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ПолучательСкидки = СтрокаТаблицы.Склад;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ПолучательСкидки = СтрокаТаблицы.Склад;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		Разница = СтрокаТаблицы.Стоимость - СуммаСоСкидками;
		Если Разница <> 0
		   И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;

		//Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
			        СтрокаТаблицы.Номенклатура,
			        СтрокаТаблицы.ХарактеристикаНоменклатуры,
			        Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Розничная, ЭтотОбъект)) Тогда

				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));

				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;

				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;

					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.Количество * Комплектующая.Количество,
					   мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 1,
					   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;

				СуммаСкидки = СтоимостьКомплектующих - СтрокаТаблицы.Стоимость;

				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ТаблицаДвижений.Свернуть("Номенклатура,ПолучательСкидки,ХарактеристикаНоменклатуры,УсловиеСкидки,ЗначениеУсловияСкидки",
	                         "СуммаСкидки");

	Возврат ТаблицаДвижений;

КонецФункции // ПодготовитьТаблицуСкидок()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
    
	//Заполнение счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Если НЕ СтруктураШапкиДокумента.УчитыватьНДС Тогда
		// для регламентного учета НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	
	// Для корректного отражения возвратов
	ТаблицаТоваров.Колонки.Добавить("РасчетыВозврат", Новый ОписаниеТипов("ПеречислениеСсылка.РасчетыВозврат"));	
	
	// Надо дозаполнить колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.ВидДеятельностиНДС = НалоговыйУчет.ПолучитьВидДеятельностиНДС(СтрокаТаблицы.СтавкаНДС);
		
		// Рассчитаем СуммыБезНДС и СуммыНДС в валюте регл. учета
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль = Ложь Тогда
			СтрокаТаблицы.НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		Иначе
			СтрокаТаблицы.НалоговоеНазначениеНовое = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		КонецЕсли;
		
		Если СтрокаТаблицы.Количество < 0 Тогда
			СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат;
		Иначе
			СтрокаТаблицы.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты;
		КонецЕсли;
		
	КонецЦикла;
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, Новый Структура, Ложь, Ложь, "Сумма", Ложь);
    
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета.
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация");

	Если Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");

		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Склад) Тогда
			Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
				Если СтруктураШапкиДокумента.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
					ОбщегоНазначения.СообщитьОбОшибке("При данном виде операции в качестве склада может быть выбрана только НТТ!", Отказ, Заголовок);
				КонецЕсли;
			Иначе
				Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
					ОбщегоНазначения.СообщитьОбОшибке("При данном виде операции в качестве склада не может быть выбрана НТТ!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		СтруктураОбязательныхПолей.Вставить("КассаККМ");
	КонецЕсли;

	Если ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("ДоговорЭквайринга");
		СтруктураОбязательныхПолей.Вставить("Эквайрер");
		СтруктураОбязательныхПолей.Вставить("ДоговорВзаиморасчетовЭквайрера");

		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСЭквайрером");
		КонецЕсли;

		// Организация договора взаиморасчетов договора эквайринга должна совпадать с организацией шапки документа
		Если НЕ ДоговорВзаиморасчетовЭквайрера.Пустая() И ДоговорВзаиморасчетовЭквайрера.Организация <> Организация Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Выбран договор эквайринга с другой организацией!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для регл. учета.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(СтруктураШапкиДокумента, 
	                                                     ТаблицаПоТоварам,
	                                                     "Товары",
                                                     	 Отказ, 
                                                     	 Заголовок, 
                                                     	 "Реализация",    // ВидОперации
                                                     	 Ложь);           // ЭтоЗатраты 

	// При реализации тары должен быть указан конкретный вид налоговой деятельности.
	СтруктураПараметровПроверки = Новый Структура("ПроверятьРаспределяемую, ПроверятьНеОблагаемую");
	НалоговыйУчет.ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(ЭтотОбъект, "Товары", , ТаблицаПоТоварам,
	                                                              СтруктураПараметровПроверки,
	                                                              СтруктураШапкиДокумента,
																  Отказ, Заголовок);

	// Схемы реализации должны быть заполнены правильно
	СтруктураПараметровПроверки = Новый Структура;
	СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
	СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимости");
	СтруктураПараметровПроверки.Вставить("СчетВычетовИзДоходовБУ", "СчетВычетовИзДоходов");
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "Товары", , ТаблицаПоТоварам, 
							                             СтруктураПараметровПроверки,
														 СтруктураШапкиДокумента,
							                             Отказ, Заголовок);	
    
КонецПроцедуры

// Выполняет проверки,которые нужны только для упр. учета.
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.УчитыватьНДС И Не СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
		Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам Цикл
			Если СтрокаТаблицы.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ (строка " + СтрокаТаблицы.НомерСтроки + "), 
				|если НДС не включается в сумму.", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Проверим заполнение автоматических скидок.
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		ПроцентНеЗаполнен   = НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПроцентАвтоматическихСкидок);
		УсловиеНеЗаполнено  = НЕ ЗначениеЗаполнено(СтрокаТаблицы.УсловиеАвтоматическойСкидки);
		ЗначениеНеЗаполнено = НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки);

		Если (ПроцентНеЗаполнен И УсловиеНеЗаполнено И ЗначениеНеЗаполнено)
		 Или Не(ПроцентНеЗаполнен Или УсловиеНеЗаполнено Или ЗначениеНеЗаполнено)Тогда // ошибок нет
		Иначе
			Если НЕ ПроцентНеЗаполнен
			   И  НЕ УсловиеНеЗаполнено
			   И  ТипЗнч(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки) = Тип("Число")
			   И  СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = 0 Тогда
				// Ошибок нет.
			Иначе
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки)
				                              + """ табличной части ""Товары"": ";
				Если ПроцентНеЗаполнен Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Процент автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если УсловиеНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Условие автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если ЗначениеНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Значение условия автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыУпр()

// Проверяет правильность заполнения строк табличной части "ПродажиПоДисконтнымКартам".
//
// Параметры:
//  ТаблицаПоПродажамПоДисконтнымКартам - таблица значений, содержащая данные для проведения и проверки ТЧ.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПродажиПоДисконтнымКартам(ТаблицаПоПродажамПоДисконтнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ДисконтнаяКарта, Сумма");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПродажиПоДисконтнымКартам", СтруктураОбязательныхПолей, Отказ, Заголовок);

	//УправлениеРозничнойТорговлей.ПроверитьКорректностьТипаОплатыВТЧ(ЭтотОбъект, "ОплатаБанковскимиКредитами",
	//   ТаблицаПоБанковскимКредитам, Отказ, Заголовок, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами()

// Проверяет правильность заполнения строк табличной части "ОплатаБанковскимиКредитами".
//
// Параметры:
//  ТаблицаПоПлатежнымКартам - таблица значений, содержащая данные для проведения и проверки ТЧ.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаБанковскимиКредитами(ТаблицаПоБанковскимКредитам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ВидОплаты, Сумма, БанкКредитор, ДоговорВзаиморасчетовБанкаКредитора");
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаБанковскимиКредитами", СтруктураОбязательныхПолей, Отказ, Заголовок);

	УправлениеРозничнойТорговлей.ПроверитьКорректностьТипаОплатыВТЧ(ЭтотОбъект, "ОплатаБанковскимиКредитами",
	   ТаблицаПоБанковскимКредитам, Отказ, Заголовок, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
	   
	СтрокаОкончанияСообщенияОбОшибке = "выбран договор с другой организацией!";
	Для каждого СтрокаКредита Из ТаблицаПоБанковскимКредитам Цикл
		
		Если ЗначениеЗаполнено(СтрокаКредита.ДоговорВзаиморасчетовБанкаКредитора) 
			И СтрокаКредита.ОрганизацияДоговора <> СтруктураШапкиДокумента.Организация Тогда
		
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаКредита.НомерСтроки)
			   + """ табличной части ""Оплата банковскими кредитами"" ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаОкончанияСообщенияОбОшибке,
		                    Отказ, Заголовок);
		
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами()

// Проверяет правильность заполнения строк табличной части "ОплатаПлатежнымиКартами".
//
// Параметры:
//  ТаблицаПоПлатежнымКартам - таблица значений, содержащая данные для проведения и проверки ТЧ.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами(ТаблицаПоПлатежнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ВидОплаты, Сумма");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаПлатежнымиКартами", СтруктураОбязательныхПолей, Отказ, Заголовок);

	УправлениеРозничнойТорговлей.ПроверитьКорректностьТипаОплатыВТЧ(ЭтотОбъект, "ОплатаПлатежнымиКартами",
	   ТаблицаПоПлатежнымКартам, Отказ, Заголовок, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ "Товары".
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, Сумма");
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	ПроверитьЗаполнениеТабличнойЧастиТоварыУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	//Корректность счетов учета проверим после того, как убедимся, что они заполнены.

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры:
//  РежимПроведения - режим проведения документа (оперативный или неоперативный).
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ "Товары".
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, 
	ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок)

	// По некоторым регистрам услуги проводить не нужно.
	// Подготовим отдельную таблицу.
	ТаблицаПоТоварамБезУслуг = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
	                           Новый Структура("Услуга", Ложь)).Выгрузить();

	//Получим таблицу по комплектам.
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварамБезУслуг, ЭтотОбъект);
	
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("СоставНабора", ТаблицаПоКомплектам, СтруктураШапкиДокумента, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам,
		ТаблицаПоКомплектам , ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, 
		ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок);
						   
	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок);
	ДвиженияПоТоварамОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок);

	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
		ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, Отказ, Заголовок);
		
		

	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	
	// При списании партий также делаются записи в регистры бухгалтерского учета.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать();
		КонецЕсли;	
	КонецЕсли;

	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	//Коновалова 13022013 +
	Если (СтруктураШапкиДокумента.ОтражатьВУправленческомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладах")) ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладахБухгалтерскийУчет")) Тогда
		 Отказ = Истина;
		 Возврат;
	КонецЕсли;
	//Коновалова 13022013 -
	
	Если ТаблицаПоКомплектам.Найти(Перечисления.ТипыНоменклатуры.Комплект, "ТипНоменклатуры") <> Неопределено Тогда
		ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоКомплектам",ТаблицаПоКомплектам);
	КонецЕсли;	

КонецПроцедуры // ДвиженияПоРегистрам()

//Коновалова 19022013 +
Функция НетДвиженийПоПартиям(_Регистр)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПартииТоваровНаСкладах.Регистратор
	                      |ИЗ
	                      |	РегистрНакопления."+_Регистр+" КАК ПартииТоваровНаСкладах
	                      |ГДЕ
	                      |	ПартииТоваровНаСкладах.Регистратор = &Регистратор");
						        
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
//Коновалова 19022013 -

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам,
                                 ТаблицаПоТоварамБезУслуг, ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, 
								 ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок)

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"), Дата, Ложь, Заголовок);

	ИтогСуммаПлатежныеКарты   = ТаблицаПоПлатежнымКартам.Итог("Сумма");
	ИтогСуммаБанковскийКредит = ТаблицаПоБанковскимКредитам.Итог("Сумма");
	Если СуммаДокумента - ИтогСуммаПлатежныеКарты - ИтогСуммаБанковскийКредит <> 0 Тогда
		// По регистру РозничнаяВыручка.
		НаборДвижений = Движения.РозничнаяВыручка;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			СтрокаДвижений.РозничнаяТочка = КассаККМ;
		Иначе
			СтрокаДвижений.РозничнаяТочка = Склад;
		КонецЕсли;
		СтрокаДвижений.Сумма              = СуммаДокумента - ИтогСуммаПлатежныеКарты - ИтогСуммаБанковскийКредит;
		СтрокаДвижений.Подразделение      = Подразделение;

		НаборДвижений.мПериод             = Дата;
		НаборДвижений.мТаблицаДвижений    = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РозничнаяВыручка.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ.

	ТаблицаНаСкладах = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварамБезУслуг,
	                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый)).Выгрузить();

	Если ТаблицаНаСкладах.Количество() > 0 Тогда
		
		// Контроль остатков товара
		ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			НаборДвижений = Движения.ТоварыНаСкладах;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНаСкладах, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			НаборДвижений.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;

	ТаблицаВРознице = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварамБезУслуг,
	                  Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный)).Выгрузить();

	Если ТаблицаВРознице.Количество() > 0 Тогда
		
		// Контроль остатков товара
		ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			НаборДвижений = Движения.ТоварыВРознице;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			ТаблицаВРознице.Колонки.Добавить("СуммаПродажная");
			
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаВРознице.ВыгрузитьКолонку("Склад"),
								ТаблицаВРознице.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
			
			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаВРознице, ТаблицаПоЦенам);
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВРознице, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			НаборДвижений.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;

	ТаблицаВНТТ = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварамБезУслуг,
	              Новый Структура("ВидСклада", Перечисления.ВидыСкладов.НТТ)).Выгрузить();

	Если ТаблицаВНТТ.Количество() > 0 Тогда
		
		// Контроль остатков товара
		ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					  
		Если Не Отказ Тогда
			НаборДвижений = Движения.ТоварыВНТТ;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВНТТ, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			НаборДвижений.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ Продажи.

	НаборДвижений   = Движения.Продажи;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаПоТоварамПродажи = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамПродажи.Колонки.НДС.Имя = "НДСРегл";
    ТаблицаПоТоварамПродажи.Колонки.НДСУпр.Имя = "НДС";

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварамПродажи, ТаблицаДвижений, Проект, Дата, "Продажи");
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПродажи, ТаблицаДвижений);
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка       , "ДокументПродажи");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация  , "Организация");
	
	// + Верескул Проводим по дисконтным картам продажи
	Для каждого СтрокаТовара Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовара.ДисконтнаяКарта) Тогда
			СтрокаДвижений = ТаблицаДвижений.Получить(СтрокаТовара.НомерСтроки-1);
			СтрокаДвижений.Контрагент = СтрокаТовара.ДисконтнаяКарта.ВладелецКарты;
			СтрокаДвижений.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Розничный",,,СтрокаТовара.ДисконтнаяКарта.ВладелецКарты);	
		КонецЕсли; 		
	КонецЦикла; 
	// - Верескул
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.Продажи.ВыполнитьДвижения();
	КонецЕсли;

	// ПО РЕГИСТРУ ПродажиПоДисконтнымКартам.
	НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПродажамПоДисконтнымКартам, ТаблицаДвижений);

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьДвижения();
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ПредоставленныеСкидки.

	НаборДвижений = Движения.ПредоставленныеСкидки;

	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументСкидки");

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
	КонецЕсли;

	// По регистрам взаиморасчетов отражаются безналичные расчеты
	
	Если ЕстьБезналичныеРасчеты Тогда
	
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыСКонтрагентами;
		ТаблицаВзаиморасчеты      = НаборЗаписейВзаиморасчеты.ВыгрузитьКолонки();
		НаборЗаписейРасчеты       = Движения.РасчетыСКонтрагентами;
		ТаблицаРасчеты            = НаборЗаписейРасчеты.ВыгрузитьКолонки();
	
		// Взаиморасчеты с эквайрером
		
		СуммаВзаиморасчетовПоКартам = ТаблицаПоПлатежнымКартам.Итог("Сумма");
		
		Если СуммаВзаиморасчетовПоКартам <> 0 Тогда
			
			СуммаУпрПоКартам = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаВзаиморасчетовПоКартам, 
				мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,	
				1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
			СтрокаВзаиморасчеты = ТаблицаВзаиморасчеты.Добавить();
			
			СтрокаВзаиморасчеты.ДоговорКонтрагента  = ДоговорВзаиморасчетовЭквайрера;
			СтрокаВзаиморасчеты.Контрагент          = Эквайрер;
			СтрокаВзаиморасчеты.Организация         = Организация;
			СтрокаВзаиморасчеты.Сделка              = Неопределено;
			СтрокаВзаиморасчеты.СуммаВзаиморасчетов = СуммаВзаиморасчетовПоКартам;
			СтрокаВзаиморасчеты.СуммаУпр            = СуммаУпрПоКартам;
			
			СтрокаРасчеты = ТаблицаРасчеты.Добавить();
			
			СтрокаРасчеты.ДоговорКонтрагента  = ДоговорВзаиморасчетовЭквайрера;
			СтрокаРасчеты.Контрагент  		  = Эквайрер;
			СтрокаРасчеты.Организация  	      = Организация;
			СтрокаРасчеты.Сделка              = Неопределено;
			СтрокаРасчеты.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаРасчеты.СуммаВзаиморасчетов = СуммаВзаиморасчетовПоКартам;
			СтрокаРасчеты.СуммаУпр            = СуммаУпрПоКартам;
			
		КонецЕсли;
		
		// Взаиморасчеты с банками по кредитам
		
		Для каждого СтрокаКредита Из ТаблицаПоБанковскимКредитам Цикл
		
			СуммаУпрПоКредиту = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаКредита.Сумма, 
				мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,	
				1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
			СтрокаВзаиморасчеты = ТаблицаВзаиморасчеты.Добавить();
			
			СтрокаВзаиморасчеты.ДоговорКонтрагента  = СтрокаКредита.ДоговорВзаиморасчетовБанкаКредитора;
			СтрокаВзаиморасчеты.Контрагент          = СтрокаКредита.БанкКредитор;
			СтрокаВзаиморасчеты.Организация         = Организация;
			СтрокаВзаиморасчеты.Сделка              = Неопределено;
			СтрокаВзаиморасчеты.СуммаВзаиморасчетов = СтрокаКредита.Сумма;
			СтрокаВзаиморасчеты.СуммаУпр            = СуммаУпрПоКредиту;
			
			СтрокаРасчеты = ТаблицаРасчеты.Добавить();
			
			СтрокаРасчеты.ДоговорКонтрагента  = СтрокаКредита.ДоговорВзаиморасчетовБанкаКредитора;
			СтрокаРасчеты.Контрагент  		  = СтрокаКредита.БанкКредитор;
			СтрокаРасчеты.Организация  	      = Организация;
			СтрокаРасчеты.Сделка              = Неопределено;
			СтрокаРасчеты.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаРасчеты.СуммаВзаиморасчетов = СтрокаКредита.Сумма;
			СтрокаРасчеты.СуммаУпр            = СуммаУпрПоКредиту;
			
		КонецЦикла;
			
		НаборЗаписейВзаиморасчеты.мПериод            = Дата;
		НаборЗаписейВзаиморасчеты.мТаблицаДвижений   = ТаблицаВзаиморасчеты;
			
		Если Не Отказ Тогда
			НаборЗаписейВзаиморасчеты.ВыполнитьПриход();
		КонецЕсли;
			
		НаборЗаписейРасчеты.мПериод            = Дата;
		НаборЗаписейРасчеты.мТаблицаДвижений   = ТаблицаРасчеты;
			
		Если Не Отказ Тогда
			НаборЗаписейРасчеты.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамБезУслуг, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	// Проверка остатков
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизацийРегл.

	НаборДвижений = Движения.ТоварыОрганизацийРегл;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаПоТоварамКопия = ТаблицаПоТоварамБезУслуг.Скопировать();
	Для Каждого СтрокаТоваров Из ТаблицаПоТоварамКопия Цикл
		Если СтрокаТоваров.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый Тогда
			СтрокаТоваров.СчетУчетаБУ             = СтрокаТоваров.ПринятыеСчетУчетаБУ;
			СтрокаТоваров.НалоговоеНазначение     = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли; 
	КонецЦикла; 

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамКопия, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	Если Не ВестиПартионныйУчетПоСкладамРегл Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(), "НалоговоеНазначение");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(), "НалоговоеНазначениеДоходовИЗатрат");
	КонецЕсли; 
	
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизацийРегл.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок)
    

	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг), ТаблицаДвижений);
    
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
		
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

    ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РеализацияРозница, "КодОперацииПартииТоваров");
    
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений , СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг);
	
	//свернем таблицу движений так, чтобы по регистру списанные товары проходили "чистые" продажи или возвраты.
	ТаблицаДвижений.Колонки.Удалить("НомерСтроки");
	ТаблицаДвижений.Колонки.Удалить("НомерСтрокиДокумента");
	СписокСуммируемыхКолонок = "Количество, ПроводкиСуммаСНДСРегл, ПроводкиСуммаНДСРегл";
	СписокФиксируемыхКолонок = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		
		ИмяКолонки = Колонка.Имя;
		
		Если ИмяКолонки = "Количество" ИЛИ ИмяКолонки = "ПроводкиСуммаСНДСРегл" ИЛИ ИмяКолонки = "ПроводкиСуммаНДСРегл" Тогда 
			Продолжить;
		ИначеЕсли СписокФиксируемыхКолонок <> "" Тогда
			СписокФиксируемыхКолонок = СписокФиксируемыхКолонок + ",";
		КонецЕсли;
		
		СписокФиксируемыхКолонок = СписокФиксируемыхКолонок + ИмяКолонки;
		
	КонецЦикла; 
	ТаблицаДвижений.Свернуть(СписокФиксируемыхКолонок, СписокСуммируемыхКолонок);
	ТаблицаДвижений.Колонки.Добавить("НомерСтроки");
	ТаблицаДвижений.Колонки.Добавить("НомерСтрокиДокумента");
	
	// обработаем возвраты
	Инд = 1;
	Для каждого Строка  Из ТаблицаДвижений Цикл
		Строка.НомерСтрокиДокумента = Инд;
		Инд = Инд + 1;
		Если Строка.Количество < 0 Тогда
			Строка.Количество = -Строка.Количество;
			Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя;
		КонецЕсли;
	КонецЦикла; 
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
    
КонецПроцедуры//ДвиженияПоРегиструСписанныеТовары

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, Отказ, Заголовок)

    
    // Формирование бухгалтерских проводок
    Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
    	Возврат;
	КонецЕсли;
	
	// Формирование движений по регистру "Учет продаж и себестоимости".
	РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам
	);
	

	ДатаДока     = Дата;
	ПроводкиБУ   = Движения.Хозрасчетный;
	
	// подготовим таблицу данных для движений по регистру РозничнаяВыручкаОрганизаций
	ТаблицаРозничнойВыручки = ТаблицаПоТоварам.Скопировать();
	ТаблицаРозничнойВыручки.Свернуть("РасчетыВозврат, СтавкаНДС", "СуммаНДСРегл, СуммаБезНДСРегл");
	
	НаборДвижений   = Движения.РозничнаяВыручкаОрганизаций;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Для каждого СтрокаТЧ из ТаблицаРозничнойВыручки Цикл

		// По регистру "Розничная выручка организаций"
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Организация     		= СтруктураШапкиДокумента.Организация;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			СтрокаДвижений.РозничнаяТочка  	= СтруктураШапкиДокумента.КассаККМ;
		Иначе
			СтрокаДвижений.РозничнаяТочка  	= СтруктураШапкиДокумента.Склад;	
		КонецЕсли;
		
		СтрокаДвижений.ВидРозничнойВыручки 	= СтрокаТЧ.РасчетыВозврат;
		СтрокаДвижений.СтавкаНДС       		= СтрокаТЧ.СтавкаНДС;
		
		СтрокаДвижений.Сумма           		= СтрокаТЧ.СуммаБезНДСРегл + СтрокаТЧ.СуммаНДСРегл;
		СтрокаДвижений.СуммаНДС        		= СтрокаТЧ.СуммаНДСРегл;
		
	КонецЦикла;
		
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.РозничнаяВыручкаОрганизаций.ВыполнитьПриход();
	КонецЕсли;
	
	// подготовим таблицу данных для движений по бухгалтерскому плану счетов
	ТаблицаСуммРеализации = ТаблицаПоТоварам.Скопировать();
	ТаблицаСуммРеализации.Свернуть("РасчетыВозврат,
	                               |НалоговоеНазначениеДоходовИЗатрат,
								   |СчетДоходовБУ, 			СубконтоДоходовБУ1, 		 СубконтоДоходовБУ2, 		  СубконтоДоходовБУ3,
								   |СчетВычетовИзДоходовБУ, СубконтоВычетовИзДоходовБУ1, СубконтоВычетовИзДоходовБУ2, СубконтоВычетовИзДоходовБУ3, НоменклатурнаяГруппа"
								   //Смартис Лиманчук начало 01.11.2012
								   //,"СуммаСНДСРегл,СуммаНДСРегл");
								   ,"СуммаСНДСРегл,СуммаНДСРегл,СуммаНормативнойСебестоимости");
								   //Смартис Лиманчук окончание 01.11.2012
	
	Для каждого СтрокаТЧ из ТаблицаСуммРеализации Цикл		
		// Бухгалтерские проводки
		
		
		//ДОХОД ОТ ПРОДАЖ - ВЫРУЧКА
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		//Смартис Лиманчук начало 31.10.2012
        //Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
        //	Проводка.Организация  = Константы.КрафтКолор.Получить();
        //КонецЕсли;
		//Смартис Лиманчук окончание 31.10.2012
		Если СтрокаТЧ.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
			
			Проводка.Содержание   = "Доход от продаж в рознице";
			Проводка.Сумма        = СтрокаТЧ.СуммаСНДСРегл;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
				Проводка.СчетДт       =  ПланыСчетов.Хозрасчетный.РозничнаяВыручкаВКассахККМ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.КассаККМ);
			Иначе	
				Проводка.СчетДт       =  ПланыСчетов.Хозрасчетный.РозничнаяВыручкаПринятаяИзНТТ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Склад);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтатьяДвиженияДенежныхСредств);
						
			Проводка.СчетКт       = СтрокаТЧ.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТЧ.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУКт = Проводка.Сумма;
			КонецЕсли;
			
		Иначе
			//возврат
			
			Проводка.Содержание   = "Вычет из доходов от продаж в рознице (возврат)";
			Проводка.Сумма        = - СтрокаТЧ.СуммаСНДСРегл;

			Проводка.СчетДт       = СтрокаТЧ.СчетВычетовИзДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоВычетовИзДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоВычетовИзДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоВычетовИзДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
				Проводка.СчетКт       =  ПланыСчетов.Хозрасчетный.РозничнаяВыручкаВКассахККМ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.КассаККМ);
			Иначе	
				Проводка.СчетКт       =  ПланыСчетов.Хозрасчетный.РозничнаяВыручкаПринятаяИзНТТ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Склад);
			КонецЕсли; 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтатьяДвиженияДенежныхСредств);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = Проводка.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
		    
		// НДС - вычет из дохода
		Если НЕ СтрокаТЧ.СуммаНДСРегл = 0 Тогда
		
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Если СтрокаТЧ.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
				
				Проводка.Содержание   = "НДС";
				Проводка.Сумма        = СтрокаТЧ.СуммаНДСРегл; 

				Проводка.СчетДт       = СтрокаТЧ.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
				
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетДоходовРозничныхПродаж;
				// Попытаемся установить субконто "Статья доходов" для транзитного счета 709х
				Если Проводка.СчетКт.ВидыСубконто.Количество() > 0 
				   И СтрокаТЧ.СчетДоходовБУ.ВидыСубконто[0].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов Тогда
				   
				   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДоходов", СтрокаТЧ.СубконтоДоходовБУ1);
				
				КонецЕсли; 
			   
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = Проводка.Сумма;
				КонецЕсли;
				
			Иначе
				//возврат
				
				Проводка.Содержание   = "НДС (возврат)";
				Проводка.Сумма        = СтрокаТЧ.СуммаНДСРегл; //сумма отрицательная

				Проводка.СчетДт       = СтрокаТЧ.СчетВычетовИзДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоВычетовИзДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоВычетовИзДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоВычетовИзДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
				
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетВычетаИзДоходовРозничныхПродаж;
				// Попытаемся установить субконто "Статья доходов" для транзитного счета 709х
				Если Проводка.СчетКт.ВидыСубконто.Количество() > 0 
				   И СтрокаТЧ.СчетВычетовИзДоходовБУ.ВидыСубконто[0].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов Тогда
				   
				   БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДоходов", СтрокаТЧ.СубконтоВычетовИзДоходовБУ1);
				
				КонецЕсли; 
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = Проводка.Сумма;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		//Смартис Лиманчук начало 01.11.2012
        //Проводка = ПроводкиБУ.Добавить();
        //
        //Проводка.Период          = Дата;
        //Проводка.Активность      = Истина;
        //Проводка.Организация     = СтруктураШапкиДокумента.Организация;
        //Проводка.Сумма           = СтрокаТЧ.СуммаНормативнойСебестоимости;
        //Проводка.Содержание      = "Реализация товаров";
        //Проводка.НомерЖурнала    = "";
        //
        //Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПокупателями;
        //БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту.Владелец);
        //БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту);
        ////Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
        ////Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
        //
        //Проводка.СчетКт         = СтрокаТЧ.СчетДоходовБУ;
        //БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоДоходовБУ1);
        //БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.СубконтоДоходовБУ2);
        //БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТЧ.СубконтоДоходовБУ3);
        //БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
        //
        //Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
        //	Проводка.НалоговоеНазначениеКт  = СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат;
        //    Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтрокаТЧ.СуммаНормативнойСебестоимости);
        //КонецЕсли;
        //
        //Проводка = ПроводкиБУ.Добавить();
        //
        //Проводка.Период          = Дата;
        //Проводка.Активность      = Истина;
        //Проводка.Организация     = Константы.КрафтКолор.Получить();
        //Проводка.Сумма           = СтрокаТЧ.СуммаНормативнойСебестоимости;
        //Проводка.Содержание      = "Реализация товаров";
        //Проводка.НомерЖурнала    = "";
        //
        //Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.РасходыНаСбыт;
        //БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтруктураШапкиДокумента.СтатьяЗатратДляКрафт);
        //
        //СписокПодразделений = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(СтруктураШапкиДокумента.Подразделение,СтруктураШапкиДокумента.Организация);
        //Если СписокПодразделений.Количество()>0 Тогда
        //	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СписокПодразделений[0].Значение);
        //КонецЕсли;
        //
        ////Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
        ////Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
        //
        //Проводка.СчетКт         = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками;
        //БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Организация.ДоговорКрафтПокупаетУОрганизации.Владелец);
        //БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.Организация.ДоговорКрафтПокупаетУОрганизации);
        //
        //Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
        //	Проводка.НалоговоеНазначениеКт  = СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат;
        //	Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтрокаТЧ.СуммаНормативнойСебестоимости);
        //КонецЕсли;
		//Смартис Лиманчук окончание 01.11.2012
		
		//НДС
		//ИЗМЕНЕНО Верескул Игорь(Начало 02.05.2022
		//Пока сумма НДС = 0 не делаем
		Если НЕ СтрокаТЧ.СуммаНДСРегл = 0 Тогда
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = Ценообразование.РассчитатьСуммуНДС(СтрокаТЧ.СуммаНормативнойСебестоимости,
			Истина, Истина,
			Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20));
			Проводка.Содержание      = "НДС: Реализация товаров";
			Проводка.НомерЖурнала    = "";
			
			Проводка.СчетДт          = СтрокаТЧ.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				Проводка.НалоговоеНазначениеДт  = СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, Проводка.Сумма);
			КонецЕсли;
			
			Проводка.СчетКт         = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту.Владелец);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту);	
		КонецЕсли; 
		//Окончание)Верескул Игорь 
		
	КонецЦикла;
	
	
    //
    // Дополнительные проводки при наличии безналичных оплат
    ДвиженияПоРаспределениюОплат(СтруктураШапкиДокумента, ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, Отказ, Заголовок);

    Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
    	// Отчет заполнен по ЧЕКАМ ККМ - перераспределение выручки не требуется - 
    	// регистр Рознинчная выручка заполнять тоже не надо.
    	Возврат; 
	КонецЕсли;
	
	//Смартис Лиманчук начало 31.10.2012
    //Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
    //	Возврат; 
    //КонецЕсли;
	//Смартис Лиманчук окончание 31.10.2012
    
    // Сторнирование выручки сделать после ПКО по выручке
    
	// подготовим таблицу данных для сторнирования выручки
	ТаблицаСуммРеализации = ТаблицаПоТоварам.Скопировать();
	ТаблицаСуммРеализации.Свернуть("РасчетыВозврат,
								   |СчетДоходовБУ, 			СубконтоДоходовБУ1, 		 СубконтоДоходовБУ2, 		  СубконтоДоходовБУ3,
								   |СчетВычетовИзДоходовБУ, СубконтоВычетовИзДоходовБУ1, СубконтоВычетовИзДоходовБУ2, СубконтоВычетовИзДоходовБУ3"
								   ,"СуммаСНДСРегл,СуммаНДСРегл");
                                   
                                   
    // Выполним сторнирование выручки после того как она принята с помощь ПКО без учета ставок налогов
    Запрос = Новый Запрос();
    Запрос.УстановитьПараметр("Период"     , Новый Граница(Новый МоментВремени(ДатаДока, Ссылка) ,ВидГраницы.Исключая));
    Запрос.УстановитьПараметр("КассаККМ"   , СтруктураШапкиДокумента.Склад);
    Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
    Запрос.Текст = "
    |ВЫБРАТЬ
    |	СтавкаНДС       КАК СтавкаНДС,
    |	СуммаОстаток    КАК Сумма,
    |	СуммаНДСОстаток КАК СуммаНДС,
    |	ВидРозничнойВыручки КАК ВидРозничнойВыручки
    |ИЗ
    |	РегистрНакопления.РозничнаяВыручкаОрганизаций.Остатки(&Период, РозничнаяТочка В (&КассаККМ) И Организация В (&Организация)) КАК РозничнаяВыручкаОрганизацийОстатки";
    ТаблицаОстатков = Запрос.Выполнить().Выгрузить();

    СуммаОстаткаВыручки = ТаблицаОстатков.Итог("Сумма");

    // Если СуммаОстаткаВыручки < 0 Тогда нам нужно сделать сторнирование и переаспределение 
    // выручки - т.е. у нас есть выручка с НТТ - т.е. сначала ввели ПКО, потом отчет ККМ
    // в противном случае - выручки с НТТ нет. т.е., сначала ввели Отчет ККМ, потом ПКО.

    Если СуммаОстаткаВыручки < 0 Тогда // т.е. есть ПКО не закрытые Отчетами ККМ

    	СуммаОстаткаВыручки = - СуммаОстаткаВыручки;

    	// По регистру РозничнаяВыручкаОрганизаций.
    	НаборДвижений   = Движения.РозничнаяВыручкаОрганизаций;
    	ТаблицаДвижений = НаборДвижений.Выгрузить();

   		СуммаКСравнению = ТаблицаПоТоварам.Итог("СуммаБезНДСРегл")+ТаблицаПоТоварам.Итог("СуммаНДСРегл");

    	Если СуммаОстаткаВыручки >= СуммаКСравнению Тогда
    		МожноРаспределить = СуммаКСравнению;
    	Иначе
    		МожноРаспределить = СуммаОстаткаВыручки;
    	КонецЕсли;

    	// сторнирование выручки 
    	Для каждого СтрокаТЧ из ТаблицаОстатков Цикл

    		Если МожноРаспределить = 0 Тогда
    			Прервать;
    		КонецЕсли;

    		Если -СтрокаТЧ.Сумма >= МожноРаспределить Тогда
    			КРаспределению    = - МожноРаспределить;
    			СуммаНДС          = СтрокаТЧ.СуммаНДС * (МожноРаспределить / (-СтрокаТЧ.Сумма));
    			МожноРаспределить = 0;
    		Иначе
    			КРаспределению    = СтрокаТЧ.Сумма;
    			СуммаНДС          = СтрокаТЧ.СуммаНДС;
    			МожноРаспределить = МожноРаспределить - КРаспределению;
    		КонецЕсли;


    		// По регистру "Розничная выручка организаций"
    		СтрокаДвижений = ТаблицаДвижений.Добавить();
    		СтрокаДвижений.Организация     = СтруктураШапкиДокумента.Организация;
    		СтрокаДвижений.КассаККМ        = СтруктураШапкиДокумента.Склад;
    		СтрокаДвижений.СтавкаНДС       = СтрокаТЧ.СтавкаНДС;
    		СтрокаДвижений.Сумма           = КРаспределению;
    		СтрокаДвижений.СуммаНДС        = СуммаНДС;
    		СтрокаДвижений.Подразделение   = СтруктураШапкиДокумента.Подразделение;

    	КонецЦикла;
    	// сторнирование выручки закончено

    	Если СуммаОстаткаВыручки >= СуммаКСравнению Тогда
    		МожноРаспределить = СуммаКСравнению;
    	Иначе
    		МожноРаспределить = СуммаОстаткаВыручки;
    	КонецЕсли;


    КонецЕсли;

    
КонецПроцедуры

Процедура ДвиженияПоРаспределениюОплат(СтруктураШапкиДокумента, ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, Отказ, Заголовок)
    
    Если НЕ ЕстьБезналичныеРасчеты Тогда
    	Возврат;
    КонецЕсли;
    

    ДатаДока     = Дата;
    
    // Взаиморасчеты с эквайрером
    
    СуммаПродажПоКартам = ТаблицаПоПлатежнымКартам.Итог("Сумма");
    	
    Если СуммаПродажПоКартам <> 0 Тогда
    		
    	Проводка = Движения.Хозрасчетный.Добавить();
    	
        Проводка.Период      = ДатаДока;
    	Проводка.Организация = СтруктураШапкиДокумента.Организация;
    	Проводка.Сумма       = СуммаПродажПоКартам;
    	Проводка.Содержание  = "Оплата платежными картами";
    	
    	Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСЭквайрером;
    	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Эквайрер);
    	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ДоговорВзаиморасчетовЭквайрера);
        
        Проводка.СчетКт       =  ПланыСчетов.Хозрасчетный.РозничнаяВыручкаВКассахККМ;
        БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.КассаККМ);
    	
    КонецЕсли;
    	
    // Взаиморасчеты с банками по кредитам
    	
    Для каждого СтрокаКредита Из ТаблицаПоБанковскимКредитам Цикл
    	
    	Проводка = Движения.Хозрасчетный.Добавить();
    	
        Проводка.Период      = ДатаДока;
    	Проводка.Организация = СтруктураШапкиДокумента.Организация;
    	Проводка.Сумма       = СтрокаКредита.Сумма;
    	Проводка.Содержание  = "Оплата банковским кредитом";
    	
    	Проводка.СчетДт = СтрокаКредита.СчетУчетаРасчетовСКонтрагентом;
    	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаКредита.БанкКредитор);
    	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаКредита.ДоговорВзаиморасчетовБанкаКредитора);
        
        Проводка.СчетКт       =  ПланыСчетов.Хозрасчетный.РозничнаяВыручкаВКассахККМ;
        БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.КассаККМ);
        
    КонецЦикла;

КонецПроцедуры

Процедура ДополнитьСтруктуруПолейТоваровРегл(СтруктураПолей, СтруктураПростыхПолей)

    // Убираем БУ НУ
    
    //СтруктураПолей.Вставить("СчетУчетаБУ",         "СчетУчетаБУ");
    //СтруктураПолей.Вставить("СчетУчетаНУ",         "СчетУчетаНУ");
    //СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ", "ПринятыеСчетУчетаБУ");
    //СтруктураПолей.Вставить("ПринятыеСчетУчетаНУ", "ПринятыеСчетУчетаНУ");
    //СтруктураПолей.Вставить("СчетДоходовБУ" ,      "СчетДоходовБУ");
    //СтруктураПолей.Вставить("СубконтоБУ" ,         "СубконтоБУ");
    //СтруктураПолей.Вставить("СчетРасходовБУ" ,     "СчетРасходовБУ");
    //СтруктураПолей.Вставить("СчетДоходовНУ" ,      "СчетДоходовНУ");
    //СтруктураПолей.Вставить("СубконтоНУ" ,         "СубконтоНУ");
    //СтруктураПолей.Вставить("СчетРасходовНУ" ,     "СчетРасходовНУ");

	СтруктураПолей.Вставить("СчетУчетаБУ"              , "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"             , "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ"      , "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеЗабалансовый"     , "ПринятыеСчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СхемаРеализации"          , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"            , "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"       , "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"       , "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"       , "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"           , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"      , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"      , "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"      , "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("СчетВычетовИзДоходовБУ"   , "СхемаРеализации.СчетВычетовИзДоходов");
	СтруктураПолей.Вставить("СубконтоВычетовИзДоходовБУ1", "СхемаРеализации.СубконтоВычетовИзДоходов1");
	СтруктураПолей.Вставить("СубконтоВычетовИзДоходовБУ2", "СхемаРеализации.СубконтоВычетовИзДоходов2");
	СтруктураПолей.Вставить("СубконтоВычетовИзДоходовБУ3", "СхемаРеализации.СубконтоВычетовИзДоходов3");
	СтруктураПолей.Вставить("НалоговоеНазначение" 	   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат"       , "НалоговоеНазначениеДоходовИЗатрат");
	
	СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС" , Перечисления.ВидыДеятельностиНДС.ПустаяСсылка());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		ФлагСкладНТТ = (ЗначениеЗаполнено(Основание.Склад)
		                 И Основание.Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ);

		Если НЕ ФлагСкладНТТ Тогда
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ИнвентаризацияТоваровНаСкладе = Основание;
		ТипЦен                        = Склад.ТипЦенРозничнойТорговли;
		ВидОперации                   = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;

		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Реализация",
			Дата,
			Организация,
			Товары,				// ТабличнаяЧастьТовары
			Неопределено,		// ТабличнаяЧастьВозвратнаяТара
			Неопределено,   	// ТабличнаяЧастьУслуги
			Неопределено,   	// ТабличнаяЧастьОборудование
			Неопределено, 		// ТабличнаяЧастьОбъектыСтроительства
			Неопределено 	    // ТабличнаяЧастьБланкиСтрогогоУчета
		);
	
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
        
	// Заполним реквизит склад в табличной части "Товары"
	СкладИзШапки    =  Не мУказаниеСкладовВТЧ;
	Для каждого СтрокаТЧ из Товары Цикл
		Если (СкладИзШапки ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад)) И СтрокаТЧ.Склад <> Склад Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ);
    
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаРегламентированногоУчета", "ВалютаДокумента");
	//Смартис Лиманчук начало 31.10.2012
	//УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "СтатьяЗатратДляКрафт", "СтатьяЗатратДляКрафт");
	//Смартис Лиманчук окончание 31.10.2012
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "ВедениеУчетаПоПроектам", "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорВзаиморасчетовЭквайрера", "ВалютаВзаиморасчетов" , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
    
	СтруктураПолей.Вставить("Склад"                            , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                        , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Номенклатура"                     , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                           , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                            , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                         , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"             , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                       , "Количество * Коэффициент / ISNULL(Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,1)");
	СтруктураПолей.Вставить("КоличествоДок"                    , "Количество");
	СтруктураПолей.Вставить("Цена"                             , "Цена");
	СтруктураПолей.Вставить("Сумма"                            , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                        , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                              , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                           , "СуммаНДС");	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"       , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"             , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"      , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"      , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КлючСтроки"                       , "КлючСтроки");
	СтруктураПолей.Вставить("ТипНоменклатуры", "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"     , "Количество");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"       , "ПринадлежностьНоменклатуры");
	//Смартис Лиманчук начало 01.11.2012
	СтруктураПолей.Вставить("СуммаНормативнойСебестоимости"    , "СуммаНормативнойСебестоимости");
	//Смартис Лиманчук окончание 01.11.2012
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;
	КонецЕсли;

	ДополнитьСтруктуруПолейТоваровРегл(СтруктураПолей, СтруктураПростыхПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Функция возвращает таблицу продаж по дисконтным картам, необходимую для проведения документа.
//
// Параметры:
//  СтруктураШапкиДокумента - структура шапки документа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица продаж по дисконтным картам.
//
Функция ПолучитьТаблицуПродажПоДисконтнымКартам(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДисконтнаяКарта"        , "ДисконтнаяКарта");
	СтруктураПолей.Вставить("ВладелецДисконтнойКарты", "ВладелецДисконтнойКарты");
	СтруктураПолей.Вставить("Сумма"                  , "Сумма");

	ТЗ = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПродажиПоДисконтнымКартам", СтруктураПолей,,).Выгрузить();		 

	Для Каждого СтрокаТЗ Из ТЗ Цикл
		СтрокаТЗ.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЗ.Сумма, мВалютаРегламентированногоУчета,
								   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

	Возврат ТЗ;

КонецФункции // ПолучитьТаблицуПродажПоДисконтнымКартам()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ) 
    //Учетная политика не используется если отчет заполнен по ЧЕКАМ ККМ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ВидОперации <> Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		Иначе
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , мУчетнаяПолитикаРегл.ЕстьНДС);	
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ);
	
	//Коновалова 28022013 +
	Если Не РольДоступна("ПолныеПрава") И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ТОгда
		 Сообщить("Нельзя провести документ без отражения по бух. учету!
		          | Заполните галочку бух. учет.");
		Отказ = Истина;		  
	КонецЕсли;
	//Коновалова 28022013 -
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидОплаты", "ВидОплаты");
	СтруктураПолей.Вставить("ТипОплаты", "ВидОплаты.ТипОплаты");
	СтруктураПолей.Вставить("Сумма"    , "Сумма");

	ТаблицаПоПлатежнымКартам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПлатежнымиКартами", СтруктураПолей,,).Выгрузить();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидОплаты"                          , "ВидОплаты");
	СтруктураПолей.Вставить("ТипОплаты"                          , "ВидОплаты.ТипОплаты");
	СтруктураПолей.Вставить("Сумма"                              , "Сумма");
	СтруктураПолей.Вставить("БанкКредитор"                       , "БанкКредитор");
	СтруктураПолей.Вставить("ДоговорВзаиморасчетовБанкаКредитора", "ДоговорВзаиморасчетовБанкаКредитора");
	СтруктураПолей.Вставить("СуммаБанковскойКомиссии"            , "СуммаБанковскойКомиссии");
	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом"     , "СчетУчетаРасчетовСКонтрагентом");
	
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("ОрганизацияДоговора"     , "Док.ДоговорВзаиморасчетовБанкаКредитора.Организация");

    // в СформироватьЗапросПоТабличнойЧасти добавлен параметр СтруктураПростыхПолей (из Нерпа 1.1)
    //ТаблицаПоБанковскимКредитам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(
    //	ЭтотОбъект, "ОплатаБанковскимиКредитами", СтруктураПолей, СтруктураСложныхПолей).Выгрузить();
    ТаблицаПоБанковскимКредитам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(
		ЭтотОбъект, "ОплатаБанковскимиКредитами", СтруктураПолей, ,СтруктураСложныхПолей).Выгрузить();

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "ОплатаПлатежнымиКартами".
	ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами(ТаблицаПоПлатежнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "ОплатаБанковскимиКредитами".
	ПроверитьЗаполнениеТабличнойЧастиОплатаБанковскимиКредитами(ТаблицаПоБанковскимКредитам, СтруктураШапкиДокумента, Отказ, Заголовок);
	Если НЕ Отказ Тогда
		ТаблицаПоБанковскимКредитам.Свернуть("БанкКредитор, ДоговорВзаиморасчетовБанкаКредитора, СчетУчетаРасчетовСКонтрагентом", "Сумма");
	КонецЕсли;

	ЕстьБезналичныеРасчеты = ТаблицаПоПлатежнымКартам.Количество() > 0 ИЛИ ТаблицаПоБанковскимКредитам.Количество() > 0;
	Если ЕстьБезналичныеРасчеты Тогда
		//ИЗМЕНЕНО Верескул Игорь(Начало 01.08.2022
		//При проведении отрицательной суммы документа
		//и наличии безнал.платежей, которые ее не перекрывают, 
		//документ не проводится
		Если СуммаДокумента > 0 Тогда
			СуммаПродажЗаНаличные = СуммаДокумента - ТаблицаПоПлатежнымКартам.Итог("Сумма") - ТаблицаПоБанковскимКредитам.Итог("Сумма");
			Если СуммаПродажЗаНаличные < 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Сумма оплаты платежными картами и банковскими кредитами больше общей суммы продаж по отчету!", Отказ, Заголовок);
			КонецЕсли;		
		КонецЕсли; 		
		//Окончание)Верескул Игорь 
	КонецЕсли;
	
	ТаблицаПоПродажамПоДисконтнымКартам = ПолучитьТаблицуПродажПоДисконтнымКартам(СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "ПродажиПоДисконтнымКартам".
	ПроверитьЗаполнениеТабличнойЧастиПродажиПоДисконтнымКартам(ТаблицаПоПродажамПоДисконтнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим корректность указанных (заполненных) счетов учета
	ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура());
	
	// Движения по документу
	Если Не Отказ Тогда
		// Подготовим таблицу товаров для проведения.
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, СтруктураШапкиДокумента);

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, 
			ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок);
			
	КонецЕсли;
		
    //Сделаем переменные доступными из подписок на события
	СтруктураШапкиДокумента.Вставить("ЕстьБезналичныеРасчеты",ЕстьБезналичныеРасчеты);
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
	// Удаление записей регистрации из всех последовательностей
		
КонецПроцедуры

// Процедура выполняет дополнение документа значениями по умолчанию.
//
Процедура ДополнитьДокументЗначениямиПоУмолчанию() Экспорт

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(Товары, "Товары", Истина);
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект, "Реализация");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
	КонецЦикла;

КонецПроцедуры // ДополнитьДокументЗначениямиПоУмолчанию()

Процедура ЗаполнитьСчетаВШапкеРегл(ЗаполнятьБУ) Экспорт;
	
	Если ЗаполнятьБУ = Истина Тогда
		
		СчетДоходовРозничныхПродаж = ПланыСчетов.Хозрасчетный.ДоходОтРозницы;
		СчетВычетаИзДоходовРозничныхПродаж = ПланыСчетов.Хозрасчетный.ВычетыИзДоходаОтРозницы;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		
		СчетДоходовРозничныхПродаж = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетВычетаИзДоходовРозничныхПродаж = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВШапкеРегл()

Процедура ЗаполнитьРеквизитыНалоговогоУчетаНДСРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	Если ЗаполнятьНУ = Истина Тогда
		// Установим значения по умолчанию
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НалоговоеНазначение", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
		КонецЕсли;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НалоговоеНазначение", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений , СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РеализацияРозница, "КодОперацииПартииТоваров");
	          
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,  "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус3");
    	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений , СтруктураШапкиДокумента, ТаблицаПоТоварам)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,   "Организация");	
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
		
		
		Инд = 0;
		Для каждого Строка Из ТаблицаДвижений Цикл

			Инд = Инд + 1;
			Строка.НомерСтрокиДокумента = Инд;

			СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
	        
			Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
			Строка.КорСубконтоБУ1 = СтрокаТЧ.СубконтоРасходовБУ1;
			Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоРасходовБУ2;
			Строка.КорСубконтоБУ3 = СтрокаТЧ.СубконтоРасходовБУ3;
			
				
			Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;

				
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

