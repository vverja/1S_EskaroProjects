Перем мРазрешенОбходПроверкиЗапретаРедактированияЗакрытыхСмен Экспорт; //используется для выполнения регламентных действий над документами закрытых смен

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  ИмяМакета - строка, название макета.
//	КоличествоЭкземпляров - количество экземпляров
//	НаПринтер - отправлять задание на принтер без вывода для просмотра пользователем
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли НЕ УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = 'Недостаточно полномочий для печати непроведенного документа'"));
		Возврат;
	КонецЕсли;

	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		// Напечатаем внешную печатную форму
		
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		Если ТабДокумент <> Неопределено Тогда
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		КонецЕсли; 
		
	Иначе
		// Напечатаем встроенную печатную форму
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ОтчетОСоставеСмены", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ОтчетОСоставеСмены", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждый элемент которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура();
	СтруктураПечатныхФорм.Вставить("ОтчетОСоставеСмены", "Отчет о составе смены");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Выдает замечания по заполнению записанного документа для сведения пользователя
//
Процедура ПроверитьПравильностьЗаполненияДокумента() Экспорт
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// проверяем, что заполнены причины отсутствия и замещающие сотрудники у неявившихся
	// проверяем, что замещающие сотрудники отмечены как явившиеся
	
	ЗаголовокСообщения = НСтр("ru = 'Проверка правильности заполнения документа " + Ссылка + "'");
	
	Для Каждого ДанныеСтроки Из СоставСмены Цикл
		
		НачалоСообщения = "ru = 'В строке " + ДанныеСтроки.НомерСтроки + " ";
		
		Если ДанныеСтроки.Сотрудник.Пустая() Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр(НачалоСообщения + "не указан сотрудник'"), Ложь, ЗаголовокСообщения, СтатусСообщения.Информация);
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.Явка Тогда
			Продолжить;
		КонецЕсли;
			
		Если ПустаяСтрока(ДанныеСтроки.Примечание) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр(НачалоСообщения + "не указана причина неявки'"), Ложь, ЗаголовокСообщения, СтатусСообщения.Информация);
		КонецЕсли;
		
		Если ДанныеСтроки.ЗамещающийСотрудник.Пустая() Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НСтр(НачалоСообщения + "не указан замещающий сотрудник'"), Ложь, ЗаголовокСообщения, СтатусСообщения.Информация);
		Иначе
			// проверим, не замещает ли сотрудник сам себя
			Если ДанныеСтроки.ЗамещающийСотрудник = ДанныеСтроки.Сотрудник Тогда
				ОбщегоНазначения.СообщитьОбОшибке(НСтр(НачалоСообщения + "указано, что сотрудник замещает сам себя'"), Ложь, ЗаголовокСообщения, СтатусСообщения.Информация);
			Иначе
				// проверим, указан ли замещающий сотрудник в списке работающих
				ЗамещающийСотрудник = СоставСмены.Найти(ДанныеСтроки.ЗамещающийСотрудник, "Сотрудник");
				
				Если ЗамещающийСотрудник = Неопределено Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(НСтр(НачалоСообщения + "не отмечена явка указанного замещающего сотрудника'"), Ложь, ЗаголовокСообщения, СтатусСообщения.Информация);
					
				ИначеЕсли НЕ ЗамещающийСотрудник.Явка Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(НСтр(НачалоСообщения + "не отмечена явка указанного замещающего сотрудника (строка "+ЗамещающийСотрудник.НомерСтроки+", "+ЗамещающийСотрудник.Сотрудник+")'"), Ложь, ЗаголовокСообщения, СтатусСообщения.Информация);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;
	
	// проверяем, что бригадир отмечен как явившийся
	Если НЕ Ответственный.ФизЛицо.Пустая() Тогда
		
		Если СоставСмены.Найти(Ответственный.ФизЛицо, "Сотрудник") = Неопределено Тогда
			// в смене не указано такого же физ.лица, что и у ответственного
			ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru = 'Ответственный не указан в составе смены'"), Ложь, ЗаголовокСообщения, СтатусСообщения.Информация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПравильностьЗаполненияДокумента()

// Проверяет, можно записать документ или нет
//
// Параметры
//  Заголовок - заголовок сообщения об ошибке
//
// Возвращаемое значение
//	Истина 	- запись возможна
//	Ложь	- запись невозможна
Функция МожноЗаписатьДокумент(Заголовок)

	Если ПометкаУдаления Тогда
		
		// Проверяем, что документ не находится в завершенной смене
		
		Отказ = Ложь;
		
		Если мРазрешенОбходПроверкиЗапретаРедактированияЗакрытыхСмен <> Истина Тогда
			ОперативныйУчетПроизводства.ПроверкаЗапретаРедактированияЗакрытыхСмен(ЭтотОбъект, Отказ, РежимЗаписиДокумента.Проведение);
		КонецЕсли;
			
		Возврат НЕ Отказ;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	// Проверяем, что документ не находится в завершенной смене
	Если мРазрешенОбходПроверкиЗапретаРедактированияЗакрытыхСмен <> Истина Тогда
		
		ОперативныйУчетПроизводства.ПроверкаЗапретаРедактированияЗакрытыхСмен(ЭтотОбъект, Отказ, РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Запрещаем два документа в одну смену
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтчетОСоставеСмены.Ссылка
	|ИЗ
	|	Документ.ОтчетОСоставеСмены КАК ОтчетОСоставеСмены
	|ГДЕ
	|	ОтчетОСоставеСмены.ГраницаСмены = &ГраницаСмены
	|	И ОтчетОСоставеСмены.Подразделение = &Подразделение
	|	И ОтчетОСоставеСмены.Ссылка <> &Ссылка
	|	И (НЕ ОтчетОСоставеСмены.ПометкаУдаления)"
	);
	Запрос.УстановитьПараметр("ГраницаСмены",	ГраницаСмены);
	Запрос.УстановитьПараметр("Подразделение",	Подразделение);
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СтрокаСообщениеОбОшибке = НСтр("ru = 'Документ за эту смену уже есть ("+Выборка.Ссылка+")'"); 
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
	// проверяем, что сотрудники заполнены
	СтруктураОбязательныхПолей = Новый Структура("Сотрудник");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставСмены", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// проверяем, что нет дублей строк.
	ТаблицаСотрудников = СоставСмены.Выгрузить(,"Сотрудник");
	ТаблицаСотрудников.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТаблицаСотрудников.ЗаполнитьЗначения(1, "Количество");
	ТаблицаСотрудников.Свернуть("Сотрудник","Количество");
	Для Каждого ДанныеСтроки Из ТаблицаСотрудников Цикл
		Если НЕ ДанныеСтроки.Сотрудник.Пустая() И ДанныеСтроки.Количество > 1 Тогда
			// это дубль. Сформируем сообщение.
			СтрокаСообщениеОбОшибке = НСтр("ru = 'Сотрудник не может быть указан в документе дважды ("+ДанныеСтроки.Сотрудник+")'"); 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

	Возврат НЕ Отказ;
	
КонецФункции // МожноЗаписатьДокумент()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ

// Заполняет табличную часть СоставСмены по сменным графикам теми сотрудниками, которые сегодня должны работать.
//
Процедура ЗаполнитьСоставомТекущейСмены() Экспорт
	
	//Заполним по сменным графикам теми сотрудниками, которые сегодня должны работать.
	//Для этого способа заполнения используется следующее ограничение:
	//	- работники бригады имеют одинаковый сменный график работы.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДанныеГрафиковСмены.ВремяЯвки КАК ВремяЯвки,
	|	ДанныеГрафиковСмены.ОтработанноеВремя,
	|	ИСТИНА КАК Явка,
	|	ИСТИНА КАК ПоГрафику,
	|	ДанныеРаботников.Сотрудник КАК Сотрудник,
	|	ДанныеРаботников.Сотрудник.Представление КАК СотрудникПредставление
	|ИЗ
	|	(ВЫБРАТЬ
	|		СменыПериодыСмены.Ссылка КАК Ссылка,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА СменыПериодыСмены.НомерСтроки = 1
	|					ТОГДА СменыПериодыСмены.ВремяНачала
	|				ИНАЧЕ NULL
	|			КОНЕЦ) КАК ВремяЯвки,
	|		ВЫРАЗИТЬ(СУММА(РАЗНОСТЬДАТ(СменыПериодыСмены.ВремяНачала, СменыПериодыСмены.ВремяОкончания, ЧАС) + ВЫБОР
	|					КОГДА СменыПериодыСмены.ВремяОкончания > СменыПериодыСмены.ВремяНачала
	|						ТОГДА 0
	|					ИНАЧЕ 24
	|				КОНЕЦ) + 0.499999999999 КАК ЧИСЛО(2, 0)) КАК ОтработанноеВремя
	|	ИЗ
	|		Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
	|	ГДЕ
	|		СменыПериодыСмены.Ссылка = &Смена
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СменыПериодыСмены.Ссылка) КАК ДанныеГрафиковСмены,
	|	(ВЫБРАТЬ
	|		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Сотрудник
	|	ИЗ
	|		РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(, ) КАК РаботникиОрганизацийСрезПоследних
	|			ПО ГрафикиРаботыПоСменам.ГрафикРаботы = РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|	ГДЕ
	|		ГрафикиРаботыПоСменам.Смена = &Смена
	|		И ГрафикиРаботыПоСменам.Дата = &Дата
	|		И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В
	|				(ВЫБРАТЬ
	|					СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
	|				ИЗ
	|					РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	|				ГДЕ
	|					СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаботникиСрезПоследних.ФизЛицо
	|	ИЗ
	|		РегистрСведений.Работники.СрезПоследних КАК РаботникиСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|			ПО РаботникиСрезПоследних.ГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы
	|	ГДЕ
	|		РаботникиСрезПоследних.Подразделение = &Подразделение
	|		И ГрафикиРаботыПоСменам.Смена = &Смена
	|		И ГрафикиРаботыПоСменам.Дата = &Дата) КАК ДанныеРаботников
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяЯвки,
	|	Сотрудник
	|АВТОУПОРЯДОЧИВАНИЕ"
	);
	
	Запрос.УстановитьПараметр("Дата",			НачалоДня(ОперативныйУчетПроизводства.ПолучитьГраницуСменыПоДате(Дата, Смена)));
	Запрос.УстановитьПараметр("Подразделение",	Подразделение);
	Запрос.УстановитьПараметр("Смена",			Смена);
	
	СоставСмены.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьСоставомТекущейСмены()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Обработчик события ОбработкаЗаполнения документа
// Заполняет документ при вводе на основании документа ОтчетМастераСмены
Процедура ОбработкаЗаполнения(Основание)
	
	ДатаСмены = ?(ЗначениеЗаполнено(Дата), Дата, ОбщегоНазначения.ПолучитьРабочуюДату());
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетМастераСмены") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, "Ответственный,Смена");
		
	// Заполнение по настройке
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.ОтчетОСоставеСмены.СтруктураДополнительныхДанныхФормы());
		
	Иначе
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		Смена = Документы.ОтчетОСоставеСмены.ПолучитьСмену(Подразделение, Ответственный, ДатаСмены);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередЗаписью документа
// Выполняет проверки на возможность записи
// Заполняет значение реквизита ГраницаСмены
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГраницаСмены = ОперативныйУчетПроизводства.ПолучитьГраницуСменыПоДате(Дата, Смена);
	
	Если ЭтоНовый() Тогда
		
		Заголовок = НСтр("ru = 'Запись документа: " + Метаданные().Синоним + "'");
		
	Иначе
		
		Заголовок = НСтр("ru = 'Запись документа: " + ЭтотОбъект + "'");
		
	КонецЕсли;
	
	Отказ = Отказ ИЛИ НЕ МожноЗаписатьДокумент(Заголовок);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
	
КонецПроцедуры
