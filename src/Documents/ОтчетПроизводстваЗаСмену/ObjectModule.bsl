Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мУчетнаяПолитика Экспорт;         // (Общ)
Перем мУчетнаяПолитикаБух Экспорт;      // (Регл)
Перем мПорядокСписанияПартий;           // (Общ)
Перем мУчетЗатратПоЗаказамНаПроизводство;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

Перем мИспользоватьТолькоСборочныеСпецификации Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мИспользоватьНаработку Экспорт;
Перем мИспользоватьЗаказыНаПроизводство Экспорт;
Перем мИспользоватьПотребностиЗаказовНаПроизводство;
Перем мСпособЗакрытияПотребностейЗаказовНаПроизводство;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует печатную форму документа
//
Функция ПечатьНакладнаяНаВыпуск()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад,
	|	"+?(ОтражатьВБухгалтерскомУчете, "ПодразделениеОрганизации", "Подразделение")+" КАК Подразделение
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену
	|
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Выпуск"         , Перечисления.ВидыВыпуска.Выпуск);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки КАК НомПП,
	|	Номенклатура." + ТоварКод + " КАК ТоварКод,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Имя,
	|	ХарактеристикаНоменклатуры       	 КАК Характеристика,
	|	СерияНоменклатуры                	 КАК Серия,
	|	ЕдиницаИзмеренияМест КАК ЕдИзмМест,
	|	ЕдиницаИзмерения КАК ЕдИзм,
	|	Количество КАК Количество,
	|	КоличествоМест КАК КоличествоМест
	|
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСмену
	|
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент
	|	И ОтчетПроизводстваЗаСмену.ВидВыпуска = &Выпуск
	|
	|УПОРЯДОЧИТЬ ПО 
	|	НомПП
	|";

	ЗапросПоНоменклатуре = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПроизводстваЗаСмену_Н";
	
	// Вывод заголовка
	Макет = ПолучитьМакет("НакладнаяНаВыпуск");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка, НСтр("ru='Накладная на передачу готовой продукции';uk='Накладна на передачу готової продукції'",КодЯзыкаПечать),КодЯзыкаПечать);
	Область.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(Область);

	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.Имя = СокрЛП(ВыборкаПоСтрокам.Имя) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		ТабДокумент.Вывести(Область);

	КонецЦикла;

	// Вывод подвала
	Область = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(Область);

	Возврат ТабДокумент;

КонецФункции // ПечатьТребованиеНакладная()

// Функция осуществляет запуск обработки формирующей печатную форму
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьСерийныеНомера()
	
	Обработка = Обработки.ПечатьСерийныхНомеров.ПолучитьФорму("Форма");
	Обработка.Печать(Продукция, СерийныеНомера);
	
	Возврат Неопределено;
	
КонецФункции // ПечатьСерийныеНомера()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	
	Если ИмяМакета = "Накладная" Тогда
		
		ТабДокумент = ПечатьНакладнаяНаВыпуск();

	
	ИначеЕсли ИмяМакета = "СерНомера" Тогда
	 
	 	ТабДокумент = ПечатьСерийныеНомера();
	
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Продукция");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТипЗнч(ТабДокумент) = Тип("Массив") Тогда
		Для К = 0 По ТабДокумент.ВГраница() Цикл
			УниверсальныеМеханизмы.НапечататьДокумент( ТабДокумент[К], КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), ТабДокумент[К]);
		КонецЦикла;
	Иначе
		УниверсальныеМеханизмы.НапечататьДокумент( ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	КонецЕсли;

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	

    СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Накладная",      "Накладная на передачу готовой продукции");
	
	СерНомера = Обработки.ПечатьСерийныхНомеров.ПолучитьФорму("Форма").ПредставлениеВМеню();	
	Если СерНомера <> "" Тогда
		СтруктураМакетов.Вставить("СерНомера", СерНомера);
	КонецЕсли;
	
	СтруктураМакетов.Вставить("СерийныеНомера", "Список серийных номеров");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
							   |Материалы.ПодразделениеНЗП, РаспределениеМатериалов.ПодразделениеНЗП,
							   |ВозвратныеОтходы.ПодразделениеНЗП, РаспределениеВозвратныхОтходов.ПодразделениеНЗП,
							   |ПрочиеЗатраты.ПодразделениеНЗП, РаспределениеПрочихЗатрат.ПодразделениеНЗП,
							   |ТехнологическиеОперации.ПодразделениеНЗП, РаспределениеТехнологическихОпераций.ПодразделениеНЗП,
							   |ПрочиеЗатраты.Сумма,
							   |Получатели.Подразделение,
							   |РаспределениеПрочихЗатрат.Сумма,
							   |ТехнологическиеОперации.СчетЗатрат,ТехнологическиеОперации.Сумма,
							   |Исполнители.СуммаКНачислению,
							   |ВозвратныеОтходы.Сумма,
							   |ВозвратныеОтходы.СтатусПартии,
							   |Продукция.СтатусПартии";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
							   |Материалы.ПодразделениеОрганизацииНЗП, РаспределениеМатериалов.ПодразделениеОрганизацииНЗП,
							   |ВозвратныеОтходы.ПодразделениеОрганизацииНЗП, РаспределениеВозвратныхОтходов.ПодразделениеОрганизацииНЗП,
							   |ПрочиеЗатраты.ПодразделениеОрганизацииНЗП, РаспределениеПрочихЗатрат.ПодразделениеОрганизацииНЗП,
							   |ТехнологическиеОперации.ПодразделениеОрганизацииНЗП, РаспределениеТехнологическихОпераций.ПодразделениеОрганизацииНЗП,
 							   |Продукция.СчетЗатрат, Продукция.НалоговоеНазначение,
							   |Получатели.ПодразделениеОрганизации, Получатели.СчетЗатрат,
							   |РаспределениеМатериалов.СчетЗатрат, РаспределениеМатериалов.НалоговоеНазначение, 
							   |ТехнологическиеОперации.СчетЗатрат,ТехнологическиеОперации.СуммаРегл,ТехнологическиеОперации.НалоговоеНазначение, 
							   |Исполнители.СуммаКНачислениюРегл,
							   |ПрочиеЗатраты.СуммаРегл, ПрочиеЗатраты.СуммаНал, ПрочиеЗатраты.СуммаНДС, ПрочиеЗатраты.СуммаНДСКредит,
							   |РаспределениеПрочихЗатрат.СчетЗатрат, РаспределениеПрочихЗатрат.СуммаРегл, РаспределениеПрочихЗатрат.СуммаНал, РаспределениеПрочихЗатрат.СуммаНДС, РаспределениеПрочихЗатрат.СуммаНДСКредит, РаспределениеПрочихЗатрат.НалоговоеНазначение,
							   |РаспределениеТехнологическихОпераций.СчетЗатрат, РаспределениеТехнологическихОпераций.СуммаРегл, РаспределениеТехнологическихОпераций.НалоговоеНазначение,
							   |ВозвратныеОтходы.СчетЗатрат, ВозвратныеОтходы.СуммаРегл, ВозвратныеОтходы.НалоговоеНазначение,
							   |РаспределениеВозвратныхОтходов.СчетЗатрат, РаспределениеВозвратныхОтходов.НалоговоеНазначение";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Функция возвращает тех. операции для указанных спецификаций
//
Функция ПолучитьТехОперации(Спецификация, Продукция = Неопределено, ХарактеристикаПродукции = Неопределено) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Маршрут.НомерОперации,
	|	Маршрут.ТехнологическаяОперация КАК ТехОперация,
	|	ВЫБОР КОГДА (ВыходныеИзделия.КоличествоПродукции ЕСТЬ NULL) ИЛИ (ВыходныеИзделия.КоличествоПродукции = 0) ТОГДА
	|		Маршрут.Количество
	|	ИНАЧЕ
	|		Маршрут.Количество / ВыходныеИзделия.КоличествоПродукции
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Справочник.ТехнологическиеКартыПроизводства.Маршрут КАК Маршрут
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СУММА(ВыходныеИзделия.Количество / ВыходныеИзделия.ЕдиницаИзмерения.Коэффициент) КАК КоличествоПродукции
	|		ИЗ
	|			Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК ВыходныеИзделия
	|		ГДЕ
	|			ВыходныеИзделия.Ссылка = &Спецификация
	|			И ВыходныеИзделия.Номенклатура = &Продукция
	|			И ВыходныеИзделия.ХарактеристикаНоменклатуры = &ХарактеристикаПродукции
	|		) КАК ВыходныеИзделия
	|	ПО
	|		ИСТИНА
	|		
	| ГДЕ
	|	Маршрут.Ссылка В (
	|		ВЫБРАТЬ 
	|			РегТехКарта.ТехнологическаяКарта
	|		ИЗ
	|			РегистрСведений.ТехнологическиеКартыСпецификацийПланирования.СрезПоследних(&КонДата, Спецификация = &Спецификация) КАК РегТехКарта
	|		)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("КонДата", 				 Новый Граница( Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Спецификация", 			 Спецификация);
	Запрос.УстановитьПараметр("Продукция", 				 Продукция);
	Запрос.УстановитьПараметр("ХарактеристикаПродукции", ХарактеристикаПродукции);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // ПолучитьТехОперации()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "ТехнологическиеОперации"
//
Процедура ЗаполнитьТехОперации() Экспорт
	
	ТабВыпуска = Продукция.Выгрузить();
	ТабВыпуска.Свернуть("Спецификация, НоменклатурнаяГруппа, Заказ, ВидВыпуска");
	ТабВыпуска.Очистить();
	ТабВыпуска.Колонки.Добавить("КолВыпуск");
	
	Для Каждого СтрокаТЧ Из Продукция Цикл
		
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Спецификация) ИЛИ СтрокаТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабВыпуска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.КолВыпуск = 0;
		
		Специф = СтрокаТЧ.Спецификация;
		
		Для Каждого СтрокаСпец Из Специф.ВыходныеИзделия Цикл
			Если СтрокаСпец.Номенклатура = СтрокаТЧ.Номенклатура 
			   И (СтрокаСпец.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры
			   ИЛИ НЕ ЗначениеЗаполнено(СтрокаСпец.ХарактеристикаНоменклатуры)) Тогда
				КолВыпускБезНаработки = СтрокаТЧ.Количество - СтрокаТЧ.КоличествоДоделка;
				КолВыпускБезНаработки = ?(КолВыпускБезНаработки>0,КолВыпускБезНаработки,0);
				Если СтрокаСпец.Количество = 0 или КолВыпускБезНаработки = 0 Тогда
					КолВыпуск = 0;
				Иначе
					КолВыпуск = (КолВыпускБезНаработки * СтрокаТЧ.Коэффициент) 
							  / (СтрокаСпец.Количество * ?(ЗначениеЗаполнено(СтрокаСпец.ЕдиницаИзмерения), СтрокаСпец.ЕдиницаИзмерения.Коэффициент, 1));
				КонецЕсли;
				
				НоваяСтрока.КолВыпуск = КолВыпуск
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаТехнологическиеОперации = ТехнологическиеОперации.Выгрузить();
	
	ТабВыпуска.Сортировать("Спецификация,ВидВыпуска,КолВыпуск УБЫВ");
	
	Для Каждого СтрокаВыпуска Из ТабВыпуска Цикл
		
		ТехОпер = ПолучитьТехОперацииНаВыпускПоСпецификации(СтрокаВыпуска.Спецификация, СтрокаВыпуска.КолВыпуск);
		Если ТехОпер = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьСтрокуВТехОперации(ТаблицаТехнологическиеОперации, СтрокаВыпуска, ТехОпер);
		
	КонецЦикла;
		
	ТаблицаТехнологическиеОперации.Свернуть("ТехнологическаяОперация, Валюта, Расценка, СтатьяЗатрат, Заказ, 
			|НоменклатурнаяГруппа, ВидВыпуска, СчетЗатрат, НалоговоеНазначение",
			"Количество, СуммаВВалютеРасценки, Сумма, СуммаРегл");
			
	ТехнологическиеОперации.Загрузить(ТаблицаТехнологическиеОперации);
	
КонецПроцедуры // КоманднаяПанельТехнологическиеОперацииЗаполнить()

Процедура ДобавитьСтрокуВТехОперации(ТаблицаТехнологическиеОперации, СтрокаВыпуска, ТехОпер)
	
	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", мВалютаУправленческогоУчета));
	КурсВалютыУпрУчета = Структура.Курс;
	КратностьВалютыУпрУчета = Структура.Кратность;

	СтруктПоиска = Новый Структура;
	СтруктПоиска.Вставить( "Спецификация", СтрокаВыпуска.Спецификация);
	СтруктПоиска.Вставить( "ВидВыпуска",   СтрокаВыпуска.ВидВыпуска);
	
	ТабЗнач = Продукция.Выгрузить();
	ТабЗнач.Свернуть( "Спецификация, Заказ, НоменклатурнаяГруппа, ВидВыпуска", "ДоляСтоимости");
	
	РезПоиска = ТабЗнач.НайтиСтроки(СтруктПоиска);
	
	МассивКоэф = Новый Массив;
	Для К = 0 По РезПоиска.ВГраница() Цикл
		Если РезПоиска[К].ДоляСтоимости = 0 Тогда
			ДоляСтоимости = 1;
		Иначе
			ДоляСтоимости = РезПоиска[К].ДоляСтоимости;
		КонецЕсли;
		МассивКоэф.Добавить(ДоляСтоимости);
	КонецЦикла;
	
	Для Каждого СтрокаТехОпер Из ТехОпер Цикл
		
		ВалРасценки = ?(НЕ ЗначениеЗаполнено(СтрокаТехОпер.ТехОперация.Валюта), мВалютаУправленческогоУчета, СтрокаТехОпер.ТехОперация.Валюта);
		КурсВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты( ВалРасценки, Дата);
		
		СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТехОпер.Количество * СтрокаТехОпер.ТехОперация.Расценка,
			ВалРасценки,
			мВалютаУправленческогоУчета,
			КурсВалюты.Курс,      КурсВалютыУпрУчета,
			КурсВалюты.Кратность, КратностьВалютыУпрУчета);
			
		СуммаБух = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТехОпер.Количество * СтрокаТехОпер.ТехОперация.Расценка,
			ВалРасценки,
			мВалютаРегламентированногоУчета,
			КурсВалюты.Курс,      1,
			КурсВалюты.Кратность, 1);
			
		МассивСуммУпр = ОбщегоНазначения.РаспределитьПропорционально( СуммаУпр, МассивКоэф, 2);
		МассивСуммБух = ОбщегоНазначения.РаспределитьПропорционально( СуммаБух, МассивКоэф, 2);
		МассивСуммВал = ОбщегоНазначения.РаспределитьПропорционально( СтрокаТехОпер.Количество * СтрокаТехОпер.ТехОперация.Расценка, МассивКоэф, 2);
		
		Если МассивСуммУпр = Неопределено И МассивСуммБух = Неопределено И МассивСуммВал = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для К = 0 По РезПоиска.ВГраница() Цикл
			
			НоваяСтрока = ТаблицаТехнологическиеОперации.Добавить();
			НоваяСтрока.ТехнологическаяОперация = СтрокаТехОпер.ТехОперация;
					
			НоваяСтрока.Валюта       = ВалРасценки;
			НоваяСтрока.Расценка     = СтрокаТехОпер.ТехОперация.Расценка;
			НоваяСтрока.СтатьяЗатрат = СтрокаТехОпер.ТехОперация.ОсновнаяСтатьяЗатратНаПроизводство;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыпуска);
					
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(
				НоваяСтрока,
				ПодразделениеОрганизации,
				НоваяСтрока.СтатьяЗатрат);
				
			НоваяСтрока.НалоговоеНазначение   = СтрокаТехОпер.ТехОперация.СпособОтраженияЗарплатыВБухучете.НалоговоеНазначениеДоходовИЗатрат;
					
			НоваяСтрока.Количество           = СтрокаТехОпер.Количество;
			НоваяСтрока.СуммаВВалютеРасценки = ?(МассивСуммВал = Неопределено, 0, МассивСуммВал[К]);
			НоваяСтрока.Сумма                = ?(МассивСуммУпр = Неопределено, 0, МассивСуммУпр[К]);
			НоваяСтрока.СуммаРегл            = ?(МассивСуммБух = Неопределено, 0, МассивСуммБух[К]);

		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокуВТехОперации()

// Функция возвращает тех. операции для указанных спецификаций
//
Функция ПолучитьТехОперацииНаВыпускПоСпецификации(Спецификация, КолВыпуск) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Маршрут.НомерОперации,
	|	Маршрут.ТехнологическаяОперация КАК ТехОперация,
	|	Маршрут.Количество * &КолВыпуск КАК Количество
	|ИЗ
	|	Справочник.ТехнологическиеКартыПроизводства.Маршрут КАК Маршрут
	|ГДЕ
	|	Маршрут.Ссылка В
	|			(ВЫБРАТЬ
	|				РегТехКарта.ТехнологическаяКарта
	|			ИЗ
	|				РегистрСведений.ТехнологическиеКартыСпецификацийПланирования.СрезПоследних(&КонДата, Спецификация = &Спецификация) КАК РегТехКарта)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата",      Новый Граница( Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр( "Спецификация", Спецификация);
	Запрос.УстановитьПараметр( "КолВыпуск",    КолВыпуск);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // ПолучитьТехОперацииНаВыпускПоСпецификации()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДОКУМЕНТА 

// Процедура заполнения документа по заданию на производство.
//
Процедура ЗаполнитьПродукциюПоЗаданиюНаПроизводство() Экспорт
	
	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ЗаданиеНаПроизводство) Тогда
		ТекстПредупреждения = "Не выбрано задание на производство. Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;
	
	Если Не ЗаполнятьТабличнуюЧасть Тогда
		#Если Клиент Тогда
		Предупреждение(ТекстПредупреждения, ,);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если Продукция.Количество() > 0 Тогда
		#Если Клиент Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		#КонецЕсли
		Продукция.Очистить();
	КонецЕсли;
	

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ЗаданиеНаПроизводство", ЗаданиеНаПроизводство);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Запрос.УстановитьПараметр("ПолнаяСпецификация", Перечисления.ВидыСпецификаций.Полная);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Остатки.Номенклатура 									КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры 						КАК ХарактеристикаНоменклатуры,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков 			КАК ЕдиницаИзмерения,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	Остатки.Заказ 											КАК Заказ,
	|	Остатки.КонечнаяПродукция 								КАК КонечнаяПродукция,
	|	Остатки.КоличествоОстаток 								КАК КоличествоОстатокПоЗаданию,
	|	ЗаданиеНаПроизводствоВыпуск.ДоляСтоимости 				КАК ДоляСтоимости,
	|	ЗаданиеНаПроизводствоВыпуск.Спецификация 				КАК Спецификация
	|ИЗ
	|	РегистрНакопления.ЗаданияНаВыпуск.Остатки(&ДатаОстатков, ЗаданиеНаПроизводство = &ЗаданиеНаПроизводство) КАК Остатки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗаданиеНаПроизводство.Номенклатура КАК Номенклатура,
	|			ЗаданиеНаПроизводство.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ЗаданиеНаПроизводство.КонечнаяПродукция,
	|			ЗаданиеНаПроизводство.Заказ,
	|			ЗаданиеНаПроизводство.Спецификация,
	|			ВЫБОР КОГДА СпецификацииНоменклатуры.ДоляСтоимости ЕСТЬ NULL ТОГДА
	|				1
	|			ИНАЧЕ
	|				СпецификацииНоменклатуры.ДоляСтоимости
	|			КОНЕЦ КАК ДоляСтоимости
	|		ИЗ
	|			Документ.ЗаданиеНаПроизводство.ВыпускТехПроцесс КАК ЗаданиеНаПроизводство
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ 
	|				Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатуры
	|			ПО 
	|				ЗаданиеНаПроизводство.Спецификация 					= СпецификацииНоменклатуры.Ссылка
	|				И ЗаданиеНаПроизводство.Номенклатура 				= СпецификацииНоменклатуры.Номенклатура
	|				И ЗаданиеНаПроизводство.ХарактеристикаНоменклатуры 	= СпецификацииНоменклатуры.ХарактеристикаНоменклатуры
	|		ГДЕ
	|			ЗаданиеНаПроизводство.Ссылка = &ЗаданиеНаПроизводство
	|			
	|		) КАК ЗаданиеНаПроизводствоВыпуск
	|			
	|	ПО 
	|		Остатки.Номенклатура 					= ЗаданиеНаПроизводствоВыпуск.Номенклатура
	|		И Остатки.ХарактеристикаНоменклатуры 	= ЗаданиеНаПроизводствоВыпуск.ХарактеристикаНоменклатуры
	|		И Остатки.КонечнаяПродукция 			= ЗаданиеНаПроизводствоВыпуск.КонечнаяПродукция
	|		И Остатки.Заказ							= ЗаданиеНаПроизводствоВыпуск.Заказ
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл


		КолвоСпис = Выборка.КоличествоОстатокПоЗаданию;
		
		Если КолвоСпис <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Продукция.Добавить();
		СтрокаТабличнойЧасти.Количество = КолвоСпис;
		СтрокаТабличнойЧасти.Номенклатура     			= Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      			= Выборка.Коэффициент;
		Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		КонецЕсли;
		Если ТипЗнч(Выборка.Заказ)=Тип("ДокументСсылка.ЗаказНаОбслуживаниеОС") ИЛИ 
			ТипЗнч(Выборка.Заказ)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			СтрокаТабличнойЧасти.ЗаказВыпуска  				= Выборка.Заказ;
		Иначе	
			СтрокаТабличнойЧасти.Заказ      				= Выборка.Заказ;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.КонечнаяПродукция      	= Выборка.КонечнаяПродукция;
		
		СтрокаТабличнойЧасти.ВидВыпуска 				= Перечисления.ВидыВыпуска.Выпуск;
		СтрокаТабличнойЧасти.СтатусПартии 				= Перечисления.СтатусыПартийТоваров.Продукция;
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа 		= Выборка.Номенклатура.НоменклатурнаяГруппа;
		
		Если Выборка.ДоляСтоимости = NULL ИЛИ Выборка.Спецификация = NULL Тогда
			СтрокаТабличнойЧасти.ДоляСтоимости = 1;
			СтрокаТабличнойЧасти.Спецификация  = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
		Иначе
			СтрокаТабличнойЧасти.ДоляСтоимости = Выборка.ДоляСтоимости;
			СтрокаТабличнойЧасти.Спецификация  = Выборка.Спецификация;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Продукция", ОтражатьВБухгалтерскомУчете);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПродукциюПоЗаданиюНаПроизводство()

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если Материалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		Материалы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьМатериалы = Материалы.Выгрузить();
	ТабличнаяЧастьПродукция = Продукция.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура("Заказ, ЗаказВыпуска,НоменклатурнаяГруппа, ВидВыпуска, Спецификация");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);

	Для каждого СтрокаТаблицы из ТабличнаяЧастьПродукция Цикл
		
		КоличествоВыпускБезНаработки = СтрокаТаблицы.Количество - ?(ИспользоватьНаработку, СтрокаТаблицы.КоличествоДоделка, 0);
		СтрокаТаблицы.Количество = ?(КоличествоВыпускБезНаработки > 0, КоличествоВыпускБезНаработки, 0);
	КонецЦикла;
	
	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата, , ПараметрыВыпускаПродукции);

	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, НоменклатурнаяГруппа, СтатьяЗатрат, Заказ, ЗаказВыпуска, ВидВыпуска, Спецификация", "Количество");
	
	Материалы.Загрузить(ТабличнаяЧастьМатериалы);
		
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

// Процедура заполняет возвратные отходы по спецификациям.
//
Процедура ЗаполнитьВозвратныеОтходыПоСпецификации() Экспорт
	
	Если ВозвратныеОтходы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Возвратные отходы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		ВозвратныеОтходы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьВозвратныеОтходы = ВозвратныеОтходы.Выгрузить();
	ТабличнаяЧастьПродукция = Продукция.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура("Заказ, ВидВыпуска, Спецификация, НоменклатурнаяГруппа, СчетЗатрат");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	
	Для каждого СтрокаТаблицы из ТабличнаяЧастьПродукция Цикл
		КоличествоВыпускБезНаработки = СтрокаТаблицы.Количество - ?(ИспользоватьНаработку, СтрокаТаблицы.КоличествоДоделка, 0);
		СтрокаТаблицы.Количество = ?(КоличествоВыпускБезНаработки > 0, КоличествоВыпускБезНаработки, 0);
	КонецЦикла;

	УправлениеПроизводством.ЗаполнитьВозвратныеОтходыПоСпецификациям(ТабличнаяЧастьВозвратныеОтходы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата, , ПараметрыВыпускаПродукции);

	ТабличнаяЧастьВозвратныеОтходы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, СтатьяЗатрат, Заказ,
			|ВидВыпуска, Спецификация, НоменклатурнаяГруппа, СчетЗатрат", "Количество, Цена, Сумма, СуммаРегл");
	
	ВозвратныеОтходы.Загрузить(ТабличнаяЧастьВозвратныеОтходы);
	
	Для Каждого СтрокаТабличнойЧасти Из ВозвратныеОтходы Цикл
		
		СтрокаТабличнойЧасти.СтатусПартии 			= Перечисления.СтатусыПартийТоваров.Продукция;
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти       (СтрокаТабличнойЧасти, Ссылка, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"ВозвратныеОтходы");
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, Ссылка);
		
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабЧасти(ВозвратныеОтходы, "ВозвратныеОтходы", ОтражатьВБухгалтерскомУчете, Ложь, Истина);//заполняем только счета номенклатуры
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

#Если Клиент Тогда

// Процедура заполняет табличную часть "Прочие затраты" остатками в НЗП.
//
Процедура ЗаполнитьПрочиеЗатратыПоОстаткам() Экспорт
	
	ПрочиеЗатраты.Очистить();
	
	ТаблицаПрочиеЗатраты = ПрочиеЗатраты.Выгрузить();
	УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамНЗП(ЭтотОбъект, ТаблицаПрочиеЗатраты);
	ТаблицаПрочиеЗатраты.ЗаполнитьЗначения( Перечисления.ВидыВыпуска.Выпуск, "ВидВыпуска");
	ПрочиеЗатраты.Загрузить(ТаблицаПрочиеЗатраты);
		
КонецПроцедуры // ЗаполнитьПрочиеЗатратыПоОстаткам()

// Процедура добавляет данные по продукции из заказа покупателя (переработка)
//
Процедура ДобавитьИзЗаказаПокупателя() Экспорт
	
	ФормаВыбора = Документы.ЗаказПокупателя.ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	Заказ = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Заказ.Товары Цикл
		
		НоваяСтрока = Продукция.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаТЧ);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Продукция", ОтражатьВБухгалтерскомУчете);
		
		//Счета учета установим явно, если заполняем по заказу на переработку.
		Если Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			Если ОтражатьВБухгалтерскомУчете Тогда
				НоваяСтрока.Счет = ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;
			КонецЕсли;
			НоваяСтрока.ЗаказРезерв = Заказ;
        КонецЕсли;
		НоваяСтрока.Заказ              		= Заказ;
		НоваяСтрока.Качество           		= Справочники.Качество.Новый;
		НоваяСтрока.НаправлениеВыпуска 		= Перечисления.НаправленияВыпуска.НаСклад;
		НоваяСтрока.ВидВыпуска         		= Перечисления.ВидыВыпуска.Выпуск;
		НоваяСтрока.НоменклатурнаяГруппа 	= СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
		НоваяСтрока.СтатусПартии 			= Перечисления.СтатусыПартийТоваров.Продукция;
		НоваяСтрока.ДоляСтоимости 			= 1;
	КонецЦикла;
КонецПроцедуры // ДобавитьИзЗаказаПокупателя()

// Процедура добавляет данные по материалам из требование-накладная
//
Процедура ДобавитьИзТребованиеНакладной() Экспорт
	
	ФормаВыбора = Документы.ТребованиеНакладная.ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Отбор = ФормаВыбора.Отбор.ПодразделениеОрганизации;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = ПодразделениеОрганизации;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокТН = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокТН) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ДокТН.Материалы Цикл
		
		НоваяСтрока = Материалы.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.ВидВыпуска         = Перечисления.ВидыВыпуска.Выпуск;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьИзТребованиеНакладной()

#КонецЕсли

// Процедура заполнения табличной части распределение материалов.
//
Процедура ЗаполнитьТаблицуРаспределенияМатериалов(Спрашивать = Истина) Экспорт
	
	Если Не ИспользоватьМатериалы Тогда
		Возврат;
	КонецЕсли;
	
	Если Материалы.Количество() = 0 Тогда
		Если РаспределениеМатериалов.Количество() > 0 Тогда
			РаспределениеМатериалов.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РаспределениеМатериалов.Количество() > 0 Тогда
		Если Спрашивать И Не АвтораспределениеМатериалов Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение материалов"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		РаспределениеМатериалов.Очистить();
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураДопКолонок = Новый Структура("Заказ, ЗаказВыпуска, НоменклатурнаяГруппа, ВидВыпуска, Спецификация, 
										  |СчетЗатрат, НалоговоеНазначение, ДоляСтоимости");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	УправлениеПроизводством.ЗаполнитьРаспределениеМатериаловНаПродукцию(СтруктураШапкиДокумента, Материалы, Продукция, РаспределениеМатериалов, СтруктураДопКолонок, Отбор, ПараметрыВыпускаПродукции);
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияМатериалов()

// Процедура заполнения табличной части распределение прочих затрат
//
Процедура ЗаполнитьТаблицуРаспределенияПрочихЗатрат(Отказ = Неопределено) Экспорт
	
	Если ПрочиеЗатраты.Количество() = 0 Тогда
		Если РаспределениеПрочихЗатрат.Количество() > 0 Тогда
			РаспределениеПрочихЗатрат.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РаспределениеПрочихЗатрат.Количество() > 0 Тогда
		Если Не АвтораспределениеПрочихЗатрат Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение прочих затрат"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		РаспределениеПрочихЗатрат.Очистить();
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	УправлениеПроизводством.ЗаполнитьРаспределениеПрочихЗатратНаПродукцию(СтруктураШапкиДокумента, ПрочиеЗатраты, Продукция, РаспределениеПрочихЗатрат);
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияПрочихЗатрат()

// Процедура заполнения табличной части распределение прочих затрат
//
Процедура ЗаполнитьТаблицуРаспределенияТехнологическихОпераций(Отказ = Неопределено, Спрашивать = Истина) Экспорт
	
	Если Не ИспользоватьТехнологическиеОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если ТехнологическиеОперации.Количество() = 0 Тогда
		Если РаспределениеТехнологическихОпераций.Количество() > 0 Тогда
			РаспределениеТехнологическихОпераций.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Спрашивать И РаспределениеТехнологическихОпераций.Количество() > 0 Тогда
		Если Не АвтораспределениеТехнологическихОпераций Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение тех. операций"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		РаспределениеТехнологическихОпераций.Очистить();
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	УправлениеПроизводством.ЗаполнитьРаспределениеПрочихЗатратНаПродукцию(
		СтруктураШапкиДокумента, 
		ТехнологическиеОперации, 
		Продукция, 
		РаспределениеТехнологическихОпераций
	);
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияТехнологическихОпераций()

// Процедура заполнения табличной части распределение материалов
//
Процедура ЗаполнитьТаблицуРаспределенияВозвратныхОтходов(Отказ = Неопределено, Спрашивать = Истина) Экспорт
	
	Если Не ИспользоватьВозвратныеОтходы Тогда
		Возврат;
	КонецЕсли;
	
	Если ВозвратныеОтходы.Количество() = 0 Тогда
		Если РаспределениеВозвратныхОтходов.Количество() > 0 Тогда
			РаспределениеВозвратныхОтходов.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РаспределениеВозвратныхОтходов.Количество() > 0 Тогда
		Если Спрашивать И Не АвтораспределениеВозвратныхОтходов Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение возвратных отходов"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		РаспределениеВозвратныхОтходов.Очистить();
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураДопКолонок = Новый Структура("Заказ, НоменклатурнаяГруппа, ВидВыпуска, Спецификация, 
							|СчетЗатрат, НалоговоеНазначение, ДоляСтоимости");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	УправлениеПроизводством.ЗаполнитьРаспределениеВозвратныхОтходовНаПродукцию(СтруктураШапкиДокумента, ВозвратныеОтходы, Продукция, РаспределениеВозвратныхОтходов, СтруктураДопКолонок, Отбор, ПараметрыВыпускаПродукции);
		
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияВозвратныхОтходов()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	РеквизитыШапки     = "Организация, Подразделение, ПодразделениеОрганизации";
	РеквизитыТабМат    = "Номенклатура, Количество";
	РеквизитыТабПрод   = "Номенклатура, Количество, СтатусПартии";
	РеквизитыТабЗатр   = "СтатьяЗатрат";
	РеквизитыТабОтходы = "Номенклатура, Количество, СтатьяЗатрат, СтатусПартии";
	РеквизитыТабТехОп  = "ТехнологическаяОперация, СтатьяЗатрат, Количество, СчетЗатрат";
	
	Если ИспользоватьНаработку Тогда
		РеквизитыТабПрод 	= РеквизитыТабПрод + ", ВидВыпуска";
		РеквизитыТабМат 	= РеквизитыТабМат + ", ВидВыпуска";
		РеквизитыТабЗатр 	= РеквизитыТабЗатр + ", ВидВыпуска";
		РеквизитыТабОтходы 	= РеквизитыТабОтходы + ", ВидВыпуска";
		РеквизитыТабТехОп 	= РеквизитыТабТехОп + ", ВидВыпуска";
	КонецЕсли;
	
	
	Если ИспользоватьНаработку
	   И Продукция.Найти(Перечисления.ВидыВыпуска.Выпуск, "ВидВыпуска") = Неопределено
	Тогда
		ПроверятьЗаполнениеСклада = Ложь;
		
	ИначеЕсли ИспользоватьНаправленияВыпуска
	   И Продукция.Найти(Перечисления.НаправленияВыпуска.НаСклад, "НаправлениеВыпуска") = Неопределено
	Тогда
		ПроверятьЗаполнениеСклада = Ложь;
		
	Иначе
		ПроверятьЗаполнениеСклада = Истина;
		
	КонецЕсли;
	
	Если ВозвратныеОтходы.Количество() > 0 Тогда
		ПроверятьЗаполнениеСклада = Истина;
	КонецЕсли;
	
	Если ПроверятьЗаполнениеСклада Тогда
		РеквизитыШапки = РеквизитыШапки + ", Склад";
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		РеквизитыТабЗатр = РеквизитыТабЗатр + ", Сумма";
	КонецЕсли;
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
		  И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		РеквизитыТабЗатр = РеквизитыТабЗатр + ", СуммаРегл";
	КонецЕсли;
	
	РеквизитыТабИсп	   = "Сотрудник";
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки,     СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабПрод,   СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "Продукция");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабЗатр,   СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "ПрочиеЗатраты");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОтходы, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "ВозвратныеОтходы");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабТехОп,  СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "ТехнологическиеОперации");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабИсп,	СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "Исполнители");
	
	РеквизитыШапки  = Новый Структура(РеквизитыШапки);
	Если ИспользоватьМатериалы И ВводитьСтатьиЗатратПоСтрокам Тогда
		РеквизитыТабМат = РеквизитыТабМат + ", СтатьяЗатрат";
	ИначеЕсли ИспользоватьМатериалы И Материалы.Количество() > 0 Тогда
		РеквизитыШапки.Вставить( "СтатьяЗатрат", "Не заполнено значение реквизита ""Статья затрат"" (закладка ""Материалы"")!");
	КонецЕсли;
	
	Если ИспользоватьВозвратныеОтходы И ВозвратныеОтходы.Количество() > 0 Тогда
		РеквизитыШапки.Вставить( "СкладОтходов", "Не заполнено значение реквизита ""Склад"" (закладка ""Возвратные отходы"")!");	
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, РеквизитыШапки, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	УправлениеЗатратами.ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ЭтотОбъект, Продукция, "Продукция", "ПодразделениеОрганизацииПолучатель", Отказ, Заголовок);
	УправлениеЗатратами.ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ЭтотОбъект, НаправленияСписания, "Направления списания", "ПодразделениеОрганизации", Отказ, Заголовок);
	
	// Проверим что указаны производственные подразделения в шапке документа
	УправлениеПроизводством.ПроверитьПроизводственныеПодразделения(СтруктураШапкиДокумента, Отказ, Заголовок);


	УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если ИспользоватьВозвратныеОтходы И ВозвратныеОтходы.Количество() > 0 Тогда
		УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок, "СкладОтходов", "");
	КонецЕсли;
	
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция",               Новый Структура(РеквизитыТабПрод),   Отказ, Заголовок);
	УправлениеПроизводством.ПроверитьКоличествоДоделка( ЭтотОбъект, "Продукция", Продукция, Отказ, Заголовок);
	
	
	// Проверим заполнение налоговых реквизитов в таблицах
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Для Каждого СтрокаТаблицы Из Продукция Цикл
			
			Если СтруктураШапкиДокумента.ЕстьНДС Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение (строка № " + СтрокаТаблицы.НомерСтроки + " таблица ""Продукция"")", Отказ, Заголовок);
				КонецЕсли;
				
				НалоговыйУчет.ПроверитьНалоговыеНазначенияПриВыпускеПродукции(
					"Продукция",
					СтрокаТаблицы.НомерСтроки,
					Отказ, 
					Заголовок,
					СтрокаТаблицы.НалоговоеНазначение,
					Неопределено, // СчетЗатратПолучатель 
					Неопределено  // НалоговоеНазначениеДоходовИЗатрат
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ТехнологическиеОперации Цикл
			
			Если СтруктураШапкиДокумента.ЕстьНДС Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение (строка № " + СтрокаТаблицы.НомерСтроки + " таблица ""Технологические операции"")", Отказ, Заголовок);
				КонецЕсли;
				
				НалоговыйУчет.ПроверитьНалоговыеНазначенияПриВыпускеПродукции(
					"Технологические операции",
					СтрокаТаблицы.НомерСтроки,
					Отказ, 
					Заголовок,
					СтрокаТаблицы.НалоговоеНазначение,
					Неопределено, // СчетЗатратПолучатель 
					Неопределено  // НалоговоеНазначениеДоходовИЗатрат
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Проверим заполнение налоговых реквизитов в таблице ВозвратныеОтходы
		Для Каждого СтрокаТаблицы Из ВозвратныеОтходы Цикл
			
			Если СтруктураШапкиДокумента.ЕстьНДС Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение (строка № " + СтрокаТаблицы.НомерСтроки + " таблица ""Возвратные отходы"")", Отказ, Заголовок);
				КонецЕсли;
				
				НалоговыйУчет.ПроверитьНалоговыеНазначенияПриВыпускеПродукции(
					"Возвратные отходы",
					СтрокаТаблицы.НомерСтроки,
					Отказ, 
					Заголовок,
					СтрокаТаблицы.НалоговоеНазначение,
					Неопределено, // СчетЗатратПолучатель 
					Неопределено  // НалоговоеНазначениеДоходовИЗатрат
				);
				
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьМатериалы Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы",           Новый Структура(РеквизитыТабМат),   Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьПрочиеЗатраты Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПрочиеЗатраты",       Новый Структура(РеквизитыТабЗатр),   Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьВозвратныеОтходы Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы",    Новый Структура(РеквизитыТабОтходы), Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьТехнологическиеОперации Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ТехнологическиеОперации", Новый Структура(РеквизитыТабТехОп),  Отказ, Заголовок);
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Исполнители",			 Новый Структура(РеквизитыТабИсп),	  Отказ, Заголовок);
	КонецЕсли;
	
	// Проверим заполнение качества и счетов учета.
	Для Каждого СтрокаТаблицы Из Продукция Цикл
		Если СтрокаТаблицы.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск ИЛИ Не ИспользоватьНаработку Тогда
			
			Если Не СтрокаТаблицы.Номенклатура.Услуга Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Качество)  Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указано качество в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
				Иначе
					 Если СтрокаТаблицы.Качество <> Справочники.Качество.Новый Тогда
						Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказВыпуска) Тогда
							ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"") указан заказ-выпуска для бракованной продукции. Данная продукция не может быть выпущена под заказ.", Отказ, Заголовок);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказРезерв) Тогда
							ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"") указан документ-резерва для бракованной продукции. Данная продукция не может быть зарезервирована.", Отказ, Заголовок);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
						
			Если СтруктураШапкиДокумента.ИспользоватьНаправленияВыпуска И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НаправлениеВыпуска) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указано направление выпуска в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ИспользоватьНаправленияВыпуска И СтрокаТаблицы.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатраты Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатратПолучатель) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указана статья затрат в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеПолучатель) И (СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);	
				КонецЕсли;
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеОрганизацииПолучатель) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение организации в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);	
				КонецЕсли;
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратПолучатель) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указан счет затрат в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);	
				КонецЕсли;
				Если СтрокаТаблицы.СтатьяЗатратПолучатель.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
				    ОбщегоНазначения.СообщитьОбОшибке("Нельзя указывать статьи затрат со статусом ""Возвратные отходы"". Строка № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);
				КонецЕсли;
				Если СтрокаТаблицы.СтатьяЗатратПолучатель.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
				    ОбщегоНазначения.СообщитьОбОшибке("Нельзя указывать статьи затрат со статусом ""Принятые в переработку"". Строка № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);
				КонецЕсли;
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение затрат в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС) Тогда
					
					НалоговыйУчет.ПроверитьНалоговыеНазначенияПриВыпускеПродукции(
						"Получатели",
						СтрокаТаблицы.НомерСтроки,
						Отказ, 
						Заголовок,
						СтрокаТаблицы.НалоговоеНазначение,
						СтрокаТаблицы.СчетЗатратПолучатель,             // СчетЗатратПолучатель 
						СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат // НалоговоеНазначениеДоходовИЗатрат
					);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ИспользоватьНаправленияВыпуска И СтрокаТаблицы.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатратыСписок Тогда
				ЕстьНаправленияСписания = Ложь;
				Для Каждого СтрокаНаправления Из НаправленияСписания Цикл
					Если СтрокаНаправления.КлючСвязи <> СтрокаТаблицы.КлючСвязи Тогда
						Продолжить;
					КонецЕсли;
					ЕстьНаправленияСписания = Истина;
					
					Если СтрокаНаправления.Коэффициент = 0 Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указан коэффициент в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтрокаНаправления.СтатьяЗатрат) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указана статья затрат в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И НЕ ЗначениеЗаполнено(СтрокаНаправления.Подразделение) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаНаправления.ПодразделениеОрганизации) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение организации в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если СтрокаНаправления.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
					    ОбщегоНазначения.СообщитьОбОшибке("Нельзя в направлениях списания указывать статьи затрат со статусом ""Возвратные отходы"". Строка № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если СтрокаНаправления.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
					    ОбщегоНазначения.СообщитьОбОшибке("Нельзя в направлениях списания указывать статьи затрат со статусом ""Принятые в переработку"". Строка № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаНаправления.СчетЗатрат) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указан счет затрат в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);	
					КонецЕсли;
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС) И НЕ ЗначениеЗаполнено(СтрокаНаправления.НалоговоеНазначениеДоходовИЗатрат) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение затрат в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС) Тогда
						
						НалоговыйУчет.ПроверитьНалоговыеНазначенияПриВыпускеПродукции(
							"Продукция",
							СтрокаТаблицы.НомерСтроки,
							Отказ, 
							Заголовок,
							СтрокаТаблицы.НалоговоеНазначение,
							СтрокаНаправления.СчетЗатрат, // СчетЗатратПолучатель
							СтрокаНаправления.НалоговоеНазначениеДоходовИЗатрат,
							Истина, // ЕстьНаправленияСписания
							СтрокаНаправления.НомерСтроки // НомерСтрокиНаправления
						);
						
						
					КонецЕсли;
				КонецЦикла;
				Если ЕстьНаправленияСписания = Ложь Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указаны получатели для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьПрочиеЗатраты Тогда
		Для Каждого СтрокаТЧ Из ПрочиеЗатраты Цикл
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				Если СтрокаТЧ.Сумма = 0 И СтрокаТЧ.СуммаРегл = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указана сумма для статьи затрат """ + СтрокаТЧ.СтатьяЗатрат + """ (строка № " + СтрокаТЧ.НомерСтроки + " табличной части ""Прочие затраты"")", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьМатериалы И ВводитьСтатьиЗатратПоСтрокам Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат(Материалы, "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат(Материалы, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
	Иначе
		Если ИспользоватьМатериалы И ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			Если Не СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Укажите материальную статью затрат (закладка ""Материалы"")!", Отказ, Заголовок);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И Не СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Укажите производственную статью затрат (закладка ""Материалы"")!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрочиеЗатраты Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат(ПрочиеЗатраты,           "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьТехнологическиеОперации Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат(ТехнологическиеОперации, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
	КонецЕсли;
	
	//УправлениеПроизводством.ПроверитьВидВнутреннихЗаказов(Продукция, "Продукция", Отказ, Заголовок, "СтатьяЗатратПолучатель");
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Продукция", , Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Продукция", Продукция, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Материалы", Материалы, Отказ, Заголовок);

	Если ИспользоватьМатериалы Тогда
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьВозвратныеОтходы Тогда
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратныеОтходы", , Отказ, Заголовок);
	КонецЕсли;
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Продукция", Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполнения 
	// по табличной части "Материалы".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");

	ТаблицаПоВозвратнымОтходам              = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", СтруктураПолей).Выгрузить();
	ТаблицаПоРаспределениюВозвратныхОтходов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РаспределениеВозвратныхОтходов", СтруктураПолей).Выгрузить();
	
	Если ИспользоватьВозвратныеОтходы Тогда
		УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратныеОтходы", ТаблицаПоВозвратнымОтходам, Отказ, Заголовок);
		УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "РаспределениеВозвратныхОтходов", ТаблицаПоРаспределениюВозвратныхОтходов, Отказ, Заголовок);
		
		УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "ВозвратныеОтходы", 				 ТаблицаПоВозвратнымОтходам, 			  Отказ, Заголовок);
		УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "РаспределениеВозвратныхОтходов", ТаблицаПоРаспределениюВозвратныхОтходов, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ИспользоватьНаправленияВыпуска Тогда
		
		СтруктураПолей.Вставить("ВидВыпуска", "ВидВыпуска");
		ТаблицаПоПродукции = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей).Выгрузить();
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Услуга", 		истина);
		СтруктураПоиска.Вставить("ВидВыпуска",	Перечисления.ВидыВыпуска.Выпуск);
		
		Строки = ТаблицаПоПродукции.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() > 0 тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документом отражается выпуск услуг, установите использование направления выпуска!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата);
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ МАТЕРИАЛОВ
	Если ИспользоватьМатериалы И Не АвтораспределениеМатериалов Тогда
		
		РеквизитыТабРаспМат = "Номенклатура, Количество, Продукция, СчетЗатрат";
		Если СтруктураШапкиДокумента.ИспользоватьНаработку Тогда
			РеквизитыТабРаспМат = РеквизитыТабРаспМат + ", ВидВыпуска";
		КонецЕсли;
		
		Если ВводитьСтатьиЗатратПоСтрокам Тогда
			РеквизитыТабРаспМат = РеквизитыТабРаспМат + ", СтатьяЗатрат";
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспМат, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "РаспределениеМатериалов");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеМатериалов", Новый Структура(РеквизитыТабРаспМат), Отказ, Заголовок);
		
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "РаспределениеМатериалов", , Отказ, Заголовок);
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			
			Для Каждого СтрокаРаспределения Из РаспределениеМатериалов Цикл
				Если Не ЗначениеЗаполнено(СтрокаРаспределения.НалоговоеНазначение)
					И (СтрокаРаспределения.СтатьяЗатрат.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
					
					Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение в строке № " + СтрокаРаспределения.НомерСтроки + " (таб. часть ""Распределение материалов"")", Отказ, Заголовок);
					
				КонецЕсли; 
			КонецЦикла; 
			
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				РаспределениеМатериалов.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
				"Распределение материалов",
				Отказ, 
				Заголовок, 
				"Производство"
			);	
		КонецЕсли;	
		
	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ ПРОЧИХ ЗАТРАТ
	Если ИспользоватьПрочиеЗатраты И Не АвтораспределениеПрочихЗатрат Тогда
		
		РеквизитыТабРаспЗатр = "Продукция, СтатьяЗатрат, СчетЗатрат";
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда	
			РеквизитыТабРаспЗатр = РеквизитыТабРаспЗатр + ", НалоговоеНазначение";
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
		И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			РеквизитыТабРаспЗатр = РеквизитыТабРаспЗатр + ", Сумма";
		КонецЕсли;
		Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
			  И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			РеквизитыТабРаспЗатр = РеквизитыТабРаспЗатр + ", СуммаРегл";
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьНаработку Тогда
			РеквизитыТабРаспЗатр = РеквизитыТабРаспЗатр + ", ВидВыпуска";
		КонецЕсли;
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспЗатр, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "РаспределениеПрочихЗатрат");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеПрочихЗатрат", Новый Структура(РеквизитыТабРаспЗатр), Отказ, Заголовок);
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из РаспределениеПрочихЗатрат Цикл
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				Если СтрокаТЧ.Сумма = 0 И СтрокаТЧ.СуммаРегл = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указана сумма для статьи затрат """ + СтрокаТЧ.СтатьяЗатрат + """ (строка № " + СтрокаТЧ.НомерСтроки + " табличной части ""Распределение прочих затрат"")", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				РаспределениеПрочихЗатрат.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
				"Распределение прочих затрат",
				Отказ, 
				Заголовок, 
				"Производство"
			);	
		КонецЕсли;	
		
		
	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ ТЕХ. ОПЕРАЦИЙ
	Если ИспользоватьТехнологическиеОперации И Не АвтораспределениеТехнологическихОпераций Тогда
		
		РеквизитыТаблицыРаспределения = "Номенклатура, СтатьяЗатрат, СчетЗатрат";
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда	
			РеквизитыТаблицыРаспределения = РеквизитыТаблицыРаспределения + ", НалоговоеНазначение";
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьНаработку Тогда
			РеквизитыТаблицыРаспределения = РеквизитыТаблицыРаспределения + ", ВидВыпуска";
		КонецЕсли;
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТаблицыРаспределения, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "РаспределениеПрочихЗатрат");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеТехнологическихОпераций", Новый Структура(РеквизитыТаблицыРаспределения), Отказ, Заголовок);
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат(РаспределениеТехнологическихОпераций, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				РаспределениеТехнологическихОпераций.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
				"Распределение технологических операций",
				Отказ, 
				Заголовок, 
				"Производство"
			);	
		КонецЕсли;	
		
		
	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ ВОЗВРАТНЫХ ОТХОДОВ
	Если ИспользоватьВозвратныеОтходы И Не АвтораспределениеВозвратныхОтходов Тогда
		
		РеквизитыТабРаспределенияОтходов = "Номенклатура, СтатьяЗатрат, Количество, Продукция, СчетЗатрат";
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			РеквизитыТабРаспределенияОтходов = РеквизитыТабРаспределенияОтходов + ", НалоговоеНазначение";
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьНаработку Тогда
			РеквизитыТабРаспределенияОтходов = РеквизитыТабРаспределенияОтходов + ", ВидВыпуска";
		КонецЕсли;

		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспределенияОтходов, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "РаспределениеВозвратныхОтходов");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеВозвратныхОтходов", Новый Структура(РеквизитыТабРаспределенияОтходов), Отказ, Заголовок);
		
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "РаспределениеВозвратныхОтходов", , Отказ, Заголовок);
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				РаспределениеВозвратныхОтходов.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
				"Распределение возвратных отходов",
				Отказ, 
				Заголовок, 
				"Производство"
			);	
		КонецЕсли;	
		
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаЗатрат=Истина, ЗаполнятьСчетаНоменклатуры=Истина) Экспорт
	
	Если ИмяТабЧасти="РаспределениеВозвратныхОтходов" Тогда
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, Неопределено);
	Иначе
		ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаЗатрат, ЗаполнятьСчетаНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаЗатрат=Истина, ЗаполнятьСчетаНоменклатуры=Истина) Экспорт
	
	Если ИмяТабЧасти="РаспределениеВозвратныхОтходов" Тогда
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаЗатрат, ЗаполнятьСчетаНоменклатуры);
		КонецЦикла;
	Иначе
		
		ТабличнаяЧастьСодержитНоменклатуру = Найти("/ТехнологическиеОперации/РаспределениеПрочихЗатрат/НаправленияСписания/","/"+ИмяТабЧасти+"/")=0;
		
		СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ,  
			ЗаполнятьСчетаЗатрат, 
			ЗаполнятьСчетаНоменклатуры И ТабличнаяЧастьСодержитНоменклатуру,   
			Истина); //в этом документе заполняем счета независимо от режима "Определение счетов при проведении документов"
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство(ТабличнаяЧасть, ЗаказНаПроизводство = Неопределено) Экспорт

	Если ТабличнаяЧасть <> Продукция Тогда
		Возврат;
	КонецЕсли;	
	
	// Получим остаток по заказу на производство.
	ЗапросПоЗаказам = Новый Запрос;
	ЗапросПоЗаказам.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	ЗапросПоЗаказам.УстановитьПараметр("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	ЗапросПоЗаказам.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЗапросПоЗаказам.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Номенклатура.НаправлениеВыпуска КАК НаправлениеВыпуска,
	|	ЗаказыОстатки.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ЗаказыОстатки.Номенклатура.Услуга КАК Услуга,
	|	ЗаказыОстатки.ЕдиницаИзмерения,
	|	ЗаказыОстатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыОстатки.Спецификация,
	|	ЕСТЬNULL(СпецификацииНоменклатуры.ДоляСтоимости, 1) КАК ДоляСтоимости,
	|	ЕСТЬNULL(ЗаказыОстатки.КоличествоОстаток, 0) КАК КоличествоЗаказано,
	|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводство.Остатки(&ДатаОстатков
	|		,
	|		ЗаказНаПроизводство = &ЗаказНаПроизводство
	|		    И ВидВоспроизводства = &ВидВоспроизводства) КАК ЗаказыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СпецификацииНоменклатуры.Ссылка КАК Спецификация,
	|			СпецификацииНоменклатуры.Номенклатура КАК Номенклатура,
	|			СпецификацииНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			СпецификацииНоменклатуры.ДоляСтоимости КАК ДоляСтоимости
	|		ИЗ
	|			Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатуры) КАК СпецификацииНоменклатуры
	|		ПО ЗаказыОстатки.Номенклатура = СпецификацииНоменклатуры.Номенклатура
	|			И ЗаказыОстатки.ХарактеристикаНоменклатуры = СпецификацииНоменклатуры.ХарактеристикаНоменклатуры
	|			И ЗаказыОстатки.Спецификация = СпецификацииНоменклатуры.Спецификация";

	ТЗПоЗаказамНаПроизводство = ЗапросПоЗаказам.Выполнить().Выгрузить();

	
	// Получим размещения заказов в заказах на производство.
	ЗапросПоРазмещениям = Новый Запрос();
	ЗапросПоРазмещениям.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
	ЗапросПоРазмещениям.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	ЗапросПоРазмещениям.УстановитьПараметр("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	ЗапросПоРазмещениям.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЗапросПоРазмещениям.Текст =
	"ВЫБРАТЬ
	|	РазмещениеЗаказовПокупателейОстатки.Номенклатура,
	|	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя,
	|	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КАК КоличествоРазмещено
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков
	|		,
	|		ЗаказПоставщику = &ЗаказНаПроизводство
	|			И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки";
	
	ТЗПоРазмещениямЗаказов = ЗапросПоРазмещениям.Выполнить().Выгрузить();
	
	СтруктураСвязи = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	// Распределим остаток по заказу на производство по заказам.
	Для Каждого СтрокаТЗПоЗаказамНаПроизводство Из ТЗПоЗаказамНаПроизводство Цикл 
		
		Если СтрокаТЗПоЗаказамНаПроизводство.КоличествоЗаказано <= 0 Тогда
			Продолжить;
		КонецЕсли;
		КоличествоНеРаспределено = СтрокаТЗПоЗаказамНаПроизводство.КоличествоЗаказано;
		ЗаполнитьЗначенияСвойств(СтруктураСвязи, СтрокаТЗПоЗаказамНаПроизводство);
		
		МассивСтрокПоРазмещениям = ТЗПоРазмещениямЗаказов.НайтиСтроки(СтруктураСвязи);
		
		Для Каждого СтрокаРамещения Из МассивСтрокПоРазмещениям Цикл
			Если СтрокаРамещения.КоличествоРазмещено <= 0 Тогда
				Продолжить;
			КонецЕсли;
			Если КоличествоНеРаспределено <= 0 Тогда
				Прервать;
			КонецЕсли;	
			КоличествоДляЗаказа = Мин(КоличествоНеРаспределено, СтрокаРамещения.КоличествоРазмещено);
			
			//Заполняем строку табличной части
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЗПоЗаказамНаПроизводство);
			СтрокаТЧ.ЗаказВыпуска         = ЗаказНаПроизводство;
			Если не СтрокаТЗПоЗаказамНаПроизводство.Услуга Тогда
				СтрокаТЧ.ЗаказРезерв          = СтрокаРамещения.ЗаказПокупателя;
			КонецЕсли;
			
			ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
			СтрокаТЧ.ВидВыпуска 		  = Перечисления.ВидыВыпуска.Выпуск;
			СтрокаТЧ.НаправлениеВыпуска  =  Перечисления.НаправленияВыпуска.НаСклад;
			СтрокаТЧ.СтатусПартии 		  = Перечисления.СтатусыПартийТоваров.Продукция;
			СтрокаТЧ.Количество           = (КоличествоДляЗаказа * СтрокаТЗПоЗаказамНаПроизводство.ЕдиницаХраненияОстатковКоэффициент / СтрокаТЧ.Коэффициент); 
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Продукция", Истина, Истина);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТЧ, ЭтотОбъект, Ложь);

			
			КоличествоНеРаспределено = КоличествоНеРаспределено - КоличествоДляЗаказа;
		КонецЦикла;	
		
		Если КоличествоНеРаспределено > 0 Тогда
			//Заполняем строку табличной части
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЗПоЗаказамНаПроизводство);
			СтрокаТЧ.ЗаказВыпуска        = ЗаказНаПроизводство;
			ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
			СтрокаТЧ.ВидВыпуска 		 = Перечисления.ВидыВыпуска.Выпуск;
			СтрокаТЧ.НаправлениеВыпуска  =  Перечисления.НаправленияВыпуска.НаСклад;
			СтрокаТЧ.СтатусПартии 		 = Перечисления.СтатусыПартийТоваров.Продукция;
			СтрокаТЧ.Количество          = (КоличествоНеРаспределено * СтрокаТЗПоЗаказамНаПроизводство.ЕдиницаХраненияОстатковКоэффициент / СтрокаТЧ.Коэффициент); 
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Продукция", Истина, Истина);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТЧ, ЭтотОбъект, ложь);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ()

// Процедура заполняет таб.части материалы/распределение материалов по данным о потребностях по заказам.
// Список заказов берется из табличной части продукция (если заказ не передан явно в виде параметра)
//
Процедура ЗаполнитьПотребностямиПоЗаказамНаПроизводство(ТабЧасть, МассивЗаказов) Экспорт

	ЗаказыНаПроизводствоИПереработку.ЗаполнитьТабличнуюЧастьПоПотребностямЗаказаНаПроизводство(ТабЧасть, МассивЗаказов);
	Для каждого СтрокаТЧ из Материалы цикл
		СтрокаТЧ.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из РаспределениеМатериалов Цикл
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
		СтрокаТЧ.НоменклатурнаяГруппа = СтрокаТЧ.Продукция.НоменклатурнаяГруппа;
		СтрокаТЧ.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( СтрокаТЧ,
			?(ТабЧасть = РаспределениеМатериалов, "РаспределениеМатериалов", "Материалы"),
			ОтражатьВБухгалтерскомУчете);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПотребностямиПоЗаказамНаПроизводство()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет полями, нужными для регл. учета.
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиПродукцияРегл(СтруктураПолей)

	СтруктураПолей.Вставить("Счет"                      	, "Счет");
	СтруктураПолей.Вставить("СчетЗатрат"                    , "СчетЗатрат");
	СтруктураПолей.Вставить("НалоговоеНазначение"           , "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат" , "НалоговоеНазначениеДоходовИЗатрат");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиПродукцияРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

    ТаблицаТоваров.Колонки.Добавить("Стоимость", 	   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Формирует таблицу значений по табличным частям "Продукция" и "Направления списания".
//
Функция ПодготовитьТаблицуСписанияНаЗатраты()
	
	Если Не ИспользоватьНаправленияВыпуска Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ОтчетПроизводстваЗаСмену.ХарактеристикаНоменклатуры,
	|	ОтчетПроизводстваЗаСмену.СерияНоменклатуры,
	|	ОтчетПроизводстваЗаСмену.Номенклатура 				КАК Затрата,
	|	ОтчетПроизводстваЗаСмену.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ОтчетПроизводстваЗаСмену.СерияНоменклатуры 			КАК СерияЗатраты,
	|				
	|	ЕСТЬNULL(НаправленияСписания.Подразделение, 			ОтчетПроизводстваЗаСмену.ПодразделениеПолучатель) 				КАК Подразделение,
	|	ЕСТЬNULL(НаправленияСписания.ПодразделениеОрганизации, 	ОтчетПроизводстваЗаСмену.ПодразделениеОрганизацииПолучатель) 	КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(НаправленияСписания.НоменклатурнаяГруппа, 		ОтчетПроизводстваЗаСмену.НоменклатурнаяГруппаПолучатель) 		КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(НаправленияСписания.СтатьяЗатрат, 				ОтчетПроизводстваЗаСмену.СтатьяЗатратПолучатель) 				КАК СтатьяЗатрат,
	|	ЕСТЬNULL(НаправленияСписания.Заказ, 					ОтчетПроизводстваЗаСмену.ЗаказПолучатель) 						КАК Заказ,
	|	ЕСТЬNULL(НаправленияСписания.Продукция, 				ОтчетПроизводстваЗаСмену.Продукция) 							КАК Продукция,
	|	ЕСТЬNULL(НаправленияСписания.ХарактеристикаПродукции, 	ОтчетПроизводстваЗаСмену.ХарактеристикаПродукции) 				КАК ХарактеристикаПродукции,
	|	ЕСТЬNULL(НаправленияСписания.СерияПродукции, 			ОтчетПроизводстваЗаСмену.СерияПродукции) 						КАК СерияПродукции,
	|	ЕСТЬNULL(НаправленияСписания.ОбъектСтроительства, 		ОтчетПроизводстваЗаСмену.ОбъектСтроительства) 					КАК ОбъектСтроительства,
	|	ЕСТЬNULL(НаправленияСписания.Проект, 					ОтчетПроизводстваЗаСмену.Проект) 								КАК Проект,
	|	ЕСТЬNULL(НаправленияСписания.Субконто1, 				ОтчетПроизводстваЗаСмену.Субконто1) 							КАК Субконто1,
	|	ЕСТЬNULL(НаправленияСписания.Субконто2, 				ОтчетПроизводстваЗаСмену.Субконто2) 							КАК Субконто2,
	|	ЕСТЬNULL(НаправленияСписания.Субконто3, 				ОтчетПроизводстваЗаСмену.Субконто3) 							КАК Субконто3,	
	|	ЕСТЬNULL(НаправленияСписания.СчетЗатрат, 				ОтчетПроизводстваЗаСмену.СчетЗатратПолучатель) 					КАК СчетЗатрат,
	|	ЕСТЬNULL(НаправленияСписания.СчетЗатрат, 				ОтчетПроизводстваЗаСмену.СчетЗатратПолучатель) 					КАК СчетУчета,
	|		
	|	СУММА(	ВЫБОР КОГДА НаправленияСписанияВсего.Коэффициент ЕСТЬ NULL
	|						ИЛИ НаправленияСписанияВсего.Коэффициент = 0 ТОГДА
	|				ОтчетПроизводстваЗаСмену.Количество
	|			ИНАЧЕ
	|				ОтчетПроизводстваЗаСмену.Количество * НаправленияСписания.Коэффициент / НаправленияСписанияВсего.Коэффициент
	|			КОНЕЦ
	|		) КАК Количество,
	|	СУММА(ОтчетПроизводстваЗаСмену.Количество) КАК КоличествоВсего
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСмену
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Подразделение,
	|			ПодразделениеОрганизации,
	|			СтатьяЗатрат,
	|			НоменклатурнаяГруппа,
	|			Заказ,
	|			Продукция,
	|			ХарактеристикаПродукции,
	|			СерияПродукции,
	|			ОбъектСтроительства,
	|			Проект,
	|			Субконто1,
	|			Субконто2,
	|			Субконто3,	
	|			СчетЗатрат,
	|			КлючСвязи,
	|			СУММА(Коэффициент) КАК Коэффициент
	|		ИЗ
	|			Документ.ОтчетПроизводстваЗаСмену.НаправленияСписания КАК НаправленияСписания
	|		ГДЕ
	|			НаправленияСписания.Ссылка = &ТекущийДокумент
	|			И КлючСвязи В (
	|				ВЫБРАТЬ
	|					ТабличнаяЧастьПродукция.КлючСвязи
	|				ИЗ
	|					Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТабличнаяЧастьПродукция
	|				ГДЕ
	|					ТабличнаяЧастьПродукция.Ссылка = &ТекущийДокумент
	|					И ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаправленияВыпуска
	|					И ТабличнаяЧастьПродукция.НаправлениеВыпуска = &НаЗатратыСписок
	|					И (ТабличнаяЧастьПродукция.ВидВыпуска = &Выпуск
	|						И ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаработку
	|						ИЛИ Не ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаработку)
	|				)
	|				
	|		СГРУППИРОВАТЬ ПО
	|			НаправленияСписания.Ссылка,
	|			Подразделение,
	|			ПодразделениеОрганизации,
	|			СтатьяЗатрат,
	|			НоменклатурнаяГруппа,
	|			Заказ,
	|			Продукция,
	|			ХарактеристикаПродукции,
	|			СерияПродукции,
	|			ОбъектСтроительства,
	|			Проект,
	|			Субконто1,
	|			Субконто2,
	|			Субконто3,
	|			СчетЗатрат,
	|			КлючСвязи	
	|		) КАК НаправленияСписания
	|	ПО
	|		ОтчетПроизводстваЗаСмену.КлючСвязи = НаправленияСписания.КлючСвязи
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			КлючСвязи,
	|			СУММА(Коэффициент) КАК Коэффициент
	|		ИЗ
	|			Документ.ОтчетПроизводстваЗаСмену.НаправленияСписания КАК НаправленияСписания
	|		ГДЕ
	|			НаправленияСписания.Ссылка = &ТекущийДокумент
	|			И КлючСвязи В (
	|				ВЫБРАТЬ
	|					ТабличнаяЧастьПродукция.КлючСвязи
	|				ИЗ
	|					Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТабличнаяЧастьПродукция
	|				ГДЕ
	|					ТабличнаяЧастьПродукция.Ссылка = &ТекущийДокумент
	|					И ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаправленияВыпуска
	|					И ТабличнаяЧастьПродукция.НаправлениеВыпуска = &НаЗатратыСписок
	|					И (ТабличнаяЧастьПродукция.ВидВыпуска = &Выпуск
	|						И ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаработку
	|						ИЛИ Не ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаработку)
	|				)
	|		СГРУППИРОВАТЬ ПО
	|			КлючСвязи	
	|		) КАК НаправленияСписанияВсего
	|	ПО
	|		ОтчетПроизводстваЗаСмену.КлючСвязи = НаправленияСписания.КлючСвязи
	|			
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент
	|	И ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаправленияВыпуска
	|	И (ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаЗатратыСписок
	|		ИЛИ ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаЗатраты)
	|	И (ОтчетПроизводстваЗаСмену.ВидВыпуска = &Выпуск
	|		И ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаработку
	|		ИЛИ Не ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаработку)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ОтчетПроизводстваЗаСмену.Ссылка,
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ОтчетПроизводстваЗаСмену.ХарактеристикаНоменклатуры,
	|	ОтчетПроизводстваЗаСмену.СерияНоменклатуры,
	|	ЕСТЬNULL(НаправленияСписания.Подразделение, 			ОтчетПроизводстваЗаСмену.ПодразделениеПолучатель),
	|	ЕСТЬNULL(НаправленияСписания.ПодразделениеОрганизации, 	ОтчетПроизводстваЗаСмену.ПодразделениеОрганизацииПолучатель),
	|	ЕСТЬNULL(НаправленияСписания.НоменклатурнаяГруппа, 		ОтчетПроизводстваЗаСмену.НоменклатурнаяГруппаПолучатель),
	|	ЕСТЬNULL(НаправленияСписания.СтатьяЗатрат, 				ОтчетПроизводстваЗаСмену.СтатьяЗатратПолучатель),
	|	ЕСТЬNULL(НаправленияСписания.Заказ, 					ОтчетПроизводстваЗаСмену.ЗаказПолучатель),
	|	ЕСТЬNULL(НаправленияСписания.Продукция, 				ОтчетПроизводстваЗаСмену.Продукция),
	|	ЕСТЬNULL(НаправленияСписания.ХарактеристикаПродукции, 	ОтчетПроизводстваЗаСмену.ХарактеристикаПродукции),
	|	ЕСТЬNULL(НаправленияСписания.СерияПродукции, 			ОтчетПроизводстваЗаСмену.СерияПродукции),
	|	ЕСТЬNULL(НаправленияСписания.ОбъектСтроительства, 		ОтчетПроизводстваЗаСмену.ОбъектСтроительства),
	|	ЕСТЬNULL(НаправленияСписания.Проект, 					ОтчетПроизводстваЗаСмену.Проект),
	|	ЕСТЬNULL(НаправленияСписания.Субконто1, 				ОтчетПроизводстваЗаСмену.Субконто1),
	|	ЕСТЬNULL(НаправленияСписания.Субконто2, 				ОтчетПроизводстваЗаСмену.Субконто2),
	|	ЕСТЬNULL(НаправленияСписания.Субконто3, 				ОтчетПроизводстваЗаСмену.Субконто3),
	|	ЕСТЬNULL(НаправленияСписания.СчетЗатрат, 				ОтчетПроизводстваЗаСмену.СчетЗатратПолучатель)
	|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТекущийДокумент",    Ссылка);
	Запрос.УстановитьПараметр("Выпуск", 			Перечисления.ВидыВыпуска.Выпуск);
	Запрос.УстановитьПараметр("НаЗатраты", 			Перечисления.НаправленияВыпуска.НаЗатраты);
	Запрос.УстановитьПараметр("НаЗатратыСписок",	Перечисления.НаправленияВыпуска.НаЗатратыСписок);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаСписанияНаЗатраты = РезультатЗапроса.Выгрузить();
	
	Если мУчетнаяПолитикаБух <> Неопределено Тогда
		УчетЗатратПоЗаказамНаПроизводство = мУчетнаяПолитикаБух.УчетЗатратПоЗаказамНаПроизводство;
	Иначе
		УчетЗатратПоЗаказамНаПроизводство = Ложь;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаСписанияНаЗатраты Цикл
		Заказ = Неопределено;
		Если ИспользоватьЗаказы Тогда
			Заказ = УправлениеПроизводством.ПолучитьЗаказДляУчетаЗатрат(Строка.Заказ, , УчетЗатратПоЗаказамНаПроизводство, мИспользоватьЗаказыНаПроизводство);
		КонецЕсли;
		Строка.Заказ = Заказ;
	КонецЦикла;
	
	Возврат ТаблицаСписанияНаЗатраты;	
	
КонецФункции // ПодготовитьТаблицуСписанияНаЗатраты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// Процедура формирует движения регистров по табличной части Продукция
//
Процедура ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)
	
	Если Продукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ДвиженияПоТабличнойЧастиПродукцияУпр(ТаблицаПоПродукции, СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения упр. регистров по табличной части Продукция
//
Процедура ДвиженияПоТабличнойЧастиПродукцияУпр(ТаблицаПоПродукции, СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)
		
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвиженийПоРазмещению   = Движения.РазмещениеЗаказовПокупателей;
	ТаблицаДвиженийПоРазмещению = НаборДвиженийПоРазмещению.ВыгрузитьКолонки();
	
	// Движения по размещению заказов.
	НаборДвиженийПоРазмещению.КонтрольОстатков(ЭтотОбъект, "Продукция", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	Если НЕ Отказ Тогда
	
		ТаблицаПоПродукцииДляРазмещения = ТаблицаПоПродукции.Скопировать();
		
		МассивНаУдаление = Новый Массив();
		Для Каждого СтрокаТабРазмещения Из ТаблицаПоПродукцииДляРазмещения Цикл
			Если СтрокаТабРазмещения.Качество <> Справочники.Качество.Новый Тогда
				МассивНаУдаление.Добавить(СтрокаТабРазмещения);					
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из МассивНаУдаление Цикл
			ТаблицаПоПродукцииДляРазмещения.Удалить(Элемент);
		КонецЦикла;	
		
		ТабИмен = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоПродукцииДляРазмещения, ТабИмен, "ЗаказПокупателя");
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоПродукцииДляРазмещения, ТабИмен, "ЗаказНаПроизводство", "ЗаказПоставщику");
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоПродукцииДляРазмещения, ТабИмен, "ЗаказРезерв",         "ЗаказПокупателя");
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПродукцииДляРазмещения, ТаблицаДвиженийПоРазмещению);
		
		ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоПродукцииДляРазмещения, ТабИмен);
		
		ТаблицаДвиженийПоРазмещению.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
		
		МассивНаУдаление = Новый Массив();
		Для Каждого Запись Из ТаблицаДвиженийПоРазмещению Цикл
			Если НЕ ЗначениеЗаполнено(Запись.ЗаказПокупателя) ИЛИ НЕ ЗначениеЗаполнено(Запись.ЗаказПоставщику) или Запись.Номенклатура.Услуга Тогда
				МассивНаУдаление.Добавить(Запись);					
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Элемент Из МассивНаУдаление Цикл
			ТаблицаДвиженийПоРазмещению.Удалить(Элемент);
		КонецЦикла;	

		НаборДвиженийПоРазмещению.мПериод = Дата;
		НаборДвиженийПоРазмещению.мТаблицаДвижений = ТаблицаДвиженийПоРазмещению;
		НаборДвиженийПоРазмещению.ВыполнитьРасход();
		
	КонецЕсли;
	
	// Движение по регистру ЛимитноЗаборныеКарты.
	ИспользоватьЛимитыОтпускаМатериалов = УправлениеПроизводством.ИспользоватьЛимитыОтпускаМатериалов();
	Если ИспользоватьНаправленияВыпуска И ИспользоватьЛимитыОтпускаМатериалов Тогда
		
		НаборДвижений = Движения.ЛимитноЗаборныеКарты;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
			
		ТаблицаПоТоварамЛимиты = ТаблицаПоПродукции.Скопировать();
		
		ТаблицаПоТоварамЛимиты.Колонки.ПодразделениеПолучатель.Имя = "Подразделение";
		
		ТаблицаПоТоварамЛимиты.Колонки.Добавить("Склад");
		ТаблицаПоТоварамЛимиты.ЗаполнитьЗначения(Склад, "Склад");
		
		КолвоЭлементов = ТаблицаПоТоварамЛимиты.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			СтрокаТаблицы = ТаблицаПоТоварамЛимиты[КолвоЭлементов - ОбратныйИндекс];
		  
			// Проверяем явно, т.к. может быть NULL.
			Если СтрокаТаблицы.НаправлениеВыпуска <> Перечисления.НаправленияВыпуска.НаЗатраты
		   	 ИЛИ СтрокаТаблицы.ВидВыпуска <> Перечисления.ВидыВыпуска.Выпуск Тогда
				ТаблицаПоТоварамЛимиты.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПроизводством.ПолучитьИспользованиеЛимитовОтпускаМатериалов(ЭтотОбъект, "Продукция", ТаблицаПоТоварамЛимиты);
			
		КолвоЭлементов = ТаблицаПоТоварамЛимиты.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			СтрокаТаблицы = ТаблицаПоТоварамЛимиты[КолвоЭлементов - ОбратныйИндекс];
			Если СтрокаТаблицы.КонтролироватьЛимит = 0
			 ИЛИ СтрокаТаблицы.Отпущено = 0
			Тогда
				ТаблицаПоТоварамЛимиты.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЛимиты, ТаблицаДвижений);

		// Недостающие поля.
		Если Не СтруктураШапкиДокумента.РазрешитьПревышениеЛимита Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(0, "ОтпущеноСверхЛимита");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка лимитов при проведении.
		НаборДвижений.КонтрольЛимитов(ЭтотОбъект, "Продукция", СтруктураШапкиДокумента, Отказ, Заголовок);
				
		Если Не Отказ Тогда
			Движения.ЛимитноЗаборныеКарты.ДобавитьДвижение();
		КонецЕсли;
		
	КонецЕсли;
	
	// Движение по заказам на производство.
	Если мИспользоватьЗаказыНаПроизводство И ИспользоватьЗаказы Тогда
		
		ТаблицаПоПродукцииНаСклад = ТаблицаПоПродукции.Скопировать();
		
		КолвоЭлементов = ТаблицаПоПродукцииНаСклад.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			СтрокаТаблицы = ТаблицаПоПродукцииНаСклад[КолвоЭлементов - ОбратныйИндекс];
			  
			Если (СтрокаТаблицы.ВидВыпуска <> Перечисления.ВидыВыпуска.Выпуск И ИспользоватьНаработку) Тогда
				ТаблицаПоПродукцииНаСклад.Удалить(СтрокаТаблицы);
			КонецЕсли;

		КонецЦикла;
		
		УправлениеПроизводством.ДвижениеПоЗаказамНаПроизводство(ЭтотОбъект, ТаблицаПоПродукцииНаСклад, "Продукция", СтруктураШапкиДокумента, РежимПроведения, Отказ, Заголовок);
		
		// ДВИЖЕНИЯ ПО РЕГИСТРУ ПотребностиЗаказовНаПроизводство
		Если мИспользоватьПотребностиЗаказовНаПроизводство Тогда
			ДопПараметры = новый Структура("СпособЗакрытияПотребностейЗаказовНаПроизводство",мСпособЗакрытияПотребностейЗаказовНаПроизводство);
			Если мСпособЗакрытияПотребностейЗаказовНаПроизводство = Перечисления.СпособыЗакрытияПотребностейЗаказовНаПроизводство.АвтоматическиПриРаспределении Тогда
				Если РаспределениеМатериалов.Количество() <> 0 Тогда
					ЗаказыНаПроизводствоИПереработку.ВыполнитьПогашениеПотребностиЗаказаНаПроизводство(ЭтотОбъект, "ОтчетПроизводстваЗаСмену", ДопПараметры);
				КонецЕсли;				
			Иначе
				ЗаказыНаПроизводствоИПереработку.ВыполнитьПогашениеПотребностиЗаказаНаПроизводство(ЭтотОбъект, "ОтчетПроизводстваЗаСмену", ДопПараметры);
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	// Движение по внутренним заказам
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяТабЧасти",         "Продукция");
	ДопПараметры.Вставить("СтатусПартии",        Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить("РежимПроведения",     РежимПроведения);
	ДопПараметры.Вставить("КачествоТолькоНовый", Истина);
	ДопПараметры.Вставить("ИмяРеквизитаЗаказ",   "ЗаказРезерв");
	ДопПараметры.Вставить("ЗаказВШапке",         Ложь);
	
	ТаблицаПоВнутреннимЗаказам = ТаблицаПоПродукции.Скопировать();
	
	КолвоЭлементов = ТаблицаПоВнутреннимЗаказам.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
   		СтрокаТаблицы = ТаблицаПоВнутреннимЗаказам[КолвоЭлементов - ОбратныйИндекс];
  
		Если ТипЗнч(СтрокаТаблицы.ЗаказРезерв) <> Тип("ДокументСсылка.ВнутреннийЗаказ")
		ИЛИ НЕ (СтрокаТаблицы.ЗаказРезерв.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад
		     И  Склад = СтрокаТаблицы.ЗаказРезерв.Заказчик)
		ИЛИ     СтрокаТаблицы.Качество <> Справочники.Качество.Новый Тогда
		      
			ТаблицаПоВнутреннимЗаказам.Удалить(СтрокаТаблицы);
			
		Иначе
		
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, движение делаем на оставшееся количество
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ЗаказРезерв, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура,
																   СтрокаТаблицы.ХарактеристикаНоменклатуры, 
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   Перечисления.СтатусыПартийТоваров.Купленный);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
			Иначе
				ТаблицаПоВнутреннимЗаказам.Удалить(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Если ТаблицаПоВнутреннимЗаказам.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТаблицаПоВнутреннимЗаказам, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукцияУпр()

// Процедура формирует движения регл. регистров по табличной части Продукция
//
Процедура ДвиженияПоТабличнойЧастиПродукцияОтходы(СтруктураШапкиДокумента)
	ЕстьЗадания = ЗначениеЗаполнено(ЗаданиеНаПроизводство) И ИспользоватьЗаданияНаПроизводство;
	
	Если ЕстьЗадания Тогда
		НаборДвиженийЗаданияНаВыпуск   = Движения.ЗаданияНаВыпуск;
		ТаблицаДвиженийЗаданияНаВыпуск = НаборДвиженийЗаданияНаВыпуск.Выгрузить();
	КонецЕсли;
	
	Для Каждого Строка Из Продукция Цикл
		
		ВыпускНаСклад = Не ИспользоватьНаправленияВыпуска ИЛИ (Строка.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаСклад);
		ВидВыпускаВыпуск = Не ИспользоватьНаработку ИЛИ (Строка.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск);
		Если ЗначениеЗаполнено(Строка.Номенклатура.ЕдиницаХраненияОстатков) Тогда
			Количество = Строка.Количество * Строка.Коэффициент / Строка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		Иначе
			Количество = Строка.Количество;
		КонецЕсли;
		
		Если ЕстьЗадания Тогда
			
			НоваяСтрокаЗаданияНаВыпуск = ТаблицаДвиженийЗаданияНаВыпуск.Добавить();
			НоваяСтрокаЗаданияНаВыпуск.ЗаданиеНаПроизводство      = ЗаданиеНаПроизводство;
			НоваяСтрокаЗаданияНаВыпуск.Номенклатура               = Строка.Номенклатура;
			НоваяСтрокаЗаданияНаВыпуск.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрокаЗаданияНаВыпуск.Заказ                      = Строка.Заказ;
			НоваяСтрокаЗаданияНаВыпуск.КонечнаяПродукция          = Строка.КонечнаяПродукция;
			НоваяСтрокаЗаданияНаВыпуск.Количество                 = Количество;
			
		КонецЕсли;
			
	КонецЦикла;
		
	Если ЕстьЗадания Тогда
		НаборДвиженийЗаданияНаВыпуск.мПериод = Дата;
		НаборДвиженийЗаданияНаВыпуск.мТаблицаДвижений = ТаблицаДвиженийЗаданияНаВыпуск;
		НаборДвиженийЗаданияНаВыпуск.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукцияОбщ()

// Процедура формирует движения регистров по табличной части Материалы
//
Процедура ДвиженияПоТабличнойЧастиМатериалыУпр(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьМатериалы Тогда
		Возврат;
	КонецЕсли;

	// Проверка остатков при оперативном проведении.
	Движения.МатериалыВПроизводстве.КонтрольОстатков(
		СтруктураШапкиДокумента, 
		Отказ, 
		Заголовок, 
		РежимПроведения);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений расход по регистру "Материалы в производстве".
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоМатериаламВПроизводстве(
		СтруктураШапкиДокумента, 
		мУчетнаяПолитика
	);

КонецПроцедуры // ДвиженияПоТабличнойЧастиМатериалыУпр()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		мУчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()
 
// Процедура формирует движения в регистры по ТЧ тех.операции
//
Процедура ДвиженияПоТабличнойЧастиТехОперации(СтруктураШапкиДокумента)
	
	Если Не СтруктураШапкиДокумента.ИспользоватьТехнологическиеОперации Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЗатратамиДвиженияПоРегистрам.СформироватьДвиженияПоОтражениюЗатрат(
		СтруктураШапкиДокумента,
		Неопределено, // ТаблицаЗатрат,
		Неопределено // ВидОтраженияВУчете
	);
	
	Если ЗначениеЗаполнено(ЗаданиеНаПроизводство) Тогда
		
		НаборДвиженийЗаданияНаТехОперации   = Движения.ЗаданияНаТехОперации;
		ТаблицаДвиженийЗаданияНаТехОперации = НаборДвиженийЗаданияНаТехОперации.Выгрузить();
		
		Для Каждого Строка Из ТехнологическиеОперации Цикл
			
			НоваяСтрокаЗаданияНаТехОперации = ТаблицаДвиженийЗаданияНаТехОперации.Добавить();
			НоваяСтрокаЗаданияНаТехОперации.ЗаданиеНаПроизводство      = ЗаданиеНаПроизводство;
			НоваяСтрокаЗаданияНаТехОперации.ТехОперация                = Строка.ТехнологическаяОперация;
			НоваяСтрокаЗаданияНаТехОперации.Количество                 = Строка.Количество;
				
		КонецЦикла;
		
		НаборДвиженийЗаданияНаТехОперации.мПериод = Дата;
		НаборДвиженийЗаданияНаТехОперации.мТаблицаДвижений = ТаблицаДвиженийЗаданияНаТехОперации;
		НаборДвиженийЗаданияНаТехОперации.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиТехОперации()

// Процедура формирует движения в регистры по ТЧ исполнители
//
Процедура ДвиженияПоТабличнойЧастиИсполнители(СтруктураШапкиДокумента)

   	Если Не ИспользоватьТехнологическиеОперации Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРаботРегл = СформироватьЗапросПоВыработкаРегл().Выгрузить();
	ВыборкаПоРаботникиРегл = СформироватьЗапросПоИсполнителиРегл().Выбрать();
	
	// фактическая выработка работников
	ДвиженияФактическойВыработкиУпр(СтруктураШапкиДокумента, Исполнители);
	ДвиженияФактическойВыработкиРегл(СтруктураШапкиДокумента, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл);	
	
	ВыборкаПоРаботникиРегл.Сбросить();
	ДвиженияРегистровБУиНУРегл(СтруктураШапкиДокумента, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл);	
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиТехОперации()

Процедура ДвиженияФактическойВыработкиУпр(СтруктураШапкиДокумента, ВыборкаПоРаботники)
	
	//Вместо СтруктураШапкиДокумента.ОтражатьВУправленческомУчете анализируем реквизит шапки - чтобы данные движения 
	//	формировались независимо от функционала отложенного проведения
	Если ОтражатьВУправленческомУчете Тогда
	
		НаборДвижений = Движения.ФактическаяВыработкаРаботников;
	
		Для Каждого СтрокаТЧ Из ВыборкаПоРаботники Цикл 
			 Если СтрокаТЧ.СуммаКНачислению <> 0 Тогда
				 НоваяСтрока = НаборДвижений.Добавить();
				 НоваяСтрока.Физлицо	= СтрокаТЧ.Физлицо;
				 НоваяСтрока.Выработка	= СтрокаТЧ.СуммаКНачислению;
				 НоваяСтрока.Период		= Дата;
				 НоваяСтрока.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень;
			 КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияФактическойВыработкиРегл(СтруктураШапкиДокумента, ВыборкаПоРаботники, ТаблицаРабот)

	//Вместо СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете анализируем реквизит шапки - чтобы данные движения 
	//	формировались независимо от функционала отложенного проведения
	Если ОтражатьВБухгалтерскомУчете Тогда
	
		ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		
		НаборДвижений = Движения.ФактическаяВыработкаРаботниковОрганизаций;
				
		СчетУчетаРасчетовСРаботниками = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		МассивСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		ОстатокСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		
		Работников = ВыборкаПоРаботники.Количество();
		
		Сч = 0;
		Пока ВыборкаПоРаботники.Следующий() Цикл 
			Сч = Сч + 1;
			Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
				
				НоваяСтрока = НаборДвижений.Добавить();
				НоваяСтрока.Сотрудник = ВыборкаПоРаботники.Сотрудник;
				НоваяСтрока.Организация = ГоловнаяОрганизация;
				НоваяСтрока.Выработка	= ВыборкаПоРаботники.СуммаКНачислению;
				НоваяСтрока.Период		= Дата;
				НоваяСтрока.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень;
				МассивСуммКНачислению = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению,МассивСуммЗаРаботы);
				
				Для каждого СтрокаТЗ Из ТаблицаРабот Цикл
					
					НомерУчета = ТаблицаРабот.Индекс(СтрокаТЗ);
					Если Сч = Работников Тогда
						Результат = ОстатокСуммЗаРаботы[НомерУчета];
					Иначе
					    Результат = Мин(МассивСуммКНачислению[НомерУчета],ОстатокСуммЗаРаботы[НомерУчета]);
						ОстатокСуммЗаРаботы[НомерУчета] = ОстатокСуммЗаРаботы[НомерУчета] - Результат;
					КонецЕсли;
						

				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияРегистровБУиНУРегл(СтруктураШапкиДокумента, ВыборкаПоРаботники, ТаблицаРабот)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
		СчетУчетаРасчетовСРаботниками = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		МассивСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		ОстатокСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		
		ВыборкаПоРаботники.Сбросить();
		Работников = ВыборкаПоРаботники.Количество();
		
		Сч = 0;
		Пока ВыборкаПоРаботники.Следующий() Цикл 
			Сч = Сч + 1;
			Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
				
				МассивСуммКНачислению = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению,МассивСуммЗаРаботы);
				
				Для каждого СтрокаТЗ Из ТаблицаРабот Цикл
					
					НомерУчета = ТаблицаРабот.Индекс(СтрокаТЗ);
					Если Сч = Работников Тогда
						Результат = ОстатокСуммЗаРаботы[НомерУчета];
					Иначе
						Результат = Мин(МассивСуммКНачислению[НомерУчета],ОстатокСуммЗаРаботы[НомерУчета]);
						ОстатокСуммЗаРаботы[НомерУчета] = ОстатокСуммЗаРаботы[НомерУчета] - Результат;
					КонецЕсли;
					
					Если Результат <> 0 Тогда
						Проводка = Движения.Хозрасчетный.Добавить();
					
						Проводка.Активность = Истина;
						Проводка.Период     = Дата;
					
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.Сумма        = Результат;
						Проводка.Содержание   = "Сдельная зарплата";
						Проводка.НомерЖурнала = "ЗП";
					
						Проводка.СчетДт = СтрокаТЗ.СчетЗатрат;
						
						Проводка.СуммаНУДт             = Результат;
						Проводка.НалоговоеНазначениеДт = СтрокаТЗ.НалоговоеНазначение;
					
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения"       , ПодразделениеОрганизации);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЗ.НоменклатурнаяГруппа);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат"        , СтрокаТЗ.СтатьяЗатрат);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЗ.ОбъектСтроительства);
					
						Если ВыборкаПоРаботники.СчетКт = NULL Тогда
							Проводка.СчетКт = СчетУчетаРасчетовСРаботниками;
							БухгалтерскийУчет.УстановитьСубконто(СчетУчетаРасчетовСРаботниками, Проводка.СубконтоКт, "РаботникиОрганизации", ВыборкаПоРаботники.ФизЛицо);
						Иначе
							Проводка.СчетКт = ВыборкаПоРаботники.СчетКт;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоРаботники.СубконтоКт1);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоРаботники.СубконтоКт2);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ВыборкаПоРаботники.СубконтоКт3);
						КонецЕсли;
						
						// проводки по Регистру расчета "ОтражениеЗарплатыОрганизацийВРеглУчете"
						СтрокаДанных = Движения.ОтражениеЗарплатыОрганизацийВРеглУчете.Добавить();

					
						СтрокаДанных.Регистратор = Ссылка;

					
						// период регистрации
						СтрокаДанных.ПериодРегистрации  	= НачалоМесяца( Дата );
						СтрокаДанных.БазовыйПериодКонец		= КонецМесяца( Дата );
					
						СтрокаДанных.ВидРасчета = ПланыВидовРасчета.ОтражениеЗарплатыОрганизаций.НачислениеСдельно;
						СтрокаДанных.Организация = Организация;

					
					
						СтрокаДанных.ВидРасчетаБазы	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата;
					
						// период регистрации
						СтрокаДанных.БазовыйПериодНачало	= НачалоМесяца( Дата );
					
						// измерения
						СтрокаДанных.Сотрудник	= ВыборкаПоРаботники.Сотрудник;
					
						// ресурсы
						СтрокаДанных.Результат			= Результат;
					
						// реквизиты
						СтрокаДанных.НалоговоеНазначениеДоходовИЗатрат 	= СтрокаТЗ.НалоговоеНазначение;
					
						СтрокаДанных.СчетДт			= Проводка.СчетДт;
						Инд = 1;
						Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
						
							СтрокаДанных["СубконтоДт"+ Инд] = Проводка.СубконтоДт[ВидСубконто.ВидСубконто];
							Инд = Инд + 1;
							
						КонецЦикла; 
					
						СтрокаДанных.СчетКт      = Проводка.СчетКт;
						Инд = 1;
						Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
						
							СтрокаДанных["СубконтоКт"+ Инд] = Проводка.СубконтоКт[ВидСубконто.ВидСубконто];
							Инд = Инд + 1;
						
						КонецЦикла; 
	
	
					КонецЕсли;
					
				
				КонецЦикла;
			
			КонецЕсли;
		КонецЦикла;
		
		Движения.Хозрасчетный.Записать(Ложь);
		
	КонецЕсли;
		 	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоПродукции        - таблица значений, содержащая данные для проведения и проверки ТЧ Продукция
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоВозвратнымОтходам,
								ТаблицаСписанияНаЗатраты, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТЧ Из ТаблицаПоПродукции Цикл
			Если СтрокаТЧ.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатраты Тогда
				МассивСерий.Добавить( СтрокаТЧ.СерияНоменклатуры);
			Иначе
				МассивСерий.Добавить( Неопределено);
			КонецЕсли;
		КонецЦикла;
		УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( МассивСерий, Дата, Отказ, Заголовок);
	КонецЕсли;
	
	// Формирование движений по регистрам "Затраты на выпуск продукции".
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(
		СтруктураШапкиДокумента, 
		"ОтчетПроизводстваЗаСмену",
		мУчетнаяПолитика, 
		мУчетнаяПолитикаБух
		);
		
	// Формирование движений по регистрам "Выпуск продукции" и направлениям выпуска.
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска(
		СтруктураШапкиДокумента, 
		"ОтчетПроизводстваЗаСмену",
		мУчетнаяПолитика, 
		мУчетнаяПолитикаБух
		);
	
	ДвиженияПоТабличнойЧастиПродукцияОтходы(СтруктураШапкиДокумента);
	ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	ДвиженияПоТабличнойЧастиТехОперации(СтруктураШапкиДокумента);
	ДвиженияПоТабличнойЧастиИсполнители(СтруктураШапкиДокумента);
	
	// Формирование движений регистров.
	ДвиженияПоТабличнойЧастиМатериалыУпр(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	
	// Зарегистрируем документ в последовательности.
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект, 
		Дата, 
		СтруктураШапкиДокумента.Организация,
		ОтражатьВУправленческомУчете,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
	);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует запрос по таблице "Выработка" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоВыработкаРегл()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	// 
	// 1. Выборка "Выработка": 
	//		Выбираются строки документа.  
	// 2. Выборки "ВидСубконтоДт i": 
	//		По плану счетов Хозрасчетный определяем тип 
    //      значения субконто, требуемых счету учета 
    //
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(Выработка.СуммаРегл) КАК СуммаЗаРаботу,
	|	Выработка.НоменклатурнаяГруппа,
	|	Выработка.СтатьяЗатрат,
	|	Выработка.СчетЗатрат,
	|	Выработка.Продукция,
	|	Выработка.СерияПродукции,
	|	Выработка.ХарактеристикаПродукции,
	|	Выработка.ОбъектСтроительства,
	|	ВидСубконтоДт1.ВидСубконто КАК ВидСубконто1,
	|	ВидСубконтоДт2.ВидСубконто КАК ВидСубконто2,
	|	ВидСубконтоДт3.ВидСубконто КАК ВидСубконто3,
    |	Выработка.НалоговоеНазначение КАК НалоговоеНазначение
    |
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.ТехнологическиеОперации КАК Выработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт1
	|		ПО Выработка.СчетЗатрат = ВидСубконтоДт1.Ссылка
	|			И (ВидСубконтоДт1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт2
	|		ПО Выработка.СчетЗатрат = ВидСубконтоДт2.Ссылка
	|			И (ВидСубконтоДт2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт3
	|		ПО Выработка.СчетЗатрат = ВидСубконтоДт3.Ссылка
	|			И (ВидСубконтоДт3.НомерСтроки = 3)
	|ГДЕ
	|	Выработка.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Выработка.НоменклатурнаяГруппа,
	|	Выработка.СтатьяЗатрат,
	|	Выработка.СчетЗатрат,
	|	Выработка.Продукция,
	|	Выработка.СерияПродукции,
	|	Выработка.ХарактеристикаПродукции,
	|	Выработка.ОбъектСтроительства,
	|	ВидСубконтоДт1.ВидСубконто,
	|	ВидСубконтоДт2.ВидСубконто,
	|	ВидСубконтоДт3.ВидСубконто,
    |	Выработка.НалоговоеНазначение
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВыработкаРегл()

// Формирует запрос по таблице "Исполнители" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоИсполнителиРегл()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
	Запрос.УстановитьПараметр("ВР", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата);
	Запрос.УстановитьПараметр("СпособРасчета", Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
    Запрос.УстановитьПараметр("НачальнаяДата", '00010101');
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядИсполнители": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением 
	//		реквизитов "Сотрудник".
	// 3. Выборка "РаботникиОрганизацииСрезПоследних": 
	//		Из регистра (срез последних) РаботникиОрганизации выбираются строки, 
	//		соответствующие работникам документа.  
    //
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСменуИсполнители.НомерСтроки КАК НомерСтроки,
	|	ОтчетПроизводстваЗаСменуИсполнители.Сотрудник,
	|	ОтчетПроизводстваЗаСменуИсполнители.ФизЛицо,
	|	ОтчетПроизводстваЗаСменуИсполнители.СуммаКНачислениюРегл КАК СуммаКНачислению,
    |	ВЫБОР КОГДА СпособОтражениеГПХ.Ссылка ЕСТЬ НЕ NULL ТОГДА СпособОтражениеГПХ.СпособОтраженияВБухучете.СчетКт			ИНАЧЕ NULL КОНЕЦ	КАК СчетКт,
    |	ВЫБОР КОГДА СпособОтражениеГПХ.Ссылка ЕСТЬ НЕ NULL ТОГДА СпособОтражениеГПХ.СпособОтраженияВБухучете.СубконтоКт1	ИНАЧЕ NULL КОНЕЦ	КАК СубконтоКт1,
    |	ВЫБОР КОГДА СпособОтражениеГПХ.Ссылка ЕСТЬ НЕ NULL ТОГДА СпособОтражениеГПХ.СпособОтраженияВБухучете.СубконтоКт2	ИНАЧЕ NULL КОНЕЦ	КАК СубконтоКт2,
    |	ВЫБОР КОГДА СпособОтражениеГПХ.Ссылка ЕСТЬ НЕ NULL ТОГДА СпособОтражениеГПХ.СпособОтраженияВБухучете.СубконтоКт3	ИНАЧЕ NULL КОНЕЦ	КАК СубконтоКт3,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Исполнители КАК ОтчетПроизводстваЗаСменуИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Исполнители1.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(Исполнители2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ОтчетПроизводстваЗаСмену.Исполнители КАК Исполнители1
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПроизводстваЗаСмену.Исполнители КАК Исполнители2
	|				ПО Исполнители1.Сотрудник = Исполнители2.Сотрудник
	|					И Исполнители1.НомерСтроки < Исполнители2.НомерСтроки
	|					И Исполнители1.Ссылка = Исполнители2.Ссылка
	|					
	|		ГДЕ
	|			Исполнители1.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Исполнители1.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ОтчетПроизводстваЗаСменуИсполнители.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&ДатаАктуальности,
	|		Организация = &ГоловнаяОрганизация
	|		    И Сотрудник В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            ОтчетПроизводстваЗаСменуИсполнители.Сотрудник
	|		        ИЗ
	|		            Документ.ОтчетПроизводстваЗаСмену.Исполнители КАК ОтчетПроизводстваЗаСменуИсполнители
	|		        ГДЕ
	|		            ОтчетПроизводстваЗаСменуИсполнители.Ссылка = &ДокументСсылка)) КАК РаботникиОрганизацииСрезПоследних
	|		ПО ОтчетПроизводстваЗаСменуИсполнители.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|		&ДатаАктуальности,
	|		Организация = &ГоловнаяОрганизация
	|		    И Сотрудник В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            ОтчетПроизводстваЗаСменуИсполнители.Сотрудник
	|		        ИЗ
	|		            Документ.ОтчетПроизводстваЗаСмену.Исполнители КАК ОтчетПроизводстваЗаСменуИсполнители
	|		        ГДЕ
	|		            ОтчетПроизводстваЗаСменуИсполнители.Ссылка = &ДокументСсылка)
	|		    И ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО) КАК ПлановыеНачисленияРаботниковОрганизацииСрезПоследних
	|		ПО ОтчетПроизводстваЗаСменуИсполнители.Сотрудник = ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Сотрудник
	|			
	|			И (ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчета.СпособРасчета = &СпособРасчета)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК СпособОтражениеГПХ
	| 		ПО    СпособОтражениеГПХ.Сотрудник = ОтчетПроизводстваЗаСменуИсполнители.Сотрудник 
	|	 	
	|ГДЕ
	|	ОтчетПроизводстваЗаСменуИсполнители.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоИсполнители()

// Дополняет полями, нужными для упр. учета.
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "УчетЗатратПоЗаказамНаПроизводство", "УчетЗатратПоЗаказамНаПроизводство");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

// Дополняет полями, нужными для регл. учета.
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеРегл()

// Дополняет полями, нужными для регл. учета.
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратныеОтходыРегл(СтруктураПолей)

    СтруктураПолей.Вставить("Счет"                 , "Счет");
    СтруктураПолей.Вставить("СчетЗатрат"           , "СчетЗатрат");
	СтруктураПолей.Вставить("НалоговоеНазначение"  , "НалоговоеНазначение");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиВозвратныеОтходыРегл()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаданиеНаПроизводство") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Дата = Основание.ДатаЗадания;
		
		ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если Не мИспользоватьНаработку Тогда
			ИспользоватьНаработку = мИспользоватьНаработку;
		КонецЕсли;
		
		ЗаданиеНаПроизводство = Основание;
		ИспользоватьЗаданияНаПроизводство = Истина;
		
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		Если Основание.Проведен Тогда

			ЗаполнитьПродукциюПоЗаданиюНаПроизводство();
			ЗаполнитьТехОперации();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если Не мИспользоватьНаработку Тогда
			ИспользоватьНаработку = мИспользоватьНаработку;
		КонецЕсли;
		
		#Если Клиент Тогда
		СписокПодразделений = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(Основание.Подразделение,Основание.Организация);
		Если СписокПодразделений.Количество()=0 Тогда
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		Иначе
			ПодразделениеОрганизации = СписокПодразделений[0].Значение;
		КонецЕсли;
		#КонецЕсли
		
		Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		ИспользоватьЗаказы = Истина;
		
		Если Основание.Проведен Тогда
			
			ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство(Продукция, Основание);
			
			ЗаполнитьПотребностямиПоЗаказамНаПроизводство(РаспределениеМатериалов, Основание);
			
			ТабЧасть = РаспределениеМатериалов.Выгрузить();
			Материалы.Загрузить(ТабЧасть);
			Материалы.Свернуть("ЗаказВыпуска,Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент,Спецификация,СтатьяЗатрат,ВидВыпуска","Количество");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если не ИспользоватьМатериалы и Материалы.Количество()>0 Тогда
		ИспользоватьМатериалы = истина;
	КонецЕсли;
	Если не ИспользоватьПрочиеЗатраты и ПрочиеЗатраты.Количество()>0 Тогда
		ИспользоватьпрочиеЗатраты = истина;
	КонецЕсли;
	Если не ИспользоватьТехнологическиеОперации и ТехнологическиеОперации.Количество()>0 Тогда
		ИспользоватьТехнологическиеОперации = истина;
	КонецЕсли;
	Если не ИспользоватьВозвратныеОтходы и ВозвратныеОтходы.Количество()>0 Тогда
		ИспользоватьВозвратныеОтходы = истина;
	КонецЕсли;
	
	Если АвтораспределениеМатериалов и РаспределениеМатериалов.Количество()>0 Тогда
		АвтораспределениеМатериалов = Ложь;
	КонецЕсли;
	Если АвтораспределениеПрочихЗатрат и РаспределениеПрочихЗатрат.Количество()>0 Тогда
		АвтораспределениепрочихЗатрат = Ложь;
	КонецЕсли;
	Если АвтораспределениеТехнологическихОпераций и РаспределениеТехнологическихОпераций.Количество()>0 Тогда
		АвтораспределениеТехнологическихОпераций = Ложь;
	КонецЕсли;
	Если АвтораспределениеВозвратныхОтходов и РаспределениеВозвратныхОтходов.Количество()>0 Тогда
		АвтораспределениеВозвратныхОтходов = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ=ложь) Экспорт
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	// Дополним полями, нужными для регл. и упр. учета
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СкладОтходов) Тогда
		СтруктураШапкиДокумента.Вставить( "СкладОтходов", СтруктураШапкиДокумента.Склад);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоВозвратнымОтходам, ТаблицаСписанияНаЗатраты) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Продукция".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              			, "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"			, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         			, "СерияНоменклатуры");
	
	СтруктураПолей.Вставить("Количество"                			, "Количество * ВЫБОР КОГДА Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL ИЛИ Коэффициент = 0 ТОГДА 1 ИНАЧЕ Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КОНЕЦ");
	СтруктураПолей.Вставить("КоличествоДоделка"                		, "КоличествоДоделка * ВЫБОР КОГДА Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL ИЛИ Коэффициент = 0 ТОГДА 1 ИНАЧЕ Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КОНЕЦ");
	СтруктураПолей.Вставить("Отпущено"                				, "Количество * ВЫБОР КОГДА Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL ИЛИ Коэффициент = 0 ТОГДА 1 ИНАЧЕ Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КОНЕЦ");
	СтруктураПолей.Вставить("ОтпущеноСверхЛимита"           		, "ОтпущеноСверхЛимита * ВЫБОР КОГДА Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL ИЛИ Коэффициент = 0 ТОГДА 1 ИНАЧЕ Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КОНЕЦ");

	СтруктураПолей.Вставить("Услуга"								, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"									, "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"								, "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЗаказПокупателя"						, "Заказ");
	СтруктураПолей.Вставить("Заказ"									, "Заказ");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"					, "ЗаказРезерв.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"					, "ЗаказРезерв.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
							"ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ЗаказНаПроизводство"					, "ЗаказВыпуска");
	СтруктураПолей.Вставить("ЗаказРезерв"					        , "ЗаказРезерв");

	СтруктураПолей.Вставить("ЕдиницаИзмерения"						, "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Коэффициент"							, "Коэффициент");
	
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"			, "Номенклатура.ВестиПартионныйУчетПоСериям");
	
	СтруктураПолей.Вставить("ВидВыпуска"		   					, "ВидВыпуска");
	СтруктураПолей.Вставить("Качество"		   						, "Качество");
	СтруктураПолей.Вставить("КонечнаяПродукция"		   				, "КонечнаяПродукция");
	СтруктураПолей.Вставить("НаправлениеВыпуска"		   			, "НаправлениеВыпуска");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		   			, "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Спецификация"		   					, "Спецификация");
	
	СтруктураПолей.Вставить("КлючСвязи"		   						, "КлючСвязи");
	
	// Получатели.
	СтруктураПолей.Вставить("ЗаказПолучатель"		   				, "ЗаказПолучатель");
	СтруктураПолей.Вставить("НоменклатурнаяГруппаПолучатель"		, "НоменклатурнаяГруппаПолучатель");
	СтруктураПолей.Вставить("ПодразделениеОрганизацииПолучатель"	, "ПодразделениеОрганизацииПолучатель");
	СтруктураПолей.Вставить("ПодразделениеПолучатель"				, "ПодразделениеПолучатель");
	СтруктураПолей.Вставить("СтатьяЗатратПолучатель"				, "СтатьяЗатратПолучатель");
	СтруктураПолей.Вставить("ХарактерЗатрат"         				, "СтатьяЗатратПолучатель.ХарактерЗатрат");
	СтруктураПолей.Вставить("Продукция"         					, "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции"       		, "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукции"         				, "СерияПродукции");
	СтруктураПолей.Вставить("ОбъектСтроительства"         			, "ОбъектСтроительства");
	СтруктураПолей.Вставить("СтатусПартии"                          , "СтатусПартии");

	// Дополним полями, нужными для регл. и упр. учета.
	ДополнитьСтруктуруПолейТабличнойЧастиПродукцияРегл(СтруктураПолей);
	
	РезультатЗапросаПоПродукции = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей);
	
	// Подготовим таблицу продукции для проведения.
	ТаблицаПоПродукции = ПодготовитьТаблицуТоваров(РезультатЗапросаПоПродукции, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Возвратные отходы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Партия"         			, "Ссылка");
	СтруктураПолей.Вставить("Услуга"					, "Номенклатура.Услуга");
	
	СтруктураПолей.Вставить("Заказ"						, "Заказ");
	СтруктураПолей.Вставить("ЗаказРезерв"		        , "ЗаказРезерв");
	
	СтруктураПолей.Вставить("Затрата"              		, "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаЗатраты"		, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияЗатраты"         		, "СерияНоменклатуры");
	СтруктураПолей.Вставить("СтатусМатериальныхЗатрат"	, "СтатьяЗатрат.СтатусМатериальныхЗатрат");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратныеОтходыРегл(СтруктураПолей);
	
	РезультатЗапросаПоВозвратнымОтходам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", СтруктураПолей);
	
	// Подготовим таблицу возвратных отходов для проведения.
	ТаблицаПоВозвратнымОтходам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоВозвратнымОтходам, СтруктураШапкиДокумента);
	
	// Подготовим таблицу списания на затраты.
	ТаблицаСписанияНаЗатраты = ПодготовитьТаблицуСписанияНаЗатраты();
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоВозвратнымОтходам, ТаблицаСписанияНаЗатраты;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ);
	
	ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	// проверка совпадения сумм по т.ч. 
	Если ИспользоватьТехнологическиеОперации Тогда
		//Вместо СтруктураШапки.ОтражатьВУправленческомУчете и СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		//анализируем реквизит шапки - чтобы данные движения формировались независимо от функционала отложенного проведения
		Если ОтражатьВУправленческомУчете Тогда

			Если ТехнологическиеОперации.Итог("Сумма") <> Исполнители.Итог("СуммаКНачислению") Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы к начислению по управленческому учету по табличным частям ""Тех. операции"" и ""Исполнители""!", Отказ, Заголовок);
			КонецЕсли;
			Если ТехнологическиеОперации.Итог("Сумма") <> РаспределениеТехнологическихОпераций.Итог("Сумма") Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы по управленческому учету по табличным частям ""Тех. операции"" и ""Распределение тех.операций""!", , Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			Если ТехнологическиеОперации.Итог("СуммаРегл") <> Исполнители.Итог("СуммаКНачислениюРегл") Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы к начислению по регламентированному учету по табличным частям ""Тех. операции"" и ""Исполнители""!", Отказ, Заголовок);
			КонецЕсли;
			Если ТехнологическиеОперации.Итог("СуммаРегл") <> РаспределениеТехнологическихОпераций.Итог("СуммаРегл") Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы по регламентированному учету по табличным частям ""Тех. операции"" и ""Распределение тех.операций""!", , Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоВозвратнымОтходам, ТаблицаСписанияНаЗатраты);
	
	//Проверим заполнение счетов учета.
	//Проверка выполняется только для двух табличных частей: Продукция и ВозвратныеОтходы.
	//Для остальных табличных частей проверка выполняется в процедуре ПроверкаРеквизитов()
	//Продукция.СчетЗатратПолучатель также проверяется в процедуре ПроверкаРеквизитов()
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Продукция", 		ТаблицаПоПродукции, СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратныеОтходы", ТаблицаПоВозвратнымОтходам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Документ не может осуществлять операции с бланками строгого учета.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "РаспределениеВозвратныхОтходов", ТаблицаПоВозвратнымОтходам, Отказ, Заголовок);
	
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоВозвратнымОтходам,
							ТаблицаСписанияНаЗатраты, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	/// смтс гвл +
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		пРезультат = ПроверитьСериюПолуфабрикатаВТребовании();
		Если ЗначениеЗаполнено(пРезультат) Тогда
			Отказ = Истина;
			Сообщить(пРезультат);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	/// смтс гвл -
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Неопределено,			// ТабличнаяЧастьТовары
			Неопределено,			// ТабличнаяЧастьВозвратнаяТара
			Продукция,   			// ТабличнаяЧастьУслуги
			Неопределено,   		// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено, 	    	// ТабличнаяЧастьБланкиСтрогогоУчета
			"СчетЗатратПолучатель", // ИмяРеквизитаСчетЗатрат
			"Субконто" 				// ИмяРеквизитаСубконто
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Неопределено,			// ТабличнаяЧастьТовары
			Неопределено,			// ТабличнаяЧастьВозвратнаяТара
			НаправленияСписания,   	// ТабличнаяЧастьУслуги
			Неопределено,   		// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено, 	    	// ТабличнаяЧастьБланкиСтрогогоУчета
			"СчетЗатрат", 			// ИмяРеквизитаСчетЗатрат
			"Субконто", 			// ИмяРеквизитаСубконто
			Истина					// НеЗаполнятьНалоговоеНазначение
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Материалы,				// ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			ТехнологическиеОперации,   // ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			ПрочиеЗатраты,				// ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			ВозвратныеОтходы,			// ТабличнаяЧастьТовары
		);
		
	КонецЕсли;
	
	Если АвтораспределениеМатериалов Тогда
		ЗаполнитьТаблицуРаспределенияМатериалов();
	КонецЕсли;

	Если АвтораспределениеПрочихЗатрат Тогда
		ЗаполнитьТаблицуРаспределенияПрочихЗатрат();
	КонецЕсли;
	
	Если АвтораспределениеВозвратныхОтходов Тогда
		ЗаполнитьТаблицуРаспределенияВозвратныхОтходов();
	КонецЕсли;
	
	Если АвтораспределениеТехнологическихОпераций Тогда
		ЗаполнитьТаблицуРаспределенияТехнологическихОпераций();
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			РаспределениеМатериалов // ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			РаспределениеТехнологическихОпераций // ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			РаспределениеПрочихЗатрат // ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			РаспределениеВозвратныхОтходов // ТабличнаяЧастьТовары
		);
		
	КонецЕсли;
	
	Если Не мИспользоватьНаработку Тогда
		ИспользоватьНаработку = мИспользоватьНаработку;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда
		Для Каждого СтрокаТЧ Из Продукция Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатусПартии) Тогда
				СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
			КонецЕсли;
			Если СтрокаТЧ.ЗаказРезерв <> неопределено И (СтрокаТЧ.Номенклатура.Услуга или 
				(ИспользоватьНаработку И СтрокаТЧ.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка)) 
				 Тогда
				СтрокаТЧ.ЗаказРезерв = неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ВозвратныеОтходы Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатусПартии) Тогда
				СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Материалы);
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Продукция");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Продукция", "ПараметрыВыпускаПродукции");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Продукция", "НаправленияСписания");
	
	Если Не ВводитьСтатьиЗатратПоСтрокам Тогда
		УправлениеПроизводством.ЗаполнитьСтатьюЗатратВСтрокахТабЧасти(ЭтотОбъект, Материалы);
		УправлениеПроизводством.ЗаполнитьСтатьюЗатратВСтрокахТабЧасти(ЭтотОбъект, РаспределениеМатериалов);
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(Исполнители);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

/// смтс гвл +
Функция ПроверитьСериюПолуфабрикатаВТребовании()
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтчетПроизводстваЗаСменуМатериалы.Номенклатура,
	               |	ОтчетПроизводстваЗаСменуМатериалы.СерияНоменклатуры,
	               |	ОтчетПроизводстваЗаСменуМатериалы.ХарактеристикаНоменклатуры,
	               |	ОтчетПроизводстваЗаСменуМатериалы.Количество КАК Количество,
	               |	ОтчетПроизводстваЗаСменуМатериалы.ЗаказВыпуска
	               |ПОМЕСТИТЬ ВТТабличнаяЧастьМатериалы
	               |ИЗ
	               |	&ТЧМатериалы КАК ОтчетПроизводстваЗаСменуМатериалы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ВТТабличнаяЧастьМатериалы.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ВТТабличнаяЧастьМатериалы.СерияНоменклатуры,
	               |	ВТТабличнаяЧастьМатериалы.ХарактеристикаНоменклатуры,
	               |	СУММА(ВТТабличнаяЧастьМатериалы.Количество) КАК Количество,
	               |	ВТТабличнаяЧастьМатериалы.ЗаказВыпуска
	               |ПОМЕСТИТЬ ВТПолуфабрикатыДляПроверки
	               |ИЗ
	               |	ВТТабличнаяЧастьМатериалы КАК ВТТабличнаяЧастьМатериалы
	               |ГДЕ
	               |	ВЫРАЗИТЬ(ВТТабличнаяЧастьМатериалы.Номенклатура КАК Справочник.Номенклатура).ВидВоспроизводства = &ВидВоспроизводстваПолуфабрикат
	               |	И (ВЫРАЗИТЬ(ВТТабличнаяЧастьМатериалы.СерияНоменклатуры КАК Справочник.СерииНоменклатуры)) <> &СерияНоменклатурыПустая
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТабличнаяЧастьМатериалы.Номенклатура,
	               |	ВТТабличнаяЧастьМатериалы.СерияНоменклатуры,
	               |	ВТТабличнаяЧастьМатериалы.ХарактеристикаНоменклатуры,
	               |	ВТТабличнаяЧастьМатериалы.ЗаказВыпуска
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПолуфабрикатыДляПроверки.Номенклатура,
	               |	ВТПолуфабрикатыДляПроверки.СерияНоменклатуры,
	               |	ВТПолуфабрикатыДляПроверки.ХарактеристикаНоменклатуры,
	               |	ВТПолуфабрикатыДляПроверки.ЗаказВыпуска,
	               |	ВТПолуфабрикатыДляПроверки.Количество,
	               |	ТребованиеНакладнаяМатериалы.СерияНоменклатуры КАК СерияНоменклатурыТребование,
	               |	ТребованиеНакладнаяМатериалы.Количество КАК КоличествоТребование
	               |ИЗ
	               |	ВТПолуфабрикатыДляПроверки КАК ВТПолуфабрикатыДляПроверки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	               |		ПО ВТПолуфабрикатыДляПроверки.Номенклатура = ТребованиеНакладнаяМатериалы.Номенклатура
	               |			И ВТПолуфабрикатыДляПроверки.ХарактеристикаНоменклатуры = ТребованиеНакладнаяМатериалы.ХарактеристикаНоменклатуры
	               |			И ВТПолуфабрикатыДляПроверки.ЗаказВыпуска = ТребованиеНакладнаяМатериалы.Ссылка.ДокументОснование
	               |			И ВТПолуфабрикатыДляПроверки.СерияНоменклатуры = ТребованиеНакладнаяМатериалы.СерияНоменклатуры
	               |			И (ТребованиеНакладнаяМатериалы.Ссылка.Проведен)
	               |ГДЕ
	               |	ТребованиеНакладнаяМатериалы.СерияНоменклатуры ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("ВидВоспроизводстваПолуфабрикат", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	Запрос.УстановитьПараметр("ТЧМатериалы", Материалы.Выгрузить());
	Запрос.УстановитьПараметр("СерияНоменклатурыПустая", Справочники.СерииНоменклатуры.ПустаяСсылка());
	РезЗапр = Запрос.Выполнить().Выбрать();
	СтрокаСообщения = "";
	Если РезЗапр.Количество() > 0 Тогда
		СтрокаСообщения = "Не списаны в производство документом ""Требование-накладная"" следующие серии полуфабриката:" + Символы.ПС;
		Пока РезЗапр.Следующий() Цикл
			СтрокаСообщения = СтрокаСообщения + "Номенклатура: " + РезЗапр.Номенклатура + ?(ЗначениеЗаполнено(РезЗапр.ХарактеристикаНоменклатуры)," / Характеристика: " +РезЗапр.ХарактеристикаНоменклатуры,"") + " / Серия: "+РезЗапр.СерияНоменклатуры ;			
		КонецЦикла;	
	КонецЕсли;	
	Возврат СтрокаСообщения;
КонецФункции	
/// смтс гвл -

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");
мИспользоватьТолькоСборочныеСпецификации = Константы.ИспользоватьТолькоСборочныеСпецификации.Получить();
мИспользоватьНаработку = Константы.ИспользоватьНаработку.Получить();
мИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
мУчетЗатратПоЗаказамНаПроизводство = Ложь;
мИспользоватьПотребностиЗаказовНаПроизводство 		= глЗначениеПеременной("ИспользоватьПотребностиЗаказовНаПроизводство");
мСпособЗакрытияПотребностейЗаказовНаПроизводство 	= глЗначениеПеременной("СпособЗакрытияПотребностейЗаказовНаПроизводство");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Продукция", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));


