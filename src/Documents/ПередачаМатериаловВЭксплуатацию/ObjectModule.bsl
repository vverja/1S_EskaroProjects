Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11(ПечатьПоДаннымУпрУчета = Истина)
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	                       КАК НомерДокумента,
	|	Дата	                       КАК ДатаДокумента,
	|	Организация                    КАК Организация,
	|	Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	Склад                          КАК Склад,
	|	" + ?(ПечатьПоДаннымУпрУчета, "Подразделение", "ПодразделениеОрганизации")+" КАК Подразделение
	|ИЗ
	|	Документ.ПередачаМатериаловВЭксплуатацию КАК ПередачаМатериаловВЭксплуатацию
	|
	|ГДЕ
	|	ПередачаМатериаловВЭксплуатацию.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	                            
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Если Проведен Тогда
		
		Рег = ?(ПечатьПоДаннымУпрУчета, "ПартииМатериаловВЭксплуатации", "ПартииМатериаловВЭксплуатацииБухгалтерскийУчет");
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
		
		// Двойная вложенность запросов необходима, поскольку
		// при передаче в эксплуатацию могут быть корректировки стоимости.
		// Без такой вложенности корректировки выводятся отдельной строкой.
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК МатериалНаименование,
		|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                КАК НоменклатурныйНомер,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
		|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.ЕдиницаИзмерения)              КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ВложенныйЗапрос.СерияНоменклатуры          КАК Серия," + ?(Не ПечатьПоДаннымУпрУчета, "
		|	ВложенныйЗапрос.СчетПередачиБУ             КАК СчетПередачи,", "") + "
		|	ВложенныйЗапрос.Количество                 КАК Количество,
		|	ВложенныйЗапрос.Цена                       КАК Цена,
		|	ВложенныйЗапрос.Стоимость                  КАК Стоимость
		|ИЗ
		|	(ВЫБРАТЬ
		|		Партии.Номенклатура               КАК Номенклатура,
		|		Партии.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		Партии.СерияНоменклатуры          КАК СерияНоменклатуры," + ?(Не ПечатьПоДаннымУпрУчета, " 
		|		Партии.СчетПередачиБУ             КАК СчетПередачиБУ,", "") + "
		|		ВЫБОР
		|			КОГДА Партии.Количество = 0
		|				ТОГДА Партии.Стоимость
		|			ИНАЧЕ ВЫРАЗИТЬ(Партии.Стоимость / Партии.Количество КАК ЧИСЛО(15, 2))
		|		КОНЕЦ КАК Цена,
		|		СУММА(Партии.Количество)    КАК Количество,
		|		СУММА(Партии.Стоимость)     КАК Стоимость,
		|		Партии.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|		МИНИМУМ(Партии.НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Партии.Номенклатура                           КАК Номенклатура,
		|			Партии.ХарактеристикаНоменклатуры             КАК ХарактеристикаНоменклатуры,
		|			Партии.СерияНоменклатуры                      КАК СерияНоменклатуры," + ?(Не ПечатьПоДаннымУпрУчета, "
		|			Партии.СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,", "") + "
		|			Партии.ДокументОприходования                  КАК ДокументОприходования,
		|			СУММА(Партии.Количество)                      КАК Количество,
		|			СУММА(Партии.Стоимость)                       КАК Стоимость,
		|			Партии.Номенклатура.ЕдиницаХраненияОстатков   КАК ЕдиницаИзмерения,
		|			МИНИМУМ(Партии.НомерСтроки)                   КАК НомерСтроки
		|		ИЗ
		|			РегистрНакопления." + Рег + " КАК Партии
		|		ГДЕ
		|			Партии.Регистратор = &ТекущийДокумент
		|			И Партии.ВидДвижения = &ВидДвижения
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Партии.Номенклатура,
		|			Партии.ХарактеристикаНоменклатуры," + ?(Не ПечатьПоДаннымУпрУчета, "
		|			Партии.СхемаНазначенияИспользования.СчетПередачиБУ,", "") + "
		|			Партии.СерияНоменклатуры,
		|			Партии.Номенклатура.ЕдиницаХраненияОстатков,
		|			Партии.ДокументОприходования) КАК Партии
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Партии.Номенклатура," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		Партии.СчетПередачиБУ,", "") + "
		|		Партии.ХарактеристикаНоменклатуры,
		|		Партии.СерияНоменклатуры,
		|		Партии.ЕдиницаИзмерения,
		|		ВЫБОР
		|			КОГДА Партии.Количество = 0
		|				ТОГДА Партии.Стоимость
		|			ИНАЧЕ ВЫРАЗИТЬ(Партии.Стоимость / Партии.Количество КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.НомерСтроки                                                      
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Стоимость)
		|ПО
		|	ОБЩИЕ";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК МатериалНаименование,
		|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК НоменклатурныйНомер,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
		|	ВложенныйЗапрос.Серия                КАК Серия,
		|	ВложенныйЗапрос.Количество           КАК Количество," + ?(Не ПечатьПоДаннымУпрУчета, "
		|	ВложенныйЗапрос.СчетПередачиБУ       КАК СчетПередачи,", "") + "
		|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки
		|ИЗ 
		|	(
		|	ВЫБРАТЬ
		|		Номенклатура                           КАК Номенклатура,
		|		ЕдиницаИзмерения                       КАК ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,", "") + "
		|		ХарактеристикаНоменклатуры	           КАК Характеристика,
		|		СерияНоменклатуры                      КАК Серия,
		|		СУММА(Количество)                      КАК Количество,
		|		МИНИМУМ(НомерСтроки) 		           КАК НомерСтроки
		|	ИЗ
		|		Документ.ПередачаМатериаловВЭксплуатацию.Материалы КАК Док
		|	ГДЕ
		|		Док.Ссылка = &ТекущийДокумент
		|
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура,
		|		ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		СхемаНазначенияИспользования.СчетПередачиБУ,", "") + "
		|		ХарактеристикаНоменклатуры,
		|		СерияНоменклатуры
		|
		|	) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	ОБЩИЕ
		|";
		
	КонецЕсли;

	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаМатериаловВЭксплуатацию_М11";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("М11");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.КодОперации = "Передача в эксплуатацію";	
	Область.Параметры.Основание = Основание;
	Область.Параметры.Кому = Кому;
	
	Если ПечатьПоДаннымУпрУчета Тогда
		
		Область.Параметры.ПредставлениеОрганизации = "Управлінський облік";
		Область.Параметры.Валюта                   = мВалютаУправленческогоУчета;
		
	Иначе
				
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
		СписокПоказателей = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.ДатаДокумента, СписокПоказателей);
		Область.Параметры.КодПоЕДРПОУ              = СписокПоказателей.КодПоЕДРПОУ;
		Область.Параметры.ПредставлениеОрганизации = Шапка.ОрганизацияНаименованиеПолное;
		Область.Параметры.Валюта                   = мВалютаРегламентированногоУчета;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(Область);
	
	ВысотаШапки   = ТабДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
	ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("R" + ВысотаШапки);
	ТабДокумент.ОбластьПечати            = ТабДокумент.Область("C2:C" + ШиринаТаблицы);
	
	ВыборкаОбщийИтог = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщийИтог.Следующий(); // получение общего итога
	
	ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
	ПараметрыПодвал = ОбластьПодвал.Параметры;
	
	Если Проведен Тогда
		
		ПрописьВалюты = ?(ПечатьПоДаннымУпрУчета, мВалютаУправленческогоУчета.ПараметрыПрописиНаУкраинском,
		                                          мВалютаРегламентированногоУчета.ПараметрыПрописиНаУкраинском);
		ПараметрыПодвал.ИтогоСуммаПрописью = ЧислоПрописью(ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаОбщийИтог.Стоимость),
		                                                   "Л=uk_UA;ДП=Истина;", ПрописьВалюты);
		
	КонецЕсли;
	
	ВыборкаПоСтрокам = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоВВыборке     = ВыборкаПоСтрокам.Количество();
	КоличествоОбработанных = 1;
	// В форме сказано "Кількість найменувань". Будет выводится количество позиций.
	ПараметрыПодвал.ИтогоКоличествоПрописью = ЧислоПрописью(КоличествоВВыборке, 
	                                                        "Л=uk_UA;НП=Ложь;НД=Ложь;", ",,,,,,,,0");
	
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) 
		                                         + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		
		Если КоличествоОбработанных = КоличествоВВыборке Тогда
			// Последняя запись. Ее не следует отрывать от подписей.
			
			МассивТаблиц = Новый Массив(2);
			МассивТаблиц[0] = Область;
			МассивТаблиц[1] = ОбластьПодвал;
			
			Если НЕ ТабДокумент.ПроверитьВывод(МассивТаблиц) Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Область);
        КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
	ОбластьПодвал.Параметры.ОтпускРазрешил = ОтпускРазрешил;
	ОбластьПодвал.Параметры.Сдал = Сдал;
	ОбластьПодвал.Параметры.Принял = Принял;
	ОтвЛица = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Организация, Дата);
	ОбластьПодвал.Параметры.Заполнить(ОтвЛица);
	
	ТабДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ11()

// Функция формирует печатную форму документа
//
Функция ПечатьМШ7(ПечатьПоДаннымУпрУчета = Истина)

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	                       КАК НомерДокумента,
	|	Дата	                       КАК ДатаДокумента,
	|	Организация                    КАК Организация,
	|	Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	Склад                          КАК Склад,
	|	" + ?(ПечатьПоДаннымУпрУчета, "Подразделение", "ПодразделениеОрганизации")+" КАК ПредставлениеПодразделения
	|ИЗ
	|	Документ.ПередачаМатериаловВЭксплуатацию КАК ПередачаМатериаловВЭксплуатацию
	|
	|ГДЕ
	|	ПередачаМатериаловВЭксплуатацию.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура." + ТоварКод + "          КАК НоменклатурныйНомер,
	|	ВЫРАЗИТЬ(Док.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК МатериалНаименование,
	|	Док.ХарактеристикаНоменклатуры             КАК Характеристика,
	|	Док.СерияНоменклатуры                      КАК Серия,
	|	Док.ЕдиницаИзмерения.Код                   КАК ЕдиницаИзмеренияКод,
	|	Док.ЕдиницаИзмерения.Наименование          КАК ЕдиницаИзмеренияНаименование," + ?(Не ПечатьПоДаннымУпрУчета, "
	|	Док.СчетПередачиБУ                         КАК СчетПередачи,", "") + "
	|	Док.Количество                             КАК Количество,
	|	Док.ФизЛицо                                КАК Сотрудник,
	|	Док.ФизЛицо.Код                            КАК ТабельныйНомер,
	|	Док.ДатаДокумента                          КАК ДатаДокумента,
	|	Док.СрокСлужбы                             КАК СрокСлужбы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Номенклатура                           КАК Номенклатура,
	|		Док.ХарактеристикаНоменклатуры             КАК ХарактеристикаНоменклатуры,
	|		Док.СерияНоменклатуры                      КАК СерияНоменклатуры,
	|		Док.ЕдиницаИзмерения                       КАК ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
	|		Док.СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,", "") + "
	|		СУММА(Док.Количество)                      КАК Количество,
	|		МИНИМУМ(Док.НомерСтроки) 		           КАК НомерСтроки,
	|		Док.ФизЛицо                                КАК ФизЛицо,
	|		Док.Ссылка.Дата                            КАК ДатаДокумента,
	|		Док.СрокПолезногоИспользования КАК СрокСлужбы
	|	ИЗ
	|		Документ.ПередачаМатериаловВЭксплуатацию.Материалы КАК Док
	|	ГДЕ
	|		Док.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		Док.Номенклатура,
	|		Док.ХарактеристикаНоменклатуры,
	|		Док.СерияНоменклатуры,
	|		Док.ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
	|		Док.СхемаНазначенияИспользования.СчетПередачиБУ,", "") + "
	|		Док.ФизЛицо,
	|		Док.Ссылка.Дата,
	|		Док.СрокПолезногоИспользования) КАК Док
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР";

	ЗапросПоНоменклатуре = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаМатериаловВЭксплуатацию_МШ7";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("МШ7");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.КодОперации = "Передача в эксплуатацію";	
	
	ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
	
	Если ПечатьПоДаннымУпрУчета Тогда
		
		Область.Параметры.ПредставлениеОрганизации = "Управлінський облік";
		
	Иначе
				
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
		СписокПоказателей = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.ДатаДокумента, СписокПоказателей);
		Область.Параметры.КодПоЕДРПОУ              = СписокПоказателей.КодПоЕДРПОУ;
		Область.Параметры.ПредставлениеОрганизации = Шапка.ОрганизацияНаименованиеПолное;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(Область);

	ВысотаШапки   = ТабДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
	ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("R" + ВысотаШапки);
	ТабДокумент.ОбластьПечати            = ТабДокумент.Область("C2:C" + ШиринаТаблицы);
	
	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоличествоВВыборке     = ВыборкаПоСтрокам.Количество();
	КоличествоОбработанных = 1;
	
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		Область.Параметры.НомерПП              = КоличествоОбработанных;
		
		Если КоличествоОбработанных = КоличествоВВыборке Тогда
			// Последняя запись. Ее не следует отрывать от подписей.
			
			МассивТаблиц = Новый Массив(2);
			МассивТаблиц[0] = Область;
			МассивТаблиц[1] = ОбластьПодвал;
			
			Если НЕ ТабДокумент.ПроверитьВывод(МассивТаблиц) Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Область);
        КоличествоОбработанных = КоличествоОбработанных + 1;

	КонецЦикла;

	// Вывод подвала
	ТабДокумент.Вывести(ОбластьПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьМШ7()

// Функция формирует печатную форму документа
//
Функция ПечатьМШ2(ПечатьПоДаннымУпрУчета = Истина)

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	                       КАК НомерДокумента,
	|	Дата	                       КАК ДатаДокумента,
	|	Организация                    КАК Организация,
	|	Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	Склад                          КАК Склад,
	|	" + ?(ПечатьПоДаннымУпрУчета, "Подразделение", "ПодразделениеОрганизации")+" КАК ПредставлениеПодразделения
	|ИЗ
	|	Документ.ПередачаМатериаловВЭксплуатацию КАК ПередачаМатериаловВЭксплуатацию
	|
	|ГДЕ
	|	ПередачаМатериаловВЭксплуатацию.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура." + ТоварКод + " КАК НоменклатурныйНомер,
	|	ВЫРАЗИТЬ(Док.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК МатериалНаименование,
	|	Док.ХарактеристикаНоменклатуры КАК Характеристика,
	|	Док.СерияНоменклатуры КАК Серия,
	|	Док.Количество КАК Количество,
	|	Док.ФизЛицо КАК Сотрудник,
	|	Док.ФизЛицо.Код КАК ТабельныйНомер,
	|	Док.ДатаДокумента КАК ДатаДокумента,
	|	Док.СрокСлужбы КАК СрокСлужбы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Номенклатура КАК Номенклатура,
	|		Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Док.СерияНоменклатуры КАК СерияНоменклатуры,
	|		СУММА(Док.Количество) КАК Количество,
	|		МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|		Док.ФизЛицо КАК ФизЛицо,
	|		Док.Ссылка.Дата КАК ДатаДокумента,
	|		Док.СрокПолезногоИспользования КАК СрокСлужбы
	|	ИЗ
	|		Документ.ПередачаМатериаловВЭксплуатацию.Материалы КАК Док
	|	ГДЕ
	|		Док.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Док.Номенклатура,
	|		Док.ХарактеристикаНоменклатуры,
	|		Док.СерияНоменклатуры,
	|		Док.ФизЛицо,
	|		Док.Ссылка.Дата,
	|		Док.СрокПолезногоИспользования) КАК Док
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|ИТОГИ ПО
	|	Сотрудник";

	ЗапросПоНоменклатуре = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаМатериаловВЭксплуатацию_МШ2";
	
	// Вывод заголовка
	Макет = ПолучитьМакет("МШ2");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(Шапка);
	
	Если ПечатьПоДаннымУпрУчета Тогда
		
		ОбластьШапка.Параметры.ПредставлениеОрганизации = "Управлінський облік";
		
	Иначе
				
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
		СписокПоказателей = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.ДатаДокумента, СписокПоказателей);
		ОбластьШапка.Параметры.КодПоЕДРПОУ              = СписокПоказателей.КодПоЕДРПОУ;
		ОбластьШапка.Параметры.ПредставлениеОрганизации = Шапка.ОрганизацияНаименованиеПолное;
		
	КонецЕсли;
	
	НеПервый                 = Ложь;
	
	ВыборкаСотрудники = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаСотрудники.Следующий() Цикл
		
		Если НеПервый Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			НеПервый = Истина;
		КонецЕсли;
		
		ВыборкаПоСтрокам = ВыборкаСотрудники.Выбрать();
	
		КоличествоВВыборке     = ВыборкаПоСтрокам.Количество();
		КоличествоОбработанных = 1;
		
		ДанныеСотрудника = ОбщегоНазначения.ДанныеФизЛица(Организация, ВыборкаСотрудники.Сотрудник, Дата);
		
		ОбластьШапка.Параметры.Сотрудник 		= ДанныеСотрудника.Фамилия + " " + ДанныеСотрудника.Имя + " " + ДанныеСотрудника.Отчество;
		ОбластьШапка.Параметры.Должность 		= ДанныеСотрудника.Должность;
		
		ОбластьШапка.Параметры.ТабельныйНомер	= ВыборкаСотрудники.ТабельныйНомер; //ДанныеСотрудника.ТабельныйНомер
	
		ТабДокумент.Вывести(ОбластьШапка);
		ВысотаШапки   = ТабДокумент.ВысотаТаблицы;
		ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
		ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("R" + ВысотаШапки);
		ТабДокумент.ОбластьПечати            = ТабДокумент.Область("C2:C" + ШиринаТаблицы);
			
		Пока ВыборкаПоСтрокам.Следующий() Цикл

			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(ВыборкаПоСтрокам);
			Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
			
			Если КоличествоОбработанных = КоличествоВВыборке Тогда
				// Последняя запись. Ее не следует отрывать от подписей.
				
				МассивТаблиц = Новый Массив(1);
				МассивТаблиц[0] = Область;
				
				Если НЕ ТабДокумент.ПроверитьВывод(МассивТаблиц) Тогда
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(Область);
			КоличествоОбработанных = КоличествоОбработанных + 1;

		КонецЦикла;
			
	КонецЦикла;		

	Возврат ТабДокумент;

КонецФункции // ПечатьМШ2()

// Функция формирует печатную форму документа
//
Функция ПечатьПередачаМатериалов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДокПередачаМатериалов.Ссылка,
	|	ДокПередачаМатериалов.Дата                      КАК ДатаПередачи,
	|	ДокПередачаМатериалов.Организация,
	|	ДокПередачаМатериалов.Организация.Представление КАК ПечОрганизация,
	|	ВЫБОР КОГДА ДокПередачаМатериалов.ОтражатьВУправленческомУчете ТОГДА
	|		ДокПередачаМатериалов.Подразделение
	|	ИНАЧЕ
	|		ДокПередачаМатериалов.ПодразделениеОрганизации
	|	КОНЕЦ КАК Подр,
	|	ВЫБОР КОГДА ДокПередачаМатериалов.ОтражатьВУправленческомУчете ТОГДА
	|		ДокПередачаМатериалов.Подразделение.Представление
	|	ИНАЧЕ
	|		ДокПередачаМатериалов.ПодразделениеОрганизации.Представление
	|	КОНЕЦ КАК ПечПодр,
	|	ДокПередачаМатериалов.Дата,
	|	ДокПередачаМатериалов.Материалы.(
	|		НомерСтроки                    КАК ПечНомер,
	|		Номенклатура                   КАК Товар,
	|		Номенклатура.Артикул           КАК Артикул,
	|		Номенклатура.Код               КАК Код,
	|		Количество,
	|		ЕдиницаИзмерения               КАК ЕдИзм,
	|		ЕдиницаИзмерения.Представление КАК ПечЕдИзм,
	|		ХарактеристикаНоменклатуры     КАК Характеристика,
	|		СерияНоменклатуры              КАК Серия,
	|		ФизЛицо                        КАК Сотрудник,
	|		ФизЛицо.Представление          КАК ПечФИО,
	|		ФизЛицо.Код                    КАК ТабНомер,
	|		СрокПолезногоИспользования КАК СрокЭксплуатации
	|	)
	|ИЗ
	|	Документ.ПередачаМатериаловВЭксплуатацию КАК ДокПередачаМатериалов
	|ГДЕ
	|	ДокПередачаМатериалов.Ссылка = &ТекДок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПечНомер";
			
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "ТекДок", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Шапка = РезультатЗапроса.Выбрать();
	Шапка.Следующий();
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаМатериалов_ПередачаМатериалов";
	
	Макет  = ПолучитьМакет("ПередачаМатериалов");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	// Параметры вывода
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	КолАртикул = ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул, "Артикул",
				 ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код,     "Код", ""));
	ФлагВыводКода = НЕ ПустаяСтрока(КолАртикул);
	ТабЧасть = Шапка.Материалы.Выбрать();
	
	// Вывод заголовка
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,НСтр("ru='Передача материалов в эксплуатацию';uk='Передача матеріалів в експлуатацію'",КодЯзыкаПечать),КодЯзыкаПечать);
	
	Область.Параметры.Подразделение    = Шапка.Подр;
	Область.Параметры.ПечПодразделение = Шапка.ПечПодр;
	Область.Параметры.Организация      = Шапка.Организация;
	Область.Параметры.ПечОрганизация   = Шапка.ПечОрганизация;
	Область.Параметры.ДатаПередачи     = СтрЗаменить( Формат( Шапка.ДатаПередачи, "ДФ=dd.MMM.yyyy"), ".", " ");
		
	ТабДок.Вывести(Область);
	
	// Вывод шапки табличной части
	Если ФлагВыводКода Тогда
		Область = Макет.ПолучитьОбласть("ТабШапка");
		Область.Параметры.ПечАртикул = КолАртикул;
		ТабДок.Вывести(Область);
	Иначе
		Область = Макет.ПолучитьОбласть("ТабШапкаБезАртикула");
		ТабДок.Вывести(Область);
	КонецЕсли;
	

	// Вывод табличной части
	Область = Макет.ПолучитьОбласть("ТабСтрока");
	
	ТабЧасть = Шапка.Материалы.Выбрать();
	СуммаИтого = 0;
	
	Пока ТабЧасть.Следующий() Цикл
		
		Область.Параметры.ПечНомер = ТабЧасть.ПечНомер;
		
		Если ФлагВыводКода Тогда
			Область.Параметры.ПечАртикул = ТабЧасть[КолАртикул];
		КонецЕсли;
		
		Область.Параметры.ПечМатериал  = СокрЛП( ТабЧасть.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий( ТабЧасть);
		Область.Параметры.Материал     = ТабЧасть.Товар;
		Область.Параметры.ПечЕдИзм     = ТабЧасть.ПечЕдИзм;
		Область.Параметры.ПечКол       = ТабЧасть.Количество;
		
		Область.Параметры.ПечФИО       = ТабЧасть.ПечФИО;
		Область.Параметры.Сотрудник    = ТабЧасть.Сотрудник;
		
		Если НЕ ПустаяСтрока(ТабЧасть.ТабНомер) Тогда
		 	Область.Параметры.ПечТабНомер = ТабЧасть.ТабНомер;
		Иначе
			Область.Параметры.ПечТабНомер = "";
		КонецЕсли;
		
		СрокЭксплуатации = ?(ТабЧасть.СрокЭксплуатации = NULL, 0, ТабЧасть.СрокЭксплуатации);
		Область.Параметры.ПечСрокЭкспл     = СрокЭксплуатации;
		Область.Параметры.ПечДатаОкончания = СтрЗаменить( Формат( ДобавитьМесяц(Шапка.Дата, СрокЭксплуатации), "ДФ=dd.MMM.yyyy"), ".", " ");
		
		ТабДок.Вывести(Область);
		
	КонецЦикла;
	
	// Вывод итогов документа
		
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.СтрокаИтог = НСтр("ru='Всего наименований: ';uk='Всього найменувань: '",КодЯзыкаПечать) + ТабЧасть.Количество();
	ТабДок.Вывести( Область);
	
	Возврат ТабДок;
	
КонецФункции // ПечатьПередачаМатериалов()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "МШ7упр" Тогда
		
		ТабДокумент = ПечатьМШ7();
		
	ИначеЕсли ИмяМакета = "МШ7бух" Тогда
		
		ТабДокумент = ПечатьМШ7(Ложь);
		
	ИначеЕсли ИмяМакета = "М11упр" Тогда
		
		ТабДокумент = ПечатьМ11();
		
	ИначеЕсли ИмяМакета = "М11бух" Тогда
		
		ТабДокумент = ПечатьМ11(Ложь);
		
	ИначеЕсли ИмяМакета = "МШ2упр" Тогда
		
		ТабДокумент = ПечатьМШ2();
		
	ИначеЕсли ИмяМакета = "МШ2бух" Тогда
		
		ТабДокумент = ПечатьМШ2(Ложь);
		
	ИначеЕсли ИмяМакета = "ПередачаМатериалов" Тогда
		ТабДокумент = ПечатьПередачаМатериалов();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,
	ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка));
	
КонецПроцедуры // Печать()


// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	Если ОтражатьВУправленческомУчете Тогда
		
		СтруктураМакетов.Вставить("МШ2упр", "Ведомость МШ-2 (упр. учет)");
		СтруктураМакетов.Вставить("МШ7упр", "Ведомость МШ-7 (упр. учет)");
		СтруктураМакетов.Вставить("М11упр", "Накладная M-11 (упр. учет)");
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураМакетов.Вставить("МШ2бух", "Ведомость МШ-2 (бух. учет)");
		СтруктураМакетов.Вставить("МШ7бух", "Ведомость МШ-7 (бух. учет)");
		СтруктураМакетов.Вставить("М11бух", "Накладная M-11 (бух. учет)");
		
	КонецЕсли;
    	
	СтруктураМакетов.Вставить("ПередачаМатериалов", "Передача материалов в эксплуатацию");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

#Если Клиент Тогда
Процедура ЗаполнитьНалоговыеНазначенияЗапасов() Экспорт 
	
	НалоговыйУчет.ЗаполнитьНалоговыеНазначенияЗапасов(ЭтотОбъект, "Материалы", Ложь);

КонецПроцедуры // ЗаполнитьНалоговыеНазначенияЗапасов
#КонецЕсли


// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение, Материалы.ВнутреннийЗаказ";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации";
	
	мСтрокаРеквизитыНалУчета = "";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()                                       

// Производит заполнение и установку необходимых полей при изменении схемы назначения использования
// в табличной части.
//
//
Процедура ПриИзмененииМатериалыСхемыНазначенияИспользования(СтрокаТабличнойЧасти) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СхемаНазначенияИспользования) Тогда
		
		ЗаполнитьСчетУчетаБУПоНазначениюИспользования(СтрокаТабличнойЧасти);
		

		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииМатериалыСхемыНазначенияИспользования()



// Процедура заполняет счета  учета по бухгалтерскому учету 
// по назаначению использования 
//
Процедура ЗаполнитьСчетУчетаБУПоНазначениюИспользования(СтрокаТЧ) Экспорт

	Если ЗначениеЗаполнено(СтрокаТЧ.СхемаНазначенияИспользования) Тогда
		
		Если СтрокаТЧ.СхемаНазначенияИспользования.ВидМатериала 
			 = Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда
			 
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.МалоценныеИБыстроизнашивающиесяПредметыНаСкладе;
			
		Иначе
			
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеДругихНеоборотныхМатериальныхАктивов;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетУчетаБУПоНазначениюИспользования()

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	
    СчетаУчета = СпецодеждаИСпецоснастка.ПолучитьСчетаУчетаМалоценныхАктивовИзРегистраСведений(Организация, СтрокаТЧ.Номенклатура);
	СтрокаТЧ.СпособОтраженияРасходов 		= СчетаУчета.СпособОтраженияРасходов;
	СтрокаТЧ.СхемаНазначенияИспользования 	= СчетаУчета.СхемаНазначенияИспользования;
	СтрокаТЧ.СрокПолезногоИспользования 	= СчетаУчета.СрокПолезногоИспользования;
	
 	ПриИзмененииМатериалыСхемыНазначенияИспользования(СтрокаТЧ);
	
	Если ЗаполнятьБУ = Истина Тогда
		
		ЗаполнитьСчетУчетаБУПоНазначениюИспользования(СтрокаТЧ);
		
	КонецЕсли;


	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()


// Процедура выполняет заполнение табличной части "Товары" по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - ссылка на документ основание
//
Процедура ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг(ДокументОснование)

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияМест,
	|	Товары.Коэффициент,
	|	Товары.Количество,
	|	Товары.КоличествоМест,
	|	Товары.ХарактеристикаНоменклатуры,
	|	Товары.СерияНоменклатуры,
	|	Товары.Склад,
	|	Товары.СчетУчетаБУ,
	|	Товары.НалоговоеНазначение,
	|	Товары.НомерСтроки КАК НомерСтрокиТЧ,
	|	0 КАК ПорядокТЧ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИЛИ Товары.Склад = &Склад)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияМест,
	|	Товары.Коэффициент,
	|	Товары.Количество,
	|	Товары.КоличествоМест,
	|	Товары.ХарактеристикаНоменклатуры,
	|	Товары.СерияНоменклатуры,
	|	Товары.Склад,
	|	Товары.СчетУчетаБУ,
	|	Товары.НалоговоеНазначение,
	|	Товары.НомерСтроки,
	|	1
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИЛИ Товары.Склад = &Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокТЧ,
	|	НомерСтрокиТЧ";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезЗапроса = Запрос.Выполнить();

	Выборка = РезЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

		НоваяСтрока.Качество = Справочники.Качество.Новый;
		
	    СчетаУчета = СпецодеждаИСпецоснастка.ПолучитьСчетаУчетаМалоценныхАктивовИзРегистраСведений(Организация, НоваяСтрока.Номенклатура);
		НоваяСтрока.СпособОтраженияРасходов 		= СчетаУчета.СпособОтраженияРасходов;
		НоваяСтрока.СхемаНазначенияИспользования 	= СчетаУчета.СхемаНазначенияИспользования;
		НоваяСтрока.СрокПолезногоИспользования 		= СчетаУчета.СрокПолезногоИспользования;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда
		
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
 	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Склад";
	ДополнитьРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Подразделение";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Организация, ПодразделениеОрганизации";
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиРегл(Реквизиты)

	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;	
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "СчетУчетаБУ, НалоговоеНазначение";
			  
КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция проверяет правильность заполнения документа
// Возврат - структура с данными шапки документа
//
Функция ПроверкаРеквизитов(Отказ, Заголовок) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	РеквизитыТЧ = "Номенклатура, Количество, ЕдиницаИзмерения, ФизЛицо, СхемаНазначенияИспользования, СпособОтраженияРасходов, СрокПолезногоИспользования, Качество";
	ДополнитьРеквизитыТабличнойЧастиРегл(РеквизитыТЧ);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧ, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "Материалы");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТЧ), Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // ПроверкаРеквизитов()


// Функция формирует запрос по табличной части "Материалы" документа.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//
// Возвращаемое значение:
//	Запрос - Запрос по табличной части документа
//
Функция СформироватьЗапросПоТабличнойЧастиМатериалы(СтруктураШапкиДокумента)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	Док.НомерСтроки,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Номенклатура.Услуга КАК Услуга,
	|	Док.Номенклатура.Набор КАК Набор,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.ФизЛицо,
	|	Док.СхемаНазначенияИспользования,
	|	Док.СхемаНазначенияИспользования.ВидМатериала КАК ВидМатериала,
	|	Док.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	Док.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	Док.Качество,
	|	Док.ВнутреннийЗаказ,
	|	Док.ВнутреннийЗаказ.ВидЗаказа КАК ВидЗаказа,
	|	Док.ВнутреннийЗаказ.Заказчик КАК Заказчик,
	|	Док.СчетУчетаБУ,
	|	Док.СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,
	|	Док.СхемаНазначенияИспользования.СчетАмортизацииБУ КАК СчетАмортизацииБУ,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Док.Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество
	|ИЗ 
	|	Документ.ПередачаМатериаловВЭксплуатацию.Материалы КАК Док 
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО 
	|	Док.НомерСтроки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументСсылка", СтруктураШапкиДокумента.Ссылка);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоТабличнойЧастиМатериалы()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалов(СтруктураШапкиДокумента, Отказ, Заголовок)

	ЗапросПоМатериалам = СформироватьЗапросПоТабличнойЧастиМатериалы(СтруктураШапкиДокумента);
	РезультатЗапросаПоМатериалам = ЗапросПоМатериалам.Выполнить();
 	ТаблицаМатериалов = РезультатЗапросаПоМатериалам.Выгрузить();

	
	Для каждого СтрокаТЧ Из ТаблицаМатериалов Цикл
	
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                                """ табличной части ""Материалы"": ";
										
		
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидМатериала) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "В назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользования 
								 + "> не выбран ""Вид материала"".",
								 Отказ, Заголовок);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетПередачиБУ) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "В назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользования 
								 + "> не выбран ""Счет передачи"".",
								 Отказ, Заголовок);
				
			КонецЕсли;
			
			Если (СтрокаТЧ.ВидМатериала <> Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет)
				  И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетАмортизацииБУ) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "В назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользования 
								 + "> не выбран ""Счет амортизации"".",
								 Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуМатериалов()

Процедура ПроверитьЗаполнениеТабЧастиМатериалы( СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Для Каждого СтрокаМат Из ТаблицаПоМатериалам Цикл
		Если ЗначениеЗаполнено(СтрокаМат.ВнутреннийЗаказ) Тогда
			Если СтрокаМат.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение Тогда
				Если Подразделение <> СтрокаМат.Заказчик Тогда
					ОбщегоНазначения.СообщитьОбОшибке( "Подразделение внутреннего заказа не совпадает с подразделением текущего документа (строка № " + СтрокаМат.НомерСтроки + ")", Отказ, Заголовок);
				КонецЕсли;
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке( "Надо использовать внутренний заказ от подразделения (строка № " + СтрокаМат.НомерСтроки + ")", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабЧастиМатериалы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	Если ТаблицаПоМатериалам.Количество() > 0 тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
 		ЭтотОбъект,
		Дата,
		СтруктураШапкиДокумента.Организация,
		ОтражатьВУправленческомУчете,
		ОтражатьВБухгалтерскомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);		
	КонецЕсли;
	
	
	// Необходимо записать, для процедуры погашения партий
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Контроль остатков товара
	Если Материалы.Количество() <> 0 Тогда
		ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоМатериалам", ТаблицаПоМатериалам);
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыНаСкладах, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Склад", СтруктураШапкиДокумента.Склад);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		// ТОВАРЫ ПО РЕГИСТРУ МатериалыВПроизводстве.
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.МатериалыВЭксплуатации, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Подразделение", СтруктураШапкиДокумента.Подразделение);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "КодОперации", Перечисления.КодыОперацийМатериалыВЭксплуатации.СписаниеПартийВЭксплуатацию);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.МатериалыВЭксплуатации, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		// Сформируем приход в партии материалов в эксплуатации
		Если НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументов
		   И Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
		Тогда
		
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ПартииМатериаловВЭксплуатации, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Подразделение",    СтруктураШапкиДокумента.Подразделение);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Стоимость",        0);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "СписаниеПартий",   Истина);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.ПартииМатериаловВЭксплуатации, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Движение по внутренним заказам
	ТаблицаПоЗаказам = ТаблицаПоМатериалам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказам.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказам.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ)
			ИЛИ СтрокаТаблицы.ВнутреннийЗаказ.Заказчик <> СтруктураШапкиДокумента.Подразделение Тогда
			 ТаблицаПоЗаказам.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяТабЧасти",       "Материалы");
	ДопПараметры.Вставить("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить("РежимПроведения",   РежимПроведения);
	ДопПараметры.Вставить("ИмяРеквизитаЗаказ", "ВнутреннийЗаказ");
	ДопПараметры.Вставить("ЗаказВШапке",       Ложь);
	
	УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТаблицаПоЗаказам, ДопПараметры, Отказ, Заголовок);
	
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирование движений по регистру "Товары организаций".
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)

	// Проверка остаков
	Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	Если НЕ Отказ Тогда
	
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоМатериалам", ТаблицаПоМатериалам);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
		
		СкладМат = ?( СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, СтруктураШапкиДокумента.Склад, Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Склад",       СкладМат);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Организация", СтруктураШапкиДокумента.Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// Формирование движений по регистру "Товары организаций (регл)".
Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)

	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	Если НЕ Отказ Тогда
	
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизацийРегл.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоМатериалам", ТаблицаПоМатериалам);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизацийРегл, СтруктТаблицДокумента);
		
		СкладМат = ?(ВестиПартионныйУчетПоСкладамРегл, СтруктураШапкиДокумента.Склад, Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       СкладМат);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", СтруктураШапкиДокумента.Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат
		
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение               , "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный   , "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция   , "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование, "ДопустимыйСтатус3");
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		  
		Возврат
		
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация                , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации   , "ПодразделениеОрганизации");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		
		Если СтрокаТЧ.ВидМатериала <> Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда
			Строка.КорСчетБУ      = СтрокаТЧ.СчетПередачиБУ;
		Иначе
			Строка.КорСчетБУ      = СтрокаТЧ.СчетУчетаБУ;
		КонецЕсли;
		Строка.КорСубконтоБУ1 = СтрокаТЧ.Номенклатура;
		Строка.КорСубконтоБУ2 = СтруктураШапкиДокумента.Склад;
		Строка.КорСубконтоБУ3 = СтрокаТЧ.ФизЛицо;
		
		Строка.НалоговоеНазначениеПоФакту  = СтрокаТЧ.НалоговоеНазначение; 
		Строка.НалоговоеНазначениеНовое    = СтрокаТЧ.НалоговоеНазначение; 
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл()

// Формирование движений по регистру "Списанные товары".
//
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.СписанныеТовары, СтруктТаблицДокумента);
			
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Склад",            Склад);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Регистратор",      Ссылка);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Период",           Дата);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Активность",       Истина);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "КодОперацииПартииТоваров", Перечисления.КодыОперацийПартииТоваров.ПередачаМатериаловВЭксплуатацию);
			
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], СтруктураШапкиДокумента, ТаблицаПоТоварам);
			
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.СписанныеТовары, Неопределено, ТаблицыДанныхДокумента, Дата);
	
	Инд = 0;
	Для каждого Строка Из Движения.СписанныеТовары Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ПроверкаРеквизитов(Отказ, Заголовок);
	
	// первый этап проверки закончен
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Второй этап проверки закончен
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "СписыватьПартииПриПроведенииДокументов", "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиПартионныйУчетПоСкладам",           "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",       		"ВидСклада",                              "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	

	ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьЗаполнениеТабЧастиМатериалы( СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
    //Заполним счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Материалы", ТаблицаПоМатериалам, СтруктураШапкиДокумента);
	
	
	//Проверим счета учета
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Материалы", ТаблицаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам));
	
КонецПроцедуры	// ОбработкаПроведения()

// Заполнение на основании ПоступлениеТоваровУслуг, реквизиты шапки, упр.
//
Процедура ОбработкаЗаполненияПоПоступлениюТоваровУслугШапкаУпр(Основание)
	
	Подразделение = Основание.Подразделение;
	
КонецПроцедуры // ОбработкаЗаполненияПоПоступлениюТоваровУслугШапкаУпр()

// Заполнение на основании ПоступлениеТоваровУслуг, реквизиты ТЧ, регл.
//
Процедура ОбработкаЗаполненияПоПоступлениюТоваровУслугТЧРегл(НоваяСтрока, ТекСтрокаТовары)
	
	НоваяСтрока.СчетУчетаБУ = ТекСтрокаТовары.СчетУчетаБУ;
	
КонецПроцедуры // ОбработкаЗаполненияПоПоступлениюТоваровУслугТЧРегл()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполнение шапки
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Склад = Основание.СкладОрдер;
		
		Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		КонецЕсли;
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		#Если КЛИЕНТ Тогда
			
		// Выбор склада
		УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
		СкладВТабЧасти  = УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления
					  ИЛИ УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации;
					  
		Если СкладВТабЧасти Тогда
		
			СтруктТабЧастей = Новый Структура;
			СтруктТабЧастей.Вставить("Товары", "Склад");
			СтруктТабЧастей.Вставить("Оборудование", "Склад");
			
			СтруктПараметры = Новый Структура;
			СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
			СтруктПараметры.Вставить("ИмяСкладаВШапке", "СкладОрдер");
			
			Склад = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(Основание, СтруктПараметры);
			
		Иначе
			
			Склад = Основание.СкладОрдер;
			
		КонецЕсли;
		#КонецЕсли
		
		ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг(Основание);
		

		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	
	Если НЕ ОтражатьВУправленческомУчете Тогда
		Для Каждого СтрокаМат Из Материалы Цикл
			Если СтрокаМат.ВнутреннийЗаказ <> Неопределено Тогда
				СтрокаМат.ВнутреннийЗаказ = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Материалы  // ТабличнаяЧастьТовары
		);
		
	КонецЕсли; 
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
