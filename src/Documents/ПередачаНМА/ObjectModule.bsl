Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА



///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

#Если Клиент Тогда

// Функция формирует табличный документ с типовой печатной формой НА-3
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНА3()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаДок",     Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокНМА",   НематериальныеАктивы.ВыгрузитьКолонку("НематериальныйАктив"));                    
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаНМА.Ссылка.Организация                          КАК Организация,
	|	ПередачаНМА.Ссылка.Организация.НаименованиеПолное       КАК НаименованиеПолноеОрганизации,
	|	ПередачаНМА.Ссылка.Дата                                 КАК ДатаДок,
	|	ПередачаНМА.Ссылка.Номер                                КАК НомерДок,
	|	ПередачаНМА.НематериальныйАктив.НаименованиеПолное      КАК НаименованиеПолное,
	|	ПередачаНМА.НематериальныйАктив.Код                     КАК ИнвентарныйНомер,     
	|	ПередачаНМА.НематериальныйАктив.ПрочиеСведения          КАК ПрочиеСведения,                 
	|	ПередачаНМА.СхемаРеализации.СчетСебестоимости           КАК СчетСписанияБУ,
	|	ПередачаНМА.СтоимостьБУ                                 КАК ПервоначальнаяСтоимость,
	|	ПередачаНМА.СтоимостьБУ - ПередачаНМА.АмортизацияБУ 
	|		- ПередачаНМА.АмортизацияЗаМесяцБУ                  КАК ОстаточнаяСтоимость,
	|	ПервоначальныеСведенияНМА_БУ.СрокПолезногоИспользования КАК СрокИспользования,
	|	ПервоначальныеСведенияНМА_БУ.ЛиквидационнаяСтоимость    КАК ЛиквидационнаяСтоимость,
	|	СчетаУчетаНМА_БУ.СчетУчета                              КАК СчетУчетаБУ
	|ИЗ
	|	Документ.ПередачаНМА.НематериальныеАктивы КАК ПередачаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ДатаДок,
	|			Организация = &Организация
	|		    И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМА_БУ
	|		ПО ПередачаНМА.Ссылка.Организация = ПервоначальныеСведенияНМА_БУ.Организация
	|			И ПередачаНМА.НематериальныйАктив = ПервоначальныеСведенияНМА_БУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&ДатаДок,
	|			Организация = &Организация
	|		    И НематериальныйАктив В (&СписокНМА)) КАК СчетаУчетаНМА_БУ
	|		ПО ПередачаНМА.Ссылка.Организация = СчетаУчетаНМА_БУ.Организация
	|			И ПередачаНМА.НематериальныйАктив = СчетаУчетаНМА_БУ.НематериальныйАктив
	|ГДЕ
	|	ПередачаНМА.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаНМА_НА3";
	Макет         = ПолучитьОбщийМакет("НА3");

	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
	СписокПоказателей.Добавить("", "ФИОРук");
	СписокПоказателей.Добавить("", "ФИОБух");
	СписокПоказателей = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, Дата, СписокПоказателей);
	СписокПоказателей.ФИОРук = ОбщегоНазначения.ФамилияИнициалыФизЛица(СписокПоказателей.ФИОРук);
	СписокПоказателей.ФИОБух = ОбщегоНазначения.ФамилияИнициалыФизЛица(СписокПоказателей.ФИОБух);
	НеПервый                 = Ложь;
	
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	Пока Выборка.Следующий() Цикл
		
		Если НеПервый Тогда
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		Иначе
			
			НеПервый = Истина;
			
		КонецЕсли;
	
		ОбластьМакета = Макет.ПолучитьОбласть("НА3");
		Параметры     = ОбластьМакета.Параметры;
		Параметры.Заполнить(Выборка);
		Параметры.Заполнить(СписокПоказателей);
		Параметры.Заполнить(ВыборкаПоКомиссии);
		ТабДокумент.Вывести(ОбластьМакета);
	
	КонецЦикла;	
	
	ТабДокумент.ОбластьПечати = ТабДокумент.Область( , 2, , ТабДокумент.ШиринаТаблицы);

	Возврат ТабДокумент;

КонецФункции // ПечатьНА3()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьНакладной()
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	//Сделка,
	|	Контрагент КАК Покупатель,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ПередачаНМА КАК ПередачаНМА
	|
	|ГДЕ
	|	ПередачаНМА.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Сумма,
	|	СуммаНДС
	|ИЗ 
	|	(ВЫБРАТЬ
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		НематериальныйАктив  КАК Номенклатура,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.ПередачаНМА.НематериальныеАктивы КАК ПередачаНМА
	|	ГДЕ
	|		ПередачаНМА.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		НематериальныйАктив,
	|		Сумма,
	|		СтавкаНДС
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаНМА_Накладная";
	
	Макет = ПолучитьМакет("Накладная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);

	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар);
		ОбластьДанных.Параметры.Цена	 			= ВыборкаСтрокТовары.Сумма;		
		ОбластьДанных.Параметры.Количество	 		= 1;		
		ОбластьДанных.Параметры.ЕдиницаИзмерения 	= НСтр("ru='шт';uk='шт.'");		
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента) + ".";
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 
	
	// Вывести подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
		
КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "НА3" тогда
		
		ТабДокумент = ПечатьНА3();
		
	ИначеЕсли ИмяМакета = "Накладная" тогда
		
		ТабДокумент = ПечатьНакладной();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Передача НМА"));

КонецПроцедуры // Печать


// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("НА3", 		"Форма НА-3");
	СтруктураМакетов.Вставить("Накладная", 	"Расходная накладная");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
	
	Возврат;
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"         , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСВал"    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСВал"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Заполним значения в добавленых колонках 
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
			
		Иначе
			
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
												СтруктураШапкиДокумента.УчитыватьНДС,
												Истина,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругления);
												
		КонецЕсли;
		
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаСНДСВал = СтрокаТаблицы.СуммаСНДСВал;
		
		// Определим значение НДС в проводках
		Если СтруктураШапкиДокумента.УчитыватьНДС = Ложь Тогда
			
			// в документе НДС не указывается
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
			
		Иначе
			
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
		
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал = СтрокаТаблицы.ПроводкиСуммаСНДСВал - СтрокаТаблицы.ПроводкиСуммаНДСВал;
													
	КонецЦикла;
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТоваров, СтруктураШапкиДокумента);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
     
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;
	

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	Если НЕ УчитыватьНДС Тогда
		
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
		
	КонецЕсли;
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений = ТаблицаПоТоварам.Скопировать();
	ТаблицаДвижений.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	
	ТаблицаДвижений.Колонки.Добавить("Контрагент");
	ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
	ТаблицаДвижений.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,                          "Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,                  "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора, "ВидДоговораКонтрагента");
	
	
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "СчетОплаты");
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоАвансам    , "СчетАванса");
	
	Возврат ТаблицаДвижений;
	
КонецФункции

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь вызовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
 	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)

	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)
							  
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	                          ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
							  
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
		                          ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
								  
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);								  
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	Если (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный) Тогда
		Если СуммаДокумента <> 0 Тогда

			// По регистру ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Организация 			= Организация;
			СтрокаДвижений.Контрагент		 	= Контрагент;
			СтрокаДвижений.ДоговорКонтрагента 	= ДоговорКонтрагента;
			СтрокаДвижений.Сделка 				= Ссылка;
			СтрокаДвижений.СуммаВзаиморасчетов 	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
														СтруктураШапкиДокумента.КурсДокумента, 
														СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
														СтруктураШапкиДокумента.КратностьДокумента, 
														СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

		 
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат 		= Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.Организация 			= Организация;
			СтрокаДвижений.Контрагент		 	= Контрагент;
			СтрокаДвижений.ДоговорКонтрагента 	= ДоговорКонтрагента;
			СтрокаДвижений.Сделка                = Ссылка;
			
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, 
													 ВалютаДокумента,
												   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												   СтруктураШапкиДокумента.КурсДокумента, 
												   КурсВзаиморасчетов,
												   СтруктураШапкиДокумента.КратностьДокумента, 
												   КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
												   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												   СтруктураШапкиДокумента.КурсДокумента, 
												   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												   СтруктураШапкиДокумента.КратностьДокумента, 
												   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;
			
			
			Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
				
				НаборДвижений = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов;
				
				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
				СтрокаДвижений.ДокументРасчетовСКонтрагентом = Ссылка;
				СтрокаДвижений.Организация 			 = Организация;
				СтрокаДвижений.Контрагент 			 = Контрагент;
				СтрокаДвижений.ДоговорКонтрагента    = ДоговорКонтрагента;
				СтрокаДвижений.Сделка                = Неопределено;
				СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
				                                                                  СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				                                                                  СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
				                                                                  СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
				
				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
				Если Не Отказ Тогда
					Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ВыполнитьПриход();
				КонецЕсли;
			КонецЕсли;	
				
		КонецЕсли;
		
	КонецЕсли;	
	
	
	////////////////////////////////////////////////////
	// Движения по регистрам подсистемы НематериальныеАктивы
	
	СостояниеНМА = Движения.СостоянияНМА;

	АмортизацияНМА = Движения.СтоимостьНМА;
	ТаблицаДвиженийАмортизация = АмортизацияНМА.Выгрузить();
	ТаблицаДвиженийАмортизация .Очистить();
	
	// Подготовим таблицу с данными по амортизации для списания амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", 
									Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", 
									Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТабАмортизации.Колонки.Добавить("Амортизация", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		
	Для Каждого СтрокаНМА Из ТаблицаПоТоварам Цикл
			
		Если СтрокаНМА.АмортизацияЗаМесяцУУ > 0 Тогда
			
			ТекМестонахождение = Неопределено;
			Если ТаблицаМестонахождений <> Неопределено Тогда
				
				//Затраты списываются по способу отражения расходов по амортзации
				ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаНМА.НематериальныйАктив,"НМА_УУ");
				ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_УУ);
														  
			КонецЕсли;
			
			НоваяСтрока = ТабАмортизации.Добавить();
				
			НоваяСтрока.Амортизация            = СтрокаНМА.АмортизацияЗаМесяцУУ;
			НоваяСтрока.ОбъектУчета            = СтрокаНМА.НематериальныйАктив;
			ТекНаправление                     = ТаблицаНаправлений.Найти(СтрокаНМА.НематериальныйАктив,"НМА_УУ");
			НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_УУ);
			НоваяСтрока.Местонахождение 		= ТекМестонахождение;
			
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			Движение.НематериальныйАктив       = СтрокаНМА.НематериальныйАктив;
			Движение.Амортизация               = СтрокаНМА.АмортизацияЗаМесяцУУ;
			Движение.Стоимость                 = 0;
			
		КонецЕсли;
			
	КонецЦикла;

	АмортизацияНМА.мПериод          = Дата;
	АмортизацияНМА.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьНМА.ВыполнитьПриход();
	
	УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);
	
	
	АмортизацияНМА = Движения.СтоимостьНМА;
	ТаблицаДвиженийАмортизация = АмортизацияНМА.Выгрузить();
	ТаблицаДвиженийАмортизация .Очистить();
	
	// Создание движений документа по БУ	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		ТекНМА = СтрокаТЧ.НематериальныйАктив;

		// Движения по регистру СостоянияНМА
		Движение = СостояниеНМА.Добавить();
		Движение.Период               = Дата;
		Движение.НематериальныйАктив  = ТекНМА;
		Движение.Состояние            = Перечисления.ВидыСостоянийНМА.Списан;
		
		// Движения по регистру СтоимостьОС
		Движение = ТаблицаДвиженийАмортизация.Добавить();
		Движение.НематериальныйАктив     = ТекНМА;
		Движение.Амортизация             = СтрокаТЧ.АмортизацияУУ + СтрокаТЧ.АмортизацияЗаМесяцУУ;
		Движение.Стоимость               = СтрокаТЧ.СтоимостьУУ;// - СтрокаТЧ.АмортизацияУУ - СтрокаТЧ.АмортизацияЗаМесяцУУ;
		
	КонецЦикла;	
	
	АмортизацияНМА.мПериод          = Дата;
	АмортизацияНМА.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьНМА.ВыполнитьРасход();
	
	//УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийНМАУпр(Дата, Движения.СостоянияНМА, Отказ, Заголовок);
	
КонецПроцедуры	

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)
 
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
								  
		Возврат;
		
	КонецЕсли; 
	
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	// Проводки по системе взаиморасчетов
	ПроводкиБУ = Движения.Хозрасчетный;

	ДатаДока   = Дата;
	
	//////////////////////////////////////////////////////////////////////////////
	// Взаиморасчеты с покупателем
	
	// Проводки по реализации НМА
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
	 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
	 
		ТабПродажи = ТаблицаПоТоварам.Скопировать();
		ТабПродажи.Свернуть("СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НалоговоеНазначениеДоходовИЗатрат",
		                    "ПроводкиСуммаСНДСРегл, ПроводкиСуммаСНДСВал, ОстСтоимостьНУ, ПроводкиСуммаБезНДСРегл");
							
		Для каждого СтрокаТаблицы Из ТабПродажи Цикл
			
			СуммаПроводки =  СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			
			Если СуммаПроводки <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период          = Дата;
				Проводка.Активность      = Истина;
				Проводка.Организация     = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма           = СуммаПроводки;
				Проводка.Содержание      = "Реализация НМА";
				Проводка.НомерЖурнала    = "НА";
				
				Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
				
				Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				
				СуммаНУДоход = Макс(СтрокаТаблицы.ПроводкиСуммаБезНДСРегл - СтрокаТаблицы.ОстСтоимостьНУ, 0);
				СуммаНУДоходСНДС = Макс(СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ОстСтоимостьНУ, 0);
				
				// если доход
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СуммаНУДоход > 0 Тогда
					
					Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУКт 				= СуммаНУДоходСНДС;
					
				КонецЕсли;				
			КонецЕсли;
		
		КонецЦикла;
 		
	КонецЕсли;
	
 	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	
	// Проводки по регл. взаиморасчетам
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок);
	
	Если СтруктураПараметровЗачетАванса <> Ложь тогда
		
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации, Отказ);
		
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
			
		КонецЕсли;
		
	КонецЕсли;

	//Учет курсовых разниц
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
		
		СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок);
		ПроводкиБУ.Записать(Ложь);
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР,ПроводкиБУ,мВалютаРегламентированногоУчета,Истина);
		ПроводкиБУ.Записать(Ложь);
		
	КонецЕсли; // Учет курсовых разниц
	
	//////////////////////////////////////////////////////////////////////////////
	// Движения по регистрам учета НМА и формирование проводок по начислению
	// амортизации и списанию стоимости
	
	//Получение данных о видах налоговой деятельности и счетам учета НМА
	УправлениеВнеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбНМАБухНалогРегл(ДатаДока, ТекОрганизация, ТаблицаПоТоварам,
	                                                   СтруктураШапкиДокумента,
		                                               Отказ, Заголовок);
															
	Если Отказ Тогда

		Возврат
		
	КонецЕсли;
															
	//Заполнение переменных
	ВидНалоговойДеятельностиНеОблагаемая = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// если ранее подготовка к передачи не была проведена
		// начисленную амортизацию за месяц спишем на затраты
		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат
		АмортизацияНМА              = Движения.СтоимостьНМАБухгалтерскийУчет;
		ТаблицаДвиженийАмортизация = АмортизацияНМА.Выгрузить();
		ТаблицаДвиженийАмортизация .Очистить();
		
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",           	Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
		ТабАмортизации.Колонки.Добавить("Амортизация",           	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("АмортизацияНУ", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  	Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("НалоговоеНазначение", 		Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", 			 	Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		
		Для каждого СтрокаНМА из ТаблицаПоТоварам Цикл
			
			Если СтрокаНМА.АмортизацияЗаМесяцБУ > 0 ИЛИ СтрокаНМА.АмортизацияЗаМесяцНУ > 0  Тогда
				
				ТекМестонахождение = Неопределено;
				Если ТаблицаМестонахождений <> Неопределено Тогда
					
					//Затраты списываются по способу отражения расходов по амортзации
					ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаНМА.НематериальныйАктив,"НМА_БУ");
					ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_БУ);
					                                          
				КонецЕсли;
				
				НоваяСтрока = ТабАмортизации.Добавить();
				НоваяСтрока.Амортизация 	= СтрокаНМА.АмортизацияЗаМесяцБУ;
				НоваяСтрока.АмортизацияНУ 	= СтрокаНМА.АмортизацияЗаМесяцНУ;
				НоваяСтрока.ОбъектУчета = СтрокаНМА.НематериальныйАктив;
				НоваяСтрока.ИмяСубконто = "НематериальныеАктивы";
				НоваяСтрока.НалоговоеНазначение	= СтрокаНМА.НалоговоеНазначение_НМА;
				
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаНМА.НематериальныйАктив,"НМА_БУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_БУ);
				НоваяСтрока.СчетАмортизации        = СтрокаНМА.СчетНачисленияАмортизацииБУ;
				НоваяСтрока.Местонахождение 		= ТекМестонахождение;
				
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.НематериальныйАктив   = СтрокаНМА.НематериальныйАктив;
				Движение.Организация           = ТекОрганизация;
				Движение.Амортизация           = СтрокаНМА.АмортизацияЗаМесяцБУ;
				Движение.АмортизацияНУ         = СтрокаНМА.АмортизацияЗаМесяцНУ;
				Движение.Стоимость             = 0;
				Движение.СтоимостьНУ           = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//вызов процедуры списания амортизации по направлениям
		УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "НА");
		
		АмортизацияНМА.мПериод          = Дата;
		АмортизацияНМА.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьНМАБухгалтерскийУчет.ВыполнитьПриход();

		СостояниеНМА           = Движения.СостоянияНМАОрганизаций;
		АмортизацияНМА         = Движения.СтоимостьНМАБухгалтерскийУчет;

		ТаблицаДвиженийАмортизация = АмортизацияНМА.Выгрузить();
		ТаблицаДвиженийАмортизация .Очистить();

		Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

			ТекНМА                       = СтрокаТЧ.НематериальныйАктив;

			// Движения по регистру СостоянияНМАОрганизаций
			Движение = СостояниеНМА.Добавить();
			Движение.Период               = Дата;
			Движение.НематериальныйАктив  = ТекНМА;
			Движение.Организация          = ТекОрганизация;
			Движение.Состояние            = Перечисления.ВидыСостоянийНМА.Списан;

			// Движения по регистру СтоимостьНМАБухгалтерскийУчет
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			Движение.НематериальныйАктив   = ТекНМА;
			Движение.Организация           = ТекОрганизация;
			Движение.Амортизация           = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
			Движение.Стоимость             = СтрокаТЧ.СтоимостьБУ;
			Движение.АмортизацияНУ         = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
			Движение.СтоимостьНУ           = НалоговыйУчет.ОпределитьСтоимостьНУ(СтрокаТЧ.НалоговоеНазначение_НМА,СтрокаТЧ.СтоимостьНУ_НМА);
			
			СчетУчетаСтоимости   = СтрокаТЧ.СчетУчетаБУ;
			СчетУчетаАмортизации = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			
			
			// списание амортизации Д СчетУчетаАмортизации К СчетУчетаСтоимости
			СуммаПроводки 	= СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
			СуммаПроводкиНУ = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
			
			Если СуммаПроводки <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = Дата;
				Проводка.Активность  = Истина;
				Проводка.Организация = ТекОрганизация;
				Проводка.Содержание  = "Списана амортизация";
				Проводка.НомерЖурнала = "НА";
				Проводка.Сумма       = СуммаПроводки;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_НМА;
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					
				КонецЕсли;
				
				Проводка.СчетДт = СчетУчетаАмортизации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_НМА;
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					
				КонецЕсли;
				
				Проводка.СчетКт = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
				
			КонецЕсли;
			
			
			// списание остаточной стоимости Д СчетЗатрат К СчетУчетаСтоимости
			СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
			
			Если СуммаПроводки <> 0 Тогда

				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период      = Дата;
				Проводка.Организация = ТекОрганизация;
				Проводка.Содержание  = "Списана ост. стоимость";
				Проводка.НомерЖурнала = "НА";
				Проводка.Сумма       = СуммаПроводки;

				СуммаНУРасход = Макс(СтрокаТаблицы.ОстСтоимостьНУ - СтрокаТаблицы.ПроводкиСуммаБезНДСРегл, 0);
				
				// если расход
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СуммаНУРасход > 0 Тогда
					
					Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт 				= СуммаНУРасход;
					
				КонецЕсли;
				
				Проводка.СчетДт = СтрокаТЧ.СчетРасходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоРасходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоРасходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоРасходовБУ3);

				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_НМА;
					Проводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(СтрокаТЧ.НалоговоеНазначение_НМА, СтрокаТЧ.ОстСтоимостьНУ);
					
				КонецЕсли;
				
				Проводка.СчетКт = СчетУчетаСтоимости;
				
				Если СчетУчетаСтоимости.Количественный Тогда
					
					Проводка.КоличествоКт = 1;
					
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);

			КонецЕсли;

		КонецЦикла;

		АмортизацияНМА.мПериод          = Дата;
		АмортизацияНМА.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьНМАБухгалтерскийУчет.ВыполнитьРасход();
		
	КонецЕсли;
	
	//При распределении амортизации производилась промежуточная запись проводок.
	//Необходимо записать проводки с сохранением предыдущих движений.
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
		
		ПроводкиБУ.Записать(Ложь);
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;

    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Выбытие);
	СтруктураПараметров.Вставить("РасчетыВозврат",  	Перечисления.РасчетыВозврат.Расчеты);
	
	СтруктураПараметров.Вставить("ЕстьНДС",  			СтруктураШапкиДокумента.ЕстьНДС);
	СтруктураПараметров.Вставить("ВалютаДокумента",     СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("Период",     			СтруктураШапкиДокумента.Дата);
	
    СтруктураДвижений = Новый Структура;
	СтруктураДвижений.Вставить("НалоговыйУчет", 			 Движения.ПродажиНалоговыйУчет);
	СтруктураДвижений.Вставить("ОжидаемыИПодтвержденныйНДС", Движения.ОжидаемыйИПодтвержденныйНДСПродаж);
	
	МассивТаблицТоваров = Новый Массив();
	
	ТаблицаПоТоварамКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамКопия.Колонки.Удалить("НалоговоеНазначение");
	ТаблицаПоТоварамКопия.Колонки.НалоговоеНазначение_НМА.Имя = "НалоговоеНазначение";
	
	МассивТаблицТоваров.Добавить(ТаблицаПоТоварамКопия);
	
	СтруктураПараметров.Вставить("ТаблицыТоваров", МассивТаблицТоваров);
	
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, мВалютаРегламентированногоУчета, Отказ);
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// 
Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// Учет НДС не ведется
		Возврат;
		
	КонецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// НМА
	ТаблицаДвижений = ТаблицаПоТоварам.Скопировать();
	ТаблицаДвижений.Свернуть("СделкаРегл, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал, ПроводкиСуммаБезНДСРегл, ОстСтоимостьНУ");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговый кредит: отгрузка";
			Проводка.НомерЖурнала               = "";

			СуммаНУДоход = Макс(СтрокаТаблицы.ПроводкиСуммаБезНДСРегл - СтрокаТаблицы.ОстСтоимостьНУ, 0);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СуммаНУДоход > 0 Тогда
				
				Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
			КонецЕсли;
			
			Проводка.СчетДт                     = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			
			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ВалютаДокумента");
	СтруктураПолей.Вставить("Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента");
	СтруктураПолей.Вставить("КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		
		Если СтруктураШапкиДокумента.ЕстьНДС
			И СтруктураШапкиДокумента.УчитыватьНДС Тогда
			СтруктураПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("НематериальныйАктив");
	СтруктураПолей.Вставить("Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		
		СтруктураПолей.Вставить("СтавкаНДС");
		
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Проверяет заполнение табличной части документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПолей = Новый Структура;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СхемаРеализации");
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	   И (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
		
		СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");
		
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ


// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеДокументаРегл( СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("Организация");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если АвторасчетНДС Тогда
		
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();

		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(НематериальныеАктивы, ЭтотОбъект, ПогрешностиОкругления, "Нематериальные активы");
		
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "НематериальныеАктивы");

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", КонецМесяца(Дата));
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВедениеВзаиморасчетовРегл", "ВедениеВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВестиПоДокументамРасчетовСКонтрагентом", "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВалютаВзаиморасчетов" , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "Организация"          , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидДоговора"          , "ВидДоговора");
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
		
	КонецЕсли;
	
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроверитьЗаполнениеДокумента(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
 
	ПогрешностиОкругления     = Новый Соответствие;

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ОС".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();

	СтруктураПолей.Вставить("НематериальныйАктив", "НематериальныйАктив");
	СтруктураПолей.Вставить("Сумма",               "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС",           "СтавкаНДС");
	СтруктураПолей.Вставить("НДС",                 "СуммаНДС");
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		СтруктураПолей.Вставить("СтоимостьУУ",                "СтоимостьУУ");
		СтруктураПолей.Вставить("АмортизацияУУ",              "АмортизацияУУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцУУ",       "АмортизацияЗаМесяцУУ");
		
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СтоимостьБУ",                "СтоимостьБУ");
		СтруктураПолей.Вставить("АмортизацияБУ",              "АмортизацияБУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ",       "АмортизацияЗаМесяцБУ");
		
		СтруктураПолей.Вставить("СхемаРеализации",            "СхемаРеализации");
		СтруктураПолей.Вставить("СчетДоходовБУ",              "СхемаРеализации.СчетДоходов");
		СтруктураПолей.Вставить("СубконтоДоходовБУ1",         "СхемаРеализации.СубконтоДоходов1");
		СтруктураПолей.Вставить("СубконтоДоходовБУ2",         "СхемаРеализации.СубконтоДоходов2");
		СтруктураПолей.Вставить("СубконтоДоходовБУ3",         "СхемаРеализации.СубконтоДоходов3");
		СтруктураПолей.Вставить("СчетРасходовБУ",             "СхемаРеализации.СчетСебестоимости");
		СтруктураПолей.Вставить("СубконтоРасходовБУ1",        "СхемаРеализации.СубконтоСебестоимости1");
		СтруктураПолей.Вставить("СубконтоРасходовБУ2",        "СхемаРеализации.СубконтоСебестоимости2");
		СтруктураПолей.Вставить("СубконтоРасходовБУ3",        "СхемаРеализации.СубконтоСебестоимости3");
		СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
		СтруктураСложныхПолей.Вставить("ОстСтоимостьНУ"    	, "СтоимостьНУ - АмортизацияНУ - АмортизацияЗаМесяцНУ");
		
		СтруктураПолей.Вставить("СтоимостьНУ_НМА",            "СтоимостьНУ");
		СтруктураПолей.Вставить("АмортизацияНУ",              "АмортизацияНУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ",       "АмортизацияЗаМесяцНУ");
		
		СтруктураПолей.Вставить("НалоговоеНазначение",   	"НалоговоеНазначениеДоходовИЗатрат");
		СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат",   	"НалоговоеНазначениеДоходовИЗатрат");
		СтруктураПолей.Вставить("ВидНалоговойДеятельности", "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
		СтруктураПолей.Вставить("ВидДеятельностиНДС",   	"НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
		
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", 
	                                                               СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоТоварам, "Нематериальные активы", "НематериальныйАктив", "Нематериальный актив", Отказ, Заголовок);	
											   
 	
	// Схемы реализации должны быть заполнены правильно
	СтруктураПараметровПроверки = Новый Структура;
	СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
	СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимости");
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "НематериальныеАктивы", , 
	                                                     ТаблицаПоТоварам, 
							                             СтруктураПараметровПроверки,
														 СтруктураШапкиДокумента,
							                             Отказ, Заголовок);	

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	
	СписокНМА = ТаблицаПоТоварам.ВыгрузитьКолонку("НематериальныйАктив");
	
	Запрос   = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация", 	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      	МоментВремени());
	Запрос.УстановитьПараметр("СписокНМА",       	СписокНМА);
	Запрос.УстановитьПараметр("ВнешнийИсточник", 	ТаблицаПоТоварам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	НематериальныйАктив
	|ПОМЕСТИТЬ НематериальныеАктивы
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НематериальныеАктивы.НематериальныйАктив                                                        КАК НематериальныйАктив,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.НематериальныйАктив         КАК НМА_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.НематериальныйАктив                          КАК НМА_УУ,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов 	КАК Направление_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособОтраженияРасходов                  	КАК Направление_УУ
	|ИЗ
	|	НематериальныеАктивы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(&ТекПериод, НематериальныйАктив В (&СписокНМА) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО НематериальныеАктивы.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМА.СрезПоследних(&ТекПериод, НематериальныйАктив В (&СписокНМА)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	ПО НематериальныеАктивы.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.НематериальныйАктив";
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();

	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете Тогда

		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		                                     мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);

	КонецЕсли;
	
	
	Упр  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бухг = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      МоментВремени());
	Запрос.УстановитьПараметр("СписокНМА",      СписокНМА);
	Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
					|	МестонахождениеНМАУУ.НематериальныйАктив 	КАК НМА_УУ,
					|	МестонахождениеНМАУУ.Местонахождение 		КАК Местонахождение_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
					|	МестонахождениеНМАБУ.НематериальныйАктив 	КАК НМА_БУ,
					|	МестонахождениеНМАБУ.Местонахождение 		КАК Местонахождение_БУ", "") + "
					|ИЗ" + ?(Упр,"
					|	РегистрСведений.МестонахождениеНМА.СрезПоследних(
					|		            &ТекПериод,
					|		            НематериальныйАктив В (&СписокНМА)) КАК МестонахождениеНМАУУ", "") + ?(Упр и Бухг,"
					|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг," 
					|			РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
					|			                &ТекПериод, 
					|			                НематериальныйАктив В (&СписокНМА)
					|		                    И Организация = &ТекОрганизация) КАК МестонахождениеНМАБУ", "") + ?(Упр и Бухг,"
					|		ПО МестонахождениеНМАУУ.НематериальныйАктив = МестонахождениеНМАБУ.НематериальныйАктив", "");
	ТаблицаМестонахождений = Запрос.Выполнить().Выгрузить();
	
	
	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");