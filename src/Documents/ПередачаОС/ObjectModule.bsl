Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	

// Функция формирует табличный документ с типовой печатной формой ОЗ-1
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОЗ1(ПечатьПоДаннымУпрУчета = Истина)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",  Ссылка);
	Запрос.УстановитьПараметр("ТекДата", МоментВремени());
	
	Если НЕ ПечатьПоДаннымУпрУчета Тогда
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаОС.Дата                                КАК ДатаАкта,
	|	ПередачаОС.Номер                               КАК НомерАкта,
	|	ВЫРАЗИТЬ(ПередачаОС.Контрагент.НаименованиеПолное
	|	                    КАК СТРОКА(1000))          КАК ПринялоПодразделение" + ?(НЕ ПечатьПоДаннымУпрУчета, ",
	|	ВЫРАЗИТЬ(ПередачаОС.Организация.НаименованиеПолное
	|	                    КАК СТРОКА(1000))          КАК Организация,
	|	КодыОрганизации.КодПоЕДРПОУ                    КАК ЕДРПОУ", "") + "
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС" + ?(НЕ ПечатьПоДаннымУпрУчета, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ТекДата,
	|		                                 Организация = &Организация) КАК КодыОрганизации
	|		ПО ПередачаОС.Организация = КодыОрганизации.Организация", "") + "
	|
	|ГДЕ
	|	ПередачаОС.Ссылка = &Ссылка";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка"                , Ссылка);
	Запрос.УстановитьПараметр("СписокОС"              , СписокОС);
	Запрос.УстановитьПараметр("ТекДата"               , МоментВремени());
	Запрос.УстановитьПараметр("СостояниеПринятоКУчету", Перечисления.СостоянияОС.ПринятоКУчету);
	
	Если ПечатьПоДаннымУпрУчета Тогда
		
		ПервоначальныеСведения = "ПервоначальныеСведенияОС";
		МестонахождениеОС      = "МестонахождениеОС";
		СостоянияОС            = "СостоянияОС";
		
	Иначе
		
		ПервоначальныеСведения = "ПервоначальныеСведенияОСБухгалтерскийУчет";
		МестонахождениеОС      = "МестонахождениеОСБухгалтерскийУчет";
		СостоянияОС            = "СостоянияОСОрганизаций";
		Запрос.УстановитьПараметр("Организация", Организация);
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ" + ?(ПечатьПоДаннымУпрУчета, "
	|	ПередачаОС.ОсновноеСредство.Код                КАК ИнвентарныйНомер,", "
	|	ПервоначальныеСведения.ИнвентарныйНомер        КАК ИнвентарныйНомер,") + "
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ПередачаОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	|	ПередачаОС.ОсновноеСредство.ЗаводскойНомер     КАК ЗаводскойНомер,
	|	ПередачаОС.ОсновноеСредство.ДатаВыпуска        КАК ГодВыпуска,
	|	ПередачаОС.ОсновноеСредство.НомерПаспорта      КАК НомерПаспорта,
	|	МестонахождениеОС.Местонахождение              КАК СдалоПодразделение,
	|	МестонахождениеОС.МОЛ.Код                      КАК КодМОЛа,
	|	ПринятКУчету.ДатаСостояния                     КАК ДатаВвода" + ?(НЕ ПечатьПоДаннымУпрУчета, ",
	|	ПередачаОС.СхемаРеализации.СчетСебестоимости   КАК СчетДт,
	|	СчетаОС_БУ.СчетУчета                           КАК СчетКт", "") + "
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений." + ПервоначальныеСведения + ".СрезПоследних(
	|		                    &ТекДата,
	|		                    ОсновноеСредство В (&СписокОС)" + ?(НЕ ПечатьПоДаннымУпрУчета, "
	|		                    И Организация = &Организация", "") + ") КАК ПервоначальныеСведения
	|		ПО ПередачаОС.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений." + МестонахождениеОС + ".СрезПоследних(
	|		                    &ТекДата,
	|		                    ОсновноеСредство В (&СписокОС)" + ?(НЕ ПечатьПоДаннымУпрУчета, "
	|		                    И Организация = &Организация", "") + ") КАК МестонахождениеОС
	|		ПО ПередачаОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			(ВЫБРАТЬ
	|				СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|				СостоянияОС.ДатаСостояния    КАК ДатаСостояния
	|			ИЗ
	|				РегистрСведений." + СостоянияОС + " КАК СостоянияОС
	|			ГДЕ
	|				СостоянияОС.Состояние = &СостояниеПринятоКУчету
	|				И СостоянияОС.ОсновноеСредство В(&СписокОС)" + ?(НЕ ПечатьПоДаннымУпрУчета, "
	|				И СостоянияОС.Организация = &Организация", "") + ") КАК ПринятКУчету
	|		ПО ПередачаОС.ОсновноеСредство = ПринятКУчету.ОсновноеСредство" + ?(НЕ ПечатьПоДаннымУпрУчета, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		                    &ТекДата,
	|		                    ОсновноеСредство В (&СписокОС)
	|		                    И Организация = &Организация) КАК СчетаОС_БУ
	|		ПО ПередачаОС.ОсновноеСредство = СчетаОС_БУ.ОсновноеСредство", "") + "
	|ГДЕ
	|	ПередачаОС.Ссылка = &Ссылка";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаОС_ОЗ1";
	Макет         = ПолучитьОбщийМакет("ОЗ1");

	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	Пока ВыборкаПоОС.Следующий() Цикл

		ОбластьМакета = Макет.ПолучитьОбласть("ОЗ1");
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
		ОбластьМакета.Параметры.ПринялоПодразделение = СокрП(ВыборкаПоШапке.ПринялоПодразделение);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		ОбластьМакета.Параметры.ВидОперации = "Вибуття";

		Если ПечатьПоДаннымУпрУчета Тогда
			
			 ОбластьМакета.Параметры.Организация = "Управліньский облік";
			 ОбластьМакета.Параметры.Валюта      = мВалютаУправленческогоУчета;
			 
		 Иначе
			 
			 ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
			 ОбластьМакета.Параметры.Валюта = мВалютаРегламентированногоУчета;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоКомиссии);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	ТабДокумент.ОбластьПечати = ТабДокумент.Область(2, 2, ТабДокумент.ВысотаТаблицы, ТабДокумент.ШиринаТаблицы);
	Возврат ТабДокумент;

КонецФункции // ПечатьОЗ1()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьНакладной()
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|	Получил,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|
	|ГДЕ
	|	ПередачаОС.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Сумма,
	|	СуммаНДС
	|ИЗ 
	|	(ВЫБРАТЬ
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		ОсновноеСредство    КАК Номенклатура,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.ПередачаОС.ОС КАК ПередачаОС
	|	ГДЕ
	|		ПередачаОС.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		ОсновноеСредство,
	|		Сумма,
	|		СтавкаНДС
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаНМА_Накладная";
	
	Макет = ПолучитьМакет("Накладная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);

	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар);
		ОбластьДанных.Параметры.Цена	 			= ВыборкаСтрокТовары.Сумма;		
		ОбластьДанных.Параметры.Количество	 		= 1;		
		ОбластьДанных.Параметры.ЕдиницаИзмерения 	= НСтр("ru='шт';uk='шт.'");		
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента) + ".";
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	// Вывести подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
	ТабДокумент.Вывести(ОбластьМакета);


	Возврат ТабДокумент;
		
КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОЗ1упр" тогда
		
		ТабДокумент = ПечатьОЗ1();
		
	ИначеЕсли ИмяМакета = "ОЗ1бух" Тогда
		
		ТабДокумент = ПечатьОЗ1(Ложь);
		
	ИначеЕсли ИмяМакета = "Накладная" тогда
		
		ТабДокумент = ПечатьНакладной();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Передача ОС"));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	Если  ОтражатьВУправленческомУчете тогда 
		СтруктураМакетов.Вставить("ОЗ1упр","Форма ОЗ-1 (упр. учет)");
	КонецЕсли;
	Если  ОтражатьВБухгалтерскомУчете тогда 
		СтруктураМакетов.Вставить("ОЗ1бух","Форма ОЗ-1 (бух. учет)");
	КонецЕсли;
	
	СтруктураМакетов.Вставить("Накладная", 	"Расходная накладная");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
	
	Возврат;
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"         , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСВал"    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСВал"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Заполним значения в добавленых колонках 
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
			
		Иначе
			
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
												СтруктураШапкиДокумента.УчитыватьНДС,
												Истина,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругления);
												
		КонецЕсли;
		
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаСНДСВал = СтрокаТаблицы.СуммаСНДСВал;
		
		// Определим значение НДС в проводках
		Если СтруктураШапкиДокумента.УчитыватьНДС = Ложь Тогда
			
			// в документе НДС не указывается
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
			
		Иначе
			
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
			
		КонецЕсли;
		
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал = СтрокаТаблицы.ПроводкиСуммаСНДСВал - СтрокаТаблицы.ПроводкиСуммаНДСВал;
													
	КонецЦикла;
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТоваров, СтруктураШапкиДокумента);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
     
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;

	// Надо добавить колонки.
	// Надо добавить колонки "СуммаБезНДС" .
	
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;

		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
									  	 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
									 	 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
									 	 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	Если НЕ УчитыватьНДС Тогда
		
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
		
	КонецЕсли;
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений = ТаблицаПоТоварам.Скопировать();
	ТаблицаДвижений.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	
	ТаблицаДвижений.Колонки.Добавить("Контрагент");
	ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
	ТаблицаДвижений.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент        , "Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора        , "ВидДоговораКонтрагента");
	
	
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "СчетОплаты");
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоАвансам    , "СчетАванса");
	
	Возврат ТаблицаДвижений;
	
КонецФункции

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда
		
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь вызовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
 	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");

	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)

	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
							  Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
						   Отказ, Заголовок);
	                                      
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента,
							  ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, ТаблицаПоВзаиморасчетам,
							  Отказ, Заголовок);
							  
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);

							  
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
							  Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// записи по системе взаиморасчетов
	
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
	   И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// записи по системе взаиморасчетов
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		                      мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		                      ВидДвиженияНакопления.Приход, Отказ, Заголовок);                      
	
	// если ранее подготовка к передачи не была проведена
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда

		// начисленную амортизацию за месяц спишем на затраты
		АмортизацияОС = Движения.СтоимостьОС;
		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация .Очистить();

		// подготовим таблицу с данными по амортизации для списания амортизации по
		// направлениям затрат
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Амортизация",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  Новый ОписаниеТипов("СправочникСсылка.Подразделения"));

		Для каждого СтрокаОС из ТаблицаПоТоварам Цикл

			Если СтрокаОС.АмортизацияЗаМесяцУУ > 0 Тогда

				ТекМестонахождение = Неопределено;
				Если ТаблицаМестонахождений <> Неопределено Тогда
					
					//Затраты списываются по способу отражения расходов по амортзации
					ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");
					ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_УУ);
					                                          
				КонецЕсли;
				
				НоваяСтрока                        = ТабАмортизации.Добавить();
				НоваяСтрока.Амортизация            = СтрокаОС.АмортизацияЗаМесяцУУ;
				НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
				ТекНаправление                     = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_УУ);
				НоваяСтрока.Местонахождение 		= ТекМестонахождение;
				
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
				Движение.Амортизация               = СтрокаОС.АмортизацияЗаМесяцУУ;
				Движение.Стоимость                 = 0;
			КонецЕсли;

		КонецЦикла;

		// вызов процедуры списания амортизации по направлениям
		СтруктураШапкиДокументаБезВалютыДокумента = Новый Структура;
		Для каждого ТекКлюч Из СтруктураШапкиДокумента Цикл

			Если ТекКлюч.Ключ <> "ВалютаДокумента" Тогда
				СтруктураШапкиДокументаБезВалютыДокумента.Вставить(ТекКлюч.Ключ,ТекКлюч.Значение);
			КонецЕсли;

		КонецЦикла;

		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокументаБезВалютыДокумента);
		
		АмортизацияОС.мПериод          = Дата;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОС.ВыполнитьПриход();

	КонецЕсли;

	// даижения регистров по системе ОС
	СобытиеОС               = Движения.СобытияОС;
	СостояниеОС             = Движения.СостоянияОС;
	АмортизацияОС           = Движения.СтоимостьОС;
	НачислениеАмортизацииОС = Движения.НачислениеАмортизацииОС;
	НазваниеДокумента       = Метаданные().Представление();

	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация .Очистить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;
		// Движения по регистру НачислениеАмортизацииОС
		Движение = НачислениеАмортизацииОС.Добавить();
		Движение.Период                  = Дата;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.НачислятьАмортизацию    = Ложь;
		Движение.НачислятьАмортизациюВТекущемМесяце = Ложь;

		// Движения по регистру CобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период            = Дата;
		Движение.ОсновноеСредство  = ТекОС;
		Движение.Событие           = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента = НазваниеДокумента;
		Движение.НомерДокумента    = Номер;
		
		// Движения по регистру СостоянияОС
		Движение = СостояниеОС.Добавить();
		Движение.Период                  = Дата;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.Состояние               = Перечисления.СостоянияОС.СнятоСУчета;
		Движение.ДатаСостояния			 = Дата;

		// Движения по регистру СтоимостьОС
		Движение = ТаблицаДвиженийАмортизация.Добавить();
		Движение.ОсновноеСредство        = ТекОС;
		Движение.Амортизация             = СтрокаТЧ.АмортизацияУУ+СтрокаТЧ.АмортизацияЗаМесяцУУ;
		Движение.Стоимость               = СтрокаТЧ.СтоимостьУУ;

	КонецЦикла;

	АмортизацияОС.мПериод          = Дата;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьРасход();


КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, ТаблицаПоДокументамРасчетовСКонтрагентом,
							  Отказ, Заголовок)
 
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
								  
		Возврат;
		
	КонецЕсли; 
	
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	// Проводки по системе взаиморасчетов
	ПроводкиБУ = Движения.Хозрасчетный;

	ДатаДока   = Дата;
	
	//////////////////////////////////////////////////////////////////////////////
	// Взаиморасчеты с покупателем
	
	// Проводки по реализации ОС
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
	 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
	
		ТабПродажи = ТаблицаПоТоварам.Скопировать();
		ТабПродажи.Свернуть("СделкаРегл,СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НалоговоеНазначениеДоходовИЗатрат",
		                    "ПроводкиСуммаСНДСРегл, ПроводкиСуммаСНДСВал, ОстСтоимостьНУ, ПроводкиСуммаБезНДСРегл");
							
		Для каждого СтрокаТаблицы Из ТабПродажи Цикл

			СуммаПроводки = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			
			// Выручка
			Если СуммаПроводки <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период          = Дата;
				Проводка.Активность      = Истина;
				Проводка.Организация     = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма           = СуммаПроводки;
				Проводка.Содержание      = "Реализация ОС";
				Проводка.НомерЖурнала    = "ОС";
				
				Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   ,   СтрокаТаблицы.СделкаРегл);
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
				
				Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				
				СуммаНУДоход = Макс(СтрокаТаблицы.ПроводкиСуммаБезНДСРегл - СтрокаТаблицы.ОстСтоимостьНУ, 0);
				СуммаНУДоходСНДС = Макс(СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ОстСтоимостьНУ, 0);
				
				// если доход
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СуммаНУДоход > 0 Тогда
					
					Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУКт 				= СуммаНУДоходСНДС;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
 	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);

	// Проводки по регл. взаиморасчетам
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок);
	
	Если СтруктураПараметровЗачетАванса <> Ложь тогда
		
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации, Отказ);
		
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
			
			
		КонецЕсли;
		
	КонецЕсли;

	//Учет курсовых разниц
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
		
		СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок);
		ПроводкиБУ.Записать(Ложь);
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР,ПроводкиБУ,мВалютаРегламентированногоУчета,Истина);
		ПроводкиБУ.Записать(Ложь);
		
	КонецЕсли; // Учет курсовых разниц
	
	//////////////////////////////////////////////////////////////////////////////
	// Движения по регистрам учета ОС и формирование проводок по начислению
	// амортизации и списанию стоимости
	
	//Получение данных о видах налоговой деятельности, к которым принадлежат ОС
	УправлениеВнеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(МоментВремени(), ТекОрганизация, ТаблицаПоТоварам, 
	                                                  СтруктураШапкиДокумента,
													  Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	//Заполнение переменных
	ВидНалоговойДеятельностиНеОблагаемая = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// если ранее подготовка к передачи не была проведена
		Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда
			// начисленную амортизацию за месяц спишем на затраты
			// подготовим таблицу с данными по амортизации для списания амортизации по 
			// направлениям затрат
			АмортизацияОС         = Движения.СтоимостьОСБухгалтерскийУчет;
			ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
			ТаблицаДвиженийАмортизация .Очистить();

			ТабАмортизации = Новый ТаблицаЗначений;
			ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
			ТабАмортизации.Колонки.Добавить("ОбъектУчета", 				Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
			ТабАмортизации.Колонки.Добавить("Амортизация", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
			ТабАмортизации.Колонки.Добавить("АмортизацияНУ", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
			ТабАмортизации.Колонки.Добавить("Местонахождение", 			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
			ТабАмортизации.Колонки.Добавить("СчетАмортизации");
			ТабАмортизации.Колонки.Добавить("НалоговоеНазначение", 		Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
			ТабАмортизации.Колонки.Добавить("ИмяСубконто", 				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));

			Для Каждого СтрокаОС из ТаблицаПоТоварам Цикл

				Если СтрокаОС.АмортизацияЗаМесяцБУ > 0 ИЛИ СтрокаОС.АмортизацияЗаМесяцНУ > 0  Тогда

					ТекМестонахождение = Неопределено;
					Если ТаблицаМестонахождений <> Неопределено Тогда
						
						//Затраты списываются по способу отражения расходов по амортзации
						ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
						ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_БУ);
						                                          
					КонецЕсли;
					
					НоваяСтрока = ТабАмортизации.Добавить();
					НоваяСтрока.Амортизация 	= СтрокаОС.АмортизацияЗаМесяцБУ;
					НоваяСтрока.АмортизацияНУ 	= СтрокаОС.АмортизацияЗаМесяцНУ;
					НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
					НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
					НоваяСтрока.НалоговоеНазначение 	= СтрокаОС.НалоговоеНазначение_ОС;
					
					ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
					НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_БУ);
					НоваяСтрока.СчетАмортизации        = СтрокаОС.СчетНачисленияАмортизацииБУ;
					НоваяСтрока.Местонахождение 		= ТекМестонахождение;

					Движение = ТаблицаДвиженийАмортизация.Добавить();
					Движение.ОсновноеСредство      = СтрокаОС.ОсновноеСредство;
					Движение.Организация           = ТекОрганизация;
					Движение.Амортизация           = СтрокаОС.АмортизацияЗаМесяцБУ;
					Движение.АмортизацияНУ         = СтрокаОС.АмортизацияЗаМесяцНУ;
					Движение.Стоимость             = 0;
					Движение.СтоимостьНУ           = 0;
					
				КонецЕсли;

			КонецЦикла;

			//вызов процедуры списания амортизации по направлениям
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"ОС");
			
			АмортизацияОС.мПериод          = Дата;
			АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
			Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();

		КонецЕсли;


		СобытиеОС               = Движения.СобытияОСОрганизаций;
		СостояниеОС             = Движения.СостоянияОСОрганизаций;
		АмортизацияОС           = Движения.СтоимостьОСБухгалтерскийУчет;
		НачислениеАмортизацииОС = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
		НачислениеАмортизацииОСНУ = Движения.НачислениеАмортизацииОСНалоговыйУчет;
		НазваниеДокумента       = Метаданные().Представление();

		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация .Очистить();

		Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			СчетПродажаОС = СтрокаТЧ.СчетПродажиОС;
			
			Если НЕ (СтрокаТЧ.СтоимостьБУ = 0) Тогда
			
				// Движения по регистру НачислениеАмортизацииОСБухгалтерскийУчет
				Движение = НачислениеАмортизацииОС.Добавить();
				Движение.Период               = Дата;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.НачислятьАмортизацию = Ложь;
				
				// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
				Движение = НачислениеАмортизацииОСНУ.Добавить();
				Движение.Период               = Дата;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.НачислятьАмортизацию = Ложь;
				
				// Движения по регистру СобытияОСОрганизаций
				Движение = СобытиеОС.Добавить();
				Движение.Период               = Дата;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
	 			Движение.НомерДокумента		  = Номер;
				Движение.НазваниеДокумента 	  = НазваниеДокумента;

				// Движения по регистру СостоянияОСОрганизаций
				Движение = СостояниеОС.Добавить();
				Движение.Период               = Дата;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
				Движение.ДатаСостояния		  = Дата;

				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.ОсновноеСредство      = ТекОС;
				Движение.Организация           = ТекОрганизация;
				Движение.Амортизация           = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
				Движение.Стоимость             = СтрокаТЧ.СтоимостьБУ;
				Движение.АмортизацияНУ         = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
				Движение.СтоимостьНУ           = НалоговыйУчет.ОпределитьСтоимостьНУ(СтрокаТЧ.НалоговоеНазначение_ОС,СтрокаТЧ.СтоимостьНУ_ОС);
				Движение.ВидОперации           = Перечисления.ВидыСобытийОС.Передача;

				СчетУчетаСтоимости   = СтрокаТЧ.СчетУчетаБУ;
				СчетУчетаАмортизации = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
				
				// если ранее подготовка к передачи не была проведена
				Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда
					
					// списание амортизации Д СчетУчетаАмортизации К ПродажаОС
					СуммаПроводки 	= СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
					СуммаПроводкиНУ = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
					
	   				Если СуммаПроводки<>0 Тогда

						Проводка = ПроводкиБУ.Добавить();

						Проводка.Период      = Дата;
						Проводка.Активность  = Истина;
						Проводка.Организация = ТекОрганизация;
						Проводка.Содержание  = "Списана амортизация";
						Проводка.НомерЖурнала = "ОС";
						Проводка.Сумма       = СуммаПроводки;
						
						Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
							
							Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
							Проводка.СуммаНУДт = СуммаПроводкиНУ;
							
						КонецЕсли;
						
						Проводка.СчетДт = СчетУчетаАмортизации;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
						
						Проводка.СчетКт = СчетУчетаСтоимости;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

						Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
							
							Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
							Проводка.СуммаНУКт = СуммаПроводкиНУ;
							
						КонецЕсли;
						
					КонецЕсли;

					// списание остаточной стоимости Д ПродажаОС К СчетУчетаСтоимости
					СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
					
					Если СуммаПроводки <> 0 Тогда

						Проводка = ПроводкиБУ.Добавить();

						Проводка.Период      = Дата;
						Проводка.Организация = ТекОрганизация;
						Проводка.Содержание  = "Списана ост. стоимость";
						Проводка.НомерЖурнала = "ОС";
						Проводка.Сумма       = СуммаПроводки;

						Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
							
							Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
							Проводка.СуммаНУДт = СтрокаТЧ.ОстСтоимостьНУ;
							
						КонецЕсли;
						
						Проводка.СчетДт = СчетПродажаОС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

						Проводка.СчетКт = СчетУчетаСтоимости;
						
						Если СчетУчетаСтоимости.Количественный Тогда
							
							Проводка.КоличествоКт = 1;
							
						КонецЕсли;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

						Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
							
							Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
							Проводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(СтрокаТЧ.НалоговоеНазначение_ОС, СтрокаТЧ.ОстСтоимостьНУ);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;

				// списание остаточной стоимости Д СчетЗатрат К ПродажаОС
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
				
				Если СуммаПроводки <> 0 Тогда

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период      = Дата;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Списана ост. стоимость";
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма       = СуммаПроводки;

					СуммаНУРасход = Макс(СтрокаТаблицы.ОстСтоимостьНУ - СтрокаТаблицы.ПроводкиСуммаБезНДСРегл, 0);
					
					// если расход
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СуммаНУРасход > 0 Тогда
						
						Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
						Проводка.СуммаНУДт 				= СуммаНУРасход;
						
					КонецЕсли;
					
					Проводка.СчетДт = СтрокаТЧ.СчетРасходовБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоРасходовБУ1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоРасходовБУ2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоРасходовБУ2);
					
					Если СчетУчетаСтоимости.Количественный Тогда
						
						Проводка.КоличествоКт = 1;
						
					КонецЕсли;

					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
						Проводка.СуммаНУКт = СтрокаТЧ.ОстСтоимостьНУ;
						
					КонецЕсли;
					
					Проводка.СчетКт = СчетПродажаОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;

		АмортизацияОС.мПериод          = Дата;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьРасход();


	КонецЕсли;
	
	//При распределении амортизации производилась промежуточная запись проводок.
	//Необходимо записать проводки с сохранением предыдущих движений.
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
		
		ПроводкиБУ.Записать(Ложь);
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;

    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Выбытие);
	СтруктураПараметров.Вставить("РасчетыВозврат",  	Перечисления.РасчетыВозврат.Расчеты);
	
	СтруктураПараметров.Вставить("ЕстьНДС",  			СтруктураШапкиДокумента.ЕстьНДС);
	СтруктураПараметров.Вставить("ВалютаДокумента",     СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("Период",     			СтруктураШапкиДокумента.Дата);
	
    СтруктураДвижений = Новый Структура;
	СтруктураДвижений.Вставить("НалоговыйУчет", 			 Движения.ПродажиНалоговыйУчет);
	СтруктураДвижений.Вставить("ОжидаемыИПодтвержденныйНДС", Движения.ОжидаемыйИПодтвержденныйНДСПродаж);
	
	МассивТаблицТоваров = Новый Массив();
	
	ТаблицаПоТоварамКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамКопия.Колонки.Удалить("НалоговоеНазначение");
	ТаблицаПоТоварамКопия.Колонки.НалоговоеНазначение_ОС.Имя = "НалоговоеНазначение";
	
	МассивТаблицТоваров.Добавить(ТаблицаПоТоварамКопия);
	
	СтруктураПараметров.Вставить("ТаблицыТоваров", МассивТаблицТоваров);
	
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, мВалютаРегламентированногоУчета, Отказ);
	
КонецПроцедуры // 							  

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// 
Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// Учет НДС не ведется
		Возврат;
		
	КонецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ОС
	ТаблицаДвижений = ТаблицаПоТоварам.Скопировать();
	ТаблицаДвижений.Свернуть("СделкаРегл, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал, ПроводкиСуммаБезНДСРегл, ОстСтоимостьНУ");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговые обязательства: отгрузка";
			Проводка.НомерЖурнала               = "";

			СуммаНУДоход = Макс(СтрокаТаблицы.ПроводкиСуммаБезНДСРегл - СтрокаТаблицы.ОстСтоимостьНУ, 0);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СуммаНУДоход > 0 Тогда
				
				Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
			КонецЕсли;
			
			Проводка.СчетДт                     = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			
			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"     , СтрокаТаблицы.СделкаРегл);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ВалютаДокумента");
	СтруктураПолей.Вставить("Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента");
	СтруктураПолей.Вставить("КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов");
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	   ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
		|Заполните поле ""Заказ покупателя""!");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		
		Если СтруктураШапкиДокумента.ЕстьНДС
			И СтруктураШапкиДокумента.УчитыватьНДС Тогда
			СтруктураПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ОсновноеСредство");
	СтруктураПолей.Вставить("Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		
		СтруктураПолей.Вставить("СтавкаНДС");
		
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, Отказ, Заголовок);
	
	Если (Не Отказ) и (ЗначениеЗаполнено(ДокПодготовкаКПередачеОС)) Тогда
		
		Запрос       = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",        Ссылка);
		Запрос.УстановитьПараметр("ДокПодготовки", ДокПодготовкаКПередачеОС);
		Запрос.Текст ="ВЫБРАТЬ
		              |	ПередачаОСОС.НомерСтроки КАК НомерСтроки,
		              |	ПередачаОСОС.ОсновноеСредство.Представление КАК ОС
		              |ИЗ
		              |	Документ.ПередачаОС.ОС КАК ПередачаОСОС
		              |
		              |ГДЕ
		              |	ПередачаОСОС.Ссылка = &Ссылка И 
					  |	(НЕ(ПередачаОСОС.ОсновноеСредство В 
					  |		(ВЫБРАТЬ РАЗЛИЧНЫЕ
					  |			ПодготовкаКПередачеОСОС.ОсновноеСредство
					  |		 ИЗ Документ.ПодготовкаКПередачеОС.ОС КАК ПодготовкаКПередачеОСОС
					  |		 ГДЕ 	ПодготовкаКПередачеОСОС.Ссылка = &ДокПодготовки )))
					  |	";
		ТаблицаЛишних       = Запрос.Выполнить().Выгрузить();
		СтрокаДокПодготовки = Строка(ДокПодготовкаКПередачеОС);
		
		Для каждого СтрокаТЧ Из ТаблицаЛишних Цикл
		
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
								+ "Основное средство """ + СтрокаТЧ.ОС + """ отсутствует  в документе подготовки:"
								+ Символы.ПС + Символы.Таб + """" + СтрокаДокПодготовки + """",
								Отказ, Заголовок);
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитов()

// Проверяет заполнение табличной части документа
// для управленческого учета
Процедура ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	

КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПолей = Новый Структура;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СхемаРеализации");
		
		СтруктураПолей.Вставить("СчетПродажиОС");
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	   И (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
		
		СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");
		
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ


// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Событие");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
							  Перечисления.ВидыСобытийОС.Передача,
							  ПредставлениеРеквизита,Отказ);

	ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеДокументаРегл( СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("СобытиеРегл");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.Передача,
								  ПредставлениеРеквизита,Отказ);
	
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
                    
// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если АвторасчетНДС Тогда
		
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(ОС, ЭтотОбъект, ПогрешностиОкругления, "Основные средства");

	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС");
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", КонецМесяца(Дата));
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);


	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента",	"ВалютаВзаиморасчетов" , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"Организация"          , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"ВидДоговора"          , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"ВестиПоДокументамРасчетовСКонтрагентом"     , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          	"ОтражатьВРегламентированномУчете"           , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", 				"ВидОперации"          , "СделкаВидОперации");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);
	
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	ПроверитьЗаполнениеДокумента(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
 	ПогрешностиОкругления     = Новый Соответствие;

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ОС".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();

	СтруктураПолей.Вставить("ОсновноеСредство"          , "ОсновноеСредство");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	
	// Дополним полями, нужными для регл. и упр. учета
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтруктураПолей.Вставить("СтоимостьУУ",          "Стоимость");
		СтруктураПолей.Вставить("АмортизацияУУ",        "Амортизация");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцУУ", "АмортизацияЗаМесяц");
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СтоимостьБУ",                "СтоимостьБУ");
		СтруктураПолей.Вставить("АмортизацияБУ",              "АмортизацияБУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ",       "АмортизацияЗаМесяцБУ");
		
		СтруктураПолей.Вставить("СхемаРеализации",            "СхемаРеализации");
		СтруктураПолей.Вставить("СчетДоходовБУ",              "СхемаРеализации.СчетДоходов");
		СтруктураПолей.Вставить("СубконтоДоходовБУ1",         "СхемаРеализации.СубконтоДоходов1");
		СтруктураПолей.Вставить("СубконтоДоходовБУ2",         "СхемаРеализации.СубконтоДоходов2");
		СтруктураПолей.Вставить("СубконтоДоходовБУ3",         "СхемаРеализации.СубконтоДоходов3");
		СтруктураПолей.Вставить("СчетРасходовБУ",             "СхемаРеализации.СчетСебестоимости");
		СтруктураПолей.Вставить("СубконтоРасходовБУ1",        "СхемаРеализации.СубконтоСебестоимости1");
		СтруктураПолей.Вставить("СубконтоРасходовБУ2",        "СхемаРеализации.СубконтоСебестоимости2");
		СтруктураПолей.Вставить("СубконтоРасходовБУ3",        "СхемаРеализации.СубконтоСебестоимости3");
		СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
		СтруктураСложныхПолей.Вставить("ОстСтоимостьНУ"    	, "СтоимостьНУ - АмортизацияНУ - АмортизацияЗаМесяцНУ");
		
		СтруктураПолей.Вставить("СтоимостьНУ_ОС",             "СтоимостьНУ");
		СтруктураПолей.Вставить("АмортизацияНУ",              "АмортизацияНУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ",       "АмортизацияЗаМесяцНУ");
		
		СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат",   	"НалоговоеНазначениеДоходовИЗатрат");
		СтруктураПолей.Вставить("НалоговоеНазначение",   	"НалоговоеНазначениеДоходовИЗатрат");
		СтруктураПолей.Вставить("ВидНалоговойДеятельности", "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
		СтруктураПолей.Вставить("ВидДеятельностиНДС",   	"НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
		
		СтруктураПолей.Вставить("СчетПродажиОС", "СчетПродажиОС");
		
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, СтруктураПростыхПолей,СтруктураСложныхПолей);

	//ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	ПроводитьПоВзаиморасчетам = (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) 
								ИЛИ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("ОС", ТаблицаПоТоварам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоТоварам, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
											   

 	
	// Схемы реализации должны быть заполнены правильно
	СтруктураПараметровПроверки = Новый Структура;
	СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
	СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимости");
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "ОС", , ТаблицаПоТоварам, 
							                             СтруктураПараметровПроверки,
														 СтруктураШапкиДокумента,
							                             Отказ, Заголовок);	
 
	// Проверяет табличную часть на наличие в ней списанных Основных средств
	УправлениеВнеоборотнымиАктивами.ПроверитьНаСписанность(Дата, СтруктураШапкиДокумента.Организация, ТаблицаПоТоварам,
	                       ОтражатьВУправленческомУчете, 
						   ОтражатьВБухгалтерскомУчете,
		                   Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// подготовка таблицы для списания
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",       Дата);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоТоварам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                                                         КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство                      КАК ОС_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                                       КАК ОС_УУ,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                  КАК Направление_УУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство";
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда

		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		                                     мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);

	КонецЕсли;
	
	Упр  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бухг = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      МоментВремени());
	Запрос.УстановитьПараметр("СписокОС",       ТаблицаПоТоварам.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
					|	МестонахождениеОСУУ.ОсновноеСредство 	КАК ОС_УУ,
					|	МестонахождениеОСУУ.Местонахождение 	КАК Местонахождение_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
					|	МестонахождениеОСБУ.ОсновноеСредство 	КАК ОС_БУ,
					|	МестонахождениеОСБУ.Местонахождение 	КАК Местонахождение_БУ", "") + "
					|ИЗ" + ?(Упр,"
					|	РегистрСведений.МестонахождениеОС.СрезПоследних(
					|		            &ТекПериод,
					|		            ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОСУУ", "") + ?(Упр и Бухг,"
					|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг," 
					|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
					|			                &ТекПериод, 
					|			                ОсновноеСредство В (&СписокОС)
					|		                    И Организация = &ТекОрганизация) КАК МестонахождениеОСБУ", "") + ?(Упр и Бухг,"
					|		ПО МестонахождениеОСУУ.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство", "");
	ТаблицаМестонахождений = Запрос.Выполнить().Выгрузить();
	
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаМестонахождений, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

//Вызывается при вводе на основании
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПодготовкаКПередачеОС") Тогда
		
		// Заполнение шапки
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ДокПодготовкаКПередачеОС     = Основание.Ссылка;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			НоваяСтрока = ОС.Добавить();
			
			НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
			
			//управленческий учет
			НоваяСтрока.Стоимость   = ТекСтрокаОС.Стоимость;
			НоваяСтрока.Амортизация = ТекСтрокаОС.Амортизация + ТекСтрокаОС.АмортизацияЗаМесяц;
			
			//бухгалтерский учет
			НоваяСтрока.СтоимостьБУ   = ТекСтрокаОС.СтоимостьБУ;
			НоваяСтрока.АмортизацияБУ = ТекСтрокаОС.АмортизацияБУ + ТекСтрокаОС.АмортизацияЗаМесяцБУ;
			
			//налоговый учет
			НоваяСтрока.СтоимостьНУ   = ТекСтрокаОС.СтоимостьНУ;
			НоваяСтрока.АмортизацияНУ = ТекСтрокаОС.АмортизацияНУ + ТекСтрокаОС.АмортизацияЗаМесяцНУ;
			
			//значения по умолчанию
			НоваяСтрока.СтавкаНДС 			= Перечисления.СтавкиНДС.НДС20;
			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
    		 
КонецПроцедуры

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("ОС"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");
