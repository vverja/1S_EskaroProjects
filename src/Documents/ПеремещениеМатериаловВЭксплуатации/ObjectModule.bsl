Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11(ПечатьПоДаннымУпрУчета = Истина)
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	                       КАК НомерДокумента,
	|	Дата	                       КАК ДатаДокумента,
	|	Организация                    КАК Организация,
	|	Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	" + ?(ПечатьПоДаннымУпрУчета, "Подразделение", "ПодразделениеОрганизации")+" КАК Подразделение
	|ИЗ
	|	Документ.ПеремещениеМатериаловВЭксплуатации КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	                            
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Если Проведен Тогда
		
		Рег = ?(ПечатьПоДаннымУпрУчета, "ПартииМатериаловВЭксплуатации", "ПартииМатериаловВЭксплуатацииБухгалтерскийУчет");
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК МатериалНаименование,
		|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                КАК НоменклатурныйНомер,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
		|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.ЕдиницаИзмерения)              КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ВложенныйЗапрос.СерияНоменклатуры          КАК Серия," + ?(Не ПечатьПоДаннымУпрУчета, "
		|	ВложенныйЗапрос.СчетПередачиБУ             КАК СчетПередачи,", "") + "
		|	ВложенныйЗапрос.Количество                 КАК Количество,
		|	ВложенныйЗапрос.Цена                       КАК Цена,
		|	ВложенныйЗапрос.Стоимость                  КАК Стоимость
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПартииМатериаловВЭксплуатации.Номенклатура                           КАК Номенклатура,
		|		ПартииМатериаловВЭксплуатации.ХарактеристикаНоменклатуры             КАК ХарактеристикаНоменклатуры,
		|		ПартииМатериаловВЭксплуатации.СерияНоменклатуры                      КАК СерияНоменклатуры," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		ПартииМатериаловВЭксплуатации.СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,", "") + "
		|		ВЫБОР
		|			КОГДА ПартииМатериаловВЭксплуатации.Количество = 0
		|				ТОГДА ПартииМатериаловВЭксплуатации.Стоимость
		|			ИНАЧЕ ВЫРАЗИТЬ(ПартииМатериаловВЭксплуатации.Стоимость / ПартииМатериаловВЭксплуатации.Количество КАК ЧИСЛО(15, 2))
		|		КОНЕЦ КАК Цена,
		|		СУММА(ПартииМатериаловВЭксплуатации.Количество)                      КАК Количество,
		|		СУММА(ПартииМатериаловВЭксплуатации.Стоимость)                       КАК Стоимость,
		|		ПартииМатериаловВЭксплуатации.Номенклатура.ЕдиницаХраненияОстатков   КАК ЕдиницаИзмерения,
		|		МИНИМУМ(ПартииМатериаловВЭксплуатации.НомерСтроки)                   КАК НомерСтроки
		|	ИЗ
		|		РегистрНакопления." + Рег + " КАК ПартииМатериаловВЭксплуатации
		|	ГДЕ
		|		ПартииМатериаловВЭксплуатации.Регистратор = &ТекущийДокумент
		|		И ПартииМатериаловВЭксплуатации.ВидДвижения = &ВидДвижения
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПартииМатериаловВЭксплуатации.Номенклатура,
		|		ПартииМатериаловВЭксплуатации.ХарактеристикаНоменклатуры," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		ПартииМатериаловВЭксплуатации.СхемаНазначенияИспользования.СчетПередачиБУ,", "") + "
		|		ПартииМатериаловВЭксплуатации.СерияНоменклатуры,
		|		ВЫБОР
		|			КОГДА ПартииМатериаловВЭксплуатации.Количество = 0
		|				ТОГДА ПартииМатериаловВЭксплуатации.Стоимость
		|			ИНАЧЕ ВЫРАЗИТЬ(ПартииМатериаловВЭксплуатации.Стоимость / ПартииМатериаловВЭксплуатации.Количество КАК ЧИСЛО(15, 2))
		|		КОНЕЦ,
		|		ПартииМатериаловВЭксплуатации.Номенклатура.ЕдиницаХраненияОстатков) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.НомерСтроки                                                      
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Стоимость)
		|ПО
		|	ОБЩИЕ";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК МатериалНаименование,
		|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК НоменклатурныйНомер,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
		|	ВложенныйЗапрос.Серия                КАК Серия,
		|	ВложенныйЗапрос.Количество           КАК Количество," + ?(Не ПечатьПоДаннымУпрУчета, "
		|	ВложенныйЗапрос.СчетПередачиБУ       КАК СчетПередачи,", "") + "
		|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки
		|ИЗ 
		|	(
		|	ВЫБРАТЬ
		|		Номенклатура                           КАК Номенклатура,
		|		ЕдиницаИзмерения                       КАК ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,", "") + "
		|		ХарактеристикаНоменклатуры	           КАК Характеристика,
		|		СерияНоменклатуры                      КАК Серия,
		|		СУММА(Количество)                      КАК Количество,
		|		МИНИМУМ(НомерСтроки) 		           КАК НомерСтроки
		|	ИЗ
		|		Документ.ПеремещениеМатериаловВЭксплуатации.Материалы КАК Док
		|	ГДЕ
		|		Док.Ссылка = &ТекущийДокумент
		|
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура,
		|		ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		СхемаНазначенияИспользования.СчетПередачиБУ,", "") + "
		|		ХарактеристикаНоменклатуры,
		|		СерияНоменклатуры
		|
		|	) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	ОБЩИЕ
		|";
		
	КонецЕсли;

	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеМатериаловВЭксплуатации_М11";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("М11");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.КодОперации = "Переміщення";	
	Область.Параметры.Основание = Основание;
	Область.Параметры.Кому = Кому;
	
	Если ПечатьПоДаннымУпрУчета Тогда
		
		Область.Параметры.ПредставлениеОрганизации = "Управлінський облік";
		Область.Параметры.Валюта                   = мВалютаУправленческогоУчета;
		
	Иначе
				
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
		СписокПоказателей = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.ДатаДокумента, СписокПоказателей);
		Область.Параметры.КодПоЕДРПОУ              = СписокПоказателей.КодПоЕДРПОУ;
		Область.Параметры.ПредставлениеОрганизации = Шапка.ОрганизацияНаименованиеПолное;
		Область.Параметры.Валюта                   = мВалютаРегламентированногоУчета;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(Область);
	
	ВысотаШапки   = ТабДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
	ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("R" + ВысотаШапки);
	ТабДокумент.ОбластьПечати            = ТабДокумент.Область("C2:C" + ШиринаТаблицы);
	
	ВыборкаОбщийИтог = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщийИтог.Следующий(); // получение общего итога
	
	ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
	ПараметрыПодвал = ОбластьПодвал.Параметры;
	
	Если Проведен Тогда
		
		ПрописьВалюты = ?(ПечатьПоДаннымУпрУчета, мВалютаУправленческогоУчета.ПараметрыПрописиНаУкраинском,
		                                          мВалютаРегламентированногоУчета.ПараметрыПрописиНаУкраинском);
		ПараметрыПодвал.ИтогоСуммаПрописью = ЧислоПрописью(ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаОбщийИтог.Стоимость),
		                                                   "Л=uk_UA;ДП=Истина;", ПрописьВалюты);
		
	КонецЕсли;
	
	ВыборкаПоСтрокам = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоВВыборке     = ВыборкаПоСтрокам.Количество();
	КоличествоОбработанных = 1;
	// В форме сказано "Кількість найменувань". Будет выводится количество позиций.
	ПараметрыПодвал.ИтогоКоличествоПрописью = ЧислоПрописью(КоличествоВВыборке, 
	                                                        "Л=uk_UA;НП=Ложь;НД=Ложь;", ",,,,,,,,0");
	
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) 
		                                         + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		
		Если КоличествоОбработанных = КоличествоВВыборке Тогда
			// Последняя запись. Ее не следует отрывать от подписей.
			
			МассивТаблиц = Новый Массив(2);
			МассивТаблиц[0] = Область;
			МассивТаблиц[1] = ОбластьПодвал;
			
			Если НЕ ТабДокумент.ПроверитьВывод(МассивТаблиц) Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Область);
        КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
	ОбластьПодвал.Параметры.ОтпускРазрешил = ОтпускРазрешил;
	ОбластьПодвал.Параметры.Сдал = Сдал;
	ОбластьПодвал.Параметры.Принял = Принял;
	ОтвЛица = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Организация, Дата);
	ОбластьПодвал.Параметры.Заполнить(ОтвЛица);
	
	ТабДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ11()

// Функция формирует печатную форму документа
//
Функция ПечатьМШ7(ПечатьПоДаннымУпрУчета = Истина, Сдача)

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	                       КАК НомерДокумента,
	|	Дата	                       КАК ДатаДокумента,
	|	Организация                    КАК Организация,
	|	Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	" + ?(ПечатьПоДаннымУпрУчета, "Подразделение", "ПодразделениеОрганизации")+" КАК ПредставлениеПодразделения
	|ИЗ
	|	Документ.ПеремещениеМатериаловВЭксплуатации КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если Сдача Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Номенклатура." + ТоварКод + "          КАК НоменклатурныйНомер,
		|	ВЫРАЗИТЬ(Док.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК МатериалНаименование,
		|	Док.ХарактеристикаНоменклатуры             КАК Характеристика,
		|	Док.СерияНоменклатуры                      КАК Серия,
		|	Док.ЕдиницаИзмерения.Код                   КАК ЕдиницаИзмеренияКод,
		|	Док.ЕдиницаИзмерения.Наименование          КАК ЕдиницаИзмеренияНаименование," + ?(Не ПечатьПоДаннымУпрУчета, "
		|	Док.СчетПередачиБУ                         КАК СчетПередачи,", "") + "
		|	Док.Количество                             КАК Количество,
		|	Док.ФизЛицо                                КАК Сотрудник,
		|	Док.ФизЛицо.Код                            КАК ТабельныйНомер,
		|	Док.ДатаДокумента                          КАК ДатаДокумента,
		|	Док.СрокСлужбы                             КАК СрокСлужбы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Док.Номенклатура                           КАК Номенклатура,
		|		Док.ХарактеристикаНоменклатуры             КАК ХарактеристикаНоменклатуры,
		|		Док.СерияНоменклатуры                      КАК СерияНоменклатуры,
		|		Док.ЕдиницаИзмерения                       КАК ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		Док.СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,", "") + "
		|		СУММА(Док.Количество)                      КАК Количество,
		|		МИНИМУМ(Док.НомерСтроки) 		           КАК НомерСтроки,
		|		Док.ФизЛицо                                КАК ФизЛицо,
		|		Док.Ссылка.Дата                            КАК ДатаДокумента,
		|		Док.СрокПолезногоИспользования КАК СрокСлужбы
		|	ИЗ
		|		Документ.ПеремещениеМатериаловВЭксплуатации.Материалы КАК Док
		|	ГДЕ
		|		Док.Ссылка = &ТекущийДокумент
		|
		|	СГРУППИРОВАТЬ ПО
		|		Док.Номенклатура,
		|		Док.ХарактеристикаНоменклатуры,
		|		Док.СерияНоменклатуры,
		|		Док.ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		Док.СхемаНазначенияИспользования.СчетПередачиБУ,", "") + "
		|		Док.ФизЛицо,
		|		Док.Ссылка.Дата,
		|		Док.СрокПолезногоИспользования) КАК Док
		|
		|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Номенклатура." + ТоварКод + "          КАК НоменклатурныйНомер,
		|	ВЫРАЗИТЬ(Док.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК МатериалНаименование,
		|	Док.ХарактеристикаНоменклатуры             КАК Характеристика,
		|	Док.СерияНоменклатуры                      КАК Серия,
		|	Док.ЕдиницаИзмерения.Код                   КАК ЕдиницаИзмеренияКод,
		|	Док.ЕдиницаИзмерения.Наименование          КАК ЕдиницаИзмеренияНаименование," + ?(Не ПечатьПоДаннымУпрУчета, "
		|	Док.СчетПередачиБУ                         КАК СчетПередачи,", "") + "
		|	Док.Количество                             КАК Количество,
		|	Док.ФизЛицо                                КАК Сотрудник,
		|	Док.ФизЛицо.Код                            КАК ТабельныйНомер,
		|	Док.ДатаДокумента                          КАК ДатаДокумента,
		|	Док.СрокСлужбы                             КАК СрокСлужбы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Док.Номенклатура                                КАК Номенклатура,
		|		Док.ХарактеристикаНоменклатуры                  КАК ХарактеристикаНоменклатуры,
		|		Док.СерияНоменклатуры                           КАК СерияНоменклатуры,
		|		Док.ЕдиницаИзмерения                            КАК ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		Док.СхемаНазначенияИспользованияНовое.СчетПередачиБУ КАК СчетПередачиБУ,", "") + "
		|		СУММА(Док.Количество)                           КАК Количество,
		|		МИНИМУМ(Док.НомерСтроки) 		                КАК НомерСтроки,
		|		Док.Ссылка.ФизЛицоКуда                          КАК ФизЛицо,
		|		Док.Ссылка.Дата                                 КАК ДатаДокумента,
		|		Док.СрокПолезногоИспользованияНовое КАК СрокСлужбы
		|	ИЗ
		|		Документ.ПеремещениеМатериаловВЭксплуатации.Материалы КАК Док
		|	ГДЕ
		|		Док.Ссылка = &ТекущийДокумент
		|
		|	СГРУППИРОВАТЬ ПО
		|		Док.Номенклатура,
		|		Док.ХарактеристикаНоменклатуры,
		|		Док.СерияНоменклатуры,
		|		Док.ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		Док.СхемаНазначенияИспользованияНовое.СчетПередачиБУ,", "") + "
		|		Док.Ссылка.ФизЛицоКуда,
		|		Док.Ссылка.Дата,
		|		Док.СрокПолезногоИспользованияНовое) КАК Док
		|
		|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР";
		
	КонецЕсли;

	ЗапросПоНоменклатуре = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеМатериаловВЭксплуатации_МШ7";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("МШ7");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.КодОперации = ?(Сдача, "Переміщення (сдача)", "Переміщення (видача)");	
	
	ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
	
	Если ПечатьПоДаннымУпрУчета Тогда
		
		Область.Параметры.ПредставлениеОрганизации = "Управлінський облік";
		
	Иначе
				
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
		СписокПоказателей = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.ДатаДокумента, СписокПоказателей);
		Область.Параметры.КодПоЕДРПОУ              = СписокПоказателей.КодПоЕДРПОУ;
		Область.Параметры.ПредставлениеОрганизации = Шапка.ОрганизацияНаименованиеПолное;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(Область);

	ВысотаШапки   = ТабДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
	ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("R" + ВысотаШапки);
	ТабДокумент.ОбластьПечати            = ТабДокумент.Область("C2:C" + ШиринаТаблицы);
	
	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоличествоВВыборке     = ВыборкаПоСтрокам.Количество();
	КоличествоОбработанных = 1;
	
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		Область.Параметры.НомерПП              = КоличествоОбработанных;
		
		Если КоличествоОбработанных = КоличествоВВыборке Тогда
			// Последняя запись. Ее не следует отрывать от подписей.
			
			МассивТаблиц = Новый Массив(2);
			МассивТаблиц[0] = Область;
			МассивТаблиц[1] = ОбластьПодвал;
			
			Если НЕ ТабДокумент.ПроверитьВывод(МассивТаблиц) Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Область);
        КоличествоОбработанных = КоличествоОбработанных + 1;

	КонецЦикла;

	// Вывод подвала
	ТабДокумент.Вывести(ОбластьПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьМШ7()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "МШ7упр" Тогда
		
		ТабДокумент = ПечатьМШ7(Истина, Истина);
		
	ИначеЕсли ИмяМакета = "МШ7упр" Тогда
		
		ТабДокумент = ПечатьМШ7(Истина, Ложь);
		
	ИначеЕсли ИмяМакета = "МШ7бух" Тогда
		
		ТабДокумент = ПечатьМШ7(Ложь, Истина);
		
	ИначеЕсли ИмяМакета = "МШ7бух" Тогда
		
		ТабДокумент = ПечатьМШ7(Ложь, Ложь);
		
	ИначеЕсли ИмяМакета = "М11упр" Тогда
		
		ТабДокумент = ПечатьМ11();
		
	ИначеЕсли ИмяМакета = "М11бух" Тогда
		
		ТабДокумент = ПечатьМ11(Ложь);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;	
	
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,
	ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка));
	
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечФорм = Новый Структура;
	Если ОтражатьВУправленческомУчете Тогда
		
		СтруктПечФорм.Вставить("МШ7упр", "Ведомость МШ-7 (упр. учет, сдача)");
		СтруктПечФорм.Вставить("МШ7упр", "Ведомость МШ-7 (упр. учет, выдача)");
		СтруктПечФорм.Вставить("М11упр", "Накладная M-11 (упр. учет)");
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктПечФорм.Вставить("МШ7бух", "Ведомость МШ-7 (бух. учет, сдача)");
		СтруктПечФорм.Вставить("МШ7бух", "Ведомость МШ-7 (бух. учет, выдача)");
		СтруктПечФорм.Вставить("М11бух", "Накладная M-11 (бух. учет)");
		
	КонецЕсли;

	Возврат СтруктПечФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
							   |ПодразделениеКуда, НадписьПодразделениеКуда";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "Организация, НадписьОрганизация,
	                           |ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
							   |ПодразделениеОрганизацииКуда, НадписьПодразделениеОрганизацииКуда";
	
	мСтрокаРеквизитыНалУчета = "";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "ФизЛицоКуда";
	ДополнитьРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Подразделение, ПодразделениеКуда";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Организация, ПодразделениеОрганизации, ПодразделениеОрганизацииКуда";
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция проверяет правильность заполнения документа
// Возврат - структура с данными шапки документа
//
Функция ПроверкаРеквизитов(Отказ, Заголовок) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	РеквизитыТЧ = "Номенклатура, Количество, ЕдиницаИзмерения, ФизЛицо, "
	              + "СхемаНазначенияИспользования, СпособОтраженияРасходов, СрокПолезногоИспользования, СхемаНазначенияИспользованияНовое, СпособОтраженияРасходовНовое, СрокПолезногоИспользованияНовое, Качество, КачествоНовое";
				  
	Если УказыватьДокументПередачи Тогда
		
		РеквизитыТЧ = РеквизитыТЧ + ?(ПустаяСтрока(РеквизитыТЧ),"",", ") 
	                  + "ДокументПередачи";
		
	КонецЕсли;
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧ, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "Материалы");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТЧ), Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Материалы", Материалы, Отказ, Заголовок);
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // ПроверкаРеквизитов()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл(СтруктураПолей)
	
	Если  ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СчетПередачиБУ"   , "СхемаНазначенияИспользования.СчетПередачиБУ");
		СтруктураПолей.Вставить("СчетАмортизацииБУ", "СхемаНазначенияИспользования.СчетАмортизацииБУ");
		
		СтруктураПолей.Вставить("СчетПередачиБУНовый"   , "СхемаНазначенияИспользованияНовое.СчетПередачиБУ");
		СтруктураПолей.Вставить("СчетАмортизацииБУНовый", "СхемаНазначенияИспользованияНовое.СчетАмортизацииБУ");
		
	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
					
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,  ТаблицаПоМатериалам, Отказ, Заголовок);
	ДвиженияПоРегиструСписанныеМатериалыИзЭксплуатации(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
	Если Не Отказ И НЕ СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		СпецодеждаИСпецоснастка.ДвижениеПартийМатериалов(Ссылка, Движения.СписанныеМатериалыИзЭксплуатации.Выгрузить(), Заголовок)
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	// МАТЕРИАЛЫ ПО РЕГИСТРУ МатериалыВЭксплуатации.
	НаборДвижений = Движения.МатериалыВЭксплуатации;
	
	// Проверка остатков при оперативном проведении.
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//////////////////
	// Движение расход
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
 	//////////////////
	// Движение приход
	ТаблицаПоМатериаламНовая = ТаблицаПоМатериалам.Скопировать();
	ТаблицаПоМатериаламНовая.ЗаполнитьЗначения(СтруктураШапкиДокумента.ФизЛицоКуда, "ФизЛицо");
	
	// удаление ненужных колонок
	ТаблицаПоМатериаламНовая.Колонки.Удалить(ТаблицаПоМатериаламНовая.Колонки.СхемаНазначенияИспользования);
	ТаблицаПоМатериаламНовая.Колонки.Удалить(ТаблицаПоМатериаламНовая.Колонки.Качество);
	ТаблицаПоМатериаламНовая.Колонки.Удалить(ТаблицаПоМатериаламНовая.Колонки.СпособОтраженияРасходов);
	ТаблицаПоМатериаламНовая.Колонки.Удалить(ТаблицаПоМатериаламНовая.Колонки.СрокПолезногоИспользования);
	
	// переименование колонок
	ТаблицаПоМатериаламНовая.Колонки.СхемаНазначенияИспользованияНовое.Имя 	= "СхемаНазначенияИспользования";
	ТаблицаПоМатериаламНовая.Колонки.КачествоНовое.Имя 						= "Качество";
	ТаблицаПоМатериаламНовая.Колонки.СпособОтраженияРасходовНовое.Имя 		= "СпособОтраженияРасходов";
	ТаблицаПоМатериаламНовая.Колонки.СрокПолезногоИспользованияНовое.Имя 	= "СрокПолезногоИспользования";
	
	// добавление колонок
	ТаблицаПоМатериаламНовая.Колонки.Добавить("ВидДвижения");
	ТаблицаПоМатериаламНовая.Колонки.Добавить("Подразделение");
	ТаблицаПоМатериаламНовая.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
	ТаблицаПоМатериаламНовая.ЗаполнитьЗначения(ПодразделениеКуда           , "Подразделение");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериаламНовая, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения( Дата  , "Период");
	ТаблицаДвижений.ЗаполнитьЗначения( Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийМатериалыВЭксплуатации.ПеремещениеВЭксплуатации,"КодОперации");
	
	Движения.МатериалыВЭксплуатации.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериалам)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат
		
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение    , "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеКуда, "ПодразделениеКуда");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр()

Процедура ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериалам)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Возврат
		
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете , "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация                 , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации    , "ПодразделениеОрганизации");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизацииКуда, "ПодразделениеОрганизацииКуда");
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл()

// Формирование движений по регистру СписанныеМатериалыИзЭксплуатации.
//
Процедура ДвиженияПоРегиструСписанныеМатериалыИзЭксплуатации(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда   
		Возврат;		                   
	КонецЕсли; 
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ СписанныеМатериалыИзЭксплуатации.
	НаборДвижений = Движения.СписанныеМатериалыИзЭксплуатации;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);
	
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатации, "КодОперации");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ФизЛицоКуда                                            , "ФизЛицоКуда");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.УказыватьДокументПередачи                              , "УказыватьДокументПередачи");
    	
	ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериалам);
	ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериалам);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		
		Движения.СписанныеМатериалыИзЭксплуатации.ВыполнитьДвижения();
		// необходимо записать для формирования списания партий
		Движения.СписанныеМатериалыИзЭксплуатации.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеМатериалыИзЭксплуатации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПОДГОТОВКИ ТАБЛИЦ ЗНАЧЕНИЙ ДЛЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Материалы",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ТаблицаМатериалов = РезультатЗапросаПоМатериалам.Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаМатериалов Цикл
	
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                                """ табличной части ""Материалы"": ";
										
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидМатериала) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "В назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользования 
								 + "> не выбран ""Вид материала"".",
								 Отказ, Заголовок);
				
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидМатериалаНового) Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
					                 + "В новом назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользованияНовое 
									 + "> не выбран ""Вид материала"".",
									 Отказ, Заголовок);
			Иначе		
											
				Если СтрокаТЧ.ВидМатериала <> СтрокаТЧ.ВидМатериалаНового Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
					                 + "Вид материала нового назначения использования <" + СтрокаТЧ.ВидМатериалаНового 
									 + "> не соответствует виду материала старого назначения использования <" + СтрокаТЧ.ВидМатериала + ">.",
									 Отказ, Заголовок);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетПередачиБУ) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "В назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользования 
								 + "> не выбран ""Счет передачи"".",
								 Отказ, Заголовок);
				
			КонецЕсли;
			
			Если (СтрокаТЧ.ВидМатериала <> Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет)
				  И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетАмортизацииБУ) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "В назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользования 
								 + "> не выбран ""Счет амортизации"".",
								 Отказ, Заголовок);
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетПередачиБУНовый) Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
					                 + "В новом назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользованияНовое 
									 + "> не выбран ""Счет передачи"".",
									 Отказ, Заголовок);
					
					
			КонецЕсли;
			
			Если (СтрокаТЧ.ВидМатериалаНового <> Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет)
				  И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетАмортизацииБУНовый) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "В новом назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользованияНовое 
								 + "> не выбран ""Счет амортизации"".",
								 Отказ, Заголовок);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначение) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "Не заполнено ""Налоговое назначение"".",
								 Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуМатериалов()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = ПроверкаРеквизитов(Отказ, Заголовок);
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// первый этап проверки закончен
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	// Подготовим таблицу материалов для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        				, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              				, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               				, "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"          				, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"		, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         		, "СерияНоменклатуры");
	
	СтруктураПолей.Вставить("ФизЛицо"         					, "ФизЛицо");
	СтруктураПолей.Вставить("СхемаНазначенияИспользования"      , "СхемаНазначенияИспользования");
	СтруктураПолей.Вставить("ВидМатериала"                  	, "СхемаНазначенияИспользования.ВидМатериала");
	СтруктураПолей.Вставить("СпособОтраженияРасходов"	        , "СпособОтраженияРасходов");
	СтруктураПолей.Вставить("СрокПолезногоИспользования"	    , "СрокПолезногоИспользования");
	СтруктураПолей.Вставить("СхемаНазначенияИспользованияНовое" , "СхемаНазначенияИспользованияНовое");
	СтруктураПолей.Вставить("ВидМатериалаНового"               	, "СхемаНазначенияИспользованияНовое.ВидМатериала");
	СтруктураПолей.Вставить("СпособОтраженияРасходовНовое"	    , "СпособОтраженияРасходовНовое");
	СтруктураПолей.Вставить("СрокПолезногоИспользованияНовое"	, "СрокПолезногоИспользованияНовое");
	СтруктураПолей.Вставить("СпособОтраженияРасходовНовый"     	, "СпособОтраженияРасходовНовое");
	
	СтруктураПолей.Вставить("ДокументПередачи"              	, "ДокументПередачи");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"              	, "НалоговоеНазначение");
	
	СтруктураПолей.Вставить("Качество"         					, "Качество");
	СтруктураПолей.Вставить("КачествоНовое"         			, "КачествоНовое");
	СтруктураПолей.Вставить("НомерСтроки"         				, "НомерСтроки");
	
	ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл(СтруктураПолей);	
	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);
	ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	КонецЕсли;
	
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам));
	
	
КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события ОбработкаЗаполнения
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
		
		// Заполнение шапки
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		Организация                  = Основание.Организация;
		Подразделение                = Основание.Подразделение;
		ПодразделениеОрганизации     = Основание.ПодразделениеОрганизации;
		ПодразделениеКуда            = Основание.Подразделение;
		ПодразделениеОрганизацииКуда = Основание.ПодразделениеОрганизации;
		Комментарий                  = Основание.Комментарий;
		Ответственный                = Основание.Ответственный;
		УказыватьДокументПередачи    = Истина;
		
		Для Каждого ТекСтрокаМатериалы Из Основание.Материалы Цикл
			
			НоваяСтрока = Материалы.Добавить();
			
			НоваяСтрока.Номенклатура               = ТекСтрокаМатериалы.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаМатериалы.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаМатериалы.СерияНоменклатуры;
			
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаМатериалы.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаМатериалы.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаМатериалы.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаМатериалы.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаМатериалы.Коэффициент;
			НоваяСтрока.Качество                   = ТекСтрокаМатериалы.Качество;
			НоваяСтрока.КачествоНовое              = ТекСтрокаМатериалы.Качество;
			
			НоваяСтрока.ФизЛицо 				     = ТекСтрокаМатериалы.ФизЛицо;
			
			НоваяСтрока.СхемаНазначенияИспользования      	= ТекСтрокаМатериалы.СхемаНазначенияИспользования;
			НоваяСтрока.СхемаНазначенияИспользованияНовое 	= ТекСтрокаМатериалы.СхемаНазначенияИспользования;
			
			НоваяСтрока.СпособОтраженияРасходов      		= ТекСтрокаМатериалы.СпособОтраженияРасходов;
			НоваяСтрока.СпособОтраженияРасходовНовое 		= ТекСтрокаМатериалы.СпособОтраженияРасходов;
			
			НоваяСтрока.СрокПолезногоИспользования      	= ТекСтрокаМатериалы.СрокПолезногоИспользования;
			НоваяСтрока.СрокПолезногоИспользованияНовое 	= ТекСтрокаМатериалы.СрокПолезногоИспользования;
			
			НоваяСтрока.ДокументПередачи = Основание;
			
			НоваяСтрока.НалоговоеНазначение 	= ТекСтрокаМатериалы.НалоговоеНазначение;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	// очистка не используемых полей	
	Если Не УказыватьДокументПередачи Тогда
		
		Для каждого СтрокаТЧ Из Материалы Цикл
		
			СтрокаТЧ.ДокументПередачи = Неопределено;	
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Материалы  	// ТабличнаяЧастьТовары
		);
		
	КонецЕсли; 
	
	
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
