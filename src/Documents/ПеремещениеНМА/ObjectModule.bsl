Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с типовой печатной формой НА-1
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНА1()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПринятиеКУчетуНМА.Организация                               КАК Организация,
	|	ПринятиеКУчетуНМА.Организация.НаименованиеПолное            КАК НаименованиеПолноеОрганизации,
	|	ПринятиеКУчетуНМА.Дата                                      КАК ДатаДок,
	|	ПринятиеКУчетуНМА.Номер                                     КАК НомерДок,
	|	ПринятиеКУчетуНМА.НематериальныйАктив.НаименованиеПолное    КАК НаименованиеПолное,
	|	ПринятиеКУчетуНМА.НематериальныйАктив.ПрочиеСведения        КАК ПрочиеСведения,
	|	ПринятиеКУчетуНМА.НематериальныйАктив.Код                   КАК ИнвентарныйНомер,
	|	ПринятиеКУчетуНМА.СчетУчетаБУ                               КАК СчетУчетаБУ,
	|	ПринятиеКУчетуНМА.СчетУчетаБУВнеоборотногоАктива            КАК СчетУчетаБУВнеоборотногоАктива,
	|	ПринятиеКУчетуНМА.СтоимостьБУ                               КАК ПервоначальнаяСтоимость,
	|	ПринятиеКУчетуНМА.СрокПолезногоИспользованияБУ              КАК СрокИспользования,
	|	ПринятиеКУчетуНМА.ЛиквидационнаяСтоимостьБУ                 КАК ЛиквидационнаяСтоимость
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА КАК ПринятиеКУчетуНМА
	|ГДЕ
	|	ПринятиеКУчетуНМА.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуНМА_НА1";
	Макет         = ПолучитьМакет("НА1");
	
	ОбластьМакета = Макет.ПолучитьОбласть("НА1");
	Параметры     = ОбластьМакета.Параметры;
	
	Если Выборка.Следующий() И (Выборка.СрокИспользования <> 0) Тогда
		
		Параметры.ГодичнаяСуммаАмортизации = 12 * (Выборка.ПервоначальнаяСтоимость 
												   - Выборка.ЛиквидационнаяСтоимость)
											 / Выборка.СрокИспользования;
	Иначе
		
		Параметры.ГодичнаяСуммаАмортизации = 0;
		
	КонецЕсли;
	
	Параметры.Заполнить(Выборка);
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
	СписокПоказателей.Добавить("", "ФИОРук");
	СписокПоказателей.Добавить("", "ФИОБух");
	СписокПоказателей     = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, Дата, СписокПоказателей);
	Параметры.КодПоЕДРПОУ = СписокПоказателей.КодПоЕДРПОУ;
	Параметры.ФИОРук      = ОбщегоНазначения.ФамилияИнициалыФизЛица(СписокПоказателей.ФИОРук);
	Параметры.ФИОБух      = ОбщегоНазначения.ФамилияИнициалыФизЛица(СписокПоказателей.ФИОБух);
	
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ОбластьПечати = ТабДокумент.Область( , 2, , ТабДокумент.ШиринаТаблицы);

	Возврат ТабДокумент;

КонецФункции // ПечатьНА1()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "НА1" тогда
		ТабДокумент = ПечатьНА1();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	//СтруктураМакетов.Вставить("НА1","Форма НА-1");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "МОЛ,
								|Подразделение";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()


	мСтрокаРеквизитыБухУчета =  "ПодразделениеОрганизации,
								|МОЛОрганизации";
	мСтрокаРеквизитыНалУчета = "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА,Отказ, Заголовок)
	
	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаДока = Дата;

	МестонахождениеНМА = Движения.МестонахождениеНМА;

	Для каждого СтрокаТЧ Из ТаблицаПоНМА Цикл
		
		Движение = МестонахождениеНМА.Добавить();
		Движение.Период           = ДатаДока;
		Движение.НематериальныйАктив = СтрокаТЧ.НематериальныйАктив;
		Движение.МОЛ              = СтруктураШапкиДокумента.МОЛ;
		Движение.Местонахождение  = СтруктураШапкиДокумента.Подразделение;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаДока = Дата;
	
	МестонахождениеНМАОрганизаций = Движения.МестонахождениеНМАБухгалтерскийУчет;
	
	Для каждого СтрокаТЧ Из ТаблицаПоНМА Цикл
		
		Движение = МестонахождениеНМАОрганизаций.Добавить();
		Движение.Период           = ДатаДока;
		Движение.НематериальныйАктив = СтрокаТЧ.НематериальныйАктив;
		Движение.Организация      = СтруктураШапкиДокумента.Организация;
		Движение.МОЛ              = СтруктураШапкиДокумента.МОЛОрганизации;
		Движение.Местонахождение  = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок)

    СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("НематериальныйАктив");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок)
	
	//Проверка на наличие нематериальных активов
	Для каждого СтрокаТЧ Из НематериальныеАктивы Цикл
		
		ТекНМА          = СтрокаТЧ.НематериальныйАктив;
		СтрокаОстатков = ТаблицаОстатков.Найти(ТекНМА, "НМА_УУ");
		
		Если СтрокаОстатков = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
			                    + "Упр.учет: По нематериальному активу """ + ТекНМА + """ нет записей до даты документа"
			                    + Символы.ПС + Символы.Таб + "в регистре сведений ""Местонахождение нематериальных активов""."
			                    + Символы.ПС + Символы.Таб + "Возможно оно еще не принято к управленческому учету.",
			                    Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок)

	ТекОрганизация =  СтруктураШапкиДокумента.Организация;
	
	//Проверка на наличие нематериальных активов
	Для каждого СтрокаТЧ Из НематериальныеАктивы Цикл
		
		ТекНМА          = СтрокаТЧ.НематериальныйАктив;
		СтрокаОстатков = ТаблицаОстатков.Найти(ТекНМА, "НМА_БУ");
		
		Если СтрокаОстатков = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
			                    + "Бух.учет: Организация """ + ТекОрганизация + """. По нематериальному активу """ + ТекНМА + """ нет записей до даты документа"
			                    + Символы.ПС + Символы.Таб + "в регистре сведений ""Местонахождение нематериальных активов организаций""."
			                    + Символы.ПС + Символы.Таб + "Возможно оно еще не принято к бухгалтерскому учету.",
			                    Отказ, Заголовок);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Подразделение");
	СтруктураПолей.Вставить("МОЛ");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок);

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового (в общем регламентного) учета
Процедура ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ) Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("ПодразделениеОрганизации");
	СтруктураПолей.Вставить("МОЛОрганизации");


	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НематериальныйАктив", "НематериальныйАктив");
	
	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей);
	ТаблицаПоНМА          = РезультатЗапросаПоНМА.Выгрузить();
	СписокНМА             = ТаблицаПоНМА.ВыгрузитьКолонку("НематериальныйАктив");
	ТекОрганизация       = СтруктураШапкиДокумента.Организация;
	Упр                  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бухг                 = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	//Проверка на наличие нематериальных активов
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата",        МоментВремени());
	Запрос.УстановитьПараметр("СписокНМА",       СписокНМА);
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
	|	МестонахождениеНМА_УУ.НематериальныйАктив            КАК НМА_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
	|	МестонахождениеНМА_БУ.НематериальныйАктив КАК НМА_БУ", "") + "
	|ИЗ" + ?(Упр,"
	|	РегистрСведений.МестонахождениеНМА.СрезПоследних(&ТекДата, 
	|	                НематериальныйАктив В (&СписокНМА)
	|	                ) КАК МестонахождениеНМА_УУ", "") + ?(Упр и Бухг,"
	|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг,"
	|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(&ТекДата, 
	|	                НематериальныйАктив В (&СписокНМА)
	|	                И Организация = &ТекОрганизация
	|	                ) КАК МестонахождениеНМА_БУ", "") + ?(Упр и Бухг,"
	|		ПО МестонахождениеНМА_УУ.НематериальныйАктив = МестонахождениеНМА_БУ.НематериальныйАктив", "");
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок);

	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоНМА, "Нематериальные активы", "НематериальныйАктив", "Нематериальный актив", Отказ, Заголовок);	
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА,Отказ, Заголовок);
	КонецЕсли;


КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
              	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
	
	
мВалютаРегламентированногоУчета  = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета      = глЗначениеПеременной("ВалютаУправленческогоУчета");