Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой ОЗ-1,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОЗ1(ПечатьПоДаннымУпрУчета = Истина)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",         Ссылка);
	Запрос.УстановитьПараметр("ТекДата",        МоментВремени());
	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеОС.Дата                                  КАК ДатаАкта,
	|	ПеремещениеОС.Номер                                 КАК НомерАкта," 
	+ ?(ПечатьПоДаннымУпрУчета,"
	|	ПеремещениеОС.Подразделение.Наименование КАК ПринялоПодразделение"
	 ,"
	|	ПеремещениеОС.ПодразделениеОрганизации.Наименование КАК ПринялоПодразделение,
	|	ВЫРАЗИТЬ(ПеремещениеОС.Организация.НаименованиеПолное 
	|	                    КАК СТРОКА(1000))     КАК Организация,
	|	КодыОрганизации.КодПоЕДРПОУ               КАК ЕДРПОУ"
	 ) + "
	|ИЗ
	|	Документ.ПеремещениеОС КАК ПеремещениеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ТекДата,
	|		                                 Организация = &ТекОрганизация) КАК КодыОрганизации
	|		ПО ПеремещениеОС.Организация = КодыОрганизации.Организация
	|
	|ГДЕ
	|	ПеремещениеОС.Ссылка = &Ссылка";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка"        , Ссылка);
	Запрос.УстановитьПараметр("СписокОС"      , СписокОС);
	Запрос.УстановитьПараметр("ТекДата"       , Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	Запрос.УстановитьПараметр("СостояниеВвода", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	
	Если ПечатьПоДаннымУпрУчета Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ПеремещениеОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
		|	ПеремещениеОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	ПеремещениеОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	ПеремещениеОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
		|	ПеремещениеОСОС.ОсновноеСредство.Код КАК ИнвентарныйНомер,
		|	МестонахождениеОС.МОЛ.Код КАК КодМОЛа,
		|	МестонахождениеОС.Местонахождение.Представление КАК СдалоПодразделение,
		|	ПеремещениеОСОС.Ссылка.Подразделение КАК ПринялоПодразделение,
		|	СостоянияОС.ДатаСостояния КАК ДатаВвода
		|ИЗ
		|	Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&ТекДата, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведения
		|		ПО ПеремещениеОСОС.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|		&ТекДата,
		|		ОсновноеСредство В (&СписокОС)
		|		    И Организация = &ТекОрганизация) КАК НаправленияАмортизации
		|		ПО ПеремещениеОСОС.ОсновноеСредство = НаправленияАмортизации.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&ТекДата, ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|		ПО ПеремещениеОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
		|			СостоянияОС.ДатаСостояния КАК ДатаСостояния
		|		ИЗ
		|			РегистрСведений.СостоянияОС КАК СостоянияОС
		|		ГДЕ
		|			СостоянияОС.Состояние = &СостояниеВвода
		|			И СостоянияОС.ОсновноеСредство В(&СписокОС)) КАК СостоянияОС
		|		ПО ПеремещениеОСОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
		|ГДЕ
		|	ПеремещениеОСОС.Ссылка = &Ссылка";	
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияБУ.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ПервоначальныеСведенияБУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетКт,
		|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетДт,
		|	ПеремещениеОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
		|	ПеремещениеОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	ПеремещениеОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	ПеремещениеОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
		|	МестонахождениеОС.МОЛ.Код КАК КодМОЛа,
		|	МестонахождениеОС.Местонахождение.Представление КАК СдалоПодразделение,
		|	ПеремещениеОСОС.Ссылка.ПодразделениеОрганизации КАК ПринялоПодразаделение,
		|	СостоянияОС.ДатаСостояния КАК ДатаВвода
		|ИЗ
		|	Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|		&ТекДата,
		|		ОсновноеСредство В (&СписокОС)
		|		    И Организация = &ТекОрганизация) КАК ПервоначальныеСведенияБУ
		|		ПО ПеремещениеОСОС.ОсновноеСредство = ПервоначальныеСведенияБУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
		|		&ТекДата,
		|		ОсновноеСредство В (&СписокОС)
		|		    И Организация = &ТекОрганизация) КАК СчетаБухгалтерскогоУчетаОС
		|		ПО ПеремещениеОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|		&ТекДата,
		|		Организация = &ТекОрганизация
		|			И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|		ПО ПеремещениеОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
		|			СостоянияОС.ДатаСостояния КАК ДатаСостояния
		|		ИЗ
		|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
		|		ГДЕ
		|			СостоянияОС.Организация = &ТекОрганизация
		|			И СостоянияОС.Состояние = &СостояниеВвода
		|			И СостоянияОС.ОсновноеСредство В(&СписокОС)) КАК СостоянияОС
		|		ПО ПеремещениеОСОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
		|ГДЕ
		|	ПеремещениеОСОС.Ссылка = &Ссылка";
		
	КонецЕсли;
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеОС_ОЗ1";
	Макет         = ПолучитьОбщийМакет("ОЗ1");

	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	Пока ВыборкаПоОС.Следующий() Цикл

		ОбластьМакета = Макет.ПолучитьОбласть("ОЗ1");
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);

		Если ПечатьПоДаннымУпрУчета Тогда
			
			 ОбластьМакета.Параметры.Организация = "Управліньский облік";
			 ОбластьМакета.Параметры.Валюта      = мВалютаУправленческогоУчета;
			 
		 Иначе
			 
			 ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
			 ОбластьМакета.Параметры.Валюта = мВалютаРегламентированногоУчета;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		ОбластьМакета.Параметры.ВидОперации = "Внутр. перемі-" + Символы.ПС +"щення";
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоКомиссии);
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	ТабДокумент.ОбластьПечати = ТабДокумент.Область(2, 2, ТабДокумент.ВысотаТаблицы, ТабДокумент.ШиринаТаблицы);
	Возврат ТабДокумент;
	
КонецФункции // ПечатьОЗ1()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОЗ1упр" тогда
		ТабДокумент = ПечатьОЗ1();
	ИначеЕсли ИмяМакета = "ОЗ1бух" тогда
		ТабДокумент = ПечатьОЗ1(Ложь);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	Если  ОтражатьВУправленческомУчете тогда 
		СтруктураМакетов.Вставить("ОЗ1упр","Форма ОЗ-1 (упр. учет)");
	КонецЕсли;
	Если  ОтражатьВБухгалтерскомУчете тогда 
		СтруктураМакетов.Вставить("ОЗ1бух","Форма ОЗ-1 (бух. учет)");
	КонецЕсли;
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "МОЛ,
								|Подразделение,
								|Событие";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()


	мСтрокаРеквизитыБухУчета =  "ПодразделениеОрганизации,
								|МОЛОрганизации,
								|СобытиеРегл";
	мСтрокаРеквизитыНалУчета = "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок)
	
	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаДока = Дата;

	МестонахождениеОС = Движения.МестонахождениеОС;
	СобытиеОС	      = Движения.СобытияОС;

	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		Движение = МестонахождениеОС.Добавить();
		Движение.Период           = ДатаДока;
		Движение.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
		Движение.МОЛ              = СтруктураШапкиДокумента.МОЛ;
		Движение.Местонахождение  = СтруктураШапкиДокумента.Подразделение;
		
		Движение = СобытиеОС.Добавить();
		Движение.Период            = ДатаДока;
		Движение.ОсновноеСредство  = СтрокаТЧ.ОсновноеСредство;
		Движение.Событие           = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента = Метаданные().Представление();
		Движение.НомерДокумента    = Номер;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаДока = Дата;
	
	СобытиеОСБух             	 = Движения.СобытияОСОрганизаций;
	МестонахождениеОСОрганизаций = Движения.МестонахождениеОСБухгалтерскийУчет;
	АрендаОС                     = Движения.АрендаОС;
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		Движение = МестонахождениеОСОрганизаций.Добавить();
		Движение.Период           = ДатаДока;
		Движение.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация      = СтруктураШапкиДокумента.Организация;
		Движение.МОЛ              = СтруктураШапкиДокумента.МОЛОрганизации;
		Движение.Местонахождение  = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		
		Движение = СобытиеОСБух.Добавить();
		Движение.Период                   = ДатаДока;
		Движение.ОсновноеСредство         = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация         	  = СтруктураШапкиДокумента.Организация;
		Движение.Событие                  = СтруктураШапкиДокумента.СобытиеРегл;
		Движение.НазваниеДокумента 		  = Метаданные().Представление();
		Движение.НомерДокумента    		  = Номер;
        
	КонецЦикла;
    
    //ИЗМЕНЕНО Верескул Игорь(Начало 02.05.2019
    ЗапросПоСотрудникам = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
                                       |    СотрудникиОрганизаций.Ссылка КАК Сотрудник
                                       |ИЗ
                                       |    Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
                                       |ГДЕ
                                       |    СотрудникиОрганизаций.Актуальность = ИСТИНА
                                       |    И СотрудникиОрганизаций.Физлицо = &Физлицо");
    ЗапросПоСотрудникам.УстановитьПараметр("Физлицо", СтруктураШапкиДокумента.МОЛОрганизации);
    
    ВыборкаПоСотрудникам = ЗапросПоСотрудникам.Выполнить().Выбрать();
    Если ВыборкаПоСотрудникам.Следующий() Тогда
    	Сотрудник = ВыборкаПоСотрудникам.Сотрудник;
    КонецЕсли;
    ЗапросПоАренде = Новый Запрос("ВЫБРАТЬ
                                  | АрендаОСОстатки.Организация,
                                  | АрендаОСОстатки.Контрагент,
                                  | АрендаОСОстатки.Договор,
                                  | АрендаОСОстатки.ОсновноеСредство,
                                  | АрендаОС.МестонахождениеОС,
                                  | АрендаОСОстатки.КоличествоОстаток,
                                  | АрендаОСОстатки.БалансоваяСтоимостьОстаток,
                                  | АрендаОС.ИнвентарныйНомер,
                                  | АрендаОС.НаличиеДокументов,
                                  | АрендаОСОстатки.МОЛ
                                  |ИЗ
                                  | РегистрНакопления.АрендаОС.Остатки(
                                  |         &Дата,
                                  |         Организация = &Организация
                                  |             И ОсновноеСредство = &ОсновноеСредство) КАК АрендаОСОстатки
                                  |     ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.АрендаОС КАК АрендаОС
                                  |     ПО АрендаОСОстатки.Организация = АрендаОС.Организация
                                  |         И АрендаОСОстатки.Контрагент = АрендаОС.Контрагент
                                  |         И АрендаОСОстатки.Договор = АрендаОС.Договор
                                  |         И АрендаОСОстатки.ОсновноеСредство = АрендаОС.ОсновноеСредство
                                  |         И АрендаОСОстатки.МОЛ = АрендаОС.МОЛ");
    ЗапросПоАренде.УстановитьПараметр("Дата",ДатаДока);
    ЗапросПоАренде.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
    Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
        ЗапросПоАренде.УстановитьПараметр("ОсновноеСредство",СтрокаТЧ.ОсновноеСредство);
        ВыборкаПоАренде = ЗапросПоАренде.Выполнить().Выбрать();
        Если ВыборкаПоАренде.Следующий() Тогда
            Движение = АрендаОС.Добавить();
            Движение.Период                   = ДатаДока;
            Движение.ОсновноеСредство         = СтрокаТЧ.ОсновноеСредство;
            Движение.Организация         	  = СтруктураШапкиДокумента.Организация;                
            Движение.ВидДвижения              = ВидДвиженияНакопления.Расход;
            Движение.Контрагент               = ВыборкаПоАренде.Контрагент;
            Движение.Договор                  = ВыборкаПоАренде.Договор;
            Движение.МестонахождениеОС        = ВыборкаПоАренде.МестонахождениеОС;
            Движение.Количество               = ВыборкаПоАренде.КоличествоОстаток;
            Движение.БалансоваяСтоимость      = ВыборкаПоАренде.БалансоваяСтоимостьОстаток;
            Движение.МОЛ                      = ВыборкаПоАренде.МОЛ;
            Движение.ИнвентарныйНомер         = ВыборкаПоАренде.ИнвентарныйНомер; 
            Движение.НаличиеДокументов        = ВыборкаПоАренде.НаличиеДокументов;
            
            Движение = АрендаОС.Добавить();
            Движение.Период                   = ДатаДока;
            Движение.ОсновноеСредство         = СтрокаТЧ.ОсновноеСредство;
            Движение.Организация         	  = СтруктураШапкиДокумента.Организация;
            Движение.ВидДвижения              = ВидДвиженияНакопления.Приход;
            Движение.Контрагент               = ВыборкаПоАренде.Контрагент;
            Движение.Договор                  = ВыборкаПоАренде.Договор;
            Движение.МестонахождениеОС        = ВыборкаПоАренде.МестонахождениеОС;
            Движение.Количество               = ВыборкаПоАренде.КоличествоОстаток;
            Движение.БалансоваяСтоимость      = ВыборкаПоАренде.БалансоваяСтоимостьОстаток;
            Движение.МОЛ                      = Сотрудник;
            Движение.ИнвентарныйНомер         = ВыборкаПоАренде.ИнвентарныйНомер; 
            Движение.НаличиеДокументов        = ВыборкаПоАренде.НаличиеДокументов;
        КонецЕсли; 
    КонецЦикла;
    
    //Окончание)Верескул Игорь 
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок)

    СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ОсновноеСредство");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок)
	
	//Проверка на наличие основных средств
	Для каждого СтрокаТЧ Из ОС Цикл
		
		ТекОС          = СтрокаТЧ.ОсновноеСредство;
		СтрокаОстатков = ТаблицаОстатков.Найти(ТекОС, "ОС_УУ");
		
		Если СтрокаОстатков = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
			                    + "Упр.учет: По основному средству """ + ТекОс + """ нет записей до даты документа"
			                    + Символы.ПС + Символы.Таб + "в регистре сведений ""Местонахождение основных средств организаций""."
			                    + Символы.ПС + Символы.Таб + "Возможно оно еще не принято к управленческому учету.",
			                    Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок)

	ТекОрганизация =  СтруктураШапкиДокумента.Организация;
	
	//Проверка на наличие основных средств
	Для каждого СтрокаТЧ Из ОС Цикл
		
		ТекОС          = СтрокаТЧ.ОсновноеСредство;
		СтрокаОстатков = ТаблицаОстатков.Найти(ТекОС, "ОС_БУ");
		
		Если СтрокаОстатков = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
			                    + "Бух.учет: Организация """ + ТекОрганизация + """. По основному средству """ + ТекОс + """ нет записей до даты документа"
			                    + Символы.ПС + Символы.Таб + "в регистре сведений ""Местонахождение основных средств организаций""."
			                    + Символы.ПС + Символы.Таб + "Возможно оно еще не принято к бухгалтерскому учету.",
			                    Отказ, Заголовок);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Подразделение");
	СтруктураПолей.Вставить("МОЛ");
	СтруктураПолей.Вставить("Событие");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
							  Перечисления.ВидыСобытийОС.ВнутреннееПеремещение,
							  ПредставлениеРеквизита,Отказ);
							  
	ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок);

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового (в общем регламентного) учета
Процедура ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ) Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("ПодразделениеОрганизации");
	СтруктураПолей.Вставить("МОЛОрганизации");
	СтруктураПолей.Вставить("СобытиеРегл");


	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	СписокОС             = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	ТекОрганизация       = СтруктураШапкиДокумента.Организация;
	Упр                  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бухг                 = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	//Проверка на наличие основных средств
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата",        МоментВремени());
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
	|	МестонахождениеОС_УУ.ОсновноеСредство            КАК ОС_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
	|	МестонахождениеОС_БУ.ОсновноеСредство КАК ОС_БУ", "") + "
	|ИЗ" + ?(Упр,"
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(&ТекДата, 
	|	                ОсновноеСредство В (&СписокОС)
	|	                ) КАК МестонахождениеОС_УУ", "") + ?(Упр и Бухг,"
	|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг,"
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ТекДата, 
	|	                ОсновноеСредство В (&СписокОС)
	|	                И Организация = &ТекОрганизация
	|	                ) КАК МестонахождениеОС_БУ", "") + ?(Упр и Бухг,"
	|		ПО МестонахождениеОС_УУ.ОсновноеСредство = МестонахождениеОС_БУ.ОсновноеСредство", "");
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок);

	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок);
	КонецЕсли;


КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
              	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры
	
	
мВалютаРегламентированногоУчета  = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета      = глЗначениеПеременной("ВалютаУправленческогоУчета");