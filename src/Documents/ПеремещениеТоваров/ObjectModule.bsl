Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мСчета003_01 Экспорт;

Перем мРазрешитьНулевыеЦеныВРознице Экспорт;
Перем ИспользоватьРегистрСвободныеОстатки;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция печатает ценники.
//
Функция ПечатьЦенников()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК Печать,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	0 КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Док
	|");

	Запрос.УстановитьПараметр("Док", Ссылка);

	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
	ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);

	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецФункции // ПечатьЦенников()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()

	ОбработкаПечати          = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	ОбработкаПечати.Документ = ЭтотОбъект.Ссылка;

	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Функция осуществляет печать этикеток для позиций ТЧ
//
// Параметры
//  Нет
//
Процедура ПечататьЭтикетки()

	Перем Результат;
	Перем Позиция;
	Перем КНовый;
	Перем Запрос;
	Перем Товар;

	Позиции = Новый ТаблицаЗначений();
	КНовый  = Справочники.Качество.Новый;
	Запрос  = Новый Запрос(
	"ВЫБРАТЬ
	|	РегШК.ТипШтрихкода КАК ТипШтрихкода,
	|	РегШК.Штрихкод     КАК Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК РегШК
	|ГДЕ
	|	  РегШК.Владелец                   = &Владелец
	|	И РегШК.ЕдиницаИзмерения           = &ЕдиницаИзмерения
	|	И РегШК.ХарактеристикаНоменклатуры = &Характеристика
	|	И РегШК.СерияНоменклатуры          = &Серия
	|	И РегШК.Качество                   = &Качество");

	Позиции.Колонки.Добавить("Количество");
	Позиции.Колонки.Добавить("ТипШтрихкода");
	Позиции.Колонки.Добавить("Штрихкод");
	Позиции.Колонки.Добавить("Номенклатура");
	Позиции.Колонки.Добавить("ЕдиницаИзмерения");
	Позиции.Колонки.Добавить("Характеристика");
	Позиции.Колонки.Добавить("Серия");
	Позиции.Колонки.Добавить("Качество");
	Позиции.Колонки.Добавить("Цена");
	Позиции.Колонки.Добавить("Валюта");
	Позиции.Колонки.Добавить("ЦеныЕдиница");
	Позиции.Колонки.Добавить("ПроцентСкидкиНаценки");

	Для Каждого Товар Из Товары Цикл
		Запрос.УстановитьПараметр("Владелец",         Товар.Номенклатура);
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", Товар.ЕдиницаИзмерения);
		Запрос.УстановитьПараметр("Характеристика",   Товар.ХарактеристикаНоменклатуры);
		Запрос.УстановитьПараметр("Серия",            Товар.СерияНоменклатуры);
		Запрос.УстановитьПараметр("Качество",         КНовый);

		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;

		Результат                    = Результат.Выгрузить()[0];
		Позиция                      = Позиции.Добавить();
		Позиция.Количество           = Товар.Количество;
		Позиция.ТипШтрихкода         = Результат.ТипШтрихкода;
		Позиция.Штрихкод             = Результат.Штрихкод;
		Позиция.Номенклатура         = Товар.Номенклатура;
		Позиция.ЕдиницаИзмерения     = Товар.ЕдиницаИзмерения;
		Позиция.Характеристика       = Товар.ХарактеристикаНоменклатуры;
		Позиция.Серия                = Товар.СерияНоменклатуры;
		Позиция.Качество             = КНовый;
		Позиция.Цена                 = Товар.Цена;
	КонецЦикла;

	УправлениеРозничнойТорговлей.ПечатьЭтикеток(Позиции);

КонецПроцедуры // ПечататьЭтикетки()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  ИмяМакета - Имя макета для печати.
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(ИмяМакета, НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, ИмяМакета, , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(Нстр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(Нстр("ru = 'Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "1Т"
		  ИЛИ ИмяМакета = "_1Т" Тогда

		ТабДокумент = ПечатьТТН();
		
	ИначеЕсли ИмяМакета = "БланкОтправитель"
		  ИЛИ ИмяМакета = "БланкПолучатель" Тогда

		ТабДокумент = ПечатьБланк(ИмяМакета, НаПринтер);

	ИначеЕсли ИмяМакета = "Этикетки" Тогда

		ПечататьЭтикетки();
		Возврат;

	ИначеЕсли ИмяМакета = "ТранспУпаковки" Тогда

		Обр   = Обработки.ТранспортныеУпаковки.Создать();
		Форма = Обр.ПолучитьФорму(,ЭтотОбъект,);
		Если Форма.Открыта() Тогда
			Форма.Активизировать();
		Иначе
			Форма.Открыть();
			Форма.ПервоначальноеЗаполнение(Ссылка);
		КонецЕсли;
	ИначеЕсли ИмяМакета = "Ценники" Тогда
		ТабДокумент = ПечатьЦенников();
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	Иначе
		//Печать макетов Ведомость - из модуля менеджера объекта
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ПеремещениеТоваров", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ПеремещениеТоваров", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Ведомость", "Перемещение товаров");
	СтруктураМакетов.Вставить("_1Т",                "1-Т (Товарно-транспортная накладная)");
	СтруктураМакетов.Вставить("БланкОтправитель",   "Бланк товарного наполнения, склад отправитель");
	СтруктураМакетов.Вставить("БланкПолучатель",    "Бланк товарного наполнения, склад получатель");
	СтруктураМакетов.Вставить("Этикетки",           "Этикетки");
	СтруктураМакетов.Вставить( "ТранспУпаковки",    "Штрихкоды транспортных упаковок");
	СтруктураМакетов.Вставить("Ценники", "Ценники на товары");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли


#Если Клиент Тогда
Процедура ЗаполнитьНалоговыеНазначенияЗапасов() Экспорт 
	
	НалоговыйУчет.ЗаполнитьНалоговыеНазначенияЗапасов(ЭтотОбъект, "Товары", Ложь);

КонецПроцедуры // ЗаполнитьНалоговыеНазначенияЗапасов
#КонецЕсли


// Функция проверяет, есть ли НТТ среди склада-отправителя или склад-получателя.
//
// Возвращаемое значение:
//  Булево. Истина, если отправитель или получатель - НТТ.
//
Функция ЕстьНТТ() Экспорт

	ВидНТТ = Перечисления.ВидыСкладов.НТТ;

	Возврат (СкладОтправитель.ВидСклада = ВидНТТ Или СкладПолучатель.ВидСклада = ВидНТТ);

КонецФункции // ЕстьНТТ()

// Возвращает розничную сумму документа в валюте регл. учета.
//
// Возвращаемое значение:
//  Число. Розничная сумма документа в валюте регл. учета.
//
Функция ПолучитьРозничнуюСуммуДокумента() Экспорт

	Результат = 0;

	Если ЕстьНТТ() Тогда
		Для Каждого СтрокаТЧ Из Товары Цикл
			Результат = Результат + Окр(СтрокаТЧ.Цена * СтрокаТЧ.Количество, 2);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьРозничнуюСуммуДокумента()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	
КонецПроцедуры

// Процедура заполняет счета учета в строке табличной части или всей табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ДанныеТабличнойЧасти, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ДанныеТабличнойЧасти, ЭтотОбъект, ЗаполнятьБУ);

КонецПроцедуры

// Процедура заполняет счета учета в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаПоОтчетуПроизводстваЗаСменуРегл(СтрокаТабличнойЧасти, Выборка)
	
	СтрокаТабличнойЧасти.СчетУчетаБУ      	 = Выборка.Счет;
	СтрокаТабличнойЧасти.НовыйСчетУчетаБУ    = Выборка.Счет;
	СтрокаТабличнойЧасти.НалоговоеНазначение = Выборка.НалоговоеНазначение;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаПоОтчетуПроизводстваЗаСмену()

// Процедура заполняет поля запроса для целей регл. учета.
//
Процедура ЗаполнитьПоляЗапросаРегл(ПоляЗапросаРегл)
	
	ПоляЗапросаРегл = "
	|	ДокТовары.Счет,
	|ДокТовары.НалоговоеНазначение, 
	|";
	
КонецПроцедуры // ЗаполнитьПоляЗапросаРегл()

// Процедура выполняет заполнение табличной части по отчету производства за смену.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОтчетуПроизводстваЗаСменуУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
    масНаправленияВыпуска = новый Массив;
	масНаправленияВыпуска.Добавить(Перечисления.НаправленияВыпуска.НаЗатраты);
	масНаправленияВыпуска.Добавить(Перечисления.НаправленияВыпуска.НаЗатратыСписок);

	Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
	Запрос.УстановитьПараметр("ВидВыпуска",   		Перечисления.ВидыВыпуска.Наработка);
	Запрос.УстановитьПараметр("НаправлениеВыпуска", масНаправленияВыпуска);
	
	ПоляЗапросаРегл = "";
	ЗаполнитьПоляЗапросаРегл(ПоляЗапросаРегл);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Номенклатура					КАК Номенклатура,
	|	ДокТовары.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|	ДокТовары.СерияНоменклатуры				КАК СерияНоменклатуры,
	|	ДокТовары.ЕдиницаИзмерения 				КАК ЕдиницаИзмерения,
	|	ДокТовары.ЕдиницаИзмеренияМест 			КАК ЕдиницаИзмеренияМест,
	|	ДокТовары.Коэффициент 					КАК Коэффициент,
	|	ДокТовары.ЗаказРезерв 					КАК Заказ,
	|	ДокТовары.Качество 						КАК Качество,
	|	" + ПоляЗапросаРегл + "
	|	СУММА(ДокТовары.Количество)             КАК Количество,
	|	СУММА(ДокТовары.КоличествоМест)         КАК КоличествоМест
	|
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ДокТовары
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И ДокТовары.ВидВыпуска <> &ВидВыпуска
	|	И ДокТовары.НаправлениеВыпуска не в (&НаправлениеВыпуска)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура,
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры,
	|	ДокТовары.ЕдиницаИзмерения,
	|	ДокТовары.ЕдиницаИзмеренияМест,
	|	ДокТовары.Коэффициент,
	|	ДокТовары.ЗаказРезерв,
	|	" + ПоляЗапросаРегл + "
	|	ДокТовары.Качество
	|";


	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     			= Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Количество       			= Выборка.Количество;
		СтрокаТабличнойЧасти.КоличествоМест       		= Выборка.КоличествоМест;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест 		= Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент      			= Выборка.Коэффициент;
		СтрокаТабличнойЧасти.ДокументРезерва      		= Выборка.Заказ;
		СтрокаТабличнойЧасти.Качество      				= Выборка.Качество;
		
		ЗаполнитьСчетаУчетаПоОтчетуПроизводстваЗаСменуРегл(СтрокаТабличнойЧасти, Выборка);
					
	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(СкладОтправитель, Организация, МассивНоменклатуры, , СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ,ТаблицаРезервовПоСериям);
	ТоварыТабличнойЧасти= Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
    ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании");
	
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтуктураПоиска   = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтуктураПоиска.Вставить("Цена",                   ИсходнаяСтрока.Цена);
		КонецЕсли;
		
        флЗаполнятьИзРезервов = ложь;
		Если ТипЗнч(ИсходнаяСтрока.ДокументРезерва)=Тип("ДокументСсылка.ЗаказПокупателя") И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании
			И СкладОтправитель.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
			Если ИсходнаяСтрока.ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ДокументРезерва);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;
		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;
		
		СтрокаСПустойСерией = Неопределено;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			Если НЕ ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры               = Строка.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатуры               = ИсходнаяСтрока.СерияНоменклатуры;
			КонецЕсли;

			НоваяСтрока.Количество                          = СписанноеКоличество;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество* ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;            
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
				
				НоваяСтрока.СерияНоменклатуры                   = "";
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;
				
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
				
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоСериям()

// Производит заполнение поля "Цена" табличной части "Товары".
//
Процедура ЗаполнитьРозничнуюЦену() Экспорт

	ОтправительНТТ   = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ    = (СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательТипЦен = ?((НЕ ОтправительНТТ) И ПолучательНТТ, СкладПолучатель.ТипЦенРозничнойТорговли, Неопределено);

	Для Каждого Строка Из Товары Цикл

		Если НЕ (ОтправительНТТ ИЛИ ПолучательНТТ) Тогда
			Строка.Цена = 0;
		ИначеЕсли (НЕ ОтправительНТТ) И ПолучательНТТ Тогда
			Строка.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры,
			              ПолучательТипЦен, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		ИначеЕсли ОтправительНТТ Тогда
			Строка.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, СкладОтправитель,
			              мВалютаРегламентированногоУчета, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()


// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	 или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоБланкам - результат запроса по табличной части "БланкиСтрогогоУчета",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента)

	ТаблицаБланков = РезультатЗапросаПоБланкам.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	 или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаБланков.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	ПодготовитьТаблицуБланковРегл(ТаблицаБланков, СтруктураШапкиДокумента);
	
	Возврат ТаблицаБланков;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуБланковРегл(ТаблицаБланков, СтруктураШапкиДокумента)
    
	ТаблицаБланков.Колонки.Добавить("СуммаНоминальная");
	ТаблицаБланков.Колонки.Добавить("КоличествоНоминальное");
	
	// Получить номинальные параметры.
	// Установим параметры запроса
	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",           СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Ссылка.МоментВремени());	
	Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);	
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК Остатки
		|
		|ГДЕ
		|	Остатки.КоличествоОстатокДт > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1
		|";

	Для Каждого Строка из ТаблицаБланков Цикл
				
		Запрос.УстановитьПараметр("Счет",     		 Строка.ПринятыеСчетУчетаБУ);
		Запрос.УстановитьПараметр("Номенклатура", 	 Строка.Номенклатура);
	
		ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
		СтрокаТаблицыЦен = ТаблицаЦен.Найти(Строка.Номенклатура, "Номенклатура");
		Если НЕ СтрокаТаблицыЦен = Неопределено Тогда			
			Строка.СуммаНоминальная = Строка.Количество * ?( СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, Окр(СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток,2,1) );
			Строка.КоличествоНоминальное = СтрокаТаблицыЦен.КоличествоОстаток;	
		Иначе
			Строка.СуммаНоминальная = 0;
			Строка.КоличествоНоминальное = 0;
		КонецЕсли;		
	КонецЦикла;
	    	
КонецПроцедуры // ПодготовитьТаблицуБланков()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары() 


// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПроверитьСтрокиТабличнойЧасти("Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоТоварам,
		"Товары",
		Отказ, 
		Заголовок, 
		"Перемещение"
	);	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "БланкиСтрогогоУчета".
//
// Параметры:
// Параметры: 
//  ТаблицаПоБланкам        - таблица значений, содержащая данные для проведения и проверки ТЧ БланкиСтрогогоУчета
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиБланки(ТаблицаПоБланкам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "БланкиСтрогогоУчета";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	Если (СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	 ИЛИ  СтруктураШапкиДокумента.ВидСкладаПолучателя  = Перечисления.ВидыСкладов.НТТ)
	   И НЕ мРазрешитьНулевыеЦеныВРознице Тогда
		СтруктураОбязательныхПолей.Вставить("Цена");
	КонецЕсли;


	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "БланкиСтрогогоУчета", СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Здесь не должно быть ничего кроме бланков
	УправлениеЗапасами.ПроверитьЧтоНетНЕБланковСтрогогоУчета(ЭтотОбъект, "БланкиСтрогогоУчета", ТаблицаПоБланкам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "БланкиСтрогогоУчета", ТаблицаПоБланкам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "БланкиСтрогогоУчета", ТаблицаПоБланкам, Отказ, Заголовок);
	
	ПроверитьСтрокиТабличнойЧасти("БланкиСтрогогоУчета", ТаблицаПоБланкам, Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоБланкам,
		"Бланки строгого учета",
		Отказ, 
		Заголовок, 
		"Перемещение"
	);	
	      	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиБланки() 

//Проверяет заполнение реквизитов табличных частей, которые зависят от указания реквизита ВнутреннийЗаказ
Процедура  ПроверитьСтрокиТабличнойЧасти(ИмяТЧ, ТЧ, Отказ, Заголовок)
	Для каждого Строка из ТЧ цикл
		СтрокаНачалаСообщенияОбОшибке = Нстр("ru = 'В строке номер """+ СокрЛП(Строка.НомерСтроки) +
			                               """ табличной части """ + ИмяТЧ + """: '");

		Если НЕ ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДокументРезерва) Тогда
			Если Строка.ДокументРезерва<>Строка.ВнутреннийЗаказ Тогда
				//неправильный документ резерва
				//Смартис Лиманчук начало 26.04.2012
				//ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'указан документ резерва, отличающийся от значения реквизита ""Внутренний заказ""'") , Отказ, Заголовок);
				//Смартис Лиманчук окончание 26.04.2012
			КонецЕсли;
		КонецЕсли;
		Если Строка.ВнутреннийЗаказ.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			//неправильный внутренний заказ
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'указан Внутренний заказ с видом заказа """+Строка.ВнутреннийЗаказ.ВидЗаказа+""". Может быть указан только заказ с видом ""На склад"" '") , Отказ, Заголовок);

		КонецЕсли;
		
		Если Строка.СкладВнутреннегоЗаказа <> СкладПолучатель Тогда
			// неправильный склад
			//Смартис Лиманчук начало 28.04.2012
			//ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'указан Внутренний заказ, в котором склад-заказчик отличается от склада-получателя, указанного в шапке документа'") , Отказ, Заголовок);
			//Смартис Лиманчук окончание 28.04.2012
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
 
// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	ПроверитьСтрокиТабличнойЧасти("Возвратная тара", ТаблицаПоТаре, Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоТаре,
		"Возвратная тара",
		Отказ, 
		Заголовок, 
		"Перемещение"
	);	

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете
	  ИЛИ НЕ СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов 
	  ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
	  
	  Возврат;
	КонецЕсли;
	
	// Проверка остатков при оперативном проведении.
	Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "Товары", 				СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "БланкиСтрогогоУчета", 	СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизаций.
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
		
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       СкладОтправитель);
				
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	// А теперь приход на склад-получатель
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
				
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
	  	Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
							  
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	НаборДвижений = Движения.ТоварыОрганизацийРегл;

	ТаблицаДвиженийРасход = НаборДвижений.ВыгрузитьКолонки();
	ТаблицаДвиженийПриход = НаборДвижений.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвиженийРасход);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре,    ТаблицаДвиженийРасход);
	
	ТаблицаДвиженийРасход.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвиженийРасход.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвиженийРасход.ЗаполнитьЗначения(?(ВестиПартионныйУчетПоСкладамРегл, СкладОтправитель, Неопределено), "Склад");
	
	ТабИмен = Неопределено;
	ТабИменТара = Неопределено;
	
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварам, ТабИмен, "НовыйСчетУчетаБУ", "СчетУчетаБУ");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвиженийПриход);
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТоварам, ТабИмен);
	
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТаре, ТабИменТара, "НовыйСчетУчетаБУ", "СчетУчетаБУ");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвиженийПриход);
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТаре, ТабИменТара);
	
	ТаблицаДвиженийПриход.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвиженийПриход.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвиженийПриход.ЗаполнитьЗначения(?(ВестиПартионныйУчетПоСкладамРегл, СкладПолучатель, Неопределено), "Склад");
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийРасход;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизацийРегл.ВыполнитьРасход();
	КонецЕсли;
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийПриход;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизацийРегл.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

// Функция удаляет из исходной таблицы строки не требующие резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеРезервПоЗаказ()

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеСнятияСРезерва(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва)
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервирования(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) 
		   ИЛИ (ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) И СтрокаТаблицы.СкладВнутреннегоЗаказа = СкладПолучатель 
		   //Смартис Лиманчук начало 26.04.2012
		   И СтрокаТаблицы.ВнутреннийЗаказ=СтрокаТаблицы.ДокументРезерва
		   //Смартис Лиманчук окончание 26.04.2012
		   )
		   Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()


// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция ПодготовитьТаблицуТоваровКПолучению(ТабТовары)

	ТаблицаПоТоварамКПолучению = ТабТовары.Скопировать();
	ТаблицаПоТоварамКПолучению.Колонки.Добавить("ДокументПолучения");
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамКПолучению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамКПолучению.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТаблицаПоТоварамКПолучению.Удалить(СтрокаТаблицы);
		Иначе 
			СтрокаТаблицы.ДокументПолучения = СтрокаТаблицы.ДокументРезерва;
			Если не СтрокаТаблицы.ДокументРезерва.БезПраваПРодажи Тогда
				СтрокаТаблицы.ДокументРезерва = неопределено;
			КонецЕсли;
			
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамКПолучению;
	
КонецФункции // ПодготовитьТаблицуТоваровКПолучению()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
    //ИЗМЕНЕНО Верескул Игорь(Начало 08.05.2018
    //Если СтруктураШапкиДокумента.СкладПолучатель.НеВестиУчетПоСериям Тогда
    //    ТаблицаПоТоварам.ЗаполнитьЗначения(Справочники.СерииНоменклатуры.ПустаяСсылка(),"СерияНоменклатуры");       	
    //КонецЕсли; 
    //Окончание)Верескул Игорь     
	Если СтруктураШапкиДокумента.РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
		ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
	Иначе
		ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
		ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
		ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаДвиженийПоСписаннымТоварам = Движения.СписанныеТовары.Выгрузить();
	Если ТаблицаДвиженийПоСписаннымТоварам.Количество()>0 Тогда
		
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, ТаблицаДвиженийПоСписаннымТоварам);
		
		//Коновалова 13022013 +
		Если (СтруктураШапкиДокумента.ОтражатьВУправленческомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладах")) ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладахБухгалтерскийУчет")) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		//Коновалова 13022013 -
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда  
		// До вызова процедуры, все движения по хозрасчетному, должны быть, записаны.
		ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);		
	КонецЕсли; // НЕ Отказ 	
	
КонецПроцедуры // ДвиженияПоРегистрам()

//Коновалова 19022013 +
Функция НетДвиженийПоПартиям(_Регистр)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПартииТоваровНаСкладах.Регистратор
	                      |ИЗ
	                      |	РегистрНакопления."+_Регистр+" КАК ПартииТоваровНаСкладах
	                      |ГДЕ
	                      |	ПартииТоваровНаСкладах.Регистратор = &Регистратор");
						        
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
//Коновалова 19022013 -

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок)

	// Движения по документу.
    ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиБУ.Прочитать(); //дабы не затереть уже записанные движения, при ДвижениеПартийТоваров
						
	Если ОтражатьВБухгалтерскомУчете Тогда
	
		// ТОВАРЫ ПО РЕГИСТРУ Хозрасчетный.
		// Доп. проводка по забалансу на номинальную стоимость.
		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.БланкиСтрогогоУчета Тогда
				
			// Проводки по бланкам стогого учета		
			Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
				
				Если СтрокаТаблицы.БланкСтрогогоУчета = Истина Тогда			
					 //проводка по  счету ПринятыеСчетУчетаБУ (в других документах с учетом БСУ: СчетУчетаЗабалансовыйБУ)
					Если СтрокаТаблицы.КоличествоНоминальное < СтрокаТаблицы.Количество Тогда
						Учет = "Бух";
						ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон("¤1¤. учет. Строка :¤2¤"
														  "Не списано ¤3¤ ¤4¤ товара ¤5¤, счет учета ¤6¤", Учет,
														  СтрокаТаблицы.НомерСтроки,
														  (СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоНоминальное),
														  СтрокаТаблицы.Номенклатура.БазоваяЕдиницаИзмерения,
														  СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ПринятыеСчетУчетаБУ), "");

						Отказ = Истина;	
					Иначе						
						Проводка = ПроводкиБУ.Добавить();
			            Проводка.Период       = Дата;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание   = "Перемещение БСУ";				

						Проводка.СчетДт       = СтрокаТаблицы.НовыйПринятыеСчетУчетаБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладПолучатель);
						Проводка.КоличествоДт = СтрокаТаблицы.Количество;

						Проводка.СчетКт       = СтрокаТаблицы.ПринятыеСчетУчетаБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",       СтруктураШапкиДокумента.СкладОтправитель);
						Проводка.КоличествоКт = СтрокаТаблицы.Количество;			
													
						Проводка.Сумма = СтрокаТаблицы.СуммаНоминальная;
					  КонецЕсли;

				
				КонецЕсли; // СтрокаТаблицы.БСУ
				
			КонецЦикла; // Проводки по бланкам строгого учета

		КонецЕсли;
		
 	
   КонецЕсли;

КонецПроцедуры //ДвиженияПоРегистрамРегл    

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если БланкиСтрогогоУчета.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("БланкиСтрогогоУчета", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",            СкладОтправитель);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
						
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
			// Если мы перемещаем в НТТ, то надо сделать приход по специальному регистру
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ И НЕ Отказ Тогда
				
				// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПеремещениюВНТТ
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПеремещениюВНТТ, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",               СкладПолучатель);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПеремещения", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",           Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",           Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
						
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПеремещениюВНТТ, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТаблицаПоТоварам);
			ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если ТаблицаПоТоварамРезерв.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареРезерв.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если Не Отказ Тогда

					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
				КонецЕсли;
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если ТаблицаПоТоварамКПолучению.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареКПолучению.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        СкладОтправитель);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
		 			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
					
			КонецЕсли;
			
		Иначе // не по ордерам

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Расход.
			Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ Тогда
				НаборДвижений = Движения.ТоварыВНТТ;
				// Контроль остатков товара
				Если Товары.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ВозвратнаяТара.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если БланкиСтрогогоУчета.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("БланкиСтрогогоУчета", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
			ИначеЕсли СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.Розничный Тогда
				НаборДвижений = Движения.ТоварыВРознице;
				Если НЕ ИспользоватьРегистрСвободныеОстатки Тогда
					// Контроль остатков товара
					Если Товары.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
					Если ВозвратнаяТара.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
					Если БланкиСтрогогоУчета.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("БланкиСтрогогоУчета", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
				КонецЕсли;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
				Если НЕ ИспользоватьРегистрСвободныеОстатки Тогда
					Если Товары.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
					Если ВозвратнаяТара.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
					Если БланкиСтрогогоУчета.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("БланкиСтрогогоУчета", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
												
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
											
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
				
				Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ Тогда
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
				Иначе
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",  Справочники.Качество.Новый,  "ТаблицаПоТаре");
					Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.Розничный Тогда
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладОтправитель, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладОтправитель, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);
					КонецЕсли;
				КонецЕсли;
													
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Приход.
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
				НаборДвижений = Движения.ТоварыВНТТ;
			ИначеЕсли СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.Розничный Тогда
				НаборДвижений = Движения.ТоварыВРознице;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
			КонецЕсли;

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
												
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
											
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
				
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
			Иначе
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",  Справочники.Качество.Новый,  "ТаблицаПоТаре");
				Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.Розничный Тогда
					// ТОВАР
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладПолучатель, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
						
					// Проверка наличия продажных цен на приходуемый товар.
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицыДанныхДокумента["ТаблицаПоТоварам"], Отказ, Заголовок);
						
					// ТАРА
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладПолучатель, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);

					// Проверка наличия продажных цен на приходуемый товар.
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "ВозвратнаяТара", ТаблицыДанныхДокумента["ТаблицаПоТаре"], Отказ, Заголовок);
				КонецЕсли;
            КонецЕсли;
            //ИЗМЕНЕНО Верескул Игорь(Начало 18.05.2018
            Если СтруктураШапкиДокумента.СкладПолучатель.НеВестиУчетПоСериям Тогда
                КопияТаблицыДанных = Новый Структура;
                КопияТаблицыДанных.Вставить("ТаблицаПоТоварам",ТаблицыДанныхДокумента.ТаблицаПоТоварам.Скопировать()); 
                КопияТаблицыДанных.Вставить("ТаблицаПоТаре",ТаблицыДанныхДокумента.ТаблицаПоТаре.Скопировать()); 
                КопияТаблицыДанных.ТаблицаПоТоварам.ЗаполнитьЗначения(Справочники.СерииНоменклатуры.ПустаяСсылка(),"СерияНоменклатуры");       	
                ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, КопияТаблицыДанных, Дата);
            Иначе
                ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
            КонецЕсли; 										
            //Окончание)Верескул Игорь 

			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеСнятияСРезерва(ТаблицаПоТоварам);
			ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеСнятияСРезерва(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если ТаблицаПоТоварамРезерв.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареРезерв.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
					//приход резерва на склад-получатель
					ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеРезервирования(ТаблицаПоТоварам);
					ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеРезервирования(ТаблицаПоТаре);
                    Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
						СтруктТаблицДокумента = Новый Структура;
						СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
						СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
						
						ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);

						ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
						ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				    КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			// Для резервов по ордеру надо поменять склад в регистре "Товары к получению на склады"
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если ТаблицаПоТоварамКПолучению.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареКПолучению.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        СкладОтправитель);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
					// То же в приход на новый склад.
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяТабЧасти",       "Товары");
		ДопПараметры.Вставить("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
		ДопПараметры.Вставить("РежимПроведения",   РежимПроведения);
		ДопПараметры.Вставить("ИмяРеквизитаЗаказ",  "ВнутреннийЗаказ");
		ДопПараметры.Вставить("ЗаказВШапке",        ложь);
		
		ТабИсходная = ТаблицаПоТоварам.Скопировать();
		
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);
		Если ТабИсходная.Количество() > 0 Тогда
			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
	
		ДопПараметры.Вставить("ИмяТабЧасти", "ВозвратнаяТара");
		ДопПараметры.Вставить("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		ТабИсходная = ТаблицаПоТаре.Скопировать();
		
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Если ТабИсходная.Количество() > 0 Тогда
			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура  ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, знач СтатусПартии)
	Сч = 0;

	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ)  // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ВнутреннийЗаказ.Заказчик = СкладПолучатель Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ВнутреннийЗаказ, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   ?(СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,неопределено,СтрокаТаблицы.ХарактеристикаНоменклатуры),
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамИсходная, ТаблицаПоТареИсходная,Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ТаблицаПоТоварам = УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента,ТаблицаПоТоварамИсходная, Истина);
	ТаблицаПоТоварам.Колонки.Добавить("ЗаказСписания");
	ТаблицаПоТоварам.Колонки.Добавить("ЗаказПартии");
	ТаблицаПоТоварам.Колонки.Добавить("СписыватьТолькоПоЗаказу");

	// Удалим строки с документами резерва по ордерам
	Инд=0;
	Пока Инд<ТаблицаПоТоварам.Количество() Цикл
		Если ТаблицаПоТоварам[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТоварам.Удалить(Инд);
		Иначе
			// Если ведется обособленный учет или материалы переданы в переработку
			// то списывать нужно только партии по указанному заказу
			Если ТаблицаПоТоварам[Инд].ОбособленныйУчетТоваровПоЗаказамПокупателей = Истина
			   ИЛИ ТаблицаПоТоварам[Инд].ВидОперации =Перечисления.ВидыОперацийЗаказПокупателя.Переработка
			   Тогда
				ТаблицаПоТоварам[Инд].ЗаказПартии             = ТаблицаПоТоварам[Инд].ДокументРезерва;
				ТаблицаПоТоварам[Инд].ЗаказСписания           = ТаблицаПоТоварам[Инд].ДокументРезерва;
			КонецЕсли;
			
			ТаблицаПоТоварам[Инд].СписыватьТолькоПоЗаказу = Истина;
			
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;

	// Переименуем колонки
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаПоТоварам.Колонки.НовыйСчетУчетаБУ.Имя = "КорСчетБУ";
		ТаблицаПоТоварам.Колонки.НовыйПринятыеСчетУчетаБУ.Имя = "ПринятыеКорСчетБУ";
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	// Если Партионный учет по складам  в упр учете
	Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	КонецЕсли;
	
	// Если Партионный учет по складам в регл учете
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");

	// Недостающие поля.
	НомерСтрокиРегистра = 0;
	
	ЕстьНоменклатураВТаблицеДвижений = (ТаблицаДвижений.Колонки.Найти("Номенклатура") <> Неопределено);
	Для каждого Строка Из ТаблицаДвижений Цикл
		НомерСтрокиРегистра = НомерСтрокиРегистра+1;
		Строка.НомерСтрокиДокумента = НомерСтрокиРегистра;
		// определить из какой табличной части заполнена номенклатура: БланкиСтрогогоУчета или же Товары.
		Если ЕстьНоменклатураВТаблицеДвижений 
		   И ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		   И НЕ Строка.Номенклатура.Пустая()	
		   И  Строка.Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета Тогда
			Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.БланкиСтрогогоУчета;
		Иначе	
			Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;		
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	
	Если (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция)
	  ИЛИ (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам) Тогда 
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,"ДопустимыйСтатус2");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВПереработку,"ДопустимыйСтатус4");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование,"ДопустимыйСтатус1");
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,    "Организация");
	
	// Документы с видом передачи по ордеру сразу не проводятся в партионном учете
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаПоТаре = ТаблицаПоТареИсходная.Скопировать();
	Инд=0;
	Пока Инд<ТаблицаПоТаре.Количество() Цикл
		Если ТаблицаПоТаре[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТаре.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаПоТаре.Колонки.НовыйСчетУчетаБУ.Имя = "КорСчетБУ";
	КонецЕсли;
		
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
	
	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		НомерСтрокиРегистра = НомерСтрокиРегистра+1;
		Строка.НомерСтрокиДокумента = НомерСтрокиРегистра;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;
		
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");

	// Если Партионный учет по складам  в упр учете
	Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	КонецЕсли;
	
	// Если Партионный учет по складам в регл учете
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	// Документы с видом передачи по ордеру сразу не проводятся в партионном учете
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры// ДвиженияПоРегиструСписанныеТовары

Процедура ДополнитьСтруктуруПолейТоваровРегл(СтруктураПолей, СтруктураПростыхПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ"          , "НовыйСчетУчетаБУ");
	
	
	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФакту", "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиПоФакту", "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДСПоФакту"  	, "НалоговоеНазначение.ВидДеятельностиНДС");
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПолейБланковРегл(СтруктураПолей, СтруктураПростыхПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ"		, "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ"          , "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйПринятыеСчетУчетаБУ"	, "НовыйПринятыеСчетУчетаБУ");
	
	СтруктураПростыхПолей.Вставить("Качество"			, Справочники.Качество.Новый);
	СтруктураПростыхПолей.Вставить("Цена"				, 0);  	
	
	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФакту", "НалоговоеНазначение");
		
КонецПроцедуры


Процедура ДополнитьСтруктуруПолейПоТареРегл(СтруктураПолей, СтруктураПростыхПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ"          , "НовыйСчетУчетаБУ");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФакту", "НалоговоеНазначение");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда

		Если Не УправлениеЗаказами.ИспользоватьВнутренниеЗаказы() 
			ИЛИ Основание.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			Возврат;
		КонецЕсли;

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Истина;
		СкладПолучатель    = Основание.Заказчик;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		ВнутреннийЗаказ    = Основание.Ссылка;
		Комментарий        = Основание.Комментарий;
		
		//Верескул
		//Добавлено условие что если Склад отправитель заполнен то менять ничего не надо
		//для выгрузки чеков из заказа
		Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
			Склад = Неопределено;
			#Если Клиент Тогда
				Если НЕ ВвестиЗначение(Склад, "Выберите склад отправитель", Тип("СправочникСсылка.Склады")) Тогда
					Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
				КонецЕсли;
			#Иначе
				Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
			#КонецЕсли
			СкладОтправитель = Склад;	
		Иначе
			Склад = СкладОтправитель;	
		КонецЕсли; 				

		УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, Товары,         Склад, Дата, Неопределено, Истина);
		УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, ВозвратнаяТара, Склад, Дата, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете);

		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
		
		ЗаполнитьСчетаУчетаВТабЧасти(БланкиСтрогогоУчета, "БланкиСтрогогоУчета", ОтражатьВБухгалтерскомУчете);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		Подразделение                = Основание.Подразделение;
		Комментарий                  = Основание.Комментарий;
		СкладПолучатель              = Неопределено;

		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			СкладОтправитель = Основание.СкладОрдер.Склад;
		Иначе
			СкладОтправитель = Основание.СкладОрдер;
		КонецЕсли;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование;
		//Смартис Лиманчук начало 05.12.2012
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал Тогда
			ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование;
		//Смартис Лиманчук окончание 05.12.2012
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета Тогда
			ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.БланкиСтрогогоУчета;
		КонецЕсли;

		// Заполнение таб.части
		//Смартис Лиманчук начало 05.12.2012
		//ТабЧасть = ?(Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование, Основание.Оборудование, Основание.Товары);
		ТабЧасть = ?(Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал, Основание.Оборудование, Основание.Товары);
		//Смартис Лиманчук окончание 05.12.2012
		Для Каждого ТекСтрокаТовары Из ТабЧасть Цикл

			НоваяСтрока = Товары.Добавить();
					
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Качество                   = Справочники.Качество.Новый;  			
			
			//Смартис Лиманчук начало 05.12.2012
			//Если Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			Если Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование И Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал Тогда
			//Смартис Лиманчук окончание 05.12.2012
				НоваяСтрока.ДокументРезерва = ТекСтрокаТовары.Заказ;
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете);			
			
		КонецЦикла;

		// БСУ
		Для Каждого ТекСтрокаБСУ Из Основание.БланкиСтрогогоУчета Цикл

			НоваяСтрока = БланкиСтрогогоУчета.Добавить();
					
			НоваяСтрока.Номенклатура               = ТекСтрокаБСУ.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаБСУ.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаБСУ.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаБСУ.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаБСУ.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаБСУ.Коэффициент;
			
			//Смартис Лиманчук начало 05.12.2012
			//Если Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			Если Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование И Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал Тогда
			//Смартис Лиманчук окончание 05.12.2012
				НоваяСтрока.ДокументРезерва = ТекСтрокаБСУ.Заказ;
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "БланкиСтрогогоУчета", ОтражатьВБухгалтерскомУчете);			
			
		КонецЦикла;
			
		Для Каждого ТекСтрокаТара Из Основание.ВозвратнаяТара Цикл

			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Номенклатура    = ТекСтрокаТара.Номенклатура;
			НоваяСтрока.Количество      = ТекСтрокаТара.Количество;
			НоваяСтрока.ДокументРезерва = ТекСтрокаТара.Заказ;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
			
		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
        СкладОтправитель = Основание.Склад;
		ЗаполнитьТоварыПоОтчетуПроизводстваЗаСменуУпр(Основание);

	КонецЕсли;

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.ПеремещениеТоваров.СтруктураДополнительныхДанныхФормы());
		
	Иначе
		
	    ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

		Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
			СкладОтправитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
			СкладПолучатель  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
    //Если НЕ РольДоступна("ПерепроведениеВыгруженных") Тогда
    //    //Если РазрешитьЗаписьВыгруженного Тогда
    //    //	РазрешитьЗаписьВыгруженного = Ложь;
    //    //Иначе
    //    	Если Выгружен Тогда
    //    		Сообщить("Перед записью документа, требуется снять флаг ""Выгружен в бухгалтерию""");
    //    		Отказ = Истина;
    //    	КонецЕсли;
    //    //КонецЕсли;
    //КонецЕсли;
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	СуммаДокументаРозничная = ПолучитьРозничнуюСуммуДокумента();
	
	// Очистить скрытую ТЧ.
	Если ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.БланкиСтрогогоУчета
	   И БланкиСтрогогоУчета.Количество() Тогда
		БланкиСтрогогоУчета.Очистить();    	
	КонецЕсли; // ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.БланкиСтрогогоУчета 

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 Или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ 
	 Или ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда // В этом случае ДокументРезерва должен быть пуст.

		УстановитьКачество = (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование);
        ВидОперацииОборудование = ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
            Если ВидОперацииОборудование и ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ВнутреннийЗаказ = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;

			Если УстановитьКачество 
			   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Качество) Тогда
				СтрокаТаблицы.Качество = Справочники.Качество.Новый;
			КонецЕсли;
			
		КонецЦикла;

		Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если ВидОперацииОборудование и ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ВнутреннийЗаказ = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	КонецЕсли;
	
	Если РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		Если ВозвратнаяТара.Количество() > 0 Тогда
			ВозвратнаяТара.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Товары,             // ТабличнаяЧастьТовары
			ВозвратнаяТара,     // ТабличнаяЧастьВозвратнаяТара
			Неопределено,       // ТабличнаяЧастьУслуги
			Неопределено,       // ТабличнаяЧастьОборудование
			Неопределено, 		// ТабличнаяЧастьОбъектыСтроительства
			БланкиСтрогогоУчета // ТабличнаяЧастьБланкиСтрогогоУчета
		);
	КонецЕсли;	
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	СтруктураШапкиДокумента.Вставить("Склад", СкладОтправитель);
	
	//Коновалова 28022013 +
	Если Не РольДоступна("ПолныеПрава") И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ТОгда
		 Сообщить("Нельзя провести документ без отражения по бух. учету!
		          | Заполните галочку бух. учет.");
		Отказ = Истина;		  
	КонецЕсли;
	//Коновалова 28022013 -
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      , "ВалютаУправленческогоУчета",     "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",     "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОтправитель","ВидСклада",                      "ВидСкладаОтправителя");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладПолучатель", "ВидСклада",                      "ВидСкладаПолучателя");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВнутреннийЗаказ",      "ВидЗаказа",                      "ВидВнутреннегоЗаказа");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",     "ОтражатьВРегламентированномУчете",      "ОтражатьВРегламентированномУчете");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Регл. учетная политика
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура"					, "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"              , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Количество"					, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"	, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"				, "СерияНоменклатуры");
	СтруктураПолей.Вставить("Услуга"						, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"							, "Номенклатура.Набор");
	СтруктураПолей.Вставить("Качество"						, "Качество");
	СтруктураПолей.Вставить("Цена"							, "Цена"); 
	СтруктураПолей.Вставить("Комплект"                      , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ДокументРезерва"				, "ДокументРезерва");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"			, "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"			, "ДокументРезерва.СкладГруппа");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"       	    , "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("СкладВнутреннегоЗаказа"        , "ВнутреннийЗаказ.Заказчик");
	                                                      
	СтруктураПолей.Вставить("РезервБезПраваПродажи"         ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ВидОперации"                   ,  "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"	, "ПринадлежностьНоменклатуры");						
	СтруктураПолей.Вставить("ДоговорКонтрагента"            , "ДокументРезерва.ДоговорКонтрагента");
	СтруктураПолей.Вставить("СкладОтправительВидСклада"		, "Ссылка.СкладОтправитель.ВидСклада");
	СтруктураПолей.Вставить("СкладПолучательВидСклада"		, "Ссылка.СкладПолучатель.ВидСклада");
						  
	ДополнитьСтруктуруПолейТоваровРегл(СтруктураПолей,СтруктураПростыхПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураПростыхПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "БланкиСтрогогоУчета".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("БланкСтрогогоУчета"			, "Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Номенклатура"					, "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"              , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Количество"					, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Услуга"						, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"							, "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                      , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ДокументРезерва"				, "ДокументРезерва");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"			, "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"			, "ДокументРезерва.СкладГруппа");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"       	    , "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("СкладВнутреннегоЗаказа"        , "ВнутреннийЗаказ.Заказчик");
	                                                      
	СтруктураПолей.Вставить("РезервБезПраваПродажи"         ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ВидОперации"                   ,  "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ДоговорКонтрагента"            , "ДокументРезерва.ДоговорКонтрагента");
	СтруктураПолей.Вставить("СкладОтправительВидСклада"		, "Ссылка.СкладОтправитель.ВидСклада");
	СтруктураПолей.Вставить("СкладПолучательВидСклада"		, "Ссылка.СкладПолучатель.ВидСклада");
	
	ДополнитьСтруктуруПолейБланковРегл(СтруктураПолей,СтруктураПростыхПолей);

	РезультатЗапросаПоБланкам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "БланкиСтрогогоУчета", СтруктураПолей,СтруктураПростыхПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"       , "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"     , "ДокументРезерва.СкладГруппа");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"     ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"       	, "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("СкладВнутреннегоЗаказа"    , "ВнутреннийЗаказ.Заказчик");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("СкладОтправительВидСклада"		, "Ссылка.СкладОтправитель.ВидСклада");
	СтруктураПолей.Вставить("СкладПолучательВидСклада"		, "Ссылка.СкладПолучатель.ВидСклада");
	
	СтруктураПростыхПолей.Вставить("Качество", Справочники.Качество.Новый);
	
	ДополнитьСтруктуруПолейПоТареРегл(СтруктураПолей,СтруктураПростыхПолей);

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей,СтруктураПростыхПолей);

	// Подготовим таблицу товаров, бланков и тары для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоБланкам = ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента);
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 			СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("БланкиСтрогогоУчета", 	ТаблицаПоБланкам, 			СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Товары", "Бланки строгого учета" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиБланки(ТаблицаПоБланкам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок); 
	
	
	// Объединим таблицу товаров и бланков,
	//  чтобы не выполнять аналогичные действия, для каждой таблицы движений. 	
	// Дополним не достающими колонками из таблицы бланков.
	Для каждого КолонкаБланки Из ТаблицаПоБланкам.Колонки Цикл
		
		Если ТаблицаПоТоварам.Колонки.Найти(КолонкаБланки.Имя) = Неопределено Тогда
		
			ТаблицаПоТоварам.Колонки.Добавить(КолонкаБланки.Имя, КолонкаБланки.ТипЗначения);
		
		КонецЕсли; // ТаблицаПоТоварам.Колонки.Найти(КолонкаБланки.Имя) = Неопределено 		
	
	КонецЦикла; //КолонкаТовары
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоБланкам, ТаблицаПоТоварам);
	
	// Движения по документу
	Если Не Отказ Тогда
		ИспользоватьРегистрСвободныеОстатки = глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки"); 
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
		
		Если ИспользоватьРегистрСвободныеОстатки И 
			(Товары.Количество() <> 0 ИЛИ ВозвратнаяТара.Количество() <> 0)
			И НЕ Отказ Тогда
			Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
				Движения.СвободныеОстатки.БлокироватьДляИзменения = Истина;
			КонецЕсли;
			Движения.Записать();
			Если Товары.Количество() <> 0 Тогда          
				РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
				"Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда          
				РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
				"ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТаре", ТаблицаПоТоварам, ТаблицаПоТаре));
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;

	Если РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		//Реквизит СкладОтправитель - необязательный
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("СкладОтправитель");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
        Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			Отказ = Истина;
		ИначеЕсли НЕ УчетнаяПолитика.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			СтрокаСообщения = Нстр("ru = 'Ведение учета по складам в разрезе организаций отключено в учетной политике.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
		Если ЗначениеЗаполнено(Организация) И НЕ Организация.ОтражатьВРегламентированномУчете Тогда
			СтрокаСообщения = Нстр("ru = 'Организация не отражается в регламентированном учете.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
    Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ 
	   И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
	   	СтрокаСообщения = Нстр("ru = 'Перемещение с НТТ по ордерам не осуществляется.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ВнутреннийЗаказ)
	   И ВнутреннийЗаказ.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
	   	СтрокаСообщения = Нстр("ru = 'Перемещение можно осуществлять только по внутреннему заказу с видом заказа на склад.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;

	Если (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 ИЛИ  СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ)
	   И НЕ мРазрешитьНулевыеЦеныВРознице Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.Цена");
	КонецЕсли;

	Если ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.Качество");
	КонецЕсли;

	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();
