Перем мУдалятьДвижения;

Перем мДоступностьРЦ;
Перем мДоступныеЗапасы;
Перем мФормаПрогрессора Экспорт;
Перем мФормаПрогрессораОткрыта Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем мДеревоПланов Экспорт;

Перем мКэш;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПланаПроизводстваПоСменам()
	
	Перем ТабЦелевыхВыпусков;
	
	ТабЦелевыхВыпусков = ПолучитьТаблицуВыпусков();
	
	Если ТабЦелевыхВыпусков.Количество() = 0 Тогда
		
		ОбщегоНазначения.Сообщение("Нет исходных данных для печати!");
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланПроизводстваПоСменам_ПланПроизводстваПоСменам";
	Макет = ПолучитьМакет("ПланПроизводстваПоСменам");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка, "План производства по сменам");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ПредставлениеПодразделения = Подразделение.Наименование;
	ОбластьМакета.Параметры.ПредставлениеПроекта = Проект.Наименование;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	НомерСтрокиСчетчик = 0;
	
	Для каждого Выпуск Из ТабЦелевыхВыпусков Цикл
		
		НомерСтрокиСчетчик = НомерСтрокиСчетчик + 1;
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтрокиСчетчик;
		ОбластьСтроки.Параметры.Товар = Выпуск.Номенклатура;
		ОбластьСтроки.Параметры.ПредставлениеТовара	= Выпуск.Номенклатура.Наименование;
		ОбластьСтроки.Параметры.Количество = Выпуск.Количество;
		ОбластьСтроки.Параметры.ЕдиницаИзмерения = Выпуск.Номенклатура.ЕдиницаХраненияОстатков;
		ОбластьСтроки.Параметры.Спецификация = Выпуск.Спецификация;
		ОбластьСтроки.Параметры.Заказ = Выпуск.Заказ;
		ОбластьСтроки.Параметры.Проект = Выпуск.Проект;
		ОбластьСтроки.Параметры.ДатаВыпуска = Выпуск.ДатаВыпуска;
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла; 
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
	ОбластьМакета.Параметры.ОтветственныйПредставление = Ответственный;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПланаПроизводстваПоСменам()

// Функция формирует табличный документ с печатной формой
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСоставаДокумента()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланПроизводстваПоСменам.Номер,
	|	ПланПроизводстваПоСменам.Дата,
	|	ПланПроизводстваПоСменам.Проект КАК Проект,
	|	ПланПроизводстваПоСменам.Проект.Представление КАК ПредставлениеПроекта,
	|	ПланПроизводстваПоСменам.Подразделение КАК Подразделение,
	|	ПланПроизводстваПоСменам.Подразделение.Представление КАК ПредставлениеПодразделения,
	|	ПланПроизводстваПоСменам.Ответственный КАК Ответственный,
	|	ПланПроизводстваПоСменам.Ответственный.Представление КАК ОтветственныйПредставление,
	|	ПланПроизводстваПоСменам.Товары.(
	|		НомерСтроки КАК НомерСтрокиТовара,
	|		Номенклатура КАК НоменклатураТовара,
	|		Номенклатура.НаименованиеПолное КАК ПредставлениеТовара,
	|		Заказ КАК ЗаказТовара,
	|		Проект КАК ПроектТовара,
	|		ДатаЗапуска КАК ДатаЗапускаТовара,
	|		ДатаВыпуска КАК ДатаВыпускаТовара,
	|		ВариантРаспределенияВыпусков КАК ВариантРаспределенияВыпусковТовара,
	|		Количество КАК КоличествоТовара,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияТовара,
	|		Спецификация КАК СпецификацияТовара
	|	),
	|	ПланПроизводстваПоСменам.ДанныеЗаказов.(
	|		НомерСтроки КАК НомерСтрокиЗаказа,
	|		Заказ КАК Заказ,
	|		Заказ.Представление КАК ПредставлениеЗаказа,
	|		Проект КАК ПроектЗаказа,
	|		ДатаЗапуска КАК ДатаЗапускаЗаказа,
	|		ДатаВыпуска КАК ДатаВыпускаЗаказа,
	|		ВариантРаспределенияВыпусков КАК ВариантРаспределенияВыпусковЗаказа
	|	),
	|	ПланПроизводстваПоСменам.ДанныеПлановПроизводства.(
	|		НомерСтроки КАК НомерСтрокиПланов,
	|		Сценарий КАК СценарийПланов,
	|		ДатаНач КАК ДатаНачВыборки,
	|		ДатаКон КАК ДатаКонВыборки,
	|		Подразделение КАК ПодразделениеПланов,
	|		Проект КАК ПроектПланов,
	|		ДатаЗапуска КАК ДатаЗапускаПланов,
	|		ДатаВыпуска КАК ДатаВыпускаПланов,
	|		ВариантРаспределенияВыпусков КАК ВариантРаспределенияВыпусковПланов
	|	)
	|ИЗ
	|	Документ.ПланПроизводстваПоСменам КАК ПланПроизводстваПоСменам
	|ГДЕ
	|	ПланПроизводстваПоСменам.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТовара,
	|	НомерСтрокиЗаказа,
	|	НомерСтрокиПланов";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаТоваров = Шапка.Товары.Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланПроизводстваПоСменам_СоставДокумента";
	Макет         = ПолучитьМакет("СоставДокумента");

	// выводим заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "План производства по сменам № " + СокрЛП(Номер) + " от " + Формат(Дата, "ДФ='дд ММММ гггг'");

	ТабДокумент.Вывести(ОбластьМакета);

	// выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// выводим ТЧ Планы
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыПланов");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаПланов");
	ВыборкаПланов = Шапка.ДанныеПлановПроизводства.Выбрать();
	Пока ВыборкаПланов.Следующий() Цикл
		ОбластьСтроки.Параметры.Заполнить(ВыборкаПланов);
		ОбластьСтроки.Параметры.ПериодВыборки = "С "+Формат(ВыборкаПланов.ДатаНачВыборки, "ДФ=dd.MM.yyyy")+" по "+Формат(ВыборкаПланов.ДатаКонВыборки, "ДФ=dd.MM.yyyy");
		Если ВыборкаПланов.ВариантРаспределенияВыпусковПланов = Перечисления.ВариантыРаспределенияПоПериоду.ТочноКСроку Тогда
			ОбластьСтроки.Параметры.РаспределениеПлана = "Все к "+Формат(ВыборкаПланов.ДатаВыпускаПланов, "ДФ=dd.MM.yyyy");
		Иначе
			ОбластьСтроки.Параметры.РаспределениеПлана = "С "+Формат(ВыборкаПланов.ДатаЗапускаПланов, "ДФ=dd.MM.yyyy")+" по "+Формат(ВыборкаПланов.ДатаВыпускаПланов, "ДФ=dd.MM.yyyy");
		КонецЕсли; 
		
		ТабДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	// выводим ТЧ Заказы
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыЗаказов");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаЗаказов");
	ВыборкаЗаказов = Шапка.ДанныеЗаказов.Выбрать();
	Пока ВыборкаЗаказов.Следующий() Цикл
		ОбластьСтроки.Параметры.Заполнить(ВыборкаЗаказов);
		Если ВыборкаЗаказов.ВариантРаспределенияВыпусковЗаказа = Перечисления.ВариантыРаспределенияПоПериоду.ТочноКСроку Тогда
			ОбластьСтроки.Параметры.РаспределениеЗаказа = "Все к "+Формат(ВыборкаЗаказов.ДатаВыпускаЗаказа, "ДФ=dd.MM.yyyy");
		Иначе
			ОбластьСтроки.Параметры.РаспределениеЗаказа = "С "+Формат(ВыборкаЗаказов.ДатаЗапускаЗаказа, "ДФ=dd.MM.yyyy")+" по "+Формат(ВыборкаЗаказов.ДатаВыпускаЗаказа, "ДФ=dd.MM.yyyy");
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	// выводим ТЧ Товары
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыТоваров");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаТоваров");
	ВыборкаТоваров = Шапка.Товары.Выбрать();
	Пока ВыборкаТоваров.Следующий() Цикл
		ОбластьСтроки.Параметры.Заполнить(ВыборкаТоваров);
		Если ВыборкаТоваров.ВариантРаспределенияВыпусковТовара = Перечисления.ВариантыРаспределенияПоПериоду.ТочноКСроку Тогда
			ОбластьСтроки.Параметры.РаспределениеТовара = "Все к "+Формат(ВыборкаТоваров.ДатаВыпускаТовара, "ДФ=dd.MM.yyyy");
		Иначе
			ОбластьСтроки.Параметры.РаспределениеТовара = "С "+Формат(ВыборкаТоваров.ДатаЗапускаТовара, "ДФ=dd.MM.yyyy")+" по "+Формат(ВыборкаТоваров.ДатаВыпускаТовара, "ДФ=dd.MM.yyyy");
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	// выводим итоги
	ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ОтветственныйПредставление = "/"+Шапка.ОтветственныйПредставление + "/";
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСоставаДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
		
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
		
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПланПроизводстваПоСменам" Тогда
		
		ТабДокумент = ПечатьПланаПроизводстваПоСменам();
		
	ИначеЕсли ИмяМакета = "СоставДокумента" Тогда
		
		ТабДокумент = ПечатьСоставаДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ТабДокумент = Неопределено Тогда
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
		
	КонецЕсли;

КонецПроцедуры // Печать()

#КонецЕсли

Процедура ОбновитьФормуПрогрессора(ЗначениеИндикатора = Неопределено, МаксимальноеЗначение = Неопределено, КомментарийОбработкиДанных = Неопределено, КомментарийЗначения = Неопределено)

	Если мФормаПрогрессора = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеИндикатора <> Неопределено Тогда
		
		мФормаПрогрессора.Значение = ЗначениеИндикатора;
		
	КонецЕсли;
	
	Если МаксимальноеЗначение <> Неопределено Тогда
		
		мФормаПрогрессора.МаксимальноеЗначение = МаксимальноеЗначение;
		
	КонецЕсли;
	
	Если КомментарийОбработкиДанных <> Неопределено Тогда
		
		мФормаПрогрессора.КомментарийОбработкиДанных = КомментарийОбработкиДанных;
		
	КонецЕсли;
	
	Если КомментарийЗначения <> Неопределено Тогда
		
		мФормаПрогрессора.КомментарийЗначения = КомментарийЗначения;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьФормуПрогрессора()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СуммаЗначенийСоответствия(Данные)
	
	Результат = 0;
	
	Для каждого Значение из Данные Цикл
		
		Результат = Результат + Значение.Значение;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СуммаЗначенийСоответствия()

Функция ПолучитьДоступноеВремяСмены(Данные, Момент)
	
	Результат = 0;
	
	Для каждого Значение из Данные Цикл
		
		
		ЗначениеКлюч     = Значение.Ключ;
		ЗначениеЗначение = Значение.Значение;
		
		Если Момент > ЗначениеКлюч Тогда
			
			Результат = Результат + ЗначениеЗначение;
			
		КонецЕсли;
		
		Если (Момент > (ЗначениеКлюч - ЗначениеЗначение)) И (Момент <= ЗначениеКлюч) Тогда
			
			Результат = Результат + ЗначениеЗначение - (ЗначениеКлюч - Момент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДоступноеВремяСмены()

Функция ПолучитьРабочиеЦентрыИсполнители(ГруппаРабочихЦентров, ТекущаяДатаПланирования, Момент)
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ГруппаРабочихЦентров) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
		
		Результат.Добавить(ГруппаРабочихЦентров);
		Возврат Результат;
		
	КонецЕсли;
	
	РабочиеЦентрыИсполнители = мКэш.РабочиеЦентрыИсполнители.НайтиСтроки(Новый Структура("ГруппаРабочихЦентров", ГруппаРабочихЦентров));
	
	Если РабочиеЦентрыИсполнители.Количество() > 0 Тогда
		
		РезультатЗапроса = РабочиеЦентрыИсполнители[0].РезультатЗапроса;
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыЗаменяемостиРабочихЦентровСостав.РабочийЦентр КАК РабочийЦентр,
		|	0 КАК ДоступноеВремя,
		|	ГруппыЗаменяемостиРабочихЦентровСостав.Приоритет КАК Приоритет
		|ИЗ
		|	Справочник.ГруппыЗаменяемостиРабочихЦентров.Состав КАК ГруппыЗаменяемостиРабочихЦентровСостав
		|ГДЕ
		|	ГруппыЗаменяемостиРабочихЦентровСостав.Ссылка = &ГруппаРабочихЦентров
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ");
		
		Запрос.УстановитьПараметр("ГруппаРабочихЦентров", ГруппаРабочихЦентров);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		НоваяСтрокаКэша = мКэш.РабочиеЦентрыИсполнители.Добавить();
		
		НоваяСтрокаКэша.ГруппаРабочихЦентров = ГруппаРабочихЦентров;
		НоваяСтрокаКэша.РезультатЗапроса = РезультатЗапроса;
		
	КонецЕсли;
	
	ДоступостьРабочихЦентров = РезультатЗапроса.Выгрузить();
	
	Для каждого ДоступостьРабочегоЦентра из ДоступостьРабочихЦентров Цикл
		
		ДоступноеВремя = 0;
		
		Если мДоступностьРЦ[ДоступостьРабочегоЦентра.РабочийЦентр] <> Неопределено Тогда
			
			ДоступностьРабочегоЦентраНаТекущуюДатуПланирования = мДоступностьРЦ[ДоступостьРабочегоЦентра.РабочийЦентр][ТекущаяДатаПланирования];
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		Если ДоступностьРабочегоЦентраНаТекущуюДатуПланирования <> Неопределено Тогда
				
			Для каждого Смена из ДоступностьРабочегоЦентраНаТекущуюДатуПланирования Цикл
					
				ДоступноеВремя = ДоступноеВремя + ПолучитьДоступноеВремяСмены(Смена.Значение, Момент);
				
			КонецЦикла;
			
			Если ДоступноеВремя > 0 Тогда
				
				ДоступостьРабочегоЦентра.ДоступноеВремя = ДоступноеВремя;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДоступостьРабочихЦентров.Количество() > 0 Тогда
		
		ДоступостьРабочихЦентров.Сортировать("ДоступноеВремя Убыв, Приоритет Убыв");
		
		Для каждого ДоступостьРабочегоЦентра из ДоступостьРабочихЦентров Цикл
		
			Если ДоступостьРабочегоЦентра.ДоступноеВремя > 0 Тогда
				
				Результат.Добавить(ДоступостьРабочегоЦентра.РабочийЦентр);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьРабочиеЦентрыИсполнители()

Процедура УстановитьИсполнениеОперации(СхемаПроизводства, ВыполненнаяОперация, Момент)
	
	Для каждого Операция из СхемаПроизводства Цикл
		
		Если Операция.Номер = ВыполненнаяОперация.Номер И НЕ Операция.Исполнена Тогда
			
			Операция.Исполнена = Истина;
			
		КонецЕсли;
		
		Если Операция.НомерСледующейОперации = ВыполненнаяОперация.Номер И НЕ Операция.ИсполненаСледующая Тогда
			
			Если Операция.НаТомЖеРабочемЦентре Тогда
				
				Операция.РабочийЦентр = ВыполненнаяОперация.РабочийЦентр;
				
			КонецЕсли;
			
			Операция.СледующийРабочийЦентр = ВыполненнаяОперация.РабочийЦентрИсполнитель;
			Операция.ИсполненаСледующая = Истина;
			Операция.Момент = Момент;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьИсполнениеОперации()

Функция ПолучитьВремяТранспортировки(Источник, Получатель)
	
	ВремяТранспортировки = мКэш.ВремяТранспортировки.НайтиСтроки(Новый Структура("Источник, Получатель", Источник, Получатель));
	
	Если ВремяТранспортировки.Количество() > 0 Тогда
		
		Время = ВремяТранспортировки[0].Время;
		Возврат Время;
		
	КонецЕсли;	
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.ДлительностьДоставки КАК ДлительностьДоставки
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК Приоритет,
	|		ДлительностиДоставкиМатериальныхЦенностейПроизводства.ЧислоДней * 24 * 60 * 60 + РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДлительностиДоставкиМатериальныхЦенностейПроизводства.Время, ДЕНЬ), ДлительностиДоставкиМатериальныхЦенностейПроизводства.Время, СЕКУНДА) КАК ДлительностьДоставки
	|	ИЗ
	|		РегистрСведений.ДлительностиДоставкиМатериальныхЦенностейПроизводства КАК ДлительностиДоставкиМатериальныхЦенностейПроизводства
	|	ГДЕ
	|		ДлительностиДоставкиМатериальныхЦенностейПроизводства.Источник = &Источник
	|		И ДлительностиДоставкиМатериальныхЦенностейПроизводства.Получатель = &Получатель
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2,
	|		ДлительностиДоставкиМатериальныхЦенностейПроизводства.ЧислоДней * 24 * 60 * 60 + РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДлительностиДоставкиМатериальныхЦенностейПроизводства.Время, ДЕНЬ), ДлительностиДоставкиМатериальныхЦенностейПроизводства.Время, СЕКУНДА)
	|	ИЗ
	|		РегистрСведений.ДлительностиДоставкиМатериальныхЦенностейПроизводства КАК ДлительностиДоставкиМатериальныхЦенностейПроизводства
	|	ГДЕ
	|		ДлительностиДоставкиМатериальныхЦенностейПроизводства.Источник.Подразделение = &Источник
	|		И ДлительностиДоставкиМатериальныхЦенностейПроизводства.Получатель.Подразделение = &Получатель) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Приоритет");
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Время = 0;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Время = Выборка.ДлительностьДоставки;
		
	КонецЕсли;
	
	НоваяСтрокаКэша = мКэш.ВремяТранспортировки.Добавить();
	
	НоваяСтрокаКэша.Источник   = Источник;
	НоваяСтрокаКэша.Получатель = Получатель;
	НоваяСтрокаКэша.Время      = Время;
	
	Возврат Время;
	
КонецФункции // ПолучитьВремяТранспортировки()

Процедура ПроверкаРеквизитовПриПланировании(Отказ, Заголовок)
	
	РеквизитыШапки = "МоментЗапасов,НачальнаяГраница";
	
	РеквизитыТабТовары = "Номенклатура, Количество, ДатаЗапуска, ДатаВыпуска, ВариантРаспределенияВыпусков";
	РеквизитыТабДанныеЗаказов = "Заказ, ДатаЗапуска, ДатаВыпуска, ВариантРаспределенияВыпусков";
	РеквизитыТабДанныеПлановПроизводства = "Сценарий, ДатаНач, ДатаКон, ДатаЗапуска, ДатаВыпуска, ВариантРаспределенияВыпусков";
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", Новый Структура(РеквизитыТабТовары), Отказ, Заголовок);
	ПроверитьДатыЗапускаВыпуска("Товары", Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеЗаказов", Новый Структура(РеквизитыТабДанныеЗаказов), Отказ, Заголовок);
	ПроверитьДатыЗапускаВыпуска("ДанныеЗаказов", Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеПлановПроизводства", Новый Структура(РеквизитыТабДанныеПлановПроизводства), Отказ, Заголовок);
	ПроверитьДатыЗапускаВыпуска("ДанныеПлановПроизводства", Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитовПриПланировании()

Процедура ПроверкаРеквизитов(Отказ, Заголовок)
	
	РеквизитыТабЗанятостьРабочихЦентров = "Период, ДатаОкончания, РабочийЦентр";
	РеквизитыТабПотребностиПроизводства = "Период, Номенклатура";
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЗанятостьРабочихЦентров", Новый Структура(РеквизитыТабЗанятостьРабочихЦентров), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПотребностиПроизводства", Новый Структура(РеквизитыТабПотребностиПроизводства), Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитов()

Процедура ПроверитьДатыЗапускаВыпуска(ИмяТабличнойЧасти, Отказ, Заголовок)
	
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	ТабличнаяЧасть = ЭтотОбъект[ИмяТабличнойЧасти];
	
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаЗапуска) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаВыпуска) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если СтрокаТаблицы.ДатаЗапуска > СтрокаТаблицы.ДатаВыпуска Тогда

			СтрокаСообщения = "Дата запуска больше даты выпуска!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ПроверитьДатыЗапускаВыпуска()

Функция ПроверитьЗаполнениеОперацииТехКарты(ТехКарта, Операция)
	
	Результат = Ложь;
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Операция.НомерСтроки) +
	                               """ технологической карты """ + ТехКарта.Наименование + """: ";
	
	Если НЕ ЗначениеЗаполнено(Операция.РабочийЦентр) Тогда
		
		СтрокаСообщения = "Не заполнено значение реквизита ""Рабочий центр""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
		Результат = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Операция.ТехнологическаяОперация) Тогда
		
		СтрокаСообщения = "Не заполнено значение реквизита ""Тех. операция""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
		Результат = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Операция.Количество) Тогда
		
		СтрокаСообщения = "Не заполнено значение реквизита ""Количество""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
		Результат = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Операция.ВремяВыполнения) Тогда
		
		СтрокаСообщения = "Не заполнено значение реквизита ""Время выполнения (сек)""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьЗаполнениеОперацииТехКарты()

Функция ПроверитьЗаполнениеКомплектующегоСпецификации(Спецификация, Комплектующая)
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Комплектующая.Номенклатура) Тогда
		
		СтрокаНачалаСообщенияОбОшибке = "В спецификации """ + Спецификация.Наименование + """: ";

		СтрокаСообщения = "Не заполнено значение реквизита ""Номенклатура""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
		Результат = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Комплектующая.Количество) Тогда
		
		СтрокаНачалаСообщенияОбОшибке = "В спецификации """ + Спецификация.Наименование + """: ";
		
		СтрокаСообщения = "Не заполнено значение реквизита ""Количество""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьЗаполнениеКомплектующегоСпецификации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ДАННЫХ

Процедура РаспределитьПоНоменклатуре(ТаблицаПриемник, ТаблицаИсточник)

	ИндексСтроки = 0;

	Пока ИндексСтроки < ТаблицаИсточник.Количество() Цикл
		
		Если ТипЗнч(ТаблицаИсточник[ИндексСтроки].Номенклатура) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда

			ТаблицаРезультатРаспределения = Новый ТаблицаЗначений;

			Коэффициенты = Новый Массив();
			Значения = Новый Соответствие();

			Значения.Вставить("Количество", ТаблицаИсточник[ИндексСтроки].Количество * ТаблицаИсточник[ИндексСтроки].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);

			Номенклатура = Справочники.Номенклатура.Выбрать(,, Новый Структура("НоменклатурнаяГруппа", ТаблицаИсточник[ИндексСтроки].Номенклатура));
			
			Пока Номенклатура.Следующий() Цикл
				
				Если Номенклатура.ВесовойКоэффициентВхождения > 0 Тогда
					
					УправлениеПланированием.ДополнитьТаблицу(ТаблицаРезультатРаспределения, ТаблицаИсточник, , ИндексСтроки);
	                ТаблицаРезультатРаспределения[ТаблицаРезультатРаспределения.Количество() - 1].Номенклатура = Номенклатура.Ссылка;
					Коэффициенты.Добавить(Номенклатура.ВесовойКоэффициентВхождения);
					
				КонецЕсли;
				
			КонецЦикла;

			ТаблицаИсточник.Удалить(ТаблицаИсточник[ИндексСтроки]);
			
			Строки = Новый Массив();
			
			Для каждого Строка из ТаблицаРезультатРаспределения Цикл
				
				Строки.Добавить(Строка);
				
			КонецЦикла;
			
			Распределить(Строки, Коэффициенты, Значения);
			
			Индекс = 0;
			
			Пока Индекс < ТаблицаРезультатРаспределения.Количество() Цикл
				
				Если ТаблицаРезультатРаспределения[Индекс].Количество <= 0 ИЛИ ТаблицаРезультатРаспределения[Индекс].Номенклатура.Услуга Тогда
					
					ТаблицаРезультатРаспределения.Удалить(Индекс);
					
				Иначе
					
					ТаблицаРезультатРаспределения[Индекс].Количество = ТаблицаРезультатРаспределения[Индекс].Количество / ТаблицаРезультатРаспределения[Индекс].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
					Индекс = Индекс + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
			УправлениеПланированием.ДополнитьТаблицу(ТаблицаПриемник, ТаблицаРезультатРаспределения);
			
		Иначе
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;

	УправлениеПланированием.ДополнитьТаблицу(ТаблицаПриемник, ТаблицаИсточник);
	
КонецПроцедуры // РаспределитьПоНоменклатуре()

Процедура Распределить(Строки, Коэффициенты, Значения, ДополнятьЗначения = Ложь)

	СуммаКоэффициентов = 0;
	
	Для каждого Коэффициент из Коэффициенты Цикл
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
		
	КонецЦикла;
	
	Для Индекс = 0 по Строки.Количество() - 1 Цикл
		
		Для каждого Значение из Значения Цикл
			
			Если СуммаКоэффициентов = 0 Тогда
				
				Строки[Индекс][Значение.Ключ] = 0;
				
			Иначе
				
				Если Индекс = Строки.Количество() - 1 Тогда
					
					Строки[Индекс][Значение.Ключ] = ?(ДополнятьЗначения, Строки[Индекс][Значение.Ключ], 0) + Значение.Значение;
					Значения.Вставить(Значение.Ключ, 0);
					
				Иначе
					
					Строки[Индекс][Значение.Ключ] = ?(ДополнятьЗначения, Строки[Индекс][Значение.Ключ], 0) + Окр(Значение.Значение * Коэффициенты[Индекс] / СуммаКоэффициентов, 2);
					
					Если Значение.Значение > 0 Тогда
						
						Значения.Вставить(Значение.Ключ, Значение.Значение - Строки[Индекс][Значение.Ключ]);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаКоэффициентов = СуммаКоэффициентов - Коэффициенты[Индекс];
		
	КонецЦикла;

КонецПроцедуры // Распределить()

Процедура ВыполнитьРаспределение(Данные)
	
	Перем Результат;
	
	ТекущиеДанные = Новый Соответствие;
	
	Для каждого Строка из Данные Цикл
		
		ПериодДатаНач = Строка.ДатаЗапуска;
		ПериодДатаКон = Строка.ДатаВыпуска;
		РаспределяемоеЗначение = Строка.Количество;
		ВариантРаспределения = Строка.ВариантРаспределенияВыпусков;
		
		КратностьВыпуска = ПолучитьКратностьВыпуска(Строка);
		
		РезультатРаспределения = ПолучитьРаспределение(ВариантРаспределения, КратностьВыпуска, ПериодДатаНач, ПериодДатаКон, РаспределяемоеЗначение, ТекущиеДанные);
		
		Для каждого ЗначениеРаспределения из РезультатРаспределения Цикл
			
			УправлениеПланированием.ДополнитьТаблицу(Результат, Данные,, Данные.Индекс(Строка));
			Результат[Результат.Количество() - 1].ДатаВыпуска = КонецДня(ЗначениеРаспределения.Ключ);
			Результат[Результат.Количество() - 1].Количество = ЗначениеРаспределения.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		
		Данные = Результат.Скопировать();
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьРаспределение()

Функция ПолучитьРаспределение(ВариантРаспределения, КратностьВыпуска, ПериодДатаНач, ПериодДатаКон, РаспределяемоеЗначение, ТекущиеДанные)
	
	ЗначениеРаспределения = 0;
	РезультатРаспределения = Новый Соответствие;
	
	Если ВариантРаспределения = Перечисления.ВариантыРаспределенияПоПериоду.Равномерно Тогда
		
		ВыполнятьРаспределение = Истина;
		
		ТекущаяДата = ПериодДатаКон;
		
		Пока ТекущаяДата >= ПериодДатаНач Цикл
			
			ИсходноеЗначение = ТекущиеДанные.Получить(ТекущаяДата);
			РезультатРаспределения.Вставить(ТекущаяДата, ?(ИсходноеЗначение = Неопределено, 0, ИсходноеЗначение));
			ТекущаяДата = ТекущаяДата - 24 * 60 * 60;
			
		КонецЦикла;
		
		Пока ВыполнятьРаспределение Цикл
			
			УдаляемыеЗначения = Новый Массив;
			
			ВыполнятьРаспределение = Ложь;
			
			_РаспределяемоеЗначение = РаспределяемоеЗначение;
			
			Значение = РаспределяемоеЗначение / РезультатРаспределения.Количество();
			НаДень = Цел(Значение / КратностьВыпуска) * КратностьВыпуска + ?(Значение - Цел(Значение / КратностьВыпуска) * КратностьВыпуска > 0, 1, 0) * КратностьВыпуска;
			ЗначениеРаспределения = (СуммаЗначенийСоответствия(РезультатРаспределения) / РезультатРаспределения.Количество()) + НаДень;
			
			ТекущаяДата = ПериодДатаКон;
			
			Пока ТекущаяДата >= ПериодДатаНач Цикл
				
				Если РезультатРаспределения[ТекущаяДата] <> Неопределено Тогда
					
					Если РезультатРаспределения[ТекущаяДата] > ЗначениеРаспределения Тогда
						
						УдаляемыеЗначения.Добавить(ТекущаяДата);
						ВыполнятьРаспределение = Истина;
						
					ИначеЕсли _РаспределяемоеЗначение <= 0 Тогда
						
						УдаляемыеЗначения.Добавить(ТекущаяДата);
						
					Иначе
						
						_РаспределяемоеЗначение = _РаспределяемоеЗначение - НаДень;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТекущаяДата = ТекущаяДата - 24 * 60 * 60;
				
			КонецЦикла;
			
			Если ВыполнятьРаспределение Тогда
				
				Для каждого Значение из УдаляемыеЗначения Цикл
					
					РезультатРаспределения.Удалить(Значение);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		_РаспределяемоеЗначение = РаспределяемоеЗначение;
		
		ТекущаяДата = ПериодДатаКон;
		
		Пока ТекущаяДата >= ПериодДатаНач Цикл
			
			Если РезультатРаспределения[ТекущаяДата] <> Неопределено Тогда
				
				Значение = ?(РезультатРаспределения[ТекущаяДата] > ЗначениеРаспределения, 0, ЗначениеРаспределения - РезультатРаспределения[ТекущаяДата]);
				Значение = Цел(Значение / КратностьВыпуска) * КратностьВыпуска + ?(Значение - Цел(Значение / КратностьВыпуска) * КратностьВыпуска > 0, 1, 0) * КратностьВыпуска;
				
				Если Значение <= _РаспределяемоеЗначение Тогда
					
					РезультатРаспределения.Вставить(ТекущаяДата, Значение);
					
				Иначе
					
					Значение = Цел(_РаспределяемоеЗначение / КратностьВыпуска) * КратностьВыпуска + ?(_РаспределяемоеЗначение - Цел(_РаспределяемоеЗначение / КратностьВыпуска) * КратностьВыпуска > 0, 1, 0) * КратностьВыпуска;
					РезультатРаспределения.Вставить(ТекущаяДата, Значение);
					
				КонецЕсли;
				
				_РаспределяемоеЗначение = _РаспределяемоеЗначение - Значение;
				
			КонецЕсли;
			
			ТекущаяДата = ТекущаяДата - 24 * 60 * 60;
			
		КонецЦикла;
		
	Иначе
		
		РезультатРаспределения.Вставить(ПериодДатаКон, РаспределяемоеЗначение);
		
	КонецЕсли;
	
	Для каждого Значение из РезультатРаспределения Цикл
		
		ИсходноеЗначение = ТекущиеДанные.Получить(Значение.Ключ);		
		ТекущиеДанные.Вставить(Значение.Ключ, ?(ИсходноеЗначение = Неопределено, Значение.Значение, Значение.Значение));
		
	КонецЦикла;
	
	Возврат РезультатРаспределения;
	
КонецФункции // ПолучитьРаспределение()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫБОРА ДАННЫХ

Функция ПолучитьТаблицуВыпусков() Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Заказ КАК Заказ,
	|	ВложенныйЗапрос.Спецификация КАК Спецификация,
	|	ВложенныйЗапрос.Проект КАК Проект,
	|	ВложенныйЗапрос.ДатаЗапуска КАК ДатаЗапуска,
	|	ВложенныйЗапрос.ДатаВыпуска КАК ДатаВыпуска,
	|	ВложенныйЗапрос.ВариантРаспределенияВыпусков КАК ВариантРаспределенияВыпусков,
	|	ВложенныйЗапрос.ВРамкахПлана КАК ВРамкахПлана,
	|	ВложенныйЗапрос.ПоДаннымПланов КАК ПоДаннымПланов,
	|	ВложенныйЗапрос.Количество КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧастьТовары.Номенклатура КАК Номенклатура,
	|		ТабличнаяЧастьТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ТабличнаяЧастьТовары.Заказ КАК Заказ,
	|		ТабличнаяЧастьТовары.Спецификация КАК Спецификация,
	|		ТабличнаяЧастьТовары.Проект КАК Проект,
	|		ТабличнаяЧастьТовары.ДатаЗапуска КАК ДатаЗапуска,
	|		КОНЕЦПЕРИОДА(ТабличнаяЧастьТовары.ДатаВыпуска, ДЕНЬ) КАК ДатаВыпуска,
	|		ТабличнаяЧастьТовары.ВариантРаспределенияВыпусков КАК ВариантРаспределенияВыпусков,
	|		ЛОЖЬ КАК ВРамкахПлана,
	|		ЛОЖЬ КАК ПоДаннымПланов,
	|		ТабличнаяЧастьТовары.Количество * ТабличнаяЧастьТовары.Коэффициент КАК Количество
	|	ИЗ
	|		Документ.ПланПроизводстваПоСменам.Товары КАК ТабличнаяЧастьТовары
	|	ГДЕ
	|		ТабличнаяЧастьТовары.Ссылка = &Документ И
	|		ТабличнаяЧастьТовары.Количество * ТабличнаяЧастьТовары.Коэффициент > 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ТабличнаяЧастьЗаказы.Заказ КАК Заказ,
	|		&ПустаяСпецификация КАК Спецификация,
	|		ТабличнаяЧастьЗаказы.Проект КАК Проект,
	|		ТабличнаяЧастьЗаказы.ДатаЗапуска КАК ДатаЗапуска,
	|		КОНЕЦПЕРИОДА(ТабличнаяЧастьЗаказы.ДатаВыпуска, ДЕНЬ) КАК ДатаВыпуска,
	|		ТабличнаяЧастьЗаказы.ВариантРаспределенияВыпусков КАК ВариантРаспределенияВыпусков,
	|		ЛОЖЬ КАК ВРамкахПлана,
	|		ЛОЖЬ КАК ПоДаннымПланов,
	|		ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК Количество
	|	ИЗ
	|		Документ.ПланПроизводстваПоСменам.ДанныеЗаказов КАК ТабличнаяЧастьЗаказы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментОстаткиПоЗаказам, Номенклатура.ВидВоспроизводства = &ВидВоспроизводства_Производство) КАК ЗаказыПокупателейОстатки
	|			ПО ТабличнаяЧастьЗаказы.Заказ = ЗаказыПокупателейОстатки.ЗаказПокупателя
	|	ГДЕ
	|		ТабличнаяЧастьЗаказы.Ссылка = &Документ И
	|		ТабличнаяЧастьЗаказы.Заказ ССЫЛКА Документ.ЗаказПокупателя И
	|		ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) > 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыНаПроизводствоОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыНаПроизводствоОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ТабличнаяЧастьЗаказы.Заказ КАК Заказ,
	|		ЗаказыНаПроизводствоОстатки.Спецификация КАК Спецификация,
	|		ТабличнаяЧастьЗаказы.Проект КАК Проект,
	|		ТабличнаяЧастьЗаказы.ДатаЗапуска КАК ДатаЗапуска,
	|		КОНЕЦПЕРИОДА(ТабличнаяЧастьЗаказы.ДатаВыпуска, ДЕНЬ) КАК ДатаВыпуска,
	|		ТабличнаяЧастьЗаказы.ВариантРаспределенияВыпусков КАК ВариантРаспределенияВыпусков,
	|		ЛОЖЬ КАК ВРамкахПлана,
	|		ЛОЖЬ КАК ПоДаннымПланов,
	|		ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) КАК Количество
	|	ИЗ
	|		Документ.ПланПроизводстваПоСменам.ДанныеЗаказов КАК ТабличнаяЧастьЗаказы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПроизводство.Остатки(&МоментОстаткиПоЗаказам, Номенклатура.ВидВоспроизводства = &ВидВоспроизводства_Производство) КАК ЗаказыНаПроизводствоОстатки
	|			ПО ТабличнаяЧастьЗаказы.Заказ = ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство
	|	ГДЕ
	|		ТабличнаяЧастьЗаказы.Ссылка = &Документ И
	|		ТабличнаяЧастьЗаказы.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И
	|		ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) > 0
	|";
	
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.УстановитьПараметр("МоментОстаткиПоЗаказам", Дата);
	Запрос.УстановитьПараметр("ВидВоспроизводства_Производство", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	Запрос.УстановитьПараметр("ПустаяСпецификация", Справочники.СпецификацииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСценарий", Справочники.СценарииПланирования.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());
	
	Для каждого План из ДанныеПлановПроизводства Цикл
		
		НомерСтроки = Формат(План.НомерСтроки, "ЧГ=0");
		
		Запрос.УстановитьПараметр("Сценарий" + НомерСтроки, План.Сценарий);
		Запрос.УстановитьПараметр("Подразделение" + НомерСтроки, План.Подразделение);
		Запрос.УстановитьПараметр("Проект" + НомерСтроки, План.Проект);
		Запрос.УстановитьПараметр("ДатаНач" + НомерСтроки, Новый Граница(НачалоДня(План.ДатаНач), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ДатаКон" + НомерСтроки, Новый Граница(КонецДня(План.ДатаКон), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ДатаЗапуска" + НомерСтроки, План.ДатаЗапуска);
		Запрос.УстановитьПараметр("ДатаВыпуска" + НомерСтроки, КонецДня(План.ДатаВыпуска));
		Запрос.УстановитьПараметр("ВариантРаспределенияВыпусков" + НомерСтроки, План.ВариантРаспределенияВыпусков);
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Планы.Номенклатура КАК Номенклатура,
		|		Планы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		Планы.Заказ КАК Заказ,
		|		Планы.Спецификация КАК Спецификация,
		|		Планы.Проект КАК Проект,
		|		&ДатаЗапуска" + НомерСтроки + " КАК ДатаЗапуска,
		|		&ДатаВыпуска" + НомерСтроки + " КАК ДатаВыпуска,
		|		&ВариантРаспределенияВыпусков" + НомерСтроки + " КАК ВариантРаспределенияВыпусков,
		|		ИСТИНА КАК ВРамкахПлана,
		|		ИСТИНА КАК ПоДаннымПланов,
		|		Планы.КоличествоОборот КАК Количество
		|	ИЗ
		|		РегистрНакопления.ПланыПроизводства.Обороты(&ДатаНач" + НомерСтроки + ", &ДатаКон" + НомерСтроки + ",,
		|			(Сценарий = &Сценарий" + НомерСтроки + " ИЛИ &Сценарий" + НомерСтроки + " = &ПустойСценарий) И
		|			(Подразделение = &Подразделение" + НомерСтроки + " ИЛИ &Подразделение" + НомерСтроки + " = &ПустоеПодразделение) И
		|			(Проект = &Проект" + НомерСтроки + " ИЛИ &Проект" + НомерСтроки + " = &ПустойПроект)) КАК Планы
		|	ГДЕ
		|		Планы.КоличествоОборот > 0";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|) КАК ВложенныйЗапрос";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВыпусков = Новый ТаблицаЗначений;
	
	РаспределитьПоНоменклатуре(ТаблицаВыпусков, РезультатЗапроса);
	ВыполнитьРаспределение(ТаблицаВыпусков);
	
	ТаблицаВыпусков.Сортировать("ДатаВыпуска Возр");
	
	Возврат ТаблицаВыпусков;
	
КонецФункции // ПолучитьТаблицуВыпусков()

Функция ПолучитьДвиженияПоСпецификации(Выпуск, НомерОперацииМаршрута, КоличествоЦикловВыпуска, ЦикловКПланированию, ДатаВыпуска)
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("ХарактеристикаНоменклатуры");
	Результат.Колонки.Добавить("Заказ");
	Результат.Колонки.Добавить("Спецификация");
	Результат.Колонки.Добавить("Проект");
	Результат.Колонки.Добавить("ДатаЗапуска");
	Результат.Колонки.Добавить("ДатаВыпуска");
	Результат.Колонки.Добавить("ВариантРаспределенияВыпусков");
	Результат.Колонки.Добавить("ВРамкахПлана");
	Результат.Колонки.Добавить("ПоДаннымПланов");
	Результат.Колонки.Добавить("Количество");
	
	РезультатРазузлования = Новый Структура("ИсходныеКомплектующие");
	
	Параметры = Новый Структура("КоличествоУровнейРазузлования, ДатаСпецификации, Отбор, КэшРазузлования");
	Параметры.КоличествоУровнейРазузлования = 1;
	Параметры.ДатаСпецификации = ДатаВыпуска;
	Параметры.Отбор = Новый Структура("НомерОперацииМаршрута", НомерОперацииМаршрута);
	
	СтруктураИсточник = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество, Спецификация");
	
	ЗаполнитьЗначенияСвойств(СтруктураИсточник, Выпуск);
	СтруктураИсточник.Количество = (СтруктураИсточник.Количество * ЦикловКПланированию.Числитель * КоличествоЦикловВыпуска.Знаменатель) / (ЦикловКПланированию.Знаменатель * КоличествоЦикловВыпуска.Числитель);
	
	//Получаем движения по спецификации в зависимости от использования или неиспользования детальных источников
	
	//Для детальных источников параметр Выпуск является строкой дерева значений, движениями по спецификации - Выпуск.Строки
	Если ИспользоватьДетальныеИсточники Тогда
		
		//Для детальных источников результатом должны являться СтрокиДереваЗначений
		РезультатРазузлования.ИсходныеКомплектующие = мДеревоПланов.Скопировать();
		РезультатРазузлования.ИсходныеКомплектующие.Строки.Очистить();
		Результат = РезультатРазузлования.ИсходныеКомплектующие.Скопировать();
		Результат = Результат.Строки;
		
		Для каждого СтрокаДерева Из Выпуск.Строки Цикл
			
			Если НомерОперацииМаршрута = СтрокаДерева.НомерОперацииМаршрута Тогда
				
				НоваяСтрока = РезультатРазузлования.ИсходныеКомплектующие.Строки.Добавить();
				//Пользуемся специальной функцией копирования строки дерева, т.к. функция ЗаполнитьЗначенияСвойств не копирует подчиненные строки
				СкопироватьСтрокуДерева(СтрокаДерева, НоваяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Выходом функции будет объект типа СтрокиДереваЗначений для обеспечения идентичности методов перебора с переменной Результат (ТаблицаЗначений)
		РезультатРазузлования.ИсходныеКомплектующие = РезультатРазузлования.ИсходныеКомплектующие.Строки;
		
		Для каждого СтрокаВыпуска Из РезультатРазузлования.ИсходныеКомплектующие Цикл
			
			//Корректируем количество, приводим в соответствие с параметром ЦикловКПланированию
			КоличествоДляВыпускаПоСпецификации = (ЦикловКПланированию.Числитель / ЦикловКПланированию.Знаменатель) * СтрокаВыпуска.КоличествоПоСпецификации;
			СтрокаВыпуска.Количество = ?(КоличествоДляВыпускаПоСпецификации > СтрокаВыпуска.Количество, СтрокаВыпуска.Количество, КоличествоДляВыпускаПоСпецификации);
			
		КонецЦикла;
		
	Иначе
		
		//Получение движений по спецификации без использования детальных источников - без изменения
		МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточник, РезультатРазузлования, Параметры, мКэш);
		
		Если МассивОшибок.Количество() > 0 Тогда
			
			Для каждого Ошибка из МассивОшибок Цикл
				
				ОбщегоНазначения.Сообщение("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
				ОбщегоНазначения.Сообщение(" Спецификация: " + Ошибка.Спецификация);
				ОбщегоНазначения.Сообщение(" Номер строки: " + Ошибка.НомерСтроки);
				ОбщегоНазначения.Сообщение(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Комплектующая из РезультатРазузлования.ИсходныеКомплектующие Цикл
		
		Если ПроверитьЗаполнениеКомплектующегоСпецификации(Выпуск.Спецификация, Комплектующая) Тогда
				
			Продолжить;
				
		КонецЕсли;
			
		НоваяСтрока = Результат.Добавить();
		
		Если ИспользоватьДетальныеИсточники Тогда
			
			СкопироватьСтрокуДерева(Комплектующая, НоваяСтрока);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Комплектующая);
			
		КонецЕсли;
		
		НоваяСтрока.ДатаВыпуска = ДатаВыпуска;
				
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДвиженияПоСпецификации()

Функция ПолучитьВыходныеИзделия(Спецификация)
	
	ВыходныеИзделия = мКэш.ВыходныеИзделия.НайтиСтроки(Новый Структура("Спецификация", Спецификация));
	
	Если ВыходныеИзделия.Количество() > 0 Тогда
		
		Возврат ВыходныеИзделия[0].РезультатЗапроса.Выбрать();
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	0 КАК Порядок,
	|	ВыхИзделия.НомерОперацииМаршрута КАК НомерОперацииМаршрута,
	|	ВыхИзделия.Номенклатура КАК Номенклатура,
	|	ВыхИзделия.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВыхИзделия.Количество) КАК Количество
	|ИЗ
	|	Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК ВыхИзделия
	|ГДЕ
	|	ВыхИзделия.Ссылка = &Спецификация
	|	И ВыхИзделия.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВыхИзделия.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыхИзделия.НомерОперацииМаршрута,
	|	ВыхИзделия.Номенклатура,
	|	ВыхИзделия.ХарактеристикаНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ВозврОтходы.НомерОперацииМаршрута,
	|	ВозврОтходы.Номенклатура,
	|	ВозврОтходы.ХарактеристикаНоменклатуры,
	|	СУММА(ВозврОтходы.Количество)
	|ИЗ
	|	Справочник.СпецификацииНоменклатуры.ВозвратныеОтходы КАК ВозврОтходы
	|ГДЕ
	|	ВозврОтходы.Ссылка = &Спецификация
	|	И ВозврОтходы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВозврОтходы.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозврОтходы.НомерОперацииМаршрута,
	|	ВозврОтходы.Номенклатура,
	|	ВозврОтходы.ХарактеристикаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры");
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НоваяСтрокаКэша = мКэш.ВыходныеИзделия.Добавить();
	
	НоваяСтрокаКэша.Спецификация = Спецификация;
	НоваяСтрокаКэша.РезультатЗапроса = РезультатЗапроса;
		
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции // ПолучитьВыходныеИзделия()

Функция ПолучитьСхемуПроизводства(Выпуск, ТехнологическаяКарта = Неопределено, СледующийРабочийЦентр = Неопределено)
	
	Если ТехнологическаяКарта = Неопределено ИЛИ ТехнологическаяКарта.Пустая() Тогда
		
		Если Выпуск.Спецификация = Неопределено ИЛИ Выпуск.Спецификация.Пустая() Тогда
			
			Выпуск.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Выпуск.Номенклатура, Выпуск.ХарактеристикаНоменклатуры, Выпуск.ДатаВыпуска, Подразделение, мКэш);
			
		КонецЕсли;
		
		ТехнологическаяКарта = РегистрыСведений.ТехнологическиеКартыСпецификацийПланирования.ПолучитьПоследнее(Выпуск.ДатаВыпуска, Новый Структура("Спецификация", Выпуск.Спецификация)).ТехнологическаяКарта;
		
	КонецЕсли;
	
	СхемаПроизводства = Новый ТаблицаЗначений;
	СхемаПроизводства.Колонки.Добавить("Номер");
	
	СхемаПроизводства.Колонки.Добавить("РабочийЦентрПодготовительнойОперации", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров"));
	СхемаПроизводства.Колонки.Добавить("ТехнологическаяОперацияПодготовительная", Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	СхемаПроизводства.Колонки.Добавить("ВремяПодготовительнойОперации");
	
	СхемаПроизводства.Колонки.Добавить("РабочийЦентрИсполнитель", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	СхемаПроизводства.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров"));
	СхемаПроизводства.Колонки.Добавить("ТехнологическаяОперация", Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	СхемаПроизводства.Колонки.Добавить("Количество");
	СхемаПроизводства.Колонки.Добавить("ВремяВыполнения");
	
	СхемаПроизводства.Колонки.Добавить("РабочийЦентрЗаключительнойОперации", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров"));
	СхемаПроизводства.Колонки.Добавить("ТехнологическаяОперацияЗаключительная", Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	СхемаПроизводства.Колонки.Добавить("ВремяЗаключительнойОперации");
	
	СхемаПроизводства.Колонки.Добавить("ДопускаетПеренос", Новый ОписаниеТипов("Булево"));
	СхемаПроизводства.Колонки.Добавить("НомерСледующейОперации");
	СхемаПроизводства.Колонки.Добавить("Момент");
	
	СхемаПроизводства.Колонки.Добавить("Исполнена", Новый ОписаниеТипов("Булево"));
	СхемаПроизводства.Колонки.Добавить("НаТомЖеРабочемЦентре", Новый ОписаниеТипов("Булево"));
	СхемаПроизводства.Колонки.Добавить("ИсполненаСледующая", Новый ОписаниеТипов("Булево"));
	СхемаПроизводства.Колонки.Добавить("СледующийРабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров"));
	СхемаПроизводства.Колонки.Добавить("СледующаяТехнологическаяОперация", Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	
	Для каждого Операция Из ТехнологическаяКарта.Маршрут Цикл
		
		Если ПроверитьЗаполнениеОперацииТехКарты(ТехнологическаяКарта, Операция) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСледующихОпераций = Новый Массив;
		НомераСледующихОпераций = СтрЗаменить(СокрЛП(Операция.СледующиеОперации)," ","");
		НомераСледующихОпераций = СтрЗаменить(НомераСледующихОпераций, ";", Символы.ПС);
		НомераСледующихОпераций = СтрЗаменить(НомераСледующихОпераций, ",", Символы.ПС);
		
		Для НомерСтроки = 1 По СтрЧислоСтрок(НомераСледующихОпераций) Цикл
			
			МассивСледующихОпераций.Добавить(СтрПолучитьСтроку(НомераСледующихОпераций, НомерСтроки));
			
		КонецЦикла;
		
		Для каждого СледующаяОперация Из МассивСледующихОпераций Цикл
			
			НоваяЗаписьСхемы = СхемаПроизводства.Добавить();
			НоваяЗаписьСхемы.Номер = СокрЛП(Операция.НомерОперации);
			
			НоваяЗаписьСхемы.РабочийЦентрПодготовительнойОперации = Операция.РабочийЦентрПодготовительнойОперации;
			НоваяЗаписьСхемы.ТехнологическаяОперацияПодготовительная = Операция.ТехнологическаяОперацияПодготовительная;
			НоваяЗаписьСхемы.ВремяПодготовительнойОперации = Операция.ВремяПодготовительнойОперации * ?(Операция.ТехнологическаяОперацияПодготовительная.Коэффициент = 0, 1, Операция.ТехнологическаяОперацияПодготовительная.Коэффициент);
			
			НоваяЗаписьСхемы.РабочийЦентр = Операция.РабочийЦентр;
			НоваяЗаписьСхемы.ТехнологическаяОперация = Операция.ТехнологическаяОперация;
			НоваяЗаписьСхемы.Количество = Операция.Количество;
			НоваяЗаписьСхемы.ВремяВыполнения = Операция.ВремяВыполнения * ?(Операция.ТехнологическаяОперация.Коэффициент = 0, 1, Операция.ТехнологическаяОперация.Коэффициент);
			
			НоваяЗаписьСхемы.РабочийЦентрЗаключительнойОперации = Операция.РабочийЦентрЗаключительнойОперации;
			НоваяЗаписьСхемы.ТехнологическаяОперацияЗаключительная = Операция.ТехнологическаяОперацияЗаключительная;
			НоваяЗаписьСхемы.ВремяЗаключительнойОперации = Операция.ВремяЗаключительнойОперации * ?(Операция.ТехнологическаяОперацияЗаключительная.Коэффициент = 0, 1, Операция.ТехнологическаяОперацияЗаключительная.Коэффициент);
			
			НоваяЗаписьСхемы.ДопускаетПеренос = Операция.ДопускаетПеренос;
			НоваяЗаписьСхемы.НомерСледующейОперации = СледующаяОперация;
			НоваяЗаписьСхемы.Момент = Выпуск.ДатаВыпуска;
			
			Если ПустаяСтрока(СледующаяОперация) Тогда
				
				НоваяЗаписьСхемы.ИсполненаСледующая = Истина;
				НоваяЗаписьСхемы.СледующийРабочийЦентр = ?(СледующийРабочийЦентр <> Неопределено, СледующийРабочийЦентр, НоваяЗаписьСхемы.СледующийРабочийЦентр);
				
			Иначе
				
				ДанныеПоОперации = ТехнологическаяКарта.Маршрут.Найти(СледующаяОперация, "НомерОперации");
				
				Если ДанныеПоОперации <> Неопределено Тогда
					
					НоваяЗаписьСхемы.СледующийРабочийЦентр = ДанныеПоОперации.РабочийЦентр;
					НоваяЗаписьСхемы.СледующаяТехнологическаяОперация = ДанныеПоОперации.ТехнологическаяОперация;
					НоваяЗаписьСхемы.НаТомЖеРабочемЦентре = (НоваяЗаписьСхемы.РабочийЦентр = НоваяЗаписьСхемы.СледующийРабочийЦентр);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СхемаПроизводства;

КонецФункции // ПолучитьСхемуПроизводства()

Процедура ЗаполнитьДоступныеЗапасы()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество,
	|	ЛОЖЬ КАК Внутри
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&МоментЗапасов, Склад В ИЕРАРХИИ (&ДоступныеСклады)) КАК ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры");
	
	Запрос.УстановитьПараметр("МоментЗапасов", МоментЗапасов);
	Запрос.УстановитьПараметр("ДоступныеСклады", ДоступныеСклады.ВыгрузитьКолонку("Склад"));
	
	мДоступныеЗапасы = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // ЗаполнитьДоступныеЗапасы()

Процедура ЗаполнитьДоступностьРЦ(НачальнаяДата, КонечнаяДата, РабочийЦентр)
	
	МассивРабочиеЦентры = Новый Массив;
	
	Если ТипЗнч(РабочийЦентр) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
		
		МассивРабочиеЦентры.Добавить(РабочийЦентр)
		
	Иначе
		
		МассивРабочиеЦентры = РабочийЦентр.Состав.ВыгрузитьКолонку("РабочийЦентр");
		
	КонецЕсли;
	
	КоличествоЭлементовКоллекции = МассивРабочиеЦентры.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		
		Удалить = Истина;

		ЭлементМассиваРабочиеЦентры = МассивРабочиеЦентры[КоличествоЭлементовКоллекции - ОбратныйИндекс];
		
		ПериодыДоступностиРЦ = мДоступностьРЦ[ЭлементМассиваРабочиеЦентры];
		
		Если ПериодыДоступностиРЦ <> Неопределено Тогда
			
			ТекущийПериод = НачалоДня(НачальнаяДата);
			
			Пока ТекущийПериод <= НачалоДня(КонечнаяДата) Цикл
				
				Если ПериодыДоступностиРЦ[ТекущийПериод] = Неопределено Тогда
						
					Удалить = Ложь;
					Прервать;
						
				КонецЕсли;
				
				ТекущийПериод = ТекущийПериод + 24 * 60 * 60;
				
			КонецЦикла;
			
		Иначе
			
			Удалить = Ложь;
			
		КонецЕсли;
		
		Если Удалить Тогда
			
			МассивРабочиеЦентры.Удалить(КоличествоЭлементовКоллекции - ОбратныйИндекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивРабочиеЦентры.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступностьРЦ.РабочийЦентр КАК РабочийЦентр,
	|	ДоступностьРЦ.Дата КАК Период,
	|	ДоступностьРЦ.Смена КАК Смена,
	|	ЗанятостьРЦ.ДатаОкончания КАК ДатаОкончанияЗанятости,
	|	СУММА(РАЗНОСТЬДАТ(ЗанятостьРЦ.Период, ЗанятостьРЦ.ДатаОкончания, СЕКУНДА)) КАК ДлительностьЗанятости
	|ИЗ
	|	(ВЫБРАТЬ
	|		Интервалы.РабочийЦентр КАК РабочийЦентр,
	|		НаборЗаписейГрафика.Дата КАК Дата,
	|		ВЫБОР
	|			КОГДА НаборЗаписейГрафика.Часы > 0
	|				ТОГДА НаборЗаписейГрафика.Смена
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Смены.ПустаяСсылка)
	|		КОНЕЦ КАК Смена
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ИнтервалыПредварительные.РабочийЦентр КАК РабочийЦентр,
	|			ИнтервалыПредварительные.ГрафикРаботы КАК ГрафикРаботы,
	|			ИнтервалыПредварительные.НачалоДействияГрафика КАК НачалоДействияГрафика,
	|			ЕСТЬNULL(ИнтервалыПредварительные.ОкончаниеДействияГрафика, ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&КонечнаяДата, ДЕНЬ, 1), СЕКУНДА, -1)) КАК ОкончаниеДействияГрафика
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ГрафикиРЦ.РабочийЦентр КАК РабочийЦентр,
	|				ГрафикиРЦ.ГрафикРаботы КАК ГрафикРаботы,
	|				ГрафикиРЦ.Период КАК НачалоДействияГрафика,
	|				ДОБАВИТЬКДАТЕ(МИНИМУМ(ГрафикиРабочихЦентров.Период), СЕКУНДА, -1) КАК ОкончаниеДействияГрафика
	|			ИЗ
	|				(ВЫБРАТЬ
	|					&НачальнаяДата КАК Период,
	|					ГрафикРЦНаДатуЗапуска.РабочийЦентр КАК РабочийЦентр,
	|					ГрафикРЦНаДатуЗапуска.ГрафикРаботы КАК ГрафикРаботы
	|				ИЗ
	|					РегистрСведений.ГрафикиРабочихЦентров.СрезПоследних(&НачальнаяДата, РабочийЦентр В (&МассивРабочиеЦентры)) КАК ГрафикРЦНаДатуЗапуска
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					ИзменениеГрафиковРЦСДатыЗапускаПоДатуВыпуска.Период,
	|					ИзменениеГрафиковРЦСДатыЗапускаПоДатуВыпуска.РабочийЦентр,
	|					ИзменениеГрафиковРЦСДатыЗапускаПоДатуВыпуска.ГрафикРаботы
	|				ИЗ
	|					РегистрСведений.ГрафикиРабочихЦентров КАК ИзменениеГрафиковРЦСДатыЗапускаПоДатуВыпуска
	|				ГДЕ
	|					ИзменениеГрафиковРЦСДатыЗапускаПоДатуВыпуска.РабочийЦентр В(&МассивРабочиеЦентры)
	|					И ИзменениеГрафиковРЦСДатыЗапускаПоДатуВыпуска.Период > &НачальнаяДата
	|					И ИзменениеГрафиковРЦСДатыЗапускаПоДатуВыпуска.Период <= &КонечнаяДата) КАК ГрафикиРЦ
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРабочихЦентров КАК ГрафикиРабочихЦентров
	|					ПО ГрафикиРЦ.РабочийЦентр = ГрафикиРабочихЦентров.РабочийЦентр
	|						И ГрафикиРЦ.Период < ГрафикиРабочихЦентров.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ГрафикиРЦ.РабочийЦентр,
	|				ГрафикиРЦ.ГрафикРаботы,
	|				ГрафикиРЦ.Период) КАК ИнтервалыПредварительные) КАК Интервалы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоСменам КАК НаборЗаписейГрафика
	|			ПО Интервалы.ГрафикРаботы = НаборЗаписейГрафика.ГрафикРаботы
	|				И Интервалы.НачалоДействияГрафика <= НаборЗаписейГрафика.Дата
	|				И Интервалы.ОкончаниеДействияГрафика >= НаборЗаписейГрафика.Дата) КАК ДоступностьРЦ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
	|		ПО (СменыПериодыСмены.Ссылка = ДоступностьРЦ.Смена)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
	|		ПО (ГрафикиРаботыПериодыСмены.Ссылка = ДоступностьРЦ.Смена)
    |			И (ГрафикиРаботыПериодыСмены.ДеньНедели.Порядок + 1 = ДЕНЬНЕДЕЛИ(ДоступностьРЦ.Дата)) 	
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗанятостьРЦ.РабочийЦентр КАК РабочийЦентр,
	|			ЗанятостьРЦ.Смена КАК Смена,
	|			ЗанятостьРЦ.Период КАК Период,
	|			ЗанятостьРЦ.ДатаОкончания КАК ДатаОкончания
	|		ИЗ
	|			РегистрСведений.ДанныеДляПланированияЗанятостиРабочихЦентров КАК ЗанятостьРЦ
	|		ГДЕ
	|			ЗанятостьРЦ.РабочийЦентр В(&МассивРабочиеЦентры)
	|			И ЗанятостьРЦ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРабочихЦентров.Занят)
	|			И ЗанятостьРЦ.Документ <> &Документ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗанятостьРЦ.РабочийЦентр,
	|			ЗанятостьРЦ.Смена,
	|			ЗанятостьРЦ.Период,
	|			ЗанятостьРЦ.ДатаОкончания) КАК ЗанятостьРЦ
	|		ПО ДоступностьРЦ.РабочийЦентр = ЗанятостьРЦ.РабочийЦентр
	|			И (ВЫБОР
	|				КОГДА ДоступностьРЦ.Смена ССЫЛКА Справочник.Смены
	|					ТОГДА ЗанятостьРЦ.Период >= ДОБАВИТЬКДАТЕ(ДоступностьРЦ.Дата, СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(СменыПериодыСмены.ВремяНачала, ДЕНЬ), СменыПериодыСмены.ВремяНачала, СЕКУНДА))
	|							И ВЫБОР
	|								КОГДА СменыПериодыСмены.ВремяНачала < СменыПериодыСмены.ВремяОкончания
	|									ТОГДА ЗанятостьРЦ.ДатаОкончания <= ДОБАВИТЬКДАТЕ(ДоступностьРЦ.Дата, СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(СменыПериодыСмены.ВремяОкончания, ДЕНЬ), СменыПериодыСмены.ВремяОкончания, СЕКУНДА))
	|								ИНАЧЕ ЗанятостьРЦ.ДатаОкончания <= ДОБАВИТЬКДАТЕ(ДоступностьРЦ.Дата, СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(СменыПериодыСмены.ВремяОкончания, ДЕНЬ), СменыПериодыСмены.ВремяОкончания, СЕКУНДА) + 24 * 3600)
	|							КОНЕЦ
	|							И ДоступностьРЦ.Смена = ЗанятостьРЦ.Смена
	|				КОГДА ДоступностьРЦ.Смена ССЫЛКА Справочник.ГрафикиРаботы
	|					ТОГДА ЗанятостьРЦ.Период >= ДОБАВИТЬКДАТЕ(ДоступностьРЦ.Дата, СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ГрафикиРаботыПериодыСмены.ВремяНачала, ДЕНЬ), ГрафикиРаботыПериодыСмены.ВремяНачала, СЕКУНДА))
	|							И ВЫБОР
	|								КОГДА ГрафикиРаботыПериодыСмены.ВремяНачала < ГрафикиРаботыПериодыСмены.ВремяОкончания
	|									ТОГДА ЗанятостьРЦ.ДатаОкончания <= ДОБАВИТЬКДАТЕ(ДоступностьРЦ.Дата, СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ГрафикиРаботыПериодыСмены.ВремяОкончания, ДЕНЬ), ГрафикиРаботыПериодыСмены.ВремяОкончания, СЕКУНДА))
	|								ИНАЧЕ ЗанятостьРЦ.ДатаОкончания <= ДОБАВИТЬКДАТЕ(ДоступностьРЦ.Дата, СЕКУНДА, РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ГрафикиРаботыПериодыСмены.ВремяОкончания, ДЕНЬ), ГрафикиРаботыПериодыСмены.ВремяОкончания, СЕКУНДА) + 24 * 3600)
	|							КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	ДоступностьРЦ.Дата ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступностьРЦ.РабочийЦентр,
	|	ДоступностьРЦ.Дата,
	|	ДоступностьРЦ.Смена,
	|	ЗанятостьРЦ.ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	РабочийЦентр,
	|	Период,
	|	Смена");
	
	Запрос.УстановитьПараметр("НачальнаяДата", НачалоДня(НачальнаяДата));
	Запрос.УстановитьПараметр("КонечнаяДата", КонецДня(КонечнаяДата));
	Запрос.УстановитьПараметр("МассивРабочиеЦентры", МассивРабочиеЦентры);
	Запрос.УстановитьПараметр("Документ", Ссылка);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Для рабочего центра доступность ранее не запрашивалась
		Если мДоступностьРЦ[Выборка.РабочийЦентр] = Неопределено Тогда
			
			мДоступностьРЦ.Вставить(Выборка.РабочийЦентр, Новый Соответствие);
			
		КонецЕсли;
		
		// Текущие периоды доступности рабочего центра
		ПериодыДоступностиРЦ = мДоступностьРЦ[Выборка.РабочийЦентр];
		
		Если ПериодыДоступностиРЦ[Выборка.Период] = Неопределено Тогда
				
			ПериодыДоступностиРЦ.Вставить(Выборка.Период, Новый Соответствие);
				
		КонецЕсли;
		
		// Текущий период доступности рабочего центра
		ПериодДоступностиРЦ = ПериодыДоступностиРЦ[Выборка.Период];
		
		Если ПериодДоступностиРЦ[Выборка.Смена] = Неопределено Тогда
					
			ПериодДоступностиРЦ.Вставить(Выборка.Смена, ПолучитьПериодыПоСмене(Выборка.Смена, Выборка.Период));
					
		КонецЕсли;
		
		// Текущая смена доступности рабочего центра
		СменаДоступностиРЦ = ПериодДоступностиРЦ[Выборка.Смена];
		ИзменитьДоступность(СменаДоступностиРЦ, Выборка.ДатаОкончанияЗанятости, Выборка.ДлительностьЗанятости);
		
	КонецЦикла;
	
	// Заполняется доступность подчиненных рабочих центров для группы заменямости. 
	// Если РабочийЦентр - группа заменяемости, его состав будет в МассивРабочиеЦентры, но группа заменяемости может иметь собственные подчиненные центры
	Если ТипЗнч(РабочийЦентр) = Тип("СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров") И РабочийЦентр.ТребуетсяЗагрузкаПодчиненныхРабочихЦентров Тогда
		
		Для каждого СтрокаПодчиненныхРабочихЦентров Из РабочийЦентр.ПодчиненныеРабочиеЦентры Цикл
			
			ЗаполнитьДоступностьРЦ(НачальнаяДата, КонечнаяДата, СтрокаПодчиненныхРабочихЦентров.РабочийЦентр);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполняем доступность подчиненных рабочих центров для каждого элемента МассивРабочиеЦентры
	Для каждого ЭлементРЦ Из МассивРабочиеЦентры Цикл
		
		Если ЭлементРЦ.ТребуетсяЗагрузкаПодчиненныхРабочихЦентров Тогда
			
			Для каждого СтрокаПодчиненныхРабочихЦентров Из ЭлементРЦ.ПодчиненныеРабочиеЦентры Цикл
				
				ЗаполнитьДоступностьРЦ(НачальнаяДата, КонечнаяДата, СтрокаПодчиненныхРабочихЦентров.РабочийЦентр);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьДоступностьРЦ()

Функция ПолучитьПериодыПоСмене(Смена, Дата)
	
	Результат = Новый Соответствие;
	
	Для каждого Период из Смена.ПериодыСмены Цикл
		
		Если ТипЗнч(Смена) = Тип("СправочникСсылка.ГрафикиРаботы") И Период.ДеньНедели <> Перечисления.ДниНедели[ДеньНедели(Дата) - 1] Тогда
			Продолжить;
		КонецЕсли; 		
		
		Если Период.ВремяОкончания > Период.ВремяНачала Тогда
			
			Результат.Вставить(НачалоДня(Дата) + (Период.ВремяОкончания - НачалоДня(Период.ВремяОкончания)), Период.ВремяОкончания - Период.ВремяНачала);
			
		Иначе
			
			Результат.Вставить(НачалоДня(Дата + 3600 * 24) + (Период.ВремяОкончания - НачалоДня(Период.ВремяОкончания)), (Период.ВремяОкончания + 3600 * 24) - Период.ВремяНачала);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПериодыПоСмене()

Процедура ИзменитьДоступность(Периоды, Знач ДатаОкончанияЗанятости, Знач ДлительностьЗанятости)
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончанияЗанятости) ИЛИ ДлительностьЗанятости <= 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДлительностьЗанятости > СуммаЗначенийСоответствия(Периоды) Тогда
		
		ОбщегоНазначения.Сообщение("Длительность загрузки превышает общую доступность!!!", СтатусСообщения.ОченьВажное);
		Возврат;
		
	КонецЕсли;
	
	НетСовпадающихПериодовДоступности = Истина;
	
	Для каждого Период из Периоды Цикл
		
		ДатаОкончанияДоступности = Период.Ключ;
		ДлительностьДоступности = Период.Значение;
		
		Если (ДатаОкончанияЗанятости > (ДатаОкончанияДоступности - ДлительностьДоступности)) И (ДатаОкончанияЗанятости <= ДатаОкончанияДоступности) Тогда
			
			Периоды.Удалить(ДатаОкончанияДоступности);
			
			Если ДатаОкончанияЗанятости < ДатаОкончанияДоступности Тогда
				
				Периоды[ДатаОкончанияДоступности] = ДатаОкончанияДоступности - ДатаОкончанияЗанятости;
				
			КонецЕсли;
			
			Если (ДатаОкончанияДоступности - ДлительностьДоступности) < (ДатаОкончанияЗанятости - ДлительностьЗанятости) Тогда
				
				Периоды[ДатаОкончанияЗанятости - ДлительностьЗанятости] = (ДатаОкончанияЗанятости - ДлительностьЗанятости) - (ДатаОкончанияДоступности - ДлительностьДоступности);
				
			КонецЕсли;
			
			ДатаОкончанияЗанятости = ДатаОкончанияЗанятости - (ДлительностьДоступности - (ДатаОкончанияДоступности - ДатаОкончанияЗанятости));
			ДлительностьЗанятости = ДлительностьДоступности - (ДатаОкончанияДоступности - ДатаОкончанияЗанятости);
			
			НетСовпадающихПериодовДоступности = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НетСовпадающихПериодовДоступности Тогда
		
		ОбщегоНазначения.Сообщение("Ранее распланированная загрузка не соответствует периодам смен!!!", СтатусСообщения.ОченьВажное);
		Возврат;
		
	КонецЕсли;
	
	ИзменитьДоступность(Периоды, ДатаОкончанияЗанятости, ДлительностьЗанятости);
	
КонецПроцедуры // ИзменитьДоступность()

Функция ПолучитьКоличествоЦикловВыпуска(Выпуск)
	
	Возврат УправлениеПланированием.ПолучитьДробь(Выпуск.Количество, ПолучитьКратностьВыпуска(Выпуск));
	
КонецФункции // ПолучитьКоличествоЦикловВыпуска()

Функция ПолучитьКратностьВыпуска(Выпуск)
	
	Если НЕ ЗначениеЗаполнено(Выпуск.Спецификация) Тогда
		
		Выпуск.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Выпуск.Номенклатура, Выпуск.ХарактеристикаНоменклатуры, Выпуск.ДатаВыпуска, Подразделение, мКэш);
		
	КонецЕсли;
	
	Если Выпуск.Спецификация = Неопределено Тогда
		
		Возврат 1;
		
	КонецЕсли;
	
	Если мКэш <> Неопределено Тогда
		КратностиВыпуска = мКэш.КратностиВыпуска.НайтиСтроки(Новый Структура("Спецификация, Номенклатура, ХарактеристикаНоменклатуры", Выпуск.Спецификация, Выпуск.Номенклатура, Выпуск.ХарактеристикаНоменклатуры));
		
		Если КратностиВыпуска.Количество() > 0 Тогда
			
			Возврат КратностиВыпуска[0].КратностьВыпуска;
			
		КонецЕсли;
	КонецЕсли; 
	
	Выходы = Выпуск.Спецификация.ВыходныеИзделия.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Выпуск.Номенклатура, Выпуск.ХарактеристикаНоменклатуры));
	
	Если Выходы.Количество() = 0 Тогда
		
		Выходы = Выпуск.Спецификация.ВыходныеИзделия.НайтиСтроки(Новый Структура("Номенклатура", Выпуск.Номенклатура));
		
	КонецЕсли; 
		
	Если Выходы.Количество() = 0 Тогда
		
		Если мКэш <> Неопределено Тогда
			НоваяСтрокаКэша = мКэш.КратностиВыпуска.Добавить();
			
			НоваяСтрокаКэша.Спецификация = Выпуск.Спецификация;
			НоваяСтрокаКэша.Номенклатура = Выпуск.Номенклатура;
			НоваяСтрокаКэша.ХарактеристикаНоменклатуры = Выпуск.ХарактеристикаНоменклатуры;
			НоваяСтрокаКэша.КратностьВыпуска = 1;
		КонецЕсли;	
		
		Возврат 1;
		
	КонецЕсли;
	
	Для каждого Выход Из Выходы Цикл
		
		СуммарноеКоличество = Выход.Количество * Выход.ЕдиницаИзмерения.Коэффициент / Выпуск.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент + ?(СуммарноеКоличество = Неопределено, 0, СуммарноеКоличество);
		
	КонецЦикла; 
		
	Если СуммарноеКоличество = 0 Тогда
		
		Если мКэш <> Неопределено Тогда
			НоваяСтрокаКэша = мКэш.КратностиВыпуска.Добавить();
			
			НоваяСтрокаКэша.Спецификация = Выпуск.Спецификация;
			НоваяСтрокаКэша.Номенклатура = Выпуск.Номенклатура;
			НоваяСтрокаКэша.ХарактеристикаНоменклатуры = Выпуск.ХарактеристикаНоменклатуры;
			НоваяСтрокаКэша.КратностьВыпуска = 1;
		КонецЕсли;
		
		Возврат 1;
		
	Иначе
		
		Если мКэш <> Неопределено Тогда
		
			НоваяСтрокаКэша = мКэш.КратностиВыпуска.Добавить();
			
			НоваяСтрокаКэша.Спецификация = Выпуск.Спецификация;
			НоваяСтрокаКэша.Номенклатура = Выпуск.Номенклатура;
			НоваяСтрокаКэша.ХарактеристикаНоменклатуры = Выпуск.ХарактеристикаНоменклатуры;
			НоваяСтрокаКэша.КратностьВыпуска = СуммарноеКоличество;
			
		КонецЕсли;
		
		Возврат СуммарноеКоличество;
		
	КонецЕсли;
	
КонецФункции // ПолучитьКратностьВыпуска()

Функция ПолучитьСтруктуруВыпуска(Выпуск)
	
	Возврат Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Заказ, Спецификация, Проект, Количество, ВариантРаспределенияВыпусков", Выпуск.Номенклатура, Выпуск.ХарактеристикаНоменклатуры, Выпуск.Заказ, Выпуск.Спецификация, Выпуск.Проект, Выпуск.Количество, Выпуск.ВариантРаспределенияВыпусков);
	
КонецФункции // ПолучитьСтруктуруВыпуска()

Процедура ПровестиИспользованиеДоступныхЗапасов(СтруктураВыпуска, Выпуск, Спецификация = Неопределено, Операция = Неопределено, Период, СменаМомент = Неопределено)
	
	НайденныеЗапасыВнутри = мДоступныеЗапасы.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Внутри", Выпуск.Номенклатура, Выпуск.ХарактеристикаНоменклатуры, Истина));
	НайденныеЗапасыИзвне = мДоступныеЗапасы.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Внутри", Выпуск.Номенклатура, Выпуск.ХарактеристикаНоменклатуры, Ложь));
	
	ДоступныеЗапасыКоличество = ?(НайденныеЗапасыВнутри.Количество(), НайденныеЗапасыВнутри[0].Количество, 0) + ?(НайденныеЗапасыИзвне.Количество(), НайденныеЗапасыИзвне[0].Количество, 0);
	
	Если ДоступныеЗапасыКоличество > 0 Тогда
		
		НоменклатураВидВоспроизводства = ПолучитьРеквизитНоменклатурыИзКеша(Выпуск.Номенклатура, "ВидВоспроизводства");
		Если НоменклатураВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство Тогда
			
			КратностьВыпуска = ПолучитьКратностьВыпуска(Выпуск);
			КоличествоИзмененияЗапасов = Мин(Выпуск.Количество, Цел(ДоступныеЗапасыКоличество / КратностьВыпуска) * КратностьВыпуска);
			
		Иначе
			
			КоличествоИзмененияЗапасов = Мин(Выпуск.Количество, ДоступныеЗапасыКоличество);
			
		КонецЕсли;
		
		Выпуск.Количество = Выпуск.Количество - КоличествоИзмененияЗапасов;
		
		Если НайденныеЗапасыВнутри.Количество() Тогда
			
			КоличествоИзмененияЗапасовВнутри = Мин(НайденныеЗапасыВнутри[0].Количество, КоличествоИзмененияЗапасов);
			НайденныеЗапасыВнутри[0].Количество = НайденныеЗапасыВнутри[0].Количество - КоличествоИзмененияЗапасовВнутри;
			КоличествоИзмененияЗапасов = КоличествоИзмененияЗапасов - КоличествоИзмененияЗапасовВнутри;
			Потребность = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество", Выпуск.Номенклатура, Выпуск.ХарактеристикаНоменклатуры, КоличествоИзмененияЗапасовВнутри);
			ДобавитьПотребность(СтруктураВыпуска, Потребность, Спецификация, Операция, Период, СменаМомент, Истина);
			
		КонецЕсли;
		
		Если НайденныеЗапасыИзвне.Количество() Тогда
			
			КоличествоИзмененияЗапасовИзвне = Мин(НайденныеЗапасыИзвне[0].Количество, КоличествоИзмененияЗапасов);
			НайденныеЗапасыИзвне[0].Количество = НайденныеЗапасыИзвне[0].Количество - КоличествоИзмененияЗапасовИзвне;
			КоличествоИзмененияЗапасов = КоличествоИзмененияЗапасов - КоличествоИзмененияЗапасовИзвне;
			Потребность = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество", Выпуск.Номенклатура, Выпуск.ХарактеристикаНоменклатуры, КоличествоИзмененияЗапасовИзвне);
			ДобавитьПотребность(СтруктураВыпуска, Потребность, Спецификация, Операция, Период, СменаМомент, Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ПровестиИспользованиеДоступнызЗапасов()

Процедура ПровестиПополнениеДоступныхЗапасов(Номенклатура, ХарактеристикаНоменклатуры, Количество)
	
	НоваяСтрока = мДоступныеЗапасы.Добавить();
	
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Внутри = Истина;
	
	мДоступныеЗапасы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Внутри", "Количество");
	
КонецПроцедуры // ПровестиПополнениеДоступныхЗапасов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ВыполнитьПланирование() Экспорт
	
	Отказ = Ложь;
	мФормаПрогрессораОткрыта = Ложь;
	
	// Заголовок для сообщений об ошибках.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверкаРеквизитовПриПланировании(Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	
	мКэш = Новый Структура;
	
	мКэш.Вставить("ИсходныеКомплектующие", Новый ТаблицаЗначений);
	
	мКэш.ИсходныеКомплектующие.Колонки.Добавить("Спецификация");
	мКэш.ИсходныеКомплектующие.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мКэш.ИсходныеКомплектующие.Колонки.Добавить("НомерОперацииМаршрута");
	мКэш.ИсходныеКомплектующие.Колонки.Добавить("РезультатЗапроса");
	
	мКэш.ИсходныеКомплектующие.Индексы.Добавить("Спецификация, ХарактеристикаНоменклатуры, НомерОперацииМаршрута");
			
	мКэш.Вставить("ВозвратныеОтходы", Новый ТаблицаЗначений);
	
	мКэш.ВозвратныеОтходы.Колонки.Добавить("Спецификация");
	мКэш.ВозвратныеОтходы.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мКэш.ВозвратныеОтходы.Колонки.Добавить("РезультатЗапроса");
	
	мКэш.ВозвратныеОтходы.Индексы.Добавить("Спецификация, ХарактеристикаНоменклатуры");
			
	мКэш.Вставить("ДолиСтоимости_КоличестваВыпусков", Новый ТаблицаЗначений);
	
	мКэш.ДолиСтоимости_КоличестваВыпусков.Колонки.Добавить("Спецификация");
	мКэш.ДолиСтоимости_КоличестваВыпусков.Колонки.Добавить("Номенклатура");
	мКэш.ДолиСтоимости_КоличестваВыпусков.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мКэш.ДолиСтоимости_КоличестваВыпусков.Колонки.Добавить("Коэффициент");
	мКэш.ДолиСтоимости_КоличестваВыпусков.Колонки.Добавить("ДоляСтоимости");
	мКэш.ДолиСтоимости_КоличестваВыпусков.Колонки.Добавить("Количество");
	
	мКэш.ДолиСтоимости_КоличестваВыпусков.Индексы.Добавить("Спецификация, Номенклатура, ХарактеристикаНоменклатуры, Коэффициент");
			
	мКэш.Вставить("ПараметрыВыходногоИзделия", Новый ТаблицаЗначений);
	
	мКэш.ПараметрыВыходногоИзделия.Колонки.Добавить("Спецификация");
	мКэш.ПараметрыВыходногоИзделия.Колонки.Добавить("Номенклатура");
	мКэш.ПараметрыВыходногоИзделия.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мКэш.ПараметрыВыходногоИзделия.Колонки.Добавить("ПараметрыВыходногоИзделия");
	
	мКэш.ПараметрыВыходногоИзделия.Индексы.Добавить("Спецификация, Номенклатура, ХарактеристикаНоменклатуры");
			
	мКэш.Вставить("СпецификацииПоУмолчанию", Новый ТаблицаЗначений);
	
	мКэш.СпецификацииПоУмолчанию.Колонки.Добавить("Момент");
	мКэш.СпецификацииПоУмолчанию.Колонки.Добавить("Номенклатура");
	мКэш.СпецификацииПоУмолчанию.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мКэш.СпецификацииПоУмолчанию.Колонки.Добавить("Подразделение");
	мКэш.СпецификацииПоУмолчанию.Колонки.Добавить("Спецификация");
	
	мКэш.СпецификацииПоУмолчанию.Индексы.Добавить("Момент, Номенклатура, ХарактеристикаНоменклатуры, Подразделение");
	
	мКэш.Вставить("КратностиВыпуска", Новый ТаблицаЗначений);
			
	мКэш.КратностиВыпуска.Колонки.Добавить("Спецификация");
	мКэш.КратностиВыпуска.Колонки.Добавить("Номенклатура");
	мКэш.КратностиВыпуска.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мКэш.КратностиВыпуска.Колонки.Добавить("КратностьВыпуска");
	
	мКэш.КратностиВыпуска.Индексы.Добавить("Спецификация, Номенклатура, ХарактеристикаНоменклатуры");
		
	мКэш.Вставить("ВыходныеИзделия", Новый ТаблицаЗначений);
	
	мКэш.ВыходныеИзделия.Колонки.Добавить("Спецификация");
	мКэш.ВыходныеИзделия.Колонки.Добавить("РезультатЗапроса");
	
	мКэш.ВыходныеИзделия.Индексы.Добавить("Спецификация");
	
	мКэш.Вставить("РабочиеЦентрыИсполнители", Новый ТаблицаЗначений);
	
	мКэш.РабочиеЦентрыИсполнители.Колонки.Добавить("ГруппаРабочихЦентров");
	мКэш.РабочиеЦентрыИсполнители.Колонки.Добавить("РезультатЗапроса");
	
	мКэш.РабочиеЦентрыИсполнители.Индексы.Добавить("ГруппаРабочихЦентров");
	
	мКэш.Вставить("Номенклатура", Новый ТаблицаЗначений);
	
	мКэш.Номенклатура.Колонки.Добавить("Номенклатура");
	
	мКэш.Номенклатура.Колонки.Добавить("Наименование");
	мКэш.Номенклатура.Колонки.Добавить("ВидВоспроизводства");
	мКэш.Номенклатура.Колонки.Добавить("ВидВоспроизводстваПустая");
	мКэш.Номенклатура.Колонки.Добавить("НоменклатурнаяГруппа");
	мКэш.Номенклатура.Колонки.Добавить("ЕдиницаХраненияОстатков");
	
	мКэш.Номенклатура.Индексы.Добавить("Номенклатура");
	
	
	мКэш.Вставить("ТехнологическиеОперации", Новый ТаблицаЗначений);
	
	мКэш.ТехнологическиеОперации.Колонки.Добавить("ТехнологическаяОперация");
	
	мКэш.ТехнологическиеОперации.Колонки.Добавить("Наименование");
	
	мКэш.ТехнологическиеОперации.Индексы.Добавить("ТехнологическаяОперация");
	
	
	мКэш.Вставить("РабочиеЦентры", Новый ТаблицаЗначений);
	
	мКэш.РабочиеЦентры.Колонки.Добавить("РабочийЦентр");
	
	мКэш.РабочиеЦентры.Колонки.Добавить("ТребуетсяЗагрузкаПодчиненныхРабочихЦентров");
	
	мКэш.РабочиеЦентры.Индексы.Добавить("РабочийЦентр");
	
	
	мКэш.Вставить("ВремяТранспортировки", Новый ТаблицаЗначений);
	
	мКэш.ВремяТранспортировки.Колонки.Добавить("Источник");
	мКэш.ВремяТранспортировки.Колонки.Добавить("Получатель");
	мКэш.ВремяТранспортировки.Колонки.Добавить("Время");
	
	мКэш.ВремяТранспортировки.Индексы.Добавить("Источник, Получатель");
	
	мКэш.Вставить("ЕдиницыИзмерения", Новый ТаблицаЗначений);
	
	мКэш.ЕдиницыИзмерения.Колонки.Добавить("ЕдиницаИзмерения");
	мКэш.ЕдиницыИзмерения.Колонки.Добавить("Коэффициент");
	
	мКэш.ЕдиницыИзмерения.Индексы.Добавить("ЕдиницаИзмерения");
	
	
	мДоступностьРЦ = Новый Соответствие;
	
	//Получаем таблицу выпусков в зависимости от использования детальных источников.
	//Если детальные источники используются, то таблицей выпусков будут строки первого уровня дерева планов.
	Если ИспользоватьДетальныеИсточники Тогда
		
		ТаблицаВыпусков = мДеревоПланов.Скопировать().Строки;
		
	Иначе
		
		ТаблицаВыпусков = ПолучитьТаблицуВыпусков();
		
	КонецЕсли;
	
	ЗаполнитьДоступныеЗапасы();
	
	Если мФормаПрогрессора <> Неопределено Тогда
		
		мФормаПрогрессора.Открыть();
		мФормаПрогрессораОткрыта = Истина;
		
	КонецЕсли;

	Для каждого Выпуск из ТаблицаВыпусков Цикл
		
		
		ОбновитьФормуПрогрессора(,, "Выпуск: " + СокрЛП(Выпуск.Номенклатура));
		
		СтуктураВыпуска = ПолучитьСтруктуруВыпуска(Выпуск);
		СхемаПроизводства = ПолучитьСхемуПроизводства(Выпуск);
		
		ПровестиИспользованиеДоступныхЗапасов(СтуктураВыпуска, Выпуск,,, Выпуск.ДатаВыпуска);
		
		ПланироватьОперации(СтуктураВыпуска, Выпуск, СхемаПроизводства, СтуктураВыпуска.ВариантРаспределенияВыпусков);
		
	КонецЦикла;
	
	
КонецПроцедуры // ВыполнитьПланирование()

Процедура ПланироватьОперации(СтруктураВыпуска, Выпуск, СхемаПроизводства, ВариантРаспределения)
	
	Пока Истина Цикл
		
		
		ПланируемыеОперации = СхемаПроизводства.НайтиСтроки(Новый Структура("Исполнена, ИсполненаСледующая", Ложь, Истина));
		
		Если ПланируемыеОперации.Количество() = 0 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		КоличествоЦикловВыпуска = ПолучитьКоличествоЦикловВыпуска(Выпуск);
		
		Для каждого Операция из ПланируемыеОперации Цикл
			
			ОбновитьФормуПрогрессора(,, "Выпуск: " + ПолучитьРеквизитНоменклатурыИзКеша(Выпуск.Номенклатура, "Наименование"), "Тех. операция: " + ПолучитьРеквизитТехнологическойОперацииИзКеша(Операция.ТехнологическаяОперация, "Наименование"));

			// Выполняем контроль зацикливания в структуре подчиненных рабочих центров.
			Если НЕ УправлениеПланированием.КонтрольЗацикливанияПодчиненныхРабочихЦентров(Операция.РабочийЦентр,,мКэш) Тогда
				
				ЗаполнитьДоступностьРЦ(НачальнаяГраница, Операция.Момент, Операция.РабочийЦентр);
				РезультатПланирования = ПланироватьОперацию(СтруктураВыпуска, Выпуск, Операция, КоличествоЦикловВыпуска, ВариантРаспределения);
				
				Если РезультатПланирования = Ложь Тогда
					
					ОбщегоНазначения.Сообщение("Не удалось распланировать операцию", СтатусСообщения.ОченьВажное);
					ОбщегоНазначения.Сообщение("Операция (" + СокрЛП(Операция.Номер) + "): " + ПолучитьРеквизитТехнологическойОперацииИзКеша(Операция.ТехнологическаяОперация, "Наименование"));
					ОбщегоНазначения.Сообщение("Рабочий центр : " + СокрЛП(Операция.РабочийЦентр.Наименование));
					ОбщегоНазначения.Сообщение("Момент выпуска: " + Операция.Момент + " Время выполнения (сек): " + Операция.ВремяВыполнения + " Количество циклов: " + Окр(КоличествоЦикловВыпуска.Числитель / КоличествоЦикловВыпуска.Знаменатель, 2));
					
					Возврат;
					
				Иначе
					
					УстановитьИсполнениеОперации(СхемаПроизводства, Операция, РезультатПланирования);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПланироватьОперации()

Функция ПланироватьОперацию(СтруктураВыпуска, Выпуск, Операция, КоличествоЦикловВыпуска, ВариантРаспределения)
	
	Перем Момент;
	
	ОбновитьФормуПрогрессора(0, КоличествоЦикловВыпуска.Числитель / КоличествоЦикловВыпуска.Знаменатель);
	
	ОставшеесяКоличествоЦиклов = УправлениеПланированием.ПолучитьДробь(КоличествоЦикловВыпуска.Числитель, КоличествоЦикловВыпуска.Знаменатель);
	
	Если ЗначениеЗаполнено(Операция.СледующаяТехнологическаяОперация) И ВариантРаспределения = Перечисления.ВариантыРаспределенияПоПериоду.КакМожноБыстрее Тогда
		
		ВариантРаспределения = Перечисления.ВариантыРаспределенияПоПериоду.ТочноКСроку;
		
	КонецЕсли;
	
	Если ВариантРаспределения = Перечисления.ВариантыРаспределенияПоПериоду.КакМожноБыстрее Тогда
		
		ТекущаяДатаПланирования = НачалоДня(Выпуск.ДатаЗапуска);
		
	Иначе
		
		ТекущаяДатаПланирования = НачалоДня(Операция.Момент);
		
	КонецЕсли;
	
	Пока ТекущаяДатаПланирования >= НачальнаяГраница И ТекущаяДатаПланирования <= Выпуск.ДатаВыпуска Цикл
		
		Если ОставшеесяКоличествоЦиклов.Числитель <= 0 Тогда
			
			Возврат ?(Момент = Неопределено, Операция.Момент, Момент);
			
		КонецЕсли; 
		
		Если Операция.ВремяВыполнения > 0 И Операция.Количество > 0 Тогда
			
			СменаМомент = Справочники.Смены.ПустаяСсылка();
			
			РабочиеЦентрыИсполнители = ПолучитьРабочиеЦентрыИсполнители(Операция.РабочийЦентр, ТекущаяДатаПланирования, Операция.Момент);
			
			Для каждого РабочиеЦентрИсполнитель из РабочиеЦентрыИсполнители Цикл
				
				ИсходныйМоментОперации = Операция.Момент;
				
				Операция.РабочийЦентрИсполнитель = РабочиеЦентрИсполнитель;
				Операция.Момент = Операция.Момент - ПолучитьВремяТранспортировки(Операция.РабочийЦентрИсполнитель, Операция.СледующийРабочийЦентр);
			
				ДоступностьРЦ = Неопределено;
				
				// Корректируем доступность основного рабочего центра в соответствии с доступностью подчиненных рабочих центров
				// Параллельно получаем массив подчиненных рабочих центров, на которые будет распространена загрузка основного рабочего центра
				МассивПодчиненныхРЦ = СкорректироватьДоступностьРЦ(мДоступностьРЦ, РабочиеЦентрИсполнитель, ТекущаяДатаПланирования, Операция.РабочийЦентр);
				
				Если мДоступностьРЦ[Операция.РабочийЦентрИсполнитель] <> Неопределено Тогда
					
					ДоступностьРЦ = мДоступностьРЦ[Операция.РабочийЦентрИсполнитель][ТекущаяДатаПланирования];
					
				КонецЕсли;
				
				Если ДоступностьРЦ <> Неопределено Тогда
					
					Для каждого Смена из ДоступностьРЦ Цикл
						
						Если ОставшеесяКоличествоЦиклов.Числитель <= 0 Тогда
							
							Прервать;
							
						КонецЕсли; 
						
						ЦикловКПланированию = УправлениеПланированием.МинДробь(УправлениеПланированием.ПолучитьДробь(ПолучитьДоступноеВремяСмены(Смена.Значение, Операция.Момент), Операция.ВремяВыполнения * Операция.Количество), ОставшеесяКоличествоЦиклов);
						
						Если НЕ Операция.ДопускаетПеренос И ЦикловКПланированию.Числитель <> ОставшеесяКоличествоЦиклов.Числитель И ЦикловКПланированию.Знаменатель <> ОставшеесяКоличествоЦиклов.Знаменатель Тогда
							
							ЦикловКПланированию = УправлениеПланированием.ПолучитьДробь(Цел(ЦикловКПланированию.Числитель / ЦикловКПланированию.Знаменатель), 1);
								
						КонецЕсли;
						
						Если ЦикловКПланированию.Числитель = 0 Тогда
							
							Продолжить;
							
						КонецЕсли;
						
						// Перед размещением операции сохраняем количество строк табличной части ЗанятостьРабочихЦентров,
						// чтобы впоследствии определить созданные функцией РазместитьОперацию строки этой ТЧ и скопировать 
						// занятость для подчиненных рабочих центров.
						
						КоличествоСтрокЗанятости = ЗанятостьРабочихЦентров.Количество();
						
						Момент = РазместитьОперацию(СтруктураВыпуска, Выпуск, Смена, Операция, Операция.Момент, Операция.ВремяВыполнения * Операция.Количество * ЦикловКПланированию.Числитель / ЦикловКПланированию.Знаменатель);
						
						// В соответствии с размещением операции основного рабочего центра размещаем занятость подчиненных рабочих центров.
						СкопироватьРазмещениеОперации(ТекущаяДатаПланирования, мДоступностьРЦ, МассивПодчиненныхРЦ, КоличествоСтрокЗанятости);
						
						ОставшеесяКоличествоЦиклов = УправлениеПланированием.РазностьДробей(ОставшеесяКоличествоЦиклов, ЦикловКПланированию);
						СменаМомент = Смена.Ключ;
						
						Если ЦикловКПланированию.Числитель > 0 Тогда
							
							ДвиженияПоСпецификации = ПолучитьДвиженияПоСпецификации(Выпуск, Операция.Номер, КоличествоЦикловВыпуска, ЦикловКПланированию, Момент);
							
							Для каждого ДвижениеПоСпецификации из ДвиженияПоСпецификации Цикл
								
								НоменклатураВидВоспроизводства = ПолучитьРеквизитНоменклатурыИзКеша(ДвижениеПоСпецификации.Номенклатура, "ВидВоспроизводства");
								Если НоменклатураВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство Тогда
									
									ПровестиИспользованиеДоступныхЗапасов(СтруктураВыпуска, ДвижениеПоСпецификации, Выпуск.Спецификация, Операция, Момент, СменаМомент);
									ДобавитьПотребность(СтруктураВыпуска, ДвижениеПоСпецификации, Выпуск.Спецификация, Операция, Момент, СменаМомент, Истина);
									
								Иначе
									
									ПровестиИспользованиеДоступныхЗапасов(СтруктураВыпуска, ДвижениеПоСпецификации, Выпуск.Спецификация, Операция, Момент, СменаМомент);
									ДобавитьПотребность(СтруктураВыпуска, ДвижениеПоСпецификации, Выпуск.Спецификация, Операция, Момент, СменаМомент, Ложь);
									Продолжить;
									
								КонецЕсли;
								
								Если ДвижениеПоСпецификации.Количество > 0 Тогда
									
									СхемаПроизводства = ПолучитьСхемуПроизводства(ДвижениеПоСпецификации,, Операция.РабочийЦентр);
									ПланироватьОперации(СтруктураВыпуска, ДвижениеПоСпецификации, СхемаПроизводства, Перечисления.ВариантыРаспределенияПоПериоду.ТочноКСроку);
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
						ОбновитьФормуПрогрессора(УправлениеПланированием.РазностьДробей(КоличествоЦикловВыпуска, ОставшеесяКоличествоЦиклов).Числитель / УправлениеПланированием.РазностьДробей(КоличествоЦикловВыпуска, ОставшеесяКоличествоЦиклов).Знаменатель);
						
					КонецЦикла;
					
				КонецЕсли;
				
				Операция.Момент = ИсходныйМоментОперации;
				
			КонецЦикла;
			
		Иначе
			
			ОбщегоНазначения.Сообщение("Некорректно установлена длительность выполнения или количество операции № " + Операция.Номер + ", " + Операция.ТехнологическаяОперация);
			Возврат Ложь;
			
		КонецЕсли;
		
		Если ВариантРаспределения = Перечисления.ВариантыРаспределенияПоПериоду.КакМожноБыстрее Тогда
						
			ТекущаяДатаПланирования = ТекущаяДатаПланирования + 60 * 60 * 24;
						
		Иначе
						
			ТекущаяДатаПланирования = ТекущаяДатаПланирования - 60 * 60 * 24;
						
		КонецЕсли;
			
	КонецЦикла;
	
	Если ОставшеесяКоличествоЦиклов.Числитель <= 0 Тогда
		
		Возврат Момент;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
	
КонецФункции // ПланироватьОперацию()

Функция РазместитьОперацию(СтруктураВыпуска, Выпуск, Смена, Операция, Знач Момент, Знач Время)
	
	Если Время <= 0 Тогда
		
		Возврат Момент;
		
	КонецЕсли;
	
	_Периоды = Новый ТаблицаЗначений;
	_Периоды.Колонки.Добавить("Момент");
	_Периоды.Колонки.Добавить("Длительность");
	
	Для каждого Период из Смена.Значение Цикл
		
		НовыйПериод = _Периоды.Добавить();
		НовыйПериод.Момент = Период.Ключ;
		НовыйПериод.Длительность = Период.Значение;
		
	КонецЦикла;
	
	_Периоды.Сортировать("Момент Убыв");
	
	Для каждого _Период из _Периоды Цикл
		
		Если Момент > (_Период.Момент - _Период.Длительность) Тогда
			
			ВремяКПланированию = Мин(_Период.Длительность - (_Период.Момент - Мин(Момент, _Период.Момент)), Время);
			
			ИзменитьДоступность(Смена.Значение, Мин(Момент, _Период.Момент), ВремяКПланированию);
			ДобавитьЗанятость(СтруктураВыпуска, Выпуск, Смена.Ключ, Операция, Мин(Момент, _Период.Момент) - ВремяКПланированию, ВремяКПланированию);
			Время = Время - ВремяКПланированию;
			Момент = Мин(Момент, _Период.Момент) - ВремяКПланированию;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Время <= 0 Тогда
		
		Возврат Момент;
		
	КонецЕсли;
	
	Возврат РазместитьОперацию(СтруктураВыпуска, Выпуск, Смена, Операция, Момент, Время);
	
КонецФункции // РазместитьОперацию()

Процедура ДобавитьЗанятость(СтруктураВыпуска, Выпуск, Смена, Операция, Период, Время)
	
	Выборка = ПолучитьВыходныеИзделия(Выпуск.Спецификация);
	ВыходыДобавлены = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НомерОперацииМаршрута = Операция.Номер Тогда
			
			Занятость = ЗанятостьРабочихЦентров.Добавить();
			
			Занятость.Период = Период;
			Занятость.РабочийЦентр = Операция.РабочийЦентрИсполнитель;
			Занятость.Номенклатура = Выборка.Номенклатура;
			Занятость.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			
			Занятость.ДатаОкончания = Период + Время;
			Занятость.Смена = Смена;
			Занятость.Спецификация = Выпуск.Спецификация;
			Занятость.ТехОперация = Операция.ТехнологическаяОперация;
			Занятость.Заказ = СтруктураВыпуска.Заказ;
			Занятость.КонечнаяПродукция = СтруктураВыпуска.Номенклатура;
			Занятость.Проект = СтруктураВыпуска.Проект;
			Занятость.Количество = (Выборка.Количество * Время) / (Операция.ВремяВыполнения * Операция.Количество);
			
			Если Выпуск.Номенклатура <> Занятость.Номенклатура Тогда
				
				ПровестиПополнениеДоступныхЗапасов(Занятость.Номенклатура, Занятость.ХарактеристикаНоменклатуры, Занятость.Количество);
				
			КонецЕсли;
			
			ВыходыДобавлены = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если НЕ ВыходыДобавлены Тогда
		
		Занятость = ЗанятостьРабочихЦентров.Добавить();
		
		Занятость.Период = Период;
		Занятость.РабочийЦентр = Операция.РабочийЦентрИсполнитель;
		
		Занятость.ДатаОкончания = Период + Время;
		Занятость.Смена = Смена;
		Занятость.Спецификация = Выпуск.Спецификация;
		Занятость.ТехОперация = Операция.ТехнологическаяОперация;
		Занятость.Заказ = СтруктураВыпуска.Заказ;
		Занятость.КонечнаяПродукция = СтруктураВыпуска.Номенклатура;
		Занятость.Проект = СтруктураВыпуска.Проект;
		Занятость.Количество = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗанятость()

Процедура ДобавитьПотребность(СтруктураВыпуска, Выпуск, Спецификация, Операция, Период, СменаМомент, Внутри)
	
	Если Выпуск.Количество > 0 Тогда
		
		Потребность = ПотребностиПроизводства.Добавить();
		
		Потребность.Период = Период;
		Потребность.Смена = СменаМомент;
		
		Если Операция <> Неопределено Тогда
			
			Потребность.РабочийЦентр = Операция.РабочийЦентрИсполнитель;
			
		КонецЕсли;
		
		Потребность.Номенклатура = Выпуск.Номенклатура;
		Потребность.ХарактеристикаНоменклатуры = Выпуск.ХарактеристикаНоменклатуры;
		
		Если Спецификация <> Неопределено Тогда
			
			Потребность.Спецификация = Спецификация;
			
		КонецЕсли;
		
		Потребность.Заказ = СтруктураВыпуска.Заказ;
		Потребность.КонечнаяПродукция = СтруктураВыпуска.Номенклатура;
		Потребность.Проект = СтруктураВыпуска.Проект;
		
		Если Внутри Тогда
			
			Потребность.КоличествоВнутри = Выпуск.Количество;
			
		Иначе
			
			Потребность.КоличествоИзвне = Выпуск.Количество;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьПотребность()

Процедура ДвиженияПоТабличнойЧастиЗанятостьРабочихЦентров()
	
	ТабЗанятостьРабочихЦентров = ЗанятостьРабочихЦентров.Выгрузить();
	ТабЗанятостьРабочихЦентров.Колонки.Добавить("Документ");
	ТабЗанятостьРабочихЦентров.Колонки.Добавить("Состояние");
	ТабЗанятостьРабочихЦентров.ЗаполнитьЗначения(Ссылка, "Документ");
	ТабЗанятостьРабочихЦентров.ЗаполнитьЗначения(Перечисления.СостоянияРабочихЦентров.Занят, "Состояние");
	
	НаборДвиженийЗанятостьРабочихЦентров = Движения.ДанныеДляПланированияЗанятостиРабочихЦентров;
	НаборДвиженийЗанятостьРабочихЦентров.Загрузить(ТабЗанятостьРабочихЦентров);
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиЗанятостьРабочихЦентров()

Процедура ДвиженияПоТабличнойЧастиПотребностиПроизводства()
	
	ТабПотребностиПроизводства = ПотребностиПроизводства.Выгрузить();
	
	НаборДвиженийПотребностиПроизводства = Движения.ПланыПотребностейПроизводстваПоСменам;
	НаборДвиженийПотребностиПроизводства.Загрузить(ТабПотребностиПроизводства);
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиПотребностиПроизводства()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	Если мУдалятьДвижения Тогда
		
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
		
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверкаРеквизитов(Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Формирование движений регистров
	ДвиженияПоТабличнойЧастиЗанятостьРабочихЦентров();
	ДвиженияПоТабличнойЧастиПотребностиПроизводства();
	
КонецПроцедуры // ОбработкаПроведения()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("ПланПроизводстваПоСменам", "План производства по сменам");
	СтруктураМакетов.Вставить("СоставДокумента", "Состав документа");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		
		Возврат;
		
	КонецЕсли;

	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары", "ПараметрыВыпускаПродукции");
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Функция, возвращающая массив подчиненных рабочих центров для указанного рабочего центра / группы заменяемости
// Рекурсивная
//
// Параметры
//  РЦ  – <СправочникСсылка.РабочикЦентры>, <СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров> – Рабочий центр / группа заменяемости,
//                 для которого необходимо получить массив подчиненных рабочих центров
//  МассивПодчиненныхРЦ  – <Массив> – Массив, в который добавляются подчиненные рабочие центры. 
//                 Использован как параметр для рекурсии
//  ДатаПланирования  – <Дата> – дата планирования, для которой необходимо получить массив подчиненных рабочих центров.
//                 Набор подчиненных рабочих центров может меняться в зависимости от даты планирования при выборе рабочего центра
//                 из группы заменяемости, т.к. при этом учитывается занятость
//  СоотвДоступностиРЦ  – <Соответствие> – Соответствие, в котором хранятся данные о доступности рабочих центров 
//  ОсновнойРЦ  – <СправочникСсылка.РабочиеЦентры> – основной рабочий центр, для которого был выполнен вызов функции.
//
// Возвращаемое значение:
//   <Массив>   – Массив, содержащий все подчиненные центры на дату планирования для основного рабочего центра
//
Функция НайтиМассивПодчиненныхРЦ(РЦ, МассивПодчиненныхРЦ, ДатаПланирования, СоотвДоступностиРЦ, ОсновнойРЦ)
	
	// Проверяем, чтобы не добавить в массив основной рабочий центр
	Если РЦ <> ОсновнойРЦ Тогда
		
		Если ТипЗнч(РЦ) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
			
			МассивПодчиненныхРЦ.Добавить(РЦ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ТребуетсяЗагрузкаПодчиненныхРабочихЦентров = ПолучитьРеквизитРабочегоЦентраИзКеша(РЦ, "ТребуетсяЗагрузкаПодчиненныхРабочихЦентров");
	Если ТребуетсяЗагрузкаПодчиненныхРабочихЦентров Тогда
		
		// Рекурсивно добавляем подчиненные рабочие центры 
		Для каждого СтрокаПодчиненных Из РЦ.ПодчиненныеРабочиеЦентры Цикл
			
			МассивПодчиненныхРЦ = НайтиМассивПодчиненныхРЦ(СтрокаПодчиненных.РабочийЦентр, МассивПодчиненныхРЦ, ДатаПланирования, СоотвДоступностиРЦ, ОсновнойРЦ);
			
		КонецЦикла;
		
		// Для групп заменяемости рабочих центров необходимо выбрать один рабочий центр из состава группы
		Если ТипЗнч(РЦ) = Тип("СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров") Тогда
			
			// Выбираем рабочий центр из группы
			ТекРЦ = ВыбратьПодчиненныйРЦИзГруппы(ОсновнойРЦ, ДатаПланирования, СоотвДоступностиРЦ, РЦ);
			МассивПодчиненныхРЦ = НайтиМассивПодчиненныхРЦ(ТекРЦ, МассивПодчиненныхРЦ, ДатаПланирования, СоотвДоступностиРЦ, ОсновнойРЦ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивПодчиненныхРЦ;
	
КонецФункции // НайтиМассивПодчиненныхРЦ

// Функция, корректирующая доступность основного рабочего центра в зависимости от доступности подчиненных рабочих центров
// на дату планирования и возвращающая массив подчиненных рабочих центров.
//
// Параметры
//  СоотвДоступностиРЦ  – <Соответствие> – Соответствие, в котором хранятся данные о доступности рабочих центров 
//  РЦ  – <СправочникСсылка.РабочикЦентры> – Рабочий центр, доступность которого необходимо скорректировать
//  ДатаПланирования  – <Дата> – дата, на которую необходима корректировка доступности
//  ГруппаРЦ  – <СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров> – группа заменяемости, в которую входит основной рабочий центр.
//				Если основной рабочий центр входит в группу заменяемости, необходимо учитывать структуру подчинения этой группы заменяемости
//
// Возвращаемое значение:
//   <Массив>   – Массив, содержащий все подчиненные центры на дату планирования для основного рабочего центра
//
Функция СкорректироватьДоступностьРЦ(СоотвДоступностиРЦ, РЦ, ДатаПланирования, ГруппаРЦ)
	
	// Получаем массив рабочих центров, подчиненных основному (РЦ)
	МассивПодчиненныхРЦ = Новый Массив;
	МассивПодчиненныхРЦ = НайтиМассивПодчиненныхРЦ(РЦ, МассивПодчиненныхРЦ, ДатаПланирования, СоотвДоступностиРЦ, РЦ);
	
	// Основной рабочий центр может входить в группу заменяемости, у которой могут быть подчиненные рабочие центры
	Если ТипЗнч(ГруппаРЦ) = Тип("СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров") Тогда
		
		МассивПодчиненныхРЦ = НайтиМассивПодчиненныхРЦ(ГруппаРЦ, МассивПодчиненныхРЦ, ДатаПланирования, СоотвДоступностиРЦ, РЦ);
		
	КонецЕсли;
	
	// Корректируем доступность основного рабочего центра в соответствии с доступностью каждого подчиненного рабочего центра
	Для каждого ПодчиненныйРЦ Из МассивПодчиненныхРЦ Цикл
		
		// Получаем таблицу общей доступности (доступны одновременно основной и подчиненный рабочий центр)
		ОбщаяТаблицаДоступности = ПолучитьТаблицуОбщейДоступности(РЦ, ПодчиненныйРЦ, ДатаПланирования, СоотвДоступностиРЦ);
		
		Если ОбщаяТаблицаДоступности = Неопределено Тогда
			
			// Если подчиненный рабочий центр недоступен на дату планирования, основной тоже будет недоступен - 
			// очищаем доступность основного рабочего центра
			ДоступностьОсновногоРЦ = Новый Соответствие;
			
		Иначе
			
			// Конвертируем таблицу общей доступности (ТаблицаЗначений) в соответствие доступности рабочего центра (Соответствие)
			ДоступностьОсновногоРЦ = СвернутьТаблицуВСоответствиеДоступности(ОбщаяТаблицаДоступности);
			
		КонецЕсли;
		
		// Сохраняем полученную доступность основного рабочего центра
		//СоотвДоступностиРЦ[РЦ][ДатаПланирования] = ДоступностьОсновногоРЦ;
		Если СоотвДоступностиРЦ[РЦ] = Неопределено Тогда
			
			СоотвДоступностиРЦ.Вставить(РЦ, Новый Соответствие);
			СоотвДоступностиРЦ[РЦ].Вставить(ДатаПланирования, ДоступностьОсновногоРЦ);
			
		ИначеЕсли СоотвДоступностиРЦ[РЦ][ДатаПланирования] = Неопределено Тогда
			
			СоотвДоступностиРЦ[РЦ].Вставить(ДатаПланирования, ДоступностьОсновногоРЦ);
			
		Иначе
			
			СоотвДоступностиРЦ[РЦ][ДатаПланирования] = ДоступностьОсновногоРЦ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПодчиненныхРЦ;
	
КонецФункции // СкорректироватьДоступностьРЦ

// Функция выбора рабочего центра из состава группы заменямости, если группа находится в подчинении
//
// Параметры
//  ОсновнойРЦ  – <СправочникСсылка.РабочикЦентры> – Рабочий центр, в подчинении которого находится группа заменяемости
//  ДатаПланирования  – <Дата> – дата, на которую необходимо выбрать подчиненный рабочий центр
//  СоотвДоступностиРЦ  – <Соответствие> – Соответствие, в котором хранятся данные о доступности рабочих центров 
//  ГруппаПодчиненныхРЦ  – <СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров> – группа заменяемости, из состава которой необходимо
//						выбрать рабочий центр
//
// Возвращаемое значение:
//   <СправочникСсылка.РабочиеЦентры>   – Массив, содержащий все подчиненные центры на дату планирования для основного рабочего центра
//
Функция ВыбратьПодчиненныйРЦИзГруппы(ОсновнойРЦ, ДатаПланирования, СоотвДоступностиРЦ, ГруппаПодчиненныхРЦ)
	
	ТаблицаВыбораРЦ = Новый ТаблицаЗначений;
	ТаблицаВыбораРЦ.Колонки.Добавить("РЦ");
	ТаблицаВыбораРЦ.Колонки.Добавить("ВремяДоступности");
	ТаблицаВыбораРЦ.Колонки.Добавить("Приоритет");
	
	Для каждого СтрокаСостава Из ГруппаПодчиненныхРЦ.Состав Цикл
		
		// Получаем таблицу общей доступности основного рабочего центра и каждого рабочего центра из состава группы заменяемости
		// на дату планирования
		ТаблицаДоступностиРЦ = ПолучитьТаблицуОбщейДоступности(ОсновнойРЦ, СтрокаСостава.РабочийЦентр, ДатаПланирования, СоотвДоступностиРЦ);
		
		Если ТаблицаДоступностиРЦ <> Неопределено Тогда
			
			// Определяем общее время общей доступности основного рабочего центра и подчиненного рабочего центра из состава
			// группы заменямости, результаты сохраняем в таблице значений
			ВремяДоступности = ТаблицаДоступностиРЦ.Итог("ВремяДоступности");
			
			Если ВремяДоступности > 0 Тогда
				
				НоваяСтрока = ТаблицаВыбораРЦ.Добавить();
				НоваяСтрока.РЦ = СтрокаСостава.РабочийЦентр;
				НоваяСтрока.Приоритет = СтрокаСостава.Приоритет;
				НоваяСтрока.ВремяДоступности = ВремяДоступности;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выбираем один подчиненный рабочий центр из состава группы заменяемости
	// Критерии выбора:
	// 1. Наибольшая общая доступность основного и подчиненного рабочих центров на дату планирования
	// 2. Приоритет подчиненного рабочего центра в составе группы заменяемости
	ТаблицаВыбораРЦ.Сортировать("ВремяДоступности Убыв, Приоритет Убыв");
	
	Если ТаблицаВыбораРЦ.Количество() > 0 Тогда
		
		Возврат ТаблицаВыбораРЦ[0].РЦ;
		
	Иначе
		
		Возврат Справочники.РабочиеЦентры.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции // ВыбратьПодчиненныйРЦИзГруппы

// Функция получения общей (одновременной) доступности для двух рабочих центров
//
// Параметры
//  РЦ1  – <СправочникСсылка.РабочикЦентры> – Рабочий центр №1
//  РЦ2  – <СправочникСсылка.РабочикЦентры> – Рабочий центр №2
//  ДатаПланирования  – <Дата> – дата, на которую необходимо получить общую доступность
//  СоотвДоступностиРЦ  – <Соответствие> – Соответствие, в котором хранятся данные о доступности рабочих центров 
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   – Таблица, содержащая общую доступность для РЦ1 и РЦ2
//
Функция ПолучитьТаблицуОбщейДоступности(РЦ1, РЦ2, ДатаПланирования, СоответствиеДоступностиРЦ)
	
	// Получаем достувность обоих рабочих центров
	ТаблицаДоступностиРЦ1 = ПолучитьТаблицуДоступностиРЦ(РЦ1, ДатаПланирования, СоответствиеДоступностиРЦ);
	ТаблицаДоступностиРЦ2 = ПолучитьТаблицуДоступностиРЦ(РЦ2, ДатаПланирования, СоответствиеДоступностиРЦ);
	
	// Если недоступен хотя бы один из рабочих центров, общей доступности тоже нет
	Если ТаблицаДоступностиРЦ1 = Неопределено ИЛИ ТаблицаДоступностиРЦ2 = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Индекс = 0;
	ИтоговаяТаблица = ТаблицаДоступностиРЦ1.Скопировать();
	ИтоговаяТаблица.Очистить();
	
	// Получаем таблицу общей доступности, выполняя построчное пересечение периодов доступности обоих рабочих центров
	Пока Индекс < Мин(ТаблицаДоступностиРЦ1.Количество(), ТаблицаДоступностиРЦ2.Количество()) Цикл
		
		СтрокаРЦ1 = ТаблицаДоступностиРЦ1[Индекс];
		СтрокаРЦ2 = ТаблицаДоступностиРЦ2[Индекс];
		
		// Вычисляем границы периода общей доступности для текущих строк таблиц доступности
		ДатаНачала = Макс(СтрокаРЦ1.ДатаНачала, СтрокаРЦ2.ДатаНачала);
		ДатаОкончания = Мин(СтрокаРЦ1.ДатаОкончания, СтрокаРЦ2.ДатаОкончания);
		
		Если (ДатаОкончания - ДатаНачала) > 0 Тогда
			
			// Добавляем строку общей доступности, если период невырожденный
			НоваяСтрока = ИтоговаяТаблица.Добавить();
			НоваяСтрока.Смена = СтрокаРЦ1.Смена;
			НоваяСтрока.ДатаНачала = ДатаНачала;
			НоваяСтрока.ДатаОкончания = ДатаОкончания;
			НоваяСтрока.ВремяДоступности = НоваяСтрока.ДатаОкончания - НоваяСтрока.ДатаНачала;
			
		КонецЕсли;
		
		// В одной из строк доступности может образоваться "остаток" доступности, его необходимо сохранять
		Если СтрокаРЦ1.ДатаОкончания > ДатаОкончания Тогда
			
			НоваяСтрока = ТаблицаДоступностиРЦ1.Вставить(Индекс + 1);
			НоваяСтрока.Смена = СтрокаРЦ1.Смена;
			НоваяСтрока.ДатаНачала = ?(ДатаОкончания > СтрокаРЦ1.ДатаНачала, ДатаОкончания, СтрокаРЦ1.ДатаНачала);
			НоваяСтрока.ДатаОкончания = СтрокаРЦ1.ДатаОкончания;
			
		ИначеЕсли СтрокаРЦ2.ДатаОкончания > ДатаОкончания Тогда
			
			НоваяСтрока = ТаблицаДоступностиРЦ2.Вставить(Индекс + 1);
			НоваяСтрока.Смена = СтрокаРЦ2.Смена;
			НоваяСтрока.ДатаНачала = ?(ДатаОкончания > СтрокаРЦ2.ДатаНачала, ДатаОкончания, СтрокаРЦ2.ДатаНачала);;
			НоваяСтрока.ДатаОкончания = СтрокаРЦ2.ДатаОкончания;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат ИтоговаяТаблица;
	
КонецФункции // ПолучитьТаблицуОбщейДоступности

// Функция получения доступности рабочего центра на указанную дату в виде таблицы значений
//
// Параметры
//  РЦ  – <СправочникСсылка.РабочикЦентры> – Рабочий центр, для которого необходимо получить доступность
//  ДатаПланирования  – <Дата> – дата, на которую необходимо получить доступность рабочего центра
//  СоотвДоступностиРЦ  – <Соответствие> – Соответствие, в котором хранятся данные о доступности рабочих центров 
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   – Таблица, содержащая доступность рабочего центра. Таблица формируется в функции РазвернутьСоответствиеДоступностиВТаблицу
//
Функция ПолучитьТаблицуДоступностиРЦ(РЦ, ДатаПланирования, СоотвДоступностиРЦ)
	
	ДоступностьРЦ = СоотвДоступностиРЦ[РЦ];
	
	// Проверяем, существует ли доступность данного рабочего центра
	Если ДоступностьРЦ = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДоступностьРЦ = ДоступностьРЦ[ДатаПланирования];
	
	// Проверяем, существует ли доступность рабочего центра на указанную дату
	Если ДоступностьРЦ = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Возвращается результат функции, которая преобразует данные о доступности рабочего центра из соответствия в таблицу значений
	Возврат РазвернутьСоответствиеДоступностиВТаблицу(ДоступностьРЦ);
	
КонецФункции // ПолучитьТаблицуДоступностиРЦ

// Функция, преобразующая данные о доступности рабочего центра из таблицы значений в соответствие
//
// Параметры
//  ТаблицаДоступности  – <ТаблицаЗначений> – таблица с данными о доступности рабочего центра 
//
// Возвращаемое значение:
//   <Соответствие>   – соответствие с данными о доступности рабочего центра
//
Функция СвернутьТаблицуВСоответствиеДоступности(ТаблицаДоступности)
	
	Доступность = Новый Соответствие;
	
	ТаблицаСмен = ТаблицаДоступности.Скопировать();
	ТаблицаСмен.Свернуть("Смена");
	
	// Формируем соответствие доступности в разрезе смен
	Для каждого СтрокаСмены Из ТаблицаСмен Цикл
		
		Отбор = Новый Структура("Смена", СтрокаСмены.Смена);
		МассивСтрок = ТаблицаДоступности.НайтиСтроки(Отбор);
		
		Доступность.Вставить(СтрокаСмены.Смена, Новый Соответствие);
		ДоступностьСмены = Доступность[СтрокаСмены.Смена];
		
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			
			ДоступностьСмены.Вставить(СтрокаМассива.ДатаОкончания, СтрокаМассива.ДатаОкончания - СтрокаМассива.ДатаНачала);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Доступность;
	
КонецФункции // СвернутьТаблицуВСоответствиеДоступности

// Функция, преобразующая данные о доступности рабочего центра из соответствия в таблицу значений
//
// Параметры
//  СоотвДоступностиРЦ  – <Соответствие> – соответствие с данными о доступности рабочего центра 
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   – таблица с данными о доступности рабочего центра
//
Функция РазвернутьСоответствиеДоступностиВТаблицу(СоотвДоступностиРЦ)
	
	// Создаем таблицу значений требуемого формата
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Смена");
	Таблица.Колонки.Добавить("ДатаНачала");
	Таблица.Колонки.Добавить("ДатаОкончания");
	Таблица.Колонки.Добавить("ВремяДоступности");
	
	// Формируем таблицу с данными о доступности в разрезе смен
	Для каждого Смена Из СоотвДоступностиРЦ Цикл
		
		Для каждого КлючИЗначение Из Смена.Значение Цикл
			
			Если КлючИЗначение.Значение > 0 Тогда
				
				НоваяСтрока = Таблица.Добавить();
				НоваяСтрока.Смена = Смена.Ключ;
				НоваяСтрока.ДатаНачала = КлючИЗначение.Ключ - КлючИЗначение.Значение;
				НоваяСтрока.ДатаОкончания = КлючИЗначение.Ключ;
				НоваяСтрока.ВремяДоступности = КлючИЗначение.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Таблица.Сортировать("ДатаНачала Возр");
	
	Возврат Таблица;
	
КонецФункции // РазвернутьСоответствиеДоступностиВТаблицу

// Процедура, размещающая операции для подчиненных рабочих центров в соответствии с размещением операции основного рабочего центра
//
// Параметры
//  ДатаПланирования  – <Дата> – дата, на которую выполнено планирование и необходимо выполнить размещение 
//  СоотвДоступностиРЦ  – <Соответствие> – соответствие с данными о доступности рабочих центров
//  МассивПодчиненныхРЦ  – <Массив> – массив подчиненных рабочих центров, для которых необходимо выполнить размещение операции
//  КолиествоСтрокЗанятости  – <Количество> – Количество строк, которое содержалось в табличной части ЗанятостьРабочихЦентров
//						до размещения операции основного рабочего центра
//
Процедура СкопироватьРазмещениеОперации(ДатаПланирования, СоотвДоступностиРЦ, МассивПодчиненныхРЦ, КоличествоСтрокЗанятости)
	
	// Сформируем массив копируемых строк - это строки размещения операции основного рабочего центра
	МассивКопируемыхСтрок = Новый Массив;
	
	Если КоличествоСтрокЗанятости < ЗанятостьРабочихЦентров.Количество() Тогда
		
		Для Индекс = КоличествоСтрокЗанятости По ЗанятостьРабочихЦентров.Количество() - 1 Цикл
			
			МассивКопируемыхСтрок.Добавить(ЗанятостьРабочихЦентров[Индекс]);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Для каждого ПодчиненныйРЦ Из МассивПодчиненныхРЦ Цикл
		
		// Получаем таблицу доступности подчиненного рабочего центра. В этой таблице будут производится корректировки доступности
		// в соответствии с размещением операции подчиненного рабочего центра
		ТаблицаДоступностиПодчиненного = ПолучитьТаблицуДоступностиРЦ(ПодчиненныйРЦ, ДатаПланирования, СоотвДоступностиРЦ);
		
		Если ТаблицаДоступностиПодчиненного = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Для каждого подчиненного рабочего центра выполняем размещение операции в соответствии с каждой строкой размещения
		// операции основного рабочего центра
		Для каждого КопируемаяСтрока Из МассивКопируемыхСтрок Цикл
			
			ИндексСтроки = ЗанятостьРабочихЦентров.Индекс(КопируемаяСтрока);
			ОпределятьСмену = Истина;
			
			// Проверка на производство нескольких выходных изделий на одном рабочем центре - для них параметры производства идентичны.
			// Размещение операции основного рабочего центра при этом - одинаковое для всех выходных изделий.
			// Размещение операции для подчиненного рабочего центра также достаточно сделать один раз
			Если ИндексСтроки > 0 Тогда
				
				Если ЗанятостьРабочихЦентров[ИндексСтроки - 1].РабочийЦентр = КопируемаяСтрока.РабочийЦентр
					И ЗанятостьРабочихЦентров[ИндексСтроки - 1].Период = КопируемаяСтрока.Период
					И ЗанятостьРабочихЦентров[ИндексСтроки - 1].ДатаОкончания = КопируемаяСтрока.ДатаОкончания Тогда
					
					ОпределятьСмену = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОпределятьСмену Тогда
				
				// Параметры занятости для основного и подчиненного рабочих центров идентичны, за исключением реквизитов
				// РабочийЦентр, Смена
				НоваяСтрока = ЗанятостьРабочихЦентров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КопируемаяСтрока);
				НоваяСтрока.РабочийЦентр = ПодчиненныйРЦ;
				
				// Определяем смену подчиненного рабочего центра, внутри которой будет размещена операция
				НоваяСтрока.Смена = ?(ОпределятьСмену, ПолучитьСменуИСкорректироватьДоступность(КопируемаяСтрока, ТаблицаДоступностиПодчиненного), КопируемаяСтрока.Смена);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Сохраняем данные о доступности подчиненного рабочего центра
		СоотвДоступностиРЦ[ПодчиненныйРЦ][ДатаПланирования] = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(СвернутьТаблицуВСоответствиеДоступности(ТаблицаДоступностиПодчиненного));
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьРазмещениеОперации

// Функция, определяющая смену подиненного рабочего центра, в которой будет размещена операция основного рабочего центра
//
// Параметры
//  СтрокаЗанятости  – <Строка табличной части> – строка табличной части ЗанятостьРабочихЦентров, в которой размещена операция
//						основного рабочего центра
//  ТаблицаДоступности  – <ТаблицаЗначений> – таблица с данными о доступности подчиненного рабочего центра
//
// Возвращаемое значение:
//   <СправочникСсылка.Смены>   – смена, внутри которой размещена операция для подчиненного рабочего центра
//
Функция ПолучитьСменуИСкорректироватьДоступность(СтрокаЗанятости, ТаблицаДоступности)
	
	Смена = Справочники.Смены.ПустаяСсылка();
	СтрокаКУдалению = Неопределено;
	
	// Выполняем поиск подходящей строки доступности подчиненного рабочего центра, в которую 
	// можно разместить операцию. 
	// Такая строка есть в любом случае, т.к. доступность основного рабочего центра скорректирована в соответствии с доступностью
	// всех подчиненных рабочих центров до выполнения планирования (с учетом всех разрывов смен всех подчиненных рабочих центров)
	Для каждого СтрокаДоступности Из ТаблицаДоступности Цикл
		
		Если СтрокаДоступности.ДатаНачала <= СтрокаЗанятости.Период И СтрокаДоступности.ДатаОкончания >= СтрокаЗанятости.ДатаОкончания Тогда
			
			// Определяем смену, внутри которой будет размещена операция подчиненного рабочего центра
			Смена = СтрокаДоступности.Смена;
			
			// Строка доступности подчиненного рабочего центра, внутри которой будет выполнено размещение, подлежит удалению
			СтрокаКУдалению = СтрокаДоступности;
			
			// В строке доступности подчиненного рабочего центра после размещения
			// может образоваться "остаток" доступности - его необходимо сохранить
			Если СтрокаДоступности.ДатаНачала < СтрокаЗанятости.Период Тогда
				
				НоваяСтрока = ТаблицаДоступности.Добавить();
				НоваяСтрока.ДатаНачала = СтрокаДоступности.ДатаНачала;
				НоваяСтрока.ДатаОкончания = СтрокаЗанятости.Период;
				НоваяСтрока.Смена = СтрокаДоступности.Смена;
				НоваяСтрока.ВремяДоступности = НоваяСтрока.ДатаОкончания - НоваяСтрока.ДатаНачала;
				
			КонецЕсли;
			
			Если СтрокаДоступности.ДатаОкончания > СтрокаЗанятости.ДатаОкончания Тогда
				
				НоваяСтрока = ТаблицаДоступности.Добавить();
				НоваяСтрока.ДатаНачала = СтрокаЗанятости.ДатаОкончания;
				НоваяСтрока.ДатаОкончания = СтрокаДоступности.ДатаОкончания;
				НоваяСтрока.Смена = СтрокаДоступности.Смена;
				НоваяСтрока.ВремяДоступности = НоваяСтрока.ДатаОкончания - НоваяСтрока.ДатаНачала;
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаКУдалению <> Неопределено Тогда
		
		ТаблицаДоступности.Удалить(СтрокаКУдалению);
		
	КонецЕсли;
	
	ТаблицаДоступности.Сортировать("ДатаНачала Возр");
	
	Возврат Смена;
	
КонецФункции // ПолучитьСменуИСкорректироватьДоступность

// Функция, создающая структуру исходных данных для разузлования номенклатуры
//
// Параметры
//  СтрокаТаблицы  – <СтрокаТаблицыЗначений>, <СтрокаДереваЗначений> – строка таблицы, содержащая данные для разузлования
//
// Возвращаемое значение:
//   <Структура>   – структура исходных данных для разузлования номенклатуры
//
Функция СформироватьСтруктуруРазузлования(СтрокаТаблицы) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
	Структура.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
	Структура.Вставить("Количество", СтрокаТаблицы.Количество);
	
	Если ТипЗнч(СтрокаТаблицы.Спецификация) = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
		
		Если Не СтрокаТаблицы.Спецификация.Пустая() Тогда
			
			Структура.Вставить("Спецификация", СтрокаТаблицы.Спецификация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // СформироватьСтруктуруРазузлования

// Функция получения таблицы разузлования номенклатуры
//
// Параметры
//  СтрокаТаблицы  – <СтрокаТаблицыЗначений>, <СтрокаДереваЗначений> – строка таблицы, содержащая данные для разузлования
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   – таблица полного разузлования номенклатуры
//
Функция ПолучитьТаблицуРазузлования(СтрокаТаблицы) Экспорт
	
	// Формируем структуру для выполнения разузлования
	СтруктураИсточникаРазузлования = СформироватьСтруктуруРазузлования(СтрокаТаблицы);
	РезультатРазузлования = Новый Структура;
	
	МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточникаРазузлования, РезультатРазузлования,, мКэш);
	
	Если МассивОшибок.Количество() > 0 Тогда
		
		Для каждого Ошибка из МассивОшибок Цикл
			
			Сообщить("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
			Сообщить(" Спецификация: " + Ошибка.Спецификация);
			Сообщить(" Номер строки: " + Ошибка.НомерСтроки);
			Сообщить(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатРазузлования.ПолноеРазузлование;
	
КонецФункции // ПолучитьТаблицуРазузлования

// Процедура подговки дерева значений к свертке по структуре изделий
//
// Параметры
//  Дерево  – <ДеревоЗначений> – дерево значений, содержащее несвернутое дерево планов
//
Процедура СвернутьДеревоПоКомплектующим(Дерево) Экспорт
	
	// Если дерево уже свернуто, повторная свертка не допускается
	Если ДеревоУжеСвернуто(Дерево) Тогда
		
		#Если Клиент Тогда
		Предупреждение("Свертка уже выполнена!");
		#КонецЕсли
		
		Возврат;
		
	КонецЕсли;
	
	СтруктурироватьДерево(Дерево);
	
КонецПроцедуры // СвернутьДеревоПоКомплектующим

// Функция, проверяющая, есть ли у дерева значений строки 2-го уровня
//
// Параметры
//  Дерево  – <ДеревоЗначений> - проверяемое дерево значений
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   – таблица полного разузлования номенклатуры
//
Функция ДеревоУжеСвернуто(Дерево) Экспорт
	
	Для каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ДеревоУжеСвернуто

// Процедура, выполняющая свертку дерева планов (в соответствии со структурой изделий)
//
// Параметры
//  Дерево  – <ДеревоЗначений>, <СтрокаДереваЗначений> - дерево значений или строка дерева, которую необходимо свернуть
//
Процедура СтруктурироватьДерево(Дерево) Экспорт
	
	Индекс = 0;
	
	Пока Индекс < Дерево.Строки.Количество() Цикл
		
		СтрокаДерева = Дерево.Строки[Индекс];
		
		// Формируем структуру для разузлования
		СтруктураИсточникаРазузлования = СформироватьСтруктуруРазузлования(СтрокаДерева);
		РезультатРазузлования = Новый Структура;
		
		// Разузловываем номенклатуру строки
		МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточникаРазузлования, РезультатРазузлования,, мКэш);
		
		Если РезультатРазузлования.ПолноеРазузлование.Количество() > 0 Тогда
			
			ТекущийРодитель = СтрокаДерева;
			ТекущийУровень = РезультатРазузлования.ПолноеРазузлование[0].Уровень;
			
			Для каждого СтрокаРезультат Из РезультатРазузлования.ПолноеРазузлование Цикл
				
				Если СтрокаРезультат.Уровень = РезультатРазузлования.ПолноеРазузлование[0].Уровень Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				// Создаем структуру с ключевыми полями для осуществления свертки
				СтруктураПоиска = СформироватьСтруктуруПоискаПоДереву(СтрокаДерева, СтрокаРезультат);
				
				НовыйРодитель = ТекущийРодитель;
				
				МассивСтрок = Дерево.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
				МассивСтрокКУдалению = Новый Массив;
				
				Если МассивСтрок.Количество() > 0 Тогда
					
					Количество = 0;
					
					Для каждого СтрокаМассива Из МассивСтрок Цикл
						
						// Из подходящих по структуре разузлования строк отбираем необходимое по спецификации количество полуфабриката
						Если Количество < СтрокаРезультат.Количество Тогда
							
							УдалитьСтроку = Ложь;
							
							Если СтрокаМассива.Количество <= (СтрокаРезультат.Количество - Количество) Тогда
								
								УдалитьСтроку = Истина;
								КоличествоКПланированию = СтрокаМассива.Количество;
								
							Иначе
								
								КоличествоКПланированию = (СтрокаРезультат.Количество - Количество);
								СтрокаМассива.Количество = СтрокаМассива.Количество - (СтрокаРезультат.Количество - Количество);
								
							КонецЕсли;
							
							НоваяСтрокаДерева = ТекущийРодитель.Строки.Добавить();
							СкопироватьСтрокуДерева(СтрокаМассива, НоваяСтрокаДерева);
							НоваяСтрокаДерева.КоличествоПоСпецификации = ?(СтрокаДерева.Количество <> 0, СтрокаРезультат.Количество / СтрокаДерева.Количество, 0);
							НоваяСтрокаДерева.Количество = КоличествоКПланированию;
							
							НовыйРодитель = НоваяСтрокаДерева;
							
							Количество = Количество + КоличествоКПланированию;
							
						Иначе
							
							Прервать;
							
						КонецЕсли;
						
						Если УдалитьСтроку Тогда
							
							МассивСтрокКУдалению.Добавить(СтрокаМассива);
							
						КонецЕсли;
						
					КонецЦикла;
					
					Для каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
						
						Дерево.Строки.Удалить(СтрокаМассива);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			// Запускаем свертку для подчиненных строк
			СтруктурироватьДерево(СтрокаДерева);
			
		КонецЕсли;
		
		Индекс = Дерево.Строки.Индекс(СтрокаДерева) + 1;
		
	КонецЦикла;
	
КонецПроцедуры // СтруктурироватьДерево

// Функция, формирующая структуру поиска комплектующих по дереву при свертке
//
// Параметры
//  СтрокаДерева  – <СтрокаДереваЗначений> - Строка исходного дерева значений, для которой выполнено разузлование
//  СтрокаРезультат  – <СтрокаТаблицыЗначений> - Строка результата разузлования, для которой осуществляется поиск
//
// Возвращаемое значение:
//   <Структура>   – структура поиска
//
Функция СформироватьСтруктуруПоискаПоДереву(СтрокаДерева, СтрокаРезультат)
	
	СтруктураРезультат = Новый Структура;
	
	СтруктураРезультат.Вставить("Номенклатура", СтрокаРезультат.Номенклатура);
	СтруктураРезультат.Вставить("ХарактеристикаНоменклатуры", СтрокаРезультат.ХарактеристикаНоменклатуры);
	СтруктураРезультат.Вставить("Заказ", СтрокаДерева.Заказ);
	СтруктураРезультат.Вставить("Проект", СтрокаДерева.Проект);
	СтруктураРезультат.Вставить("ДатаЗапуска", СтрокаДерева.ДатаЗапуска);
	СтруктураРезультат.Вставить("ДатаВыпуска", СтрокаДерева.ДатаВыпуска);
	СтруктураРезультат.Вставить("ВариантРаспределенияВыпусков", СтрокаДерева.ВариантРаспределенияВыпусков);
	СтруктураРезультат.Вставить("ВРамкахПлана", СтрокаДерева.ВРамкахПлана);
	СтруктураРезультат.Вставить("ПоДаннымПланов", СтрокаДерева.ПоДаннымПланов);
	СтруктураРезультат.Вставить("КонечнаяПродукция", СтрокаДерева.КонечнаяПродукция);
	
	Возврат СтруктураРезультат;
	
КонецФункции // СформироватьСтруктуруПоискаПоДереву

// Процедура копирования строки дерева значений со всеми подчиненными строками
//
// Параметры
//  СтрокаДеревоИсточник  – <СтрокаДереваЗначений> - Копируемая строка дерева значений
//  СтрокаДеревоПриемник  – <СтрокаТаблицыЗначений> - Строка дерева значений, в которую осуществляется копирование
//
Процедура СкопироватьСтрокуДерева(СтрокаДеревоИсточник, СтрокаДеревоПриемник) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаДеревоПриемник, СтрокаДеревоИсточник);
	
	// Процедура копирования вызывается для каждой подчиненной строки
	Для каждого СтрокаДерева Из СтрокаДеревоИсточник.Строки Цикл
		
		НоваяСтрока = СтрокаДеревоПриемник.Строки.Добавить();
		СкопироватьСтрокуДерева(СтрокаДерева, НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьСтрокуДерева

// Процедура сохранения дерева планов в табличную часть ИсходныеДанныеДляПланирования
//
// Параметры
//  Дерево  – <ДеревоЗначений> - сохраняемое дерево значений
//
Процедура СохранитьДеревоПланов(Дерево) Экспорт
	
	ИсходныеДанныеДляПланирования.Очистить();
	
	// Вызываем процедуру сохранения дерева в таблицу
	СтрокиДереваВТаблицу(Дерево, ИсходныеДанныеДляПланирования);
	мДеревоПланов = Дерево.Скопировать();
	
КонецПроцедуры // СохранитьДеревоПланов

// Процедура записи дерева значений в таблицу значений или табличную часть
//
// Параметры
//  Дерево  – <ДеревоЗначений> - сохраняемое дерево значений
//  Таблица  – <ТаблицаЗначений>, <ТабличнаяЧасть> - таблица, в которую осуществляется запись
//  НомерСтрокиРодителя  – <Число> - параметр связи подчиненных и родительских строк
//
Процедура СтрокиДереваВТаблицу(Дерево, Таблица, НомерСтрокиРодителя = -1)
	
	// Записываем в таблицу каждую строку дерева и вызываем рекурсивно запись подчиненных строк
	Для каждого СтрокаДерева Из Дерево.Строки Цикл
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока.НомерСтрокиРодителя = НомерСтрокиРодителя;
		СтрокаДерева.КлючСтроки = Таблица.Индекс(НоваяСтрока);
		
		СтрокиДереваВТаблицу(СтрокаДерева, Таблица, Таблица.Индекс(НоваяСтрока));
		
	КонецЦикла;
	
КонецПроцедуры // СтрокиДереваВТаблицу

// Процедура чтения табличной части ИсходныеДанныеДляПланирования в дерево значений
//
// Параметры
//  Дерево  – <ДеревоЗначений> - дерево значений, в которое осуществляется чтение
//
Процедура ПрочитатьДеревоПланов(Дерево) Экспорт
	
	мДеревоПланов = Дерево.Скопировать();
	
	// Записываем строки табличной части в дерево значений
	СтрокиТаблицыВДерево(ИсходныеДанныеДляПланирования, мДеревоПланов);
	
	Дерево = мДеревоПланов.Скопировать();
	
КонецПроцедуры // ПрочитатьДеревоПланов

// Процедура записи таблицы или табличной части в дерево значений
//
// Параметры
//  Таблица  – <ТаблицаЗначений>, <ТабличнаяЧасть> - таблица, из которой осуществляется чтение
//  Дерево  – <ДеревоЗначений>, <СтрокаДереваЗначений> - дерево значений, в которое осуществляется запись данных из таблицы
//  НомерСтрокиРодителя  – <Число> - параметр связи подчиненных и родительских строк дерева
//
Процедура СтрокиТаблицыВДерево(Таблица, Дерево, НомерСтрокиРодителя = -1)
	
	// Ищем в таблице строки для текущего родителя
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("НомерСтрокиРодителя", НомерСтрокиРодителя);
	МассивСтрок = Таблица.НайтиСтроки(ОтборСтрок);
	
	// Записываем найденные строки в дерево и вызываем процедуру чтения подчиненных строк
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		НоваяСтрока = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.КлючСтроки = Таблица.Индекс(СтрокаТаблицы);
		СтрокиТаблицыВДерево(Таблица, НоваяСтрока, Таблица.Индекс(СтрокаТаблицы));
		
	КонецЦикла;
	
КонецПроцедуры // СтрокиТаблицыВДерево

Функция ДобавитьНоменклатуруВКеш(Номенклатура)
	
	НоваяСтрокаКэша = мКэш.Номенклатура.Добавить();
	
	НоваяСтрокаКэша.Номенклатура = Номенклатура;
	
	НоваяСтрокаКэша.Наименование             = СокрЛП(Номенклатура.Наименование);
	НоваяСтрокаКэша.ВидВоспроизводства       = Номенклатура.ВидВоспроизводства;
	НоваяСтрокаКэша.ВидВоспроизводстваПустая = НоваяСтрокаКэша.ВидВоспроизводства.Пустая();
	НоваяСтрокаКэша.НоменклатурнаяГруппа     = Номенклатура.НоменклатурнаяГруппа;
	НоваяСтрокаКэша.ЕдиницаХраненияОстатков  = Номенклатура.ЕдиницаХраненияОстатков;
	
	Возврат НоваяСтрокаКэша;

КонецФункции
 
Функция ПолучитьРеквизитНоменклатурыИзКеша(Номенклатура, ИмяРеквизита)
	
	Строки = мКэш.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	
	Если Строки.Количество() > 0 Тогда
		Результат = Строки[0][ИмяРеквизита];
	Иначе
		НоваяСтрокаКэша = ДобавитьНоменклатуруВКеш(Номенклатура);
	    Результат = НоваяСтрокаКэша[ИмяРеквизита];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ДобавитьТехнологическуюОперациюВКеш(ТехнологическаяОперация)
	
	НоваяСтрокаКэша = мКэш.ТехнологическиеОперации.Добавить();
	
	НоваяСтрокаКэша.ТехнологическаяОперация = ТехнологическаяОперация;
	
	НоваяСтрокаКэша.Наименование = СокрЛП(ТехнологическаяОперация.Наименование);
	
	Возврат НоваяСтрокаКэша;

КонецФункции
 
Функция ПолучитьРеквизитТехнологическойОперацииИзКеша(ТехнологическаяОперация, ИмяРеквизита)
	
	Строки = мКэш.ТехнологическиеОперации.НайтиСтроки(Новый Структура("ТехнологическаяОперация", ТехнологическаяОперация));
	
	Если Строки.Количество() > 0 Тогда
		Результат = Строки[0][ИмяРеквизита];
	Иначе
		НоваяСтрокаКэша = ДобавитьТехнологическуюОперациюВКеш(ТехнологическаяОперация);
	    Результат = НоваяСтрокаКэша[ИмяРеквизита];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ДобавитьРабочийЦентрВКеш(РабочийЦентр)
	
	НоваяСтрокаКэша = мКэш.РабочиеЦентры.Добавить();
	
	НоваяСтрокаКэша.РабочийЦентр = РабочийЦентр;
	
	НоваяСтрокаКэша.ТребуетсяЗагрузкаПодчиненныхРабочихЦентров = РабочийЦентр.ТребуетсяЗагрузкаПодчиненныхРабочихЦентров;
	
	Возврат НоваяСтрокаКэша;

КонецФункции
 
Функция ПолучитьРеквизитРабочегоЦентраИзКеша(РабочийЦентр, ИмяРеквизита)
	
	Строки = мКэш.РабочиеЦентры.НайтиСтроки(Новый Структура("РабочийЦентр", РабочийЦентр));
	
	Если Строки.Количество() > 0 Тогда
		Результат = Строки[0][ИмяРеквизита];
	Иначе
		НоваяСтрокаКэша = ДобавитьРабочийЦентрВКеш(РабочийЦентр);
	    Результат = НоваяСтрокаКэша[ИмяРеквизита];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	


мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));