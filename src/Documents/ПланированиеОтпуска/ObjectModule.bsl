Перем мДлинаСуток;

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат Неопределено;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Диаграмма" Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(СобытийныйПланЗанятостиФизлицРаботники.ДатаОкончания) КАК ДатаКон,
		|	МИНИМУМ(СобытийныйПланЗанятостиФизлицРаботники.ДатаНачала) КАК ДатаНач
		|ИЗ
		|	Документ.ПланированиеОтпуска.Работники КАК СобытийныйПланЗанятостиФизлицРаботники
		|
		|ГДЕ
		|	СобытийныйПланЗанятостиФизлицРаботники.Ссылка = &Ссылка");

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();	 
		
		Если Выборка.Следующий() Тогда
			Отчет = Отчеты.ДиаграммаГанта.Создать();
			Отчет.ВидОтчета = "График отпусков";
			Отчет.Периодичность = 2;
			Отчет.ЗаполнитьНачальныеНастройки();
			Отчет.ДатаНач = ?(ЗначениеЗаполнено(Выборка.ДатаНач),НачалоМесяца(Выборка.ДатаНач),НачалоГода(РабочаяДата));
			Отчет.ДатаКон = ?(ЗначениеЗаполнено(Выборка.ДатаКон),КонецМесяца(Выборка.ДатаКон),КонецГода(РабочаяДата));
			Возврат Отчет.Печать(Ссылка);
		Иначе
			Предупреждение("Ошибка исполнения запроса к т.ч.");
		КонецЕсли;
	КонецЕсли;

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Диаграмма","Диаграмма");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Решение, 
	|	Дата, 
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Работники" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоРаботники(Режим)
	

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);

	Если Режим <> Перечисления.СостоянияОбъектов.Утвержден Тогда
	
		// Описание текста запроса:
		// 1. Выборка "ПерваяТаблица": 
		//		Выбираются строки документа
		// 2. Выборка "ВтораяТаблица": 
		//		Среди строк документа ищем строки с пересекающимися периодами отпусков 
		//		для одного работника
		//
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПерваяТаблица.НомерСтроки,
		|	ПерваяТаблица.Сотрудник,
		|	ПерваяТаблица.Сотрудник.Физлицо КАК Физлицо,
		|	ПерваяТаблица.ДатаНачала,
		|	ПерваяТаблица.ДатаОкончания,
		|	""Можно"" КАК ПроверяемоеЗначение,
		|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК КонфликтнаяСтрока
		|ИЗ
		|	Документ.ПланированиеОтпуска.Работники КАК ПерваяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланированиеОтпуска.Работники КАК ВтораяТаблица
		|		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
		|			И ПерваяТаблица.Сотрудник = ВтораяТаблица.Сотрудник
		|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
		|			И (ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаНачала
		|					И ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаОкончания
		|				ИЛИ ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаОкончания
		|					И ВтораяТаблица.ДатаОкончания <= ПерваяТаблица.ДатаОкончания
		|				ИЛИ ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаНачала
		|					И ПерваяТаблица.ДатаОкончания <= ВтораяТаблица.ДатаОкончания)
		|ГДЕ
		|	ПерваяТаблица.Ссылка = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПерваяТаблица.НомерСтроки,
		|	ПерваяТаблица.Сотрудник,
		|	ПерваяТаблица.ДатаНачала,
		|	ПерваяТаблица.ДатаОкончания";
	
	Иначе
	
		// Описание текста запроса:
		// 1. Выборка "ПерваяТаблица": 
		//		Представляет собой вложенный запрос, в котором:  
		//         - в выборке "ПланированиеОтпускаРаботники" выбираются строки документа
		//         - из основной таблицы регистра (выборка "СобытийныйПланЗанятостиФизлиц") 
		//           присоединяются даты движений, непосредственно предшествующих
		//           датам ДатаОкончания из строк документа
		// 2. Выборка "СобытийныйПланЗанятостиФизлиц": 
		//		Из основной таблицы регистра выбираются значения ресурсов на полученные  
		//      в первой выборке даты
		// 3. Выборка "ВтораяТаблица": 
		//		Среди строк документа ищем строки с пересекающимися периодами отпусков 
		//      для одного работника
		//
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
		|	ПерваяТаблица.Сотрудник,
		|	ПерваяТаблица.Физлицо,
		|	ПерваяТаблица.ДатаНачала,
		|	ПерваяТаблица.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|					КОГДА СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <= ПерваяТаблица.ДатаНачала
		|							И СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА СобытийныйПланЗанятостиФизлиц.СостояниеЗавершения
		|					ИНАЧЕ СобытийныйПланЗанятостиФизлиц.Состояние
		|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
		|				ИЛИ ПерваяТаблица.ДатаЗначения >= ПерваяТаблица.ДатаНачала
		|			ТОГДА ""Нельзя""
		|		ИНАЧЕ ""Можно""
		|	КОНЕЦ КАК ПроверяемоеЗначение,
		|	СобытийныйПланЗанятостиФизлиц.Регистратор.Представление КАК Регистратор,
		|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК КонфликтнаяСтрока
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(СобытийныйПланЗанятостиФизлиц.Период) КАК ДатаЗначения,
		|		ПланированиеОтпускаРаботники.Сотрудник КАК Сотрудник,
		|		ПланированиеОтпускаРаботники.Сотрудник.Физлицо КАК Физлицо,
		|		ПланированиеОтпускаРаботники.ДатаОкончания КАК ДатаОкончания,
		|		ПланированиеОтпускаРаботники.ДатаНачала КАК ДатаНачала,
		|		ПланированиеОтпускаРаботники.Ссылка КАК Ссылка,
		|		ПланированиеОтпускаРаботники.НомерСтроки КАК НомерСтроки
		|	ИЗ
		|		Документ.ПланированиеОтпуска.Работники КАК ПланированиеОтпускаРаботники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
		|			ПО ПланированиеОтпускаРаботники.ДатаОкончания > СобытийныйПланЗанятостиФизлиц.Период
		|				И ПланированиеОтпускаРаботники.Сотрудник.Физлицо = СобытийныйПланЗанятостиФизлиц.ФизЛицо
		|	ГДЕ
		|		ПланированиеОтпускаРаботники.Ссылка = &ДокументСсылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПланированиеОтпускаРаботники.Сотрудник.Физлицо,
		|		ПланированиеОтпускаРаботники.ДатаОкончания,
		|		ПланированиеОтпускаРаботники.ДатаНачала,
		|		ПланированиеОтпускаРаботники.Ссылка,
		|		ПланированиеОтпускаРаботники.НомерСтроки,
		|		ПланированиеОтпускаРаботники.Сотрудник) КАК ПерваяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
		|		ПО ПерваяТаблица.ДатаЗначения = СобытийныйПланЗанятостиФизлиц.Период
		|			И ПерваяТаблица.Физлицо = СобытийныйПланЗанятостиФизлиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланированиеОтпуска.Работники КАК ВтораяТаблица
		|		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
		|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
		|			И (ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаНачала
		|					И ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаОкончания
		|				ИЛИ ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаОкончания
		|					И ВтораяТаблица.ДатаОкончания <= ПерваяТаблица.ДатаОкончания
		|				ИЛИ ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаНачала
		|					И ПерваяТаблица.ДатаОкончания <= ВтораяТаблица.ДатаОкончания)
		|			И ПерваяТаблица.Сотрудник = ВтораяТаблица.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	ПерваяТаблица.НомерСтроки,
		|	СобытийныйПланЗанятостиФизлиц.Состояние,
		|	ПерваяТаблица.Физлицо,
		|	ПерваяТаблица.ДатаЗначения,
		|	ПерваяТаблица.ДатаНачала,
		|	ПерваяТаблица.ДатаОкончания,
		|	СобытийныйПланЗанятостиФизлиц.Регистратор.Представление,
		|	ПерваяТаблица.Сотрудник,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|					КОГДА СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <= ПерваяТаблица.ДатаНачала
		|							И СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА СобытийныйПланЗанятостиФизлиц.СостояниеЗавершения
		|					ИНАЧЕ СобытийныйПланЗанятостиФизлиц.Состояние
		|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
		|				ИЛИ ПерваяТаблица.ДатаЗначения >= ПерваяТаблица.ДатаНачала
		|			ТОГДА ""Нельзя""
		|		ИНАЧЕ ""Можно""
		|	КОНЕЦ";
			
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботники()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Решение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано решение по документу!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	НетДатыНачала = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
	Если НетДатыНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаОкончания
	НетДатыОкончания = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания);
	Если НетДатыОкончания Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ НетДатыНачала ИЛИ НетДатыОкончания Тогда
		Возврат;
	КонецЕсли;
		
	// проверка корректности сочетаний реквизитов
	Если ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала отпуска не может превышать дату окончания отпуска!", Отказ, Заголовок);
	КонецЕсли;
		
	Если ВыборкаПоСтрокамДокумента.ПроверяемоеЗначение = "Нельзя" Тогда
		СтрокаПродолжениеСообщенияОбОшибке = " на указанный период документом " + ВыборкаПоСтрокамДокумента.Регистратор + " уже был запланирован другой отпуск или мероприятие!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
		
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> Null  Тогда
		СтрокаПродолжениеСообщенияОбОшибке = " в строке №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока + " указан пересекающийся период отпуска!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	Если Решение = Перечисления.СостоянияОбъектов.Подготовлен Тогда
		СтруктураПроведенияПоРегистрамСведений.Вставить("СборДанныхДляПланированияЗанятостиФизлиц");
	КонецЕсли;
	Если Решение = Перечисления.СостоянияОбъектов.Утвержден Тогда
		СтруктураПроведенияПоРегистрамСведений.Вставить("СобытийныйПланЗанятостиФизлиц");
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники,  
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	ИмяРегистра = "СборДанныхДляПланированияЗанятостиФизлиц";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
	
		// отразим начало
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период					= ВыборкаПоРаботники.ДатаНачала;
		
		// Измерения
		Движение.Физлицо				= ВыборкаПоРаботники.Физлицо;
		Движение.Документ				= ВыборкаПоШапкеДокумента.Ссылка;

		// Ресурсы
		Движение.Состояние				= Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный;
		Движение.ПериодЗавершения		= ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
		Движение.СостояниеЗавершения	= Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
		// Реквизиты
		Движение.ДатаОкончания			= КонецДня(ВыборкаПоРаботники.ДатаОкончания);

	КонецЕсли;
	
	ИмяРегистра = "СобытийныйПланЗанятостиФизлиц";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра)  Тогда

		// отразим начало
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период					= ВыборкаПоРаботники.ДатаНачала;
		
		// Измерения
		Движение.Физлицо				= ВыборкаПоРаботники.Физлицо;
		
		// Ресурсы
		Движение.Состояние				= Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный;
		Движение.ПериодЗавершения		= ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
		Движение.СостояниеЗавершения	= Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
		// Реквизиты
		Движение.ДатаОкончания			= КонецДня(ВыборкаПоРаботники.ДатаОкончания);

	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботники(Решение);
			
			ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать();
				
			Пока ВыборкаПоРаботники.Следующий() Цикл 

				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамСведений);
 				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ГрафикОтпусковОрганизаций") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			
			Работники.Загрузить(Основание.РаботникиОрганизации.Выгрузить());
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Работники);
КонецПроцедуры

мДлинаСуток = 86400;
