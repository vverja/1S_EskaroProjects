Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

// Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

//Определение периода движений документа
Перем ДатаДвижений;

Перем мСтруктураПараметровДенежныхСредств;

Перем мНеОткрыватьФормуДокумента Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("ДатаОплаты","Не указана дата оплаты документа банком!");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчетыУпр()

	СтруктураПолей= Новый Структура("Организация,СчетОрганизации, Ответственный,СуммаДокумента");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	Если ВидОперации <> Перечисления.ВидыОперацийППВходящее.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		СтруктураПолей.Вставить("Контрагент","Не указан плательщик!");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейРасчетыУпр()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		
		Если Не Отказ Тогда
			
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателю","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);


				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;

			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППВходящее.ПоступлениеСредствОтФСС Тогда
        ДвиженияЗаявки(Отказ);
    КонецЕсли;
    
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              ДатаДвижений);
	
	УправлениеДенежнымиСредствами.ПровестиПоступлениеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППВходящее.ВозвратДенежныхСредствПоставщиком Тогда
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППВходящее.ОплатаПокупателя Тогда
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	Иначе
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	мСтруктураПараметровДенежныхСредствРегл = Новый Структура;
	мСтруктураПараметровДенежныхСредствРегл.Вставить("ЕстьРасчетыСКонтрагентами",	ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредствРегл.Вставить("ЕстьРасчетыПоКредитам",		ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредствРегл.Вставить("РежимПроведения",				РежимПроведения);
	мСтруктураПараметровДенежныхСредствРегл.Вставить("ДатаДвижений",				ДатаДвижений);
	мСтруктураПараметровДенежныхСредствРегл.Вставить("СчетОрганизации",				СчетОрганизации);
	мСтруктураПараметровДенежныхСредствРегл.Вставить("Оплачено",					Оплачено);
	мСтруктураПараметровДенежныхСредствРегл.Вставить("ВидДенежныхСредств", 			Перечисления.ВидыДенежныхСредств.Безналичные);
	
	УправлениеДенежнымиСредствами.ПровестиПоступлениеДенежныхСредствРегл(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредствРегл, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок)

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|не совпадают сумма документа и ее расшифровка.");

		Отказ = Истина;

	КонецЕсли;

	Если Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(), Отказ, Заголовок);
	КонецЕсли;

	Если ОтраженоВОперУчете Тогда
		
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыУпр(), Отказ, Заголовок);
		
 		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок, СтруктураШапкиДокумента)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
		
		Если ВидОперации=Перечисления.ВидыОперацийППВходящее.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда	
			ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
			
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				Неопределено,      // Неопределено - в случае проверки шапки документа
				Неопределено,      // Неопределено - в случае проверки шапки документа
				Отказ, 
				Заголовок, 
				"ОтражениеЗатрат", // ВидОперации
				Истина,            // ОтражатьПоЗатратам,
				"СчетУчетаРасчетовСКонтрагентом", // ИмяРеквизитаСчетЗатрат
				"СубконтоКт"       // ИмяРеквизитаСубконтоЗатрат
			);
			
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППВходящее.ПоступлениеОплатыПоПлатежнымКартам Тогда
			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
			
			Если не СуммаУслуг = 0 тогда 
				СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом", "Не заполнено значение реквизита ""Счет затрат""!");
				СтруктураПолей.Вставить("СтатьяЗатрат");
				СтруктураПолей.Вставить("ПодразделениеОрганизацииЗатраты");
				
				
				ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
				
				НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					Неопределено,      // Неопределено - в случае проверки шапки документа
					Неопределено,      // Неопределено - в случае проверки шапки документа
					Отказ, 
					Заголовок, 
					"ОтражениеЗатрат", // ВидОперации
					Истина,            // ОтражатьПоЗатратам,
					"СчетУчетаРасчетовСКонтрагентом", // ИмяРеквизитаСчетЗатрат
					"СубконтоКт"       // ИмяРеквизитаСубконтоЗатрат
				);
				
				
			КонецЕсли;
		Иначе
			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
		КонецЕсли;
		
		СтруктураПолей = Новый Структура("СчетУчетаДенежныхСредств"); 
		
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация, , Заголовок);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;

		
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                       			, "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");
	
    // Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете
	
	ДатаДвижений=?(Оплачено,УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата,ДатаОплаты),Дата);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаДвижений);
	
	Если ВидОперации = Перечисления.ВидыОперацийППВходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППВходящее.РасчетыПоКредитамИЗаймам Тогда
		
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
 	СтруктураШапкиДокумента.Вставить("КурсДокумента"		, КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	, КратностьДокумента);
	


КонецПроцедуры


// Возвращает данные необходимые для проводок документа с видом операции постепление средств от ФСС
//
// Вовращаемое значение:
//  таблица с полями ВидРасчета, Сумма, СтатьяРасчетовСФСС
// 
Функция СформироватьЗапросДляПроводокЗаявки() Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр( "ССылка" , Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПлатежноеПоручениеВходящееЗаявки.ЗаявлениеРасчет.Ссылка,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.СтатьяРасчетовСФСС,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.Сумма КАК Результат
	               |ИЗ
	               |	Документ.ПлатежноеПоручениеВходящее.Заявки КАК ПлатежноеПоручениеВходящееЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыПоНачислениямЗаСчетФСС
	               |		ПО ПлатежноеПоручениеВходящееЗаявки.ЗаявлениеРасчет.Ссылка = ВзаиморасчетыПоНачислениямЗаСчетФСС.Регистратор
	               |ГДЕ
	               |	ПлатежноеПоручениеВходящееЗаявки.Ссылка = &Ссылка";


	Результат = Запрос.Выполнить();
	Возврат Результат;
КонецФункции

Процедура ДвиженияЗаявки(Отказ)
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		// Движения по документу
		Если Не Отказ Тогда
			ДвиженияПоРегистрамНакопленияЗаявки(ВыборкаПоШапкеДокумента,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = "
	|Выбрать РАЗРЕШЕННЫЕ
	|	Дата,
	|	Организация,
	|	Ответственный,
	|	Контрагент,
	|	СчетОрганизации,
	|	СчетКонтрагента,
	| 	Ссылка
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросДляПроведения()
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр( "ССылка" , Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПлатежноеПоручениеВходящееЗаявки.ЗаявлениеРасчет.Ссылка,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.Организация,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.ПериодВзаиморасчетов,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.СтатьяРасчетовСФСС,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.Сотрудник,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.СчетУчета,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.Сумма,
	               |	ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ
	               |ИЗ
	               |	Документ.ПлатежноеПоручениеВходящее.Заявки КАК ПлатежноеПоручениеВходящееЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыПоНачислениямЗаСчетФСС
	               |		ПО ПлатежноеПоручениеВходящееЗаявки.ЗаявлениеРасчет.Ссылка = ВзаиморасчетыПоНачислениямЗаСчетФСС.Регистратор
	               |ГДЕ
	               |	ПлатежноеПоручениеВходящееЗаявки.Ссылка = &Ссылка";
		   
	Возврат Запрос.Выполнить();		
КонецФункции

Процедура ДвиженияПоРегистрамНакопленияЗаявки(ВыборкаПоШапкеДокумента, Отказ)
	РезультатЗапросаПоДокументам = СформироватьЗапросДляПроведения();
	ВыборкаПоДокументам = РезультатЗапросаПоДокументам.Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		//движения по РН ВзаиморасчетыПоНачислениямЗаСчетФСС
		Движение = Движения.ВзаиморасчетыПоНачислениямЗаСчетФСС.Добавить();
	
		// Свойства
		Движение.Период                 = ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	
		// Измерения
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.ПериодВзаиморасчетов	= ВыборкаПоДокументам.ПериодВзаиморасчетов;
		Движение.СтатьяРасчетовСФСС     = ВыборкаПоДокументам.СтатьяРасчетовСФСС;
		Движение.Сотрудник              = ВыборкаПоДокументам.Сотрудник;
		Движение.СчетУчета			    = ВыборкаПоДокументам.СчетУчета;
		
		// Ресурсы
		Движение.Сумма					= ВыборкаПоДокументам.Сумма; 
	
		//Реквизиты
		Движение.Документ 				= ВыборкаПоДокументам.Документ;
		Движение.КодОперации			= Перечисления.КодыОперацийРасчетыСФСС.Получено;

		//движения по РН ВзаиморасчетыСРаботникамиОрганизаций
        Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период					= ВыборкаПоШапкеДокумента.Дата;
		Движение.ВидДвижения   			= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.ПериодВзаиморасчетов	= ВыборкаПоДокументам.ПериодВзаиморасчетов;
		Движение.Сотрудник				= ВыборкаПоДокументам.Сотрудник;
		Движение.СчетУчета			    = ВыборкаПоДокументам.СчетУчета;
		
		// Ресурсы
		Движение.СуммаВзаиморасчетов	= ВыборкаПоДокументам.Сумма;
		
		//Реквизиты
		Движение.КодОперации			= Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления;
	КонецЦикла
	
		
КонецПроцедуры

Процедура РассчитатьСуммуЗаявок() Экспорт
	Сумма = 0;
	
	РезультатЗапросаПоДокументам = ПолучитьЗапросДляРасчетаСумм();
	ВыборкаПоДокументам = РезультатЗапросаПоДокументам.Выбрать();
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.Сумма) Тогда
	   		Сумма = Сумма + ВыборкаПоДокументам.Сумма;
		КонецЕсли;	
	КонецЦикла;
		
	СуммаДокумента = Сумма;	
КонецПроцедуры
	
Функция ПолучитьЗапросДляРасчетаСумм()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ЕстьNULL(ПлатежноеПоручениеВходящееЗаявки.ЗаявлениеРасчет.ВсегоПоДокументу,0) КАК Сумма 
	                |ИЗ
	                |	Документ.ПлатежноеПоручениеВходящее.Заявки КАК ПлатежноеПоручениеВходящееЗаявки
	                |ГДЕ
	                |	ПлатежноеПоручениеВходящееЗаявки.Ссылка = &Ссылка";
	Возврат Запрос.Выполнить();				
					
Конецфункции	                           	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) ИЛИ Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	Если НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеРасчетВФСС") Тогда
		ЕстьКонтрагент = (Основание.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено);
		Если (НЕ ЕстьКонтрагент) ИЛИ (НЕ ТипЗнч(Основание.Контрагент) = Тип("Строка")) Тогда
			УправлениеДенежнымиСредствами.ЗаполнитьПриходПоОснованию(ЭтотОбъект, Основание, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
		Иначе
			мНеОткрыватьФормуДокумента = Истина;
			ОбщегоНазначения.СообщитьОбОшибке("Контрагент " + Основание.Контрагент + " не зарегистрирован! Заполнение невозможно.");
			Возврат;
		КонецЕсли;
		КонецЕсли;
	

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПокупкаПродажаВалюты") Тогда

		ВидОперации = Перечисления.ВидыОперацийППВходящее.ПокупкаПродажаВалюты;
		Контрагент  = Основание.Банк;

		Если НЕ ЗначениеЗаполнено(Основание.Заявка) Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
			СчетОрганизации     = Организация.ОсновнойБанковскийСчет;
		Иначе
			СчетКонтрагента = Основание.Заявка.СчетБанка;
			Если Основание.ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПокупкаВалюты Тогда
				СчетОрганизации = Основание.Заявка.СчетВалютный;
			Иначе
				СчетОрганизации = Основание.Заявка.СчетГривневый;
			Конецесли;	
		КонецЕсли;

		Если Основание.ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПокупкаВалюты Тогда 
			ВалютаДокумента= Основание.Валюта;
			СуммаДокумента = Основание.СуммаВалютная;
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;
		Иначе
			ВалютаДокумента= мВалютаРегламентированногоУчета;
			СуммаДокумента = Основание.СуммаДокумента;
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
		КонецЕсли;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		НоваяСтрока				 = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СуммаПлатежа = СуммаДокумента;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеРасчетВФСС") Тогда
	    ВидОперации = Перечисления.ВидыОперацийППВходящее.ПоступлениеСредствОтФСС;
		Организация = Основание.Организация;
	    Если ЗначениеЗаполнено(Организация) Тогда
			СчетОрганизации = Организация.БанковскийСчетДляРасчетовСФСС;
		Иначе
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		НоваяСтрока = Заявки.Добавить();
		НоваяСтрока.ЗаявлениеРасчет = Основание;
		СуммаДокумента = Основание.ВсегоПоДокументу;
		
		Дата378 = ПроведениеРасчетов.ВариантыАлгоритмовРасчетаЗарплаты().ДатаВводаСчета378;
		Если ОбщегоНазначения.ПолучитьРабочуюДату() < Дата378 Тогда
			Если НЕ Основание.ЗаСчетФССОтНС Тогда
				СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию;
			Иначе
				СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев;
			КонецЕсли;
		Иначе
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСГосударственнымиЦелевымиФондами;
		КонецЕсли;	

	КонецЕсли;

	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	Перем Заголовок, СтруктураШапкиДокумента;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, Режим);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если НЕ ОтраженоВОперУчете И НЕ Оплачено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")",Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(ДатаДвижений,ВалютаДокумента,Ссылка, "ПлатежноеПоручениеВходящее");
	
	Если ВидОперации <> Перечисления.ВидыОперацийППВходящее.ПоступлениеСредствОтФСС Тогда
 		ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок);
	КонецЕсли;

 	ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете Тогда
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
					СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
					мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЧастичнаяОплата Тогда
		Сообщить("По документу "+ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка)+" уже прошла частичная оплата.
		|Перед отменой проведения документа необходимо отменить проведение платежных ордеров.");
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И 
		(ВидОперации = Перечисления.ВидыОперацийППВходящее.ПрочееПоступлениеБезналичныхДенежныхСредств 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППВходящее.ПоступлениеОплатыПоПлатежнымКартам)
		Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента(
			ЭтотОбъект,
			"СчетУчетаРасчетовСКонтрагентом",    // ИмяРеквизитаСчетЗатрат
			"СубконтоКт" // ИмяРеквизитаСубконто
		);
		
	КонецЕсли;

	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ЧастичнаяОплата   = Ложь;

КонецПроцедуры

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"	, мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"              , мУчетнаяПолитикаРегл.ЕстьНДС);
		    СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог"     	, мУчетнаяПолитикаРегл.ЕстьЕдиныйНалог);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные);
мНеОткрыватьФормуДокумента  = Ложь;
