Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем АвтоЗначенияРеквизитов Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

//Определение периода движений документа
Перем ДатаДвижений;

Перем РасчетыВозврат;

Перем мСтруктураПараметровДенежныхСредств;
Перем ПревышенБюджет Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Формирует печатную форму платежного поручения
Функция ПечатьПлатежногоПоручения(Вариант2009 = Истина) Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() И Не ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Если СчетОрганизации.Пустая() Тогда
		Сообщить("Не указан расчетный счет.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
    Если СчетОрганизации.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		Сообщить("Для документа в валюте предусмотрена другая печатная форма.", СтатусСообщения.Важное);
		Возврат Неопределено;	
	КонецЕсли;

	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	Если Вариант2009 Тогда
		Макет = ПолучитьОбщийМакет("ПлатежноеПоручение_2009");
	Иначе
		Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
	КонецЕсли;
	
	Обл   = Макет.ПолучитьОбласть("Шапка");
	
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	
	БанкОрганизации = СчетОрганизации.Банк;
	БанкКонтрагента = СчетКонтрагента.Банк;
    СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	
	Обл.Параметры.НомерПП					= НомерПоручения;
	
	ЧислоДокумента                          = Формат(Дата,"ДФ='дд';Л=uk_UA");
	ДатаДокумента                           = Формат(Дата,"ДФ='дд ММММ ггггр.';Л=uk_UA");
	ДатаДокументаБезЧисла                   = Прав(ДатаДокумента, СтрДлина(ДатаДокумента) - 2);
	Обл.Параметры.ДатаДокумента          	= """" + ЧислоДокумента + """" + ДатаДокументаБезЧисла;
	Обл.Параметры.СуммаПлатежа             	= ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью          	= ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);

	Обл.Параметры.Плательщик              = ?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика));
	Обл.Параметры.КодПоЕДРПОУ 			  = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	Обл.Параметры.БанкПлательщика         = БанкОрганизации;
  	Обл.Параметры.НомерСчетаПлательщика   = ВернутьРасчетныйСчет(СчетОрганизации);
    Обл.Параметры.КодБанкаПлательщика     = БанкОрганизации.Код;
	Если НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Контрагент.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		Обл.Параметры.ПолучательЕДРПОУ        = Контрагент.КодПоЕДРПОУ;
	Иначе
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Организация.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		Обл.Параметры.ПолучательЕДРПОУ        = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	КонецЕсли;
	Обл.Параметры.БанкПолучателя          = БанкКонтрагента;
	Обл.Параметры.КодБанкаПолучателя      = БанкКонтрагента.Код;
	Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагента);

	Обл.Параметры.НазначениеПлатежа       = СокрЛП(НазначениеПлатежа);
	
	КолВо = 2;
	Если Не ВвестиЧисло(КолВо, "Введите число экземпляров", 2) Тогда
		Возврат Неопределено;	
	КонецЕсли;	
	
	Для НомерЭкземпляра = 1 по КолВо Цикл
		Обл.Параметры.НомерЭкземпляра = НомерЭкземпляра;
	    ТабДокумент.Вывести(Обл);
		Если НЕ ТабДокумент.ПроверитьВывод(Обл) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла;	

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

// Формирует печатную форму платежного поручения
//
Функция ПечатьПлатежногоПорученияВВалюте() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если (Контрагент.Пустая()) И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет) Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Если СчетОрганизации.Пустая() Тогда
		Сообщить("Не указан расчетный счет.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
    Если СчетОрганизации.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
		Сообщить("Для документа не в валюте предусмотрена другая печатная форма.", СтатусСообщения.Важное);
		Возврат Неопределено;	
	КонецЕсли;

	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручениеВВалюте";
	
	Макет = ПолучитьОбщийМакет("ПлатежноеПоручениеВВалюте");
	Обл   = Макет.ПолучитьОбласть("Шапка");
	
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	
	БанкОрганизации = СчетОрганизации.Банк;
	БанкКонтрагента = СчетКонтрагента.Банк;
    СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	
	Обл.Параметры.НомерПП		          = НомерПоручения;
	Обл.Параметры.ДатаДокумента           = Дата;
	
	Обл.Параметры.БанкПлательщика 		  = БанкОрганизации;
	Обл.Параметры.АдресБанкаПлательщика   = БанкОрганизации.Адрес;
	
	Обл.Параметры.Плательщик              = ?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика));
	Обл.Параметры.АдресПлательщика        =	УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация, "Юридический");
	Обл.Параметры.НомерСчетаПлательщика   = ВернутьРасчетныйСчет(СчетОрганизации);
		
	Обл.Параметры.СуммаПлатежа            = ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.КодВалюты		          = СчетОрганизации.ВалютаДенежныхСредств.Код;

	Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Контрагент.НаименованиеПолное,СокрЛП(ТекстПолучателя));
	Обл.Параметры.АдресПолучателя	      =	УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Контрагент, "Юридический");
	Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагента);
	
	Обл.Параметры.БанкПолучателя		  = БанкКонтрагента;
	Обл.Параметры.АдресБанкаПолучателя    = БанкКонтрагента.Адрес;
	
	Обл.Параметры.НазначениеПлатежа       = СокрЛП(НазначениеПлатежа);
	Обл.Параметры.КодПоЕДРПОУ 			  = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	
	Обл.Параметры.РезидентПлательщик      =	УправлениеКонтактнойИнформацией.ПолучитьРезидентНерезидентИзКонтактнойИнформации(Организация, "Юридический");
	Обл.Параметры.РезидентПолучатель      =	УправлениеКонтактнойИнформацией.ПолучитьРезидентНерезидентИзКонтактнойИнформации(Контрагент, "Юридический");
	
	КолВо = 2;
	Если Не ВвестиЧисло(КолВо, "Введите число экземпляров", 2) Тогда
		Возврат Неопределено;	
	КонецЕсли;	
	
	Для НомерЭкземпляра = 1 по КолВо Цикл
		Обл.Параметры.НомерЭкземпляра = НомерЭкземпляра;
	    ТабДокумент.Вывести(Обл);
		Если НЕ ТабДокумент.ПроверитьВывод(Обл) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла;	


	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПлатежноеПоручение" тогда
		
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПлатежногоПоручения();
		
	ИначеЕсли ИмяМакета = "ПлатежноеПоручениеВВалюте" тогда

		ТабДокумент = ПечатьПлатежногоПорученияВВалюте();	
		
	ИначеЕсли ИмяМакета = "ПлатежноеПоручениеДо2009" тогда

		ТабДокумент = ПечатьПлатежногоПоручения(Ложь);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежноеПоручение,ПлатежноеПоручениеДо2009,ПлатежноеПоручениеВВалюте","Платежное поручение", "Платежное поручение, старая версия", "Платежное поручение в валюте");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	Результат       = СчетКонтрагента.НомерСчета;

	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)
	
	ФорматСтрока  = "Л=uk_UA; ДП=Ложь";
	ПарамПредмета = ВалютаДокумента.ПараметрыПрописиНаУкраинском;
	
	Результат = ЧислоПрописью(СуммаДок,ФорматСтрока,ПарамПредмета);
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат = Формат(СуммаДок,"ЧДЦ=2; ЧРД=,; ЧГ=0");
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(ДокументОснование, СтрокаПлатеж)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);
	
	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Сделка = Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.Сумма*(-1);
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма*(-1),
			СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказуУпр()


// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Процедура ПолучитьТаблицуПлатежейППУпр()
	
	Запрос=Новый Запрос;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП 
	   И НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Дата, ВалютаДокумента, Ссылка, "ПлатежноеПоручениеИсходящее");
		Возврат;
	
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		
		Запрос.Текст="ВЫБРАТЬ
	|	&ПустойДоговор КАК ДоговорКонтрагента,
	|	&ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	Ложь КАК ВестиПоДокументамРасчетовСКонтрагентом,
	|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКонтрагентом,
	|	ЛОЖЬ КАК ЗаТару,
	|	НЕОПРЕДЕЛЕНО КАК Сделка,
	|	ПеречислениеНалоговДок.Сумма КАК СуммаПлатежа,
	|	ПеречислениеНалоговДок.Сумма КАК СуммаВзаиморасчетов,
	|	ПеречислениеНалоговДок.Сумма КАК СуммаПлатежаПлан,
	|	ПеречислениеНалоговДок.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА ПеречислениеНалоговДок.Сумма
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
	|			ПеречислениеНалоговДок.Сумма*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
	|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА ПеречислениеНалоговДок.Сумма
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
	|			ПеречислениеНалоговДок.Сумма*КурсыДокумента.Курс
	|			/ КурсыДокумента.Кратность
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
	|	ПеречислениеНалоговДок.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
	|	ЛОЖЬ КАК ВключатьВПлатежныйКалендарь,
	|	&ПустойПроект КАК Проект,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеНалогов КАК ПеречислениеНалоговДок
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
	|	ПО ИСТИНА
	|ГДЕ
	|	ПеречислениеНалоговДок.Ссылка = &Ссылка";	
	
		Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ВедениеВзаиморасчетов", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	
	
	Иначе
		
		Если ВыплатаЗаработнойПлаты.Количество()>0 Тогда
		
		Запрос.Текст="ВЫБРАТЬ
		|	&ПустойДоговор КАК ДоговорКонтрагента,
		|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКонтрагентом,
		|	НЕОПРЕДЕЛЕНО КАК ВедениеВзаиморасчетов,
		|	ЛОЖЬ КАК ЗаТару,
		|	НЕОПРЕДЕЛЕНО КАК Сделка,
		|	ЗарплатаДок.СуммаПлатежа КАК СуммаПлатежа,
		|	ЗарплатаДок.СуммаПлатежа КАК СуммаВзаиморасчетов,
		|	ЗарплатаДок.СуммаПлатежа КАК СуммаПлатежаПлан,
		|	ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА ЗарплатаДок.СуммаПлатежа
		|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
		|			ЗарплатаДок.СуммаПлатежа*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
		|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
		|	ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА ЗарплатаДок.СуммаПлатежа
		|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
		|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
		|			ЗарплатаДок.СуммаПлатежа*КурсыДокумента.Курс
		|			/ КурсыДокумента.Кратность
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
		|	ЗарплатаДок.СтатьяДвиженияДенежныхСредств,
		|	ЗарплатаДок.ДокументПланированияПлатежа,
		|	ЗарплатаДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь КАК ВключатьВПлатежныйКалендарь,
		|	ЗарплатаДок.Проект,
		|	ВЫБОР
		|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
		|	ВЫБОР
		|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ВыплатаЗаработнойПлаты КАК ЗарплатаДок
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
		|	ПО ИСТИНА
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
		|	ПО ИСТИНА
		|ГДЕ
		|	ЗарплатаДок.Ссылка = &Ссылка";
		
	Иначе
		
		Запрос.Текст="ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
		|	ЛОЖЬ КАК ЗаТару,
		|	НЕОПРЕДЕЛЕНО КАК Сделка,
		|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаПлатежа,
		|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаВзаиморасчетов,
		|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаПлатежаПлан,
		|	ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента
		|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
		|			ВыплатаЗаработнойПлатыДок.СуммаДокумента*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
		|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
		|	ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента
		|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
		|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
		|			ВыплатаЗаработнойПлатыДок.СуммаДокумента*КурсыДокумента.Курс
		|			/ КурсыДокумента.Кратность
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
		|	&ПустаяСтатья КАК СтатьяДвиженияДенежныхСредств,
		|	&ПустойДокументПланирования КАК ДокументПланированияПлатежа,
		|	ЛОЖЬ КАК ВключатьВПлатежныйКалендарь,
		|	&ПустойПроект КАК Проект,
		|	ВЫБОР
		|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
		|	ВЫБОР
		|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ВыплатаЗаработнойПлатыДок
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
		|	ПО ИСТИНА
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
		|	ПО ИСТИНА
		|ГДЕ
		|	ВыплатаЗаработнойПлатыДок.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("ПустаяСтатья", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойДокументПланирования", Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка());
		
		КонецЕсли;
	
		Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаДокумента",?(Оплачено,КонецДня(ДатаОплаты),Дата));
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",  глЗначениеПеременной("ВалютаУправленческогоУчета"));
	Запрос.УстановитьПараметр("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТипыСделок = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Измерения.Сделка.Тип.Типы();
	МассивПустыхСделок = Новый Массив;
	Для каждого Элемент Из ТипыСделок Цикл
		МассивПустыхСделок.Добавить(Новый(Элемент));
	КонецЦикла;
	
	ТипыРасчетныхДокументов = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Измерения.ДокументРасчетовСКонтрагентом.Тип.Типы();
	МассивПустыхРасчетныхДокументов = Новый Массив;
	Для каждого Элемент Из ТипыРасчетныхДокументов Цикл
		МассивПустыхРасчетныхДокументов.Добавить(Новый(Элемент));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеСделки",МассивПустыхСделок);
	Запрос.УстановитьПараметр("ПустыеРасчетныеДокументы",МассивПустыхРасчетныхДокументов);
	Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());		
	
	ТаблицаПлатежейУпр=Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // ПолучитьТаблицуПлатежей()


// Формирует номер платежного поручения в пределах расчетного счета
Процедура УстановитьНомерПоручения() Экспорт
	
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
		СтруктураПараметровБлокировка = Новый Структура("ТипТаблицы, ИмяТаблицы", "Справочник", "БанковскиеСчета");
		
		ЗначенияБлокировки = Новый Структура;
		ЗначенияБлокировки.Вставить("Ссылка",      СчетОрганизации);
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировка, ЗначенияБлокировки, , Ложь, "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("ДатаКонцаГода", КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетОрганизации", СчетОрганизации);
	

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерПоручения КАК НомерПоручения
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручение
	|
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации
	|	И ПлатежноеПоручение.Дата >= &ДатаНачалаГода
	|	И ПлатежноеПоручение.Дата <= &ДатаКонцаГода";

	СписокПлатежек = Запрос.Выполнить().Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	 
	ТаблицаЗначений.Колонки.Добавить("Номер"); 
	ТаблицаЗначений.Колонки.Добавить("Длина"); 

	Пока СписокПлатежек.Следующий() Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить(); 
		НоваяСтрока.Номер = СписокПлатежек.НомерПоручения; 
		НоваяСтрока.Длина = СтрДлина(СписокПлатежек.НомерПоручения); 
	КонецЦикла;
	
	ТаблицаЗначений.Сортировать("Длина Убыв, Номер Убыв");
	
	Попытка
		НомерПорученияЧисло = Число(ТаблицаЗначений[0].Номер) + 1;
		НомерПоручения = Формат(НомерПорученияЧисло, "ЧГ=0");
	Исключение
		НомерПоручения = 1;
	КонецПопытки;
	
КонецПроцедуры

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплата()

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("ДатаОплаты","Не указана дата оплаты документа банком!");
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет бухгалтерского учета, на который производится перевод!");
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками тогда
		СтруктураПолей.Вставить("ФизЛицо","Не указан работник!");
		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет бухгалтерского учета, на который производится перевод!");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	СтруктураПолей = Новый Структура("Организация, СуммаДокумента,Ответственный");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
		
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		СтруктураПолей = Новый Структура("Организация, Контрагент, Ответственный");
		СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда

		СтруктураПолей = Новый Структура("Организация,Контрагент, Ответственный");
		СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
		СтруктураПолей.Вставить("ФизЛицо","Не указан работник");
		СтруктураПолей.Вставить("ДоговорЗайма","Не указан договор займа с работником");

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом","Не указан счет бухгалтерского учета, на который производится перевод!");
	ИначеЕсли ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		СтруктураПолей.Удалить("Контрагент");
		СтруктураПолей.Вставить("ФизЛицо");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейРасчеты()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)

	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");

		Если Не Отказ Тогда

			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			 ИЛИ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

				ПроверитьЗначение(Платеж.Сделка, Отказ, Заголовок,"Сделка");
				Если Отказ Тогда
					Сообщить("По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле ""Сделка""!");
				КонецЕсли;

			КонецЕсли;

			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Процедура определяет параметры регл. учетной политики
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация, , Заголовок);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"   , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"              , мУчетнаяПолитикаРегл.ЕстьНДС);
		    СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог"		, мУчетнаяПолитикаРегл.ЕстьЕдиныйНалог);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)
	
	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
    ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)
	
	мСтруктураПараметровДенежныхСредств.Вставить("РасчетыВозврат",            РасчетыВозврат);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              ДатаДвижений);
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКассаПолучатель", СчетКонтрагента);
		мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредствПолучатель",  Перечисления.ВидыДенежныхСредств.Безналичные);
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) Тогда
		Возврат;
	КонецЕсли;

	ВидДвижения = ВидДвиженияНакопления.Приход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	Иначе
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры


Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)
	
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами",	ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",		ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("РежимПроведения",				РежимПроведения);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",				ДатаДвижений);
	мСтруктураПараметровДенежныхСредств.Вставить("СчетОрганизации",				СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("Оплачено",					Оплачено);
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствРегл(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
			Сообщить(Заголовок+"
			|Не указано подотчетное лицо");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если ОтраженоВОперУчете И (НЕ Оплачено) И (Режим = РежимПроведенияДокумента.Оперативный) Тогда

			ЕстьРазрешение=УправлениеДопПравамиПользователей.ПравоРазрешитьПроведениеПлатежаБезЗаявки();
		
			УправлениеДенежнымиСредствами.ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
					СчетОрганизации,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение);

		// Проверяем остаток доступных денежных средств
		СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(СчетОрганизации,Дата,ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"));
		Если СвободныйОстаток < СуммаДокумента Тогда

			Сообщить(Заголовок+"
			|Сумма документа превышает возможный к использованию остаток денежных средств
			|по "+СчетОрганизации.Наименование+".
			|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2; ЧН=0")+" "+ВалютаДокумента+"
			|Сумма документа = "+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);

			Если НЕ УправлениеДопПравамиПользователей.ПравоРазрешитьПревышениеСвободногоОстаткаДС() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И (ОтраженоВОперУчете ИЛИ (ОтражатьВБухгалтерскомУчете И Оплачено)) Тогда

		ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
		
		Если (Не Отказ) И (НЕ РольДоступна("ПроведениеПлатежныхДокументовБезКонтроляПоРД")) Тогда
			ТаблицаПлатежейУпр.ЗаполнитьЗначения(Ложь, "КонтролироватьСуммуЗадолженности");
			УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,РасчетыВозврат);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Оплачено И ОтраженоВОперУчете И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств И ОтражатьПоЗатратам Тогда
		СтруктураОбязательныхПолей = Новый Структура("СтатьяЗатрат");
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			Если Не (СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы ИЛИ
					 СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт ИЛИ
					 СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы) 
			Тогда
			     ОбщегоНазначения.СообщитьОбОшибке("При указании статьи затрат с характером затрат " + СтатьяЗатрат.ХарактерЗатрат + " движения в затратных регистрах по УУ не будут отражены", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок, СтруктураШапкиДокумента)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолейШапки = Новый Структура("СчетУчетаДенежныхСредств");
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
			
		ИначеЕсли (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога)
			  ИЛИ (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПокупкаПродажаВалюты)
			  ИЛИ (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств) Тогда
			  
			СтруктураПолейШапки.Вставить("СчетУчетаРасчетовСКонтрагентом");
		
		КонецЕсли;
		
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолейШапки, Отказ, Заголовок);
		
		
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			
			
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				Неопределено,      // Неопределено - в случае проверки шапки документа
				Неопределено,      // Неопределено - в случае проверки шапки документа
				Отказ, 
				Заголовок, 
				"ОтражениеЗатрат", // ВидОперации
				Истина,            // ОтражатьПоЗатратам,
				"СчетУчетаРасчетовСКонтрагентом", // ИмяРеквизитаСчетЗатрат
				"СубконтоДт"       // ИмяРеквизитаСубконтоЗатрат
			);
			
			
			Если ОтражатьПоЗатратам Тогда
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетУчетаРасчетовСКонтрагентом, СтатьяЗатрат);
				
				Если НЕ (ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы ИЛИ
					ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы ИЛИ 
					ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие ИЛИ
					ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт ИЛИ
					ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы ИЛИ 
					ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы ИЛИ 
					ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы) И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)
				Тогда
					ОбщегоНазначения.СообщитьОбОшибке("При указании счета затрат " + СчетУчетаРасчетовСКонтрагентом + " с характером затрат " + ХарактерЗатрат + " движения в затратных регистрах (бух. учет, нал. учет) не будут отражены",  Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруКурсыВалютУпр()

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",  глЗначениеПеременной("ВалютаУправленческогоУчета").Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", ВалютаДокумента.Код);

	СтруктураКурсыВалют = УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаОплаты = '00010101', Дата, КонецДня(ДатаОплаты)));

	Возврат СтруктураКурсыВалют;

КонецФункции

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)

	Если НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")) Тогда
		Возврат;
	КонецЕсли;

	Если Основание.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
		Сообщить("Заявка оформлена на расходование наличных денежных средств.");
		Возврат;
	КонецЕсли;

	ВидОперацииЗаявка = Основание.ВидОперации;

	УправлениеДенежнымиСредствами.ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииЗаявка);

	Организация = Основание.Организация;
    ВалютаДокумента = Основание.ВалютаДокумента;

	Если ЗначениеЗаполнено(Основание.БанковскийСчетКасса) Тогда
		СчетОрганизации = Основание.БанковскийСчетКасса;
	ИначеЕсли Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ВалютаДокумента Тогда
		СчетОрганизации= Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Ответственный     = Основание.Ответственный;
	ДокументОснование = Основание.Ссылка;
	
	Если ВалютаДокумента.Пустая() Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли;

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	УправлениеДенежнымиСредствами.ЗаполнитьПоЗаявкеУпр(ЭтотОбъект, Основание, глЗначениеПеременной("глТекущийПользователь"));

КонецПроцедуры

Процедура ЗаполнитьДокументПоОснованиюРегл(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
		
		ВидОперации        = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП;
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;
		Организация        = Основание.Организация;
		ДокументОснование  = Основание;
		
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ВалютаДокумента Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		
		// Определим сумму выплаченной заработной платы
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Основание);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ Различные                         
		|	РаботникиОрганизации.Банк
		|ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|
		|ГДЕ 	РаботникиОрганизации.Ссылка = &Ссылка
		|	И	РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
		|";
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("По текущей ведомости нет сумм к выплате со способом выплаты ""через банк""!")
			
		Иначе	
			
			тбБанки = РезультатЗапроса.Выгрузить();
			тбБанки.Свернуть("Банк");
			СтрокаБанки = тбБанки.ВыбратьСтроку("Выберите банк.");
			Если СтрокаБанки <> Неопределено Тогда
				Контрагент = СтрокаБанки.Банк;
				СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
				
				ВыборкаБанк = РезультатЗапроса.Выбрать(); 
				Если ВыборкаБанк.НайтиСледующий(СтрокаБанки.Банк,"Банк") Тогда
					
					Запрос=Новый Запрос;
					Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
					Запрос.УстановитьПараметр("Ссылка", Основание);
					Запрос.УстановитьПараметр("Регистратор", Ссылка);
					Запрос.УстановитьПараметр("Банк", СтрокаБанки.Банк);
					
					ТекстЗапроса = "
					|ВЫБРАТЬ                          
					|	ПараметрыОплаты.СчетУчета		КАК СчетУчета,
					|	СУММА(ПараметрыОплаты.Сумма)	КАК Сумма
					|ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты	КАК ПараметрыОплаты
					|                          
					|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
					|ПО	ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
					|И	ПараметрыОплаты.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
					|И	(РанееВыплаченныеСуммы.Регистратор <> &Регистратор)
					|
					|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
					|ПО	ПараметрыОплаты.Ссылка = РаботникиОрганизации.Ссылка
					|И	ПараметрыОплаты.Сотрудник = РаботникиОрганизации.Сотрудник
					|
					|ГДЕ ПараметрыОплаты.Ссылка = &Ссылка
					|	И РанееВыплаченныеСуммы.Сотрудник ЕСТЬ NULL 
					|	И РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
					|	И РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
					|	И РаботникиОрганизации.Банк = &Банк
					|
					|СГРУППИРОВАТЬ ПО
					|	ПараметрыОплаты.СчетУчета
					|";
					
					Запрос.Текст = ТекстЗапроса;
					Выборка = Запрос.Выполнить().Выбрать(); 
					Запрос.Выполнить().Выгрузить();
					Пока Выборка.Следующий() Цикл
						
						СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
						СтрокаВедомость.Ведомость		= Основание;
						СтрокаВедомость.СчетУчета		= Выборка.СчетУчета;
						СтрокаВедомость.СуммаПлатежа	= Выборка.Сумма;
						
						СуммаДокумента = СуммаДокумента + Выборка.Сумма;
						
					КонецЦикла;
					
					СтрокаПлатеж = РасшифровкаПлатежа[0];
					СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаПокупкуПродажуВалюты")	Тогда
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПокупкаПродажаВалюты;
		ЗаявкаНаПокупкуПродажуВалюты = Основание;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПокупкаВалюты Тогда
			ВалютаДокумента=мВалютаРегламентированногоУчета;
			КурсДокумента=1;
			КратностьДокумента=1;

			СчетОрганизации = Основание.СчетГривневый;
			Контрагент = Основание.Банк;
			СчетКонтрагента = Основание.СчетБанка;
			СуммаДокумента = Основание.СуммаГривневая + Основание.СуммаГривневая*Основание.Комиссионные/100;
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПродажаВалюты Тогда
			ВалютаДокумента = Основание.Валюта;
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;	
			
			СчетОрганизации = Основание.СчетВалютный;
			Контрагент = Основание.Банк;
			СчетКонтрагента = Основание.СчетБанка;
			СуммаДокумента = Основание.СуммаВалютная;
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;
	
		КонецЕсли;	
		РасшифровкаПлатежа[0].СуммаПлатежа		  = СуммаДокумента;
		РасшифровкаПлатежа[0].СуммаВзаиморасчетов = СуммаДокумента;

	КонецЕсли;
		
КонецПроцедуры

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж)

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ПодотчетныеЛицаВзаиморасчетыКомпании".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", ФизЛицо);
	Запрос.УстановитьПараметр("РасчетныйДокумент", ДокументОснование);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетовПодотчетника", ВалютаДокумента);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                           ФизЛицо = &Контрагент
	|	                                                         И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                         И Валюта = &ВалютаВзаиморасчетовПодотчетника)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаДокумента, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
									
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()


Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                       			, "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;
	Иначе	
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("КурсДокумента", КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента", КратностьДокумента);

	ДатаДвижений=?(Оплачено,УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата,ДатаОплаты),Дата);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаДвижений);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) ИЛИ Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	СпособЗаполнения = "Не заполнять";
	ВалютаДокумента  = мВалютаРегламентированногоУчета;
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		ВидОперации  = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;

		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
				СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			СчетОрганизации = Основание.СтруктурнаяЕдиница;
		Иначе
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		Если НЕ СчетОрганизации.Пустая() Тогда
			ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;	
		СтрокаПлатеж.СтавкаНДС  =УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда

			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
			Иначе
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		КонецЕсли;

		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		Если Основание.Проведен Тогда
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		СчетОрганизации  = Организация.ОсновнойБанковскийСчет;

		Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета И СчетОрганизации.ВалютаДенежныхСредств <> ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	БанковскиеСчета.Ссылка КАК Счет
			               |ИЗ
			               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
			               |ГДЕ
			               |	БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
			               |	И БанковскиеСчета.Владелец = &Организация
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	БанковскиеСчета.Ссылка";
			
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ВалютаДенежныхСредств", ДоговорКонтрагента.ВалютаВзаиморасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СчетОрганизации  = Выборка.Счет;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) И Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=СчетОрганизации.ВалютаДенежныхСредств Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если НЕ СчетОрганизации.Пустая() Тогда
			ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;	

		СтрокаПлатеж.СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.БюджетнаяОперация") Тогда


		ВидОперации  = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		Контрагент   = Основание.Контрагент;
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		СтрокаПлатеж = РасшифровкаПлатежа[0];

		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = ВалютаДокумента;
		Иначе
			ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;

		// Получаем курсы валют
		СтруктураГруппаВалют = Новый Структура;
		СтруктураГруппаВалют.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов.Код);
		СтруктураГруппаВалют.Вставить("ВалютаДокумента",      ВалютаДокумента.Код);
		СтруктураГруппаВалют.Вставить("ВалютаОперации",       Основание.ВалютаДокумента.Код);

		СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,Дата);

		КурсДокумента      = СтруктураКурсыВалют.ВалютаДокументаКурс;
		КратностьДокумента = СтруктураКурсыВалют.ВалютаДокументаКратность;

		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсыВалют.ВалютаВзаиморасчетовКурс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсыВалют.ВалютаВзаиморасчетовКратность;

		КурсОперации      = СтруктураКурсыВалют.ВалютаОперацииКурс;
		КратностьОперации = СтруктураКурсыВалют.ВалютаОперацииКратность;

		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Сумма,
		                            Основание.ВалютаДокумента, 
		                            ВалютаДокумента,
		                            КурсОперации, КурсДокумента,
		                            КратностьОперации, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента,
		                            ВалютаДокумента, 
		                            ВалютаВзаиморасчетов,
		                            КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                            КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда

		ВидОперации  = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками;

		ФизЛицо                          = Основание.ФизЛицо;
		ДоговорЗайма                     = Основание;
		ВалютаВзаиморасчетовРаботника    = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаЗайма;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ВидОперации						 = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;
		ФизЛицо							 = Основание.ФизЛицо;
		ДокументОснование                = Основание;
		РасчетныйДокумент                = Основание;
		ВалютаДокумента					 = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;

		СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";

 		ОтражатьВУправленческомУчете=Истина;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
		СуммаДокумента = Основание.СуммаДокумента;
		ВалютаДокумента = Основание.ВалютаДокумента;
		СтрокаПлатеж.СуммаПлатежа = Основание.СуммаДокумента;
		СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаДокумента;
		СчетОрганизации = Основание.СчетОрганизации;
		СчетКонтрагента = Основание.СчетКонтрагента;
		СтрокаПлатеж.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ИначеЕсли  ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		ФизЛицо = Основание.Получатель;
КонецЕсли;

	Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
		Если Основание.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда
			СтрокаПлатеж.Проект=Основание.Проект;
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
			
			Если ЗначениеЗаполнено(Основание.РасшифровкаПлатежа[0].Проект) Тогда
				СтрокаПлатеж.Проект = Основание.РасшифровкаПлатежа[0].Проект;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.Проект) Тогда
			Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
				СтрокаПлатеж.Проект=ДоговорКонтрагента.ОсновнойПроект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьДокументПоОснованиюУпр(Основание);
	ЗаполнитьДокументПоОснованиюРегл(Основание);
	
	Если СпособЗаполнения = "По заказу" Тогда

		ЗаполнитьПоЗаказуУпр(Основание, СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,-1);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		
		ПроверкаКурсовВалют(СтрокаПлатеж);
		
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда

		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = ?(Основание.УдержатьКомиссионноеВознаграждение, ОснованиеСуммаДокумента - Основание.СуммаВознаграждения, ОснованиеСуммаДокумента);
		КонецЕсли;

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования           = СтруктураКурсаОснования.Курс;
		КратностьОснования      = СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;

	Если Основание.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда

		Если Основание.ОтражатьВБухгалтерскомУчете Тогда

			Если Основание.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			
			Если Основание.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоАвансамВыданным") <> Неопределено Тогда
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = Основание.СчетУчетаРасчетовПоАвансамВыданным;
			ИначеЕсли Основание.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоАвансам") <> Неопределено Тогда
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = Основание.СчетУчетаРасчетовПоАвансам;				
			Иначе
				// 	
			КонецЕсли; 

		КонецЕсли;

	КонецЕсли;

	Ответственный      = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	ОтраженоВОперУчете = Истина;
	ДокументОснование  = Основание.Ссылка;
	Если СчетКонтрагента.Пустая() Тогда
		Если НЕ Контрагент.Пустая() Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, Режим);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	РасчетыВозврат=УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ ОтраженоВОперУчете И НЕ Оплачено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")",Отказ, Заголовок);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		СуммаРасшифровкиДокумента = ПеречислениеНалогов.Итог("Сумма");
	Иначе
		СуммаРасшифровкиДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	Если НЕ СуммаРасшифровкиДокумента = СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадают сумма документа и ее расшифровка.",Отказ, Заголовок);
	КонецЕсли;
	
	Если Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплата(), Отказ, Заголовок);
	КонецЕсли;
	
	Если ОтраженоВОперУчете Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);
	КонецЕсли;
	
	ПолучитьТаблицуПлатежейППУпр();
	
	Если НЕ Отказ Тогда
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
	КонецЕсли;
	
	ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок, СтруктураШапкиДокумента);

	СтруктураКурсыВалют = СформироватьСтруктуруКурсыВалютУпр();
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете Тогда
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
					СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
					мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
	КонецЕсли;
	
	//Смартис Лиманчук начало 28.03.2013
	УправлениеВзаиморасчетами.ПроверитьСрокИСуммуЗадолженностиПодотчет(СтруктураШапкиДокумента, Отказ, Заголовок);
	//Смартис Лиманчук окончание 28.03.2013
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ДвиженияЗатрат = Движения.ЗатратыБухгалтерскийУчет;
		ДвиженияЗатрат.Прочитать();
		
		тзЗатраты = ДвиженияЗатрат.Выгрузить(, "СтатьяЗатрат, Подразделение, Сумма");
		тзЗатраты.Свернуть("СтатьяЗатрат, Подразделение", "Сумма");
		
		Если тзЗатраты.Количество() > 0 Тогда
			тзЗатратыПоПодразделениям = Бюджетирование.ВыполнитьКонтрольПревышенияБюджета(ЭтотОбъект, тзЗатраты, Отказ);
			
			Если НЕ ЭтотОбъект.ПревышенБюджет И тзЗатратыПоПодразделениям <> Неопределено Тогда
				Бюджетирование.СформироватьДвиженияФактическихЗатратПоБюджетам(ЭтотОбъект, тзЗатратыПоПодразделениям);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ПревышенБюджет Тогда
		Бюджетирование.ОчиститьЗаписиРегистраПревышений(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику И ВидОперации <> Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента(
			ЭтотОбъект,
			"СчетУчетаРасчетовСКонтрагентом",    // ИмяРеквизитаСчетЗатрат
			"СубконтоДт" // ИмяРеквизитаСубконто
		);
		
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	Если НЕ ЗначениеЗаполнено(НомерПоручения) ИЛИ ЭтоНовый() Тогда
		УстановитьНомерПоручения ();
	КонецЕсли;

	Если ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
	   И ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
			ДокументОснование = Неопределено;
		КонецЕсли;
		Если ТипЗнч(Ведомость) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
			Ведомость = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если ЧастичнаяОплата Тогда
		Сообщить("По документу "+ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка)+" уже прошла частичная оплата.
		|Перед отменой проведения документа необходимо отменить проведение платежных ордеров.");
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет движения по регистрам упр. учета для операций покупки/продажи валюты 
//
// Параметры
//  СуммаУпр  – число – сумма в валюте управленческого учета
//
Процедура ДвиженияПоПокупкеПродажеВалютыУпр(СуммаУпр)

	// По регистру "Денежные средства в пути"
	НаборДвижений   = Движения.ДенежныеСредстваВПути;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.Банк     = Контрагент;
	СтрокаДвижений.Валюта   = СчетОрганизации.ВалютаДенежныхСредств;
	СтрокаДвижений.Сумма    = СуммаДокумента;
	СтрокаДвижений.СуммаУпр = СуммаУпр;
	
	НаборДвижений.мПериод              = ДатаДвижений;
	НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
	Движения.ДенежныеСредстваВПути.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияПоПокупкеПродажеВалютыУпр()

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ЧастичнаяОплата   = Ложь;
	// для нового документа стоит очистить номер поручения
	НомерПоручения = "";
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные);
ПревышенБюджет = Ложь;
