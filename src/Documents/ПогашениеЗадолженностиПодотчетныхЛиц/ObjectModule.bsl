Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Дата,
	|	ПериодРегистрации,
	|	Ссылка
	|ИЗ
	|	Документ." + Метаданные().Имя + "
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ВидРасчета",     ПланыВидовРасчета.УправленческиеНачисления.КомпенсацияПодотчетныхДС);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиНачисления.НомерСтроки                            КАК НомерСтроки,
	|	СтрокиНачисления.Физлицо                                КАК ФизЛицо,
	|	СтрокиНачисления.ВидРасчета                             КАК ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета               КАК СпособРасчета,
	|	СтрокиНачисления.ДатаНачала                             КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания                          КАК ПериодДействияКонец,
	|	СтрокиНачисления.Подразделение                          КАК Подразделение,
	|	СтрокиНачисления.Результат                              КАК Результат,
	|	Работники.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	Работники.ГрафикРаботы                                  КАК ГрафикРаботы
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ВидРасчета                                                     КАК ВидРасчета,
	|		НАЧАЛОПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ДатаНачала,
	|		КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации,  МЕСЯЦ) КАК ДатаОкончания,
	|		СтрокиНачисления.НомерСтроки                                    КАК НомерСтроки,
	|		СтрокиНачисления.Подразделение                                  КАК Подразделение,
	|		СтрокиНачисления.Результат                                      КАК Результат,
	|		СтрокиНачисления.Физлицо                                        КАК Физлицо,
	|		ПоследниеДаты.МаксПериод                                        КАК МаксПериод
	|	ИЗ
	|		Документ.ПогашениеЗадолженностиПодотчетныхЛиц.Начисления КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(Работники.Период) КАК МаксПериод,
	|				СтрокиНачисления.Физлицо   КАК Физлицо
	|			ИЗ
	|				Документ.ПогашениеЗадолженностиПодотчетныхЛиц.Начисления КАК СтрокиНачисления
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|					ПО Работники.Период <= НАЧАЛОПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|						И СтрокиНачисления.Физлицо = Работники.ФизЛицо
	|			ГДЕ
	|				СтрокиНачисления.Ссылка = &ДокументСсылка
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СтрокиНачисления.Физлицо) КАК ПоследниеДаты
	|			ПО СтрокиНачисления.Физлицо = ПоследниеДаты.Физлицо
	|	
	|	ГДЕ
	|		СтрокиНачисления.Ссылка = &ДокументСсылка) КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|		ПО Работники.Период = СтрокиНачисления.МаксПериод
	|			И СтрокиНачисления.Физлицо = Работники.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "Удержания" документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоУдержания()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ВидРасчета",     ПланыВидовРасчета.УправленческиеУдержания.УдержаниеПодотчетныхДС);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиУдержания.НомерСтроки                      КАК НомерСтроки,
	|	&ВидРасчета                                      КАК ВидРасчета,
	|	СтрокиУдержания.Физлицо                          КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СтрокиУдержания.Ссылка.Дата, ДЕНЬ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(СтрокиУдержания.Ссылка.Дата,  ДЕНЬ) КАК ДатаОкончания,
	|	СтрокиУдержания.Результат                        КАК Результат,
	|	СтрокиУдержания.Подразделение                    КАК Подразделение
	|ИЗ
	|	Документ.ПогашениеЗадолженностиПодотчетныхЛиц.Удержания КАК СтрокиУдержания
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан период начисления зарплаты!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборНачисления)

	Движение = НаборНачисления.Добавить();

	// Свойства
	Движение.ПериодРегистрации    = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияНачало = ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.ПериодДействияКонец  = ВыборкаПоСтрокамДокумента.ПериодДействияКонец;
	Движение.ВидРасчета           = ВыборкаПоСтрокамДокумента.ВидРасчета;

	// Измерения
	Движение.ФизЛицо              = ВыборкаПоСтрокамДокумента.ФизЛицо;

	// Ресурсы
	Движение.Результат            = ВыборкаПоСтрокамДокумента.Результат;
	Движение.ОтработаноДней       = 0;
	Движение.ОтработаноЧасов      = 0;

	// Реквизиты
	Движение.ГрафикРаботы         = ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ВидУчетаВремени      = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Движение.Подразделение        = ВыборкаПоСтрокамДокумента.Подразделение;
	Движение.Показатель1          = 0;
	Движение.Показатель2          = 0;
	Движение.Показатель3          = 0;

КонецПроцедуры // ДобавитьСтрокуНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуУдержаний(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборУдержания)

	Движение = НаборУдержания.Добавить();

	// Свойства
	Движение.ПериодРегистрации   = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.БазовыйПериодНачало = ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.БазовыйПериодКонец  = ВыборкаПоСтрокамДокумента.ДатаОкончания;
	Движение.ВидРасчета          = ВыборкаПоСтрокамДокумента.ВидРасчета;

	// Измерения
	Движение.ФизЛицо             = ВыборкаПоСтрокамДокумента.ФизЛицо;

	// Ресурсы
	Движение.Результат           = ВыборкаПоСтрокамДокумента.Результат;

	// Реквизиты
	Движение.Подразделение       = ВыборкаПоСтрокамДокумента.Подразделение;
	Движение.Показатель1         = 0;
	Движение.Показатель2         = 0;
	Движение.Показатель3         = 0;

КонецПроцедуры // ДобавитьСтрокуУдержаний

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//	ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//	НаборЗаписей - набор записей 
//
// Возвращаемое значение:
//  Нет.
//		
Процедура ДобавитьСтрокуВзаиморасчетов(ВыборкаПоШапкеДокумента, НаборЗаписей)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доходы.Физлицо,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗплНачисления.Физлицо   КАК Физлицо,
	|		ЗплНачисления.Результат КАК СуммаДохода
	|	ИЗ
	|		Документ.ПогашениеЗадолженностиПодотчетныхЛиц.Начисления КАК ЗплНачисления
	|
	|	ГДЕ
	|		ЗплНачисления.Ссылка = &ДокументСсылка И
	|		(ЗплНачисления.Результат <> 0)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗплУдержания.Физлицо,
	|		-(ЗплУдержания.Результат)
	|	ИЗ
	|		Документ.ПогашениеЗадолженностиПодотчетныхЛиц.Удержания КАК ЗплУдержания
	|
	|	ГДЕ
	|		ЗплУдержания.Ссылка = &ДокументСсылка И
	|		(ЗплУдержания.Результат <> 0)) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Физлицо";

	Доходы = Запрос.Выполнить().Выбрать();

	// Сформируем движения ВзаиморасчетыСРаботниками
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();

		// свойства
		Движение.Период      = КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;

		// измерения
		Движение.Физлицо     = Доходы.Физлицо;

		// ресурсы
		Движение.СуммаУпр    = Доходы.СуммаДохода;

	КонецЦикла;

КонецПроцедуры  // ДобавитьСтрокуВзаиморасчетов

// Формирует таблицу значений по табличным части дркумента "Начисления"
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьТаблицуНачисленийУпр()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтрокиНачисления.РасчетныйДокумент.Организация КАК Организация,
	|	СтрокиНачисления.Физлицо              КАК ФизЛицо,
	|	СтрокиНачисления.Результат            КАК СуммаУпр,
	|	СтрокиНачисления.РасчетныйДокумент    КАК РасчетныйДокумент,
	|	СтрокиНачисления.ВалютаВзаиморасчетов КАК Валюта,
	|	СтрокиНачисления.СуммаВзаиморасчетов  КАК СуммаВзаиморасчетов
	|
	|ИЗ
	|	Документ.ПогашениеЗадолженностиПодотчетныхЛиц.Начисления КАК СтрокиНачисления
	|
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // СформироватьТаблицуНачисленийУпр()

// Формирует таблицу значений по табличным части документа "Удержания"
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьТаблицуУдержанийУпр()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтрокиУдержания.РасчетныйДокумент.Организация КАК Организация,
	|	СтрокиУдержания.Физлицо              КАК ФизЛицо,
	|	СтрокиУдержания.Результат            КАК СуммаУпр,
	|	СтрокиУдержания.РасчетныйДокумент    КАК РасчетныйДокумент,
	|	СтрокиУдержания.ВалютаВзаиморасчетов КАК Валюта,
	|	СтрокиУдержания.СуммаВзаиморасчетов  КАК СуммаВзаиморасчетов
	|
	|ИЗ
	|	Документ.ПогашениеЗадолженностиПодотчетныхЛиц.Удержания КАК СтрокиУдержания
	|
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // СформироватьТаблицуУдержанийУпр()

// Добавляет движения в регистр "ВзаиморасчетыСПодотчетнымиЛицами"
// движения по взаиморасчетам с работниками
//
// Параметры: 
//	НаборЗаписей      - набор записей,
//	ТаблицаНачисления - таблица значений,
//	ТаблицаУдержания  - таблица значений
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьВзаиморасчетыСПодотчетнымиЛицами(НаборЗаписей)

	// Взаиморасчеты с подотчетными лицами
	ТаблицаНачисления = СформироватьТаблицуНачисленийУпр();
	ТаблицаУдержания  = СформироватьТаблицуУдержанийУпр();

	ТаблицаДвижений = НаборЗаписей.Выгрузить();

	ТаблицаДвижений.Очистить();

	ТаблицаДвиженийНачисления = ТаблицаДвижений.Скопировать();
	ТаблицаДвиженийУдержания  = ТаблицаДвижений.Скопировать();

	// Начисления
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНачисления, ТаблицаДвиженийНачисления);

	НаборЗаписей.мПериод          = Дата;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвиженийНачисления;

	Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьПриход();

	// Удержания
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУдержания, ТаблицаДвиженийУдержания);

	НаборЗаписей.мПериод          = Дата;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвиженийУдержания;

	Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьРасход();

КонецПроцедуры // ДобавитьВзаиморасчетыСПодотчетнымиЛицами()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, Режим)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	//Отказ = Не ОбщегоНазначения.ОпределитьФактВыполненияРодительскойОперации(ПериодРегистрации, ,
	//														Ссылка,
	//														Перечисления.РегламентныеОперации.НачислениеЗарплатыРаботникам,
	//														"Упр");
	//Если Отказ Тогда
	//	Сообщить("В соответствии с текущим планом выполнения регламентных операций данная операция не может быть выполнена, поскольку не выполнены родительские операции", СтатусСообщения.Важное);
	//	Возврат;
	//КонецЕсли;

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Проверим заполнение табличной части "Начисления" и "Удержания"
		СтруктураОбязательныхПолей = Новый Структура("ФизЛицо, РасчетныйДокумент, ВалютаВзаиморасчетов, СуммаВзаиморасчетов");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Начисления", СтруктураОбязательныхПолей, Отказ, Заголовок);
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Удержания",  СтруктураОбязательныхПолей, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Начисления
			//
			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления().Выбрать();

			// Заполним записи в наборах записей регистров
			Пока ВыборкаПоНачислениям.Следующий() Цикл 
				ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.УправленческиеНачисления);
			КонецЦикла;

			// Удержания
			//
			// получим реквизиты табличной части
			ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания().Выбрать();

			// Заполним записи в наборах записей регистров
			Пока ВыборкаПоУдержаниям.Следующий() Цикл 
				ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, Движения.УправленческиеУдержания);
			КонецЦикла;

			// Сформируем начисления к выплате по начислениям документа
			ДобавитьСтрокуВзаиморасчетов(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботниками);

			// Сформируем движения по взаиморасчетам с подотчетными лицами
			ДобавитьВзаиморасчетыСПодотчетнымиЛицами(Движения.ВзаиморасчетыСПодотчетнымиЛицами);

		КонецЕсли;
		//Если Не Отказ Тогда
		//	ОбщегоНазначения.ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации, ,
		//													Ссылка,
		//													Перечисления.РегламентныеОперации.НачислениеЗарплатыРаботникам,
		//													Подразделение,
		//													"Упр");
		//КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения"
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");
