Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации				= ВыборкаПоСтрокамДокумента.ДатаРегистрации;
	Движение.ПериодДействияНачало			= ВыборкаПоСтрокамДокумента.ДатаРегистрации;
	Движение.ПериодДействияКонец			= ВыборкаПоСтрокамДокумента.ДатаРегистрации;
	Движение.БазовыйПериодНачало			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.БазовыйПериодКонец				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ВидРасчета						= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.КомпенсацияПодотчетныхДС;
	
	// Измерения
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник.ОсновноеНазначение) Тогда
		Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник.ОсновноеНазначение;
		Движение.Назначение						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Иначе	
		Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.Назначение						= ВыборкаПоСтрокамДокумента.Сотрудник;
	КонецЕсли;	
	Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;

	// Ресурсы
	Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;

	// Реквизиты
	Движение.Показатель1					= ВыборкаПоСтрокамДокумента.Результат;
	Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;

КонецПроцедуры // ДобавитьСтрокуДопНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для УдержанияРаботниковОрганизации 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуУдержаний(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.БазовыйПериодНачало		= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.БазовыйПериодКонец			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ВидРасчета					= ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеПодотчетныхДС;

	// Измерения
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник.ОсновноеНазначение) тогда
		Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник.ОсновноеНазначение;
	Иначе
		Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
	КонецЕсли;	
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;

	// Реквизиты
	Движение.Размер						= ВыборкаПоСтрокамДокумента.Результат;

КонецПроцедуры // ДобавитьСтрокуУдержаний

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",         Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументПогашениеЗадолженности.Дата,
	|	ДокументПогашениеЗадолженности.ПериодРегистрации,
	|	ДокументПогашениеЗадолженности.Организация,
	|	ВЫБОР
	|		КОГДА ДокументПогашениеЗадолженности.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|		ТОГДА ДокументПогашениеЗадолженности.Организация
	|		ИНАЧЕ ДокументПогашениеЗадолженности.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ДокументПогашениеЗадолженности.Организация КАК ОбособленноеПодразделение,
	|	ДокументПогашениеЗадолженности.Ссылка
	|ИЗ
	|	Документ.ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете КАК ДокументПогашениеЗадолженности
	|
	|ГДЕ
	|	ДокументПогашениеЗадолженности.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	Запрос.УстановитьПараметр("НачалоПериодаРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаРегистрации",			?(Дата > КонецМесяца(ПериодРегистрации),КонецМесяца(ПериодРегистрации),?(Дата < ПериодРегистрации,ПериодРегистрации,Дата)));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Принят",						Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("Уволен",						Перечисления.ПричиныИзмененияСостояния.Увольнение);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Сотрудник КАК Сотрудник,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Результат КАК Результат,
	|	СтрокиНачисления.Физлицо КАК Физлицо,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоРегистрации.ПричинаИзмененияСостояния = &Уволен
	|			ТОГДА ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.Период, ДЕНЬ, -1) < &НачалоПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.Период, ДЕНЬ, -1)
	|				КОНЕЦ
	|		КОГДА ДанныеПоРаботникуПослеРегистрации.ПричинаИзмененияСостояния = &Принят
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеПоРаботникуПослеРегистрации.Период > &КонецПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ДанныеПоРаботникуПослеРегистрации.Период
	|				КОНЕЦ
	|		ИНАЧЕ &ДатаРегистрации
	|	КОНЕЦ КАК ДатаРегистрации
	|ИЗ
	|	Документ.ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Начисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&ДатаРегистрации,
	|		Организация = &ГоловнаяОрганизация
	|		    И Сотрудник В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Сотрудник
	|		        ИЗ
	|		            Документ.ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Начисления КАК ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете
	|		        ГДЕ
	|		            ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Ссылка = &ДокументСсылка)) КАК ДанныеПоРаботникуДоРегистрации
	|		ПО ДанныеПоРаботникуДоРегистрации.Сотрудник = СтрокиНачисления.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПервых(
	|		&ДатаРегистрации,
	|		Организация = &ГоловнаяОрганизация
	|		    И Сотрудник В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Сотрудник
	|		        ИЗ
	|		            Документ.ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Начисления КАК ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете
	|		        ГДЕ
	|		            ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Ссылка = &ДокументСсылка)) КАК ДанныеПоРаботникуПослеРегистрации
	|		ПО ДанныеПоРаботникуПослеРегистрации.Сотрудник = СтрокиНачисления.Сотрудник
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "Удержания" документа
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоУдержания()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|	СтрокиУдержания.Сотрудник КАК Сотрудник,
	|	СтрокиУдержания.Сотрудник.Физлицо КАК ФизЛицо,
	|	СтрокиУдержания.Результат КАК Результат
	|ИЗ
	|	Документ.ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Удержания КАК СтрокиУдержания
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой выполняются начисления!", Отказ, Заголовок);
	КонецЕсли;

	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан месяц, в котором выполняются начисления!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - набор записей 
//
// Возвращаемое значение:
//  Нет.
//		
Процедура СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, НаборЗаписей)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доходы.Сотрудник,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗплНачисления.Сотрудник   КАК Сотрудник,
	|		ЗплНачисления.Результат КАК СуммаДохода
	|	ИЗ
	|		Документ.ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Начисления КАК ЗплНачисления
	|
	|	ГДЕ
	|		ЗплНачисления.Ссылка = &ДокументСсылка И
	|		(ЗплНачисления.Результат <> 0)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗплУдержания.Сотрудник,
	|		-(ЗплУдержания.Результат)
	|	ИЗ
	|		Документ.ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Удержания КАК ЗплУдержания
	|
	|	ГДЕ
	|		ЗплУдержания.Ссылка = &ДокументСсылка И
	|		(ЗплУдержания.Результат <> 0)) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Сотрудник";

	Доходы = Запрос.Выполнить().Выбрать();

	// Cформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();

		// свойства
		Движение.Период               = КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.ВидДвижения          = ВидДвиженияНакопления.Приход;

		// измерения 
		Движение.Сотрудник            = Доходы.Сотрудник;
		Движение.Организация          = ВыборкаПоШапкеДокумента.Организация;
		Движение.ПериодВзаиморасчетов = ПериодРегистрации;
        Движение.СчетУчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.КомпенсацияПодотчетныхДС.СчетУчета;
		
		// ресурсы
		Движение.СуммаВзаиморасчетов  = Доходы.СуммаДохода;
		
		Если Доходы.СуммаДохода > 0 Тогда
			Движение.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления;
		Иначе	
			Движение.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Удержания;
		КонецЕсли;	

	КонецЦикла;

КонецПроцедуры // СформироватьВзаиморасчетыСРаботниками

// Формирует таблицу значений по табличным части дркумента "Начисления"
//
// Параметры: 
//  КурсВалютыУпрУчета      - курс валюты упр. учета,
//  КратностьВалютыУпрУчета - кратность валюты упр. учета.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьТаблицуНачисленийУпр(КурсВалютыУпрУчета, КратностьВалютыУпрУчета)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Курс",           КурсВалютыУпрУчета);
	Запрос.УстановитьПараметр("Кратность",      КратностьВалютыУпрУчета);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтрокиНачисления.РасчетныйДокумент.Организация КАК Организация,
	|	СтрокиНачисления.Физлицо              КАК ФизЛицо,
	|	(СтрокиНачисления.СуммаВзаиморасчетов * СтрокиНачисления.КурсВзаиморасчетов * &Кратность) / (&Курс * СтрокиНачисления.КратностьВзаиморасчетов) КАК СуммаУпр,
	|	СтрокиНачисления.РасчетныйДокумент    КАК РасчетныйДокумент,
	|	СтрокиНачисления.ВалютаВзаиморасчетов КАК Валюта,
	|	СтрокиНачисления.СуммаВзаиморасчетов  КАК СуммаВзаиморасчетов
	|
	|ИЗ
	|	Документ.ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Начисления КАК СтрокиНачисления
	|
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // СформироватьТаблицуНачисленийУпр()

// Формирует таблицу значений по табличным части документа "Удержания"
//
// Параметры: 
//  КурсВалютыУпрУчета      - курс валюты упр. учета,
//  КратностьВалютыУпрУчета - кратность валюты упр. учета.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьТаблицуУдержанийУпр(КурсВалютыУпрУчета, КратностьВалютыУпрУчета)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Курс",           КурсВалютыУпрУчета);
	Запрос.УстановитьПараметр("Кратность",      КратностьВалютыУпрУчета);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтрокиУдержания.РасчетныйДокумент.Организация КАК Организация,
	|	СтрокиУдержания.Физлицо              КАК ФизЛицо,
	|	(СтрокиУдержания.СуммаВзаиморасчетов * СтрокиУдержания.КурсВзаиморасчетов * &Кратность) / (&Курс * СтрокиУдержания.КратностьВзаиморасчетов) КАК СуммаУпр,
	|	СтрокиУдержания.РасчетныйДокумент    КАК РасчетныйДокумент,
	|	СтрокиУдержания.ВалютаВзаиморасчетов КАК Валюта,
	|	СтрокиУдержания.СуммаВзаиморасчетов  КАК СуммаВзаиморасчетов
	|
	|ИЗ
	|	Документ.ПогашениеЗадолженностиПодотчетныхЛицВРегламентированномУчете.Удержания КАК СтрокиУдержания
	|
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // СформироватьТаблицуУдержанийУпр()

// Добавляет движения в регистр "ВзаиморасчетыСПодотчетнымиЛицами"
// движения по взаиморасчетам с работниками
//
// Параметры: 
//	НаборЗаписей      - набор записей,
//	ТаблицаНачисления - таблица значений,
//	ТаблицаУдержания  - таблица значений
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьВзаиморасчетыСПодотчетнымиЛицами(НаборЗаписей)

	СтруктураКурса          = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Дата);
	КурсВалютыУпрУчета      = СтруктураКурса.Курс;
	КратностьВалютыУпрУчета = СтруктураКурса.Кратность;

	// Взаиморасчеты с подотчетными лицами
	ТаблицаНачисления = СформироватьТаблицуНачисленийУпр(КурсВалютыУпрУчета, КратностьВалютыУпрУчета);
	ТаблицаУдержания  = СформироватьТаблицуУдержанийУпр( КурсВалютыУпрУчета, КратностьВалютыУпрУчета);

	ТаблицаДвижений = НаборЗаписей.Выгрузить();

	ТаблицаДвижений.Очистить();

	ТаблицаДвиженийНачисления = ТаблицаДвижений.Скопировать();
	ТаблицаДвиженийУдержания  = ТаблицаДвижений.Скопировать();

	// Начисления
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНачисления, ТаблицаДвиженийНачисления);

	НаборЗаписей.мПериод          = Дата;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвиженийНачисления;

	Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьПриход();

	// Удержания
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУдержания, ТаблицаДвиженийУдержания);

	НаборЗаписей.мПериод          = Дата;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвиженийУдержания;

	Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьРасход();

КонецПроцедуры // ДобавитьВзаиморасчетыСПодотчетнымиЛицами()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, Режим)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Проверим заполнение табличной части "Начисления" и "Удержания"
		СтруктураОбязательныхПолей = Новый Структура("Сотрудник, ПодразделениеОрганизации, РасчетныйДокумент, ВалютаВзаиморасчетов, СуммаВзаиморасчетов");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Начисления", СтруктураОбязательныхПолей, Отказ, Заголовок);
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Удержания",  СтруктураОбязательныхПолей, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Начисления
			//
			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();
			
			// Заполним записи в наборах записей регистров
			Пока ВыборкаПоНачислениям.Следующий() Цикл 
				ДобавитьСтрокуНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.ОсновныеНачисленияРаботниковОрганизаций, УчетнаяПолитикаПоПерсоналуОрганизации);
			КонецЦикла;

			// Удержания
			//
			// получим реквизиты табличной части
			ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания().Выбрать();

			// Заполним записи в наборах записей регистров
			Пока ВыборкаПоУдержаниям.Следующий() Цикл 
				ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, Движения.УдержанияРаботниковОрганизаций);
			КонецЦикла;

			// Взаиморасчеты с работниками
			//
			// сформируем начисления к выплате по начислениям документа
			СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций);

			// Сформируем движения по взаиморасчетам с подотчетными лицами
			ДобавитьВзаиморасчетыСПодотчетнымиЛицами(Движения.ВзаиморасчетыСПодотчетнымиЛицами);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения"
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");
