Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ


// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета = "ОС.Стоимость, ОС.Амортизация, ОС.АмортизацияЗаМесяц, ОС.ОстСтоимость";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета = "СобытиеРегл, ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ";	
	мСтрокаРеквизитыНалУчета = "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда
		
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
		// Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
 	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС,ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДока = Дата;

	СобытиеОС          		= Движения.СобытияОС;
	АмортизацияОС       	= Движения.СтоимостьОС;
	НачислениеАмортизацииОС = Движения.НачислениеАмортизацииОС;
	НазваниеДокумента       = Метаданные().Представление();

	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		// Движения по регистру НачислениеАмортизацииОС
		Движение = НачислениеАмортизацииОС.Добавить();
		Движение.Период                  = ДатаДока;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.НачислятьАмортизацию    = Ложь;
		Движение.НачислятьАмортизациюВТекущемМесяце = Ложь;

		// Движения по регистру СостояниеОсновногоСредства
		Движение = СобытиеОС.Добавить();
		Движение.Период                  = ДатаДока;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.Событие                 = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента       = НазваниеДокумента;
		Движение.НомерДокумента          = Номер;

		// Движения по регистру СтоимостьОС
		Если СтрокаТЧ.АмортизацияЗаМесяц <> 0 Тогда
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			Движение.ОсновноеСредство        = ТекОС;
			Движение.Амортизация             = СтрокаТЧ.АмортизацияЗаМесяц;
			Движение.Стоимость               = 0;
		КонецЕсли;	

	КонецЦикла;

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьПриход();

	// подготовим таблицу с данными по амортизации для списания амортизации по 
	// направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Амортизация",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
	ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	
	Для каждого СтрокаОС из ТаблицаПоОС Цикл
		
		Если СтрокаОС.АмортизацияЗаМесяц>0 Тогда
			
			ТекМестонахождение = Неопределено;
			Если ТаблицаМестонахождений <> Неопределено Тогда
				
				//Затраты списываются по способу отражения расходов по амортзации
				ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");
				ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_УУ);
				                                          
			КонецЕсли;
			
			НоваяСтрока                        = ТабАмортизации.Добавить();
			НоваяСтрока.Амортизация            = СтрокаОС.АмортизацияЗаМесяц;
			НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
			ТекНаправление                     = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");
			НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_УУ);
			НоваяСтрока.Местонахождение 		= ТекМестонахождение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// вызов процедуры списания амортизации по направлениям
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС,ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		Возврат;
	КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	//Получение данных о видах налоговой деятельности, к которым принадлежат ОС
	УправлениеВнеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(МоментВремени(), ТекОрганизация, ТаблицаПоОС,
	                                                  СтруктураШапкиДокумента,
													  Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 

		СобытиеОС               = Движения.СобытияОСОрганизаций;
		АмортизацияОС           = Движения.СтоимостьОСБухгалтерскийУчет;
		НачислениеАмортизацииОС = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
		НачислениеАмортизацииОСНУ = Движения.НачислениеАмортизацииОСНалоговыйУчет;
		ПроводкиБУ              = Движения.Хозрасчетный;
		НазваниеДокумента       = Метаданные().Представление();

		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();

		// Подготовка таблицы с данными по амортизации для списания амортизации по 
		// направлениям затрат
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Амортизация",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("АмортизацияНУ",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("НалоговоеНазначение", 		Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
		
		//Списание амортизации на затраты		
		Для каждого СтрокаОС из ТаблицаПоОС Цикл
			
			Если СтрокаОС.АмортизацияЗаМесяцБУ > 0 ИЛИ СтрокаОС.АмортизацияЗаМесяцНУ > 0 Тогда
				
				ТекМестонахождение = Неопределено;
				Если ТаблицаМестонахождений <> Неопределено Тогда
					
					//Затраты списываются по способу отражения расходов по амортзации
					ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
					ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_БУ);
					                                          
				КонецЕсли;
				
				НоваяСтрока = ТабАмортизации.Добавить();
				НоваяСтрока.Амортизация = СтрокаОС.АмортизацияЗаМесяцБУ;
				НоваяСтрока.АмортизацияНУ = СтрокаОС.АмортизацияЗаМесяцНУ;
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
				НоваяСтрока.НалоговоеНазначение 	= СтрокаОС.НалоговоеНазначение_ОС;
				
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_БУ);
				НоваяСтрока.СчетАмортизации = СтрокаОС.СчетНачисленияАмортизацииБУ;
				НоваяСтрока.Местонахождение 		= ТекМестонахождение;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//вызов процедуры списания амортизации по направлениям
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"ОС");
		
		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

			СчетПродажаОС = СтрокаТЧ.СчетПродажиОС;
 		
			Если НЕ (СтрокаТЧ.СтоимостьБУ = 0) Тогда
				ТекОС = СтрокаТЧ.ОсновноеСредство;

				// Движения по регистру НачислениеАмортизацииОСБухгалтерскийУчет
				Движение = НачислениеАмортизацииОС.Добавить();
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.НачислятьАмортизацию = Ложь;

				// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
				Движение = НачислениеАмортизацииОСНУ.Добавить();
				Движение.Период               = Дата;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.НачислятьАмортизацию = Ложь;
				
				// Движения по регистру СобытиеОС
				Движение = СобытиеОС.Добавить();
				Движение.Период               = ДатаДока;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
				Движение.НомерДокумента       = Номер;
				Движение.НазваниеДокумента    = НазваниеДокумента;

				// Движения по регистру СтоимостьОС
				Если СтрокаТЧ.АмортизацияЗаМесяцБУ <> 0 И СтрокаТЧ.АмортизацияЗаМесяцНУ <> 0 Тогда
					Движение = ТаблицаДвиженийАмортизация.Добавить();
					Движение.ОсновноеСредство      = ТекОС;
					Движение.Организация           = ТекОрганизация;
					Движение.Амортизация           = СтрокаТЧ.АмортизацияЗаМесяцБУ;
					Движение.Стоимость             = 0;
					Движение.АмортизацияНУ         = СтрокаТЧ.АмортизацияЗаМесяцНУ;
					Движение.СтоимостьНУ           = 0;
					Движение.ВидОперации           = Перечисления.ВидыСобытийОС.ПодготовкаКПередаче;
				КонецЕсли;	

				СчетУчетаСтоимости = СтрокаТЧ.СчетУчетаБУ;
				СчетУчетаАмортизации = СтрокаТЧ.СчетНачисленияАмортизацииБУ;

				// списание амортизации Д СчетУчетаАмортизации К ПродажаОС
				СуммаПроводки 	= СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
				СуммаПроводкиНУ = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
				
				Если СуммаПроводки<>0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = Дата;
					Проводка.Активность  = Истина;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Списана амортизация";
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма       = СуммаПроводки;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
						Проводка.СуммаНУДт = СуммаПроводкиНУ;
						
					КонецЕсли;
					
					Проводка.СчетДт = СчетУчетаАмортизации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
						Проводка.СуммаНУКт = СуммаПроводкиНУ;
						
					КонецЕсли;
					
					Проводка.СчетКт = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
				КонецЕсли;
				
				// списание остаточной стоимости Д ПродажаОС К СчетУчетаСтоимости
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
				
				Если СуммаПроводки <> 0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = Дата;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Списана ост. стоимость";
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма       = СуммаПроводки;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
						Проводка.СуммаНУДт = СтрокаТЧ.ОстСтоимостьНУ;
						
					КонецЕсли;
					
					Проводка.СчетДт = СчетПродажаОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
						Проводка.СуммаНУКт = СтрокаТЧ.ОстСтоимостьНУ;
						
					КонецЕсли;
					
					Проводка.СчетКт = СчетУчетаСтоимости;
					Если СчетУчетаСтоимости.Количественный Тогда
						
						Проводка.КоличествоКт = 1;
						
					КонецЕсли;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
				КонецЕсли;
				
			КонецЕсли;	
				
		КонецЦикла;

		АмортизацияОС.мПериод          = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();

	КонецЕсли;

	//При распределении амортизации производилась промежуточная запись проводок.
	//Необходимо записать проводки с сохранением предыдущих движений.
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и не Отказ Тогда
		
		Движения.Хозрасчетный.Записать(Ложь);
		
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)
	
	СтруктураПолей = Новый Структура;
	
	Возврат СтруктураПолей;
	
КонецФункции // СтруктураОбязательныхПолейОплата()


// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ОсновноеСредство");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Стоимость");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("СтоимостьБУ");
	СтруктураПолей.Вставить("СчетПродажиОС");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТЧ


// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	ПроверитьЗаполнениеТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Событие");

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);


	ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового (в общем регламентного) учета
Процедура ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("СобытиеРегл");

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
 	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство",     "ОсновноеСредство");
	СтруктураПолей.Вставить("Стоимость",            "Стоимость");
	СтруктураПолей.Вставить("Амортизация",          "Амортизация");
	СтруктураПолей.Вставить("АмортизацияЗаМесяц",   "АмортизацияЗаМесяц");
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СтоимостьБУ",          "СтоимостьБУ");
		СтруктураПолей.Вставить("АмортизацияБУ",        "АмортизацияБУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ", "АмортизацияЗаМесяцБУ");
		
		СтруктураПолей.Вставить("СчетПродажиОС", 		"СчетПродажиОС");
		
		СтруктураПолей.Вставить("СтоимостьНУ",          "СтоимостьНУ");
		СтруктураПолей.Вставить("АмортизацияНУ",        "АмортизацияНУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ", "АмортизацияЗаМесяцНУ");
		
		СтруктураСложныхПолей.Вставить("ОстСтоимостьНУ"    	, "СтоимостьНУ - АмортизацияНУ - АмортизацияЗаМесяцНУ");
		
	КонецЕсли;
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей,, СтруктураСложныхПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;

	// подготовка таблицы для списания
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",       Дата);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                                                         КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство                      КАК ОС_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                                       КАК ОС_УУ,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                  КАК Направление_УУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство";
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();

	Упр  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бухг = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      МоментВремени());
	Запрос.УстановитьПараметр("СписокОС",       ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
					|	МестонахождениеОСУУ.ОсновноеСредство 	КАК ОС_УУ,
					|	МестонахождениеОСУУ.Местонахождение 	КАК Местонахождение_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
					|	МестонахождениеОСБУ.ОсновноеСредство 	КАК ОС_БУ,
					|	МестонахождениеОСБУ.Местонахождение 	КАК Местонахождение_БУ", "") + "
					|ИЗ" + ?(Упр,"
					|	РегистрСведений.МестонахождениеОС.СрезПоследних(
					|		            &ТекПериод,
					|		            ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОСУУ", "") + ?(Упр и Бухг,"
					|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг," 
					|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
					|			                &ТекПериод, 
					|			                ОсновноеСредство В (&СписокОС)
					|		                    И Организация = &ТекОрганизация) КАК МестонахождениеОСБУ", "") + ?(Упр и Бухг,"
					|		ПО МестонахождениеОСУУ.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство", "");
	ТаблицаМестонахождений = Запрос.Выполнить().Выгрузить();
	
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

