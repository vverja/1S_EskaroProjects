Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 
		
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
			
	КонецЕсли;
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
	СтруктПечатныхФорм = Новый Структура;
	Возврат СтруктПечатныхФорм;
		
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли
	
Процедура ОпределитьПодтвержденныеСуммы(СтрокаТЧ) Экспорт

	Если  СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит 
	   ИЛИ СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства
   	   ИЛИ СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать Тогда
		// признаем ту сумму, которая была показана по факту использования
		СтрокаТЧ.НДСКредитПодтвержденный = СтрокаТЧ.НДСКредитПоФакту;
	Иначе
		// НЕ признаем ту сумму, которая была показана по факту использования
		// берем ту сумму, которая была первоначально
		СтрокаТЧ.НДСКредитПодтвержденный = СтрокаТЧ.НДСКредит;
	КонецЕсли; 

КонецПроцедуры

Процедура ЗаполнитьМетодКорректировкиПоУмолчанию(СтрокаТЧ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначение) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначениеПоФакту) Тогда 
		МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать;
	КонецЕсли; 
	
	НалоговыйКредитВход  = НалоговыйУчетПовтИсп.ЕстьПравоНаНалоговыйКредит(СтрокаТЧ.НалоговоеНазначение);
	НалоговыйКредитВыход = НалоговыйУчетПовтИсп.ЕстьПравоНаНалоговыйКредит(СтрокаТЧ.НалоговоеНазначениеПоФакту);
	
	Если НалоговыйКредитВход = НалоговыйКредитВыход Тогда
		МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать;
	ИначеЕсли НалоговыйКредитВход И НЕ НалоговыйКредитВыход Тогда
		МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства;
	Иначе
		МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит;
	КонецЕсли;
	
	Если СтрокаТЧ.МетодКорректировкиНалоговогоКредита <> МетодКорректировкиНалоговогоКредита Тогда
		СтрокаТЧ.МетодКорректировкиНалоговогоКредита = МетодКорректировкиНалоговогоКредита;
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаполнитьПартииТоваровПоОстаткам() Экспорт
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорректировкиНалоговыйУчетОстатки.Номенклатура,
				   |	КорректировкиНалоговыйУчетОстатки.ХарактеристикаНоменклатуры,
				   |	КорректировкиНалоговыйУчетОстатки.ДокументОприходования,
	               |	КорректировкиНалоговыйУчетОстатки.НалоговоеНазначение,
	               |	КорректировкиНалоговыйУчетОстатки.НалоговоеНазначениеПоФакту,
				   |	КорректировкиНалоговыйУчетОстатки.КоличествоОстаток,
				   |	КорректировкиНалоговыйУчетОстатки.НДСКредитОстаток,
	               |	КорректировкиНалоговыйУчетОстатки.НДСКредитПоФактуОстаток
	               |ИЗ
	               |	РегистрНакопления.КорректировкиПартииТоваровНалоговыйУчет.Остатки(&МоментДок,Организация = &Организация) КАК КорректировкиНалоговыйУчетОстатки";
				   
	Запрос.УстановитьПараметр("МоментДок", Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = ПартииТоваров.Добавить();
		
		Строка.Номенклатура 						    = Выборка.Номенклатура;
		Строка.ДокументОприходования 					= Выборка.ДокументОприходования;
		
		Строка.ХарактеристикаНоменклатуры 				= Выборка.ХарактеристикаНоменклатуры;
		Строка.Количество			 					= Выборка.КоличествоОстаток;
		
		Строка.НалоговоеНазначение  					= Выборка.НалоговоеНазначение;
		Строка.НалоговоеНазначениеПоФакту				= Выборка.НалоговоеНазначениеПоФакту;
		Строка.НалоговоеНазначениеПоФактуРекомендуемый	= Выборка.НалоговоеНазначениеПоФакту;
		
		Строка.НДСКредит								= Выборка.НДСКредитОстаток;
		
		Строка.НДСКредитПоФакту							= Выборка.НДСКредитПоФактуОстаток;
		Строка.НДСКредитПоФактуРекомендуемый 			= Выборка.НДСКредитПоФактуОстаток;
		
		ЗаполнитьМетодКорректировкиПоУмолчанию(Строка);
		ОпределитьПодтвержденныеСуммы(Строка);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьСтроительствоОбъектовОсновныхСредствПоОстаткам() Экспорт
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорректировкиНалоговыйУчетОстатки.ОбъектСтроительства,
	               |	КорректировкиНалоговыйУчетОстатки.НалоговоеНазначение,
	               |	КорректировкиНалоговыйУчетОстатки.НалоговоеНазначениеПоФакту,
	               |	КорректировкиНалоговыйУчетОстатки.НДСКредитОстаток,
	               |	КорректировкиНалоговыйУчетОстатки.НДСКредитПоФактуОстаток
	               |ИЗ
	               |	РегистрНакопления.КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет.Остатки(&МоментДок,Организация = &Организация) КАК КорректировкиНалоговыйУчетОстатки";
				   
	Запрос.УстановитьПараметр("МоментДок", Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = СтроительствоОбъектовОсновныхСредств.Добавить();
		
		Строка.ОбъектСтроительства 						= Выборка.ОбъектСтроительства;
		
		Строка.НалоговоеНазначение 						= Выборка.НалоговоеНазначение ;
		Строка.НалоговоеНазначениеПоФакту				= Выборка.НалоговоеНазначениеПоФакту;
		Строка.НалоговоеНазначениеПоФактуРекомендуемый 	= Выборка.НалоговоеНазначениеПоФакту;
		
		Строка.НДСКредит								= Выборка.НДСКредитОстаток;
		Строка.НДСКредитПоФакту							= Выборка.НДСКредитПоФактуОстаток;
		Строка.НДСКредитПоФактуРекомендуемый			= Выборка.НДСКредитПоФактуОстаток;
		
		ЗаполнитьМетодКорректировкиПоУмолчанию(Строка);

		ОпределитьПодтвержденныеСуммы(Строка);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьНезавершенноеПроизводствоПоОстаткам() Экспорт
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорректировкиНалоговыйУчетОстатки.СтатьяЗатрат,
	               |	КорректировкиНалоговыйУчетОстатки.Затрата,
	               |	КорректировкиНалоговыйУчетОстатки.НалоговоеНазначение,
	               |	КорректировкиНалоговыйУчетОстатки.НалоговоеНазначениеПоФакту,
	               |	КорректировкиНалоговыйУчетОстатки.НДСКредитОстаток,
	               |	КорректировкиНалоговыйУчетОстатки.НДСКредитПоФактуОстаток
	               |ИЗ
	               |	РегистрНакопления.КорректировкиНезавершенноеПроизводствоНалоговыйУчет.Остатки(&МоментДок,Организация = &Организация) КАК КорректировкиНалоговыйУчетОстатки";
				   
	Запрос.УстановитьПараметр("МоментДок", Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = НезавершенноеПроизводство.Добавить();
		
		Строка.СтатьяЗатрат 							= Выборка.СтатьяЗатрат;
		Строка.Затрата 									= Выборка.Затрата;
		
		Строка.НалоговоеНазначение  					= Выборка.НалоговоеНазначение ;
		Строка.НалоговоеНазначениеПоФакту				= Выборка.НалоговоеНазначениеПоФакту;
		Строка.НалоговоеНазначениеПоФактуРекомендуемый	= Выборка.НалоговоеНазначениеПоФакту;
		
		Строка.НДСКредит								= Выборка.НДСКредитОстаток;
		
		Строка.НДСКредитПоФакту							= Выборка.НДСКредитПоФактуОстаток;
		Строка.НДСКредитПоФактуРекомендуемый			= Выборка.НДСКредитПоФактуОстаток;
		
        ЗаполнитьМетодКорректировкиПоУмолчанию(Строка);
		
		ОпределитьПодтвержденныеСуммы(Строка);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьБракВПроизводствеПоОстаткам() Экспорт
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорректировкиНалоговыйУчетОстатки.СтатьяЗатрат,
	               |	КорректировкиНалоговыйУчетОстатки.НалоговоеНазначение,
	               |	КорректировкиНалоговыйУчетОстатки.НалоговоеНазначениеПоФакту,
	               |	КорректировкиНалоговыйУчетОстатки.НДСКредитОстаток,
	               |	КорректировкиНалоговыйУчетОстатки.НДСКредитПоФактуОстаток
	               |ИЗ
	               |	РегистрНакопления.КорректировкиБракВПроизводствеНалоговыйУчет.Остатки(&МоментДок,Организация = &Организация) КАК КорректировкиНалоговыйУчетОстатки";
				   
	Запрос.УстановитьПараметр("МоментДок", Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = БракВПроизводстве.Добавить();
		
		Строка.СтатьяЗатрат 							= Выборка.СтатьяЗатрат;
		
		Строка.НалоговоеНазначение 						= Выборка.НалоговоеНазначение;
		Строка.НалоговоеНазначениеПоФакту				= Выборка.НалоговоеНазначениеПоФакту;
		Строка.НалоговоеНазначениеПоФактуРекомендуемый	= Выборка.НалоговоеНазначениеПоФакту;
		
		Строка.НДСКредит								= Выборка.НДСКредитОстаток;
		
		Строка.НДСКредитПоФакту							= Выборка.НДСКредитПоФактуОстаток;
		Строка.НДСКредитПоФактуРекомендуемый			= Выборка.НДСКредитПоФактуОстаток;
		
		ЗаполнитьМетодКорректировкиПоУмолчанию(Строка);

		ОпределитьПодтвержденныеСуммы(Строка);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьЗатратыПоОстаткам() Экспорт
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорректировкиНалоговыйУчетОстатки.СтатьяЗатрат,
	               |	КорректировкиНалоговыйУчетОстатки.НалоговоеНазначение,
	               |	КорректировкиНалоговыйУчетОстатки.НалоговоеНазначениеПоФакту,
	               |	КорректировкиНалоговыйУчетОстатки.НДСКредитОстаток,
	               |	КорректировкиНалоговыйУчетОстатки.НДСКредитПоФактуОстаток
	               |ИЗ
	               |	РегистрНакопления.КорректировкиЗатратыНалоговыйУчет.Остатки(&МоментДок,Организация = &Организация) КАК КорректировкиНалоговыйУчетОстатки";
				   
	Запрос.УстановитьПараметр("МоментДок", Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Затраты.Добавить();
		
		Строка.СтатьяЗатрат 							= Выборка.СтатьяЗатрат;
		
		Строка.НалоговоеНазначение 						= Выборка.НалоговоеНазначение;
		Строка.НалоговоеНазначениеПоФакту				= Выборка.НалоговоеНазначениеПоФакту;
		Строка.НалоговоеНазначениеПоФактуРекомендуемый	= Выборка.НалоговоеНазначениеПоФакту;
		
		Строка.НДСКредит								= Выборка.НДСКредитОстаток;
		
		Строка.НДСКредитПоФакту							= Выборка.НДСКредитПоФактуОстаток;
		Строка.НДСКредитПоФактуРекомендуемый			= Выборка.НДСКредитПоФактуОстаток;
		
		ЗаполнитьМетодКорректировкиПоУмолчанию(Строка);
		
		ОпределитьПодтвержденныеСуммы(Строка);
		
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПартииТоваров(РезультатЗапросаПоПартиямТоваров, СтруктураШапкиДокумента)

	ТаблицаПартииТоваров = РезультатЗапросаПоПартиямТоваров.Выгрузить();
	
	ТаблицаПартииТоваров.Колонки.Добавить("СуммаКорректировкиНДС"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПартииТоваров.Колонки.Добавить("СуммаЗатратыДоходы"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПартииТоваров.Колонки.Добавить("СуммаОбязательствНДС"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПартииТоваров.Колонки.Добавить("БазаНДС"		  			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПартииТоваров.Колонки.Добавить("КодОперации"				);
		
	Для каждого СтрокаТаблицы Из ТаблицаПартииТоваров Цикл
		
		СтрокаТаблицы.СуммаКорректировкиНДС = СтрокаТаблицы.НДСКредитПодтвержденный	- СтрокаТаблицы.НДСКредит;
		
		СтрокаТаблицы.СуммаОбязательствНДС  = - СтрокаТаблицы.СуммаКорректировкиНДС;
		СтрокаТаблицы.БазаНДС  				= СтрокаТаблицы.НДСКредит*100/Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20);
		
		СтрокаТаблицы.СуммаЗатратыДоходы 	= СтрокаТаблицы.НДСКредитПоФакту 		- СтрокаТаблицы.НДСКредитПодтвержденный;
		
		Если СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит Тогда
			СтрокаТаблицы.КодОперации		 	= Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПризнаннаяКорректировкаНалоговогоКредита;
		ИначеЕсли СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства Тогда
			СтрокаТаблицы.КодОперации		 	= Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПризнаннаяКорректировкаНалоговогоКредита;
		Иначе
			СтрокаТаблицы.КодОперации		 	= Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ОтклоненнаяКорректировкаНалоговогоКредита;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТаблицаПартииТоваров;

КонецФункции // ПодготовитьТаблицуПартииТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуСтроительствоОбъектовОсновныхСредств(РезультатЗапросаПоСтроительствуОбъектовОсновныхСредств, СтруктураШапкиДокумента)

	ТаблицаСтроительствоОбъектовОсновныхСредств = РезультатЗапросаПоСтроительствуОбъектовОсновныхСредств.Выгрузить();
	
	ТаблицаСтроительствоОбъектовОсновныхСредств.Колонки.Добавить("СуммаКорректировкиНДС"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаСтроительствоОбъектовОсновныхСредств.Колонки.Добавить("СуммаОбязательствНДС"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаСтроительствоОбъектовОсновныхСредств.Колонки.Добавить("БазаНДС"		  			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаСтроительствоОбъектовОсновныхСредств.Колонки.Добавить("СуммаЗатратыДоходы"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаСтроительствоОбъектовОсновныхСредств.Колонки.Добавить("КодОперации"				);

	Для каждого СтрокаТаблицы Из ТаблицаСтроительствоОбъектовОсновныхСредств Цикл
		
		СтрокаТаблицы.СуммаКорректировкиНДС = СтрокаТаблицы.НДСКредитПодтвержденный - СтрокаТаблицы.НДСКредит;
		
		СтрокаТаблицы.СуммаОбязательствНДС  = - СтрокаТаблицы.СуммаКорректировкиНДС;
		СтрокаТаблицы.БазаНДС  				= СтрокаТаблицы.НДСКредит*100/Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20);
		
		СтрокаТаблицы.СуммаЗатратыДоходы 	= СтрокаТаблицы.НДСКредитПоФакту 		- СтрокаТаблицы.НДСКредитПодтвержденный;
		
		Если СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит Тогда
			СтрокаТаблицы.КодОперации		 	= Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПризнаннаяКорректировкаНалоговогоКредита;
		ИначеЕсли СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства Тогда
			СтрокаТаблицы.КодОперации		 	= Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПризнаннаяКорректировкаНалоговогоКредита;
		Иначе
			СтрокаТаблицы.КодОперации		 	= Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ОтклоненнаяКорректировкаНалоговогоКредита;
		КонецЕсли;

	КонецЦикла; 
	
	Возврат ТаблицаСтроительствоОбъектовОсновныхСредств;

КонецФункции // ПодготовитьТаблицуСтроительствоОбъектовОсновныхСредств()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По выбранной организации не ведется учет НДС!", Отказ, Заголовок);
	КонецЕсли; 
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,ПериодРегистрации,СчетУчетаКорректировкиНДСКредит,СчетУчетаНДС_НО,СчетУчетаДоходов");
	
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		
		СтруктураОбязательныхПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат");
			
		//проверим указание субконто для заполнения декларации по прибыли
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаДоходов) Тогда
			
			ЕстьСубконтоСтатьяЗатратДоходов = Ложь;
			Для НомСубконто = 1 По 3 Цикл
				Если СчетУчетаДоходов.ВидыСубконто.Количество() < НомСубконто Тогда
					Прервать;
				КонецЕсли;
				
				ВидСубконто = СчетУчетаДоходов.ВидыСубконто[НомСубконто-1].ВидСубконто;
				Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
					 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
					 ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
					ЕстьСубконтоСтатьяЗатратДоходов = Истина;
					Прервать;
				КонецЕсли;

			КонецЦикла;
			
			Если ЕстьСубконтоСтатьяЗатратДоходов Тогда
				СтруктураОбязательныхПолей.Вставить("ДоходыСубконто" + НомСубконто, НСТР("ru = 'Не заполнено значение субконто: '; uk = 'Не заповнене значення субконто: '") + ВидСубконто); 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеМетодКорректировкиНалоговогоКредитаВТабличнойЧасти(Таблица, ИмяТабличнойЧасти, Отказ, Заголовок)
	
	ПредставлениеТабличнойЧасти = Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	Для каждого СтрокаТЧ  Из Таблица Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
									   
		Если СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства Тогда
			Если СтрокаТЧ.СуммаКорректировкиНДС > 0 Тогда
				СтрокаСообщения = "Неверное значение метода корректировки налогового кредита (""Метод корректировки"")! 
								  |Нельзя выбирать метод ""Начислить обязательства"", если сумма корректировки налогового кредита положительна!";	
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		ИначеЕсли СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит Тогда
			Если СтрокаТЧ.СуммаКорректировкиНДС < 0 Тогда
				СтрокаСообщения = "Неверное значение метода корректировки налогового кредита (""Метод корректировки"")! 
								  |Нельзя выбирать метод ""Начислить кредит"", если сумма корректировки налогового кредита отрицательна!";	
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		ИначеЕсли СтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать Тогда 
			Если СтрокаТЧ.СуммаКорректировкиНДС < 0 Тогда
				СтрокаСообщения = "Неверное значение метода корректировки налогового кредита (""Метод корректировки"")! 
								  |Нельзя выбирать метод ""Не корректировать"", если сумма корректировки налогового кредита отрицательна!";	
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла; 

КонецПроцедуры 

// Проверяет правильность заполнения строк табличной части "ПартииТоваров".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПартиямТоваров - таблица значений, содержащая данные для проведения и проверки
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПартииТоваров(ТаблицаПоПартиямТоваров, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ПартииТоваров";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура,НалоговоеНазначение,
						|НалоговоеНазначениеПоФакту, МетодКорректировкиНалоговогоКредита");

	Если НЕ СтруктураШапкиДокумента.УчетПоСредней И НЕ СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда	
	
		СтруктураОбязательныхПолей.Вставить("ДокументОприходования");
	
	КонецЕсли;
	
	ПроверитьЗаполнениеМетодКорректировкиНалоговогоКредитаВТабличнойЧасти(ТаблицаПоПартиямТоваров, ИмяТабличнойЧасти, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПартииТоваров()

// Проверяет правильность заполнения строк табличной части "СтроительствоОбъектовОсновныхСредств".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСтроительствуОбъектовОсновныхСредств - таблица значений, содержащая данные для проведения и проверки
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСтроительствоОбъектовОсновныхСредств(ТаблицаПоСтроительствуОбъектовОсновныхСредств, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СтроительствоОбъектовОсновныхСредств";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектСтроительства,НалоговоеНазначение,
						|НалоговоеНазначениеПоФакту, МетодКорректировкиНалоговогоКредита");

						
	ПроверитьЗаполнениеМетодКорректировкиНалоговогоКредитаВТабличнойЧасти(ТаблицаПоСтроительствуОбъектовОсновныхСредств, ИмяТабличнойЧасти, Отказ, Заголовок);
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСтроительствоОбъектовОсновныхСредств()

// Проверяет правильность заполнения строк табличной части "НезавершенноеПроизводство".
//
// Параметры:
// Параметры: 
//  ТаблицаПоНезавершенномуПроизводству - таблица значений, содержащая данные для проведения и проверки
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиНезавершенноеПроизводство(ТаблицаПоНезавершенномуПроизводству, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "НезавершенноеПроизводство";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СтатьяЗатрат,НалоговоеНазначение,
						|НалоговоеНазначениеПоФакту,МетодКорректировкиНалоговогоКредита");

	ПроверитьЗаполнениеМетодКорректировкиНалоговогоКредитаВТабличнойЧасти(ТаблицаПоНезавершенномуПроизводству, ИмяТабличнойЧасти, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиНезавершенноеПроизводство()

// Проверяет правильность заполнения строк табличной части "БракВПроизводстве".
//
// Параметры:
// Параметры: 
//  ТаблицаПоБракуВПроизводстве - таблица значений, содержащая данные для проведения и проверки
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиБракВПроизводстве(ТаблицаПоБракуВПроизводстве, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "БракВПроизводстве";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СтатьяЗатрат,НалоговоеНазначение,
						|НалоговоеНазначениеПоФакту,МетодКорректировкиНалоговогоКредита");

	ПроверитьЗаполнениеМетодКорректировкиНалоговогоКредитаВТабличнойЧасти(ТаблицаПоБракуВПроизводстве, ИмяТабличнойЧасти, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиБракВПроизводстве()

// Проверяет правильность заполнения строк табличной части "Затраты".
//
// Параметры:
// Параметры: 
//  ТаблицаПоЗатратам - таблица значений, содержащая данные для проведения и проверки
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗатраты(ТаблицаПоЗатратам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Затраты";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СтатьяЗатрат,НалоговоеНазначение,
						|НалоговоеНазначениеПоФакту,МетодКорректировкиНалоговогоКредита");

	ПроверитьЗаполнениеМетодКорректировкиНалоговогоКредитаВТабличнойЧасти(ТаблицаПоЗатратам, ИмяТабличнойЧасти, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗатраты()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПартиямТоваров, ТаблицаПоСтроительствуОбъектовОсновныхСредств,
				ТаблицаПоНезавершенномуПроизводству, ТаблицаПоБракуВПроизводстве, ТаблицаПоЗатратам,  Отказ, Заголовок)
							  
	ДвиженияПоРегистрамПартииТоваров(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПоПартиямТоваров, Отказ, Заголовок);
							 
	ДвиженияПоРегистрамСтроительствоОбъектовОсновныхСредств(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоСтроительствуОбъектовОсновныхСредств, Отказ, Заголовок);
							  
	ДвиженияПоРегистрамНезавершенноеПроизводство(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПоНезавершенномуПроизводству, Отказ, Заголовок);
							  
	ДвиженияПоРегистрамБракВПроизводстве(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПоБракуВПроизводстве, Отказ, Заголовок);
							  
	ДвиженияПоРегистрамЗатраты(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПоЗатратам, Отказ, Заголовок);
							  
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамПартииТоваров(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоОбъектам, Отказ, Заголовок)
							  
	// по ТЧ "Партии товаров"
	// движения по регистру КорректировкиПартииТоваровНалоговыйУчет
	НаборДвижений = Движения.КорректировкиПартииТоваровНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийКорректировки = НаборДвижений.ВыгрузитьКолонки();
	
	ТабИмен = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен, "НалоговоеНазначениеПоФактуРекомендуемый", "НалоговоеНазначениеПоФакту");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен, "НДСКредитПоФактуРекомендуемый", "НДСКредитПоФакту");
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОбъектам, ТаблицаДвиженийКорректировки);
	
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен);
	
	ТаблицаДвиженийКорректировки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	НаборДвижений.мПериод            = КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации);
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвиженийКорректировки;

	Если Не Отказ Тогда
		Движения.КорректировкиПартииТоваровНалоговыйУчет.ВыполнитьРасход();
	КонецЕсли;
	
	// условная продажа
	ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОбъектам, Отказ, Заголовок);
	
	ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоОбъектам, Отказ, Заголовок);
							  
КонецПроцедуры

Процедура ДвиженияПоРегистрамСтроительствоОбъектовОсновныхСредств(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоОбъектам, Отказ, Заголовок)
							  
	// по ТЧ СтроительствоОбъектовОсновныхСредств
	// движения по регистру КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет
	НаборДвижений = Движения.КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийКорректировки = НаборДвижений.ВыгрузитьКолонки();
	
	ТабИмен = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен, "НалоговоеНазначениеПоФактуРекомендуемый", "НалоговоеНазначениеПоФакту");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен, "НДСКредитПоФактуРекомендуемый", "НДСКредитПоФакту");
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОбъектам, ТаблицаДвиженийКорректировки);
	
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен);
	
	ТаблицаДвиженийКорректировки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	НаборДвижений.мПериод            = КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации);
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвиженийКорректировки;

	Если Не Отказ Тогда
		Движения.КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет.ВыполнитьРасход();
	КонецЕсли;
	
	// условная продажа
	ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОбъектам, Отказ, Заголовок);

	ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоОбъектам, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамНезавершенноеПроизводство(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоОбъектам, Отказ, Заголовок)
							  
	// по ТЧ НезавершенноеПроизводство
	// движения по регистру КорректировкиНезавершенноеПроизводствоНалоговыйУчет
	НаборДвижений = Движения.КорректировкиНезавершенноеПроизводствоНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийКорректировки = НаборДвижений.ВыгрузитьКолонки();
	
	ТабИмен = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен, "НалоговоеНазначениеПоФактуРекомендуемый", "НалоговоеНазначениеПоФакту");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен, "НДСКредитПоФактуРекомендуемый", "НДСКредитПоФакту");
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОбъектам, ТаблицаДвиженийКорректировки);
	
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен);
	
	ТаблицаДвиженийКорректировки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	НаборДвижений.мПериод            = КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации);
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвиженийКорректировки;

	Если Не Отказ Тогда
		Движения.КорректировкиНезавершенноеПроизводствоНалоговыйУчет.ВыполнитьРасход();
	КонецЕсли;
	
	// условная продажа
	ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОбъектам, Отказ, Заголовок);

	ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоОбъектам, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамБракВПроизводстве(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоОбъектам, Отказ, Заголовок)
							  
	// по ТЧ БракВПроизводстве
	// движения по регистру КорректировкиБракВПроизводствеНалоговыйУчет
	НаборДвижений = Движения.КорректировкиБракВПроизводствеНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийКорректировки = НаборДвижений.ВыгрузитьКолонки();
	
	ТабИмен = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен, "НалоговоеНазначениеПоФактуРекомендуемый", "НалоговоеНазначениеПоФакту");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен, "НДСКредитПоФактуРекомендуемый", "НДСКредитПоФакту");
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОбъектам, ТаблицаДвиженийКорректировки);
	
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен);
	
	ТаблицаДвиженийКорректировки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	НаборДвижений.мПериод            = КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации);
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвиженийКорректировки;

	Если Не Отказ Тогда
		Движения.КорректировкиБракВПроизводствеНалоговыйУчет.ВыполнитьРасход();
	КонецЕсли;
	
	// условная продажа
	ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОбъектам, Отказ, Заголовок);

	ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоОбъектам, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамЗатраты(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоОбъектам, Отказ, Заголовок)
							  
	// по ТЧ Затраты
	// движения по регистру КорректировкиЗатратыНалоговыйУчет
	НаборДвижений = Движения.КорректировкиЗатратыНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийКорректировки = НаборДвижений.ВыгрузитьКолонки();
	
	ТабИмен = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен, "НалоговоеНазначениеПоФактуРекомендуемый", "НалоговоеНазначениеПоФакту");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен, "НДСКредитПоФактуРекомендуемый", "НДСКредитПоФакту");

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОбъектам, ТаблицаДвиженийКорректировки);
	
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоОбъектам, ТабИмен);
	
	ТаблицаДвиженийКорректировки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	НаборДвижений.мПериод            = КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации);
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвиженийКорректировки;

	Если Не Отказ Тогда
		Движения.КорректировкиЗатратыНалоговыйУчет.ВыполнитьРасход();
	КонецЕсли;
	
	// условная продажа
	ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОбъектам, Отказ, Заголовок);

	ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоОбъектам, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоОбъектам, Отказ, Заголовок)
							  
	// для метода корректировки "На обязательства" отражаем в регистре ОжидаемыйИПодтвержденныйНДСПродаж, далее в книге продаж
	// отразится документом НалоговаяНакладная (Вид операции - Условная продажа)
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийНДСПродаж = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаКопия = ТаблицаПоОбъектам.Скопировать();
	
	// оставим только строки с методом корректировки "на обязательства" и ненулевой суммой обязательств
	Сч = 0;
	Пока Сч < ТаблицаКопия.Количество() Цикл
		Строка = ТаблицаКопия[Сч];
		Если  НЕ Строка.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства 
			 ИЛИ Строка.СуммаОбязательствНДС = 0 Тогда
			ТаблицаКопия.Удалить(Строка);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКопия.Колонки.СуммаОбязательствНДС.Имя 	= "СуммаНДС";
	
	ТаблицаКопия.Свернуть("НалоговоеНазначениеПоФакту","СуммаНДС, БазаНДС");
	
	ТаблицаКопия.Колонки.НалоговоеНазначениеПоФакту.Имя = "НалоговоеНазначение";
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийНДСПродаж);
	
	ТаблицаДвиженийНДСПродаж.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация			  , "Организация");
	ТаблицаДвиженийНДСПродаж.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НДС20					  , "СтавкаНДС");
	ТаблицаДвиженийНДСПродаж.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.УсловнаяПродажа, "СобытиеНДС");
	ТаблицаДвиженийНДСПродаж.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
	
	Если ТаблицаДвиженийНДСПродаж.Количество() > 0 Тогда
		
		НаборДвижений.мПериод            = КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации);
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвиженийНДСПродаж;

		Если Не Отказ Тогда
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли; 
							  
КонецПроцедуры

Процедура ПроводкиПоНДС(СтруктураШапкиДокумента, ТаблицаПоОбъектам, Отказ, Заголовок)
							  
	ПроводкиБУ = Движения.Хозрасчетный;	
	// Проводки по НДС
	
	// Суммы, которые идут на кредит
	ТаблицаКопия = ТаблицаПоОбъектам.Скопировать();

	ТаблицаКопия.Свернуть("МетодКорректировкиНалоговогоКредита","СуммаКорректировкиНДС,СуммаОбязательствНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаКопия Цикл

		Если СтрокаТаблицы.СуммаКорректировкиНДС = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства Тогда
			
			// условная продажа
			
			Проводка = ПроводкиБУ.Добавить();
		
			Проводка.Период                     = КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации);
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			
			Проводка.Сумма                      = СтрокаТаблицы.СуммаОбязательствНДС;
			
			Проводка.СчетДт						= СтруктураШапкиДокумента.СчетУчетаДоходов;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ДоходыСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ДоходыСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ДоходыСубконто3);
			
			Проводка.СчетКт						= СтруктураШапкиДокумента.СчетУчетаНДС_НО;
			
			Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
			Проводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.СуммаОбязательствНДС);
			
			Проводка.Содержание					= "Корректировка налогового кредита по НДС (условная продажа)";
			
		ИначеЕсли СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит Тогда
			
			// исправление ошибок
			// проводок здесь не делаем, закроет ЗаписьКнигиПриобретения с видом операции "Исправление ошибок"
		
		ИначеЕсли СтрокаТаблицы.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать Тогда
		
			// непризнанная корректировка - увеличиваем затраты 
				
			Проводка = ПроводкиБУ.Добавить();
		
			Проводка.Период                     = КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации);
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
				
			Проводка.Сумма                      = СтрокаТаблицы.СуммаКорректировкиНДС;
				
			Проводка.СчетДт						= СтруктураШапкиДокумента.СчетУчетаДоходов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ДоходыСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ДоходыСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ДоходыСубконто3);
				
			Проводка.СчетКт						= СтруктураШапкиДокумента.СчетУчетаКорректировкиНДСКредит;
			
			Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
			Проводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.СуммаКорректировкиНДС);
				
			Проводка.Содержание					= "Отнесение корректировок НДС на затраты";
		
		
			
		КонецЕсли;
		
			
	КонецЦикла;
							  
КонецПроцедуры

// Процедура определяет параметры регл. учетной политики
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь вызовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(ПериодРегистрации), Организация,, Заголовок);
	СтруктураШапкиДокумента.Вставить("УчетПоСредней", УчетнаяПолитикаНУ.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней);
	
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ПартииТоваров".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("Номенклатура"                      , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"        , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ДокументОприходования"             , "ДокументОприходования");
	СтруктураПолей.Вставить("НалоговоеНазначение"               , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"                , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"          , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФакту"        , "НалоговоеНазначениеПоФакту");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФактуРекомендуемый", "НалоговоеНазначениеПоФактуРекомендуемый");
	СтруктураПолей.Вставить("ВидДеятельностиНДСПоФакту"         , "НалоговоеНазначениеПоФакту.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиПоФакту"	, "НалоговоеНазначениеПоФакту.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("МетодКорректировкиНалоговогоКредита", "МетодКорректировкиНалоговогоКредита");
	СтруктураПолей.Вставить("НДСКредит"                  		, "НДСКредит");
	СтруктураПолей.Вставить("НДСКредитПоФакту"					, "НДСКредитПоФакту");
	СтруктураПолей.Вставить("НДСКредитПоФактуРекомендуемый"		, "НДСКредитПоФактуРекомендуемый");
	СтруктураПолей.Вставить("НДСКредитПодтвержденный"			, "НДСКредитПодтвержденный");
	СтруктураПолей.Вставить("Количество"             			, "Количество");
	
	РезультатЗапросаПоПартиямТоваров = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПартииТоваров", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "СтроительствоОбъектовОсновныхСредств".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("ОбъектСтроительства"               , "ОбъектСтроительства");
	СтруктураПолей.Вставить("НалоговоеНазначение"               , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"          , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"               	, "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФакту"        , "НалоговоеНазначениеПоФакту");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФактуРекомендуемый", "НалоговоеНазначениеПоФактуРекомендуемый");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиПоФакту"   , "НалоговоеНазначениеПоФакту.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДСПоФакту"         , "НалоговоеНазначениеПоФакту.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("НДСКредит"               			, "НДСКредит");
	СтруктураПолей.Вставить("НДСКредитПоФакту"               	, "НДСКредитПоФакту");
	СтруктураПолей.Вставить("НДСКредитПоФактуРекомендуемый"		, "НДСКредитПоФактуРекомендуемый");
	СтруктураПолей.Вставить("МетодКорректировкиНалоговогоКредита", "МетодКорректировкиНалоговогоКредита");
	СтруктураПолей.Вставить("НДСКредитПодтвержденный"           , "НДСКредитПодтвержденный");
	
	РезультатЗапросаПоСтроительствуОбъектовОсновныхСредств  = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СтроительствоОбъектовОсновныхСредств", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "НезавершенноеПроизводство".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("СтатьяЗатрат"                      , "СтатьяЗатрат");
	СтруктураПолей.Вставить("Затрата"             				, "Затрата");
	СтруктураПолей.Вставить("НалоговоеНазначение"               , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"                , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"          , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФакту"        , "НалоговоеНазначениеПоФакту");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФактуРекомендуемый", "НалоговоеНазначениеПоФактуРекомендуемый");
	СтруктураПолей.Вставить("ВидДеятельностиНДСПоФакту"         , "НалоговоеНазначениеПоФакту.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиПоФакту"	, "НалоговоеНазначениеПоФакту.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("МетодКорректировкиНалоговогоКредита", "МетодКорректировкиНалоговогоКредита");
	СтруктураПолей.Вставить("НДСКредит"                  		, "НДСКредит");
	СтруктураПолей.Вставить("НДСКредитПоФакту"					, "НДСКредитПоФакту");
	СтруктураПолей.Вставить("НДСКредитПоФактуРекомендуемый"		, "НДСКредитПоФактуРекомендуемый");
	СтруктураПолей.Вставить("НДСКредитПодтвержденный"			, "НДСКредитПодтвержденный");
	
	РезультатЗапросаПоНезавершенномуПроизводству = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НезавершенноеПроизводство", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "БракВПроизводстве".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("СтатьяЗатрат"                      , "СтатьяЗатрат");
	СтруктураПолей.Вставить("НалоговоеНазначение"               , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"                , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"          , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФакту"        , "НалоговоеНазначениеПоФакту");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФактуРекомендуемый", "НалоговоеНазначениеПоФактуРекомендуемый");
	СтруктураПолей.Вставить("ВидДеятельностиНДСПоФакту"         , "НалоговоеНазначениеПоФакту.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиПоФакту"	, "НалоговоеНазначениеПоФакту.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("МетодКорректировкиНалоговогоКредита", "МетодКорректировкиНалоговогоКредита");
	СтруктураПолей.Вставить("НДСКредит"                  		, "НДСКредит");
	СтруктураПолей.Вставить("НДСКредитПоФакту"					, "НДСКредитПоФакту");
	СтруктураПолей.Вставить("НДСКредитПоФактуРекомендуемый"		, "НДСКредитПоФактуРекомендуемый");
	СтруктураПолей.Вставить("НДСКредитПодтвержденный"			, "НДСКредитПодтвержденный");
	
	РезультатЗапросаПоБракуВПроизводстве = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "БракВПроизводстве", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Затраты".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("СтатьяЗатрат"                      , "СтатьяЗатрат");
	СтруктураПолей.Вставить("НалоговоеНазначение"               , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"                , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"          , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФакту"        , "НалоговоеНазначениеПоФакту");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФактуРекомендуемый", "НалоговоеНазначениеПоФактуРекомендуемый");
	СтруктураПолей.Вставить("ВидДеятельностиНДСПоФакту"         , "НалоговоеНазначениеПоФакту.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиПоФакту"	, "НалоговоеНазначениеПоФакту.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("МетодКорректировкиНалоговогоКредита", "МетодКорректировкиНалоговогоКредита");
	СтруктураПолей.Вставить("НДСКредит"                  		, "НДСКредит");
	СтруктураПолей.Вставить("НДСКредитПоФакту"					, "НДСКредитПоФакту");
	СтруктураПолей.Вставить("НДСКредитПоФактуРекомендуемый"		, "НДСКредитПоФактуРекомендуемый");
	СтруктураПолей.Вставить("НДСКредитПодтвержденный"			, "НДСКредитПодтвержденный");
	
	РезультатЗапросаПоЗатратам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Затраты", СтруктураПолей);
	
	// Подготовим таблицы товаров для проведения.
	ТаблицаПоПартиямТоваров      					= ПодготовитьТаблицуПартииТоваров(РезультатЗапросаПоПартиямТоваров, СтруктураШапкиДокумента);
	ТаблицаПоСтроительствуОбъектовОсновныхСредств	= ПодготовитьТаблицуСтроительствоОбъектовОсновныхСредств(РезультатЗапросаПоСтроительствуОбъектовОсновныхСредств, СтруктураШапкиДокумента);
	ТаблицаПоНезавершенномуПроизводству				= ПодготовитьТаблицуПартииТоваров(РезультатЗапросаПоНезавершенномуПроизводству, СтруктураШапкиДокумента);
	ТаблицаПоБракуВПроизводстве						= ПодготовитьТаблицуПартииТоваров(РезультатЗапросаПоБракуВПроизводстве, СтруктураШапкиДокумента);
	ТаблицаПоЗатратам								= ПодготовитьТаблицуПартииТоваров(РезультатЗапросаПоЗатратам, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиПартииТоваров(ТаблицаПоПартиямТоваров, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиСтроительствоОбъектовОсновныхСредств(ТаблицаПоСтроительствуОбъектовОсновныхСредств, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиНезавершенноеПроизводство(ТаблицаПоНезавершенномуПроизводству, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиБракВПроизводстве(ТаблицаПоБракуВПроизводстве, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиЗатраты(ТаблицаПоЗатратам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПартиямТоваров, ТаблицаПоСтроительствуОбъектовОсновныхСредств,
					ТаблицаПоНезавершенномуПроизводству, ТаблицаПоБракуВПроизводстве, ТаблицаПоЗатратам,  Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
