Перем мВалютаРегламентированногоУчета Экспорт;
Перем мУдалятьДвижения;

//Определение периода движений документа
Перем ДатаДвижений;

Процедура ПересчитатьСуммы() Экспорт
	
	СрезНалогов = РегистрыСведений.ШкалаСтавокНалогов.ПолучитьПоследнее(Дата, Новый Структура("Налог",Справочники.Налоги.ПенсионныйВалюта));
	
	Если ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПокупкаВалюты Тогда
		СуммаПенсионный = СуммаГривневая*СрезНалогов.Ставка;
    	СуммаДокумента = СуммаГривневая + СуммаКомиссионные + СуммаПенсионный;
	Иначе	
	    СуммаПенсионный = 0;
		СуммаДокумента = СуммаГривневая - СуммаКомиссионные;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьПоЗаявке() Экспорт

	ЭтотОбъект.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
			
	ВидОперации = Заявка.ВидОперации;
	Организация = Заявка.Организация;
	Банк = Заявка.Банк;
	Валюта = Заявка.Валюта;
	СуммаВалютная = Заявка.СуммаВалютная;
	СуммаГривневая = Заявка.СуммаГривневая;

	СуммаКомиссионные = Заявка.СуммаГривневая*Заявка.Комиссионные/100;
	ПересчитатьСуммы();
	
КонецПроцедуры	


// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураКурсыВалют)
	
	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураКурсыВалют);
    ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураКурсыВалют);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураКурсыВалют)
	
	Если Не ОтраженоВОперУчете Тогда
		Возврат;
	КонецЕсли;	
	
	// По регистру "Денежные средства в пути"
	
	Если ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПокупкаВалюты Тогда
		
		СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураКурсыВалют.ВалютаРеглУчета,
				СтруктураКурсыВалют.ВалютаУпрУчета, 
				СтруктураКурсыВалют.ВалютаРеглУчетаКурс,
				СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
				СтруктураКурсыВалют.ВалютаРеглУчетаКратность,
				СтруктураКурсыВалют.ВалютаУпрУчетаКратность);
				
		СуммаВалютыУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВалютная, СтруктураКурсыВалют.Валюта,
				СтруктураКурсыВалют.ВалютаУпрУчета, 
				СтруктураКурсыВалют.ВалютаКурс,
				СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
				СтруктураКурсыВалют.ВалютаКратность,
				СтруктураКурсыВалют.ВалютаУпрУчетаКратность);		

		
		НаборДвижений   = Движения.ДенежныеСредстваВПути;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Банк     = Банк;
		СтрокаДвижений.Валюта   = СтруктураКурсыВалют.ВалютаРеглУчета;
		СтрокаДвижений.Сумма    = СуммаДокумента;
		СтрокаДвижений.СуммаУпр = СуммаУпр;
		
		НаборДвижений.мПериод              = ДатаДвижений;
		НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
		Движения.ДенежныеСредстваВПути.ВыполнитьРасход();	
		
		ТаблицаДвижений.Очистить();
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Банк     = Банк;
		СтрокаДвижений.Валюта   = СтруктураКурсыВалют.Валюта;
		СтрокаДвижений.Сумма    = СуммаВалютная;
		СтрокаДвижений.СуммаУпр = СуммаВалютыУпр;
		
		НаборДвижений.мПериод              = ДатаДвижений;
		НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
		Движения.ДенежныеСредстваВПути.ВыполнитьПриход();	
		
	Иначе //продажа валюты
		
		СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураКурсыВалют.ВалютаРеглУчета,
				СтруктураКурсыВалют.ВалютаУпрУчета, 
				СтруктураКурсыВалют.ВалютаРеглУчетаКурс,
				СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
				СтруктураКурсыВалют.ВалютаРеглУчетаКратность,
				СтруктураКурсыВалют.ВалютаУпрУчетаКратность);
				
		СуммаВалютыУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВалютная, СтруктураКурсыВалют.Валюта,
				СтруктураКурсыВалют.ВалютаУпрУчета, 
				СтруктураКурсыВалют.ВалютаКурс,
				СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
				СтруктураКурсыВалют.ВалютаКратность,
				СтруктураКурсыВалют.ВалютаУпрУчетаКратность);		

		НаборДвижений   = Движения.ДенежныеСредстваВПути;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Банк     = Банк;
		СтрокаДвижений.Валюта   = СтруктураКурсыВалют.Валюта;
		СтрокаДвижений.Сумма    = СуммаВалютная;
		СтрокаДвижений.СуммаУпр = СуммаВалютыУпр;
		
		НаборДвижений.мПериод              = ДатаДвижений;
		НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
		Движения.ДенежныеСредстваВПути.ВыполнитьРасход();			
				
		ТаблицаДвижений.Очистить();
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Банк     = Банк;
		СтрокаДвижений.Валюта   = СтруктураКурсыВалют.ВалютаРеглУчета;
		СтрокаДвижений.Сумма    = СуммаДокумента;
		СтрокаДвижений.СуммаУпр = СуммаУпр;
		
		НаборДвижений.мПериод              = ДатаДвижений;
		НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
		Движения.ДенежныеСредстваВПути.ВыполнитьПриход();	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураКурсыВалют)
	
	// Бухгалтерские проводки документа
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкиБУ	= Движения.Хозрасчетный;
	
	Если ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПокупкаВалюты Тогда
		
		ДанныеОВалютеРегл   = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
		ДанныеОВалюте		= МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, Дата);
		
		СуммаГривневаяНБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВалютная, Валюта, мВалютаРегламентированногоУчета,
													 ДанныеОВалюте.Курс, ДанныеОВалютеРегл.Курс, 
													 ДанныеОВалюте.Кратность, ДанныеОВалютеРегл.Кратность);
													 
		СуммаКР = СуммаГривневая - СуммаГривневаяНБУ;											 
		
		//1. Перебрасываем деньги между субсчетами "Деньги в пути"
		
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДвижений;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Покупка валюты";

		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Банк);
		
		Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Банк);
		
		Проводка.ВалютаДт        = Валюта;
		Проводка.ВалютнаяСуммаДт = СуммаВалютная;
		
		Проводка.Сумма  = СуммаГривневаяНБУ;
		
		//2. Комиссионные банка
		
		Если СуммаКомиссионные > 0 Тогда
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДвижений;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Комиссионные банка";

			Проводка.СчетДт      = СчетЗатратКомиссионные;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто1ЗатратКомиссионные);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Субконто2ЗатратКомиссионные);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто3ЗатратКомиссионные);

	        Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Банк);
			
			Проводка.Сумма  = СуммаКомиссионные;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
				Проводка.СуммаНУДт   = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеДоходовИЗатрат, СуммаКомиссионные);
				Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДоходовИЗатрат;
			КонецЕсли;
			
		КонецЕсли;	
		
		//3. Отчисление в пенсионный
		Если СуммаПенсионный <> 0 Тогда 
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДвижений;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Начисление сбора в ПФ";

			Проводка.СчетДт      = СчетЗатратПенсионный;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто1ЗатратПенсионный);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Субконто2ЗатратПенсионный);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто3ЗатратПенсионный);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
				Проводка.СуммаНУДт   = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеДоходовИЗатрат, СуммаПенсионный);
				Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДоходовИЗатрат;
			КонецЕсли;
			
        	Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Налоги", Справочники.Налоги.ПенсионныйВалюта);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиНалоговыхДеклараций", Справочники.СтатьиНалоговыхДеклараций.НП_Р2ПФВалют);

			Проводка.Сумма  = СуммаПенсионный;
		
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДвижений;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Уменьшение задолженности перед ПФ";

			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Налоги", Справочники.Налоги.ПенсионныйВалюта);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиНалоговыхДеклараций", Справочники.СтатьиНалоговыхДеклараций.НП_Р2ПФВалют);
		
        	Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Банк);
		
			Проводка.Сумма  = СуммаПенсионный;
			
		КонецЕсли;
		
		//4. Курсовая разница
		Если СуммаКР > 0 Тогда
			
			// уплатили больше, чем зачислили в качестве покрытия купленной валюты - расходы
		
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДвижений;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Расходы: разница курсов покупки и НБУ";

			Проводка.СчетДт      = СчетЗатратКурсоваяРазница;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто1ЗатратКурсоваяРазница);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Субконто2ЗатратКурсоваяРазница);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто3ЗатратКурсоваяРазница);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
				Проводка.СуммаНУДт   = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеДоходовИЗатрат, СуммаКР);
				Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДоходовИЗатрат;
			КонецЕсли;

            Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Банк);

			Проводка.Сумма  = СуммаКР;
			
		ИначеЕсли СуммаКР < 0 Тогда
			// уплатили меньше, чем зачислили в качестве покрытия купленной валюты - доходы
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДвижений;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Доходы: разница курсов покупки и НБУ";

	        Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Банк);

			Проводка.СчетКт      = СчетДоходовКурсоваяРазница;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто1ДоходовКурсоваяРазница);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто2ДоходовКурсоваяРазница);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто3ДоходовКурсоваяРазница);

			Проводка.Сумма  = -СуммаКР;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
				Проводка.СуммаНУКт   = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеДоходовИЗатрат, -СуммаКР);
				Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеДоходовИЗатрат;
			КонецЕсли;
			
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПродажаВалюты Тогда
		
		ДанныеОВалютеРегл   = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
		ДанныеОВалюте		= МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, Дата);
		
		СуммаГривневаяНБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВалютная, Валюта, мВалютаРегламентированногоУчета,
													 ДанныеОВалюте.Курс, ДанныеОВалютеРегл.Курс, 
													 ДанныеОВалюте.Кратность, ДанныеОВалютеРегл.Кратность);
		РеестрОстатков=РегистрыБухгалтерии.Хозрасчетный;

		СтруктураОтбора = Новый Структура("Счет",ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте);
		СтруктураОтбора.Вставить("Организация", Организация);
		СтруктураОтбора.Вставить("Валюта", Валюта);
		СтруктураОтбора.Вставить("Субконто1", Банк);
		
		Реквизиты = "Счет,Валюта,Субконто1";
				
		РеестрОстатков=РеестрОстатков.Остатки(ДатаДвижений,,СтруктураОтбора,Реквизиты,"Сумма,ВалютнаяСумма");
		КурсПоСреднему =0;
		Для каждого Стр из РеестрОстатков цикл
			ОстатокВалРегУчета = Стр.СуммаОстатокДт-Стр.СуммаОстатокКт;
			ОстатокИнаяВал = Стр.ВалютнаяСуммаОстатокДт-Стр.ВалютнаяСуммаОстатокКт;
			КурсПоСреднему = ОстатокВалРегУчета/ОстатокИнаяВал;
		КонецЦикла;
		
		СуммаКР = СуммаВалютная*КурсПоСреднему - СуммаГривневаяНБУ;
		СуммаКР = Окр(СуммаКР, 2);
		
		СуммаНУ = СуммаГривневая - СуммаГривневаяНБУ;
													 
		//1. Ожидаемое поступление гривен
		
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДвижений;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Продажа валюты";

		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Банк);
		
		Проводка.СчетКт      = СчетДоходовСебестоимость;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто1ДоходовСебестоимость);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто2ДоходовСебестоимость);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто3ДоходовСебестоимость);
		
		Проводка.Сумма  = СуммаГривневая;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
			Проводка.СуммаНУКт   = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеДоходовИЗатрат, ?(СуммаНУ>0,СуммаНУ,0));
			Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеДоходовИЗатрат;
		КонецЕсли;
		
		//2. Себестоимость валюты
		
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДвижений;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Продажа валюты: Себестоимость валюты";

		
		Проводка.СчетДт      = СчетЗатратСебестоимость;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто1ЗатратСебестоимость);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Субконто2ЗатратСебестоимость);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто3ЗатратСебестоимость);

        Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Банк);
		
		Проводка.ВалютаКт        = Валюта;
		Проводка.ВалютнаяСуммаКт = СуммаВалютная;

		Проводка.Сумма  = СуммаГривневаяНБУ;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
			Проводка.СуммаНУДт   = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеДоходовИЗатрат, ?(СуммаНУ<0,-СуммаНУ,0));
			Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДоходовИЗатрат;
		КонецЕсли;
		
		//3. Комиссионные банка
		
		Если СуммаКомиссионные > 0 Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДвижений;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Комиссионные банка";

			Проводка.СчетДт      = СчетЗатратКомиссионные;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто1ЗатратКомиссионные);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Субконто2ЗатратКомиссионные);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто3ЗатратКомиссионные);
			
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Банк);
			
			Проводка.Сумма  = СуммаКомиссионные;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
				Проводка.СуммаНУДт   = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеДоходовИЗатрат, СуммаКомиссионные);
				Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДоходовИЗатрат;
			КонецЕсли;
			
		КонецЕсли;	

		//4. Курсовая разница
		Если СуммаКР > 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДвижений;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Расходы: разница курсов покупки и НБУ";

			Проводка.СчетДт      = СчетЗатратКурсоваяРазница;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто1ЗатратКурсоваяРазница);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Субконто2ЗатратКурсоваяРазница);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто3ЗатратКурсоваяРазница);

	        Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Банк);
			Проводка.ВалютаКт        = Валюта;

			Проводка.Сумма  = СуммаКР;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
				Проводка.СуммаНУДт   = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеДоходовИЗатрат, СуммаКР);
				Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДоходовИЗатрат;
			КонецЕсли;
			
			
		ИначеЕсли СуммаКР < 0 Тогда
			
	
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДвижений;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Доходы: разница курсов покупки и НБУ";

	        Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Банк);
            Проводка.ВалютаДт        = Валюта;
			
			Проводка.СчетКт      = СчетДоходовКурсоваяРазница;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто1ДоходовКурсоваяРазница);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто2ДоходовКурсоваяРазница);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто3ДоходовКурсоваяРазница);

			Проводка.Сумма  = -СуммаКР;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И Проводка.СчетКт.НалоговыйУчет Тогда 
				Проводка.СуммаНУКт   = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеДоходовИЗатрат, -СуммаКР);
				Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеДоходовИЗатрат;
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция СформироватьСтруктуруКурсыВалютУпр()
	
	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",глЗначениеПеременной("ВалютаУправленческогоУчета").Код);
	СтруктураГруппаВалют.Вставить("Валюта",Валюта.Код);
	СтруктураГруппаВалют.Вставить("ВалютаРеглУчета",мВалютаРегламентированногоУчета.Код);
	
	СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,Дата);
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции

Функция СтруктураОбязательныхПолейШапки()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("Организация","Не указана организация!");
	СтруктураПолей.Вставить("Банк","Не указан уполномоченный банк!");
	СтруктураПолей.Вставить("Валюта","Не указана валюта документа!");

	Если ОтражатьВБухгалтерскомУчете Тогда
	
		НайденныйВидСубконто = СчетДоходовКурсоваяРазница.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов,"ВидСубконто");
		Если НЕ (НайденныйВидСубконто = Неопределено) Тогда
			СтруктураПолей.Вставить("Субконто"+НайденныйВидСубконто.НомерСтроки+"ДоходовКурсоваяРазница","Не указана Статья доходов по курсовой разнице!");
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПродажаВалюты Тогда
			
			НайденныйВидСубконто = СчетЗатратКурсоваяРазница.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,"ВидСубконто");
			Если НЕ (НайденныйВидСубконто = Неопределено) Тогда
				СтруктураПолей.Вставить("Субконто"+НайденныйВидСубконто.НомерСтроки+"ЗатратКурсоваяРазница","Не указана Статья затрат по курсовой разнице!");
			КонецЕсли;
			
			НайденныйВидСубконто = СчетЗатратКомиссионные.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,"ВидСубконто");
			Если НЕ (НайденныйВидСубконто = Неопределено) Тогда
				СтруктураПолей.Вставить("Субконто"+НайденныйВидСубконто.НомерСтроки+"ЗатратКомиссионные","Не указана Статья затрат (комиссионные)!");
			КонецЕсли;
			
			НайденныйВидСубконто = СчетЗатратСебестоимость.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,"ВидСубконто");
			Если НЕ (НайденныйВидСубконто = Неопределено) Тогда
				СтруктураПолей.Вставить("Субконто"+НайденныйВидСубконто.НомерСтроки+"ЗатратСебестоимость","Не указана Статья затрат (себестоимость)!");
			КонецЕсли;
			
			НайденныйВидСубконто = СчетДоходовСебестоимость.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов,"ВидСубконто");
			Если НЕ (НайденныйВидСубконто = Неопределено) Тогда
				СтруктураПолей.Вставить("Субконто"+НайденныйВидСубконто.НомерСтроки+"ДоходовСебестоимость","Не указана Статья доходов по себестоимости!");
			КонецЕсли;
		
		Иначе
			
			НайденныйВидСубконто = СчетЗатратКурсоваяРазница.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,"ВидСубконто");
			Если НЕ (НайденныйВидСубконто = Неопределено) Тогда
				СтруктураПолей.Вставить("Субконто"+НайденныйВидСубконто.НомерСтроки+"ЗатратКурсоваяРазница","Не указана Статья затрат по курсовой разнице!");
			КонецЕсли;
			
			НайденныйВидСубконто = СчетЗатратКомиссионные.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,"ВидСубконто");
			Если НЕ (НайденныйВидСубконто = Неопределено) Тогда
				СтруктураПолей.Вставить("Субконто"+НайденныйВидСубконто.НомерСтроки+"ЗатратКомиссионные","Не указана Статья затрат (комиссионные)!");
			КонецЕсли;
			
			НайденныйВидСубконто = СчетЗатратПенсионный.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,"ВидСубконто");
			Если НЕ (НайденныйВидСубконто = Неопределено) Тогда
				СтруктураПолей.Вставить("Субконто"+НайденныйВидСубконто.НомерСтроки+"ЗатратПенсионный","Не указана Статья затрат (пенсионный)!");
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат","Не указано налоговое назначение доходов и затрат!");	
		
	КонецЕсли;
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейШапки()

Функция ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураПолей)

	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат СтруктураПолей;
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПокупкаВалюты Тогда
		СтруктураПолей.Вставить("СчетДоходовКурсоваяРазница","Не указан счет доходов по курсовой разнице!");
		СтруктураПолей.Вставить("СчетЗатратКурсоваяРазница","Не указан счет затрат по курсовой разнице!");
		СтруктураПолей.Вставить("СчетЗатратПенсионный","Не счет затрат по расчетам с ПФ!");
	Иначе
		СтруктураПолей.Вставить("СчетЗатратСебестоимость","Не указан счет затрат по себестоимости валюты!");
		СтруктураПолей.Вставить("СчетДоходовСебестоимость","Не указан счет доходов по себестоимости валюты!");
	КонецЕсли;
	
	СтруктураПолей.Вставить("СчетЗатратКомиссионные","Не указан счет затрат по комиссионным!");
	
	Возврат СтруктураПолей;

КонецФункции // ДополнитьСтруктуруОбязательныхПолейШапкиРегл()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаПокупкуПродажуВалюты") Тогда
		Заявка = Основание;
		ЗаполнитьПоЗаявке();
	КонецЕсли;
			
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
    ОбязательныеПоляШапки = СтруктураОбязательныхПолейШапки();
	ОбязательныеПоляШапки = ДополнитьСтруктуруОбязательныхПолейШапкиРегл(ОбязательныеПоляШапки);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, ОбязательныеПоляШапки, Отказ, Заголовок);

	ДатаДвижений=УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата, Дата);

	СтруктураКурсыВалют = СформироватьСтруктуруКурсыВалютУпр();
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураКурсыВалют);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	мУдалятьДвижения = НЕ ЭтоНовый();
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");