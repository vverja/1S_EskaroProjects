Перем мУдалятьДвижения;


Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитика;                 // (Общ)

Перем мЕстьЗаказ;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Накладная" Тогда
		
		ТабДокумент = ПечатьПоступлениеТоваров();
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("Накладная", "Приходная накладная");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПоступлениеТоваров()
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,
    |	Заказ      КАК Сделка,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	Организация КАК Покупатель,
	|	Ответственный.ФизЛицо.Наименование КАК Получил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ПолучениеУслугПоПереработке КАК ПолучениеУслугПоПереработке
	|
	|ГДЕ
	|	ПолучениеУслугПоПереработке.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.ПолучениеУслугПоПереработке.Товары КАК ПолучениеУслугПоПереработке
	|	ГДЕ
	|		ПолучениеУслугПоПереработке.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   2,
	|   ПолучениеУслугПоПереработке.НомерСтроки,
	|	ПолучениеУслугПоПереработке.Номенклатура,
	|	ПолучениеУслугПоПереработке.Содержание,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ПолучениеУслугПоПереработке.Услуги КАК ПолучениеУслугПоПереработке
	|ГДЕ
	|	ПолучениеУслугПоПереработке.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПолучениеУслугПоПереработке_Накладная";
	
	Макет = ПолучитьМакет("Накладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Приходная накладная (услуги по переработке)';uk='Прибуткова накладна (послуги з переробки)'",КодЯзыкаПечать),КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);                                            

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = Ложь;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если Не ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЕстьСкидки Тогда
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
				Скидка = 0;
			Иначе
				Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
				//округлим скидку до двух знаков
				Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
			КонецЕсли;
		
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		Если ЕстьСкидки Тогда
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
		КонецЕсли;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента) + ".";
										   
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));									   
										   										   
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеТоваров()

#КонецЕсли

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьТоварыПоОстаткамУпр() Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", Заказ);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВложенныйЗапрос.КоличествоОстатокПоЗаказу) КАК КоличествоОстатокПоЗаказу,
	|	СУММА(ВложенныйЗапрос.КоличествоПоРазмещению) КАК КоличествоПоРазмещению,
	|	ВложенныйЗапрос.Размещение,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент
	|ИЗ (
	|	ВЫБРАТЬ
	|		Остатки.Номенклатура,
	|		Остатки.ХарактеристикаНоменклатуры,
	|		ЗаказПоставщикуТовары.Спецификация,
	|		Остатки.Цена,
	|		Остатки.ЕдиницаИзмерения,
	|		Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|		Остатки.КоличествоОстаток КАК КоличествоОстатокПоЗаказу,
	|		0 КАК КоличествоПоРазмещению,
	|		Неопределено КАК Размещение
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, 
	|			ДоговорКонтрагента = &Договор
	|			И ЗаказПоставщику = &Сделка
	|			И СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВПереработку)
	|		) КАК Остатки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Номенклатура,
	|				ХарактеристикаНоменклатуры,
	|				Спецификация
	|			ИЗ
	|				Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|			ГДЕ
	|				ЗаказПоставщикуТовары.Ссылка = &Сделка
	|
	|			) КАК ЗаказПоставщикуТовары
	|		ПО 
	|			Остатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	|			И Остатки.ХарактеристикаНоменклатуры = ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
	|
	|	ГДЕ
	|		НЕ Остатки.Номенклатура.Услуга И Остатки.КоличествоОстаток <> 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Размещение.Номенклатура,
	|		Размещение.ХарактеристикаНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка) КАК Спецификация,
	|		0 КАК Цена,
	|		ВЫБОР КОГДА &ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка) ТОГДА
	|			Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ
	|			ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|				Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|			ИНАЧЕ
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения
	|			КОНЕЦ
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|
	|		ВЫБОР КОГДА &ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка) ТОГДА
	|			Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		ИНАЧЕ
	|			ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|				Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|			ИНАЧЕ
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|			КОНЕЦ
	|		КОНЕЦ КАК Коэффициент,
	|		0 КАК КоличествоОстатокПоЗаказу,
	|		Размещение.КоличествоОстаток КАК КоличествоПоРазмещению,
	|		Размещение.ЗаказПокупателя КАК Размещение
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, 
	|			ЗаказПоставщику = &Сделка 
	|			И ТоварТара = ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар)
	|		) КАК Размещение
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|	ПО 
	|		Размещение.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	|		И Размещение.ХарактеристикаНоменклатуры = ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры
	|
	|	ГДЕ
	|		НЕ Размещение.Номенклатура.Услуга
	|		И Размещение.КоличествоОстаток > 0
	|
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.Размещение,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по размещению покупателям
	ТаблицаПоРазмещению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоРазмещению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоРазмещению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоРазмещению <= 0 Тогда
			ТаблицаПоРазмещению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по заказу поставщику
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Нам надо знать сколько на самом деле осталось номенклатуры
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Спецификация", "КоличествоОстатокПоЗаказу");

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Для каждого СтрокаБезЦен ИЗ ТаблицаБезЦен Цикл
		ВсегоПоЗаказу = СтрокаБезЦен.КоличествоОстатокПоЗаказу;
		ВсегоСписано  = 0;

		Если ВсегоСписано >= ВсегоПоЗаказу Тогда
			Прервать;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаБезЦен.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаБезЦен.ХарактеристикаНоменклатуры);

		СтрокиПоРазмещению = ТаблицаПоРазмещению.НайтиСтроки(СтруктураПоиска);
		СтрокиПоЗаказу     = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиПоЗаказу Цикл
			КолвоПоЗаказу       = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			СписатьПоРазмещению = 0;
			СписатьПоЗаказу     = 0;
			СписаноПоСтроке     = 0;

			Если КолвоПоЗаказу <= 0 Тогда
				Продолжить;
			КонецЕсли;

			// Cписываем по размещению
			Для Каждого СтрокаРазмещения Из СтрокиПоРазмещению Цикл
				КолвоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению;

				Если КолвоПоРазмещению <= 0 Тогда
					Продолжить;
				КонецЕсли;

				СписатьПоРазмещению = Мин(КолвоПоРазмещению, Мин(КолвоПоЗаказу - СписаноПоСтроке, ВсегоПоЗаказу - ВсегоСписано));
				СписаноПоСтроке     = СписаноПоСтроке + СписатьПоРазмещению;
				ВсегоСписано        = ВсегоСписано + СписатьПоРазмещению;

				Если КолвоПоРазмещению > 0 Тогда
					СтрокаТабличнойЧасти = Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
					СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
					СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
					СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
					СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
					СтрокаТабличнойЧасти.Заказ            			= СтрокаРазмещения.Размещение;
					СтрокаТабличнойЧасти.Количество                 = СписатьПоРазмещению * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
																      /СтрокаЗаказа.Коэффициент;
																	  
					ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);												  
					СтрокаТабличнойЧасти.НоменклатурнаяГруппа       = СтрокаЗаказа.НоменклатурнаяГруппа;
					СтрокаТабличнойЧасти.Спецификация 				= СтрокаБезЦен.Спецификация;

					СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					                            МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
					                            Заказ.ВалютаДокумента, ВалютаДокумента,
					                            ЗаполнениеДокументов.КурсДокумента(Заказ, мВалютаРегламентированногоУчета), Курс,
					                            ЗаполнениеДокументов.КратностьДокумента(Заказ, мВалютаРегламентированногоУчета), Кратность),
					                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
					                            Заказ.СуммаВключаетНДС,
					                            УчитыватьНДС,
					                            СуммаВключаетНДС,
					                            Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

					ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);

					СтрокаРазмещения.КоличествоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению - СписатьПоРазмещению;
				КонецЕсли;   

			КонецЦикла;

			// Cписываем без размещения
			СписатьПоЗаказу = Мин(КолвоПоЗаказу - СписаноПоСтроке, ВсегоПоЗаказу - ВсегоСписано);
			СписаноПоСтроке = СписаноПоСтроке + СписатьПоЗаказу;
			ВсегоСписано    = ВсегоСписано  + СписатьПоЗаказу;

			Если СписатьПоЗаказу > 0 Тогда
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
				СтрокаТабличнойЧасти.Заказ            			= Неопределено;
				СтрокаТабличнойЧасти.Количество                 = СписатьПоЗаказу * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
																  /СтрокаЗаказа.Коэффициент;
																  				
				ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
				СтрокаТабличнойЧасти.НоменклатурнаяГруппа       = СтрокаЗаказа.НоменклатурнаяГруппа;
				СтрокаТабличнойЧасти.Спецификация 				= СтрокаБезЦен.Спецификация;

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				                            МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
				                            Заказ.ВалютаДокумента, ВалютаДокумента,
				                            ЗаполнениеДокументов.КурсДокумента(Заказ, мВалютаРегламентированногоУчета), Курс,
				                            ЗаполнениеДокументов.КратностьДокумента(Заказ, мВалютаРегламентированногоУчета), Кратность),
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            Заказ.СуммаВключаетНДС,
				                            УчитыватьНДС,
				                            СуммаВключаетНДС,
				                            Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);
			КонецЕсли;

			СтрокаЗаказа.КоличествоОстатокПоЗаказу = СтрокаЗаказа.КоличествоОстатокПоЗаказу - СписаноПоСтроке;
			
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОстаткамУпр()

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьТоварыПоПоступлениюИпоОстаткам(Основание)
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВПереработку);
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Товар",        Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Сделка",       Заказ);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия",  Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСпецификация",  Справочники.СпецификацииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("Основание",    Основание);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                     	КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков             	КАК ЕдиницаХранения,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 	КАК КоэффициентЕдиницыХранения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры                       	КАК ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.СерияНоменклатуры                       			КАК СерияНоменклатуры,
	|	ВложенныйЗапрос.Спецификация                       					КАК Спецификация,
	|	ВложенныйЗапрос.Номенклатура.НоменклатурнаяГруппа                	КАК НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.Цена                                             	КАК Цена,
	|	ВложенныйЗапрос.Номенклатура.СтавкаНДС                           	КАК СтавкаНДС,
	|	СУММА(ВложенныйЗапрос.КоличествоПоПоступлению)                 		КАК КоличествоПоПоступлению,
	|	СУММА(ВложенныйЗапрос.КоличествоОстатокПоЗаказу)                 	КАК КоличествоОстатокПоЗаказу,
	|	СУММА(ВложенныйЗапрос.КоличествоПоРазмещению)                    	КАК КоличествоПоРазмещению,
	|	ВложенныйЗапрос.Размещение                                       	КАК Размещение,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                                 	КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент                                      	КАК Коэффициент
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|	Поступление.Номенклатура                КАК Номенклатура,
	|	Поступление.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|	Поступление.СерияНоменклатуры   		КАК СерияНоменклатуры,
	|	Поступление.Спецификация   				КАК Спецификация,
	|	0                         				КАК Цена,
	|	Поступление.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	|	Поступление.Коэффициент 				КАК Коэффициент,
	|	Поступление.Количество            		КАК КоличествоПоПоступлению,
	|	0            							КАК КоличествоОстатокПоЗаказу,
	|	0                                    	КАК КоличествоПоРазмещению,
	|	Неопределено                         	КАК Размещение
	|ИЗ
	|	Документ.ПоступлениеТоваровИзПереработки.Продукция КАК Поступление
	|ГДЕ	
	|	Поступление.Ссылка = &Основание
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки.Номенклатура                 	КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   	КАК ХарактеристикаНоменклатуры,
	|	&ПустаяСерия                         	КАК СерияНоменклатуры,
	|	&ПустаяСпецификация                     КАК Спецификация,
	|	Остатки.Цена                         	КАК Цена,
	|	Остатки.ЕдиницаИзмерения             	КАК ЕдиницаИзмерения,
	|	Остатки.ЕдиницаИзмерения.Коэффициент 	КАК Коэффициент,
	|	0            							КАК КоличествоПоПоступлению,
	|	Остатки.КоличествоОстаток            	КАК КоличествоОстатокПоЗаказу,
	|	0                                    	КАК КоличествоПоРазмещению,
	|	Неопределено                         	КАК Размещение
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|	                                              И ЗаказПоставщику  = &Сделка
	|	                                              И СтатусПартии     = &СтатусПартии) КАК Остатки
	|
	|ГДЕ
	|	НЕ Остатки.Номенклатура.Услуга И Остатки.КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Размещение.Номенклатура               	КАК Номенклатура,
	|	Размещение.ХарактеристикаНоменклатуры 	КАК ХарактеристикаНоменклатуры,
	|	&ПустаяСерия                         	КАК СерияНоменклатуры,
	|	&ПустаяСпецификация                     КАК Спецификация,
	|	0                                     	КАК Цена,
	|	ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
	|		Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|			Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения
	|		КОНЕЦ
	|	КОНЕЦ                                 КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
	|		Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|			Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		ИНАЧЕ
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ
	|	КОНЕЦ                                 	КАК Коэффициент,
	|	0            							КАК КоличествоПоПоступлению,
	|	0                                     	КАК КоличествоОстатокПоЗаказу,
	|	Размещение.КоличествоОстаток	        КАК КоличествоПоРазмещению,
	|	Размещение.ЗаказПокупателя            	КАК Размещение
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПоставщику = &Сделка И ТоварТара = &Товар) КАК Размещение
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|		ПО Размещение.Номенклатура               = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	|		 И Размещение.ХарактеристикаНоменклатуры = ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	НЕ Размещение.Номенклатура.Услуга  И Размещение.КоличествоОстаток > 0
	|
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.СерияНоменклатуры,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.Размещение,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент
	|";

	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблица остатков по поступлению из переработки.
	ТаблицаПоПоступлению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоПоступлению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоПоступлению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоПоступлению <= 0 Тогда
			ТаблицаПоПоступлению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по размещению покупателям.
	ТаблицаПоРазмещению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоРазмещению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоРазмещению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоРазмещению <= 0 Тогда
			ТаблицаПоРазмещению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по заказу поставщику
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу <= 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Нам надо знать сколько на самом деле осталось номенклатуры
	ТаблицаБезЦен = ТаблицаПоПоступлению.Скопировать();
	ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Спецификация", "КоличествоПоПоступлению");

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Для каждого СтрокаБезЦен ИЗ ТаблицаБезЦен Цикл
		ВсегоПоЗаказу = СтрокаБезЦен.КоличествоПоПоступлению;
		ВсегоСписано  = 0;

		Если ВсегоСписано >= ВсегоПоЗаказу Тогда
			Прервать;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаБезЦен.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаБезЦен.ХарактеристикаНоменклатуры);

		СтрокиПоРазмещению = ТаблицаПоРазмещению.НайтиСтроки(СтруктураПоиска);
		СтрокиПоЗаказу     = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиПоЗаказу Цикл
			КолвоПоЗаказу       = Мин(СтрокаЗаказа.КоличествоОстатокПоЗаказу, ВсегоПоЗаказу);
			СписатьПоРазмещению = 0;
			СписатьПоЗаказу     = 0;

			Если КолвоПоЗаказу <= 0 Тогда
				Продолжить;
			КонецЕсли;

			// Cписываем по размещению
			Для Каждого СтрокаРазмещения Из СтрокиПоРазмещению Цикл
				КолвоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению;

				Если КолвоПоРазмещению <= 0 Тогда
					Продолжить;
				КонецЕсли;

				СписатьПоРазмещению = Мин(КолвоПоРазмещению, КолвоПоЗаказу);
				ВсегоСписано        = ВсегоСписано + КолвоПоРазмещению;
				КолвоПоЗаказу		= КолвоПоЗаказу - СписатьПоРазмещению;

				Если КолвоПоРазмещению > 0 Тогда
					СтрокаТабличнойЧасти = Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
					СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
					СтрокаТабличнойЧасти.СерияНоменклатуры 			= СтрокаБезЦен.СерияНоменклатуры;
					СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
					СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
					СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
					СтрокаТабличнойЧасти.Заказ            			= СтрокаРазмещения.Размещение;
					СтрокаТабличнойЧасти.Количество                 = СписатьПоРазмещению;
					
					ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
					
					СтрокаТабличнойЧасти.НоменклатурнаяГруппа       = СтрокаЗаказа.НоменклатурнаяГруппа;
					СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);

					СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					                            МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
					                            Заказ.ВалютаДокумента, ВалютаДокумента,
					                            ЗаполнениеДокументов.КурсДокумента(Заказ, мВалютаРегламентированногоУчета), Курс,
					                            ЗаполнениеДокументов.КратностьДокумента(Заказ, мВалютаРегламентированногоУчета), Кратность),
					                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
					                            Заказ.СуммаВключаетНДС,
					                            УчитыватьНДС,
					                            СуммаВключаетНДС,
					                            Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

					ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);

					СтрокаРазмещения.КоличествоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению - СписатьПоРазмещению;
				КонецЕсли; 				
				
			КонецЦикла;

			// Cписываем без размещения
			СписатьПоЗаказу = КолвоПоЗаказу - ВсегоСписано;
			ВсегоСписано    = ВсегоСписано  + СписатьПоЗаказу;

			Если СписатьПоЗаказу > 0 Тогда
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.СерияНоменклатуры 			= СтрокаБезЦен.СерияНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
				СтрокаТабличнойЧасти.Заказ	           			= Неопределено;
				СтрокаТабличнойЧасти.Количество                 = СписатьПоЗаказу;
				
				ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
				
				СтрокаТабличнойЧасти.НоменклатурнаяГруппа       = СтрокаЗаказа.НоменклатурнаяГруппа;
				СтрокаТабличнойЧасти.Спецификация 				= СтрокаБезЦен.Спецификация;

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				                            МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
				                            Заказ.ВалютаДокумента, ВалютаДокумента,
				                            ЗаполнениеДокументов.КурсДокумента(Заказ, мВалютаРегламентированногоУчета), Курс,
				                            ЗаполнениеДокументов.КратностьДокумента(Заказ, мВалютаРегламентированногоУчета), Кратность),
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            Заказ.СуммаВключаетНДС,
				                            УчитыватьНДС,
				                            СуммаВключаетНДС,
				                            Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);
			КонецЕсли;

			СтрокаЗаказа.КоличествоОстатокПоЗаказу = СтрокаЗаказа.КоличествоОстатокПоЗаказу - СписатьПоРазмещению - СписатьПоЗаказу;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюИпоОстаткам()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВПереработку);
	Запрос.УстановитьПараметр("Товар",   Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",  Заказ);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура               				КАК Номенклатура,
	|	Остатки.Номенклатура.НоменклатурнаяГруппаЗатрат КАК НоменклатурнаяГруппа,
	|	Остатки.Номенклатура.СтатьяЗатрат 				КАК СтатьяЗатрат,
	|	Остатки.Номенклатура.СтавкаНДС     				КАК СтавкаНДС,
	|	Остатки.Цена,
	|	Остатки.КоличествоОстаток          				КАК КоличествоОстатокПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор 
	|												И ЗаказПоставщику = &Сделка 
	|												И СтатусПартии = &СтатусПартии) КАК Остатки
	|
	|ГДЕ Остатки.Номенклатура.Услуга
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();
	
	ЗапросСодержаний = Новый Запрос;
	ЗапросСодержаний.УстановитьПараметр("Сделка",  Заказ);
	ЗапросСодержаний.Текст = "
	|ВЫБРАТЬ 
	|	Док.Номенклатура, 
	|	Док.Содержание 
	|ИЗ 
	|	Документ.ЗаказПоставщику.Услуги КАК Док
	|
	|ГДЕ Док.Ссылка = &Сделка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";  
	
	ТабСодержаний = ЗапросСодержаний.Выполнить().Выгрузить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаУслуг = Услуги.Добавить();
		СтрокаУслуг.Номенклатура = Выборка.Номенклатура;
		СтрокаУслуг.Количество   = Выборка.КоличествоОстатокПоЗаказу;
		СтрокаУслуг.СтавкаНДС    = Выборка.СтавкаНДС;
		
		СтрокаУслуг.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
		СтрокаУслуг.СтатьяЗатрат 		 = Выборка.СтатьяЗатрат;
		
		СтрокаСодержания = ТабСодержаний.Найти(Выборка.Номенклатура, "Номенклатура");
		
		Если СтрокаСодержания <> Неопределено Тогда
			СтрокаУслуг.Содержание   = СтрокаСодержания.Содержание;
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаУслуг, ЭтотОбъект);
		КонецЕсли;

		СтрокаУслуг.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
										Заказ.ВалютаДокумента, ВалютаДокумента,
										ЗаполнениеДокументов.КурсДокумента(Заказ, мВалютаРегламентированногоУчета), Курс,
										ЗаполнениеДокументов.КратностьДокумента(Заказ, мВалютаРегламентированногоУчета), Кратность);
										
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаУслуг, "Услуги", ОтражатьВБухгалтерскомУчете);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОстаткамУпр()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаУчетаНоменклатуры=Истина) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаУчетаНоменклатуры);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

//Выполняет заполнение счетов учета в табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаУчетаНоменклатуры=Истина) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, , ЗаполнятьСчетаУчетаНоменклатуры);

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

//Выполняет заполнение счетов учета номенклатуры, затрат и налогов в шапке документа
//
Процедура ЗаполнитьСчетаУчетаВШапке(ЗаполнятьСчетаУчетаНоменклатуры=Истина) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаШапки(ЭтотОбъект, ОтражатьВБухгалтерскомУчете,  Истина, ЗаполнятьСчетаУчетаНоменклатуры);

КонецПроцедуры

// Возвращает структуру со значениями по-умолчанию счетов учета расчетов в шапке.
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
	
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансов);
		
		СтруктураСчетов.Вставить("СчетУчетаНДС", СчетаУчета.СчетУчетаНДСПриобретений);
		
	КонецЕсли;
		
	Возврат СтруктураСчетов;
	
КонецФункции

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОснованиюУпр(ДокументОснование, ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ИмяТабличнойЧасти = "Товары";

	ДополнительныеРеглПоляОбщ    = "";
	ДополнительныеРеглПоляТовары = "";

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Номенклатура," + ДополнительныеРеглПоляОбщ +"
	|	СУММА(ДокТовары.Количество)         КАК КоличествоПоДокументу,
	|	NULL                                КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Товары, "
	|	ДокТовары.СерияНоменклатуры," + ДополнительныеРеглПоляТовары +"
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") + "
	|	МИНИМУМ(ДокТовары.НомерСтроки)         КАК НомерСтроки, 
	|	СУММА(ДокТовары.Количество)         КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток) КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Товары, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры", "") + " 
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Товары, ",
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.КоличествоМест   = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0, СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент);
			СтрокаТабличнойЧасти.СтавкаНДС        = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);

		КонецЕсли;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Поцедура выполняет заполнение табличной части "Использованные материалы".
//
Процедура ЗаполнитьИспользованныеМатериалы() Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		#Если Клиент Тогда
			ОбщегоНазначения.Сообщение("Не указан контрагент! Заполнение невозможно.", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		#Если Клиент Тогда
			ОбщегоНазначения.Сообщение("Не указан договор контрагента! Заполнение невозможно.", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	УсловиеПоЗаказу = "";
	
	Если ОтражатьВУправленческомУчете Тогда
		Если ЗначениеЗаполнено(Заказ) Тогда
			УсловиеПоЗаказу = " И Сделка = &Заказ ";
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	РегТоварыПереданные.Номенклатура 					        КАК Номенклатура,
		|	РегТоварыПереданные.ХарактеристикаНоменклатуры              КАК ХарактеристикаНоменклатуры,
		|	РегТоварыПереданные.Номенклатура.НоменклатурнаяГруппаЗатрат КАК НоменклатурнаяГруппа,
		|	РегТоварыПереданные.Номенклатура.СтатьяЗатрат 				КАК СтатьяЗатрат,
		|	СУММА(РегТоварыПереданные.КоличествоОстаток)                КАК КолКонОст,
		|	СУММА(РегТоварыПереданные.СуммаВзаиморасчетовОстаток)       КАК СумКонОст
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков, 
		|											   ДоговорКонтрагента = &ДоговорКонтрагента
		|											   " + УсловиеПоЗаказу + "
		|											   И СтатусПередачи = &СтатусПередачи
		|											   ) КАК РегТоварыПереданные
		|
		|СГРУППИРОВАТЬ ПО
		|	РегТоварыПереданные.Номенклатура,
		|	РегТоварыПереданные.ХарактеристикаНоменклатуры
		|";
	ИначеЕсли ОтражатьВБухгалтерскомУчете Тогда
		
		Если ЗначениеЗаполнено(Заказ) Тогда
			УсловиеПоЗаказу = " И ДокументПередачи.Заказ = &Заказ ";
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	РегПартииТоваровПереданные.Номенклатура 					        КАК Номенклатура,
		|	РегПартииТоваровПереданные.ХарактеристикаНоменклатуры              	КАК ХарактеристикаНоменклатуры,
		|	РегПартииТоваровПереданные.СчетУчета              					КАК СчетУчета,
		|	РегПартииТоваровПереданные.Номенклатура.НоменклатурнаяГруппаЗатрат 	КАК НоменклатурнаяГруппа,
		|	РегПартииТоваровПереданные.Номенклатура.СтатьяЗатрат 				КАК СтатьяЗатрат,
		|	СУММА(РегПартииТоваровПереданные.КоличествоОстаток)                	КАК КолКонОст,
		|	0       															КАК СумКонОст
		|ИЗ
		|	РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.Остатки(&ДатаОстатков, 
		|											   ДоговорКонтрагента = &ДоговорКонтрагента
		|											   " + УсловиеПоЗаказу + "
		|											   И ДокументПередачи ССЫЛКА Документ.ПередачаТоваров
		|											   ) КАК РегПартииТоваровПереданные
		|
		|СГРУППИРОВАТЬ ПО
		|	РегПартииТоваровПереданные.Номенклатура,
		|	РегПартииТоваровПереданные.ХарактеристикаНоменклатуры,
		|	РегПартииТоваровПереданные.СчетУчета
		|";
	Иначе
		#Если Клиент Тогда
			ОбщегоНазначения.Сообщение("Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский""! Заполнение невозможно.", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "Заказ", ?(НЕ ЗначениеЗаполнено( Заказ), Неопределено, Заказ));
	Запрос.УстановитьПараметр( "ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр( "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		#Если Клиент Тогда
		Предупреждение("По выбранному заказу / контрагенту / договору в остатках у переработчика материалов нет!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	ИспользованныеМатериалы.Очистить();
	Обход = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Обход.Следующий() Цикл
		
		НоваяСтрока = ИспользованныеМатериалы.Добавить();
		НоваяСтрока.Номенклатура               = Обход.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
		НоваяСтрока.НоменклатурнаяГруппа       = Обход.НоменклатурнаяГруппа;
		НоваяСтрока.СтатьяЗатрат 		  	   = Обход.СтатьяЗатрат;
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуТабЧасти        (НоваяСтрока, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти     (НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.Количество                 = Обход.КолКонОст;
		НоваяСтрока.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Обход.СумКонОст, 
		                   ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, Курс,
		                   КратностьВзаиморасчетов, Кратность);
						   
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект, Ложь);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"ИспользованныеМатериалы");
		Если НЕ ОтражатьВУправленческомУчете Тогда
			НоваяСтрока.СчетУчетаБУ = Обход.СчетУчета;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтражатьВУправленческомУчете Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(ИспользованныеМатериалы, "ИспользованныеМатериалы", ОтражатьВБухгалтерскомУчете);
	Иначе
		//Заполним только счета затрат, так как счета учета взяли из запроса
		ЗаполнитьСчетаУчетаВТабЧасти(ИспользованныеМатериалы, "ИспользованныеМатериалы", ОтражатьВБухгалтерскомУчете, Ложь);
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьИспользованныеМатериалы()

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если ИспользованныеМатериалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Использованные материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		ИспользованныеМатериалы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьМатериалы = ИспользованныеМатериалы.Выгрузить();
	ТабличнаяЧастьПродукция = Товары.Выгрузить();
	СтруктураДопКолонок = Новый Структура("НоменклатурнаяГруппа, Заказ, Спецификация");
	Отбор = Новый Структура();
	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата);
	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, НоменклатурнаяГруппа, СтатьяЗатрат, Заказ", "Количество");
	ИспользованныеМатериалы.Загрузить(ТабличнаяЧастьМатериалы);
	
	Для Каждого СтрокаТабличнойЧасти Из ИспользованныеМатериалы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабЧасти(ИспользованныеМатериалы, "ИспользованныеМатериалы", ОтражатьВБухгалтерскомУчете);
 	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание, ВидОперации = Неопределено)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		Если Не Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
		ОтражатьВУправленческомУчете = Истина;

		СтатьяЗатрат = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтатьяЗатратУслугПоПереработке");
		
		// Попробуем заполнить подразделение организации.
		ПодразделениеОрганизации = УправлениеЗатратами.ПолучитьПодразделениеОрганизации(
			Организация,
			Подразделение,
			ОтражатьВБухгалтерскомУчете
		);
												  
		ЗаполнитьСчетаУчетаВШапке();
							  
		
		// Табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			Заказ = Основание;

			Если Заказ.Проведен Тогда

				// Заполним табличные части неполученными ТМЦ по заказу поставщику.
				ЗаполнитьТоварыПоОстаткамУпр();

				
				ЗаполнитьУслугиПоОстаткамУпр();
				ЗаполнитьИспользованныеМатериалы();

			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Заказ = Основание.Заказ;
		ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
		УчитыватьНДС     = Истина;
		СуммаВключаетНДС = Истина;
		
		Если Заказ.Проведен Тогда

			// Заполним табличные части неполученными ТМЦ по заказу поставщику.
			ЗаполнитьТоварыПоПоступлениюИпоОстаткам(Основание);

			
			ЗаполнитьУслугиПоОстаткамУпр();
			ЗаполнитьИспользованныеМатериалы();

		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			// Заполним табличную часть "Товары" по приходному ордеру на товары.
			ЗаполнитьТоварыПоОснованиюУпр(Основание, Товары);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		СуммаДокумента                 = Основание.СуммаДокумента;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
		
		Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации( Основание.Организация);
		Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
		
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты( ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Для Каждого ТекСтрокаИспользованныеМатериалы Из Основание.ИспользованныеМатериалы Цикл
			
			НоваяСтрока = ИспользованныеМатериалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаИспользованныеМатериалы);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "ИспользованныеМатериалы", ОтражатьВБухгалтерскомУчете);
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаПродукция Из Основание.Продукция Цикл
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаПродукция);
			
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Приобретение");

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			
			НоваяСтрока = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаУслуги);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр() 

	Возврат Перечисления.СтатусыПартийТоваров.ВПереработку;

КонецФункции // ОпределитьСтатусПартииПриходаУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");

	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.КоличествоМинус = - СтрокаТаблицы.Количество;
		КонецЕсли;
	КонецЦикла;

	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + 
										 ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента, 
										 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, 
										 КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
										 СтруктураШапкиДокумента.КурсДокумента,
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
										 СтруктураШапкиДокумента.КратностьДокумента,
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
										 СтруктураШапкиДокумента.КурсДокумента,
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
										 СтруктураШапкиДокумента.КратностьДокумента,
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(
		ТаблицаТоваров, 
		СтруктураШапкиДокумента, 
		ПогрешностиОкругления, 
		Истина,     // ЭтоПриобретение
		Истина      // ЭтоУслуги
	);
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалов(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТоваров.Колонки.Сумма.Имя = "Стоимость";

	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.Количество = NULL Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;
		СтрокаТаблицы.КоличествоМинус = - СтрокаТаблицы.Количество;
	КонецЦикла;

	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуМатериаловУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуМатериалов()

Процедура ПодготовитьТаблицуМатериаловУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость;

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента, 
										 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, 
										 КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
										 СтруктураШапкиДокумента.КурсДокумента,
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
										 СтруктураШапкиДокумента.КратностьДокумента,
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуМатериаловУпр()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		СтруктураОбязательныхПолей.Вставить( "Подразделение");
	КонецЕсли;

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить( "СчетУчетаРасчетовСКонтрагентом");
		СтруктураОбязательныхПолей.Вставить( "ПодразделениеОрганизации");
		
	   Если СтруктураШапкиДокумента.ЕстьНДС
		   И СтруктураШапкиДокумента.УчитыватьНДС Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
	   КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
								 |ВалютаДокумента, Контрагент, ДоговорКонтрагента, 
								 |КурсВзаиморасчетов,КратностьВзаиморасчетов");

	Если Товары.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СтатьяЗатрат");
	КонецЕсли;
	
	// Заказ должен быть заполнен, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		СтруктураОбязательныхПолей.Вставить("Заказ",
			"По выбранному договору установлен способ ведения взаиморасчетов ""По заказам""!
			|Заполните поле ""Заказ""!");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиУпр (СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		Если СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Укажите нематериальную статью затрат (закладка ""Учет затрат"")!", Отказ, Заголовок);
		КонецЕсли;
		Если Не СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Укажите производственную статью затрат (закладка ""Учет затрат"")!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		Неопределено,      // Неопределено - в случае проверки шапки документа
		Неопределено,      // Неопределено - в случае проверки шапки документа
		Отказ, 
		Заголовок, 
		"ОтражениеЗатрат", // ВидОперации
		Истина,            // ОтражатьПоЗатратам,
		"СчетЗатрат", 	   // ИмяРеквизитаСчетЗатрат
		""       		   // ИмяРеквизитаСубконтоЗатрат
	);
	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;                                                           
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
	    СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение"); 
	КонецЕсли; 	
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// При поступлении товаров должен быть указан конкретный вид налоговой деятельности.
	СтруктураПараметровПроверки = Новый Структура("ПроверятьРаспределяемую");
	НалоговыйУчет.ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(ЭтотОбъект, "Товары", , ТаблицаПоТоварам,
	                                                              СтруктураПараметровПроверки, 
																  СтруктураШапкиДокумента, 
											                      Отказ, Заголовок);
																  
																  
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоТоварам, 
		"Товары",
		Отказ, 
		Заголовок, 
		"Поступление", // ВидОперации
		Истина         // ЭтоЗатраты 
	);	
															  
	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Количество, Номенклатура, Сумма, СтатьяЗатрат");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоУслугам, 
		"Услуги",
		Отказ, 
		Заголовок, 
		"Поступление", // ВидОперации
		Истина         // ЭтоЗатраты 
	);	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Процедура формирует движение по регистру сведений "Списанные товары".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаТабличнойЧасти - СтрокаТаблицыЗначений - Текущая строка таблицы
//	НаборЗаписейСписанныеТовары - РегистрНакопленияНаборЗаписей - Набор записей регистра "Списанные товары"
//
Процедура СформироватьДвижениеПоРегиструСписанныеТовары(
	СтруктураШапкиДокумента,
	СтрокаТабличнойЧасти,
	НаборЗаписейСписанныеТовары
	)

	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	НоваяСтрока = НаборЗаписейСписанныеТовары.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	
	НоваяСтрока.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	НоваяСтрока.ЗаказПартии = СтруктураШапкиДокумента.Заказ;
	
	НоваяСтрока.ДопустимыйСтатус1 = Перечисления.СтатусыПартийТоваров.ВПереработку;
	НоваяСтрока.ДопустимыйСтатус2 = Перечисления.СтатусыПартийТоваров.Купленный;
	НоваяСтрока.ДопустимыйСтатус3 = Перечисления.СтатусыПартийТоваров.Продукция;
	
	Если СтрокаТабличнойЧасти.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
		НоваяСтрока.КорСубконтоБУ1 = СтрокаТабличнойЧасти.ОбъектСтроительства;
		НоваяСтрока.КорСубконтоБУ2 = СтрокаТабличнойЧасти.СтатьяЗатрат;
	Иначе
		НоваяСтрока.КорСубконтоБУ1 = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		НоваяСтрока.КорСубконтоБУ2 = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
		НоваяСтрока.КорСубконтоБУ3 = СтрокаТабличнойЧасти.СтатьяЗатрат;
	КонецЕсли;
	
	НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.Подразделение = СтруктураШапкиДокумента.Подразделение;
	НоваяСтрока.ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	
	НоваяСтрока.ОтражатьВБухгалтерскомУчете = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	НоваяСтрока.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
		
	НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство;
		
	НоваяСтрока.НалоговоеНазначениеПоФакту = СтрокаТабличнойЧасти.НалоговоеНазначение;

КонецПроцедуры // СформироватьДвижениеПоРегиструСписанныеТовары()

// Процедура формирует движение по регистру накопления "Незавершенное производство".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаТабличнойЧасти - СтрокаТаблицыЗначений - Текущая строка таблицы
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат
//  ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра "Незавершенное производство"
//
Процедура СформироватьДвижениеПоРегиструНезавершенноеПроизводство(
	СтруктураШапкиДокумента,
	СтрокаТабличнойЧасти,
	ХарактерЗатрат,
	ВидОтраженияВУчете,
	НаборЗаписейНезавершенноеПроизводство
	)
	
	Если ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		Возврат;
	КонецЕсли;

	НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
		НоваяСтрока.Заказ = СтрокаТабличнойЧасти.Заказ;
	Иначе
		НоваяСтрока.Заказ = Неопределено;
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Подразделение = СтруктураШапкиДокумента.Подразделение;
	Иначе
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Подразделение = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СчетУчета = СтрокаТабличнойЧасти.СчетЗатрат;
		НоваяСтрока.НалоговоеНазначение = СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат;
    КонецЕсли;
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеКоличестваВПроизводствоОперативно;
	НоваяСтрока.СписаниеПартий = Истина;
	
КонецПроцедуры // СформироватьДвижениеПоРегиструНезавершенноеПроизводство()

// Процедура формирует двжиения по партиям товаров переданных
//
// Параметры:
//	СтруктураШапкиДокумента, - Структура - Реквизиты документа
//	ТаблицаПоМатериалам - ТаблицаЗначений - Таблица использованных материалов
//	
Процедура ДвиженияСписаниеПартий(
	СтруктураШапкиДокумента,
	ТаблицаПоМатериалам
	)
	
	Если ТаблицаПоМатериалам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоМатериалам Цикл

		СформироватьДвижениеПоРегиструСписанныеТовары(
			СтруктураШапкиДокумента,
			СтрокаТабличнойЧасти,
			Движения.СписанныеТовары
		);
		
		// Если режим онлайн данное движение формируется в глоб.функции СписаниеПартийТоваров()
		Если Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
				И НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументов
		    Тогда
				ХарактерЗатратУУ = СтрокаТабличнойЧасти.ХарактерЗатрат;
				
				СформироватьДвижениеПоРегиструНезавершенноеПроизводство(
					СтруктураШапкиДокумента,
					СтрокаТабличнойЧасти,
					ХарактерЗатратУУ,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
					Движения.НезавершенноеПроизводство
				);
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
				И НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух
			Тогда
				ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(
					СтрокаТабличнойЧасти.СчетЗатрат, 
					СтрокаТабличнойЧасти.СтатьяЗатрат
				);
				
				СформироватьДвижениеПоРегиструНезавершенноеПроизводство(
					СтруктураШапкиДокумента,
					СтрокаТабличнойЧасти,
					ХарактерЗатратБУ,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
					Движения.НезавершенноеПроизводствоБухгалтерскийУчет
				);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Движения.СписанныеТовары.Записать();
	
	// Запишем движения регистров "Незавершенное производство" явно, т.к. будут добавлены еще движения по затратам.
	Если Движения.НезавершенноеПроизводство.Модифицированность() Тогда
		Движения.НезавершенноеПроизводство.Записать();
	КонецЕсли;
	Если Движения.НезавершенноеПроизводствоБухгалтерскийУчет.Модифицированность() Тогда
		Движения.НезавершенноеПроизводствоБухгалтерскийУчет.Записать();
	КонецЕсли;
		
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект,
		Дата,
		СтруктураШапкиДокумента.Организация,
		ОтражатьВУправленческомУчете,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
	);
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(
		Ссылка, 
		Движения.СписанныеТовары.Выгрузить()
	);
	
КонецПроцедуры // ДвиженияСписаниеПартий()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоМатериалам, 
							  ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);

	ДвиженияСписаниеПартий(
		СтруктураШапкиДокумента,
		ТаблицаПоМатериалам
	);
	
	// Формирование движений по отражению затрат.
	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента, 
		ТаблицаПоТоварам
	);
	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента, 
		ТаблицаПоУслугам
	);  

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоМатериалам, 
							  ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                          Отказ, Заголовок, СтруктураШапкиДокумента);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПоТоварам, ТаблицаПоУслугам, 
							  ТаблицаПоВзаиморасчетам, Отказ, Заголовок);

	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ);							  
	
	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
							  
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоМатериалам, 
							ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

    УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		        мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		        ВидДвиженияНакопления.Расход, Отказ, Заголовок);

	// Движения по регистру ЗаказыПоставщикам
	Если мЕстьЗаказ Тогда
	
		НаборДвижений = Движения.ЗаказыПоставщикам;
		
		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Услуги", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
								
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
									
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    Заказ);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартииПриходаУпр());
								
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;

	КонецЕсли;

	// МАТЕРИАЛЫ ПО РЕГИСТРУ МатериалыВПроизводстве.
	НаборДвижений = Движения.МатериалыВПроизводстве;
	
	ТаблицаПоМатериаламОперативныйУчет = ТаблицаПоМатериалам.Скопировать();
	
	КолвоЭлементов = ТаблицаПоМатериаламОперативныйУчет.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
   		СтрокаТаблицы = ТаблицаПоМатериаламОперативныйУчет[КолвоЭлементов - ОбратныйИндекс];
  
   		Если Не СтрокаТаблицы.ВестиОперативныйУчетОстатковНЗП Тогда
      		ТаблицаПоМатериаламОперативныйУчет.Удалить(СтрокаТаблицы);
		КонецЕсли;

	КонецЦикла;

	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоМатериаламОперативныйУчет);
								
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
									
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение", Подразделение);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации",   Перечисления.КодыОперацийМатериалыВПроизводстве.СписаниеПартийВПроизводствоОперативно);
								
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
	// УСЛУГИ ПО РЕГИСТРУ Закупки.
	НаборДвижений = Движения.Закупки;
	
	ТабИмен = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварам, ТабИмен, "НДС");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварам, ТабИмен, "НДСУпр", "НДС");
	
	ТабИменУслуги = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоУслугам, ТабИменУслуги, "НДС");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоУслугам, ТабИменУслуги, "НДСУпр", "НДС");
	
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
									
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
	
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТоварам, ТабИмен);
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоУслугам, ТабИменУслуги);
										
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартииПриходаУпр());
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументЗакупки",    Ссылка);
									
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);
		
	// Списание из регистра остатков
	Если ТаблицаПоМатериалам.Количество() > 0 Тогда
		
		// Контроль остатков товара
		ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("ИспользованныеМатериалы", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку, Отказ, Заголовок, РежимПроведения);
		
		Если НЕ Отказ Тогда
			
			НаборДвиженийТовары = Движения.ТоварыПереданные;
			
			СтруктураТаблицДокумента = Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам);
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвиженийТовары, СтруктураТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент", Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", Заказ);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвиженийТовары, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли; 
		
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
									ТаблицаПоВзаиморасчетам, Отказ, Заголовок);

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	ПроводкиБУ = Движения.Хозрасчетный;

	// Движения по производственным регистрам, в случае
	// поступления от контрагента услуг производственного характера
	ДатаДока = Дата;

	Если Не Отказ Тогда    
		
		// Формирование проводок по ТЧ "Услуги"
		Для Каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл

			НоваяПроводка = ПроводкиБУ.Добавить();
			НоваяПроводка.Организация = Организация;
			НоваяПроводка.Период      = ДатаДока;
			НоваяПроводка.Содержание  = "Получение услуг по переработке материалов";
			
			НоваяПроводка.Сумма       = СтрокаТЧ.ПроводкиСуммаБезНДСРегл;
			
			ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТЧ.СчетЗатрат);

			НоваяПроводка.СчетДт = СтрокаТЧ.СчетЗатрат;
			Если ПроизводственныеРасходы Тогда
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЧ.СтатьяЗатрат);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизации);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЧ.ОбъектСтроительства);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаТЧ.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаТЧ.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаТЧ.Субконто3);
			КонецЕсли;
			
			НоваяПроводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат;
			НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат, СтрокаТЧ.СтоимостьНУ);

			НоваяПроводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Сделки",    СтрокаТЧ.СделкаРегл);
			
			НоваяПроводка.ВалютаКт   = СтруктураШапкиДокумента.ВалютаДокумента;
			НоваяПроводка.ВалютнаяСуммаКт = СтрокаТЧ.ПроводкиСуммаБезНДСВал;
				
		КонецЦикла;

		// Формирование проводок по ТЧ "Товары"
		Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

			НоваяПроводка = ПроводкиБУ.Добавить();
			НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Период      = ДатаДока;
			НоваяПроводка.Содержание  = "Получение продукции от переработчика";
			
			НоваяПроводка.Сумма       = СтрокаТЧ.ПроводкиСуммаБезНДСРегл;

			НоваяПроводка.СчетДт = СтруктураШапкиДокумента.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         СтруктураШапкиДокумента.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
			
			НоваяПроводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат;
			НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат, СтрокаТЧ.СтоимостьНУ);
			
			НоваяПроводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Сделки",    СтрокаТЧ.СделкаРегл);
			
			НоваяПроводка.ВалютаКт = СтруктураШапкиДокумента.ВалютаДокумента;
			НоваяПроводка.ВалютнаяСуммаКт = СтрокаТЧ.ПроводкиСуммаБезНДСВал;

		КонецЦикла;
		
	КонецЕсли;

	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ);
	
	СкладПроводок = Справочники.Склады.ПустаяСсылка();

	// Проводки по взаиморасчетам
	СуммаУслугСНДС = Услуги.Итог("Сумма")+?(СтруктураШапкиДокумента.СуммаВключаетНДС,0,Услуги.Итог("СуммаНДС"))+
		Товары.Итог("Сумма")+?(СтруктураШапкиДокумента.СуммаВключаетНДС,0,Товары.Итог("СуммаНДС"));

	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок);
	Если СтруктураПараметровЗачетАванса = Ложь тогда
	   Отказ = Истина;
	Иначе
		//Возвращает сумму аванса в валюте регламентированного учета!
		ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметровЗачетАванса,СтруктураШапкиДокумента,СкладПроводок,ТаблицаПоТоварам,ТаблицаПоУслугам);
		СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению, Отказ);
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса, мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
		КонецЕсли;
	КонецЕсли;

	//Учет курсовых разниц
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
		СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок);
		ПроводкиБУ.Записать(Ложь);
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР,ПроводкиБУ,мВалютаРегламентированногоУчета,Истина);
		ПроводкиБУ.Записать(Ложь);
	КонецЕсли; // Учет курсовых разниц
	
	ПроводкиБУ.Записать(Ложь);
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура формирует движения по регистру "ТоварыОрганизацийРегл"
Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	НаборДвижений = Движения.ТоварыОрганизацийРегл;

	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоМатериалам", ТаблицаПоМатериалам);
	
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");

	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей,СтруктураСложныхПолей)
	
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	,  "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	
	СтруктураПолей.Вставить("СчетЗатрат"                ,  "Ссылка.СчетЗатрат" );
	СтруктураПолей.Вставить("Забалансовый"              ,  "Ссылка.СчетЗатрат.Забалансовый");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"       ,  "НалоговоеНазначение");   
	СтруктураПолей.Вставить("ВидДеятельностиНДС"        ,  "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  ,  "НалоговоеНазначение.ВидНалоговойДеятельности");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат"       ,  "Ссылка.НалоговоеНазначениеДоходовИЗатрат");   
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат"        ,  "Ссылка.НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат"  ,  "Ссылка.НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей,СтруктураСложныхПолей)

	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	
	СтруктураПолей.Вставить("СчетЗатрат",   "СчетЗатрат" );
	СтруктураПолей.Вставить("Субконто1",    "Субконто1");
	СтруктураПолей.Вставить("Субконто2",    "Субконто2");
	СтруктураПолей.Вставить("Субконто3",    "Субконто3");
	СтруктураПолей.Вставить("Забалансовый"              , "СчетЗатрат.Забалансовый");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"        , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат"       ,  "НалоговоеНазначениеДоходовИЗатрат");   
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат"        ,  "НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат"  ,  "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиИспользованныеМатериалыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетЗатрат"  , "СчетЗатрат");
	СтруктураПолей.Вставить("КорСчетБУ"   , "СчетЗатрат"); 
	
    СтруктураПолей.Вставить("НалоговоеНазначение", "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеНовое", "НалоговоеНазначение");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиИспользованныеМатериалыРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Перем ВидОперации;
	
	ОтражатьВУправленческомУчете = Истина;
	ОтражатьВБухгалтерскомУчете  = Истина;

	ТипЗначения = ТипЗнч(Основание);
	Если ТипЗначения = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗначения = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки")
	 ИЛИ ТипЗначения = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
	Тогда
	
		ЗаполнитьДокументПоОснованиюУпр(Основание, ВидОперации);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
		
		Если НЕ ТипЗначения = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
			Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
			   И ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;	
	
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента(
			ЭтотОбъект,
			"СчетЗатрат", // ИмяРеквизитаСчетЗатрат
			""  		  // ИмяРеквизитаСубконто
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Товары,               	// ТабличнаяЧастьТовары
			ИспользованныеМатериалы,// ТабличнаяЧастьВозвратнаяТара
			Услуги,               	// ТабличнаяЧастьУслуги
			Неопределено,         	// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено   			// ТабличнаяЧастьБланкиСтрогогоУчета
		);
		
	КонецЕсли;	
	

	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");

	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ) Экспорт

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли; 
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()   

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

 	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	СтруктураШапкиДокумента.Вставить("Сделка", Заказ); // Для контроля взаиморасчетов

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                   , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                   , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом"  , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "НеОтноситьНаЗатратыПоНУ" 				 , "НеОтноситьНаЗатратыПоНУ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ"               , "ВидОперации"                   , "СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "СписыватьПартииПриПроведенииДокументов", "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
		
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
		
	СтруктураШапкиДокумента.Вставить("СписаниеПартий", Ложь);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();
    СтруктураСложныхПолей=Новый Структура;

	СтруктураПолей.Вставить("Услуга"                , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                 , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"      , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                  , "Цена");
	СтруктураПолей.Вставить("Коэффициент"           , "Коэффициент");
    СтруктураПолей.Вставить("СтатьяЗатрат",            "Ссылка.СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат",          "Ссылка.СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ВидЗатрат",          	   "Ссылка.СтатьяЗатрат.ВидЗатрат");   
	СтруктураПолей.Вставить("ПодразделениеОрганизации","Ссылка.ПодразделениеОрганизации");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"  , "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Заказ"                 , "Заказ");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураСложныхПолей);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,,СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполнения
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей=Новый Структура;

	СтруктураПолей.Вставить("Номенклатура"           , "Номенклатура");
	СтруктураПолей.Вставить("Набор"                 , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"             , "Количество");
	СтруктураПолей.Вставить("Сумма"                  , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"              , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                    , "СуммаНДС");
	
	СтруктураПолей.Вставить("Услуга",                  "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ЗаказПокупателя", 		   "Заказ");
	СтруктураПолей.Вставить("Заказ", 				   "Заказ");  
	СтруктураПолей.Вставить("СтатьяЗатрат",            "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат",          "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ВидЗатрат",          	   "СтатьяЗатрат.ВидЗатрат"); 
	СтруктураПолей.Вставить("Продукция",               "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции", "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукции",          "СерияПродукции");
	СтруктураПолей.Вставить("Цена"                   , "Цена");
	СтруктураПолей.Вставить("ПодразделениеОрганизации","Ссылка.ПодразделениеОрганизации");
	СтруктураПолей.Вставить("ОбъектСтроительства"    , "ОбъектСтроительства");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"  , "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Заказ"                 , "Заказ");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей,СтруктураСложныхПолей);
	
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей,,СтруктураСложныхПолей);
	
	ПогрешностиОкругления = Новый Соответствие;
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ТаблицаПоУслугам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	//Заполнение счетов в документах на этапе проведения
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаШапки			(СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента);
	
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьПризнакАмортизируетсяПриПоступлении(
			Неопределено, // ТаблицаПоТоварам
			Неопределено, // ТаблицаПоТаре
			ТаблицаПоТоварам, // ТаблицаПоУслугам
			Неопределено, // ТаблицаПоОборудованию
			Неопределено, // ТаблицаПоОбъектамСтроительства 
			Неопределено, //ТаблицаПоБланкам 
			"СчетЗатрат" // ИмяРеквизитаСчетЗатрат 
		);
		
		НалоговыйУчет.ЗаполнитьПризнакАмортизируетсяПриПоступлении(
			Неопределено, // ТаблицаПоТоварам
			Неопределено, // ТаблицаПоТаре
			ТаблицаПоУслугам, // ТаблицаПоУслугам
			Неопределено, // ТаблицаПоОборудованию
			Неопределено, // ТаблицаПоОбъектамСтроительства 
			Неопределено, //ТаблицаПоБланкам 
			"СчетЗатрат" // ИмяРеквизитаСчетЗатрат 
		);
	КонецЕсли; 	
	
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
    Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	// Получим необходимые данные для проведения и проверки заполнения
	// по табличной части "Возвратная тара".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТара();
	СтруктураПолей.Вставить("ЗаказПокупателя"      , "Ссылка.Сделка");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"  , "Ссылка.Сделка.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя", "Ссылка.Сделка.Склад");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
							"Ссылка.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

	// Получим необходимые данные для проведения и проверки заполнения по табличной части "Использованные материалы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтрокиДокумента"      , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ВестиОперативныйУчетОстатковНЗП", "Номенклатура.ВестиОперативныйУчетОстатковНЗП");
	
	СтруктураПолей.Вставить("Затрата"              		, "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаЗатраты"		, "ХарактеристикаНоменклатуры");

	СтруктураПолей.Вставить("Услуга"                	, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Заказ"       				, "Заказ");
	СтруктураПолей.Вставить("ЗаказСписания"       		, "Заказ"); 
	СтруктураПолей.Вставить("ЕдиницаИзмерения"      	, "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Цена"                  	, "Цена");
	СтруктураПолей.Вставить("Коэффициент"           	, "Коэффициент");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"  	, "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СтатьяЗатрат"  			, "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат"  			, "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ВидЗатрат"  				, "СтатьяЗатрат.ВидЗатрат");  
	СтруктураПолей.Вставить("ОбъектСтроительства"		, "ОбъектСтроительства");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");

	// Дополним полями, нужными для регл. и упр. учета
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ДополнитьСтруктуруПолейТабличнойЧастиИспользованныеМатериалыРегл(СтруктураПолей);
	КонецЕсли;
	
	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ИспользованныеМатериалы", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
	
	ПроводитьПоВзаиморасчетам = (СуммаДокумента > 0);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);   
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураОбязательныхПолей = Новый Структура();
	СтруктураОбязательныхПолей.Вставить("Номенклатура");
	СтруктураОбязательныхПолей.Вставить("Количество");
	СтруктураОбязательныхПолей.Вставить("СтатьяЗатрат");
    	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ИспользованныеМатериалы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ИспользованныеМатериалы", ТаблицаПоМатериалам, Отказ, Заголовок);

	//Заполнение счетов в документах на этапе проведения
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаШапки			(СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти	("Услуги", 						ТаблицаПоУслугам, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("ИспользованныеМатериалы", 	ТаблицаПоМатериалам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
        УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;
	
	мЕстьЗаказ = ЗначениеЗаполнено(Заказ);
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,
							ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоМатериалам, 
							ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);

	КонецЕсли;
						
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам));
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;

    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Поступление);
	СтруктураПараметров.Вставить("РасчетыВозврат",  	Перечисления.РасчетыВозврат.Расчеты);
	
	СтруктураПараметров.Вставить("ЕстьНДС",  			СтруктураШапкиДокумента.ЕстьНДС);
	СтруктураПараметров.Вставить("ВалютаДокумента",     СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("Период",     			СтруктураШапкиДокумента.Дата);
	
    СтруктураДвижений = Новый Структура;
	СтруктураДвижений.Вставить("НалоговыйУчет", 			 Движения.ПриобретенияНалоговыйУчет);
	СтруктураДвижений.Вставить("ОжидаемыИПодтвержденныйНДС", Движения.ОжидаемыйИПодтвержденныйНДСПриобретений);
	
	// ТОВАРЫ...
	МассивТаблицТоваров = Новый Массив();
	
	МассивТаблицТоваров.Добавить(ТаблицаПоТоварам);
	МассивТаблицТоваров.Добавить(ТаблицаПоУслугам);
	
	СтруктураПараметров.Вставить("ТаблицыТоваров", МассивТаблицТоваров);
	
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, мВалютаРегламентированногоУчета, Отказ);
	
КонецПроцедуры // 							  

Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ)
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СчетУчетаНДС","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СчетУчетаНДС","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.Свернуть("СделкаРегл, СчетУчетаНДС","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговый кредит: отгрузка";
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			
			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			Проводка.ВалютаКт                   = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт            = СтрокаТаблицы.ПроводкиСуммаНДСВал;
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметров,СтруктураШапкиДокумента,СкладПроводок,ТаблицаПоТоварам,ТаблицаПоУслугам)
	 
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
	ТаблицаДвижений.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		
	ТаблицаДвижений.Колонки.Добавить("Контрагент");
	ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
	ТаблицаДвижений.Колонки.Добавить("СчетАванса");
		
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент        , "Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора, "ВидДоговораКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "СчетОплаты");
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоАвансам    , "СчетАванса");
	
	Возврат ТаблицаДвижений;

КонецФункции


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяСделкиВШапкеДокумента", "Заказ"); 

