Перем мУдалятьДвижения;
Перем мПорядокСписанияПартий; // (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;

Перем УчетнаяПолитикаРегл;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;
//Перем ОтключитьКонтрольПоДатам Экспорт;
#Если Клиент Тогда
                   
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция ПечатьПоступлениеДопРасходов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Курс",            ЭтотОбъект.КурсВзаиморасчетов);
	Запрос.УстановитьПараметр("Кратность",       ЭтотОбъект.КратностьВзаиморасчетов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Контрагент,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	Организация КАК Покупатель,
	|	Содержание ,
	|	СуммаДокумента КАК СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	СтавкаНДС,
	|	ВложенныйЗапросТовары.СуммаНДСТовары + ВложенныйЗапросОборудование.СуммаНДСТовары+ СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапросТовары.СуммаДенег     + ВложенныйЗапросОборудование.СуммаДенег               КАК СуммаДенег,
	|	ВложенныйЗапросТовары.Количество     + ВложенныйЗапросОборудование.Количество               КАК Количество
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов,
	|	(ВЫБРАТЬ
	|		ВЫБОР КОГДА СУММА(ПоступлениеДопРасходовТовары.Сумма)             ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ СУММА(ПоступлениеДопРасходовТовары.Сумма)             КОНЕЦ КАК СуммаДенег,
	|		ВЫБОР КОГДА СУММА(ПоступлениеДопРасходовТовары.СуммаНДС)          ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ СУММА(ПоступлениеДопРасходовТовары.СуммаНДС)          КОНЕЦ КАК СуммаНДСТовары,
	|		ВЫБОР КОГДА КОЛИЧЕСТВО(ПоступлениеДопРасходовТовары.Номенклатура) ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КОЛИЧЕСТВО(ПоступлениеДопРасходовТовары.Номенклатура) КОНЕЦ КАК Количество
	|
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары       КАК ПоступлениеДопРасходовТовары
	|
	|	ГДЕ
	|		Ссылка = &ТекущийДокумент) КАК ВложенныйЗапросТовары,
	|
	|	(ВЫБРАТЬ
	|		ВЫБОР КОГДА СУММА(ПоступлениеДопРасходовОборудование.Сумма)             ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ СУММА(ПоступлениеДопРасходовОборудование.Сумма)             КОНЕЦ КАК СуммаДенег,
	|		ВЫБОР КОГДА СУММА(ПоступлениеДопРасходовОборудование.СуммаНДС)          ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ СУММА(ПоступлениеДопРасходовОборудование.СуммаНДС)          КОНЕЦ КАК СуммаНДСТовары,
	|		ВЫБОР КОГДА КОЛИЧЕСТВО(ПоступлениеДопРасходовОборудование.Номенклатура) ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КОЛИЧЕСТВО(ПоступлениеДопРасходовОборудование.Номенклатура) КОНЕЦ КАК Количество
	|
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Оборудование КАК ПоступлениеДопРасходовОборудование
	|
	|	ГДЕ
	|		Ссылка = &ТекущийДокумент) КАК ВложенныйЗапросОборудование
	|
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеДопРасходов_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Доп. расходы';uk='Дод. витрати'",КодЯзыкаПечать),КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		 = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	СуммаВсего = Шапка.СуммаДокумента - ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);

	СуммаИтого = СуммаВсего;

	ОбластьНомера.Параметры.НомерСтроки = 1;
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		//ОбластьКодов.Параметры.Артикул = Шапка.Содержание;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьДанных.Параметры.Количество  	= 1;
	ОбластьДанных.Параметры.Товар       	= Шапка.Содержание;
	ОбластьДанных.Параметры.Цена        	= СуммаВсего;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Сумма       = СуммаВсего;
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаИтого);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = ""+НСтр("ru='Всего наименований 1 , на сумму ';uk='Усього найменувань 1 , на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента) + ".";
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
										   + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать));
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // Печать

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

		// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеДопРасходов();
		

		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("Накладная","Доп. расходы");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

//Выполняет заполнение счетов учета в переданной строке табличной части
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансов);
		СтруктураСчетов.Вставить("СчетУчетаНДС", СчетаУчета.СчетУчетаНДСПриобретений);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	// для движения по регистру НДС Приобретений
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРеглРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(
		ТаблицаТоваров, 
		СтруктураШапкиДокумента, 
		ПогрешностиОкругления, 
		Истина // ЭтоПриобретение
	);
	
КонецПроцедуры // ДобавитьКолонкиТоваровРегл

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполниение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//	ЭтоБСУ - Булево - признак, что выполняется загрузка бланков строгой отчетности, которыми и дополняется ТабЧасть.
//					   Истина только для документов-основание содержащих ТЧ БланкиСтрогогоУчета.
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДокументОснование, ТабЧасть, ЭтоБСУ = Ложь) Экспорт

	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;

	ИмяДокумента = ДокументОснование.Метаданные().Имя;
	ИмяТабЧасти  = ?(ТабЧасть = Оборудование, "Оборудование", "Товары");
	ЭтоТовары    = (ТабЧасть = Товары);

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.Ссылка,
	|	Док.Ссылка.ВалютаДокумента,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Ссылка.УчитыватьНДС     КАК УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Док.Количество,
	|	Док.ЕдиницаИзмерения,
	|	" + ?(ИмяДокумента = "ПоступлениеТоваровУслуг" И ТабЧасть = Товары, "Док.Заказ КАК ЗаказПокупателя,",      "") + "
	|	" + ?(ЭтоБСУ, 	"Null КАК ХарактеристикаНоменклатуры,
					  	|	Null КАК СерияНоменклатуры,",
					  	"Док.ХарактеристикаНоменклатуры,
						|	Док.СерияНоменклатуры,") +
	"
	|	Док.СчетУчетаБУ,
	|	Док.НалоговоеНазначение 			КАК НалоговоеНазначение
	|
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ?(ЭтоБСУ, "БланкиСтрогогоУчета", ИмяТабЧасти) + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Табчасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ДокументПартии             = ДокументОснование;

		Если ИмяДокумента = "ПоступлениеТоваровУслуг"
		   И ТабЧасть = Товары Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		КонецЕсли;

		СтрокаТабличнойЧасти.СуммаТовара = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0), Выборка.ВалютаДокумента,
		                                   ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                   Курс,
		                                   ЗаполнениеДокументов.КратностьДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                   Кратность);

		ЗаполнитьСтрокуТоварыПоПоступлениюТоваровРегл(СтрокаТабличнойЧасти, Выборка, ЭтоТовары);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

Процедура ЗаполнитьСтрокуТоварыПоПоступлениюТоваровРегл(СтрокаТабличнойЧасти, Выборка, ЭтоТовары)

	СтрокаТабличнойЧасти.СчетУчетаБУ         = Выборка.СчетУчетаБУ;
	СтрокаТабличнойЧасти.СтавкаНДС           = Выборка.СтавкаНДС;
	СтрокаТабличнойЧасти.НалоговоеНазначение = Выборка.НалоговоеНазначение;
	

КонецПроцедуры // ЗаполнитьСтрокуТоварыПоПоступлениюТоваровРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьТаблицуТоваров(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)


	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("Качество");
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	Если (ТаблицаТоваров.Колонки.Найти("СуммаВзаиморасчетов") = Неопределено) тогда
		ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;

	// Недостающие поля.
	ТаблицаТоваров.Колонки.Добавить("СтатусПартии");
	ТаблицаТоваров.Колонки.Добавить("Заказ");
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.Вес = ?(СтрокаТаблицы.Вес = NULL, 0, СтрокаТаблицы.Вес);

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий  Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;

		//Смартис Лиманчук начало 23.01.2013
		//Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации ИЛИ
			 ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизацииНал Тогда
		//Смартис Лиманчук окончание 23.01.2013
			СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтоимостьСНДС, 
				СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
				СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
				СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		КонецЕсли;

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтоимостьСНДС, 
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДС, 
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		                                 
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Стоимость, 
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Если СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей=Истина Тогда
			СтрокаТаблицы.Заказ = СтрокаТаблицы.ЗаказПокупателя;
		КонецЕсли;

		Если СтрокаТаблицы.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
			Если СтрокаТаблицы.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию; 
			Иначе
				СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный; 
			КонецЕсли;

		ИначеЕсли СтрокаТаблицы.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВПереработку;

		//Смартис Лиманчук начало 05.12.2012
		//ИначеЕсли СтрокаТаблицы.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		ИначеЕсли СтрокаТаблицы.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование ИЛИ СтрокаТаблицы.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал Тогда
		//Смартис Лиманчук окончание 05.12.2012
			Если СтрокаТаблицы.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию; 
			Иначе
				СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный; 
			КонецЕсли;
		Иначе
			СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Процедура добавляет в таблицы данные о суммах распределения.
Процедура ДобавитьРаспределение( ТаблицаПоТоварам, ТаблицаПоОборудованию, СтруктураШапкиДокумента)
	
	Если ТаблицаПоТоварам.Колонки.Найти("СуммаУпрРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("СуммаУпрРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоТоварам.Колонки.Найти("НДСУпрРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("НДСУпрРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоОборудованию.Колонки.Найти("СуммаУпрРаспределения") = Неопределено тогда
		ТаблицаПоОборудованию.Колонки.Добавить("СуммаУпрРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоОборудованию.Колонки.Найти("НДСУпрРаспределения") = Неопределено тогда
		ТаблицаПоОборудованию.Колонки.Добавить("НДСУпрРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
		
	// Сумма к распределению
	Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий Тогда
		СуммаВсего = Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СуммаНДС, 0);
	Иначе
		//СуммаВсего = Сумма - ?(УчитыватьНДС И НЕ СуммаВключаетНДС, 0, СуммаНДС);
		СуммаВсего = Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, 0, СуммаНДС);
	КонецЕсли;
	СуммаВсегоСНДС = Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СуммаНДС, 0);
		
	СуммаВсегоУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаВсего, 
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект,	мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
	СуммаВсегоСНДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаВсегоСНДС, 
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект,	мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
	СуммаВсегоНДСУпр  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаНДС, 
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект,	мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КолКоэф    = ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу, "Вес",
			     ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество", "СуммаТовара"));
	МассивКоэф = ТаблицаПоТоварам.ВыгрузитьКолонку(КолКоэф);
		
	Для Каждого СтрокаТЧ Из ТаблицаПоОборудованию Цикл
		МассивКоэф.Добавить(СтрокаТЧ[КолКоэф]);
	КонецЦикла;
		
	МассивСумм     = ОбщегоНазначения.РаспределитьПропорционально( СуммаВсегоУпр, МассивКоэф, 2);
	МассивСуммСНДС = ОбщегоНазначения.РаспределитьПропорционально( СуммаВсегоСНДСУпр, МассивКоэф, 2);
	МассивНДСУпр   = ОбщегоНазначения.РаспределитьПропорционально( СуммаВсегоНДСУпр,  МассивКоэф, 2, ЛОЖЬ);
		
	Если Не МассивСумм = Неопределено Тогда
		СтрокТоваров = ТаблицаПоТоварам.Количество() - 1;
		Для К = 0 По СтрокТоваров Цикл
			ТаблицаПоТоварам[К].Стоимость             = ТаблицаПоТоварам[К].Стоимость + ?(СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий,МассивСумм[К],МассивСуммСНДС[К]);
			ТаблицаПоТоварам[К].СуммаУпрРаспределения = ТаблицаПоТоварам[К].СуммаУпрРаспределения + МассивСуммСНДС[К];
			ТаблицаПоТоварам[К].НДСУпрРаспределения   = ТаблицаПоТоварам[К].НДСУпр    + МассивНДСУпр[К];
		КонецЦикла;
		Для К = 0 По ТаблицаПоОборудованию.Количество() - 1 Цикл
			ТаблицаПоОборудованию[К].Стоимость              = ТаблицаПоОборудованию[К].Стоимость + ?(СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий,МассивСумм[К + СтрокТоваров + 1],МассивСуммСНДС[К + СтрокТоваров + 1]);
			ТаблицаПоОборудованию[К].СуммаУпрРаспределения  = ТаблицаПоОборудованию[К].СуммаУпрРаспределения + МассивСуммСНДС[К + СтрокТоваров + 1];
			ТаблицаПоОборудованию[К].НДСУпрРаспределения    = ТаблицаПоОборудованию[К].НДСУпр    + МассивНДСУпр[К + СтрокТоваров + 1];
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Колонки.Найти("СуммаВзаиморасчетовРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("СуммаВзаиморасчетовРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоТоварам.Колонки.Найти("СуммаРеглРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("СуммаРеглРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоОборудованию.Колонки.Найти("СуммаВзаиморасчетовРаспределения") = Неопределено тогда
		ТаблицаПоОборудованию.Колонки.Добавить("СуммаВзаиморасчетовРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	Если ТаблицаПоОборудованию.Колонки.Найти("СуммаРеглРаспределения") = Неопределено тогда
		ТаблицаПоОборудованию.Колонки.Добавить("СуммаРеглРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;

	// Сумма к распределению
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);
	
	//СуммаРегл нужна не только для БУ, но и для взаиморасчетов по документам расчетов
	СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		Сумма - ?(СуммаВключаетНДС, СуммаНДС, 0),
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),	Данные.Курс,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета), Данные.Кратность);

	СуммаНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаНДС,
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Данные.Курс,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета), Данные.Кратность);

	СуммаРасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтруктураШапкиДокумента.Сумма + ?(СтруктураШапкиДокумента.СуммаВключаетНДС,0, СтруктураШапкиДокумента.СуммаНДС),
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВзаиморасчетов,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВзаиморасчетов);
		
	КолКоэф    = ?( СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу,       "Вес",
			     ?( СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество", "СуммаТовара"));
	МассивКоэф = ТаблицаПоТоварам.ВыгрузитьКолонку(КолКоэф);
		
	Для Каждого СтрокаТЧ Из ТаблицаПоОборудованию Цикл
		МассивКоэф.Добавить(СтрокаТЧ[КолКоэф]);
	КонецЦикла;
		
	МассивСуммРегл = ОбщегоНазначения.РаспределитьПропорционально( СуммаРегл,     МассивКоэф, 2);
	МассивНДСРегл  = ОбщегоНазначения.РаспределитьПропорционально( СуммаНДСРегл,  МассивКоэф, 2);
	МассивСумм     = ОбщегоНазначения.РаспределитьПропорционально( Сумма,     МассивКоэф, 2);
	МассивНДС      = ОбщегоНазначения.РаспределитьПропорционально( СуммаНДС,  МассивКоэф, 2);
	МассивРасчеты  = ОбщегоНазначения.РаспределитьПропорционально( СуммаРасчетов, МассивКоэф, 2);
		
	СтрокТоваров = ТаблицаПоТоварам.Количество() - 1;
	Для К = 0 По СтрокТоваров Цикл
		Если Не МассивСуммРегл = Неопределено Тогда
			ТаблицаПоТоварам[К].ПроводкаСуммаРаспределения       = ТаблицаПоТоварам[К].ПроводкаСуммаРаспределения       + МассивСуммРегл[К];
		КонецЕсли;
		Если Не МассивНДСРегл = Неопределено Тогда
			ТаблицаПоТоварам[К].ПроводкаСуммаНДСРаспределения    = ТаблицаПоТоварам[К].ПроводкаСуммаНДСРаспределения    + МассивНДСРегл[К];
		КонецЕсли;
		Если Не МассивРасчеты = Неопределено Тогда
			ТаблицаПоТоварам[К].СуммаВзаиморасчетовРаспределения = ТаблицаПоТоварам[К].СуммаВзаиморасчетовРаспределения + МассивРасчеты[К];
		КонецЕсли;
		Если Не МассивСумм = Неопределено Тогда
			ТаблицаПоТоварам[К].Сумма = ТаблицаПоТоварам[К].Сумма + МассивСумм[К];
		КонецЕсли;
		Если Не МассивНДС = Неопределено Тогда
			ТаблицаПоТоварам[К].НДС = ТаблицаПоТоварам[К].НДС + МассивНДС[К];
		КонецЕсли;
	КонецЦикла;
		
	Для К = 0 По ТаблицаПоОборудованию.Количество() - 1 Цикл
		Если Не МассивСуммРегл = Неопределено Тогда
			ТаблицаПоОборудованию[К].ПроводкаСуммаРаспределения       = ТаблицаПоОборудованию[К].ПроводкаСуммаРаспределения       + МассивСуммРегл[К + СтрокТоваров + 1];
		КонецЕсли;
		Если Не МассивНДСРегл = Неопределено Тогда
			ТаблицаПоОборудованию[К].ПроводкаСуммаНДСРаспределения    = ТаблицаПоОборудованию[К].ПроводкаСуммаНДСРаспределения    + МассивНДСРегл[К + СтрокТоваров + 1];
		КонецЕсли;
		Если Не МассивРасчеты = Неопределено Тогда
			ТаблицаПоОборудованию[К].СуммаВзаиморасчетовРаспределения = ТаблицаПоОборудованию[К].СуммаВзаиморасчетовРаспределения + МассивРасчеты[К + СтрокТоваров + 1];
		КонецЕсли;
		Если Не МассивСумм = Неопределено Тогда
			ТаблицаПоОборудованию[К].Сумма = ТаблицаПоОборудованию[К].Сумма + МассивСумм[К + СтрокТоваров + 1];
		КонецЕсли;
		Если Не МассивНДС = Неопределено Тогда
			ТаблицаПоОборудованию[К].НДС = ТаблицаПоОборудованию[К].НДС + МассивНДС[К + СтрокТоваров + 1];
		КонецЕсли;
	КонецЦикла;
		
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		СтрокаТаблицы.СуммаРеглРаспределения = СтрокаТаблицы.ПроводкаСуммаРаспределения + СтрокаТаблицы.ПроводкаСуммаНДСРаспределения;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ТаблицаПоОборудованию Цикл
		СтрокаТаблицы.СуммаРеглРаспределения = СтрокаТаблицы.ПроводкаСуммаРаспределения + СтрокаТаблицы.ПроводкаСуммаНДСРаспределения;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьРаспределение()

Процедура РаспределитьПоСкладам(ТаблицаПоТоварам, ТаблицаРаспределенияПоСкладам, СтруктураШапкиДокумента, СтатусПартии, Отказ, Заголовок)
	
	ДопСтроки = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из ТаблицаПоТоварам.Колонки Цикл
		ДопСтроки.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Если ДопСтроки.Колонки.Найти("СуммаВзаиморасчетов") = Неопределено Тогда
		ДопСтроки.Колонки.Добавить("СуммаВзаиморасчетов");	
	КонецЕсли; 
	
	ТаблицаПоТоварам.Колонки.Добавить("ФлагСтаройСтроки");
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		// В таблице распределения по складам могут быть записи с любыми комбинациями 
		// ДокументОприходования, Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры
		// Отберем нужные
		СтруктураПоиска = Новый Структура ("ДокументОприходования, Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры, СтатусПартии",
											Строка.ДокументОприходования,
											Строка.Номенклатура,
											Строка.СерияНоменклатуры,
											Строка.ХарактеристикаНоменклатуры,
											СтатусПартии);
		МассивСтрокРаспределения = ТаблицаРаспределенияПоСкладам.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокРаспределения.Количество() = 0 тогда
			ТекстСообщения = "Не найден в документе "+ Строка.ДокументОприходования
			+ " товар " + Строка.Номенклатура
			+ ?(Строка.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + Строка.ХарактеристикаНоменклатуры, "")
			+ ?(Строка.Номенклатура.ВестиУчетПоСериям, ", серия: " + Строка.СерияНоменклатуры, "");
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		ИтогоКоличество = 0;
		Для Каждого Элемент Из МассивСтрокРаспределения Цикл
			ИтогоКоличество = ИтогоКоличество + Элемент.Количество;
		КонецЦикла;
		
		РаспределяемаяСумма 							= Строка.Стоимость;
		РаспределяемаяПроводкаСумма 					= Строка.ПроводкаСумма;
		РаспределяемаяПроводкаСуммаНДС 					= Строка.ПроводкаСуммаНДС;
		РаспределяемаяСуммаВзаиморасчетов 				= Строка.СуммаВзаиморасчетов;
		РаспределяемаяПроводкаСуммаРаспределения 		= Строка.ПроводкаСуммаРаспределения;
		РаспределяемаяПроводкаСуммаНДСРаспределения 	= Строка.ПроводкаСуммаНДСРаспределения;
		РаспределяемаяСуммаВзаиморасчетовРаспределения 	= Строка.СуммаВзаиморасчетовРаспределения;
		
		РаспределяемаяСуммаРег 							= Строка.Сумма;
		РаспределяемаяНДСРег 							= Строка.НДС;
		РаспределяемаяСуммаУпр 							= Строка.СуммаУпр;
		РаспределяемаяНДСУпр 							= Строка.НДСУпр;

        РаспределяемоеКоличество 						= Строка.Количество;
		Для Каждого Элемент Из МассивСтрокРаспределения Цикл
			
			Если ИтогоКоличество<=0 Тогда         
				Прервать;
			КонецЕсли;
			
			Если Элемент.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДопСтрока = ДопСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(ДопСтрока,Строка);
			
			ДопСтрока.Склад 	= Элемент.Склад;
			ДопСтрока.ВидСклада = Элемент.ВидСклада;
			
			Если Элемент.Количество<ИтогоКоличество Тогда
				КоэффРаспред = Элемент.Количество/ИтогоКоличество;
			Иначе
				КоэффРаспред = 1;
			КонецЕсли;
			
			ДопСтрока.Стоимость 						= Окр(РаспределяемаяСумма * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.ПроводкаСумма 					= Окр(РаспределяемаяПроводкаСумма * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.ПроводкаСуммаНДС 					= Окр(РаспределяемаяПроводкаСуммаНДС * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.СуммаВзаиморасчетов 				= Окр(РаспределяемаяСуммаВзаиморасчетов * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.ПроводкаСуммаРаспределения 		= Окр(РаспределяемаяПроводкаСуммаРаспределения * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.ПроводкаСуммаНДСРаспределения 	= Окр(РаспределяемаяПроводкаСуммаНДСРаспределения * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.СуммаВзаиморасчетовРаспределения 	= Окр(РаспределяемаяСуммаВзаиморасчетовРаспределения * КоэффРаспред,2,РежимОкругления.Окр15как20);
			
			ДопСтрока.Сумма 							= Окр(РаспределяемаяСуммаРег * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.НДС 								= Окр(РаспределяемаяНДСРег * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.СуммаУпр 							= Окр(РаспределяемаяСуммаУпр * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.НДСУпр 							= Окр(РаспределяемаяНДСУпр * КоэффРаспред,2,РежимОкругления.Окр15как20);
 			
			ДопСтрока.Количество 						= Окр(РаспределяемоеКоличество * КоэффРаспред,3,РежимОкругления.Окр15как20);


			РаспределяемаяСумма 							= РаспределяемаяСумма - ДопСтрока.Стоимость;
			РаспределяемаяПроводкаСумма 					= РаспределяемаяПроводкаСумма  - ДопСтрока.ПроводкаСумма;
			РаспределяемаяПроводкаСуммаНДС 					= РаспределяемаяПроводкаСуммаНДС - ДопСтрока.ПроводкаСуммаНДС;
			РаспределяемаяСуммаВзаиморасчетов 				= РаспределяемаяСуммаВзаиморасчетов - ДопСтрока.СуммаВзаиморасчетов;
			РаспределяемаяПроводкаСуммаРаспределения 		= РаспределяемаяПроводкаСуммаРаспределения - ДопСтрока.ПроводкаСуммаРаспределения;
			РаспределяемаяПроводкаСуммаНДСРаспределения 	= РаспределяемаяПроводкаСуммаНДСРаспределения - ДопСтрока.ПроводкаСуммаНДСРаспределения;
			РаспределяемаяСуммаВзаиморасчетовРаспределения 	= РаспределяемаяСуммаВзаиморасчетовРаспределения - ДопСтрока.СуммаВзаиморасчетовРаспределения;
				
			РаспределяемаяСуммаРег 							= РаспределяемаяСуммаРег - ДопСтрока.Сумма;
			РаспределяемаяНДСРег 							= РаспределяемаяНДСРег - ДопСтрока.НДС;
			РаспределяемаяСуммаУпр 							= РаспределяемаяСуммаУпр - ДопСтрока.СуммаУпр;
			РаспределяемаяНДСУпр 							= РаспределяемаяНДСУпр - ДопСтрока.НДСУпр;

			РаспределяемоеКоличество 						= РаспределяемоеКоличество - ДопСтрока.Количество;
			
			ИтогоКоличество = ИтогоКоличество - Элемент.Количество;
			
		КонецЦикла;
		// Исходная строка будет с 0 суммой
		Строка.Стоимость = 0;
		Строка.ПроводкаСуммаРаспределения = 0;
		Строка.ФлагСтаройСтроки = Истина;
	КонецЦикла;
	
	// Теперь доп строки добавим в таблицу по товарам
	Для Каждого ДопСтрока Из ДопСтроки Цикл
		НоваяСтрока = ТаблицаПоТоварам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДопСтрока);
	КонецЦикла;
			
	// После обработки удалим строки с нулевыми суммами
	Инд=0;
	Пока Инд<ТаблицаПоТоварам.Количество() Цикл
		Если ТаблицаПоТоварам[Инд].ФлагСтаройСтроки = Истина Тогда
			ТаблицаПоТоварам.Удалить(Инд);
		Иначе
			Инд = Инд+1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПоТоварам.Колонки.Удалить("ФлагСтаройСтроки");

КонецПроцедуры//РаспределитьПоСкладам

Процедура РаспределитьДопРасходыТоваровПоСкладам(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ЗапросРаспределенияПоСкладам = Новый Запрос;
	ЗапросРаспределенияПоСкладам.Текст = "ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка КАК ДокументОприходования,
	                                     |	ДокументОприходованияТовары.Склад КАК Склад,
										 |	ДокументОприходованияТовары.Склад.ВидСклада КАК ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура КАК Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент КАК Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма) КАК Сумма,
	                                     |	СУММА(ДокументОприходованияТовары.Количество) КАК Количество,
	                                     |	&СтатусПартии КАК СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
										 |	ДокументОприходованияТовары.Ссылка.Склад.ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	&СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ПоступлениеТоваровУслугВНТТ.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Ссылка.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Склад,
										 |	ДокументОприходованияТовары.Склад.ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	&СтатусПартии
	                                     |ИЗ
	                                     |	Документ.АвансовыйОтчет.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
										 |	ДокументОприходованияТовары.Ссылка.Склад.ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	ДокументОприходованияТовары.СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ОприходованиеТоваров.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СтатусПартии = &СтатусПартии
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.СтатусПартии";

	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Ссылка", ТаблицаПоТоварам.ВыгрузитьКолонку("ДокументОприходования"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Номенклатура", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ХарактеристикаНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СерияНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	
	ТаблицаРаспределенияПоСкладам = ЗапросРаспределенияПоСкладам.Выполнить().Выгрузить();
	
	РаспределитьПоСкладам(ТаблицаПоТоварам, ТаблицаРаспределенияПоСкладам, СтруктураШапкиДокумента, Перечисления.СтатусыПартийТоваров.Купленный, Отказ, Заголовок);

КонецПроцедуры//РаспределитьДопРасходыТоваровПоСкладам

Процедура РаспределитьДопРасходыОборудованияПоСкладам(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ЗапросРаспределенияПоСкладам = Новый Запрос;
	ЗапросРаспределенияПоСкладам.Текст = "ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка КАК ДокументОприходования,
	                                     |	ДокументОприходованияТовары.Склад КАК Склад,
										 |	ДокументОприходованияТовары.Склад.ВидСклада КАК ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура КАК Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент КАК Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма) КАК Сумма,
	                                     |	СУММА(ДокументОприходованияТовары.Количество) КАК Количество,
	                                     |	&СтатусПартии КАК СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
										 |	ДокументОприходованияТовары.Ссылка.Склад.ВидСклада,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	ДокументОприходованияТовары.СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ОприходованиеТоваров.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СтатусПартии = &СтатусПартии
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.СтатусПартии";

	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Ссылка", ТаблицаПоТоварам.ВыгрузитьКолонку("ДокументОприходования"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Номенклатура", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ХарактеристикаНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СерияНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"));
	СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование;
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СтатусПартии", СтатусПартии);
	
	ТаблицаРаспределенияПоСкладам = ЗапросРаспределенияПоСкладам.Выполнить().Выгрузить();
	
	РаспределитьПоСкладам(ТаблицаПоТоварам, ТаблицаРаспределенияПоСкладам, СтруктураШапкиДокумента, СтатусПартии, Отказ, Заголовок);

КонецПроцедуры//РаспределитьДопРасходыТоваровПоСкладам

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	// Получаем информацию по валюте в которой нужно получить результат 
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма"                , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаРаспределения"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДСРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаРегл"                    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));


	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.ПроводкаСумма = СтрокаТаблицы.Стоимость;

		НДС           = СтрокаТаблицы.НДС;
		СуммаПоСтроке = ?(СуммаВключаетНДС, СтрокаТаблицы.ПроводкаСумма - НДС, СтрокаТаблицы.ПроводкаСумма);

		СтрокаТаблицы.ПроводкаСумма = СуммаПоСтроке;

		// Сначала выполняем распределение в той валюте, в которой внесены данные в документ

		// Полученный результат распределения пересчитаем в валюту регламентированного учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСуммаНДС = СтрокаТаблицы.НДС;
            СтрокаТаблицы.СуммаРегл = СуммаПоСтроке + НДС;
		Иначе

			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ПроводкаСумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
											 
			СтрокаТаблицы.ПроводкаСуммаНДС  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.ПроводкаСумма,
												СтруктураШапкиДокумента.УчитыватьНДС,
												ИСТИНА,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругления);
												
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту((СуммаПоСтроке + НДС), СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета,
			                                 Данные.Кратность);
								 
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Функция ПодготовитьТаблицуОборудования(РезультатЗапросаПоОборудования, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаОборудования = РезультатЗапросаПоОборудования.Выгрузить();

	ТаблицаОборудования.Колонки.Добавить("Стоимость");
	ТаблицаОборудования.ЗагрузитьКолонку( ТаблицаОборудования.ВыгрузитьКолонку("Сумма"), "Стоимость");
	
	ТаблицаОборудования.Колонки.Добавить("Качество");
	ТаблицаОборудования.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ПодготовитьТаблицуОборудованияРегл(ТаблицаОборудования, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуОборудованияУпр (ТаблицаОборудования, СтруктураШапкиДокумента);

	Возврат ТаблицаОборудования;

КонецФункции // ПодготовитьТаблицуОборудования()

Процедура ПодготовитьТаблицуОборудованияУпр(ТаблицаОборудования, СтруктураШапкиДокумента)

	Если ТаблицаОборудования.Колонки.Найти("СуммаВзаиморасчетов") = Неопределено тогда
		ТаблицаОборудования.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	ТаблицаОборудования.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаОборудования.Колонки.Добавить("НДСУпр",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Недостающие поля.
	ТаблицаОборудования.Колонки.Добавить("СтатусПартии");

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаОборудования Цикл

		НДС           = СтрокаТаблицы.НДС;
		СуммаПоСтроке = ?(СуммаВключаетНДС, СтрокаТаблицы.Стоимость - НДС, СтрокаТаблицы.Стоимость);
		
		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;

		//Смартис Лиманчук начало 23.01.2013
		//Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации ИЛИ
			 ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизацииНал Тогда
		//Смартис Лиманчук окончание 23.01.2013
			СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтоимостьСНДС,
				ЗаполнениеДокументов.КурсДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета),
				КурсВзаиморасчетов,
				ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета),
				КратностьВзаиморасчетов);
		КонецЕсли;

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
										 СтруктураШапкиДокумента.КурсДокумента,
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
										 СтруктураШапкиДокумента.КратностьДокумента,
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		                                 
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
				СтруктураШапкиДокумента.КурсДокумента,
				СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
				СтруктураШапкиДокумента.КратностьДокумента,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование; 

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуОборудованияУпр()

Процедура ПодготовитьТаблицуОборудованияРегл(ТаблицаОборудования, СтруктураШапкиДокумента, ПогрешностиОкругления)

	// Получаем информацию по валюте в которой нужно получить результат 
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	ТаблицаОборудования.Колонки.Добавить("ПроводкаСумма"                , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаОборудования.Колонки.Добавить("ПроводкаСуммаНДС"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаОборудования.Колонки.Добавить("ПроводкаСуммаРаспределения"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаОборудования.Колонки.Добавить("ПроводкаСуммаНДСРаспределения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    ТаблицаОборудования.Колонки.Добавить("СуммаРегл"                    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	ДополнитьВзаиморасчеты = (ТаблицаОборудования.Колонки.Найти("СуммаВзаиморасчетов") = Неопределено);
	Если ДополнитьВзаиморасчеты тогда
		ТаблицаОборудования.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОборудования Цикл
		

		СтрокаТаблицы.ПроводкаСумма = СтрокаТаблицы.Стоимость;

		НДС           = СтрокаТаблицы.НДС;
		СуммаПоСтроке = ?(СуммаВключаетНДС, СтрокаТаблицы.ПроводкаСумма - НДС, СтрокаТаблицы.ПроводкаСумма);

		СтрокаТаблицы.ПроводкаСумма = СуммаПоСтроке;

		//Смартис Лиманчук начало 23.01.2013
		//Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации и ДополнитьВзаиморасчеты Тогда
		Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизацииНал) и ДополнитьВзаиморасчеты Тогда
		//Смартис Лиманчук окончание 23.01.2013
			СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаПоСтроке + НДС,
				СтруктураШапкиДокумента.КурсДокумента,
				СтруктураШапкиДокумента.КурсВзаиморасчетов,
				СтруктураШапкиДокумента.КратностьДокумента,
				СтруктураШапкиДокумента.КратностьВзаиморасчетов);
		КонецЕсли;

		// Сначала выполняем распределение в той валюте, в которой внесены данные в документ

		// Полученный результат распределения пересчитаем в валюту регламентированного учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСуммаНДС = СтрокаТаблицы.НДС;
			СтрокаТаблицы.СуммаРегл = СуммаПоСтроке + НДС;

		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ПроводкаСумма, СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
				СтруктураШапкиДокумента.КурсДокумента,
				Данные.Курс, 
				СтруктураШапкиДокумента.КратностьДокумента,
				Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
				СтруктураШапкиДокумента.КурсДокумента,
				Данные.Курс, 
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета,
				Данные.Кратность);
				
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту((СуммаПоСтроке + НДС), СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета,
			                                 Данные.Кратность);
	
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметров,СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию)
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// ОБОРУДОВАНИЕ
	ТаблицаКопия = ТаблицаПоОборудованию.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	
	ТаблицаДвижений.Колонки.Добавить("Контрагент");
	ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
	ТаблицаДвижений.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент        , "Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора        , "ВидДоговораКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "СчетОплаты");
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоАвансам    , "СчетАванса");
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		
	   Если СтруктураШапкиДокумента.ЕстьНДС
		   И СтруктураШапкиДокумента.УчитыватьНДС Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл()	

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, СпособРаспределения, 
	                                 |ВалютаДокумента");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, СпособРаспределения, 
	                                 |ВалютаДокумента, Контрагент, ДоговорКонтрагента, 
	                                 |КурсВзаиморасчетов,КратностьВзаиморасчетов");
	КонецЕсли;

	Если Сумма = 0 Тогда
		СтруктураОбязательныхПолей.Удалить("СпособРаспределения");
	ИначеЕсли Товары.Количество() = 0
	        И Оборудование.Количество() = 0 
			И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			// нельзя относить сумму доп. расходов "в никуда"
			ОбщегоНазначения.СообщитьОбОшибке("Невозможно распределить сумму расхода! Нет строк в табличных частях документа!", Отказ, Заголовок);
	КонецЕсли;

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		                      "По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
		                       |Заполните поле ""Заказ поставщику""!");
	КонецЕсли;
	
	Если УчитыватьНДС Тогда 
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
		
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет нет ли среди документов партии поступлений товаров на комиссию
//
Процедура ПроверитьЧтоНетКомиссии(ТаблицаПоТоварам, Отказ, Заголовок)
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам Цикл
		Если СтрокаТаблицы.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части ""Товары"" в качестве документа партии выбрано поступление на комиссию.",
							   Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЧтоНетКомиссии()

// Если способ распределения установлен по весу, то проверяется сумма весов по всем строкам
//
Процедура ПроверитьВес(ТаблицаПоТоварам, Отказ, Заголовок)

	Если СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
		Если ТаблицаПоТоварам.Количество() > 0
		   И ТаблицаПоТоварам.Итог("Вес") = 0 Тогда
			ТекстСообщения = "Суммарный вес всех позиций номенклатуры равен нулю!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, ИмяТабЧасти)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьВес(ТаблицаПоТоварам, Отказ, Заголовок);

	ПроверитьЧтоНетКомиссии(ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);
	
	Для Каждого СтрокаТаб Из ТаблицаПоТоварам Цикл
		Если СтрокаТаб.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ОбщегоНазначения.СообщитьОбОшибке( "Нельзя относить доп. расходы на поступление материалов в переработку! (строка № " + СтрокаТаб.НомерСтроки + ")", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

	
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоТоварам, 
					ИмяТабЧасти,
					Отказ, 
					Заголовок, 
					"Поступление", // ВидОперации
					Ложь           // ЭтоЗатраты 
	);	
	
	
	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, 
								ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ,Заголовок,РежимПроведения)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок, РежимПроведения);
	ДвиженияПоРегистрамБухгалтерииРегл(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок, РежимПроведения);	
	
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
												 Отказ, Заголовок, СтруктураШапкиДокумента);
												 
КонецПроцедуры

// Формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  СтруктураШапкиДокумента  - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам         - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоОборудованию    - таблица значений, содержащая данные для проведения и проверки ТЧ Оборудование
//  Отказ                    - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок, РежимПроведения)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(
		ЭтотОбъект,
		СтруктураШапкиДокумента, 
		мСтруктураПараметровВзаиморасчетов, 
		ТаблицаПоВзаиморасчетам, 
		ТаблицаПоРасчетам, 
		ВидДвиженияНакопления.Расход, 
		Отказ, 
		Заголовок);
	
	
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, 
		Отказ, 
		ТаблицаПоТоварам, 
		Неопределено, 
		ТаблицаПоОборудованию, 
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, 
		ЛОЖЬ);
	
	// ТОВАРЫ ПО РЕГИСТРУ доп.расходов для последующего распределения
	НаборДвижений = Движения.ДопРасходыНаПриобретениеТоваров;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТабЗатрат = ТаблицаПоТоварам.Скопировать();
	
	//добавление движений по оборудованию
	Для каждого СтрокаОборудование из ТаблицаПоОборудованию цикл
		СтрокаЗатрат = ТабЗатрат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗатрат,СтрокаОборудование);
	КонецЦикла;
	
	// Из таблицы по товарам выделим строки, для которых НЕ заполнен документ оприходования
	Инд=0;
	Пока Инд<ТабЗатрат.Количество() Цикл
		
		Если ЗначениеЗаполнено(ТабЗатрат[Инд].ДокументОприходования) Тогда
			ТабЗатрат.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТабЗатрат.Колонки.Найти("Сумма")<>Неопределено Тогда
		ТабЗатрат.Колонки.Удалить("Сумма");
	КонецЕсли;
	ТабЗатрат.Колонки.Стоимость.Имя = "Сумма";
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабЗатрат, ТаблицаДвижений);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ДопРасходыНаПриобретениеТоваров.ВыполнитьПриход();
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		// ТОВАРЫ ПО РЕГИСТРУ Закупки.
		
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийЗакупки = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаПоЗакупкам = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоЗакупкам.Колонки.ДокументОприходования.Имя = "ДокументЗакупки";
		ТаблицаПоЗакупкам.Колонки.НДС.Имя = "_НДС";
		ТаблицаПоЗакупкам.Колонки.НДСУпрРаспределения.Имя = "НДС";
		
		Для каждого СтрокаЗакупки из ТаблицаПоЗакупкам цикл
			СтрокаЗакупки.Стоимость = СтрокаЗакупки.СуммаУпр + СтрокаЗакупки.СуммаУпрРаспределения;
		КонецЦикла;
		
		//добавление движений по оборудованию
		Для каждого СтрокаОборудование из ТаблицаПоОборудованию цикл
			СтрокаЗакупки = ТаблицаПоЗакупкам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗакупки,СтрокаОборудование);
			СтрокаЗакупки.Стоимость = СтрокаЗакупки.СуммаУпр + СтрокаЗакупки.СуммаУпрРаспределения;
			СтрокаЗакупки.НДС = СтрокаОборудование.НДСУпрРаспределения;
			СтрокаЗакупки.ДокументЗакупки = СтрокаОборудование.ДокументОприходования;
		КонецЦикла;
		
		ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоЗакупкам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, 		  "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, 		  "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(0,                  "Количество");
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			ИЛИ (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			И  СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом) Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПоставщику");
		КонецЕсли;
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
		
		
	КонецЕсли;

	
КонецПроцедуры // ДвиженияПоРегистрамУпр()	

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	//Смартис Лиманчук начало 23.01.2013
	//Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизацииНал Тогда
	//Смартис Лиманчук окончание 23.01.2013
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

// Формирует бухгалтерские и налоговые проводки по регистрам бухгалтерии
// а также регистрирует НДС с распределяемых доп. расходов в регистре НДСДопРасходы
// 
Процедура ДвиженияПоРегистрамБухгалтерииРегл(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок, РежимПроведения)
	
	Если (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) 
	//Смартис Лиманчук начало 23.01.2013
	//   И (ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации) Тогда
	     И (ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизацииНал) Тогда
	//Смартис Лиманчук окончание 23.01.2013

		ПроводкиБУ = Движения.Хозрасчетный;
		ДатаДока   = Дата;

		ИтогоКоличество  = ТаблицаПоТоварам.Итог("Количество");
		ИтогоСуммаТовара = ТаблицаПоТоварам.Итог("СуммаТовара");

		ОбщаяТаблицаДокумента = ТаблицаПоТоварам.Скопировать();
		
		ТаблицаКопия = ТаблицаПоОборудованию.Скопировать();
		ТаблицаКопия.Очистить();
		ТаблицаКопия.Колонки.Удалить("СуммаВзаиморасчетов");
		Для Каждого СтрокаОборуд Из ТаблицаПоОборудованию Цикл
			НоваяСтрока = ОбщаяТаблицаДокумента.Добавить();
			ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, СтрокаОборуд, ТаблицаКопия);
		КонецЦикла;
		ОбщаяТаблицаДокумента.Колонки.Добавить("Сделка");
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ОбщаяТаблицаДокумента.ЗаполнитьЗначения(Неопределено, "Сделка");
		Иначе
			ОбщаяТаблицаДокумента.ЗаполнитьЗначения(Сделка, "Сделка");
		КонецЕсли;
		
		УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента, Отказ, ОбщаяТаблицаДокумента, , , , , СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете);
		
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
			?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
			СтруктураШапкиДокумента, 
			Отказ, 
			ТаблицаПоТоварам, 
			Неопределено, 
			ТаблицаПоОборудованию, 
			ЛОЖЬ,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете);
				
		// Проводки по дополнительным расходам
		Для каждого СтрокаТЧ из ОбщаяТаблицаДокумента Цикл
			
			Если СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда
				СуммаВПроводку = СтрокаТЧ.ПроводкиСуммаБезНДСРегл + СтрокаТЧ.ПроводкиСуммаНДСРегл;
			Иначе
				СуммаВПроводку = СтрокаТЧ.ПроводкиСуммаБезНДСРегл;
			КонецЕсли;
			
			Если Не СуммаВПроводку = 0 Тогда
				Если СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда
				Иначе
					
					// Проводки по НДС
					Если СтруктураШапкиДокумента.УчитыватьНДС И (СтрокаТЧ.ПроводкиСуммаНДСРегл) > 0 Тогда
						Проводка = ПроводкиБУ.Добавить();

						Проводка.Период                 = Дата;
						Проводка.Организация            = СтруктураШапкиДокумента.Организация;
						Проводка.Активность   			= Истина;
						Проводка.Содержание   			= "НДС: налоговый кредит: поступление";
						Проводка.НомерЖурнала 			= "";

						Проводка.СчетДт                 = СтрокаТЧ.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , СтрокаТЧ.СделкаРегл);

						Проводка.СчетКт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"     , СтрокаТЧ.СделкаРегл);
						
						Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
							Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаКт = СтрокаТЧ.ПроводкиСуммаНДСВал;
						КонецЕсли;
						Проводка.Сумма                  = СтрокаТЧ.ПроводкиСуммаНДСРегл;
					КонецЕсли; // Проводки по НДС
				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;
		
		// Проводки по регл. взаиморасчетам
		СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок);
		Если СтруктураПараметровЗачетАванса <> Ложь Тогда
			ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметровЗачетАванса,СтруктураШапкиДокумента,ТаблицаПоТоварам, ТаблицаПоОборудованию);
			СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
			БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению, Отказ);
			
			Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
				
				БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
				
				БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
			КонецЕсли;
		КонецЕсли;
		
		//Учет курсовых разниц
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
			СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка, Заголовок);
			ПроводкиБУ.Записать(Ложь);
			БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР,ПроводкиБУ,мВалютаРегламентированногоУчета,Истина);
			ПроводкиБУ.Записать(Ложь);
		КонецЕсли; // Учет курсовых разниц

	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПроводкиБУ.Записать(ложь);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамБухгалтерииРегл()

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()	

Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам", "МоментОпределенияБазыНДСПоПокупкам");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                                            , "ВидДоговораКонтрагента");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеРегл()	

Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей)

	СтруктураПолей.Вставить("Забалансовый"              , "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СчетУчетаБУ" ,   "СчетУчетаБУ");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"        , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

    ТипОснования = ТипЗнч(Основание);
	
	//Документ можно вводить только на основании поступлений
	Если ТипОснования <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	  И ТипОснования <> Тип("ДокументСсылка.АвансовыйОтчет")
	  И ТипОснования <> Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		Возврат;
	КонецЕсли;	
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход;
		КратностьВзаиморасчетов = Основание.КратностьДокумента;
		КурсВзаиморасчетов = Основание.КурсДокумента;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И
		Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТоварыПоПоступлениюТоваров(Основание, Товары);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		// Бланки в ТЧ Товары.
		ЗаполнитьТоварыПоПоступлениюТоваров(Основание, Товары, Истина);
		// Оборудование.
		ЗаполнитьТоварыПоПоступлениюТоваров(Основание, Оборудование);		
	КонецЕсли;
	
	// Заполним счета учета расчетов
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
	
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗРегл"             , УчетнаяПолитикаРегл.СпособОценкиМПЗ);
		
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитикаРегл.ЕстьНДС);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения=неопределено,Отказ = ложь) Экспорт
    // Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"       , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"        , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                 , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                 , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом" , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "НеОтноситьНаЗатратыПоНУ" 				 , "НеОтноситьНаЗатратыПоНУ");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам" , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "СпособОценкиМПЗ"              , "СпособОценкиМПЗ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий", "НеВключатьНДСВСтоимостьПартий");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "СписыватьПартииПриПроведенииДокументов"  , "СписыватьПартииПриПроведенииДокументов");

	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ = Ложь, Заголовок = "") Экспорт
	
	СтруктураПростыхПолей = Новый Структура;	
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Вставить("Услуга"                                     , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                                      , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                                   , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		 		         , "Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета");	
	СтруктураПолей.Вставить("ЗаказПокупателя"                            , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Вес"                                        , "ЕдиницаИзмерения.Вес * Количество");
	СтруктураПолей.Вставить("СуммаТовара"                                , "СуммаТовара");
	СтруктураПолей.Вставить("Сумма"                                		 , "Сумма");
	СтруктураПолей.Вставить("НДС"                                		 , "СуммаНДС");
	СтруктураПолей.Вставить("СтавкаНДС"         						 , "Ссылка.СтавкаНДС");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"                        , "ЗаказПокупателя.ВидОперации");
	СтруктураПолей.Вставить("ДокументОприходования"                      , "ДокументПартии");
	СтруктураПолей.Вставить("ВидДоговораПартии"                          , "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ДокументПартииВидОперации"                  , "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("ДокументПартииВидПоступления"               , "ДокументПартии.ВидПоступления");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"                      , "ЗаказПокупателя.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"                , "Номенклатура.ВестиПартионныйУчетПоСериям");
	
	СтруктураСложныхПолей = новый Структура();
    СтруктураСложныхПолей.Вставить("Склад"                                      , "ВЫБОР
																				|КОГДА ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслугВНТТ ТОГДА ДокументПартии.Склад
																				|КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары ТОГДА ДокументПартии.СкладОрдер.Склад
																				|ИНАЧЕ ДокументПартии.СкладОрдер КОНЕЦ"); 
	СтруктураСложныхПолей.Вставить("ВидСклада"                                      , "ВЫБОР 
																				|КОГДА ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслугВНТТ ТОГДА 
																				|		ДокументПартии.Склад.ВидСклада
																				|КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары ТОГДА 
																				|		ДокументПартии.СкладОрдер.Склад.ВидСклада
																				|ИНАЧЕ ВЫРАЗИТЬ(ДокументПартии.СкладОрдер КАК Справочник.Склады).ВидСклада КОНЕЦ"); 

	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	ПогрешностиОкругления 	  = Новый Соответствие;
	ТаблицаПоТоварам          = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаПоТоварам          = ПодготовитьТаблицуТоваров(ТаблицаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	СтруктураПолей.Удалить("ЗаказПокупателя");
	СтруктураПолей.Удалить("ВидЗаказаПокупателя");
	СтруктураПолей.Удалить("СкладЗаказаПокупателя");
	СтруктураПолей.Удалить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Удалить("СкладНТТОприходование");
	
	СтруктураПростыхПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", Ложь);
	
	СтруктураСложныхПолей = новый Структура();
	СтруктураСложныхПолей.Вставить("Склад"                                      , "ВЫБОР
																				|КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары ТОГДА ДокументПартии.СкладОрдер.Склад
																				|ИНАЧЕ ДокументПартии.СкладОрдер КОНЕЦ"); 
	СтруктураСложныхПолей.Вставить("ВидСклада"                                      , "ВЫБОР
																				|КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары ТОГДА ДокументПартии.СкладОрдер.Склад.ВидСклада
																				|ИНАЧЕ ВЫРАЗИТЬ(ДокументПартии.СкладОрдер КАК Справочник.Склады).ВидСклада КОНЕЦ"); 

	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	
	РезультатЗапросаПоОборудованию = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	ТаблицаПоОборудованию          = ПодготовитьТаблицуОборудования(РезультатЗапросаПоОборудованию, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоОборудованию);
	
	ДобавитьРаспределение(ТаблицаПоТоварам, ТаблицаПоОборудованию, СтруктураШапкиДокумента);
	
	Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам Тогда
		РаспределитьДопРасходыТоваровПоСкладам(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		РаспределитьДопРасходыОборудованияПоСкладам(ТаблицаПоОборудованию, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	//Заполнение счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 		СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Оборудование", 	ТаблицаПоОборудованию, 	СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда  
		ДобавитьКолонкиТоваровРегл(ТаблицаПоТоварам, 	  СтруктураШапкиДокумента, ПогрешностиОкругления);
		ДобавитьКолонкиТоваровРегл(ТаблицаПоОборудованию, СтруктураШапкиДокумента, ПогрешностиОкругления);
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьПризнакАмортизируетсяПриПоступлении(
			ТаблицаПоТоварам, // ТаблицаПоТоварам
			Неопределено, // ТаблицаПоТаре
			Неопределено, // ТаблицаПоУслугам
			ТаблицаПоОборудованию, // ТаблицаПоОборудованию
			Неопределено, // ТаблицаПоОбъектамСтроительства 
			Неопределено //ТаблицаПоБланкам 
		);
	КонецЕсли; 	
	
	
	
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
    //ИЗМЕНЕНО Верескул Игорь(Начало 26.12.2017
    ПодогнатьПравильнуюДату();
    //Окончание)Верескул Игорь 
    
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ,Заголовок);
	
	ПроводитьПоВзаиморасчетам = (ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации);
	//Смартис Лиманчук начало 23.01.2013
	ПроводитьПоВзаиморасчетам = ПроводитьПоВзаиморасчетам ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизацииНал);
	//Смартис Лиманчук окончание 23.01.2013
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Оборудование", ТаблицаПоТоварам, ТаблицаПоОборудованию);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);

	//Проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 		ТаблицаПоТоварам, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Оборудование", 	ТаблицаПоОборудованию, 	СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок, "Товары");
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоОборудованию, СтруктураШапкиДокумента, Отказ, Заголовок, "Оборудование");

	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
			СтруктураШапкиДокумента.ДоговорКонтрагента,
			СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			мВалютаРегламентированногоУчета, Ложь, Отказ, Заголовок);

	КонецЕсли;

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, 
			ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ,Заголовок,РежимПроведения);
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоОборудованию", ТаблицаПоТоварам, ТаблицаПоОборудованию));
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Товары,               	// ТабличнаяЧастьТовары
			Неопределено,			// ТабличнаяЧастьВозвратнаяТара
			Неопределено,           // ТабличнаяЧастьУслуги
			Оборудование,         	// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено   			// ТабличнаяЧастьБланкиСтрогогоУчета
		);
		
	КонецЕсли;	
	

	СуммаДокумента = Сумма + ?(СуммаВключаетНДС, 0, (СуммаНДС + Товары.Итог("СуммаНДС") + Оборудование.Итог("СуммаНДС")))
	                 + Товары.Итог("Сумма") + Оборудование.Итог("Сумма");
					 
					 
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ)
	
	
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;

    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Поступление);
	СтруктураПараметров.Вставить("РасчетыВозврат",  	Перечисления.РасчетыВозврат.Расчеты);
	
	СтруктураПараметров.Вставить("ЕстьНДС",  			СтруктураШапкиДокумента.ЕстьНДС);
	СтруктураПараметров.Вставить("ВалютаДокумента",     СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("Период",     			СтруктураШапкиДокумента.Дата);
	
    СтруктураДвижений = Новый Структура;
	СтруктураДвижений.Вставить("НалоговыйУчет", 			 Движения.ПриобретенияНалоговыйУчет);
	СтруктураДвижений.Вставить("ОжидаемыИПодтвержденныйНДС", Движения.ОжидаемыйИПодтвержденныйНДСПриобретений);
	
	// ТОВАРЫ...
	МассивТаблицТоваров = Новый Массив();
	
	
	// ТОВАРЫ
	ТаблицаПриобретений = ТаблицаПоТоварам.Скопировать();
	ТаблицаПриобретений.Свернуть("СделкаРегл,СтавкаНДС,НалоговоеНазначение, Амортизируется",
								 "СуммаСНДСРегл,СуммаБезНДСРегл,СуммаНДСРегл, СуммаНДСВалИсходный, 
								 |ПроводкаСуммаРаспределения, ПроводкаСуммаНДСРаспределения,ПроводкиСуммаНДСРеглРаспределения");
	
	// ОБОРУДОВАНИЕ
	ТаблицаКопия = ТаблицаПоОборудованию.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл,СтавкаНДС,НалоговоеНазначение, Амортизируется",
						  "СуммаСНДСРегл,СуммаБезНДСРегл,СуммаНДСРегл, СуммаНДСВалИсходный, 
						  |ПроводкаСуммаРаспределения, ПроводкаСуммаНДСРаспределения,ПроводкиСуммаНДСРеглРаспределения");
						  
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПриобретений);
	
	
	// движения по сумме из шапки документа должны быть по ставке, указанной в шапке но по налоговой аналитике из ТЧ.
	ТаблицаПриобретенийРаспределения = ТаблицаПриобретений.Скопировать();
	ТаблицаПриобретенийРаспределения.Свернуть("СделкаРегл, НалоговоеНазначение, Амортизируется",
	                                          "СуммаСНДСРегл,СуммаБезНДСРегл,СуммаНДСРегл,  СуммаНДСВалИсходный, 
											  |ПроводкаСуммаРаспределения, ПроводкаСуммаНДСРаспределения,ПроводкиСуммаНДСРеглРаспределения");
																	 
																	 
	ТаблицаПриобретенийРаспределения.Колонки.Добавить("СтавкаНДС");																										  
	Для каждого Строка Из ТаблицаПриобретенийРаспределения Цикл
		Строка.СтавкаНДС 		   = СтруктураШапкиДокумента.СтавкаНДС;
		Строка.СуммаСНДСРегл       = Строка.ПроводкаСуммаНДСРаспределения + Строка.ПроводкаСуммаРаспределения;
		Строка.СуммаБезНДСРегл     = Строка.ПроводкаСуммаРаспределения;
		Строка.СуммаНДСРегл        = Строка.ПроводкаСуммаНДСРаспределения;
	КонецЦикла; 																										  
	
	ТаблицаПриобретений.Свернуть("СделкаРегл,СтавкаНДС,НалоговоеНазначение, Амортизируется",
	                             "СуммаСНДСРегл,СуммаБезНДСРегл,СуммаНДСРегл, СуммаНДСВалИсходный, 
								 |ПроводкаСуммаРаспределения, ПроводкаСуммаНДСРаспределения,ПроводкиСуммаНДСРеглРаспределения");
								 
	Для каждого Строка Из ТаблицаПриобретений Цикл
		Строка.СуммаСНДСРегл        = Строка.СуммаСНДСРегл        - Строка.ПроводкаСуммаНДСРаспределения - Строка.ПроводкаСуммаРаспределения;
		Строка.СуммаБезНДСРегл      = Строка.СуммаБезНДСРегл      - Строка.ПроводкаСуммаРаспределения;
		Строка.СуммаНДСРегл         = Строка.СуммаНДСРегл         - Строка.ПроводкаСуммаНДСРаспределения;
	КонецЦикла; 																										  																											  
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретенийРаспределения, ТаблицаПриобретений);
	
	ТаблицаПриобретений.Колонки.СуммаСНДСРегл       .Имя = "СуммаСНДСВал";
	ТаблицаПриобретений.Колонки.СуммаБезНДСРегл     .Имя = "СуммаБезНДСВал";
	ТаблицаПриобретений.Колонки.СуммаНДСРегл        .Имя = "СуммаНДСВал";
	
	// удалим строки с пустыми суммами
	Инд = 0;
	Пока Инд < ТаблицаПриобретений.Количество() Цикл
		СтрокаТаблицы = ТаблицаПриобретений.Получить(Инд);
		Если  СтрокаТаблицы.СуммаСНДСВал = 0 
			И СтрокаТаблицы.СуммаБезНДСВал = 0 
			И СтрокаТаблицы.СуммаНДСВал = 0 Тогда
			ТаблицаПриобретений.Удалить(СтрокаТаблицы);
		Иначе
			Инд = Инд + 1;
		КонецЕсли;
	КонецЦикла;	
	
	МассивТаблицТоваров.Добавить(ТаблицаПриобретений);
	СтруктураПараметров.Вставить("ТаблицыТоваров", МассивТаблицТоваров);
	
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, мВалютаРегламентированногоУчета, Отказ);
	
КонецПроцедуры //ДвиженияПоРегистрамНалоговогоУчета

//ИЗМЕНЕНО Верескул Игорь(Начало 26.12.2017
Процедура ПодогнатьПравильнуюДату()
	Для каждого Строка Из Товары Цикл
        Если Строка.ДокументПартии.Дата < ЭтотОбъект.Дата И НЕ ОтключитьКонтрольПоДатам Тогда
        	Сообщить("Дата документа " + ЭтотОбъект.Дата + " позже самого раннего поступления товаров и услуг " + Строка.ДокументПартии.Дата);
            Сообщить("Дата документа изменена на " + Строка.ДокументПартии.Дата);
            ЭтотОбъект.Дата = Строка.ДокументПартии.Дата;
            УстановитьНовыйНомер();
        КонецЕсли; 
    КонецЦикла; 
КонецПроцедуры
 
//Окончание)Верескул Игорь 

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Оборудование"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");
