Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мУчетнаяПолитика Экспорт;         // (Общ)
Перем УчетнаяПолитикаРегл Экспорт;       // (Регл)  
Перем мПорядокСписанияПартий;           // (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

Перем мИспользоватьТолькоСборочныеСпецификации Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мЕстьЗаказ;

Перем ИзмененоИспользоватьЗаказы Экспорт;
Перем мИспользоватьЗаказыНаПроизводство Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПоступлениеТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,
    |	Заказ КАК Сделка,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	Организация КАК Покупатель,
	|	Ответственный.ФизЛицо.Наименование КАК Получил,
	|	0 КАК СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровИзПереработки КАК ПоступлениеТоваровИзПереработки
	|
	|ГДЕ
	|	ПоступлениеТоваровИзПереработки.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	//|	Цена,
	//|	Сумма,
	//|	СуммаНДС,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		0                    КАК Цена,
	|		Null                 КАК СтавкаНДС,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест
	//|		0                    КАК Сумма,
	//|		0                    КАК СуммаНДС
	|	ИЗ
	|		Документ.ПоступлениеТоваровИзПереработки.Продукция КАК ПоступлениеТоваровИзПереработки
	|	ГДЕ
	|		ПоступлениеТоваровИзПереработки.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.ПоступлениеТоваровИзПереработки.ВозвратнаяТара КАК ПоступлениеТоваровИзПереработки
	|
	|ГДЕ
	|	ПоступлениеТоваровИзПереработки.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровИзПереработки_Накладная";
	
	Макет = ПолучитьМакет("Накладная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Приходная накладная (поступление из переработки)';uk='Прибуткова накладна (надходження з переробки)'",КодЯзыкаПечать),КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = Ложь;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
//	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
//	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	//Суффикс = "";
	//Если Шапка.УчитыватьНДС Тогда
	//	Если Шапка.СуммаВключаетНДС Тогда
	//		Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
	//	Иначе	
	//		Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
	//	КонецЕсли;
	//	Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	//КонецЕсли;
	//
	//ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	//Если ЕстьСкидки Тогда
	//	ТабДокумент.Присоединить(ОбластьСкидок);
	//КонецЕсли;
	
	//ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	//ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки;// + 
											//Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											//Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	//ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	//ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	//Сумма    = 0;
	//СуммаНДС = 0;
	//ВсегоСкидок    = 0;
	//ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		//Если ЕстьСкидки Тогда
		//	
		//	Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
		//		Скидка = 0;
		//	Иначе
		//		Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		//		//округлим скидку до двух знаков
		//		Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		//	КонецЕсли;
		//
		//	ОбластьСкидок.Параметры.Скидка         = Скидка;
		//	ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
		//	ТабДокумент.Присоединить(ОбластьСкидок);
		//КонецЕсли;

		//ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		//ТабДокумент.Присоединить(ОбластьСуммы);
		//
		//Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		//СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		//Если ЕстьСкидки Тогда
		//	ВсегоСкидок    = ВсегоСкидок + Скидка;
		//	ВсегоБезСкидок = Сумма       + ВсегоСкидок;
		//КонецЕсли;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	//ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	//ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	//Если ЕстьСкидки Тогда
	//	ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
	//	ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
	//	ТабДокумент.Присоединить(ОбластьСкидок);
	//КонецЕсли;
	//ОбластьСуммы.Параметры.Всего = ЗаполнениеДокументов.ФорматСумм(Сумма);
	//ТабДокумент.Присоединить(ОбластьСуммы);

	//// Вывести ИтогоНДС
	//Если Шапка.УчитыватьНДС Тогда
	//	ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
	//	ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
	//	ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
	//	ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
	//	ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

	//	ТабДокумент.Вывести(ОбластьНомера);
	//	Если ВыводитьКоды Тогда
	//		ТабДокумент.Присоединить(ОбластьКодов);
	//	КонецЕсли;
	//	ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
	//	
	//	ТабДокумент.Присоединить(ОбластьДанных);
	//	Если ЕстьСкидки Тогда
	//		ТабДокумент.Присоединить(ОбластьСкидок);
	//	КонецЕсли;
	//	ОбластьСуммы.Параметры.ВсегоНДС = ЗаполнениеДокументов.ФорматСумм(СуммаНДС);
	//	ТабДокумент.Присоединить(ОбластьСуммы);
	//	
	//	// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
	//	Если НЕ Шапка.СуммаВключаетНДС Тогда
	//		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
	//		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
	//		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
	//		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
	//		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
	//		
	//		ТабДокумент.Вывести(ОбластьНомера);
	//		Если ВыводитьКоды Тогда
	//			ТабДокумент.Присоединить(ОбластьКодов);
	//		КонецЕсли;

	//		ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
	//		ТабДокумент.Присоединить(ОбластьДанных);
	//		Если ЕстьСкидки Тогда
	//			ТабДокумент.Присоединить(ОбластьСкидок);
	//		КонецЕсли;
	//		ОбластьСуммы.Параметры.Сумма = ЗаполнениеДокументов.ФорматСумм(Сумма + СуммаНДС);
	//		ТабДокумент.Присоединить(ОбластьСуммы);
	//	КонецЕсли;
	//КонецЕсли;

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Товар);			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаТара);
		ТабДокумент.Присоединить(ОбластьСуммы);	
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	//СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() //+ "," 
	//										 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ЗаполнениеДокументов.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
										   
	//ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	// 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеТоваров();
		
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Продукция");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("Накладная", "Приходная накладная");
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
		|ПрочиеЗатраты.Сумма, РаспределениеПрочихЗатрат.Сумма,
		|ВозвратныеОтходы.Сумма,
		|ВозвратныеОтходы.СтатусПартии";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
		|Продукция.Счет, Продукция.СчетЗатрат, Продукция.НалоговоеНазначение, 
		|ВозвратнаяТара.СчетУчетаБУ,
		|СчетУчетаРасчетовПоТаре, СчетУчетаРасчетовПоТареПоАвансам,
		|РаспределениеМатериалов.СчетЗатрат, РаспределениеПрочихЗатрат.СчетЗатрат,
		|ПрочиеЗатраты.СуммаРегл, РаспределениеПрочихЗатрат.СуммаРегл,
		|ВозвратныеОтходы.Счет, ВозвратныеОтходы.СчетЗатрат, ВозвратныеОтходы.СуммаРегл, ВозвратныеОтходы.НалоговоеНазначение,
		|РаспределениеВозвратныхОтходов.СчетЗатрат";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДОКУМЕНТА

#Если Клиент Тогда
	
// Поцедура выполняет заполнение табличной части "Материалы".
//
Процедура ЗаполнитьМатериалыПоОстаткам() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			ОбщегоНазначения.Сообщение("Не указан контрагент! Заполнение невозможно.", СтатусСообщения.Важное);
			Возврат;
		ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ОбщегоНазначения.Сообщение("Не указан договор контрагента! Заполнение невозможно.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		УсловиеПоЗаказу = "";
	Иначе
		УсловиеПоЗаказу = " И Сделка = &Заказ ";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РегТоварыПереданные.Номенклатура 					        КАК Номенклатура,
	|	РегТоварыПереданные.ХарактеристикаНоменклатуры              КАК ХарактеристикаНоменклатуры,
	|	РегТоварыПереданные.Номенклатура.НоменклатурнаяГруппаЗатрат КАК НоменклатурнаяГруппа,
	|	РегТоварыПереданные.Номенклатура.СтатьяЗатрат 				КАК СтатьяЗатрат,
	|	СУММА(РегТоварыПереданные.КоличествоОстаток)                КАК КолКонОст,
	|	СУММА(РегТоварыПереданные.СуммаВзаиморасчетовОстаток)       КАК СумКонОст
	|ИЗ
	|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков, 
	|											   ДоговорКонтрагента = &ДоговорКонтрагента
	|											   " + УсловиеПоЗаказу + "
	|											   И СтатусПередачи = &СтатусПередачи
	|											   ) КАК РегТоварыПереданные
	|
	|СГРУППИРОВАТЬ ПО
	|	РегТоварыПереданные.Номенклатура,
	|	РегТоварыПереданные.ХарактеристикаНоменклатуры
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "Заказ", ?(НЕ ЗначениеЗаполнено( Заказ), Неопределено, Заказ));
	Запрос.УстановитьПараметр( "ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр( "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку);
	Запрос.УстановитьПараметр( "ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Предупреждение("По выбранному заказу / контрагенту / договору в остатках у переработчика материалов нет!");
		Возврат;
	КонецЕсли;
	
	Материалы.Очистить();
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		
		НоваяСтрока = Материалы.Добавить();
		НоваяСтрока.Номенклатура               = Обход.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
		НоваяСтрока.СтатьяЗатрат 		  	   = Обход.СтатьяЗатрат;
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуТабЧасти   ( НоваяСтрока, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти( НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.Количество                 = Обход.КолКонОст;
						   
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьМатериалыПоОстаткам()
	
// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть ""Материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Материалы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьМатериалы = Материалы.Выгрузить();
	ТабличнаяЧастьПродукция = Продукция.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура("Заказ, Спецификация");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);

	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата, , ПараметрыВыпускаПродукции);

	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, СтатьяЗатрат, Заказ, Спецификация", "Количество");
	
	Материалы.Загрузить(ТабличнаяЧастьМатериалы);
		
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

// Процедура заполняет возвратные отходы по спецификациям.
//
Процедура ЗаполнитьВозвратныеОтходыПоСпецификации() Экспорт
	
	Если ВозвратныеОтходы.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть ""Возвратные отходы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ВозвратныеОтходы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьВозвратныеОтходы = ВозвратныеОтходы.Выгрузить();
	ТабличнаяЧастьПродукция = Продукция.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура("Заказ, Спецификация, НоменклатурнаяГруппа, СчетЗатрат");	
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);

	УправлениеПроизводством.ЗаполнитьВозвратныеОтходыПоСпецификациям(ТабличнаяЧастьВозвратныеОтходы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата,, ПараметрыВыпускаПродукции);

	ТабличнаяЧастьВозвратныеОтходы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, СтатьяЗатрат, Заказ, ЗаказРезерв,
			|Спецификация, НоменклатурнаяГруппа, СчетЗатрат, НалоговоеНазначение",
			"Количество, Цена, Сумма, СуммаРегл");
	
	ВозвратныеОтходы.Загрузить(ТабличнаяЧастьВозвратныеОтходы);
	
	Для Каждого СтрокаТабличнойЧасти Из ВозвратныеОтходы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		СтрокаТабличнойЧасти.СтатусПартии 			= Перечисления.СтатусыПартийТоваров.Продукция;
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, Ссылка, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"ВозвратныеОтходы");
				
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабЧасти(ВозвратныеОтходы, "ВозвратныеОтходы", ОтражатьВБухгалтерскомУчете);
		
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

// Процедура заполняет табличную часть "Прочие затраты" остатками в НЗП.
//
Процедура ЗаполнитьПрочиеЗатратыПоОстаткам() Экспорт
	
	ПрочиеЗатраты.Очистить();
	
	ТаблицаПрочиеЗатраты = ПрочиеЗатраты.Выгрузить();
	УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамНЗП(ЭтотОбъект, ТаблицаПрочиеЗатраты);
	ПрочиеЗатраты.Загрузить(ТаблицаПрочиеЗатраты);
		
КонецПроцедуры // ЗаполнитьПрочиеЗатратыПоОстаткам()

// Процедура добавляет данные по материалам из требование-накладная
//
Процедура ДобавитьИзТребованиеНакладной() Экспорт
	
	ФормаВыбора = Документы.ТребованиеНакладная.ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Отбор = ФормаВыбора.Отбор.ПодразделениеОрганизации;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = ПодразделениеОрганизации;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокТН = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокТН) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ДокТН.Материалы Цикл
		
		НоваяСтрока = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьИзТребованиеНакладной()

#КонецЕсли

// Процедура заполнения табличной части распределение материалов
//
Процедура ЗаполнитьТаблицуРаспределенияМатериалов(Спрашивать = Истина) Экспорт
	
	Если Материалы.Количество() = 0 Тогда
		Если РаспределениеМатериалов.Количество() > 0 Тогда
			РаспределениеМатериалов.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РаспределениеМатериалов.Количество() > 0 Тогда
		Если Спрашивать И Не АвтораспределениеМатериалов Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение материалов"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		РаспределениеМатериалов.Очистить();
	КонецЕсли; 	
		
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураДопКолонок = Новый Структура("Заказ, НоменклатурнаяГруппа, Спецификация, НалоговоеНазначение,
	 								|СчетЗатрат, ДоляСтоимости");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	УправлениеПроизводством.ЗаполнитьРаспределениеМатериаловНаПродукцию(СтруктураШапкиДокумента, Материалы, Продукция, РаспределениеМатериалов, СтруктураДопКолонок, Отбор, ПараметрыВыпускаПродукции);
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияМатериалов()

// Процедура заполнения табличной части распределение прочих затрат
//
Процедура ЗаполнитьТаблицуРаспределенияПрочихЗатрат(Спрашивать = Истина) Экспорт
	
	Если ПрочиеЗатраты.Количество() = 0 Тогда
		Если РаспределениеПрочихЗатрат.Количество() > 0 Тогда
			РаспределениеПрочихЗатрат.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Спрашивать И РаспределениеПрочихЗатрат.Количество() > 0 Тогда
		Если Не АвтораспределениеПрочихЗатрат Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение прочих затрат"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	РаспределениеПрочихЗатрат.Очистить();
		
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	УправлениеПроизводством.ЗаполнитьРаспределениеПрочихЗатратНаПродукцию(СтруктураШапкиДокумента, ПрочиеЗатраты, Продукция, РаспределениеПрочихЗатрат);
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияПрочихЗатрат()

// Процедура заполнения табличной части распределение материалов
//
Процедура ЗаполнитьТаблицуРаспределенияВозвратныхОтходов(Отказ = Неопределено, Спрашивать = Истина) Экспорт
	
	Если ВозвратныеОтходы.Количество() = 0 Тогда
		Если РаспределениеВозвратныхОтходов.Количество() > 0 Тогда
			РаспределениеВозвратныхОтходов.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РаспределениеВозвратныхОтходов.Количество() > 0 Тогда
		Если Спрашивать И Не АвтораспределениеВозвратныхОтходов Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение возвратных отходов"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		РаспределениеВозвратныхОтходов.Очистить();
	КонецЕсли;   	
		
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураДопКолонок = Новый Структура("Заказ, НоменклатурнаяГруппа, Спецификация,НалоговоеНазначение,
										|СчетЗатрат, ДоляСтоимости");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	УправлениеПроизводством.ЗаполнитьРаспределениеВозвратныхОтходовНаПродукцию(СтруктураШапкиДокумента, ВозвратныеОтходы, Продукция, РаспределениеВозвратныхОтходов, СтруктураДопКолонок, Отбор, ПараметрыВыпускаПродукции);
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияВозвратныхОтходов()

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьТоварыПоОстаткамУпр() Экспорт
	
	Если Продукция.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("При заполнении табличная часть будет очищена!
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		Продукция.Очистить();
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", Заказ);
	Запрос.УстановитьПараметр("ДатаЗаказа", Заказ.Дата);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СУММА(ВложенныйЗапрос.КоличествоОстатокПоЗаказу) КАК КоличествоОстатокПоЗаказу,
	|	СУММА(ВложенныйЗапрос.КоличествоПоРазмещению) КАК КоличествоПоРазмещению,
	|	ВложенныйЗапрос.Размещение КАК Размещение,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент
	|ИЗ (
	|	ВЫБРАТЬ
	|		Остатки.Номенклатура,
	|		Остатки.ХарактеристикаНоменклатуры,
	|		ЗаказПоставщикуТовары.Спецификация,
	|		Остатки.ЕдиницаИзмерения,
	|		Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|		(Остатки.КоличествоПриход - Остатки.КоличествоРасход) КАК КоличествоОстатокПоЗаказу,
	|		0 КАК КоличествоПоРазмещению,
	|		Неопределено КАК Размещение
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Обороты(&ДатаЗаказа, &ДатаОстатков, Регистратор, 
	|			ДоговорКонтрагента = &Договор
	|			И ЗаказПоставщику = &Сделка
	|			И СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВПереработку)
	|		) КАК Остатки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Номенклатура,
	|				ХарактеристикаНоменклатуры,
	|				Спецификация
	|			ИЗ
	|				Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|			ГДЕ
	|				ЗаказПоставщикуТовары.Ссылка = &Сделка
	|
	|			) КАК ЗаказПоставщикуТовары
	|		ПО 
	|			Остатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	|			И Остатки.ХарактеристикаНоменклатуры = ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
	|
	|	ГДЕ
	|		НЕ Остатки.Номенклатура.Услуга 
	|		И Не Остатки.Регистратор ССЫЛКА Документ.ПолучениеУслугПоПереработке
	|		И Не Остатки.Регистратор ССЫЛКА Документ.ЗакрытиеЗаказовПоставщикам
	|		И (Остатки.КоличествоПриход - Остатки.КоличествоРасход <> 0)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Размещение.Номенклатура,
	|		Размещение.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка) КАК Спецификация,
	|		Размещение.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|		0 КАК КоличествоОстатокПоЗаказу,
	|		Размещение.КоличествоОстаток КАК КоличествоПоРазмещению,
	|		Размещение.ЗаказПокупателя КАК Размещение
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, 
	|			ЗаказПоставщику = &Сделка 
	|			И ТоварТара = ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар)
	|		) КАК Размещение
	|	
	|	ГДЕ
	|		НЕ Размещение.Номенклатура.Услуга
	|		И Размещение.КоличествоОстаток > 0
	|
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.Размещение,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по размещению покупателям
	ТаблицаПоРазмещению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоРазмещению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоРазмещению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоРазмещению <= 0 Тогда
			ТаблицаПоРазмещению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по заказу поставщику
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаЗаказа ИЗ ТаблицаПоЗаказу Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаЗаказа.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаЗаказа.ХарактеристикаНоменклатуры);

		СтрокиПоРазмещению = ТаблицаПоРазмещению.НайтиСтроки(СтруктураПоиска);

		КолвоПоЗаказу = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
		ВсегоСписано = 0;
		СписатьПоРазмещению = 0;
		
		Если КолвоПоЗаказу <= 0 Тогда
			Продолжить;
		КонецЕсли;

		// Cписываем по размещению
		Для Каждого СтрокаРазмещения Из СтрокиПоРазмещению Цикл
			
			КолвоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению;

			Если КолвоПоРазмещению <= 0 Тогда
				Продолжить;
			КонецЕсли;

			СписатьПоРазмещению = Мин(КолвоПоРазмещению, Мин(КолвоПоЗаказу - ВсегоСписано));
			ВсегоСписано = ВсегоСписано + СписатьПоРазмещению;

			Если СписатьПоРазмещению > 0 Тогда
				
				СтрокаТабличнойЧасти = Продукция.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗаказа);
				СтрокаТабличнойЧасти.Заказ = СтрокаРазмещения.Размещение;
				СтрокаТабличнойЧасти.ЗаказРезерв = СтрокаРазмещения.Размещение;
				СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
				
				Если СтрокаЗаказа.Коэффициент <> 0 Тогда
					СтрокаТабличнойЧасти.Количество = СписатьПоРазмещению 
						* СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
						/ СтрокаЗаказа.Коэффициент;
				КонецЕсли;
																  
				ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);												  
				
				СтрокаРазмещения.КоличествоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению - СписатьПоРазмещению;
				
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Продукция", ОтражатьВБухгалтерскомУчете);
					
			КонецЕсли;
			
		КонецЦикла;

		// Cписываем без размещения
		СписатьПоЗаказу = КолвоПоЗаказу - ВсегоСписано;

		Если СписатьПоЗаказу > 0 Тогда
			
			СтрокаТабличнойЧасти = Продукция.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗаказа);
			СтрокаТабличнойЧасти.Заказ = Неопределено;
			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
			
			Если СтрокаЗаказа.Коэффициент <> 0 Тогда
				СтрокаТабличнойЧасти.Количество = СписатьПоЗаказу 
					* СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
					/ СтрокаЗаказа.Коэффициент;
			КонецЕсли;
																			  
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Продукция", ОтражатьВБухгалтерскомУчете);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОстаткамУпр()

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОснованиюУпр(ДокументОснование, ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Если ТабличнаяЧасть = ВозвратнаяТара Тогда
		ИмяТабличнойЧасти = "ВозвратнаяТара";
	Иначе
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	
	ДополнительныеРеглПоляОбщ		= "";
	ДополнительныеРеглПоляТовары 	= "";
	
	Запрос.УстановитьПараметр("ТипЦен",             ТипЦен);
	Запрос.УстановитьПараметр("ПустойТипЦен",       Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаОстатков", 		ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Номенклатура.СтавкаНДС                            КАК СтавкаНДС,
	|	ДокТовары.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	ДокТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения," +
		ДополнительныеРеглПоляОбщ +"
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоДокументу,
	|	NULL                                               КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Продукция, "
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.Качество,		   " +
		ДополнительныеРеглПоляТовары +"
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") + "
	|	МИНИМУМ(ДокТовары.НомерСтроки)                        КАК НомерСтроки, 
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток)                КАК КоличествоОстатокКомпании,
	|   МАКСИМУМ(ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
	|       Остатки.Номенклатура.ЕдиницаХраненияОстатков
	|   ИНАЧЕ
	|       ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|           Остатки.Номенклатура.ЕдиницаХраненияОстатков
	|       ИНАЧЕ
	|           ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения 
	|       КОНЕЦ
	|   КОНЕЦ)                                                   КАК ЕдиницаИзмерения,
	|   МАКСИМУМ(ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
	|       Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|   ИНАЧЕ
	|       ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|           Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|       ИНАЧЕ
	|           ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент 
	|       КОНЕЦ
	|   КОНЕЦ)                                                   КАК Коэффициент
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Продукция, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры", "") + " 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|   ПО ДокТовары.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура " + 
	?(ТабличнаяЧасть = Продукция, "
	|      И ДокТовары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры ", "") + "
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Продукция, ",
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.Качество,
	|	ДокТовары.ХарактеристикаНоменклатуры", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";


	РезультатЗапроса = Запрос.Выполнить();

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ТабличнаяЧасть = Продукция Тогда
			СтрокаТабличнойЧасти = Продукция.Добавить();

			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.Качество         = Выборка.Качество;
			
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = Выборка.Номенклатура.НоменклатурнаяГруппа;
			СтрокаТабличнойЧасти.ДоляСтоимости = 1;
			
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);

		Иначе

			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
			ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		КонецЕсли;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение документа по основанию.
//
Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ОтражатьВУправленческомУчете = Истина;
		ПодразделениеОрганизации = УправлениеЗатратами.ПолучитьПодразделениеОрганизации(
			Организация,
			Подразделение,
			ОтражатьВБухгалтерскомУчете
		);

		
		ТипЦен             = ДоговорКонтрагента.ТипЦен;
		УчитыватьНДС       = Истина;
		СуммаВключаетНДС   = Истина;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда

			Заказ = Основание;

			Если Заказ.Проведен Тогда

				СкладОрдер     = Основание.Склад;
				ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;

				Дата = ТекущаяДата(); // Иначе не работает заполнение по остаткам
				ЗаполнитьТоварыПоОстаткамУпр();
				ЗаполнитьМатериалыПоЗаказу();
			
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		СкладОрдер = Основание;
		ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		Заказ = Основание.ЗаказПоставщику;
		Если ЗначениеЗаполнено(Заказ) Тогда
			ДоговорКонтрагента = Заказ.ДоговорКонтрагента;
			Контрагент = Заказ.Контрагент;
		Иначе
			Контрагент = Основание.Контрагент;
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
		КонецЕсли;
		Подразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");
		ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		
		ТипЦен             = ДоговорКонтрагента.ТипЦен;
		УчитыватьНДС       = Истина;
		СуммаВключаетНДС   = Истина;

		Если Основание.Проведен Тогда

			// Заполним табличную часть "Товары" по приходному ордеру на товары.
			ЗаполнитьТоварыПоОснованиюУпр(Основание, Продукция);
			ЗаполнитьТоварыПоОснованиюУпр(Основание, ВозвратнаяТара);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоОснованиюУпр()

// Процедура выполняет заполнение табличной части "Материалы" по заказу поставщику.
//
Процедура ЗаполнитьМатериалыПоЗаказу() Экспорт
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", Заказ);
	Запрос.УстановитьПараметр("ДатаЗаказа", Заказ.Дата);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаказыПокупателей.Номенклатура,
	|	ЗаказыПокупателей.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателей.ЕдиницаИзмерения,
	|	ЗаказыПокупателей.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ЗаказыПокупателей.Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат,
	|	
	|	СУММА(ЗаказыПокупателей.КоличествоПриход - ЗаказыПокупателей.КоличествоРасход) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Обороты(&ДатаЗаказа, &ДатаОстатков, Регистратор, 
	|		Не Номенклатура.Услуга 
	|		И ДоговорКонтрагента = &Договор
	|		И ЗаказПокупателя = &Сделка
	|		И СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВПереработку)
	|	) КАК ЗаказыПокупателей
	|
	|ГДЕ
	|	Не ЗаказыПокупателей.Регистратор ССЫЛКА Документ.ПередачаТоваров
	|	И Не ЗаказыПокупателей.Регистратор ССЫЛКА Документ.ЗакрытиеЗаказовПоставщикам
	|	И (ЗаказыПокупателей.КоличествоПриход - ЗаказыПокупателей.КоличествоРасход <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателей.Номенклатура,
	|	ЗаказыПокупателей.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателей.ЕдиницаИзмерения

	|";

	РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
				
		НоваяСтрока = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект, Ложь);
				
	КонецЦикла;

КонецПроцедуры // ЗаполнитьМатериалыПоЗаказу()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	РеквизитыТабМат    = "Номенклатура, Количество";
	РеквизитыТабПрод   = "Номенклатура, Количество, Качество";
	РеквизитыТабЗатр   = "СтатьяЗатрат";
   	РеквизитыТабОтходы = "Номенклатура, Количество, СтатьяЗатрат, СтатусПартии";
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабПрод,   СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета,  "Продукция");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОтходы, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета,  "ВозвратныеОтходы");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция",        Новый Структура(РеквизитыТабПрод), Отказ, Заголовок);
	
	Для Каждого СтрокаТаблицы Из Продукция Цикл
		Если Не СтрокаТаблицы.Номенклатура.Услуга Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Качество)  Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указано качество в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
			Иначе
				 Если СтрокаТаблицы.Качество <> Справочники.Качество.Новый Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказРезерв) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"") указан документ-резерва для бракованной продукции. Данная продукция не может быть зарезервирована.", Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			 
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение (строка № " + СтрокаТаблицы.НомерСтроки + " таблица ""Продукция"")", Отказ, Заголовок);
			КонецЕсли;

		
			НалоговыйУчет.ПроверитьНалоговыеНазначенияПриВыпускеПродукции(
				"Продукция",
				СтрокаТаблицы.НомерСтроки,
				Отказ, 
				Заголовок,
				СтрокаТаблицы.НалоговоеНазначение,
				Неопределено, // СчетЗатратПолучатель 
				Неопределено  // НалоговоеНазначениеДоходовИЗатрат
			);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	// Проверим заполнение налоговых реквизитов в таблице ВозвратныеОтходы
	Для Каждого СтрокаТаблицы Из ВозвратныеОтходы Цикл
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначение) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение (строка № " + СтрокаТаблицы.НомерСтроки + " таблица ""Возвратные отходы"")", Отказ, Заголовок);
			КонецЕсли;
			
			НалоговыйУчет.ПроверитьНалоговыеНазначенияПриВыпускеПродукции(
				"Возвратные отходы",
				СтрокаТаблицы.НомерСтроки,
				Отказ, 
				Заголовок,
				СтрокаТаблицы.НалоговоеНазначение,
				Неопределено, // СчетЗатратПолучатель 
				Неопределено  // НалоговоеНазначениеДоходовИЗатрат
			);
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ИспользоватьМатериалы Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы",        Новый Структура(РеквизитыТабМат ), Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьПрочиеЗатраты Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПрочиеЗатраты",    Новый Структура(РеквизитыТабЗатр), Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьВозвратныеОтходы Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", Новый Структура(РеквизитыТабОтходы), Отказ, Заголовок);
	КонецЕсли;
	
	Если ИспользоватьМатериалы Тогда
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	КонецЕсли;
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Продукция", Заголовок);
	
	Если ИспользоватьМатериалы И ВводитьСтатьиЗатратПоСтрокам Тогда
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( Материалы,     "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
		Если ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( Материалы, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
		Если ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ИспользоватьПрочиеЗатраты Тогда
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( ПрочиеЗатраты, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
		Если ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( ПрочиеЗатраты, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
		Если ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
	
	КонецЕсли;
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата);
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ МАТЕРИАЛОВ
	Если ИспользоватьМатериалы И Не АвтораспределениеМатериалов Тогда
		
		РеквизитыТабРаспМат = "Номенклатура, Количество, Продукция, СчетЗатрат";
		Если ВводитьСтатьиЗатратПоСтрокам Тогда
			РеквизитыТабРаспМат = РеквизитыТабРаспМат + ", СтатьяЗатрат";
		КонецЕсли;
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспМат, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "РаспределениеМатериалов");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеМатериалов", Новый Структура(РеквизитыТабРаспМат), Отказ, Заголовок);
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
		Если ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			
			Для Каждого СтрокаРаспределения Из РаспределениеМатериалов Цикл
				Если Не ЗначениеЗаполнено(СтрокаРаспределения.НалоговоеНазначение)
					И (СтрокаРаспределения.СтатьяЗатрат.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
					
					Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение в строке № " + СтрокаРаспределения.НомерСтроки + " (таб. часть ""Распределение материалов"")", Отказ, Заголовок);
					
				КонецЕсли; 
			КонецЦикла; 
			
			
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				РаспределениеМатериалов.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
				"Распределение материалов",
				Отказ, 
				Заголовок, 
				"Производство"
			);	
		КонецЕсли;	
		
		
	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ ПРОЧИХ ЗАТРАТ
	Если ИспользоватьПрочиеЗатраты И Не АвтораспределениеПрочихЗатрат Тогда
		
		РеквизитыТабРаспЗатр = "Номенклатура, СтатьяЗатрат, СчетЗатрат";
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) И ИспользоватьРасширеннуюАналитику Тогда
			РеквизитыТабРаспЗатр = РеквизитыТабРаспЗатр + ", НалоговоеНазначение";
		КонецЕсли;
		
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспЗатр, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "РаспределениеПрочихЗатрат");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеПрочихЗатрат", Новый Структура(РеквизитыТабРаспЗатр), Отказ, Заголовок);
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат(РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
		Если ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат(РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				РаспределениеПрочихЗатрат.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
				"Распределение прочих затрат",
				Отказ, 
				Заголовок, 
				"Производство"
			);	
		КонецЕсли;	
		
		
	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ ВОЗВРАТНЫХ ОТХОДОВ
	Если ИспользоватьВозвратныеОтходы И Не АвтораспределениеВозвратныхОтходов Тогда
		
		РеквизитыТабРаспределенияОтходов = "Номенклатура, СтатьяЗатрат, Количество, Продукция, СчетЗатрат";
		
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспределенияОтходов, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "РаспределениеВозвратныхОтходов");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеВозвратныхОтходов", Новый Структура(РеквизитыТабРаспределенияОтходов), Отказ, Заголовок);
		
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "РаспределениеВозвратныхОтходов", , Отказ, Заголовок);		
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				РаспределениеВозвратныхОтходов.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
				"Распределение возвратных отходов",
				Отказ, 
				Заголовок, 
				"Производство"
			);	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаЗатрат=Истина, ЗаполнятьСчетаНоменклатуры=Истина) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаЗатрат, ЗаполнятьСчетаНоменклатуры);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаЗатрат=Истина, ЗаполнятьСчетаНоменклатуры=Истина) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьСчетаЗатрат,ЗаполнятьСчетаНоменклатуры, Истина);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Заполняет счета расчетов по умолчанию, если это нужно.
//
Процедура ЗаполнитьСчетаУчетаРасчетовРегл()

	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;
	СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТаре;

КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетовРегл()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура добавляет в таблицу колонки, необходимые для проведения по упр. учету.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Суммы пересчитаем в валюту упр. учета.
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Сумма;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()
                                    
// Процедура добавляет в таблицу колонки, необходимые для проведения по регл. учету.
//
Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ИмяТабличнойЧасти = "")

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.КоличествоМинус = - СтрокаТаблицы.Количество;
	КонецЦикла;

	// Порядок вызова в данном случае важен
	Если ИмяТабличнойЧасти = "ВозвратныеОтходы" Тогда
		ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	КонецЕсли;
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Процедура добавляет в таблицу колонки, необходимые для проведения по упр. учету.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента, 
										 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, 
										 КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
										 
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Процедура добавляет в таблицу колонки, необходимые для проведения по регл. учету.
//
Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления)

	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(
		ТаблицаТары, 
		СтруктураШапкиДокумента, 
		ПогрешностиОкругления, 
		Истина,     // ЭтоПриобретение
		Ложь,       // ЭтоУслуги
		"Стоимость" // ИмяКолонкиСумма
	);

КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТары.Колонки.Сумма.Имя = "Стоимость";
	
	ТаблицаТары.Колонки.Добавить( "ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить( "СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	// ТАРА (отдельной строкой)
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвиженийТара = ТаблицаКопия.Скопировать();
	
	ТаблицаДвиженийТара.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	
	ТаблицаДвиженийТара.Колонки.Добавить("Контрагент");
	ТаблицаДвиженийТара.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетОплаты");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Контрагент        , "Контрагент");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора, "ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре         , "СчетОплаты");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТареПоАвансам, "СчетАванса");
	
	ТаблицаДвижений = ТаблицаДвиженийТара.Скопировать();
	
	Возврат ТаблицаДвижений;
	
КонецФункции

// Процедура формирует движения регистров по табличной части Продукция
//
Процедура ДвиженияПоТабличнойЧастиПродукция(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
		
	ДвиженияПоТабличнойЧастиПродукцияУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения упр. регистров по табличной части Продукция
//
Процедура ДвиженияПоТабличнойЧастиПродукцияУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
		
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
		
	// Движения по размещению заказов.
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Заказ) Тогда
	
		НаборДвиженийПоРазмещению   = Движения.РазмещениеЗаказовПокупателей;
		ТаблицаДвиженийПоРазмещению = НаборДвиженийПоРазмещению.ВыгрузитьКолонки();
		
		ТаблицаПоПродукцииДляРазмещения = ТаблицаПоТоварам.Скопировать();
		
		ТабИмен = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоПродукцииДляРазмещения, ТабИмен, "ЗаказРезерв",         "ЗаказПокупателя");
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПродукцииДляРазмещения, ТаблицаДвиженийПоРазмещению);
		
		ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоПродукцииДляРазмещения, ТабИмен);
		
		ТаблицаДвиженийПоРазмещению.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
		ТаблицаДвиженийПоРазмещению.ЗаполнитьЗначения(СтруктураШапкиДокумента.Заказ, "ЗаказПоставщику");
		
		МассивНаУдаление = Новый Массив();
		Для Каждого Запись Из ТаблицаДвиженийПоРазмещению Цикл
			Если НЕ ЗначениеЗаполнено(Запись.ЗаказПокупателя) Тогда
				МассивНаУдаление.Добавить(Запись);					
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Элемент Из МассивНаУдаление Цикл
			ТаблицаДвиженийПоРазмещению.Удалить(Элемент);
		КонецЦикла;	

		НаборДвиженийПоРазмещению.мПериод = Дата;
		НаборДвиженийПоРазмещению.мТаблицаДвижений = ТаблицаДвиженийПоРазмещению;
		НаборДвиженийПоРазмещению.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукцияУпр()

// Процедура формирует движения регистров по табличной части Материалы
//
Процедура ДвиженияПоТабличнойЧастиМатериалыУпр(СтруктураШапкиДокумента)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьМатериалы Тогда
		Возврат;
	КонецЕсли;

	// Формирование движений расход по регистру "Материалы в производстве".
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоМатериаламВПроизводстве(
		СтруктураШапкиДокумента, 
		мУчетнаяПолитика
	);

КонецПроцедуры // ДвиженияПоТабличнойЧастиМатериалыУпр()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОтходы, ТаблицаПоТаре, Отказ, Заголовок)
	
	// Формирование движений по регистрам "Затраты на выпуск продукции".
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(
		СтруктураШапкиДокумента, 
		"ПоступлениеТоваровИзПереработки",
		мУчетнаяПолитика, 
		УчетнаяПолитикаРегл
	);
		
	// Формирование движений по регистрам "Выпуск продукции" и направлениям выпуска.
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска(
		СтруктураШапкиДокумента, 
		"ПоступлениеТоваровИзПереработки",
		мУчетнаяПолитика, 
		УчетнаяПолитикаРегл
	);
		
	// Формирование движения по регистрам партии товаров на складах для тары.
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
	    ?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
       	СтруктураШапкиДокумента, 
		Отказ, 
		, // ТаблицаПоТоварам, 
		ТаблицаПоТаре, 
		, // ТаблицаПоОборудованию,
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	);
								
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОтходы, ТаблицаПоТаре, Отказ, Заголовок);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТаре, Отказ, Заголовок);
	
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТаре, Отказ);	
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, Отказ, Заголовок);
	
		
	ДвиженияПоТабличнойЧастиПродукция(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияПоТабличнойЧастиМатериалыУпр(СтруктураШапкиДокумента);
	
	ДвиженияТоварыОрганизацийРегл(Заголовок, СтруктураШапкиДокумента, Отказ, РежимПроведения);
	
	
	// Зарегистрируем документ в последовательности.
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект, 
		Дата, 
		СтруктураШапкиДокумента.Организация,
		//в последовательности УУ регистрируем по значению реквизита, т.к. при допроведении по регл.учету
		//	документ должен остаться зарегистрированным в последовательности по УУ
		ОтражатьВУправленческомУчете,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
	);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движения по регистрам по упр. учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОтходы, ТаблицаПоТаре, Отказ, Заголовок);
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// При поступлении по ордеру сформируем движения по регистру "Товары к получению на склады".
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		
		// Контроль остатков товара
		Если Продукция.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Продукция", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ИспользоватьВозвратныеОтходы И ВозвратныеОтходы.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратныеОтходы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
				
			НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
			
			// Движение по товарам к получению
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаТоварыКПолучению", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаТараКПолучению", ТаблицаПоТаре);
			Если ИспользоватьВозвратныеОтходы Тогда
				СтруктТаблицДокумента.Вставить("ТаблицаВозвратныеОтходыКПолучению", ТаблицаОтходы);
			КонецЕсли;
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СтруктураШапкиДокумента.СкладПриходногоОрдера);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаТоварыКПолучению");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаТараКПолучению");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПолучения", СкладОрдер);
			
			Если ИспользоватьВозвратныеОтходы Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаВозвратныеОтходыКПолучению");
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.БезПраваПродажи Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", СкладОрдер);
			КонецЕсли;
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
			// Для приходного ордера без права продажи сформируем движения по регистру "Товары в резерве на складах".
			Если СтруктураШапкиДокумента.БезПраваПродажи Тогда
				
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Продукция", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				Если ИспользоватьВозвратныеОтходы Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратныеОтходы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СтруктураШапкиДокумента.СкладПриходногоОрдера);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", СкладОрдер);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					Движения.ТоварыВРезервеНаСкладах.Записать(Ложь);
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // Поступление на склад
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОрдер);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		Движения.ТоварыНаСкладах.Записать(Ложь);
		
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ ТоварыПолученные.
	НаборДвижений = Движения.ТоварыПолученные;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ  СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента, "Заказ"),"Сделка");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Сделка");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,"СтатусПолучения");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыПолученные.ВыполнитьПриход();
	КонецЕсли;
	
	// Теперь зарезервируем возвратную тару
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит ЗаказПокупателя пуст)
	ТаблицаПоТареЗаказамПокупателей = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареЗаказамПокупателей.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареЗаказамПокупателей.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказРезерв)
			 ИЛИ (ТипЗнч(СтрокаТаблицы.ЗаказРезерв) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			   И  СтрокаТаблицы.ЗаказРезерв.Заказчик = СтруктураШапкиДокумента.Склад) Тогда                    // Резерв в это случае делать не надо.
			ТаблицаПоТареЗаказамПокупателей.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаПоТареЗаказамПокупателей.Количество() > 0 Тогда

		ТаблицаПоТареЗаказамПокупателей.Колонки.ЗаказРезерв.Имя = "ДокументРезерва";

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		ТаблицаДвиженийРезервы = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТареЗаказамПокупателей, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,"Склад");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;
	
	// Погашение внутренних заказов в случае Заказчик = Склад поступления
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить( "СтатусПартии",          Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить( "РежимПроведения",       РежимПроведения);
	ДопПараметры.Вставить( "ИмяРеквизитаЗаказ",     "ЗаказРезерв");
	ДопПараметры.Вставить( "ЗаказВШапке",           Ложь);
	ДопПараметры.Вставить( "ИмяТабЧасти",           "Продукция");
	
	ТабИсходная = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ТипЗнч(СтрокаТаблицы.ЗаказРезерв) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ЗаказРезерв.Заказчик = СтруктураШапкиДокумента.Склад Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ЗаказРезерв, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   СтрокаТаблицы.ХарактеристикаНоменклатуры, 
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   Перечисления.СтатусыПартийТоваров.Купленный);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;
	
	ТабИсходная.Очистить();
	ТабИсходная = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ТипЗнч(СтрокаТаблицы.ЗаказРезерв) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ЗаказРезерв.Заказчик = СтруктураШапкиДокумента.Склад Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ЗаказРезерв, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, ,
																   СтрокаТаблицы.ЕдиницаИзмерения, 
																   Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	ДопПараметры.Вставить( "ИмяРеквизитаЗаказ",     "ЗаказРезерв");
	ДопПараметры.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	ДопПараметры.Вставить( "ИмяТабЧасти",  "ВозвратнаяТара");
	
	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Процедура формирует движения по регистрам по регл. учету.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТаре, Отказ, Заголовок);

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование проводок
	// Проводки по поступлению тары 
	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;

	СкладПроводок = СтруктураШапкиДокумента.Склад;

	// Проводки по таре.
	Для Каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		// Бухгалтерский учет
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период                  = ДатаДока;
		Проводка.Организация             = СтруктураШапкиДокумента.Организация;
		
		Проводка.Содержание              = "Оприходованы ТМЦ";
		Проводка.Сумма                   = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		Проводка.СчетДт                  = СтрокаТаблицы.СчетУчетаБУ;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады"      , СкладПроводок);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты" , СтруктураШапкиДокумента.Контрагент);
		
		Проводка.КоличествоДт            = СтрокаТаблицы.Количество;
		
		Проводка.НалоговоеНазначениеДт   = СтрокаТаблицы.НалоговоеНазначение;
		Проводка.СуммаНУДт               = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.СтоимостьНУ);
		
		Проводка.СчетКт                  = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
  		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   ,   СтрокаТаблицы.СделкаРегл);		
		
		Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;


	КонецЦикла; // Проводки по таре
	
	// Проводки по регл. взаиморасчетам
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок);
	Если СтруктураПараметровЗачетАванса <> Ложь Тогда
		
		ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураШапкиДокумента, ТаблицаПоТаре);
		СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению, Отказ);
		
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
			
		КонецЕсли;

	КонецЕсли;
	
	//Учет курсовых разниц
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
		СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка, Заголовок);
		ПроводкиБУ.Записать(Ложь);
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР,ПроводкиБУ,мВалютаРегламентированногоУчета,Истина);
		ПроводкиБУ.Записать(Ложь);
	КонецЕсли; // Учет курсовых разниц
	
	Если ПроводкиБУ.Модифицированность() Тогда
		ПроводкиБУ.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТаре, Отказ)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;

    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Поступление);
	СтруктураПараметров.Вставить("РасчетыВозврат",  	Перечисления.РасчетыВозврат.Расчеты);
	
	СтруктураПараметров.Вставить("ЕстьНДС",  			СтруктураШапкиДокумента.ЕстьНДС);
	СтруктураПараметров.Вставить("ВалютаДокумента",     СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("Период",     			СтруктураШапкиДокумента.Дата);
	
    СтруктураДвижений = Новый Структура;
	СтруктураДвижений.Вставить("НалоговыйУчет", 			 Движения.ПриобретенияНалоговыйУчет);
	СтруктураДвижений.Вставить("ОжидаемыИПодтвержденныйНДС", Движения.ОжидаемыйИПодтвержденныйНДСПриобретений);
	
	// ТАРА
	МассивТаблицТары = Новый Массив();
	МассивТаблицТары.Добавить(ТаблицаПоТаре);
	СтруктураПараметров.Вставить("ТаблицыТары", МассивТаблицТары);
	
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, мВалютаРегламентированногоУчета, Отказ);
	
КонецПроцедуры // 

// Процедура формирует движения по регистру "СписанныеТовары".
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// По партиям, оприходованным по ордеру с правом продажи, возможно следует выполнить корректировку списания
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру
		И ТипЗнч(СкладОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
		И НЕ СтруктураШапкиДокумента.БезПраваПродажи Тогда
		
		// ПО РЕГИСТРУ СписанныеТовары: формируем запись с указанием приходного ордера, которая будет обрабатываться при списании
		НаборДвижений = Движения.СписанныеТовары;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.ПоступлениеПриходныйОрдер = СкладОрдер;

		// Недостающие поля.
		Инд = 0;
		Для каждого Строка Из ТаблицаДвижений Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
		КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;

	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движения по регистру "ТоварыОрганизацийРегл"
Процедура ДвиженияТоварыОрганизацийРегл(Заголовок, СтруктураШапкиДокумента, Отказ, РежимПроведения)	
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли; 	
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	НаборДвижений   = Движения.ТоварыОрганизацийРегл;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// ТАРА ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Организация                = Организация;
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		
		Если Не ВестиПартионныйУчетПоСкладамРегл Тогда
			НоваяСтрока.Склад = Неопределено;
		Иначе
			Если ТипЗнч(СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
				НоваяСтрока.Склад = СкладОрдер;
			Иначе
				НоваяСтрока.Склад = СкладОрдер.Склад;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Качество            = Справочники.Качество.Новый;
		
		НоваяСтрока.СчетУчетаБУ         = СтрокаТЧ.СчетУчетаБУ;
		НоваяСтрока.НалоговоеНазначение = СтрокаТЧ.НалоговоеНазначение;
		
	КонецЦикла;
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.ВыполнитьПриход();
		НаборДвижений.Записать(Ложь); // ранее записывает УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска 
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияТоварыОрганизацийРегл()

// Дополняет полями, нужными для упр. учета.
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

// Дополняет полями, нужными для регл. учета.
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ"          , "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"               , "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("НалоговоеНазначение"        , "НалоговоеНазначение");
   	СтруктураПолей.Вставить("ВидНалоговойДеятельности"   , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"         , "НалоговоеНазначение.ВидДеятельностиНДС");

	СтруктураПростыхПолей.Вставить("СтавкаНДС"           , Перечисления.СтавкиНДС.НеНДС);
	СтруктураПростыхПолей.Вставить("НДС"                 , 0);
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"        , ПланыСчетов.Хозрасчетный.ПустаяСсылка());

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл()

// Дополняет полями, нужными для регл. учета.
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиПродукцияРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("Счет"                      	   , "Счет");
    СтруктураПолей.Вставить("СчетУчетаБУ"                      , "Счет");
	СтруктураПолей.Вставить("СчетЗатрат"                       , "СчетЗатрат");
	СтруктураПолей.Вставить("СчетЗатратБУ"                     , "СчетЗатрат");
	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");    
	СтруктураПолей.Вставить("ВидДеятельностиНДС"        , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиПродукцияРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ЗАПОЛНЕНИЯ ДОКУМЕНТА

// Дополняет полями, нужными для упр. учета.
//
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("Подразделение");
	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиУпр()

// Дополняет полями, нужными для регл. учета.
//
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураОбязательныхПолей.Вставить("ПодразделениеОрганизации");

		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");

	Если Продукция.Количество() + ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("ВидПоступления");
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
	КонецЕсли;
	Если ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("ВалютаДокумента");
		СтруктураОбязательныхПолей.Вставить("КурсВзаиморасчетов");
		СтруктураОбязательныхПолей.Вставить("КратностьВзаиморасчетов");
	КонецЕсли;
	Если ИспользоватьМатериалы И Не ВводитьСтатьиЗатратПоСтрокам И Материалы.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СтатьяЗатрат", "Не заполнено значение реквизита ""Статья затрат"" (закладка ""Материалы"")!");
	КонецЕсли;
	Если ИспользоватьВозвратныеОтходы 
	   И ВозвратныеОтходы.Количество() > 0 
	   И ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		СтруктураОбязательныхПолей.Вставить( "СкладОтходов");
	КонецЕсли;
	
	// Заказ должен быть заполнен, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		СтруктураОбязательныхПолей.Вставить("Заказ",
			"По выбранному договору установлен способ ведения взаиморасчетов ""По заказам""!
			|Заполните поле ""Заказ""!");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок, "СкладОрдер");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если ИспользоватьМатериалы И Не ВводитьСтатьиЗатратПоСтрокам И ЗначениеЗаполнено(СтруктураШапкиДокумента.СтатьяЗатрат) Тогда
		Если Не СтруктураШапкиДокумента.СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Укажите статью затрат с видом затрат ""Материальные"" (закладка ""Материалы"")!", Отказ, Заголовок);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И Не СтруктураШапкиДокумента.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Укажите статью затрат с характером затрат ""Производственные расходы"" (закладка ""Материалы"")", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	
	// Проверим что указаны производственные подразделения в шапке документа
	УправлениеПроизводством.ПроверитьПроизводственныеПодразделения(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Продукция".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Продукция";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Продукция", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Продукция", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Продукция", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Продукция", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// При поступлении товаров должен быть указан конкретный вид налоговой деятельности.
	СтруктураПараметровПроверки = Новый Структура("ПроверятьРаспределяемую");
	НалоговыйУчет.ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(ЭтотОбъект, "Продукция", , ТаблицаПоТоварам,
	                                                              СтруктураПараметровПроверки, 
																  СтруктураШапкиДокумента, 
											                      Отказ, Заголовок);
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТара();

   	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// При поступлении тары должен быть указан конкретный вид налоговой деятельности.
	СтруктураПараметровПроверки = Новый Структура("ПроверятьРаспределяемую");
	НалоговыйУчет.ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(ЭтотОбъект, "ВозвратнаяТара", , ТаблицаПоТаре,
	                                                              СтруктураПараметровПроверки,
	                                                              СтруктураШапкиДокумента,
																  Отказ, Заголовок);
	
	// Нельзя резервировать возвратную тару под заказ покупателя с обособленным учетом
	УправлениеЗаказами.ПроверитьРезервированиеТарыПодЗаказСОбособленнымУчетом(ЭтотОбъект,"ЗаказРезерв", ложь, , Отказ, Заголовок);	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, истина);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ=ложь) Экспорт	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов",                  "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл", 			 "ВедениеВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов",                   "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация",                            "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора",                            "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "НеОтноситьНаЗатратыПоНУ" 				 , "НеОтноситьНаЗатратыПоНУ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ",               	"ВидОперации",                            "СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ",               	"ВалютаДокумента",                        "ВалютаЗаказа");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "СписыватьПартииПриПроведенииДокументов", "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",           "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СтатьяЗатрат"		,"ВидЗатрат",                 "ВидЗатрат");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СтатьяЗатрат"		, "ХарактерЗатрат",            "ХарактерЗатрат");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"    , "ВестиУчетТоваровОрганизацийВРазрезеСкладов" , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "ВидСклада",                              "ВидСклада");
	Иначе
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "Склад",                                  "СкладПриходногоОрдера");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "Склад.ВидСклада",                        "ВидСклада");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "БезПраваПродажи",                        "БезПраваПродажи");
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка);
	//Добавим склад на который происходит поступление
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		СтруктураШапкиДокумента.Вставить("Склад", СтруктураШапкиДокумента.СкладОрдер);
	Иначе
		СтруктураШапкиДокумента.Вставить("Склад", СтруктураШапкиДокумента.СкладПриходногоОрдера);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОтходы, ТаблицаПоТаре) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Продукция".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Качество"         			, "Качество");

	СтруктураПолей.Вставить("Услуга"                               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                                , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                             , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Заказ"                                , "Заказ");
	СтруктураПолей.Вставить("ЗаказНаПроизводство"                  , "ЗаказВыпуска");
	СтруктураПолей.Вставить("ЗаказРезерв"                          , "ЗаказРезерв");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"                  , "ЗаказРезерв.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"                , "ЗаказРезерв.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
							"ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                     , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Проект"                               , "Проект");
	СтруктураПолей.Вставить("Коэффициент"                          , "Коэффициент");
	
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"		   , "Номенклатура.ВестиПартионныйУчетПоСериям");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиПродукцияРегл(СтруктураПолей);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей);
	
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	Если ИспользоватьВозвратныеОтходы Тогда
		
		СтруктураПолей.Удалить("Проект");
		СтруктураПолей.Удалить("ЗаказНаПроизводство");
		СтруктураПолей.Удалить("Качество");
		СтруктураПолей.Вставить("Сумма", "Сумма");
		ЗапросОтходы  = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", СтруктураПолей);
		ТаблицаОтходы = ПодготовитьТаблицуТоваров( ЗапросОтходы, СтруктураШапкиДокумента, "ВозвратныеОтходы");
		
	КонецЕсли;
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТара();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("ЗаказРезерв"               , "ЗаказРезерв");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"       , "ЗаказРезерв.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"     , "ЗаказРезерв.СкладГруппа");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
							"ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
							
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям", "Номенклатура.ВестиПартионныйУчетПоСериям");

	СтруктураПолей.Вставить("ДокументПолучения"				, "Ссылка.СкладОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения" , "Ссылка.СкладОрдер.Организация");
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"           , "Ссылка.СкладОрдер.Склад");
	СтруктураПолей.Вставить("Склад"           				, ?(СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру, "Ссылка.СкладОрдер.Склад", "Ссылка.СкладОрдер"));
   	СтруктураПолей.Вставить("БезПраваПродажи"               , "Ссылка.СкладОрдер.БезПраваПродажи");
	
	// Дополним полями, нужными для регл.	
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей);
	
	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей); 
	    
	// Подготовим таблицы продукции и возвратной тары для проведения.
	ПогрешностиОкругленияТара = Новый Соответствие;
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьПризнакАмортизируетсяПриПоступлении(
			Неопределено, // ТаблицаПоТоварам
			ТаблицаПоТаре, // ТаблицаПоТаре
			Неопределено, // ТаблицаПоУслугам
			Неопределено, // ТаблицаПоОборудованию
			Неопределено, // ТаблицаПоОбъектамСтроительства 
			Неопределено, //ТаблицаПоБланкам 
			"СчетЗатрат" // ИмяРеквизитаСчетЗатрат 
		);
	КонецЕсли; 	
	
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОтходы, ТаблицаПоТаре;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОтходы, ТаблицаПоТаре);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим заполнение счетов учета.
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Продукция", ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	Если ИспользоватьВозвратныеОтходы Тогда
		СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратныеОтходы", ТаблицаОтходы, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	//Проверка заполнения реквизитов со счетами учета в табличных частях
	//	РаспределениеМатериалов
	//	РаспределениеПрочихЗатрат
	//	РаспределениеВозвратныхОтходов	
	//выполняется в процедуре ПроверкаРеквизитов()  
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	мЕстьЗаказ = ЗначениеЗаполнено(Заказ);
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОтходы, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТаре", ТаблицаПоТаре));
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Продукция,				// ТабличнаяЧастьТовары
			ВозвратнаяТара			// ТабличнаяЧастьВозвратнаяТара
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Материалы,				// ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			ПрочиеЗатраты,				// ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			ВозвратныеОтходы			// ТабличнаяЧастьТовары
		);
		
	КонецЕсли;
	


	Если АвтораспределениеМатериалов Тогда
		ЗаполнитьТаблицуРаспределенияМатериалов(Ложь);
	КонецЕсли;

	Если АвтораспределениеПрочихЗатрат Тогда
		ЗаполнитьТаблицуРаспределенияПрочихЗатрат(Ложь);
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			РаспределениеМатериалов // ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			РаспределениеПрочихЗатрат // ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			РаспределениеВозвратныхОтходов // ТабличнаяЧастьТовары
		);
		
	КонецЕсли;
	
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Продукция");

	ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Продукция);
	
	// Заполнение статей затрат в табличных частях документа.
	Если Не ВводитьСтатьиЗатратПоСтрокам Тогда
		УправлениеПроизводством.ЗаполнитьСтатьюЗатратВСтрокахТабЧасти(ЭтотОбъект, Материалы);
		УправлениеПроизводством.ЗаполнитьСтатьюЗатратВСтрокахТабЧасти(ЭтотОбъект, РаспределениеМатериалов);
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если (Основание = Неопределено) ИЛИ (НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Если Основание.ВидОперации <> Перечисления.ВидыОперацийПриходныйОрдер.ИзПереработки Тогда
			Возврат;
		КонецЕсли;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		
		ЗаполнитьДокументПоОснованиюУпр(Основание);
		ЗаполнитьСчетаУчетаРасчетовРегл();

		Для Каждого СтрокаТЧ Из Продукция Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Продукция",      ОтражатьВБухгалтерскомУчете);
		КонецЦикла;
		
        Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		
		ЗаполнитьДокументПоОснованиюУпр(Основание);
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;

		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Истина;
		
		ЗаполнитьСчетаУчетаРасчетовРегл();

		Для Каждого СтрокаТЧ Из Продукция Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Продукция",      ОтражатьВБухгалтерскомУчете);
		КонецЦикла;

		Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		
		ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		СчетУчетаРасчетовПоТаре      = Основание.СчетУчетаРасчетовПоТаре;
		СчетУчетаРасчетовПоТареПоАвансам = Основание.СчетУчетаРасчетовПоТареПоАвансам;
		
		ВидПоступления               = Перечисления.ВидыПоступленияТоваров.НаСклад; //Ордер передачи товаров здесь уже не имеет значения.
		СкладОрдер                   = Основание.Склад;
		Заказ                   	 = Основание.Заказ;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации( Основание.Организация);
			Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
		
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
		КонецЕсли;
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Основание.ВозвратнаяТара Цикл
			
			НоваяСтрока = ВозвратнаяТара.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Основание.Товары Цикл
			
			Если Основание.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
				НоваяСтрока = Продукция.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Продукция", ОтражатьВБухгалтерскомУчете);
				НоваяСтрока.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(НоваяСтрока.Номенклатура, НоваяСтрока.ХарактеристикаНоменклатуры, Дата, Подразделение);
			Иначе
				НоваяСтрока = Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				
				НоваяСтрока.СтатьяЗатрат = НоваяСтрока.Номенклатура.СтатьяЗатрат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если не ИспользоватьМатериалы и Материалы.Количество()>0 Тогда
		ИспользоватьМатериалы = истина;
	КонецЕсли;
	Если не ИспользоватьПрочиеЗатраты и ПрочиеЗатраты.Количество()>0 Тогда
		ИспользоватьпрочиеЗатраты = истина;
	КонецЕсли;
	Если не ИспользоватьВозвратныеОтходы и ВозвратныеОтходы.Количество()>0 Тогда
		ИспользоватьВозвратныеОтходы = истина;
	КонецЕсли;
	
	Если АвтораспределениеМатериалов и РаспределениеМатериалов.Количество()>0 Тогда
		АвтораспределениеМатериалов = Ложь;
	КонецЕсли;
	Если АвтораспределениеПрочихЗатрат и РаспределениеПрочихЗатрат.Количество()>0 Тогда
		АвтораспределениепрочихЗатрат = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета    .Получить();
мИспользоватьТолькоСборочныеСпецификации = глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");
мИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Продукция", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
