////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьВидимость()
	//Видимость склада в табличной части в зависимости от настроек
	УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");

	УказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
			Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

	Элементы.ТоварыСклад.Видимость = 			УказаниеСкладовВТЧ;
	Элементы.ВозвратнаяТараСклад.Видимость = 	УказаниеСкладовВТЧ;
	
	//Видимость заказов поставщику в табличной  части в зависимости от настроек
	УказаниеЗаказов = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
	УказаниеЗаказовВТЧ = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступления)
			ИЛИ (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
	Элементы.ТоварыЗаказПоставщику.Видимость = 			УказаниеЗаказовВТЧ;
	Элементы.УслугиЗаказПоставщику.Видимость = 			УказаниеЗаказовВТЧ;
	Элементы.ВозвратнаяТараЗаказПоставщику.Видимость = 	УказаниеЗаказовВТЧ;
	
	УстановитьВидимостьСчетаУчетаНДСВТабличныхЧастях();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетаУчетаНДСВТабличныхЧастях()
	
	Если Элементы.Найти("ТоварыСчетУчетаНДС") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// Видимость счета учета НДС в табличных частях - только для старых документов, в которых уже были заполнены эти счета
	Элементы.ТоварыСчетУчетаНДС.Видимость  = ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(Объект.Товары);
	Элементы.УслугиСчетУчетаНДС.Видимость  = ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(Объект.Услуги);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаСделки()
	Если ДоговорПоСчетам Тогда
		ОписаниеТипаСделки = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика");
	Иначе
		ОписаниеТипаСделки = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
	КонецЕсли;
	Элементы.Сделка.ОграничениеТипа = ОписаниеТипаСделки;
	Если НЕ ОписаниеТипаСделки.СодержитТип(ТипЗнч(Объект.Сделка)) Тогда
		Объект.Сделка = ОписаниеТипаСделки.ПривестиЗначение(Объект.Сделка);
	КонецЕсли;
КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Количество, Коэффициент, СведенияЕдиницаИзмеренияМест;
	Перем ХарактеристикаНоменклатуры, СерияНоменклатуры;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",					Номенклатура);
	ЗначениеВыбора.Свойство("ХарактеристикаНоменклатуры",	ХарактеристикаНоменклатуры);
	ЗначениеВыбора.Свойство("СерияНоменклатуры",			СерияНоменклатуры);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",				ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("ЕдиницаИзмеренияМест",			ЕдиницаИзмеренияМест);
	ЗначениеВыбора.Свойство("Коэффициент",					Коэффициент);
	ЗначениеВыбора.Свойство("Количество",					Количество);
	ЗначениеВыбора.Свойство("СведенияЕдиницаИзмеренияМест", СведенияЕдиницаИзмеренияМест);


	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	Если ИмяТабличнойЧасти = "Товары" Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СкладОрдер) И ИмяТабличнойЧасти <> "Услуги" И
		НЕ ВидПоступленияПоОрдеру() Тогда
		СтруктураОтбора.Вставить("Склад", Объект.СкладОрдер);
	КонецЕсли;
	
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		Если ИмяТабличнойЧасти <> "ВозвратнаяТара" Тогда
			РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, Новый Структура("УчитыватьНДС, СуммаВключаетНДС", Объект.УчитыватьНДС, Объект.СуммаВключаетНДС));
		КонецЕсли;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.Количество       			= Количество;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест		= ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент      			= Коэффициент;
			РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, СведенияЕдиницаИзмеренияМест);
		КонецЕсли;
		//Для заполнения цен, сумм и ставок НДС вызовем обработчики изменения номенклатуры
		Если ИмяТабличнойЧасти = "Товары" Тогда
			ИзменениеНоменклатурыКлиент(СтрокаТабличнойЧасти);
		ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
			ИзменениеНоменклатурыУслугиКлиент(СтрокаТабличнойЧасти)
		ИначеЕсли ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
			ИзменениеНоменклатурыТараКлиент(СтрокаТабличнойЧасти);
		КонецЕсли;
		//Заполним реквизиты новой строки табличной части из реквизитов шапки
		Если ИмяТабличнойЧасти <> "Услуги" Тогда
			Если ЗначениеЗаполнено(Объект.СкладОрдер) Тогда
				Если ВидПоступленияПоОрдеру() Тогда
					СтрокаТабличнойЧасти.ПриходныйОрдер = Объект.СкладОрдер;
				Иначе
					СтрокаТабличнойЧасти.Склад = Объект.СкладОрдер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
	РассчитатьСуммуДокумента();
КонецПроцедуры //

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	ЕстьУслуги = Ложь;
	Если ИмяТабличнойЧасти = "Товары" Тогда
		Команда = "ПодборВТабличнуюЧастьТовары";
	ИначеЕсли ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Команда = "ПодборВТабличнуюЧастьВозвратняТара";
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		Команда = "ПодборВТабличнуюЧастьУслуги";
		ЕстьУслуги = Истина;
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги", ЕстьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Истина);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Это существующий документ. 
		// Проверим, что его можно менять.
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(РеквизитФормыВЗначение("Объект"), ЭтаФорма);

	КонецЕсли;
	УстановитьВидимость();
	
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ДоговорПоЗаказам = (Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	ДоговорПоСчетам = (Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);
	ВидПоступленияПоОрдеру = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьПараметрыСкладаОрдера();
	УстановитьДоступность();
	УстановитьОграничениеТипаСделки();
	РассчитатьСуммуДокумента(Истина);
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.СерийныеНомера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	//Удаление лишних серийных номеров - для случая когда 
	//- документ введен в обычной форме
	//- после этого в управляемой форме уменьшено количество либо удалена строка
	
	//Получим сводную таблицу: количество серийных номеров для каждой номенклатуры
	ТаблицаСерийныхНомеров = ТекущийОбъект.СерийныеНомера.Выгрузить();
	ТаблицаСерийныхНомеров.Колонки.Добавить("Количество");
	ТаблицаСерийныхНомеров.ЗаполнитьЗначения(1, "Количество");
	ТаблицаСерийныхНомеров.Свернуть("КлючСвязи", "Количество");
	
	Для Каждого СтрокаТаблицыСерийныхНомеров ИЗ ТаблицаСерийныхНомеров Цикл
		КоличествоСерийныхНомеров = СтрокаТаблицыСерийныхНомеров.Количество;
		СтрокаТаблицыТовары = ТекущийОбъект.Товары.Найти(СтрокаТаблицыСерийныхНомеров.КлючСвязи, "КлючСвязи");
		Если СтрокаТаблицыТовары = Неопределено Тогда
			КоличествоТоваров = 0;
		Иначе
			КоличествоТоваров = СтрокаТаблицыТовары.Количество * СтрокаТаблицыТовары.Коэффициент / СтрокаТаблицыТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		КонецЕсли;
		Если КоличествоТоваров >= КоличествоСерийныхНомеров Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрокСерийныхНомеров = ТекущийОбъект.СерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТаблицыСерийныхНомеров.КлючСвязи));
		Для СчетчикНомеров = 1 ПО (КоличествоСерийныхНомеров - КоличествоТоваров) Цикл
			ТекущийОбъект.СерийныеНомера.Удалить(МассивСтрокСерийныхНомеров[КоличествоСерийныхНомеров - СчетчикНомеров]);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора("Товары", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора("ВозвратнаяТара", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора("Услуги", ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ ДАННЫХ ИЗ НАСТРОЕК

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ДобавитьДополнительныеДанныеВНастройку(Объект, Настройки, Документы.ПоступлениеТоваровУслуг.СтруктураДополнительныхДанныхФормы());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектДополнительнымиДанными(Объект, Настройки, Документы.ПоступлениеТоваровУслуг.СтруктураДополнительныхДанныхФормы());
	Модифицированность = Истина;
	
	// Заполним курс и кратность валюты
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("ВалютаДокумента", Настройки["Объект.ВалютаДокумента"]);
	ДанныеДляЗаполнения.Вставить("Дата",            Объект.Дата);
	ЗаполнитьЗначенияСвойств(Объект, РаботаСДиалогамиСервер.ПолучитьКурсВалюты(ДанныеДляЗаполнения));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияДляЗаполнения);
	ДоговорПоЗаказам = ЗначенияДляЗаполнения.ДоговорПоЗаказам;
	ДоговорПоСчетам = ЗначенияДляЗаполнения.ДоговорПоСчетам;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		УстановитьОграничениеТипаСделки();
	КонецЕсли;
	УстановитьДоступность();
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ДанныеОбменаССервером = Новый Структура("ДоговорКонтрагента, УчитыватьНДС, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ЗначенияДляЗаполнения = ИзменениеДоговораСервер(ДанныеОбменаССервером);
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияДляЗаполнения);
	ДоговорПоЗаказам = ЗначенияДляЗаполнения.ДоговорПоЗаказам;
	ДоговорПоСчетам = ЗначенияДляЗаполнения.ДоговорПоСчетам;
	УстановитьОграничениеТипаСделки();
	УстановитьДоступность();
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	ИзмененСуммаВключаетНДС = Ложь;
	Если Объект.СуммаВключаетНДС И НЕ Объект.УчитыватьНДС Тогда
		Объект.СуммаВключаетНДС = Ложь;
		ИзмененСуммаВключаетНДС = Истина;
	КонецЕсли;
	Если Объект.Товары.Количество() + Объект.Услуги.Количество() > 0 Тогда
		ПересчитатьСуммыПриИзмененииФлаговНалогов(ИзмененСуммаВключаетНДС);
	КонецЕсли;
	РассчитатьСуммуДокумента();
	УстановитьДоступность();
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)
	Если Объект.Товары.Количество() + Объект.Услуги.Количество() > 0 Тогда
		ПересчитатьСуммыПриИзмененииФлаговНалогов(Истина);
	КонецЕсли;
	РассчитатьСуммуДокумента();
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ВидПоступленияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	РаботаСДиалогамиКлиент.ЗаполнитьКурсИКратностьДокумента(Объект, ВалютаРегламентированногоУчета);

	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	РаботаСДиалогамиКлиент.ЗаполнитьКурсИКратностьДокумента(Объект, ВалютаРегламентированногоУчета);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Объект.Номер) Тогда
		ПрефиксацияОбъектовСобытия.ОчиститьНомерОбъекта(Объект.Номер, Объект.Организация);
	КонецЕсли; 
	
	РаботаСДиалогамиКлиент.УстановитьТипСкладаОрдера(Объект, Элементы, ВидПоступленияПоОрдеру());
	УстановитьПараметрыСкладаОрдера();
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПоступленияПриИзменении(Элемент)
	РаботаСДиалогамиКлиент.УстановитьТипСкладаОрдера(Объект, Элементы, ВидПоступленияПоОрдеру());
	УстановитьПараметрыСкладаОрдера();
	УстановитьДоступность();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОВТОРЯЮЩИЕСЯ ДЕЙСТВИЯ ПРИ ИЗМЕНЕНИИ РАЗНЫХ РЕКВИЗИТОВ

&НаКлиенте
Функция ВидПоступленияПоОрдеру()
	Возврат (Объект.ВидПоступления = ВидПоступленияПоОрдеру);
КонецФункции

// Процедура устанавливает доступность элементов формы
//
&НаКлиенте
Процедура УстановитьДоступность()
	ДоступностьНДС = Объект.УчитыватьНДС;
	Элементы.ТоварыСтавкаНДС.Доступность 	= ДоступностьНДС;
	Элементы.ТоварыСуммаНДС.Доступность 	= ДоступностьНДС;
	Элементы.УслугиСтавкаНДС.Доступность 	= ДоступностьНДС;
	Элементы.УслугиСуммаНДС.Доступность 	= ДоступностьНДС;
	Элементы.СуммаВключаетНДС.Доступность 	= ДоступностьНДС;
	
	ДоступностьПриходныйОрдер = ВидПоступленияПоОрдеру();
	Элементы.ТоварыПриходныйОрдер.Доступность 			= ДоступностьПриходныйОрдер;
	Элементы.ВозвратнаяТараПриходныйОрдер.Доступность 	= ДоступностьПриходныйОрдер;
	
	Если ДоговорПоЗаказам ИЛИ ДоговорПоСчетам Тогда
		Элементы.Сделка.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Сделка.АвтоОтметкаНезаполненного = Ложь;
		Если Элементы.Сделка.ОтметкаНезаполненного Тогда
			Элементы.Сделка.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;
	//Если договор по счетам, заказ поставщику в табличной части должен быть недоступен
	Элементы.ТоварыЗаказПоставщику.Доступность = НЕ ДоговорПоСчетам;
	Элементы.УслугиЗаказПоставщику.Доступность = НЕ ДоговорПоСчетам;
	Элементы.ВозвратнаяТараЗаказПоставщику.Доступность = НЕ ДоговорПоСчетам;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСкладаОрдера()
	Если ВидПоступленияПоОрдеру() Тогда
		Элементы.СкладОрдер.АвтоотметкаНезаполненного = Ложь;
		Если Элементы.СкладОрдер.ОтметкаНезаполненного Тогда
			Элементы.СкладОрдер.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	Иначе
		Если Элементы.ТоварыСклад.Видимость Тогда
			Элементы.СкладОрдер.АвтоОтметкаНезаполненного = Ложь;
			Если Элементы.СкладОрдер.ОтметкаНезаполненного Тогда
				Элементы.СкладОрдер.ОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Элементы.ТоварыСклад.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.СкладОрдер.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента(РасчитатьТолькоСуммуНДС = Ложь)
	НДСВсего = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
	Если РасчитатьТолькоСуммуНДС Тогда
		Возврат;
	КонецЕсли;
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента + НДСВсего;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписиИтоговыеСуммы()
	Элементы.СуммаДокумента.Заголовок = "Всего, " + Объект.ВалютаДокумента;
	Элементы.НДСВсего.Заголовок = "НДС (" + ?(Объект.СуммаВключаетНДС, "в т.ч.", "сверху") + ")";
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыПриИзмененииФлаговНалогов(ИзмененФлагСуммаВключаетНДС)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
							СтрокаТабличнойЧасти.Цена,
							Неопределено,
							?(ИзмененФлагСуммаВключаетНДС, НЕ ДокументОбъект.СуммаВключаетНДС, ДокументОбъект.СуммаВключаетНДС),
							ДокументОбъект.УчитыватьНДС,
							ДокументОбъект.СуммаВключаетНДС,
							Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Услуги Цикл
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
							СтрокаТабличнойЧасти.Цена,
							Неопределено,
							?(ИзмененФлагСуммаВключаетНДС, НЕ ДокументОбъект.СуммаВключаетНДС, ДокументОбъект.СуммаВключаетНДС),
							ДокументОбъект.УчитыватьНДС,
							ДокументОбъект.СуммаВключаетНДС,
							Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ В ШАПКЕ

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения, СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаСервереБезКонтекста
Функция ИзменениеДоговораСервер(ДанныеДляЗаполнения)
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ПриИзмененииЗначенияДоговора(ДанныеДляЗаполнения);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруПараметровДляРасчетаСуммы()
	Возврат Новый Структура("УчитыватьНДС,СуммаВключаетНДС", Объект.УчитыватьНДС, Объект.СуммаВключаетНДС);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ В ТАБЛИЧНОЙ ЧАСТИ

&НаСервереБезКонтекста
Функция ИзменениеНоменклатурыСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеНоменклатуры(ДанныеДляЗаполнения);
	ЗначенияДляЗаполнения.Вставить("СтавкаНДС",			ДанныеДляЗаполнения.Номенклатура.СтавкаНДС);
	Если ДанныеДляЗаполнения.Свойство("ТипЦен") Тогда
		//Добавим сведения о ценах
		ДанныеДляЗаполнения.Вставить("ЕдиницаИзмерения", ЗначенияДляЗаполнения.ЕдиницаИзмерения);
		ДанныеДляЗаполнения.Вставить("СтавкаНДС", ЗначенияДляЗаполнения.СтавкаНДС);
		Цена = ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения);
		ЗначенияДляЗаполнения.Вставить("Цена", Цена);
	КонецЕсли;
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеНоменклатурыКлиент(СтрокаТабличнойЧасти)
	ДанныеОбменаССервером = Новый Структура("Номенклатура, УчитыватьНДС, СуммаВключаетНДС");
	//Сведения, необходимые для расчета цены
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбменаССервером.Вставить("ТипЦен");
		ДанныеОбменаССервером.Вставить("Дата");
		ДанныеОбменаССервером.Вставить("ХарактеристикаНоменклатуры");
		ДанныеОбменаССервером.Вставить("Контрагент");
		ДанныеОбменаССервером.Вставить("ВалютаДокумента");
		ДанныеОбменаССервером.Вставить("КурсВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("КратностьВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("ДоговорКонтрагента");
		ДанныеОбменаССервером.Вставить("УсловиеПродаж");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
	
	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = ИзменениеНоменклатурыСервер(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДанныеОбменаССервером.СведенияЕдиницаИзмеренияМест);
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ДанныеОбменаССервером);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеНоменклатурыУслугиСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = Новый Структура();
	
	// Основные реквизиты
	ЗначенияДляЗаполнения.Вставить("СтавкаНДС",				ДанныеДляЗаполнения.Номенклатура.СтавкаНДС);
	ЗначенияДляЗаполнения.Вставить("НоменклатурнаяГруппа",	ДанныеДляЗаполнения.Номенклатура.НоменклатурнаяГруппаЗатрат);
	ЗначенияДляЗаполнения.Вставить("СтатьяЗатрат",			ДанныеДляЗаполнения.Номенклатура.СтатьяЗатрат);
	ЗначенияДляЗаполнения.Вставить("Содержание",			?(ЗначениеЗаполнено(ДанныеДляЗаполнения.Номенклатура.НаименованиеПолное), ДанныеДляЗаполнения.Номенклатура.НаименованиеПолное, ДанныеДляЗаполнения.Номенклатура.Наименование));
	Если ДанныеДляЗаполнения.Свойство("ТипЦен") Тогда
		//Добавим сведения о ценах
		ДанныеДляЗаполнения.Вставить("СтавкаНДС", ЗначенияДляЗаполнения.СтавкаНДС);
		ДанныеДляЗаполнения.Вставить("ХарактеристикаНоменклатуры", Неопределено);
		ДанныеДляЗаполнения.Вставить("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
		Цена = ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения);
		ЗначенияДляЗаполнения.Вставить("Цена", Цена);
	КонецЕсли;
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеНоменклатурыУслугиКлиент(СтрокаТабличнойЧасти)
	ДанныеОбменаССервером = Новый Структура("Номенклатура, УчитыватьНДС, СуммаВключаетНДС");
	//Сведения, необходимые для расчета цены
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбменаССервером.Вставить("ТипЦен");
		ДанныеОбменаССервером.Вставить("Дата");
		ДанныеОбменаССервером.Вставить("Контрагент");
		ДанныеОбменаССервером.Вставить("ВалютаДокумента");
		ДанныеОбменаССервером.Вставить("КурсВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("КратностьВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("ДоговорКонтрагента");
		ДанныеОбменаССервером.Вставить("УсловиеПродаж");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);


	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = ИзменениеНоменклатурыУслугиСервер(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ДанныеОбменаССервером);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеНоменклатурыТараСервер(ДанныеДляЗаполнения)
	//Заполняем только цену номенклатуры
	ЗначенияДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("СуммаВключаетНДС", Истина);
	ДанныеДляЗаполнения.Вставить("СтавкаНДС", ДанныеДляЗаполнения.Номенклатура.СтавкаНДС);
	ДанныеДляЗаполнения.Вставить("ХарактеристикаНоменклатуры", Неопределено);
	ДанныеДляЗаполнения.Вставить("ЕдиницаИзмерения", ДанныеДляЗаполнения.Номенклатура.ЕдиницаХраненияОстатков);
	Цена = ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения);
	ЗначенияДляЗаполнения.Вставить("Цена", Цена);
	
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаКлиенте
Процедура ИзменениеНоменклатурыТараКлиент(СтрокаТабличнойЧасти)
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбменаССервером = Новый Структура();
		ДанныеОбменаССервером.Вставить("Дата");
		ДанныеОбменаССервером.Вставить("УчитыватьНДС");
		ДанныеОбменаССервером.Вставить("ТипЦен");
		ДанныеОбменаССервером.Вставить("Номенклатура");
		ДанныеОбменаССервером.Вставить("Контрагент");
		ДанныеОбменаССервером.Вставить("ВалютаДокумента");
		ДанныеОбменаССервером.Вставить("КурсВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("КратностьВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("ДоговорКонтрагента");
		ДанныеОбменаССервером.Вставить("УсловиеПродаж");
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
		
		// Получим все необходимые данные на сервере
		ЗначенияДляЗаполнения = ИзменениеНоменклатурыТараСервер(ДанныеОбменаССервером);
		
		// Заполним реквизиты строки
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
		РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеЕдиницыИзмеренияСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеЕдиницыИзмерения(ДанныеДляЗаполнения);
	//Пересчитаем цену с учетом коэффициента
	Если ДанныеДляЗаполнения.Цена <> 0 И ДанныеДляЗаполнения.Коэффициент <> ЗначенияДляЗаполнения.Коэффициент
		И ДанныеДляЗаполнения.Коэффициент <> 0 Тогда
		Цена = ДанныеДляЗаполнения.Цена * ЗначенияДляЗаполнения.Коэффициент / ДанныеДляЗаполнения.Коэффициент;
		ДанныеДляЗаполнения.Вставить("Цена", Цена);
	КонецЕсли;

	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения)
	Цена = Ценообразование.ПолучитьЦенуКонтрагента(ДанныеДляЗаполнения.Номенклатура, 
										ДанныеДляЗаполнения.ХарактеристикаНоменклатуры, 
										ДанныеДляЗаполнения.Контрагент,
										ДанныеДляЗаполнения.ТипЦен, 
										ДанныеДляЗаполнения.Дата, 
										ДанныеДляЗаполнения.ЕдиницаИзмерения,
										ДанныеДляЗаполнения.ВалютаДокумента, 
										ДанныеДляЗаполнения.КурсВзаиморасчетов,
										ДанныеДляЗаполнения.КратностьВзаиморасчетов,
										ДанныеДляЗаполнения.ДоговорКонтрагента,
										ДанныеДляЗаполнения.УсловиеПродаж);

	// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
	Если ЗначениеЗаполнено(Цена) Тогда

		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
										ДанныеДляЗаполнения.ТипЦен.ЦенаВключаетНДС,
										ДанныеДляЗаполнения.УчитыватьНДС, 
										ДанныеДляЗаполнения.СуммаВключаетНДС, 
										Ценообразование.ПолучитьСтавкуНДС(ДанныеДляЗаполнения.СтавкаНДС));
	КонецЕсли;
	Возврат Цена;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ТОВАРЫ" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ИзменениеНоменклатурыКлиент(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	//При изменении характеристики меняются только цены
	//Если тип цен не заполнен, ничего делать не надо
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДанныеОбменаССервером = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, СтавкаНДС, 
								|Дата,Контрагент, ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, 
								|ДоговорКонтрагента, УсловиеПродаж, УчитыватьНДС, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Цена = ОпределитьЦенуНоменклатуры(ДанныеОбменаССервером);
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ДанныеОбменаССервером);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ДанныеОбменаССервером = Новый Структура("ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Коэффициент, Цена");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);

	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = ИзменениеЕдиницыИзмеренияСервер(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);

	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДанныеОбменаССервером.СведенияЕдиницаИзмеренияМест);
	// могла измениться цена в табличной части
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.ОчиститьКоличествоМестПриОчисткеЕдиницыМест(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(Объект.СкладОрдер) Тогда
			Если ВидПоступленияПоОрдеру() Тогда
				СтрокаТабличнойЧасти.ПриходныйОрдер = Объект.СкладОрдер;
			Иначе
				СтрокаТабличнойЧасти.Склад = Объект.СкладОрдер;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	ДействиеПодбор("Товары");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "УСЛУГИ" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ИзменениеНоменклатурыУслугиКлиент(СтрокаТабличнойЧасти)
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПодбор(Команда)
	ДействиеПодбор("Услуги");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ВОЗВРАТНАЯ ТАРА" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
		Если ЗначениеЗаполнено(Объект.СкладОрдер) Тогда
			Если ВидПоступленияПоОрдеру() Тогда
				СтрокаТабличнойЧасти.ПриходныйОрдер = Объект.СкладОрдер;
			Иначе
				СтрокаТабличнойЧасти.Склад = Объект.СкладОрдер;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ИзменениеНоменклатурыТараКлиент(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСчетУчетаБУПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПодбор(Команда)
	ДействиеПодбор("ВозвратнаяТара");
КонецПроцедуры

&НаКлиенте
Процедура УслугиНалоговоеНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ГруппаНалоговыхНазначений = НалоговыйУчетПовтИсп.ОпределитьГруппуНалоговогоНазначенияЗатрат(СтрокаТабличнойЧасти.СчетЗатрат, СтрокаТабличнойЧасти.Субконто1, СтрокаТабличнойЧасти.Субконто2, СтрокаТабличнойЧасти.Субконто3);
	РаботаСДиалогамиКлиент.НачалоВыбораЗначенияНалоговоеНазначениеУП(Элемент, СтандартнаяОбработка, ГруппаНалоговыхНазначений);
КонецПроцедуры

&НаКлиенте
Процедура УслугиНалоговоеНазначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ГруппаНалоговыхНазначений = НалоговыйУчетПовтИсп.ОпределитьГруппуНалоговогоНазначенияЗатрат(СтрокаТабличнойЧасти.СчетЗатрат, СтрокаТабличнойЧасти.Субконто1, СтрокаТабличнойЧасти.Субконто2, СтрокаТабличнойЧасти.Субконто3);
	РаботаСДиалогамиКлиент.АвтоПодборТекстаНалоговоеНазначениеУП(Текст, ДанныеВыбора, СтандартнаяОбработка, ГруппаНалоговыхНазначений);
КонецПроцедуры

&НаКлиенте
Процедура УслугиНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ГруппаНалоговыхНазначений = НалоговыйУчетПовтИсп.ОпределитьГруппуНалоговогоНазначенияЗатрат(СтрокаТабличнойЧасти.СчетЗатрат, СтрокаТабличнойЧасти.Субконто1, СтрокаТабличнойЧасти.Субконто2, СтрокаТабличнойЧасти.Субконто3);
	РаботаСДиалогамиКлиент.ОкончаниеВводаТекстаНалоговоеНазначениеУП(Текст, ДанныеВыбора, СтандартнаяОбработка, ГруппаНалоговыхНазначений);
КонецПроцедуры






