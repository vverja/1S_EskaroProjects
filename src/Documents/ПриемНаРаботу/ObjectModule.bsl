////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем мСписокНедоступныхРасчетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет табличную часть документа "Работники" списком принятых во все организации за период
//
Процедура ЗаполнитьТабличнуюЧастьРаботникиРаботникамиОрганизаций(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачалаПериода",			ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода",		ДатаОкончанияПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриемыВОрганизации.Сотрудник,
	|	ВложенныйЗапрос.ДатаПриема,
	|	ВложенныйЗапрос.ИспытательныйСрок,
	|	ВложенныйЗапрос.ЗанимаемыхСтавок,
	|	ПриемыВОрганизации.ДатаУвольнения,
	|	ИСТИНА КАК НапомнитьПоЗавершении,
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение,
	|	ПриемыВОрганизации.Должность,
	|	ПриемыВОрганизации.ГрафикРаботы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ФизЛицо КАК ФизЛицо,
	|		ВложенныйЗапрос.ДатаПриема КАК ДатаПриема,
	|		ЗНАЧЕНИЕ(Перечисление.ИспытательныйСрок.БезИспытательногоСрока) КАК ИспытательныйСрок,
	|		1 КАК ЗанимаемыхСтавок,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПриемыВОрганизации.Ссылка.Организация) КАК КоличествоОрганизаций
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ПриемыВОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|			МИНИМУМ(ПриемыВОрганизации.ДатаПриема) КАК ДатаПриема
	|		ИЗ
	|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемыВОрганизации
	|		ГДЕ
	|			ПриемыВОрганизации.Ссылка.Проведен
	|			И ПриемыВОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)";
	Если ЗначениеЗаполнено(ДатаНачалаПериода) Тогда
	Запрос.Текст = Запрос.Текст + "
	|			И ПриемыВОрганизации.ДатаПриема >= &ДатаНачалаПериода";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
	Запрос.Текст = Запрос.Текст + "
	|			И ПриемыВОрганизации.ДатаПриема <= &ДатаОкончанияПериода";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПриемыВОрганизации.Сотрудник.Физлицо) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемыВОрганизации
	|			ПО ВложенныйЗапрос.ФизЛицо = ПриемыВОрганизации.Сотрудник.Физлицо
	|				И ВложенныйЗапрос.ДатаПриема = ПриемыВОрганизации.ДатаПриема
	|				И (ПриемыВОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.ФизЛицо,
	|		ВложенныйЗапрос.ДатаПриема) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемыВОрганизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	|			ПО ПриемыВОрганизации.Ссылка.Организация = СоответствиеПодразделенийИПодразделенийОрганизаций.Организация
	|				И ПриемыВОрганизации.ПодразделениеОрганизации = СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
	|		ПО ВложенныйЗапрос.ФизЛицо = ПриемыВОрганизации.Сотрудник.Физлицо
	|			И (ПриемыВОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|			И ВложенныйЗапрос.ДатаПриема = ПриемыВОрганизации.ДатаПриема
	|			И (ВложенныйЗапрос.КоличествоОрганизаций = 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриемыВОрганизации.Сотрудник.Наименование";
	
	ТаблицаРаботников = Запрос.Выполнить().Выгрузить();
	Работники.Загрузить(ТаблицаРаботников);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаботникиПринятымиВОрганизации()

// Заполняет табличную часть документа "Работники" списком кандидатов на работу
//
Процедура ЗаполнитьТабличнуюЧастьРаботникиКандидатами() Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	ИСТИНА КАК НапомнитьПоЗавершении
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|		ПО СотрудникиОрганизаций.Физлицо = Работники.ФизЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаявкиКандидатов КАК ЗаявкиКандидатов
	|		ПО СотрудникиОрганизаций.Физлицо = ЗаявкиКандидатов.ФизЛицо
	|ГДЕ
	|	Работники.ФизЛицо ЕСТЬ NULL ";
	
	ТаблицаРаботников = Запрос.Выполнить().Выгрузить();
	Работники.Загрузить(ТаблицаРаботников);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаботникиПринятымиВОрганизации()

// Заполняет начисления и удержания по схемам мотивации
//
// Параметры:
//	ВидТаблицы - Имя табличной части, в которую заполняются схемы мотивации
//
Процедура ЗаполнениеПоСхемамМотивации(ВидТаблицы) Экспорт
	
	Если ВидТаблицы = "Начисления" Тогда
		ТекстЗапрос = 
		"ВЫБРАТЬ
		|	ПриемНаРаботуРаботникиТЧ.Сотрудник,
		|	СхемыМотивации.ВидРасчета,
		|	СхемыМотивации.Показатель1,
		|	СхемыМотивации.Валюта1,
		|	СхемыМотивации.Показатель2,
		|	СхемыМотивации.Валюта2,
		|	СхемыМотивации.Показатель3,
		|	СхемыМотивации.Валюта3,
		|	СхемыМотивации.Показатель4,
		|	СхемыМотивации.Валюта4,
		|	СхемыМотивации.Показатель5,
		|	СхемыМотивации.Валюта5,
		|	СхемыМотивации.Показатель6,
		|	СхемыМотивации.Валюта6,
		|	СхемыМотивации.ТарифныйРазряд1,
		|	СхемыМотивации.ТарифныйРазряд2,
		|	СхемыМотивации.ТарифныйРазряд3,
		|	СхемыМотивации.ТарифныйРазряд4,
		|	СхемыМотивации.ТарифныйРазряд5,
		|	СхемыМотивации.ТарифныйРазряд6
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриемНаРаботуРаботники.Сотрудник КАК Сотрудник,
		|		ПриемНаРаботуРаботники.Должность КАК Должность,
		|		ПриемНаРаботуРаботники.Подразделение КАК Подразделение
		|	ИЗ
		|		Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
		|	ГДЕ
		|		ПриемНаРаботуРаботники.Ссылка = &Ссылка) КАК ПриемНаРаботуРаботникиТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			СхемыМотивацииРаботников.Подразделение КАК Подразделение,
		|			СхемыМотивацииРаботников.Должность КАК Должность,
		|			СхемыМотивацииРаботников.ВидРасчета КАК ВидРасчета,
		|			СхемыМотивацииРаботников.Показатель1 КАК Показатель1,
		|			СхемыМотивацииРаботников.Валюта1 КАК Валюта1,
		|			СхемыМотивацииРаботников.Показатель2 КАК Показатель2,
		|			СхемыМотивацииРаботников.Валюта2 КАК Валюта2,
		|			СхемыМотивацииРаботников.Показатель3 КАК Показатель3,
		|			СхемыМотивацииРаботников.Валюта3 КАК Валюта3,
		|			СхемыМотивацииРаботников.Показатель4 КАК Показатель4,
		|			СхемыМотивацииРаботников.Валюта4 КАК Валюта4,
		|			СхемыМотивацииРаботников.Показатель5 КАК Показатель5,
		|			СхемыМотивацииРаботников.Валюта5 КАК Валюта5,
		|			СхемыМотивацииРаботников.Показатель6 КАК Показатель6,
		|			СхемыМотивацииРаботников.Валюта6 КАК Валюта6,
		|			СхемыМотивацииРаботников.ТарифныйРазряд1 КАК ТарифныйРазряд1,
		|			СхемыМотивацииРаботников.ТарифныйРазряд2 КАК ТарифныйРазряд2,
		|			СхемыМотивацииРаботников.ТарифныйРазряд3 КАК ТарифныйРазряд3,
		|			СхемыМотивацииРаботников.ТарифныйРазряд4 КАК ТарифныйРазряд4,
		|			СхемыМотивацииРаботников.ТарифныйРазряд5 КАК ТарифныйРазряд5,
		|			СхемыМотивацииРаботников.ТарифныйРазряд6 КАК ТарифныйРазряд6
		|		ИЗ
		|			РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
		|		ГДЕ
		|			СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета.УправленческиеНачисления
		|			И СхемыМотивацииРаботников.ВидСхемыМотивации = &ВидСхемыМотивации) КАК СхемыМотивации
		|		ПО (ВЫБОР
		|				КОГДА СхемыМотивации.Должность <> &ДолжностиПустаяСсылка
		|						И СхемыМотивации.Подразделение <> НЕОПРЕДЕЛЕНО
		|					ТОГДА ПриемНаРаботуРаботникиТЧ.Должность = СхемыМотивации.Должность
		|							И ПриемНаРаботуРаботникиТЧ.Подразделение = СхемыМотивации.Подразделение
		|				ИНАЧЕ ПриемНаРаботуРаботникиТЧ.Должность = СхемыМотивации.Должность
		|			КОНЕЦ)";		
	Иначе

		ТекстЗапрос = 
		"ВЫБРАТЬ
		|	ПриемНаРаботуРаботникиТЧ.Физлицо,
		|	СхемыМотивации.ВидРасчета,
		|	СхемыМотивации.Показатель1,
		|	СхемыМотивации.Валюта1,
		|	СхемыМотивации.Показатель2,
		|	СхемыМотивации.Валюта2,
		|	СхемыМотивации.Показатель3,
		|	СхемыМотивации.Валюта3,
		|	СхемыМотивации.Показатель4,
		|	СхемыМотивации.Валюта4,
		|	СхемыМотивации.Показатель5,
		|	СхемыМотивации.Валюта5,
		|	СхемыМотивации.Показатель6,
		|	СхемыМотивации.Валюта6
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриемНаРаботуРаботники.Сотрудник.Физлицо КАК Физлицо,
		|		ПриемНаРаботуРаботники.Должность КАК Должность,
		|		ПриемНаРаботуРаботники.Подразделение КАК Подразделение
		|	ИЗ
		|		Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
		|	ГДЕ
		|		ПриемНаРаботуРаботники.Ссылка = &Ссылка) КАК ПриемНаРаботуРаботникиТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			СхемыМотивацииРаботников.Подразделение КАК Подразделение,
		|			СхемыМотивацииРаботников.Должность КАК Должность,
		|			СхемыМотивацииРаботников.ВидРасчета КАК ВидРасчета,
		|			СхемыМотивацииРаботников.Показатель1 КАК Показатель1,
		|			СхемыМотивацииРаботников.Валюта1 КАК Валюта1,
		|			СхемыМотивацииРаботников.Показатель2 КАК Показатель2,
		|			СхемыМотивацииРаботников.Валюта2 КАК Валюта2,
		|			СхемыМотивацииРаботников.Показатель3 КАК Показатель3,
		|			СхемыМотивацииРаботников.Валюта3 КАК Валюта3,
		|			СхемыМотивацииРаботников.Показатель4 КАК Показатель4,
		|			СхемыМотивацииРаботников.Валюта4 КАК Валюта4,
		|			СхемыМотивацииРаботников.Показатель5 КАК Показатель5,
		|			СхемыМотивацииРаботников.Валюта5 КАК Валюта5,
		|			СхемыМотивацииРаботников.Показатель6 КАК Показатель6,
		|			СхемыМотивацииРаботников.Валюта6 КАК Валюта6		
		|		ИЗ
		|			РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
		|		ГДЕ
		|			СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета.УправленческиеУдержания
		|			И СхемыМотивацииРаботников.ВидСхемыМотивации = &ВидСхемыМотивации) КАК СхемыМотивации
		|		ПО (ВЫБОР
		|				КОГДА СхемыМотивации.Должность <> &ДолжностиПустаяСсылка
		|						И СхемыМотивации.Подразделение <> Неопределено
		|					ТОГДА ПриемНаРаботуРаботникиТЧ.Должность = СхемыМотивации.Должность
		|							И ПриемНаРаботуРаботникиТЧ.Подразделение = СхемыМотивации.Подразделение
		|				ИНАЧЕ ПриемНаРаботуРаботникиТЧ.Должность = СхемыМотивации.Должность
		|			КОНЕЦ)";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапрос);
	Запрос.УстановитьПараметр("Ссылка",						Ссылка);
	Запрос.УстановитьПараметр("ВидСхемыМотивации",			Справочники.ВариантыCхемМотивации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПодразделенияПустаяСсылка",	Справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДолжностиПустаяСсылка",		Справочники.ДолжностиОрганизаций.ПустаяСсылка());
	
	Если ВидТаблицы = "Начисления" Тогда
		Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
		
	Иначе
		Взыскания.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнениеПоСхемамМотивации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриемНаРаботу.Дата,
	|	ПриемНаРаботу.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Работники" документа
//
// Параметры: 
//  	 - режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботники(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;	
	
	// получим временную таблицу с показателями начислений
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.ТарифнаяСтавка КАК Показатель1ТарифнаяСтавка,
	|	Показатели2.Показатель.ТарифнаяСтавка КАК Показатель2ТарифнаяСтавка,
	|	Показатели4.Показатель.ТарифнаяСтавка КАК Показатель4ТарифнаяСтавка,
	|	Показатели5.Показатель.ТарифнаяСтавка КАК Показатель5ТарифнаяСтавка,
	|	Показатели6.Показатель.ТарифнаяСтавка КАК Показатель6ТарифнаяСтавка,
	|	Показатели3.Показатель.ТарифнаяСтавка КАК Показатель3ТарифнаяСтавка
	|ПОМЕСТИТЬ ВТПоказателиНачислений
	|ИЗ
	|	Документ.ПриемНаРаботу.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели
	|		ПО Начисления.ВидРасчета = Показатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели1
	|		ПО Начисления.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели2
	|		ПО Начисления.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели3
	|		ПО Начисления.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели4
	|		ПО Начисления.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели5
	|		ПО Начисления.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеНачисления.Показатели КАК Показатели6
	|		ПО Начисления.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|ГДЕ
	|	Начисления.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.ВидРасчета,
	|	Показатели1.Показатель,
	|	Показатели2.Показатель,
	|	Показатели3.Показатель,
	|	Показатели4.Показатель,
	|	Показатели5.Показатель,
	|	Показатели6.Показатель,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный,
	|	Показатели1.Показатель.Наименование,
	|	Показатели1.Показатель.ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения,
	|	Показатели2.Показатель.Предопределенный,
	|	Показатели2.Показатель.Наименование,
	|	Показатели2.Показатель.ТипПоказателя,
	|	Показатели2.Показатель.ВозможностьИзменения,
	|	Показатели3.Показатель.Предопределенный,
	|	Показатели3.Показатель.Наименование,
	|	Показатели3.Показатель.ТипПоказателя,
	|	Показатели3.Показатель.ВозможностьИзменения,
	|	Показатели4.Показатель.Предопределенный,
	|	Показатели4.Показатель.Наименование,
	|	Показатели4.Показатель.ТипПоказателя,
	|	Показатели4.Показатель.ВозможностьИзменения,
	|	Показатели5.Показатель.Предопределенный,
	|	Показатели5.Показатель.Наименование,
	|	Показатели5.Показатель.ТипПоказателя,
	|	Показатели5.Показатель.ВозможностьИзменения,
	|	Показатели6.Показатель.Предопределенный,
	|	Показатели6.Показатель.Наименование,
	|	Показатели6.Показатель.ТипПоказателя,
	|	Показатели6.Показатель.ВозможностьИзменения,
	|	Показатели1.Показатель.ТарифнаяСтавка,
	|	Показатели2.Показатель.ТарифнаяСтавка,
	|	Показатели4.Показатель.ТарифнаяСтавка,
	|	Показатели5.Показатель.ТарифнаяСтавка,
	|	Показатели6.Показатель.ТарифнаяСтавка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";		

	Запрос.Выполнить();	
	
	ВТПоказателиНачислений = "ВТПоказателиНачислений";
	

	// получим временную таблицу с показателями начислений
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.ВидРасчета КАК ВидРасчета,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.ТарифнаяСтавка КАК Показатель1ТарифнаяСтавка,
	|	Показатели2.Показатель.ТарифнаяСтавка КАК Показатель2ТарифнаяСтавка,
	|	Показатели3.Показатель.ТарифнаяСтавка КАК Показатель3ТарифнаяСтавка,
	|	Показатели4.Показатель.ТарифнаяСтавка КАК Показатель4ТарифнаяСтавка,
	|	Показатели5.Показатель.ТарифнаяСтавка КАК Показатель5ТарифнаяСтавка,
	|	Показатели6.Показатель.ТарифнаяСтавка КАК Показатель6ТарифнаяСтавка
	|ПОМЕСТИТЬ ВТПоказателиУдержаний
	|ИЗ
	|	Документ.ПриемНаРаботу.Взыскания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели
	|		ПО Удержания.ВидРасчета = Показатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели1
	|		ПО Удержания.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели2
	|		ПО Удержания.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели3
	|		ПО Удержания.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели4
	|		ПО Удержания.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели5
	|		ПО Удержания.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УправленческиеУдержания.Показатели КАК Показатели6
	|		ПО Удержания.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|ГДЕ
	|	Удержания.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.ВидРасчета,
	|	Показатели1.Показатель,
	|	Показатели2.Показатель,
	|	Показатели3.Показатель,
	|	Показатели4.Показатель,
	|	Показатели5.Показатель,
	|	Показатели6.Показатель,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.Предопределенный,
	|	Показатели1.Показатель.Наименование,
	|	Показатели1.Показатель.ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения,
	|	Показатели2.Показатель.Предопределенный,
	|	Показатели2.Показатель.Наименование,
	|	Показатели2.Показатель.ТипПоказателя,
	|	Показатели2.Показатель.ВозможностьИзменения,
	|	Показатели3.Показатель.Предопределенный,
	|	Показатели3.Показатель.Наименование,
	|	Показатели3.Показатель.ТипПоказателя,
	|	Показатели3.Показатель.ВозможностьИзменения,
	|	Показатели4.Показатель.Предопределенный,
	|	Показатели4.Показатель.Наименование,
	|	Показатели4.Показатель.ТипПоказателя,
	|	Показатели4.Показатель.ВозможностьИзменения,
	|	Показатели5.Показатель.Предопределенный,
	|	Показатели5.Показатель.Наименование,
	|	Показатели5.Показатель.ТипПоказателя,
	|	Показатели5.Показатель.ВозможностьИзменения,
	|	Показатели6.Показатель.Предопределенный,
	|	Показатели6.Показатель.Наименование,
	|	Показатели6.Показатель.ТипПоказателя,
	|	Показатели6.Показатель.ВозможностьИзменения,
	|	Показатели1.Показатель.ТарифнаяСтавка,
	|	Показатели2.Показатель.ТарифнаяСтавка,
	|	Показатели3.Показатель.ТарифнаяСтавка,
	|	Показатели4.Показатель.ТарифнаяСтавка,
	|	Показатели5.Показатель.ТарифнаяСтавка,
	|	Показатели6.Показатель.ТарифнаяСтавка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";

	Запрос.Выполнить();	
	
	ВТПоказателиУдержаний = "ВТПоказателиУдержаний";

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "Работники": 
	// 1. Выборка "ТЧРаботники": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникуДоНазначения": 
	//		Для каждой строки ТЧРаботники выполняем срез по регистру РегистрСведенийРаботники на дату ДатаНачала
	//		для выполнения проверки "Работник не должен работать на дату приема"
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "Сотрудник".
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	//		На каждую дату приема и увольнения ищем движения в регистре "Работники"
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Работники"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботники.Сотрудник,
	|	ТЧРаботники.Сотрудник.Наименование,
	|	ТЧРаботники.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботники.Подразделение,
	|	ТЧРаботники.Должность КАК Должность,
	|	ТЧРаботники.Должность КАК Вакансия,
	|	ТЧРаботники.ЗанимаемыхСтавок,
	|	ТЧРаботники.ДатаПриема,
	|	ТЧРаботники.ДатаУвольнения,
	|	ТЧРаботники.НапомнитьПоЗавершении,
	|	ТЧРаботники.ИспытательныйСрок,
	|	ТЧРаботники.ГрафикРаботы,
	|	ТЧРаботники.СпособОтраженияВУпрУчете,
	|	ТЧРаботники.УчетНачисленийПоОрганизации,
	|	NULL КАК ВидРасчета,
	|	ИСТИНА КАК ПроизвольнаяФормулаРасчета,
	|	NULL КАК ОсновноеНачисление,
	|	NULL КАК Показатель1,
	|	NULL КАК Валюта1,
	|	NULL КАК Показатель2,
	|	NULL КАК Валюта2,
	|	NULL КАК Показатель3,
	|	NULL КАК Показатель4,
	|	NULL КАК Показатель5,
	|	NULL КАК Показатель6,
	|	NULL КАК Валюта3,
	|	NULL КАК Валюта4,
	|	NULL КАК Валюта5,
	|	NULL КАК Валюта6,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL КАК ТарифныйРазряд1,
	|	NULL КАК ТарифныйРазряд2,
	|	NULL КАК ТарифныйРазряд3,
	|	NULL КАК ТарифныйРазряд4,
	|	NULL КАК ТарифныйРазряд5,
	|	NULL КАК ТарифныйРазряд6,
	|	NULL КАК КонфликтныйДокумент,
	|	NULL КАК КоличествоПоказателей,
	|	NULL КАК Показатель1Предопределенный,
	|	NULL КАК Показатель1Наименование,
	|	NULL КАК Показатель1ТипПоказателя,
	|	NULL КАК Показатель1ВозможностьИзменения,
	|	NULL КАК Показатель2Предопределенный,
	|	NULL КАК Показатель2Наименование,
	|	NULL КАК Показатель2ТипПоказателя,
	|	NULL КАК Показатель2ВозможностьИзменения,
	|	NULL КАК Показатель3Предопределенный,
	|	NULL КАК Показатель3Наименование,
	|	NULL КАК Показатель3ТипПоказателя,
	|	NULL КАК Показатель3ВозможностьИзменения,
	|	NULL КАК Показатель4Предопределенный,
	|	NULL КАК Показатель4Наименование,
	|	NULL КАК Показатель4ТипПоказателя,
	|	NULL КАК Показатель4ВозможностьИзменения,
	|	NULL КАК Показатель5Предопределенный,
	|	NULL КАК Показатель5Наименование,
	|	NULL КАК Показатель5ТипПоказателя,
	|	NULL КАК Показатель5ВозможностьИзменения,
	|	NULL КАК Показатель6Предопределенный,
	|	NULL КАК Показатель6Наименование,
	|	NULL КАК Показатель6ТипПоказателя,
	|	NULL КАК Показатель6ВозможностьИзменения,
	|	NULL КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL КАК Показатель1ТарифнаяСтавка,
	|	NULL КАК Показатель2ТарифнаяСтавка,
	|	NULL КАК Показатель3ТарифнаяСтавка,
	|	NULL КАК Показатель4ТарифнаяСтавка,
	|	NULL КАК Показатель5ТарифнаяСтавка,
	|	NULL КАК Показатель6ТарифнаяСтавка
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботники2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ТЧРаботники2
	|				ПО (ТЧРаботники2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботники.Сотрудник = ТЧРаботники2.Сотрудник
	|					И ТЧРаботники.НомерСтроки > ТЧРаботники2.НомерСтроки
	|		ГДЕ
	|			ТЧРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботники.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботники.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Начисления"",
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧРаботники.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.Физлицо,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ТЧРаботники.ДатаПриема,
	|	ТЧРаботники.ДатаУвольнения,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ВидРасчета.ПроизвольнаяФормулаРасчета,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Валюта1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Валюта2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Валюта3,
	|	ТЧНачисления.Валюта4,
	|	ТЧНачисления.Валюта5,
	|	ТЧНачисления.Валюта6,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ТЧНачисления.ТарифныйРазряд1,
	|	ТЧНачисления.ТарифныйРазряд2,
	|	ТЧНачисления.ТарифныйРазряд3,
	|	ТЧНачисления.ТарифныйРазряд4,
	|	ТЧНачисления.ТарифныйРазряд5,
	|	ТЧНачисления.ТарифныйРазряд6,
	|	NULL,
	|	ЕСТЬNULL(Показатели.КоличествоПоказателей, 0),
	|	Показатели.Показатель1Предопределенный,
	|	Показатели.Показатель1Наименование,
	|	Показатели.Показатель1ТипПоказателя,
	|	Показатели.Показатель1ВозможностьИзменения,
	|	Показатели.Показатель2Предопределенный,
	|	Показатели.Показатель2Наименование,
	|	Показатели.Показатель2ТипПоказателя,
	|	Показатели.Показатель2ВозможностьИзменения,
	|	Показатели.Показатель3Предопределенный,
	|	Показатели.Показатель3Наименование,
	|	Показатели.Показатель3ТипПоказателя,
	|	Показатели.Показатель3ВозможностьИзменения,
	|	Показатели.Показатель4Предопределенный,
	|	Показатели.Показатель4Наименование,
	|	Показатели.Показатель4ТипПоказателя,
	|	Показатели.Показатель4ВозможностьИзменения,
	|	Показатели.Показатель5Предопределенный,
	|	Показатели.Показатель5Наименование,
	|	Показатели.Показатель5ТипПоказателя,
	|	Показатели.Показатель5ВозможностьИзменения,
	|	Показатели.Показатель6Предопределенный,
	|	Показатели.Показатель6Наименование,
	|	Показатели.Показатель6ТипПоказателя,
	|	Показатели.Показатель6ВозможностьИзменения,
	|	Показатели.Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель1ТарифнаяСтавка,
	|	Показатели.Показатель2ТарифнаяСтавка,
	|	Показатели.Показатель3ТарифнаяСтавка,
	|	Показатели.Показатель4ТарифнаяСтавка,
	|	Показатели.Показатель5ТарифнаяСтавка,
	|	Показатели.Показатель6ТарифнаяСтавка
	|ИЗ
	|	Документ.ПриемНаРаботу.Начисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиНачислений КАК Показатели
	|		ПО ТЧНачисления.ВидРасчета = Показатели.ВидРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|		ПО ТЧНачисления.Ссылка = ТЧРаботники.Ссылка
	|			И ТЧНачисления.Сотрудник = ТЧРаботники.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПриемНаРаботуНачисления1.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ПриемНаРаботуНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ПриемНаРаботу.Начисления КАК ПриемНаРаботуНачисления1
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Начисления КАК ПриемНаРаботуНачисления2
	|				ПО ПриемНаРаботуНачисления1.Ссылка = ПриемНаРаботуНачисления2.Ссылка
	|					И (ПриемНаРаботуНачисления1.ВидРасчета = ПриемНаРаботуНачисления2.ВидРасчета
	|						ИЛИ ПриемНаРаботуНачисления1.ВидРасчета.ЗачетОтработанногоВремени
	|							И ПриемНаРаботуНачисления2.ВидРасчета.ЗачетОтработанногоВремени)
	|					И ПриемНаРаботуНачисления1.НомерСтроки < ПриемНаРаботуНачисления2.НомерСтроки
	|					И ПриемНаРаботуНачисления1.Сотрудник = ПриемНаРаботуНачисления2.Сотрудник
	|		ГДЕ
	|			ПриемНаРаботуНачисления1.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПриемНаРаботуНачисления1.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧНачисления.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Взыскания"",
	|	ТЧВзыскания.НомерСтроки,
	|	NULL,
	|	ТЧРаботники.Сотрудник.Физлицо.Наименование,
	|	ТЧВзыскания.Физлицо,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ТЧРаботники.ДатаПриема,
	|	ТЧРаботники.ДатаУвольнения,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ТЧВзыскания.ВидРасчета,
	|	ТЧВзыскания.ВидРасчета.ПроизвольнаяФормулаРасчета,
	|	NULL,
	|	ТЧВзыскания.Показатель1,
	|	ТЧВзыскания.Валюта1,
	|	ТЧВзыскания.Показатель2,
	|	ТЧВзыскания.Валюта2,
	|	ТЧВзыскания.Показатель3,
	|	ТЧВзыскания.Показатель4,
	|	ТЧВзыскания.Показатель5,
	|	ТЧВзыскания.Показатель6,
	|	ТЧВзыскания.Валюта3,
	|	ТЧВзыскания.Валюта4,
	|	ТЧВзыскания.Валюта5,
	|	ТЧВзыскания.Валюта6,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЕСТЬNULL(Показатели.КоличествоПоказателей, 0),
	|	Показатели.Показатель1Предопределенный,
	|	Показатели.Показатель1Наименование,
	|	Показатели.Показатель1ТипПоказателя,
	|	Показатели.Показатель1ВозможностьИзменения,
	|	Показатели.Показатель2Предопределенный,
	|	Показатели.Показатель2Наименование,
	|	Показатели.Показатель2ТипПоказателя,
	|	Показатели.Показатель2ВозможностьИзменения,
	|	Показатели.Показатель3Предопределенный,
	|	Показатели.Показатель3Наименование,
	|	Показатели.Показатель3ТипПоказателя,
	|	Показатели.Показатель3ВозможностьИзменения,
	|	Показатели.Показатель4Предопределенный,
	|	Показатели.Показатель4Наименование,
	|	Показатели.Показатель4ТипПоказателя,
	|	Показатели.Показатель4ВозможностьИзменения,
	|	Показатели.Показатель5Предопределенный,
	|	Показатели.Показатель5Наименование,
	|	Показатели.Показатель5ТипПоказателя,
	|	Показатели.Показатель5ВозможностьИзменения,
	|	Показатели.Показатель6Предопределенный,
	|	Показатели.Показатель6Наименование,
	|	Показатели.Показатель6ТипПоказателя,
	|	Показатели.Показатель6ВозможностьИзменения,
	|	Показатели.Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ПриемНаРаботу.Взыскания КАК ТЧВзыскания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиУдержаний КАК Показатели
	|		ПО ТЧВзыскания.ВидРасчета = Показатели.ВидРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|		ПО ТЧВзыскания.Ссылка = ТЧРаботники.Ссылка
	|			И ТЧВзыскания.Физлицо = ТЧРаботники.Сотрудник.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПриемНаРаботуВзыскания1.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ПриемНаРаботуВзыскания2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ПриемНаРаботу.Взыскания КАК ПриемНаРаботуВзыскания1
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Взыскания КАК ПриемНаРаботуВзыскания2
	|				ПО ПриемНаРаботуВзыскания1.Ссылка = ПриемНаРаботуВзыскания2.Ссылка
	|					И ПриемНаРаботуВзыскания1.ВидРасчета = ПриемНаРаботуВзыскания2.ВидРасчета
	|					И ПриемНаРаботуВзыскания1.НомерСтроки < ПриемНаРаботуВзыскания2.НомерСтроки
	|					И ПриемНаРаботуВзыскания1.Физлицо = ПриемНаРаботуВзыскания2.Физлицо
	|		ГДЕ
	|			ПриемНаРаботуВзыскания1.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПриемНаРаботуВзыскания1.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧВзыскания.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧВзыскания.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	ТЧРаботники.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ПРЕДСТАВЛЕНИЕ(КонфликтныеДвижения.Регистратор),
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК ТЧРаботники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегистрСведенийРаботники.Период КАК Период,
	|			РегистрСведенийРаботники.ФизЛицо КАК Физлицо,
	|			РегистрСведенийРаботники.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрСведений.Работники КАК РегистрСведенийРаботники
	|		ГДЕ
	|			РегистрСведенийРаботники.ФизЛицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ПриемНаРаботуРаботники.Сотрудник.Физлицо
	|					ИЗ
	|						Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|					ГДЕ
	|						ПриемНаРаботуРаботники.Ссылка = &ДокументСсылка)) КАК КонфликтныеДвижения
	|		ПО ((КонфликтныеДвижения.Период МЕЖДУ ТЧРаботники.ДатаПриема И ВЫБОР
	|					КОГДА ТЧРаботники.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ТЧРаботники.ДатаУвольнения, ДЕНЬ, 1)
	|				КОНЕЦ И НЕ ТЧРаботники.НапомнитьПоЗавершении)
	|				ИЛИ КонфликтныеДвижения.Период = ТЧРаботники.ДатаПриема)
	|			И ТЧРаботники.Сотрудник.Физлицо = КонфликтныеДвижения.Физлицо
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботники()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по работникам
//	Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "Работники" Тогда

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Работники"": ";
		
		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Подразделение) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение, в которое принимается работник!", Отказ, Заголовок);
		КонецЕсли;
		
		// Должность
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана должность работника!", Отказ, Заголовок);
		КонецЕсли;
		
		// Дата приема
		НетДатыПриема = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПриема);
		Если НетДатыПриема Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата приема на работу!", Отказ, Заголовок);
		КонецЕсли;

		// Количество ставок
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано количество занимаемых работником ставок!", Отказ, Заголовок);
		КонецЕсли;

		Если ВыборкаПоСтрокамДокумента.ИспытательныйСрок = Перечисления.ИспытательныйСрок.СИспытательнымСроком 
			и НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания испытательного срока (дата ""по"")!", Отказ, Заголовок);
		КонецЕсли;

		// ГрафикРаботы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
		КонецЕсли;

		Если НетСотрудника ИЛИ НетДатыПриема Тогда
			Возврат;
		КонецЕсли;
		
		// проверка корректности сочетаний реквизитов

		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения) и ВыборкаПоСтрокамДокумента.ДатаПриема > ВыборкаПоСтрокамДокумента.ДатаУвольнения Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата приема не может превышать дату окончания работы!", Отказ, Заголовок);
		КонецЕсли;

		// сотрудник указан дважды
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "работник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "Начисления" Тогда

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Начисления"": ";
		
		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
			
		Иначе
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СотрудникНаименование) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан сотрудник, отсутствующий в списке работников!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;

		// ВидРасчета
		НетВР = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
		Если НетВР Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
			
		ИначеЕсли мСписокНедоступныхРасчетов.НайтиПоЗначению(ВыборкаПоСтрокамДокумента.ВидРасчета) <> Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный вид расчета нельзя назначать в качестве планового!", Отказ, Заголовок);
			
		Иначе
			
			ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Истина, Отказ, Заголовок, Истина);
			
		КонецЕсли;
		
		Если НетВР или НетСотрудника Тогда
			Возврат;
		КонецЕсли;
		
		// начисление указано дважды
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
				СтрокаСообщениеОбОшибке = "работнику не может быть назначено основное начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			Иначе
				СтрокаСообщениеОбОшибке = "работнику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "Взыскания" Тогда

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Взыскания"": ";
		
		// Физлицо
		НетФизлица = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Физлицо);
		Если НетФизлица Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
			
		Иначе
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СотрудникНаименование) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан сотрудник, отсутствующий в списке работников!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;

		// ВидРасчета
		НетВР = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
		Если НетВР Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
			
		ИначеЕсли мСписокНедоступныхРасчетов.НайтиПоЗначению(ВыборкаПоСтрокамДокумента.ВидРасчета) <> Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный вид расчета нельзя назначать в качестве планового!", Отказ, Заголовок);
			
		Иначе
			
			ПроведениеРасчетов.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Ложь, Отказ, Заголовок, Истина);
						
		КонецЕсли;
		
		Если НетВР ИЛИ НетФизлица Тогда
			Возврат;
		КонецЕсли;
		
		// начисление указано дважды
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "работнику не может быть назначено одно и тоже взыскание дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Работники"": ";
		
		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "период действия приказа противоречит кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПараметров = "")
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		ВедетсяНаборПерсонала	= СтруктураПараметров.ВедетсяНаборПерсонала;
	Иначе
		ВедетсяНаборПерсонала	= Ложь;
	КонецЕсли;
	
	Если ВыборкаПоРаботники.ВидСтрокиЗапроса = "Работники" Тогда
		
		Движение = Движения.Работники.Добавить();
		// Свойства
		Движение.Период						= ВыборкаПоРаботники.ДатаПриема;
		// Измерения
		Движение.Физлицо					= ВыборкаПоРаботники.Физлицо;
		// Ресурсы
		Движение.Подразделение				= ВыборкаПоРаботники.Подразделение;
		Движение.Должность					= ВыборкаПоРаботники.Должность;
		Движение.ЗанимаемыхСтавок			= ВыборкаПоРаботники.ЗанимаемыхСтавок;
		Движение.ГрафикРаботы				= ВыборкаПоРаботники.ГрафикРаботы;
		// Реквизиты
		Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу;
		
		Если Не (НЕ ЗначениеЗаполнено(ВыборкаПоРаботники.СпособОтраженияВУпрУчете) И ВыборкаПоРаботники.УчетНачисленийПоОрганизации = Ложь) Тогда
			Движение = Движения.УчетЗаработкаРаботников.Добавить();
			// Свойства
			Движение.Период						= ВыборкаПоРаботники.ДатаПриема;
			// Измерения
			Движение.Физлицо					= ВыборкаПоРаботники.Физлицо;
			// Ресурсы
			Движение.СпособОтраженияВУпрУчете	= ВыборкаПоРаботники.СпособОтраженияВУпрУчете;
			Движение.УчетНачисленийПоОрганизации= ВыборкаПоРаботники.УчетНачисленийПоОрганизации;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаУвольнения) Тогда
			Если Не ВыборкаПоРаботники.НапомнитьПоЗавершении Тогда
				Движение = Движения.Работники.Добавить();
				// Свойства
				Движение.Период						= ВыборкаПоРаботники.ДатаУвольнения + мДлинаСуток;
				// Измерения
				Движение.Физлицо					= ВыборкаПоРаботники.Физлицо;
				// Ресурсы
				Движение.Подразделение				= ВыборкаПоРаботники.Подразделение;
				Движение.Должность					= ВыборкаПоРаботники.Должность;
				// Эти поля не заполняются
				//Движение.ЗанимаемыхСтавок
				// Реквизиты
				Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Увольнение;
				
				Если Не (НЕ ЗначениеЗаполнено(ВыборкаПоРаботники.СпособОтраженияВУпрУчете) И ВыборкаПоРаботники.УчетНачисленийПоОрганизации = Ложь) Тогда
					Движение = Движения.УчетЗаработкаРаботников.Добавить();
					// Свойства
					Движение.Период		= ВыборкаПоРаботники.ДатаУвольнения + мДлинаСуток;
					// Измерения
					Движение.Физлицо	= ВыборкаПоРаботники.Физлицо;
				КонецЕсли;
				
			Иначе
				Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();
				// Свойства
				Движение.Период						= ВыборкаПоРаботники.ДатаУвольнения + мДлинаСуток;
				// Измерения
				Движение.Физлицо					= ВыборкаПоРаботники.Физлицо;
				Движение.ДатаИзменения				= ВыборкаПоРаботники.ДатаУвольнения;
				Движение.ПланируемоеСобытие			= ?(ВедетсяНаборПерсонала И ВыборкаПоРаботники.ИспытательныйСрок = Перечисления.ИспытательныйСрок.СИспытательнымСроком,Перечисления.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока,Перечисления.НамеченныеСобытияПоПерсоналу.Увольнение);
				// Реквизиты
				Движение.Подразделение				= ВыборкаПоРаботники.Подразделение;
				Движение.Должность					= ВыборкаПоРаботники.Должность;
				Движение.ЗанимаемыхСтавок			= 0;
				
			КонецЕсли;
		КонецЕсли;
		
		Движение = Движения.ПериодыРаботыРаботников.Добавить();
		
		// Измерения
		Движение.Физлицо			= ВыборкаПоРаботники.Физлицо;
		Движение.ДатаНачала			= ВыборкаПоРаботники.ДатаПриема;
		
		Если ВедетсяНаборПерсонала Тогда
			Движение = Движения.СостояниеРаботниковНаИспытательномСроке.Добавить();
			// Свойства
			Движение.Период				= ВыборкаПоРаботники.ДатаПриема;
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоРаботники.ФизЛицо;
			// Ресурсы
			Если ВыборкаПоРаботники.ИспытательныйСрок = Перечисления.ИспытательныйСрок.СИспытательнымСроком Тогда
				Движение.Состояние		= Перечисления.СостоянияРаботникаНаИспытательномСроке.ПринятНаИспытательныйСрок;
			Иначе
				Движение.Состояние		= Перечисления.СостоянияРаботникаНаИспытательномСроке.ПринятНаРаботу;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоРаботники.ВидСтрокиЗапроса = "Начисления" Тогда
		
		Движение = Движения.ПлановыеНачисленияРаботников.Добавить();
			
		// Свойства
		Движение.Период					= ВыборкаПоРаботники.ДатаПриема;
			
		// Измерения
		Движение.Физлицо				= ВыборкаПоРаботники.Физлицо;
		Если НЕ ВыборкаПоРаботники.ОсновноеНачисление Тогда
			Движение.ВидРасчетаИзмерение = ВыборкаПоРаботники.ВидРасчета;
		КонецЕсли;
			
		// Ресурсы
		Движение.Действие				= Перечисления.ВидыДействияСНачислением.Начать;
		Движение.ВидРасчета				= ВыборкаПоРаботники.ВидРасчета;
		Движение.Действует				= Истина;
		
		Для Сч = 1 По 6 Цикл
			Если ВыборкаПоРаботники.ПроизвольнаяФормулаРасчета Тогда
				Если Сч <= ВыборкаПоРаботники.КоличествоПоказателей Тогда
					Если ВыборкаПоРаботники["Показатель" + Сч + "ЗапрашиватьПриКадровыхПеремещениях"]
						Или ВыборкаПоРаботники["ОсновноеНачисление"] И ВыборкаПоРаботники["Показатель" + Сч + "ТарифнаяСтавка"] Тогда
						Движение["Показатель"+Сч]			= ВыборкаПоРаботники["Показатель"+Сч];
						Движение["Валюта"+Сч]				= ВыборкаПоРаботники["Валюта"+Сч];
						Движение["ТарифныйРазряд"+Сч]		= ВыборкаПоРаботники["ТарифныйРазряд"+Сч];
					Иначе
						Движение["Показатель"+Сч]			= 0;
						Движение["Валюта"+Сч]				= Справочники.Валюты.ПустаяСсылка();
						Движение["ТарифныйРазряд"+Сч]		= Справочники.ТарифныеРазряды.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
			Иначе
				Движение["Показатель"+Сч]			= ВыборкаПоРаботники["Показатель"+Сч];
				Движение["Валюта"+Сч]				= ВыборкаПоРаботники["Валюта"+Сч];
				Движение["ТарифныйРазряд"+Сч]		= ВыборкаПоРаботники["ТарифныйРазряд"+Сч];
			КонецЕсли;
		КонецЦикла;
		
		
	ИначеЕсли ВыборкаПоРаботники.ВидСтрокиЗапроса = "Взыскания" Тогда
		
		Движение = Движения.ПлановыеУдержанияРаботников.Добавить();
		
		// Свойства
		Движение.Период			= ВыборкаПоРаботники.ДатаПриема;
		
		// Измерения
		Движение.Физлицо		= ВыборкаПоРаботники.Физлицо;
		Движение.ВидРасчета		= ВыборкаПоРаботники.ВидРасчета;
		
		// Ресурсы	
		Движение.Действие		= Перечисления.ВидыДействияСНачислением.Начать;
		Движение.Действует		= Истина;
		
		Для Сч = 1 По 6 Цикл
			Если ВыборкаПоРаботники.ПроизвольнаяФормулаРасчета Тогда
				Если Сч <= ВыборкаПоРаботники.КоличествоПоказателей Тогда
					Если ВыборкаПоРаботники["Показатель" + Сч + "ЗапрашиватьПриКадровыхПеремещениях"] Тогда
						Движение["Показатель"+Сч]			= ВыборкаПоРаботники["Показатель"+Сч];
						Движение["Валюта"+Сч]				= ВыборкаПоРаботники["Валюта"+Сч];
					Иначе
						Движение["Показатель"+Сч]			= 0;
						Движение["Валюта"+Сч]				= Справочники.Валюты.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
			Иначе
				Движение["Показатель"+Сч]			= ВыборкаПоРаботники["Показатель"+Сч];
				Движение["Валюта"+Сч]				= ВыборкаПоРаботники["Валюта"+Сч];
			КонецЕсли;
		КонецЦикла;
		
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПараметров = "")
	
	Если ВыборкаПоРаботники.ВидСтрокиЗапроса = "Работники" Тогда
		Движение = Движения.ЗанятыеРабочиеМеста.Добавить();
		// Свойства
		Движение.Период				= ВыборкаПоРаботники.ДатаПриема;
		Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;
		// Измерения
		Движение.Подразделение		= ВыборкаПоРаботники.Подразделение;
		Движение.Должность			= ВыборкаПоРаботники.Должность;
		// Ресурсы
		Движение.Количество			= ВыборкаПоРаботники.ЗанимаемыхСтавок;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботники(Режим);
			ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать();

			ВедетсяНаборПерсонала = Константы.РежимНабораПерсонала.Получить() <> Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
			
			Пока ВыборкаПоРаботники.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, Отказ, Заголовок);

				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, Новый Структура("ВедетсяНаборПерсонала", ВедетсяНаборПерсонала));
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(Основание, Отказ)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") Тогда
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда
    		Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.УстановитьПараметр("Организация",			Основание.Организация);
			Запрос.УстановитьПараметр("Регистратор",			Основание);
			Запрос.УстановитьПараметр("СпособРасчета",			Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
			Запрос.УстановитьПараметр("СИспытательнымСроком",	Перечисления.ИспытательныйСрок.СИспытательнымСроком);
			Запрос.УстановитьПараметр("БезИспытательногоСрока",	Перечисления.ИспытательныйСрок.БезИспытательногоСрока);
		

			Запрос.Текст ="
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА
			|			РаботникиОрганизации.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
			|		ТОГДА
			|			РаботникиОрганизации.Сотрудник
			|		ИНАЧЕ
			|			РаботникиОрганизации.Сотрудник.ОсновноеНазначение
			|	КОНЕЦ КАК Сотрудник
			|ПОМЕСТИТЬ 
			|	ВТСотрудники
			|ИЗ
			|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Ссылка = &Регистратор";
			Запрос.Выполнить();				
			
	
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПриемНаРаботуРаботникиОрганизации.Сотрудник,
			|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение,
			|	ПриемНаРаботуРаботникиОрганизации.Должность КАК Должность,
			|	ПриемНаРаботуРаботникиОрганизации.ДатаПриема,
			|	ПриемНаРаботуРаботникиОрганизации.ДатаУвольнения,
			|	ИСТИНА КАК НапомнитьПоЗавершении,
			|	ПриемНаРаботуРаботникиОрганизации.ЗанимаемыхСтавок,
			|	ВЫБОР
			|		КОГДА ПриемНаРаботуРаботникиОрганизации.ИспытательныйСрок > 0
			|			ТОГДА &СИспытательнымСроком
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИспытательныйСрок.БезИспытательногоСрока)
			|	КОНЕЦ КАК ИспытательныйСрок,
			|	ПриемНаРаботуРаботникиОрганизации.ГрафикРаботы
			|ИЗ
			|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуРаботникиОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
			|		ПО (СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация)
			|			И ПриемНаРаботуРаботникиОрганизации.ПодразделениеОрганизации = СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
			|ГДЕ
			|	ПриемНаРаботуРаботникиОрганизации.Ссылка = &Регистратор
			|	И ПриемНаРаботуРаботникиОрганизации.Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТСотрудники)";
			

			Работники.Загрузить(Запрос.Выполнить().Выгрузить());
			
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		НоваяСтрока = Работники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Основание);
		НоваяСтрока.Сотрудник = Основание;
		НоваяСтрока.НапомнитьПоЗавершении = Истина;
		Если НоваяСтрока.ЗанимаемыхСтавок = 0 Тогда
			НоваяСтрока.ЗанимаемыхСтавок = 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Работники);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказы.Добавить();
		ЗаписьРегистрации.Период		= Дата;
		ЗаписьРегистрации.Регистратор	= Ссылка;
	КонецЕсли;
	
	Движения.ПериодыРаботыРаботников.РежимЗаписиРегистратора = РежимЗаписи;
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);

