Перем ДокументИзменен;
Перем ЭтоПерепроведение;
Перем ЭтоУстановкаСтатуса Экспорт;
Перем ТабЗначенийСотрудников Экспорт; //Кабаченко_Смартис
Перем СписокМаршрутов Экспорт;

Процедура СформироватьТекстЗапроса(Назначение, Запрос) Экспорт
	Если Назначение = "ЯчейкиДляПаллетПоЗоне" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазмещениеТоваровНаСкладахОстатки.Ячейка КАК Ячейка,
		|	РазмещениеТоваровНаСкладахОстатки.Номенклатура,
		|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) КАК КоличествоЕХООстаток
		|ПОМЕСТИТЬ ЗанятыеЯчейки
		|ИЗ
		|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
		|			&НаДату,
		|			Склад = &Склад
		|				И НЕ Статус = &СтатусВыполнениеОтбора) КАК РазмещениеТоваровНаСкладахОстатки
		|ГДЕ
		|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.АдресХраненияКондиции,
		|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.АдресХраненияБрака,
		|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка,
		|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.МаксимальноеКоличество,
		|	СостояниеЗонЯчеекСрезПоследних.Ячейка КАК ЯчейкаЗоны,
		|	СостояниеЗонЯчеекСрезПоследних.Зона КАК Зона
		|ПОМЕСТИТЬ АдресаХранения
		|ИЗ
		|	РегистрСведений.АдресаХраненияНоменклатурыНаСкладах.СрезПоследних(
		|			&НаДату,
		|			Склад = &Склад
		|				И Номенклатура = &Номенклатура) КАК АдресаХраненияНоменклатурыНаСкладахСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗонЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеЗонЯчеекСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеВидовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеВидовЯчеекСрезПоследних
		|			ПО СостояниеЗонЯчеекСрезПоследних.Ячейка = СостояниеВидовЯчеекСрезПоследних.Ячейка
		|		ПО АдресаХраненияНоменклатурыНаСкладахСрезПоследних.АдресХраненияКондиции = СостояниеЗонЯчеекСрезПоследних.Зона
		|ГДЕ
		|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки = &ВидЯчейкиБуферная
		|	И НЕ СостояниеЗонЯчеекСрезПоследних.Ячейка В (&ИсключаемыеЯчейки)
		|	И НЕ 1 В
		|				(ВЫБРАТЬ
		|					1 КАК Поле1
		|				ИЗ
		|					ЗанятыеЯчейки КАК ЗанятыеЯчейки
		|				ГДЕ
		|					СостояниеЗонЯчеекСрезПоследних.Ячейка = ЗанятыеЯчейки.Ячейка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АдресаХранения.ЯчейкаЗоны,
		|	АдресаХранения.ЯчейкаЗоны.НомерРяда КАК ЯчейкаЗоныНомерРяда,
		|	АдресаХранения.ЯчейкаЗоны.НомерЯруса КАК ЯчейкаЗоныНомерЯруса,
		|	АдресаХранения.ЯчейкаЗоны.НомерЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ДлинаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ШиринаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ВысотаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.МаксимальныйВес,
		|	АдресаХранения.Зона
		|ПОМЕСТИТЬ ДоступныеЯчейки
		|ИЗ
		|	АдресаХранения КАК АдресаХранения
		|ГДЕ
		|	АдресаХранения.ЯчейкаЗоны.ДлинаЯчейки * АдресаХранения.ЯчейкаЗоны.ШиринаЯчейки * АдресаХранения.ЯчейкаЗоны.ВысотаЯчейки >= &ОбъемПаллеты
		//|	И АдресаХранения.ЯчейкаЗоны.ШиринаЯчейки >= &ШиринаПаллеты
		//|	И АдресаХранения.ЯчейкаЗоны.ВысотаЯчейки >= &ВысотаПаллеты
		|	И АдресаХранения.ЯчейкаЗоны.МаксимальныйВес >= &ВесПаллеты
		|
		|СГРУППИРОВАТЬ ПО
		|	АдресаХранения.ЯчейкаЗоны,
		|	АдресаХранения.ЯчейкаЗоны.НомерРяда,
		|	АдресаХранения.ЯчейкаЗоны.НомерЯруса,
		|	АдресаХранения.ЯчейкаЗоны.НомерЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ДлинаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ШиринаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ВысотаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.МаксимальныйВес,
		|	АдресаХранения.Зона
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЯчейкаЗоныНомерРяда,
		|	ЯчейкаЗоныНомерЯруса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗанятыеЯчейки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АдресаХранения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеЯчейки.ЯчейкаЗоны,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерЯруса КАК ЯчейкаЗоныНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерРяда КАК ЯчейкаЗоныНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерЯчейки КАК ЯчейкаЗоныНомерЯчейки,
		|	ЕСТЬNULL(СУММА(СкладскиеЯчейкиВысота.ВысотаЯчейки), 0) КАК Высота,
		|	ДоступныеЯчейки.Зона
		|ПОМЕСТИТЬ ВысотаЯчеек
		|ИЗ
		|	ДоступныеЯчейки КАК ДоступныеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиВысота
		|		ПО ДоступныеЯчейки.ЯчейкаЗоныНомерРяда = СкладскиеЯчейкиВысота.НомерРяда
		|			И (1 = СкладскиеЯчейкиВысота.НомерЯчейки)
		|			И ДоступныеЯчейки.ЯчейкаЗоныНомерЯруса > СкладскиеЯчейкиВысота.НомерЯруса
		|			И (СкладскиеЯчейкиВысота.Владелец = &Склад)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеЯчейки.ЯчейкаЗоны,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерЯчейки,
		|	ДоступныеЯчейки.Зона
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЯчейкаЗоныНомерРяда,
		|	ЯчейкаЗоныНомерЯруса,
		|	ЯчейкаЗоныНомерЯчейки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДоступныеЯчейки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВысотаЯчеек.ЯчейкаЗоны,
		|	ВысотаЯчеек.ЯчейкаЗоныНомерЯруса,
		|	ЕСТЬNULL(СУММА(СкладыРасстояния.Расстояние), 0) + ЕСТЬNULL(СУММА(СкладскиеЯчейкиДлина.ДлинаЯчейки), 0) КАК Расстояние,
		|	ВысотаЯчеек.Высота КАК Высота,
		|	ВысотаЯчеек.Зона
		|ПОМЕСТИТЬ Расстояния
		|ИЗ
		|	ВысотаЯчеек КАК ВысотаЯчеек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиДлина
		|		ПО ВысотаЯчеек.ЯчейкаЗоныНомерРяда = СкладскиеЯчейкиДлина.НомерРяда
		|			И ВысотаЯчеек.ЯчейкаЗоныНомерЯруса = СкладскиеЯчейкиДлина.НомерЯруса
		|			И ВысотаЯчеек.ЯчейкаЗоныНомерЯчейки > СкладскиеЯчейкиДлина.НомерЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.Расстояния КАК СкладыРасстояния
		|		ПО ВысотаЯчеек.ЯчейкаЗоныНомерРяда = СкладыРасстояния.НомерРяда
		|
		|СГРУППИРОВАТЬ ПО
		|	ВысотаЯчеек.ЯчейкаЗоны,
		|	ВысотаЯчеек.ЯчейкаЗоныНомерЯруса,
		|	ВысотаЯчеек.Высота,
		|	ВысотаЯчеек.Зона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расстояния.ЯчейкаЗоны КАК Ячейка,
		|	Расстояния.Зона КАК ЗонаЯчейки,
		|	Расстояния.ЯчейкаЗоныНомерЯруса КАК НомерЯруса,
		|	Расстояния.Расстояние / &СкоростьДвижения + Расстояния.Высота / &СкоростьПодъема * 2 КАК ВремяРазмещения
		|ПОМЕСТИТЬ ЯчейкиВремя
		|ИЗ
		|	Расстояния КАК Расстояния
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиВремя.ВремяРазмещения) КАК ВремяРазмещения
		|ПОМЕСТИТЬ МинимальноеВремя
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиВремя.Ячейка,
		|	ЯчейкиВремя.ЗонаЯчейки,
		|	ЯчейкиВремя.НомерЯруса,
		|	ЯчейкиВремя.ВремяРазмещения
		|ПОМЕСТИТЬ ЯчейкиСМинимальнымВременем
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальноеВремя КАК МинимальноеВремя
		|		ПО ЯчейкиВремя.ВремяРазмещения = МинимальноеВремя.ВремяРазмещения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиСМинимальнымВременем.НомерЯруса) КАК НомерЯруса
		|ПОМЕСТИТЬ МинимальныйЯрус
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиСМинимальнымВременем.Ячейка,
		|	ЯчейкиСМинимальнымВременем.ЗонаЯчейки,
		|	ЯчейкиСМинимальнымВременем.ВремяРазмещения
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйЯрус КАК МинимальныйЯрус
		|		ПО ЯчейкиСМинимальнымВременем.НомерЯруса = МинимальныйЯрус.НомерЯруса";
	ИначеЕсли Назначение = "ЯчейкиДляПаллетПоВсемЗонам" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазмещениеТоваровНаСкладахОстатки.Ячейка КАК Ячейка,
		|	РазмещениеТоваровНаСкладахОстатки.Номенклатура,
		|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) КАК КоличествоЕХООстаток
		|ПОМЕСТИТЬ ЗанятыеЯчейки
		|ИЗ
		|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
		|			&НаДату,
		|			Склад = &Склад
		|				И НЕ Статус = &СтатусВыполнениеОтбора) КАК РазмещениеТоваровНаСкладахОстатки
		|ГДЕ
		|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СкладскиеЯчейки.Ссылка КАК ЯчейкаЗоны,
		|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки КАК ВидЯчейкиЗоны
		|ПОМЕСТИТЬ АдресаХранения
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеВидовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеВидовЯчеекСрезПоследних
		|		ПО СкладскиеЯчейки.Ссылка = СостояниеВидовЯчеекСрезПоследних.Ячейка
		|ГДЕ
		|	СкладскиеЯчейки.Владелец = &Склад
		|	И СостояниеВидовЯчеекСрезПоследних.ВидЯчейки = &ВидЯчейкиБуферная
		|	И НЕ СкладскиеЯчейки.Ссылка В (&ИсключаемыеЯчейки)
		|	И НЕ 1 В
		|				(ВЫБРАТЬ
		|					1 КАК Поле1
		|				ИЗ
		|					ЗанятыеЯчейки КАК ЗанятыеЯчейки
		|				ГДЕ
		|					СкладскиеЯчейки.Ссылка = ЗанятыеЯчейки.Ячейка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АдресаХранения.ЯчейкаЗоны,
		|	АдресаХранения.ЯчейкаЗоны.НомерРяда,
		|	АдресаХранения.ЯчейкаЗоны.НомерЯруса,
		|	АдресаХранения.ЯчейкаЗоны.НомерЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ДлинаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ШиринаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ВысотаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.МаксимальныйВес
		|ПОМЕСТИТЬ ДоступныеЯчейки
		|ИЗ
		|	АдресаХранения КАК АдресаХранения
		|ГДЕ
		|	АдресаХранения.ЯчейкаЗоны.ДлинаЯчейки * АдресаХранения.ЯчейкаЗоны.ШиринаЯчейки * АдресаХранения.ЯчейкаЗоны.ВысотаЯчейки >= &ОбъемПаллеты
		//|	АдресаХранения.ЯчейкаЗоны.ДлинаЯчейки >= &ДлинаПаллеты
		//|	И АдресаХранения.ЯчейкаЗоны.ШиринаЯчейки >= &ШиринаПаллеты
		//|	И АдресаХранения.ЯчейкаЗоны.ВысотаЯчейки >= &ВысотаПаллеты
		|	И АдресаХранения.ЯчейкаЗоны.МаксимальныйВес >= &ВесПаллеты
		|
		|СГРУППИРОВАТЬ ПО
		|	АдресаХранения.ЯчейкаЗоны,
		|	АдресаХранения.ЯчейкаЗоны.НомерРяда,
		|	АдресаХранения.ЯчейкаЗоны.НомерЯруса,
		|	АдресаХранения.ЯчейкаЗоны.НомерЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ДлинаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ШиринаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.ВысотаЯчейки,
		|	АдресаХранения.ЯчейкаЗоны.МаксимальныйВес
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗанятыеЯчейки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АдресаХранения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеЯчейки.ЯчейкаЗоны,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерЯчейки,
		|	ЕСТЬNULL(СУММА(СкладскиеЯчейкиВысота.ВысотаЯчейки), 0) КАК Высота
		|ПОМЕСТИТЬ ВысотаЯчеек
		|ИЗ
		|	ДоступныеЯчейки КАК ДоступныеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиВысота
		|		ПО ДоступныеЯчейки.ЯчейкаЗоныНомерРяда = СкладскиеЯчейкиВысота.НомерРяда
		|			И (1 = СкладскиеЯчейкиВысота.НомерЯчейки)
		|			И ДоступныеЯчейки.ЯчейкаЗоныНомерЯруса > СкладскиеЯчейкиВысота.НомерЯруса
		|			И (СкладскиеЯчейкиВысота.Владелец = &Склад)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеЯчейки.ЯчейкаЗоны,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаЗоныНомерЯчейки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДоступныеЯчейки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВысотаЯчеек.ЯчейкаЗоны,
		|	ВысотаЯчеек.ЯчейкаЗоныНомерЯруса,
		|	ЕСТЬNULL(СУММА(СкладыРасстояния.Расстояние), 0) + ЕСТЬNULL(СУММА(СкладскиеЯчейкиДлина.ДлинаЯчейки), 0) КАК Расстояние,
		|	ВысотаЯчеек.Высота КАК Высота
		|ПОМЕСТИТЬ Расстояния
		|ИЗ
		|	ВысотаЯчеек КАК ВысотаЯчеек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиДлина
		|		ПО ВысотаЯчеек.ЯчейкаЗоныНомерРяда = СкладскиеЯчейкиДлина.НомерРяда
		|			И ВысотаЯчеек.ЯчейкаЗоныНомерЯруса = СкладскиеЯчейкиДлина.НомерЯруса
		|			И ВысотаЯчеек.ЯчейкаЗоныНомерЯчейки > СкладскиеЯчейкиДлина.НомерЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.Расстояния КАК СкладыРасстояния
		|		ПО ВысотаЯчеек.ЯчейкаЗоныНомерРяда = СкладыРасстояния.НомерРяда
		|
		|СГРУППИРОВАТЬ ПО
		|	ВысотаЯчеек.ЯчейкаЗоны,
		|	ВысотаЯчеек.ЯчейкаЗоныНомерЯруса,
		|	ВысотаЯчеек.Высота
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расстояния.ЯчейкаЗоны КАК Ячейка,
		|	Расстояния.ЯчейкаЗоныНомерЯруса КАК НомерЯруса,
		|	Расстояния.Расстояние / &СкоростьДвижения + Расстояния.Высота / &СкоростьПодъема * 2 КАК ВремяРазмещения
		|ПОМЕСТИТЬ ЯчейкиВремя
		|ИЗ
		|	Расстояния КАК Расстояния
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиВремя.ВремяРазмещения) КАК ВремяРазмещения
		|ПОМЕСТИТЬ МинимальноеВремя
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиВремя.Ячейка,
		|	ЯчейкиВремя.ВремяРазмещения,
		|	ЯчейкиВремя.НомерЯруса
		|ПОМЕСТИТЬ ЯчейкиСМинимальнымВременем
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальноеВремя КАК МинимальноеВремя
		|		ПО ЯчейкиВремя.ВремяРазмещения = МинимальноеВремя.ВремяРазмещения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиСМинимальнымВременем.НомерЯруса) КАК НомерЯруса
		|ПОМЕСТИТЬ МинимальныйЯрус
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиСМинимальнымВременем.Ячейка,
		|	СостояниеЗонЯчеекСрезПоследних.Зона КАК ЗонаЯчейки,
		|	ЯчейкиСМинимальнымВременем.ВремяРазмещения
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйЯрус КАК МинимальныйЯрус
		|		ПО ЯчейкиСМинимальнымВременем.НомерЯруса = МинимальныйЯрус.НомерЯруса
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗонЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеЗонЯчеекСрезПоследних
		|		ПО ЯчейкиСМинимальнымВременем.Ячейка = СостояниеЗонЯчеекСрезПоследних.Ячейка";
	//ИначеЕсли Назначение = "ЯчейкиЗакрепленныеЗаНоменклатурой" Тогда
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка КАК Ячейка,
	//	|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки КАК ВидЯчейки,
	//	|	СостояниеЗонЯчеекСрезПоследних.Зона КАК ЗонаЯчейки,
	//	|	МИНИМУМ(АдресаХраненияНоменклатурыНаСкладахСрезПоследних.МаксимальноеКоличество) КАК МаксимальноеКоличество,
	//	|	ЕСТЬNULL(СУММА(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток), 0) - ЕСТЬNULL(СУММА(РезервированиеТовараВЯчейкахОстатки.КоличествоЕХООстаток), 0) КАК ЗанятоеКоличество,
	//	|	МИНИМУМ(АдресаХраненияНоменклатурыНаСкладахСрезПоследних.МаксимальноеКоличество) - (ЕСТЬNULL(СУММА(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток), 0) - ЕСТЬNULL(СУММА(РезервированиеТовараВЯчейкахОстатки.КоличествоЕХООстаток), 0)) КАК СвободноеКоличество
	//	|ИЗ
	//	|	РегистрСведений.АдресаХраненияНоменклатурыНаСкладах.СрезПоследних(
	//	|			&НаДату,
	//	|			Склад = &Склад
	//	|				И Номенклатура = &Номенклатура) КАК АдресаХраненияНоменклатурыНаСкладахСрезПоследних
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
	//	|				&НаДату,
	//	|				Склад = &Склад
	//	|					И Номенклатура = &Номенклатура) КАК РазмещениеТоваровНаСкладахОстатки
	//	|		ПО АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка = РазмещениеТоваровНаСкладахОстатки.Ячейка
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервированиеТовараВЯчейках.Остатки(
	//	|				&НаДату,
	//	|				Склад = &Склад
	//	|					И Номенклатура = &Номенклатура) КАК РезервированиеТовараВЯчейкахОстатки
	//	|		ПО АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка = РезервированиеТовараВЯчейкахОстатки.Ячейка
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеВидовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеВидовЯчеекСрезПоследних
	//	|		ПО АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка = СостояниеВидовЯчеекСрезПоследних.Ячейка
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗонЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеЗонЯчеекСрезПоследних
	//	|		ПО АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка = СостояниеЗонЯчеекСрезПоследних.Ячейка
	//	//|ГДЕ
	//	//|	НЕ АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка В (&ИсключаемыеЯчейки)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка,
	//	|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки,
	//	|	СостояниеЗонЯчеекСрезПоследних.Зона";
	ИначеЕсли Назначение = "БуферныеЯчейкиПоЗоне" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазмещениеТоваровНаСкладахОстатки.Ячейка КАК Ячейка,
		|	РазмещениеТоваровНаСкладахОстатки.Номенклатура,
		|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) КАК КоличествоЕХООстаток
		|ПОМЕСТИТЬ ЗанятыеЯчейки
		|ИЗ
		|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
		|			&НаДату,
		|			Склад = &Склад
		|				И НЕ Статус = &СтатусВыполнениеОтбора) КАК РазмещениеТоваровНаСкладахОстатки
		|ГДЕ
		|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.АдресХраненияКондиции КАК Зона,
		|	СостояниеЗонЯчеекСрезПоследних.Ячейка
		|ПОМЕСТИТЬ ЯчейкиПоЗоне
		|ИЗ
		|	РегистрСведений.АдресаХраненияНоменклатурыНаСкладах.СрезПоследних(
		|			&НаДату,
		|			Склад = &Склад
		|				И Номенклатура = &Номенклатура) КАК АдресаХраненияНоменклатурыНаСкладахСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗонЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеЗонЯчеекСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеВидовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеВидовЯчеекСрезПоследних
		|			ПО СостояниеЗонЯчеекСрезПоследних.Ячейка = СостояниеВидовЯчеекСрезПоследних.Ячейка
		|		ПО АдресаХраненияНоменклатурыНаСкладахСрезПоследних.АдресХраненияКондиции = СостояниеЗонЯчеекСрезПоследних.Зона
		|ГДЕ
		|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки = &ВидЯчейкиБуферная
		|	И НЕ СостояниеЗонЯчеекСрезПоследних.Ячейка В (&ИсключаемыеЯчейки)
		|	И НЕ 1 В
		|				(ВЫБРАТЬ
		|					1 КАК Поле1
		|				ИЗ
		|					ЗанятыеЯчейки КАК ЗанятыеЯчейки
		|				ГДЕ
		|					СостояниеЗонЯчеекСрезПоследних.Ячейка = ЗанятыеЯчейки.Ячейка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиПоЗоне.Зона,
		|	ЯчейкиПоЗоне.Ячейка,
		|	ЯчейкиПоЗоне.Ячейка.НомерРяда КАК ЯчейкаНомерРяда,
		|	ЯчейкиПоЗоне.Ячейка.НомерЯруса КАК ЯчейкаНомерЯруса,
		|	ЯчейкиПоЗоне.Ячейка.НомерЯчейки,
		|	ЯчейкиПоЗоне.Ячейка.МаксимальныйВес КАК МаксимальныйВес,
		|	ЯчейкиПоЗоне.Ячейка.ДлинаЯчейки * ЯчейкиПоЗоне.Ячейка.ШиринаЯчейки * ЯчейкиПоЗоне.Ячейка.ВысотаЯчейки КАК ОбъемЯчейки
		|ПОМЕСТИТЬ ДоступныеЯчейки
		|ИЗ
		|	ЯчейкиПоЗоне КАК ЯчейкиПоЗоне
		|ГДЕ
		|	ЯчейкиПоЗоне.Ячейка.ДлинаЯчейки >= &ДлинаКоробки
		|	И ЯчейкиПоЗоне.Ячейка.ШиринаЯчейки >= &ШиринаКоробки
		|	И ЯчейкиПоЗоне.Ячейка.ВысотаЯчейки >= &ВысотаКоробки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЯчейкаНомерРяда,
		|	ЯчейкаНомерЯруса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеЯчейки.Ячейка,
		|	ДоступныеЯчейки.ЯчейкаНомерЯруса КАК ЯчейкаНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаНомерРяда КАК ЯчейкаНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаНомерЯчейки КАК ЯчейкаНомерЯчейки,
		|	СУММА(СкладскиеЯчейкиВысота.ВысотаЯчейки) КАК Высота,
		|	СУММА(ДоступныеЯчейки.МаксимальныйВес) КАК МаксимальныйВес,
		|	СУММА(ДоступныеЯчейки.ОбъемЯчейки) КАК ОбъемЯчейки,
		|	ДоступныеЯчейки.Зона
		|ПОМЕСТИТЬ ВысотаЯчеек
		|ИЗ
		|	ДоступныеЯчейки КАК ДоступныеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиВысота
		|		ПО ДоступныеЯчейки.ЯчейкаНомерРяда = СкладскиеЯчейкиВысота.НомерРяда
		|			И (1 = СкладскиеЯчейкиВысота.НомерЯчейки)
		|			И ДоступныеЯчейки.ЯчейкаНомерЯруса > СкладскиеЯчейкиВысота.НомерЯруса
		|			И (СкладскиеЯчейкиВысота.Владелец = &Склад)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеЯчейки.Ячейка,
		|	ДоступныеЯчейки.ЯчейкаНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаНомерЯчейки,
		|	ДоступныеЯчейки.Зона
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЯчейкаНомерЯруса,
		|	ЯчейкаНомерРяда,
		|	ЯчейкаНомерЯчейки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВысотаЯчеек.Ячейка,
		|	ВысотаЯчеек.ЯчейкаНомерЯруса,
		|	ЕСТЬNULL(СУММА(СкладыРасстояния.Расстояние), 0) + ЕСТЬNULL(СУММА(СкладскиеЯчейкиДлина.ДлинаЯчейки), 0) КАК Расстояние,
		|	ВысотаЯчеек.Высота КАК Высота,
		|	ВысотаЯчеек.МаксимальныйВес КАК МаксимальныйВес,
		|	ВысотаЯчеек.ОбъемЯчейки КАК ОбъемЯчейки,
		|	ВысотаЯчеек.Зона
		|ПОМЕСТИТЬ Расстояния
		|ИЗ
		|	ВысотаЯчеек КАК ВысотаЯчеек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиДлина
		|		ПО ВысотаЯчеек.ЯчейкаНомерРяда = СкладскиеЯчейкиДлина.НомерРяда
		|			И ВысотаЯчеек.ЯчейкаНомерЯруса = СкладскиеЯчейкиДлина.НомерЯруса
		|			И ВысотаЯчеек.ЯчейкаНомерЯчейки > СкладскиеЯчейкиДлина.НомерЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.Расстояния КАК СкладыРасстояния
		|		ПО ВысотаЯчеек.ЯчейкаНомерРяда = СкладыРасстояния.НомерРяда
		|
		|СГРУППИРОВАТЬ ПО
		|	ВысотаЯчеек.Ячейка,
		|	ВысотаЯчеек.ЯчейкаНомерЯруса,
		|	ВысотаЯчеек.Высота,
		|	ВысотаЯчеек.МаксимальныйВес,
		|	ВысотаЯчеек.ОбъемЯчейки,
		|	ВысотаЯчеек.Зона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расстояния.Зона КАК Зона,
		|	Расстояния.Ячейка КАК Ячейка,
		|	Расстояния.ЯчейкаНомерЯруса КАК НомерЯруса,
		|	Расстояния.Расстояние / &СкоростьДвижения + Расстояния.Высота / &СкоростьПодъема * 2 КАК ВремяРазмещения,
		|	Расстояния.МаксимальныйВес,
		|	Расстояния.ОбъемЯчейки
		|ПОМЕСТИТЬ ЯчейкиВремя
		|ИЗ
		|	Расстояния КАК Расстояния
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиВремя.ВремяРазмещения) КАК ВремяРазмещения
		|ПОМЕСТИТЬ МинимальноеВремя
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиВремя.Зона,
		|	ЯчейкиВремя.Ячейка,
		|	ЯчейкиВремя.ВремяРазмещения,
		|	ЯчейкиВремя.НомерЯруса,
		|	ЯчейкиВремя.МаксимальныйВес,
		|	ЯчейкиВремя.ОбъемЯчейки
		|ПОМЕСТИТЬ ЯчейкиСМинимальнымВременем
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальноеВремя КАК МинимальноеВремя
		|		ПО ЯчейкиВремя.ВремяРазмещения = МинимальноеВремя.ВремяРазмещения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиСМинимальнымВременем.НомерЯруса) КАК НомерЯруса
		|ПОМЕСТИТЬ МинимальныйЯрус
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиСМинимальнымВременем.Ячейка,
		|	ЯчейкиСМинимальнымВременем.Зона КАК ЗонаЯчейки,
		|	ЯчейкиСМинимальнымВременем.ВремяРазмещения,
		|	ЯчейкиСМинимальнымВременем.МаксимальныйВес,
		|	ЯчейкиСМинимальнымВременем.ОбъемЯчейки
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйЯрус КАК МинимальныйЯрус
		|		ПО ЯчейкиСМинимальнымВременем.НомерЯруса = МинимальныйЯрус.НомерЯруса";
	ИначеЕсли Назначение = "БуферныеЯчейкиПоВсемЗонам" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазмещениеТоваровНаСкладахОстатки.Ячейка КАК Ячейка,
		|	РазмещениеТоваровНаСкладахОстатки.Номенклатура,
		|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) КАК КоличествоЕХООстаток
		|ПОМЕСТИТЬ ЗанятыеЯчейки
		|ИЗ
		|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
		|			&НаДату,
		|			Склад = &Склад
		|				И НЕ Статус = &СтатусВыполнениеОтбора) КАК РазмещениеТоваровНаСкладахОстатки
		|ГДЕ
		|	ЕСТЬNULL(РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток, 0) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СкладскиеЯчейки.Ссылка КАК Ячейка,
		|	СостояниеЗонЯчеекСрезПоследних.Зона КАК Зона
		|ПОМЕСТИТЬ АдресаХранения
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеВидовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеВидовЯчеекСрезПоследних
		|		ПО СкладскиеЯчейки.Ссылка = СостояниеВидовЯчеекСрезПоследних.Ячейка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗонЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеЗонЯчеекСрезПоследних
		|		ПО СкладскиеЯчейки.Ссылка = СостояниеЗонЯчеекСрезПоследних.Ячейка
		|ГДЕ
		|	СкладскиеЯчейки.Владелец = &Склад
		|	И СостояниеВидовЯчеекСрезПоследних.ВидЯчейки = &ВидЯчейкиБуферная
		|	И НЕ СостояниеЗонЯчеекСрезПоследних.Ячейка В (&ИсключаемыеЯчейки)
		|	И НЕ 1 В
		|				(ВЫБРАТЬ
		|					1 КАК Поле1
		|				ИЗ
		|					ЗанятыеЯчейки КАК ЗанятыеЯчейки
		|				ГДЕ
		|					СостояниеЗонЯчеекСрезПоследних.Ячейка = ЗанятыеЯчейки.Ячейка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АдресаХранения.Зона,
		|	АдресаХранения.Ячейка,
		|	АдресаХранения.Ячейка.НомерРяда,
		|	АдресаХранения.Ячейка.НомерЯруса,
		|	АдресаХранения.Ячейка.НомерЯчейки,
		|	АдресаХранения.Ячейка.МаксимальныйВес КАК МаксимальныйВес,
		|	АдресаХранения.Ячейка.ДлинаЯчейки * АдресаХранения.Ячейка.ШиринаЯчейки * АдресаХранения.Ячейка.ВысотаЯчейки КАК ОбъемЯчейки
		|ПОМЕСТИТЬ ДоступныеЯчейки
		|ИЗ
		|	АдресаХранения КАК АдресаХранения
		|ГДЕ
		|	АдресаХранения.Ячейка.ДлинаЯчейки >= &ДлинаКоробки
		|	И АдресаХранения.Ячейка.ШиринаЯчейки >= &ШиринаКоробки
		|	И АдресаХранения.Ячейка.ВысотаЯчейки >= &ВысотаКоробки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеЯчейки.Ячейка,
		|	ДоступныеЯчейки.ЯчейкаНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаНомерЯчейки,
		|	СУММА(СкладскиеЯчейкиВысота.ВысотаЯчейки) КАК Высота,
		|	СУММА(ДоступныеЯчейки.МаксимальныйВес) КАК МаксимальныйВес,
		|	СУММА(ДоступныеЯчейки.ОбъемЯчейки) КАК ОбъемЯчейки,
		|	ДоступныеЯчейки.Зона
		|ПОМЕСТИТЬ ВысотаЯчеек
		|ИЗ
		|	ДоступныеЯчейки КАК ДоступныеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиВысота
		|		ПО ДоступныеЯчейки.ЯчейкаНомерРяда = СкладскиеЯчейкиВысота.НомерРяда
		|			И (1 = СкладскиеЯчейкиВысота.НомерЯчейки)
		|			И ДоступныеЯчейки.ЯчейкаНомерЯруса > СкладскиеЯчейкиВысота.НомерЯруса
		|			И (СкладскиеЯчейкиВысота.Владелец = &Склад)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеЯчейки.Ячейка,
		|	ДоступныеЯчейки.ЯчейкаНомерЯруса,
		|	ДоступныеЯчейки.ЯчейкаНомерРяда,
		|	ДоступныеЯчейки.ЯчейкаНомерЯчейки,
		|	ДоступныеЯчейки.Зона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВысотаЯчеек.Ячейка,
		|	ВысотаЯчеек.ЯчейкаНомерЯруса,
		|	ЕСТЬNULL(СУММА(СкладыРасстояния.Расстояние), 0) + ЕСТЬNULL(СУММА(СкладскиеЯчейкиДлина.ДлинаЯчейки), 0) КАК Расстояние,
		|	ВысотаЯчеек.Высота КАК Высота,
		|	ВысотаЯчеек.МаксимальныйВес КАК МаксимальныйВес,
		|	ВысотаЯчеек.ОбъемЯчейки КАК ОбъемЯчейки,
		|	ВысотаЯчеек.Зона
		|ПОМЕСТИТЬ Расстояния
		|ИЗ
		|	ВысотаЯчеек КАК ВысотаЯчеек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейкиДлина
		|		ПО ВысотаЯчеек.ЯчейкаНомерРяда = СкладскиеЯчейкиДлина.НомерРяда
		|			И ВысотаЯчеек.ЯчейкаНомерЯруса = СкладскиеЯчейкиДлина.НомерЯруса
		|			И ВысотаЯчеек.ЯчейкаНомерЯчейки > СкладскиеЯчейкиДлина.НомерЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.Расстояния КАК СкладыРасстояния
		|		ПО ВысотаЯчеек.ЯчейкаНомерРяда = СкладыРасстояния.НомерРяда
		|
		|СГРУППИРОВАТЬ ПО
		|	ВысотаЯчеек.Ячейка,
		|	ВысотаЯчеек.ЯчейкаНомерЯруса,
		|	ВысотаЯчеек.Высота,
		|	ВысотаЯчеек.МаксимальныйВес,
		|	ВысотаЯчеек.ОбъемЯчейки,
		|	ВысотаЯчеек.Зона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расстояния.Зона КАК Зона,
		|	Расстояния.Ячейка КАК Ячейка,
		|	Расстояния.ЯчейкаНомерЯруса КАК НомерЯруса,
		|	Расстояния.Расстояние / &СкоростьДвижения + Расстояния.Высота / &СкоростьПодъема * 2 КАК ВремяРазмещения,
		|	Расстояния.МаксимальныйВес,
		|	Расстояния.ОбъемЯчейки
		|ПОМЕСТИТЬ ЯчейкиВремя
		|ИЗ
		|	Расстояния КАК Расстояния
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиВремя.ВремяРазмещения) КАК ВремяРазмещения
		|ПОМЕСТИТЬ МинимальноеВремя
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиВремя.Зона,
		|	ЯчейкиВремя.Ячейка,
		|	ЯчейкиВремя.ВремяРазмещения,
		|	ЯчейкиВремя.НомерЯруса,
		|	ЯчейкиВремя.МаксимальныйВес,
		|	ЯчейкиВремя.ОбъемЯчейки
		|ПОМЕСТИТЬ ЯчейкиСМинимальнымВременем
		|ИЗ
		|	ЯчейкиВремя КАК ЯчейкиВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальноеВремя КАК МинимальноеВремя
		|		ПО ЯчейкиВремя.ВремяРазмещения = МинимальноеВремя.ВремяРазмещения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЯчейкиСМинимальнымВременем.НомерЯруса) КАК НомерЯруса
		|ПОМЕСТИТЬ МинимальныйЯрус
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЯчейкиСМинимальнымВременем.Ячейка,
		|	ЯчейкиСМинимальнымВременем.Зона КАК ЗонаЯчейки,
		|	ЯчейкиСМинимальнымВременем.ВремяРазмещения,
		|	ЯчейкиСМинимальнымВременем.МаксимальныйВес,
		|	ЯчейкиСМинимальнымВременем.ОбъемЯчейки
		|ИЗ
		|	ЯчейкиСМинимальнымВременем КАК ЯчейкиСМинимальнымВременем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйЯрус КАК МинимальныйЯрус
		|		ПО ЯчейкиСМинимальнымВременем.НомерЯруса = МинимальныйЯрус.НомерЯруса";
	КонецЕсли;	
КонецПроцедуры

Процедура ПроверитьРазмещение(Отказ)
	
	ЗапросВТ = Новый Запрос;
	ЗапросВТ.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
	|	Размещение.Номенклатура,
	|	Размещение.ЕдиницаИзмерения,
	|	Размещение.Количество,
	|	Размещение.НомерПаллета,
	|	Размещение.Зона,
	|	Размещение.ВидЯчейки,
	|	Размещение.ЯчейкаПлан,
	|	Размещение.ЯчейкаФакт
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТабРазмещение КАК Размещение";
	
	ЗапросВТ.УстановитьПараметр("ТабРазмещение", Размещение.Выгрузить());
	ЗапросВТ.Выполнить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	РазмещениеПаллетВЯчейкахОстатки.Ячейка,
	//|	РазмещениеПаллетВЯчейкахОстатки.Номенклатура,
	//|	РазмещениеПаллетВЯчейкахОстатки.НомерПаллета,
	//|	РазмещениеПаллетВЯчейкахОстатки.КоличествоОстаток
	//|ПОМЕСТИТЬ ОстаткиПаллет
	//|ИЗ
	//|	РегистрНакопления.РазмещениеПаллетВЯчейках.Остатки(&НаДату, Склад = &Склад) КАК РазмещениеПаллетВЯчейкахОстатки
	//|ГДЕ
	//|	1 В
	//|			(ВЫБРАТЬ
	//|				1 КАК Поле1
	//|			ИЗ
	//|				ТаблицаДокумента КАК ТаблицаДокумента
	//|			ГДЕ
	//|				РазмещениеПаллетВЯчейкахОстатки.Ячейка = ТаблицаДокумента.ЯчейкаФакт
	//|				И ТаблицаДокумента.ВидЯчейки <> &ВидЯчейкиОбщая)
	//|;
	//|
	"ВЫБРАТЬ
	|	РазмещениеТоваровНаСкладахОстатки.Ячейка,
	|	РазмещениеТоваровНаСкладахОстатки.Номенклатура,
	|	РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток
	|ПОМЕСТИТЬ ОбщиеОстаткиЕХО
	|ИЗ
	|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
	|			&НаДату,
	|			Склад = &Склад
	|				И НЕ Статус = &СтатусВыполнениеОтбора) КАК РазмещениеТоваровНаСкладахОстатки
	|ГДЕ
	|	1 В
	|			(ВЫБРАТЬ
	|				1 КАК Поле1
	|			ИЗ
	|				ТаблицаДокумента КАК ТаблицаДокумента
	|			ГДЕ
	|				РазмещениеТоваровНаСкладахОстатки.Ячейка = ТаблицаДокумента.ЯчейкаФакт
	|				И ТаблицаДокумента.ВидЯчейки = &ВидЯчейкиБуферная)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РазмещениеТоваровНаСкладахОстатки.Ячейка,
	|	РазмещениеТоваровНаСкладахОстатки.Номенклатура,
	|	РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток
	|ИЗ
	|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(
	|			&НаДату,
	|			Склад = &Склад
	|				И Статус = &СтатусЗавершено) КАК РазмещениеТоваровНаСкладахОстатки
	|ГДЕ
	|	1 В
	|			(ВЫБРАТЬ
	|				1 КАК Поле1
	|			ИЗ
	|				ТаблицаДокумента КАК ТаблицаДокумента
	|			ГДЕ
	|				РазмещениеТоваровНаСкладахОстатки.Ячейка = ТаблицаДокумента.ЯчейкаФакт
	|				И ТаблицаДокумента.ВидЯчейки = &ВидЯчейкиКомплектация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков КАК ЕХО,
	|	ТаблицаДокумента.ЕдиницаИзмерения,
	|	ТаблицаДокумента.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЕдиницаИзмерения = ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков
	|			ТОГДА ТаблицаДокумента.Количество
	|		ИНАЧЕ ТаблицаДокумента.Количество * ТаблицаДокумента.ЕдиницаИзмерения.СодержитЕХО
	|	КОНЕЦ КАК КоличествоЕХО,
	|	ТаблицаДокумента.НомерПаллета,
	|	ТаблицаДокумента.Зона,
	|	ТаблицаДокумента.ВидЯчейки,
	|	ТаблицаДокумента.ЯчейкаПлан,
	|	ТаблицаДокумента.ЯчейкаФакт,
	|	ТаблицаДокумента.ЯчейкаФакт.ДлинаЯчейки * ТаблицаДокумента.ЯчейкаФакт.ШиринаЯчейки * ТаблицаДокумента.ЯчейкаФакт.ВысотаЯчейки КАК ОбъемЯчейки,
	|	ЕСТЬNULL(ОбщиеОстаткиЕХО.КоличествоЕХООстаток, 0) КАК КоличествоЕХООстаток,
	|	ОбщиеОстаткиЕХО.Номенклатура КАК НоменклатураРазмещенная,
	|	ЕСТЬNULL(СостояниеБлокировокЯчеекСрезПоследних.Заблокирована, ЛОЖЬ) КАК Заблокирована,
	|	ЕСТЬNULL(СостояниеРезервовЯчеекСрезПоследних.Заблокирована, ЛОЖЬ) КАК Зарезервирована,
	|	СостояниеВидовЯчеекСрезПоследних.ВидЯчейки КАК ТекущийВидЯчейки,
	|	СостояниеЗонЯчеекСрезПоследних.Зона КАК ТекущаяЗонаЯчейки,
	|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка КАК ЗакрепленнаяЯчейка,
	|	АдресаХраненияНоменклатурыНаСкладахСрезПоследних.МаксимальноеКоличество
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбщиеОстаткиЕХО КАК ОбщиеОстаткиЕХО
	|		ПО ТаблицаДокумента.ЯчейкаФакт = ОбщиеОстаткиЕХО.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеБлокировокЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеБлокировокЯчеекСрезПоследних
	|		ПО ТаблицаДокумента.ЯчейкаФакт = СостояниеБлокировокЯчеекСрезПоследних.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗонЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеЗонЯчеекСрезПоследних
	|		ПО ТаблицаДокумента.ЯчейкаФакт = СостояниеЗонЯчеекСрезПоследних.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеВидовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеВидовЯчеекСрезПоследних
	|		ПО ТаблицаДокумента.ЯчейкаФакт = СостояниеВидовЯчеекСрезПоследних.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРезервовЯчеек.СрезПоследних(&НаДату, ) КАК СостояниеРезервовЯчеекСрезПоследних
	|		ПО ТаблицаДокумента.ЯчейкаФакт = СостояниеРезервовЯчеекСрезПоследних.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаХраненияНоменклатурыНаСкладах.СрезПоследних(&НаДату, Склад = &Склад) КАК АдресаХраненияНоменклатурыНаСкладахСрезПоследних
	|		ПО ТаблицаДокумента.Номенклатура = АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Номенклатура
	|			И ТаблицаДокумента.ЯчейкаФакт = АдресаХраненияНоменклатурыНаСкладахСрезПоследних.Ячейка";
	
	МоментДокумента = Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая);
	
	Запрос.УстановитьПараметр("НаДату", МоментДокумента);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ВидЯчейкиБуферная", Перечисления.ВидыСкладскихЯчеек.Буферная);
	Запрос.УстановитьПараметр("ВидЯчейкиКомплектация", Перечисления.ВидыСкладскихЯчеек.Комплектация);
	Запрос.УстановитьПараметр("ВидЯчейкиОбщая", Перечисления.ВидыСкладскихЯчеек.Общая);
	Запрос.УстановитьПараметр("СтатусВыполнениеОтбора", Перечисления.СтатусыРазмещенийВЯчейках.ВыполнениеОтбора);
	Запрос.УстановитьПараметр("СтатусЗавершено", Перечисления.СтатусыРазмещенийВЯчейках.Завершено);
	
	Запрос.МенеджерВременныхТаблиц = ЗапросВТ.МенеджерВременныхТаблиц;
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	тзОбщиеОстатки = тзРезультат.Скопировать();
	тзОбщиеОстатки.Свернуть("Номенклатура, ЕХО, ЯчейкаФакт, ВидЯчейки, ОбъемЯчейки, МаксимальноеКоличество", "КоличествоЕХО, КоличествоЕХООстаток"); 
	
	Для Каждого стрРез Из тзРезультат Цикл
		Если стрРез.ТекущаяЗонаЯчейки = Null ИЛИ стрРез.Зона <> стрРез.ТекущаяЗонаЯчейки Тогда
			Сообщить("Ячейка """ + стрРез.ЯчейкаФакт + """ не входит в зону """ + СокрЛП(стрРез.Зона) + """", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		Если стрРез.ТекущийВидЯчейки = Null ИЛИ стрРез.ВидЯчейки <> стрРез.ТекущийВидЯчейки Тогда
			Сообщить("Вид ячейки """ + стрРез.ЯчейкаФакт + """ отличается от установленного", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		Если стрРез.Заблокирована Тогда
			Сообщить("Ячейка """ + стрРез.ЯчейкаФакт + """ заблокирована", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		Если стрРез.Зарезервирована Тогда
			Сообщить("Ячейка """ + стрРез.ЯчейкаФакт + """ зарезервирована", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		//Если стрРез.РасположенаДругаяНоменклатура Тогда
		//	Сообщить("Нельзя разместить товар ячейку """ + стрРез.ЯчейкаФакт + """, так как в ней уже размещена другая номенклатура", СтатусСообщения.Важное);
		//	Отказ = Истина;
		//КонецЕсли;
		Если стрРез.ТекущийВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Комплектация Тогда
			Если стрРез.ЯчейкаФакт <> стрРез.ЗакрепленнаяЯчейка Тогда
				Сообщить("Ячейка """ + стрРез.ЯчейкаФакт + """ не является закрепленной ячейкой номенклатуры """ + стрРез.Номенклатура + """", СтатусСообщения.Важное);
				Отказ = Истина;
			ИначеЕсли стрРез.НомерПаллета <> 0 Тогда
				Сообщить("Нельзя разместить паллету в ячейку комплектации """ + стрРез.ЯчейкаФакт + """", СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если стрРез.НоменклатураРазмещенная <> null И стрРез.Номенклатура <> стрРез.НоменклатураРазмещенная Тогда
			Сообщить("В ячейке """ + стрРез.ЯчейкаФакт + """ уже размещена другая номенклатура.", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если стрРез.ТекущийВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная Тогда
			Если стрРез.КоличествоЕХООстаток > 0 Тогда
				Сообщить("Нельзя размещать в буферную ячейку """ + стрРез.ЯчейкаФакт + """, так как в ней уже содержится товар", СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Для каждого стрРез Из тзОбщиеОстатки Цикл
			Если стрРез.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Комплектация Тогда
				РазмещенноеКоличество = стрРез.КоличествоЕХООстаток + стрРез.КоличествоЕХО;
				Если РазмещенноеКоличество > стрРез.МаксимальноеКоличество Тогда
					Сообщить("Обнаружено переполнение ячейки """ + стрРез.ЯчейкаФакт
					+ """! Остаток: " + стрРез.КоличествоЕХООстаток + " " + стрРез.ЕХО + ", размещение: " + стрРез.КоличествоЕХО + " " + стрРез.ЕХО
					+ ", макс. кол-во: " + стрРез.МаксимальноеКоличество + " " + стрРез.ЕХО
					, СтатусСообщения.Важное);
					
					Отказ = Истина;
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					ОбъемЕдиницы = стрРез.ЕХО.Длина * стрРез.ЕХО.Ширина * стрРез.ЕХО.Высота;
					РазмещенныйОбъем = ОбъемЕдиницы * РазмещенноеКоличество;
					
					Если РазмещенныйОбъем > стрРез.ОбъемЯчейки Тогда
						Сообщить("Обнаружено превышение объема ячейки """ + стрРез.ЯчейкаФакт
						+ """! Остаток: " + стрРез.КоличествоЕХООстаток + " " + стрРез.ЕХО + ", размещение: " + стрРез.КоличествоЕХО + " " + стрРез.ЕХО
						, СтатусСообщения.Важное);
						
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли стрРез.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная Тогда
				РазмещенноеКоличество = стрРез.КоличествоЕХООстаток + стрРез.КоличествоЕХО;
				ОбъемЕдиницы = стрРез.ЕХО.Длина * стрРез.ЕХО.Ширина * стрРез.ЕХО.Высота;
				РазмещенныйОбъем = ОбъемЕдиницы * РазмещенноеКоличество;
				
				Если РазмещенныйОбъем > стрРез.ОбъемЯчейки Тогда
					Сообщить("Обнаружено превышение объема ячейки """ + стрРез.ЯчейкаФакт
					+ """! Остаток: " + стрРез.КоличествоЕХООстаток + " " + стрРез.ЕХО + ", размещение: " + стрРез.КоличествоЕХО + " " + стрРез.ЕХО
					, СтатусСообщения.Важное);
					
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ЯчейкаФакт,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокумента.Номенклатура) КАК КоличествоПозиций
	|ПОМЕСТИТЬ НоменклатураПоЯчейкам
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидЯчейки <> &ВидЯчейкиОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ЯчейкаФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПоЯчейкам.ЯчейкаФакт
	|ИЗ
	|	НоменклатураПоЯчейкам КАК НоменклатураПоЯчейкам
	|ГДЕ
	|	НоменклатураПоЯчейкам.КоличествоПозиций > 1";
	
	//Запрос.УстановитьПараметр("ВидЯчейкиОбщая", Перечисления.ВидыСкладскихЯчеек.Общая);
	тзРезультат = Запрос.Выполнить().Выгрузить();
	
	Для каждого стрРез Из тзРезультат Цикл
		Сообщить("Обнаружено размещение нескольких номенклатурных позиций в ячейку """ + стрРез.ЯчейкаФакт + """", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ЯчейкаФакт,
	|	Сумма(1) КАК Количество
	|ПОМЕСТИТЬ ПревышениеПаллетПоЯчейкам
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.НомерПаллета <> 0
	|	И ТаблицаДокумента.ВидЯчейки <> &ВидЯчейкиОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ЯчейкаФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПревышениеПаллетПоЯчейкам.ЯчейкаФакт
	|ИЗ
	|	ПревышениеПаллетПоЯчейкам КАК ПревышениеПаллетПоЯчейкам
	|ГДЕ
	|	ПревышениеПаллетПоЯчейкам.Количество > 1";
	
	//клПаллета = Справочники.КлассификаторЕдиницИзмерения.Паллета;
	//Запрос.УстановитьПараметр("клПаллета", клПаллета);
	тзРезультат = Запрос.Выполнить().Выгрузить();
	
	Для каждого стрРез Из тзРезультат Цикл
		Сообщить("Обнаружено размещение нескольких паллет в ячейку """ + стрРез.ЯчейкаФакт + """", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПроверитьОснования(Отказ)
	ЗапросВТ = Новый Запрос;
	ЗапросВТ.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
	|	Приемка.НомерСтроки,
	|	Приемка.Номенклатура,
	|	Приемка.ЕдиницаХраненияОстатков КАК ЕХО,
	|	Приемка.КоличествоФактическиПринятое КАК Количество,
	|	Приемка.ДокументОснование
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТабПриемка КАК Приемка";
	
	ЗапросВТ.УстановитьПараметр("ТабПриемка", Приемка.Выгрузить());
	ЗапросВТ.Выполнить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемкаИРазмещениеПриемка.Номенклатура,
	|	СУММА(ПриемкаИРазмещениеПриемка.КоличествоФактическиПринятое) КАК КоличествоФактическиПринятое
	|ПОМЕСТИТЬ Приемки
	|ИЗ
	|	Документ.ПриемкаИРазмещение.Приемка КАК ПриемкаИРазмещениеПриемка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента
	|		ПО ПриемкаИРазмещениеПриемка.ДокументОснование = ТаблицаДокумента.ДокументОснование
	|			И ПриемкаИРазмещениеПриемка.Номенклатура = ТаблицаДокумента.Номенклатура
	|ГДЕ
	|	ПриемкаИРазмещениеПриемка.Ссылка.Проведен
	|	И ПриемкаИРазмещениеПриемка.Ссылка.МоментВремени < &МоментДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриемкаИРазмещениеПриемка.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приемка.НомерСтроки КАК НомерСтроки,
	|	Приемка.Номенклатура,
	|	Приемка.ЕХО,
	|	Приемка.Количество,
	|	Приемка.ДокументОснование,
	|	ЕСТЬNULL(МАКСИМУМ(ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения), ЕСТЬNULL(МАКСИМУМ(ПеремещениеТоваровТовары.ЕдиницаИзмерения), ЕСТЬNULL(МАКСИМУМ(ВнутреннийЗаказТовары.ЕдиницаИзмерения), МАКСИМУМ(ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения)))) КАК ЕдиницаОснования,
	|	ЕСТЬNULL(СУММА(ВозвратТоваровОтПокупателяТовары.Количество), ЕСТЬNULL(СУММА(ПеремещениеТоваровТовары.Количество), ЕСТЬNULL(СУММА(ВнутреннийЗаказТовары.Количество), СУММА(ПоступлениеТоваровУслугТовары.Количество)))) КАК КоличествоОснования,
	|	ЕСТЬNULL(Приемки.КоличествоФактическиПринятое, 0) КАК КоличествоВДругихПриемках
	|ИЗ
	|	ТаблицаДокумента КАК Приемка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ПО Приемка.ДокументОснование = ВозвратТоваровОтПокупателяТовары.Ссылка
	|			И Приемка.Номенклатура = ВозвратТоваровОтПокупателяТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО Приемка.ДокументОснование = ПоступлениеТоваровУслугТовары.Ссылка
	|			И Приемка.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ПО Приемка.ДокументОснование = ПеремещениеТоваровТовары.Ссылка
	|			И Приемка.Номенклатура = ПеремещениеТоваровТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
	|		ПО Приемка.ДокументОснование = ВнутреннийЗаказТовары.Ссылка
	|			И Приемка.Номенклатура = ВнутреннийЗаказТовары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Приемки КАК Приемки
	|		ПО Приемка.Номенклатура = Приемки.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Приемка.НомерСтроки,
	|	Приемка.Номенклатура,
	|	Приемка.ЕХО,
	|	Приемка.Количество,
	|	Приемка.ДокументОснование,
	|	ЕСТЬNULL(Приемки.КоличествоФактическиПринятое, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.МенеджерВременныхТаблиц = ЗапросВТ.МенеджерВременныхТаблиц;
	
	//МоментДокумента = Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая);
	Запрос.УстановитьПараметр("МоментДокумента", Ссылка.МоментВремени());
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	тзОснования = тзРезультат.Скопировать();
	тзОснования.Свернуть("ДокументОснование");
	
	Для каждого стрОсн Из тзОснования Цикл
		Если НЕ стрОсн.ДокументОснование.Проведен Тогда
			Отказ = Истина;
			Сообщить("Документ-основание """ + СокрЛП(стрОсн.ДокументОснование) + """ не проведен", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Для каждого стрРез Из тзРезультат Цикл
			Если стрРез.ЕдиницаОснования = Null И стрРез.КоличествоОснования = Null Тогда
				Отказ = Истина;
				Сообщить("Номенклатура """ + СокрЛП(стрРез.Номенклатура) + """ отсутствует в документе-основание """
						+ СокрЛП(стрРез.ДокументОснование) + """", СтатусСообщения.Важное);
			КонецЕсли;
			
			Если НЕ Отказ И стрРез.ЕдиницаОснования <> стрРез.ЕХО Тогда
				Отказ = Истина;
				Сообщить("Единица измерения в документе-основание """ + СокрЛП(стрРез.ДокументОснование) + 
						""" не является единицей хранения остатков номенклатуры """ + СокрЛП(стрРез.Номенклатура) + """", СтатусСообщения.Важное);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				Если стрРез.КоличествоВДругихПриемках <> 0 Тогда
					Отказ = Истина;
					Сообщить("Для номенклатуры """ + СокрЛП(стрРез.Номенклатура) + """ на основании документа """
							+ СокрЛП(стрРез.ДокументОснование) + """ ранее уже была оформлена приемка", СтатусСообщения.Важное);
				ИначеЕсли стрРез.КоличествоОснования <> стрРез.Количество Тогда
					Отказ = Истина;
					Сообщить("Количество номенклатуры """ + СокрЛП(стрРез.Номенклатура) + """: " + стрРез.КоличествоОснования + 
					" в документе-основание """ + СокрЛП(стрРез.ДокументОснование) + """, не совпадает с фактически принятым количеством: " + стрРез.Количество, СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьРаспределение(Отказ)
	ЗапросВТ = Новый Запрос;
	ЗапросВТ.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
	|	Приемка.НомерСтроки,
	|	Приемка.Номенклатура,
	|	Приемка.ЕдиницаХраненияОстатков КАК ЕХО,
	|	Приемка.КоличествоФактическиПринятое КАК ОбщееКоличествоЕХО,
	|	Приемка.КоличествоПаллет,
	|	Приемка.КоличествоКоробок,
	|	Приемка.КоличествоЕХО,
	|	Приемка.ДокументОснование
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТабПриемка КАК Приемка";
	
	ЗапросВТ.УстановитьПараметр("ТабПриемка", Приемка.Выгрузить());
	ЗапросВТ.Выполнить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Приемка.НомерСтроки КАК НомерСтроки,
	|	Приемка.Номенклатура,
	|	Приемка.ЕХО,
	|	Приемка.ОбщееКоличествоЕХО,
	|	Приемка.КоличествоПаллет,
	|	Приемка.КоличествоКоробок,
	|	Приемка.КоличествоЕХО,
	|	Приемка.КоличествоЕХО + Приемка.КоличествоПаллет * ЕдиницаПаллета.СодержитЕХО + Приемка.КоличествоКоробок * ЕдиницаКоробка.СодержитЕХО КАК РаспределенноеКоличествоЕХО
	|ИЗ
	|	ТаблицаДокумента КАК Приемка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницаПаллета
	|		ПО Приемка.Номенклатура = ЕдиницаПаллета.Владелец
	|			И (ЕдиницаПаллета.ЕдиницаПоКлассификатору = &клПаллета)
	|			И (НЕ ЕдиницаПаллета.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницаКоробка
	|		ПО Приемка.Номенклатура = ЕдиницаКоробка.Владелец
	|			И (НЕ ЕдиницаКоробка.ПометкаУдаления)
	|			И (ЕдиницаКоробка.ЕдиницаПоКлассификатору = &клКоробка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.МенеджерВременныхТаблиц = ЗапросВТ.МенеджерВременныхТаблиц;
	
	клПаллета = Справочники.КлассификаторЕдиницИзмерения.Паллета;
	клКоробка = Справочники.КлассификаторЕдиницИзмерения.Коробка;
	
	Запрос.УстановитьПараметр("клПаллета", клПаллета);
	Запрос.УстановитьПараметр("клКоробка", клКоробка);
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	
	Для каждого стрРез Из тзРезультат Цикл
		Если стрРез.ОбщееКоличествоЕХО <> стрРез.РаспределенноеКоличествоЕХО Тогда
			Отказ = Истина;
			Сообщить("Общее количество номенклатуры """ + СокрЛП(стрРез.Номенклатура) + """: " + стрРез.РаспределенноеКоличествоЕХО + 
			" по распределению, не совпадает с фактически принятым количеством: " + стрРез.ОбщееКоличествоЕХО + 
			". Номер строки: " + стрРез.НомерСтроки, СтатусСообщения.Важное);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьСоответствиеПриемкиРазмещению(Отказ)
	ЗапросВТ = Новый Запрос;
	ЗапросВТ.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
	|	Приемка.НомерСтроки,
	|	Приемка.Номенклатура,
	|	Приемка.ЕдиницаХраненияОстатков КАК ЕХО,
	|	Приемка.КоличествоФактическиПринятое КАК ОбщееКоличествоЕХО,
	|	Приемка.КоличествоПаллет,
	|	Приемка.КоличествоКоробок,
	|	Приемка.КоличествоЕХО,
	|	Приемка.ДокументОснование
	|ПОМЕСТИТЬ ТаблицаПриемка
	|ИЗ
	|	&ТабПриемка КАК Приемка";
	
	ЗапросВТ.УстановитьПараметр("ТабПриемка", Приемка.Выгрузить());
	ЗапросВТ.Выполнить();	
	
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
	|	Размещение.Номенклатура,
	|	Размещение.ЕдиницаИзмерения,
	|	Размещение.Количество
	|ПОМЕСТИТЬ ТаблицаРазмещение
	|ИЗ
	|	&ТабРазмещение КАК Размещение";
	
	ЗапросВТ.УстановитьПараметр("ТабРазмещение", Размещение.Выгрузить());
	ЗапросВТ.Выполнить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРазмещение.Номенклатура КАК Номенклатура,
	|	ТаблицаРазмещение.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ТаблицаРазмещение.Количество) КАК Количество
	|ПОМЕСТИТЬ РазмещениеСгруппировано
	|ИЗ
	|	ТаблицаРазмещение КАК ТаблицаРазмещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРазмещение.Номенклатура,
	|	ТаблицаРазмещение.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приемка.НомерСтроки КАК НомерСтроки,
	|	Приемка.Номенклатура КАК НоменклатураПринятая,
	|	Приемка.ЕХО,
	|	Приемка.ОбщееКоличествоЕХО,
	|	РазмещениеСгруппировано.Номенклатура КАК НоменклатураРазмещенная,
	|	РазмещениеСгруппировано.Количество КАК РазмещенноеКоличествоЕХО
	|ИЗ
	|	ТаблицаПриемка КАК Приемка
	|		ПОЛНОЕ СОЕДИНЕНИЕ РазмещениеСгруппировано КАК РазмещениеСгруппировано
	|		ПО Приемка.Номенклатура = РазмещениеСгруппировано.Номенклатура
	|			И Приемка.ЕХО = РазмещениеСгруппировано.ЕдиницаИзмерения";
	
	Запрос.МенеджерВременныхТаблиц = ЗапросВТ.МенеджерВременныхТаблиц;
	
	//клПаллета = Справочники.КлассификаторЕдиницИзмерения.Паллета;
	//клКоробка = Справочники.КлассификаторЕдиницИзмерения.Коробка;
	//
	//Запрос.УстановитьПараметр("клПаллета", клПаллета);
	//Запрос.УстановитьПараметр("клКоробка", клКоробка);
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	
	Для каждого стрРез Из тзРезультат Цикл
		Если стрРез.НоменклатураРазмещенная = Null Тогда
			Отказ = Истина;
			Сообщить("Отсутствует размещение для номенклатуры """ + СокрЛП(стрРез.НоменклатураПринятая) + """", СтатусСообщения.Важное);
		КонецЕсли;
		Если стрРез.НоменклатураПринятая = Null Тогда
			Отказ = Истина;
			Сообщить("Номенклатура """ + СокрЛП(стрРез.НоменклатураРазмещенная) + """ отсутвует в таблице ""Приемка"", но присутствует в таблице ""Размещение""", СтатусСообщения.Важное);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			Если стрРез.ОбщееКоличествоЕХО <> стрРез.РазмещенноеКоличествоЕХО Тогда
				Отказ = Истина;
				Сообщить("Не совпадает количество ед. хранения остатков номенклатуры """ + СокрЛП(стрРез.НоменклатураПринятая) + """. Приемка: "
						+ стрРез.ОбщееКоличествоЕХО + ". Размещение: " + стрРез.РазмещенноеКоличествоЕХО, СтатусСообщения.Важное);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьДокумент(Отказ)
	Если НЕ РольДоступна("АдминистраторЛогистики") И НЕ РольДоступна("ЗаведующийСкладом")И НЕ РольДоступна("РольКладовщик")И НЕ РольДоступна("РольГрузчик") Тогда
		ПроверитьОснования(Отказ);
		//ПроверитьРаспределение(Отказ);
		ПроверитьСоответствиеПриемкиРазмещению(Отказ);
		ПроверитьРазмещение(Отказ);
		
		Если НЕ Отказ И НЕ ЭтоУстановкаСтатуса И (НЕ ЭтоПерепроведение ИЛИ ДокументИзменен) Тогда
			мсвЯчейки = Размещение.ВыгрузитьКолонку("ЯчейкаФакт");
			ГраницаДокумента = Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Включая);
			мсвДокументы = Новый Массив;
			УправлениеСкладскойЛогистикой.ПроверитьНаПрисутствиеВПозднихДокументах(Отказ, ГраницаДокумента, мсвЯчейки, мсвДокументы);
			Если Отказ Тогда
				Сообщить("Существуют более поздние проведенные документы, осуществляющие движения по ячейкам использованным в данном документе:", СтатусСообщения.Важное);
				
				Для каждого Док Из мсвДокументы Цикл
					Сообщить(СокрЛП(Док));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Кабаченко_Смартис 04_12_2015
	//проверяем, если заведующий складом проводит документ, обязательно должны быть ответственные
	Если НЕ Размещение.Количество() = 0 Тогда
        Если РольДоступна("ЗаведующийСкладом") Тогда
            Если СписокМаршрутов = неопределено Тогда
                СписокЯчеек = Новый СписокЗначений;
                СписокМаршрутов = Новый СписокЗначений;
                Для Каждого строкаОтбор из Размещение Цикл
                    //12_02_16
                    //Кабаченко_Смартис
                    //доработка по видам ячеек
                    Если строкаОтбор.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная Тогда
                        Маршрут = ВыделитьСлово(строкаОтбор.ЯчейкаПлан.Наименование);
                        МаршрутЧисло = Число(Маршрут);
                        СписокЯчеек.Добавить(МаршрутЧисло);
                    КонецЕсли;
                КонецЦикла;
                СписокЯчеек.СортироватьПоЗначению(НаправлениеСортировки.Возр);
                Запрос = Новый Запрос;
                Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
                |	СкладыСтратегияОбхода.НомерМаршрута
                |ИЗ
                |	Справочник.Склады.СтратегияОбхода КАК СкладыСтратегияОбхода
                |ГДЕ
                |	СкладыСтратегияОбхода.НомерРяда В(&СписокЯчеек)
                |	И СкладыСтратегияОбхода.Ссылка = &Склад";
                Запрос.УстановитьПараметр("СписокЯчеек",СписокЯчеек);
                Запрос.УстановитьПараметр("Склад",Склад);
                Результат = Запрос.Выполнить().Выгрузить();
                Для Каждого СтрокаРезультат из Результат Цикл
                    СписокМаршрутов.Добавить(Строка(СтрокаРезультат.НомерМаршрута) + "Б");
                КонецЦикла;
                Для Каждого строкаОтбор из Размещение Цикл
                    //12_02_16
                    //Кабаченко_Смартис
                    //доработка по видам ячеек
                    Если строкаОтбор.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Комплектация Тогда
                        Маршрут = ВыделитьСлово(строкаОтбор.ЯчейкаПлан.Наименование);
                        МаршрутЧисло = Число(Маршрут);
                        СписокЯчеек.Добавить(МаршрутЧисло);
                    КонецЕсли;
                КонецЦикла;
                СписокЯчеек.СортироватьПоЗначению(НаправлениеСортировки.Возр);
                Запрос = Новый Запрос;
                Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
                |	СкладыСтратегияОбхода.НомерМаршрута
                |ИЗ
                |	Справочник.Склады.СтратегияОбхода КАК СкладыСтратегияОбхода
                |ГДЕ
                |	СкладыСтратегияОбхода.НомерРяда В(&СписокЯчеек)
                |	И СкладыСтратегияОбхода.Ссылка = &Склад";
                Запрос.УстановитьПараметр("СписокЯчеек",СписокЯчеек);
                Запрос.УстановитьПараметр("Склад",Склад);
                Результат = Запрос.Выполнить().Выгрузить();
                Для Каждого СтрокаРезультат из Результат Цикл
                    СписокМаршрутов.Добавить(Строка(СтрокаРезультат.НомерМаршрута) + "К");
                КонецЦикла;
            КонецЕсли;
            ФлагЗаполненности = Истина;
            Если Исполнители.Количество() = 0 И НЕ ЗначениеЗаполнено(ИсполнительРазмещения) Тогда
                //Отказ = Истина;
                Сообщить("Исполнители не заполнены!");
            Иначе
                //Кабаченко_Смартис_04_12_2015
                //если указан исполнитель в шапке копирцуем его в табличную часть исполнители
                Если Исполнители.Количество() = 0 Тогда
                    Если ЗначениеЗаполнено(ИсполнительПриемки) Тогда
                        НоваяСтрокаИсполнители =  Исполнители.Добавить();
                        НоваяСтрокаИсполнители.Работники = ИсполнительПриемки;
                        Для каждого строкаМаршрут из СписокМаршрутов Цикл
                            строкаМаршрута = Маршруты.Добавить();
                            строкаМаршрута.Маршрут = строкаМаршрут.Значение ;
                        КонецЦикла;
                    КонецЕсли;
                КонецЕсли;
                //Кабаченко_Смартис_04_12_2015                
                Отказ = Ложь;
            КонецЕсли;
            Если Маршруты.Количество() = 0 Тогда
                ФлагЗаполненности = Ложь;
            Иначе	
                Для Каждого Элемент из СписокМаршрутов  Цикл
                    Для Каждого строкаМаршрут из Маршруты Цикл
                        Если Элемент.Значение = строкаМаршрут.Маршрут Тогда 
                            ФлагЗаполненности = Истина;
                            //Отказ = Ложь;
                            прервать;
                        Иначе
                            //Отказ = Истина;
                            ФлагЗаполненности = Ложь;
                            //Сообщить("Распределены не все маршруты!");
                        КонецЕсли;	
                    КонецЦикла
                КонецЦикла;
            КонецЕсли;
            Если ФлагЗаполненности = Ложь Тогда
                Сообщить("Распределены не все маршруты!");
            КонецЕсли

        КонецЕсли;
    КонецЕсли;
		//Кабаченко_Смартис 04_12_2015
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Движения.СостояниеРезервовЯчеек.Записывать = Истина;
	Движения.СостояниеРезервовЯчеек.Очистить();
	Движения.РазмещениеТоваровНаСкладах.Записывать = Истина;
	Движения.РазмещениеТоваровНаСкладах.Очистить();
	//Движения.РазмещениеПаллетВЯчейках.Записывать = Истина;
	//Движения.РазмещениеПаллетВЯчейках.Очистить();
	
	ПроверитьДокумент(Отказ);
	//Кабаченко_Смартис_04_12_2015
	//если указан исполнитель в шапке копирцуем его в табличную часть исполнители
	Если ЗначениеЗаполнено(ИсполнительРазмещения) Тогда
		НоваяСтрокаИсполнители =  Исполнители.Добавить();
		НоваяСтрокаИсполнители.Работники = ИсполнительРазмещения;
	КонецЕсли;
	
	/////////////////////////
	Если Статус = Перечисления.СтатусыСкладскихПоступлений.Выполнение Тогда
		ПараметрыОтбора = Новый Структура("ВидЯчейки", Перечисления.ВидыСкладскихЯчеек.Буферная);
		тзРазмещение = Размещение.Выгрузить(ПараметрыОтбора, "ЯчейкаФакт");
		тзРазмещение.Свернуть("ЯчейкаФакт");
		// регистр СостояниеРезервовЯчеек
		Для Каждого ТекСтрокаРазмещение Из тзРазмещение Цикл
			//Если ТекСтрокаРазмещение.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная Тогда
			//	
			//КонецЕсли;
			Движение = Движения.СостояниеРезервовЯчеек.Добавить();
			Движение.Период = Дата;
			Движение.Ячейка = ТекСтрокаРазмещение.ЯчейкаФакт;
			Движение.Заблокирована = Истина;
		КонецЦикла;
		
		ТекущийСтатусПроведения = Перечисления.СтатусыРазмещенийВЯчейках.ВыполнениеРазмещения;
	Иначе
		ТекущийСтатусПроведения = Перечисления.СтатусыРазмещенийВЯчейках.Завершено;
	КонецЕсли;
	
	// регистр РазмещениеТоваровНаСкладах Приход
	Для Каждого ТекСтрокаРазмещение Из Размещение Цикл
		Движение = Движения.РазмещениеТоваровНаСкладах.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Склад = Склад;
		Движение.Ячейка = ТекСтрокаРазмещение.ЯчейкаФакт;
		Движение.Номенклатура = ТекСтрокаРазмещение.Номенклатура;
		Движение.Статус = ТекущийСтатусПроведения;
		Движение.КоличествоЕХО = ТекСтрокаРазмещение.Количество;
		
		Если ТекСтрокаРазмещение.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная Тогда
			Движение.НомерПаллета = ТекСтрокаРазмещение.НомерПаллета;
			
			//Движение = Движения.РазмещениеПаллетВЯчейках.Добавить();
			//Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			//Движение.Период = Дата;
			//Движение.Склад = Склад;
			//Движение.Ячейка = ТекСтрокаРазмещение.ЯчейкаФакт;
			//Движение.Номенклатура = ТекСтрокаРазмещение.Номенклатура;
			//Движение.Статус = ТекущийСтатусПроведения;
			//Движение.Количество = 1;
			//
			//Движение.НомерПаллета = ТекСтрокаРазмещение.НомерПаллета;
		КонецЕсли;
	КонецЦикла;
	//Кабаченко_Смартис
	//07_12_2015
	//Подчиненные = КритерииОтбора.СвязанныеДокументы.Найти(//.СтруктураПодчиненности//.Найти(СтрокаМассивММ.СсылкаНаСчет);
	
	ФлагИсполнитель = Ложь;
	//СписокЗначенийСотрудников = Новый СписокЗначений;
	//СписокЗначенийСотрудниковСозданныхДокументов = Новый СписокЗначений;
	//ЗапросПодчиненные = Новый Запрос;
	//Запрос = Новый Запрос;
	//Запрос.Текст = "";
	//ЗапросПодчиненные.Текст = "ВЫБРАТЬ
	//						  |	ЗаданиеНаРаботу.Исполнитель,
	//						  |	ПриемкаИРазмещениеИсполнители.Работники
	//						  |ИЗ
	//						  |	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
	//						  |		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ПриемкаИРазмещение.Исполнители КАК ПриемкаИРазмещениеИсполнители
	//						  |		ПО ЗаданиеНаРаботу.Исполнитель = ПриемкаИРазмещениеИсполнители.Работники
	//						  |			И ЗаданиеНаРаботу.ДокументОснование = ПриемкаИРазмещениеИсполнители.Ссылка
	//						  |ГДЕ
	//						  |	ПриемкаИРазмещениеИсполнители.Ссылка = &ДокСсылка
	//						  |	И ЗаданиеНаРаботу.Проведен = ИСТИНА
	//						  |	И ЗаданиеНаРаботу.ПометкаУдаления = ЛОЖЬ";
	//ЗапросПодчиненные.УстановитьПараметр("ДокСсылка", ЭтотОбъект.Ссылка);
	//РезультатПодчиненные = ЗапросПодчиненные.Выполнить().Выгрузить();
	//Если РезультатПодчиненные.Количество()  > 0 Тогда
	//	//Для Каждого строкаИсполнители  из Исполнители Цикл
	//	СтруктураПоиска = Новый Структура("Исполнитель",NULL);//Справочники.СотрудникиОрганизаций.ПустаяСсылка());
	//	МассивСтрокиПодчиненные = РезультатПодчиненные.НайтиСтроки(СтруктураПоиска);
	//	Для Каждого строкаМассив из МассивСтрокиПодчиненные Цикл
	//		ДокументЗаданиеНаРаботу = Документы.ЗаданиеНаРаботу.СоздатьДокумент();
	//		ДокументЗаданиеНаРаботу.Дата = ТекущаяДата();
	//		ДокументЗаданиеНаРаботу.Организация = Организация;                         
	//		ДокументЗаданиеНаРаботу.ДокументОснование = ЭтотОбъект.Ссылка;
	//		ДокументЗаданиеНаРаботу.ВидЗадания = Перечисления.ВидЗаданияНаРаботу.Приемка;
	//		ДокументЗаданиеНаРаботу.ПоставщикПолучатель = Поставщик;
	//		ДокументЗаданиеНаРаботу.Склад = Склад;
	//		ДокументЗаданиеНаРаботу.Исполнитель = строкаМассив.Работники;
	//		Для Каждого ТекстрокаРазмещение из Размещение Цикл
	//			НоваяСтрока = ДокументЗаданиеНаРаботу.Задание.Добавить();
	//			НоваяСтрока.ВидЯчейки = ТекСтрокаРазмещение.ВидЯчейки;
	//			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаРазмещение.ЕдиницаИзмерения;
	//			НоваяСтрока.Зона = ТекСтрокаРазмещение.Зона;
	//			НоваяСтрока.Количество = ТекСтрокаРазмещение.Количество;
	//			НоваяСтрока.КоличествоФакт = ТекСтрокаРазмещение.Количество;
	//			НоваяСтрока.Номенклатура = ТекСтрокаРазмещение.Номенклатура;
	//			НоваяСтрока.НомерПаллета = ТекСтрокаРазмещение.НомерПаллета;
	//			НоваяСтрока.ЯчейкаПлан = ТекСтрокаРазмещение.ЯчейкаПлан;
	//			НоваяСтрока.КоличествоФакт  = ТекСтрокаРазмещение.Количество;
	//		КонецЦикла;
	//		ДокументЗаданиеНаРаботу.Записать(РежимЗаписиДокумента.Проведение);
	//	КонецЦикла;
	//Иначе	
    //Если НЕ Размещение.Количество() = 0 Тогда

    //	Для Каждого строкаИсполнители из Исполнители Цикл
    //		Запрос = Новый Запрос;
    //		Запрос.Текст = "ВЫБРАТЬ
    //		               |	ЗаданиеНаРаботу.Ссылка
    //		               |ИЗ
    //		               |	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
    //		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемкаИРазмещение КАК ПриемкаИРазмещение
    //		               |		ПО ЗаданиеНаРаботу.ДокументОснование = ПриемкаИРазмещение.Ссылка
    //		               |ГДЕ
    //		               |	ЗаданиеНаРаботу.Проведен = ИСТИНА
    //		               |	И ЗаданиеНаРаботу.ПометкаУдаления = ЛОЖЬ
    //		               |	И ПриемкаИРазмещение.Ссылка = &ДокСсылка";
    //	    Запрос.УстановитьПараметр("ДокСсылка",ЭтотОбъект.Ссылка);
    //		Результат = Запрос.Выполнить().Выгрузить();
    //		Если Результат.Количество() > 0 Тогда
    //		Для Каждого строкаРезультат из Результат Цикл
    //			Если строкаРезультат.Ссылка.Исполнитель = строкаИсполнители.Работники Тогда
    //			ФлагИсполнитель = Истина;
    //			прервать;
    //		Иначе 
    //			ФлагИсполнитель = Ложь;
    //			КонецЕсли;
    //		КонецЦикла;
    //		КонецЕсли;
    //		Если ФлагИсполнитель = Ложь Тогда
    //		ДокументЗаданиеНаРаботу = Документы.ЗаданиеНаРаботу.СоздатьДокумент();
    //		ДокументЗаданиеНаРаботу.Дата = ТекущаяДата();
    //		ДокументЗаданиеНаРаботу.Организация = Организация;                         
    //		ДокументЗаданиеНаРаботу.ДокументОснование = ЭтотОбъект.Ссылка;
    //		ДокументЗаданиеНаРаботу.ВидЗадания = Перечисления.ВидЗаданияНаРаботу.Приемка;
    //		ДокументЗаданиеНаРаботу.ПоставщикПолучатель = Поставщик;
    //		ДокументЗаданиеНаРаботу.Склад = Склад;
    //		ДокументЗаданиеНаРаботу.Исполнитель = строкаИсполнители.Работники;
    //		Для Каждого ТекстрокаРазмещение из Размещение Цикл
    //			НоваяСтрока = ДокументЗаданиеНаРаботу.Задание.Добавить();
    //			НоваяСтрока.ВидЯчейки = ТекСтрокаРазмещение.ВидЯчейки;
    //			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаРазмещение.ЕдиницаИзмерения;
    //			НоваяСтрока.Зона = ТекСтрокаРазмещение.Зона;
    //			НоваяСтрока.Количество = ТекСтрокаРазмещение.Количество;
    //			НоваяСтрока.КоличествоФакт = ТекСтрокаРазмещение.Количество;
    //			НоваяСтрока.Номенклатура = ТекСтрокаРазмещение.Номенклатура;
    //			НоваяСтрока.НомерПаллета = ТекСтрокаРазмещение.НомерПаллета;
    //			НоваяСтрока.ЯчейкаПлан = ТекСтрокаРазмещение.ЯчейкаПлан;
    //			НоваяСтрока.КоличествоФакт  = ТекСтрокаРазмещение.Количество;
    //		КонецЦикла;
    //		ДокументЗаданиеНаРаботу.Записать(РежимЗаписиДокумента.Проведение);
    //		КонецЕсли;
    //	КонецЦикла;
    //	КонецЕсли;
	//КонецЕсли;
	//07_12_2015
	//Кабаченко_Смартис
КонецПроцедуры

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура();
	СтруктураМакетов.Вставить("ЖурналПриходаТовара", "Журнал прихода товара");
	СтруктураМакетов.Вставить("ЗаданиеНаТранспортировку", "Задание на транспортировку (приемка)");
	СтруктураМакетов.Вставить("ИнформационныйЛистПаллета", "Информационный лист (паллета)");
	СтруктураМакетов.Вставить("ИнформационныйЛистКонверт", "Информационный лист (конверт)");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьТаблицуПечатныхФорм()
#Если Клиент Тогда


Функция ПечатьЖурналаПрихода() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемкаИРазмещение_ЖурналПриходаТовара";
	Макет = Документы.ПриемкаИРазмещение.ПолучитьМакет("ЖурналПриходаТовара");
	
	КС_ТЧ = Приемка.Количество();
	КС_ПЛ = 28;
	КС_СЛ = 32;
	КСтр_Д = (КС_ТЧ - КС_ПЛ)/КС_СЛ;
	Ост = КСтр_Д - Цел(КСтр_Д);
	Если Ост = 0 Тогда
		КСтр = 1 +Цел(КСтр_Д);
	Иначе
		Если КСтр_Д < 0 Тогда 
			КСтр = Цел(КСтр_Д)+1;
		Иначе
			КСтр = Цел(КСтр_Д)+2;
		КонецЕсли;
	КонецЕсли;
	НомерСтр = 1;
	н=0;
	ИтогоПаллет = 0;
	ИтогоКоробок = 0;
	ИтогоШтук = 0;
		
	Для ф = НомерСтр по КСтр Цикл
		
		// Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.НомерСтраницы = НомерСтр;
		Область.Параметры.ДатаПечати = Формат(ТекущаяДата(),"ДЛФ=Д");
		Область.Параметры.ВремяПечати = Формат(ТекущаяДата(),"ДЛФ=В");
		ТабДок.Вывести(Область);
		// Шапка
		Если НомерСтр = 1 ТОгда
			Шапка = Макет.ПолучитьОбласть("Шапка");
			Шапка.Параметры.Заполнить(ЭтотОбъект);
			ТабДок.Вывести(Шапка);
		КонецЕсли;
		// Приемка
		Область = Макет.ПолучитьОбласть("ПриемкаШапка");
		ТабДок.Вывести(Область);
		ОбластьПриемка = Макет.ПолучитьОбласть("Приемка");
		ТаблицаПриемки = Приемка.Выгрузить();
		ТаблицаПриемки.Сортировать("Номенклатура Возр"); //сортировка по алфавиту
		
		Если НомерСтр = 1 ТОгда
			Для к=н по н+27 Цикл
				Если н <= (КС_ТЧ-1) Тогда
					//ИЗМЕНЕНО Верескул Игорь(Начало 24.09.2014
					ОбластьПриемка.Параметры.НомерПП=н+1;
					//Окончание)Верескул Игорь 
					ОбластьПриемка.Параметры.КодНоменклатура = ТаблицаПриемки[н].Номенклатура.Код;
					ОбластьПриемка.Параметры.Номенклатура = ТаблицаПриемки[н].Номенклатура;
					Паллет = Цел(ТаблицаПриемки[н].КоличествоФактическиПринятое/?(ТаблицаПриемки[н].КоличествоЕХОВПаллете=0,1,ТаблицаПриемки[н].КоличествоЕХОВПаллете));
					ОбластьПриемка.Параметры.КоличествоПаллет = ?(ТаблицаПриемки[н].КоличествоЕХОВПаллете=0,0,Паллет);
					ИтогоПаллет = ИтогоПаллет + ОбластьПриемка.Параметры.КоличествоПаллет;
					Ост = ТаблицаПриемки[н].КоличествоФактическиПринятое - Паллет*ТаблицаПриемки[н].КоличествоЕХОВПаллете;
					ИЕУ_Коробка = ПолучитьИЕУ(ТаблицаПриемки[н].Номенклатура,Справочники.КлассификаторЕдиницИзмерения.Коробка);
					Коробок =  Цел(Ост/?(ИЕУ_Коробка=0,1,ИЕУ_Коробка));
					ОбластьПриемка.Параметры.КоличествоКоробок = ?(ИЕУ_Коробка=0,0,Коробок);
					ИтогоКоробок = ИтогоКоробок + ОбластьПриемка.Параметры.КоличествоКоробок;
					Ост = Ост - Коробок*ИЕУ_Коробка;
					ОбластьПриемка.Параметры.КоличествоЕХО = Ост;
	                ИтогоШтук = ИтогоШтук + ОбластьПриемка.Параметры.КоличествоЕХО;
					Если ТаблицаПриемки[н].КоличествоЕХОВПаллете <> 0 Тогда
						ОбластьПриемка.Параметры.КоличествоЕИУ = ТаблицаПриемки[н].КоличествоЕХОВПаллете; 
					ИначеЕсли ИЕУ_Коробка <> 0 Тогда
						ОбластьПриемка.Параметры.КоличествоЕИУ = ИЕУ_Коробка;
					Иначе 
						ОбластьПриемка.Параметры.КоличествоЕИУ = 0;
					КонецЕсли;
					ТабДок.Вывести(ОбластьПриемка);
				КонецЕсли;
				н=н+1;
			КонецЦикла;
		Иначе	
			Для к=н по н+31 Цикл
				Если н <= (КС_ТЧ-1) Тогда
					ОбластьПриемка.Параметры.КодНоменклатура = ТаблицаПриемки[н].Номенклатура.Код;
					ОбластьПриемка.Параметры.Номенклатура = ТаблицаПриемки[н].Номенклатура;
					Паллет = Цел(ТаблицаПриемки[н].КоличествоФактическиПринятое/?(ТаблицаПриемки[н].КоличествоЕХОВПаллете=0,1,ТаблицаПриемки[н].КоличествоЕХОВПаллете));
					ОбластьПриемка.Параметры.КоличествоПаллет = ?(ТаблицаПриемки[н].КоличествоЕХОВПаллете=0,0,Паллет);
					ИтогоПаллет = ИтогоПаллет + ОбластьПриемка.Параметры.КоличествоПаллет;
					Ост = ТаблицаПриемки[н].КоличествоФактическиПринятое - Паллет*ТаблицаПриемки[н].КоличествоЕХОВПаллете;
					ИЕУ_Коробка = ПолучитьИЕУ(ТаблицаПриемки[н].Номенклатура,Справочники.КлассификаторЕдиницИзмерения.Коробка);
					Коробок =  Цел(Ост/?(ИЕУ_Коробка=0,1,ИЕУ_Коробка));
					ОбластьПриемка.Параметры.КоличествоКоробок = ?(ИЕУ_Коробка=0,0,Коробок);
					ИтогоКоробок = ИтогоКоробок + ОбластьПриемка.Параметры.КоличествоКоробок;
					Ост = Ост - Коробок*ИЕУ_Коробка;
					ОбластьПриемка.Параметры.КоличествоЕХО = Ост;
	                ИтогоШтук = ИтогоШтук + ОбластьПриемка.Параметры.КоличествоЕХО;
					Если ТаблицаПриемки[н].КоличествоЕХОВПаллете <> 0 Тогда
						ОбластьПриемка.Параметры.КоличествоЕИУ = ТаблицаПриемки[н].КоличествоЕХОВПаллете; 
					ИначеЕсли ИЕУ_Коробка <> 0 Тогда
						ОбластьПриемка.Параметры.КоличествоЕИУ = ИЕУ_Коробка;
					Иначе 
						ОбластьПриемка.Параметры.КоличествоЕИУ = 0;
					КонецЕсли;
					ТабДок.Вывести(ОбластьПриемка);
				КонецЕсли;
				н=н+1;
			КонецЦикла;
		КонецЕсли;
		Если НомерСтр <> КСтр Тогда      
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НомерСтр = НомерСтр + 1;
	КонецЦикла;
	
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьИтого.Параметры.ИтогоПаллет = ИтогоПаллет; 
		ОбластьИтого.Параметры.ИтогооКоробок = ИтогоКоробок; 
		ОбластьИтого.Параметры.ИтогоЕХО = ИтогоШтук; 
		ТабДок.Вывести(ОбластьИтого);
		
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 2;
	ТабДок.ПолеСлева = 2;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСправа = 2;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьЗаданияНаТранспортировку() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемкаИРазмещение_ЗаданияНаТранспортировку";
	Макет = Документы.ПриемкаИРазмещение.ПолучитьМакет("ЗаданиеНаТранспортировку");
	
	КС_ТЧ = Размещение.Количество();
	КС_ПЛ = 16;
	КС_СЛ = 19;
	КСтр_Д = (КС_ТЧ - КС_ПЛ)/КС_СЛ;
	Ост = КСтр_Д - Цел(КСтр_Д);
	Если Ост = 0 Тогда
		КСтр = 1 +Цел(КСтр_Д);
	Иначе
		Если КСтр_Д < 0 Тогда 
			КСтр = Цел(КСтр_Д)+1;
		Иначе
			КСтр = Цел(КСтр_Д)+2;
		КонецЕсли;
	КонецЕсли;
	НомерСтр = 1;
	н=0;
	ИтогПаллет = 0;
	ИтогКоробок = 0;
	ИтогЕХО = 0;
	Для ф = НомерСтр по КСтр Цикл
		
		// Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.НомерСтраницы = НомерСтр;
		Область.Параметры.ДатаПечати = Формат(ТекущаяДата(),"ДЛФ=Д");
		Область.Параметры.ВремяПечати = Формат(ТекущаяДата(),"ДЛФ=В");
		ТабДок.Вывести(Область);
		// Шапка
		Если НомерСтр = 1 ТОгда
			Шапка = Макет.ПолучитьОбласть("Шапка");
			Шапка.Параметры.Заполнить(ЭтотОбъект);
			ТабДок.Вывести(Шапка);
		КонецЕсли;
		// Приемка
		Область = Макет.ПолучитьОбласть("ПриемкаШапка");
		ТабДок.Вывести(Область);
		ОбластьПриемка = Макет.ПолучитьОбласть("Приемка");
		ТаблицаРазмещение = Размещение.Выгрузить();
		ТаблицаРазмещение.Сортировать("Номенклатура Возр"); //сортировка по алфавиту
		
		Если НомерСтр = 1 ТОгда
			Для к=н по н+15 Цикл
				Если н <= (КС_ТЧ-1) Тогда
					ОбластьПриемка.Параметры.КодНоменклатура = ТаблицаРазмещение[н].Номенклатура.Код;
					ОбластьПриемка.Параметры.Номенклатура = ТаблицаРазмещение[н].Номенклатура;
					ОбластьПриемка.Параметры.Количество = ТаблицаРазмещение[н].Количество;
					ОбластьПриемка.Параметры.ЯчейкаПлан = ТаблицаРазмещение[н].ЯчейкаПлан;
					//Коновалова 01062013 +
					Если ТаблицаРазмещение[н].ЯчейкаПлан <> ТаблицаРазмещение[н].ЯчейкаФакт ТОгда
					     ОбластьПриемка.Параметры.ЯчейкаФакт = ТаблицаРазмещение[н].ЯчейкаФакт;
					Иначе
					     ОбластьПриемка.Параметры.ЯчейкаФакт = "";
					КонецЕсли;	
					//Коновалова 01062013 -
					ТабДок.Вывести(ОбластьПриемка);
				КонецЕсли;
				н=н+1;
			КонецЦикла;
		Иначе	
			Для к=н по н+18 Цикл
				Если н <= (КС_ТЧ-1) Тогда
					ОбластьПриемка.Параметры.КодНоменклатура = ТаблицаРазмещение[н].Номенклатура.Код;
					ОбластьПриемка.Параметры.Номенклатура = ТаблицаРазмещение[н].Номенклатура;
					ОбластьПриемка.Параметры.Количество = ТаблицаРазмещение[н].Количество;
					ОбластьПриемка.Параметры.ЯчейкаПлан = ТаблицаРазмещение[н].ЯчейкаПлан;
					//Коновалова 01062013 +
					Если ТаблицаРазмещение[н].ЯчейкаПлан <> ТаблицаРазмещение[н].ЯчейкаФакт ТОгда
						ОбластьПриемка.Параметры.ЯчейкаФакт = ТаблицаРазмещение[н].ЯчейкаФакт;
					Иначе
						ОбластьПриемка.Параметры.ЯчейкаФакт = "";
					КонецЕсли;	
					//Коновалова 01062013 -
					ТабДок.Вывести(ОбластьПриемка);
				КонецЕсли;
				н=н+1;
			КонецЦикла;
		КонецЕсли;
		Если НомерСтр <> КСтр Тогда      
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НомерСтр = НомерСтр + 1;
	КонецЦикла;
	
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьИтого.Параметры.ИтогоПаллет = Размещение.Итог("Количество"); 
		ТабДок.Вывести(ОбластьИтого);
		
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ПолеСверху = 2;
	ТабДок.ПолеСлева = 2;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСправа = 2;
	
	Возврат ТабДок;
		
КонецФункции

Функция ПечатьИнформационныйЛистПаллета() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемкаИРазмещение_ИнформационныйЛистПаллета";
	Макет = Документы.ПриемкаИРазмещение.ПолучитьМакет("ИнформационныйЛистПаллета");
	
	Область = Макет.ПолучитьОбласть("Область1");
	ТаблицаРазмещения = Размещение.Выгрузить();
	//ТаблицаРазмещения.Колонки.Добавить("КолвоШтук");
	//
	//Для каждого строка из ТаблицаРазмещения Цикл
	//	Если Строка.ЕдиницаИзмерения.ЕдиницаПоКлассификатору <> Справочники.КлассификаторЕдиницИзмерения.Паллета Тогда
	//		Если Строка.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.Коробка Тогда
	//			Строка.КолвоШтук = Строка.Количество*ПолучитьИЕУ(строка.Номенклатура,Справочники.КлассификаторЕдиницИзмерения.Коробка);
	//		Иначе
	//			Строка.КолвоШтук = Строка.Количество;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	
	ТаблицаРазмещения.Свернуть("Номенклатура,НомерПаллета,ЯчейкаФакт,ВидЯчейки","Количество");
	
	Для каждого стр из ТаблицаРазмещения Цикл
		
		Если (стр.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная И стр.НомерПаллета <> 0) ИЛИ (стр.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Общая И стр.НомерПаллета <> 0) Тогда
			Область.Параметры.Номер = Номер;
			Область.Параметры.Дата = Дата;
			Область.Параметры.Поставщик = Поставщик;
			//Коновалова 18022013 +
			//Область.Параметры.ДатаПоступленияФакт = ДокументПоступления.Дата;
			НайдСтрока = Приемка.Найти(стр.Номенклатура);
			Область.Параметры.ДатаПоступленияФакт = ?(НайдСтрока<>Неопределено,НайдСтрока.ДокументОснование.Дата,"");
			//Коновалова 18022013 -
			Область.Параметры.НомерПаллета = стр.НомерПаллета;
			Область.Параметры.Номенклатура = стр.Номенклатура;
			Область.Параметры.КодНоменклатура = стр.Номенклатура.Код;
			//Область.Параметры.КоличествоИЕУ = ПолучитьИЕУ(стр.Номенклатура,Справочники.КлассификаторЕдиницИзмерения.Паллета);
			Область.Параметры.КоличествоИЕУ = стр.Количество;
			Область.Параметры.ЯчейкаПриемки = ЯчейкаПриемки;
			Область.Параметры.ЯчейкаФакт = стр.ЯчейкаФакт;
			ТабДок.Вывести(Область);
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//ИначеЕсли стр.ВидЯчейки = Перечисления.ВидыСкладскихЯчеек.Буферная И стр.НомерПаллета = 0 ТОгда
		//	Область.Параметры.Номер = Номер;
		//	Область.Параметры.Дата = Дата;
		//	Область.Параметры.Поставщик = Поставщик;
		//	//Коновалова 18022013 +
		//	//Область.Параметры.ДатаПоступленияФакт = ДокументПоступления.Дата;
		//	НайдСтрока = Приемка.Найти(стр.Номенклатура);
		//	Область.Параметры.ДатаПоступленияФакт = ?(НайдСтрока<>Неопределено,НайдСтрока.ДокументОснование.Дата,"");
		//	//Коновалова 18022013 -
		//	Область.Параметры.НомерПаллета = стр.НомерПаллета;
		//	Область.Параметры.Номенклатура = стр.Номенклатура;
		//	Область.Параметры.КодНоменклатура = стр.Номенклатура.Код;
		//	Область.Параметры.КоличествоИЕУ = стр.КолвоШтук;
		//	Область.Параметры.ЯчейкаПриемки = ЯчейкаПриемки;
		//	Область.Параметры.ЯчейкаФакт = стр.ЯчейкаФакт;
		//	ТабДок.Вывести(Область);
		//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла;
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ПолеСверху = 2;
	ТабДок.ПолеСлева = 2;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСправа = 2;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьИнформационныйЛистКонверт() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемкаИРазмещение_ИнформационныйЛистКонверт";
	Макет = Документы.ПриемкаИРазмещение.ПолучитьМакет("ИнформационныйЛистКонверт");
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Склад = Склад;
	Область.Параметры.ВидПоступления = ВидПоступления;
	Область.Параметры.Номер = Номер;
	Область.Параметры.Дата = Дата;
	Область.Параметры.Поставщик = Поставщик;
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Область1");
	//Коновалова 18022013 +
	//Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ТОгда
	//	Область.Параметры.НомерДатаПоступления = "№ " + ДокументПоступления.НомерВходящегоДокумента + ", от " + ДокументПоступления.ДатаВходящегоДокумента;
	//КонецЕсли;
	//Область.Параметры.СтрокаПрописью = "По документу " + ДокументПоступления;
	ТабПриемка = Приемка.Выгрузить();
	ТабПриемка.Свернуть("ДокументОснование");
	Номера_И_Даты = "";
	Стрк_Прописью = "";
	Для Каждого стр из ТабПриемка Цикл
		Если ТипЗнч(стр.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Номера_И_Даты = Номера_И_Даты + "№ " + стр.ДокументОснование.НомерВходящегоДокумента + ", от " + стр.ДокументОснование.ДатаВходящегоДокумента + "; ";
			Стрк_Прописью = Стрк_Прописью + "По документу " + стр.ДокументОснование + "; ";
		КонецЕсли;
	КонецЦикла;
	Область.Параметры.НомерДатаПоступления = СокрЛП(Номера_И_Даты);
	Область.Параметры.СтрокаПрописью = СокрЛП(Стрк_Прописью);
	//Коновалова 18022013 -
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Подписи");
	Область.Параметры.Оператор = Ответственный;
	Область.Параметры.ИсполнительПриемки = ИсполнительПриемки;
	Область.Параметры.ИсполнительРазмещения = ИсполнительРазмещения;
	ТабДок.Вывести(Область);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 2;
	ТабДок.ПолеСлева = 2;
	ТабДок.ПолеСнизу = 2;
	ТабДок.ПолеСправа = 2;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьИЕУ(номен, единица)
	
	Запрос = новый Запрос("ВЫБРАТЬ
	                      |	ЕдиницыИзмерения.СодержитЕХО
	                      |ИЗ
	                      |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	                      |ГДЕ
	                      |	ЕдиницыИзмерения.Владелец = &Владелец
	                      |	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору");
	Запрос.УстановитьПараметр("Владелец",номен);
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору",единица);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(Результат) ТОгда
		Возврат Результат[0].СодержитЕХО;
	Иначе
		Возврат 0;
	КонецЕсли;
		
КонецФункции


Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ЖурналПриходаТовара" Тогда
		ТабДокумент = ПечатьЖурналаПрихода();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	ИначеЕсли ИмяМакета = "ЗаданиеНаТранспортировку" Тогда
		ТабДокумент = ПечатьЗаданияНаТранспортировку();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	ИначеЕсли ИмяМакета = "ИнформационныйЛистПаллета" Тогда
		ТабДокумент = ПечатьИнформационныйЛистПаллета();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	ИначеЕсли ИмяМакета = "ИнформационныйЛистКонверт" Тогда
		ТабДокумент = ПечатьИнформационныйЛистКонверт();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	КонецЕсли;

КонецПроцедуры // Печать()

Процедура ПечатьПакета() Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ТабДокумент = ПечатьЖурналаПрихода();
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Истина, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	ТабДокумент = ПечатьЗаданияНаТранспортировку();
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Истина, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	ТабДокумент = ПечатьИнформационныйЛистПаллета();
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Истина, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	ТабДокумент = ПечатьИнформационныйЛистКонверт();
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Истина, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	
КонецПроцедуры // Печать()

#КонецЕсли 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ДокументИзменен = Модифицированность();
	ЭтоПерепроведение = (Проведен = Истина И РежимЗаписи = РежимЗаписиДокумента.Проведение);
	
	Если Статус <> Перечисления.СтатусыСкладскихПоступлений.Выполнение
		И НЕ ЭтоУстановкаСтатуса
		И НЕ УправлениеСкладскойЛогистикой.ДоступноПоРолям("ИзменениеЗавершенныхДокументов") И Не РольДоступна("РольКладовщик") И Не РольДоступна("ЗаведующийСкладом") Тогда  //Кабаченко_Смартис  17_12_2015
		
		Отказ = Истина;
		Сообщить("Запрещено изменение завершенных документов по логистике", СтатусСообщения.Важное);
	КонецЕсли;
	
	Если НЕ Отказ И Дата < Дата(2013, 03, 25) И НЕ РольДоступна("АдминистраторЛогистики") Тогда
		Отказ = Истина;
		Сообщить("Запрещено изменение документов по логистике оформленных до 25.03.2013", СтатусСообщения.Важное);
	КонецЕсли;
	//Кабаченко_Смартис_04_12_2015
	//Кабаченко_Смартис
	//для роли кладовщик
	Если РольДоступна("РольГрузчик") Тогда
		Если Отклонение = Истина Тогда
		Иначе
			Статус = Перечисления.СтатусыСкладскихПоступлений.Принято; 
		КонецЕсли;
	КонецЕсли;
	//функционал перенесен в документ Задание на работу
	//Кабаченко_Смартис

КонецПроцедуры

//Кабаченко_Смартис
//09_12_2015
Функция ВыделитьСлово(ИсходнаяСтрока)   Экспорт
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, "-");
	
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела-1));
	//   ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

ЭтоУстановкаСтатуса = Ложь;