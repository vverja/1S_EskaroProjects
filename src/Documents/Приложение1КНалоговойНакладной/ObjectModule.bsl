Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с регламентированной печатной формой 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаНоменклатуры, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Дата КАК Дата,
	|	Контрагент.НаименованиеПолное КАК Контрагент,
	|	ДоговорКонтрагента.Наименование КАК ДоговорКонтрагента,
	|	Организация КАК Организация,
	|   ДоговорКонтрагента.Номер КАК НомерДоговора,
	|   ДоговорКонтрагента.Дата  КАК ДатаДоговора,
	|	НалоговаяНакладная.Номер КАК НомерНалоговойНакладной,
	|	НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложенияНалоговойНакладной,
	|	НалоговаяНакладная,
	|	НалоговаяНакладная.Дата КАК ДатаНалоговойНакладной,
	|	КтоВыписалНалоговуюНакладную.Представление КАК КтоВыписалНалоговуюНакладную
	|ИЗ
	|	Документ.Приложение1КНалоговойНакладной КАК Приложение1
	|
	|ГДЕ
	|	Приложение1.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	// Подготовим таблицы
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(); 
	ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаНоменклатуры, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА);

	// Загрузим все таблицы (кроме тары) в одну таблицу
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОС	  , ТаблицаНоменклатуры);	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНМА	  , ТаблицаНоменклатуры);	
	
	// переименуем колонки
	ТаблицаНоменклатуры.Колонки.ЦенаМеста.Имя 					     = "ЦенаБезНДС";
	ТаблицаНоменклатуры.Колонки.СуммаБезНДСРегл.Имя 	 			 = "СуммаБезНДС";
	
	СведенияОПродавце	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	НазваниеОрганизации	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,",Ложь);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложени1КНалоговойНакладной_Приложение1";

	Макет = ПолучитьобщийМакет("Приложение1КНалоговойНакладной");
	
	Если Дата >= '20110110' Тогда
		Макет = ПолучитьобщийМакет("Приложение1КНалоговойНакладной2011");
	КонецЕсли;
	

	Если НалоговыйУчет.НоваяСхемаНДС(Дата) Тогда
		Суффикс = "";
	Иначе
		Суффикс = "_Старая";
	КонецЕсли;
	
	Для Страница = 1 По 2 Цикл
	
		// Выводим отступ
		ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим область оригинал/копия
		Если Страница = 1 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Оригинал");
			ТабДокумент.Вывести(ОбластьМакета);
		ИначеЕсли Страница = 2 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПерваяКопия");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;

		// Выводим заголовок накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если Дата <'20110110' Тогда
			ОбластьМакета.Параметры.ДатаНалоговойНакладной  = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=dd.MM.yy" );
			ОбластьМакета.Параметры.НомерНалоговойНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная);
		Иначе	
		
			//Дата налоговой
			ТекДатаНалоговой = Формат(Шапка.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
			Для Инд = 1 По 8 Цикл
				ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
			КонецЦикла; 
			
			// Номер налоговой
			ТекНомерНалоговой = Прав("       " + СокрЛП(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка.НалоговаяНакладная)), 7);
			Для Инд = 1 По 7 Цикл                                                                 
				ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
			КонецЦикла; 
			
			// филиал/спецрежим налоговой
			ТекНомерФилиалНалоговой = "";
			Если ЗначениеЗаполнено(Шапка.СпецРежимНалогообложенияНалоговойНакладной) Тогда
				ТекНомерФилиалНалоговой	= "" + Шапка.СпецРежимНалогообложенияНалоговойНакладной + ТекНомерФилиалНалоговой; 
			КонецЕсли;
			Для Инд = 1 По 4 Цикл                                                                 
				ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
			КонецЦикла;			
			
			//Дата
			ТекДата = Формат(Шапка.Дата, "ДФ=ddMMyyyy");
			Для Инд = 1 По 8 Цикл
				ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
			КонецЦикла; 
		
		КонецЕсли;
		

		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка"+Суффикс);
		ТабДокумент.Вывести(ОбластьМакета);

		НомерПП = 0;
		// Выводим табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			// Теперь заполним
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			НомерПП = НомерПП + 1;
			ОбластьМакета.Параметры.НомерПП = НомерПП;

			// Договор + Контрагент
			ОбластьМакета.Параметры.ДоговорКонтрагента = "" + Шапка.ДоговорКонтрагента + ", " + НазваниеОрганизации;
			ОбластьМакета.Параметры.ДоговорКонтрагента = СокрЛП(ОбластьМакета.Параметры.ДоговорКонтрагента);
			
			// номенклатура с учетом харакетристики
			ОбластьМакета.Параметры.Номенклатура = "" + СтрокаТаблицы.Номенклатура + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), "", "(" + СтрокаТаблицы.Характеристика +")");
			ОбластьМакета.Параметры.Номенклатура = СокрЛП(ОбластьМакета.Параметры.Номенклатура);
			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		
		// Выводим подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИтогСуммаБезНДС = ТаблицаНоменклатуры.Итог("СуммаБезНДС");
		
		ТабДокумент.Вывести(ОбластьМакета);

		Если Страница <> 2 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла; 

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

//Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийПриложение1КНалоговойНакладной.НеНДСОперации Тогда
		// такие операции не предусматривают выписки налоговых накладных
		Возврат	
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если  ИмяМакета = "Приложение1КНалоговойНакладной" Тогда
		ТабДокумент = ПечатьДокумента();
		
	КонецЕсли;

    УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураПечатныхФорм = Новый Структура("Приложение1КНалоговойНакладной", "Приложение 1 к налоговой накладной");

	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

Процедура СкопироватьТовары() Экспорт

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ЕдиницаИзмерения,
	|	Основание.ЕдиницаИзмеренияМест,
	|	Основание.Количество,
	|	Основание.КоличествоМест,
	|	Основание.Коэффициент,
	|	Основание.Номенклатура,
	|	Основание.ХарактеристикаНоменклатуры,
	|	Основание.Цена,
	|	Основание.ПроцентСкидкиНаценки,
	|	Основание.ПроцентАвтоматическихСкидок,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК Основание
	|
	|ГДЕ
	|	  Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.КоличествоМест             = Выборка.КоличествоМест;

		НоваяСтрока.КоличествоОсталось 		   = Выборка.Количество;
		
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				
		НоваяСтрока.ПроцентСкидкиНаценки             = Выборка.ПроцентСкидкиНаценки;		
		НоваяСтрока.ПроцентАвтоматическихСкидок		 = Выборка.ПроцентАвтоматическихСкидок;
		
		Если НоваяСтрока.ПроцентСкидкиНаценки + НоваяСтрока.ПроцентАвтоматическихСкидок = 100 Тогда
			НоваяСтрока.Цена = Выборка.Цена
		ИначеЕсли НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма / ((1 - (НоваяСтрока.ПроцентСкидкиНаценки + НоваяСтрока.ПроцентАвтоматическихСкидок) / 100) * НоваяСтрока.Количество);
		КонецЕсли;	
		
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		
	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

Процедура СкопироватьУслуги() Экспорт
	
	#Если Не Клиент И Не ВнешнееСоединение Тогда
		
	глТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Содержание,
	|	Основание.Количество,
	|	Основание.Номенклатура,
	|	Основание.Цена,
	|	Основание.ПроцентСкидкиНаценки,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ.НалоговаяНакладная.Услуги КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.Содержание                 = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.КоличествоОсталось 		   = Выборка.Количество;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
											Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
											Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
											Выборка.СуммаВключаетНДС,
											УчитыватьНДС,
											СуммаВключаетНДС,
											Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
											
		НоваяСтрока.ПроцентСкидкиНаценки             = Выборка.ПроцентСкидкиНаценки;		
											
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"));
		
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

			
	КонецЦикла;

	
КонецПроцедуры // СкопироватьУслуги()

Процедура СкопироватьОС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.ОсновноеСредство,
	|	Основание.Ссылка.ВалютаДокумента 	   КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ.НалоговаяНакладная.ОС 	   	   КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство           = Выборка.ОсновноеСредство;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.КоличествоОсталось 		   = 1;
		
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	
	КонецЦикла;
	
КонецПроцедуры // СкопироватьОС()

Процедура СкопироватьНематериальныеАктивы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", НалоговаяНакладная);
	Запрос.УстановитьПараметр("ДопустимыеСтавкиНДС", ОпределитьДопустимыеСтавкиНДС());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.НематериальныйАктив,
	|	Основание.Ссылка.ВалютаДокумента 	   КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                  КАК КратностьДокумента,
	|	Основание.Сумма,
	|	Основание.СтавкаНДС,
	|	Основание.СуммаНДС,
	|	Основание.Ссылка.Дата			       КАК ДатаОтгрузки,
	|	Основание.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	Основание.Ссылка.УчитыватьНДС          КАК УчитыватьНДС
	|ИЗ
	|	Документ.НалоговаяНакладная.НематериальныеАктивы КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование
	|   И Основание.СтавкаНДС В (&ДопустимыеСтавкиНДС)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НематериальныеАктивы.Добавить();
		НоваяСтрока.НематериальныйАктив        = Выборка.НематериальныйАктив;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;
        НоваяСтрока.КоличествоОсталось 		   = 1;
		
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
		НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, Выборка.ВалютаДокумента, ВалютаДокумента,
														  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
														  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
	
	КонецЦикла;
	
КонецПроцедуры // СкопироватьНематериальныеАктивы()

Функция ОпределитьДопустимыеСтавкиНДС() Экспорт
	СписокСтавокНДС = Новый СписокЗначений();
	
	Если ВидОперации = Перечисления.ВидыОперацийПриложение1КНалоговойНакладной.ОблагаемыеОперации Тогда
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриложение1КНалоговойНакладной.НеНДСОперации Тогда
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НеНДС);
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийПриложение1КНалоговойНакладной.ОсвобожденныеОперации Тогда
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
		
	Возврат СписокСтавокНДС;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений  и печати
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента) Экспорт
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Колонки, необходимые для печати документа
	ТаблицаТоваров.Колонки.Добавить("ЦенаМеста", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,5)));
	
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета);
			СтрокаТаблицы.СуммаНДСРегл  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
	
		СтрокаТаблицы.ЦенаМеста 	  = СтрокаТаблицы.СуммаБезНДСРегл /?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
	КонецЦикла;
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	Возврат ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

КонецФункции // ПодготовитьТаблицуУслуг()

Функция ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента)

	Возврат  ПодготовитьТаблицуТоваров(РезультатЗапросаПоОС, СтруктураШапкиДокумента);

КонецФункции // ПодготовитьТаблицуОС()

Функция ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента)

	Возврат  ПодготовитьТаблицуТоваров(РезультатЗапросаПоНМА, СтруктураШапкиДокумента);

КонецФункции // ПодготовитьТаблицуНМА()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НалоговаяНакладная, ВидОперации, Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
 	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()


// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, СтавкаНДС, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()


// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Содержание, Количество, Сумма");
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиОС(Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ОС";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиНематериальныеАктивы(Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "НематериальныеАктивы";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив, Сумма");
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, Перечисления.ВидыСкладов.Оптовый);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	// предусмотрен только ввод на основании НалоговойНакладной
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.НалоговаяНакладная") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	НалоговаяНакладная = Основание;
	ФормаРасчетов = Основание.ФормаРасчетов;
	
	// определим вид операции
	Если Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации Тогда
		ВидОперации = Перечисления.ВидыОперацийПриложение1КНалоговойНакладной.ОблагаемыеОперации;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации Тогда
		ВидОперации = Перечисления.ВидыОперацийПриложение1КНалоговойНакладной.ОсвобожденныеОперации;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации Тогда
		ВидОперации = Перечисления.ВидыОперацийПриложение1КНалоговойНакладной.НеНДСОперации;
	Иначе
		Сообщить("Не предусмотрен ввод Приложения 1 к Налоговой накладной с видом операции:" + Основание.ВидОперации);
		ВидОперации = Перечисления.ВидыОперацийПриложение1КНалоговойНакладной.ОблагаемыеОперации;
		Возврат;
	КонецЕсли;
		
	СкопироватьТовары();
	СкопироватьУслуги();
	СкопироватьОС();
	СкопироватьНематериальныеАктивы();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Посчитать суммы документа и записать их в соответствующие реквизиты шапки для показа в журналах
	СуммаДокумента 	  = 0 + Товары.Итог("Сумма") 	 + Услуги.Итог("Сумма") 	+ ОС.Итог("Сумма")    + НематериальныеАктивы.Итог("Сумма");
	СуммаНДСДокумента = 0 + Товары.Итог("СуммаНДС")  + Услуги.Итог("СуммаНДС")	+ ОС.Итог("СуммаНДС") + НематериальныеАктивы.Итог("СуммаНДС");
	
КонецПроцедуры // ПередЗаписью


Функция ПодготовитьСтруктуруШапкиДокумента()
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "Организация"                      , "ДоговорОрганизация");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	Возврат УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецФункции


Процедура ПодготовитьТаблицы(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА)
	
	// ТОВАРЫ
	// Получим необходимые для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей        = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("Количество"            	, "Количество");	
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("Характеристика"			, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("КоличествоОтгружено"  		, "КоличествоОтгружено");
	СтруктураПолей.Вставить("КоличествоОсталось"  		, "КоличествоОсталось");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// УСЛУГИ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "Услуги".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Содержание");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.БазоваяЕдиницаИзмерения.Наименование");
	СтруктураПолей.Вставить("Количество"            	, "Количество");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
  	СтруктураПолей.Вставить("КоличествоОтгружено"  		, "КоличествоОтгружено");
	СтруктураПолей.Вставить("КоличествоОсталось"  		, "КоличествоОсталось");
    СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу Услуг для проведения или печати
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	
	// ОСНОВНЫЕ СРЕДСТВА
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "ОС".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "ОсновноеСредство.НаименованиеПолное");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
  	СтруктураПолей.Вставить("КоличествоОтгружено"  		, "КоличествоОтгружено");
	СтруктураПолей.Вставить("КоличествоОсталось"  		, "КоличествоОсталось");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт.");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
    СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу Основных средств для проведения или печати
	ТаблицаПоОС = ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента);

	// НЕМАТЕРИАЛЬНЫЕ АКТИВЫ
	// Получим необходимые для проведения и проверки заполнения данные 
	// по табличной части "НематериальныеАктивы".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "НематериальныйАктив.НаименованиеПолное");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
  	СтруктураПолей.Вставить("КоличествоОтгружено"  		, "КоличествоОтгружено");
	СтруктураПолей.Вставить("КоличествоОсталось"  		, "КоличествоОсталось");
	СтруктураПростыхПолей.Вставить("ЕдиницаИзмерения", "шт.");
	СтруктураПростыхПолей.Вставить("Количество"  , 1);	
    СтруктураПростыхПолей.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу Нематериальных активов для проведения или печати
	ТаблицаПоНМА = ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента);


КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Подготовим структуру шапки документа
	СтруктураШапкиДокумента = ПодготовитьСтруктуруШапкиДокумента(); 
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОС(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиНематериальныеАктивы(Отказ, Заголовок);

КонецПроцедуры // ОбработкаПроведения()

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");