Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

/////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура проверяет правильность выбора налоговой группы ОС
// 
Процедура ПроверитьПравильностьВыбораНалоговойГруппыОС(КакОС, ГруппаОС, Отказ, Заголовок = "") Экспорт
	
	Если НЕ КакОС ИЛИ НЕ ЗначениеЗаполнено(ГруппаОС) Тогда
		
		Возврат
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ГруппаОС", ГруппаОС);
	Ресурсы = РегистрыСведений.СведенияОГруппахОсновныхСредствНалоговыйУчет.ПолучитьПоследнее(МоментВремени(), СтруктураОтбора);
	
	Если Ресурсы.Пообъектно Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Нельзя для НМА выбирать налоговую группу ОС с ""Пообъектным"" учетом.", Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры // ПроверитьПравильностьВыбораГруппыОС()


// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "НачислятьАмортизациюБУ,
								|ОбъемПродукцииРаботДляВычисленияАмортизации,
								|МОЛБУ,
								|ПодразделениеОрганизации,
								|СпособНачисленияАмортизацииБУ,
								|СрокПолезногоИспользованияБУ,
								|СтоимостьБУ,
								|ЛиквидационнаяСтоимостьБУ,
								|СчетНачисленияАмортизацииБУ,
								|СчетУчетаБУ,
								|СчетУчетаБУВнеоборотногоАктива
								|НалоговоеНазначение,
								|СрокПолезногоИспользованияНУ,
								|СтоимостьНУ,
								|НалоговаяГруппаОС
								|";

	мСтрокаРеквизитыНалУчета =  "НачислятьАмортизациюНУ,
								|НалоговоеНазначение,
								|СрокПолезногоИспользованияНУ,
								|СтоимостьНУ,
								|УчитываетсяКакОСНУ,
								|НалоговаяГруппаОС
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

#Если Клиент Тогда

// Функция формирует табличный документ с типовой печатной формой НА-1
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНА1()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПринятиеКУчетуНМА.Организация                               КАК Организация,
	|	ПринятиеКУчетуНМА.Организация.НаименованиеПолное            КАК НаименованиеПолноеОрганизации,
	|	ПринятиеКУчетуНМА.Дата                                      КАК ДатаДок,
	|	ПринятиеКУчетуНМА.Номер                                     КАК НомерДок,
	|	ПринятиеКУчетуНМА.НематериальныйАктив.НаименованиеПолное    КАК НаименованиеПолное,
	|	ПринятиеКУчетуНМА.НематериальныйАктив.ПрочиеСведения        КАК ПрочиеСведения,
	|	ПринятиеКУчетуНМА.НематериальныйАктив.Код                   КАК ИнвентарныйНомер,
	|	ПринятиеКУчетуНМА.СчетУчетаБУ                               КАК СчетУчетаБУ,
	|	ПринятиеКУчетуНМА.СчетУчетаБУВнеоборотногоАктива            КАК СчетУчетаБУВнеоборотногоАктива,
	|	ПринятиеКУчетуНМА.СтоимостьБУ                               КАК ПервоначальнаяСтоимость,
	|	ПринятиеКУчетуНМА.СрокПолезногоИспользованияБУ              КАК СрокИспользования,
	|	ПринятиеКУчетуНМА.ЛиквидационнаяСтоимостьБУ                 КАК ЛиквидационнаяСтоимость
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА КАК ПринятиеКУчетуНМА
	|ГДЕ
	|	ПринятиеКУчетуНМА.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуНМА_НА1";
	Макет         = ПолучитьМакет("НА1");
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	ОбластьМакета = Макет.ПолучитьОбласть("НА1");
	Параметры     = ОбластьМакета.Параметры;
	
	Если Выборка.Следующий() И (Выборка.СрокИспользования <> 0) Тогда
		
		Параметры.ГодичнаяСуммаАмортизации = 12 * (Выборка.ПервоначальнаяСтоимость 
												   - Выборка.ЛиквидационнаяСтоимость)
											 / Выборка.СрокИспользования;
	Иначе
		
		Параметры.ГодичнаяСуммаАмортизации = 0;
		
	КонецЕсли;
	
	Параметры.Заполнить(Выборка);
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
	СписокПоказателей.Добавить("", "ФИОРук");
	СписокПоказателей.Добавить("", "ФИОБух");
	СписокПоказателей     = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, Дата, СписокПоказателей);
	Параметры.КодПоЕДРПОУ = СписокПоказателей.КодПоЕДРПОУ;
	Параметры.ФИОРук      = ОбщегоНазначения.ФамилияИнициалыФизЛица(СписокПоказателей.ФИОРук);
	Параметры.ФИОБух      = ОбщегоНазначения.ФамилияИнициалыФизЛица(СписокПоказателей.ФИОБух);
	
	Параметры.Заполнить(ВыборкаПоКомиссии);
	
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ОбластьПечати = ТабДокумент.Область( , 2, , ТабДокумент.ШиринаТаблицы);

	Возврат ТабДокумент;

КонецФункции // ПечатьНА1()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "НА1" тогда
		
		ТабДокумент = ПечатьНА1();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Принятие к учету НМА"));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("НА1", "Форма НА-1");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
 	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты,СтруктураШапкиДокумента)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;	
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьУУ";
	
	Если СтруктураШапкиДокумента.Дата > Дата(2008,1,1) Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Подразделение, МОЛУУ";
	КонецЕсли;	
	
	
	Если СтруктураШапкиДокумента.НачислятьАмортизациюУУ Тогда
		
		Реквизиты = Реквизиты + " , СпособНачисленияАмортизацииУУ, СпособОтраженияРасходов";
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ) Тогда
			
			Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда
				
				Реквизиты = Реквизиты + ", ОбъемПродукцииРаботДляВычисленияАмортизации";
				
			Иначе
				
				Реквизиты = Реквизиты + ", СрокПолезногоИспользованияУУ";
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка Тогда
				
				Реквизиты = Реквизиты + ",ЛиквидационнаяСтоимостьУУ";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты,СтруктураШапкиДокумента)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;	
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьБУ,СчетУчетаБУВнеоборотногоАктива,СчетУчетаБУ";
	
	Если СтруктураШапкиДокумента.Дата > Дата(2008,1,1) Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ПодразделениеОрганизации, МОЛБУ";
	КонецЕсли;	
		
	Если СтруктураШапкиДокумента.НачислятьАмортизациюБУ Тогда
		
		Реквизиты = Реквизиты + " , СпособНачисленияАмортизацииБУ, СчетНачисленияАмортизацииБУ, СпособОтраженияРасходов";
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ) Тогда
			
			Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда
				
				Реквизиты = Реквизиты + ", ОбъемПродукцииРаботДляВычисленияАмортизации";
				
			Иначе
				
				Реквизиты = Реквизиты + ", СрокПолезногоИспользованияБУ";
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка Тогда
				
				Реквизиты = Реквизиты + ",ЛиквидационнаяСтоимостьБУ";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Если (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
		
		Реквизиты = Реквизиты + " , НалоговоеНазначение";
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			
			Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда
				Реквизиты = Реквизиты + ", СрокПолезногоИспользованияНУ";
			КонецЕсли;
			
		КонецЕсли;
	   
	
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "НематериальныйАктив";
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.ОбъектыСтроительства Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", ОбъектСтроительства";
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС)Тогда
			
			ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", НалоговоеНазначениеОбъектаСтроительства";
			
		КонецЕсли;
		
	КонецЕсли;	

	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки,СтруктураШапкиДокумента);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки,СтруктураШапкиДокумента);

	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки,СтруктураШапкиДокумента, , мСтрокаРеквизитыБухУчета);	

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирования движений регистров
//
Процедура ФормированиеДвижений(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ФормированиеДвиженийУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ФормированиеДвиженийРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ФормированиеДвижений()

// Процедура формирования движений упр. регистров
Процедура ФормированиеДвиженийУпр(СтруктураШапкиДокумента,Отказ,Заголовок)
	
	Если Не ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;	
	
	// Движения по регистру Состояние
	Движение = Движения.СостоянияНМА.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Состояние                   = Перечисления.ВидыСостоянийНМА.ПринятКУчету;
	
	СостояниеНМА            = Движения.СостоянияНМА;
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийНМАУпр(СтруктураШапкиДокумента.Дата, СостояниеНМА, 
																Отказ, Заголовок);
	
											
	Если Отказ Тогда
		
		// НМА уже было принято к учету ранее.
		// Повторное принятие к учету НМА недопустимо.
		Возврат;
		
	КонецЕсли; 
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.НематериальныеАктивы Тогда
		
		ВыборкаЗаписей = РегистрыНакопления.ПоступлениеНМА.Остатки(МоментВремени(),Новый Структура("НематериальныйАктив",НематериальныйАктив));
		ВыборкаСтоимостьУУ = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей[0].Сумма,0);
		Если СтоимостьУУ > ВыборкаСтоимостьУУ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Стоимость (УУ) для нематериального актива """ + НематериальныйАктив + """ превышает стоимость поступления НМА = " + ОбщегоНазначения.ФорматСумм(ВыборкаСтоимостьУУ,глЗначениеПеременной("ВалютаУправленческогоУчета")),Отказ,Заголовок);
			Возврат;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.ОбъектыСтроительства Тогда
		СтруктураСтоимости = УправлениеВнеоборотнымиАктивами.РассчитатьСтоимостьОбъектаСтроительства(ОтражатьВУправленческомУчете,Ложь,Ложь,
													СчетУчетаБУВнеоборотногоАктива, ОбъектСтроительства,Организация, Дата);

		ВыборкаСтоимостьУУ = СтруктураСтоимости.СтоимостьУУ;
		
		Если СтоимостьУУ > ВыборкаСтоимостьУУ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Стоимость (УУ) для нематериального актива """ + НематериальныйАктив + """ превышает стоимость объекта строительства = " + ОбщегоНазначения.ФорматСумм(ВыборкаСтоимостьУУ,глЗначениеПеременной("ВалютаУправленческогоУчета")),Отказ,Заголовок);
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	
	// списшем сумму с регистра объектов строительства
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.ОбъектыСтроительства Тогда

		СтроительствоОС = Движения.СтроительствоОбъектовОсновныхСредств;

		ТаблицаДвиженийСтроительствоОС = СтроительствоОС.Выгрузить();

		Движение = ТаблицаДвиженийСтроительствоОС.Добавить();
		Движение.ОбъектСтроительства = СтруктураШапкиДокумента.ОбъектСтроительства;
		Движение.Сумма               = СтруктураШапкиДокумента.СтоимостьУУ;

		СтроительствоОС.мПериод          = СтруктураШапкиДокумента.Дата;
		СтроительствоОС.мТаблицаДвижений = ТаблицаДвиженийСтроительствоОС;
		Движения.СтроительствоОбъектовОсновныхСредств.ВыполнитьРасход();

	КонецЕсли;
	
	// Движения по регистру СпособыОтраженияРасходов
	Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМА.Добавить();
	Движение.Период                  = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив     = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.СпособОтраженияРасходов = СтруктураШапкиДокумента.СпособОтраженияРасходов;

	// Движения по регистру ПервоначальныеСведения
	Движение = Движения.ПервоначальныеСведенияНМА.Добавить();
	Движение.Период                                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив                         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.НачислятьАмортизацию 		                 = СтруктураШапкиДокумента.НачислятьАмортизациюУУ;
	Движение.ПервоначальнаяСтоимость                     = СтруктураШапкиДокумента.СтоимостьУУ;
	Движение.ЛиквидационнаяСтоимость                     = СтруктураШапкиДокумента.ЛиквидационнаяСтоимостьУУ;
	Движение.СпособНачисленияАмортизации                 = СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ;
	Движение.СрокПолезногоИспользования                  = СтруктураШапкиДокумента.СрокПолезногоИспользованияУУ;
	Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ОбъемПродукцииРаботДляВычисленияАмортизации;

	
	// Движения по регистру СтоимостьНМА
	Движение = Движения.СтоимостьНМА.Добавить();
	Движение.Период                  = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив     = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Амортизация             = СтруктураШапкиДокумента.НакопленнаяАмортизацияУУ;
	Движение.Стоимость               = СтруктураШапкиДокумента.СтоимостьУУ;
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.НематериальныеАктивы Тогда
		// Движения по регистру ПоступлениеНМА
		ПоступлениеНМА = Движения.ПоступлениеНМА;

		ТаблицаДвиженийПоступлениеНМА = ПоступлениеНМА.Выгрузить();

		Движение = ТаблицаДвиженийПоступлениеНМА.Добавить();
		Движение.НематериальныйАктив = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Сумма               = СтруктураШапкиДокумента.СтоимостьУУ;

		ПоступлениеНМА.мПериод          = СтруктураШапкиДокумента.Дата;
		ПоступлениеНМА.мТаблицаДвижений = ТаблицаДвиженийПоступлениеНМА;
		Движения.ПоступлениеНМА.ВыполнитьРасход();
		
	КонецЕсли;	
	
	// Движения по регистру МестонахождениеНМА
	Движение = Движения.МестонахождениеНМА.Добавить();
	Движение.Период 				= СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив 	= СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Местонахождение 		= СтруктураШапкиДокумента.Подразделение;
	Движение.МОЛ 					= СтруктураШапкиДокумента.МОЛУУ;
	
	
	
КонецПроцедуры // ФормированиеДвиженийРегл()

// Процедура формирования движений регл. регистров
//
Процедура ФормированиеДвиженийРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;	
	
	ОбщаяСуммаКоррНалоговогоКредита = 0;
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// Сформируем движения по НДС до отражения в бухгалтерском учете, 
		// поскольку бухгалтерская стоимость зависит от права на налоговый кредит
		ФормированиеДвиженийПоПодсистемеНДС(СтруктураШапкиДокумента, ОбщаяСуммаКоррНалоговогоКредита, Отказ, Заголовок);
		
	КонецЕсли; 
	
	
	// Движения по регистру Состояние
	Движение = Движения.СостоянияНМАОрганизаций.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.Состояние                   = Перечисления.ВидыСостоянийНМА.ПринятКУчету;
	
	СостояниеНМА            = Движения.СостоянияНМАОрганизаций;
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийНМА(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата, СостояниеНМА, 
																Отказ, Заголовок);
	
	Если Отказ Тогда
		
		// НМА уже было принято к учету ранее.
		// Повторное принятие к учету НМА недопустимо.
		Возврат;
		
	КонецЕсли; 
	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// Проверим наличие остатка на счете инвестиций 
		Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.НематериальныеАктивы Тогда										
			
			СтруктураОтбора = Новый Структура("Счет, Субконто1, Организация");
			СтруктураОтбора.Счет 		= СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
			СтруктураОтбора.Субконто1 	= СтруктураШапкиДокумента.НематериальныйАктив;
			СтруктураОтбора.Организация	= СтруктураШапкиДокумента.Организация;
			
			ТаблицаОстатков	= РегистрыБухгалтерии.Хозрасчетный.Остатки(Дата, 
			                                                           ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы,
			                                                           СтруктураОтбора);
			
			ОстатокБУ 	= 0;
			ОстатокНУ 	= 0;
			
			Если ТаблицаОстатков.Количество() > 0 Тогда
			
				ОстатокБУ = ТаблицаОстатков[0].СуммаОстатокДт;
				ОстатокНУ = ТаблицаОстатков[0].СуммаНУОстатокДт;
			
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.СтоимостьБУ > ОстатокБУ Тогда
			
				ОбщегоНазначения.СообщитьОбОшибке("По бухгалтерскому учету остатка на счете инвестиций (" + ОстатокБУ 
				                    + ") не достаточно для проведения операции!", Отказ, Заголовок);
			
			КонецЕсли; 
								
			Если СтруктураШапкиДокумента.СтоимостьНУ > ОстатокНУ Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("По налоговому учету остатка на счете непринятых к учету НМА (" + ОстатокНУ 
				                    + ") не достаточно для проведения операции!", Отказ, Заголовок);
				
			КонецЕсли;
								
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.ОбъектыСтроительства Тогда			
			СтруктураСтоимости = УправлениеВнеоборотнымиАктивами.РассчитатьСтоимостьОбъектаСтроительства(Ложь,ОтражатьВБухгалтерскомУчете,Истина,
														СчетУчетаБУВнеоборотногоАктива, ОбъектСтроительства, Организация, Дата);

			ВыборкаСтоимостьБУ = СтруктураСтоимости.СтоимостьБУ;
			ВыборкаСтоимостьНУ = СтруктураСтоимости.СтоимостьНУ;
			
			Если СтоимостьБУ > ВыборкаСтоимостьБУ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Стоимость (БУ) для нематериального актива """ + НематериальныйАктив + """ превышает стоимость объекта строительства = " + ОбщегоНазначения.ФорматСумм(ВыборкаСтоимостьБУ,глЗначениеПеременной("ВалютаРегламентированногоУчета")),Отказ,Заголовок);
				Возврат;
			КонецЕсли;	
			
			Если СтоимостьНУ > ВыборкаСтоимостьНУ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Стоимость (НУ) для нематериального актива """ + НематериальныйАктив + """ превышает стоимость объекта строительства = " + ОбщегоНазначения.ФорматСумм(ВыборкаСтоимостьНУ,глЗначениеПеременной("ВалютаРегламентированногоУчета"), "0"),Отказ,Заголовок);
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;
		
		Проводки = Движения.Хозрасчетный;
		
		Проводка = Проводки.Добавить();
		Проводка.Активность = Истина;
		Проводка.Период     = СтруктураШапкиДокумента.Дата;

		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
		Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.ВводНачальныхОстатков Тогда
			Проводка.Содержание = "Ввод начальных остатков НМА";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.НематериальныеАктивы Тогда
			Проводка.Содержание = "Принят к учету НМА";
		Иначе
			Проводка.Содержание = "Списана стоим. объекта строительства";
		КонецЕсли;	
								  
		Проводка.НомерЖурнала = "НА";
		Проводка.Сумма        = СтруктураШапкиДокумента.СтоимостьБУ - ОбщаяСуммаКоррНалоговогоКредита;

		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Проводка.НалоговоеНазначениеДт  = СтруктураШапкиДокумента.НалоговоеНазначение;
			Проводка.СуммаНУДт 				= СтруктураШапкиДокумента.СтоимостьНУ - ОбщаяСуммаКоррНалоговогоКредита;
			
			Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.ОбъектыСтроительства Тогда
				Проводка.НалоговоеНазначениеКт  = СтруктураШапкиДокумента.НалоговоеНазначениеОбъектаСтроительства;
			Иначе	
				Проводка.НалоговоеНазначениеКт  = СтруктураШапкиДокумента.НалоговоеНазначение;
			КонецЕсли;	
			Проводка.СуммаНУКт 				= СтруктураШапкиДокумента.СтоимостьНУ - ОбщаяСуммаКоррНалоговогоКредита;
			
		КонецЕсли;
		
		Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", СтруктураШапкиДокумента.ВидНалоговойДеятельности);

		Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
		
		Если СчетУчетаБУВнеоборотногоАктива.ВидыСубконто.Количество() > 0 Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.ОбъектыСтроительства Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.ОбъектСтроительства);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.НематериальныйАктив);
			КонецЕсли;	
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.ОбъектыСтроительства Тогда
			
			// Корректировка налогового кредита
			СуммаПроводки 	= -ОбщаяСуммаКоррНалоговогоКредита;
			Если СуммаПроводки <> 0 Тогда
				
				Проводка = Проводки.Добавить();
				Проводка.Активность   = Истина;
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала = "НА";
				Проводка.Содержание   = "Корректировка налогового кредита";
				Проводка.Сумма        = СуммаПроводки;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеДт  = СтруктураШапкиДокумента.НалоговоеНазначениеОбъектаСтроительства;
					Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СуммаПроводки);
					
				КонецЕсли;
				
				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
				
			КонецЕсли;
		КонецЕсли;	
		
		Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.ВводНачальныхОстатков И (СтруктураШапкиДокумента.НакопленнаяАмортизацияБУ <> 0 ИЛИ СтруктураШапкиДокумента.НакопленнаяАмортизацияНУ <> 0) Тогда
			
			Проводка = Проводки.Добавить();
			Проводка.Активность = Истина;
			Проводка.Период     = СтруктураШапкиДокумента.Дата;

			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Накопленная амортизация НМА";                           
			Проводка.НомерЖурнала = "НА";
			Проводка.Сумма        = СтруктураШапкиДокумента.НакопленнаяАмортизацияБУ;

			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				Проводка.НалоговоеНазначениеДт  = СтруктураШапкиДокумента.НалоговоеНазначение;
				Проводка.СуммаНУДт 				= СтруктураШапкиДокумента.НакопленнаяАмортизацияНУ;
				
				Проводка.НалоговоеНазначениеКт  = СтруктураШапкиДокумента.НалоговоеНазначение;
				Проводка.СуммаНУКт 				= СтруктураШапкиДокумента.НакопленнаяАмортизацияНУ;
				
			КонецЕсли;
			
			Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
			
			Проводка.СчетКт = СтруктураШапкиДокумента.СчетНачисленияАмортизацииБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", СтруктураШапкиДокумента.ВидНалоговойДеятельности);

			
		КонецЕсли;
		
		// Движения по регистру СпособыОтраженияРасходов
		Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
		Движение.Период                  = СтруктураШапкиДокумента.Дата;
		Движение.НематериальныйАктив     = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация             = СтруктураШапкиДокумента.Организация;
		Движение.СпособОтраженияРасходов = СтруктураШапкиДокумента.СпособОтраженияРасходов;

		// Движения по регистру ПервоначальныеСведения
		Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
		Движение.Период                                      = СтруктураШапкиДокумента.Дата;
		Движение.НематериальныйАктив                         = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация                                 = СтруктураШапкиДокумента.Организация;
		Движение.НачислятьАмортизацию 		                 = СтруктураШапкиДокумента.НачислятьАмортизациюБУ;
		Движение.ПервоначальнаяСтоимость                     = СтруктураШапкиДокумента.СтоимостьБУ;
		Движение.ЛиквидационнаяСтоимость                     = СтруктураШапкиДокумента.ЛиквидационнаяСтоимостьБУ;
		Движение.СпособНачисленияАмортизации                 = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
		Движение.СрокПолезногоИспользования                  = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ОбъемПродукцииРаботДляВычисленияАмортизации;

		// Движения по регистру СчетаБухгалтерскогоУчета
		Движение = Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
		Движение.Период                      = СтруктураШапкиДокумента.Дата;
		Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.СчетУчета                   = СтруктураШапкиДокумента.СчетУчетаБУ;
		Движение.СчетНачисленияАмортизации   = СтруктураШапкиДокумента.СчетНачисленияАмортизацииБУ;
		
		// Движения по регистру СтоимостьОС
		Движение = Движения.СтоимостьНМАБухгалтерскийУчет.Добавить();
		Движение.Период                  = СтруктураШапкиДокумента.Дата;
		Движение.НематериальныйАктив     = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация             = СтруктураШапкиДокумента.Организация;
		Движение.Амортизация             = СтруктураШапкиДокумента.НакопленнаяАмортизацияБУ;
		Движение.Стоимость               = СтруктураШапкиДокумента.СтоимостьБУ - ОбщаяСуммаКоррНалоговогоКредита;
		Движение.АмортизацияНУ           = СтруктураШапкиДокумента.НакопленнаяАмортизацияНУ;
		Движение.СтоимостьНУ             = СтруктураШапкиДокумента.СтоимостьНУ - ОбщаяСуммаКоррНалоговогоКредита;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
			Движение.НематериальныйАктив        = СтруктураШапкиДокумента.НематериальныйАктив;
			Движение.Организация                = СтруктураШапкиДокумента.Организация;
			Движение.Период                     = СтруктураШапкиДокумента.Дата;
			Движение.НачислятьАмортизацию 	    = СтруктураШапкиДокумента.НачислятьАмортизациюНУ;
			Движение.ПервоначальнаяСтоимость    = СтруктураШапкиДокумента.СтоимостьНУ - ОбщаяСуммаКоррНалоговогоКредита;
			Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
			Движение.НалоговоеНазначение   		= СтруктураШапкиДокумента.НалоговоеНазначение;
			Движение.НалоговаяГруппаОС          = СтруктураШапкиДокумента.НалоговаяГруппаОС;
			
		ИначеЕсли  СтруктураШапкиДокумента.ЕстьНДС Тогда
			
			Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
			Движение.НематериальныйАктив        = СтруктураШапкиДокумента.НематериальныйАктив;
			Движение.Организация                = СтруктураШапкиДокумента.Организация;
			Движение.Период                     = СтруктураШапкиДокумента.Дата;
			Движение.НачислятьАмортизацию 	    = Ложь;
			Движение.ПервоначальнаяСтоимость    = 0;
			Движение.СрокПолезногоИспользования = 0;
			Движение.НалоговоеНазначение   		= СтруктураШапкиДокумента.НалоговоеНазначение;
			Движение.НалоговаяГруппаОС          = Справочники.НалоговыеГруппыОсновныхСредств.ПустаяСсылка();
			
		КонецЕсли;	
		
	КонецЕсли;

	// Движения по регистру МестонахождениеНМАБухгалтерскийУчет
	Движение = Движения.МестонахождениеНМАБухгалтерскийУчет.Добавить();
	Движение.Период 				= СтруктураШапкиДокумента.Дата;
	Движение.Организация 			= СтруктураШапкиДокумента.Организация;
	Движение.НематериальныйАктив 	= СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Местонахождение 		= СтруктураШапкиДокумента.ПодразделениеОрганизации;
	Движение.МОЛ 					= СтруктураШапкиДокумента.МОЛБУ;
	
КонецПроцедуры // ФормированиеДвиженийРегл()

// Процедура формирования движений по регистрам подсистемы учета НДС
//
// Параметры:
//		СтруктураШапкиДокумента
//		ТЗДанныеОС	- таблица с бухгалтерскими данными по основным средствам, в которую будет добавлена 
// 				информация о корректировке налогового кредита
Процедура ФормированиеДвиженийПоПодсистемеНДС(СтруктураШапкиДокумента, ОбщаяСуммаКоррНалоговогоКредита, Отказ, Заголовок)
	
	ДатаДока = Дата;

	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийПринятияКУчетуНМА.ОбъектыСтроительства Тогда
		
		// Движения по НДС будут сделаны при списании партий
		Возврат;
		
	КонецЕсли;
	
	// Объекты строительства
	
	// Спишем накопленный НДС из регистра. 
	// Суммы списываем в той пропорции, в какой стоимость принимаемых к учету объектов 
	// находится к стоимости всего остатка по налоговому учету
	
	ТекОрганизация         = СтруктураШапкиДокумента.Организация;
	ТекОбъектСтроительства = СтруктураШапкиДокумента.ОбъектСтроительства;
	ТекСтоимостьНУ         = СтруктураШапкиДокумента.СтоимостьНУ;
	ТекСтоимостьБУ         = СтруктураШапкиДокумента.СтоимостьБУ;
	
	Если ТекСтоимостьНУ = 0 И ТекСтоимостьБУ = 0 Тогда
		
		//Проверять нечего.
		Возврат
		
	КонецЕсли;
	
	// Получим остатки из регистра НДС
	ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Остатки(Новый Граница (Дата, ВидГраницы.Включая),
		             Новый Структура("Организация,ОбъектСтроительства, СчетУчета", ТекОрганизация, ТекОбъектСтроительства, СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива));
					 
	ОстатокСтоимостиНУ = ВыборкаЗаписей.Итог("СтоимостьНУ");
	ОстатокСтоимостиБУ = ВыборкаЗаписей.Итог("Стоимость");
	
	//Определим часть списания (НУ)
	Если ОстатокСтоимостиНУ > 0 Тогда
		Коэф = ТекСтоимостьНУ / ОстатокСтоимостиНУ;
	Иначе
		Коэф = 0;
	КонецЕсли;	
	
	Если ОстатокСтоимостиБУ > 0 Тогда
		КоэфБУ = ТекСтоимостьБУ / ОстатокСтоимостиБУ;
	Иначе
		КоэфБУ = 0;
	КонецЕсли;	
	
	Если Коэф = 0 И КоэфБУ = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого ЗаписьПоОстаткуНДС Из ВыборкаЗаписей Цикл
	
		Движение = Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.ДобавитьРасход();
		
		Движение.Период							= ДатаДока;
		Движение.ОбъектСтроительства			= ТекОбъектСтроительства;
		Движение.Организация					= ТекОрганизация;
		Движение.НалоговоеНазначение     		= ЗаписьПоОстаткуНДС.НалоговоеНазначение;
		
		Движение.СчетУчета						= СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
		Движение.Стоимость						= КоэфБУ * ЗаписьПоОстаткуНДС.Стоимость;
		
		// Ресурсы списываем с учетом коэффициента
		Движение.СтоимостьНУ					= Коэф * ЗаписьПоОстаткуНДС.СтоимостьНУ;
		Движение.НДСВходящий					= Коэф * ЗаписьПоОстаткуНДС.НДСВходящий;
		Движение.НДСКредит						= Коэф * ЗаписьПоОстаткуНДС.НДСКредит;
		
		// Устанавливаем реквизиты фактической принадлежности объекта строительства
		Движение.НалоговоеНазначениеПоФакту    		= СтруктураШапкиДокумента.НалоговоеНазначение;
		
	КонецЦикла; 
	
	// Обработаем корретировки налогового кредита, к которым привело такое фактическое использование объектов строительства
	ТаблицаСписанияНДС = Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Выгрузить();
	НалоговыйУчет.ПолучитьТаблицуКорректировокНалоговогоКредита(ТаблицаСписанияНДС);
	
	Для каждого СтрокаСписанияНДС Из ТаблицаСписанияНДС Цикл
	
		Если СтрокаСписанияНДС.СуммаКорректировкиНалоговогоКредита = 0 Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		// Зафиксируем в регистре необходимость корректировки
		Движение = Движения.КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет.ДобавитьПриход();
		
		Движение.Период							 = ДатаДока;
		Движение.Организация					 = СтрокаСписанияНДС.Организация;
		Движение.ОбъектСтроительства			 = СтрокаСписанияНДС.ОбъектСтроительства;
		Движение.НалоговоеНазначение		 	 = СтрокаСписанияНДС.НалоговоеНазначение;
		Движение.НалоговоеНазначениеПоФакту 	 = СтрокаСписанияНДС.НалоговоеНазначениеПоФакту;
		
		Движение.НДСКредит						 = СтрокаСписанияНДС.НДСКредит;
		Движение.НДСКредитПоФакту				 = СтрокаСписанияНДС.НДСКредит + СтрокаСписанияНДС.СуммаКорректировкиНалоговогоКредита;
		
		Движение.КодОперации = Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПредполагаемаяКорректрировка;
		
	КонецЦикла; 
	
	// Изменения бухгалтерской стоимости основных средств из-за потери/получения права на налоговый кредит
	ОбщаяСуммаКоррНалоговогоКредита = ТаблицаСписанияНДС.Итог("СуммаКорректировкиНалоговогоКредита");
	
КонецПроцедуры // ФормированиеДвиженийПоПодсистемеНДС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		
		Организация              		 = Основание.Организация;
		ОтражатьВУправленческомУчете     = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете 	 = Основание.ОтражатьВБухгалтерскомУчете;
		
		НематериальныеАктивы           = Основание.НематериальныеАктивы;
		НематериальныеАктивыКоличество = НематериальныеАктивы.Количество();
		
		Если НематериальныеАктивыКоличество > 0 Тогда
			
			Если НематериальныеАктивыКоличество > 1 Тогда
				
				ТаблицаНематериальныеАктивы = НематериальныеАктивы.Выгрузить();
				СтрокаТЧ = ТаблицаНематериальныеАктивы.ВыбратьСтроку("Выберите строку документа.");
				
			Иначе
				
				СтрокаТЧ = НематериальныеАктивы[0];
				
			КонецЕсли;
			
			Если СтрокаТЧ <> Неопределено Тогда
				
				НематериальныйАктив 			= СтрокаТЧ.НематериальныйАктив;
				СчетУчетаБУВнеоборотногоАктива 	= СтрокаТЧ.СчетУчетаБУ;
				НалоговоеНазначение 			= СтрокаТЧ.НалоговоеНазначение;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ВидНалоговойДеятельности", СтруктураШапкиДокумента.НалоговоеНазначение.ВидНалоговойДеятельности);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;

	// Проверим правильность заполнения шапки документа
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);

	// Формирование движений регистров, бухгалтерских и налоговых проводок.
	Если Не Отказ Тогда
		ФормированиеДвижений(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры
                                                                       
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
         	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Очистка неиспользуемых реквизитов
	
	СпособыНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА;
	
	Если СпособНачисленияАмортизацииБУ = СпособыНачисленияАмортизации.Производственный Тогда
		
		ЛиквидационнаяСтоимостьБУ    = 0;
		СрокПолезногоИспользованияБУ = 0;	
		СрокПолезногоИспользованияНУ = 0;	
		
	Иначе
				
		ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
		
	КонецЕсли;
	
	Если НалоговоеНазначение.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда
		
		 НачислятьАмортизациюНУ   = Ложь;
		 НакопленнаяАмортизацияНУ = 0;
		
	КонецЕсли;	
	
	//Если НЕ НачислятьАмортизациюНУ Тогда
	//	
	//	СрокПолезногоИспользованияНУ = 0;
	//	
	//КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуНМА.ВводНачальныхОстатков Тогда
		
		СчетУчетаБУВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.Вспомогательный
		
	Иначе
		
		НакопленнаяАмортизацияБУ = 0;
		НакопленнаяАмортизацияНУ = 0;
		
	КонецЕсли;
	
КонецПроцедуры

