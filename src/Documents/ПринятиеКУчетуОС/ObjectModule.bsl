Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

// Переменные используемые обработкой "Проведение по партиям"
Перем СтруктураВидовУчета Экспорт; 
Перем КоличествоСтрокВДокументе Экспорт;
Перем Останавливаться Экспорт;
Перем ПроведениеОстановлено Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "Стоимость,
								|МОЛУУ,
								|СпособНачисленияАмортизацииУУ,
								|Подразделение,
								|СоставОсновногоСредства,
								|ПараметрВыработкиУУ,
								|ПредполагаемыйОбъемПродукцииУУ,
								|СрокПолезногоИспользованияУУ,
								|ЛиквидационнаяСтоимостьУУ,
								|ГодоваяНормаАмортизацииУУ,
								|ГрафикАмортизацииПоГодуУУ,
								|ИндивидуальныйГрафикАмортизации,
								|НачислятьАмортизациюВТекущемМесяце,
								|НачислятьАмортизациюУУ
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "СтоимостьБУ,
								|СчетУчетаБУВнеоборотногоАктива,
								|ОС.ИнвентарныйНомер,
								|МОЛБУ,
								|ПодразделениеОрганизации,
								|СпособНачисленияАмортизацииБУ,
								|ПараметрВыработкиБУ,
								|ПредполагаемыйОбъемПродукцииБУ,
								|СрокПолезногоИспользованияБУ,
								|ЛиквидационнаяСтоимостьБУ,
								|ГодоваяНормаАмортизацииБУ,
								|ГрафикАмортизацииПоГодуБУ,
								|СчетУчетаБУ,
								|СчетНачисленияАмортизацииБУ,
								|НачислятьАмортизациюБУ
								|";

	мСтрокаРеквизитыНалУчета =  "СтоимостьНУ,
								|НалоговоеНазначение,
								|НалоговаяГруппаОС,
								|НачислятьАмортизациюНУ
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

#Если Клиент Тогда

// Функция формирует табличный документ с типовой печатной формой ОЗ-1
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОЗ1(ПечатьПоДаннымУпрУчета = Истина)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",         Ссылка);
	Запрос.УстановитьПараметр("ТекДата",        МоментВремени());
	
	Если НЕ ПечатьПоДаннымУпрУчета Тогда
		
		Запрос.УстановитьПараметр("ТекОрганизация", Организация);
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Дата  КАК ДатаАкта,
	|	ПринятиеКУчетуОС.Номер КАК НомерАкта," + ?(ПечатьПоДаннымУпрУчета, 
	// Упраленческий учет
	"
	|	ПринятиеКУчетуОС.МОЛУУ.Код 	   КАК КодМОЛа,
	|	ПринятиеКУчетуОС.Подразделение КАК ПринялоПодразделение,
	|	ВЫБОР 
	|		КОГДА ПринятиеКУчетуОС.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию
	|			ТОГДА ПринятиеКУчетуОС.Дата
	|		ИНАЧЕ
	|			""""
	|	КОНЕЦ                          КАК ДатаВвода",
	// Бухгалтерский учет
	"
	|	ПринятиеКУчетуОС.МОЛБУ.Код 				        КАК КодМОЛа,
	|	ПринятиеКУчетуОС.Организация.НаименованиеПолное КАК Организация,
	|	ПринятиеКУчетуОС.ПодразделениеОрганизации       КАК ПринялоПодразделение,
	|	ВЫБОР 
	|		КОГДА ПринятиеКУчетуОС.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл
	|			ТОГДА ПринятиеКУчетуОС.Дата
	|		ИНАЧЕ
	|			""""
	|	КОНЕЦ                                           КАК ДатаВвода,
	|	ПринятиеКУчетуОС.СчетУчетаБУ					КАК СчетДт,
	|	ПринятиеКУчетуОС.СчетУчетаБУВнеоборотногоАктива КАК СчетКт,
	|	КодыОрганизации.КодПоЕДРПОУ                     КАК ЕДРПОУ") + "
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС" + ?(НЕ ПечатьПоДаннымУпрУчета, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ТекДата,
	|		                                 Организация = &ТекОрганизация) КАК КодыОрганизации
	|		ПО ПринятиеКУчетуОС.Организация = КодыОрганизации.Организация", "") + "
	|ГДЕ 
	|	ПринятиеКУчетуОС.Ссылка = &Ссылка
	|";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();

	ИмяРегистраСведений = ?(ПечатьПоДаннымУпрУчета, "ПервоначальныеСведенияОС", 
	                                                "ПервоначальныеСведенияОСБухгалтерскийУчет");
													
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
		
	Если ИспользоватьРасширеннуюАналитику Тогда
		ТекДата = Новый МоментВремени(КонецМесяца(Дата), Ссылка);
	Иначе		
		ТекДата = МоментВремени();	
	КонецЕсли;	
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС", 	ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ТекДата", 	ТекДата);
	Запрос.Текст = 
	"ВЫБРАТЬ" + ?(ПечатьПоДаннымУпрУчета, "
	|	ПервоначальныеСведения.ОсновноеСредство.Код                КАК ИнвентарныйНомер,", "
	|	ПервоначальныеСведения.ИнвентарныйНомер                    КАК ИнвентарныйНомер,") + "
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость             КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведения.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	|	ПервоначальныеСведения.ОсновноеСредство.ЗаводскойНомер     КАК ЗаводскойНомер,
	|	ПервоначальныеСведения.ОсновноеСредство.ДатаВыпуска        КАК ГодВыпуска,
	|	ПервоначальныеСведения.ОсновноеСредство.НомерПаспорта      КАК НомерПаспорта
	|ИЗ
	|	РегистрСведений." + ИмяРегистраСведений + ".СрезПоследних(&ТекДата) КАК ПервоначальныеСведения
	|
	|ГДЕ
	|	ПервоначальныеСведения.ОсновноеСредство В (&СписокОС)";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОЗ1";
	Макет         = ПолучитьОбщийМакет("ОЗ1");
	
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	ВыборкаПоСдалПринял = ПолучитьСведенияОСдалПринял(ЭтотОбъект);

	Пока ВыборкаПоОС.Следующий() Цикл

		ОбластьМакета = Макет.ПолучитьОбласть("ОЗ1");
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		ОбластьМакета.Параметры.ВидОперации = ?(НЕ ЗначениеЗаполнено(ВыборкаПоШапке.ДатаВвода),
		                                        "Прийняття до обліку", "Введення в експлуатацію");
		
		Если ПечатьПоДаннымУпрУчета Тогда
			
			 ОбластьМакета.Параметры.Организация = "Управліньский облік";
			 ОбластьМакета.Параметры.Валюта      = мВалютаУправленческогоУчета;
			 
		 Иначе
			 
			 ОбластьМакета.Параметры.Валюта = мВалютаРегламентированногоУчета;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоКомиссии);
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоСдалПринял);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	ТабДокумент.ОбластьПечати = ТабДокумент.Область(2, 2, ТабДокумент.ВысотаТаблицы, ТабДокумент.ШиринаТаблицы);
	Возврат ТабДокумент;

КонецФункции // ПечатьОЗ1()

Функция ПолучитьСведенияОСдалПринял(ДокументОбъект) Экспорт
							  
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сдал", 	ДокументОбъект.Сдал);
	Запрос.УстановитьПараметр("Принял", ДокументОбъект.Принял);
	Запрос.УстановитьПараметр("НаДату", ДокументОбъект.Дата);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РаботникиСрезПоследних.Сотрудник КАК СдалФИО,
	               |	РаботникиСрезПоследних.Должность КАК СдалДолжность,
	               |	РаботникиСрезПоследних1.Сотрудник КАК ПолучилФИО,
	               |	РаботникиСрезПоследних1.Должность КАК ПолучилДолжность
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НаДату, Сотрудник.ФизЛицо = &Сдал) КАК РаботникиСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НаДату, Сотрудник.ФизЛицо = &Принял) КАК РаботникиСрезПоследних1
	               |		ПО РаботникиСрезПоследних.Организация = РаботникиСрезПоследних1.Организация";
				   
	СоставСдалПринял = Запрос.Выполнить().Выбрать();
	СоставСдалПринял.Следующий();
	
	Возврат СоставСдалПринял

КонецФункции // ПолучитьСведенияОКомиссии()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи и проведения!");
		Возврат;
	ИначеЕсли Не Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОЗ1упр" тогда
		
		ТабДокумент = ПечатьОЗ1();
		
	ИначеЕсли ИмяМакета = "ОЗ1бух" тогда
		
		ТабДокумент = ПечатьОЗ1(Ложь);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;	

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Принятие к учету основных средств"));

КонецПроцедуры // Печать


// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	Если  ОтражатьВУправленческомУчете тогда 
		СтруктураМакетов.Вставить("ОЗ1упр", "Форма ОЗ-1 (упр. учет)");
	КонецЕсли;
	Если  ОтражатьВБухгалтерскомУчете тогда 
		СтруктураМакетов.Вставить("ОЗ1бух", "Форма ОЗ-1 (бух. учет)");
	КонецЕсли;
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Устанавливает СчетНачисленияАмортизацииБУ 
// по значению СчетУчетаБУ 
// или по значению СчетУчетаБУВнеоборотногоАктива
//
Процедура УстановитьСчетАмортизации() Экспорт
	
	ПланХозрасчетный = ПланыСчетов.Хозрасчетный;
	
	Счет10   = ПланХозрасчетный.ОсновныеСредства;
	Счет11   = ПланХозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа;
	Счет13   = ПланХозрасчетный.ИзносАмортизацияНеоборотныхАктивов;
	Счет131  = ПланХозрасчетный.ИзносОсновныхСредств;
	Счет132  = ПланХозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивов;
	Счет1321 = ПланХозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовИндивидуально;
	Счет1322 = ПланХозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовКоличественно;
	Счет151  = ПланХозрасчетный.КапитальноеСтроительство;
	Счет152  = ПланХозрасчетный.ПриобретениеИзготовлениеОсновныхСредств;
	Счет153  = ПланХозрасчетный.ПриобретениеИзготовлениеДругихНеоборотныхМатериальныхАктивов;
	
	Если ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		
		Если СчетУчетаБУ.ПринадлежитЭлементу(Счет10) Тогда
			
			Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ)
				ИЛИ (НЕ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет13))
				ИЛИ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет132) Тогда
				
				СчетНачисленияАмортизацииБУ = Счет131;
				
			КонецЕсли;
			
		ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет11) Тогда
			
			Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ)
				ИЛИ (НЕ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет132))
				ИЛИ СчетНачисленияАмортизацииБУ = (Счет1322) Тогда
				
				СчетНачисленияАмортизацииБУ = Счет1321;
				
			КонецЕсли;                                                   
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СчетУчетаБУВнеоборотногоАктива) Тогда
		
		Если СчетУчетаБУВнеоборотногоАктива.ПринадлежитЭлементу(Счет152)
			ИЛИ СчетУчетаБУВнеоборотногоАктива = Счет151 Тогда
			
			Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ)
				ИЛИ (НЕ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет13))
				ИЛИ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет132) Тогда
				
				СчетНачисленияАмортизацииБУ = Счет131;
				
			КонецЕсли;
			
		ИначеЕсли СчетУчетаБУВнеоборотногоАктива.ПринадлежитЭлементу(Счет153) Тогда
			
			Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ)
				ИЛИ (НЕ СчетНачисленияАмортизацииБУ.ПринадлежитЭлементу(Счет132))
				ИЛИ СчетНачисленияАмортизацииБУ = (Счет1322) Тогда
				
				СчетНачисленияАмортизацииБУ = Счет1321;
				
			КонецЕсли;                                                   
			
		КонецЕсли;
		
	КонецЕсли;
		

КонецПроцедуры // УстановитьСчетАмортизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ = Ложь) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомер");

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОсновныеСредства", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	Отказ = Отказ Или ТаблицаПоОС.Количество()=0;

КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда
		
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты,СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "МОЛУУ, Подразделение";
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства
	 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее Тогда
		Реквизиты = Реквизиты + ", Стоимость";
	КонецЕсли;
	
	//Проверка заполнения параметров амортизации
	Если НачислятьАмортизациюУУ Тогда
		
		Реквизиты = Реквизиты + ", СпособНачисленияАмортизацииУУ";
		
		Если (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный) Тогда
			
			Реквизиты = Реквизиты + ", ПараметрВыработкиУУ, ПредполагаемыйОбъемПродукцииУУ";
			
		КонецЕсли;
		
		Если  (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный)
			или (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный)
			или (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка)
			или (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка) Тогда
			
			Реквизиты = Реквизиты + ", СрокПолезногоИспользованияУУ";
			
			Если (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка) Тогда
				
				Реквизиты = Реквизиты + ", ЛиквидационнаяСтоимостьУУ";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Реквизиты= Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СобытиеПринятиеКУчету";
	
	Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
		
		Реквизиты= Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СобытиеВводВЭксплуатацию";
		
	КонецЕсли;

КонецПроцедуры

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты,СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Организация";

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		Реквизиты = Реквизиты + ", ПодразделениеОрганизации, МОЛБУ, СчетУчетаБУВнеоборотногоАктива, СчетУчетаБУ, СчетНачисленияАмортизацииБУ";
		
		//Проверка заполнения параметров амортизации              
		Если НачислятьАмортизациюБУ Тогда
		
			Реквизиты = Реквизиты + ", СпособНачисленияАмортизацииБУ";
			
			Если (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный) Тогда
				
				Реквизиты = Реквизиты + ", ПараметрВыработкиБУ, ПредполагаемыйОбъемПродукцииБУ";
				
			КонецЕсли;
			
			Если  (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный)
				или (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный)
				или (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка)
				или (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка) Тогда
				
				Реквизиты = Реквизиты + ", СрокПолезногоИспользованияБУ";
				
				Если (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка) Тогда
					
					Реквизиты = Реквизиты + ", ЛиквидационнаяСтоимостьБУ";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Реквизиты = Реквизиты + ", НалоговаяГруппаОС";
			
		КонецЕсли;
		
		Реквизиты = Реквизиты + ", НалоговоеНазначение, НалоговоеНазначениеОборудования";
		
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда

		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			Реквизиты = Реквизиты + ", СтоимостьБУ";
			
			
		КонецЕсли;

	КонецЕсли;
	
	Реквизиты= Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СобытиеПринятиеКУчетуРегл";
	
	Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл Тогда
		
		Реквизиты= Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СобытиеВводВЭксплуатациюРегл";
			
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
			
			ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
				И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
				
			Если ИспользоватьРасширеннуюАналитику Тогда
				ПериодГраница = Новый Граница (КонецМесяца(Дата), ВидГраницы.Включая);
			Иначе	
				ПериодГраница = Новый Граница (Дата, ВидГраницы.Включая);
			КонецЕсли;
			
			ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.Остатки(ПериодГраница,Новый Структура("ОбъектСтроительства",СтруктураШапкиДокумента.ОбъектСтроительства));
			
			ОстатокСтоимости = 0;
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ОстатокСтоимости = ВыборкаЗаписей[0].Сумма;
			КонецЕсли;
			Требуется = СтруктураШапкиДокумента.Стоимость;
			Если Требуется > ОстатокСтоимости Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("По управленческому учету накопленная на объекте строительства сумма меньше указанной в документе"+ Символы.ПС + Символы.Таб +
				"Не хватает " + ?(ОстатокСтоимости > 0 , Требуется - ОстатокСтоимости, Требуется ) +
				"; Накоплено на объекте строительства " + ОстатокСтоимости +
				"; Указано в документе " + Требуется , Отказ,Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеПринятиеКУчету.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеПринятиеКУчету.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ПринятиеКУчету,
								  ПредставлениеРеквизита,Отказ);
								  
    ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеВводВЭксплуатацию.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеВводВЭксплуатацию.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ВводВЭксплуатацию,
								  ПредставлениеРеквизита,Отказ);
	
КонецПроцедуры

// Проверяет остаток на объекте строительства по бух. или налог. учету
// (для оперативного проведения).
//
Процедура ПроверитьОстаток(СтруктураШапкиДокумента, СчетУчета, Стоимость, СтоимостьНУ, Отказ, Заголовок)


	СтруктураСтоимости = УправлениеВнеоборотнымиАктивами.РассчитатьСтоимостьОбъектаСтроительства(Ложь,ОтражатьВБухгалтерскомУчете,ОтражатьВБухгалтерскомУчете,
												СчетУчетаБУВнеоборотногоАктива, ОбъектСтроительства, Организация, Дата);

	Остаток 	= СтруктураСтоимости.СтоимостьБУ;
	ОстатокНУ 	= СтруктураСтоимости.СтоимостьНУ;

	Если Остаток < Стоимость Тогда
			
		ОбщегоНазначения.СообщитьОбОшибке("По бухгалтерскому учету накопленная на объекте строительства сумма меньше указанной в документе"+ Символы.ПС + Символы.Таб +
		"Не хватает " + ?(Остаток > 0 , Стоимость - Остаток, Стоимость ) +
		"; Накоплено на объекте строительства " + Остаток +
		"; Указано в документе " + Стоимость, Отказ,Заголовок);
			
	КонецЕсли; 

	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И ОстатокНУ < СтоимостьНУ Тогда
			
		ОбщегоНазначения.СообщитьОбОшибке("По налоговому учету накопленная на объекте строительства сумма меньше указанной в документе"+ Символы.ПС + Символы.Таб +
		"Не хватает " + ?(ОстатокНУ > 0 , СтоимостьНУ - ОстатокНУ, СтоимостьНУ ) +
		"; Накоплено на объекте строительства " + ОстатокНУ +
		"; Указано в документе " + СтоимостьНУ, Отказ,Заголовок);
			
	КонецЕсли; 
	
КонецПроцедуры //ПроверитьОстаток

// Проверяет правильность заполнения регл. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиРегл(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеПринятиеКУчетуРегл.Представление();
	
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеПринятиеКУчетуРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ПринятиеКУчету,
								  ПредставлениеРеквизита,Отказ);
								  
    ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеВводВЭксплуатациюРегл.Представление();
								  
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеВводВЭксплуатациюРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ВводВЭксплуатацию,
								  ПредставлениеРеквизита,Отказ);

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		
		// Проверка остатков на счетах для объектов строительства
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ПроверитьОстаток(СтруктураШапкиДокумента, СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива, СтруктураШапкиДокумента.СтоимостьБУ, СтруктураШапкиДокумента.СтоимостьНУ, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ЕстьНДС И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		УправлениеВнеоборотнымиАктивами.ПроверитьСоответствиеНалоговогоНазначенияОбъектов(Номенклатура, Неопределено, НалоговоеНазначениеОборудования, НалоговоеНазначение, Отказ, Заголовок);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ЕстьНДС И СтруктураШапкиДокумента.НачислятьАмортизациюБУ И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		УправлениеВнеоборотнымиАктивами.ПроверитьСоответствиеНалоговогоНазначенияАмортизацииОбъекта(Номенклатура, СпособыОтраженияРасходовПоАмортизации, НалоговоеНазначение, Отказ, Заголовок);
	КонецЕсли;
	
								  
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "";

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ОбъектСтроительства";
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "Номенклатура, Склад";
	КонецЕсли;

	Если (СтруктураШапкиДокумента.НачислятьАмортизациюУУ и СтруктураШапкиДокумента.ОтражатьВУправленческомУчете)
	или (СтруктураШапкиДокумента.НачислятьАмортизациюБУ и СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", СпособыОтраженияРасходовПоАмортизации";
	КонецЕсли;
	
	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки,СтруктураШапкиДокумента);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки,СтруктураШапкиДокумента);

	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета);

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок, , "");
	КонецЕсли;

	ПроверитьЗаполнениеШапкиУпр(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры

// Проверка реквизитов в ТЧ по упр. учету
// 
Процедура ПроверкаРеквизитовТЧУпр(РежимПроведения,ТаблицаПоОС,СтруктураШапкиДокумента,Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
			// Проверка остатков при оперативном проведении.
			ТоварыНаСкладах = 0;
			ТоварыВРезервеНаСкладах = 0;
			ТоварыКПередачеСоСкладов = 0;
			
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Склад", СтруктураШапкиДокумента.Склад);
			СтруктураПолей.Вставить("Номенклатура", СтруктураШапкиДокумента.Номенклатура);
			СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", СтруктураШапкиДокумента.ХарактеристикаНоменклатуры);
			СтруктураПолей.Вставить("СерияНоменклатуры", СтруктураШапкиДокумента.СерияНоменклатуры);
			СтруктураПолей.Вставить("Качество", Справочники.Качество.Новый);
			
			ВыборкаЗаписей = РегистрыНакопления.ТоварыНаСкладах.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыНаСкладах = ВыборкаЗаписей.Итог("Количество");
			КонецЕсли;
			
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Склад", СтруктураШапкиДокумента.Склад);
			СтруктураПолей.Вставить("Номенклатура", СтруктураШапкиДокумента.Номенклатура);
			СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", СтруктураШапкиДокумента.ХарактеристикаНоменклатуры);
			ВыборкаЗаписей = РегистрыНакопления.ТоварыВРезервеНаСкладах.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыВРезервеНаСкладах = ВыборкаЗаписей[0].Количество;
			КонецЕсли;
			
			ВыборкаЗаписей = РегистрыНакопления.ТоварыКПередачеСоСкладов.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыКПередачеСоСкладов = ВыборкаЗаписей[0].Количество;
			КонецЕсли;
			
			Если ТоварыНаСкладах - (ТоварыВРезервеНаСкладах + ТоварыКПередачеСоСкладов) < ТаблицаПоОС.Количество() Тогда
				
				СтрокаСообщения = ?(ТоварыВРезервеНаСкладах > 0, "Свободного остатка ", "Остатка ") + 
				УправлениеЗапасами.ПредставлениеНоменклатуры(СтруктураШапкиДокумента.Номенклатура.Наименование, 
				СтруктураШапкиДокумента.ХарактеристикаНоменклатуры.Наименование,
				СтруктураШапкиДокумента.СерияНоменклатуры.Наименование) +									  
				" на складе """ + СокрЛП(СтруктураШапкиДокумента.Склад) +
				""" недостаточно.";
				
				УправлениеЗапасами.ОшибкаНетОстатка(СтрокаСообщения, ТоварыНаСкладах - (ТоварыВРезервеНаСкладах + ТоварыКПередачеСоСкладов), ТаблицаПоОС.Количество(),
				СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование, Отказ, Заголовок);
				Сообщить("Зарезервировано " + (ТоварыВРезервеНаСкладах + ТоварыКПередачеСоСкладов) + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НачислятьАмортизациюУУ Тогда
		Для каждого СтрокаОС из ТаблицаПоОС Цикл
			Если СтрокаОС.ОсновноеСредство.ПодлежитАмортизации = Ложь Тогда
				Сообщить("Для основного средства " + СтрокаОС.ОсновноеСредство.Наименование + " в справочнике не установлен признак того, что оно подлежит амортизации.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверка реквизитов в ТЧ по регл. учету
// 
Процедура ПроверкаРеквизитовТЧРегл(РежимПроведения,ТаблицаПоОС,СтруктураШапкиДокумента,Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
			ТоварыОрганизаций =0;
			// Проверка остатков при оперативном проведении.
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Организация", СтруктураШапкиДокумента.Организация);
			СтруктураПолей.Вставить("Номенклатура", СтруктураШапкиДокумента.Номенклатура);
			СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", СтруктураШапкиДокумента.ХарактеристикаНоменклатуры);
			СтруктураПолей.Вставить("СерияНоменклатуры", СтруктураШапкиДокумента.СерияНоменклатуры);
			СтруктураПолей.Вставить("Качество", Справочники.Качество.Новый);
			
			ВыборкаЗаписей = РегистрыНакопления.ТоварыОрганизаций.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыОрганизаций = ВыборкаЗаписей.Итог("Количество");
			КонецЕсли;
			Если ТоварыОрганизаций < ТаблицаПоОС.Количество() Тогда
				
				СтрокаСообщения = ?(ТоварыОрганизаций > 0, "Остатка по организации ", "Остатка ") + 
				УправлениеЗапасами.ПредставлениеНоменклатуры(СтруктураШапкиДокумента.Номенклатура.Наименование, 
				СтруктураШапкиДокумента.ХарактеристикаНоменклатуры.Наименование,
				СтруктураШапкиДокумента.СерияНоменклатуры.Наименование) +									  
				" на складе """ + СокрЛП(СтруктураШапкиДокумента.Склад) +
				""" недостаточно.";
				
				Если НЕ УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации() Тогда
					УправлениеЗапасами.ОшибкаНетОстатка(СтрокаСообщения, ТоварыОрганизаций, ТаблицаПоОС.Количество(),
					СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование, Отказ, Заголовок);
				Иначе
					СтрокаСообщения = СтрокаСообщения + Символы.ПС + Символы.Таб
					+ "Не хватает " + (ТаблицаПоОС.Количество() - ТоварыОрганизаций) + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование
					+ "; Остаток " + ТоварыОрганизаций + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование
					+ "; Требуется " + ТаблицаПоОС.Количество() + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование;
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Дополняет список обязательных параметров табл. части
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСРегл(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ИнвентарныйНомер";

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения,ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	ДополнитьОбязательныеРеквизитыТабОСРегл(РеквизитыТабОС);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "ОС");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОсновныеСредства", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	// Логические проверки
	ПроверкаРеквизитовТЧУпр(РежимПроведения,ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);
	ПроверкаРеквизитовТЧРегл(РежимПроведения,ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Для Каждого СтрокаТЧ Из ТаблицаОС Цикл
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьПринятияКУчетуОС(СтрокаТЧ.ОсновноеСредство,СтруктураШапкиДокумента.Дата,Отказ);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьПринятияКУчетуОС(СтрокаТЧ.ОсновноеСредство,СтруктураШапкиДокумента.Дата,Отказ,СтруктураШапкиДокумента.Организация) 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитов()

// Процедура формирования движений регистров
Процедура ФормированиеДвижений(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС);
		
		Если ТипЗнч(СтруктураВидовУчета) = Тип("Структура") тогда
			Упр = СтруктураВидовУчета.ОтражатьВУправленческомУчете;
			Бух = СтруктураВидовУчета.ОтражатьВБухгалтерскомУчете;
			СписаниеВыполняетсяОбработкой = Истина;
		Иначе
			Упр = Истина;
			Бух = Истина;
			СписаниеВыполняетсяОбработкой = Ложь;
			Останавливаться = Ложь;
			ПроведениеОстановлено = Ложь;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование тогда
			УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
				ЭтотОбъект, 
				Дата, 
				СтруктураШапкиДокумента.Организация,
				ОтражатьВУправленческомУчете,
				ОтражатьВБухгалтерскомУчете,
				СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);			
		КонецЕсли;
		
		КоличествоСтрокВДокументе = 0;
		
		Если ТипЗнч(СтруктураВидовУчета) = Тип("Структура") Тогда
			// Структура видов учета определяется в обработке "Проведение по партиям"
			ФормироватьПроводки = СтруктураВидовУчета.ФормироватьПроводки;
		Иначе
			ФормироватьПроводки = Неопределено;
		КонецЕсли;	
		
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить(),
								КоличествоСтрокВДокументе, Упр,
								Бух, 
								Останавливаться, ПроведениеОстановлено,
								, СписаниеВыполняетсяОбработкой,,
								ФормироватьПроводки);
								
		//Коновалова 13022013 +
		Если (СтруктураШапкиДокумента.ОтражатьВУправленческомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладах")) ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладахБухгалтерскийУчет")) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		//Коновалова 13022013 -
								
		Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
	  	  И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата Тогда
			СтруктраИсточника = Новый Структура();
			СтруктраИсточника.Вставить("мСтруктураШапкиДокумента",СтруктураШапкиДокумента);
			СтруктраИсточника.Вставить("мСтруктураТабличныхЧастей",Новый Структура("СписанныеТовары",Движения.СписанныеТовары.Выгрузить()));
			СтруктраИсточника.Вставить("Ссылка",Ссылка);
			СтруктраИсточника.Вставить("Дата",Дата);
			
			СтруктраИсточника.Вставить("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете);
			СтруктраИсточника.Вставить("ОтражатьВБухгалтерскомУчете",ОтражатьВБухгалтерскомУчете);
			
			СтруктраИсточника.Вставить("Движения",Новый Структура());
		  
			УправлениеЗапасамиРасширеннаяАналитика.РасширеннаяАналитикаЗапасовИзменениеСостояния(СтруктраИсточника,Отказ,Неопределено);
		КонецЕсли;
		
								
	КонецЕсли;

 	ФормированиеДвиженийУпр(РежимПроведения,СтруктураШапкиДокумента,  ТаблицаПоОС, Отказ, Заголовок);
 	ФормированиеДвиженийРегл(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

КонецПроцедуры // ФормированиеДвижений()

//Коновалова 19022013 +
Функция НетДвиженийПоПартиям(_Регистр)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПартииТоваровНаСкладах.Регистратор
	                      |ИЗ
	                      |	РегистрНакопления."+_Регистр+" КАК ПартииТоваровНаСкладах
	                      |ГДЕ
	                      |	ПартииТоваровНаСкладах.Регистратор = &Регистратор");
						        
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
//Коновалова 19022013 -

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС)

	
	НомСтр   = 0;
	ДатаДока = Дата;

	Для каждого Строка Из ТаблицаПоОС Цикл

		НомСтр = НомСтр + 1;

		Движение = Движения.СписанныеТовары.Добавить();

		Движение.Период                     = ДатаДока;
		Движение.НомерСтрокиДокумента       = НомСтр;
		Движение.Номенклатура               = СтруктураШапкиДокумента.Номенклатура;
		Движение.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
		Движение.СерияНоменклатуры          = СтруктураШапкиДокумента.СерияНоменклатуры;
		Движение.Организация                = СтруктураШапкиДокумента.Организация;
		Движение.Количество                 = 1;
		Движение.Качество                   = Справочники.Качество.Новый;
		Движение.Склад                      = СтруктураШапкиДокумента.Склад;
		Движение.КодОперацииПартииТоваров 	= Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС;

		Движение.ДопустимыйСтатус1            = Перечисления.СтатусыПартийТоваров.Оборудование;
		Движение.ОтражатьВУправленческомУчете = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
		Движение.ОтражатьВБухгалтерскомУчете  = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
												
		Движение.ОсновноеСредство             = Строка.ОсновноеСредство;
												
		Если Движение.ОтражатьВБухгалтерскомУчете Тогда 
			// Параметры бухгалтерского учета
			Движение.СчетУчетаБУ                  = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
			Движение.КорСчетБУ                    = СтруктураШапкиДокумента.СчетУчетаБУ;
			Движение.КорСубконтоБУ1               = Строка.ОсновноеСредство;
			
			Движение.НалоговоеНазначениеПоФакту         = СтруктураШапкиДокумента.НалоговоеНазначениеОборудования;
			Движение.НалоговоеНазначениеНовое           = СтруктураШапкиДокумента.НалоговоеНазначение;
			
		КонецЕсли;	
		

		
	КонецЦикла;

	Движения.СписанныеТовары.Записать(Истина);
	
КонецПроцедуры

// Процедура формирования движений упр. регистров
//
Процедура ФормированиеДвиженийУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДока   = Дата;
	ТЗДанныеОС = Новый ТаблицаЗначений;
	ТЗДанныеОС.Колонки.Добавить("ОбъектУчета");
	ТЗДанныеОС.Колонки.Добавить("Сумма");

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда

		НаборДвижений = Движения.ТоварыНаСкладах;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Склад = СтруктураШапкиДокумента.Склад;
		СтрокаДвижений.Номенклатура = СтруктураШапкиДокумента.Номенклатура;
		СтрокаДвижений.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
		СтрокаДвижений.СерияНоменклатуры = СтруктураШапкиДокумента.СерияНоменклатуры;
		СтрокаДвижений.Качество = Справочники.Качество.Новый;
		СтрокаДвижений.Количество = ТаблицаПоОС.Количество();
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		//---------------------------------------------
		Если Не Отказ Тогда
			Движения.ТоварыНаСкладах.ВыполнитьРасход();
		Иначе
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтоимостьОС.ОсновноеСредство КАК ОбъектУчета,
		|	СУММА(СтоимостьОС.Стоимость) КАК Сумма
		|ИЗ
		|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
		|
		|ГДЕ
		|	(СтоимостьОС.Активность) И
		|	СтоимостьОС.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	СтоимостьОС.ОсновноеСредство");
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		ТЗДанныеОС = Запрос.Выполнить().Выгрузить();

		НоменклатураОС = Движения.НоменклатураОсновныхСредств;

		Для Каждого Строка Из ТЗДанныеОС Цикл

			Движение = НоменклатураОС.Добавить();

			Движение.Период           = ДатаДока;
			Движение.ОсновноеСредство = Строка.ОбъектУчета;
			Движение.Номенклатура     = СтруктураШапкиДокумента.Номенклатура;
			Движение.Характеристика   = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;

		КонецЦикла;

	Иначе // не оборудование

		//Заполним таблицу значений для проведения по регистрам, не зависящим от вида операции и сделаем 
		// движения по регистру АмортизацияОС
		СтоимостьОС                 = Движения.СтоимостьОС;
		ТаблицаДвиженийСтоимость    = СтоимостьОС.Выгрузить();

		ПогрешностьСтоимостиОС = 0;
		
		Если ТаблицаПоОС.Количество() > 0 Тогда
			
			Коэф = 1 / ТаблицаПоОС.Количество();
			
		Иначе
			
			Коэф = 0;
			
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаПоОС Цикл

			ТекОС 			= Строка.ОсновноеСредство;
			ТекСтоимость 	= ОбщегоНазначения.ОкруглитьСУчетомПогрешности(СтруктураШапкиДокумента.Стоимость * Коэф, 2, ПогрешностьСтоимостиОС);

			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийСтоимость.Добавить();

			Движение.ОсновноеСредство = ТекОС;
			Движение.Амортизация      = 0;
			Движение.Стоимость        = ТекСтоимость;
			
			НоваяСтрока = ТЗДанныеОС.Добавить();

			НоваяСтрока.ОбъектУчета   = ТекОС;
			НоваяСтрока.Сумма         = ТекСтоимость;

		КонецЦикла;

		СтоимостьОС.мПериод          = ДатаДока;
		СтоимостьОС.мТаблицаДвижений = ТаблицаДвиженийСтоимость;
		Движения.СтоимостьОС.ВыполнитьПриход();

	КонецЕсли;

	// списшем сумму с регистра объектов строительства
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда

		СтроительствоОС = Движения.СтроительствоОбъектовОсновныхСредств;

		ТаблицаДвиженийСтроительствоОС = СтроительствоОС.Выгрузить();

		Движение = ТаблицаДвиженийСтроительствоОС.Добавить();
		Движение.ОбъектСтроительства = СтруктураШапкиДокумента.ОбъектСтроительства;
		Движение.Сумма               = СтруктураШапкиДокумента.Стоимость;

		СтроительствоОС.мПериод          = ДатаДока;
		СтроительствоОС.мТаблицаДвижений = ТаблицаДвиженийСтроительствоОС;
		Движения.СтроительствоОбъектовОсновныхСредств.ВыполнитьРасход();

	КонецЕсли;

	// движения по регистрам, которые общие для всех видов операции
	ГрафикиАмортизацииОС   	= Движения.ГрафикиАмортизацииОС;
	МестонахождениеОС     	= Движения.МестонахождениеОС;
	НаправлениеАмортизации 	= Движения.СпособыОтраженияРасходовПоАмортизацииОС;
	НачислениеАмортизацииОС	= Движения.НачислениеАмортизацииОС;
	ПервоначальныеСведения 	= Движения.ПервоначальныеСведенияОС;
	ПараметрыАмортизацииОС 	= Движения.ПараметрыАмортизацииОС;
	СобытиеОС               = Движения.СобытияОС;
	СостояниеОС             = Движения.СостоянияОС;
	СоставОС               	= Движения.СоставОС;
	НазваниеДокумента       = Метаданные().Представление();

	Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
		АмортизируетсяПоГрафику = ЗначениеЗаполнено(СтруктураШапкиДокумента.ИндивидуальныйГрафикАмортизации);
	Иначе
		АмортизируетсяПоГрафику= ЗначениеЗаполнено(СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуУУ);
	КонецЕсли;
	
	ВходитВСоставОсновногоСредства = ЗначениеЗаполнено(СтруктураШапкиДокумента.СоставОсновногоСредства);
	
	УказаноМестонахождение = ЗначениеЗаполнено(СтруктураШапкиДокумента.Подразделение)
							 ИЛИ ЗначениеЗаполнено(СтруктураШапкиДокумента.МОЛУУ);
							 
	УказаныСпособыОтраженияРасходовПоАмортизации = ЗначениеЗаполнено(СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации);
	
	Для Каждого Строка Из ТЗДанныеОС Цикл

		ТекОС = Строка.ОбъектУчета;

		// Движения по регистру ГрафикиАмортизацииОС
		Если АмортизируетсяПоГрафику Тогда
		
			Движение = ГрафикиАмортизацииОС.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			
			Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
				ТекГрафик = СтруктураШапкиДокумента.ИндивидуальныйГрафикАмортизации;
			Иначе
				ТекГрафик = СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуУУ;
			КонецЕсли;
			Движение.ГрафикАмортизации           = ТекГрафик;
			
		КонецЕсли;

		// Движения по регистру МестонахождениеОС
		Если УказаноМестонахождение Тогда
		
			Движение = МестонахождениеОС.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.Местонахождение             = СтруктураШапкиДокумента.Подразделение;
			Движение.МОЛ                         = СтруктураШапкиДокумента.МОЛУУ;
			
		КонецЕсли;

		// Движения по регистру СпособыОтраженияРасходовПоАмортизацииОС
		Если УказаныСпособыОтраженияРасходовПоАмортизации Тогда
		
			Движение = НаправлениеАмортизации.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;
			
		КонецЕсли;

		// Движения по регистру НачислениеАмортизацииОС
		Движение = НачислениеАмортизацииОС.Добавить();
		Движение.Период                             = ДатаДока;
		Движение.ОсновноеСредство                   = ТекОС;
		Движение.НачислятьАмортизацию               = СтруктураШапкиДокумента.НачислятьАмортизациюУУ;
		Движение.НачислятьАмортизациюВТекущемМесяце = СтруктураШапкиДокумента.НачислятьАмортизациюВТекущемМесяце;

		// Движения по регистру ПервоначальныеСведенияОС
		Движение = ПервоначальныеСведения.Добавить();
		Движение.Период                      = ДатаДока;
		Движение.ОсновноеСредство            = ТекОС;
		Движение.ПервоначальнаяСтоимость     = Строка.Сумма;
		Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ;
		Движение.ПараметрВыработки           = СтруктураШапкиДокумента.ПараметрВыработкиУУ;

		// Движения по регистру ПараметрыАмортизацииОС
		Движение = ПараметрыАмортизацииОС.Добавить();
		Движение.Период                                      = ДатаДока;
		Движение.ОсновноеСредство                            = ТекОС;
		Движение.СтоимостьДляВычисленияАмортизации           = Строка.Сумма;
		Движение.ОбъемПродукцииРабот                         = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииУУ;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииУУ;
		Движение.СрокПолезногоИспользования                  = СтруктураШапкиДокумента.СрокПолезногоИспользованияУУ;
		Движение.СрокИспользованияДляВычисленияАмортизации   = СтруктураШапкиДокумента.СрокПолезногоИспользованияУУ;
		Движение.ПрименитьВТекущемМесяце                     = СтруктураШапкиДокумента.НачислятьАмортизациюВТекущемМесяце;
		Движение.ЛиквидационнаяСтоимость                     = СтруктураШапкиДокумента.ЛиквидационнаяСтоимостьУУ;

		// Движения по регистру СобытиеОС
		Движение = СобытиеОС.Добавить();
		Движение.Период            = ДатаДока;
		Движение.ОсновноеСредство  = ТекОС;
		Движение.Событие           = СтруктураШапкиДокумента.СобытиеПринятиеКУчету;
		Движение.НомерДокумента    = Номер;
		Движение.НазваниеДокумента = НазваниеДокумента;

		Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
			
			Движение = СобытиеОС.Добавить();
			Движение.Период            = ДатаДока;
			Движение.ОсновноеСредство  = ТекОС;
			Движение.Событие           = СтруктураШапкиДокумента.СобытиеВводВЭксплуатацию;
			Движение.НомерДокумента    = Номер;
			Движение.НазваниеДокумента = НазваниеДокумента;
			
		КонецЕсли;
		
		// Движения по регистру СостоянияОС
		Движение = СостояниеОС.Добавить();
		Движение.Период                      = ДатаДока;
		Движение.ОсновноеСредство            = ТекОС;
		Движение.Состояние                   = Перечисления.СостоянияОС.ПринятоКУчету;
		Движение.ДатаСостояния				 = ДатаДока;
		
		Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
			
			Движение = СостояниеОС.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.Состояние                   = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
			Движение.ДатаСостояния				 = ДатаДока;

		КонецЕсли;
		
		// Движения по регистру СоставОС
		Если ВходитВСоставОсновногоСредства Тогда
		
			Движение = СоставОС.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.ВСоставе                    = СтруктураШапкиДокумента.СоставОсновногоСредства;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ФормированиеДвиженийУпр()

// Процедура формирования движений регл. регистров
//
Процедура ФормированиеДвиженийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	
	ОбщаяСуммаКоррНалоговогоКредита = 0;
	Если СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// Сформируем движения по НДС до отражения в бухгалтерском учете, 
		// поскольку бухгалтерская стоимость зависит от права на налоговый кредит
		ФормированиеДвиженийПоПодсистемеНДС(СтруктураШапкиДокумента, ОбщаяСуммаКоррНалоговогоКредита, Отказ, Заголовок);
		
	КонецЕсли; 
	
	ТЗДанныеОС = Новый ТаблицаЗначений;
	ТЗДанныеОС.Колонки.Добавить("ОбъектУчета");
	ТЗДанныеОС.Колонки.Добавить("Сумма");
	ТЗДанныеОС.Колонки.Добавить("СуммаНУ");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
			
			НаборДвижений = Движения.ТоварыОрганизаций;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Организация = ТекОрганизация;
			СтрокаДвижений.Номенклатура = СтруктураШапкиДокумента.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
			СтрокаДвижений.СерияНоменклатуры = СтруктураШапкиДокумента.СерияНоменклатуры;
			СтрокаДвижений.Качество = Справочники.Качество.Новый;
			СтрокаДвижений.Количество = ТаблицаПоОС.Количество();
			
			Если СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				СтрокаДвижений.Склад = СтруктураШапкиДокумента.Склад;
			Иначе	
				СтрокаДвижений.Склад = Неопределено;
			КонецЕсли;

			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьРасход();
			Иначе
				Возврат;
			КонецЕсли;
			
			Если ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда

				НаборДвижений = Движения.ТоварыОрганизацийРегл;
				
				// Получим таблицу значений, совпадающую со структурой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
				
				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				
				СтрокаДвижений.Организация                = ТекОрганизация;
				СтрокаДвижений.Номенклатура               = СтруктураШапкиДокумента.Номенклатура;
				СтрокаДвижений.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
				СтрокаДвижений.СерияНоменклатуры          = СтруктураШапкиДокумента.СерияНоменклатуры;
				СтрокаДвижений.Качество                   = Справочники.Качество.Новый;
				СтрокаДвижений.СчетУчетаБУ                = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;

				СтрокаДвижений.НалоговоеНазначение        = СтруктураШапкиДокумента.НалоговоеНазначениеОборудования;
				
				СтрокаДвижений.Количество                 = ТаблицаПоОС.Количество();
				
				ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
				
				Если ВестиПартионныйУчетПоСкладамРегл Тогда
					СтрокаДвижений.Склад = СтруктураШапкиДокумента.Склад;
				Иначе	
					СтрокаДвижений.Склад = Неопределено;
				КонецЕсли;
				
				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
				Если Не Отказ Тогда
					Движения.ТоварыОрганизацийРегл.ВыполнитьРасход();
				Иначе
					Возврат;
				КонецЕсли;
				
			КонецЕсли;	
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СтоимостьОС.ОсновноеСредство КАК ОбъектУчета,
			|	СУММА(СтоимостьОС.Стоимость) КАК Сумма,
			|	СУММА(СтоимостьОС.СтоимостьНУ) КАК СуммаНУ
			|ИЗ
			|	РегистрНакопления.СтоимостьОСБухгалтерскийУчет КАК СтоимостьОС
			|
			|ГДЕ
			|	(СтоимостьОС.Активность) И
			|	СтоимостьОС.Регистратор = &Регистратор
			|
			|СГРУППИРОВАТЬ ПО
			|	СтоимостьОС.ОсновноеСредство");
			
			Запрос.УстановитьПараметр("Регистратор", Ссылка);
			ТЗДанныеОС = Запрос.Выполнить().Выгрузить();
			
		Иначе // не оборудование
			
			ПогрешностьСтоимостиОС = 0;
			ПогрешностьСтоимостиОСНУ = 0;
		
			Если ТаблицаПоОС.Количество() > 0 Тогда
				
				Коэф = 1 / ТаблицаПоОС.Количество();
				
			Иначе
				
				Коэф = 0;
				
			КонецЕсли;
			
			//Заполним таблицу значений для проведения по регистрам, не зависящим от вида операции
			Для Каждого Строка Из ТаблицаПоОС Цикл
				
				ТекОС 			= Строка.ОсновноеСредство;
				ТекСтоимостьБУ	= ОбщегоНазначения.ОкруглитьСУчетомПогрешности(СтруктураШапкиДокумента.СтоимостьБУ * Коэф, 2, ПогрешностьСтоимостиОС);
				ТекСтоимостьНУ	= ОбщегоНазначения.ОкруглитьСУчетомПогрешности(СтруктураШапкиДокумента.СтоимостьНУ * Коэф, 2, ПогрешностьСтоимостиОСНУ);
				
				НоваяСтрока = ТЗДанныеОС.Добавить();
				НоваяСтрока.ОбъектУчета = ТекОС;
				НоваяСтрока.Сумма       = ТекСтоимостьБУ;
				НоваяСтрока.СуммаНУ     = ТекСтоимостьНУ;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТЗДанныеОС.Колонки.Добавить("СуммаНалоговогоКредита"); // в том числе
		ТЗДанныеОС.ЗаполнитьЗначения(0,"СуммаНалоговогоКредита");
		ТЗДанныеОС.Колонки.Добавить("СуммаНалоговогоКредитаНУ"); // в том числе
		ТЗДанныеОС.ЗаполнитьЗначения(0,"СуммаНалоговогоКредитаНУ");
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (ОбщаяСуммаКоррНалоговогоКредита <> 0) Тогда
			
			ОбщаяСтоимостьОС 	= ТЗДанныеОС.Итог("Сумма");
			ОбщаяСтоимостьОСНУ 	= ТЗДанныеОС.Итог("СуммаНУ");
			
			Если ОбщаяСтоимостьОС = 0 И ОбщаяСтоимостьОСНУ = 0 Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Общая стоимость основных средств при проведении по бухгалтерскому учету равна 0", Отказ, Заголовок);
				Возврат
				
			КонецЕсли;
			// Распределим по всем основным средствам пропорционально
			
			// стоимость сторнируем только когда восстанавливаем НДС, то есть сумма корректировки НДС > 0
			Если  ОбщаяСуммаКоррНалоговогоКредита > 0 Тогда
				Коэф		= ОбщаяСуммаКоррНалоговогоКредита / ОбщаяСтоимостьОС;
				КоэфНУ		= ОбщаяСуммаКоррНалоговогоКредита / ОбщаяСтоимостьОСНУ;
			Иначе	
				Коэф		= 0;
				КоэфНУ		= 0;
			КонецЕсли;	
			
			Погрешность	= 0;
			ПогрешностьНУ	= 0;
				
			Для Каждого СтрокаОС Из ТЗДанныеОС Цикл
				
				СтрокаОС.СуммаНалоговогоКредита	 	= ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэф*СтрокаОС.Сумма, 	2, Погрешность);
				СтрокаОС.СуммаНалоговогоКредитаНУ	= ОбщегоНазначения.ОкруглитьСУчетомПогрешности(КоэфНУ*СтрокаОС.СуммаНУ, 2, ПогрешностьНУ);
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
			
			СтоимостьОС                 = Движения.СтоимостьОСБухгалтерскийУчет;
			ТаблицаДвиженийСтоимость    = СтоимостьОС.Выгрузить();
			
			Для Каждого Строка Из ТЗДанныеОС Цикл
				ТекОС = Строка.ОбъектУчета;
				
				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийСтоимость.Добавить();
				Движение.Организация      = ТекОрганизация;
				Движение.ОсновноеСредство = ТекОС;
				Движение.Амортизация      = 0;
				Движение.Стоимость        = Строка.Сумма - Строка.СуммаНалоговогоКредита;
				Движение.СтоимостьНУ      = Строка.СуммаНУ - Строка.СуммаНалоговогоКредитаНУ;
				Движение.ВидОперации      = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
				
			КонецЦикла;
			
			СтоимостьОС.мПериод = ДатаДока;
			СтоимостьОС.мТаблицаДвижений = ТаблицаДвиженийСтоимость;
			Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();
			
		КонецЕсли; 
		
		ГрафикиАмортизацииОС    	= Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
		МестонахождениеОС       	= Движения.МестонахождениеОСБухгалтерскийУчет;
		НаправлениеАмортизации  	= Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
		НачислениеАмортизацииОС 	= Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
		ПервоначальныеСведения  	= Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
		ПараметрыАмортизацииОС 		= Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
		СобытиеОС	            	= Движения.СобытияОСОрганизаций;
		СостояниеОС             	= Движения.СостоянияОСОрганизаций;
		АмортизацияОС           	= Движения.СтоимостьОСБухгалтерскийУчет;
		СчетаУчетаОС            	= Движения.СчетаБухгалтерскогоУчетаОС;
		НачислениеАмортизацииОСНУ 	= Движения.НачислениеАмортизацииОСНалоговыйУчет;
		ПервоначальныеСведенияНУ 	= Движения.ПервоначальныеСведенияОСНалоговыйУчет;
		ПараметрыАмортизацииОСНУ 	= Движения.ПараметрыАмортизацииОСНалоговыйУчет;
		НалоговыеНазначенияОС 		= Движения.НалоговыеНазначенияОС;
		
		НазваниеДокумента       	= Метаданные().Представление();
		
		// Прочитаем проводки, уже сформированные процедурами партионного учета
		ПроводкиБУ             = Движения.Хозрасчетный;
		ПроводкиБУ.Прочитать();
		
		АмортизируетсяПоГрафику                      = ЗначениеЗаполнено(СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуБУ);
		УказаноМестонахождение                       = ЗначениеЗаполнено(СтруктураШапкиДокумента.ПодразделениеОрганизации)
													   ИЛИ ЗначениеЗаполнено(СтруктураШапкиДокумента.МОЛБУ);
		УказаныСпособыОтраженияРасходовПоАмортизации = ЗначениеЗаполнено(СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации);
		
		Для Каждого Строка Из ТЗДанныеОС Цикл
			
			ТекОС = Строка.ОбъектУчета;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
				
				// Корректировка налогового кредита
				СуммаПроводки 	= -Строка.СуммаНалоговогоКредита;
				СуммаПроводкиНУ = -Строка.СуммаНалоговогоКредитаНУ;
				Если СуммаПроводки <> 0 ИЛИ СуммаПроводкиНУ <> 0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.НомерЖурнала = "ОС";
					Проводка.Содержание   = "Корректировка налогового кредита";
					Проводка.Сумма        = СуммаПроводки;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Проводка.НалоговоеНазначениеДт  = СтруктураШапкиДокумента.НалоговоеНазначениеОборудования;
						Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СуммаПроводкиНУ);
						
					КонецЕсли;
					
					Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
					
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
					
				КонецЕсли;
				
				// Стоимость основного средства
				СуммаПроводки 	= Строка.Сумма 		- Строка.СуммаНалоговогоКредита;
				СуммаПроводкиНУ = Строка.СуммаНУ 	- Строка.СуммаНалоговогоКредитаНУ;
				
				Если СуммаПроводки <> 0 ИЛИ СуммаПроводкиНУ <> 0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.НомерЖурнала = "ОС";
					Проводка.Содержание   = "Списана стоим. объекта строительства";
					Проводка.Сумма        = СуммаПроводки;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Проводка.НалоговоеНазначениеДт  = СтруктураШапкиДокумента.НалоговоеНазначение;
						Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СуммаПроводкиНУ);
						
					КонецЕсли;
					
					Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Если Проводка.СчетДт.Количественный Тогда
						
						Проводка.КоличествоДт = 1;
						
					КонецЕсли;
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						
						Проводка.НалоговоеНазначениеКт  = СтруктураШапкиДокумента.НалоговоеНазначениеОборудования;
						Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СуммаПроводкиНУ);
						
					КонецЕсли;
					
					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
					
					Если Проводка.СчетКт.Количественный Тогда
						
						Проводка.КоличествоКт = 1;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Движения по регистру ГрафикиАмортизацииОС
			Если АмортизируетсяПоГрафику Тогда
				
				Движение = ГрафикиАмортизацииОС.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Организация                 = ТекОрганизация;
				Движение.ГрафикАмортизации           = СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуБУ;
				
			КонецЕсли;

			// Движения по регистру МестонахождениеОС
			Если УказаноМестонахождение Тогда
				
				Движение = МестонахождениеОС.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Организация                 = ТекОрганизация;
				Движение.Местонахождение             = СтруктураШапкиДокумента.ПодразделениеОрганизации;
				Движение.МОЛ                         = СтруктураШапкиДокумента.МОЛБУ;
				
			КонецЕсли;

			// Движения по регистру СпособыОтраженияРасходовПоАмортизацииОС
			Если УказаныСпособыОтраженияРасходовПоАмортизации Тогда
			
				Движение = НаправлениеАмортизации.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Организация                 = ТекОрганизация;
				Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;
			
			КонецЕсли;
			
			// Движения по регистру НачислениеАмортизацииОС
			Движение = НачислениеАмортизацииОС.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.Организация                 = ТекОрганизация;
			Движение.НачислятьАмортизацию        = СтруктураШапкиДокумента.НачислятьАмортизациюБУ;
			
			// Движения по регистру ПервоначальныеСведенияОС
			Движение = ПервоначальныеСведения.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.Организация                 = ТекОрганизация;
			Движение.ПервоначальнаяСтоимость     = Строка.Сумма - Строка.СуммаНалоговогоКредита;
			Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
			ТекСтрокаОС = ТаблицаПоОС.Найти(ТекОС,"ОсновноеСредство");
			Движение.ИнвентарныйНомер			 = ?(ТекСтрокаОС = Неопределено,Неопределено,ТекСтрокаОС.ИнвентарныйНомер);
			Движение.ПараметрВыработки			 = СтруктураШапкиДокумента.ПараметрВыработкиБУ;
			
			// Движения по регистру ПараметрыАмортизацииОС
			Движение = ПараметрыАмортизацииОС.Добавить();
			Движение.Период                                      = ДатаДока;
			Движение.ОсновноеСредство                            = ТекОС;
			Движение.Организация                                 = ТекОрганизация;
			Движение.ОбъемПродукцииРабот                         = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииБУ;
			Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииБУ;
			Движение.СрокПолезногоИспользования                  = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
			Движение.СрокИспользованияДляВычисленияАмортизации   = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
			Движение.СтоимостьДляВычисленияАмортизации           = Строка.Сумма - Строка.СуммаНалоговогоКредита;
			Движение.ЛиквидационнаяСтоимость	                 = СтруктураШапкиДокумента.ЛиквидационнаяСтоимостьБУ;
			
			// Движения по регистру СобытияОСОрганизаций
			Движение = СобытиеОС.Добавить();
			Движение.Период                    = ДатаДока;
			Движение.ОсновноеСредство          = ТекОС;
			Движение.Организация               = ТекОрганизация;
			Движение.Событие                   = СтруктураШапкиДокумента.СобытиеПринятиеКУчетуРегл;
			Движение.НомерДокумента            = Номер;
			Движение.НазваниеДокумента         = НазваниеДокумента;
			
			Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл Тогда
				
				Движение = СобытиеОС.Добавить();
				Движение.Период                = ДатаДока;
				Движение.ОсновноеСредство      = ТекОС;
				Движение.Организация           = ТекОрганизация;
				Движение.Событие               = СтруктураШапкиДокумента.СобытиеВводВЭксплуатациюРегл;
				Движение.НомерДокумента        = Номер;
				Движение.НазваниеДокумента     = НазваниеДокумента;
				
			КонецЕсли;
			
			// Движения по регистру СостоянияОСОрганизаций
			Движение = СостояниеОС.Добавить();
			Движение.Период                     = ДатаДока;
			Движение.ОсновноеСредство           = ТекОС;
			Движение.Организация                = ТекОрганизация;
			Движение.Состояние                  = Перечисления.СостоянияОС.ПринятоКУчету;
			Движение.ДатаСостояния				= ДатаДока;
			
			Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл Тогда
				
				Движение = СостояниеОС.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Организация                 = ТекОрганизация;
				Движение.Состояние                   = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
				Движение.ДатаСостояния				 = ДатаДока;
				
			КонецЕсли;
			
			// Движения по регистру СчетаБухгалтерскогоУчетаОС
			Движение = СчетаУчетаОС.Добавить();
			Движение.Период                    = ДатаДока;
			Движение.ОсновноеСредство          = ТекОС;
			Движение.Организация               = ТекОрганизация;
			Движение.СчетУчета                 = СтруктураШапкиДокумента.СчетУчетаБУ;
			Движение.СчетНачисленияАмортизации = СтруктураШапкиДокумента.СчетНачисленияАмортизацииБУ;
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
				
				// Движения по регистру ПервоначальныеСведенияОСНалоговыйУчет
				Движение = ПервоначальныеСведенияНУ.Добавить();
				Движение.Период                     = ДатаДока;
				Движение.ОсновноеСредство           = ТекОС;
				Движение.Организация                = ТекОрганизация;
				Движение.ПервоначальнаяСтоимостьНУ  = Строка.СуммаНУ - Строка.СуммаНалоговогоКредитаНУ;
				Движение.НалоговаяГруппаОС		 	= СтруктураШапкиДокумента.НалоговаяГруппаОС;

				// Движения по регистру ПараметрыАмортизацииОСНалоговыйУчет
				Движение = ПараметрыАмортизацииОСНУ.Добавить();
				Движение.Период                                      = ДатаДока;
				Движение.ОсновноеСредство                            = ТекОС;
				Движение.Организация                                 = ТекОрганизация;
				Движение.СрокПолезногоИспользования   				 = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
				Движение.СрокИспользованияДляВычисленияАмортизации   = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
				Движение.СтоимостьДляВычисленияАмортизации           = Строка.СуммаНУ - Строка.СуммаНалоговогоКредитаНУ;

				// Движения по регистру НалоговыеНазначенияОС
				Движение = НалоговыеНазначенияОС.Добавить();
				Движение.Период						= ДатаДока;
				Движение.Организация				= ТекОрганизация;
				Движение.ОсновноеСредство			= ТекОС;
				Движение.НалоговоеНазначение     	= СтруктураШапкиДокумента.НалоговоеНазначение;
				
				// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
				Движение = НачислениеАмортизацииОСНУ.Добавить();
				Движение.Период                     = ДатаДока;
				Движение.ОсновноеСредство           = ТекОС;
				Движение.Организация                = ТекОрганизация;
				Движение.НачислятьАмортизацию       = СтруктураШапкиДокумента.НачислятьАмортизациюНУ;
				
			ИначеЕсли  СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				// Движения по регистру ПервоначальныеСведенияОСНалоговыйУчет
				Движение = ПервоначальныеСведенияНУ.Добавить();
				Движение.Период                     = ДатаДока;
				Движение.ОсновноеСредство           = ТекОС;
				Движение.Организация                = ТекОрганизация;
				Движение.НалоговаяГруппаОС		 	= СтруктураШапкиДокумента.НалоговаяГруппаОС;
				
				// Движения по регистру ПараметрыАмортизацииОСНалоговыйУчет
				Движение = ПараметрыАмортизацииОСНУ.Добавить();
				Движение.Период                                      = ДатаДока;
				Движение.ОсновноеСредство                            = ТекОС;
				Движение.Организация                                 = ТекОрганизация;
				Движение.СрокПолезногоИспользования   				 = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
				Движение.СрокИспользованияДляВычисленияАмортизации   = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
				
				// Движения по регистру НалоговыеНазначенияОС
				Движение = НалоговыеНазначенияОС.Добавить();
				Движение.Период						= ДатаДока;
				Движение.Организация				= ТекОрганизация;
				Движение.ОсновноеСредство			= ТекОС;
				Движение.НалоговоеНазначение     	= СтруктураШапкиДокумента.НалоговоеНазначение;
					
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ФормированиеДвиженийРегл()

// Процедура формирования движений по регистрам подсистемы учета НДС
//
// Параметры:
//		СтруктураШапкиДокумента
//		ТЗДанныеОС	- таблица с бухгалтерскими данными по основным средствам, в которую будет добавлена 
// 				информация о корректировке налогового кредита
Процедура ФормированиеДвиженийПоПодсистемеНДС(СтруктураШапкиДокумента, ОбщаяСуммаКоррНалоговогоКредита, Отказ, Заголовок)
	
	ДатаДока = Дата;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		// Движения по НДС будут сделаны при списании партий
		Возврат;
		
	КонецЕсли;
	
	// Объекты строительства
	
	// Спишем накопленный НДС из регистра. 
	// Суммы списываем в той пропорции, в какой стоимость принимаемых к учету объектов 
	// находится к стоимости всего остатка по налоговому учету
	
	ТекОрганизация         = СтруктураШапкиДокумента.Организация;
	ТекОбъектСтроительства = СтруктураШапкиДокумента.ОбъектСтроительства;
	ТекСтоимостьНУ         = СтруктураШапкиДокумента.СтоимостьНУ;
	ТекСтоимостьБУ         = СтруктураШапкиДокумента.СтоимостьБУ;
	
	Если ТекСтоимостьНУ = 0 И ТекСтоимостьБУ = 0 Тогда
		
		//Проверять нечего.
		Возврат
		
	КонецЕсли;
	
	// Получим остатки из регистра НДС

	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
		
	Если ИспользоватьРасширеннуюАналитику Тогда
		ПериодГраница = Новый Граница (КонецМесяца(Дата), ВидГраницы.Включая);
	Иначе	
		ПериодГраница = Новый Граница (Дата, ВидГраницы.Включая);
	КонецЕсли;

	ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Остатки(ПериодГраница,
		             Новый Структура("Организация, ОбъектСтроительства, СчетУчета", ТекОрганизация, ТекОбъектСтроительства, СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива));
					 
	ОстатокСтоимостиНУ = ВыборкаЗаписей.Итог("СтоимостьНУ");
	ОстатокСтоимостиБУ = ВыборкаЗаписей.Итог("Стоимость");
	
	//Определим часть списания (НУ)
	Если ОстатокСтоимостиНУ > 0 Тогда
		Коэф = ТекСтоимостьНУ / ОстатокСтоимостиНУ;
	Иначе
		Коэф = 0;
	КонецЕсли;	
	
	Если ОстатокСтоимостиБУ > 0 Тогда
		КоэфБУ = ТекСтоимостьБУ / ОстатокСтоимостиБУ;
	Иначе
		КоэфБУ = 0;
	КонецЕсли;	

	Если Коэф = 0 И КоэфБУ = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого ЗаписьПоОстаткуНДС Из ВыборкаЗаписей Цикл
	
		Движение = Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.ДобавитьРасход();
		
		Движение.Период							= ДатаДока;
		Движение.ОбъектСтроительства			= ТекОбъектСтроительства;
		Движение.Организация					= ТекОрганизация;
		Движение.НалоговоеНазначение     		= ЗаписьПоОстаткуНДС.НалоговоеНазначение;
		
		Движение.СчетУчета						= СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
		Движение.Стоимость						= КоэфБУ * ЗаписьПоОстаткуНДС.Стоимость;
		
		// Ресурсы списываем с учетом коэффициента
		Движение.СтоимостьНУ					= Коэф * ЗаписьПоОстаткуНДС.СтоимостьНУ;
		Движение.НДСВходящий					= Коэф * ЗаписьПоОстаткуНДС.НДСВходящий;
		Движение.НДСКредит						= Коэф * ЗаписьПоОстаткуНДС.НДСКредит;
		
		// Устанавливаем реквизиты фактической принадлежности объекта строительства
		Движение.НалоговоеНазначениеПоФакту    		= СтруктураШапкиДокумента.НалоговоеНазначение;
		
	КонецЦикла; 
	
	// Обработаем корретировки налогового кредита, к которым привело такое фактическое использование объектов строительства
	ТаблицаСписанияНДС = Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Выгрузить();
	НалоговыйУчет.ПолучитьТаблицуКорректировокНалоговогоКредита(ТаблицаСписанияНДС);
	
	Для Каждого СтрокаСписанияНДС Из ТаблицаСписанияНДС Цикл
	
		Если СтрокаСписанияНДС.СуммаКорректировкиНалоговогоКредита = 0 Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		// Зафиксируем в регистре необходимость корректировки
		Движение = Движения.КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет.ДобавитьПриход();
		
		Движение.Период							 = ДатаДока;
		Движение.Организация					 = СтрокаСписанияНДС.Организация;
		Движение.ОбъектСтроительства			 = СтрокаСписанияНДС.ОбъектСтроительства;
		Движение.НалоговоеНазначение		 	 = СтрокаСписанияНДС.НалоговоеНазначение;
		Движение.НалоговоеНазначениеПоФакту 	 = СтрокаСписанияНДС.НалоговоеНазначениеПоФакту;


		Движение.НДСКредит						 = СтрокаСписанияНДС.НДСКредит;
		Движение.НДСКредитПоФакту				 = СтрокаСписанияНДС.НДСКредит + СтрокаСписанияНДС.СуммаКорректировкиНалоговогоКредита;
		
		Движение.КодОперации = Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПредполагаемаяКорректрировка;
		
	КонецЦикла; 
	
	// Изменения бухгалтерской стоимости основных средств из-за потери/получения права на налоговый кредит
	ОбщаяСуммаКоррНалоговогоКредита = ТаблицаСписанияНДС.Итог("СуммаКорректировкиНалоговогоКредита");
	
КонецПроцедуры // ФормированиеДвиженийПоПодсистемеНДС()

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		// Заполнение шапки
		МОЛУУ                        = Основание.МОЛ;
		МОЛБУ                        = Основание.МОЛОрганизации;
		Организация                  = Основание.Организация;                              
		Ответственный                = Основание.Ответственный;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		Подразделение                = Основание.Подразделение;
		ПодразделениеОрганизации     = Основание.ПодразделениеОрганизации;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			РасхождениеУУ = ТекСтрокаОС.КоличествоПоФактуУУ - ТекСтрокаОС.КоличествоУУ;
			РасхождениеБУ = ТекСтрокаОС.КоличествоПоФактуБУ - ТекСтрокаОС.КоличествоБУ;
			
			Если (РасхождениеУУ <= 0) И (РасхождениеБУ <= 0) Тогда
				
				Продолжить
				
			КонецЕсли;
			
			НоваяСтрока = ОсновныеСредства.Добавить();
			НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
			НоваяСтрока.ИнвентарныйНомер = ТекСтрокаОС.ОсновноеСредство.Код;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		
		Если Основание.ЭтоГруппа Тогда
			
			Сообщить("Нельзя принять к учету группу основных средств", СтатусСообщения.Внимание);
			Возврат;
			
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = ОсновныеСредства.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		СтрокаТабличнойЧасти.ИнвентарныйНомер = Основание.Код;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ВидОперацииОснования             = Основание.ВидОперации;
		ПоступлениеОборудования          = ((ВидОперацииОснования = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование) ИЛИ (ВидОперацииОснования = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия));
		//Смартис Лиманчук начало 05.12.2012
		ПоступлениеОборудования          = ПоступлениеОборудования ИЛИ ВидОперацииОснования = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал;
		//Смартис Лиманчук окончание 05.12.2012
		ПоступлениеОбъектовСтроительства = (ВидОперацииОснования = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);
		//Смартис Лиманчук начало 18.01.2013
		ПоступлениеОбъектовСтроительства = ПоступлениеОбъектовСтроительства ИЛИ ВидОперацииОснования = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительстваНал;
		//Смартис Лиманчук окончание 18.01.2013
		Организация              		 = Основание.Организация;
		ОтражатьВУправленческомУчете     = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете 	 = Основание.ОтражатьВБухгалтерскомУчете;
		Склад                    		 = Основание.СкладОрдер;
		
		Если ПоступлениеОборудования Тогда
			
			ВидОперации            	= Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование;
			Подразделение          	= Основание.Подразделение;
			Оборудование           	= Основание.Оборудование;
			ОборудованиеКоличество 	= Оборудование.Количество();
			
			Если ОборудованиеКоличество Тогда
				
				Если ОборудованиеКоличество > 1 Тогда
					
					ТаблицаОборудования = Оборудование.Выгрузить();
					СтрокаТЧ = ТаблицаОборудования.ВыбратьСтроку("Выберите строку документа.");
					
				Иначе
					
					СтрокаТЧ = Оборудование[0];
					
				КонецЕсли;
				
				Если СтрокаТЧ <> Неопределено Тогда
					
					Номенклатура                   	= СтрокаТЧ.Номенклатура;
					СерияНоменклатуры              	= СтрокаТЧ.СерияНоменклатуры;
					ХарактеристикаНоменклатуры     	= СтрокаТЧ.ХарактеристикаНоменклатуры;
					СчетУчетаБУВнеоборотногоАктива 	= СтрокаТЧ.СчетУчетаБУ;
					НалоговоеНазначение 			= СтрокаТЧ.НалоговоеНазначение;
					
					НалоговоеНазначениеОборудования = СтрокаТЧ.НалоговоеНазначение;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПоступлениеОбъектовСтроительства Тогда
			
			ВидОперации                    = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства;
			ОбъектыСтроительства           = Основание.ОбъектыСтроительства;
			ОбъектыСтроительстваКоличество = ОбъектыСтроительства.Количество();
			
			Если ОбъектыСтроительстваКоличество > 0 Тогда
				
				Если ОбъектыСтроительстваКоличество > 1 Тогда
					
					ТаблицаОбъектовСтроительства = ОбъектыСтроительства.Выгрузить();
					СтрокаТЧ = ТаблицаОбъектовСтроительства.ВыбратьСтроку("Выберите строку документа.");
					
				Иначе
					
					СтрокаТЧ = ОбъектыСтроительства[0];
					
				КонецЕсли;
				
				Если СтрокаТЧ <> Неопределено Тогда
					
					ОбъектСтроительства            = СтрокаТЧ.ОбъектСтроительства;
					СчетУчетаБУВнеоборотногоАктива = СтрокаТЧ.СчетУчетаБУ;
					
					НалоговоеНазначение 			= СтрокаТЧ.НалоговоеНазначение;
					НалоговоеНазначениеОборудования = СтрокаТЧ.НалоговоеНазначение;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьСчетАмортизации();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ВидНалоговойДеятельности", СтруктураШапкиДокумента.НалоговоеНазначение.ВидНалоговойДеятельности);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	
	
	СтруктураШапкиДокумента.Вставить("НалоговоеНазначениеОборудования", НалоговоеНазначениеОборудования);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоОС;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	//Коновалова 28022013 +
	Если Не РольДоступна("ПолныеПрава") И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ТОгда
		 Сообщить("Нельзя провести документ без отражения по бух. учету!
		          | Заполните галочку бух. учет.");
		Отказ = Истина;		  
	КонецЕсли;
	//Коновалова 28022013 -
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если ТипЗнч(СтруктураВидовУчета) = Тип("Структура") Тогда
		// Структура видов учета определяется в обработке "Проведение по партиям"
		Для Каждого Элемент из СтруктураВидовУчета Цикл
			Если (Лев(Элемент.Ключ,8) = "Отражать") Тогда
				ОтражатьВУчете = СтруктураШапкиДокумента[Элемент.Ключ];
				СтруктураШапкиДокумента.Вставить(Элемент.Ключ, Элемент.Значение И ОтражатьВУчете);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	ПроверитьЗаполнениеШапки(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ);
	
	ПроверкаРеквизитовТЧ(РежимПроведения, ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);
	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ИнвентарныйНомер", "Инв. № (Орг)",      Отказ, Заголовок);	

	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ФормированиеДвижений(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;	
	
	// Очистка неиспользуемых реквизитов.
	
	СпособыНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС;             
	
	// Управленческий учет
	
	Если СпособНачисленияАмортизацииУУ <> СпособыНачисленияАмортизации.Производственный Тогда
		
		ПредполагаемыйОбъемПродукцииУУ = 0;
		ПараметрВыработкиУУ            = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
		
	КонецЕсли;
	
	Если СпособНачисленияАмортизацииУУ <> СпособыНачисленияАмортизации.ПоИндивидуальномуГрафику Тогда
		
		ИндивидуальныйГрафикАмортизации = Справочники.ИндивидуальныеГрафикиАмортизации.ПустаяСсылка();
		
	КонецЕсли;
	
	Если СпособНачисленияАмортизацииУУ <> СпособыНачисленияАмортизации.Прямолинейный
		 И СпособНачисленияАмортизацииУУ <> СпособыНачисленияАмортизации.УменьшенияОстатка 
		 И СпособНачисленияАмортизацииУУ <> СпособыНачисленияАмортизации.УскоренногоУменьшенияОстатка 
		 И СпособНачисленияАмортизацииУУ <> СпособыНачисленияАмортизации.Кумулятивный Тогда
		 
		 СрокПолезногоИспользованияУУ = 0;
		 
		 Если СпособНачисленияАмортизацииУУ <> СпособыНачисленияАмортизации.Производственный Тогда
			 ЛиквидационнаяСтоимостьУУ    = 0;
		 КонецЕсли;	 
		 ГрафикАмортизацииПоГодуУУ    = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		 
	 КонецЕсли;
	
	// Бухгалтерский учет
	
	Если СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Производственный Тогда
		
		ПредполагаемыйОбъемПродукцииБУ = 0;
		ПараметрВыработкиБУ            = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
		
	КонецЕсли;
	
	Если СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Прямолинейный
		 И СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.УменьшенияОстатка 
		 И СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.УскоренногоУменьшенияОстатка 
		 И СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Кумулятивный Тогда
		 
		 СрокПолезногоИспользованияБУ = 0;
		 СрокПолезногоИспользованияНУ = 0;
		 Если СпособНачисленияАмортизацииБУ <> СпособыНачисленияАмортизации.Производственный Тогда
			 ЛиквидационнаяСтоимостьБУ    = 0;
		 КонецЕсли;	 
		 ГрафикАмортизацииПоГодуБУ    = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
		 
	 КонецЕсли;
	 
	Если ОтражатьВБухгалтерскомУчете Тогда 
		
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ УчетнаяПолитикаРегл.ЕстьНДС Тогда
			
			// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
			НеОблНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
			
			НалоговоеНазначение = НеОблНДСДеятельность;
			
		КонецЕсли; 
		
		НачислятьАмортизациюНУ = НачислятьАмортизациюБУ;	
		
		Если НалоговоеНазначение.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда
			НачислятьАмортизациюНУ = Ложь;
		КонецЕсли;	
		
	КонецЕсли;	
		
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
			
КонецПроцедуры // ПриЗаписи()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");
