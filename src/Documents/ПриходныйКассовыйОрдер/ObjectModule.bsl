Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранит текущее распределение долга работника по займу
// на основную сумму займа и начисленные проценты
Перем СтруктураДолг Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем ТаблицаПлатежейУпр;

Перем мСтруктураПараметровДенежныхСредств;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Формирует номер приходного оредера в пределах организации
//
Процедура УстановитьНомерОрдера() Экспорт
	
	//@skip-check undefined-function
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
		СтруктураПараметровБлокировка = Новый Структура("ТипТаблицы, ИмяТаблицы", "Справочник", "ОбособленныеПодразделенияОрганизаций");
		
		ЗначенияБлокировки = Новый Структура;
		ЗначенияБлокировки.Вставить("Ссылка",      Касса.ОбособленноеПодразделение);
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировка, ЗначенияБлокировки, , Ложь, "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("ДатаКонцаГода", КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Касса.ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерОрдера КАК НомерОрдера
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Организация = &Организация
	|	//самого себя не учитываем
	|	И ПриходныйКассовыйОрдер.Ссылка <> &Ссылка
	|	И ПриходныйКассовыйОрдер.ВалютаДокумента = &ВалютаДокумента	
	|	И ПриходныйКассовыйОрдер.Касса.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|	И ПриходныйКассовыйОрдер.Дата >= &ДатаНачалаГода
	|	И ПриходныйКассовыйОрдер.Дата <= &ДатаКонцаГода";

	СписокОрдеров = Запрос.Выполнить().Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	 
	ТаблицаЗначений.Колонки.Добавить("Номер"); 
	ТаблицаЗначений.Колонки.Добавить("Длина"); 

	Пока СписокОрдеров.Следующий() Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить(); 
		НоваяСтрока.Номер = СписокОрдеров.НомерОрдера; 
		НоваяСтрока.Длина = СтрДлина(СписокОрдеров.НомерОрдера); 
	КонецЦикла;
	
	ТаблицаЗначений.Сортировать("Длина Убыв, Номер Убыв");
	
	Попытка
		НомерОрдераЧисло = Число(ТаблицаЗначений[0].Номер) + 1;
		НомерОрдера 	 = Формат(НомерОрдераЧисло, "ЧГ=0");
	Исключение
		НомерОрдера = 1;
	КонецПопытки;
	
КонецПроцедуры

#Если Клиент Тогда
	
// Процедура заполняет реквизиты, используемые для формирования печатной формы (ПринтоОт, 
// Основание и Приложение). 
// Параметры:
//  ЧтоИзменилось - имя реквизита документа
//
Процедура ЗаполнитьРеквизитыПечати(ЧтоИзменилось = Неопределено) Экспорт

	// если не передали название реквизита считаем, что это ВидОперации.
	// Как следствие будет проведено заполнение всех реквизитов по-умолчанию.
	Если ЧтоИзменилось = Неопределено Тогда
	
		ЧтоИзменилось = "ВидОперации";
	
	КонецЕсли; 
	
	Если  ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
	//Смартис Лиманчук начало 02.10.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателяНал 
	//Смартис Лиманчук окончание 02.10.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком 
	  //Смартис Лиманчук начало 05.11.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщикомНал 
	  //Смартис Лиманчук окончание 05.11.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами 
	  //Смартис Лиманчук начало 05.11.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентамиНал 
	  //Смартис Лиманчук окончание 05.11.2012
	  //Смартис Лиманчук начало 05.11.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентамиНал
	  //Смартис Лиманчук окончание 05.11.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда 
		
		// ПринятоОт
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			ПринятоОт = ?(Контрагент.НаименованиеПолное="", Контрагент.Наименование, Контрагент.НаименованиеПолное);
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "ДоговорКонтрагента" 
			ИЛИ ЧтоИзменилось = "Сделка" Тогда
			
			Основание = "";	
			
			РасшифровкаКопия = РасшифровкаПлатежа.Выгрузить();
			РасшифровкаКопия.Свернуть("ДоговорКонтрагента, Сделка","");
			РасшифровкаКопия.Сортировать("ДоговорКонтрагента, Сделка");
			
			ТекДоговор = Неопределено;
			
			Для Инд = 0 По РасшифровкаКопия.Количество() - 1 Цикл
				
				СтрокаРасшифровки = РасшифровкаКопия[Инд];
				
				Шапка = Новый Структура();
				Шапка.Вставить("ДоговорКонтрагента", 			СтрокаРасшифровки.ДоговорКонтрагента);
				Шапка.Вставить("ДоговорНаименованиеДляПечати", 	СтрокаРасшифровки.ДоговорКонтрагента.НаименованиеДляПечати);
				Шапка.Вставить("ДоговорВедениеВзаиморасчетов",  СтрокаРасшифровки.ДоговорКонтрагента.ВедениеВзаиморасчетов);
				Шапка.Вставить("ПечататьСделку", 				СтрокаРасшифровки.ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов);
				Шапка.Вставить("Сделка", 						СтрокаРасшифровки.Сделка);	
				
				// Выводим дополнительно информацию о договоре и сделке
				Если НЕ ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента Тогда
				
					СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
				    ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента;
					
				Иначе	
					
					СписокДополнительныхПараметров = "";
					
				КонецЕсли;
				
				Если     Шапка.ПечататьСделку = Истина 
					И ЗначениеЗаполнено(Шапка.Сделка) 
					//Смартис Лиманчук начало 05.11.2012
					И НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентамиНал
					//Смартис Лиманчук окончание 05.11.2012
					И НЕ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда
					СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
				КонецЕсли;
				
				МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,"uk");
				
				Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
					Основание = Основание + СтруктураСтроки.НазваниеПараметра + " " + СтруктураСтроки.ЗначениеПараметра + ", ";
				КонецЦикла;	
				
				
			КонецЦикла;
			
			// обрежем последнюю запятую
			Если Прав(Основание, 2) = ", " Тогда
				Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
			КонецЕсли;

		КонецЕсли;
		
		// Приложение
		// не заполняется ни в одном случае
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
		  //Смартис Лиманчук начало 01.11.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетникомНал
		  //Смартис Лиманчук окончание 01.11.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником
		  //Смартис Лиманчук начало 05.11.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботникомНал
		  //Смартис Лиманчук окончание 05.11.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда

		// ПринятоОт
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			ПринятоОт = "";	
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",?(Дата = '00010101', ОбщегоНазначения.ПолучитьРабочуюДату(), Дата));
			//Смартис Лиманчук начало 05.11.2012
			//ФизЛицо = ?(ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником,Контрагент.Физлицо,Контрагент);
			ФизЛицо = ?((ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботникомНал),Контрагент.Физлицо,Контрагент);
			//Смартис Лиманчук окончание 05.11.2012
			Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);

			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда

				ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
							  Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), "")
							  ,"");

			КонецЕсли;
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "РасчетныйДокумент" Тогда
			
			Основание = "";	
			
			Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
				
				НазваниеДокумента = "";
				Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
					НазваниеДокумента = "Видатковий касовий ордер";		
				//Смартис Лиманчук начало 01.11.2012
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетникомНал Тогда
					НазваниеДокумента = "Видатковий касовий ордер";		
				//Смартис Лиманчук окончание 01.11.2012
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
					НазваниеДокумента = "Договір займа";	
				КонецЕсли;
				
				Основание = НазваниеДокумента + " № " + ОбщегоНазначения.ПолучитьНомерНаПечать(РасчетныйДокумент) + " від " + Формат(РасчетныйДокумент.Дата, "ДФ=dd.MM.yyyy");
				
			КонецЕсли;			
			
		КонецЕсли;		
		
	//Смартис Лиманчук начало 06.11.2012
	//ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанкеНал) Тогда
	//Смартис Лиманчук окончание 06.11.2012
		
		// ПринятоОт
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "СчетОрганизации" Тогда
			
			ПринятоОт = "";	
			Если Не СчетОрганизации.Пустая() Тогда
			
				ПринятоОт = "р/р " + СчетОрганизации.НомерСчета + " у " + СчетОрганизации.Банк;
			
			КонецЕсли; 
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "ДенежныйЧек" Тогда
			
			Основание = "";	
			Если Не ДенежныйЧек.Пустая() Тогда
			
				Основание = "Чек № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ДенежныйЧек) + " від " + Формат(ДенежныйЧек.Дата, "ДФ=dd.MM.yyyy");
				
			КонецЕсли; 
			
		КонецЕсли;		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка 
		//Смартис Лиманчук начало 01.11.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал
		//Смартис Лиманчук окончание 01.11.2012
		//Смартис Лиманчук начало 05.11.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочееНал
		//Смартис Лиманчук окончание 05.11.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		// ПринятоОт
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			ПринятоОт = "";	
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			Основание = "";	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьПКО (Вариант2009 = Истина)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерОрдера КАК Номер,
	|	СчетУчетаРасчетовСКонтрагентом КАК Счет,
	|	Дата  КАК ДатаДокумента,
	|	Организация КАК Орган,
	|	Организация,
	|	Организация КАК Руководители,
	|	Касса.ОбособленноеПодразделение КАК ОбособленноеПодразделениеОрганизации,
	|   Касса.ОбособленноеПодразделение.НаименованиеПолное КАК ОбособленноеПодразделениеОрганизацииПредставление,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение               КАК Подразделение,
	|	Контрагент,
	|	Контрагент.Представление КАК Контрагент,
	|	ПринятоОт      КАК ПринятоОт,
	|	Основание      КАК Основание,
	|	Приложение     КАК Приложение,
	|	СуммаДокумента КАК Сумма,
	|	ВалютаДокумента,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	СтавкаНДС
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	
	Если Вариант2009 Тогда 
		Макет = ПолучитьОбщийМакет("КО1_2009")
	Иначе
		Макет = ПолучитьОбщийМакет("КО1")
	КонецЕсли;

	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Выводим шапку ПКО

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Орган, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПолноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.Сумма		      = Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+?(НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета," "+СокрЛП(Шапка.ВалютаДокумента),"");
	ОбластьМакета.Параметры.СуммаПрописью     = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерОрдера    = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	
	ОбластьМакета.Параметры.ПолноеНаименование= СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакета.Параметры.Сумма             = ОбщегоНазначения.ФорматСумм(Шапка.Сумма, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью     = ФорматироватьСуммуПрописи(Шапка.Сумма, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.КодПоЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	//СуммаНДС = РассчитатьСуммуНДС(СуммаДокумента, Истина, Истина,ПолучитьСтавкуНДС(СтавкаНДС));
	//Смартис Лиманчук начало 01.11.2012
	//Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
	Если (ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал) Тогда
	//Смартис Лиманчук окончание 01.11.2012
		ТаблицаВыручки = ПриемРозничнойВыручки.Выгрузить();
		Для каждого Строка Из ТаблицаВыручки Цикл
			Если Строка.Возврат = Истина Тогда
				Строка.СуммаНДС = - Строка.СуммаНДС;	
			КонецЕсли; 
		КонецЦикла; 
		
		СуммаНДС = ТаблицаВыручки.Итог("СуммаНДС");	
		
	Иначе
		
		СуммаНДС = РасшифровкаПлатежа.Итог("СуммаНДС");	
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Если Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте);
	Иначе
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проводки.СчетКт КАК СчетКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Проводки
	|
	|ГДЕ
	|	Проводки.Регистратор = &ТекущийДокумент И
	|	Проводки.СчетДт = &Счет" + 
	?(Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета,"
	|// проводки по курсовой разнице (без валютной суммы) пропускаем
	|	И Проводки.ВалютнаяСуммаДт <>0","");

	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	
	СписокСчетов = ""; Разделитель = "";
	
	Пока ВыборкаСчетов.Следующий() Цикл
		Если Найти(СписокСчетов, Строка(ВыборкаСчетов.СчетКТ)) <> 0 Тогда
			Продолжить;
		КонецЕсли;	
		СписокСчетов = СписокСчетов + Разделитель + Строка(ВыборкаСчетов.СчетКТ);
		Разделитель = ", ";
	КонецЦикла;	
    ОбластьМакета.Параметры.Счет = СписокСчетов;
	
	ТабДокумент.Вывести(ОбластьМакета);
	Если ВыводитьНаПечатьСуммуНДС И НЕ Вариант2009 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.ВТомЧисле = "0,00"+ " " + СокрП(Шапка.ВалютаДокумента);
		Иначе
			ОбластьМакета.Параметры.ВТомЧисле = ОбщегоНазначения.ФорматСумм(СуммаНДС, Шапка.ВалютаДокумента);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("Дно");
	
	Если НЕ ЗначениеЗаполнено(Шапка.ОбособленноеПодразделениеОрганизации) Тогда
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента);
	Иначе
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОбособленногоПодразделения(Шапка.ОбособленноеПодразделениеОрганизации, Шапка.ДатаДокумента);
	КонецЕсли;
	
    Если ЗначениеЗаполнено(Руководители.РуководительФИО) Тогда
		Руководитель =ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.РуководительФИО.Фамилия, Руководители.РуководительФИО.Имя, Руководители.РуководительФИО.Отчество, Истина); // Кратко
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерФИО) Тогда
		Бухгалтер    = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.ГлавныйБухгалтерФИО.Фамилия, Руководители.ГлавныйБухгалтерФИО.Имя, Руководители.ГлавныйБухгалтерФИО.Отчество, Истина); // Кратко
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.КассирФИО) Тогда
		Кассир       = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.КассирФИО.Фамилия, Руководители.КассирФИО.Имя, Руководители.КассирФИО.Отчество, Истина); // Кратко
    КонецЕсли;
	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	ОбластьМакета.Параметры.ФИОКассира = Кассир;
	Если НЕ Вариант2009 Тогда 
		ОбластьМакета.Параметры.ДатаДокумента = Шапка.ДатаДокумента;
	КонецЕсли;
	ОбластьМакета.Параметры.Приложение = Приложение;

	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

	Возврат ТабДокумент;

КонецФункции // ПечатьПКО()
Функция ПечатьПКОвБланк()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерОрдера КАК Номер,
	|	СчетУчетаРасчетовСКонтрагентом КАК Счет,
	|	Дата  КАК ДатаДокумента,
	|	Организация КАК Орган,
	|	Организация,
	|	Организация КАК Руководители,
	|	Касса.ОбособленноеПодразделение КАК ОбособленноеПодразделениеОрганизации,
	|   Касса.ОбособленноеПодразделение.НаименованиеПолное КАК ОбособленноеПодразделениеОрганизацииПредставление,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение               КАК Подразделение,
	|	Контрагент,
	|	Контрагент.Представление КАК Контрагент,
	|	ПринятоОт      КАК ПринятоОт,
	|	Основание      КАК Основание,
	|	Приложение     КАК Приложение,
	|	СуммаДокумента КАК Сумма,
	|	ВалютаДокумента,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	СтавкаНДС
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1ВБланк";
	Макет       = ПолучитьОбщийМакет("КО1ВБланк");
	КодЯзыкаПечать = "uk";
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Выводим шапку ПКО

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Орган, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка); 	
	
	ОбластьМакета.Параметры.ПолноеНаименование= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.Сумма		      = Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+?(НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета," "+СокрЛП(Шапка.ВалютаДокумента),"");
	ОбластьМакета.Параметры.СуммаПрописью     = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерОрдера       = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	
	ОбластьМакета.Параметры.ПолноеНаименование= СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакета.Параметры.Сумма             = ОбщегоНазначения.ФорматСумм(Шапка.Сумма, Шапка.ВалютаДокумента);
	
	СуммаПрописью = СтрЗаменить( СокрЛП(ЧислоПрописью(Шапка.Сумма, "Л = "+КодЯзыкаПечать+"; НП = Ложь; НД = Ложь", "гривна, гривны, гривен, ж, копейка, копейки, копеек, ж, 2")),
	                             Символы.НПП, " "); 
								 
	ОбластьМакета.Параметры.СуммаПрописью = СтрЗаменить(СокрЛП(Лев(СуммаПрописью, СтрДлина(СуммаПрописью)-2)) + 
	  Символы.НПП+Символы.НПП+Символы.НПП+Символы.НПП+Символы.НПП + СокрЛП(Прав(СуммаПрописью, 2)),
	  Символы.НПП, Символы.НПП+Символы.НПП+Символы.НПП); 
	  
	ОбластьМакета.Параметры.ПринятоОт = "                                    " + ОбластьМакета.Параметры.ПринятоОт;	
	
	ЧислоМесяц = СокрЛП(Формат(Шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ=ддММММ"));
	ОбластьМакета.Параметры.Месяц = Прав(ЧислоМесяц, СтрДлина(ЧислоМесяц)-2);
	ОбластьМакета.Параметры.Число = Лев(ЧислоМесяц, 2);
	ОбластьМакета.Параметры.Год = СокрЛП(Формат(Шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ=гг")); 
		
	ОбластьМакета.Параметры.КодПоЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	
	//Смартис Лиманчук начало 01.11.2012
	//Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
	Если (ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал) Тогда
	//Смартис Лиманчук окончание 01.11.2012
		ТаблицаВыручки = ПриемРозничнойВыручки.Выгрузить();
		Для каждого Строка Из ТаблицаВыручки Цикл
			Если Строка.Возврат = Истина Тогда
				Строка.СуммаНДС = - Строка.СуммаНДС;	
			КонецЕсли; 
		КонецЦикла; 
		
		СуммаНДС = ТаблицаВыручки.Итог("СуммаНДС");	
		
	Иначе
		
		СуммаНДС = РасшифровкаПлатежа.Итог("СуммаНДС");	
		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Шапка.ОбособленноеПодразделениеОрганизации) Тогда
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента);
	Иначе
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОбособленногоПодразделения(Шапка.ОбособленноеПодразделениеОрганизации, Шапка.ДатаДокумента);
	КонецЕсли;
	
    Если ЗначениеЗаполнено(Руководители.РуководительФИО) Тогда
		Руководитель =ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.РуководительФИО.Фамилия, Руководители.РуководительФИО.Имя, Руководители.РуководительФИО.Отчество, Истина); // Кратко
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерФИО) Тогда
		Бухгалтер    = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.ГлавныйБухгалтерФИО.Фамилия, Руководители.ГлавныйБухгалтерФИО.Имя, Руководители.ГлавныйБухгалтерФИО.Отчество, Истина); // Кратко
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.КассирФИО) Тогда
		Кассир       = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.КассирФИО.Фамилия, Руководители.КассирФИО.Имя, Руководители.КассирФИО.Отчество, Истина); // Кратко
    КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Если Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте);
	Иначе
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проводки.СчетКт КАК СчетКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Проводки
	|
	|ГДЕ
	|	Проводки.Регистратор = &ТекущийДокумент И
	|	Проводки.СчетДт = &Счет" + 
	?(Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета,"
	|// проводки по курсовой разнице (без валютной суммы) пропускаем
	|	И Проводки.ВалютнаяСуммаДт <>0","");

	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	
	СписокСчетов = ""; Разделитель = "";
	
	Пока ВыборкаСчетов.Следующий() Цикл
		Если Найти(СписокСчетов, Строка(ВыборкаСчетов.СчетКТ)) <> 0 Тогда
			Продолжить;
		КонецЕсли;	
		СписокСчетов = СписокСчетов + Разделитель + Строка(ВыборкаСчетов.СчетКТ);
		Разделитель = ", ";
	КонецЦикла;	
    ОбластьМакета.Параметры.Счет = СписокСчетов;

	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху = 5;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт; 

	Возврат ТабДокумент;

КонецФункции // ПечатьПКОвБланк()  

Функция ПечатьПКОвБланкА4()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерОрдера КАК Номер,
	|	СчетУчетаРасчетовСКонтрагентом КАК Счет,
	|	Дата  КАК ДатаДокумента,
	|	Организация КАК Орган,
	|	Организация,
	|	Организация КАК Руководители,
	|	Касса.ОбособленноеПодразделение КАК ОбособленноеПодразделениеОрганизации,
	|   Касса.ОбособленноеПодразделение.НаименованиеПолное КАК ОбособленноеПодразделениеОрганизацииПредставление,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение               КАК Подразделение,
	|	Контрагент,
	|	Контрагент.Представление КАК Контрагент,
	|	ПринятоОт      КАК ПринятоОт,
	|	Основание      КАК Основание,
	|	Приложение     КАК Приложение,
	|	СуммаДокумента КАК Сумма,
	|	ВалютаДокумента,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	СтавкаНДС
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1ВБланкА4";
	Макет       = ПолучитьОбщийМакет("КО1ВБланкА4");
	КодЯзыкаПечать = "uk";
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Выводим шапку ПКО

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Орган, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка); 	
	
	ОбластьМакета.Параметры.ПолноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.Сумма		      = Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+?(НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета," "+СокрЛП(Шапка.ВалютаДокумента),"");
	ОбластьМакета.Параметры.СуммаПрописью     = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерОрдера    = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	
	ОбластьМакета.Параметры.ПолноеНаименование = СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакета.Параметры.Сумма             = ОбщегоНазначения.ФорматСумм(Шапка.Сумма, Шапка.ВалютаДокумента);
	
	СуммаПрописью = СтрЗаменить( СокрЛП(ЧислоПрописью(Шапка.Сумма, "Л = "+КодЯзыкаПечать+"; НП = Ложь; НД = Ложь", "гривна, гривны, гривен, ж, копейка, копейки, копеек, ж, 2")),
	                             Символы.НПП, " "); 
								 
	ОбластьМакета.Параметры.СуммаПрописью = СтрЗаменить(СокрЛП(Лев(СуммаПрописью, СтрДлина(СуммаПрописью)-2)) + 
	  Символы.НПП+Символы.НПП+Символы.НПП+Символы.НПП+Символы.НПП + СокрЛП(Прав(СуммаПрописью, 2)),
	  Символы.НПП, Символы.НПП+Символы.НПП+Символы.НПП); 
	  
	ОбластьМакета.Параметры.ПринятоОт = "                                    " + ОбластьМакета.Параметры.ПринятоОт;	
	
	ЧислоМесяц = СокрЛП(Формат(Шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ=ддММММ"));
	ОбластьМакета.Параметры.Месяц = Прав(ЧислоМесяц, СтрДлина(ЧислоМесяц)-2);
	ОбластьМакета.Параметры.Число = Лев(ЧислоМесяц, 2);
	ОбластьМакета.Параметры.Год = СокрЛП(Формат(Шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ=гг")); 
		
	ОбластьМакета.Параметры.КодПоЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	
	//Смартис Лиманчук начало 01.11.2012
	//Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
	Если (ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка или ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал) Тогда
	//Смартис Лиманчук окончание 01.11.2012
		ТаблицаВыручки = ПриемРозничнойВыручки.Выгрузить();
		Для каждого Строка Из ТаблицаВыручки Цикл
			Если Строка.Возврат = Истина Тогда
				Строка.СуммаНДС = - Строка.СуммаНДС;	
			КонецЕсли; 
		КонецЦикла; 
		
		СуммаНДС = ТаблицаВыручки.Итог("СуммаНДС");	
		
	Иначе
		
		СуммаНДС = РасшифровкаПлатежа.Итог("СуммаНДС");	
		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Шапка.ОбособленноеПодразделениеОрганизации) Тогда
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента);
	Иначе
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОбособленногоПодразделения(Шапка.ОбособленноеПодразделениеОрганизации, Шапка.ДатаДокумента);
	КонецЕсли;
	
    Если ЗначениеЗаполнено(Руководители.РуководительФИО) Тогда
		Руководитель =ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.РуководительФИО.Фамилия, Руководители.РуководительФИО.Имя, Руководители.РуководительФИО.Отчество, Истина); // Кратко
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерФИО) Тогда
		Бухгалтер    = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.ГлавныйБухгалтерФИО.Фамилия, Руководители.ГлавныйБухгалтерФИО.Имя, Руководители.ГлавныйБухгалтерФИО.Отчество, Истина); // Кратко
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.КассирФИО) Тогда
		Кассир       = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.КассирФИО.Фамилия, Руководители.КассирФИО.Имя, Руководители.КассирФИО.Отчество, Истина); // Кратко
    КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Если Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте);
	Иначе
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проводки.СчетКт КАК СчетКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Проводки
	|
	|ГДЕ
	|	Проводки.Регистратор = &ТекущийДокумент И
	|	Проводки.СчетДт = &Счет" + 
	?(Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета,"
	|// проводки по курсовой разнице (без валютной суммы) пропускаем
	|	И Проводки.ВалютнаяСуммаДт <>0","");

	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	
	СписокСчетов = ""; Разделитель = "";
	
	Пока ВыборкаСчетов.Следующий() Цикл
		Если Найти(СписокСчетов, Строка(ВыборкаСчетов.СчетКТ)) <> 0 Тогда
			Продолжить;
		КонецЕсли;	
		СписокСчетов = СписокСчетов + Разделитель + Строка(ВыборкаСчетов.СчетКТ);
		Разделитель = ", ";
	КонецЦикла;	
    ОбластьМакета.Параметры.Счет = СписокСчетов;

	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.АвтоМасштаб = Ложь;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;  

	Возврат ТабДокумент;

КонецФункции // ПечатьПКОвБланкА4А4()  

// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ПКО" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьПКО();
		
	ИначеЕсли ИмяМакета = "ПКОДо2009" Тогда
		
		ТабДокумент = ПечатьПКО(Ложь);
		
	ИначеЕсли ИмяМакета = "ПКОвБланк" Тогда
		
		ТабДокумент = ПечатьПКОвБланк();

	ИначеЕсли ИмяМакета = "ПКОвБланкА4" Тогда
		
		ТабДокумент = ПечатьПКОвБланкА4(); 

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;

	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПКО, ПКОДо2009, ПКОвБланк, ПКОвБланкА4",
	                        "Приходный кассовый ордер",
	                        "Приходный кассовый ордер (версия до 16 июня 2009г)",
	                        "Приходный кассовый ордер (печать в бланк, формат А5, ориентация альбомная)",
							"Приходный кассовый ордер (печать в бланк, формат А4, ориентация «портрет»)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	
	Если Не СтрокаПлатеж=Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

// Формирует остаток по договору займа с работником при соответствующем виде операции
//
Процедура ПолучитьОстатокПоДоговоруЗаймаУпр(Основание) Экспорт
	
	СтруктураДолг=Новый Структура;
	СтруктураДолг.Вставить("ОсновнойДолг",0);
	СтруктураДолг.Вставить("Проценты",0);
	СтруктураДолг.Вставить("Валюта",мВалютаРегламентированногоУчета);
	
	Если ЗначениеЗаполнено(Основание) Тогда		
		
		Если Основание.ОтражатьВБухгалтерскомУчете Тогда
			ИмяРегистра="ПогашениеЗаймовРаботникамиОрганизаций";
			СтруктураДолг.Вставить("Валюта",мВалютаРегламентированногоУчета);
		Иначе
			ИмяРегистра="ПогашениеЗаймовРаботниками";
			//@skip-check undefined-function
			СтруктураДолг.Вставить("Валюта",глЗначениеПеременной("ВалютаУправленческогоУчета"));
		КонецЕсли;
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЕстьNull(ПогашениеЗаймовОстатки.ОсновнойДолгОстаток, 0) КАК ОсновнойДолгОстаток,
		|	ЕстьNull(ПогашениеЗаймовОстатки.ПроцентыОстаток, 0) КАК ПроцентыОстаток
		|ИЗ
		|	РегистрНакопления."+ИмяРегистра+".Остатки(, ДоговорЗайма=&ДоговорЗайма) КАК ПогашениеЗаймовОстатки";
		
		Запрос.УстановитьПараметр("ДоговорЗайма",Основание);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			СтруктураДолг.Вставить("ОсновнойДолг",Результат.ОсновнойДолгОстаток);
			СтруктураДолг.Вставить("Проценты",Результат.ПроцентыОстаток);
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры // ПолучитьОстатокПоДоговоруЗаймаУпр()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморасчетыСПодотчетнымиЛицами".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодОтчетник", Контрагент);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетовПодотчетника", ВалютаВзаиморасчетовПодотчетника);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                          ФизЛицо = &ПодОтчетник
	|	                                                        И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                        И Валюта = &ВалютаВзаиморасчетовПодотчетника)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток > 0
	|";
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.СуммаДолга;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
						ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
						СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
						СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
						
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

	
// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);

	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма > 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма;
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
			                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                            ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
										
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказуУпр()

// Процедура выполняет заполнение суммы документа по регистру "РозничнаяВыручкаКомпании".
//
// Параметры:
//  КассаККМ - ссылка на справочник "Кассы ККМ".
//
Процедура ЗаполнитьПоРозничнойВыручкеУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	//Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
	//	Запрос.УстановитьПараметр("РозничнаяТочка", ДокументОснование.КассаККМ);
	//Иначе
	//	Запрос.УстановитьПараметр("РозничнаяТочка", ДокументОснование.Склад);
	//КонецЕсли;
	Запрос.УстановитьПараметр("РозничнаяТочка", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МоментВремени", ДокументОснование.МоментВремени());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОборотыРегл.СтавкаНДС			КАК СтавкаНДС,
	|	ОборотыРегл.ВидРозничнойВыручки КАК ВидРозничнойВыручки,
	|	ЕСТЬNULL(ОборотыРегл.СуммаОборот, 0)		КАК СуммаОборот,
	|	ЕСТЬNULL(ОборотыРегл.СуммаНДСОборот, 0)		КАК СуммаНДСОборот,
	|	ЕСТЬNULL(ОстаткиРегл.СуммаОстаток, 0)		КАК СуммаОстаток,
	|	ЕСТЬNULL(ОстаткиРегл.СуммаНДСОстаток, 0)	КАК СуммаНДСОстаток,
	|	ЕСТЬNULL(ОстаткиУпр.СуммаОстаток, 0) 		КАК СуммаОстатокУпр
	|ИЗ
	|	РегистрНакопления.РозничнаяВыручка.Остатки(, РозничнаяТочка = &РозничнаяТочка) КАК ОстаткиУпр,
	|	РегистрНакопления.РозничнаяВыручкаОрганизаций.Остатки(, Организация = &Организация И РозничнаяТочка = &РозничнаяТочка) КАК ОстаткиРегл
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РозничнаяВыручкаОрганизаций.Обороты(&МоментВремени,&МоментВремени,Регистратор,Организация = &Организация И РозничнаяТочка = &РозничнаяТочка) КАК ОборотыРегл 
	|		ПО     ОстаткиРегл.СтавкаНДС 		   = ОборотыРегл.СтавкаНДС
	|			 И ОстаткиРегл.ВидРозничнойВыручки = ОборотыРегл.ВидРозничнойВыручки";

	СуммаПродаж 		 = 0;
	СуммаВозврата 		 = 0;
    СуммаРазменнойМонеты = 0;
	ОстатокВКассе 		 = 0;
	ПерваяСтрока 		 = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПерваяСтрока Тогда
			
			ПерваяСтрока = Ложь;
			
			ОстатокВКассе =  Выборка.СуммаОстатокУпр;
			Если ОстатокВКассе < 0 Тогда
				ОстатокВКассе = 0;
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если Выборка.ВидРозничнойВыручки = NULL Тогда
		    // нет розничной выручки
			Прервать;
		
		КонецЕсли;
		
		Сумма = Мин(Макс(Выборка.СуммаОборот, - Выборка.СуммаОборот), Макс(Выборка.СуммаОстаток, -Выборка.СуммаОстаток));
		Если Сумма > 0 Тогда
			
			СтрокаВыручки = ПриемРозничнойВыручки.Добавить();
			
			СтрокаВыручки.Сумма	 	= Сумма;
			СтрокаВыручки.СтавкаНДС = Выборка.СтавкаНДС;
			СтрокаВыручки.СуммаНДС  = Мин(Макс(Выборка.СуммаНДСОборот, - Выборка.СуммаНДСОборот), Макс(Выборка.СуммаНДСОстаток, -Выборка.СуммаНДСОстаток));
			СтрокаВыручки.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
			СтрокаВыручки.Возврат 	   = (Выборка.ВидРозничнойВыручки = Перечисления.РасчетыВозврат.Возврат);
			
			Если СтрокаВыручки.Возврат Тогда
				СуммаВозврата = СуммаВозврата + СтрокаВыручки.Сумма
			Иначе
				СуммаПродаж = СуммаПродаж + СтрокаВыручки.Сумма
			КонецЕсли
	
		КонецЕсли; 
		
	КонецЦикла;
	
	// уменьшаем сумму возврата наличных на возвраты по картам и кредитам.
	Если СуммаОплатыБанковскимиКредитами < 0 Тогда
		СуммаВозврата = Мин(0, СуммаВозврата + СуммаОплатыБанковскимиКредитами);
	КонецЕсли;
	Если СуммаОплатыПлатежнымиКартами < 0 Тогда
		СуммаВозврата = Мин(0, СуммаВозврата + СуммаОплатыПлатежнымиКартами);
	КонецЕсли;
	
	СуммаПлатежа = СуммаПродаж - СуммаВозврата - СуммаОплатыПлатежнымиКартами - СуммаОплатыБанковскимиКредитами;
	
	Если СуммаПлатежа <= 0 Тогда
	
		СуммаРазменнойМонеты =  ОстатокВКассе - СуммаПлатежа; //>=0
	    
	КонецЕсли; 
	
	СтрокаПлатеж.СуммаПлатежа = СуммаПлатежа + СуммаРазменнойМонеты; //>=0
	
	СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;

КонецПроцедуры // ЗаполнитьПоРозничнойВыручкеУпр()

Процедура ЗаполнитьПоСуммеДокументаУпр(СтрокаПлатеж)
	
	СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
	КурсОснования=СтруктураКурсаОснования.Курс;
	КратностьОснования=СтруктураКурсаОснования.Кратность;

	ОснованиеСуммаДокумента  = ДокументОснование.СуммаДокумента;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ОснованиеСуммаДокумента = ?(ДокументОснование.УдержатьКомиссионноеВознаграждение, ОснованиеСуммаДокумента - ДокументОснование.СуммаВознаграждения, ОснованиеСуммаДокумента);
	КонецЕсли;
	
	СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, ДокументОснование.ВалютаДокумента, ДокументОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
									 КурсОснования, ДокументОснование.КурсВзаиморасчетов, КратностьОснования, ДокументОснование.КратностьВзаиморасчетов);
	СуммаДокумента      = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
КонецПроцедуры

//Заполняет документ на основании расходного кассового ордера
//
Процедура ЗаполнитьПоРКОУпр()
	#Если Не Клиент И Не ВнешнееСоединение Тогда
		
		глТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		
	#КонецЕсли	
	
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		
		Контрагент = ДокументОснование.Контрагент;
		
		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента  	 = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
				Если ЗначениеЗаполнено(СтрокаОснование.Проект) Тогда
					СтрокаПлатеж.Проект=СтрокаОснование.Проект;
				КонецЕсли;
			КонецЕсли;
			СтрокаПлатеж.ЗаТару   				 = СтрокаОснование.ЗаТару;
			
			СтрокаПлатеж.СуммаПлатежа=СтрокаОснование.СуммаПлатежа;
						
			СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			Если СтрокаОснование.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС=СтрокаОснование.СтавкаНДС;
			
		КонецЦикла;
		
		#Если Клиент Тогда
		//@skip-check undefined-function
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		#КонецЕсли
		
		Для Индекс=0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл
			
			СтрокаПлатеж=РасшифровкаПлатежа[Индекс];
			СтрокаОснование=ДокументОснование.РасшифровкаПлатежа[Индекс];
			
			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
				И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
						
				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
				ДокументОснование.ВалютаДокумента, 
				СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
				КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					
					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;
					
				Иначе
					
					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
					
				КонецЕсли;
				
			КонецЕсли;	
			
			СтрокаПлатеж.СтавкаНДС=СтрокаОснование.СтавкаНДС;
			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЦикла;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
						
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		
		// Отказываем
		Возврат;
		
	//Смартис Лиманчук начало 04.10.2012
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателюНал Тогда
		
		// Отказываем
		Возврат;
		
	//Смартис Лиманчук окончание 04.10.2012
	//Смартис Лиманчук начало 01.11.2012 
	//ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
	ИначеЕсли (ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику ИЛИ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал) Тогда
	//Смартис Лиманчук окончание 01.11.2012
		
		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
		
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником;
		//Смартис Лиманчук начало 01.11.2012
		Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал Тогда
			ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетникомНал;
		КонецЕсли;
		//Смартис Лиманчук окончание 01.11.2012
		
		Контрагент                       = ДокументОснование.Контрагент;
		РасчетныйДокумент	             = ДокументОснование;
		ВалютаВзаиморасчетовПодотчетника = ДокументОснование.ВалютаВзаиморасчетовРаботника;
		СтруктураКурса                   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурса.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурса.Кратность;
		
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ДокументОснование.РасшифровкаПлатежа.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(ДокументОснование.РасшифровкаПлатежа[0].Проект) Тогда
					СтрокаПлатеж.Проект=ДокументОснование.РасшифровкаПлатежа[0].Проект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		
		// Дальше заполняем по умолчанию
		Возврат;
		
	//Смартис Лиманчук начало 06.11.2012
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочееНал Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочееНал;
		
		// Дальше заполняем по умолчанию
		Возврат;
		
	//Смартис Лиманчук окончание 06.11.2012
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		// Дальше заполняем по умолчанию
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		// Дальше заполняем по умолчанию
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками;
		
		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
		
		Контрагент = ДокументОснование.Контрагент;	
		Организация = ДокументОснование.Организация;			
		ВалютаВзаиморасчетовПодотчетника = ДокументОснование.ВалютаВзаиморасчетовРаботника;
		Если ВалютаВзаиморасчетовПодотчетника=ВалютаДокумента Тогда
			Запрос       = Новый Запрос;
			Запрос.УстановитьПараметр("НаДату",        Дата);
			Запрос.УстановитьПараметр("ФизЛицо",       Контрагент);
			Запрос.УстановитьПараметр("Организация",   Организация);
			
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	Работники.Сотрудник КАК Сотрудник
			               |ИЗ
			               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НаДату, 
						   |	                Сотрудник.ФизЛицо = &ФизЛицо И Организация = &Организация) КАК Работники
			               |
			               |";
			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				Контрагент = Результат.Сотрудник;
			КонецЕсли;
		КонецЕсли;
		РасчетныйДокумент=ДокументОснование.РасчетныйДокумент;
		
		СтруктураКурса                   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурса.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурса.Кратность;
		
		#Если Клиент Тогда
		//@skip-check undefined-function
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		#КонецЕсли
		
		ПолучитьОстатокПоДоговоруЗаймаУпр(РасчетныйДокумент);
			
		ВалютаУчета=СтруктураДолг.Валюта;
		
		СтруктураКурсУчета=МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУчета, РасчетныйДокумент.Дата);
		
		СуммаДокумента=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураДолг.ОсновнойДолг+СтруктураДолг.Проценты, 
		                            ВалютаУчета, ВалютаДокумента,
		                            СтруктураКурсУчета.Курс, КурсДокумента,
		                            СтруктураКурсУчета.Кратность, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
		                            ВалютаДокумента,ВалютаВзаиморасчетовПодотчетника,
		                            КурсДокумента,СтрокаПлатеж.КурсВзаиморасчетов, 
		                            КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);		
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ДокументОснование.РасшифровкаПлатежа.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(ДокументОснование.РасшифровкаПлатежа[0].Проект) Тогда
					СтрокаПлатеж.Проект=ДокументОснование.РасшифровкаПлатежа[0].Проект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		// Дальше заполняем по умолчанию
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоРКОУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("Касса");
	//Смартис Лиманчук начало 01.11.2012
	//Если НЕ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
	Если НЕ (ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал) Тогда
	//Смартис Лиманчук окончание 01.11.2012
		СтруктураПолей.Вставить("СуммаДокумента");
	КонецЕсли;
	
	//Смартис Лиманчук начало 05.11.2012
	//Если Не (ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее) Тогда
	Если Не (ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанкеНал ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочееНал) Тогда
	//Смартис Лиманчук окончание 05.11.2012
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		СтруктураПолей.Вставить("РасчетныйДокумент","Не указан договор займа");
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;
	//Смартис Лиманчук начало 06.11.2012
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанкеНал Тогда
		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;
	//Смартис Лиманчук окончание 06.11.2012

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком ИЛИ
		//Смартис Лиманчук начало 05.11.2012
		ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщикомНал ИЛИ
		//Смартис Лиманчук окончание 05.11.2012
		//Смартис Лиманчук начало 02.10.2012
		 ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателяНал ИЛИ
		//Смартис Лиманчук окончание 02.10.2012
		 ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

		 СтруктураПолей= Новый Структура("Организация,Касса,
	                        |Контрагент, СуммаДокумента, Ответственный");

	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		СтруктураПолей = Новый Структура("Организация,Касса,Контрагент,
	                        |ВалютаВзаиморасчетовПодотчетника, СуммаДокумента, Ответственный");
	//Смартис Лиманчук начало 01.11.2012
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетникомНал Тогда
		СтруктураПолей = Новый Структура("Организация,Касса,Контрагент,
	                        |ВалютаВзаиморасчетовПодотчетника, СуммаДокумента, Ответственный");
	//Смартис Лиманчук окончание 01.11.2012
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		СтруктураПолей = Новый Структура("Касса,Ответственный");
		
		Если ЗначениеЗаполнено(РасчетныйДокумент) 
		   И РасчетныйДокумент.ОтражатьВБухгалтерскомУчете Тогда
		   // займ в бух учете
		   СтруктураПолей.Вставить("Организация");
		   
	    КонецЕсли;							
		 
	Иначе
		СтруктураПолей= Новый Структура("Организация,Касса");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		
		Если Не Отказ Тогда
			
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента)

	ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	//Смартис Лиманчук начало 01.11.2012
	//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
	Если (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал) Тогда
	//Смартис Лиманчук окончание 01.11.2012
		ДвиженияПоРегистрамНалоговогоУчетаРозничныеПродажи(Режим, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(Режим, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       Касса);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              Дата);
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКассаОтправитель", СчетОрганизации);
		мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредствОтправитель",  Перечисления.ВидыДенежныхСредств.Безналичные);
		ПоДенежномуЧеку = НЕ ДенежныйЧек.Пустая();
		мСтруктураПараметровДенежныхСредств.Вставить("ПоДенежномуЧеку", ПоДенежномуЧеку);
	//Смартис Лиманчук начало 06.11.2012
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанкеНал Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКассаОтправитель", СчетОрганизации);
		мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредствОтправитель",  Перечисления.ВидыДенежныхСредств.Безналичные);
		ПоДенежномуЧеку = НЕ ДенежныйЧек.Пустая();
		мСтруктураПараметровДенежныхСредств.Вставить("ПоДенежномуЧеку", ПоДенежномуЧеку);
	//Смартис Лиманчук окончание 06.11.2012
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("СтруктураДолг", СтруктураДолг);
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.ПровестиПоступлениеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) И ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	//Смартис Лиманчук начало 05.11.2012
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщикомНал Тогда
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	//Смартис Лиманчук окончание 05.11.2012
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	//Смартис Лиманчук начало 02.10.2012
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателяНал Тогда
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	//Смартис Лиманчук окончание 02.10.2012
	Иначе
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, Дата, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента)

	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами",	ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",		ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("РежимПроведения",				РежимПроведения);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",				Дата);
	мСтруктураПараметровДенежныхСредств.Вставить("СчетОрганизации", 			Касса);
	мСтруктураПараметровДенежныхСредств.Вставить("Оплачено",					Истина);
	
	УправлениеДенежнымиСредствами.ПровестиПоступлениеДенежныхСредствРегл(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамНалоговогоУчетаРозничныеПродажи(Режим, Отказ, Заголовок,СтруктураШапкиДокумента);
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		Возврат;
	КонецЕсли;
				
	НаборДвижений   = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
	ТаблицаВыручки = ПриемРозничнойВыручки.Выгрузить();
	ТаблицаВыручки.Свернуть("Возврат,СтавкаНДС","Сумма,СуммаНДС");					
		
	ТаблицаВыручки.Колонки.Добавить("БазаНДС", 	  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаВыручки.Колонки.Добавить("СобытиеНДС");
	ТаблицаВыручки.Колонки.Добавить("НалоговоеНазначение");
	Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл
			
		СтрокаВыручки.БазаНДС = СтрокаВыручки.Сумма - СтрокаВыручки.СуммаНДС;
		Если СтрокаВыручки.Возврат = Истина Тогда
			СтрокаВыручки.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.ВозвратРозница;
		Иначе
			СтрокаВыручки.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.РеализацияРозница;
		КонецЕсли;
		
		// для розничных продаж налоговое назначение осталяем незаполненным.	
		//Если    СтрокаВыручки.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
		//	ИЛИ СтрокаВыручки.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		//	СтрокаВыручки.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ХозДеятельность;
		//Иначе
		//	СтрокаВыручки.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ХозДеятельностьНеОблагНДС;
		//КонецЕсли;
		
	КонецЦикла; 
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВыручки, ТаблицаДвижений);
		
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       						    		, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
		
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 И ТаблицаДвижений.Итог("СуммаНДС")<>0 И ТаблицаДвижений.Итог("БазаНДС")<>0 Тогда
			
		НаборДвижений.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
			
	КонецЕсли;
		
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок)

	Если Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(), Отказ, Заголовок);
	КонецЕсли;

	Если (НЕ ОтраженоВОперУчете) И (НЕ Оплачено) И ОтражатьВУправленческомУчете Тогда

		ОбщегоНазначения.СообщитьОбОшибке("
		         |Не выбрано правило проведения (""Отражено в опер. учете"",""Оплачено"")", Отказ, Заголовок);

	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке 
		И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадают валюты банковского счета и кассы", Отказ, Заголовок);
	//Смартис Лиманчук начало 06.11.2012
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанкеНал 
		И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадают валюты банковского счета и кассы", Отказ, Заголовок);
	//Смартис Лиманчук окончание 06.11.2012
	КонецЕсли;

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			ОбщегоНазначения.СообщитьОбОшибке(Заголовок+"
			         |не совпадают сумма документа и ее расшифровка.", Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;
	
	//Смартис Лиманчук начало 01.11.2012
	//Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
	Если (ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал) Тогда
	//Смартис Лиманчук окончание 01.11.2012
		
		мСуммаПродаж = 0;
		мСуммаВозврата = 0;
		Для Каждого Строка Из ПриемРозничнойВыручки Цикл		
			
			Если Строка.Возврат Тогда
				мСуммаВозврата = мСуммаВозврата + Строка.Сумма
			Иначе
				мСуммаПродаж = мСуммаПродаж +Строка.Сумма
			КонецЕсли;
			
			Если Не НалоговыйУчет.НоваяСхемаНДС(Дата) И ОтражатьВБухгалтерскомУчете Тогда
				ПроверитьЗначение(Строка.СтатьяКнигиПродаж,Отказ, Заголовок,"Статья книги продаж");
			КонецЕсли;	
			
		КонецЦикла;

		Если НЕ мСуммаПродаж = СуммаПродаж Тогда
			ОбщегоНазначения.СообщитьОбОшибке("
			         |не совпадают сумма продаж и ее расшифровка.", Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ мСуммаВозврата = СуммаВозврата Тогда
			ОбщегоНазначения.СообщитьОбОшибке("
			         |не совпадают сумма возврата и ее расшифровка.", Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ (СуммаПродаж + СуммаРазменнойМонеты - СуммаВозврата - СуммаОплатыПлатежнымиКартами - СуммаОплатыБанковскимиКредитами = СуммаДокумента) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("
			         |не совпадают сумма документа и ее расшифровка.", Отказ, Заголовок);
		КонецЕсли;	

	КонецЕсли;	
	
	Если ОтраженоВОперУчете Тогда

		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
			
		ИначеЕсли (ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками	
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником 
			//Смартис Лиманчук начало 05.11.2012
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботникомНал 
			//Смартис Лиманчук окончание 05.11.2012
			//Смартис Лиманчук начало 01.11.2012
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетникомНал
			//Смартис Лиманчук окончание 01.11.2012
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником) 
			И РасшифровкаПлатежа[0].СуммаВзаиморасчетов=0 Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Не указана сумма взаиморасчетов с физическим лицом.",Отказ, Заголовок);
			
		КонецЕсли;

	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка 
		И НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Прием розничной выручки производится только в валюте регламентированного учета.", Отказ, Заголовок);
	КонецЕсли;
	//Смартис Лиманчук начало 01.11.2012
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал 
		И НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Прием розничной выручки производится только в валюте регламентированного учета.", Отказ, Заголовок);
	КонецЕсли;
	//Смартис Лиманчук окончание 01.11.2012
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками 
		И ЗначениеЗаполнено(РасчетныйДокумент) 
		И РасчетныйДокумент.ОтражатьВБухгалтерскомУчете // займ по бух.учету
		И НЕ РасчетныйДокумент.Организация=Организация Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, выбранная в документе, не совпадает с организацией, выбранной в договоре займа.", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок, СтруктураШапкиДокумента)

	Если ОтражатьВБухгалтерскомУчете Тогда

		Если (ЕстьРасчетыСКонтрагентами=истина) ИЛИ (ЕстьРасчетыПоКредитам=истина) Тогда

			СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			
			СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом,Контрагент");
			ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для бухгалтерского учета поле ""Работник"" должно быть выбрано из справочника ""Сотрудники Организаций""", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее И СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда
			Сообщить("Не указан счет учета.");
			Отказ=Истина;
		КонецЕсли;
		
		//Смартис Лиманчук начало 05.11.2012
		Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочееНал И СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда
			Сообщить("Не указан счет учета.");
			Отказ=Истина;
		КонецЕсли;
		//Смартис Лиманчук окончание 05.11.2012
		 
		//Смартис Лиманчук начало 05.11.2012
		//Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) И СчетУчетаРасчетовСКонтрагентом.НалоговыйУчет Тогда
		Если (ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочееНал) И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) И СчетУчетаРасчетовСКонтрагентом.НалоговыйУчет Тогда
		//Смартис Лиманчук окончание 05.11.2012
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				Неопределено,      // Неопределено - в случае проверки шапки документа
				Неопределено,      // Неопределено - в случае проверки шапки документа
				Отказ, 
				Заголовок, 
				"ОтражениеЗатрат", // ВидОперации
				Истина,            // ОтражатьПоЗатратам,
				"СчетУчетаРасчетовСКонтрагентом", // ИмяРеквизитаСчетЗатрат
				"СубконтоКт"       // ИмяРеквизитаСубконтоЗатрат
			);
		КонецЕсли;
		 
		//Смартис Лиманчук начало 01.11.2012
		//Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		Если (ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал) Тогда
		//Смартис Лиманчук окончание 01.11.2012
			
			Если СчетВычетаИзДоходовРозничныхПродаж.Пустая() Тогда
		    	ОбщегоНазначения.СообщитьОбОшибке("Не указан счет вычета из доходов розничных продаж!", Отказ, Заголовок);
			КонецЕсли;
			
			Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
				
				МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти["ПриемРозничнойВыручки"].Реквизиты;
				СтруктураОбязательныхПолей = Новый Структура("СтавкаНДС");
				Если Не НалоговыйУчет.НоваяСхемаНДС(Дата)И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					СтруктураОбязательныхПолей.Вставить("СтатьяКнигиПродаж");
				КонецЕсли;
			
				Для каждого СтрокаТаблицы Из ПриемРозничнойВыручки Цикл

					СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части: ";

					// Цикл по проверяемым полям
					Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
						Значение = СтрокаТаблицы[КлючЗначение.Ключ];
						Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться
							ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
							СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
							ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
						КонецЕсли;
					КонецЦикла;

					Если НалоговыйУчет.НоваяСхемаНДС(Дата) Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы["СчетУчетаНДС"]) И ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС)  Тогда // надо ругаться
							ПредставлениеРеквизита = МетаданныеРеквизиты["СчетУчетаНДС"].Представление();
							СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
							ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;// по ПриемРозничнойВыручки
				
			КонецЕсли;//Отражать
			
			Если НЕ ЗначениеЗаполнено(РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом) Тогда // счет нужен для проводок
				СтрокаСообщения = "Не заполнено значение реквизита "" Счет учета доходов от розничных продаж ""!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;//ВидОперации
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоУмолчаниюУпр()

	ОтраженоВОперУчете           = Истина;
	ОтражатьВУправленческомУчете = Истина;

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "РасчетныйДокумент", "СчетУчетаПроцентовПоЗайму", "РасчетныйДокументСчетУчетаПроцентовПоЗайму");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "РасчетныйДокумент", "Субконто1", "РасчетныйДокументСубконто1");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "РасчетныйДокумент", "Субконто2", "РасчетныйДокументСубконто2");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "РасчетныйДокумент", "Субконто3", "РасчетныйДокументСубконто3");
	КонецЕсли; 


КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
		//Смартис Лиманчук начало 01.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетникомНал
		//Смартис Лиманчук окончание 01.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		//Смартис Лиманчук начало 05.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентамиНал
		//Смартис Лиманчук окончание 05.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником 
		//Смартис Лиманчук начало 05.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботникомНал 
		//Смартис Лиманчук окончание 05.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками 
		//Смартис Лиманчук начало 05.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентамиНал
		//Смартис Лиманчук окончание 05.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;


	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Если СтруктураШапкиДокумента.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ Тогда
		СтруктураШапкиДокумента.Вставить( "ВыручкаСНТТ", Истина);
	КонецЕсли;

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                       			, "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");

	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		, КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	, КратностьДокумента);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) ИЛИ Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
		Если Основание.ФормаОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда
			Касса = Основание.БанковскийСчетКасса;
		КонецЕсли;
	КонецЕсли;
	
	#Если Клиент Тогда
	Если НЕ ЗначениеЗаполнено(Касса) Тогда
		//@skip-check undefined-function
		оснКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
		
		Если оснКасса.Владелец <> Организация Тогда
			//ВвестиЗначение(оснКасса, "Укажите кассу поступления денежных средств", "СправочникСсылка.Кассы");
			оснКасса = Справочники.Кассы.ПустаяСсылка();
			
			формаВыбораКассы = ПолучитьФорму("ФормаВыбораКассы");
			формаВыбораКассы.Организация = Организация;
			
			Если формаВыбораКассы.ОткрытьМодально() = Истина Тогда
				оснКасса = формаВыбораКассы.Касса;
			КонецЕсли;
		КонецЕсли;
		
		Касса = оснКасса;
	КонецЕсли;
	#КонецЕсли

	ВалютаДокумента         = ?(НЕ Касса.ВалютаДенежныхСредств.Пустая(),Касса.ВалютаДенежныхСредств,мВалютаРегламентированногоУчета);

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	ДокументОснование = Основание.Ссылка;
	стрСпособЗаполнения  = "Не заполнять";

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") 
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		Контрагент   = Основание.Контрагент;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") И Основание.Проведен  Тогда
			стрСпособЗаполнения = "По заказу";
		Иначе
			стрСпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		СтрокаПлатеж.ДоговорКонтрагента   = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
				СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
			КонецЕсли;
		КонецЕсли;

		#Если Клиент Тогда
		//@skip-check undefined-function
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		#КонецЕсли
	
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СтрокаПлатеж.Сделка=Основание.ЗаказПокупателя;
			
			Если НЕ ЗначениеЗаполнено(Основание.ЗаказПокупателя) Тогда
				//заполняем заказ покупателя из табличной части
				СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
				КурсОснования=СтруктураКурсаОснования.Курс;
				КратностьОснования=СтруктураКурсаОснования.Кратность;

				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СчетНаОплатуПокупателюТовары.ЗаказПокупателя,
				|	СУММА(ВЫБОР
				|			КОГДА СчетНаОплатуПокупателюТовары.Ссылка.УчитыватьНДС
				|					И (НЕ СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС)
				|				ТОГДА СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
				|			ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма
				|		КОНЕЦ) КАК Сумма
				|ИЗ
				|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
				|ГДЕ
				|	СчетНаОплатуПокупателюТовары.Ссылка = &СчетНаОплату
				|
				|СГРУППИРОВАТЬ ПО
				|	СчетНаОплатуПокупателюТовары.ЗаказПокупателя";
				
				Запрос.УстановитьПараметр("СчетНаОплату",Основание.Ссылка);
				
				Выборка = Запрос.Выполнить().Выбрать();
				ПервыйПроход = Истина;
				Пока Выборка.Следующий() Цикл
					Если ПервыйПроход Тогда
						СтрокаПлатеж.Сделка = Выборка.ЗаказПокупателя;
						КопияСтрокаПлатеж = СтрокаПлатеж;
						ПервыйПроход = Ложь;
					иначе
						СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПлатеж, КопияСтрокаПлатеж);
						СтрокаПлатеж.Сделка = Выборка.ЗаказПокупателя;
					КонецЕсли;
					
					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					                                   КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
					СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
					                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
					СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
					УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
				КонецЦикла;
				
				стрСпособЗаполнения = "";
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		или ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		или ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		//Смартис Лиманчук начало 03.10.2012
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссияНал Тогда
			ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателяНал;
		КонецЕсли;
		//Смартис Лиманчук окончание 03.10.2012
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.Проект) Тогда
				СтрокаПлатеж.Проект=Основание.Проект;
			КонецЕсли;
		КонецЕсли;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		
		Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			Иначе
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		Иначе
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			Иначе
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;

		#Если Клиент Тогда
		//@skip-check undefined-function
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		#КонецЕсли

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты( СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.Проект) Тогда
				СтрокаПлатеж.Проект=Основание.Проект;
			КонецЕсли;
		КонецЕсли;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		
		Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			Иначе
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		Иначе
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			Иначе
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		//@skip-check undefined-function
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.Проект) Тогда
				СтрокаПлатеж.Проект=Основание.Проект;
			КонецЕсли;
		КонецЕсли;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		
		Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			КонецЕсли;
		Иначе
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		#Если Клиент Тогда
		//@skip-check undefined-function
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		#КонецЕсли

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда

		ЗаполнитьПоРКОУпр();
		Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			СчетУчетаРасчетовСКонтрагентом = ДокументОснование.СчетУчетаРасчетовСКонтрагентом;
		//Смартис Лиманчук начало 01.11.2012
		ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал Тогда
			СчетУчетаРасчетовСКонтрагентом = ДокументОснование.СчетУчетаРасчетовСКонтрагентом;
		//Смартис Лиманчук окончание 01.11.2012
		КонецЕсли;	

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		//Смартис Лиманчук начало 14.11.2012
		ВидОперации  = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		//ВидОперации  = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал;
		//Смартис Лиманчук окончание 14.11.2012
		
		Если Основание.ВидОперации=Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			ВидПриемаРозничнойВыручки=Перечисления.ВидПриемаРозничнойВыручки.ИзКассы; 	
			Контрагент   = Основание.КассаККМ;
		ИначеЕсли Основание.ВидОперации=Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			ВидПриемаРозничнойВыручки=Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ; 	
			Контрагент   = Основание.Склад;
		КонецЕсли;
		
		Если ЭтоСкладМагазин(Основание.Склад) Тогда
			Для Каждого СтрокаТовары Из Основание.Товары Цикл
				Если СтрокаТовары.Сумма < 0 Тогда
					СоздатьПриходныйНаСуммуВозврата(Основание);
					Прервать;
				КонецЕсли;						
			КонецЦикла;	
		КонецЕсли;
		
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.Проект) Тогда
				СтрокаПлатеж.Проект=Основание.Проект;
			КонецЕсли;
		КонецЕсли;

		СуммаОплатыПлатежнымиКартами	= Основание.ОплатаПлатежнымиКартами   .Итог("Сумма");
		СуммаОплатыБанковскимиКредитами	= Основание.ОплатаБанковскимиКредитами.Итог("Сумма");

		стрСпособЗаполнения = "По розничной выручке";
		
		#Если Клиент Тогда
		//@skip-check undefined-function
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		#КонецЕсли

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДенежныйЧек") Тогда

		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();

		ВалютаДокумента = Основание.ВалютаДокумента;
		Касса           = Основание.Касса;
		СчетОрганизации = Основание.СчетОрганизации;
		Организация     = Основание.Организация;
		Ответственный   = Основание.Ответственный;
		СуммаДокумента  = Основание.СуммаДокумента;
		ВидОперации     = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		
		ДенежныйЧек=Основание.Ссылка;

		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Основание.СтатьяДвиженияДенежныхСредств;

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
		
		Если Основание.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
			Сообщить("Документом планировалось поступление безналичных денежных средств.");
			Возврат;
		КонецЕсли;
		
		ВидОперацииПоступление = Основание.ВидОперации;
		#Если Клиент Тогда
		//@skip-check undefined-function
		СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		#КонецЕсли
		
		УправлениеДенежнымиСредствами.ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииПоступление);
		
		Организация = Основание.Организация;
		ВалютаДокумента = Основание.ВалютаДокумента;
		
		Ответственный     = Основание.Ответственный;
		
		Если ВалютаДокумента.Пустая() Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			
			ВидПриемаРозничнойВыручки=Основание.ВидПриемаРозничнойВыручки;
			Контрагент=Основание.КассаККМ;
			
		//Смартис Лиманчук начало 01.11.2012
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал Тогда
			
			ВидПриемаРозничнойВыручки=Основание.ВидПриемаРозничнойВыручки;
			Контрагент=Основание.КассаККМ;
			
		//Смартис Лиманчук окончание 01.11.2012
		КонецЕсли;
		
		УправлениеДенежнымиСредствами.ЗаполнитьПоПланируемомуПоступлениюУпр(РасшифровкаПлатежа,
							Основание,
							СтавкаНДС, 
							ВалютаДокумента,
							КурсДокумента,
							КратностьДокумента,
							ВидОперации);
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником")	Тогда

		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();

		ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками;

		Если ОтражатьВБухгалтерскомУчете Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Физлицо",				Основание.ФизЛицо);
			Запрос.УстановитьПараметр("ВидЗанятости",			Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
			Запрос.УстановитьПараметр("Трудовой",				Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка,
			|	ВЫБОР
			|		КОГДА СотрудникиОрганизаций.ВидДоговора = &Трудовой
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Порядок
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	(СотрудникиОрганизаций.ВидДоговора <> &Трудовой
			|			ИЛИ СотрудникиОрганизаций.ВидЗанятости <> &ВидЗанятости)
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Контрагент = Основание.ФизЛицо;
		КонецЕсли;

		РасчетныйДокумент = Основание;

		Если Основание.ОтражатьВБухгалтерскомУчете Тогда
			ВалютаВзаиморасчетовПодотчетника = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
		КонецЕсли;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		ПолучитьОстатокПоДоговоруЗаймаУпр(Основание);
		
		ВалютаУчета=СтруктураДолг.Валюта;
		
		СтруктураКурсУчета=МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУчета, Основание.Дата);
		
		СуммаДокумента=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураДолг.ОсновнойДолг+СтруктураДолг.Проценты, 
		                            ВалютаУчета, ВалютаДокумента,
		                            СтруктураКурсУчета.Курс, КурсДокумента,
		                            СтруктураКурсУчета.Кратность, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
		                            ВалютаДокумента,ВалютаВзаиморасчетовПодотчетника,
		                            КурсДокумента,СтрокаПлатеж.КурсВзаиморасчетов, 
		                            КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет")	Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		
		ВалютаДокумента = Основание.ВалютаДокумента;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		НоваяСтрока.КурсВзаиморасчетов           = СтруктураКурсаДокумента.Курс;
		НоваяСтрока.КратностьВзаиморасчетов      = СтруктураКурсаДокумента.Кратность;		
		ВалютаВзаиморасчетовПодотчетника		 = ВалютаДокумента;
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.Проект) Тогда
				НоваяСтрока.Проект=Основание.Проект;
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
	 		Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
		Иначе
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
		КонецЕсли;
	
		Запрос.УстановитьПараметр("Сотрудник",  Основание.ФизЛицо);
		Запрос.УстановитьПараметр("Организация",Основание.Организация);
		Запрос.УстановитьПараметр("ДатаИтогов", Основание.Дата+1);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки."+?(ВалютаДокумента = мВалютаРегламентированногоУчета,"","Валютная")+"СуммаОстатокДт КАК СуммаОстатокКт,
		|	ХозрасчетныйОстатки."+?(ВалютаДокумента = мВалютаРегламентированногоУчета,"","Валютная")+"СуммаОстатокКт КАК СуммаОстатокДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В ИЕРАРХИИ (&СчетРасчетов), ,
		|	                                        Организация = &Организация И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки";
        	
		ПредыдущийАванс = Запрос.Выполнить().Выбрать();
		ПредыдущийАванс.Следующий();
		
		РасчетныйДокумент = ?(Основание.ВыданныеАвансы.Количество()=0, Неопределено, Основание.ВыданныеАвансы[0].ДокументАванса);
		
		Перерасход = ?(ЗначениеЗаполнено(ПредыдущийАванс.СуммаОстатокДт), ПредыдущийАванс.СуммаОстатокДт, 0);
		Остаток    = ?(ЗначениеЗаполнено(ПредыдущийАванс.СуммаОстатокКт), ПредыдущийАванс.СуммаОстатокКт, 0);
		
		ВидОперации 	= Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником;
		//Смартис Лиманчук начало 01.11.2012
		Если Основание.НаличныйРасчет Тогда
			ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетникомНал;
		КонецЕсли;
		//Смартис Лиманчук окончание 01.11.2012
		
		СуммаДокумента  = Остаток + Перерасход;
		Контрагент 		= Основание.ФизЛицо;
		
		НоваяСтрока.СуммаПлатежа		= СуммаДокумента;
		НоваяСтрока.СуммаВзаиморасчетов	= СуммаДокумента;
	
	КонецЕсли;

	ПроверкаКурсовВалют(СтрокаПлатеж);

	Если стрСпособЗаполнения = "По заказу" Тогда
		ЗаполнитьПоЗаказуУпр(СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По взаиморасчетам" Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,1);
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По розничной выручке" Тогда
		ЗаполнитьПоРозничнойВыручкеУпр(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По сумме документа" Тогда
		ЗаполнитьПоСуммеДокументаУпр(СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	ОтраженоВОперУчете=Истина;
	Оплачено=Истина;
	ОтражатьВУправленческомУчете=Истина;
	
	Если (ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником  И НЕ ВалютаВзаиморасчетовПодотчетника=ВалютаДокумента)
		//Смартис Лиманчук начало 01.11.2012
		ИЛИ (ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетникомНал И НЕ ВалютаВзаиморасчетовПодотчетника=ВалютаДокумента)
		//Смартис Лиманчук окончание 01.11.2012
		ИЛИ (ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками И Основание.ОтражатьВУправленческомУчете) Тогда
	
		ОтражатьВБухгалтерскомУчете=Ложь;
				
	Иначе
		
		ОтражатьВБухгалтерскомУчете=Истина;
		
	КонецЕсли;
			
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Платеж.ДоговорКонтрагента);
				Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком тогда
					Платеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
					Платеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
				//Смартис Лиманчук начало 05.11.2012
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщикомНал тогда
					Платеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
					Платеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
				//Смартис Лиманчук окончание 05.11.2012
				Иначе
					Платеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
					Платеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Платеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Платеж.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

	КонецЦикла;

	#Если Клиент Тогда
	ЗаполнитьРеквизитыПечати();
	#КонецЕсли

	#Если Клиент Тогда
	//@skip-check undefined-function
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	#КонецЕсли

	ЗаполнитьРеквизитыПоУмолчаниюУпр();
	
	

КонецПроцедуры

Процедура СоздатьПриходныйНаСуммуВозврата(Основание)
	НачатьТранзакцию();
	Приходный = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	Приходный.Дата = Основание.Дата;
	Приходный.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	Приходный.ДокументОснование = Основание;
	Приходный.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");

	Приходный.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
	Приходный.ВыводитьНаПечатьСуммуНДС = Истина;
	Приходный.ДоговорКонтрагента = НайтиПравильныйДоговор(Основание.Комментарий);
	Приходный.ДокументОснование	= Основание.Ссылка;
	Приходный.Касса	= Справочники.Кассы.НайтиПоНаименованию("Касса НПТ (Завод)");	
	Приходный.Комментарий = Основание.Комментарий;
	Приходный.Контрагент =	ПолучитьКонтрагентаВовзрата(Основание);
	Приходный.НазначениеДенежныхСредств	= Справочники.НазначенияНаличныхДенежныхСредств.Прочее;
	Приходный.Оплачено = Истина;
	Приходный.Организация = Справочники.Организации.НайтиПоНаименованию("Новий погляд трейд");
	Приходный.Основание = Строка(Приходный.ДоговорКонтрагента);	
	Приходный.Ответственный = Основание.Ответственный;
	Приходный.ОтражатьВБухгалтерскомУчете = Истина;
	Приходный.ОтражатьВУправленческомУчете	= Истина;
	Приходный.ОтраженоВОперУчете = Истина;
	Приходный.Подразделение = Основание.Подразделение;
	Приходный.ПринятоОт	= Приходный.Контрагент.Наименование;
	Приходный.СуммаДокумента = ПолучитьСуммуВозврата(Основание);
	Приходный.СчетВычетаИзДоходовРозничныхПродаж = ПланыСчетов.Хозрасчетный.НайтиПоКоду("7092");
	Приходный.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("7091");
	ЗаполнитьТабличнуюЧастьПКО(Основание, Приходный);
	Попытка
		Приходный.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);		
	Исключение
	    Сообщение = Новый СообщениеПользователю;
	    Сообщение.Текст = ОписаниеОшибки();
	    Сообщение.Сообщить();
	    ОтменитьТранзакцию();
	    Возврат;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПКО(Основание, Приходный)
	//TODO: Реализация
КонецПроцедуры

Функция ПолучитьСуммуВозврата(Основание)
	//TODO: Реализация
КонецФункции

Функция ПолучитьКонтрагентаВовзрата(Основание)
	//TODO: Реализация
КонецФункции

Функция НайтиПравильныйДоговор(Комментарий)
	//TODO: Реализация
КонецФункции

Функция ЭтоСкладМагазин(Склад)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствиеСкладаИМагазина.ОсновнойСклад,
	|	СоответствиеСкладаИМагазина.СкладМагазин
	|ИЗ
	|	РегистрСведений.СоответствиеСкладаИМагазина КАК СоответствиеСкладаИМагазина
	|ГДЕ
	|	СоответствиеСкладаИМагазина.СкладМагазин = &СкладМагазин";
	Запрос.УстановитьПараметр("СкладМагазин", Склад);
	Возврат Запрос.Выполнить().Выбрать().Следующий();
КонецФункции // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, Режим);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Режим);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Дата,ВалютаДокумента,Ссылка, "ПриходныйКассовыйОрдер");
	
	ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок, СтруктураШапкиДокумента);

	Если ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ПолучитьОстатокПоДоговоруЗаймаУпр(РасчетныйДокумент);
	КонецЕсли;

	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете тогда
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл

			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
												мВалютаРегламентированногоУчета, Истина, Отказ, 
												Заголовок, "Строка " + СтрокаОплаты.НомерСтроки + " - ");

		КонецЦикла;
	КонецЕсли;

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Смартис Лиманчук начало 05.11.2012
	//Если ОтражатьВБухгалтерскомУчете И ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
	Если ОтражатьВБухгалтерскомУчете И (ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Или ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочееНал) Тогда
	//Смартис Лиманчук окончание 05.11.2012
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента(
			ЭтотОбъект,
			"СчетУчетаРасчетовСКонтрагентом",    // ИмяРеквизитаСчетЗатрат
			"СубконтоКт" // ИмяРеквизитаСубконто
		);
		
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если НЕ ЗначениеЗаполнено(НомерОрдера) ИЛИ ЭтоНовый() Тогда
		УстановитьНомерОрдера();
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

// Процедура заполняет реквизиты, используемые для формирования печатной формы (ПринтоОт, 
// Основание и Приложение). 
// Параметры:
//  ЧтоИзменилось - имя реквизита документа
//
// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(Сумма, Валюта)
	
	ФорматСтрока  = "Л=uk_UA; ДП=Ложь";
	ПарамПредмета = Валюта.ПараметрыПрописиНаУкраинском;
	
	Результат = ЧислоПрописью(Сумма, ФорматСтрока, ПарамПредмета);
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	// для нового документа стоит очистить номер ордера
	НомерОрдера = "";

КонецПроцедуры

//@skip-check undefined-function
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Наличные);
