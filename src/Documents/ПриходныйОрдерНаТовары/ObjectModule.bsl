Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

 
// Функция осуществляет запуск обработки формирующей печатную форму
// бланк товарного наполнения (адресный склад).
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьБланк(НаПринтер)

	Обработка = Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать();
	Обработка.НапечататьИзДокумента(ЭтотОбъект.Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

		// Получить экземпляр документа на печать
	Если ИмяМакета = "Бланк" Тогда
    
		ТабДокумент = ПечатьБланк(НаПринтер);
	Иначе
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ПриходныйОрдерНаТовары", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ПриходныйОрдерНаТовары", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("Накладная", "Приходный ордер на товары");
	СтруктураМакетов.Вставить("Бланк", "Бланк товарного наполнения (адресный склад)");

	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет копирование табличной части заказа поставщику или 
// заказа на переработку в документ.
//
// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование, ИмяТЧ = "Товары") Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ИмяТаблицы = "ЗаказПоставщику.Товары";
		Запрос.УстановитьПараметр("СтатусТара", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
		|	КоличествоОстаток                                КАК Количество,
		|	Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ДокументОснование
		|												И СтатусПартии <> &СтатусТара)
		|ГДЕ
		|	НЕ Номенклатура.Услуга
		|";
		

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
		КонецЦикла;

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		ИмяТаблицы = "СчетНаОплатуПоставщика." + ИмяТЧ;                                             

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕдиницаИзмерения,
		|	ЕдиницаИзмеренияМест,
		|	Количество,
		|	КоличествоМест,
		|	Коэффициент,
		|" + ?(ИмяТЧ = "БланкиСтрогогоУчета", "	Номенклатура ",
											  "	Номенклатура, 
											  |	ХарактеристикаНоменклатуры ") + "
		|ИЗ
		|	Документ." + ИмяТаблицы + "
		|
		|ГДЕ
		|	Ссылка = &ДокументОснование";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Выборка.Количество;
			СтрокаТабличнойЧасти.КоличествоМест             = Выборка.КоличествоМест;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
			// Учет БСУ не ведется в разрезе характеристик.
			Если ИмяТЧ <> "БланкиСтрогогоУчета" Тогда
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;			
			КонецЕсли; // ИмяТЧ = "БланкиСтрогогоУчета" 
			
		КонецЦикла;

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		ИмяТаблицы = "РеализацияТоваровУслуг.Товары";

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕдиницаИзмерения,
		|	ЕдиницаИзмеренияМест,
		|	КоличествоМест,
		|	Количество,
		|	Коэффициент,
		|	Номенклатура,
		|	СерияНоменклатуры,
		|	ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ." + ИмяТаблицы + "
		|
		|ГДЕ
		|	Ссылка = &ДокументОснование";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Выборка.Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.КоличествоМест             = Выборка.КоличествоМест;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

		КонецЦикла;

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
		Запрос.УстановитьПараметр("Склад",        Склад);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.СерияНоменклатуры,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.Качество,
		|	Остатки.ДокументРезерва,
		|	Остатки.КоличествоОстаток             КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование 
		|                                                        И СтатусПартии = &СтатусПартии
		|                                                        И Склад = &Склад) КАК Остатки
		|";
		
		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			Количество = Выборка.КоличествоОстаток;
			Если Количество = 0 ИЛИ Количество = NULL Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = - Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ДокументРезерва            = Выборка.ДокументРезерва;
			СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

		КонецЦикла; // Выборка.Следующий()
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Запрос.УстановитьПараметр("Склад",        Склад);
		Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.ДокументРезерва,
		|	Остатки.КоличествоОстаток             КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование 
		|                                                       И Склад = &Склад
		|                                                       И СтатусПартии = &СтатусПартии) КАК Остатки
		|";

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Количество = Выборка.КоличествоОстаток;
			Если Количество = 0 ИЛИ Количество = NULL Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура    = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество      = - Количество;
			СтрокаТабличнойЧасти.ДокументРезерва = Выборка.ДокументРезерва;
		КонецЦикла; // Выборка.Следующий()
	Иначе

		ИмяТаблицы = СокрЛП(ДокументОснование.Метаданные().Имя) + ".ВозвратнаяТара";

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокТЧ.Количество КАК Количество,
		|	ДокТЧ.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ." + ИмяТаблицы + " КАК ДокТЧ
		|
		|ГДЕ
		|	ДокТЧ.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокТЧ.НомерСтроки";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура= Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество  = Выборка.Количество;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходной таблицы строки не требующие резерва на складах
// Возвращается КОПИЯ исходной таблицы
//
Функция ПодготовитьТаблицуДляДвиженийПоТоварамВРезервеНаСкладах(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
			 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
			   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // ПодготовитьТаблицуДляДвиженийПоТоварамВРезервеНаСкладах()

// Функция удаляет из исходной таблицы строки не требующие резерва по ордеру
// Возвращается КОПИЯ исходной таблицы
//
Функция ПодготовитьТаблицуДляТоварамВРезервеПоОрдерам(ТабТовары)

	ТаблицаПоТоварамКПолучению = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамКПолучению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамКПолучению.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТаблицаПоТоварамКПолучению.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамКПолучению.Колонки.ДокументРезерва.Имя = "ДокументПолучения";
	
	Возврат ТаблицаПоТоварамКПолучению;

КонецФункции // ПодготовитьТаблицуДляТоварамВРезервеПоОрдерам()

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения)
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Удалим строки с документами резерва по ордерам
	ТаблицаПоТоварамКопия = ТаблицаПоТоварам.Скопировать();
	Инд=0;
	Пока Инд<ТаблицаПоТоварамКопия.Количество() Цикл
		Если ТаблицаПоТоварамКопия[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТоварамКопия.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамКопия, ТаблицаДвижений);
	
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладОтправитель,"Склад");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДокументПеремещения,"ОсновнойДокумент");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");
	
	// Приходный ордер отражается в тех, учетах, в которых ДокументПеремещения, или только в управленческом
	УпрУчет = Ложь;
	БухУчет = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДокументПеремещения) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
		УпрУчет = Истина;
	Иначе
		
		МД = Метаданные.НайтиПоТипу(ТипЗнч(ДокументПеремещения));
		ТекстПризнакиУчета = "";
		Если МД.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", ОтражатьВУправленческомУчете";
		Иначе
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", Ложь КАК ОтражатьВУправленческомУчете";
		КонецЕсли;
		Если МД.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", ОтражатьВБухгалтерскомУчете";
		Иначе
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", Ложь КАК ОтражатьВБухгалтерскомУчете";
		КонецЕсли;
		
		Запрос = Новый Запрос("Выбрать "+Сред(ТекстПризнакиУчета, 2)+" ИЗ Документ."+МД.Имя+" ГДЕ Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ДокументПеремещения);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Выборка.ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
			ТаблицаДвижений.ЗаполнитьЗначения(Выборка.ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
			УпрУчет = Выборка.ОтражатьВУправленческомУчете;
			БухУчет = Выборка.ОтражатьВБухгалтерскомУчете;
		КонецЕсли;
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
	
	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладОтправитель,"Склад");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДокументПеремещения,"ОсновнойДокумент");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ТаблицаДвижений.ЗаполнитьЗначения(УпрУчет,"ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(БухУчет,"ОтражатьВБухгалтерскомУчете");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
	
	Если ТаблицаПоТоварамКопия.Количество() + ТаблицаПоТаре.Количество() > 0 тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,УпрУчет,БухУчет,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
	                          ТаблицаПоТаре, Отказ, Заголовок);

	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	НаборДвижений = ?(СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный, Движения.ТоварыВРознице, Движения.ТоварыНаСкладах);

	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
			
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
	
		// ТОВАРЫ
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);

		// Проверка наличия продажных цен на приходуемый товар.
		УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицыДанныхДокумента["ТаблицаПоТоварам"], Отказ, Заголовок);
		
	КонецЕсли;

	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
	
	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.НеОпределен Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
	КонецЕсли;	   
	Если НЕ Отказ Тогда
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
			
		ДокПеремещения = ?(ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение,   ДокументПеремещения, Ссылка);
		СтатПартии     = Перечисления.СтатусыПартийТоваров.Купленный;
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПолучения", ДокПеремещения);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",             Склад);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",      СтатПартии,                                       "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",      Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",          Справочники.Качество.Новый,                       "ТаблицаПоТаре");
		Если БезПраваПродажи Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Ссылка);
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
		
	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
		Если НЕ Отказ Тогда
			//если в перемещении внутренний заказ указан в шапке - этот заказ уже считается выполненным, под него не надо резервировать
			Если НЕ ЗначениеЗаполнено(ДокументПеремещения.ВнутреннийЗаказ) Тогда
				ТаблицаПоТоварамРезерв = ПодготовитьТаблицуДляДвиженийПоТоварамВРезервеНаСкладах(ТаблицаПоТоварам);
				ТаблицаПоТареРезерв    = ПодготовитьТаблицуДляДвиженийПоТоварамВРезервеНаСкладах(ТаблицаПоТаре);
				
				Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
					
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);

					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
		
		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

		КонецЕсли;
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			// Для резервов по ордеру надо сделать приход по регистру "Товары к получению на склады"
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуДляТоварамВРезервеПоОрдерам(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуДляТоварамВРезервеПоОрдерам(ТаблицаПоТаре);
				
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);

				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
					
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        Склад);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
					
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
					
			КонецЕсли;
			
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		Если СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете И СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда

			НаборДвижений = Движения.ТоварыОрганизаций;
			
			// Проверка остатков при оперативном проведении.
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			
			Если НЕ Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
						
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       СтруктураШапкиДокумента.СкладОтправитель);
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       СтруктураШапкиДокумента.СкладПолучатель);
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;

		КонецЕсли;
			
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	Если (ВидОперации <> Перечисления.ВидыОперацийПриходныйОрдер.Перемещение
	 Или СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов)
	   И СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);

		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
    
		ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
    	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
	КонецЕсли;

	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре,,Истина);
	
	// Если это приход без права продажи, то надо сначала зарезервировать товар
	Если БезПраваПродажи Тогда
	
		Если НЕ Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);

			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
							
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",           Склад);
							
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
		КонецЕсли;
		
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		
		// Если партии были оприходованы с правом перепродажи, то нужно списывать партии
		Если НЕ БезПраваПродажи Тогда
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ СписанныеТовары. (для списания партий товаров)
			ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
											ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения);
			
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание, СтандартнаяОбработка)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
        Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ИзПереработки;
			ЗаказПоставщику = Основание;

			// Заполним табличную часть "Товары" по заказу или счету поставщика, скопировав состав.

			ЗаполнитьТоварыПоОснованию(Основание);
		Иначе
			ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика;
			// Заполним табличную часть "Товары" по заказу или счету поставщика, скопировав состав.

			ЗаполнитьТоварыПоОснованию(Основание);
			// Бланки в ТЧ Товары.
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
				ЗаполнитьТоварыПоОснованию(Основание, "БланкиСтрогогоУчета");			
			КонецЕсли; // ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")			
            ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя;

		// Заполним табличную часть "Товары" по реализации, скопировав состав.
		ЗаполнитьТоварыПоОснованию(Основание);
		ЗаполнитьВозвратнуюТаруПоОснованию(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
	
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации         = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение;
		Склад               = Основание.СкладПолучатель;
		ДокументПеремещения = Основание.Ссылка;

		// Заполним табличную часть "Товары" по реализации, скопировав состав.
		ЗаполнитьТоварыПоОснованию(Основание);
		ЗаполнитьВозвратнуюТаруПоОснованию(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.ПриходныйОрдерНаТовары.СтруктураДополнительныхДанныхФормы());
		
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка");
	Если Основание = Неопределено ИЛИ ТипЗнч(Основание) = Тип("Структура") Тогда
		//Для нового документа вводимого не на основании - заполним вид операции по умолчанию
		//Это необходимо, т.к. в ЗаполнитьШапкуДокумента своя логика заполнения вида операции.
		ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.НеОпределен;
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		ЭтотОбъект.Контрагент = Неопределено;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		Контрагент = Неопределено;
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ИзПереработки Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	Иначе
		ДокументПеремещения = Неопределено;
		ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.Товары, "ДокументРезерва");
		ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.ВозвратнаяТара, "ДокументРезерва");
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары, Истина);
	КонецЕсли;

	Для каждого СтрокаТоваров ИЗ Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ДокументРезерва) 
		   И СтрокаТоваров.ДокументРезерва <> Неопределено Тогда
		   СтрокаТоваров.ДокументРезерва = Неопределено;
	  	КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаТары ИЗ ВозвратнаяТара Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТары.ДокументРезерва) 
		   И СтрокаТары.ДокументРезерва <> Неопределено Тогда
		   СтрокаТары.ДокументРезерва = Неопределено;
	  	КонецЕсли;
	КонецЦикла;
	мУдалятьДвижения = НЕ ЭтоНовый();
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
    Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru = 'Проведение документа """ + СокрЛП(Ссылка) + """: '");

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"                 , "ВидСклада"                 , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПеремещения"   , "СкладПолучатель"           , "СкладПолучатель");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПеремещения"   , "СкладОтправитель"          , "СкладОтправитель");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"           , "ОтражатьВРегламентированномУчете"      , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	СтруктураПолей = Новый Структура;	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям", "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"     , "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"     , "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре,
							Отказ, Заголовок);

	КонецЕсли; 

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТаре", ТаблицаПоТоварам, ТаблицаПоТаре));

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ВидОперации <> Перечисления.ВидыОперацийПриходныйОрдер.НеОпределен Тогда
		ПроверяемыеРеквизиты.Добавить("Организация");
		Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
			ПроверяемыеРеквизиты.Добавить("ДокументПеремещения");
		КонецЕсли;
	КонецЕсли;

	// Некоторые операции нельзя можно оформлять только на оптовый склад ...
	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ИзПереработки Тогда
		
		УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(ЭтотОбъект, Отказ, , "Склад", "");
		
	ИначеЕсли Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		
		// ... а остальные - на все, кроме НТТ
		
		СтрокаСообщения = Нстр("ru = 'Документ не может быть оформлен на НТТ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		Если ЗначениеЗаполнено(ДокументПеремещения)
			И Склад <> ДокументПеремещения.СкладПолучатель Тогда
			СтрокаСообщения = Нстр("ru = 'Склад документа должен соответствовать складу-получателю документа перемещения.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;		
	КонецЕсли;

	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка",ОбъектКопирования.Ссылка);
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
