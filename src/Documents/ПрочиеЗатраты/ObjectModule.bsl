Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

Перем мУказаниеПроектовВТабличнойЧастиДокументов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирования печатной формы документа "ПрочиеЗатраты"
//
Функция ПечатьПрочиеЗатраты(ИмяМакета)
	
	ТипУчета = ?( ИмяМакета = "ПрочиеЗатратыУпр", "Упр",
			   ?( ИмяМакета = "ПрочиеЗатратыБух", "Бух",
			   ?( ОтражатьВУправленческомУчете, "Упр", "Бух")));
			   
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПрочиеЗатраты.Ссылка,
		|	ПрочиеЗатраты.Представление,
		|	ПрочиеЗатраты.Организация,
		|	ПрочиеЗатраты.Организация.Представление КАК ПечОрганизация,
		|	ВЫБОР
		|		КОГДА &ТипУчета = ""Упр""
		|			ТОГДА ПрочиеЗатраты.Подразделение
		|		ИНАЧЕ ПрочиеЗатраты.ПодразделениеОрганизации
		|	КОНЕЦ КАК Подразделение,
		|	ВЫБОР
		|		КОГДА &ТипУчета = ""Упр""
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПрочиеЗатраты.Подразделение)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПрочиеЗатраты.ПодразделениеОрганизации)
		|	КОНЕЦ КАК ПечПодразделение,
		|	ПрочиеЗатраты.Затраты.(
		|		НомерСтроки,
		|		СтатьяЗатрат,
		|		ПРЕДСТАВЛЕНИЕ(СтатьяЗатрат) КАК ПечСтатьяЗатрат,
		|		ВЫБОР
		|			КОГДА &ТипУчета = ""Упр""
		|				ТОГДА ПрочиеЗатраты.Затраты.Сумма
		|			ИНАЧЕ ПрочиеЗатраты.Затраты.СуммаРегл
		|		КОНЕЦ КАК Сумма,
		|		СчетЗатрат КАК Счет,
		|		ПРЕДСТАВЛЕНИЕ(СчетЗатрат) КАК ПечСчет,
		|		Заказ КАК Заказ,
		|		ПРЕДСТАВЛЕНИЕ(ПрочиеЗатраты.Затраты.Заказ) КАК ПечЗаказ,
		|		СпособРаспределенияЗатратНаВыпуск КАК СпособРаспределения,
		|		ПРЕДСТАВЛЕНИЕ(ПрочиеЗатраты.Затраты.СпособРаспределенияЗатратНаВыпуск) КАК ПечСпособРаспределения,
		|		НоменклатурнаяГруппа КАК НомГруппа,
		|		ПРЕДСТАВЛЕНИЕ(НоменклатурнаяГруппа) КАК ПечНомГруппа,
		|		Продукция,
		|		ХарактеристикаПродукции КАК Характеристика,
		|		СерияПродукции КАК Серия,
		|		СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
		|		ОбъектСтроительства,
		|	)
		|ИЗ
		|	Документ.ПрочиеЗатраты КАК ПрочиеЗатраты
		|ГДЕ
		|	ПрочиеЗатраты.Ссылка = &ТекДок
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПрочиеЗатраты.Номер";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "ТекДок",   Ссылка);
	Запрос.УстановитьПараметр( "ТипУчета", ТипУчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	Шапка = РезультатЗапроса.Выбрать();
	Шапка.Следующий();
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПрочиеЗатраты_ПрочиеЗатраты";
	
	Макет  = ПолучитьМакет("ПрочиеЗатраты");
	
	// Вывод заголовка
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента( ЭтотОбъект);
	Область.Параметры.Подразделение    = Шапка.Подразделение;
	Область.Параметры.ПечПодразделение = Шапка.ПечПодразделение;
	Область.Параметры.Организация      = Шапка.Организация;
	Область.Параметры.ПечОрганизация   = Шапка.ПечОрганизация;
	
	ТабДок.Вывести(Область);
	
	Если ТипУчета = "Упр" Тогда
		Область = Макет.ПолучитьОбласть("ТабШапкаУпр");
		ТабДок.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТабСтрокаУпр");
	Иначе
		Область = Макет.ПолучитьОбласть("ТабШапка");
		ТабДок.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТабСтрока");
	КонецЕсли;
	ТабЧасть = Шапка.Затраты.Выбрать();
	СуммаИтого = 0;
	
	Пока ТабЧасть.Следующий() Цикл
		Область.Параметры.ПечНомер        = ТабЧасть.НомерСтроки;
		
		Область.Параметры.СтатьяЗатрат    = ТабЧасть.СтатьяЗатрат;
		Область.Параметры.ПечСтатьяЗатрат = ТабЧасть.ПечСтатьяЗатрат;
		Область.Параметры.ПечСумма        = ТабЧасть.Сумма;
		
		Область.Параметры.Заказ           = ТабЧасть.Заказ;
		Область.Параметры.ПечЗаказ        = ТабЧасть.ПечЗаказ;
		
		Область.Параметры.ПечАналитика1 = "";
		Область.Параметры.ПечАналитика2 = "";
		Область.Параметры.ПечАналитика3 = "";
		Область.Параметры.Аналитика1    = Неопределено;
		Область.Параметры.Аналитика2    = Неопределено;
		Область.Параметры.Аналитика3    = Неопределено;
			
		Если ТипУчета = "Упр" Тогда
			Область.Параметры.ПечХарактерЗатрат = ТабЧасть.ХарактерЗатрат;
		Иначе
			Область.Параметры.ПечСчет = ТабЧасть.ПечСчет;
			Область.Параметры.Счет    = ТабЧасть.Счет;
		КонецЕсли;
		
		Если ТабЧасть.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		
			Область.Параметры.Аналитика1      = ТабЧасть.НомГруппа;
			Область.Параметры.ПечАналитика1   = ТабЧасть.ПечНомГруппа;
			Область.Параметры.Аналитика2      = ТабЧасть.СпособРаспределения;
			Область.Параметры.ПечАналитика2   = ТабЧасть.ПечСпособРаспределения;
		
		ИначеЕсли ТабЧасть.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			
			// "Брак в производстве";
			Область.Параметры.Аналитика1      = ТабЧасть.НомГруппа;
			Область.Параметры.ПечАналитика1   = ТабЧасть.ПечНомГруппа;
			Область.Параметры.Аналитика2      = ТабЧасть.Продукция;
			Область.Параметры.ПечАналитика2   = СокрП(ТабЧасть.Продукция) + ФормированиеПечатныхФорм.ПредставлениеСерий(ТабЧасть);
			
		ИначеЕсли ТабЧасть.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			
			// "Строительство объектов основных средств"
			Область.Параметры.ПечАналитика1   = ТабЧасть.ОбъектСтроительства;
			Область.Параметры.Аналитика1      = ТабЧасть.ОбъектСтроительства;
			
		ИначеЕсли ТабЧасть.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
			  ИЛИ ТабЧасть.ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы 
		      ИЛИ ТабЧасть.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы
			  ИЛИ ТабЧасть.ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт
			  ИЛИ ТабЧасть.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы Тогда
			  
			Область.Параметры.Аналитика1      = ТабЧасть.НомГруппа;
			Область.Параметры.ПечАналитика1   = ТабЧасть.ПечНомГруппа;
			
		КонецЕсли;
		
		СуммаИтого = СуммаИтого + ТабЧасть.Сумма;
		
		ТабДок.Вывести(Область);
		
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.СуммаИтого    = СуммаИтого;
	Область.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(
		СуммаИтого,
		?(ТипУчета = "Упр",
			мВалютаУправленческогоУчета,
			мВалютаРегламентированногоУчета));
			
	ТабДок.Вывести(Область);
	
	Возврат ТабДок;
	
КонецФункции // ПечатьПрочиеЗатраты()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ПрочиеЗатраты" ИЛИ ИмяМакета = "ПрочиеЗатратыУпр" ИЛИ ИмяМакета = "ПрочиеЗатратыБух" Тогда
		
		ТабДокумент = ПечатьПрочиеЗатраты(ИмяМакета);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечФорм = Новый Структура;
	Если ОтражатьВУправленческомУчете И ОтражатьВБухгалтерскомУчете Тогда
		СтруктПечФорм.Вставить( "ПрочиеЗатратыУпр",  "Прочие затраты (упр.)");
		СтруктПечФорм.Вставить( "ПрочиеЗатратыБух", "Прочие затраты (регл.)");
	Иначе
		СтруктПечФорм.Вставить( "ПрочиеЗатраты", "Прочие затраты");
	КонецЕсли;
	
	Возврат СтруктПечФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение, Затраты.Сумма";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
		|Затраты.СчетЗатрат, Затраты.СуммаРегл,
		|Затраты.НалоговоеНазначениеДоходовИЗатрат, Затраты.СуммаНал, Затраты.СуммаНДС, Затраты.СуммаНДСКредит";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		РеквизитыШапки = "Организация";
	Иначе
		РеквизитыШапки = "";
	КонецЕсли;
	
	ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);
	
	ПроверитьЗаполнениеСубконтоРегл(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	РеквизитыТЧ = "СтатьяЗатрат";
	ДополнитьРеквизитыТабличнойЧастиУпр ( РеквизитыТЧ, СтруктураШапкиДокумента);
	ДополнитьРеквизитыТабличнойЧастиРегл( РеквизитыТЧ, СтруктураШапкиДокумента);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Затраты", Новый Структура(РеквизитыТЧ), Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	
	// Проверим наличие вида расходов в статье затрат
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить( "СтатьяЗатрат",   "СтатьяЗатрат");
	СтруктураПолей.Вставить( "ХарактерЗатрат", "СтатьяЗатрат.ХарактерЗатрат");
     СтруктураПолей.Вставить("СуммаРегл", "СуммаРегл");
     СтруктураПолей.Вставить("СуммаНал",  "СуммаНал");
	
	ТаблицаМатериалов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Затраты", СтруктураПолей).Выгрузить();
	
	//УправлениеПроизводством.ПроверитьСтатьиЗатрат(Затраты, "СтатьяЗатрат", "Нематериальные", Отказ, Заголовок);
	
	//Для Каждого СтрокаТЧ Из Затраты Цикл
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ХарактерЗатрат) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан Хар-р затрат в статье затрат """ + СтрокаТЧ.СтатьяЗатрат + """ (строка № " + СтрокаТЧ.НомерСтроки + " табличной части ""Затраты"")", Отказ, Заголовок);
		КонецЕсли;			
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			// должна быть заполнена хотя бы одна из СуммаРегл, СуммаНал
			Если СтрокаТЧ.СуммаРегл = 0 И СтрокаТЧ.СуммаНал = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указана сумма для статьи затрат """ + СтрокаТЧ.СтатьяЗатрат + """ (строка № " + СтрокаТЧ.НомерСтроки + " табличной части ""Затраты"")", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СписСчетовБух = УправлениеПроизводством.ПолучитьЗатратныеСчета("Бух");
		Если Не СписСчетовБух.НайтиПоЗначению(Счет) = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нельзя указывать счет " + Счет + " в качестве корреспонденции! (счет бух. учета)", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента,
		Затраты.Выгрузить(), 
		"Затраты",
		Отказ, 
		Заголовок, 
		"Поступление", // ВидОперации
		Истина         // ЭтоЗатраты
	);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	
	Если ОтражатьВУправленческомУчете Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
		          + "Подразделение";
	КонецЕсли;
			  
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
		          + "ПодразделениеОрганизации";
	КонецЕсли;
	
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура дополняет список реквизитов табл. части упр. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиУпр(Реквизиты, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") + "Сумма";
	КонецЕсли;
			  
КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиУпр()

// Процедура дополняет список реквизитов табл. части регл. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиРегл(Реквизиты, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") + "СчетЗатрат";
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
			        + "НалоговоеНазначениеДоходовИЗатрат";
	КонецЕсли;
			  
КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиРегл()

// Процедура проверяет заполнение регл. реквизитов табличной части
//
Процедура ПроверитьЗаполнениеСубконтоРегл(Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураПараметров = Новый Структура("Счет, Субконто1, Субконто2, Субконто3",
			"Не выбран счет кредита",
			"Не указано субконто 1 кредита счета",
			"Не указано субконто 2 кредита счета",
			"Не указано субконто 3 кредита счета");
			
		УправлениеЗатратами.ПроверитьЗаполнениеСубконто(ЭтотОбъект, СтруктураПараметров,, Отказ, Заголовок);
	КонецЕсли;
	
	
КонецПроцедуры // ПроверитьЗаполнениеСубконтоРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирования движений регистров
//
Процедура ФормированиеДвижений(СтруктураШапкиДокумента)
	
	УправлениеЗатратамиДвиженияПоРегистрам.СформироватьДвиженияПоОтражениюЗатрат(
		СтруктураШапкиДокумента,
		Неопределено, // ТаблицаЗатрат,
		Неопределено // ВидОтраженияВУчете
	);
	
	ФормированиеДвиженийРегл(СтруктураШапкиДокумента);
	
КонецПроцедуры // ФормированиеДвижений()

// Процедура формирования движений регл. регистров
//
Процедура ФормированиеДвиженийРегл(СтруктураШапкиДокумента)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Проводки = Движения.Хозрасчетный;
	
	Для Каждого СтрокаТабличнойЧасти Из Затраты Цикл
		
		НоваяПроводка = Проводки.Добавить();
		НоваяПроводка.Активность 	= Истина;
		НоваяПроводка.Период     	= Дата;

		НоваяПроводка.Организация 	= Организация;
		НоваяПроводка.Содержание	= "Прочие затраты";
		НоваяПроводка.Сумма  		= СтрокаТабличнойЧасти.СуммаРегл;
		
		Если ВидОперации = Перечисления.ВидыОперацийПрочиеЗатраты.Отражение Тогда
			
			УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(НоваяПроводка, СтрокаТабличнойЧасти, СтруктураШапкиДокумента);
			
			НоваяПроводка.СчетКт = Счет;
			БухгалтерскийУчет.УстановитьСубконто(Счет, НоваяПроводка.СубконтоКт, 1, Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Счет, НоваяПроводка.СубконтоКт, 2, Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Счет, НоваяПроводка.СубконтоКт, 3, Субконто3);
			
			НоваяПроводка.НалоговоеНазначениеДт = СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат;
			НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеДт, СтрокаТабличнойЧасти.СуммаНал);

		Иначе
			
			НоваяПроводка.СчетДт = Счет;
			БухгалтерскийУчет.УстановитьСубконто(Счет, НоваяПроводка.СубконтоДт, 1, Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Счет, НоваяПроводка.СубконтоДт, 2, Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Счет, НоваяПроводка.СубконтоДт, 3, Субконто3);
			
			УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(НоваяПроводка, СтрокаТабличнойЧасти, СтруктураШапкиДокумента, "Кт");
			
			НоваяПроводка.НалоговоеНазначениеКт = СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат;
			НоваяПроводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеКт, СтрокаТабличнойЧасти.СуммаНал);
		
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ФормированиеДвиженийРегл()

// Дополняет полями, нужными для упр. учета.
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

// Дополняет полями, нужными для регл. учета.
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеРегл()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()
 
// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь вызовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация, , Заголовок);
		
		Если НЕ Отказ Тогда
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль", мУчетнаяПолитикаНУ.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"           , мУчетнаяПолитикаНУ.ЕстьНДС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Дополним полями, нужными для регл. и упр. учета
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВедениеУчетаЗатратПоПроектам", "ВедениеУчетаЗатратПоПроектам");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
   	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	                	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений регистров, бухгалтерских и налоговых проводок.
	ФормированиеДвижений(СтруктураШапкиДокумента);
	
КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Неопределено,         // ТабличнаяЧастьТовары
			Неопределено,         // ТабличнаяЧастьВозвратнаяТара
			Затраты,              // ТабличнаяЧастьУслуги
			Неопределено,         // ТабличнаяЧастьОборудование
			Неопределено, 		  // ТабличнаяЧастьОбъектыСтроительства
			Неопределено,		  // ТабличнаяЧастьБланкиСтрогогоУчета
			"СчетЗатрат",
			"Субконто",
			Истина  			  // НеЗаполнятьНалоговоеНазначение
		);
	КонецЕсли;	
	
	Если Не мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.ЗаполнитьПроектВСтрокахТабЧасти(ЭтотОбъект, Затраты);
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");

мУказаниеПроектовВТабличнойЧастиДокументов = УправлениеПроектами.УказаниеПроектовВТабличнойЧастиДокументов();


