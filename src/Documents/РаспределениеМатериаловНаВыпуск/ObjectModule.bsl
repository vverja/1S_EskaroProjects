Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мУчетнаяПолитика;                 // (Упр)
Перем мУчетнаяПолитикаБух;              // (Регл)

Перем мИспользоватьНаработку Экспорт;

Перем мОписаниеТипаКолво;               // (Общ) Описания типа число для хранения количество
Перем мИспользоватьПотребностиЗаказовНаПроизводство;
Перем мСпособЗакрытияПотребностейЗаказовНаПроизводство;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура добавляет данные по материалам из требование-накладная
//
Процедура ДобавитьИзТребованиеНакладной() Экспорт
	
	ФормаВыбора = Документы.ТребованиеНакладная.ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Отбор = ФормаВыбора.Отбор.ПодразделениеОрганизации;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = ПодразделениеОрганизации;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокТН = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокТН) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ДокТН.Материалы Цикл
		
		НоваяСтрока = Материалы.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьИзТребованиеНакладной()

// Процедура добавляет данные по материалам из документов выпуска продукции
//
Процедура ДобавитьМатериалыИзДокументаВыпуска() Экспорт
	
	// Выбрать документ выпуска
	СписокДокВыпуска = Новый СписокЗначений;
	ПоУмолчанию = СписокДокВыпуска.Добавить( "ОтчетПроизводстваЗаСмену", Метаданные.Документы[ "ОтчетПроизводстваЗаСмену"].Представление());
	СписокДокВыпуска.Добавить( "АктОбОказанииПроизводственныхУслуг", Метаданные.Документы[ "АктОбОказанииПроизводственныхУслуг"].Представление());
	СписокДокВыпуска.Добавить( "ПоступлениеТоваровИзПереработки", Метаданные.Документы[ "ПоступлениеТоваровИзПереработки"].Представление());
	СписокДокВыпуска.СортироватьПоПредставлению();
	
	Выбор = СписокДокВыпуска.ВыбратьЭлемент("Выберите тип документа выпуска...", ПоУмолчанию);
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТипДокВыпуска = Выбор.Значение;
	
	ФормаВыбора = Документы[ТипДокВыпуска].ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Отбор = ФормаВыбора.Отбор.ПодразделениеОрганизации;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = ПодразделениеОрганизации;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокВыпуска = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокВыпуска) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьСтатьиЗатратВШапке = ДокВыпуска.Метаданные().Реквизиты.Найти("ВводитьСтатьиЗатратПоСтрокам") <> Неопределено;
	
	Для Каждого СтрокаТЧ Из ДокВыпуска.Материалы Цикл
		
		НоваяСтрока = Материалы.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.НоменклатурнаяГруппа = НоваяСтрока.Номенклатура.НоменклатурнаяГруппаЗатрат;
		
		Если ЕстьСтатьиЗатратВШапке И НЕ ДокВыпуска.ВводитьСтатьиЗатратПоСтрокам Тогда
			НоваяСтрока.СтатьяЗатрат = ДокВыпуска.СтатьяЗатрат;
		КонецЕсли;
		
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля( НоваяСтрока, ПодразделениеОрганизации, НоваяСтрока.СтатьяЗатрат);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьМатериалыИзДокументаВыпуска()

// Процедура добавляет данные по продукции из документов выпуска продукции
//
Процедура ДобавитьПродукциюИзДокументаВыпуска() Экспорт
	
	// Выбрать документ выпуска
	СписокДокВыпуска = Новый СписокЗначений;
	ПоУмолчанию = СписокДокВыпуска.Добавить( "ОтчетПроизводстваЗаСмену", Метаданные.Документы[ "ОтчетПроизводстваЗаСмену"].Представление());
	СписокДокВыпуска.Добавить( "АктОбОказанииПроизводственныхУслуг", Метаданные.Документы[ "АктОбОказанииПроизводственныхУслуг"].Представление());
	СписокДокВыпуска.Добавить( "ПоступлениеТоваровИзПереработки", Метаданные.Документы[ "ПоступлениеТоваровИзПереработки"].Представление());
	СписокДокВыпуска.СортироватьПоПредставлению();
	
	Выбор = СписокДокВыпуска.ВыбратьЭлемент("Выберите тип документа выпуска...", ПоУмолчанию);
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТипДокВыпуска = Выбор.Значение;
	
	ФормаВыбора = Документы[ТипДокВыпуска].ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Отбор = ФормаВыбора.Отбор.ПодразделениеОрганизации;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = ПодразделениеОрганизации;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокВыпуска = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокВыпуска) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабЧасти = ?( ДокВыпуска.Метаданные().ТабличныеЧасти.Найти("Продукция") = Неопределено, "Услуги", "Продукция");
	
	Для Каждого СтрокаТЧ Из ДокВыпуска[ИмяТабЧасти] Цикл
		
		НоваяСтрока = Продукция.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПродукциюИзДокументаВыпуска()

#КонецЕсли

// Процедура заполняет материалы, необходимые для выпуска продукции по нормативам,
// с учетом остатков незавершенного производства и данным инвентаризации.
//
Процедура ЗаполнитьПоРасчетнымДанным() Экспорт
	
	// Выполняются пп. 1-5
	ТабЗатраты = ПолучитьТаблицуЗатрат();
	
	#Если Клиент Тогда
		
	Если ТабЗатраты.Найти(Истина, "ФлагИнв") = Неопределено Тогда
		Предупреждение("Не найден документ ""Инвентаризация незавершенного производства"". Заполнение не выполнено.");
		Возврат;
	КонецЕсли;
	
	#КонецЕсли
			
	// Выполняется п. 6
	ТабВыпуска = ПолучитьТаблицуВыпуск();
	
	// Выполняется п. 7
	// Запрос к спецификациям и к рег.ВыпускПродукции,
	// по результатам которого создается таблица ТабНорматив
	ТабНорматив = ПолучитьТаблицуНормативов();
	
	// Выполняется п. 8-10
	ТабЗатратыНаВыпуск = РассчитатьНормативноеКоличество(ТабЗатраты, ТабВыпуска, ТабНорматив);
	
	// Больше не нужны. Освободим память
	ТабЗатраты  = 0;
	ТабВыпуска  = 0;
	ТабНорматив = 0;
	
	// Запишем затраты на выпуск в табличные части документа
	ЗаполнитьДокументЗатратамиНаВыпуск(ТабЗатратыНаВыпуск);
	
	// Освободим память
	ТабЗатратНаВыпуск = 0;
	
КонецПроцедуры // ЗаполнитьПоРасчетнымДанным()

// Процедура заполняет материалы по спецификациям номенклатуры.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если Материалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		Материалы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьМатериалы = Материалы.Выгрузить();
	ТабличнаяЧастьПродукция = Продукция.Выгрузить();
	СтруктураДопКолонок = Новый Структура("Заказ, ВидВыпуска, НоменклатурнаяГруппа, СчетЗатрат");
	Отбор = Новый Структура();

	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата);

	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, СтатьяЗатрат, Заказ, ВидВыпуска, НоменклатурнаяГруппа,
									|СчетЗатрат", "Количество");
	
	Материалы.Загрузить(ТабличнаяЧастьМатериалы);
		
КонецПроцедуры // ЗаполнитьМатериалыПоСпецификации()

// Процедура заполняет возвратные отходы по спецификациям номенклатуры.
//
Процедура ЗаполнитьВозвратныеОтходыПоСпецификации() Экспорт
	
	Если ВозвратныеОтходы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Возвратные отходы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		ВозвратныеОтходы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьВозвратныеОтходы = ВозвратныеОтходы.Выгрузить();
	ТабличнаяЧастьПродукция = Продукция.Выгрузить();
	СтруктураДопКолонок = Новый Структура("Заказ, ВидВыпуска, НоменклатурнаяГруппа, СчетЗатрат");
	Отбор = Новый Структура();

	УправлениеПроизводством.ЗаполнитьВозвратныеОтходыПоСпецификациям(ТабличнаяЧастьВозвратныеОтходы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата);

	ТабличнаяЧастьВозвратныеОтходы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, СтатьяЗатрат, ВидВыпуска, Заказ, НоменклатурнаяГруппа,
									|СчетЗатрат", "Количество");
									
	ВозвратныеОтходы.Загрузить(ТабличнаяЧастьВозвратныеОтходы);

КонецПроцедуры // ЗаполнитьВозвратныеОтходыПоСпецификации()

// Процедура заполнения табличной части распределение материалов.
//
Процедура ЗаполнитьТаблицуРаспределенияМатериалов() Экспорт
	
	Если Материалы.Количество() = 0 Тогда
		#Если Клиент Тогда
		Предупреждение("Не заполнена табличная часть ""Материалы""!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	Если Продукция.Количество() = 0 Тогда
		#Если Клиент Тогда
		Предупреждение("Не заполнена табличная часть ""Продукция""!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	Если РаспределениеМатериалов.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		РаспределениеМатериалов.Очистить();
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураДопКолонок = Новый Структура("Заказ, ВидВыпуска, НоменклатурнаяГруппа, СчетЗатрат, НалоговоеНазначение");
	Отбор = Новый Структура();
	УправлениеПроизводством.ЗаполнитьРаспределениеМатериаловНаПродукцию(СтруктураШапкиДокумента, Материалы, Продукция, РаспределениеМатериалов, СтруктураДопКолонок, Отбор);
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияМатериалов()

// Процедура заполнения табличной части распределение возвратных отходов.
//
Процедура ЗаполнитьТаблицуРаспределенияВозвратныхОтходов() Экспорт
	
	Если ВозвратныеОтходы.Количество() = 0 Тогда
		#Если Клиент Тогда
		Предупреждение("Не заполнена табличная часть ""Возвратные отходы""!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	Если Продукция.Количество() = 0 Тогда
		#Если Клиент Тогда
		Предупреждение("Не заполнена табличная часть ""Продукция""!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	Если РаспределениеВозвратныхОтходов.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		РаспределениеВозвратныхОтходов.Очистить();
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураДопКолонок = Новый Структура("Заказ, ВидВыпуска, НоменклатурнаяГруппа, СчетЗатрат, НалоговоеНазначение");
	Отбор = Новый Структура();
	УправлениеПроизводством.ЗаполнитьРаспределениеВозвратныхОтходовНаПродукцию(СтруктураШапкиДокумента, ВозвратныеОтходы, Продукция, РаспределениеВозвратныхОтходов, СтруктураДопКолонок, Отбор);
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияВозвратныхОтходов()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
							   |Материалы.ПодразделениеНЗП, РаспределениеМатериалов.ПодразделениеНЗП,
							   |ВозвратныеОтходы.ПодразделениеНЗП, РаспределениеВозвратныхОтходов.ПодразделениеНЗП,";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
							   |Материалы.ПодразделениеОрганизацииНЗП, РаспределениеМатериалов.ПодразделениеОрганизацииНЗП,
							   |ВозвратныеОтходы.ПодразделениеОрганизацииНЗП, РаспределениеВозвратныхОтходов.ПодразделениеОрганизацииНЗП,
							   |Материалы.СчетЗатрат, РаспределениеМатериалов.СчетЗатрат,
							   |ВозвратныеОтходы.СчетЗатрат, РаспределениеВозвратныхОтходов.СчетЗатрат,
							   |Продукция.СчетЗатрат,
						       |РаспределениеМатериалов.НалоговоеНазначение,
							   |РаспределениеВозвратныхОтходов.НалоговоеНазначение,
							   |Продукция.НалоговоеНазначение";
							   
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Функция проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	РеквизитыШапки = "Организация, ДатаНачалаПериода";
	ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);
	
	РеквизитыТабМат = "Номенклатура, Количество, СтатьяЗатрат";
	
	РеквизитыТабРаспМат = "Номенклатура, Количество, СтатьяЗатрат, Продукция, СчетЗатрат";
	РеквизитыТабРаспределенияОтходов = "Номенклатура, СтатьяЗатрат, Количество, Продукция, СчетЗатрат";
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
		РеквизитыТабРаспределенияОтходов = РеквизитыТабРаспределенияОтходов + ", НалоговоеНазначение";
	КонецЕсли; 
	
	Если ИспользоватьНаработку Тогда
		РеквизитыТабМат 	= РеквизитыТабМат + ", ВидВыпуска";
		РеквизитыТабРаспМат = РеквизитыТабРаспМат + ", ВидВыпуска";
		РеквизитыТабРаспределенияОтходов = РеквизитыТабРаспределенияОтходов + ", ВидВыпуска";
	КонецЕсли;
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспМат, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "РаспределениеМатериалов");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспределенияОтходов, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "РаспределениеВозвратныхОтходов");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеМатериалов", Новый Структура(РеквизитыТабРаспМат), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТабМат), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеВозвратныхОтходов", Новый Структура(РеквизитыТабРаспределенияОтходов), Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	
	// Проверим что указаны производственные подразделения в шапке документа
	УправлениеПроизводством.ПроверитьПроизводственныеПодразделения(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
	Если ОтражатьВУправленческомУчете Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
	КонецЕсли;
	
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "РаспределениеМатериалов", , Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Продукция", , Отказ, Заголовок);
	
	Если ДатаНачалаПериода > Дата Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата начала периода не может быть больше даты документа!", Отказ, Заголовок);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		Для Каждого СтрокаРаспределения Из РаспределениеМатериалов Цикл
			Если Не ЗначениеЗаполнено(СтрокаРаспределения.НалоговоеНазначение)
				И (СтрокаРаспределения.СтатьяЗатрат.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
				
				Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение в строке № " + СтрокаРаспределения.НомерСтроки + " (таб. часть ""Распределение материалов"")", Отказ, Заголовок);
				
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;	
	
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		РаспределениеМатериалов.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
		"Распределение материалов",
		Отказ, 
		Заголовок, 
		"Производство"
	);	
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		РаспределениеВозвратныхОтходов.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
		"Распределение возвратных отходов",
		Отказ, 
		Заголовок, 
		"Производство"
	);	
	
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Подразделение";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "ПодразделениеОрганизации";
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура заполняет счета затрат по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаЗатратРегл(СтрокаТЧ, ФлагБух) Экспорт

	СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, Неопределено);

	Если ФлагБух = Истина Тогда
		СтрокаТЧ.СчетЗатрат = СчетаУчетаЗатрат.СчетУчетаБУ;
	ИначеЕсли ФлагБух = Ложь Тогда
		СтрокаТЧ.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПустаяСсылка()
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаЗатратРегл()

Процедура ЗаполнитьСчетаЗатратВТабЧастиРегл(ТабЧасть, ФлагБух) Экспорт

	Для Каждого СтрокаТЧ Из ТабЧасть Цикл
		ЗаполнитьСчетаЗатратРегл(СтрокаТЧ, ФлагБух);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаУЗатратВТабЧастиРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПолучитьТаблицуЗатратУпр(ТабЗатраты)
	
	// Данным запросом выполняются следующие действия
	// 1. Запрос к рег.НезавершенноеПроизводство:
	// 2. Запрос к док.Инвентаризация НЗП по текущему подразделению
	// 3. Запрос к рег.ЗатратыНаВыпускПродукции:
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	РегНЗПОст.СтатьяЗатрат,
		|	РегНЗПОст.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	РегНЗПОст.Заказ КАК Заказ,
		|	РегНЗПОст.Затрата,
		|	РегНЗПОст.ХарактеристикаЗатраты,
		|	РегНЗПОст.СерияЗатраты,
		|	Ложь КАК ФлагИнв,
		|	РегНЗПОст.КоличествоОстаток КАК КолНачОст,
		|	0 КАК КолПриход,
		|	0 КАК КолРасход,
		|	0 КАК КолИнв,
		|	0 КАК КолПрям
		|ИЗ
		|	РегистрНакопления.НезавершенноеПроизводство.Остатки(&НачГраница, Подразделение = &Подразделение И СтатьяЗатрат.ВидЗатрат = &ВидЗатратМат) КАК РегНЗПОст
        |
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ
		|	РегНЗП.СтатьяЗатрат,
		|	РегНЗП.НоменклатурнаяГруппа,
		|	РегНЗП.Заказ КАК Заказ,
		|	РегНЗП.Затрата,
		|	РегНЗП.ХарактеристикаЗатраты,
		|	РегНЗП.СерияЗатраты,
		|	Ложь КАК ФлагИнв,
		|	0 КАК КолНачОст,
		|	ВЫБОР КОГДА РегНЗП.КодОперации В (&КодыОперацийНЗП)
		|		 	   И РегНЗП.ВидДвижения = &ДвижПриход ТОГДА
		|		РегНЗП.Количество
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ,
		|	ВЫБОР КОГДА РегНЗП.КодОперации В (&КодыОперацийРасходФикс)
		|			  И РегНЗП.ВидДвижения = &ДвижРасход ТОГДА
		|		РегНЗП.Количество
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ,
		|	0 КАК КолИнв,
		|	0 КАК КолПрям
		|ИЗ
		|	РегистрНакопления.НезавершенноеПроизводство КАК РегНЗП
        |
		|ГДЕ
		|	РегНЗП.Период МЕЖДУ &НачДата И &КонДата
		|	И РегНЗП.Регистратор.Ссылка <> &ТекДок
		|	И РегНЗП.СтатьяЗатрат.ВидЗатрат = &ВидЗатратМат
		|   И (РегНЗП.КодОперации В (&КодыОперацийНЗП)
		|	   ИЛИ РегНЗП.КодОперации В (&КодыОперацийРасходФикс))
		|	И РегНЗП.Подразделение = &Подразделение
        |
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ
		|	ДокИнв.СтатьяЗатрат,
		|	ДокИнв.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|
		|	ВЫБОР КОГДА ДокИнв.Заказ ССЫЛКА Документ.ЗаказПокупателя И ДокИнв.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) ТОГДА
		|		ДокИнв.Заказ
		|	КОГДА ДокИнв.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И ДокИнв.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) ТОГДА
		|		ДокИнв.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК Заказ,
		|     
		|	ДокИнв.Номенклатура,
		|	ДокИнв.ХарактеристикаНоменклатуры,
		|	ДокИнв.СерияНоменклатуры,
		|	Истина КАК ФлагИнв,
		|	0 КАК КолНачОст,
		|	0 КАК КолПриход,
		|	0 КАК КолРасход,
		|	ВЫБОР КОГДА ДокИнв.Номенклатура.ЕдиницаХраненияОстатков ЕСТЬ NULL ТОГДА
		|   	ДокИнв.Количество
		|	ИНАЧЕ
		|		ДокИнв.Количество * ДокИнв.Коэффициент / ДокИнв.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
		|	КОНЕЦ КАК КолИнв,
		|	0 КАК КолПрям
		|ИЗ
		|	Документ.ИнвентаризацияНЗП.Материалы КАК ДокИнв
        |
		|ГДЕ
		|	ДокИнв.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
		|	И ДокИнв.СтатьяЗатрат.ВидЗатрат = &ВидЗатратМат
		|	И Не ДокИнв.Ссылка.ПометкаУдаления
		|	И %УсловиеДокИнв%
		|	И ДокИнв.Ссылка.Подразделение = &Подразделение
        |
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ
		|	РегЗатр.СтатьяЗатрат,
		|	РегЗатр.НоменклатурнаяГруппаНЗП КАК НоменклатурнаяГруппа,
		|	РегЗатр.ЗаказНЗП КАК Заказ,
		|	РегЗатр.Затрата,
		|	РегЗатр.ХарактеристикаЗатраты,
		|	РегЗатр.СерияЗатраты,
		|	Ложь КАК ФлагИнв,
		|	0 КАК КолНачОст,
		|	0 КАК КолПриход,
		|	0 КАК КолРасход,
		|	0 КАК КолИнв,
		|	РегЗатр.Количество КАК КолПрям
		|ИЗ
		|	РегистрНакопления.ЗатратыНаВыпускПродукции КАК РегЗатр
        |
		|ГДЕ
		|	РегЗатр.Период МЕЖДУ &НачДата И &КонДата
		|	И РегЗатр.Регистратор.Ссылка <> &ТекДок
		|	И РегЗатр.СтатьяЗатрат.ВидЗатрат = &ВидЗатратМат
		|   И РегЗатр.КодОперации В (&КодыОперЗатраты)
		|	И %УсловиеРегЗатр%
		|	И РегЗатр.Подразделение = &Подразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ
		|	ЗатратыНаВыпускПродукцииНаработка.СтатьяЗатрат,
		|	ЗатратыНаВыпускПродукцииНаработка.НоменклатурнаяГруппа,
		|	ЗатратыНаВыпускПродукцииНаработка.Заказ,
		|	ЗатратыНаВыпускПродукцииНаработка.Затрата,
		|	ЗатратыНаВыпускПродукцииНаработка.ХарактеристикаЗатраты,
		|	ЗатратыНаВыпускПродукцииНаработка.СерияЗатраты,
		|	Ложь КАК ФлагИнв,
		|	0 КАК КолНачОст,
		|	0 КАК КолПриход,
		|	0 КАК КолРасход,
		|	0 КАК КолИнв,
		|	ЗатратыНаВыпускПродукцииНаработка.Количество КАК КолПрям
		|ИЗ
		|	РегистрНакопления.ЗатратыНаВыпускПродукцииНаработка КАК ЗатратыНаВыпускПродукцииНаработка
        |
		|ГДЕ
		|	ЗатратыНаВыпускПродукцииНаработка.Период МЕЖДУ &НачДата И &КонДата
		|	И ЗатратыНаВыпускПродукцииНаработка.СтатьяЗатрат.ВидЗатрат = &ВидЗатратМат
		|   И ЗатратыНаВыпускПродукцииНаработка.КодОперации В (&КодыОперЗатраты)
		|	И ЗатратыНаВыпускПродукцииНаработка.Подразделение = &Подразделение
		|
		|ИТОГИ МАКСИМУМ(ФлагИнв), СУММА(КолНачОст), СУММА(КолПриход), СУММА(КолРасход), СУММА(КолИнв), СУММА(КолПрям) ПО
		|	Заказ,
		|	НоменклатурнаяГруппа,
		|	Затрата,
		|	ХарактеристикаЗатраты,
		|	СтатьяЗатрат,
		|	СерияЗатраты";
		
	Запрос.УстановитьПараметр("НачГраница", Новый Граница( ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница", Новый Граница( Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачДата",      ДатаНачалаПериода);
	Запрос.УстановитьПараметр("КонДата",      ?(ЭтоНовый(), КонецДня(Дата), Дата));
	Запрос.УстановитьПараметр("ДвижПриход",   ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДвижРасход",   ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидЗатратМат", Перечисления.ВидыЗатрат.Материальные);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	// Пустые заказы
	МассивПустыеЗаказы = Новый Массив;
	МассивПустыеЗаказы.Добавить(Документы.ЗаказПокупателя   .ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ПустыеЗаказы", МассивПустыеЗаказы);
	
	// Коды операций
	МассивКодовОперНЗП = Новый Массив;
	МассивКодовОперНЗП.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно);
	МассивКодовОперНЗП.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеКоличестваВПроизводствоОперативно);
	
	Запрос.УстановитьПараметр("КодыОперацийНЗП", МассивКодовОперНЗП);
	
	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацийРасходФикс", МассивКодовОпераций);
	
	МассивКодыОперЗатраты = Новый Массив;
	МассивКодыОперЗатраты.Добавить( Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодыОперЗатраты.Добавить( Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	Запрос.УстановитьПараметр("КодыОперЗатраты", МассивКодыОперЗатраты);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеДокИнв%",            "ДокИнв.Ссылка.ОтражатьВУправленческомУчете = ИСТИНА");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеРегЗатр%",           "ИСТИНА");
	
	Запрос.УстановитьПараметр("ТекДок", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаполнитьТаблицуЗатрат(ТабЗатраты, РезультатЗапроса);
	
КонецПроцедуры // ПолучитьТаблицуЗатратУпр()

Процедура ПолучитьТаблицуЗатратРегл(ТабЗатраты)
	
	// Данным запросом выполняются следующие действия
	// 1. Запрос к рег.НезавершенноеПроизводство:
	// 2. Запрос к док.Инвентаризация НЗП по текущему подразделению
	// 3. Запрос к рег.ЗатратыНаВыпускПродукции:
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		СуффиксИмениРегистра = "БухгалтерскийУчет";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	РегНЗПОст.СчетУчета КАК СчетУчета,
		|	РегНЗПОст.НалоговоеНазначение КАК НалоговоеНазначение,
		|	РегНЗПОст.СтатьяЗатрат,
		|	РегНЗПОст.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	РегНЗПОст.Заказ КАК Заказ,
		|	РегНЗПОст.Затрата,
		|	РегНЗПОст.ХарактеристикаЗатраты,
		|	РегНЗПОст.СерияЗатраты,
		|	Ложь КАК ФлагИнв,
		|	РегНЗПОст.КоличествоОстаток КАК КолНачОст,
		|	0 КАК КолПриход,
		|	0 КАК КолРасход,
		|	0 КАК КолИнв,
		|	0 КАК КолПрям
		|ИЗ
		|	РегистрНакопления.НезавершенноеПроизводствоБухгалтерскийУчет.Остатки(&НачГраница, Подразделение = &Подразделение И СтатьяЗатрат.ВидЗатрат = &ВидЗатратМат) КАК РегНЗПОст
        |
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ
		|	РегНЗП.СчетУчета,
		|	РегНЗП.НалоговоеНазначение КАК НалоговоеНазначение,
		|	РегНЗП.СтатьяЗатрат,
		|	РегНЗП.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	РегНЗП.Заказ КАК Заказ,
		|	РегНЗП.Затрата,
		|	РегНЗП.ХарактеристикаЗатраты,
		|	РегНЗП.СерияЗатраты,
		|	Ложь КАК ФлагИнв,
		|	0 КАК КолНачОст,
		|	ВЫБОР КОГДА РегНЗП.КодОперации В (&КодыОперацийНЗП)
		|		 	   И РегНЗП.ВидДвижения = &ДвижПриход ТОГДА
		|		РегНЗП.Количество
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК КолПриход,
		|	ВЫБОР КОГДА РегНЗП.КодОперации В (&КодыОперацийРасходФикс)
		|			  И РегНЗП.ВидДвижения = &ДвижРасход ТОГДА
		|		РегНЗП.Количество
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК КолРасход,
		|	0 КАК КолИнв,
		|	0 КАК КолПрям
		|ИЗ
		|	РегистрНакопления.НезавершенноеПроизводство%Суффикс% КАК РегНЗП
        |
		|ГДЕ
		|	РегНЗП.Период МЕЖДУ &НачДата И &КонДата
		|	И РегНЗП.Регистратор.Ссылка <> &ТекДок
		|	И РегНЗП.СтатьяЗатрат.ВидЗатрат = &ВидЗатратМат
		|	И (РегНЗП.КодОперации В (&КодыОперацийНЗП)
		|	   ИЛИ РегНЗП.КодОперации В (&КодыОперацийРасходФикс))
		|	И РегНЗП.Подразделение = &Подразделение
        |
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ
		|	ДокИнв.СчетЗатрат,
		|	ДокИнв.НалоговоеНазначение КАК НалоговоеНазначение,
		|	ДокИнв.СтатьяЗатрат,
		|	ДокИнв.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|
		|	ВЫБОР КОГДА ДокИнв.Заказ ССЫЛКА Документ.ЗаказПокупателя И ДокИнв.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) ТОГДА
		|		ДокИнв.Заказ
		|	КОГДА ДокИнв.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И ДокИнв.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) ТОГДА
		|		ДокИнв.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК Заказ,   
		|	ДокИнв.Номенклатура,
		|	ДокИнв.ХарактеристикаНоменклатуры,
		|	ДокИнв.СерияНоменклатуры,
		|	Истина КАК ФлагИнв,
		|	0 КАК КолНачОст,
		|	0 КАК КолПриход,
		|	0 КАК КолРасход,
		|	ВЫБОР КОГДА ДокИнв.Номенклатура.ЕдиницаХраненияОстатков ЕСТЬ NULL ТОГДА
		|   	ДокИнв.Количество
		|	ИНАЧЕ
		|		ДокИнв.Количество * ДокИнв.Коэффициент / ДокИнв.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
		|	КОНЕЦ КАК КолИнв,
		|	0 КАК КолПрям
		|ИЗ
		|	Документ.ИнвентаризацияНЗП.Материалы КАК ДокИнв
        |
		|ГДЕ
		|	ДокИнв.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
		|	И ДокИнв.СтатьяЗатрат.ВидЗатрат = &ВидЗатратМат
		|	И Не ДокИнв.Ссылка.ПометкаУдаления
		|	И ДокИнв.Ссылка.Организация = &Организация
		|	И ДокИнв.Ссылка.ОтражатьВБухгалтерскомУчете = ИСТИНА
		|   И ВЫБОР КОГДА ДокИнв.Ссылка.ОтражатьВБухгалтерскомУчете ТОГДА
		|		ДокИнв.Ссылка.ПодразделениеОрганизации
		|	ИНАЧЕ
		|		ДокИнв.Ссылка.Подразделение
		|	КОНЕЦ = &Подразделение
        |
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РегЗатр.СчетУчета,
		|	РегЗатр.НалоговоеНазначение КАК НалоговоеНазначение,
		|	РегЗатр.СтатьяЗатрат,
		|	РегЗатр.НоменклатурнаяГруппаНЗП КАК НоменклатурнаяГруппа,
		|	РегЗатр.ЗаказНЗП КАК Заказ,
		|	РегЗатр.Затрата,
		|	РегЗатр.ХарактеристикаЗатраты,
		|	РегЗатр.СерияЗатраты,
		|	Ложь КАК ФлагИнв,
		|	0 КАК КолНачОст,
		|	0 КАК КолПриход,
		|	0 КАК КолРасход,
		|	0 КАК КолИнв,
		|	РегЗатр.Количество КАК КолПрям
		|ИЗ
		|	РегистрНакопления.ЗатратыНаВыпускПродукции%Суффикс% КАК РегЗатр
		|
		|ГДЕ
		|	РегЗатр.Период МЕЖДУ &НачДата И &КонДата
		|	И РегЗатр.Регистратор.Ссылка <> &ТекДок
		|	И РегЗатр.СтатьяЗатрат.ВидЗатрат = &ВидЗатратМат
		|	И РегЗатр.КодОперации В (&КодыОперЗатраты)
		|	И РегЗатр.Подразделение = &Подразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ
		|	ЗатратыНаВыпускПродукцииНаработка.СчетУчета,
		|	ЗатратыНаВыпускПродукцииНаработка.НалоговоеНазначение КАК НалоговоеНазначение,
		|	ЗатратыНаВыпускПродукцииНаработка.СтатьяЗатрат,
		|	ЗатратыНаВыпускПродукцииНаработка.НоменклатурнаяГруппа,
		|	ЗатратыНаВыпускПродукцииНаработка.Заказ,
		|	ЗатратыНаВыпускПродукцииНаработка.Затрата,
		|	ЗатратыНаВыпускПродукцииНаработка.ХарактеристикаЗатраты,
		|	ЗатратыНаВыпускПродукцииНаработка.СерияЗатраты,
		|	Ложь КАК ФлагИнв,
		|	0 КАК КолНачОст,
		|	0 КАК КолПриход,
		|	0 КАК КолРасход,
		|	0 КАК КолИнв,
		|	ЗатратыНаВыпускПродукцииНаработка.Количество КАК КолПрям
		|ИЗ
		|	РегистрНакопления.ЗатратыНаВыпускПродукцииНаработка%Суффикс% КАК ЗатратыНаВыпускПродукцииНаработка
        |
		|ГДЕ
		|	ЗатратыНаВыпускПродукцииНаработка.Период МЕЖДУ &НачДата И &КонДата
		|	И ЗатратыНаВыпускПродукцииНаработка.СтатьяЗатрат.ВидЗатрат = &ВидЗатратМат
		|   И ЗатратыНаВыпускПродукцииНаработка.КодОперации В (&КодыОперЗатраты)
		|	И ЗатратыНаВыпускПродукцииНаработка.Подразделение = &Подразделение
		|
		|ИТОГИ МАКСИМУМ(ФлагИнв), СУММА(КолНачОст), СУММА(КолПриход), СУММА(КолРасход), СУММА(КолИнв), СУММА(КолПрям)
		|ПО
		|	СчетУчета,
		|	СтатьяЗатрат,
		|	Заказ,
		|	НоменклатурнаяГруппа,
		|	Затрата,
		|	ХарактеристикаЗатраты,
		|	СерияЗатраты";
		
	Запрос.УстановитьПараметр("НачГраница", Новый Граница( ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница", Новый Граница( Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачДата",      ДатаНачалаПериода);
	Запрос.УстановитьПараметр("КонДата",      ?(ЭтоНовый(), КонецДня(Дата), Дата));
	Запрос.УстановитьПараметр("ДвижПриход",   ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДвижРасход",   ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидЗатратМат", Перечисления.ВидыЗатрат.Материальные);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекДок", Ссылка);
	
	// Пустые заказы
	МассивПустыеЗаказы = Новый Массив;
	МассивПустыеЗаказы.Добавить(Документы.ЗаказПокупателя   .ПустаяСсылка());	
	Запрос.УстановитьПараметр("ПустыеЗаказы", МассивПустыеЗаказы);
	
	// Коды операций
	МассивКодовОперНЗП = Новый Массив;
	МассивКодовОперНЗП.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно);
	МассивКодовОперНЗП.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеКоличестваВПроизводствоОперативно);
	
	Запрос.УстановитьПараметр("КодыОперацийНЗП", МассивКодовОперНЗП);

	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацийРасходФикс", МассивКодовОпераций);
	
	МассивКодыОперЗатраты = Новый Массив;
	МассивКодыОперЗатраты.Добавить( Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодыОперЗатраты.Добавить( Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	Запрос.УстановитьПараметр("КодыОперЗатраты", МассивКодыОперЗатраты);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Суффикс%", СуффиксИмениРегистра);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаполнитьТаблицуЗатрат(ТабЗатраты, РезультатЗапроса);
	
КонецПроцедуры // ПолучитьТаблицуЗатратРегл()

// Функция формируется таблица затрат
//
//		Параметры: Нет
//
//		Возврат: таблица затрат
//
Функция ПолучитьТаблицуЗатрат()
	
	ТабЗатраты = Новый ТаблицаЗначений;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПолучитьТаблицуЗатратРегл(ТабЗатраты);
	Иначе
		ПолучитьТаблицуЗатратУпр(ТабЗатраты);
	КонецЕсли;
	
	Возврат ТабЗатраты;
	
КонецФункции // ПолучитьТаблицуЗатрат()

// Заполняем таблицу затрат по результату запроса
//
Процедура ЗаполнитьТаблицуЗатрат(ТабЗатраты, РезультатЗапроса)

	// Добавим колонку КолВход,	это количество, которое принимается
	// к распределению на выпуск продукции, после вычета НЗП на конец месяца и
	// количества прямых затрат, указанного явно в документах «ВыпускПродукции» и
	// «ПрямыеМатериальныеЗатраты».
	
	СтрокаРекв = "СтатьяЗатрат, Заказ, НоменклатурнаяГруппа, Затрата, ХарактеристикаЗатраты, СтатьяЗатрат, ФлагИнв," +
				 "КолНачОст, КолПриход, КолРасход, КолИнв, КолПрям";
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтрокаРекв = СтрокаРекв + ", СчетУчета, НалоговоеНазначение";
	КонецЕсли;
	ТабЗатраты = УправлениеПроизводством.КопироватьСтруктуруТаблицыЗначений( РезультатЗапроса, СтрокаРекв);
		
	ТабЗатраты.Колонки.Добавить("ТабСерийЗатрат", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТабЗатраты.Колонки.Добавить("КолВход",  мОписаниеТипаКолво);
	
	ОбходСчет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходСчет.Следующий() Цикл
		ОбходСтат = ОбходСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходСтат.Следующий() Цикл
			ОбходЗаказ = ОбходСтат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходЗаказ.Следующий() Цикл
				ОбходНомГруп = ОбходЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходНомГруп.Следующий() Цикл
					ОбходЗатрата = ОбходНомГруп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ОбходЗатрата.Следующий() Цикл
						ОбходХар = ОбходЗатрата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ОбходХар.Следующий() Цикл
							
							НоваяСтрока = ТабЗатраты.Добавить();
							Если ОтражатьВБухгалтерскомУчете Тогда
								НоваяСтрока.СчетУчета = ОбходХар.СчетУчета;
								НоваяСтрока.НалоговоеНазначение = ОбходХар.НалоговоеНазначение;
							КонецЕсли;
							
							НоваяСтрока.Заказ        = ОбходХар.Заказ;
							НоваяСтрока.Затрата      = ОбходХар.Затрата;
							НоваяСтрока.СтатьяЗатрат = ОбходХар.СтатьяЗатрат;
							НоваяСтрока.ХарактеристикаЗатраты   = ОбходХар.ХарактеристикаЗатраты;
							НоваяСтрока.НоменклатурнаяГруппа = ОбходХар.НоменклатурнаяГруппа;
							
							НоваяСтрока.КолНачОст = ОбходХар.КолНачОст;
							НоваяСтрока.КолПриход = ОбходХар.КолПриход;
							НоваяСтрока.КолРасход = ОбходХар.КолРасход;
							НоваяСтрока.КолИнв    = ОбходХар.КолИнв;
							НоваяСтрока.КолПрям   = ОбходХар.КолПрям;
							
							НоваяСтрока.ФлагИнв   = ОбходХар.ФлагИнв;
							
							НоваяСтрока.ТабСерийЗатрат.Колонки.Добавить("СерияЗатраты", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
							НоваяСтрока.ТабСерийЗатрат.Колонки.Добавить("ФлагИнв",      Новый ОписаниеТипов("Булево"));
							НоваяСтрока.ТабСерийЗатрат.Колонки.Добавить("КолВход",      мОписаниеТипаКолво);
							
							Обход = ОбходХар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока Обход.Следующий() Цикл
								
								НоваяСерия = НоваяСтрока.ТабСерийЗатрат.Добавить();
								НоваяСерия.СерияЗатраты = Обход.СерияЗатраты;
								НоваяСерия.ФлагИнв = Обход.ФлагИнв;
								
								Если НоваяСтрока.ФлагИнв Тогда
								
									НоваяСерия.КолВход = Обход.КолНачОст + Обход.КолПриход
										- Обход.КолРасход - Обход.КолИнв - Обход.КолПрям;
										
								КонецЕсли;
								
							КонецЦикла;
							
							НоваяСтрока.ТабСерийЗатрат.Свернуть("СерияЗатраты, ФлагИнв", "КолВход");
							НоваяСтрока.КолВход = НоваяСтрока.ТабСерийЗатрат.Итог("КолВход");
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуЗатрат()
 
// Функция возвращает запрос для заполнения таблицы затрат
//
Функция СформироватьЗапросДляПолученияТаблицыВыпуск()

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВыпускПродукции.Заказ,
		|	ВыпускПродукции.Продукция,
		|	ВыпускПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ВыпускПродукции.ХарактеристикаПродукции,
		|	ВыпускПродукции.СерияПродукции,
		|	ВыпускПродукции.Спецификация,
		|	СУММА(ВыпускПродукции.Количество) КАК КолВыпуск
		|
		|ИЗ
		|	РегистрНакопления.ВыпускПродукции%Суффикс% КАК ВыпускПродукции
		|
		|ГДЕ
		|	ВыпускПродукции.КодОперации В (&КодОпер) И
		|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата И
		|	%УсловиеВыпускПродукции%
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыпускПродукции.Спецификация,
		|	ВыпускПродукции.Заказ,
		|	ВыпускПродукции.Продукция,
		|	ВыпускПродукции.ХарактеристикаПродукции,
		|	ВыпускПродукции.СерияПродукции,
		|	ВыпускПродукции.НоменклатурнаяГруппа";
		
	МассивКодОпер = Новый Массив;
	МассивКодОпер.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодОпер.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад);
	МассивКодОпер.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги);
	МассивКодОпер.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство);
	
	Запрос.УстановитьПараметр("НачДата", ДатаНачалаПериода);
	Запрос.УстановитьПараметр("КонДата", Дата);
	Запрос.УстановитьПараметр("КодОпер", МассивКодОпер);
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросДляПолученияТаблицыВыпуск()

// Заполняем таблицу затрат по результату запроса
//
Процедура ЗаполнитьТаблицуВыпуск(ТабВыпуск, РезЗапроса)

	ТабВыпуск = УправлениеПроизводством.КопироватьСтруктуруТаблицыЗначений(РезЗапроса, "Заказ, Продукция, НоменклатурнаяГруппа, ХарактеристикаПродукции, Спецификация, КолВыпуск");
	ТабВыпуск.Колонки.Добавить("ТабСерийПрод", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ТекИндекс  = 0;
	ВсегоСтрок = РезЗапроса.Количество();
	
	Если ТекИндекс < ВсегоСтрок Тогда
		ТекСтрока = РезЗапроса[ТекИндекс];
	Иначе
		Возврат;
	КонецЕсли;
	
	Пока ТекИндекс < ВсегоСтрок Цикл
		
		НоваяСтрока = ТабВыпуск.Добавить();
		ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений( НоваяСтрока, ТекСтрока,
			"Заказ, Продукция, НоменклатурнаяГруппа, ХарактеристикаПродукции, Спецификация, КолВыпуск");
		НоваяСтрока.ТабСерийПрод = УправлениеПроизводством.КопироватьСтруктуруТаблицыЗначений( РезЗапроса,
			"СерияПродукции, КолВыпуск");
		
		Пока ТекСтрока.Заказ                   = НоваяСтрока.Заказ
		   И ТекСтрока.НоменклатурнаяГруппа    = НоваяСтрока.НоменклатурнаяГруппа
		   И ТекСтрока.Продукция               = НоваяСтрока.Продукция
		   И ТекСтрока.ХарактеристикаПродукции = НоваяСтрока.ХарактеристикаПродукции
		   И ТекСтрока.Спецификация            = НоваяСтрока.Спецификация Цикл
		   
			НовСтрокаСерий = НоваяСтрока.ТабСерийПрод.Добавить();
			ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений( НовСтрокаСерий, ТекСтрока,	"СерияПродукции, КолВыпуск");
			
			ТекИндекс = ТекИндекс + 1;
			Если ТекИндекс >= ВсегоСтрок Тогда
				Прервать;
			КонецЕсли;
			
			ТекСтрока = РезЗапроса[ТекИндекс];
			
		КонецЦикла;
		
		НоваяСтрока.КолВыпуск = НоваяСтрока.ТабСерийПрод.Итог("КолВыпуск");
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуВыпуск()
 
// Функция формирует таблицу с данными о выпуске продукции
//
//		Параметры: нет
//
//		Возврат: таблица выпуска
//
Функция ПолучитьТаблицуВыпуск()
	
	ТабВыпуск = Новый ТаблицаЗначений;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПолучитьТаблицуВыпускРегл(ТабВыпуск);
	Иначе
		ПолучитьТаблицуВыпускУпр(ТабВыпуск);
	КонецЕсли;
	
	Возврат ТабВыпуск;
	
КонецФункции // ПолучитьТаблицуВыпуск()

// Функция формирует таблицу с данными о выпуске продукции
//
//		Параметры: нет
//
//		Возврат: таблица выпуска
//
Процедура ПолучитьТаблицуВыпускУпр(ТабВыпуск)
	
	Запрос = СформироватьЗапросДляПолученияТаблицыВыпуск();
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Суффикс%",                "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеВыпускПродукции%", "ИСТИНА");
	
	РезЗапроса = Запрос.Выполнить().Выгрузить();
	РезЗапроса.Сортировать("Заказ, Продукция, НоменклатурнаяГруппа, ХарактеристикаПродукции, Спецификация");
	
	ЗаполнитьТаблицуВыпуск(ТабВыпуск, РезЗапроса);
	
КонецПроцедуры // ПолучитьТаблицуВыпускУпр()

// Функция формирует таблицу с данными о выпуске продукции
//
//		Параметры: нет
//
//		Возврат: таблица выпуска
//
Процедура ПолучитьТаблицуВыпускРегл(ТабВыпуск)
	
	Запрос = СформироватьЗапросДляПолученияТаблицыВыпуск();
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Суффикс%",                "БухгалтерскийУчет");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеВыпускПродукции%", "ВыпускПродукции.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезЗапроса = Запрос.Выполнить().Выгрузить();
	РезЗапроса.Сортировать("Заказ, Продукция, НоменклатурнаяГруппа, ХарактеристикаПродукции, Спецификация");
	
	ЗаполнитьТаблицуВыпуск(ТабВыпуск, РезЗапроса);
	
КонецПроцедуры // ПолучитьТаблицуВыпускРегл()

// Функция возвращает запрос для заполнения таблицы затрат
//
Функция СформироватьЗапросДляПолученияТаблицыНормативов()

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВыпускПродукции.Продукция               КАК Номенклатура,
		|	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
		|	ВыпускПродукции.Спецификация            КАК Спецификация,
		|	СУММА(ВыпускПродукции.Количество)       КАК Количество,
		|	ВыпускПродукции.Продукция.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения
		|
		|ИЗ
		|	РегистрНакопления.ВыпускПродукции%Суффикс% КАК ВыпускПродукции
		|
		|ГДЕ
		|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата И
		|	ВыпускПродукции.КодОперации В (&КодыОпераций)  И
		|	ВыпускПродукции.Подразделение = &Подразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыпускПродукции.Продукция,
		|	ВыпускПродукции.ХарактеристикаПродукции,
		|	ВыпускПродукции.Спецификация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("НачДата",       ДатаНачалаПериода);
	Запрос.УстановитьПараметр("КонДата",       Дата);
	Запрос.УстановитьПараметр("НачГраница",    Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница",    Новый Граница(Дата, ВидГраницы.Включая));
	
	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить( Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги);
	МассивКодовОпераций.Добавить( Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты);
	МассивКодовОпераций.Добавить( Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство);
	МассивКодовОпераций.Добавить( Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет);
	МассивКодовОпераций.Добавить( Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад);
	
	Запрос.УстановитьПараметр("КодыОпераций", МассивКодовОпераций);
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросДляПолученияТаблицыНормативов()

// Заполняем таблицу затрат по результату запроса
//
Процедура ЗаполнитьТаблицуНормативов(ТабПотребностей, РезультатЗапроса)

	ТабПродукции = РезультатЗапроса.Выгрузить();
	ТабПродукции.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Спецификация, Количество");
	
	СтруктРезультат = Новый Структура;
	СтруктРезультат.Вставить( "Потребности");
				
	СтруктПараметры = Новый Структура;
	СтруктПараметры.Вставить( "ДатаСпецификации", Дата);
	СтруктПараметры.Вставить( "ПараметрыВыпуска", Неопределено);
					
	РазузлованиеНоменклатуры.ПолучитьПотребность(ТабПродукции, СтруктРезультат, СтруктПараметры);
				
	ТабПотребностей = СтруктРезультат["Потребности"];
	
	ТабПотребностей.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Спецификация,
		|Материал, ХарактеристикаМатериала, СтатьяЗатрат", "КоличествоМатериала");
		
	ТабПотребностей.Колонки.Найти("Номенклатура")              .Имя = "Продукция";
	ТабПотребностей.Колонки.Найти("ХарактеристикаНоменклатуры").Имя = "ХарактеристикаПродукции";
	ТабПотребностей.Колонки.Найти("Материал")                  .Имя = "Затрата";
	ТабПотребностей.Колонки.Найти("ХарактеристикаМатериала")   .Имя = "ХарактеристикаЗатраты";
	ТабПотребностей.Колонки.Найти("КоличествоМатериала")       .Имя = "КолНорматив";

КонецПроцедуры // ЗаполнитьТаблицуНормативов()
 
// Функция формирует таблицу нормативных затрат материалов
// рассчитанный исходя из объекма выпуска продукции за период
//
//		Параметры: нет
//
//		Возврат: таблица потребностей материалов
//
Функция ПолучитьТаблицуНормативов()
	
	ТабПотребностей = Новый ТаблицаЗначений;
	
	Если ОтражатьВУправленческомУчете Тогда
		ПолучитьТаблицуНормативовУпр(ТабПотребностей);
	Иначе
		ПолучитьТаблицуНормативовРегл(ТабПотребностей);
	КонецЕсли;
	
	Возврат ТабПотребностей;
	
КонецФункции // ПолучитьТаблицуНормативов()

// Функция формирует таблицу нормативных затрат материалов
// рассчитанный исходя из объекма выпуска продукции за период
//
//		Параметры: нет
//
//		Возврат: таблица потребностей материалов
//
Процедура ПолучитьТаблицуНормативовУпр(ТабПотребностей)
	
	Запрос = СформироватьЗапросДляПолученияТаблицыНормативов();
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Суффикс%", "");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьТаблицуНормативов(ТабПотребностей, РезультатЗапроса);
	
КонецПроцедуры // ПолучитьТаблицуНормативовУпр()

// Функция формирует таблицу нормативных затрат материалов
// рассчитанный исходя из объекма выпуска продукции за период
//
//		Параметры: нет
//
//		Возврат: таблица потребностей материалов
//
Процедура ПолучитьТаблицуНормативовРегл(ТабПотребностей)
	
	Запрос = СформироватьЗапросДляПолученияТаблицыНормативов();
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Суффикс%", "БухгалтерскийУчет");
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьТаблицуНормативов(ТабПотребностей, РезультатЗапроса);
	
КонецПроцедуры // ПолучитьТаблицуНормативовРегл()

// Функция
//
//		Параметры:
//
//
Функция РассчитатьНормативноеКоличество(ТабЗатраты, ТабВыпуска, ТабНорматив)
	
	СтрокаРекв = "ТабСерийЗатрат, Затрата, ХарактеристикаЗатраты, СтатьяЗатрат, Заказ, НоменклатурнаяГруппа, ФлагИнв, КолВход";
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтрокаРекв = СтрокаРекв + ", СчетУчета, НалоговоеНазначение";
	КонецЕсли;
	
	ТабЗатратыНаВыпуск = УправлениеПроизводством.КопироватьСтруктуруТаблицыЗначений(ТабЗатраты, СтрокаРекв);
	ТабЗатратыНаВыпуск.Колонки["Заказ"]               .Имя = "ЗаказНЗП";
	ТабЗатратыНаВыпуск.Колонки["НоменклатурнаяГруппа"].Имя = "НоменклатурнаяГруппаНЗП";
	ТабЗатратыНаВыпуск = УправлениеПроизводством.КопироватьСтруктуруТаблицыЗначений(ТабЗатраты, "Заказ, НоменклатурнаяГруппа", ТабЗатратыНаВыпуск);
	ТабЗатратыНаВыпуск = УправлениеПроизводством.КопироватьСтруктуруТаблицыЗначений(ТабВыпуска,
		"ТабСерийПрод, Продукция, ХарактеристикаПродукции, Спецификация, КолВыпуск",
		ТабЗатратыНаВыпуск);
		
	ТабЗатратыНаВыпуск.Колонки.Добавить("КолНормаНаВыпуск", мОписаниеТипаКолво);
	ТабЗатратыНаВыпуск.Колонки.Добавить("КолКРаспр",        мОписаниеТипаКолво);
	
	МассивКол  = Новый Массив;
	МассивКоэф = Новый Массив;
	МассивКоэфКРаспр = Новый Массив;
	МассивКолКРаспр  = Новый Массив;
	ПараметрыПоискаЗатрат = Новый Структура;
	ПараметрыПоискаВыпуск = Новый Структура;
	
	Для Каждого СтрокаЗатр Из ТабЗатраты Цикл
		
		Если СтрокаЗатр.КолВход <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		флПустойЗаказ  = НЕ ЗначениеЗаполнено( СтрокаЗатр.Заказ);
		флПустаяГруппа = НЕ ЗначениеЗаполнено( СтрокаЗатр.НоменклатурнаяГруппа);
		
		ПараметрыПоискаВыпуск.Очистить();
		ПараметрыПоискаЗатрат.Очистить();
		
		Если флПустойЗаказ И флПустаяГруппа Тогда
			НаборСтрокВыпуска = ТабВыпуска;
		Иначе
			Если Не флПустойЗаказ Тогда
				ПараметрыПоискаВыпуск.Вставить("Заказ", СтрокаЗатр.Заказ);
			КонецЕсли;
			Если Не флПустаяГруппа Тогда
				ПараметрыПоискаВыпуск.Вставить("НоменклатурнаяГруппа", СтрокаЗатр.НоменклатурнаяГруппа);
			КонецЕсли;
		КонецЕсли;
		
		// Обход таблицы выпуска по "нужным" строкам
		ПараметрыПоискаЗатрат.Вставить("Затрата",                 СтрокаЗатр.Затрата);
		ПараметрыПоискаЗатрат.Вставить("ХарактеристикаЗатраты",   СтрокаЗатр.ХарактеристикаЗатраты);
		ПараметрыПоискаЗатрат.Вставить("СтатьяЗатрат",            СтрокаЗатр.СтатьяЗатрат);
		
		МассивКоэф.Очистить();
		МассивКол .Очистить();
		СуммаКоэф = 0;
		
		СтрокиЗатратыПоНормативу = ТабНорматив.НайтиСтроки(ПараметрыПоискаЗатрат);
		Если СтрокиЗатратыПоНормативу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаНорматива Из СтрокиЗатратыПоНормативу Цикл
			СуммаКоэф = СуммаКоэф + СтрокаНорматива.КолНорматив;
			МассивКоэф.Добавить( СтрокаНорматива.КолНорматив);
		КонецЦикла;
		
		МассивКол = ОбщегоНазначения.РаспределитьПропорционально( СтрокаЗатр.КолВход, МассивКоэф, 3);
		Если МассивКол = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Индекс = 0;
		Для Каждого СтрокаНорматива Из СтрокиЗатратыПоНормативу Цикл
			Если МассивКол[Индекс] > 0 Тогда
				ПараметрыПоискаВыпуск.Вставить("Продукция",               СтрокаНорматива.Продукция);
				ПараметрыПоискаВыпуск.Вставить("ХарактеристикаПродукции", СтрокаНорматива.ХарактеристикаПродукции);
				ПараметрыПоискаВыпуск.Вставить("Спецификация",            СтрокаНорматива.Спецификация);
				
				СтрокиВыпуска = ТабВыпуска.НайтиСтроки(ПараметрыПоискаВыпуск);
				МассивКоэфКРаспр.Очистить();
				
				Для Каждого СтрокаВыпуска Из СтрокиВыпуска Цикл
					МассивКоэфКРаспр.Добавить(СтрокаВыпуска.КолВыпуск);
				КонецЦикла;
				
				МассивКолКРаспр = ОбщегоНазначения.РаспределитьПропорционально(МассивКол[Индекс], МассивКоэфКРаспр, 3);
				Если МассивКолКРаспр = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ИндексКРаспр = 0;
				Для Каждого СтрокаВыпуска Из СтрокиВыпуска Цикл
					
					НоваяСтрокаЗатрНаВыпуск = ТабЗатратыНаВыпуск.Добавить();
					ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений( НоваяСтрокаЗатрНаВыпуск, СтрокаЗатр,
						"Затрата, ХарактеристикаЗатраты, ТабСерийЗатрат, СтатьяЗатрат, КолВход"+
						?(ОтражатьВБухгалтерскомУчете,",СчетУчета, НалоговоеНазначение", ""));
						
						НоваяСтрокаЗатрНаВыпуск.ЗаказНЗП                = СтрокаЗатр.Заказ;
						НоваяСтрокаЗатрНаВыпуск.НоменклатурнаяГруппаНЗП = СтрокаЗатр.НоменклатурнаяГруппа;
						
					ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений( НоваяСтрокаЗатрНаВыпуск, СтрокаВыпуска,
						"Продукция, ХарактеристикаПродукции, ТабСерийПрод, Спецификация, Заказ, НоменклатурнаяГруппа, КолВыпуск");
						
					НоваяСтрокаЗатрНаВыпуск.КолКРаспр = МассивКолКРаспр[ИндексКРаспр];
					
					ИндексКРаспр = ИндексКРаспр + 1;
					
				КонецЦикла;
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабЗатратыНаВыпуск;
	
КонецФункции // РассчитатьНормативноеКоличество()

// Процедура
//
//		Параметры:
//
//
Процедура ЗаполнитьДокументЗатратамиНаВыпуск(ТабЗатратНаВыпуск)
	
	Для Каждого СтрокаРаспр Из ТабЗатратНаВыпуск Цикл
		
		Если СтрокаРаспр.КолВыпуск <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРаспр.ТабСерийЗатрат.Свернуть("СерияЗатраты", "КолВход");
		
		МассивКоэфПрод = СтрокаРаспр.ТабСерийПрод  .ВыгрузитьКолонку("КолВыпуск");
		МассивКоэфЗатр = СтрокаРаспр.ТабСерийЗатрат.ВыгрузитьКолонку("КолВход");
		
		МассивРаспрЗатр = ОбщегоНазначения.РаспределитьПропорционально(СтрокаРаспр.КолКРаспр, МассивКоэфЗатр, 3);
		
		Если МассивРаспрЗатр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексЗатр = 0;
		Для Каждого СерияЗатрат Из СтрокаРаспр.ТабСерийЗатрат Цикл
			
			Если МассивРаспрЗатр[ИндексЗатр] = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивРаспрПрод = ОбщегоНазначения.РаспределитьПропорционально(МассивРаспрЗатр[ИндексЗатр], МассивКоэфПрод, 3);
			Если МассивРаспрПрод = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексПрод = 0;
			Для Каждого СерияПрод Из СтрокаРаспр.ТабСерийПрод Цикл
				
				Если Не МассивРаспрПрод[ИндексПрод] = 0 Тогда
					
					НоваяСтрока = РаспределениеМатериалов.Добавить();
					НоваяСтрока.Номенклатура               = СтрокаРаспр.Затрата;
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаРаспр.ХарактеристикаЗатраты;
					НоваяСтрока.СерияНоменклатуры          = СерияЗатрат.СерияЗатраты;
					
					НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
					НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
					
					НоваяСтрока.ВидВыпуска				   = Перечисления.ВидыВыпуска.Выпуск;
					НоваяСтрока.НоменклатурнаяГруппа       = СтрокаРаспр.НоменклатурнаяГруппа;
					НоваяСтрока.НоменклатурнаяГруппаНЗП    = СтрокаРаспр.НоменклатурнаяГруппаНЗП;
					НоваяСтрока.Продукция                  = СтрокаРаспр.Продукция;
					НоваяСтрока.ХарактеристикаПродукции    = СтрокаРаспр.ХарактеристикаПродукции;
					НоваяСтрока.Спецификация               = СтрокаРаспр.Спецификация;
					НоваяСтрока.СерияПродукции             = СерияПрод.СерияПродукции;
					НоваяСтрока.СтатьяЗатрат               = СтрокаРаспр.СтатьяЗатрат;
					НоваяСтрока.Заказ                      = СтрокаРаспр.Заказ;
					НоваяСтрока.ЗаказНЗП                   = СтрокаРаспр.ЗаказНЗП;
					
					НоваяСтрока.Количество                 = МассивРаспрПрод[ИндексПрод];
					Если ОтражатьВБухгалтерскомУчете Тогда
						НоваяСтрока.СчетЗатрат             = СтрокаРаспр.СчетУчета;
						НоваяСтрока.НалоговоеНазначение    = СтрокаРаспр.НалоговоеНазначение;
					КонецЕсли;
					
				КонецЕсли;
				
				ИндексПрод = ИндексПрод + 1;
				
			КонецЦикла;
			
			ИндексЗатр = ИндексЗатр + 1;
		КонецЦикла;
	КонецЦикла;
	
	ТабТемп = РаспределениеМатериалов.Выгрузить();
	
	ТабТемп.Свернуть("
		|Номенклатура, 
		|ХарактеристикаНоменклатуры, 
		|СерияНоменклатуры,
		|ЕдиницаИзмерения,
		|Коэффициент,
		|НоменклатурнаяГруппаНЗП, 
		|СтатьяЗатрат, 
		|ЗаказНЗП, 
		|НалоговоеНазначение, 
		|СчетЗатрат", 
		
		"Количество");
		
	ТабТемп.Колонки["НоменклатурнаяГруппаНЗП"].Имя = "НоменклатурнаяГруппа";
	ТабТемп.Колонки["ЗаказНЗП"].Имя                = "Заказ";
	
	ТабТемп.Колонки.Добавить("ВидВыпуска");
	ТабТемп.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Выпуск,"ВидВыпуска");
	Материалы.Загрузить(ТабТемп);
	
	ТабТемп = 0;
	
	ТаблицаПродукция = Продукция.Выгрузить();
	ТаблицаПродукция.Очистить();
	УправлениеПроизводством.ЗаполнитьПродукциюПоВыпуску(ЭтотОбъект, ТаблицаПродукция);
	
	ТаблицаПродукция.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Выпуск,"ВидВыпуска");
	Продукция.Загрузить(ТаблицаПродукция);
	
КонецПроцедуры // ЗаполнитьДокументЗатратамиНаВыпуск()

// Процедура формирует движения регистров по табличной части Материалы
//
Процедура ДвиженияПоТабличнойЧастиМатериалыУпр(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)

	Если Не ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	НаборДвиженийМат   = Движения["МатериалыВПроизводстве"];
	ТаблицаДвиженийМат = НаборДвиженийМат.ВыгрузитьКолонки();
	
	// Проверка остатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвиженийМат.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Строка Из Материалы Цикл
		Если Строка.Номенклатура.ВестиОперативныйУчетОстатковНЗП Тогда

			НоваяСтрока = ТаблицаДвиженийМат.Добавить();
			НоваяСтрока.Подразделение         = Подразделение;
			НоваяСтрока.Заказ                 = Строка.Заказ;
			НоваяСтрока.Затрата               = Строка.Номенклатура;
			НоваяСтрока.ХарактеристикаЗатраты = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияЗатраты          = Строка.СерияНоменклатуры;
			НоваяСтрока.Количество            = Строка.Количество;
			НоваяСтрока.КодОперации           = Перечисления.КодыОперацийМатериалыВПроизводстве.СписаниеПоПрямымЗатратам;

		КонецЕсли;
	КонецЦикла;

	НаборДвиженийМат.мПериод = Дата;
	НаборДвиженийМат.мТаблицаДвижений = ТаблицаДвиженийМат;
	НаборДвиженийМат.ВыполнитьРасход();
	НаборДвиженийМат.Записать(Ложь);

КонецПроцедуры // ДвиженияПоТабличнойЧастиМатериалыУпр()

// Процедура формирует движения в регистр ЗатратыНаВыпускПродукции
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента)
	
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(СтруктураШапкиДокумента, "РаспределениеМатериаловНаВыпуск", мУчетнаяПолитика, мУчетнаяПолитикаБух);
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ПотребностиЗаказовНаПроизводство
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
		И мИспользоватьПотребностиЗаказовНаПроизводство Тогда
		
		Если мСпособЗакрытияПотребностейЗаказовНаПроизводство = Перечисления.СпособыЗакрытияПотребностейЗаказовНаПроизводство.АвтоматическиПриРаспределении Тогда
			Если РаспределениеМатериалов.Количество() <> 0 Тогда
				ДопПараметры = Новый Структура("ИмяРеквизитаЗаказ,СпособЗакрытияПотребностейЗаказовНаПроизводство","Заказ",мСпособЗакрытияПотребностейЗаказовНаПроизводство);
				ЗаказыНаПроизводствоИПереработку.ВыполнитьПогашениеПотребностиЗаказаНаПроизводство(ЭтотОбъект, "РаспределениеМатериаловНаВыпуск", ДопПараметры);
			КонецЕсли;				
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры // ДвиженияВЗатраты()

// Заполняет упр. реквизиты шапки
//
Процедура ЗаполнитьДополнительныеРеквизитыШапкиУпр(Основание)

	НоменклатурнаяГруппа         = Основание.НоменклатурнаяГруппа;
	Подразделение                = Основание.Подразделение;

КонецПроцедуры // ЗаполнитьДополнительныеРеквизитыШапкиРегл()

// Заполняет регл. реквизиты шапки
//
Процедура ЗаполнитьДополнительныеРеквизитыШапкиРегл(Основание)

	ПодразделениеОрганизации     = Основание.ПодразделениеОрганизации;
	
КонецПроцедуры // ЗаполнитьДополнительныеРеквизитыШапкиРегл()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента)

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		мУчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()
 
//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияНЗП") Тогда
		
		Заказ                        = Основание.Заказ;
		Организация                  = Основание.Организация;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ДокИнвентаризация            = Основание;
		
		ДатаКонецМесяца = КонецМесяца(Основание.Дата);
		Дата = Дата( Год( ДатаКонецМесяца), Месяц( ДатаКонецМесяца), День( ДатаКонецМесяца));
		УстановитьВремя( РежимАвтоВремя.ТекущееИлиПоследним);
		ДатаНачалаПериода = НачалоМесяца(Дата);
		
		ЗаполнитьДополнительныеРеквизитыШапкиУпр(Основание);
		ЗаполнитьДополнительныеРеквизитыШапкиРегл(Основание);
		
		УправлениеПроизводством.ЗаполнитьМатериалыПоИнвентаризацииНЗП(
			ЭтотОбъект, 
			Материалы, 
			ДокИнвентаризация,
			Ложь, // ТолькоОтрицательныеОстатки
			Ложь // ЕстьСумма
		);
		
		Для Каждого СтрокаТЧ Из Материалы Цикл
			СтрокаТЧ.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		
		Организация              = Основание.Организация;
		Подразделение            = Основание.Подразделение;
		ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		
		Для Каждого СтрокаТабличнойЧасти Из Основание.Материалы Цикл
			НоваяСтрока = Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()


// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Продукция				// ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Материалы,				// ТабличнаяЧастьТовары
		);
		
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			РаспределениеМатериалов // ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			РаспределениеВозвратныхОтходов // ТабличнаяЧастьТовары
		);
		
		
	КонецЕсли;
	

	Если Не мИспользоватьНаработку Тогда
		ИспользоватьНаработку = мИспользоватьНаработку;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);

	ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента);
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений регистров
	ДвиженияПоРегистрам(СтруктураШапкиДокумента);
	
	// Формирование движений регистров
	ДвиженияПоТабличнойЧастиМатериалыУпр(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
КонецПроцедуры	// ОбработкаПроведения()

мИспользоватьНаработку = Константы.ИспользоватьНаработку.Получить();

мОписаниеТипаКолво = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
мИспользоватьПотребностиЗаказовНаПроизводство = глЗначениеПеременной("ИспользоватьПотребностиЗаказовНаПроизводство");
мСпособЗакрытияПотребностейЗаказовНаПроизводство 	= глЗначениеПеременной("СпособЗакрытияПотребностейЗаказовНаПроизводство");


