Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мУчетнаяПолитика;                 // (Упр)
Перем мУчетнаяПолитикаБух;              // (Регл)

Перем мИспользоватьНаработку Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
								|ПрочиеЗатраты.ПодразделениеНЗП, ЗатратыНаПродукцию.ПодразделениеНЗП,
								|ПрочиеЗатраты.Сумма, ЗатратыНаПродукцию.Сумма";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
							   |ПрочиеЗатраты.ПодразделениеОрганизацииНЗП, ЗатратыНаПродукцию.ПодразделениеОрганизацииНЗП,
							   |ПрочиеЗатраты.СчетЗатрат, ЗатратыНаПродукцию.СчетЗатрат,
							   |ПрочиеЗатраты.СуммаРегл,  ЗатратыНаПродукцию.СуммаРегл,
							   |Продукция.СчетЗатрат,
						       |ЗатратыНаПродукцию.НалоговоеНазначение,
							   |ПрочиеЗатраты.СуммаНал, ЗатратыНаПродукцию.СуммаНал,
							   |ПрочиеЗатраты.СуммаНДС, ЗатратыНаПродукцию.СуммаНДС,
							   |ПрочиеЗатраты.СуммаНДСКредит, ЗатратыНаПродукцию.СуммаНДСКредит,
							   |Продукция.НалоговоеНазначение";
							   
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура заполняет табличную часть "Прочие затраты" остатками в НЗП.
//
Процедура ЗаполнитьПрочиеЗатратыПоОстаткам() Экспорт
	
	ПрочиеЗатраты.Очистить();
	
	ТаблицаПрочиеЗатраты = ПрочиеЗатраты.Выгрузить();
	УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамНЗП(ЭтотОбъект, ТаблицаПрочиеЗатраты);
	ТаблицаПрочиеЗатраты.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Выпуск,"ВидВыпуска");
	ПрочиеЗатраты.Загрузить(ТаблицаПрочиеЗатраты);
		
КонецПроцедуры // ЗаполнитьПрочиеЗатратыПоОстаткам()

// Процедура заполняет табличную часть "Затраты на выпуск".
//
Процедура ЗаполнитьРаспределениеЗатратНаПродукцию() Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	УправлениеПроизводством.ЗаполнитьРаспределениеПрочихЗатратНаПродукцию(СтруктураШапкиДокумента, ПрочиеЗатраты, Продукция, ЗатратыНаПродукцию);
	
КонецПроцедуры // ЗаполнитьРаспределениеЗатратНаПродукцию()

// Функция проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	Если ОтражатьВБухгалтерскомУчете Тогда
		РеквизитыШапки = "Организация, ДатаНачалаПериода"; 	
	Иначе
		РеквизитыШапки = "ДатаНачалаПериода";	
	КонецЕсли;	
	
	ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);
	
	РеквизитыТабЗатр = "СтатьяЗатрат, Продукция";
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда   
		РеквизитыТабЗатр = РеквизитыТабЗатр + ", НалоговоеНазначение";
	КонецЕсли; 
	
	РеквизитыТабПроч = "СтатьяЗатрат, СчетЗатрат";
	РеквизитыТабПрод = "Номенклатура, Количество, СчетЗатрат";
	
	Если ИспользоватьНаработку Тогда
		РеквизитыТабЗатр = РеквизитыТабЗатр + ", ВидВыпуска";
		РеквизитыТабПроч = РеквизитыТабПроч + ", ВидВыпуска";
		РеквизитыТабПрод = РеквизитыТабПрод + ", ВидВыпуска";
	КонецЕсли;
		
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки,   СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета );
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабПроч, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "ПрочиеЗатраты");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабПрод, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "Продукция");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабЗатр, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "ЗатратыНаПродукцию");
	
	УправлениеПроизводством.ПроверитьСтатьиЗатрат( ЗатратыНаПродукцию, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
	Если ОтражатьВУправленческомУчете Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( ЗатратыНаПродукцию, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция",          Новый Структура(РеквизитыТабПрод), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПрочиеЗатраты",      Новый Структура(РеквизитыТабПроч), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЗатратыНаПродукцию", Новый Структура(РеквизитыТабЗатр), Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	
	// Проверим что указаны производственные подразделения в шапке документа
	УправлениеПроизводством.ПроверитьПроизводственныеПодразделения(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Продукция", , Отказ, Заголовок);

	Если ДатаНачалаПериода > Дата Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата начала периода не может быть больше даты документа!", Отказ, Заголовок);
	КонецЕсли;
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ЗатратыНаПродукцию.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
		"Распределение прочих затрат",
		Отказ, 
		Заголовок, 
		"Производство"
	);	
	
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Подразделение";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "ПодразделениеОрганизации";
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура заполняет счета затрат по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаЗатратРегл(СтрокаТЧ, ФлагБух) Экспорт

	СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, Неопределено);

	Если ФлагБух = Истина Тогда
		СтрокаТЧ.СчетЗатрат = СчетаУчетаЗатрат.СчетУчетаБУ;
	ИначеЕсли ФлагБух = Ложь Тогда
		СтрокаТЧ.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПустаяСсылка()
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаЗатратРегл()

Процедура ЗаполнитьСчетаЗатратВТабЧастиРегл(ТабЧасть, ФлагБух) Экспорт

	Для Каждого СтрокаТЧ Из ТабЧасть Цикл
		ЗаполнитьСчетаЗатратРегл(СтрокаТЧ, ФлагБух);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаУЗатратВТабЧастиРегл()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирует движения по распределению затрат на продукцию
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента)
	
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(СтруктураШапкиДокумента, "РаспределениеПрочихЗатрат", мУчетнаяПолитика, мУчетнаяПолитикаБух);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента)

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
       	мУчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПрочиеЗатраты") Тогда
		
		// Заполнение шапки
		Организация                  = Основание.Организация;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		Подразделение                = Основание.Подразделение;
		ПодразделениеОрганизации     = Основание.ПодразделениеОрганизации;
		
		Для Каждого ТекСтрокаЗатраты Из Основание.Затраты Цикл
			
			НоваяСтрока = ПрочиеЗатраты.Добавить();
			
			НоваяСтрока.СтатьяЗатрат         = ТекСтрокаЗатраты.СтатьяЗатрат;
			НоваяСтрока.СчетЗатрат           = ТекСтрокаЗатраты.СчетЗатрат;
			
			НоваяСтрока.Заказ                = ТекСтрокаЗатраты.Заказ;
			НоваяСтрока.НоменклатурнаяГруппа = ТекСтрокаЗатраты.НоменклатурнаяГруппа;
			
			НоваяСтрока.Сумма                = ТекСтрокаЗатраты.Сумма;
			НоваяСтрока.СуммаРегл            = ТекСтрокаЗатраты.СуммаРегл;
			НоваяСтрока.СуммаНал             = ТекСтрокаЗатраты.СуммаНал;
			НоваяСтрока.СуммаНДС             = ТекСтрокаЗатраты.СуммаНДС;
			НоваяСтрока.СуммаНДСКредит       = ТекСтрокаЗатраты.СуммаНДСКредит;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()


// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Продукция,			// ТабличнаяЧастьТовары
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			ПрочиеЗатраты,				// ТабличнаяЧастьТовары
		);
		
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			ЗатратыНаПродукцию // ТабличнаяЧастьТовары
		);
		
	КонецЕсли;
	

	Если Не мИспользоватьНаработку Тогда
		ИспользоватьНаработку = мИспользоватьНаработку;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента);
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений
	ДвиженияПоРегистрам(СтруктураШапкиДокумента);
	
КонецПроцедуры	// ОбработкаПроведения()

мИспользоватьНаработку 			= Константы.ИспользоватьНаработку.Получить();
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");


