Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

Перем РасчетыВозврат;

Перем мСтруктураПараметровДенежныхСредств;
Перем ПревышенБюджет Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьРКО(Вариант2009 = Истина)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата                          КАК ДатаДокумента,
	|	Организация,
	|	Касса.ОбособленноеПодразделение КАК ОбособленноеПодразделениеОрганизации,
	|   Касса.ОбособленноеПодразделение.НаименованиеПолное КАК ОбособленноеПодразделениеОрганизацииПредставление,
	|	СуммаДокумента                КАК Сумма,
	|	Контрагент.Представление      КАК ФИОПолучателя,
	|	ВалютаДокумента               КАК Валюта,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	Выдать,
	|	Приложение,
	|	ПоДокументу,
	|	Основание,
	|	НомерОрдера
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2";
	
	Если Вариант2009 Тогда 
		Макет = ПолучитьОбщийМакет("КО2_2009")
	Иначе
		Макет = ПолучитьОбщийМакет("КО2")
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	
	// Выводим шапку накладной
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПолноеНаименование = СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакета.Параметры.Сумма             = ОбщегоНазначения.ФорматСумм(Шапка.Сумма, Шапка.Валюта);
	ОбластьМакета.Параметры.СуммаПрописью     = ФорматироватьСуммуПрописи(Шапка.Сумма, Шапка.Валюта);
	
		ОбластьМакета.Параметры.СуммаПрописьюПолучил = "";
	Если Вариант2009 И Шапка.Валюта = мВалютаРегламентированногоУчета Тогда
		ОбластьМакета.Параметры.СуммаПрописьюПолучил_Пусто = "грн.           коп.";		
	КонецЕсли;


	ОбластьМакета.Параметры.КодПоЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	Если НЕ ЗначениеЗаполнено(Шапка.ОбособленноеПодразделениеОрганизации) Тогда
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента);
	Иначе
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОбособленногоПодразделения(Шапка.ОбособленноеПодразделениеОрганизации, Шапка.ДатаДокумента);
	КонецЕсли;
	Если ЗначениеЗаполнено(Руководители.РуководительФИО) Тогда
		Руководитель =ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.РуководительФИО.Фамилия, Руководители.РуководительФИО.Имя, Руководители.РуководительФИО.Отчество, Истина); // Кратко
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерФИО) Тогда
		Бухгалтер    = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.ГлавныйБухгалтерФИО.Фамилия, Руководители.ГлавныйБухгалтерФИО.Имя, Руководители.ГлавныйБухгалтерФИО.Отчество, Истина); // Кратко
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.КассирФИО) Тогда
		Кассир       = ФормированиеПечатныхФорм.ПолучитьФамилиюИмяОтчество(Руководители.КассирФИО.Фамилия, Руководители.КассирФИО.Имя, Руководители.КассирФИО.Отчество, Истина); // Кратко
    КонецЕсли;
    

   
	Если ЗначениеЗаполнено(Руководители.Руководитель) Тогда
		ОбластьМакета.Параметры.ФИОРуководителя = Руководители.Руководитель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер) Тогда
		ОбластьМакета.Параметры.ФИОБухгалтера   = Руководители.ГлавныйБухгалтер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Руководители.Кассир) Тогда
		ОбластьМакета.Параметры.ФИОКассира      = Руководители.Кассир;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте);
	Иначе
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проводки.СчетДт КАК СчетДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Проводки
	|
	|ГДЕ
	|	Проводки.Регистратор = &ТекущийДокумент И
	|	Проводки.СчетКт = &Счет" + 
	?(Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета,"
	|// проводки по курсовой разнице (без валютной суммы) пропускаем
	|	И Проводки.ВалютнаяСуммаКт <>0","");

	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	
	СписокСчетов = ""; Разделитель = "";
	
	Пока ВыборкаСчетов.Следующий() Цикл
		Если Найти(СписокСчетов, Строка(ВыборкаСчетов.СчетДТ)) <> 0 Тогда
			Продолжить;
		КонецЕсли;
		СписокСчетов = СписокСчетов + Разделитель + Строка(ВыборкаСчетов.СчетДТ);
		Разделитель = ", ";
	КонецЦикла;	
    ОбластьМакета.Параметры.Счет = СписокСчетов;

	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРКО()

// Функция формирует табличный документ для печати в бланк строгой отчетности
//
// Возвращаемое значение:
//  Табличный документ - печатная форма РКО
//
Функция ПечатьРКОвБланк()
	
	КодЯзыкаПечать = "uk";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата                          КАК ДатаДокумента,
	|	Организация,
	|	Касса.ОбособленноеПодразделение КАК ОбособленноеПодразделениеОрганизации,
	|   Касса.ОбособленноеПодразделение.НаименованиеПолное КАК ОбособленноеПодразделениеОрганизацииПредставление,
	|	СуммаДокумента                КАК Сумма,
	|	Контрагент.Представление      КАК ФИОПолучателя,
	|	ВалютаДокумента               КАК Валюта,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	Выдать,
	|	Приложение,
	|	ПоДокументу,
	|	Основание,
	|	НомерОрдера
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2ВБланк";
	Макет         = ПолучитьОбщийМакет("КО2ВБланк");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	
	// Выводим шапку накладной
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПолноеНаименование = СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакета.Параметры.Сумма             = ОбщегоНазначения.ФорматСумм(Шапка.Сумма, Шапка.Валюта);
	ОбластьМакета.Параметры.СуммаПрописью     = ФорматироватьСуммуПрописи(Шапка.Сумма, Шапка.Валюта);
	ОбластьМакета.Параметры.СуммаПрописьюПолучил = ОбластьМакета.Параметры.СуммаПрописью;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику 
		//Смартис Лиманчук начало 01.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал
		//Смартис Лиманчук окончание 01.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками 
		//Смартис Лиманчук начало 03.10.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанкНал 
		//Смартис Лиманчук окончание 03.10.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ОбластьМакета.Параметры.СуммаПрописьюПолучил = "";
	Иначе
		ОбластьМакета.Параметры.СуммаПрописьюПолучил = ФорматироватьСуммуПрописи(Шапка.Сумма, Шапка.Валюта);					
	КонецЕсли; 
	ОбластьМакета.Параметры.КодПоЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	Если НЕ ЗначениеЗаполнено(Шапка.ОбособленноеПодразделениеОрганизации) Тогда
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента);
	Иначе
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОбособленногоПодразделения(Шапка.ОбособленноеПодразделениеОрганизации, Шапка.ДатаДокумента);
	КонецЕсли;
	ЧислоМесяц = СокрЛП(Формат(Шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ=ддММММ"));
	ОбластьМакета.Параметры.Месяц = Прав(ЧислоМесяц, СтрДлина(ЧислоМесяц)-2);
	ОбластьМакета.Параметры.Число = Лев(ЧислоМесяц, 2);
	ОбластьМакета.Параметры.Год = СокрЛП(Формат(Шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ=гг"));  

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте);
	Иначе
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проводки.СчетДт КАК СчетДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Проводки
	|
	|ГДЕ
	|	Проводки.Регистратор = &ТекущийДокумент И
	|	Проводки.СчетКт = &Счет" + 
	?(Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета,"
	|// проводки по курсовой разнице (без валютной суммы) пропускаем
	|	И Проводки.ВалютнаяСуммаКт <>0","");

	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	
	СписокСчетов = ""; Разделитель = "";
	
	Пока ВыборкаСчетов.Следующий() Цикл
		Если Найти(СписокСчетов, Строка(ВыборкаСчетов.СчетДТ)) <> 0 Тогда
			Продолжить;
		КонецЕсли;
		СписокСчетов = СписокСчетов + Разделитель + Строка(ВыборкаСчетов.СчетДТ);
		Разделитель = ", ";
	КонецЦикла;	
    ОбластьМакета.Параметры.Счет = СписокСчетов;	

	ТабДокумент.Вывести(ОбластьМакета);
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 9;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт; 

	Возврат ТабДокумент;

КонецФункции // ПечатьРКОвБланк()

// Функция формирует табличный документ для печати в бланк строгой отчетности
//
// Возвращаемое значение:
//  Табличный документ - печатная форма РКО
//
Функция ПечатьРКОвБланкА4()
	
	КодЯзыкаПечать = "uk";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата                          КАК ДатаДокумента,
	|	Организация,
	|	Касса.ОбособленноеПодразделение КАК ОбособленноеПодразделениеОрганизации,
	|   Касса.ОбособленноеПодразделение.НаименованиеПолное КАК ОбособленноеПодразделениеОрганизацииПредставление,
	|	СуммаДокумента                КАК Сумма,
	|	Контрагент.Представление      КАК ФИОПолучателя,
	|	ВалютаДокумента               КАК Валюта,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	Выдать,
	|	Приложение,
	|	ПоДокументу,
	|	Основание,
	|	НомерОрдера
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2ВБланкА4";
	Макет         = ПолучитьОбщийМакет("КО2ВБланкА4");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	
	// Выводим шапку накладной
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПолноеНаименование = СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакета.Параметры.Сумма             = ОбщегоНазначения.ФорматСумм(Шапка.Сумма, Шапка.Валюта);
	ОбластьМакета.Параметры.СуммаПрописью     = ФорматироватьСуммуПрописи(Шапка.Сумма, Шапка.Валюта);
	ОбластьМакета.Параметры.СуммаПрописьюПолучил = ОбластьМакета.Параметры.СуммаПрописью;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику 
		//Смартис Лиманчук начало 01.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал
		//Смартис Лиманчук окончание 01.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками 
		//Смартис Лиманчук начало 03.10.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанкНал 
		//Смартис Лиманчук окончание 03.10.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ОбластьМакета.Параметры.СуммаПрописьюПолучил = "";
	Иначе
		ОбластьМакета.Параметры.СуммаПрописьюПолучил = ФорматироватьСуммуПрописи(Шапка.Сумма, Шапка.Валюта);					
	КонецЕсли; 
	ОбластьМакета.Параметры.КодПоЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	Если НЕ ЗначениеЗаполнено(Шапка.ОбособленноеПодразделениеОрганизации) Тогда
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента);
	Иначе
		Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОбособленногоПодразделения(Шапка.ОбособленноеПодразделениеОрганизации, Шапка.ДатаДокумента);
	КонецЕсли;

	ЧислоМесяц = СокрЛП(Формат(Шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ=ддММММ"));
	ОбластьМакета.Параметры.Месяц = Прав(ЧислоМесяц, СтрДлина(ЧислоМесяц)-2);
	ОбластьМакета.Параметры.Число = Лев(ЧислоМесяц, 2);
	ОбластьМакета.Параметры.Год = СокрЛП(Формат(Шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ=гг"));  

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте);
	Иначе
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проводки.СчетДт КАК СчетДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Проводки
	|
	|ГДЕ
	|	Проводки.Регистратор = &ТекущийДокумент И
	|	Проводки.СчетКт = &Счет" + 
	?(Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета,"
	|// проводки по курсовой разнице (без валютной суммы) пропускаем
	|	И Проводки.ВалютнаяСуммаКт <>0","");

	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	
	СписокСчетов = ""; Разделитель = "";
	
	Пока ВыборкаСчетов.Следующий() Цикл
		Если Найти(СписокСчетов, Строка(ВыборкаСчетов.СчетДТ)) <> 0 Тогда
			Продолжить;
		КонецЕсли;
		СписокСчетов = СписокСчетов + Разделитель + Строка(ВыборкаСчетов.СчетДТ);
		Разделитель = ", ";
	КонецЦикла;	
    ОбластьМакета.Параметры.Счет = СписокСчетов;	

	ТабДокумент.Вывести(ОбластьМакета);
	
	// Зададим параметры макета
	ТабДокумент.АвтоМасштаб = Ложь;
	ТабДокумент.ПолеСверху = 9;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

	Возврат ТабДокумент;

КонецФункции // ПечатьРКОвБланкА4()    

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "РКО" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьРКО();
		
	ИначеЕсли ИмяМакета = "РКОДо2009" Тогда		
		
		ТабДокумент = ПечатьРКО(Ложь);
		
	ИначеЕсли ИмяМакета = "РКОвБланк" Тогда
		
		ТабДокумент = ПечатьРКОвБланк();
		
	ИначеЕсли ИмяМакета = "РКОвБланкА4" Тогда
		
		ТабДокумент = ПечатьРКОвБланкА4();
		

	КонецЕсли;


	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура("РКО, РКОДо2009, РКОвБланк, РКОвБланкА4", "Расходный кассовый ордер",
	                                   "Расходный кассовый ордер (версия до 16 июня 2009г)",
	                                   "Расходный кассовый ордер (печать в бланк, формат А5, ориентация альбомная)",
									   "Расходный кассовый ордер (печать в бланк, формат А4, ориентация «портрет»)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Процедура заполняет реквизиты, используемые для формирования печатной формы (Выдать, 
// Основание и ПоДокументу). 
// Параметры:
//  ЧтоИзменилось - имя реквизита документа
//
Процедура ЗаполнитьРеквизитыПечати(ЧтоИзменилось = Неопределено) Экспорт

	// если не передали название реквизита считаем, что это ВидОперации.
	// Как следствие будет проведено заполнение всех реквизитов по-умолчанию.
	Если ЧтоИзменилось = Неопределено Тогда
	
		ЧтоИзменилось = "ВидОперации";
	
	КонецЕсли; 
	
	Если  ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику 
	//Смартис Лиманчук начало 03.10.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщикуНал 
	//Смартис Лиманчук окончание 03.10.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю 
	  //Смартис Лиманчук начало 04.10.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателюНал 
	  //Смартис Лиманчук окончание 04.10.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами 
	  //Смартис Лиманчук начало 06.11.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентамиНал 
	  //Смартис Лиманчук окончание 06.11.2012
	  //Смартис Лиманчук начало 06.11.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентамиНал
	  //Смартис Лиманчук окончание 06.11.2012
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда 
		
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			Выдать = ?(Контрагент.НаименованиеПолное="", Контрагент.Наименование, Контрагент.НаименованиеПолное);
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "ДоговорКонтрагента" 
			ИЛИ ЧтоИзменилось = "Сделка" Тогда
			
			Основание = "";	
			
			РасшифровкаКопия = РасшифровкаПлатежа.Выгрузить();
			РасшифровкаКопия.Свернуть("ДоговорКонтрагента, Сделка","");
			РасшифровкаКопия.Сортировать("ДоговорКонтрагента, Сделка");
			
			ТекДоговор = Неопределено;
			
			Для Инд = 0 По РасшифровкаКопия.Количество() - 1 Цикл
				
				СтрокаРасшифровки = РасшифровкаКопия[Инд];
				
				Шапка = Новый Структура();
				Шапка.Вставить("ДоговорКонтрагента", 			СтрокаРасшифровки.ДоговорКонтрагента);
				Шапка.Вставить("ДоговорНаименованиеДляПечати", 	СтрокаРасшифровки.ДоговорКонтрагента.НаименованиеДляПечати);
				Шапка.Вставить("ДоговорВедениеВзаиморасчетов",  СтрокаРасшифровки.ДоговорКонтрагента.ВедениеВзаиморасчетов);
				Шапка.Вставить("ПечататьСделку", 				СтрокаРасшифровки.ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов);
				Шапка.Вставить("Сделка", 						СтрокаРасшифровки.Сделка);	
				
				// Выводим дополнительно информацию о договоре и сделке
				Если НЕ ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента Тогда
				
					СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
				    ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента;
					
				Иначе	
					
					СписокДополнительныхПараметров = "";
					
				КонецЕсли;
				
				Если     Шапка.ПечататьСделку = Истина 
					И ЗначениеЗаполнено(Шапка.Сделка) 
					//Смартис Лиманчук начало 06.11.2012
					И НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентамиНал
					//Смартис Лиманчук окончание 06.11.2012
					И НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда
					СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
				КонецЕсли;
				
				МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,"uk");
				
				Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
					Основание = Основание + СтруктураСтроки.НазваниеПараметра + " " + СтруктураСтроки.ЗначениеПараметра + ", ";
				КонецЦикла;	
				
			КонецЦикла;
			
			// обрежем последнюю запятую
			Если Прав(Основание, 2) = ", " Тогда
				Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
			КонецЕсли;
			
		КонецЕсли;
		
		// ПоДокументу
		Если    ЧтоИзменилось = "Контрагент" 
			ИЛИ ЧтоИзменилось = "ДоговорКонтрагента" 
			ИЛИ ЧтоИзменилось = "ВидОперации" Тогда
			ПоДокументу = ?(Контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо, Контрагент.ДокументУдостоверяющийЛичность, "");
		КонецЕсли;
		
		// Приложение
		// не заполняется ни в одном случае
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
		  //Смартис Лиманчук начало 01.11.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал
		  //Смартис Лиманчук окончание 01.11.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		  		  
		  Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			  ФизЛицо = Контрагент.Физлицо;
		  Иначе
			  ФизЛицо = Контрагент;
		  КонецЕсли;
		   
		  
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			Выдать = "";	
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",?(Дата = '00010101', ОбщегоНазначения.ПолучитьРабочуюДату(), Дата));
			Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);

			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда

				Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
							  Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), "")
							  ,"");

			КонецЕсли;
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "РасчетныйДокумент" Тогда
			
			Основание = "";	
			
			Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда

				НазваниеДокумента = "";
				Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
					НазваниеДокумента = "Авансовий звіт";		
				//Смартис Лиманчук начало 01.11.2012
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал Тогда
					НазваниеДокумента = "Авансовий звіт";		
				//Смартис Лиманчук окончание 01.11.2012
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
					НазваниеДокумента = "Договір займа";	
				КонецЕсли;
				
				Основание = НазваниеДокумента + " № " + ОбщегоНазначения.ПолучитьНомерНаПечать(РасчетныйДокумент) + " від " + Формат(РасчетныйДокумент.Дата, "ДФ=dd.MM.yyyy");
				
			КонецЕсли;			
			
		КонецЕсли;	
		
		// ПоДокументу
		Если    ЧтоИзменилось = "ВидОперации" 
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			ПоДокументу = "";
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
			
				ДокФизЛица = ОбщегоНазначения.ПаспортныеДанные(ФизЛицо, Дата);
		 		Если ЗначениеЗаполнено(ДокФизЛица) Тогда
		 			ПоДокументу = Строка(ДокФизЛица.Вид) + " серія " +
		 			ДокФизЛица.Серия       + ", номер " +
		 			ДокФизЛица.Номер       + ", виданий " +
		 			Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
		 			ДокФизЛица.Выдан;
		 		КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	//Смартис Лиманчук начало 03.10.2012
	//ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанкНал) Тогда
	//Смартис Лиманчук окончание 03.10.2012
		
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "СчетОрганизации" Тогда
			
			Выдать = "";	
			Если Не СчетОрганизации.Пустая() Тогда
			
				Выдать = "р/р " + СчетОрганизации.НомерСчета + " у " + СчетОрганизации.Банк;
			
			КонецЕсли; 
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "ОбъявлениеНаВзносНаличными" Тогда
			
			Основание = "";	
			Если Не ОбъявлениеНаВзносНаличными.Пустая() Тогда
			
				Основание = "Об'ява на внесення готівки № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ОбъявлениеНаВзносНаличными) + " від " + Формат(ОбъявлениеНаВзносНаличными.Дата, "ДФ=dd.MM.yyyy");
				
			КонецЕсли; 
			
		КонецЕсли;		
		
		// ПоДокументу
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			ПоДокументу = "";		
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		  //Смартис Лиманчук начало 06.11.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочееНал
		  //Смартис Лиманчук окончание 06.11.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			Выдать = "";	
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			Основание = "";	
			
		КонецЕсли;
		
		// ПоДокументу
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			ПоДокументу = "";		
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(Сумма, Валюта)
	
	ФорматСтрока  = "Л=uk_UA; ДП=Ложь";
	ПарамПредмета = Валюта.ПараметрыПрописиНаУкраинском;
	
	Результат = ЧислоПрописью(Сумма, ФорматСтрока, ПарамПредмета);
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()


#КонецЕсли

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ПодотчетныеЛицаВзаиморасчетыКомпании".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовРаботника);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                           ФизЛицо = &Контрагент
	|	                                                         И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                         И Валюта = &ВалютаВзаиморасчетов)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по заявке в регистре "ЗаявкиНаРасходованиеСредств"
//
Процедура ЗаполнитьПоЗаявкеРКОУпр() Экспорт
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	               |	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Контрагент КАК Контрагент,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
	               |	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
	               |	ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	               |	ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовРаботника,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокумент,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель,
	               |	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВидВыдачиДенежныхСредств КАК ВидВыдачиДенежныхСредств
	               |ИЗ
	               |	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование = &ДокументЗаявка) КАК ЗаявкиНаРасходованиеСредствОстатки";
	
	Запрос.УстановитьПараметр("ДокументЗаявка",ДокументОснование);
	
	СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
	
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
			//Смартис Лиманчук начало 06.11.2012
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочееНал
			//Смартис Лиманчук окончание 06.11.2012
			ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
			ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаПлатежа;
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
				
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаПлатежа;
			
			ВидВыдачиДенежныхСредств=Выборка.ВидВыдачиДенежныхСредств;
				
			Контрагент=Выборка.Получатель;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
			//Смартис Лиманчук начало 01.11.2012
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал
			//Смартис Лиманчук окончание 01.11.2012
			ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетовРаботника Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетовРаботника,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;									
			
			Контрагент     = Выборка.Получатель;
			РасчетныйДокумент = Выборка.РасчетныйДокумент;
			ВалютаВзаиморасчетовРаботника=Выборка.ВалютаВзаиморасчетовРаботника;
			
		Иначе
			
			Контрагент = Выборка.Контрагент;
									
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				
				СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;	
			
		СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		СтрокаПлатеж.ДоговорКонтрагента=Выборка.ДоговорКонтрагента;
	
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
		КонецЕсли;
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект=Выборка.Проект;
		СтрокаПлатеж.ДокументПланированияПлатежа=Выборка.ЗаявкаНаРасходование;
		СтрокаПлатеж.КурсВзаиморасчетовПлан=СтрокаПлатеж.КурсВзаиморасчетов;
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
				
	КонецЦикла;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // УправлениеДенежнымиСредствами.ЗаполнитьПоЗаявкеУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Процедура ПолучитьТаблицуПлатежейРКОУпр()
	
	Запрос=Новый Запрос;
	Если НЕ (ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям) Тогда	
		Запрос.Текст="ВЫБРАТЬ
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР КОГДА НЕ РасшифровкаПлатежаДок.ДоговорКонтрагента=&ПустойДоговор 
	|		Тогда РасшифровкаПлатежаДок.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|		Иначе ЛОЖЬ КОНЕЦ КАК ВестиПоДокументамРасчетовСКонтрагентом,	
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.КонтролироватьСуммуЗадолженности КАК КонтролироватьСуммуЗадолженности,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности КАК КонтролироватьЧислоДнейЗадолженности,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ПроцентПредоплаты КАК ПроцентПредоплаты,
	|	РасшифровкаПлатежаДок.Сделка КАК Сделка,
	|	РасшифровкаПлатежаДок.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,	
	|	РасшифровкаПлатежаДок.ЗаТару КАК ЗаТару,
	|	РасшифровкаПлатежаДок.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежаДок.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежаДок.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежаДок.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
	|	РасшифровкаПлатежаДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь КАК ВключатьВПлатежныйКалендарь,
	|	РасшифровкаПлатежаДок.Проект КАК Проект,
	|	РасшифровкаПлатежаДок.СуммаПлатежаПлан КАК СуммаПлатежаПлан,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА РасшифровкаПлатежаДок.СуммаПлатежа
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
	|			РасшифровкаПлатежаДок.СуммаПлатежа*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
	|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА РасшифровкаПлатежаДок.СуммаПлатежа
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
	|			РасшифровкаПлатежаДок.СуммаПлатежа*КурсыДокумента.Курс
	|			/ КурсыДокумента.Кратность
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета,
	|	ЕСТЬNULL(ОстаткиВзаиморасчетовПоДокументам.СуммаВзаиморасчетовОстаток, ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаВзаиморасчетовОстаток,
	|	ВЫБОР КОГДА ОстаткиВзаиморасчетовПоДокументам.СуммаВзаиморасчетовОстаток ЕСТЬ NULL 
	|		ТОГДА
	|			ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаУпрОстаток, 0) 
	|		КОГДА ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаВзаиморасчетовОстаток, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаУпрОстаток, 0) 
	|		ИНАЧЕ
	|			ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаУпрОстаток, 0) * ЕСТЬNULL(ОстаткиВзаиморасчетовПоДокументам.СуммаВзаиморасчетовОстаток, 0) / ОстаткиВзаиморасчетов.СуммаВзаиморасчетовОстаток
	|	КОНЕЦ КАК СуммаУпрОстаток
	
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежаДок
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,ДоговорКонтрагента В (
	|																			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|																				РасшифровкаПлатежаДокВнутр.ДоговорКонтрагента
	|																			ИЗ
	|																			Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежаДокВнутр
	|																				ГДЕ РасшифровкаПлатежаДокВнутр.Ссылка = &Ссылка)
	|															) КАК ОстаткиВзаиморасчетов
	|	ПО РасшифровкаПлатежаДок.ДоговорКонтрагента = ОстаткиВзаиморасчетов.ДоговорКонтрагента
	|		И ВЫБОР КОГДА РасшифровкаПлатежаДок.Сделка В (&ПустыеСделки) ТОГДА Неопределено ИНАЧЕ РасшифровкаПлатежаДок.Сделка КОНЕЦ = ОстаткиВзаиморасчетов.Сделка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(,ДоговорКонтрагента В (
	|																			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|																				РасшифровкаПлатежаДокВнутр.ДоговорКонтрагента
	|																			ИЗ
	|																			Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежаДокВнутр
	|																				ГДЕ РасшифровкаПлатежаДокВнутр.Ссылка = &Ссылка)
	|															) КАК ОстаткиВзаиморасчетовПоДокументам
	|	ПО РасшифровкаПлатежаДок.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА 
	|		И РасшифровкаПлатежаДок.ДоговорКонтрагента = ОстаткиВзаиморасчетовПоДокументам.ДоговорКонтрагента
	|		И ВЫБОР КОГДА РасшифровкаПлатежаДок.Сделка В (&ПустыеСделки) ТОГДА Неопределено ИНАЧЕ РасшифровкаПлатежаДок.Сделка КОНЕЦ = ОстаткиВзаиморасчетовПоДокументам.Сделка
	|		И ВЫБОР КОГДА РасшифровкаПлатежаДок.ДокументРасчетовСКонтрагентом В (&ПустыеРасчетныеДокументы) ТОГДА Неопределено ИНАЧЕ РасшифровкаПлатежаДок.ДокументРасчетовСКонтрагентом КОНЕЦ = ОстаткиВзаиморасчетовПоДокументам.ДокументРасчетовСКонтрагентом
	|ГДЕ
	|	РасшифровкаПлатежаДок.Ссылка = &Ссылка";
		
	Иначе
		
		Если ВыплатаЗаработнойПлаты.Количество()>0 Тогда
		
		Запрос.Текст="ВЫБРАТЬ
		|	&ПустойДоговор КАК ДоговорКонтрагента,
		|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКонтрагентом,
		|	НЕОПРЕДЕЛЕНО КАК ВедениеВзаиморасчетов,
		|	ЛОЖЬ КАК ЗаТару,
		|	НЕОПРЕДЕЛЕНО КАК Сделка,
		|	ВыплатаЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежа,
		|	ВыплатаЗаработнойПлатыДок.СуммаПлатежа КАК СуммаВзаиморасчетов,
		|	ВыплатаЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежаПлан,
		|	ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА ВыплатаЗаработнойПлатыДок.СуммаПлатежа
		|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
		|			ВыплатаЗаработнойПлатыДок.СуммаПлатежа*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
		|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
		|	ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА ВыплатаЗаработнойПлатыДок.СуммаПлатежа
		|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
		|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
		|			ВыплатаЗаработнойПлатыДок.СуммаПлатежа*КурсыДокумента.Курс
		|			/ КурсыДокумента.Кратность
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
		|	ВыплатаЗаработнойПлатыДок.СтатьяДвиженияДенежныхСредств,
		|	ВыплатаЗаработнойПлатыДок.ДокументПланированияПлатежа,
		|	ВыплатаЗаработнойПлатыДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь КАК ВключатьВПлатежныйКалендарь,
		|	ВыплатаЗаработнойПлатыДок.Проект,
		|	ВЫБОР
		|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
		|	ВЫБОР
		|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК ВыплатаЗаработнойПлатыДок
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
		|	ПО ИСТИНА
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
		|	ПО ИСТИНА
		|ГДЕ
		|	ВыплатаЗаработнойПлатыДок.Ссылка = &Ссылка";
		
	Иначе
		
			Запрос.Текст="ВЫБРАТЬ
			|	&ПустойДоговор КАК ДоговорКонтрагента,
			|	&ПустойДокРесчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
			|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
			|	ЛОЖЬ КАК ЗаТару,
			|	НЕОПРЕДЕЛЕНО КАК Сделка,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаПлатежа,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаВзаиморасчетов,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаПлатежаПлан,
			|	ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента
			|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
			|			ВыплатаЗаработнойПлатыДок.СуммаДокумента*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
			|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
			|	ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента
			|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
			|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
			|			ВыплатаЗаработнойПлатыДок.СуммаДокумента*КурсыДокумента.Курс
			|			/ КурсыДокумента.Кратность
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
			|	&ПустаяСтатья КАК СтатьяДвиженияДенежныхСредств,
			|	&ПустойДокументПланирования КАК ДокументПланированияПлатежа,
			|	ЛОЖЬ КАК ВключатьВПлатежныйКалендарь,
			|	&ПустойПроект КАК Проект,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер КАК ВыплатаЗаработнойПлатыДок
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
			|	ПО ИСТИНА
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
			|	ПО ИСТИНА
			|ГДЕ
			|	ВыплатаЗаработнойПлатыДок.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("ПустаяСтатья", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойДокументПланирования", Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка());
				
		КонецЕсли;
	
		Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойДокРесчетовСКонтрагентом", Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",глЗначениеПеременной("ВалютаУправленческогоУчета"));
	Запрос.УстановитьПараметр("ВалютаРеглУчета",глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТипыСделок = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Измерения.Сделка.Тип.Типы();
	МассивПустыхСделок = Новый Массив;
	Для каждого Элемент Из ТипыСделок Цикл
		МассивПустыхСделок.Добавить(Новый(Элемент));
	КонецЦикла;
	
	ТипыРасчетныхДокументов = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Измерения.ДокументРасчетовСКонтрагентом.Тип.Типы();
	МассивПустыхРасчетныхДокументов = Новый Массив;
	Для каждого Элемент Из ТипыРасчетныхДокументов Цикл
		МассивПустыхРасчетныхДокументов.Добавить(Новый(Элемент));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеСделки",МассивПустыхСделок);
	Запрос.УстановитьПараметр("ПустыеРасчетныеДокументы",МассивПустыхРасчетныхДокументов);
	Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());		
	
	ТаблицаПлатежейУпр=Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // ПолучитьТаблицуПлатежей()

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);

	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма*(-1);
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
			                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                            ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
										
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
			
		КонецЕсли;
	КонецЕсли;
	Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
			СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказуУпр()

Процедура ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание)
	
	Перем ВидВзаиморасчетов;
	Если Основание.ВидВыплаты = Справочники.ВидыВыплат.Депоненты Тогда
		ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаДепонентов;
	Иначе
		ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	КонецЕсли;
	ВалютаДокумента=мВалютаРегламентированногоУчета;
	КурсДокумента=1;
	КратностьДокумента=1;

	////Если Основание.СпособВыплаты=Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
	////	Сообщить("Ведомость оформлена на выдачу денежных средств через банк.");
	////	Возврат;
	////КонецЕсли;	
	
	//Проверим есть ли в ведомосте работники со способом выплаты "Через кассу"
	ЧерезКассу = Ложь;
	Для Каждого Работник ИЗ Основание.РаботникиОрганизации Цикл
		Если Работник.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			ЧерезКассу = Истина;
		КонецЕсли;
	КонецЦикла;
	Если Не ЧерезКассу Тогда
		ОбщегоНазначения.СообщитьИнформацию(НСтр("ru='В ведомости нет работников со способом выплаты - ""через кассу""!';uk='У відомості нема працівників зі способом виплати - ""через кассу""'"), ,СтатусСообщения.Обычное );
		Возврат;
	КонецЕсли;

	// Определим сумму выплаченной заработной платы
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Основание);
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПараметрыОплаты.СчетУчета 			КАК СчетУчета,
	|	СУММА(ПараметрыОплаты.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК ПараметрыОплаты
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
	|		ПО		РаботникиОрганизации.Сотрудник = ПараметрыОплаты.Сотрудник
	|			И	(РаботникиОрганизации.Ссылка = &Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО		ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И	ПараметрыОплаты.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
	|			И	(РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
	|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
	|	И	РанееВыплаченныеСуммы.Сотрудник ЕСТЬ NULL 
	|	И	РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|	И	РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыОплаты.СчетУчета
	|";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		
		СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
		СтрокаВедомость.Ведомость			= Основание;
		СтрокаВедомость.СчетУчета			= РезультатЗапроса.СчетУчета;
		СтрокаВедомость.СуммаПлатежа		= РезультатЗапроса.Сумма;
		
	КонецЦикла;
	
	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

	Организация = Основание.Организация;

	КассаПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");

	Если КассаПоУмолчанию.ВалютаДенежныхСредств=ВалютаДокумента Тогда
		Касса=КассаПоУмолчанию;
	КонецЕсли;

	ОтражатьВУправленческомУчете=Истина;
	ОтражатьВБухгалтерскомУчете=Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗарплатеКВыплатеУпр(Основание)
	ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	ВалютаДокумента=глЗначениеПеременной("ВалютаУправленческогоУчета");

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	СтрокаВедомость=ВыплатаЗаработнойПлаты.Добавить();
	СтрокаВедомость.Ведомость=Основание;

	// Определим сумму выплаченной заработной платы
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка",Основание);

	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		СтрокаВедомость.СуммаПлатежа=РезультатЗапроса.Сумма;
		СуммаДокумента=РезультатЗапроса.Сумма;
	КонецЕсли;
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Организация=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");

	КассаПоУмолчанию=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");

	Если КассаПоУмолчанию.ВалютаДенежныхСредств=ВалютаДокумента Тогда
		Касса=КассаПоУмолчанию;
	Иначе
		Касса=Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;

	ОтражатьВУправленческомУчете = Истина;
	ОтражатьВБухгалтерскомУчете  = Ложь;
		
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Основание) 
	
	Организация             = Основание.Организация;
	Ответственный           = Основание.Ответственный;

	Касса                   = Основание.БанковскийСчетКасса;
	ВалютаДокумента         = Основание.ВалютаДокумента;

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	ОтражатьВУправленческомУчете=Истина;
	ОтражатьВБухгалтерскомУчете=Истина;

	ЗаполнениеДокументов.ЗаполнитьКассу(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	ВидОперацииЗаявка=Основание.ВидОперации;
	
	УправлениеДенежнымиСредствами.ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииЗаявка);
	
	Ответственный     = Основание.Ответственный;
	ДокументОснование = Основание.Ссылка;
	
	Если ВалютаДокумента.Пустая() Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли;

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ЗаполнитьПоЗаявкеРКОУпр();
		
КонецПроцедуры

// Заполняет документ на основании приходного кассового ордера\
//
Процедура ЗаполнитьПоПКОУпр()
	
	//Смартис Лиманчук начало 04.10.2012
	//Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя ИЛИ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателяНал Тогда
	//Смартис Лиманчук окончание 04.10.2012
	
		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;
		
		ВидОперации=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		//Смартис Лиманчук начало 04.10.2012
		Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателяНал Тогда
			ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателюНал;
		КонецЕсли;
		//Смартис Лиманчук окончание 04.10.2012

 		Контрагент = ДокументОснование.Контрагент;

		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
			
 			СтрокаПлатеж.ДоговорКонтрагента  	 = СтрокаОснование.ДоговорКонтрагента;
			СтрокаПлатеж.ЗаТару   				 = СтрокаОснование.ЗаТару;
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
 			СтрокаПлатеж.СуммаПлатежа=СтрокаОснование.СуммаПлатежа;
			Если НЕ ЗначениеЗаполнено(СтрокаОснование.Сделка) И (
			 СтрокаОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Или
			 СтрокаОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
				СтрокаПлатеж.Сделка = ДокументОснование;
			Иначе
				СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			КонецЕсли;
			
 			СтрокаПлатеж.СтавкаНДС=СтрокаОснование.СтавкаНДС;
			Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
				Если ЗначениеЗаполнено(СтрокаОснование.Проект) Тогда
					СтрокаПлатеж.Проект=СтрокаОснование.Проект;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		
		Для Индекс=0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл
			
			СтрокаПлатеж=РасшифровкаПлатежа[Индекс];
			СтрокаОснование=ДокументОснование.РасшифровкаПлатежа[Индекс];
			
			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
				И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
						
				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
				ДокументОснование.ВалютаДокумента, 
				СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
				КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					
					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;
					
				Иначе
					
					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
					
				КонецЕсли;
				
			КонецЕсли;	
			
			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЦикла;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	Иначе
		
		ВидОперации=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
		// Документ не вводится на основании ПКО с другими видами операций
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПКОУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("Касса");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("Ответственный");
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
 		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;
	//Смартис Лиманчук начало 03.10.2012
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанкНал Тогда
 		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;
	//Смартис Лиманчук окончание 03.10.2012
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
 		СтруктураПолей.Вставить("РасчетныйДокумент","Не указан договор займа");
 	КонецЕсли;
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		СтруктураПолей.Вставить("РасчетныйДокумент","Не указана платежная ведомость");
	КонецЕсли;

	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		Если ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
			СтруктураПолей.Вставить("Контрагент", "Не указана касса ККМ");
		Иначе
			СтруктураПолей.Вставить("Контрагент", "Не указан склад - НТТ");
		КонецЕсли; 
	КонецЕсли;
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчетыУпр()

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда

		СтруктураПолей = Новый Структура("Организация,Касса,
	                        |Контрагент, Ответственный");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		СтруктураПолей = Новый Структура("Организация,Касса,Контрагент,
	                        |ВалютаВзаиморасчетовРаботника,Ответственный");
							
	//Смартис Лиманчук начало 01.11.2012
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал Тогда
		СтруктураПолей = Новый Структура("Организация,Касса,Контрагент,
	                        |ВалютаВзаиморасчетовРаботника,Ответственный");
							
	//Смартис Лиманчук окончание 01.11.2012
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		СтруктураПолей = Новый Структура("Касса,Ответственный");
		
		Если ЗначениеЗаполнено(РасчетныйДокумент) 
		   И РасчетныйДокумент.ОтражатьВБухгалтерскомУчете Тогда
		   // займ в бух учете
		   СтруктураПолей.Вставить("Организация");
		   
	    КонецЕсли;							
							
	Иначе
		СтруктураПолей = Новый Структура("Организация,Касса,Ответственный");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ,  Заголовок, "Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок, "Сумма взаиморасчетов");

		Если Не Отказ Тогда

			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;

			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

Процедура ПроверитьСуммуПоВедомостямРегл(Отказ,Заголовок)
	
	Если ВыплатаЗаработнойПлаты.Количество()=0 Тогда
		Сообщить("Не указаны ведомости на выплату заработной платы.");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|				ТОГДА ЗарплатаКВыплате.Сумма + ЗарплатаКВыплате.КомпенсацияЗаЗадержкуЗарплаты
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВыплачено,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВыплаченностьЗарплаты = &НеВыплачено
	|				ТОГДА ЗарплатаКВыплате.Сумма + ЗарплатаКВыплате.КомпенсацияЗаЗадержкуЗарплаты
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНеВыплачено
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
	|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплате.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("НеВыплачено",Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если НЕ (Результат.Следующий() И Результат.СуммаВыплачено=СуммаДокумента) Тогда
		Сообщить("Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.");
		Отказ=Истина;
	ИначеЕсли Не Результат.СуммаНеВыплачено=0 Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Представление КАК Ведомость
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &НеВыплачено И
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("НеВыплачено",Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			Сообщить("В документе " + Результат.Ведомость + " есть строки с невыплаченной зарплатой", СтатусСообщения.ОченьВажное);
		КонецЦикла;
		
		Отказ=Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСуммуПоВедомостямУпр

//Проверяет соответствие суммы, выданной по ведомостям, сумме документа.
//
Процедура ПроверитьСуммуКВыплатеРаботнику(Отказ,Заголовок)
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты), 0) КАК СуммаВыплачено
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &парамПлатВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = &парамКонтрагент
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)";
	
	Запрос.УстановитьПараметр("парамПлатВедомость",			РасчетныйДокумент);
	Запрос.УстановитьПараметр("парамКонтрагент",			Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Или Выборка.СуммаВыплачено <> СуммаДокумента Тогда
		Сообщить("Не совпадает сумма документа и сумма по ведомости на выплату заработной платы.");
		Отказ=Истина;
	КонецЕсли;
		
КонецПроцедуры // ПроверитьСуммуПоВедомостямУпр

Процедура ДвиженияПоЗарплатеУпр()

	ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
		
	// По регистру управленческих расчетов с работниками
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда

		ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");

		// По регистру ВзаиморасчетыСРаботниками
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст="ВЫБРАТЬ
		|	ЗарплатаКВыплатеЗарплата.Физлицо КАК ФизЛицо,
		|	ЗарплатаКВыплатеЗарплата.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
		|
		|ГДЕ
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
		Результат = Запрос.Выполнить().Выбрать();

		Пока Результат.Следующий() Цикл

			Строка = Движения.ВзаиморасчетыСРаботниками.Добавить();
			Строка.Период      = Дата;
			Строка.ВидДвижения = ВидДвиженияНакопления.Расход;
			Строка.Физлицо     = Результат.ФизЛицо;
			Строка.СуммаУпр    = Результат.Сумма;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ДвиженияПоРегистрамУпр(Режим,Отказ,Заголовок,СтруктураШапкиДокумента);
	
	// Движения по зарплатным регистрам
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		ДвиженияПоЗарплатеУпр();
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
	КонецЕсли;

	ДвиженияПоРегистрамРегл(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(Режим, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок,СтруктураШапкиДокумента)

	мСтруктураПараметровДенежныхСредств.Вставить("РасчетыВозврат",               РасчетыВозврат);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами",    ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",        ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",          Касса);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",                 Дата);
	//Смартис Лиманчук начало 03.10.2012
	//Если ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанкНал) Тогда
	//Смартис Лиманчук окончание 03.10.2012
		мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКассаПолучатель", СчетОрганизации);
		мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредствПолучатель",  Перечисления.ВидыДенежныхСредств.Безналичные);
		ПоОбъявлениюНаВзносНаличными = НЕ ОбъявлениеНаВзносНаличными.Пустая();
		мСтруктураПараметровДенежныхСредств.Вставить("ПоОбъявлениюНаВзносНаличными",  ПоОбъявлениюНаВзносНаличными);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("ФизЛицо",                    Контрагент);
		мСтруктураПараметровДенежныхСредств.Вставить("РасчетныйДокументРаботника", РасчетныйДокумент);
	//Смартис Лиманчук начало 01.11.2012
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("ФизЛицо",                    Контрагент);
		мСтруктураПараметровДенежныхСредств.Вставить("РасчетныйДокументРаботника", РасчетныйДокумент);
	//Смартис Лиманчук окончание 01.11.2012
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) И ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	//Смартис Лиманчук начало 04.10.2012
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателюНал Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	//Смартис Лиманчук окончание 04.10.2012
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	//Смартис Лиманчук начало 03.10.2012
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщикуНал Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	//Смартис Лиманчук окончание 03.10.2012
	Иначе
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, Дата, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами",	ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",		ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("РежимПроведения",				РежимПроведения);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",				Дата);
	мСтруктураПараметровДенежныхСредств.Вставить("СчетОрганизации",				Касса);
	мСтруктураПараметровДенежныхСредств.Вставить("Оплачено",					Истина);
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствРегл(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)
	
	Если (НЕ ОтраженоВОперУчете) И (НЕ Оплачено) И ОтражатьВУправленческомУчете Тогда
		Сообщить(Заголовок+"
			|Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")");
		Отказ = Истина;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
			Сообщить(Заголовок+" 
			|не совпадают сумма документа и ее расшифровка.");
			
			Отказ=Истина;
			
		КонецЕсли;
	КонецЕсли;	
	
	//Смартис Лиманчук начало 03.10.2012
	//Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
	Если (ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанкНал)
	//Смартис Лиманчук окончание 03.10.2012
		И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
			Сообщить("Не совпадают валюты банковского счета и кассы");
			Отказ=Истина;
		КонецЕсли;
		
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ОтраженоВОперУчете Тогда
		
		ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
		
	КонецЕсли;

	Если ОтражатьВУправленческомУчете 
		И ОтраженоВОперУчете  
		И (НЕ Оплачено) 
		И (Режим = РежимПроведенияДокумента.Оперативный) Тогда
		
		//Смартис Лиманчук начало 03.10.2012
		//Если Не ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		Если Не (ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанкНал) Тогда
		//Смартис Лиманчук окончание 03.10.2012
			
			ЕстьРазрешение=УправлениеДопПравамиПользователей.ПравоРазрешитьПроведениеПлатежаБезЗаявки();
			УправлениеДенежнымиСредствами.ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
			Касса,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение);
			
			Отказ=Отказ И НЕ ЕстьРазрешение;
			
		КонецЕсли;

		// Проверяем остаток доступных денежных средств
		СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(Касса,Дата,ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"));
		Если СвободныйОстаток < СуммаДокумента Тогда

			Сообщить(Заголовок+"
			|Сумма документа превышает возможный к использованию остаток денежных средств
			|по "+Касса.Наименование+".
			|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента+"
			|Сумма документа = "+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);

			Если НЕ УправлениеДопПравамиПользователей.ПравоРазрешитьПревышениеСвободногоОстаткаДС() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
			УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;	

	Если ОтраженоВОперУчете Тогда
		
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыУпр(), Отказ, Заголовок);
					
	КонецЕсли;
	
	Если     ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками 
		И ЗначениеЗаполнено(РасчетныйДокумент) 
		И РасчетныйДокумент.ОтражатьВБухгалтерскомУчете // займ по бух.учету
		И НЕ РасчетныйДокумент.Организация=Организация Тогда
		Сообщить("Организация, выбранная в документе, не совпадает с организацией, выбранной в договоре займа.");
		Отказ=Истина;
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ 
		И НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета Тогда
		Сообщить("Выдача денежных средств в кассу ККМ производится только в валюте регламентированного учета.");
		Отказ=Истина;
	КонецЕсли;
	
	
	//Смартис Лиманчук начало 06.11.2012
	//Если Оплачено И ОтраженоВОперУчете И ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее И ОтражатьПоЗатратам Тогда
	Если Оплачено И ОтраженоВОперУчете И (ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочееНал) И ОтражатьПоЗатратам Тогда
	//Смартис Лиманчук окончание 06.11.2012
		СтруктураОбязательныхПолей = Новый Структура("СтатьяЗатрат");
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			Если Не (СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы ИЛИ
					 СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт ИЛИ
					 СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы) 
			Тогда
			     ОбщегоНазначения.СообщитьОбОшибке("При указании статьи затрат с характером затрат " + СтатьяЗатрат.ХарактерЗатрат + " движения в затратных регистрах по УУ не будут отражены", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;
	
	

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок, СтруктураШапкиДокумента)
	Если ОтражатьВБухгалтерскомУчете Тогда
    
	//	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда

	//		// Проверка на то, чтобы в закрываемых ведомостях не было невыплаченных значений.
	//		Запрос = Новый Запрос;
	//		Запрос.УстановитьПараметр("НеВыплачено", Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
	//		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	//		Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	ЗарплатаКВыплатеОрганизаций.Ссылка.Представление КАК Ведомость
	//		|ИЗ
	//		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК ЗарплатаКВыплатеОрганизаций
	//		|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизаций.Ссылка
	//		|ГДЕ
	//		|	ЗарплатаКВыплатеОрганизаций.ВыплаченностьЗарплаты = &НеВыплачено
	//		|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
	//		РезультатЗапроса = Запрос.Выполнить().Выбрать();

	//		Пока РезультатЗапроса.Следующий() Цикл
	//			ОбщегоНазначения.СообщитьОбОшибке(РезультатЗапроса.Ведомость + ": есть строки с невыплаченной зарплатой!", Отказ, Заголовок);
	//		КонецЦикла;
	//		
	//		//Проверка на соответствие суммы по ведомостям сумме документа
	//		
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = "
	//		|ВЫБРАТЬ Разрешенные
	//		|	СУММА(ПараметрыОплаты.Сумма) КАК СуммаВыплачено
	//		|ИЗ
	//		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	//		|
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК ПараметрыОплаты
	//		|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ПараметрыОплаты.Ссылка
	//		|       И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СчетУчета = ПараметрыОплаты.СчетУчета
	//		|
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
	//		|		ПО ПараметрыОплаты.Ссылка = РаботникиОрганизации.Ссылка
	//		|		И ПараметрыОплаты.Сотрудник = РаботникиОрганизации.Сотрудник
	//		|
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	//		|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	//		|			И ПараметрыОплаты.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
	//		|			И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
	//		|ГДЕ
	//		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
	//		|	И РаботникиОрганизации.ВыплаченностьЗарплаты = &Выплачено
	//		|	И РаботникиОрганизации.СпособВыплаты = &ЧерезКассу
	//		|	И РанееВыплаченныеСуммы.Сотрудник ЕСТЬ NULL
	//		|";
	//		
	//		Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
	//		Запрос.УстановитьПараметр("Ссылка",Ссылка);
	//		Запрос.УстановитьПараметр("ЧерезКассу",Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
	//		
	//		Результат=Запрос.Выполнить().Выбрать();
	//		
	//		Если НЕ (Результат.Следующий() И Результат.СуммаВыплачено=СуммаДокумента) Тогда
	//			ОбщегоНазначения.СообщитьОбОшибке("Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.",Отказ,Заголовок);
	//		КонецЕсли;

	//	КонецЕсли;

	//	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда

	//	Запрос = Новый Запрос();
	//	Запрос.УстановитьПараметр("парамСотрудник",Контрагент); 
	//	Запрос.УстановитьПараметр("парамСчетУчета",СчетУчетаРасчетовСКонтрагентом);
	//	Запрос.УстановитьПараметр("парамПлатВедомость", РасчетныйДокумент);	
	//	Запрос.УстановитьПараметр("парамПустойРКО", Документы.РасходныйКассовыйОрдер.ПустаяСсылка());	
	//	Запрос.УстановитьПараметр("парамВыплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);	
	//	Запрос.УстановитьПараметр("парамЧерезКассу", Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
	//	
	//
	//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//	
	//	Запрос.Текст = "
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	 |	Работники.Сотрудник КАК Сотрудник
	//	|ПОМЕСТИТЬ
	//	|	ВТРаботникиОрганизации
	//	|ИЗ
	//	|	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Работники
	//	|ГДЕ
	//	|	Работники.ВыплаченностьЗарплаты = &парамВыплачено
	//	|	И Работники.СпособВыплаты = &парамЧерезКассу	
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Сотрудник ";
	//	Запрос.Выполнить();

	//	// Проверка на то, чтобы сведения в РКО соответствовали сведениям в указанной ПлатежнойВедомости.
	//	Запрос.Текст = 	
	//	"ВЫБРАТЬ
	//	|	СУММА(ЗарплатаКВыплатеОрганизацийПараметрыОплаты.Сумма) КАК Сумма,
	//	|	ЗарплатаКВыплатеОрганизацийПараметрыОплаты.Сотрудник,
	//	|	ЗарплатаКВыплатеОрганизацийПараметрыОплаты.СчетУчета,
	//	|	ЗарплатаКВыплатеОрганизацийПараметрыОплаты.Ссылка.Организация,
	//	//|	ЗарплатаКВыплатеОрганизацийПараметрыОплаты.СпособВыплаты,
	//	|	РанееВыплаченныеСуммы.Регистратор
	//	|ИЗ
	//	|	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК ЗарплатаКВыплатеОрганизацийПараметрыОплаты
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	//	|		ПО ЗарплатаКВыплатеОрганизацийПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
	//	|			И ЗарплатаКВыплатеОрганизацийПараметрыОплаты.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
	//	|ГДЕ
	//	|	ЗарплатаКВыплатеОрганизацийПараметрыОплаты.Ссылка = &парамПлатВедомость
	//	|	И ЗарплатаКВыплатеОрганизацийПараметрыОплаты.Сотрудник = &парамСотрудник
	//	|	И ЗарплатаКВыплатеОрганизацийПараметрыОплаты.СчетУчета = &парамСчетУчета
	//	|	И ЗарплатаКВыплатеОрганизацийПараметрыОплаты.Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТРаботникиОрганизации)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ЗарплатаКВыплатеОрганизацийПараметрыОплаты.Сотрудник,
	//	|	ЗарплатаКВыплатеОрганизацийПараметрыОплаты.СчетУчета,
	//	|	ЗарплатаКВыплатеОрганизацийПараметрыОплаты.Ссылка,
	//	|	РанееВыплаченныеСуммы.Регистратор";

	//		
	//		Результат = Запрос.Выполнить();
	//		Если Результат.Пустой() Тогда
	//			ОбщегоНазначения.СообщитьОбОшибке("В указанной платежной ведомости нет указанного работника с отметкой ""Выплачено"", или у него указан способ выплаты - ""Через банк"" ",Отказ,Заголовок);
	//			
	//		Иначе
	//			Выборка = Результат.Выбрать();
	//			Выборка.Следующий();
	//			Если Выборка.Регистратор <> Ссылка И Выборка.Регистратор <> NULL Тогда
	//				Если Выборка.Регистратор.Метаданные().Имя = "СписаниеДепонентовВДоходыОрганизаций" Тогда
	//					ОбщегоНазначения.СообщитьОбОшибке("По этому работнику указанной платежной ведомости задепонирована.",Отказ,Заголовок);
	//				Иначе
	//					ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='По этому работнику указанной платежной ведомости уже зарегистрирвоана оплата документом " + Выборка.Регистратор + ".';uk='По цьому працівнику зазначеної платіжної відомості вже є видатковий документ " + Выборка.Регистратор + ".'"),Отказ,Заголовок);
	//				КонецЕсли;
	//			КонецЕсли;
	//			Если Выборка.Организация <> Организация Тогда
	//				ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость по указанному работнику оформлена на другую организацию.",Отказ,Заголовок);
	//			КонецЕсли;
	//			//Если Выборка.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
	//			//	ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость оформлена на ""Перечисление в банк"".",Отказ,Заголовок);
	//			//КонецЕсли;
	//			Если Выборка.Сумма <> СуммаДокумента Тогда
	//				ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость по указанному работнику содержит другой размер выплаты.",Отказ,Заголовок);
	//			КонецЕсли;
	//				
	//		КонецЕсли;

	//	КонецЕсли;
		
		Если ОтражатьВБухгалтерскомУчете Тогда

			СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
			
			Если ЕстьРасчетыСКонтрагентами
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			 
				ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
			//Смартис Лиманчук начало 06.11.2012
			ИначеЕсли ЕстьРасчетыСКонтрагентами
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентамиНал Тогда
			 
				ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
			//Смартис Лиманчук окончание 06.11.2012
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
				//Смартис Лиманчук начало 03.10.2012
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанкНал
				//Смартис Лиманчук окончание 03.10.2012
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
				  //Смартис Лиманчук начало 01.11.2012
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал
				  //Смартис Лиманчук окончание 01.11.2012
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
				  //Смартис Лиманчук начало 06.11.2012
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочееНал
				  //Смартис Лиманчук окончание 06.11.2012
				  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
				  
				ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
				  
			КонецЕсли;

		КонецЕсли;
		
		//Смартис Лиманчук начало 06.11.2012
		//Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее И ОтражатьПоЗатратам Тогда
		Если (ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочееНал) И ОтражатьПоЗатратам Тогда
		//Смартис Лиманчук окончание 06.11.2012
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетУчетаРасчетовСКонтрагентом, СтатьяЗатрат);
			
			Если НЕ (ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы ИЛИ
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы ИЛИ 
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие ИЛИ
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт ИЛИ
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы ИЛИ 
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы ИЛИ 
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы) И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)
			Тогда
				ОбщегоНазначения.СообщитьОбОшибке("При указании счета затрат " + СчетУчетаРасчетовСКонтрагентом + " с характером затрат " + ХарактерЗатрат + " движения в затратных регистрах (бух. учет, нал. учет) не будут отражены",  Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;	
		
		//Смартис Лиманчук начало 06.11.2012
		//Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) И СчетУчетаРасчетовСКонтрагентом.НалоговыйУчет Тогда 
		Если (ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочееНал) И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) И СчетУчетаРасчетовСКонтрагентом.НалоговыйУчет Тогда 
		//Смартис Лиманчук окончание 06.11.2012
			
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				Неопределено,      // Неопределено - в случае проверки шапки документа
				Неопределено,      // Неопределено - в случае проверки шапки документа
				Отказ, 
				Заголовок, 
				"ОтражениеЗатрат", // ВидОперации
				Истина,            // ОтражатьПоЗатратам,
				"СчетУчетаРасчетовСКонтрагентом", // ИмяРеквизитаСчетЗатрат
				"СубконтоДт"       // ИмяРеквизитаСубконтоЗатрат
			);
			
		КонецЕсли; 
			
	КонецЕсли;
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) ИЛИ Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	Если НЕ ЗначениеЗаполнено(Касса) Тогда

		Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
		
	КонецЕсли;

	ВалютаДокумента         = ?(НЕ Касса.ВалютаДенежныхСредств.Пустая(),Касса.ВалютаДенежныхСредств,мВалютаРегламентированногоУчета);
	
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурсаДокумента.Курс;	
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ДокументОснование  = Основание.Ссылка;

	СпособЗаполнения = "Не заполнять";
	ВалютаДокумента  = мВалютаРегламентированногоУчета;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") 
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();

		ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		Контрагент  = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;

		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
				СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Истина;

		ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;

		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);

		СтрокаПлатеж.СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
			//Смартис Лиманчук начало 04.10.2012
			Если Основание.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссияНал Тогда
				ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателюНал;
			КонецЕсли;
			//Смартис Лиманчук окончание 04.10.2012
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		КонецЕсли;

		//Смартис Лиманчук начало 03.10.2012
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И (Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал) Тогда
			ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщикуНал;
		КонецЕсли;
		//Смартис Лиманчук окончание 03.10.2012
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		Контрагент  = Основание.Контрагент;
		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		Если ТипЗнч(Основание) <> Тип("ДокументСсылка.ПоступлениеДопРасходов") И 
			УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.Проект) Тогда
				СтрокаПлатеж.Проект=Основание.Проект;
			КонецЕсли;
		КонецЕсли;

		
		СтрокаПлатеж.Сделка = Основание.Сделка;
		Если Основание.Проведен Тогда
			СпособЗаполнения = "По взаиморасчетам";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		ОтражатьВУправленческомУчете=Истина;
		ОтражатьВБухгалтерскомУчете=Истина;
		
		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);

		СтрокаПлатеж.СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.Проект) Тогда
				СтрокаПлатеж.Проект=Основание.Проект;
			КонецЕсли;
		КонецЕсли;
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
		Контрагент                       = Основание.ФизЛицо;
		РасчетныйДокумент                = Основание;
		ВалютаВзаиморасчетовРаботника    = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;

		СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";

 		ОтражатьВУправленческомУчете=Истина;


	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		ЗаполнитьПоПКОУпр();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником")	Тогда
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками;
		Контрагент                       = Основание.ФизЛицо;
		РасчетныйДокумент                = Основание;
		Если Основание.ОтражатьВБухгалтерскомУчете Тогда
			ВалютаВзаиморасчетовРаботника = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаВзаиморасчетовРаботника = Основание.ВалютаДокумента;
		КонецЕсли;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаЗайма;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            Основание.ВалютаДокумента, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;
		
 		ОтражатьВУправленческомУчете=Истина;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
		
		ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплате")	Тогда

		ЗаполнитьПоЗарплатеКВыплатеУпр(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОбъявлениеНаВзносНаличными") Тогда

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		ВидОперации     = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
		СчетОрганизации = Основание.СчетОрганизации;

		Касса                   	= Основание.Касса;
		ВалютаДокумента         	= Основание.ВалютаДокумента;
		ОбъявлениеНаВзносНаличными 	= Основание.Ссылка;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

		СуммаДокумента=Основание.СуммаДокумента;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Основание.СтатьяДвиженияДенежныхСредств;
		
		ОтражатьВУправленческомУчете=Истина;
		ОтражатьВБухгалтерскомУчете=Истина;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда

		Если НЕ Основание.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
			Сообщить("Заявка оформлена на расходование безналичных денежных средств.");
			Возврат;
		КонецЕсли;

		ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Основание);

 	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.БюджетнаяОперация") Тогда
 		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
 		ВидОперации=Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
 		Контрагент = Основание.Контрагент;
 		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
 		СтрокаПлатеж=РасшифровкаПлатежа[0];
 		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
 			ВалютаВзаиморасчетов=ВалютаДокумента;
 		Иначе
 			ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
 		КонецЕсли;
 		// Получаем курсы валют
 		СтруктураГруппаВалют = Новый Структура;
 		СтруктураГруппаВалют.Вставить("ВалютаВзаиморасчетов",ВалютаВзаиморасчетов.Код);
 		СтруктураГруппаВалют.Вставить("ВалютаДокумента",ВалютаДокумента.Код);
 		СтруктураГруппаВалют.Вставить("ВалютаОперации",Основание.ВалютаДокумента.Код);
 		СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,Дата);
 		КурсДокумента=СтруктураКурсыВалют.ВалютаДокументаКурс;
 		КратностьДокумента=СтруктураКурсыВалют.ВалютаДокументаКратность;
 		СтрокаПлатеж.КурсВзаиморасчетов=СтруктураКурсыВалют.ВалютаВзаиморасчетовКурс;
 		СтрокаПлатеж.КратностьВзаиморасчетов=СтруктураКурсыВалют.ВалютаВзаиморасчетовКратность;
 		КурсОперации=СтруктураКурсыВалют.ВалютаОперацииКурс;
 		КратностьОперации=СтруктураКурсыВалют.ВалютаОперацииКратность;
 		СуммаДокумента=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Сумма,
 		Основание.ВалютаДокумента, 
 		ВалютаДокумента,
 		КурсОперации, КурсДокумента,
 		КратностьОперации, КратностьДокумента);
 		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
 		СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента,
 		ВалютаДокумента, 
 		ВалютаВзаиморасчетов,
 		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
 		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
 		СтрокаПлатеж.СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
 		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);	
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.Проект) Тогда
				СтрокаПлатеж.Проект=Основание.Проект;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке") Тогда
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();

		ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		Контрагент  = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;  
		СтрокаПлатеж.Сделка = Основание.Заказ;
		Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание.Ссылка;
		КонецЕсли;
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.ДоговорКонтрагента.ОсновнойПроект) Тогда
				СтрокаПлатеж.Проект=Основание.ДоговорКонтрагента.ОсновнойПроект;
			КонецЕсли;
		КонецЕсли;
		
		СпособЗаполнения = "По сумме документа";
		
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Истина;
		
		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);

		СтрокаПлатеж.СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		
	КонецЕсли;
		
	Если СпособЗаполнения = "По заказу" Тогда
		ПроверкаКурсовВалют(СтрокаПлатеж);
		ЗаполнитьПоЗаказуУпр(СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		ПроверкаКурсовВалют(СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,-1);
		СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ПроверкаКурсовВалют(СтрокаПлатеж);
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда

		ПроверкаКурсовВалют(СтрокаПлатеж);
		
		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = ?(Основание.УдержатьКомиссионноеВознаграждение, ОснованиеСуммаДокумента - Основание.СуммаВознаграждения, ОснованиеСуммаДокумента);
		КонецЕсли;

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента                   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;
	Если ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		//Смартис Лиманчук начало 01.11.2012
		//Если (ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками) И
		Если (ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику ИЛИ 
			ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал ИЛИ 
			ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками) И
		//Смартис Лиманчук окончание 01.11.2012
 			НЕ ВалютаВзаиморасчетовРаботника=ВалютаДокумента Тогда
 			ОтражатьВБухгалтерскомУчете=Ложь;
 			
 		Иначе
 			ОтражатьВБухгалтерскомУчете=Истина;
 		КонецЕсли;
 	КонецЕсли; 
 	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
 	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	#Если Клиент Тогда 
	ЗаполнитьРеквизитыПечати(); 
	#КонецЕсли
	
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");

	ОтраженоВОперУчете = Истина;
	Оплачено           = Истина;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, Режим);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
		//Смартис Лиманчук начало 01.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал
		//Смартис Лиманчук окончание 01.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		//Смартис Лиманчук начало 06.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентамиНал
		//Смартис Лиманчук окончание 06.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику 
		//Смартис Лиманчук начало 06.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентамиНал
		//Смартис Лиманчук окончание 06.11.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ФизЛицо", СтруктураШапкиДокумента.Контрагент);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                       			, "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");
	//Смартис Лиманчук начало 08.10.2012
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "СтатьяЗатратДляКрафт"                        , "СтатьяЗатратДляКрафт");
	//Смартис Лиманчук окончание 08.10.2012

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		, КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	, КратностьДокумента);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	РасчетыВозврат = УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);

	ПолучитьТаблицуПлатежейРКОУпр();
	
	Если НЕ Отказ Тогда
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
	КонецЕсли;
	
	ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок, СтруктураШапкиДокумента);

	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете  тогда
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		//Смартис Лиманчук начало 28.02.2013
		ПроверитьПорогЗадолженностиПоЗаработнойПлате(Истина,Отказ);
		//Смартис Лиманчук начало 28.02.2013
	КонецЕсли;
	
	//Смартис Лиманчук начало 28.03.2013
	УправлениеВзаиморасчетами.ПроверитьСрокИСуммуЗадолженностиПодотчет(СтруктураШапкиДокумента, Отказ, Заголовок);
	//Смартис Лиманчук окончание 28.03.2013
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ДвиженияЗатрат = Движения.ЗатратыБухгалтерскийУчет;
		ДвиженияЗатрат.Прочитать();
		
		тзЗатраты = ДвиженияЗатрат.Выгрузить(, "СтатьяЗатрат, Подразделение, Сумма");
		тзЗатраты.Свернуть("СтатьяЗатрат, Подразделение", "Сумма");
		
		Если тзЗатраты.Количество() > 0 Тогда
			тзЗатратыПоПодразделениям = Бюджетирование.ВыполнитьКонтрольПревышенияБюджета(ЭтотОбъект, тзЗатраты, Отказ);
			
			Если НЕ ЭтотОбъект.ПревышенБюджет И тзЗатратыПоПодразделениям <> Неопределено Тогда
				Бюджетирование.СформироватьДвиженияФактическихЗатратПоБюджетам(ЭтотОбъект, тзЗатратыПоПодразделениям);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ПревышенБюджет Тогда
		Бюджетирование.ОчиститьЗаписиРегистраПревышений(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Группа1"))
		И (НЕ (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанкНал)
		И НЕ (РольДоступна("ДоступРКОПрочие") И ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочееНал)) Тогда
		
		Отказ = Истина;
		Сообщить("Нарушение прав доступа");
		Возврат;
	КонецЕсли;
	
	//Смартис Лиманчук начало 06.11.2012
	//Если ОтражатьВБухгалтерскомУчете И ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
	Если ОтражатьВБухгалтерскомУчете И (ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочееНал) Тогда
	//Смартис Лиманчук окончание 06.11.2012
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента(
			ЭтотОбъект,
			"СчетУчетаРасчетовСКонтрагентом",    // ИмяРеквизитаСчетЗатрат
			"СубконтоДт" // ИмяРеквизитаСубконто
		);
		
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если НЕ ЗначениеЗаполнено(НомерОрдера) ИЛИ ЭтоНовый() Тогда
		УстановитьНомерОрдера();
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		//Смартис Лиманчук начало 28.02.2013
		Если РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
			ПроверитьПорогЗадолженностиПоЗаработнойПлате(Ложь,Отказ);
		КонецЕсли;
		//Смартис Лиманчук начало 28.02.2013
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

// Формирует номер расходного оредера в пределах организации
//
Процедура УстановитьНомерОрдера() Экспорт
	
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
		СтруктураПараметровБлокировка = Новый Структура("ТипТаблицы, ИмяТаблицы", "Справочник", "ОбособленныеПодразделенияОрганизаций");
		
		ЗначенияБлокировки = Новый Структура;
		ЗначенияБлокировки.Вставить("Ссылка",      Касса.ОбособленноеПодразделение);
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировка, ЗначенияБлокировки, , Ложь, "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("ДатаКонцаГода", КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Если ЗначениеЗаполнено(Касса) Тогда
		Запрос.УстановитьПараметр("ОбособленноеПодразделение", Касса.ОбособленноеПодразделение);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерОрдера КАК НомерОрдера
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ГДЕ
	|	РасходныйКассовыйОрдер.Организация = &Организация
	|	//самого себя не учитываем
	|	И РасходныйКассовыйОрдер.Ссылка <> &Ссылка
	|	И РасходныйКассовыйОрдер.ВалютаДокумента = &ВалютаДокумента	
	|" + ?(ЗначениеЗаполнено(Касса), "	И РасходныйКассовыйОрдер.Касса.ОбособленноеПодразделение = &ОбособленноеПодразделение", "") + "
	|	И РасходныйКассовыйОрдер.Дата >= &ДатаНачалаГода
	|	И РасходныйКассовыйОрдер.Дата <= &ДатаКонцаГода";

	СписокОрдеров = Запрос.Выполнить().Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	 
	ТаблицаЗначений.Колонки.Добавить("Номер"); 
	ТаблицаЗначений.Колонки.Добавить("Длина"); 

	Пока СписокОрдеров.Следующий() Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить(); 
		НоваяСтрока.Номер = СписокОрдеров.НомерОрдера; 
		НоваяСтрока.Длина = СтрДлина(СписокОрдеров.НомерОрдера); 
	КонецЦикла;
	
	ТаблицаЗначений.Сортировать("Длина Убыв, Номер Убыв");
	
	Попытка
		НомерОрдераЧисло = Число(ТаблицаЗначений[0].Номер) + 1;
		НомерОрдера 	 = Формат(НомерОрдераЧисло, "ЧГ=0");
	Исключение
		НомерОрдера = 1;
	КонецПопытки;
	
КонецПроцедуры	

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ВыплатаЗаработнойПлаты.Очистить();
	// для нового документа стоит очистить номер ордера
	НомерОрдера = "";

КонецПроцедуры

//Смартис Лиманчук начало 29.04.2013
Процедура ПроверитьПорогЗадолженностиПоЗаработнойПлате(РежимЗаписи,Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	-ЕСТЬNULL(ВхОстаток.СуммаОстаток, 0) КАК ВхСальдо,
	|	-ЕСТЬNULL(ОборотыДоп.СуммаОборот, 0) КАК ДопОборот,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	-ЕСТЬNULL(ВхОстаток.СуммаОстаток, 0) - ЕСТЬNULL(ОборотыДоп.СуммаОборот, 0) - ВложенныйЗапрос.Сумма КАК ИсхСальдо,
	|	ЕСТЬNULL(ПорогЗадолженности.Сумма, 0) КАК Порог,
	|	-ВЫБОР
	|		КОГДА ПорогЗадолженности.Сумма ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ -ЕСТЬNULL(ВхОстаток.СуммаОстаток, 0) - ЕСТЬNULL(ОборотыДоп.СуммаОборот, 0) - ВложенныйЗапрос.Сумма + ПорогЗадолженности.Сумма
	|	КОНЕЦ КАК Превышение,
	|	ВложенныйЗапрос.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписокНаВыплату.Сотрудник КАК Сотрудник,
	|		СУММА(СписокНаВыплату.Сумма - СписокНаВыплату.СуммаБух) КАК Сумма,
	|		СписокНаВыплату.Сотрудник.Физлицо КАК Физлицо,
	|		СписокНаВыплату.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК СписокНаВыплату
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК Ведомости
	|			ПО СписокНаВыплату.Ссылка = Ведомости.Ведомость
	|	ГДЕ
	|		Ведомости.Ссылка = &Ссылка
	|		И СписокНаВыплату.Ссылка.Проведен
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СписокНаВыплату.Сотрудник,
	|		СписокНаВыплату.Сотрудник.Физлицо,
	|		СписокНаВыплату.Ссылка) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате), , ) КАК ВхОстаток
	|		ПО ВложенныйЗапрос.Физлицо = ВхОстаток.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорогЗадолженностиПоЗаработнойПлате.СрезПоследних(&Дата, ) КАК ПорогЗадолженности
	|		ПО ВложенныйЗапрос.Сотрудник = ПорогЗадолженности.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&Дата, КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ), Регистратор, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате), , , , ) КАК ОборотыДоп
	|		ПО ВложенныйЗапрос.Физлицо = ОборотыДоп.Субконто1
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПорогЗадолженности.Сумма ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ -ЕСТЬNULL(ВхОстаток.СуммаОстаток, 0) - ЕСТЬNULL(ОборотыДоп.СуммаОборот, 0) - ВложенныйЗапрос.Сумма + ПорогЗадолженности.Сумма
	|		КОНЕЦ < 0
	|	И ОборотыДоп.Регистратор.Дата <= &Дата";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//Запрос.УстановитьПараметр("Дата", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Дата", Дата-1);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи Тогда //проведение, даем отказ
		Пока Выборка.Следующий() Цикл
			Сообщить("По сотруднику "+Выборка.Сотрудник+" превышен лимит задолженности! Сумма долга с учетом платежа "+(-Выборка.ИсхСальдо)+", лимит "+Выборка.Порог);
		КонецЦикла;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//Если РольДоступна("ПерепроведениеВыгруженных") Тогда 
	//	Если Вопрос("Обнаружены превышения лимита по выплате зарплаты. Следует внести корректировки в документы. Продолжить?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда			
	//		Возврат;
	//	КонецЕсли; 	
	//КонецЕсли;

	ЕстьИзменения = Ложь;
	
	Пока Выборка.Следующий() Цикл
		СуммаКорректировки = -(Выборка.ИсхСальдо + Выборка.Порог);
		док = Выборка.Ссылка.ПолучитьОбъект();
		//делаем тупо времени нету.
		МС = док.ПараметрыОплаты.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
		Если МС.Количество() > 0 Тогда
			
			МС[0].Сумма = МС[0].Сумма - Мин(МС[0].Сумма - МС[0].СуммаБух, СуммаКорректировки);
			СуммаПоСотр = 0;
			Для Каждого ЭлементМС ИЗ МС Цикл
				СуммаПоСотр = СуммаПоСотр + ЭлементМС.Сумма;
			КонецЦикла;
			
			СтрокаРаботника = док.РаботникиОрганизации.Найти(Выборка.Сотрудник,"Сотрудник");
			СтрокаРаботника.Сумма = СуммаПоСотр;
			ЕстьИзменения = Истина;
			Сообщить("По сотруднику "+Выборка.Сотрудник+" скорректирована сумма платежа! Было "+Выборка.Сумма+", стало "+СтрокаРаботника.Сумма);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		Попытка
			док.Записать(РежимЗаписиДокумента.Проведение);
			стр = ВыплатаЗаработнойПлаты.Найти(Выборка.Ссылка,"Ведомость");
			стр.СуммаПлатежа = док.ПараметрыОплаты.Итог("Сумма");
			СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
		Исключение
			Сообщить("Ошибка корректировки документов!");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
//Смартис Лиманчук окончание 29.04.2013

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Наличные);
ПревышенБюджет = Ложь;
