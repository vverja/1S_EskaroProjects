Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

Перем мСклад Экспорт;
Перем ИспользоватьРегистрСвободныеОстатки;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()

	ОбработкаПечати          = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	ОбработкаПечати.Документ = ЭтотОбъект.Ссылка;

	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = 'Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "1Т"
		  ИЛИ ИмяМакета = "_1Т" Тогда

		ТабДокумент = ПечатьТТН();

	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);

	ИначеЕсли ИмяМакета = "ТранспУпаковки" Тогда

		Обр   = Обработки.ТранспортныеУпаковки.Создать();
		Форма = Обр.ПолучитьФорму(,ЭтотОбъект,);
		Если Форма.Открыта() Тогда
			Форма.Активизировать();
		Иначе
			Форма.Открыть();
			Форма.ПервоначальноеЗаполнение(Ссылка);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;

	Иначе
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.РасходныйОрдерНаТовары", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РасходныйОрдерНаТовары", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Ордер", "Расходный ордер");
	СтруктураМакетов.Вставить("_1Т",   "1-Т (Товарно-транспортная накладная)");
	СтруктураМакетов.Вставить("Бланк", "Бланк товарного наполнения (адресный склад)");
	СтруктураМакетов.Вставить( "ТранспУпаковки",  "Штрихкоды транспортных упаковок");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполнение табличной части по приходному ордеру на товары.
//
Процедура ЗаполнитьТовары() Экспорт

#Если ВнешнееСоединение Тогда
	Если Товары.Количество() > 0 Тогда
		Товары.Очистить();
	КонецЕсли;
#КонецЕсли

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад",             Склад);
	Запрос.УстановитьПараметр("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПередачи);
	Запрос.УстановитьПараметр("ДатаОстатков", 	   ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));


	ЗначениеДокументРезерва = Неопределено;
	ТипДокументаПередачи = ТипЗнч(ДокументПередачи);
	Если ТипДокументаПередачи = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Остатки.Номенклатура,
			|	Остатки.СерияНоменклатуры,
			|	Остатки.ХарактеристикаНоменклатуры,
			|	Остатки.Качество,
			|	Неопределено КАК ДокументРезерва,
			|	Остатки.КоличествоОстаток             						КАК Количество,
			|	Остатки.Номенклатура.ЕдиницаХраненияОстатков 				КАК ЕдиницаИзмерения,
			|   Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 	КАК Коэффициент
			|ИЗ
			|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование 
			|                                                      И Склад        = &Склад
			|                                                      И СтатусПартии = &СтатусПартии) КАК Остатки
			|ГДЕ Остатки.КоличествоОстаток > 0";

	ИначеЕсли ТипДокументаПередачи = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Остатки.Номенклатура,
			|	NULL КАК СерияНоменклатуры,
			|	Остатки.ХарактеристикаНоменклатуры,
			|	ЗНАЧЕНИЕ(Справочник.Качество.Новый) 						КАК Качество,
			|	NULL 														КАК ДокументРезерва,
			|	Остатки.КоличествоОстаток  									КАК Количество,
			|	Остатки.Номенклатура.ЕдиницаХраненияОстатков 				КАК ЕдиницаИзмерения,
			|   Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 	КАК Коэффициент
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, 
			|			ЗаказПокупателя = &ДокументОснование И СтатусПартии = &СтатусПартии
			|			И НЕ Номенклатура.Услуга И НЕ Номенклатура.Набор) 
			|																КАК Остатки
			|ГДЕ Остатки.КоличествоОстаток > 0
			|";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Остатки.Номенклатура,
			|	Остатки.СерияНоменклатуры,
			|	Остатки.ХарактеристикаНоменклатуры,
			|	Остатки.Качество,
			|	Остатки.ДокументРезерва,
			|	Остатки.КоличествоОстаток          							КАК Количество,
			|	Остатки.Номенклатура.ЕдиницаХраненияОстатков 				КАК ЕдиницаИзмерения,
			|   Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 	КАК Коэффициент
			|ИЗ
			|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков, ДокументПередачи = &ДокументОснование И Склад = &Склад И СтатусПартии = &СтатусПартии) КАК Остатки
			|ГДЕ Остатки.КоличествоОстаток > 0";
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();
        ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;

		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);		

		СтрокаТабличнойЧасти.СерияУказываетсяПриОтпускеСоСклада = Ложь;

		Если НЕ ЗначениеЗаполнено(Выборка.СерияНоменклатуры) Тогда
			Если (Выборка.Номенклатура.ВестиУчетПоСериям) И (НЕ Выборка.Номенклатура.ВестиПартионныйУчетПоСериям) Тогда
				СтрокаТабличнойЧасти.СерияУказываетсяПриОтпускеСоСклада = Истина;
			КонецЕсли;	
		КонецЕсли;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТовары()

// Процедура выполняет заполнение табличной части по приходному ордеру на товары.
//
Процедура ЗаполнитьВозвратнуюТару() Экспорт

#Если ВнешнееСоединение Тогда
	Если ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
#КонецЕсли
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"    , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПередачи);
	Запрос.УстановитьПараметр("СтатусПартии",      Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("ДатаОстатков", 	   ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ТекстЗапросаПоПриходномуОрдеру =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Неопределено КАК ДокументРезерва,
	|	Остатки.КоличествоОстаток    КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование 
	|                                                      И Склад        = &Склад
	|                                                      И СтатусПартии = &СтатусПартии) КАК Остатки
	|";

	ТекстЗапросаПоНакладной =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.ДокументРезерва,
	|	Остатки.КоличествоОстаток    КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков, ДокументПередачи = &ДокументОснование И Склад = &Склад И СтатусПартии = &СтатусПартии) КАК Остатки
	|";
	
	ВидыОперацийРасходныйОрдер = Перечисления.ВидыОперацийРасходныйОрдер;

	ЗначениеДокументРезерва = Неопределено;
	Если ВидОперации = ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		Запрос.Текст = ТекстЗапросаПоПриходномуОрдеру;
	Иначе
		Запрос.Текст = ТекстЗапросаПоНакладной;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Количество = Выборка.КоличествоОстаток;
		Если Количество = 0 ИЛИ Количество = NULL Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ДокументРезерва            = Выборка.ДокументРезерва;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьВозвратнуюТару()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
											ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения);

	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
											
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары. (для списания партий товаров)
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВПереработку Тогда
		
		// Если партии были оприходованы с правом перепродажи, то нужно списывать партии
		Если НЕ СтруктураШапкиДокумента.СниматьРезерв Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			// Недостающие поля.
			Инд = 0;
			Для каждого Строка Из ТаблицаДвижений Цикл
				
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
				Строка.ДокументПартии = ДокументПередачи;
				Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
				
				СтрокаТаблицыТоваров = ТаблицаПоТоварам.Получить(Инд-1);
				Если СтрокаТаблицыТоваров.СерияУказываетсяПриОтпускеСоСклада Тогда
					Строка.СерияНоменклатуры = Неопределено;
				КонецЕсли;
				
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру,"ДопустимыйСтатус1");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
			
			// Документ передачи для списания по реализации
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи,"ОсновнойДокумент");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");
			
			// Расходный ордер отражается в тех учетах, в которых ДокументПередачи, или только в управленческом
			// в документе передачи может не быть ни одного флажка если это приходный ордер на товары
			// по умолчанию всегда управленческий учет
			УпрУчет = Ложь;
			БухУчет = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ДокументПередачи) или 
				ДокументПередачи.Метаданные().Имя = "ПриходныйОрдерНаТовары" Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
				УпрУчет = Истина;
			Иначе
				МД = Метаданные.НайтиПоТипу(ТипЗнч(ДокументПередачи));
				ТекстПризнакиУчета = "";
				Если МД.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
					ТекстПризнакиУчета = ТекстПризнакиУчета + ", ОтражатьВУправленческомУчете";
				Иначе
					ТекстПризнакиУчета = ТекстПризнакиУчета + ", Ложь КАК ОтражатьВУправленческомУчете";
				КонецЕсли;
				Если МД.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда
					ТекстПризнакиУчета = ТекстПризнакиУчета + ", ОтражатьВБухгалтерскомУчете";
				Иначе
					ТекстПризнакиУчета = ТекстПризнакиУчета + ", Ложь КАК ОтражатьВБухгалтерскомУчете";
				КонецЕсли;
				
				Запрос = Новый Запрос("Выбрать "+Сред(ТекстПризнакиУчета, 2)+" ИЗ Документ."+МД.Имя+" ГДЕ Ссылка = &Ссылка");
				Запрос.УстановитьПараметр("Ссылка", ДокументПередачи);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ТаблицаДвижений.ЗаполнитьЗначения(Выборка.ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
					ТаблицаДвижений.ЗаполнитьЗначения(Выборка.ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
					УпрУчет = Выборка.ОтражатьВУправленческомУчете;
					БухУчет = Выборка.ОтражатьВБухгалтерскомУчете;
				КонецЕсли;
			КонецЕсли;
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
			
			// ТАРА ПО РЕГИСТРУ СписанныеТовары.
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
				Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;
				
			КонецЦикла;
			
			// Документ передачи для списания по реализации
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи,"ОсновнойДокумент");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			
			Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной Тогда
			
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
				
			КонецЕсли;			
						
			ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
									
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");

			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			ТаблицаДвижений.ЗаполнитьЗначения(УпрУчет,"ОтражатьВУправленческомУчете");
			ТаблицаДвижений.ЗаполнитьЗначения(БухУчет,"ОтражатьВБухгалтерскомУчете");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
			
			Движения.СписанныеТовары.Записать(Истина);
			
			Если ТаблицаПоТоварам.Количество() + ТаблицаПоТаре.Количество() > 0 тогда
				УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,УпрУчет,БухУчет,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);				
			КонецЕсли;
			
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
	                          ТаблицаПоТаре, Отказ, Заголовок);

	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		НаборДвижений = Движения.ТоварыВРознице;
		
		// Контроль остатков товара
		Если НЕ ИспользоватьРегистрСвободныеОстатки Тогда
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НаборДвижений = Движения.ТоварыНаСкладах;
		
		// Контроль остатков товара
		Если НЕ ИспользоватьРегистрСвободныеОстатки Тогда
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",    Склад);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
		
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
			
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);
		КонецЕсли;
				
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.НеОпределен Тогда
		Возврат;
	КонецЕсли;

	Если (ВидОперации <> Перечисления.ВидыОперацийРасходныйОрдер.Перемещение
	 Или СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов)
	   И СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;
		
		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
						
			// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
			ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВПереработку
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ИзПереработки
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеСоСкладов
		НаборДвижений = Движения.ТоварыКПередачеСоСкладов;

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
		
			// Если в табличной части установлен флаг "Серия указывается при отпуске со склада",
			// то по данному регистру необходимо списывать пустую серию
			ТаблицаПоТоварамКПередаче = ТаблицаПоТоварам.Скопировать();
			Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварамКПередаче Цикл
				Если СтрокаТаблицы.СерияУказываетсяПриОтпускеСоСклада Тогда
					СтрокаТаблицы.СерияНоменклатуры = Неопределено;
				КонецЕсли;
			КонецЦикла;
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПередаче);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
							
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",            Склад);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", ДокументПередачи);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;

		Если ВидОперации <> Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций
			Если СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
			
				// Проверка остатков при оперативном проведении.
				НаборДвижений = Движения.ТоварыКПередачеОрганизаций;
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				
				Если Не Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПередаче);
								
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
									
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",      Организация);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", ДокументПередачи);
					
					Если СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
						ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
					КонецЕсли;
						
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		
		// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Контроль остатков товара
		Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;
		
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
								
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
									
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПолучения", ДокументПередачи);
			
			Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",СтруктураШапкиДокумента.СкладПолучатель);
			Иначе
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",СтруктураШапкиДокумента.Склад);
			КонецЕсли;
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",      Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",          Справочники.Качество.Новый,                       "ТаблицаПоТаре");
						
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
		КонецЕсли;
		
		// Если поступление по приходному ордеру было без права продажи, то надо снять резерв
		Если СтруктураШапкиДокумента.СниматьРезерв Тогда
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
									
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
										
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", ДокументПередачи);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",           Склад);
							
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам,
	                          ТаблицаПоТаре, Отказ, Заголовок,РежимПроведения);

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание, СтандартнаяОбработка)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.НеОпределен Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.НеОпределен;
			Если Основание.Проведен Тогда
				Товары.Загрузить(Основание.Товары.Выгрузить());
				ВозвратнаяТара.Загрузить(Основание.ВозвратнаяТара.Выгрузить());
			КонецЕсли;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру;
			ДокументПередачи = Основание;
			Если Основание.Проведен Тогда

				ЗаполнитьТовары();
				ЗаполнитьВозвратнуюТару();
			КонецЕсли;
		КонецЕсли;
		

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной;

		ДокументПередачи = Основание;

#Если КЛИЕНТ Тогда
		// Выбор склада
		Если мУказаниеСкладовВТЧ Тогда
		
			СтруктТабЧастей = Новый Структура;
			СтруктТабЧастей.Вставить("Товары",         "Склад");
			СтруктТабЧастей.Вставить("ВозвратнаяТара", "Склад");
			
			СтруктПараметры = Новый Структура;
			СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
			СтруктПараметры.Вставить("ИмяСкладаВШапке", "Склад");
			
			Склад = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(Основание, СтруктПараметры);
		ИначеЕсли НЕ мСклад = Неопределено И ТипЗнч(мСклад) = Тип("СправочникСсылка.Склады") Тогда
			Склад = мСклад;			
		КонецЕсли;
#КонецЕсли

		Если Основание.Проведен Тогда

			ЗаполнитьТовары();
			ЗаполнитьВозвратнуюТару();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение;
		Склад = Основание.СкладОтправитель;
		ДокументПередачи = Основание;

		Если Основание.Проведен Тогда

			ЗаполнитьТовары();
			ЗаполнитьВозвратнуюТару();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику;

		ДокументПередачи = Основание;
		
#Если КЛИЕНТ Тогда
		// Выбор склада
		Если мУказаниеСкладовВТЧ Тогда
		
			СтруктТабЧастей = Новый Структура;
			СтруктТабЧастей.Вставить("Товары",         "Склад");
			СтруктТабЧастей.Вставить("ВозвратнаяТара", "Склад");
			
			СтруктПараметры = Новый Структура;
			СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
			СтруктПараметры.Вставить("ИмяСкладаВШапке", "Склад");
			
			Склад = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(Основание, СтруктПараметры);
			
		КонецЕсли;
#КонецЕсли

		Если Основание.Проведен Тогда

			ЗаполнитьТовары();
			ЗаполнитьВозвратнуюТару();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВПереработку;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ИзПереработки;
		КонецЕсли;

		ДокументПередачи = Основание;

		Если Основание.Проведен Тогда

			ЗаполнитьТовары();
			ЗаполнитьВозвратнуюТару();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.РасходныйОрдерНаТовары.СтруктураДополнительныхДанныхФормы());
	КонецЕсли;

    ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
	Если Основание = Неопределено ИЛИ ТипЗнч(Основание) = Тип("Структура") Тогда
		//Для нового документа вводимого не на основании - заполним вид операции по умолчанию
		//Необходимо сделать явно, т.к. в ЗаполнитьШапкуДокумента вид операции заполняется по своему
		ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.НеОпределен;
    КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		ЭтотОбъект.Контрагент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		Контрагент = Неопределено;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда

		//Если без права продажи, то документ резерва - приходный ордер.
		Если ДокументПередачи.БезПраваПродажи Тогда

			Для Каждого СтрокаТЧ Из Товары Цикл
				Если СтрокаТЧ.ДокументРезерва <> ДокументПередачи Тогда
					СтрокаТЧ.ДокументРезерва = ДокументПередачи;
				КонецЕсли;
			КонецЦикла;

			Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
				Если СтрокаТЧ.ДокументРезерва <> ДокументПередачи Тогда
					СтрокаТЧ.ДокументРезерва = ДокументПередачи;
				КонецЕсли;
			КонецЦикла;

		Иначе

			ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.Товары, "ДокументРезерва");
			ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.ВозвратнаяТара, "ДокументРезерва");

		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.НеОпределен Тогда
		Для Каждого СтрокаТЧ Из Товары Цикл
			Если НЕ СтрокаТЧ.СерияУказываетсяПриОтпускеСоСклада Тогда
				СтрокаТЧ.СерияУказываетсяПриОтпускеСоСклада = Истина;
			КонецЕсли;
		КонецЦикла;

	Иначе

		ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.Товары, "ДокументРезерва");
		ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.ВозвратнаяТара, "ДокументРезерва");

	КонецЕсли;

	ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);

	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;


	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);	
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = Нстр("ru = 'Проведение документа """ + СокрЛП(Ссылка) + """: '");

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураШапкиДокумента.Вставить("СниматьРезерв", Ложь); // инициализация значения
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		
		ЗапросПоШапке = Новый Запрос;
		ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументПередачи);
		
		ЗапросПоШапке.Текст = "ВЫБРАТЬ БезПраваПродажи 
							|ИЗ Документ.ПриходныйОрдерНаТовары
							|ГДЕ Документ.ПриходныйОрдерНаТовары.Ссылка = &ДокументОснование";
							
		ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
		Если ВыборкаПоШапке.Следующий() Тогда
			СтруктураШапкиДокумента.Вставить("СниматьРезерв", ВыборкаПоШапке.БезПраваПродажи);
		КонецЕсли;
		
	КонецЕсли;

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "ВестиПартионныйУчетПоСкладам"    , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"           , "ВидСклада"                       , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПередачи", "СкладОтправитель"                , "СкладОтправитель");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПередачи", "СкладПолучатель"                 , "СкладПолучатель");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"     , "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	СтруктураПолей = Новый Структура;	
	СтруктураПолей.Вставить("Номенклатура"                      , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                        , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("СерияНоменклатуры"                 , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"        , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ДокументРезерва"                   , "ДокументРезерва");
	СтруктураПолей.Вставить("Качество"                          , "Качество");
	СтруктураПолей.Вставить("СерияУказываетсяПриОтпускеСоСклада", "СерияУказываетсяПриОтпускеСоСклада");
	СтруктураПолей.Вставить("Услуга"                            , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                             , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                          , "Номенклатура.Комплект");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
        ИспользоватьРегистрСвободныеОстатки = глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки"); 

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре,
							Отказ, Заголовок);

		Если ИспользоватьРегистрСвободныеОстатки И 
			(Товары.Количество() <> 0 ИЛИ ВозвратнаяТара.Количество() <> 0)
			И НЕ Отказ Тогда
			Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
				Движения.СвободныеОстатки.БлокироватьДляИзменения = Истина;
			КонецЕсли;
			Движения.Записать();
			Если Товары.Количество() <> 0 Тогда          
				РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
				"Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда          
				РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
				"ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;
							
	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		
		СтрокаСообщения = Нстр("ru = 'Документ не может быть оформлен на НТТ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийРасходныйОрдер.НеОпределен Тогда
		ПроверяемыеРеквизиты.Добавить("Организация");
		ПроверяемыеРеквизиты.Добавить("ДокументПередачи");

		Если ЗначениеЗаполнено(ДокументПередачи) Тогда
			// Если документ проводится "задним числом",
			// то убедимся, что документ передачи - раньше чем ордер
			Если НачалоДня(Дата) <> НачалоДня(ТекущаяДата()) 
			   И ДокументПередачи.Дата >= Дата Тогда
				СтрокаСообщения = Нстр("ru = 'Дата документа передачи должна быть раньше даты текущего документа.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
			КонецЕсли;
			
			Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
				Если Склад <> ДокументПередачи.СкладОтправитель Тогда
					СтрокаСообщения = Нстр("ru = 'Склад документа должен соответствовать складу-отправителю документа перемещения.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли;
	
	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа", ОбъектКопирования.Ссылка);
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

мУказаниеСкладовВТЧ = УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации
                  ИЛИ УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации;