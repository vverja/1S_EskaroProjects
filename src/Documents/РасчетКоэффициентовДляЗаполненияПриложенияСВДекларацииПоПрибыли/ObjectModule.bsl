Перем мУдалятьДвижения;

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьНаДубльДокументаВПериоде(Отказ,Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьНаДубльДокументаВПериоде(Отказ,Заголовок)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ИСТИНА КАК Поле1
	               |ИЗ
	               |	РегистрСведений.КоэффициентыДляЗаполнениПриложенияСВДекларацииПоПрибыли КАК КоэффициентыДляЗаполнениПриложенияСВДекларацииПоПрибыли
	               |ГДЕ
	               |	КоэффициентыДляЗаполнениПриложенияСВДекларацииПоПрибыли.Период = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
	               |	И КоэффициентыДляЗаполнениПриложенияСВДекларацииПоПрибыли.Организация = &Организация
	               |	И КоэффициентыДляЗаполнениПриложенияСВДекларацииПоПрибыли.Регистратор <> &Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru = 'В текущем месяце по данной организации коэффициенты уже были расчитаны другим документом!'; uk = 'У поточному місяці по вказаній організації коефіцієнти вже були розраховані іншим документом!'")), Отказ);	
	
	КонецЕсли;

КонецПроцедуры

// Выполняет движения по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоСтатьям, Отказ, Заголовок)
	
	НаборДвижений = Движения.КоэффициентыДляЗаполнениПриложенияСВДекларацииПоПрибыли;
	
	Для каждого Строка Из ТаблицаПоСтатьям Цикл
		
		СтрокаДвижений 				= НаборДвижений.Добавить();
		СтрокаДвижений.Активность 	= Истина;
		СтрокаДвижений.Период 		= Дата;
		
		СтрокаДвижений.Организация 	= Организация;
		
		СтрокаДвижений.Статья 		= Строка.Статья;
		СтрокаДвижений.Коэффициент 	= Строка.Коэффициент;
	
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуСтатей(РезультатЗапросаПоСтатьям, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаСтатей = РезультатЗапросаПоСтатьям.Выгрузить();
	
	// добавим в таблицу все статьи из нужного набора с нулевым коэффициентом:
	СтатьиПоПроизводству = Справочники.СтатьиНалоговыхДеклараций.ВыбратьИерархически(Справочники.СтатьиНалоговыхДеклараций.НПНК_ПЗ_);
	
	Пока СтатьиПоПроизводству.Следующий() Цикл
		
		ТекСтатья = СтатьиПоПроизводству.Ссылка;
		
		Если ТекСтатья = Справочники.СтатьиНалоговыхДеклараций.НПНК_ПЗ_Пф Тогда
			// собственные полуфабрикаты в производстве не учиытваем
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаСтатей.Найти(ТекСтатья, "Статья") = Неопределено Тогда
			НоваяСтрока = ТаблицаСтатей.Добавить();
			НоваяСтрока.Статья = ТекСтатья;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСтатей;

КонецФункции // ПодготовитьТаблицуСтатей()
  
// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСтатьи(ТаблицаПоСтатьям, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Статьи";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Статья");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Статьи", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверим на отсутствие дублей
	Если Не Отказ Тогда
		
		КоличествоСтрокВТЧ = Статьи.Количество();
		
		Для Уровень1 = 1 По КоличествоСтрокВТЧ Цикл
			
			Если    Статьи[Уровень1- 1].Статья = Справочники.СтатьиНалоговыхДеклараций.НПНК_ПЗ_Пф
				ИЛИ (ЗначениеЗаполнено(Статьи[Уровень1- 1].Статья) И НЕ Статьи[Уровень1- 1].Статья.ПринадлежитЭлементу(Справочники.СтатьиНалоговыхДеклараций.НПНК_ПЗ_))Тогда
				ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru = 'В строке ""¤1¤"" указана статья  ""¤2¤""! Выбирать данную статью в этом докумнте нельзя!'; uk = 'У рядку ""¤1¤""  зазначена статтья ""¤2¤""! Не можна у цьому документі вказувати зазначену статтю!'"), Уровень1, Статьи[Уровень1- 1].Статья), Отказ, Заголовок);	
				Продолжить;	
			КонецЕсли;
			
			Для Уровень2 = Уровень1 + 1 По КоличествоСтрокВТЧ Цикл
				
				Если Статьи[Уровень1- 1].Статья = Статьи[Уровень2- 1].Статья Тогда
				
					ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru = 'В строках ""¤1¤"" и  ""¤2¤"" указаны одинаковые статьи!'; uk = 'У рядках ""¤1¤"" та  ""¤2¤"" зазначені однакові статті!'"), Уровень1, Уровень2), Отказ, Заголовок);	
				
				КонецЕсли;
				
			
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЕсли;
	
	СуммаКоэффициентов = Статьи.Итог("КоэффициентНаКонец");
	
	Если  СуммаКоэффициентов <> 1 Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru = 'Сумма коэффициентов на конец периода в строках не единице!'; uk = 'Сума коефіцієнтів на кінець періода у рядках не дорівнюе одиниці!'"), Уровень1, Уровень2), Отказ);		
	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСтатьям, Отказ, Заголовок) Экспорт
	
	ПогрешностиОкругления     = Новый Соответствие;

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Статья",        "Статья");
	СтруктураПолей.Вставить("Коэффициент",   "КоэффициентНаКонец");
	
	РезультатЗапросаПоСтатьям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Статьи", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоСтатьям = ПодготовитьТаблицуСтатей(РезультатЗапросаПоСтатьям, СтруктураШапкиДокумента, ПогрешностиОкругления);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем ТаблицаПоСтатьям;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСтатьям, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиСтатьи(ТаблицаПоСтатьям, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоСтатьям, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)

	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения
