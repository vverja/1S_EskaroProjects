Перем мУдалятьДвижения;

#Если Клиент Тогда

// Возвращает таблицу с данными, сформированную по настройкам переданного
// элемента справочника "ИсточникиДанныхДляРасчетовБюджетирования"
//
// Параметры
//  ИсточникДанных: Справочник.ИсточникиДанныхДляРасчетовБюджетирования – источник, 
//				   по настройкам которого будут отбираться данные из базы
//
//  ОтборПоИзмерениям: список значений - дополнительный фильтр для источника (по профилю)
//  ИмяИзмерения: строка - имя измерения, на которое накладывается фильтр.
// 
// Возвращаемое значение:
//   ТабИсточника: таблица значений, содержащая данные базы.
//
Функция ПолучитьДанныеИсточника(ИсточникДанных, ОтборПоИзмерениям,ИзмерениеБюджетирования,СтруктураИзмеренийРасчет,СтруктураДанные)
	
	ПостроительОтчета=Новый ПостроительОтчета;
	
	ПостроительОтчета.Текст=СтрЗаменить(ИсточникДанных.ТекстЗапроса,",День,",",,");// Убираем детализацию по периодам
	
	Если ИсточникДанных.ПроизвольныйЗапрос Тогда
		ПостроительОтчета.ЗаполнитьНастройки();
	КонецЕсли;
		
	СохраненнаяНастройка=ИсточникДанных.НастройкиПостроителя.Получить();
	
	Если ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		
		ПостроительОтчета.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
		
		Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
			ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	Для Каждого СтрокаСвязь ИЗ ИсточникДанных.ИзмеренияИсточника Цикл
		ИмяИзмерения=Строка(СтрокаСвязь.ИзмерениеБюджетирования);
		Если СтруктураИзмеренийРасчет.Свойство(ИмяИзмерения) Тогда
			ПостроительОтчета.ВыбранныеПоля.Добавить(СтрокаСвязь.ПутьКДанным,ИмяИзмерения);
		КонецЕсли;
	КонецЦикла;
	
	Если ИсточникДанных.ПроизвольныйЗапрос Тогда
		Если СтруктураДанные.Свойство(КодОсновногоИсточника) Тогда
			Для Каждого Показатель ИЗ СтруктураДанные[КодОсновногоИсточника] Цикл
				ПостроительОтчета.ВыбранныеПоля.Добавить(Показатель.Значение,Показатель.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
			
	Если ТипЗнч(ОтборПоИзмерениям)=Тип("СписокЗначений") И ОтборПоИзмерениям.Количество()>0 Тогда
		
		СтрокаИзмерения=ИсточникДанных.ИзмеренияИсточника.Найти(ИзмерениеБюджетирования,"ИзмерениеБюджетирования");
		Если НЕ СтрокаИзмерения=Неопределено Тогда
			
			НовыйОтбор=ПостроительОтчета.Отбор.Добавить(СтрокаИзмерения.ПутьКДанным);
			НовыйОтбор.ВидСравнения= ВидСравнения.ВСпискеПоИерархии;
			НовыйОтбор.Значение=ОтборПоИзмерениям;
			НовыйОтбор.Использование=Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Граница Из ИсточникДанных.ДатыОтбораДанныхИсточника Цикл
		
		Если Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.ФиксированнаяДата Тогда
			НачальнаяДатаГраницы=Граница.ДатаНачальнойГраницыОтсчета;
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.НачалоПериода Тогда
			НачальнаяДатаГраницы=ОбщегоНазначения.ДатаНачалаПериода(ДатаРасчета,Сценарий.Периодичность);
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
			НачальнаяДатаГраницы=ОбщегоНазначения.ДатаКонцаПериода(ДатаРасчета,Сценарий.Периодичность);
		КонецЕсли;
		
		Если НЕ Граница.СдвигВПериодах=0 Тогда
			
			Если Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
				
				НачальнаяДатаГраницы=КонецДня(ОбщегоНазначения.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах));
				
			Иначе
				
				НачальнаяДатаГраницы=ОбщегоНазначения.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПостроительОтчета.Параметры.Вставить(Граница.ИмяДатаГраницы,НачальнаяДатаГраницы);
		
	КонецЦикла;
	
	ПостроительОтчета.Выполнить();
	ТабИсточника=ПостроительОтчета.Результат.Выгрузить();
			
	Возврат ТабИсточника;
	
КонецФункции // ПолучитьДанныеИсточника()

// Добавляет в текст основного запроса соединение с дополнительным источником
//
// Параметры
// 	ИсточникДанных: обрабатываемый источник данных
//  СтруктураИзмерений: структура, содержащая необходимые измерения бюджетирования
//  СтруктураПараметров: структура, в которую записываются необходимые параметры запроса
//
Процедура ПрисоединитьДополнительныйИсточник(ИсточникДанных,СтруктураИзмерений,СтруктураПараметров,ИмяТаблицы,ТекстИсточника,СтруктураПоказатели)
	
	ПостроительИсточника=Новый ПостроительОтчета;
	
	ТекстЗапроса=СтрЗаменить(ИсточникДанных.ТекстЗапроса,",День,",",,");// Убираем детализацию по периодам
		
	СохраненнаяНастройка=ИсточникДанных.НастройкиПостроителя.Получить();
	
	Если ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		
		Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
			СтруктураПараметров.Вставить(Параметр.Ключ+ИмяТаблицы,Параметр.Значение);
			ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"&"+Параметр.Ключ,"&"+Параметр.Ключ+ИмяТаблицы);
		КонецЦикла;
		
		Для каждого Граница Из ИсточникДанных.ДатыОтбораДанныхИсточника Цикл
			
			Если Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.ФиксированнаяДата Тогда
				НачальнаяДатаГраницы=Граница.ДатаНачальнойГраницыОтсчета;
			ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.НачалоПериода Тогда
				НачальнаяДатаГраницы=ОбщегоНазначения.ДатаНачалаПериода(ДатаРасчета,Сценарий.Периодичность);
			ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
				НачальнаяДатаГраницы=ОбщегоНазначения.ДатаКонцаПериода(ДатаРасчета,Сценарий.Периодичность);
			КонецЕсли;
			
			Если НЕ Граница.СдвигВПериодах=0 Тогда
				
				Если Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
					
					НачальнаяДатаГраницы=КонецДня(ОбщегоНазначения.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах));
					
				Иначе
					
					НачальнаяДатаГраницы=ОбщегоНазначения.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"&"+Граница.ИмяДатаГраницы,"&"+Граница.ИмяДатаГраницы+ИмяТаблицы);
			СтруктураПараметров.Вставить(Граница.ИмяДатаГраницы+ИмяТаблицы,НачальнаяДатаГраницы);
			
		КонецЦикла;
		
		ПостроительИсточника.Текст=ТекстЗапроса;
		
		Если ИсточникДанных.ПроизвольныйЗапрос Тогда
			ПостроительИсточника.ЗаполнитьНастройки();
		КонецЕсли;
		
		ПостроительИсточника.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ПостроительИсточника.ВыбранныеПоля.Очистить();
	ТекстСоединение="";
	
	// Добавим измерения и связи с основным источником
	Для Каждого СтрокаСвязь ИЗ ИсточникДанных.ИзмеренияИсточника Цикл
		
		ИмяИзмерения=Строка(СтрокаСвязь.ИзмерениеБюджетирования);
		
		Если СтруктураИзмерений.Свойство(ИмяИзмерения) Тогда
			ПостроительИсточника.ВыбранныеПоля.Добавить(СтрокаСвязь.ПутьКДанным,ИмяИзмерения);
			ТекстСоединение=ТекстСоединение+" И
			|ОсновнойИсточник."+СтруктураИзмерений[ИмяИзмерения]+"="+ИмяТаблицы+"."+ИмяИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИсточникДанных.ПроизвольныйЗапрос Тогда
		Для Каждого Показатель ИЗ СтруктураПоказатели Цикл
			ПостроительИсточника.ВыбранныеПоля.Добавить(Показатель.Значение,Показатель.Значение);
		КонецЦикла;
	КонецЕсли;
	
	РабочийТекст=ПостроительИсточника.ПолучитьЗапрос().Текст;
	
	// Определим параметры отбора
	
	Индекс=1;
	Для Каждого СтрокаОтбора Из ПостроительИсточника.Отбор Цикл
		
		Если СтрокаОтбора.Использование=Истина Тогда
			
			Если СтрокаОтбора.ЗначениеС=Неопределено ИЛИ (НЕ ЗначениеЗаполнено(СтрокаОтбора.ЗначениеС)) ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.Равно Тогда
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_"+ИмяТаблицы+"_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_"+ИмяТаблицы+"_"+Индекс,СтрокаОтбора.Значение);
				Индекс=Индекс+1;
			Иначе
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_"+ИмяТаблицы+"_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_"+ИмяТаблицы+"_"+Индекс,СтрокаОтбора.ЗначениеС);
				Индекс=Индекс+1;
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_"+ИмяТаблицы+"_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_"+ИмяТаблицы+"_"+Индекс,СтрокаОтбора.ЗначениеПо);
				Индекс=Индекс+1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстИсточника=ТекстИсточника+"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|("+РабочийТекст+") КАК "+ИмяТаблицы;
	
	Если НЕ ТекстСоединение="" Тогда
		
		ТекстИсточника=ТекстИсточника+"
		|ПО "+Сред(ТекстСоединение,3);
		
	Иначе
		
		ТекстИсточника=ТекстИсточника+"
		|ПО ИСТИНА";
		
	КонецЕсли;
	
КонецПроцедуры // ПрисоединитьДополнительныйИсточник()

// Добавляет в текст основного запроса соединение с дополнительным источником
//
// Параметры
// 	ИсточникДанных: обрабатываемый источник данных
//  СтруктураИзмерений: структура, содержащая необходимые измерения бюджетирования
//  СтруктураПараметров: структура, в которую записываются необходимые параметры запроса
//
Процедура ПрисоединитьДополнительнуюОперацию(ИсточникДанных,СтруктураИзмерений,СтруктураПараметров,ИмяТаблицы,ТекстИсточника)
		
	ТекстЗапроса="
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ";
	
	ТекстСоединение="";
	
	Для Каждого СтрокаСвязь ИЗ СтруктураИзмерений Цикл
		
		ТекстЗапроса=ТекстЗапроса+"
		|БюджетнаяОперация."+?(СтрокаСвязь.Ключ="Валюта","ВалютаДокумента",СтрокаСвязь.Ключ)+" КАК "+СтрокаСвязь.Ключ+",";
		
		ТекстСоединение=ТекстСоединение+" И
		|ОсновнойИсточник."+СтрокаСвязь.Значение+"="+ИмяТаблицы+"."+СтрокаСвязь.Ключ;
		
	КонецЦикла;
	
	ТекстЗапроса=ТекстЗапроса+"
	|	БюджетнаяОперация.Количество КАК БюджетнаяОперацияКоличество,
	|	БюджетнаяОперация.Сумма КАК БюджетнаяОперацияСумма
	|ИЗ
	|	Документ.БюджетнаяОперация КАК БюджетнаяОперация
	|
	|ГДЕ
	|	БюджетнаяОперация.Ссылка = &Параметр_"+ИмяТаблицы+") КАК "+ИмяТаблицы;

    СтруктураПараметров.Вставить("Параметр_"+ИмяТаблицы,ИсточникДанных);
	
	Если НЕ ТекстСоединение="" Тогда
		
		ТекстИсточника=ТекстИсточника+ТекстЗапроса+"
		|ПО "+Сред(ТекстСоединение,3);
		
	Иначе
		
		ТекстИсточника=ТекстИсточника+ТекстЗапроса+"
		|ПО ИСТИНА";
			
	КонецЕсли;
			
КонецПроцедуры // ПрисоединитьДополнительнуюОперацию()

// Возвращает таблицу с данными, сформированную по настройкам таблицы "Источники данных"
//
Функция ПолучитьДанныеДляРасчетаПоОперации(СтруктураДанные,СтруктураИзмеренийРасчет)
	
	СтруктураПараметров=Новый Структура;
	СтруктураИзмерений=Новый Структура;
	
	ТекстРасчет="ВЫБРАТЬ";
	
	Для Каждого СтрокаСвязь ИЗ СтруктураИзмеренийРасчет Цикл
		
		ТекстРасчет=ТекстРасчет+"
		|ОсновнойИсточник."+?(СтрокаСвязь.Ключ="Валюта","ВалютаДокумента",СтрокаСвязь.Ключ)+" КАК "+СтрокаСвязь.Ключ+",";
		
		СтруктураИзмерений.Вставить(СтрокаСвязь.Ключ,?(СтрокаСвязь.Ключ="Валюта","ВалютаДокумента",СтрокаСвязь.Ключ));
		
	КонецЦикла;
	
	ТекстРасчет=ТекстРасчет+"
	|	ОсновнойИсточник.Количество КАК БюджетнаяОперацияКоличество,
	|	ОсновнойИсточник.Сумма КАК БюджетнаяОперацияСумма";
	
	ТекстИсточник="
	|ИЗ
	|	Документ.БюджетнаяОперация КАК ОсновнойИсточник";
	
	ТекстУсловие="
	|ГДЕ
	|	ОсновнойИсточник.Ссылка = &Параметр_ОсновнойИсточник";

    СтруктураПараметров.Вставить("Параметр_ОсновнойИсточник",ОсновнойИсточникДанных);
	
	ТекстДополнение="";
	ТекстСоединение="";
	
	Для Каждого Аргумент ИЗ СтруктураДанные Цикл
		
		Если Не Аргумент.Ключ=КодОсновногоИсточника Тогда
			
			СтрокаИсточник=ДополнительныеИсточникиДанных.Найти(Аргумент.Ключ,"КодИсточника");
			
			Если ТипЗнч(СтрокаИсточник.ИсточникДанных)=Тип("СправочникСсылка.ИсточникиДанныхДляРасчетовБюджетирования") Тогда
				
				ПрисоединитьДополнительныйИсточник(СтрокаИсточник.ИсточникДанных,СтруктураИзмерений,СтруктураПараметров,Аргумент.Ключ,ТекстСоединение,Аргумент.Значение);
				
			ИначеЕсли ТипЗнч(СтрокаИсточник.ИсточникДанных)=Тип("ДокументСсылка.БюджетнаяОперация") Тогда
				
				ПрисоединитьДополнительнуюОперацию(СтрокаИсточник.ИсточникДанных,СтруктураИзмерений,СтруктураПараметров,Аргумент.Ключ,ТекстСоединение);
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
				
			Для Каждого Показатель ИЗ Аргумент.Значение Цикл
				
				ТекстДополнение=ТекстДополнение+",
				|ВЫБОР
				|	КОГДА НЕ "+Аргумент.Ключ+"."+Показатель.Значение+" ЕСТЬ NULL 
				|	ТОГДА "+Аргумент.Ключ+"."+Показатель.Значение+"
				|	ИНАЧЕ 0 КОНЕЦ КАК "+Показатель.Ключ;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого Показатель ИЗ Аргумент.Значение Цикл
				
				ТекстРасчет=СтрЗаменить(ТекстРасчет,"КАК "+Показатель.Значение,"КАК "+Показатель.Ключ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТекстДополнение="" Тогда
	
		ТекстРасчет=ТекстРасчет+",
		|"+Сред(ТекстДополнение,2);
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст=ТекстРасчет+ТекстИсточник+ТекстСоединение+ТекстУсловие;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
	КонецЦикла;
	
	ТабРезультат=Запрос.Выполнить().Выгрузить();
	
	Возврат ТабРезультат;
			
КонецФункции // ПолучитьДанныеДляРасчетаПоОперации()

// Формирует таблицу для расчета в случае, когда основной источник не указан
// (таблица формируется на основании дополнительных источников)
// Параметры:
//	СтруктураДанные: структура, ключом которой служит код источника, а значением - структура, содержащая показатели источника,
//	использующиеся в формулах строки.
//
Функция ПолучитьДанныеДляРасчетаПоДополнительнымИсточникам(СтруктураДанные)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));
	
	// В таблицу будем записывать результаты запросов по источникам
	ТаблицаРасчета=Новый ТаблицаЗначений;
	
	Для Каждого СтрокаПоказатели ИЗ Показатели Цикл
		
		Если (НЕ СтрокаПоказатели.КодИсточника="") И СтруктураДанные.Свойство(СтрокаПоказатели.КодИсточника) Тогда
			ТаблицаРасчета.Колонки.Добавить(СтрокаПоказатели.Код,ОписаниеТиповЧисло);
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДанные=ТаблицаРасчета.Добавить();
	
	Для Каждого ГруппаПоказателей ИЗ СтруктураДанные Цикл
		
		СтрокаИсточник=ДополнительныеИсточникиДанных.Найти(ГруппаПоказателей.Ключ,"КодИсточника");
		
		Если Не СтрокаИсточник=Неопределено Тогда
			
			Если ТипЗнч(СтрокаИсточник.ИсточникДанных)=Тип("СправочникСсылка.ИсточникиДанныхДляРасчетовБюджетирования") Тогда
				
				ТабИсходныеДанные = ПолучитьДанныеИсточника(СтрокаИсточник.ИсточникДанных,,,Новый Структура,);
				
			ИначеЕсли ТипЗнч(СтрокаИсточник.ИсточникДанных)=Тип("ДокументСсылка.БюджетнаяОперация") Тогда
				
				Запрос=Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ
				|	БюджетнаяОперация.Количество КАК БюджетнаяОперацияКоличество,
				|	БюджетнаяОперация.Сумма КАК БюджетнаяОперацияСумма
				|ИЗ
				|	Документ.БюджетнаяОперация КАК БюджетнаяОперация
				|
				|ГДЕ
				|	БюджетнаяОперация.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка",СтрокаИсточник.ИсточникДанных);
				ТабИсходныеДанные=Запрос.Выполнить().Выгрузить();
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			Если ТабИсходныеДанные.Количество()>0 Тогда
				
				Для Каждого Показатель ИЗ ГруппаПоказателей.Значение Цикл
					
					СтрокаДанные[Показатель.Ключ]=ТабИсходныеДанные[0][Показатель.Значение];
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРасчета;
	
КонецФункции // ПолучитьДанныеДляРасчетаПоДополнительнымИсточникам()

// Анализирует формульную строку и определяет показатели и источники данных, необходимые для расчета
// Параметры
//	СтруктураДанных: структура, ключом которой является код источника, а значением - структура, содержащая показатели
//	источника, используемые в расчетах.
// 
Процедура ПолучитьСтруктуруДанных(СтруктураДанных,СтрокаФормула);
	
	КоличествоСимволов=СтрДлина(СтрокаФормула);

	Если КоличествоСимволов>0 Тогда

		ТекстАргумент="";
		НачалоАргумент=Ложь;

		Для Индекс=1 По КоличествоСимволов Цикл

			ТекСимвол=Сред(СтрокаФормула,Индекс,1);

			Если ТекСимвол="[" Тогда  // Формируем текст аргумента расчета
				
				НачалоАргумент=Истина;

			ИначеЕсли ТекСимвол="]" Тогда // Устанавливаем текст аргумента расчета

				СтрокаАргумент=Показатели.Найти(ТекстАргумент,"Код");
				
				Если Не СтрокаАргумент=Неопределено Тогда
					
					//Проверяем наличие источника в структуре данных
					
					Если СтрокаАргумент.КодИсточника="" Тогда	
						НачалоАргумент=Ложь;
						ТекстАргумент="";
						Продолжить;
					КонецЕсли;
					
					Если СтруктураДанных.Свойство(СтрокаАргумент.КодИсточника) Тогда
						
						СтруктураПоказатели=СтруктураДанных[СтрокаАргумент.КодИсточника];
						
						Если НЕ СтруктураПоказатели.Свойство(ТекстАргумент) Тогда
							
							СтруктураПоказатели.Вставить(ТекстАргумент,СтрокаАргумент.Имя);
							
						КонецЕсли;
						
					Иначе
						
						СтруктураПоказатели=Новый Структура;
						СтруктураПоказатели.Вставить(ТекстАргумент,СтрокаАргумент.Имя);
						
						СтруктураДанных.Вставить(СтрокаАргумент.КодИсточника,СтруктураПоказатели);
						
					КонецЕсли;
					
				КонецЕсли;						
				
                НачалоАргумент=Ложь;
				ТекстАргумент="";

			Иначе
				
				Если НачалоАргумент Тогда
					ТекстАргумент=ТекстАргумент+ТекСимвол;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСтруктуруДанных()

// Возвращает таблицу с данными, сформированную по настройкам таблицы "Источники данных"
//
Функция ПолучитьДанныеДляРасчетаПоИсточнику(СтруктураДанные,СтруктураИзмеренийРасчет)
		 	
	ПостроительОтчета=Новый ПостроительОтчета;
	СтруктураПараметров=Новый Структура;
	
	ТекстЗапроса=СтрЗаменить(ОсновнойИсточникДанных.ТекстЗапроса,",День,",",,");// Убираем детализацию по периодам
	
	СохраненнаяНастройка=ОсновнойИсточникДанных.НастройкиПостроителя.Получить();
	
	Если ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		
		Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
			СтруктураПараметров.Вставить(Параметр.Ключ+"ОсновнойИсточник",Параметр.Значение);
			ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"&"+Параметр.Ключ,"&"+Параметр.Ключ+"ОсновнойИсточник");
		КонецЦикла;
		
		Для каждого Граница Из ОсновнойИсточникДанных.ДатыОтбораДанныхИсточника Цикл
			
			Если Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.ФиксированнаяДата Тогда
				НачальнаяДатаГраницы=Граница.ДатаНачальнойГраницыОтсчета;
			ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.НачалоПериода Тогда
				НачальнаяДатаГраницы=ОбщегоНазначения.ДатаНачалаПериода(ДатаРасчета,Сценарий.Периодичность);
			ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
				НачальнаяДатаГраницы=ОбщегоНазначения.ДатаКонцаПериода(ДатаРасчета,Сценарий.Периодичность);
			КонецЕсли;
			
			Если НЕ Граница.СдвигВПериодах=0 Тогда
				
				Если Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
					
					НачальнаяДатаГраницы=КонецДня(ОбщегоНазначения.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах));
					
				Иначе
					
					НачальнаяДатаГраницы=ОбщегоНазначения.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"&"+Граница.ИмяДатаГраницы,"&"+Граница.ИмяДатаГраницы+"ОсновнойИсточник");
			СтруктураПараметров.Вставить(Граница.ИмяДатаГраницы+"ОсновнойИсточник",НачальнаяДатаГраницы);
			
		КонецЦикла;
		
		ПостроительОтчета.Текст=ТекстЗапроса;
		ПостроительОтчета.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
	Иначе
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;

	ПостроительОтчета.ВыбранныеПоля.Очистить();
	СтруктураИзмерений=Новый Структура;
	
	Для Каждого СтрокаСвязь ИЗ ОсновнойИсточникДанных.ИзмеренияИсточника Цикл
		ИмяИзмерения=Строка(СтрокаСвязь.ИзмерениеБюджетирования);
		Если СтруктураИзмеренийРасчет.Свойство(ИмяИзмерения) Тогда
			ПостроительОтчета.ВыбранныеПоля.Добавить(СтрокаСвязь.ПутьКДанным,ИмяИзмерения);
			СтруктураИзмерений.Вставить(ИмяИзмерения,СтрокаСвязь.ПутьКДанным);
		КонецЕсли;
	КонецЦикла;
	
	РабочийТекст=ПостроительОтчета.ПолучитьЗапрос().Текст;

	// Определим параметры отбора
	Индекс=1;
	Для Каждого СтрокаОтбора Из ПостроительОтчета.Отбор Цикл
		
		Если СтрокаОтбора.Использование=Истина Тогда
			
			Если СтрокаОтбора.ЗначениеС=Неопределено ИЛИ (НЕ ЗначениеЗаполнено(СтрокаОтбора.ЗначениеС)) ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.Равно  Тогда
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_ОсновнойИсточник_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_ОсновнойИсточник_"+Индекс,СтрокаОтбора.Значение);
				Индекс=Индекс+1;
			Иначе
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_ОсновнойИсточник_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_ОсновнойИсточник_"+Индекс,СтрокаОтбора.ЗначениеС);
				Индекс=Индекс+1;
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_ОсновнойИсточник_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_ОсновнойИсточник_"+Индекс,СтрокаОтбора.ЗначениеПо);
				Индекс=Индекс+1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Разбираем текст запроса по секциям
	
	ТекущийТекст=Новый ТекстовыйДокумент;
	ТекущийТекст.УстановитьТекст(РабочийТекст);
	
	ТекстРасчет="";
	ТекстУсловие="";
	ТекстИсточник="";
	ТекстГруппировка="";
	
	ЕстьУсловие=Ложь;
	ЕстьИсточник=Ложь;
	ЕстьГруппировка=Ложь;
	
	Для Индекс=1 По ТекущийТекст.КоличествоСтрок() Цикл
		
		СтрокаЗапроса=ТекущийТекст.ПолучитьСтроку(Индекс);
		
		Если Врег(СокрЛП(СтрокаЗапроса))="ИЗ" Тогда
			ЕстьИсточник=Истина;
		ИначеЕсли Врег(СокрЛП(СтрокаЗапроса))="ГДЕ" Тогда
			ЕстьУсловие=Истина;
			ЕстьИсточник=Ложь;
		ИначеЕсли Врег(СокрЛП(СтрокаЗапроса))="СГРУППИРОВАТЬ ПО" Тогда
			ЕстьГруппировка=Истина;
			ЕстьУсловие=Ложь;
			ЕстьИсточник=Ложь;
		КонецЕсли;
		
		Если ЕстьИсточник Тогда
			ТекстИсточник=ТекстИсточник+"
			|"+СтрокаЗапроса;
		ИначеЕсли ЕстьУсловие Тогда
			ТекстУсловие=ТекстУсловие+"
			|"+СтрокаЗапроса;
		ИначеЕсли ЕстьГруппировка Тогда
			ТекстГруппировка=ТекстГруппировка+"
			|"+СтрокаЗапроса;
		Иначе
			ТекстРасчет=ТекстРасчет+"
			|"+СтрокаЗапроса;
		КонецЕсли;	
			
	КонецЦикла;
				
	ТекстДополнение="";
	ТекстСоединение="";
	
	Для Каждого Аргумент ИЗ СтруктураДанные Цикл
		
		Если Не Аргумент.Ключ=КодОсновногоИсточника Тогда
			
			СтрокаИсточник=ДополнительныеИсточникиДанных.Найти(Аргумент.Ключ,"КодИсточника");
			
			Если ТипЗнч(СтрокаИсточник.ИсточникДанных)=Тип("СправочникСсылка.ИсточникиДанныхДляРасчетовБюджетирования") Тогда
				
				ПрисоединитьДополнительныйИсточник(СтрокаИсточник.ИсточникДанных,СтруктураИзмерений,СтруктураПараметров,Аргумент.Ключ,ТекстСоединение,Аргумент.Значение);
				
			ИначеЕсли ТипЗнч(СтрокаИсточник.ИсточникДанных)=Тип("ДокументСсылка.БюджетнаяОперация") Тогда
				
				ПрисоединитьДополнительнуюОперацию(СтрокаИсточник.ИсточникДанных,СтруктураИзмерений,СтруктураПараметров,Аргумент.Ключ,ТекстСоединение);
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
				
			Для Каждого Показатель ИЗ Аргумент.Значение Цикл
				
				ТекстДополнение=ТекстДополнение+",
				|СУММА(ВЫБОР
				|		КОГДА НЕ "+Аргумент.Ключ+"."+Показатель.Значение+" ЕСТЬ NULL 
				|		ТОГДА "+Аргумент.Ключ+"."+Показатель.Значение+"
				|		ИНАЧЕ 0 КОНЕЦ) КАК "+Показатель.Ключ;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого Показатель ИЗ Аргумент.Значение Цикл
				
				ТекстРасчет=СтрЗаменить(ТекстРасчет,"КАК "+Показатель.Значение,"КАК "+Показатель.Ключ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТекстДополнение="" Тогда
	
		ТекстРасчет=ТекстРасчет+",
		|"+Сред(ТекстДополнение,2);
		
	КонецЕсли;
		
	ТекстРасчет=СтрЗаменить(ТекстРасчет,"ТаблицаРегистра","ОсновнойИсточник");
	ТекстИсточник=СтрЗаменить(ТекстИсточник,"ТаблицаРегистра","ОсновнойИсточник");
    ТекстУсловие=СтрЗаменить(ТекстУсловие,"ТаблицаРегистра","ОсновнойИсточник");
	ТекстГруппировка=СтрЗаменить(ТекстГруппировка,"ТаблицаРегистра","ОсновнойИсточник");
	
	Запрос=Новый Запрос;
	Запрос.Текст=ТекстРасчет+ТекстИсточник+ТекстСоединение+ТекстУсловие+ТекстГруппировка;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
	КонецЦикла;
	
	ТабРезультат=Запрос.Выполнить().Выгрузить();
	
	Возврат ТабРезультат;
			
КонецФункции // ПолучитьДанныеДляРасчетаПоИсточнику()

// Формирует таблицу бюджетных операций на основании реквизитов документа
//
// Параметры: нет
//
Процедура ВыполнитьРасчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаРасчета) Тогда
		Сообщить("Не указана дата расчета!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодОсновногоИсточника) Тогда // Данные, введенные вручную
		КодОсновногоИсточника="РучнойВвод";
	КонецЕсли;
			
	БюджетныеОперации.Очистить();
	
	Для Каждого СтрокаРасчет ИЗ ОборотыПоСтатьямБюджетов Цикл
		
		НомерСтрокиРасчет=ОборотыПоСтатьямБюджетов.Индекс(СтрокаРасчет)+1;
		
		Если СтрокаРасчет.СтатьяОборотов.Пустая() Тогда
			Сообщить("В строке расчета "+НомерСтрокиРасчет+" не указана статья оборотов!");
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРасчет.ВидИзмененияПоВалюте=Перечисления.ВидыИзмененияПлановПоИзмерениям.ФиксированноеЗначение 
			И НЕ ЗначениеЗаполнено(СтрокаРасчет.ЗначениеИзмененияПоВалюте) Тогда
			Сообщить("В строке расчета "+НомерСтрокиРасчет+" не указана валюта транзакции!");
			Продолжить;
		КонецЕсли;
		
		// Формируем структуру необходимых для расчета измерений бюджетирования
		СтруктураИзмеренийРасчет=Новый Структура;
		Если СтрокаРасчет.ВидИзмененияПоЦфО=Перечисления.ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета Тогда
			СтруктураИзмеренийРасчет.Вставить("ЦФО");
		КонецЕсли;
		
		Если СтрокаРасчет.ВидИзмененияПоПроектам=Перечисления.ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета Тогда
			СтруктураИзмеренийРасчет.Вставить("Проект");
		КонецЕсли;
		
		Если СтрокаРасчет.ВидИзмененияПоКонтрагентам=Перечисления.ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета Тогда
			СтруктураИзмеренийРасчет.Вставить("Контрагент");
		КонецЕсли;
		
		Если СтрокаРасчет.ВидИзмененияПоНоменклатуре=Перечисления.ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета Тогда
			СтруктураИзмеренийРасчет.Вставить("Номенклатура");
		КонецЕсли;
		
		Если СтрокаРасчет.ВидИзмененияПоВалюте=Перечисления.ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета Тогда
			СтруктураИзмеренийРасчет.Вставить("Валюта");
		КонецЕсли;
		
		//Формируем структуру данных для расчета	
		СтруктураДанные=Новый Структура;
		ПолучитьСтруктуруДанных(СтруктураДанные,СтрокаРасчет.ФормулаКоличество);
		ПолучитьСтруктуруДанных(СтруктураДанные,СтрокаРасчет.ФормулаСумма);
		
		Если ОсновнойИсточникДанных=Неопределено ИЛИ ОсновнойИсточникДанных.Пустая() Тогда
			
			  ТаблицаРасчета=ПолучитьДанныеДляРасчетаПоДополнительнымИсточникам(СтруктураДанные);
		
		ИначеЕсли ТипЗнч(ОсновнойИсточникДанных)=Тип("СправочникСсылка.ИсточникиДанныхДляРасчетовБюджетирования") Тогда
			
			Если ОсновнойИсточникДанных.ПроизвольныйЗапрос Тогда
				
				ТаблицаРасчета=ПолучитьДанныеИсточника(ОсновнойИсточникДанных,,,СтруктураИзмеренийРасчет,СтруктураДанные);
				Если СтруктураДанные.Свойство(КодОсновногоИсточника) Тогда
					Для Каждого Показатель ИЗ СтруктураДанные[КодОсновногоИсточника] Цикл
						ТаблицаРасчета.Колонки[Показатель.Значение].Имя=Показатель.Ключ;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого СтрокаИзмерениеРасчет ИЗ СтруктураИзмеренийРасчет Цикл
					
					Если ТаблицаРасчета.Колонки.Найти(СтрокаИзмерениеРасчет.Ключ)=Неопределено Тогда
						
						НайденоИзмерение=Ложь;
						
						Для Каждого СтрокаИзмерение ИЗ ОсновнойИсточникДанных.ИзмеренияИсточника Цикл
							Если Строка(СтрокаИзмерение.ИзмерениеБюджетирования)= СтрокаИзмерениеРасчет.Ключ И 
								(НЕ ТаблицаРасчета.Колонки.Найти(СтрокаИзмерение.ИмяПоляИсточника)=Неопределено) Тогда
								
								ТаблицаРасчета.Колонки[СтрокаИзмерение.ИмяПоляИсточника].Имя=СтрокаИзмерениеРасчет.Ключ;
								НайденоИзмерение=Истина;
								
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если Не НайденоИзмерение Тогда
							Сообщить("Строка "+НомерСтрокиРасчет+" в таблице источника не найдено измерение "+СтрокаИзмерениеРасчет.Ключ);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ТаблицаРасчета=ПолучитьДанныеДляРасчетаПоИсточнику(СтруктураДанные,СтруктураИзмеренийРасчет);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОсновнойИсточникДанных)=Тип("ДокументСсылка.БюджетнаяОперация") Тогда
			
			ТаблицаРасчета=ПолучитьДанныеДляРасчетаПоОперации(СтруктураДанные,СтруктураИзмеренийРасчет);
			
		КонецЕсли;
		
		СформироватьОперации(СтрокаРасчет,ТаблицаРасчета,НомерСтрокиРасчет, СтруктураИзмеренийРасчет);
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьРасчет()

// Дополняет таблицу операций строками, рассчитанными по профилям изменений по измерениям
//
// Параметры
//  ТабОперации: 		таблица значений  – формируемая таблица операций
//  ВидИзменения: 		Перечисления.ВидыИзмененияПлановПоИзмерениям - вид изменения по профилю 
//  ЗначениеИзменения: 	СправочникСсылка.ПрофилиИзмененияПлановПоИзмерениям - настроенные правила распределения
//  ИмяКолонки: 		Строка - имя колонки таблицы операций, для которой настраивается аналитика
//  НомерСтроки:		Число - номер строки ТЧ "ОборотыПоСтатьямБюджетов"
//  ИзмерениеБюджетирования: Перечисление.ИзмеренияБюджетирования - измерение, по которому выполняется распределение 
//
Процедура ИзмеренияПоПрофилю(ТабОперации,ВидИзменения,ЗначениеИзменения,ИзмерениеБюджетирования,НомерСтроки)
	
	ИмяКолонки=Строка(ИзмерениеБюджетирования);
	КопияТабОперации=ТабОперации.Скопировать();
	
	// Колонки, которые не должны копироваться из обрабатываемой строки
	СтруктураИсключаемыхКолонок=Новый Структура;
	СтруктураИсключаемыхКолонок.Вставить(ИмяКолонки);
	СтруктураИсключаемыхКолонок.Вставить("Количество");
	СтруктураИсключаемыхКолонок.Вставить("Сумма");
	СтруктураИсключаемыхКолонок.Вставить("НомерСтроки");
	
	ЕстьРаспределение=Ложь;
	
	Если (ВидИзменения=Перечисления.ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Распределение
		ИЛИ ВидИзменения=Перечисления.ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Умножение) Тогда
		
		Если (НЕ (ТипЗнч(ЗначениеИзменения)=Тип("СправочникСсылка.ПрофилиИзмененияПлановПоИзмерениям")))
			ИЛИ (НЕ ЗначениеИзменения.ИзмерениеБюджетирования=ИзмерениеБюджетирования) Тогда
			Сообщить("Некорректно указан профиль изменения по измерениям");
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеИзменения) Тогда
			
			Для каждого ТекущаяОперация Из КопияТабОперации Цикл
				
				Если ЗначениеИзменения.ВидРаспределения=Перечисления.ВидыРаспределенийПоИзмерениямБюджетирования.Фиксированное Тогда
					
					Для каждого Элемент Из ЗначениеИзменения.ЭлементыДляРаспределения Цикл
						
						ЕстьРаспределение=Истина;
						
						НоваяОперация=ТабОперации.Добавить();
						
						Для каждого Колонка Из ТабОперации.Колонки Цикл
							
							Если НЕ СтруктураИсключаемыхКолонок.Свойство(Колонка.Имя) Тогда			
								НоваяОперация[Колонка.Имя] = ТекущаяОперация[Колонка.Имя];
							КонецЕсли;
							
						КонецЦикла;
						
						НоваяОперация[ИмяКолонки]	= Элемент.ЭлементУправленческойАналитики;
						НоваяОперация.Количество	= ТекущаяОперация.Количество*Элемент.ПроцентДляРаспределения/100;
						НоваяОперация.Сумма			= ТекущаяОперация.Сумма*Элемент.ПроцентДляРаспределения/100;
						
					КонецЦикла;
					
				Иначе
					
					ПоказательРаспределения=ЗначениеИзменения.ПоказательИсточника;
					
					Если НЕ ЗначениеИзменения.ПоВсемЭлементам Тогда
						
						СписокФильтра=Новый СписокЗначений;
						СписокФильтра.ЗагрузитьЗначения(ЗначениеИзменения.ЭлементыДляРаспределения.ВыгрузитьКолонку("ЭлементУправленческойАналитики"));
						
					КонецЕсли;
					
					// Структура выбранных полей источника
					СтруктураИзмеренийРасчет=Новый Структура;
					СтруктураИзмеренийРасчет.Вставить(ИмяКолонки,ИмяКолонки);
					
					СтруктураПоказатели=Новый Структура;
					СтруктураПоказатели.Вставить(ПоказательРаспределения,ПоказательРаспределения);
					
					СтруктураДанные=Новый Структура;
					СтруктураДанные.Вставить(КодОсновногоИсточника,СтруктураПоказатели);
					
					ТабДляРаспределения = ПолучитьДанныеИсточника(ЗначениеИзменения.ИсточникДанных, СписокФильтра,ИзмерениеБюджетирования, СтруктураИзмеренийРасчет,СтруктураДанные);
					
					Если ТипЗнч(ТабДляРаспределения) <> Тип("ТаблицаЗначений") Тогда
						Возврат;
					КонецЕсли; 
					
					Если ТабДляРаспределения.Колонки.Найти(ИмяКолонки)=Неопределено Тогда
						
						НайденоИзмерение=Ложь;
						
						Для Каждого СтрокаИзмерение ИЗ ЗначениеИзменения.ИсточникДанных.ИзмеренияИсточника Цикл
							Если Строка(СтрокаИзмерение.ИзмерениеБюджетирования)= ИмяКолонки И 
								(НЕ ТабДляРаспределения.Колонки.Найти(СтрокаИзмерение.ИмяПоляИсточника)=Неопределено) Тогда
								
								ТабДляРаспределения.Колонки[СтрокаИзмерение.ИмяПоляИсточника].Имя=ИмяКолонки;
								НайденоИзмерение=Истина;
								
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ТабДляРаспределения.Колонки.Найти(ПоказательРаспределения)=Неопределено ИЛИ Не НайденоИзмерение   Тогда 
												
						Сообщить("Проверьте настройку профиля "+ЗначениеИзменения);
						Возврат;
						
						КонецЕсли;
						
					КонецЕсли;					
					
					СуммаВсего=ТабДляРаспределения.Итог(ПоказательРаспределения);
					
					Для каждого СтрокаДанных Из ТабДляРаспределения Цикл
						
						ЕстьРаспределение=Истина;
						
						НоваяОперация=ТабОперации.Добавить();
						
						Для каждого Колонка Из ТабОперации.Колонки Цикл
							
							Если НЕ СтруктураИсключаемыхКолонок.Свойство(Колонка.Имя) Тогда			
								НоваяОперация[Колонка.Имя] = ТекущаяОперация[Колонка.Имя];
							КонецЕсли;
							
						КонецЦикла;
						
						Если ВидИзменения=Перечисления.ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Умножение Тогда
							
							Коэффициент=СтрокаДанных[ПоказательРаспределения];
							
						Иначе
							
							Если СуммаВсего<>0 Тогда
								
								Коэффициент=СтрокаДанных[ПоказательРаспределения]/СуммаВсего;
								
							Иначе
								
								Коэффициент=0;
								
							КонецЕсли;
							
						КонецЕсли;
						
						НоваяОперация[ИмяКолонки]	= СтрокаДанных[ИмяКолонки];
						НоваяОперация.Количество	= ТекущаяОперация.Количество*Коэффициент;
						НоваяОперация.Сумма			= ТекущаяОперация.Сумма*Коэффициент;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ЕстьРаспределение Тогда
					
					ТабОперации.Удалить(0); //Строка таблицы операций, по которой строится распределение,
					//всегда первая.
					
				КонецЕсли;
				
			КонецЦикла;		
			
		Иначе
			
			Сообщить("Строка "+НомерСтроки+": не указан профиль изменения. Операция не выполнена!");
			Возврат;
			
		КонецЕсли;
		
		Если НЕ ЕстьРаспределение Тогда
			Сообщить("Для измерения "+Строка(ИзмерениеБюджетирования)+": распределение не произведено");
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ИзмеренияПоПрофилю()

// Дополняет таблицу операций строками, рассчитанными по профилям изменений по периодам
//
// Параметры
//  ТабОперации: 		таблица значений  – формируемая таблица операций 
//  ЗначениеИзменения: 	СправочникСсылка.ПрофилиИзмененияПлановПоПериодам - настроенные правила распределения
//                      по периодам
//
Процедура ПериодыПоПрофилю(ТабОперации,ЗначениеИзменения)
	
	ПериодСмещения=ЗначениеИзменения.ПериодСмещения;
	ПериодПланирования=Сценарий.Периодичность;
	КопияТабОперации=ТабОперации.Скопировать();	
	
	Для каждого ТекущаяОперация Из КопияТабОперации Цикл
		
		Для каждого Элемент Из ЗначениеИзменения.ПрофильИзменения Цикл
			
			НоваяОперация=ТабОперации.Добавить();
			
			НоваяОперация.СтатьяОборотов=ТекущаяОперация.СтатьяОборотов;
			НоваяОперация.Валюта=ТекущаяОперация.Валюта;
			НоваяОперация.ЦФО=ТекущаяОперация.ЦФО;
			НоваяОперация.Проект=ТекущаяОперация.Проект;
			НоваяОперация.Контрагент=ТекущаяОперация.Контрагент;
            НоваяОперация.Номенклатура=ТекущаяОперация.Номенклатура;
						
			НоваяОперация.Период	= ОбщегоНазначения.ДатаНачалаПериода(ОбщегоНазначения.ДобавитьИнтервал(ТекущаяОперация.Период,ПериодСмещения,Элемент.НомерПериода),ПериодПланирования);
			НоваяОперация.Количество			= ТекущаяОперация.Количество*Элемент.Коэффициент;
			НоваяОперация.Сумма					= ТекущаяОперация.Сумма*Элемент.Коэффициент;
			
		КонецЦикла;
		
		ТабОперации.Удалить(0); //Строка таблицы операций, по которой строится распределение,
								//всегда первая.
		
	КонецЦикла;
	
КонецПроцедуры // ПериодыПоПрофилю() 

// Дополняет таблицу операций рекурсивно зависимыми от статьи в строке,
// переданной в качестве параметра.
//
// Параметры
//  СтрокаОперации: строка таблицы значений – строка таблицы операций, для которой подбираются зависимости
//  ТабОперации: 	таблица значений  – формируемая таблица операций
//  НомерСтроки:    число - номер строки таблицы операций, для которой подбираются зависимости
//
Процедура ЗаполнитьЗависимымиОборотами(ТабОперации, СтрокаОперации, НомерСтроки)
	
	ПустойСценарий=Новый(Тип("СправочникСсылка.СценарииПланирования"));
	ПустойЦФО=Новый(Тип("СправочникСсылка.Подразделения"));
	ПустойПроект=Новый(Тип("СправочникСсылка.Проекты"));
	ПустойКонтрагент=Новый(Тип("СправочникСсылка.Контрагенты"));
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ЗависимостиОборотовПоСтатьям.ЗависимаяСтатьяОборотов КАК ЗависимаяСтатьяОборотов,
	|	ЗависимостиОборотовПоСтатьям.ЗависимаяСтатьяОборотов.УчетПоКоличеству КАК УчетПоКоличеству,
	|	ЗависимостиОборотовПоСтатьям.ЗависимаяСтатьяОборотов.УчетПоСумме КАК УчетПоСумме,
	|	ЗависимостиОборотовПоСтатьям.ЗависимаяСтатьяОборотов.РазделениеПоКонтрагентам КАК РазделениеПоКонтрагентам,
	|	ЗависимостиОборотовПоСтатьям.ЗависимаяСтатьяОборотов.РазделениеПоНоменклатуре КАК РазделениеПоНоменклатуре,
	|	ЗависимостиОборотовПоСтатьям.ЗависимаяНоменклатура КАК ЗависимаяНоменклатура,
	|	ЗависимостиОборотовПоСтатьям.ЗависимыйКонтрагент КАК ЗависимыйКонтрагент,
	|	ЗависимостиОборотовПоСтатьям.ЗависимыйПроект КАК ЗависимыйПроект,
	|	ЗависимостиОборотовПоСтатьям.ЗависимыйЦФО КАК ЗависимыйЦФО,
	|	ЗависимостиОборотовПоСтатьям.КоэффициентДляРасчетаКоличества КАК КоэффициентДляРасчетаКоличества,
	|	ЗависимостиОборотовПоСтатьям.КоэффициентДляРасчетаСуммы КАК КоэффициентДляРасчетаСуммы,
	|	ЗависимостиОборотовПоСтатьям.РеквизитВлияющейСтатьиДляРасчетаКоличества КАК РеквизитВлияющейСтатьиДляРасчетаКоличества,
	|	ЗависимостиОборотовПоСтатьям.РеквизитВлияющейСтатьиДляРасчетаСуммы КАК РеквизитВлияющейСтатьиДляРасчетаСуммы,
	|	ЗависимостиОборотовПоСтатьям.ЗначениеИзмененияПоПериодам КАК ЗначениеИзмененияПоПериодам
	|ИЗ
	|	РегистрСведений.ЗависимостиОборотовПоСтатьямБюджетирования.СрезПоследних(&ДатаДвижения, (ИсхСтатьяОборотов = &Статья)
	|					И ((ИсхСценарий =&ИсхСценарий) ИЛИ (ИсхСценарий =&ПустойИсхСценарий))
	|					И ((ИсхЦФО =&ИсхЦФО) ИЛИ (ИсхЦФО =&ПустойИсхЦФО)) 
	|					И ((ИсхПроект =&ИсхПроект) ИЛИ (ИсхПроект =&ПустойИсхПроект)) 
	|					И ((ИсхКонтрагент =&ИсхКонтрагент) ИЛИ (ИсхКонтрагент =&ПустойИсхКонтрагент)) 
	|					И ((ИсхНоменклатура =&ИсхНоменклатура) ИЛИ (ИсхНоменклатура = Неопределено))) КАК ЗависимостиОборотовПоСтатьям";
	
	Запрос.УстановитьПараметр("ДатаДвижения",СтрокаОперации.Период);
	Запрос.УстановитьПараметр("Статья",СтрокаОперации.СтатьяОборотов);
	
	Запрос.УстановитьПараметр("ИсхСценарий",Сценарий);
	Запрос.УстановитьПараметр("ПустойИсхСценарий",ПустойСценарий);
		
	Запрос.УстановитьПараметр("ИсхЦФО",СтрокаОперации.ЦФО);
	Запрос.УстановитьПараметр("ПустойИсхЦФО",ПустойЦФО);
	
	Запрос.УстановитьПараметр("ИсхПроект",СтрокаОперации.Проект);
	Запрос.УстановитьПараметр("ПустойИсхПроект",ПустойПроект);
	
	Запрос.УстановитьПараметр("ИсхКонтрагент",СтрокаОперации.Контрагент);
	Запрос.УстановитьПараметр("ПустойИсхКонтрагент",ПустойКонтрагент);
	
	Запрос.УстановитьПараметр("ИсхНоменклатура",СтрокаОперации.Номенклатура);
	
	РезультатЗапроса=Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	Иначе
		
		ТабЗависимыхСтатей=РезультатЗапроса.Выгрузить();
		ПериодПланирования=Сценарий.Периодичность;
		
		Для Каждого ТекущаяЗависимость Из ТабЗависимыхСтатей Цикл
			
			РеквизитДляСуммы=ТекущаяЗависимость.РеквизитВлияющейСтатьиДляРасчетаСуммы;
			РеквизитДляКоличества=ТекущаяЗависимость.РеквизитВлияющейСтатьиДляРасчетаКоличества;
			КоэффициентДляСуммы=ТекущаяЗависимость.КоэффициентДляРасчетаСуммы;
			КоэффициентДляКоличества=ТекущаяЗависимость.КоэффициентДляРасчетаКоличества;
			
			СуммаЗависимая=0;
			КоличествоЗависимое=0;
			
			Если РеквизитДляСуммы=Перечисления.РеквизитыДляРасчетаЗависимыхСтатейБюджета.Количество Тогда
				СуммаЗависимая=СтрокаОперации.Количество*КоэффициентДляСуммы;
			ИначеЕсли РеквизитДляСуммы=Перечисления.РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма Тогда
				СуммаЗависимая=СтрокаОперации.Сумма*КоэффициентДляСуммы;
			КонецЕсли;
			
			Если РеквизитДляКоличества=Перечисления.РеквизитыДляРасчетаЗависимыхСтатейБюджета.Количество Тогда
				КоличествоЗависимое=СтрокаОперации.Количество*КоэффициентДляКоличества;
			ИначеЕсли РеквизитДляКоличества=Перечисления.РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма Тогда
				КоличествоЗависимое=СтрокаОперации.Сумма*КоэффициентДляКоличества;
			КонецЕсли;
			
			Если НЕ ТекущаяЗависимость.ЗначениеИзмененияПоПериодам.Пустая() Тогда
				
				ПериодСмещения=ТекущаяЗависимость.ЗначениеИзмененияПоПериодам.ПериодСмещения;
							
				Для Каждого Элемент Из ТекущаяЗависимость.ЗначениеИзмененияПоПериодам.ПрофильИзменения Цикл
					
					НовыйЗависимыйОборот=ТабОперации.Добавить();
					
					НовыйЗависимыйОборот.ЦФО=?(ТекущаяЗависимость.ЗависимыйЦФО=ПустойЦФО,СтрокаОперации.ЦФО,ТекущаяЗависимость.ЗависимыйЦФО);
                    НовыйЗависимыйОборот.Проект=?(ТекущаяЗависимость.ЗависимыйПроект=ПустойПроект,СтрокаОперации.Проект,ТекущаяЗависимость.ЗависимыйПроект);
					
					Если ТекущаяЗависимость.РазделениеПоКонтрагентам Тогда
						НовыйЗависимыйОборот.Контрагент=?(ТекущаяЗависимость.ЗависимыйКонтрагент=ПустойКонтрагент,СтрокаОперации.Контрагент,ТекущаяЗависимость.ЗависимыйКонтрагент);
					КонецЕсли;
					
					Если ТекущаяЗависимость.РазделениеПоНоменклатуре Тогда		
						НовыйЗависимыйОборот.Номенклатура=?(ТекущаяЗависимость.ЗависимаяНоменклатура=Неопределено,СтрокаОперации.Номенклатура,ТекущаяЗависимость.ЗависимаяНоменклатура);
					КонецЕсли;
					
					НовыйЗависимыйОборот.Период	= ОбщегоНазначения.ДатаНачалаПериода(ОбщегоНазначения.ДобавитьИнтервал(СтрокаОперации.Период,ПериодСмещения,Элемент.НомерПериода),ПериодПланирования);
					НовыйЗависимыйОборот.СтатьяОборотов		= ТекущаяЗависимость.ЗависимаяСтатьяОборотов;
					
					Если ТекущаяЗависимость.УчетПоКоличеству Тогда	
						НовыйЗависимыйОборот.Количество			= КоличествоЗависимое*Элемент.Коэффициент;
					КонецЕсли;
					
					Если ТекущаяЗависимость.УчетПоСумме Тогда
						НовыйЗависимыйОборот.Сумма				= СуммаЗависимая*Элемент.Коэффициент;
						НовыйЗависимыйОборот.Валюта=СтрокаОперации.Валюта;
					КонецЕсли;
				
					НовыйЗависимыйОборот.ВлияющаяОперация   = НомерСтроки;
					
					ЗаполнитьЗависимымиОборотами(ТабОперации,НовыйЗависимыйОборот,ТабОперации.Индекс(НовыйЗависимыйОборот)+1);
										
				КонецЦикла;
				
			Иначе	
				
				НовыйЗависимыйОборот=ТабОперации.Добавить();
				
				НовыйЗависимыйОборот.Период=СтрокаОперации.Период;
				
				НовыйЗависимыйОборот.ЦФО=?(ТекущаяЗависимость.ЗависимыйЦФО=ПустойЦФО,СтрокаОперации.ЦФО,ТекущаяЗависимость.ЗависимыйЦФО);
				НовыйЗависимыйОборот.Проект=?(ТекущаяЗависимость.ЗависимыйПроект=ПустойПроект,СтрокаОперации.Проект,ТекущаяЗависимость.ЗависимыйПроект);
				
				Если ТекущаяЗависимость.РазделениеПоКонтрагентам Тогда
					НовыйЗависимыйОборот.Контрагент=?(ТекущаяЗависимость.ЗависимыйКонтрагент=ПустойКонтрагент,СтрокаОперации.Контрагент,ТекущаяЗависимость.ЗависимыйКонтрагент);
				КонецЕсли;
				
				Если ТекущаяЗависимость.РазделениеПоНоменклатуре Тогда
					НовыйЗависимыйОборот.Номенклатура=?(ТекущаяЗависимость.ЗависимаяНоменклатура=Неопределено,СтрокаОперации.Номенклатура,ТекущаяЗависимость.ЗависимаяНоменклатура);
				КонецЕсли;
				
				НовыйЗависимыйОборот.СтатьяОборотов		= ТекущаяЗависимость.ЗависимаяСтатьяОборотов;
				
				Если ТекущаяЗависимость.УчетПоКоличеству Тогда
					НовыйЗависимыйОборот.Количество			= КоличествоЗависимое;
				КонецЕсли;
				
				Если ТекущаяЗависимость.УчетПоСумме Тогда
					НовыйЗависимыйОборот.Валюта=СтрокаОперации.Валюта;
					НовыйЗависимыйОборот.Сумма				= СуммаЗависимая;
				КонецЕсли;
				
				НовыйЗависимыйОборот.ВлияющаяОперация   = НомерСтроки;
				
				ЗаполнитьЗависимымиОборотами(ТабОперации,НовыйЗависимыйОборот,ТабОперации.Индекс(НовыйЗависимыйОборот)+1);
								
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;				
	
КонецПроцедуры // ЗаполнитьЗависимымиОборотами()

// Заполняет колонку переданной таблицы фиксированными значениями
//
// Параметры
//  ТабОперации: 		таблица значений  – формируемая таблица операций
//  ВидИзменения: 		Перечисления.ВидыИзмененияПлановПоИзмерениям - способ заполнения колонки 
//  ЗначениеИзменения: 	Фиксированное значение для заполнения
//  ИмяКолонки: 		Строка - имя колонки таблицы операций, которую нужно заполнить.
//
Процедура ЗаполнитьФиксированныеЗначения(ТабОперации,ВидИзменения,ЗначениеИзменения,ИмяКолонки)
	
	Если ВидИзменения=Перечисления.ВидыИзмененияПлановПоИзмерениям.ФиксированноеЗначение Тогда
		ТабОперации.ЗаполнитьЗначения(ЗначениеИзменения,ИмяКолонки);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьФиксированныеЗначения()

// Формирует бюджетные операции по переданным исходным данным
//
// Параметры
//  ТабИсходныеДанные: таблица значений, содержащая исходные данные для расчета
//                 <продолжение описания параметра>
//
Процедура СформироватьОперации(Оборот,РабочиеДанные,НомерСтрокиРасчет, СтруктураИзмеренийРасчет)
		
	ТабОперации=БюджетныеОперации.Выгрузить();
	ТабОперации.Очистить();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	Если РабочиеДанные.Количество()=0 Тогда
		
		РабочиеДанные=Новый ТаблицаЗначений;
		
		// Добавляем колонки для показателей
		
		Для Каждого СтрокаПоказатели ИЗ Показатели Цикл
			
			Если НЕ СтрокаПоказатели.КодИсточника="" Тогда
				РабочиеДанные.Колонки.Добавить(СтрокаПоказатели.Код,ОписаниеТиповЧисло);
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока=РабочиеДанные.Добавить();
		
	КонецЕсли;
	
	РабочиеДанные.Колонки.Добавить("Количество",ОписаниеТиповЧисло);
	РабочиеДанные.Колонки.Добавить("Сумма",ОписаниеТиповЧисло);
	
	// Колонка для информации об успешности выполнения расчета
	РабочиеДанные.Колонки.Добавить("РасчетВыполнен",ОписаниеТиповБулево);
	РабочиеДанные.ЗаполнитьЗначения(Истина,"РасчетВыполнен");
	
	// Добавляем показатели, введенные вручную
	Для Каждого СтрокаПоказатели ИЗ Показатели Цикл
		Если СтрокаПоказатели.КодИсточника="" Тогда
			РабочиеДанные.Колонки.Добавить(СтрокаПоказатели.Код,ОписаниеТиповЧисло);
			РабочиеДанные.ЗаполнитьЗначения(СтрокаПоказатели.Значение,СтрокаПоказатели.Код);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДанных Из РабочиеДанные Цикл
		
		// Убираем пустые значения
		
		Для Каждого Колонка Из РабочиеДанные.Колонки Цикл
			
			Если СтрокаДанных[Колонка.Имя]=NULL Тогда
				СтрокаДанных[Колонка.Имя]=0;
			КонецЕсли;
			
		КонецЦикла;
		
		//Формируем строку для сообщения об ошибке
		
		СтрокаИзмерение="";
		
		Для Каждого Измерение Из СтруктураИзмеренийРасчет Цикл
			Если Не РабочиеДанные.Колонки.Найти(Измерение.Ключ)=Неопределено Тогда
				СтрокаИзмерение=СтрокаИзмерение+" "+Измерение.Ключ+": "+СокрЛП(СтрокаДанных[Измерение.Ключ])+";";
			КонецЕсли;
		КонецЦикла;
				
				
		//Рассчитываем значения по формулам
		
		Если НЕ Оборот.ФормулаКоличество="" Тогда
			
			ВыражениеКоличество=СтрЗаменить(Оборот.ФормулаКоличество,"[","СтрокаДанных.");
			ВыражениеКоличество=СтрЗаменить(ВыражениеКоличество,"]","");
			
			Попытка
				
				СтрокаДанных.Количество=Вычислить(ВыражениеКоличество);
				
			Исключение
				
				Сообщить("Расчет по строке "+НомерСтрокиРасчет+", "+СтрокаИзмерение+"
				|показатель ""Количество"": "+ОписаниеОшибки());
				СтрокаДанных.Количество=0;
				СтрокаДанных.РасчетВыполнен=Ложь;
				
			КонецПопытки
			
		Иначе
			
			СтрокаДанных.Количество=0;
			
		КонецЕсли;
		
		Если НЕ Оборот.ФормулаСумма="" Тогда
			
			ВыражениеСумма=СтрЗаменить(Оборот.ФормулаСумма,"[","СтрокаДанных.");
			ВыражениеСумма=СтрЗаменить(ВыражениеСумма,"]","");
			
			Попытка
				
				СтрокаДанных.Сумма=Вычислить(ВыражениеСумма);
				
			Исключение
				
				Сообщить("Расчет по строке "+НомерСтрокиРасчет+", "+СтрокаИзмерение+"
				|показатель ""Сумма"": "+ОписаниеОшибки());
				СтрокаДанных.Сумма=0;
				СтрокаДанных.РасчетВыполнен=Ложь;
				
			КонецПопытки
			
		Иначе
			
			СтрокаДанных.Сумма=0;
			
		КонецЕсли;
		
		Если СтрокаДанных.Сумма=0 И СтрокаДанных.Количество=0 Тогда
			СтрокаДанных.РасчетВыполнен=Ложь;
		КонецЕсли;
		
	КонецЦикла; 
	
	// Удаляем строки с нулевыми значениями количества и суммы: в дальнейших расчетах они не используются.
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("РасчетВыполнен",Ложь);
	
	МассивНулевыхСтрок=РабочиеДанные.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаНоль Из МассивНулевыхСтрок Цикл
		РабочиеДанные.Удалить(СтрокаНоль);
	КонецЦикла;
	
	Если РабочиеДанные.Количество()=0 Тогда // Дальнейшие расчеты не имеют смысла
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РабочиеДанные, ТабОперации);
	
	// Заполняем фиксированные значения изменений
	ЗаполнитьФиксированныеЗначения(ТабОперации,Оборот.ВидИзмененияПоВалюте,Оборот.ЗначениеИзмененияПоВалюте,"Валюта");
	ЗаполнитьФиксированныеЗначения(ТабОперации,Оборот.ВидИзмененияПоЦФО,Оборот.ЗначениеИзмененияПоЦФО,"ЦФО");
	ЗаполнитьФиксированныеЗначения(ТабОперации,Оборот.ВидИзмененияПоПроектам,Оборот.ЗначениеИзмененияПоПроектам,"Проект");
	ЗаполнитьФиксированныеЗначения(ТабОперации,Оборот.ВидИзмененияПоКонтрагентам,Оборот.ЗначениеИзмененияПоКонтрагентам,"Контрагент");
	ЗаполнитьФиксированныеЗначения(ТабОперации,Оборот.ВидИзмененияПоНоменклатуре,Оборот.ЗначениеИзмененияПоНоменклатуре,"Номенклатура");
	
	ТабОперации.ЗаполнитьЗначения(Оборот.СтатьяОборотов,"СтатьяОборотов");
	ТабОперации.ЗаполнитьЗначения(ДатаРасчета,"Период");
	
	// Заполняем движения, рассчитываемые по профилям изменений по измерениям
	ИзмеренияПоПрофилю(ТабОперации,Оборот.ВидИзмененияПоВалюте,Оборот.ЗначениеИзмененияПоВалюте,Перечисления.ИзмеренияБюджетирования.Валюта,Оборот.НомерСтроки);
	ИзмеренияПоПрофилю(ТабОперации,Оборот.ВидИзмененияПоЦФО,Оборот.ЗначениеИзмененияПоЦФО,Перечисления.ИзмеренияБюджетирования.ЦФО,Оборот.НомерСтроки);
	ИзмеренияПоПрофилю(ТабОперации,Оборот.ВидИзмененияПоПроектам,Оборот.ЗначениеИзмененияПоПроектам,Перечисления.ИзмеренияБюджетирования.Проект,Оборот.НомерСтроки);
	ИзмеренияПоПрофилю(ТабОперации,Оборот.ВидИзмененияПоКонтрагентам,Оборот.ЗначениеИзмененияПоКонтрагентам,Перечисления.ИзмеренияБюджетирования.Контрагент,Оборот.НомерСтроки);
	ИзмеренияПоПрофилю(ТабОперации,Оборот.ВидИзмененияПоНоменклатуре,Оборот.ЗначениеИзмененияПоНоменклатуре,Перечисления.ИзмеренияБюджетирования.Номенклатура,Оборот.НомерСтроки);
	
	// Заполняем движения , рассчитываемые по профилям изменений по периодам
	Если НЕ Оборот.ЗначениеИзмененияПоПериодам.Пустая() Тогда
		
		ПериодыПоПрофилю(ТабОперации,Оборот.ЗначениеИзмененияПоПериодам);
		
	КонецЕсли;
	
	// Добавляем зависимые обороты
	
	КопияТабОперации=ТабОперации.Скопировать();
	
	Для каждого СтрокаОперации Из КопияТабОперации Цикл
		
		ЗаполнитьЗависимымиОборотами(ТабОперации,СтрокаОперации,КопияТабОперации.Индекс(СтрокаОперации)+1);
		
	КонецЦикла;
	
	// Переносим сформированные операции в табличную часть
	Для каждого СтрокаОперации Из ТабОперации Цикл
		
		НоваяОперация=БюджетныеОперации.Добавить();
		НоваяОперация.Период=СтрокаОперации.Период;
		НоваяОперация.Валюта=СтрокаОперации.Валюта;
		НоваяОперация.СтатьяОборотов=СтрокаОперации.СтатьяОборотов;
		НоваяОперация.ЦФО=СтрокаОперации.ЦФО;
		НоваяОперация.Проект=СтрокаОперации.Проект;
		НоваяОперация.Контрагент=СтрокаОперации.Контрагент;
		НоваяОперация.Номенклатура=СтрокаОперации.Номенклатура;
		НоваяОперация.Количество=СтрокаОперации.Количество;
		НоваяОперация.Сумма=СтрокаОперации.Сумма;
		НоваяОперация.ВлияющаяОперация=СтрокаОперации.ВлияющаяОперация;
		
	КонецЦикла; 	 
	
КонецПроцедуры // СформироватьОперации()



#КонецЕсли

// Возвращает структуру, содержащую поля шапки, обязательные для заполнения
//
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей - структура с именами реквизитов шапки
//
Функция СтруктураОбязательныхПолейШапка()
	
	СтруктураОбязательныхПолей=Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Сценарий");
			
	Возврат СтруктураОбязательныхПолей;
	
КонецФункции // СтруктураОбязательныхПолейШапка()

// Возвращает структуру, содержащую поля ТЧ "БюджетныеОперации", обязательные для заполнения
//
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей - структура с именами реквизитов шапки
//
Функция СтруктураОбязательныхПолейТЧ()
	
	СтруктураОбязательныхПолей=Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Период");
	СтруктураОбязательныхПолей.Вставить("СтатьяОборотов");
    СтруктураОбязательныхПолей.Вставить("Валюта");
	
	Возврат СтруктураОбязательныхПолей;
	
КонецФункции // СтруктураОбязательныхПолейТЧ()

Функция ПроверкаКонтролируемыхЗначений(СтруктураДанныхШапки, СтрокаОборотовДляКонтроля)
	
	// Получение списка контролирующих сценариев для выбранного периода и измерений бюджетирования
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	УстановкаОграниченийПоБюджетам.КонтролирующийСценарий КАК КонтролирующийСценарий,
	|	УстановкаОграниченийПоБюджетам.СтатьяОборотов КАК СтатьяОборотов,
	|	УстановкаОграниченийПоБюджетам.ЦФО КАК ЦФО,
	|	УстановкаОграниченийПоБюджетам.Проект КАК Проект,
	|	УстановкаОграниченийПоБюджетам.Контрагент КАК Контрагент,
	|	УстановкаОграниченийПоБюджетам.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.УстановкаОграниченийПоБюджетам КАК УстановкаОграниченийПоБюджетам
	|
	|ГДЕ
	|	УстановкаОграниченийПоБюджетам.Период = &Период И
	|	УстановкаОграниченийПоБюджетам.СтатьяОборотов = &СтатьяОборотов И
	|	УстановкаОграниченийПоБюджетам.Сценарий = &Сценарий И
	|	(УстановкаОграниченийПоБюджетам.ЦФО = &ЦФО ИЛИ УстановкаОграниченийПоБюджетам.ЦФО = &ПустойЦФО) И
	|	(УстановкаОграниченийПоБюджетам.Проект = &Проект ИЛИ УстановкаОграниченийПоБюджетам.Проект = &ПустойПроект) И
	|	(УстановкаОграниченийПоБюджетам.Контрагент = &Контрагент ИЛИ УстановкаОграниченийПоБюджетам.Контрагент = &ПустойКонтрагент) И
	|	(УстановкаОграниченийПоБюджетам.Номенклатура = &Номенклатура ИЛИ УстановкаОграниченийПоБюджетам.Номенклатура = Неопределено) И
	|	УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения = &ИспользованиеКонтролируемогоЗначения";
	
	Запрос.УстановитьПараметр("Период",СтрокаОборотовДляКонтроля.Период);
	Запрос.УстановитьПараметр("СтатьяОборотов",СтрокаОборотовДляКонтроля.СтатьяОборотов);
	Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании);	
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
		
	Запрос.УстановитьПараметр("ЦФО",СтрокаОборотовДляКонтроля.ЦФО);
	Запрос.УстановитьПараметр("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	
	Запрос.УстановитьПараметр("Проект",СтрокаОборотовДляКонтроля.Проект);
	Запрос.УстановитьПараметр("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	
	Запрос.УстановитьПараметр("Контрагент",СтрокаОборотовДляКонтроля.Контрагент);
	Запрос.УстановитьПараметр("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
	
	Запрос.УстановитьПараметр("Номенклатура",СтрокаОборотовДляКонтроля.Номенклатура);
	
	ТабРезультата=Запрос.Выполнить().Выгрузить();
	
	Если ТабРезультата.Количество()=0 Тогда
		
		Возврат ТабРезультата;
		
	Иначе
		
		ТабРезультата.Колонки.Добавить("СуммаСценарияИсполнение");
		ТабРезультата.Колонки.Добавить("Период");
		
		Для каждого СтрокаПроверки Из ТабРезультата Цикл
			
			Если СтрокаПроверки.КонтролирующийСценарий.Пустая() Тогда
				
				ТекущийСценарий=Сценарий;
				ДатаНачала=СтрокаОборотовДляКонтроля.Период;
				ДатаКонца  = ОбщегоНазначения.ДатаКонцаПериода(ДатаНачала,СтруктураДанныхШапки.СценарийПериодичность);
				
			Иначе
				ТекущийСценарий=СтрокаПроверки.КонтролирующийСценарий;				
				ДатаНачала = ОбщегоНазначения.ДатаНачалаПериода(СтрокаОборотовДляКонтроля.Период, ТекущийСценарий.Периодичность);
				ДатаКонца  = ОбщегоНазначения.ДатаКонцаПериода(ДатаНачала,ТекущийСценарий.Периодичность);
								
			КонецЕсли;
			
			СуммаСценария=СтрокаОборотовДляКонтроля.СуммаСценария;
			
			Запрос.Текст="ВЫБРАТЬ
			|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот) КАК СуммаКонтроль,
			|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот) КАК СуммаИсполнение
			|ИЗ
			|	РегистрНакопления.КонтролируемыеЗначенияБюджетов.Обороты(&ДатаНачала, &ДатаНачала, , 
			|					Контрагент = &Контрагент И 
			|					КонтролирующийСценарий=&КонтролирующийСценарий И
			|					Номенклатура=&Номенклатура И 
			|					Проект=&Проект И 
			|					СтатьяОборотов=&СтатьяОборотов И 
			|					Сценарий=&Сценарий И 
			|					ЦФО=&ЦФО И 
			|					ИспользованиеКонтролируемогоЗначения=&ИспользованиеКонтролируемогоЗначения
			|					) КАК КонтролируемыеЗначенияБюджетовОбороты";		
			
			Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
			Запрос.УстановитьПараметр("Контрагент",СтрокаПроверки.Контрагент);
			Запрос.УстановитьПараметр("КонтролирующийСценарий",СтрокаПроверки.КонтролирующийСценарий);
			Запрос.УстановитьПараметр("Номенклатура",СтрокаПроверки.Номенклатура);
			Запрос.УстановитьПараметр("Проект",СтрокаПроверки.Проект);
			Запрос.УстановитьПараметр("СтатьяОборотов",СтрокаПроверки.СтатьяОборотов);
			Запрос.УстановитьПараметр("Сценарий",Сценарий);
			Запрос.УстановитьПараметр("ЦФО",СтрокаПроверки.ЦФО);
			Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании);
			
			СуммаКонтроль=0;
			СуммаИсполнение=0;
			
			Результат = Запрос.Выполнить();
			Выборка=Результат.Выбрать();
			Если Выборка.Следующий() И (НЕ Выборка["СуммаКонтроль"]=NULL) И (НЕ Выборка["СуммаИсполнение"]=NULL) Тогда
				СуммаКонтроль=Выборка["СуммаКонтроль"];
				СуммаИсполнение=Выборка["СуммаИсполнение"]+СуммаСценария;
			КонецЕсли;
			
			Если СуммаИсполнение>СуммаКонтроль Тогда
				
			ТекстСообщения="Оборот приведет к превышению контролируемого значения!
				|Контролирующий сценарий: "+ ТекущийСценарий+"
				|Период планирования: "+Формат(ДатаНачала,"ДФ=dd.MM.yyyy")+" - "+Формат(ДатаКонца,"ДФ=dd.MM.yyyy");
				
			Если Не СтрокаПроверки.СтатьяОборотов.Пустая() Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|Статья оборотов: "+СтрокаПроверки.СтатьяОборотов;
				
			КонецЕсли;
			
			
			Если Не СтрокаПроверки.ЦФО.Пустая() Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|ЦФО: "+СтрокаПроверки.ЦФО;
			
			КонецЕсли;
			
			Если Не СтрокаПроверки.Проект.Пустая() Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|Проект: "+СтрокаПроверки.Проект;
				
			КонецЕсли;
			
			Если Не СтрокаПроверки.Контрагент.Пустая() Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|Контрагент: "+СтрокаПроверки.Контрагент;
				
			КонецЕсли;
			
			Если Не СтрокаПроверки.Номенклатура=Неопределено Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|Номенклатура: "+СтрокаПроверки.Номенклатура;
				
			КонецЕсли;

			ТекстСообщения=ТекстСообщения+"
				|Контролируемое значение: "+СуммаКонтроль+" "+СтруктураДанныхШапки.СценарийВалюта+"
				|Значение с учетом суммы операции: "+СуммаИсполнение+" "+СтруктураДанныхШапки.СценарийВалюта;
				
				#Если Клиент Тогда
				Сообщить(ТекстСообщения);
				#КонецЕсли
				
				Возврат Ложь;
				
			КонецЕсли;
			
			СтрокаПроверки.СуммаСценарияИсполнение=СуммаСценария;
			СтрокаПроверки.Период=ДатаНачала;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат ТабРезультата;
	
КонецФункции // ПроверкаКонтролируемыхЗначений()

// Возвращает таблицу значений для использования в движениях
// регистров
//
Функция СформироватьЗапросПоДаннымДокумента(СтруктураДанныхШапки)

	Запрос=Новый Запрос;
	
	ТекстЗапроса="ВЫБРАТЬ
	            |	БюджетныеОперацииДокумент.Период КАК Период,
	            |	БюджетныеОперацииДокумент.Ссылка.Сценарий КАК Сценарий,
				|	БюджетныеОперацииДокумент.Валюта КАК Валюта,
	            |	БюджетныеОперацииДокумент.ЦФО КАК ЦФО,
	            |	БюджетныеОперацииДокумент.Проект КАК Проект,
	            |	БюджетныеОперацииДокумент.Контрагент КАК Контрагент,
	            |	БюджетныеОперацииДокумент.Номенклатура КАК Номенклатура,
	            |	БюджетныеОперацииДокумент.СтатьяОборотов КАК СтатьяОборотов,
				|	ГраницыПланирования.ГраницаФиксации КАК ГраницаФиксации,
				|	СУММА(БюджетныеОперацииДокумент.Сумма) КАК ВалютнаяСумма,
	            |	СУММА(БюджетныеОперацииДокумент.Количество) КАК Количество,
				|	СУММА(ВЫРАЗИТЬ 
				|	(ВЫБОР 
				|		КОГДА БюджетныеОперацииДокумент.Валюта=&ВалютаСценария ТОГДА БюджетныеОперацииДокумент.Сумма
				|		КОГДА БюджетныеОперацииДокумент.Валюта<>&ВалютаСценария И КурсыОперации.Курс <>0 И КурсыСценария.Курс <>0 ТОГДА
				|			БюджетныеОперацииДокумент.Сумма*КурсыОперации.Курс * КурсыСценария.Кратность 
				|			/ (КурсыСценария.Курс * КурсыОперации.Кратность)
				|		ИНАЧЕ
				|			0
				|		КОНЕЦ КАК ЧИСЛО (15,2))) КАК СуммаСценария,
				|	СУММА(ВЫРАЗИТЬ 
				|	(ВЫБОР 
				|		КОГДА БюджетныеОперацииДокумент.Валюта=&ВалютаУпрУчета ТОГДА БюджетныеОперацииДокумент.Сумма
				|		КОГДА БюджетныеОперацииДокумент.Валюта<>&ВалютаУпрУчета И КурсыОперации.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
				|			БюджетныеОперацииДокумент.Сумма*КурсыОперации.Курс * КурсыУпрУчета.Кратность 
				|			/ (КурсыУпрУчета.Курс * КурсыОперации.Кратность)
				|		ИНАЧЕ
				|			0
				|		КОНЕЦ КАК ЧИСЛО (15,2))) КАК СуммаУпр
	            |	ИЗ
	            |	Документ.РасчетПоМоделиБюджетирования.БюджетныеОперации КАК БюджетныеОперацииДокумент
				//  Курсы валюты сценария планирования	
				|ЛЕВОЕ СОЕДИНЕНИЕ
				|(ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность
				|ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВалют
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
				|	ВЫБРАТЬ
				|		Максимум(КурсыВнутр.Период) КАК Период,
				|		Обороты.Дата КАК Дата
				|	ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
				|		ВЫБРАТЬ
  				|			ОперацииДата.Период КАК Дата
  				|		ИЗ
  				|			Документ.РасчетПоМоделиБюджетирования.БюджетныеОперации КАК ОперацииДата
  				|		ГДЕ
				|			ОперацииДата.Ссылка = &Ссылка
  				|		) КАК Обороты
   				|ПО Обороты.Дата >= КурсыВнутр.Период
				|	И (КурсыВнутр.Валюта = &ВалютаСценария)";
				Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
				|	И (КурсыВнутр.Сценарий=&Сценарий)";
				КонецЕсли;
			    ТекстЗапроса=ТекстЗапроса+"
				|	СГРУППИРОВАТЬ ПО Обороты.Дата) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
				|ГДЕ КурсыВалют.Валюта = &ВалютаСценария";
				Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
				|	И КурсыВалют.Сценарий=&Сценарий";
				КонецЕсли;
                ТекстЗапроса=ТекстЗапроса+" ) КАК КурсыСценария
				|ПО КурсыСценария.Дата = БюджетныеОперацииДокумент.Период
				// Курсы документа 
				|ЛЕВОЕ СОЕДИНЕНИЕ
				|(ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность,
				|	КурсыВалют.Валюта КАК Валюта
				|ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВалют
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
				|	ВЫБРАТЬ
				|		Максимум(КурсыВнутр.Период) КАК Период,
				|		Обороты.Дата КАК Дата,
				|		КурсыВнутр.Валюта КАК Валюта
				|	ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
				|			ВЫБРАТЬ
  				|			РасчетПоМоделиБюджетированияБюджетныеОперации.Период КАК Дата,
				|			РасчетПоМоделиБюджетированияБюджетныеОперации.Валюта КАК ВалютаДок
  				|		ИЗ
  				|			Документ.РасчетПоМоделиБюджетирования.БюджетныеОперации КАК РасчетПоМоделиБюджетированияБюджетныеОперации
  				|		ГДЕ
				|			РасчетПоМоделиБюджетированияБюджетныеОперации.Ссылка = &Ссылка
  				|		) КАК Обороты
   				|ПО Обороты.Дата >= КурсыВнутр.Период
				|	И КурсыВнутр.Валюта = Обороты.ВалютаДок";
				Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
				|	И (КурсыВнутр.Сценарий=&Сценарий)";
				КонецЕсли;
			    ТекстЗапроса=ТекстЗапроса+"
				|	СГРУППИРОВАТЬ ПО Обороты.Дата, КурсыВнутр.Валюта) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период И 
				|      КурсыВалют.Валюта = ПериодПоследнейЗаписиКурсаНаДатуОборота.Валюта";
				Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
				|	ГДЕ КурсыВалют.Сценарий=&Сценарий";
				КонецЕсли;
                ТекстЗапроса=ТекстЗапроса+" ) КАК КурсыОперации
				|ПО КурсыОперации.Дата = БюджетныеОперацииДокумент.Период И
				|   КурсыОперации.Валюта = БюджетныеОперацииДокумент.Валюта
				// Курсы валюты управленческого учета
				|ЛЕВОЕ СОЕДИНЕНИЕ
				|(ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность
				|ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВалют
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
				|	ВЫБРАТЬ
				|		МАКСИМУМ(КурсыВнутр.Период) КАК Период,
				|		Обороты.Дата КАК Дата
				|	ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
				|		ВЫБРАТЬ
  				|			ОперацииДата.Период КАК Дата
  				|		ИЗ
  				|			Документ.РасчетПоМоделиБюджетирования.БюджетныеОперации КАК ОперацииДата
  				|		ГДЕ
				|			ОперацииДата.Ссылка = &Ссылка
  				|		) КАК Обороты
   				|ПО Обороты.Дата >= КурсыВнутр.Период
				|	И (КурсыВнутр.Валюта = &ВалютаУпрУчета)";
				Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
				|	И (КурсыВнутр.Сценарий=&Сценарий)";
				КонецЕсли;
			    ТекстЗапроса=ТекстЗапроса+"
				|	СГРУППИРОВАТЬ ПО Обороты.Дата) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
				|ГДЕ КурсыВалют.Валюта = &ВалютаУпрУчета";
				Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
				|	И КурсыВалют.Сценарий=&Сценарий";
				КонецЕсли;
                ТекстЗапроса=ТекстЗапроса+" ) КАК КурсыУпрУчета
				|ПО КурсыУпрУчета.Дата = БюджетныеОперацииДокумент.Период
				|ЛЕВОЕ СОЕДИНЕНИЕ
				|(ВЫБРАТЬ
				|	ГраницыПериодов.Сценарий КАК Сценарий,
				|	ГраницыПериодов.ЦФО КАК ЦФО,
				|	ГраницыПериодов.Проект КАК Проект,
				|	МАКСИМУМ(ГраницыПериодов.ГраницаФиксации) КАК ГраницаФиксации
				|ИЗ
				|		РегистрСведений.ГраницыПериодовБюджетирования КАК ГраницыПериодов				
				|				
				|СГРУППИРОВАТЬ ПО
				|	ГраницыПериодов.Сценарий,
				|	ГраницыПериодов.ЦФО,
				|	ГраницыПериодов.Проект) КАК ГраницыПланирования
				|ПО ГраницыПланирования.Сценарий=БюджетныеОперацииДокумент.Ссылка.Сценарий
				| И (БюджетныеОперацииДокумент.ЦФО = ГраницыПланирования.ЦФО ИЛИ ГраницыПланирования.ЦФО = &ПустойЦФО) 
				| И (БюджетныеОперацииДокумент.Проект = ГраницыПланирования.Проект ИЛИ ГраницыПланирования.Проект = &ПустойПроект)	
				|ГДЕ
				|БюджетныеОперацииДокумент.Ссылка = &Ссылка
				|СГРУППИРОВАТЬ ПО
				|БюджетныеОперацииДокумент.Период,
				|БюджетныеОперацииДокумент.Ссылка.Сценарий,
				|БюджетныеОперацииДокумент.Валюта,
				|БюджетныеОперацииДокумент.ЦФО,
				|БюджетныеОперацииДокумент.Проект,
				|БюджетныеОперацииДокумент.Контрагент,
				|БюджетныеОперацииДокумент.Номенклатура,
				|БюджетныеОперацииДокумент.СтатьяОборотов,
				|ГраницыПланирования.ГраницаФиксации";
					
				Запрос.Текст=ТекстЗапроса;
				
				Запрос.УстановитьПараметр("ВалютаСценария",СтруктураДанныхШапки.СценарийВалюта);
				Запрос.УстановитьПараметр("ВалютаУпрУчета",глЗначениеПеременной("ВалютаУправленческогоУчета"));
				Запрос.УстановитьПараметр("Ссылка",Ссылка);
				Запрос.УстановитьПараметр("Сценарий",Сценарий);
				
    			Запрос.УстановитьПараметр("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
    			Запрос.УстановитьПараметр("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));

                ТабОборотовДокумента=Запрос.Выполнить().Выгрузить();
				
	Возврат ТабОборотовДокумента;
	
КонецФункции // СформироватьЗапросПоДаннымДокумента()

// Возвращает таблицу значений для использования в движениях
// регистра бухгалтерии "Бюджетирование"
//
Функция СформироватьПроводкиПоДаннымДокумента(СтруктураДанныхШапки)
	
	Запрос=Новый Запрос;
	ТекстЗапроса="
	|ВЫБРАТЬ
	|БюджетныеОперацииДокумент.Период КАК Период,
	|ДанныеСчетДт.Счет КАК СчетДт,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт1,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт2,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт3,
	|ДанныеСчетКт.Счет КАК СчетКт,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт1,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт2,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт3,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.Валютный ТОГДА БюджетныеОперацииДокумент.Валюта 
	|	ИНАЧЕ NULL КОНЕЦ КАК ВалютаДт,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетДт.Валютный ТОГДА БюджетныеОперацииДокумент.Сумма * ТаблицаПроводок.КоэффициентДляСуммы 
	|	ИНАЧЕ NULL КОНЕЦ) КАК ВалютнаяСуммаДт,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.Валютный ТОГДА БюджетныеОперацииДокумент.Валюта 
	|	ИНАЧЕ NULL КОНЕЦ КАК ВалютаКт,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетКт.Валютный ТОГДА БюджетныеОперацииДокумент.Сумма * ТаблицаПроводок.КоэффициентДляСуммы 
	|	ИНАЧЕ NULL КОНЕЦ) КАК ВалютнаяСуммаКт,
	|ТаблицаПроводок.Ссылка КАК СтатьяОборотов,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетДт.Количественный ТОГДА БюджетныеОперацииДокумент.Количество * ТаблицаПроводок.КоэффициентДляКоличества 
	|	ИНАЧЕ NULL КОНЕЦ) КАК КоличествоДт,
	|СУММА(ВЫБОР 
	|	КОГДА ДанныеСчетКт.Количественный ТОГДА БюджетныеОперацииДокумент.Количество * ТаблицаПроводок.КоэффициентДляКоличества 
	|	ИНАЧЕ NULL КОНЕЦ) КАК КоличествоКт,
	|	СУММА(ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА БюджетныеОперацииДокумент.Валюта=&ВалютаУпрУчета ТОГДА БюджетныеОперацииДокумент.Сумма* ТаблицаПроводок.КоэффициентДляСуммы
	|		КОГДА БюджетныеОперацииДокумент.Валюта<>&ВалютаУпрУчета И КурсыОперации.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
	|			БюджетныеОперацииДокумент.Сумма* ТаблицаПроводок.КоэффициентДляСуммы*КурсыОперации.Курс * КурсыУпрУчета.Кратность 
	|			/ (КурсыУпрУчета.Курс * КурсыОперации.Кратность)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2))) КАК СуммаУпр,
	|	СУММА(ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА БюджетныеОперацииДокумент.Валюта=&ВалютаСценария ТОГДА БюджетныеОперацииДокумент.Сумма* ТаблицаПроводок.КоэффициентДляСуммы
	|		КОГДА БюджетныеОперацииДокумент.Валюта<>&ВалютаСценария И КурсыОперации.Курс <>0 И КурсыСценария.Курс <>0 ТОГДА
	|			БюджетныеОперацииДокумент.Сумма* ТаблицаПроводок.КоэффициентДляСуммы*КурсыОперации.Курс * КурсыСценария.Кратность 
	|			/ (КурсыУпрУчета.Курс * КурсыСценария.Кратность)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2))) КАК СуммаСценария
	|ИЗ
	|	Документ.РасчетПоМоделиБюджетирования.БюджетныеОперации КАК БюджетныеОперацииДокумент
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиОборотовПоБюджетам.ШаблоныПроводок КАК ТаблицаПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Бюджетирование.Ссылка КАК Счет,
	|			Бюджетирование.Валютный КАК Валютный,
	|			Бюджетирование.Количественный КАК Количественный,
	|			БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	|			БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	|			БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3
	|		ИЗ
	|			ПланСчетов.Бюджетирование КАК Бюджетирование
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)) КАК ДанныеСчетДт
	|		ПО ТаблицаПроводок.СчетДт = ДанныеСчетДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Бюджетирование.Ссылка КАК Счет,
	|			Бюджетирование.Валютный КАК Валютный,
	|			Бюджетирование.Количественный КАК Количественный,
	|			БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	|			БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	|			БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3
	|		ИЗ
	|			ПланСчетов.Бюджетирование КАК Бюджетирование
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)) КАК ДанныеСчетКт
	|		ПО ТаблицаПроводок.СчетКт = ДанныеСчетКт.Счет
	|	ПО БюджетныеОперацииДокумент.СтатьяОборотов = ТаблицаПроводок.Ссылка
	// Курсы документа 
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ 
	|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
	|	КурсыВалют.Курс КАК Курс, 
	|	КурсыВалют.Кратность КАК Кратность,
	|	КурсыВалют.Валюта КАК Валюта
	|ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВалют
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		Максимум(КурсыВнутр.Период) КАК Период,
	|		Обороты.Дата КАК Дата,
	|		КурсыВнутр.Валюта КАК Валюта
	|	ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВнутр
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
  	|			РасчетПоМоделиБюджетированияБюджетныеОперации.Период КАК Дата,
	|			РасчетПоМоделиБюджетированияБюджетныеОперации.Валюта КАК ВалютаДок
  	|		ИЗ
  	|			Документ.РасчетПоМоделиБюджетирования.БюджетныеОперации КАК РасчетПоМоделиБюджетированияБюджетныеОперации
  	|		ГДЕ
	|			РасчетПоМоделиБюджетированияБюджетныеОперации.Ссылка = &Ссылка
  	|		) КАК Обороты
   	|ПО Обороты.Дата >= КурсыВнутр.Период
	|	И КурсыВнутр.Валюта = Обороты.ВалютаДок";
	Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
	|	И (КурсыВнутр.Сценарий=&Сценарий)";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|	СГРУППИРОВАТЬ ПО Обороты.Дата, КурсыВнутр.Валюта) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период И 
	|      КурсыВалют.Валюта = ПериодПоследнейЗаписиКурсаНаДатуОборота.Валюта";
	Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
	|	ГДЕ КурсыВалют.Сценарий=&Сценарий";
	КонецЕсли;
    ТекстЗапроса=ТекстЗапроса+" ) КАК КурсыОперации
	|ПО КурсыОперации.Дата = БюджетныеОперацииДокумент.Период И
	|   КурсыОперации.Валюта = БюджетныеОперацииДокумент.Валюта
	// Курсы валюты управленческого учета
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ 
	|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
	|	КурсыВалют.Курс КАК Курс, 
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВалют
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		МАКСИМУМ(КурсыВнутр.Период) КАК Период,
	|		Обороты.Дата КАК Дата
	|	ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВнутр
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
  	|			ОперацииДата.Период КАК Дата
  	|		ИЗ
  	|			Документ.РасчетПоМоделиБюджетирования.БюджетныеОперации КАК ОперацииДата
  	|		ГДЕ
	|			ОперацииДата.Ссылка = &Ссылка
  	|		) КАК Обороты
   	|ПО Обороты.Дата >= КурсыВнутр.Период
	|	И (КурсыВнутр.Валюта = &ВалютаУпрУчета)";
	Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
	|	И (КурсыВнутр.Сценарий=&Сценарий)";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|	СГРУППИРОВАТЬ ПО Обороты.Дата) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
	|ГДЕ КурсыВалют.Валюта = &ВалютаУпрУчета";
	Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
	|	И КурсыВалют.Сценарий=&Сценарий";
	КонецЕсли;
    ТекстЗапроса=ТекстЗапроса+" ) КАК КурсыУпрУчета
	|ПО КурсыУпрУчета.Дата = БюджетныеОперацииДокумент.Период
	// Курсы валюты сценария планирования
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ 
	|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
	|	КурсыВалют.Курс КАК Курс, 
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВалют
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		МАКСИМУМ(КурсыВнутр.Период) КАК Период,
	|		Обороты.Дата КАК Дата
	|	ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВнутр
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
  	|			ОперацииДата.Период КАК Дата
  	|		ИЗ
  	|			Документ.РасчетПоМоделиБюджетирования.БюджетныеОперации КАК ОперацииДата
  	|		ГДЕ
	|			ОперацииДата.Ссылка = &Ссылка
  	|		) КАК Обороты
   	|ПО Обороты.Дата >= КурсыВнутр.Период
	|	И (КурсыВнутр.Валюта = &ВалютаСценария)";
	Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
	|	И (КурсыВнутр.Сценарий=&Сценарий)";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|	СГРУППИРОВАТЬ ПО Обороты.Дата) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
	|ГДЕ КурсыВалют.Валюта = &ВалютаСценария";
	Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
		ТекстЗапроса=ТекстЗапроса+"
	|	И КурсыВалют.Сценарий=&Сценарий";
	КонецЕсли;
    ТекстЗапроса=ТекстЗапроса+" ) КАК КурсыСценария
	|ПО КурсыСценария.Дата = БюджетныеОперацииДокумент.Период
	|ГДЕ
	|БюджетныеОперацииДокумент.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|БюджетныеОперацииДокумент.Период,
	|ДанныеСчетДт.Счет,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ,
	|ДанныеСчетКт.Счет,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""ЦФО"" ТОГДА БюджетныеОперацииДокумент.ЦФО 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Проекты"" ТОГДА БюджетныеОперацииДокумент.Проект 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА БюджетныеОперацииДокумент.Контрагент 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА БюджетныеОперацииДокумент.Номенклатура 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.Валютный ТОГДА БюджетныеОперацииДокумент.Валюта 
	|	ИНАЧЕ NULL КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.Валютный ТОГДА БюджетныеОперацииДокумент.Валюта 
	|	ИНАЧЕ NULL КОНЕЦ,
	|ТаблицаПроводок.Ссылка";
	
	Запрос.Текст=ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ВалютаУпрУчета",глЗначениеПеременной("ВалютаУправленческогоУчета"));
	Запрос.УстановитьПараметр("ВалютаСценария",СтруктураДанныхШапки.СценарийВалюта);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
		
	ТабПроводокДокумента=Запрос.Выполнить().Выгрузить();
				
Возврат ТабПроводокДокумента;

КонецФункции // СформироватьПроводкиПоДаннымДокумента()

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок)
	
	ТабОборотовДокумента=СформироватьЗапросПоДаннымДокумента(СтруктураДанныхШапки);
	
	// Проверка на границу фиксации
	Для каждого СтрокаОборотов Из ТабОборотовДокумента Цикл
	
		Если (НЕ СтрокаОборотов.ГраницаФиксации=NULL ) И (СтрокаОборотов.Период<=СтрокаОборотов.ГраницаФиксации) Тогда
			
			#Если Клиент Тогда
			
			Сообщить("Попытка изменения зафиксированного плана:
			|Сценарий планирования: "+Сценарий+"
			|Статья оборотов: "+СтрокаОборотов.СтатьяОборотов+"
            |ЦФО: "+СтрокаОборотов.ЦФО+"
			|Проект: "+СтрокаОборотов.Проект+"
			|Период планирования: "+СтрокаОборотов.Период+"
			|Граница фиксации планов: "+СтрокаОборотов.ГраницаФиксации+"
			|Проведение отменено.");
			
			#КонецЕсли
			
			Отказ=Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла; 
		
	// Проверка и движения по регистру "Контролируемые значения бюджетов"
	НаборДвижений = Движения.КонтролируемыеЗначенияБюджетов;
	ТабКонтролируемыхДвижений=НаборДвижений.Выгрузить();
	ТабКонтролируемыхДвижений.Очистить();
	
	Для Каждого СтрокаОборотовДляКонтроля Из ТабОборотовДокумента Цикл
		
		ТабКонтролируемыхЗначений=ПроверкаКонтролируемыхЗначений(СтруктураДанныхШапки, СтрокаОборотовДляКонтроля);
		
		Если ТипЗнч(ТабКонтролируемыхЗначений)=Тип("Булево") И НЕ ТабКонтролируемыхЗначений Тогда
			#Если Клиент Тогда
			Сообщить("Превышение контролируемого значения. Проведение отменено!");
			#КонецЕсли
			Отказ=Истина;
			Возврат;
		Иначе
			
			Если ТабКонтролируемыхЗначений.Количество()>0 Тогда
				
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабКонтролируемыхЗначений,ТабКонтролируемыхДвижений)
												
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабКонтролируемыхДвижений.ЗаполнитьЗначения(Сценарий,"Сценарий");
	ТабКонтролируемыхДвижений.ЗаполнитьЗначения(Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании,"ИспользованиеКонтролируемогоЗначения");
	ТабКонтролируемыхДвижений.ЗаполнитьЗначения(Истина,"Активность");
		
	НаборДвижений.мТаблицаДвижений   = ТабКонтролируемыхДвижений;	
	Движения.КонтролируемыеЗначенияБюджетов.ВыполнитьДвижения();
	
	// По регистру "ОборотыБюджетов"
	Для каждого Строка из ТабОборотовДокумента цикл
		Если не Строка.СтатьяОборотов.УчетПоКоличеству Тогда
			Строка.Количество = 0;
		КонецЕсли;
		Если не Строка.СтатьяОборотов.УчетПоСумме Тогда
			Строка.СуммаУпр = 0;
			Строка.ВалютнаяСумма = 0;
			Строка.СуммаСценария = 0;
		КонецЕсли;

	КонецЦикла;


	НаборДвижений = Движения.ОборотыБюджетов;	
	НаборДвижений.мТаблицаДвижений   = ТабОборотовДокумента;
	
	Движения.ОборотыБюджетов.ВыполнитьДвижения();
	
	// По регистру бухгалтерии "Бюджетирование"
	
	ТабПроводокДокумента=СформироватьПроводкиПоДаннымДокумента(СтруктураДанныхШапки);
	ТабПроводокДокумента.Колонки.Добавить("Сценарий");
	ТабПроводокДокумента.ЗаполнитьЗначения(Сценарий,"Сценарий");
	
	
	НаборДвижений=Движения.Бюджетирование;
	
	НаборДвижений.мТаблицаДвижений   = ТабПроводокДокумента;
    Движения.Бюджетирование.ВыполнитьДвижения();
					
КонецПроцедуры // ДвиженияПоРегистрам() 

Процедура ОбработкаПроведения(Отказ, Режим)
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураДанныхШапки=Новый Структура;
	
	СтруктураДанныхШапки.Вставить("СценарийПериодичность",Сценарий.Периодичность);
	СтруктураДанныхШапки.Вставить("СценарийВалюта",Сценарий.Валюта);
	СтруктураДанныхШапки.Вставить("РегистрКурсовВалют",?(Сценарий.ИспользоватьКурсыСценария,"КурсыВалютПоСценариям","КурсыВалют"));
	СтруктураДанныхШапки.Вставить("ИспользоватьКурсыСценария",Сценарий.ИспользоватьКурсыСценария);

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапка(), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "БюджетныеОперации", СтруктураОбязательныхПолейТЧ(),Отказ, Заголовок);
	
	Если Не Отказ Тогда		
		
		ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок);
				
	КонецЕсли;		
	
	
КонецПроцедуры 

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Запрос=Новый Запрос;
	
	ТекстЗапроса="ВЫБРАТЬ
	|	БюджетныеОперацииДокумент.Период КАК Период,
	|	БюджетныеОперацииДокумент.Ссылка.Сценарий КАК Сценарий,
	|	БюджетныеОперацииДокумент.ЦФО КАК ЦФО,
	|	БюджетныеОперацииДокумент.Проект КАК Проект,
	|	БюджетныеОперацииДокумент.СтатьяОборотов КАК СтатьяОборотов,
	|	ГраницыПланирования.ГраницаФиксации КАК ГраницаФиксации
	|	ИЗ
	|	Документ.РасчетПоМоделиБюджетирования.БюджетныеОперации КАК БюджетныеОперацииДокумент
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	ГраницыПериодов.Сценарий КАК Сценарий,
	|	ГраницыПериодов.ЦФО КАК ЦФО,
	|	ГраницыПериодов.Проект КАК Проект,
	|	МАКСИМУМ(ГраницыПериодов.ГраницаФиксации) КАК ГраницаФиксации
	|ИЗ
	|		РегистрСведений.ГраницыПериодовБюджетирования КАК ГраницыПериодов				
	|				
	|СГРУППИРОВАТЬ ПО
	|	ГраницыПериодов.Сценарий,
	|	ГраницыПериодов.ЦФО,
	|	ГраницыПериодов.Проект) КАК ГраницыПланирования
	|ПО ГраницыПланирования.Сценарий=БюджетныеОперацииДокумент.Ссылка.Сценарий
	| И (БюджетныеОперацииДокумент.ЦФО = ГраницыПланирования.ЦФО ИЛИ ГраницыПланирования.ЦФО = &ПустойЦФО) 
	| И (БюджетныеОперацииДокумент.Проект = ГраницыПланирования.Проект ИЛИ ГраницыПланирования.Проект = &ПустойПроект)
	|ГДЕ
	|БюджетныеОперацииДокумент.Ссылка = &Ссылка";
	
	Запрос.Текст=ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Запрос.УстановитьПараметр("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	Запрос.УстановитьПараметр("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если (НЕ РезультатЗапроса.ГраницаФиксации=NULL ) И (РезультатЗапроса.Период<=РезультатЗапроса.ГраницаФиксации) Тогда
			
			#Если Клиент Тогда
			
			Сообщить("Попытка изменения зафиксированного плана:
			|Сценарий планирования: "+Сценарий+"
			|Статья оборотов: "+РезультатЗапроса.СтатьяОборотов+"
			|ЦФО: "+РезультатЗапроса.ЦФО+"
			|Проект: "+РезультатЗапроса.Проект+"
			|Период планирования: "+РезультатЗапроса.Период+"
			|Граница фиксации планов: "+РезультатЗапроса.ГраницаФиксации+"
			|В отмене проведения отказано.");
			
			#КонецЕсли
			
			Отказ=Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью






