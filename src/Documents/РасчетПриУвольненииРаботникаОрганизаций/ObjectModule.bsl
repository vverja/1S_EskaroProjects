Перем мНеСоздаватьДокумент Экспорт ;



////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ
//
#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой "П8",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьП8() Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// ВЫВОД ДАННЫХ В ОТЧЕТ
	
	Макет = ПолучитьМакет("П8_от_09_10_1995");
	
	СекцияФорма	  = Макет.ПолучитьОбласть("Форма");
	
	ТабДокумент.Вывести(СекцияФорма);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ61	

Функция ПечатьСредняяОтпуск() Экспорт
	ТабельныйНомер = Сотрудник.Код;

	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("СредняяОтпуск");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ЭтотОбъект);
	ОбластьШапка.Параметры.ТабельныйНомер = ТабельныйНомер;
	ОбластьШапка.Параметры.Дата = Формат(Дата,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПериодРасчетаСреднегоНачало = Формат(ПериодРасчетаСреднегоНачало,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПериодРасчетаСреднегоКонец = Формат(ПериодРасчетаСреднегоКонец,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьШапка);
	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСреднего");
	
	табСредняяКоэф = РасчетСреднего.Выгрузить();
    табСредняяКоэф.Свернуть("БазовыйПериодНачало,БазовыйПериодКонец","КоэффициентПовышенияОкладов");
    табСредняяКоэф.Сортировать("БазовыйПериодНачало Убыв");
	Коэф = КоэффициентПовышенияОкладов;
	КоэфТек = 1;
	Для Каждого СтрКоэф Из табСредняяКоэф Цикл
		Коэф = Коэф * КоэфТек;
		КоэфТек = СтрКоэф.КоэффициентПовышенияОкладов;
		СтрКоэф.КоэффициентПовышенияОкладов = Коэф;
	КонецЦикла;
    табСредняяКоэф.Сортировать("БазовыйПериодНачало");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета КАК ВидРасчета,
	|	СУММА(ОплатаПоСреднемуЗаработку.Результат) КАК Результат,
	|	СУММА(ОплатаПоСреднемуЗаработку.КалендарныеДни) КАК КалендарныеДни,
	|	СУММА(ОплатаПоСреднемуЗаработку.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(ОплатаПоСреднемуЗаработку.ОтработаноЧасов) КАК ОтработаноЧасов
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднего КАК ОплатаПоСреднемуЗаработку
	|ГДЕ
	|	ОплатаПоСреднемуЗаработку.Ссылка.Ссылка = &парамСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПоСреднемуЗаработку.ВидРасчета,
	|	ОплатаПоСреднемуЗаработку.БазовыйПериодНачало
	|УПОРЯДОЧИТЬ ПО
	|	ОплатаПоСреднемуЗаработку.ВидРасчета,
	|	ОплатаПоСреднемуЗаработку.БазовыйПериодНачало
	|ИТОГИ ПО
	|   ОБЩИЕ,
	|	БазовыйПериодНачало,
	|	ВидРасчета
	|";
	
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	табСредняя = Запрос.Выполнить().Выгрузить();
	Рез = Запрос.Выполнить();
	Результат = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидРасчета");
	
	ОбластьШапкаРасетСреднего_Начало 	 = Макет.ПолучитьОбласть("ШапкаСредней|Начало");
	ОбластьШапкаРасетСреднего_ВидРасчета = Макет.ПолучитьОбласть("ШапкаСредней|ВидРасчета");
	ОбластьШапкаРасетСреднего_Конец 	 = Макет.ПолучитьОбласть("ШапкаСредней|Конец");
	
	СтрокаСреднего_Начало				 = Макет.ПолучитьОбласть("СтрокаСреднего|Начало");
	СтрокаСреднего_ВидРасчета            = Макет.ПолучитьОбласть("СтрокаСреднего|ВидРасчета");
	СтрокаСреднего_Конец                 = Макет.ПолучитьОбласть("СтрокаСреднего|Конец");
	
	ТабДокумент.Вывести(ОбластьШапкаРасетСреднего_Начало);
	
	КоличествоВставляемыхОбластей = 0;
	Пока Результат.Следующий() Цикл
		ОбластьШапкаРасетСреднего_ВидРасчета.Параметры.ВидРасчета = Результат.ВидРасчета;
		ТабДокумент.Присоединить(ОбластьШапкаРасетСреднего_ВидРасчета);
		КоличествоВставляемыхОбластей = КоличествоВставляемыхОбластей + 1;
	КонецЦикла;
	
	ОбластьДляОбъединения = ТабДокумент.Область(15,5,15,5+КоличествоВставляемыхОбластей-1);
	ОбластьДляОбъединения.Объединить();
	
	ТабДокумент.Присоединить(ОбластьШапкаРасетСреднего_Конец);
	
	ИндКоэф = 0;
	ВыборкаПериод = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БазовыйПериодНачало");
	Пока ВыборкаПериод.Следующий() Цикл
		СтрКоєф = табСредняяКоэф[ИндКоэф];
		СтрокаСреднего_Начало.Параметры.Год   =	Формат(Год(ВыборкаПериод.БазовыйПериодНачало),"ЧГ=0");	
		СтрокаДатыМесяца = "";
		Если СтрКоєф.БазовыйПериодНачало <> НачалоМесяца(СтрКоєф.БазовыйПериодНачало)
			ИЛИ СтрКоєф.БазовыйПериодКонец <> НачалоДня(КонецМесяца(СтрКоєф.БазовыйПериодКонец)) Тогда
			СтрокаДатыМесяца = "
			|("+День(СтрКоєф.БазовыйПериодНачало)+"-"+День(СтрКоєф.БазовыйПериодКонец)+")";
		КонецЕсли;
		СтрокаСреднего_Начало.Параметры.Месяц = Формат(СтрКоєф.БазовыйПериодНачало, "ДФ='ММММ'")+СтрокаДатыМесяца;
		ТабДокумент.Вывести(СтрокаСреднего_Начало);
		
		ВыборкаВидРасчета = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидРасчета");
		Пока ВыборкаВидРасчета.Следующий() Цикл
			
			СтрокаСреднего_ВидРасчета.Параметры.Результат = ВыборкаВидРасчета.Результат;
			ТабДокумент.Присоединить(СтрокаСреднего_ВидРасчета);
			
			СтрокаСреднего_Конец.Параметры.КоэффициентПовышенияОкладов = СтрКоєф.КоэффициентПовышенияОкладов;
			
		КонецЦикла;
		
		СтрокаСреднего_Конец.Параметры.ОтработаноДней = ВыборкаПериод.ОтработаноДней;	
		СтрокаСреднего_Конец.Параметры.ОтработаноЧасов = ВыборкаПериод.ОтработаноЧасов;	
		СтрокаСреднего_Конец.Параметры.КалендарныеДни = ВыборкаПериод.КалендарныеДни;	
		
		ТабДокумент.Присоединить(СтрокаСреднего_Конец);	
		ИндКоэф = ИндКоэф + 1;
	КонецЦикла;
	
	ОбластьИтогиСреднего_Начало			= Макет.ПолучитьОбласть("ИтогиСреднего|Начало");
	ОбластьИтогиСреднего_ВидРасчета		= Макет.ПолучитьОбласть("ИтогиСреднего|ВидРасчета");
	ОбластьИтогиСреднего_Конец			= Макет.ПолучитьОбласть("ИтогиСреднего|Конец");
	
	ОбластьИтогиСреднего_ВидРасчета.Параметры.Результат		= табСредняя.Итог("Результат");
	
	ТабДокумент.Вывести(ОбластьИтогиСреднего_Начало);
	Результат.Сбросить();
	ВыборкаВидРасчета = Результат;
    Пока ВыборкаВидРасчета.Следующий() Цикл
		ОбластьИтогиСреднего_ВидРасчета.Параметры.Результат = ВыборкаВидРасчета.Результат;
		ТабДокумент.Присоединить(ОбластьИтогиСреднего_ВидРасчета);
	КонецЦикла;
	
	Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Пока Выборка.Следующий() Цикл
		ОбластьИтогиСреднего_Конец.Параметры.ОтработаноДней		= Выборка.ОтработаноДней;
		ОбластьИтогиСреднего_Конец.Параметры.ОтработаноЧасов	= Выборка.ОтработаноЧасов;
		ОбластьИтогиСреднего_Конец.Параметры.КалендарныеДни		= Выборка.КалендарныеДни;
	КонецЦикла;
	ТабДокумент.Присоединить(ОбластьИтогиСреднего_Конец);
	
	ОбластьШапка2 = Макет.ПолучитьОбласть("Шапка2");
	Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ОбластьШапка2.Параметры.СредняяТекст = "Среднечасовая (по рабочим дням):";
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ОбластьШапка2.Параметры.СредняяТекст = "Среднечасовая (по рабочим часам):";
	Иначе
		ОбластьШапка2.Параметры.СредняяТекст = "Среднедневная (по календарным):";
	КонецЕсли;
	ОбластьШапка2.Параметры.СуммаСредней = СуммаСредней;
	ТабДокумент.Вывести(ОбластьШапка2);
	
	ОбластьСтроки2 = Макет.ПолучитьОбласть("СтрокаНачисления");
	
	Для Каждого СтрокаТЧ Из Начисления Цикл
		Если СтрокаТЧ.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.КомпенсацияОтпуска Тогда
			Продолжить;
		КонецЕсли;
		ОбластьСтроки2.Параметры.Заполнить(СтрокаТЧ);
		ТабДокумент.Вывести(ОбластьСтроки2);
	КонецЦикла;
	
	ОбластьИтогиНачислений = Макет.ПолучитьОбласть("ИтогиНачислений");
	ОбластьИтогиНачислений.Параметры.НормаДней = Начисления.Итог("НормаДней");
	ОбластьИтогиНачислений.Параметры.НормаЧасов = Начисления.Итог("НормаЧасов");
	ОбластьИтогиНачислений.Параметры.КалендарныеДни = Начисления.Итог("КалендарныеДни");
	ОбластьИтогиНачислений.Параметры.Результат = Начисления.Итог("Результат");
    ТабДокумент.Вывести(ОбластьИтогиНачислений);

	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Ответственный = Ответственный.ФизЛицо.Наименование;
	ТабДокумент.Вывести(ОбластьПодвал);	
	
	Возврат ТабДокумент;	
КонецФункции

Функция ПечатьСредняяПособие() Экспорт
	ТабельныйНомер = Сотрудник.Код;

	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("СредняяПособие");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ЭтотОбъект);
	ОбластьШапка.Параметры.ТабельныйНомер = ТабельныйНомер;
	ОбластьШапка.Параметры.Дата = Формат(Дата,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПериодРасчетаСреднегоДляПособияНачало = Формат(ПериодРасчетаСреднегоДляПособияНачало,"ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ПериодРасчетаСреднегоДляПособияКонец = Формат(ПериодРасчетаСреднегоДляПособияКонец,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьШапка);
	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСреднего");
	
	табСредняя = РасчетСреднего.Выгрузить();

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ОплатаПоСреднемуЗаработку.КоэффициентПовышенияОкладов КАК КоэффициентПовышенияОкладов,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета КАК ВидРасчета,
	|	СУММА(ОплатаПоСреднемуЗаработку.Результат) КАК Результат,
	|	СУММА(ОплатаПоСреднемуЗаработку.КалендарныеДни) КАК КалендарныеДни,
	|	СУММА(ОплатаПоСреднемуЗаработку.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(ОплатаПоСреднемуЗаработку.ОтработаноЧасов) КАК ОтработаноЧасов
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднегоДляПособия КАК ОплатаПоСреднемуЗаработку
	|ГДЕ
	|	ОплатаПоСреднемуЗаработку.Ссылка = &парамСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПоСреднемуЗаработку.ВидРасчета,
	|	ОплатаПоСреднемуЗаработку.БазовыйПериодНачало,
	|	ОплатаПоСреднемуЗаработку.КоэффициентПовышенияОкладов
	|ИТОГИ ПО
	|   ОБЩИЕ,
	|	БазовыйПериодНачало,
	|	КоэффициентПовышенияОкладов,
	|	ВидРасчета
	|";
	
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	табСредняя = Запрос.Выполнить().Выгрузить();
	Рез = Запрос.Выполнить();
	Результат = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидРасчета");
	
	ОбластьШапкаРасетСреднего_Начало 	 = Макет.ПолучитьОбласть("ШапкаСредней|Начало");
	ОбластьШапкаРасетСреднего_ВидРасчета = Макет.ПолучитьОбласть("ШапкаСредней|ВидРасчета");
	ОбластьШапкаРасетСреднего_Конец 	 = Макет.ПолучитьОбласть("ШапкаСредней|Конец");
	
	СтрокаСреднего_Начало				 = Макет.ПолучитьОбласть("СтрокаСреднего|Начало");
	СтрокаСреднего_ВидРасчета            = Макет.ПолучитьОбласть("СтрокаСреднего|ВидРасчета");
	СтрокаСреднего_Конец                 = Макет.ПолучитьОбласть("СтрокаСреднего|Конец");
	
	ТабДокумент.Вывести(ОбластьШапкаРасетСреднего_Начало);
	
	КоличествоВставляемыхОбластей = 0;
	Пока Результат.Следующий() Цикл
		ОбластьШапкаРасетСреднего_ВидРасчета.Параметры.ВидРасчета = Результат.ВидРасчета;
		ТабДокумент.Присоединить(ОбластьШапкаРасетСреднего_ВидРасчета);
		КоличествоВставляемыхОбластей = КоличествоВставляемыхОбластей + 1;
	КонецЦикла;
	
	ТабДокумент.Присоединить(ОбластьШапкаРасетСреднего_Конец);
	
	ВыборкаПериод = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БазовыйПериодНачало");
	Пока ВыборкаПериод.Следующий() Цикл
		СтрокаСреднего_Начало.Параметры.Год   =	Формат(Год(ВыборкаПериод.БазовыйПериодНачало),"ЧГ=0");	
		СтрокаСреднего_Начало.Параметры.Месяц = ВыборкаПериод.БазовыйПериодНачало;
		ТабДокумент.Вывести(СтрокаСреднего_Начало);
		
		ВыборкаВидРасчета = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидРасчета");
		Пока ВыборкаВидРасчета.Следующий() Цикл
			
			СтрокаСреднего_ВидРасчета.Параметры.Результат = ВыборкаВидРасчета.Результат;
			ТабДокумент.Присоединить(СтрокаСреднего_ВидРасчета);
		КонецЦикла;
		
		СтрокаСреднего_Конец.Параметры.ОтработаноДней = ВыборкаПериод.ОтработаноДней;	
		СтрокаСреднего_Конец.Параметры.ОтработаноЧасов = ВыборкаПериод.ОтработаноЧасов;	
		СтрокаСреднего_Конец.Параметры.КалендарныеДни = ВыборкаПериод.КалендарныеДни;	
		
		ТабДокумент.Присоединить(СтрокаСреднего_Конец);	
	КонецЦикла;
	
	ОбластьИтогиСреднего_Начало			= Макет.ПолучитьОбласть("ИтогиСреднего|Начало");
	ОбластьИтогиСреднего_ВидРасчета		= Макет.ПолучитьОбласть("ИтогиСреднего|ВидРасчета");
	ОбластьИтогиСреднего_Конец			= Макет.ПолучитьОбласть("ИтогиСреднего|Конец");
	
	ОбластьИтогиСреднего_ВидРасчета.Параметры.Результат		= табСредняя.Итог("Результат");
	
	ТабДокумент.Вывести(ОбластьИтогиСреднего_Начало);
	Результат.Сбросить();
	ВыборкаВидРасчета = Результат;
    Пока ВыборкаВидРасчета.Следующий() Цикл
		ОбластьИтогиСреднего_ВидРасчета.Параметры.Результат = ВыборкаВидРасчета.Результат;
		ТабДокумент.Присоединить(ОбластьИтогиСреднего_ВидРасчета);
	КонецЦикла;
	
	Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Пока Выборка.Следующий() Цикл
		ОбластьИтогиСреднего_Конец.Параметры.ОтработаноДней		= Выборка.ОтработаноДней;
		ОбластьИтогиСреднего_Конец.Параметры.ОтработаноЧасов	= Выборка.ОтработаноЧасов;
		ОбластьИтогиСреднего_Конец.Параметры.КалендарныеДни		= Выборка.КалендарныеДни;
	КонецЦикла;
	ТабДокумент.Присоединить(ОбластьИтогиСреднего_Конец);
	
	ОбластьШапка2 = Макет.ПолучитьОбласть("Шапка2");
	Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
		ОбластьШапка2.Параметры.СредняяТекст = "Среднедневная (по первичному отпуску):";
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
		ОбластьШапка2.Параметры.СредняяТекст = "Среднечасовая (по рабочим дням):";
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
		ОбластьШапка2.Параметры.СредняяТекст = "Среднечасовая (по рабочим часам):";
	КонецЕсли;
	ОбластьШапка2.Параметры.СуммаСреднейДляПособия = СуммаСреднейДляПособия;
	ТабДокумент.Вывести(ОбластьШапка2);
	
	ОбластьСтроки2 = Макет.ПолучитьОбласть("СтрокаНачисления");
	
	Для Каждого СтрокаТЧ Из Начисления Цикл
		Если СтрокаТЧ.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ВыходноеПособие Тогда
			Продолжить;
		КонецЕсли;
		ОбластьСтроки2.Параметры.Заполнить(СтрокаТЧ);
		ТабДокумент.Вывести(ОбластьСтроки2);
	КонецЦикла;
	
	ОбластьИтогиНачислений = Макет.ПолучитьОбласть("ИтогиНачислений");
	ОбластьИтогиНачислений.Параметры.НормаДней = Начисления.Итог("НормаДней");
	ОбластьИтогиНачислений.Параметры.НормаЧасов = Начисления.Итог("НормаЧасов");
	ОбластьИтогиНачислений.Параметры.КалендарныеДни = Начисления.Итог("КалендарныеДни");
	ОбластьИтогиНачислений.Параметры.Результат = Начисления.Итог("Результат");
    ТабДокумент.Вывести(ОбластьИтогиНачислений);

	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Ответственный = Ответственный.ФизЛицо.Наименование;
	ТабДокумент.Вывести(ОбластьПодвал);	
	
	ОбластьДляОбъединения = ТабДокумент.Область(16,5,16,5+КоличествоВставляемыхОбластей-1);
	ОбластьДляОбъединения.Объединить();
	Возврат ТабДокумент;	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если  ИмяМакета = "СредняяОтпуск" Тогда
		ТабДокумент = ПечатьСредняяОтпуск()
	ИначеЕсли  ИмяМакета = "СредняяПособие" Тогда
		ТабДокумент = ПечатьСредняяПособие()	
	ИначеЕсли  ИмяМакета = "П8_от_09_10_1995" Тогда
		ТабДокумент = ПечатьП8()	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Расчет при увольнении "));

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	Возврат Новый Структура("П8_от_09_10_1995, СредняяОтпуск, СредняяПособие", "Форма П-8 от 09.10.1995 (бланк)", "Расчет средней (отпуск)", "Расчет средней (пособие)");
КонецФункции // ПолучитьСтруктуруПечатныхФорм()



////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Процедура заполняет табличную часть Начисления
//
Процедура АвтозаполнениеНачисления_КомпенсацияОтпуска( ) Экспорт
	
	//НаборОсновныеНачисления = НеобходимыеДанные.НаборОсновныеНачисления;
	//СформироватьДвиженияПоНачислениям( НеобходимыеДанные.ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
	
КонецПроцедуры  // АвтозаполненияНачисления

Функция ПроверитьНачисления(строкаБолееПозднихДокументов) Экспорт
	
	ЕстьПроведенныеДокументы = Ложь;
	строкаБолееПозднихДокументов = "";
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка"	, Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации"	, ПериодРегистрации);
	Запрос.УстановитьПараметр("ДатаУвольнения"		, ДатаУвольнения);
	Запрос.УстановитьПараметр("парамОрганизация"	, Организация);
	Запрос.УстановитьПараметр("парамСотрудник"		, Сотрудник);
	
	// Текст запроса: срез работников на конец месяца
	Текст = "
	|ВЫБРАТЬ
	|		Работники.Ссылка КАК Док
	|ИЗ  Документ.НачислениеЗарплатыРаботникамОрганизаций.РаботникиОрганизации КАК Работники
	|ГДЕ		Работники.Ссылка <> &парамСсылка 
	|	И	Работники.ФизЛицо = &парамФизЛицо
	|	И	Работники.Ссылка.Организация = &парамОрганизация
	|	И	Работники.Ссылка.ПериодРегистрации = &ПериодРегистрации
	|	И	Работники.Ссылка.Проведен	
	|		
	|ОБЪЕДИНИТЬ		
	|ВЫБРАТЬ
	|		Работники.Ссылка КАК Док
	|ИЗ  Документ.РасчетПриУвольненииРаботникаОрганизаций КАК Работники
	|ГДЕ		Работники.Ссылка <> &парамСсылка    
	|	И	Работники.ФизЛицо = &парамФизЛицо
	|	И	Работники.Организация = &парамОрганизация
	|	И	Работники.ПериодРегистрации = &ПериодРегистрации
	|	И	Работники.ДатаУвольнения = &ДатаУвольнения
	|	И	Работники.Проведен	
	|		
	|";
	
	Запрос.Текст = Текст;
	
	таб = Запрос.Выполнить().Выгрузить();
	Если таб.Количество() > 0 Тогда
		ЕстьПроведенныеДокументы = Истина;
		Для Каждого текСтрока Из таб Цикл
			строкаБолееПозднихДокументов = строкаБолееПозднихДокументов + "
			|" + текСтрока.Док;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьПроведенныеДокументы;
	
КонецФункции // ПроверитьНачисления	



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ТБЛИЧНОЙ ЧАСТИ РасчетСреднего

// Расчитывает сумму средней по значениям в ТЧ РасчетСреднего 
//
Функция РасчитатьСреднюю() Экспорт
	
	Если Не ПризнакКомпенсацииОтпуска Тогда
		
		СуммаСредней = ПервичныйОтпуск.СуммаСредней;
		
	Иначе
		
		СуммаСредней = 0;
		ОплачиваемоеВремя = 0;
		
   		Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
			ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноДней");
			
		ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
			ОплачиваемоеВремя = РасчетСреднего.Итог("ОтработаноЧасов");
			
		ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
			ОплачиваемоеВремя = РасчетСреднего.Итог("КалендарныеДни");
			
		КонецЕсли;
		
		СуммаСредней = ?(ОплачиваемоеВремя = 0 , 0, РасчетСреднего.Итог("Результат") / ОплачиваемоеВремя);
		
	КонецЕсли;
	
КонецФункции  // РасчитатьСреднюю()

Функция АвтозаполнениеРасчетСреднего() Экспорт
	Перем ДатаОкончанияСобытия;
	
	//	1. Проверка если данных для расчета средней ещ нет (человек мало проработал, начисляем по окладу)
	//
	Если  НачалоДня(ДобавитьМесяц(ПериодРасчетаСреднегоНачало,1)-1) > ПериодРасчетаСреднегоКонец Тогда
		
		// проработал меньше целого месяца
		// если есть за что платить, пользователю прийдется заполнить эти суммы вручную
		//
		СоздатьСтрокуРасчетСреднего( ПланыВидовРасчета.СреднийЗаработок.ПоОкладу, 1, НачалоМесяца(ПериодРасчетаСреднегоНачало), КонецМесяца(ПериодРасчетаСреднегоНачало));
	
		Записать();
	
		Возврат Истина;
	КонецЕсли;
	
	// 2. Данные для расчета есть - рассчитываем
	//
	
	// Сначала определим коэффициент увеличения окладща 
	// если он вдруг поменялся за время пока за человеком 
	// сохранялась средняя ЗП
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
	Запрос.УстановитьПараметр( "парамНачало",		КонецДня(ПериодРасчетаСреднегоКонец) + 1 );
	Запрос.УстановитьПараметр( "парамКонец",		ДатаУвольнения );
	
	ТекстЗапроса = " 
	|ВЫБРАТЬ
	|	КоэффициентПовышения.Период,
	|	КоэффициентПовышения.Коэффициент
	|ИЗ РегистрСведений.КоэффициентыПовышенияОкладов КАК	КоэффициентПовышения		
	|ГДЕ	КоэффициентПовышения.Сотрудник	= &парамСотрудник
	|	И	КоэффициентПовышения.Период >= &парамНачало
	|	И	КоэффициентПовышения.Период <= &парамКонец
	|";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Коэф = 1;
	Пока Выборка.Следующий() Цикл
		Коэф = Коэф * Выборка.Коэффициент;
	КонецЦикла;
	КоэффициентПовышенияОкладов = Коэф;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
	Запрос.УстановитьПараметр( "парамНачало",		ПериодРасчетаСреднегоНачало );
	Запрос.УстановитьПараметр( "парамКонец",		ПериодРасчетаСреднегоКонец );
	
	//	ВТВремя
	Если Истина Тогда
		//	Описание:
		// 		таблица периодов для расчета средней
		//		
		Начало = ПериодРасчетаСреднегоНачало;
		Конец = ПериодРасчетаСреднегоКонец;
		Запрос.УстановитьПараметр( "парамНачало1", Начало );
		Запрос.УстановитьПараметр( "парамКонец1", Мин( КонецМесяца(Начало), Конец ) );
		ТекстЗапросаВТ = " 
		|	ВЫБРАТЬ
		|		&парамНачало1	КАК БазовыйПериодНачало,
		|		&парамКонец1	КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТВремя	
		|";
		
		Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
		Инд = 2;
		Пока Начало <= Конец Цикл
			
			Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
			Запрос.УстановитьПараметр( "парамКонец"+Инд    , Мин( КонецМесяца(Начало), Конец ) );
			ТекстЗапросаВТ = ТекстЗапросаВТ + " 
			|	ОБЪЕДИНИТЬ	  
			|	ВЫБРАТЬ
			|		&парамНачало"+Инд+"	КАК БазовыйПериодНачало,
			|		&парамКонец"+Инд+"	КАК БазовыйПериодКонец
			|";	  
			Инд = Инд + 1;
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
			
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТВремя = "ВТВремя";
	КонецЕсли;
	
	//	ВТКоэффициент
	Если Истина Тогда
		//	Описание:
		// 		таблица с коффициентами для оклада и периодами (нижняя граница)
		//		
		ТекстЗапросаВТ = " 
		|	ВЫБРАТЬ
		|		КоэффициентПовышения.Период			КАК ПериодНачало,
		|		КоэффициентПовышения.Коэффициент	КАК Коэффициент,
		|		МИНИМУМ(
		|			ВЫБОР	КОГДА КоэффициентПовышения1.Период ЕСТЬ NULL 
		|						ТОГДА &парамКонец 	
		|					ИНАЧЕ ДОБАВИТЬКДАТЕ(КоэффициентПовышения1.Период,СЕКУНДА,-1) 
		|			КОНЕЦ ) КАК ПериодКонец
		|ПОМЕСТИТЬ ВТКоэффициент	
		|	ИЗ (
		|			ВЫБРАТЬ
		|				&парамНачало	КАК Период,
		|				1				КАК Коэффициент
		|	
		|	    	ОБЪЕДИНИТЬ 
		|			ВЫБРАТЬ
		|				КоэффициентПовышения.Период,
		|				КоэффициентПовышения.Коэффициент
		|			ИЗ РегистрСведений.КоэффициентыПовышенияОкладов КАК	КоэффициентПовышения		
		|			ГДЕ		КоэффициентПовышения.Сотрудник	= &парамСотрудник
		|				И	КоэффициентПовышения.Период > &парамНачало
		|	)КАК КоэффициентПовышения
		|	
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КоэффициентыПовышенияОкладов 	КАК КоэффициентПовышения1
		|	ПО		КоэффициентПовышения1.Сотрудник	= &парамСотрудник
		|		И	КоэффициентПовышения1.Период > КоэффициентПовышения.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		КоэффициентПовышения.Период,
		|		КоэффициентПовышения.Коэффициент
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТКоэффициент = "ВТКоэффициент";
	КонецЕсли;

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало >= ВсеПериоды.БазовыйПериодНачало И КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.Коэффициент ИНАЧЕ 1 КОНЕЦ	КАК Коэффициент,
	|	ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодНачало ТОГДА ВсеПериоды.БазовыйПериодНачало ИНАЧЕ КоэффициентПериоды.ПериодНачало КОНЕЦ	КАК БазовыйПериодНачало,
	|	ВЫБОР КОГДА КоэффициентПериоды.ПериодКонец <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.ПериодКонец ИНАЧЕ ВсеПериоды.БазовыйПериодКонец КОНЕЦ	КАК БазовыйПериодКонец
	|ИЗ ВТВремя КАК ВсеПериоды
	|	
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоэффициент КАК КоэффициентПериоды
	|ПО		ВсеПериоды.БазовыйПериодНачало <= КоэффициентПериоды.ПериодКонец
	|И		КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец	
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР	КОГДА КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодНачало 
	|				ТОГДА ВсеПериоды.БазовыйПериодНачало
	|			ИНАЧЕ КоэффициентПериоды.ПериодНачало КОНЕЦ УБЫВ
	|";			
	Запрос.Текст = ТекстЗапроса;
	
	мЕстьПремии = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
	мЕстьГодоваяПремия = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска, Выборка.Коэффициент, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
		Если мЕстьПремии  Тогда
			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямОтпуска, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуска, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
		КонецЕсли;
		Если мЕстьГодоваяПремия Тогда
			СоздатьСтрокуРасчетСреднего(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
		КонецЕсли;
		
	КонецЦикла;
	
	Записать();
	
КонецФункции  // АвтозаполнениеРасчетСреднего()

Функция РассчитатьРасчетСреднего(КомментироватьРасчет = Ложь) Экспорт
	
	// очистить расчитываемые поля в ТЧ РасчетСреднего
	Для каждого ТекущаяСтрока Из РасчетСреднего Цикл
		
		Если ТекущаяСтрока.Авторасчет Тогда
			ТекущаяСтрока.Результат = 0;
			ТекущаяСтрока.РезультатПолный = 0;
			
			ТекущаяСтрока.ОтработаноДней = 0;
			ТекущаяСтрока.ОтработаноЧасов = 0;
			ТекущаяСтрока.КалендарныеДни = 0;
			ТекущаяСтрока.НормаДней = 0;
			ТекущаяСтрока.НормаЧасов = 0;
		КонецЕсли;
		
	КонецЦикла;
	Записать();
	
	// 1. Если расчет по Окладу
	//
	Если  РасчетСреднего.Количество() > 0 И РасчетСреднего[0].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоОкладу Тогда
		
		ПараметрыОклада = ПроведениеРасчетов.ПолучитьПараметыОклада(ПериодРасчетаСреднегоКонец, Сотрудник);
		РасчетСреднего[0].Результат			= ПараметрыОклада["Оклад"];
		РасчетСреднего[0].ОтработаноДней	= ПараметрыОклада["НормаДней"];
		РасчетСреднего[0].ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
		РасчетСреднего[0].КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
		
		РасчитатьСреднюю();
		Записать();
		Возврат Истина;
		
	КонецЕсли;
	
	// 2. Стандартный расчет
    //
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	Отказ = Ложь;
	НаборСредних = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборСредних.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоСредним.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, НаборСредних);
		КонецЕсли;
		
	КонецЦикла;
	НаборСредних.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения
		НаборСредних.Очистить();
		НаборСредних.Записать();
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	ОсновнойВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска;
	тКоэффициентПовышенияОкладов = КоэффициентПовышенияОкладов;
	
	Выборка = ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка).Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = РасчетСреднего.Получить( Выборка.НомерСтроки - 1 );
		
		Если НЕ СтрокаТабличнойЧасти.Авторасчет Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Результат				= Окр(Выборка.Результат,2) * тКоэффициентПовышенияОкладов;
		СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
		
		СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
		СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
		Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
			И СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска Тогда
			СтрокаТабличнойЧасти.КалендарныеДни		= 1 + День(Выборка.БазовыйПериодКонец) - День(Выборка.БазовыйПериодНачало);
		Иначе
			СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДни;
		КонецЕсли;
		СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
		СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
		
		Если Выборка.ВидРасчета = ОсновнойВидРасчета Тогда
			тКоэффициентПовышенияОкладов = тКоэффициентПовышенияОкладов * Выборка.КоэффициентПовышенияОкладов;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборСредних.Очистить();
	НаборСредних.Записать();
	
	РасчитатьСреднюю();
	Записать();
	
КонецФункции  // РассчитатьРасчетСреднего()

Функция СоздатьСтрокуРасчетСреднего( ВидРасч, Коэффициент, БазовыйПериодНачало, БазовыйПериодКонец) 
	
	// строку втавляем на первую позицию, потому что коэффициент считали в обратном порядке
	СтрокаТабличнойЧасти =  РасчетСреднего.Вставить(0);
	
	СтрокаТабличнойЧасти.Авторасчет 			= Истина;
	СтрокаТабличнойЧасти.ВидРасчета 			= ВидРасч;
	СтрокаТабличнойЧасти.БазовыйПериодНачало 	= БазовыйПериодНачало;
	СтрокаТабличнойЧасти.БазовыйПериодКонец 	= БазовыйПериодКонец;
	СтрокаТабличнойЧасти.КоэффициентПовышенияОкладов = Коэффициент;
	
КонецФункции  // СоздатьСтрокуРасчетСреднего()


Процедура ПолучитьПериодПоРаботнику() Экспорт
	Перем ДатаОкончанияСобытия, ДатаПриемаПервыйРабочийДень;
	
	// -1- работает дольше 12-и месяцев
	// -2- работает меньше 12 месяцев, но дольше 1-го месяца
	// -3- работает меньше целого месяца, но в отпуск не в первый рабочий день - заполняеи реальный период с даты приема
	// -4- в отпуск в первый рабочий день, нет начисленной зарплаты
	
	ДатаНачалаСобытия = ДатаУвольнения;
	ДатаПриема = ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень);
	
	Если Не ЗначениеЗаполнено(ДатаПриема) Тогда
		Возврат;
	КонецЕсли;

	НеПроработалЦелогоМесяца = Ложь;
	
	Если ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев)>= ДатаПриема Тогда
		// -1- работает дольше 12-и месяцев
		ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -ЧислоМесяцев);
		ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		
	ИначеЕсли КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1)) >= ДатаПриема Тогда
		//-2-3-
		Если ДатаПриемаПервыйРабочийДень Тогда
			// -2- работает меньше 12 месяцев, но дольше 1-го месяца
			// если дата приема первый рабочий день месяца, то месяц считаем целым
			ПериодРасчетаСреднегоНачало	= ДатаПриема;	
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		ИначеЕсли ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -1) > ДатаПриема Тогда
			// -2- работает меньше 12 месяцев, но дольше 1-го месяца
			// если дата приема не первый рабочий день месяца, но есть целые отработанные месяцы
			ПериодРасчетаСреднегоНачало	= ДобавитьМесяц(НачалоМесяца(ДатаПриема),1);
			ПериодРасчетаСреднегоКонец	= НачалоДня(НачалоМесяца(ДатаНачалаСобытия)-1);
		Иначе
			// -3- работает меньше целого месяца, но в отпуск не в первый рабочий день 
			//    - заполняеи реальный период с даты приема
			ПериодРасчетаСреднегоНачало	= ДатаПриема;	
			ПериодРасчетаСреднегоКонец	= НачалоДня(ДатаНачалаСобытия-1);
			НеПроработалЦелогоМесяца = Истина;
		КонецЕсли;
		
	ИначеЕсли ДатаНачалаСобытия = ДатаПриема Тогда
		// -4- в отпуск в первый рабочий день, нет начисленной зарплаты
		ПериодРасчетаСреднегоНачало	= ДатаПриема;
		ПериодРасчетаСреднегоКонец	= ДатаПриема;
		НеПроработалЦелогоМесяца = Истина;
		
	Иначе
		// -3- работает меньше целого месяца, но в отпуск не в первый рабочий день 
		//    - заполняеи реальный период с даты приема
		// прием в месяце ухода в отпуск
		ПериодРасчетаСреднегоНачало	= ДатаПриема;	
		ПериодРасчетаСреднегоКонец	= НачалоДня(ДатаНачалаСобытия-1);
		НеПроработалЦелогоМесяца = Истина;
		
	КонецЕсли;

КонецПроцедуры // ПолучитьПериодПоРаботнику()

Функция		ПолучитьДанныеОПриеме(ДатаПриемаПервыйРабочийДень)
	
	ЭтоПервыйРабочийДень = Ложь;
	ДатаПриема = Дата('00010101');
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|       ПриемРаботников.ДатаПриема КАК ДатаПриема,
	|		СУММА(ЕСТЬNULL(Графики.ОсновноеЗначение,0)) КАК ОтработаноДнейСНачалаМесяца
	|   ИЗ (
	|		ВЫБРАТЬ 
	|          	МИНИМУМ(Работники.Период) КАК ДатаПриема
	|		ИЗ РегистрСведений.РаботникиОрганизаций КАК Работники
	|   	ГДЕ Работники.Сотрудник = &парамСотрудник
	|       ) КАК ПриемРаботников
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники 
	|   	ПО		Работники.Сотрудник = &парамСотрудник
	|			И	Работники.Период = ПриемРаботников.ДатаПриема
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК Графики
	|   	ПО  	Графики.Дата >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	|			И	Графики.Дата < Работники.Период
	|			И	Графики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|			// индивидуальные графики и табели не анализируем, так как нас интерисует только норма времени
	|			И	ВЫБОР КОГДА Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА  Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|                     ИНАЧЕ Работники.ГрафикРаботы
	|				КОНЕЦ = Графики.ГрафикРаботы
	|    СГРУППИРОВАТЬ ПО
	|       ПриемРаботников.ДатаПриема
	|";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПриема = Выборка.ДатаПриема;
		ДатаПриемаПервыйРабочийДень = Выборка.ОтработаноДнейСНачалаМесяца = 0;
	КонецЕсли;

	Возврат ДатаПриема;
	
КонецФункции  // ПолучитьДанныеОПриеме()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ТБЛИЧНОЙ ЧАСТИ РасчетСреднего

// Расчитывает сумму средней по значениям в ТЧ РасчетСреднего 
//
Функция РасчитатьСреднююДляПособия() Экспорт
	
		СуммаСреднейДляПособия = 0;
		ОплачиваемоеВремя = 0;
		
   		Если ВидУчетаВремениДляПособия = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
			ОплачиваемоеВремя = РасчетСреднегоДляПособия.Итог("ОтработаноДней");
			
		ИначеЕсли ВидУчетаВремениДляПособия = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
			ОплачиваемоеВремя = РасчетСреднегоДляПособия.Итог("ОтработаноЧасов");
			
		Иначе
			ОплачиваемоеВремя = РасчетСреднегоДляПособия.Итог("КалендарныеДни");
			
		КонецЕсли;
		
		СуммаСреднейДляПособия = ?(ОплачиваемоеВремя = 0 , 0, РасчетСреднегоДляПособия.Итог("Результат") / ОплачиваемоеВремя);
	
КонецФункции  // РасчитатьСреднююДляПособия()

Функция АвтозаполнениеРасчетСреднегоДляПособия() Экспорт
	
	//	1. Проверка если данных для расчета средней ещ нет (человек мало проработал, начисляем по окладу)
	//
	Если  НачалоДня(ДобавитьМесяц(ПериодРасчетаСреднегоДляПособияНачало,1)-1) > ПериодРасчетаСреднегоДляПособияКонец Тогда
		
		// проработал меньше целого месяца
		// если есть за что платить, пользователю прийдется заполнить эти суммы вручную
		//
		СоздатьСтрокуРасчетСреднегоДляПособия( ПланыВидовРасчета.СреднийЗаработок.ПоОкладу, 1, НачалоМесяца(ПериодРасчетаСреднегоДляПособияНачало), КонецМесяца(ПериодРасчетаСреднегоДляПособияНачало));
	
		Записать();
	
		Возврат Истина;
	КонецЕсли;

	
	// 2. Данные для расчета есть - рассчитываем
	//
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр( "парамСотрудник",	Сотрудник );
	Запрос.УстановитьПараметр( "парамНачало",		ПериодРасчетаСреднегоДляПособияНачало );
	Запрос.УстановитьПараметр( "парамКонец",		ПериодРасчетаСреднегоДляПособияКонец );
	
	//	ВТВремя
	Если Истина Тогда
		//	Описание:
		// 		таблица периодов для расчета средней
		//		
		Начало = ПериодРасчетаСреднегоДляПособияНачало;
		Конец = ПериодРасчетаСреднегоДляПособияКонец;
		Запрос.УстановитьПараметр( "парамНачало1", Начало );
		Запрос.УстановитьПараметр( "парамКонец1", Мин( КонецМесяца(Начало), Конец ) );
		ТекстЗапросаВТ = " 
		|	ВЫБРАТЬ
		|		&парамНачало1	КАК БазовыйПериодНачало,
		|		&парамКонец1	КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТВремя	
		|";
		
		Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
		Инд = 2;
		Пока Начало <= Конец Цикл
			
			Запрос.УстановитьПараметр( "парамНачало"+Инд    , Начало );
			Запрос.УстановитьПараметр( "парамКонец"+Инд    , Мин( КонецМесяца(Начало), Конец ) );
			ТекстЗапросаВТ = ТекстЗапросаВТ + " 
			|	ОБЪЕДИНИТЬ	  
			|	ВЫБРАТЬ
			|		&парамНачало"+Инд+"	КАК БазовыйПериодНачало,
			|		&парамКонец"+Инд+"	КАК БазовыйПериодКонец
			|";	  
			Инд = Инд + 1;
			Начало = ДобавитьМесяц(НачалоМесяца(Начало),1);
			
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТВремя = "ВТВремя";
	КонецЕсли;
	
	//	ВТКоэффициент
	Если Истина Тогда
		//	Описание:
		// 		таблица с коффициентами для оклада и периодами (нижняя граница)
		//		
		ТекстЗапросаВТ = " 
		|	ВЫБРАТЬ
		|		КоэффициентПовышения.Период			КАК ПериодНачало,
		|		КоэффициентПовышения.Коэффициент	КАК Коэффициент,
		|		МИНИМУМ(
		|			ВЫБОР	КОГДА КоэффициентПовышения1.Период ЕСТЬ NULL 
		|						ТОГДА &парамКонец 	
		|					ИНАЧЕ ДОБАВИТЬКДАТЕ(КоэффициентПовышения1.Период,СЕКУНДА,-1) 
		|			КОНЕЦ ) КАК ПериодКонец
		|ПОМЕСТИТЬ ВТКоэффициент	
		|	ИЗ (
		|			ВЫБРАТЬ
		|				&парамНачало	КАК Период,
		|				1				КАК Коэффициент
		|	
		|	    	ОБЪЕДИНИТЬ 
		|			ВЫБРАТЬ
		|				КоэффициентПовышения.Период,
		|				КоэффициентПовышения.Коэффициент
		|			ИЗ РегистрСведений.КоэффициентыПовышенияОкладов КАК	КоэффициентПовышения		
		|			ГДЕ		КоэффициентПовышения.Сотрудник	= &парамСотрудник
		|				И	КоэффициентПовышения.Период > &парамНачало
		|	)КАК КоэффициентПовышения
		|	
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КоэффициентыПовышенияОкладов 	КАК КоэффициентПовышения1
		|	ПО		КоэффициентПовышения1.Сотрудник	= &парамСотрудник
		|		И	КоэффициентПовышения1.Период > КоэффициентПовышения.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		КоэффициентПовышения.Период,
		|		КоэффициентПовышения.Коэффициент
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТКоэффициент = "ВТКоэффициент";
	КонецЕсли;

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало >= ВсеПериоды.БазовыйПериодНачало И КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.Коэффициент ИНАЧЕ 1 КОНЕЦ	КАК Коэффициент,
	|	ВЫБОР КОГДА КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодНачало ТОГДА ВсеПериоды.БазовыйПериодНачало ИНАЧЕ КоэффициентПериоды.ПериодНачало КОНЕЦ	КАК БазовыйПериодНачало,
	|	ВЫБОР КОГДА КоэффициентПериоды.ПериодКонец <= ВсеПериоды.БазовыйПериодКонец ТОГДА КоэффициентПериоды.ПериодКонец ИНАЧЕ ВсеПериоды.БазовыйПериодКонец КОНЕЦ	КАК БазовыйПериодКонец
	|ИЗ ВТВремя КАК ВсеПериоды
	|	
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоэффициент КАК КоэффициентПериоды
	|ПО		ВсеПериоды.БазовыйПериодНачало <= КоэффициентПериоды.ПериодКонец
	|И		КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодКонец	
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР	КОГДА КоэффициентПериоды.ПериодНачало <= ВсеПериоды.БазовыйПериодНачало 
	|				ТОГДА ВсеПериоды.БазовыйПериодНачало
	|			ИНАЧЕ КоэффициентПериоды.ПериодНачало КОНЕЦ УБЫВ
	|";			
	Запрос.Текст = ТекстЗапроса;
	
	мЕстьПремии = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
	мЕстьГодоваяПремия = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СоздатьСтрокуРасчетСреднегоДляПособия(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку, Выборка.Коэффициент, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
		Если мЕстьПремии  Тогда
			СоздатьСтрокуРасчетСреднегоДляПособия(ПланыВидовРасчета.СреднийЗаработок.ПоПремиям, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
			СоздатьСтрокуРасчетСреднегоДляПособия(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
		КонецЕсли;
		Если мЕстьГодоваяПремия Тогда
			СоздатьСтрокуРасчетСреднегоДляПособия(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии, 0, Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
		КонецЕсли;
		
	КонецЦикла;
	
	Записать();
	
КонецФункции  // АвтозаполнениеРасчетСреднегоДляПособия()

Функция РассчитатьРасчетСреднегоДляПособия(КомментироватьРасчет = Ложь) Экспорт
	
	// очистить расчитываемые поля в ТЧ РасчетСреднего
	Для каждого ТекущаяСтрока Из РасчетСреднегоДляПособия Цикл
		
		Если ТекущаяСтрока.Авторасчет Тогда
			ТекущаяСтрока.Результат = 0;
			ТекущаяСтрока.РезультатПолный = 0;
			
			ТекущаяСтрока.ОтработаноДней = 0;
			ТекущаяСтрока.ОтработаноЧасов = 0;
			ТекущаяСтрока.КалендарныеДни = 0;
			ТекущаяСтрока.НормаДней = 0;
			ТекущаяСтрока.НормаЧасов = 0;
		КонецЕсли;
		
	КонецЦикла;
	Записать();
	
	// 1. Если расчет по Окладу
	//
	Если  РасчетСреднегоДляПособия.Количество() > 0 И РасчетСреднегоДляПособия[0].ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоОкладу Тогда
		
		ПараметрыОклада = ПроведениеРасчетов.ПолучитьПараметыОклада(ПериодРасчетаСреднегоКонец, Сотрудник);
		РасчетСреднегоДляПособия[0].Результат			= ПараметрыОклада["Оклад"];
		РасчетСреднегоДляПособия[0].ОтработаноДней	= ПараметрыОклада["НормаДней"];
		РасчетСреднегоДляПособия[0].ОтработаноЧасов	= ПараметрыОклада["НормаЧасов"];
		РасчетСреднегоДляПособия[0].КалендарныеДни	= ПараметрыОклада["КалендарныеДни"];
		
		РасчитатьСреднююДляПособия();
		Записать();
		Возврат Истина;
		
	КонецЕсли;
	
	// 2. Стандартный расчет
    //
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднегоДляПособия().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	Отказ = Ложь;
	НаборСредних = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборСредних.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоСредним.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиРасчетСреднегоДляПособия(ВыборкаПоСредним, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуРасчетаСреднегоДляПособия(ВыборкаПоСредним, НаборСредних);
		КонецЕсли;
		
	КонецЦикла;
	НаборСредних.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения
		НаборСредних.Очистить();
		НаборСредних.Записать();
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	
	ОсновнойВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	КоэфПовышенияОкладов = 1;
	тКоэффициентПовышенияОкладов = 1;
	
	Выборка = ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка).Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидРасчета = ОсновнойВидРасчета Тогда
			КоэфПовышенияОкладов = КоэфПовышенияОкладов * тКоэффициентПовышенияОкладов;
			тКоэффициентПовышенияОкладов = Выборка.КоэффициентПовышенияОкладов;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = РасчетСреднегоДляПособия.Получить( Выборка.НомерСтроки - 1 );
		
		Если НЕ СтрокаТабличнойЧасти.Авторасчет Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Результат				= Выборка.Результат * КоэфПовышенияОкладов;
		СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
		
		СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
		СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
		Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками
			И СтрокаТабличнойЧасти.ВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку Тогда
			СтрокаТабличнойЧасти.КалендарныеДни		= 1 + День(Выборка.БазовыйПериодКонец) - День(Выборка.БазовыйПериодНачало);
		Иначе
			СтрокаТабличнойЧасти.КалендарныеДни		= Выборка.КалендарныеДни;
		КонецЕсли;
		СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
		СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
		
	КонецЦикла;
	
	НаборСредних.Очистить();
	НаборСредних.Записать();
	
	РасчитатьСреднююДляПособия();
	Записать();
	
КонецФункции  // РассчитатьРасчетСреднегоДляПособия()

Функция СоздатьСтрокуРасчетСреднегоДляПособия( ВидРасч, Коэффициент, БазовыйПериодНачало, БазовыйПериодКонец) 
	
	// строку втавляем на первую позицию, потому что коэффициент считали в обратном порядке
	СтрокаТабличнойЧасти =  РасчетСреднегоДляПособия.Вставить(0);
	
	СтрокаТабличнойЧасти.Авторасчет 			= Истина;
	СтрокаТабличнойЧасти.ВидРасчета 			= ВидРасч;
	СтрокаТабличнойЧасти.БазовыйПериодНачало 	= БазовыйПериодНачало;
	СтрокаТабличнойЧасти.БазовыйПериодКонец 	= БазовыйПериодКонец;
	СтрокаТабличнойЧасти.КоэффициентПовышенияОкладов = Коэффициент;
	
КонецФункции  // СоздатьСтрокуРасчетСреднегоДляПособия()

Функция ПолучитьПериодПоРаботникуДляПособия() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ДатаУвольнения );
	Запрос.УстановитьПараметр("ЧислоМесяцев",		ЧислоМесяцевДляПособия );
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		АктуальныйГрафик.ГрафикРаботы			КАК ГрафикРаботы,   
	|
	|		// -1- работает дольше 2-х месяцев
	|		// -2- работает меньше 2 месяцев, но дольше 1-го месяца
	|		// -3- работает меньше целого месяца, но заболел не в первый рабочий день, пока считаем как -4-
	|		// -4- заболел в первый рабочий день
	|   	ВЫБОР
	|		// -1-
	|		КОГДА		ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, ВЫБОР КОГДА &ЧислоМесяцев = 0 ТОГДА 0 ИНАЧЕ -&ЧислоМесяцев КОНЕЦ) >= ПриказОприеме.ДатаПриема
	|   		ТОГДА	ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, ВЫБОР КОГДА &ЧислоМесяцев = 0 ТОГДА 0 ИНАЧЕ -&ЧислоМесяцев КОНЕЦ) 
	|		// -2-
	|   	КОГДА		ПриказОприеме.ДатаПриема < ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -1)
	|	   		ТОГДА	ВЫБОР	КОГДА ПриказОприеме.ДатаПриема = НАЧАЛОПЕРИОДА(ПриказОприеме.ДатаПриема, МЕСЯЦ)
	|	            	 	ТОГДА ПриказОприеме.ДатаПриема 				// принят в первый день месяца
	|	            		ИНАЧЕ ДОБАВИТЬКДАТЕ( КОНЕЦПЕРИОДА(ПриказОприеме.ДатаПриема, МЕСЯЦ), СЕКУНДА, 1 ) // иначе это не полный месяц и берем первое число следующего
	|	            КОНЕЦ
	|		// -3-
	|		// -4-
	|		ИНАЧЕ	ПриказОприеме.ДатаПриема	
	|   	КОНЕЦ                                                 КАК ПериодРасчетаСреднегоНачало,
	|	
	|   	ВЫБОР
	|		// -1-
	|   	КОГДА		ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, ВЫБОР КОГДА &ЧислоМесяцев = 0 ТОГДА 0 ИНАЧЕ -&ЧислоМесяцев КОНЕЦ) >= ПриказОприеме.ДатаПриема
	|   		ТОГДА	КОНЕЦПЕРИОДА( ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), СЕКУНДА, -(1)), МЕСЯЦ ) 
	|		// -2-
	|   	КОГДА		ПриказОприеме.ДатаПриема < ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -1)
	|	   		ТОГДА	КОНЕЦПЕРИОДА(  ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), СЕКУНДА, -1 ), МЕСЯЦ )  
	|		// -3-
	|		// -4-
	|		ИНАЧЕ	КОНЕЦПЕРИОДА( ПриказОприеме.ДатаПриема, МЕСЯЦ )	
	|   	КОНЕЦ                                                 КАК ПериодРасчетаСреднегоКонец
	|
	|	ИЗ ( 
	|		ВЫБРАТЬ 
	|          	МИНИМУМ(Работники.Период) КАК ДатаПриема
	|		ИЗ РегистрСведений.РаботникиОрганизаций КАК Работники
	|   	ГДЕ Работники.Сотрудник = &парамСотрудник
	|     ) КАК ПриказОприеме
	|
	|
	|//-----------------------
	|// данные для расчета
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник) КАК АктуальныйГрафик
	|ПО ИСТИНА
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьПериодПоРаботникуДляПособия()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ТБЛИЧНОЙ ЧАСТИ Начисления

Процедура АвтозаполнениеНачисления() Экспорт
	
	// данные нормы календаря помесячно
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамРегистратор",	Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ДатаУвольнения);
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник);
	
	// запрос только по соновному назначению, включая внутреннее совместительство
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Основной.Дата,
	|	Основной.ПериодРегистрации,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|	Основной.Сотрудник,
	|	Основной.СуммаСредней,
	|	Основной.ДнейКомпенсацииУдержанияОтпуска,
	|	Основной.СуммаСреднейДляПособия,
	|	Основной.МесяцевВыходногоПособия,
	|   ВЫБОР	КОГДА Основной.ВидУчетаВремениДляПособия = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимДням)
	|				ТОГДА ЕСТЬNULL(ВремяДляПособия.НормаДней,0)/ЕСТЬNULL(МесяцыДляПособия.КвоМесяцев,1)
	|   		КОГДА Основной.ВидУчетаВремениДляПособия = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
	|				ТОГДА ЕСТЬNULL(ВремяДляПособия.НормаЧасов,0)/ЕСТЬNULL(МесяцыДляПособия.КвоМесяцев,1)
	|   		ИНАЧЕ
	|				ЕСТЬNULL(ВремяДляПособия.КалендарныеДни,0)/ЕСТЬNULL(МесяцыДляПособия.КвоМесяцев,1)
	|   КОНЕЦ КАК СреднееВремяДляПособия,
	|	Основной.ВидУчетаВремениДляСредней,
	|  	Основной.ПериодРасчетаСреднегоНачало	КАК ПериодРасчетаСреднегоНачало,
	|  	Основной.ПериодРасчетаСреднегоКонец		КАК ПериодРасчетаСреднегоКонец,
	|
	|	Работники.Сотрудник 						КАК Назначение,
	|	Работники.ПодразделениеОрганизации			КАК ПодразделениеОрганизации,
	|	Работники.ГрафикРаботы 						КАК ГрафикРаботы               
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+" КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &парамСотрудник ) КАК Работники
	|ПО		ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ СУММА(Основной.КвоМесяцев) КАК КвоМесяцев
	|	ИЗ ( 
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
	|			1 КАК КвоМесяцев
	|		ИЗ Документ."+Метаданные().Имя+".РасчетСреднегоДляПособия КАК Средняя
	|	ГДЕ Средняя.Ссылка = &парамРегистратор	
	|   )КАК Основной
	|) КАК МесяцыДляПособия
	|ПО		ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ 
	|		СУММА(Средняя.НормаДней) КАК НормаДней, 
	|		СУММА(Средняя.НормаЧасов) КАК НормаЧасов,
	|		СУММА(Средняя.КалендарныеДни) КАК КалендарныеДни
	|	ИЗ Документ."+Метаданные().Имя+".РасчетСреднегоДляПособия КАК Средняя
	|	ГДЕ Средняя.Ссылка = &парамРегистратор	
	|) КАК ВремяДляПособия
	|ПО		ИСТИНА
	|
	|ГДЕ Основной.Ссылка = &парамРегистратор	
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПризнакКомпенсацииОтпуска Тогда
			ВидРасчетаКомпенсации = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.КомпенсацияОтпуска;
		Иначе
			ВидРасчетаКомпенсации = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ВозвратОтпуска;
		КонецЕсли;
		СоздатьСтрокуНачислений( Выборка, ВидРасчетаКомпенсации, Выборка.СуммаСредней, Выборка.ДнейКомпенсацииУдержанияОтпуска );
		СоздатьСтрокуНачислений( Выборка, ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ВыходноеПособие, Выборка.СуммаСреднейДляПособия, Выборка.МесяцевВыходногоПособия*Выборка.СреднееВремяДляПособия );
		
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры  // АвтозаполненияНачисления

Функция СоздатьСтрокуНачислений( Выборка, ВидРасч, Показатель1, Показатель2 ) 
	
		НоваяСтрока = Начисления.Добавить();
		
		// Свойства
		НоваяСтрока.Авторасчет			= Истина;
		НоваяСтрока.ДатаНачала			= ДатаУвольнения;
		НоваяСтрока.ДатаОкончания		= ДатаУвольнения;
		НоваяСтрока.БазовыйПериодНачало	= ДатаУвольнения;
		НоваяСтрока.БазовыйПериодКонец	= ДатаУвольнения;
		НоваяСтрока.ВидРасчета			= ВидРасч;
		
		// Измерения
		НоваяСтрока.Сотрудник	= Выборка.Сотрудник;
		НоваяСтрока.Назначение	= Выборка.Назначение;
		
		// Реквизиты
		ПроведениеРасчетов.ПроставитьДанныеСтроки(Сотрудник, Выборка.Назначение, НоваяСтрока.ДатаНачала, ПериодРегистрации, ВидРасч, НоваяСтрока);
		НоваяСтрока.ВидУчетаВремениДляСредней	= Выборка.ВидУчетаВремениДляСредней;
		НоваяСтрока.Показатель1					= Показатель1;
		НоваяСтрока.Показатель2					= Показатель2;
		
	
КонецФункции  // СоздатьСтрокуРасчетСреднегоДляПособия()

Процедура РассчитатьНачисления(Сотрудники, КомментироватьРасчет = Ложь ) Экспорт
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	МассивИндексыСтрокНачисления = Новый Массив();
	
	Отказ = Ложь;
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	// Если встретим почасовое отклонение, то записываем движения в регистр РабочееВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = РегистрыНакопления.РабочееВремяРаботниковОрганизаций.СоздатьНаборЗаписей();	
	НаборЗаписейРабочееВремя.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента,ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
			ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, НаборЗаписейРабочееВремя);

			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	НаборЗаписейРабочееВремя.Записать();
	
	Если Отказ Тогда
		
		// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
		// Удаляем движения
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборЗаписейРабочееВремя.Очистить();
		НаборЗаписейРабочееВремя.Записать();
		
		Возврат;
		
	КонецЕсли;
		
	// рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
														НаборОсновныеНачисления, 
														Начисления, 
														МассивИндексыСтрокНачисления, 
														Сотрудники, 
														КомментироватьРасчет);
	
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборЗаписейРабочееВремя.Очистить();
	НаборЗаписейРабочееВремя.Записать();
	
	Записать();
	
КонецПроцедуры  // РассчитатьНачисления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Основной.Дата,
	|	Основной.ПериодРегистрации,
	|	Основной.Организация,
	|	Основной.Ссылка,
	|	Основной.Сотрудник,
	|	Основной.ДатаУвольнения,
	|	Основной.ДнейКомпенсацииУдержанияОтпуска,
	|	Основной.ПризнакКомпенсацииОтпуска,
	|	Основной.ДокументОснование,  
	|	Основной.ПервичныйОтпуск,  
	|	Основной.МесяцевВыходногоПособия
	|
	|ИЗ Документ.РасчетПриУвольненииРаботникаОрганизаций КАК Основной
	|
	|ГДЕ Основной.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачислениям()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Ссылка.Организация,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации,
	|	СтрокиНачисления.НомерСтроки,  
	|	СтрокиНачисления.Авторасчет,
	|   ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
	|
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Назначение,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета		КАК СпособРасчета,
    |
	|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодВзаиморасчетов,
	|	СтрокиНачисления.ВидРасчета.СчетУчета			КАК СчетУчета,
	|	СтрокиНачисления.Результат						КАК СуммаВзаиморасчетов,
	|
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.БазовыйПериодНачало,
	|	СтрокиНачисления.БазовыйПериодКонец,
	|	СтрокиНачисления.ДатаНачала			КАК ПериодДействияНачало,
	|	СтрокиНачисления.ДатаОкончания		КАК ПериодДействияКонец,
	|
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.КалендарныеДни,
	|
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ГрафикРаботы,
	|	СтрокиНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|	ВЫБОР	КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В(&парамСписокПочасовыхОтклонений) 
	|				ТОГДА	ИСТИНА 
	|			ИНАЧЕ		ЛОЖЬ 
	|	КОНЕЦ														КАК ЯвляетсяПочасовымОтклонением,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени, 
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.НормаЧасовЗаМесяц,
	|	СтрокиНачисления.НормаДнейЗаМесяц,
	|	СтрокиНачисления.ВидУчетаВремениДляСредней,
	|	СтрокиНачисления.ОплачиватьЧасов,
	|	СтрокиНачисления.СторнируемыйДокумент,
	|	СтрокиНачисления.Сторно
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".Начисления КАК СтрокиНачисления
	|
	|ГДЕ СтрокиНачисления.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

Функция СформироватьЗапросПоРасчетСреднего()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаРасчетСреднего.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
	|	СтрокаРасчетСреднего.Ссылка.Организация КАК Организация,
	|
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Авторасчет,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало,
	|	СтрокаРасчетСреднего.БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.КоэффициентПовышенияОкладов,
	|
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.НормаДней,
	|	СтрокаРасчетСреднего.НормаЧасов,
	|	СтрокаРасчетСреднего.КалендарныеДни,
	|
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.РезультатПолный
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".РасчетСреднего КАК СтрокаРасчетСреднего
	|
	|ГДЕ СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
	|";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

Функция СформироватьЗапросПоРасчетСреднегоДляПособия()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаРасчетСреднего.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
	|	СтрокаРасчетСреднего.Ссылка.Организация КАК Организация,
	|
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Авторасчет,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало,
	|	СтрокаРасчетСреднего.БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.КоэффициентПовышенияОкладов,
	|
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.НормаДней,
	|	СтрокаРасчетСреднего.НормаЧасов,
	|	СтрокаРасчетСреднего.КалендарныеДни,
	|
	|	ИСТИНА КАК ЭтоВыходноеПособие,
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.РезультатПолный
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".РасчетСреднегоДляПособия КАК СтрокаРасчетСреднего
	|
	|ГДЕ СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
	|";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()


Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой выполняется начисление!", Отказ);
	КонецЕсли;

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран работник!", Отказ);
	КонецЕсли;

	// ДатаУвольнения
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаУвольнения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата увольнения работника!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ);
	КонецЕсли;
	
	// Дата начала 
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ);
	Иначе
		// Дата окончания 
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ);
			Иначе	
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

Процедура ПроверитьЗаполнениеСтрокиРасчетСреднегоДляПособия(ВыборкаПоСтрокамДокумента, Отказ) Экспорт

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()


Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
 	Движение.ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидРасчета.ВидВремени, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

Процедура ДобавитьСтрокуСторно(Движения, Строка)
 	
	Движение = Движения.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Строка);
	
	Движение.ПериодРегистрации			= ПериодРегистрации;
	Движение.Сторно						= Истина;
	Движение.Авторасчет					= Истина;
	
КонецПроцедуры

Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, НаборЗаписей)
	
	Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период = ВыборкаПоНачислениям.ПериодДействияНачало;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоНачислениям.Сотрудник;
		Движение.Организация 						= ВыборкаПоНачислениям.Организация;
		Движение.ВидИспользованияРабочегоВремени 	= ВыборкаПоНачислениям.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Часов			= ВыборкаПоНачислениям.ОплачиватьЧасов;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСтрокамДокумента, НаборЗаписей) Экспорт
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры 

Процедура ДобавитьСтрокуРасчетаСреднегоДляПособия(ВыборкаПоСтрокамДокумента, НаборЗаписей) Экспорт
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры 

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоСтрокамДокумента)
	
	// ВзаиморасчетыСРаботникамиОрганизаций
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

	Если НЕ Отказ Тогда
		
		////////////////////////////////////////////////////////////////////////
		// основные Начисления
		
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
				ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям,Движения.РабочееВремяРаботниковОрганизаций);
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям);
			КонецЕсли;
			
		КонецЦикла;
		
		
		////////////////////////////////////////////////////////////////////////
		// Расчет средней
		
		ВыборкаПоСредним = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоСредним.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоСредним, Отказ);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоСредним, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	мНеСоздаватьДокумент = Ложь;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.УвольнениеИзОрганизаций") Тогда
		// Заполнение шапки
		Запрос = Новый Запрос;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	КадровыеУвольнения.НомерСтроки					КАК КомерСтроки,
		|   КадровыеУвольнения.Сотрудник					КАК Сотрудник,
		|   КадровыеУвольнения.ДатаУвольнения				КАК ДатаУвольнения,
		|   КадровыеУвольнения.СтатьяКЗОТ					КАК СтатьяКЗОТ,
		|   КадровыеУвольнения.РеквизитыДокументаОснования	КАК РеквизитыДокументаОснования,
		|   КадровыеУвольнения.КомпенсироватьДнейЕжегодногоОтпуска КАК Днейотпуска
		|
		|ИЗ	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК КадровыеУвольнения
		|
		|// физлица, по которым уже рассчитаны отпускные, нам не нужны
		|ЛЕВОЕ СОЕДИНЕНИЕ(
		|	ВЫБРАТЬ
		|		УвольненияРасчет.Сотрудник						КАК Сотрудник,
		|		УвольненияРасчет.ДокументОснование				КАК КадровыйПриказ
		|   ИЗ Документ.РасчетПриУвольненииРаботникаОрганизаций КАК УвольненияРасчет
		|   ГДЕ УвольненияРасчет.ДокументОснование = &парамРегистратор 
		|	И	УвольненияРасчет.Ссылка.Проведен
		|) КАК Увольнения
		|ПО Увольнения.КадровыйПриказ = КадровыеУвольнения.Ссылка
		|И Увольнения.Сотрудник = КадровыеУвольнения.Сотрудник
		|
		|ГДЕ	КадровыеУвольнения.Ссылка = &парамРегистратор
		|	И	Увольнения.КадровыйПриказ ЕСТЬ NULL
		|";
		
		
		Запрос.УстановитьПараметр("парамРегистратор",	Основание);
		Запрос.Текст = ТекстЗапроса;
		ТекущаяСтрока = Запрос.Выполнить().Выгрузить().ВыбратьСтроку("Выберите работника:");
		
		Если ТекущаяСтрока <> Неопределено Тогда
			
			Комментарий 	= Основание.Комментарий;
			Организация 	= Основание.Организация;
			Сотрудник		= ТекущаяСтрока.Сотрудник;
			ДатаУвольнения  = ТекущаяСтрока.ДатаУвольнения;
			
			Если ТекущаяСтрока.ДнейОтпуска > 0 Тогда
					ДнейКомпенсацииУдержанияОтпуска = ТекущаяСтрока.ДнейОтпуска;
					ПризнакКомпенсацииОтпуска = Истина;
			КонецЕсли;		
						
			ДокументОснование = Основание;
		Иначе
			мНеСоздаватьДокумент = Истина;
			//Сообщить("По всем физ.лицам уже ");
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицо(ЭтотОбъект);
	
	Если ПерерассчитываемыйДокумент = Ссылка И НЕ Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть исправлением самого себя!",Отказ);
	КонецЕсли;	
	
КонецПроцедуры


 
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ Перерасчет

Процедура Перерассчитать( Сотрудники = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
	////Если Не НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых сорудников
	СотрудникиСписок = Новый СписокЗначений;
	Если Сотрудники = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|	
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрРасчета.ВзносыВФонды.ПерерасчетВзносовВФонды КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор		
		|	
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ РегистрСведений.ЗаполнениеПлановыхНачислений КАК Перерасчет
		|ГДЕ Перерасчет.ОбъектЗаполнения = &парамРегистратор		
		|	
		|";
		
		Запрос.Текст = ТекстЗапроса;
		СотрудникиСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
	Иначе
		
		СотрудникиСписок = Сотрудники;
		
	КонецЕсли;
	
	// если не перерассчитываем никого - возврат
	Если СотрудникиСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// читаем все данные 
	НачатьТранзакцию();
	Прочитать();
	
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.РасчетСреднегоЗаработка.Прочитать();
	ЗафиксироватьТранзакцию();
	
	////////////////////////////////////////////////////////////////////////
	// Расчет средней
	Если Истина Тогда
		// перерассчитываем записи начислений
		
		ОсновнойВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
		КоэффициентПовышенияОкладов = 1;
		тКоэффициентПовышенияОкладов = 1;
		
		Выборка = ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка).Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ВидРасчета = ОсновнойВидРасчета Тогда
				КоэффициентПовышенияОкладов = КоэффициентПовышенияОкладов * тКоэффициентПовышенияОкладов;
				тКоэффициентПовышенияОкладов = Выборка.КоэффициентПовышенияОкладов;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = РасчетСреднего.Получить( Выборка.НомерСтроки - 1 );
			
			Если НЕ СтрокаТабличнойЧасти.Авторасчет Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Результат				= Выборка.Результат * КоэффициентПовышенияОкладов;
			СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
			
			СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
			СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
			СтрокаТабличнойЧасти.КалендарныеДни			= Выборка.КалендарныеДни;
			СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
			СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
			
		КонецЦикла;
		
		Движения.РасчетСреднегоЗаработка.Записать(Истина, Истина);
		
		РасчитатьСреднюю();
	КонецЕсли;
	Записать();
	
	
	////////////////////////////////////////////////////////////////////////
	// Расчет средней для пособия
	Если Истина Тогда
		// перерассчитываем записи начислений
		
		ОсновнойВидРасчета = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
		КоэффициентПовышенияОкладов = 1;
		тКоэффициентПовышенияОкладов = 1;
		
		Выборка = ПроведениеРасчетов.РассчитатьСреднююПорядок100(Ссылка).Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ВидРасчета = ОсновнойВидРасчета Тогда
				КоэффициентПовышенияОкладов = КоэффициентПовышенияОкладов * тКоэффициентПовышенияОкладов;
				тКоэффициентПовышенияОкладов = Выборка.КоэффициентПовышенияОкладов;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = РасчетСреднего.Получить( Выборка.НомерСтроки - 1 );
			
			Если НЕ СтрокаТабличнойЧасти.Авторасчет Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Результат				= Выборка.Результат * КоэффициентПовышенияОкладов;
			СтрокаТабличнойЧасти.РезультатПолный		= Выборка.РезультатПолный;
			
			СтрокаТабличнойЧасти.ОтработаноДней			= Выборка.ОтработаноДней;
			СтрокаТабличнойЧасти.ОтработаноЧасов		= Выборка.ОтработаноЧасов;
			СтрокаТабличнойЧасти.КалендарныеДни			= Выборка.КалендарныеДни;
			СтрокаТабличнойЧасти.НормаДней				= Выборка.НормаДней;
			СтрокаТабличнойЧасти.НормаЧасов				= Выборка.НормаЧасов;
			
		КонецЦикла;
		
		Движения.РасчетСреднегоЗаработка.Записать(Истина, Истина);
		
		РасчитатьСреднюю();
	КонецЕсли;
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Основные начисления
	Если Истина Тогда
		// перерассчитываем записи начислений
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", 
											Движения.ОсновныеНачисленияРаботниковОрганизаций, 
											Начисления, 
											, 
											СотрудникиСписок);
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	КонецЕсли;
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Взаиморасчеты с работниками
	Если Истина Тогда
		// сначала удалим сведения о взаиморасчетах с работниками
		ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
		ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
		
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям().Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоНачислениям)
		КонецЦикла;
		
	КонецЕсли;
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоРегиструРасчета(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоЗаполнениеПлановыхНачислений(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	ПроведениеРасчетов.УдалитьЗаписиПерерасчетаПоРегиструРасчета(Ссылка, НаборЗаписей, СотрудникиСписок);
	НаборЗаписей.Записать();
	
КонецПроцедуры // Перерассчитать()

Функция ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	// проверять необходимость перерасчета не будем,
	// если процедура запущена, то будем заполнять и пересчитывать
	
	//////////////////////////////////////////////////////////////////////////////////
	// Выполним заполнение данных из перерасчитываемого документа
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	
	// ТЧ Начисления
	Если Истина Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Назначение,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.ВидУчетаВремениДляСредней,
		|	Начисления.НормаДнейЗаМесяц,
		|	Начисления.НормаЧасовЗаМесяц,
		|	-Начисления.Результат КАК Результат,
		|	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|	-Начисления.ОтработаноДней КАК ОтработаноДней,
		|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	-Начисления.КалендарныеДни КАК КалендарныеДни,
		|	-Начисления.НормаДней КАК НормаДней,
		|	-Начисления.НормаЧасов КАК НормаЧасов,
		|	ИСТИНА КАК Сторно,
		|	Начисления.Ссылка КАК СторнируемыйДокумент,
		|	Начисления.Авторасчет КАК Авторасчет
		|ИЗ
		|	Документ.РасчетПриУвольненииРаботникаОрганизаций.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И Начисления.Ссылка.Проведен";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	// Сторнировать расчет средней не надо, так как при их расчете все расчитывается заново
	
	//////////////////////////////////////////////////////////////////////////////////
	// Выполним заполнение новых данных, по ПериодуРегистрации указанному 
	// в перерасчитываемом документе, по всем табличным частям
	Записать();
	АвтозаполнениеРасчетСреднего();
	РассчитатьРасчетСреднего();

	АвтозаполнениеРасчетСреднегоДляПособия();
	РассчитатьРасчетСреднегоДляПособия();

	АвтозаполнениеНачисления();
	
	Записать();
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьПоПерерассчитываемомуДокументу()


////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА
