
Процедура ЗаполнитьДокумент() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("парамНачало", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|		РаботникиПериод.Организация					КАК Организация,
	|		РаботникиПериод.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|		РаботникиПериод.Должность					КАК Должность,
	|		РаботникиПериод.Сотрудник					КАК Сотрудник,
	|		РаботникиПериод.Начало						КАК Начало,
	|		ВЫБОР	КОГДА РаботникиПериод.Конец ЕСТЬ NULL  ИЛИ РаботникиПериод.КОНЕЦ > &парамКонец
	|			ТОГДА &парамКонец 
	|		ИНАЧЕ  НАЧАЛОПЕРИОДА( ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА( РаботникиПериод.Конец, ДЕНЬ), ДЕНЬ, -1), ДЕНЬ)  
	|		КОНЕЦ     КАК Конец
	|       ПОМЕСТИТЬ ВТРаботникиОрганизации
	|		ИЗ (
	|				ВЫБРАТЬ
	|					РаботникиНачало.Организация					КАК Организация,
	|					РаботникиНачало.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|					РаботникиНачало.Должность					КАК Должность,
	|					РаботникиНачало.Сотрудник					КАК Сотрудник,
	|					РаботникиНачало.Начало						КАК Начало,
	|					МИНИМУМ(Работники.Период)				    КАК Конец
	|		
	|				ИЗ	(
	|		
	|					ВЫБРАТЬ
	|						Работники.Организация				КАК Организация,
	|						Работники.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|						Работники.Должность					КАК Должность,
	|						Работники.Сотрудник					КАК Сотрудник,
	|						&парамНачало						КАК Начало
	|					ИЗ	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, ) КАК Работники
	|					ГДЕ	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)                                    
	|					И	Работники.Сотрудник.ВидЗанятости В (&парамМестоРаботы)
	|		
	|					ОБЪЕДИНИТЬ ВСЕ
	|					ВЫБРАТЬ
	|						Работники.Организация				КАК Организация,
	|						Работники.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|						Работники.Должность					КАК Должность,
	|						Работники.Сотрудник					КАК Сотрудник,
	|						Работники.Период					КАК Начало
	|					ИЗ	РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ГДЕ	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 	
	|					И	Работники.Сотрудник.ВидЗанятости В (&парамМестоРаботы)                                       
	|					И	Работники.Период >= &парамНачало
	|					И	Работники.Период <= &парамКонец
	|		
	|		   	) КАК РаботникиНачало
	|		
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО		РаботникиНачало.Сотрудник = Работники.Сотрудник
	|					И	Работники.Сотрудник.ВидЗанятости В (&парамМестоРаботы)                                       
	|							И РаботникиНачало.Начало < Работники.Период
	|							И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|							ИЛИ Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение))
	|		
	|		   	СГРУППИРОВАТЬ ПО
	|					РаботникиНачало.Организация,
	|					РаботникиНачало.ПодразделениеОрганизации,
	|					РаботникиНачало.Должность,
	|					РаботникиНачало.Сотрудник,
	|					РаботникиНачало.Начало
	|		
	|		) КАК РаботникиПериод
	|
	|ГДЕ РаботникиПериод.Организация = &Организация
	|"+?(ЗначениеЗаполнено(ПодразделениеОрганизации)," И РаботникиПериод.ПодразделениеОрганизации В ИЕРАРХИИ (&ПодразделениеОрганизации)","")+"
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|		РабочиеМестаПериод.ПодразделениеОрганизации		КАК ПодразделениеОрганизации,
	|		РабочиеМестаПериод.Должность					КАК Должность,
	|		РабочиеМестаПериод.ВидСтажа						КАК ВидСтажа,
	|		РабочиеМестаПериод.ЕдиницаВремени				КАК ЕдиницаВремени,
	|		РабочиеМестаПериод.ГрафикНормы					КАК ГрафикНормы,
	|		ВЫБОР КОГДА НЕ РабочиеМестаПериод.НачалосьРанее И РабочиеМестаПериод.Сезонность И РабочиеМестаПериод.Начало >= &парамНачало И  ЕСТЬNULL(РабочиеМестаПериод.Конец, ДОБАВИТЬКДАТЕ(&парамКонец,ДЕНЬ,1))<= &парамКонец
	|			ТОГДА 1 //работа в пределах одного месяца
	|			  КОГДА РабочиеМестаПериод.Сезонность И ЕСТЬNULL(РабочиеМестаПериод.Конец, ДОБАВИТЬКДАТЕ(&парамКонец,ДЕНЬ,1)) > &парамКонец
	|			ТОГДА 2 //работа в этом месяце не закончилась
	|	  		  КОГДА РабочиеМестаПериод.Сезонность И ЕСТЬNULL(РабочиеМестаПериод.Конец, ДОБАВИТЬКДАТЕ(&парамКонец,ДЕНЬ,1)) <= &парамКонец
	|			ТОГДА 3 //работа в этом месяце закончилась
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Сезонность,	
	|		РабочиеМестаПериод.Приказ						КАК Приказ,
	|		РабочиеМестаПериод.Начало						КАК Начало,
	|		ВЫБОР	КОГДА РабочиеМестаПериод.Конец ЕСТЬ NULL  ИЛИ РабочиеМестаПериод.КОНЕЦ > &парамКонец
	|			ТОГДА &парамКонец 
	|			ИНАЧЕ  РабочиеМестаПериод.Конец  
	|		КОНЕЦ     КАК Конец
	|       ПОМЕСТИТЬ ВТРабочиеМеста
	|		ИЗ (
	|				ВЫБРАТЬ
	|					РабочиеМестаНачало.ПодразделениеОрганизации		КАК ПодразделениеОрганизации,
	|					РабочиеМестаНачало.Должность					КАК Должность,
	|					РабочиеМестаНачало.ВидСтажа						КАК ВидСтажа,
	|					РабочиеМестаНачало.ЕдиницаВремени				КАК ЕдиницаВремени,
	|					РабочиеМестаНачало.ГрафикНормы					КАК ГрафикНормы,
	|					РабочиеМестаНачало.Сезонность					КАК Сезонность,
	|					РабочиеМестаНачало.Приказ						КАК Приказ,	
	|					РабочиеМестаНачало.Начало						КАК Начало,
	|					РабочиеМестаНачало.НачалосьРанее				КАК НачалосьРанее,
	|					МИНИМУМ(РабочиеМеста.Период)				    КАК Конец
	|		
	|				ИЗ	(
	|		
	|					ВЫБРАТЬ
	|						РабочиеМеста.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|						РабочиеМеста.Должность					КАК Должность,
	|						РабочиеМеста.ВидСтажа					КАК ВидСтажа,
	|						РабочиеМеста.ЕдиницаВремени				КАК ЕдиницаВремени,
	|						РабочиеМеста.ГрафикНормы				КАК ГрафикНормы,
	|						РабочиеМеста.Сезонность					КАК Сезонность,
	|						РабочиеМеста.Регистратор				КАК Приказ,	
	|						&парамНачало							КАК Начало,
	|                       ВЫБОР КОГДА РабочиеМеста.Период < &парамНачало
	|                        ТОГДА ИСТИНА
	|                        ИНАЧЕ ЛОЖЬ КОНЕЦ КАК НачалосьРанее
	|					ИЗ	РегистрСведений.РабочиеМестаДляУчетаСпецстажа.СрезПоследних(&парамНачало, ) КАК РабочиеМеста
	|					ГДЕ	РабочиеМеста.Актуальность                                    
	|		
	|		
	|					ОБЪЕДИНИТЬ ВСЕ
	|					ВЫБРАТЬ
	|						РабочиеМеста.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|						РабочиеМеста.Должность					КАК Должность,
	|						РабочиеМеста.ВидСтажа					КАК ВидСтажа,
	|						РабочиеМеста.ЕдиницаВремени				КАК ЕдиницаВремени,
	|						РабочиеМеста.ГрафикНормы				КАК ГрафикНормы,
	|						РабочиеМеста.Сезонность					КАК Сезонность,
	|						РабочиеМеста.Регистратор				КАК Приказ,	
	|						РабочиеМеста.Период						КАК Начало,
    |						ЛОЖЬ									КАК НачалосьРанее
	|					ИЗ	РегистрСведений.РабочиеМестаДляУчетаСпецстажа КАК РабочиеМеста
	|					ГДЕ	РабочиеМеста.Актуальность 	
	|					И	РабочиеМеста.Период >= &парамНачало
	|					И	РабочиеМеста.Период <= &парамКонец
	|		
	|		
	|		   	) КАК РабочиеМестаНачало
	|		
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеМестаДляУчетаСпецстажа КАК РабочиеМеста
	|				ПО		РабочиеМестаНачало.ПодразделениеОрганизации = РабочиеМеста.ПодразделениеОрганизации
	|					И	РабочиеМестаНачало.Должность = РабочиеМеста.Должность
	|					И	РабочиеМестаНачало.ВидСтажа = РабочиеМеста.ВидСтажа
	|					И	РабочиеМестаНачало.Начало < РабочиеМеста.Период
	|					И	НЕ РабочиеМеста.Актуальность
    |
	|		
	|		   	СГРУППИРОВАТЬ ПО
	|					РабочиеМестаНачало.ПодразделениеОрганизации,
	|					РабочиеМестаНачало.Должность,
	|					РабочиеМестаНачало.ВидСтажа,
	|					РабочиеМестаНачало.ЕдиницаВремени,
	|					РабочиеМестаНачало.ГрафикНормы,
	|					РабочиеМестаНачало.Сезонность,
	|					РабочиеМестаНачало.Приказ,
	|					РабочиеМестаНачало.Начало,
	|					РабочиеМестаНачало.НачалосьРанее
	|		
	|		) КАК РабочиеМестаПериод
	|ГДЕ РабочиеМестаПериод.ПодразделениеОрганизации.Владелец = &Организация
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Работники.Сотрудник			КАК Сотрудник,
	|	РабочиеМеста.ВидСтажа		КАК ВидСтажа,
	|	РабочиеМеста.ЕдиницаВремени	КАК ЕдиницаВремени,
	|	РабочиеМеста.ГрафикНормы	КАК ГрафикНормы,
	|	РабочиеМеста.Сезонность		КАК Сезонность,
	|	РабочиеМеста.Приказ			КАК Приказ,	
	|   ВЫБОР КОГДА Работники.Начало < РабочиеМеста.Начало 
	|		ТОГДА РабочиеМеста.Начало
	|		ИНАЧЕ Работники.Начало
	|	КОНЕЦ КАК ДатаНачала,
	|   ВЫБОР КОГДА Работники.Конец < РабочиеМеста.Конец 
	|		ТОГДА Работники.Конец
	|		ИНАЧЕ РабочиеМеста.Конец
	|	КОНЕЦ КАК ДатаОкончания	
	|ИЗ ВТРаботникиОрганизации КАК Работники
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|   ВТРабочиеМеста КАК РабочиеМеста
	|   ПО Работники.ПодразделениеОрганизации = РабочиеМеста.ПодразделениеОрганизации
	|     И Работники.Должность = РабочиеМеста.Должность
	|	  И (Работники.Начало <= РабочиеМеста.Начало
	|	  ИЛИ Работники.Конец >= РабочиеМеста.Конец
	|	  ИЛИ (Работники.Начало >= РабочиеМеста.Начало И Работники.Конец <= РабочиеМеста.Конец))
	|ГДЕ НЕ РабочиеМеста.ВидСтажа ЕСТЬ NULL
	|УПОРЯДОЧИТЬ ПО Работники.Сотрудник.Наименование, РабочиеМеста.ВидСтажа.Код
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Спецстаж.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если Спецстаж.Количество() = 0 Тогда
		Сообщить("Нет информации для заполнения данных о стаже");
	КонецЕсли;	
	
КонецПроцедуры

Процедура РассчитатьДокумент() Экспорт
	
	Отказ = Ложь;
	МассивИндексыСтрокНачисления = Новый Массив();
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	ТребуетсяРасчет = ТребуетсяРасчет();
	
	Если ТребуетсяРасчет Тогда
		// создадим наборы записей для выполнения движений
		НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	КонецЕсли;
	
	// получим реквизиты табличной части
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиСтажа(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
		Если ТребуетсяРасчет И НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			//ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			Движение = НаборОсновныеНачисления.Добавить();

			Движение.ПериодРегистрации				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
			Движение.Сотрудник						= ВыборкаПоНачислениям.Сотрудник;
			Движение.Назначение						= ВыборкаПоНачислениям.Сотрудник;
			Если ВыборкаПоНачислениям.ЕдиницаВремени = Перечисления.ЕдиницыВремениУчетаСпецстажа.Часы Тогда
				Движение.ВидРасчета					= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВЧасах;
			Иначе	
				Движение.ВидРасчета					= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВДнях;
			КонецЕсли;
			Движение.ПериодДействияНачало			= ВыборкаПоНачислениям.ДатаНачала;
			Движение.ПериодДействияКонец			= КонецДня(ВыборкаПоНачислениям.ДатаОкончания);
			Движение.БазовыйПериодНачало			= ВыборкаПоНачислениям.ДатаНачала;
			Движение.БазовыйПериодКонец				= КонецДня(ВыборкаПоНачислениям.ДатаОкончания);
			Если ВыборкаПоНачислениям.ЕдиницаВремени = Перечисления.ЕдиницыВремениУчетаСпецстажа.КалендарныеДни Тогда
				//Расчет не нужен
				Движение.Авторасчет						= Ложь;
			Иначе	
				Движение.Авторасчет						= Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ТребуетсяРасчет Тогда
	
		НаборОсновныеНачисления.Записать();
		
		мСотрудники = Новый СписокЗначений;
		мСотрудники.ЗагрузитьЗначения(Спецстаж.ВыгрузитьКолонку("Сотрудник"));
			
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления,Спецстаж,МассивИндексыСтрокНачисления,мСотрудники);
		//После расчета результата и записи в табличную часть движения нам больше не нужны
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
	КонецЕсли;	
		
	//Дополнительно рассчитаем стаж по календарным дням
	Для Каждого СтрокаТЧ из Спецстаж Цикл
		Если СтрокаТЧ.ЕдиницаВремени = Перечисления.ЕдиницыВремениУчетаСпецстажа.КалендарныеДни Тогда
			СтрокаТЧ.Результат = День(СтрокаТЧ.ДатаОкончания) - День(СтрокаТЧ.ДатаНачала) + 1;
			Если НЕ ТребуетсяРасчет Тогда
				СтрокаТЧ.Норма = День(КонецМесяца(СтрокаТЧ.ДатаОкончания));
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяРасчет Тогда
		//Расчет нормы времени для стажа
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		Запрос.УстановитьПараметр("Месяц", ПериодРегистрации);
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	Спецстаж.НомерСтроки,
		|	Спецстаж.Сотрудник,
		|	Спецстаж.ВидСтажа,
		|	Спецстаж.ГрафикНормы,
		|	Спецстаж.ЕдиницаВремени,
		|	Спецстаж.ДатаНачала,
		|	Спецстаж.ДатаОкончания,
		|	ВЫБОР 
		|	 КОГДА Спецстаж.ЕдиницаВремени = ЗНАЧЕНИЕ(Перечисление.ЕдиницыВремениУчетаСпецстажа.КалендарныеДни)
		|	  ТОГДА РАЗНОСТЬДАТ(&Месяц, КОНЕЦПЕРИОДА(&Месяц,МЕСЯЦ),ДЕНЬ)+1
		|	 КОГДА Спецстаж.ЕдиницаВремени = ЗНАЧЕНИЕ(Перечисление.ЕдиницыВремениУчетаСпецстажа.Смены)
		|	  ТОГДА Графики.Дни
		|	  ИНАЧЕ Графики.Часы
		|	КОНЕЦ КАК Норма
		|	    
		|ИЗ
		|	Документ.РасчетСпецстажаРаботниковОрганизаций.Спецстаж КАК Спецстаж
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|			ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
		|			ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
		|			ГрафикиРаботыПоВидамВремени.Месяц,
		|			СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК Дни,
		|			СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК Часы
		|		ИЗ
		|			РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ГДЕ ГрафикиРаботыПоВидамВремени.Месяц = &Месяц
		|		  И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	    |
	    |
		|		СГРУППИРОВАТЬ ПО
		|		   	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
		|			ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
		|			ГрафикиРаботыПоВидамВремени.Месяц
		|	) КАК Графики		
		|	ПО Графики.ГрафикРаботы = Спецстаж.ГрафикНормы
		|	
		|ГДЕ
		|	Спецстаж.Ссылка = &ДокументСсылка
		|";

		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НС = Выборка.НомерСтроки;
			Спецстаж[НС-1].Норма = Выборка.Норма;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетСпецстажаРаботниковОрганизаций.ПериодРегистрации,
	|	РасчетСпецстажаРаботниковОрганизаций.Дата,
	|	РасчетСпецстажаРаботниковОрганизаций.Организация,
	|	РасчетСпецстажаРаботниковОрганизаций.Ссылка
	|ИЗ
	|	Документ.РасчетСпецстажаРаботниковОрганизаций КАК РасчетСпецстажаРаботниковОрганизаций
	|ГДЕ
	|	РасчетСпецстажаРаботниковОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоРаботникиОрганизации(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Спецстаж.НомерСтроки,
	|	Спецстаж.Сотрудник,
	|	Спецстаж.Сотрудник.Наименование,
	|	Спецстаж.ВидСтажа,
	|	Спецстаж.ДатаНачала,
	|	Спецстаж.ДатаОкончания,
	|	Спецстаж.ЕдиницаВремени,
	|	Спецстаж.ГрафикНормы,
	|	Спецстаж.Сезонность,
	|	Спецстаж.Приказ,
	|	Спецстаж.Результат,
	|	Спецстаж.Норма
	|ИЗ Документ.РасчетСпецстажаРаботниковОрганизаций.Спецстаж КАК Спецстаж
	|ГДЕ
	|	Спецстаж.Ссылка = &ДокументСсылка
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиСтажа(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Спецстаж"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Вид стажа
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидСтажа) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид стажа!", Отказ, Заголовок);
	ИначеЕсли НЕ ВыборкаПоСтрокамДокумента.ВидСтажа.ЛьготныйСтаж Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан не льготный вид стажа!", Отказ, Заголовок);	
	КонецЕсли;
	
	// Приказ об аттестации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Приказ) и ПериодРегистрации >= ПроведениеРасчетов.ДатаВводаЕСВ() Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан приказ об аттестации рабочего места!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала!", Отказ, Заголовок);
	ИначеЕсли НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) <> ВыборкаПоШапкеДокумента.ПериодРегистрации ТОГДА
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала не соответствует месяцу документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата окончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания!", Отказ, Заголовок);
	ИначеЕсли НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> ВыборкаПоШапкеДокумента.ПериодРегистрации ТОГДА
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания не соответствует месяцу документа!", Отказ, Заголовок);	
	ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаОкончания <= ВыборкаПоСтрокамДокумента.ДатаНачала ТОГДА
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания должна быть больше даты начала!", Отказ, Заголовок);		
	КонецЕсли;
	
	// Единица времени
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЕдиницаВремени) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана единица времени!", Отказ, Заголовок);
	КонецЕсли;
	
	// График нормы
	Если (ВыборкаПоСтрокамДокумента.ЕдиницаВремени <> Перечисления.ЕдиницыВремениУчетаСпецстажа.КалендарныеДни) И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикНормы) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан график нормы времени!", Отказ, Заголовок);
	КонецЕсли;
 		
КонецПроцедуры

Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений( ВыборкаПоШапкеДокумента, ВыборкаПоСтрокам)
	
	Движение = Движения["СпецстажРаботниковОрганизаций"].Добавить();
		
	// Измерения
	Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
	Движение.Сотрудник			= ВыборкаПоСтрокам.Сотрудник;
	Движение.ВидСтажа			= ВыборкаПоСтрокам.ВидСтажа;
	Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ДатаНачала			= ВыборкаПоСтрокам.ДатаНачала;
	
	// Ресурсы
	Движение.Результат			= ВыборкаПоСтрокам.Результат;
	Движение.Норма 				= ВыборкаПоСтрокам.Норма;
	
	// Реквизиты
	Движение.ДатаОкончания		= ВыборкаПоСтрокам.ДатаОкончания;
	Движение.ЕдиницаВремени		= ВыборкаПоСтрокам.ЕдиницаВремени;
 	Движение.Сезонность			= ВыборкаПоСтрокам.Сезонность;
	Движение.Приказ				= ВыборкаПоСтрокам.Приказ;
	
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

Функция ТребуетсяРасчет()
	
	Если СпецСтаж.Найти(Перечисления.ЕдиницыВремениУчетаСпецстажа.Смены) <> Неопределено Тогда
		Возврат Истина;
	ИначеЕсли СпецСтаж.Найти(Перечисления.ЕдиницыВремениУчетаСпецстажа.Часы) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
 
			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(Режим);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиСтажа(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений( ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации );
					
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Спецстаж,, "Сотрудник");
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(Спецстаж);
			
КонецПроцедуры // ПередЗаписью()


