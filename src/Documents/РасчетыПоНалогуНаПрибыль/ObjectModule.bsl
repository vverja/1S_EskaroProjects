Перем мУдалятьДвижения;

Перем Заголовок;

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ПериодРегистрации, СчетДоходовПоНалогуНаПрибыль, СчетРасходовПоНалогуНаПрибыль");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения табличной части "Статьи"
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСтатьи(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Статья, ВидНалоговойДеятельности, СтавкаНалога");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Статьи", СтруктураОбязательныхПолей, Отказ, Заголовок);	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСтатьи()

// Формирует проводку по расходам на сумму текущего налога на прибыль
Процедура ПровестиРасходыПоТекущемуНалогуНаПрибыль()

	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период                     = КонецМесяца(ПериодРегистрации);
	Проводка.Организация                = Организация;
	Проводка.Сумма                      = ТекущийНалогНаПрибыль;
	
	Проводка.СчетДт						= СчетРасходовПоНалогуНаПрибыль;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоРасходов1);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоРасходов2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоРасходов3);
	
	Проводка.СчетКт						= ПланыСчетов.Хозрасчетный.РасчетыПоНалогуНаПрибыль;
	
	Проводка.Содержание					= "Расход по налогу на прибыль";

КонецПроцедуры // ПровестиРасходыПоТекущемуНалогуНаПрибыль()
 
// Выполняет движения по регистрам.
//
// Параметры
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(Отказ, Заголовок)
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	Если НЕ РассчитыватьОНАиОНО Тогда
	
		// Просто показываем расходы в размере текущего налога на прибыль
		ПровестиРасходыПоТекущемуНалогуНаПрибыль();
		
		// И на этом прекращаем формирование проводок
		Возврат;
	
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Статья,
	               |	ВложенныйЗапрос.ВидНалоговойДеятельности,
	               |	СУММА(ВложенныйЗапрос.СуммаОНА) КАК СуммаОНА,
	               |	СУММА(ВложенныйЗапрос.СуммаОНО) КАК СуммаОНО,
	               |	СУММА(ВложенныйЗапрос.ОстатокОНА) КАК ОстатокОНА,
	               |	СУММА(ВложенныйЗапрос.ОстатокОНО) КАК ОстатокОНО
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		РасчетыПоНалогуНаПрибыльСтатьи.Статья КАК Статья,
	               |		РасчетыПоНалогуНаПрибыльСтатьи.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности,
	               |		РасчетыПоНалогуНаПрибыльСтатьи.СуммаОНА КАК СуммаОНА,
	               |		-(РасчетыПоНалогуНаПрибыльСтатьи.СуммаОНО) КАК СуммаОНО,
	               |		0 КАК ОстатокОНА,
	               |		0 КАК ОстатокОНО
	               |	ИЗ
	               |		Документ.РасчетыПоНалогуНаПрибыль.Статьи КАК РасчетыПоНалогуНаПрибыльСтатьи
	               |	
	               |	ГДЕ
	               |		РасчетыПоНалогуНаПрибыльСтатьи.Ссылка = &Ссылка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОстатки.Субконто1,
	               |		ХозрасчетныйОстатки.Субконто2,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОстатки.СуммаОстаток,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет = &СчетОНА, &МассивСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОстатки.Субконто1,
	               |		ХозрасчетныйОстатки.Субконто2,
	               |		0,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОстатки.СуммаОстаток
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет = &СчетОНО, &МассивСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Статья,
	               |	ВложенныйЗапрос.ВидНалоговойДеятельности
	               |
	               |ИТОГИ СУММА(СуммаОНА), СУММА(СуммаОНО), СУММА(ОстатокОНА), СУММА(ОстатокОНО) ПО
	               |	ОБЩИЕ";
				   
	//Знаки сумм в запросе:
	// 	сумма ОНА и остаток ОНА - всегда положительные числа (как остаток по активному счету)
	// 	сумма ОНО и остаток ОНО - всегда отрицательные числа (как остаток по пассивному счету)
				   
	Запрос.УстановитьПараметр("Дата", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетОНА", ПланыСчетов.Хозрасчетный.ОтсроченныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("СчетОНО", ПланыСчетов.Хозрасчетный.ОтсроченныеНалоговыеОбязательства);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивСубконто = Новый Массив(2);
	МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиОтсроченныхНалоговыхАктивовИОбязательств;
	МассивСубконто[1] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыНалоговойДеятельности;
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	
	ИтоговаяВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаПустая = Истина;
	Пока ИтоговаяВыборка.Следующий() Цикл
		
		ВыборкаПустая = Ложь;
		
		// Общий итог по запросу
	
		// Покажем финансовый результат (доход или расход) по налогу на прибыль
		РазницаОНАиОНО 		= (ИтоговаяВыборка.СуммаОНА + ИтоговаяВыборка.СуммаОНО) - 
								(ИтоговаяВыборка.ОстатокОНА + ИтоговаяВыборка.ОстатокОНО);
								
		ФинРезультатПоНалогуНаПрибыль = ТекущийНалогНаПрибыль - РазницаОНАиОНО;
						
		Если ФинРезультатПоНалогуНаПрибыль > 0 Тогда
		
			// Расход
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период                     = КонецМесяца(ПериодРегистрации);
			Проводка.Организация                = Организация;
			Проводка.Сумма                      = ФинРезультатПоНалогуНаПрибыль;
			
			Проводка.СчетДт						= СчетРасходовПоНалогуНаПрибыль;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоРасходов1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоРасходов2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоРасходов3);
			
			Проводка.СчетКт						= ПланыСчетов.Хозрасчетный.РасчетыПоНалогуНаПрибыль;
			
			Проводка.Содержание					= "Расход по налогу на прибыль";
		
		ИначеЕсли ФинРезультатПоНалогуНаПрибыль < 0 Тогда
		
			// Доход
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период                     = КонецМесяца(ПериодРегистрации);
			Проводка.Организация                = Организация;
			Проводка.Сумма                      = -ФинРезультатПоНалогуНаПрибыль;
			
			Проводка.СчетДт						= ПланыСчетов.Хозрасчетный.РасчетыПоНалогуНаПрибыль;
			
			Проводка.СчетКт						= СчетДоходовПоНалогуНаПрибыль;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоДоходов1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоДоходов2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоДоходов3);
			
			Проводка.Содержание					= "Доход от налога на прибыль";
		
		КонецЕсли; 
		
		Выборка = ИтоговаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			// Цикл по конкретным статьям и видам налоговой деятельности
			
			// Приводим остатки на счетах ОНА и ОНО в соответствие значениям, указанным в документе
			
			РазницаОНАиОНО 		= (Выборка.СуммаОНА + Выборка.СуммаОНО) - 
									(Выборка.ОстатокОНА + Выборка.ОстатокОНО);
									
			Если РазницаОНАиОНО > 0 Тогда
			
				// Прирост ОНА (уменьшение ОНО)
				
				СуммаПогашенияОНО = 0;
				
				Если Выборка.ОстатокОНО <> 0 Тогда
				
					// Имеется остаток ОНО - погасим его, сколько позволит сумма
					СуммаПогашенияОНО = Мин(РазницаОНАиОНО, -Выборка.ОстатокОНО);
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период                     = КонецМесяца(ПериодРегистрации);
					Проводка.Организация                = Организация;
					Проводка.Сумма                      = СуммаПогашенияОНО;
					
					Проводка.СчетДт						= ПланыСчетов.Хозрасчетный.ОтсроченныеНалоговыеОбязательства;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиОтсроченныхНалоговыхАктивовИОбязательств", Выборка.Статья);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", Выборка.ВидНалоговойДеятельности);
					
					Проводка.СчетКт						= ПланыСчетов.Хозрасчетный.РасчетыПоНалогуНаПрибыль;
					
					Проводка.Содержание					= "Уменьшение отсроченных налоговых обязательств";
				
				КонецЕсли; 
				
				СуммаВозникновенияОНА = РазницаОНАиОНО - СуммаПогашенияОНО;
				
				Если СуммаВозникновенияОНА <> 0 Тогда
				
					// На оставшуюся сумму покажем увеличение ОНА
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период                     = КонецМесяца(ПериодРегистрации);
					Проводка.Организация                = Организация;
					Проводка.Сумма                      = СуммаВозникновенияОНА;
					
					Проводка.СчетДт						= ПланыСчетов.Хозрасчетный.ОтсроченныеНалоговыеАктивы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиОтсроченныхНалоговыхАктивовИОбязательств", Выборка.Статья);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", Выборка.ВидНалоговойДеятельности);
					
					Проводка.СчетКт						= ПланыСчетов.Хозрасчетный.РасчетыПоНалогуНаПрибыль;
					
					Проводка.Содержание					= "Увеличение отсроченных налоговых активов";
				
				КонецЕсли; 
			
			ИначеЕсли РазницаОНАиОНО < 0 Тогда
			
				// Прирост ОНО (уменьшение ОНА)
				
				СуммаПогашенияОНА = 0;
				
				Если Выборка.ОстатокОНА <> 0 Тогда
				
					// Имеется остаток ОНА - погасим его, сколько позволит сумма
					СуммаПогашенияОНА = Мин(-РазницаОНАиОНО, Выборка.ОстатокОНА);
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период                     = КонецМесяца(ПериодРегистрации);
					Проводка.Организация                = Организация;
					Проводка.Сумма                      = СуммаПогашенияОНА;
					
					Проводка.СчетДт						= ПланыСчетов.Хозрасчетный.РасчетыПоНалогуНаПрибыль;
					
					Проводка.СчетКт						= ПланыСчетов.Хозрасчетный.ОтсроченныеНалоговыеАктивы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиОтсроченныхНалоговыхАктивовИОбязательств", Выборка.Статья);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", Выборка.ВидНалоговойДеятельности);
					
					Проводка.Содержание					= "Уменьшение отсроченных налоговых активов";
				
				КонецЕсли; 
				
				СуммаВозникновенияОНО = - РазницаОНАиОНО - СуммаПогашенияОНА;
				
				Если СуммаВозникновенияОНО <> 0 Тогда
				
					// На оставшуюся сумму покажем увеличение ОНО
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период                     = КонецМесяца(ПериодРегистрации);
					Проводка.Организация                = Организация;
					Проводка.Сумма                      = СуммаВозникновенияОНО;
					
					Проводка.СчетДт						= ПланыСчетов.Хозрасчетный.РасчетыПоНалогуНаПрибыль;
					
					Проводка.СчетКт						= ПланыСчетов.Хозрасчетный.ОтсроченныеНалоговыеОбязательства;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиОтсроченныхНалоговыхАктивовИОбязательств", Выборка.Статья);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", Выборка.ВидНалоговойДеятельности);
					
					Проводка.Содержание					= "Увеличение отсроченных налоговых обязательств";
				
				КонецЕсли; 
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЦикла;
	
	Если ВыборкаПустая Тогда
		
		ПровестиРасходыПоТекущемуНалогуНаПрибыль();
	
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрам()
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если УправлениеПроизводством.ДокументыВПериоде(Ссылка, "Квартал", Новый Структура("Организация", Организация)).Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("За указанный период уже существует документ """ + Ссылка.Метаданные().Представление() + """", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверим заполнение шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Отказ = Не ОбщегоНазначения.ОпределитьФактВыполненияРодительскойОперации(ПериодРегистрации, 
	//														Организация,
	//														Ссылка,
	//														Перечисления.РегламентныеОперации.РасчетыПоНалогуНаПрибыль,
	//											 			"Бух");
	//Если Отказ Тогда
	//	Сообщить("В соответствии с текущим планом выполнения регламентных операций данная операция не может быть выполнена, поскольку не выполнены родительские операции", СтатусСообщения.Важное);
	//	Возврат;
	//КонецЕсли;
	
	// Проверим заполнение табличной части Статьи
	ПроверитьЗаполнениеТабличнойЧастиСтатьи(Отказ, Заголовок);
	
	// Движения документа по регистрам
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(Отказ, Заголовок);
	
		//Если НЕ Отказ Тогда
		//	ОбщегоНазначения.ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации,
		//													Организация,
		//													Ссылка,
		//													Перечисления.РегламентныеОперации.РасчетыПоНалогуНаПрибыль,
		//													, "Бух");
		//КонецЕсли;
	
	КонецЕсли; 
		
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");