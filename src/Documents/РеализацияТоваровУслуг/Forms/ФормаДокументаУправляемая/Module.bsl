////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьВидимость()
	//Видимость склада в табличной части в зависимости от настроек
	УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");

	УказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
			Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	Элементы.ТоварыСклад.Видимость = УказаниеСкладовВТЧ;
	Элементы.ВозвратнаяТараСклад.Видимость = УказаниеСкладовВТЧ;
	
	//Видимость заказов покупателя в табличной  части в зависимости от настроек
	УказаниеЗаказов = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
	УказаниеЗаказовВТЧ = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации)
			ИЛИ (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
	Элементы.ТоварыЗаказПокупателя.Видимость = 			УказаниеЗаказовВТЧ;
	Элементы.УслугиЗаказПокупателя.Видимость = 			УказаниеЗаказовВТЧ;
	Элементы.ВозвратнаяТараЗаказПокупателя.Видимость = 	УказаниеЗаказовВТЧ;
	
	//Видимость автоматических скидок.
	мРассчитыватьАвтоматическиеСкидки = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата,ТекущаяДата()));
	Если ЗначениеЗаполнено(мУчетнаяПолитика) 
		И (мУчетнаяПолитика.ИспользоватьСкидкиПоКоличествуТовара
		 Или мУчетнаяПолитика.ИспользоватьСкидкиПоСуммеДокумента
		 Или мУчетнаяПолитика.ИспользоватьСкидкиПоВидуОплаты
		 Или мУчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте) Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	КонецЕсли;

	Элементы.ТоварыПроцентАвтоматическихСкидок.Видимость = мРассчитыватьАвтоматическиеСкидки;

	УстановитьВидимостьСчетаУчетаНДСВТабличныхЧастях();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетаУчетаНДСВТабличныхЧастях()
	
	Если Элементы.Найти("ТоварыСчетУчетаНДС") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// Видимость счета учета НДС в табличных частях - только для старых документов, в которых уже были заполнены эти счета
	Элементы.ТоварыСчетУчетаНДС.Видимость  = ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(Объект.Товары);
	Элементы.УслугиСчетУчетаНДС.Видимость  = ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(Объект.Услуги);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаСделки()
	Если ДоговорПоСчетам Тогда
		ОписаниеТипаСделки = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю");
	Иначе
		ОписаниеТипаСделки = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
	КонецЕсли;
	Элементы.Сделка.ОграничениеТипа = ОписаниеТипаСделки;
	Если НЕ ОписаниеТипаСделки.СодержитТип(ТипЗнч(Объект.Сделка)) Тогда
		Объект.Сделка = ОписаниеТипаСделки.ПривестиЗначение(Объект.Сделка);
	КонецЕсли;
КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Количество, Коэффициент, СведенияЕдиницаИзмеренияМест;
	Перем ХарактеристикаНоменклатуры, СерияНоменклатуры;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",					Номенклатура);
	ЗначениеВыбора.Свойство("ХарактеристикаНоменклатуры",	ХарактеристикаНоменклатуры);
	ЗначениеВыбора.Свойство("СерияНоменклатуры",			СерияНоменклатуры);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",				ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("ЕдиницаИзмеренияМест",			ЕдиницаИзмеренияМест);
	ЗначениеВыбора.Свойство("Коэффициент",					Коэффициент);
	ЗначениеВыбора.Свойство("Количество",					Количество);
	ЗначениеВыбора.Свойство("СведенияЕдиницаИзмеренияМест", СведенияЕдиницаИзмеренияМест);


	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	Если ИмяТабличнойЧасти = "Товары" Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) И ИмяТабличнойЧасти <> "Услуги" Тогда
		СтруктураОтбора.Вставить("Склад", Объект.Склад);
	КонецЕсли;
	
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		Если ИмяТабличнойЧасти <> "ВозвратнаяТара" Тогда
			РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, Новый Структура("УчитыватьНДС, СуммаВключаетНДС", Объект.УчитыватьНДС, Объект.СуммаВключаетНДС));
		КонецЕсли;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.Количество       			= Количество;
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест		= ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент      			= Коэффициент;
			РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, СведенияЕдиницаИзмеренияМест);
		КонецЕсли;
		//Для заполнения цен, сумм и ставок НДС вызовем обработчики изменения номенклатуры
		Если ИмяТабличнойЧасти = "Товары" Тогда
			ИзменениеНоменклатурыКлиент(СтрокаТабличнойЧасти);
		ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
			ИзменениеНоменклатурыУслугиКлиент(СтрокаТабличнойЧасти)
		ИначеЕсли ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
			ИзменениеНоменклатурыТараКлиент(СтрокаТабличнойЧасти);
		КонецЕсли;
		//Заполним реквизиты новой строки табличной части из реквизитов шапки
		Если ИмяТабличнойЧасти <> "Услуги" Тогда
			Если ЗначениеЗаполнено(Объект.Склад) Тогда
				СтрокаТабличнойЧасти.Склад = Объект.Склад;
			КонецЕсли;
			СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = СпособСписанияСоСклада;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
	Если ИмяТабличнойЧасти <> "ВозвратнаяТара" Тогда
		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;
	РассчитатьСуммуДокумента();
КонецПроцедуры //

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	ЕстьУслуги = Ложь;
	Если ИмяТабличнойЧасти = "Товары" Тогда
		Команда = "ПодборВТабличнуюЧастьТовары";
	ИначеЕсли ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Команда = "ПодборВТабличнуюЧастьВозвратнаяТара";
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		Команда = "ПодборВТабличнуюЧастьУслуги";
		ЕстьУслуги = Истина;
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги", ЕстьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Истина);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Это существующий документ. 
		// Проверим, что его можно менять.
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(РеквизитФормыВЗначение("Объект"), ЭтаФорма);

	КонецЕсли;
	
	УстановитьВидимость(); 
	
	//Доступность цен для изменения
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	Элементы.ТоварыЦена.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	Элементы.ТоварыСумма.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	Элементы.ТоварыПроцентСкидкиНаценки.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	Элементы.ТоварыСуммаНДС.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;
	
	Элементы.УслугиЦена.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	Элементы.УслугиСумма.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	Элементы.УслугиПроцентСкидкиНаценки.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	Элементы.УслугиСуммаНДС.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;
	
	Элементы.ВозвратнаяТараЦена.ТолькоПросмотр         = НЕ мМожноМенятьЦенуВДокументе;
	Элементы.ВозвратнаяТараСумма.ТолькоПросмотр        = НЕ мМожноМенятьЦенуВДокументе;

	ДоговорПоЗаказам = (Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	ДоговорПоСчетам = (Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);

	мПересчитыватьСкидкуДокумента = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПриИзмененииСуммыПересчитыватьСкидку");
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	СпособСписанияСоСклада = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	ПредставлениеАдресаДоставки = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Объект.АдресДоставки);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОграничениеТипаСделки();
	УстановитьДоступность();
	РассчитатьСуммуДокумента(Истина);
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Корректируем адрес доставки если он менялся в форме
	Если ПредставлениеАдресаДоставки <> УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ТекущийОбъект.АдресДоставки) Тогда
		ТекущийОбъект.АдресДоставки = ПредставлениеАдресаДоставки;
	КонецЕсли;
	
	Если ТекущийОбъект.СерийныеНомера.Количество() > 0 Тогда
		//Удаление лишних серийных номеров - для случая когда 
		//- документ введен в обычной форме
		//- после этого в управляемой форме уменьшено количество либо удалена строка
		
		//Получим сводную таблицу: количество серийных номеров для каждой номенклатуры
		ТаблицаСерийныхНомеров = ТекущийОбъект.СерийныеНомера.Выгрузить();
		ТаблицаСерийныхНомеров.Колонки.Добавить("Количество");
		ТаблицаСерийныхНомеров.ЗаполнитьЗначения(1, "Количество");
		ТаблицаСерийныхНомеров.Свернуть("КлючСвязи", "Количество");
		
		Для Каждого СтрокаТаблицыСерийныхНомеров ИЗ ТаблицаСерийныхНомеров Цикл
			КоличествоСерийныхНомеров = СтрокаТаблицыСерийныхНомеров.Количество;
			СтрокаТаблицыТовары = ТекущийОбъект.Товары.Найти(СтрокаТаблицыСерийныхНомеров.КлючСвязи, "КлючСвязи");
			Если СтрокаТаблицыТовары = Неопределено Тогда
				КоличествоТоваров = 0;
			Иначе
				КоличествоТоваров = СтрокаТаблицыТовары.Количество * СтрокаТаблицыТовары.Коэффициент / СтрокаТаблицыТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			КонецЕсли;
			Если КоличествоТоваров >= КоличествоСерийныхНомеров Тогда
				Продолжить;
			КонецЕсли;
			МассивСтрокСерийныхНомеров = ТекущийОбъект.СерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТаблицыСерийныхНомеров.КлючСвязи));
			Для СчетчикНомеров = 1 ПО (КоличествоСерийныхНомеров - КоличествоТоваров) Цикл
				ТекущийОбъект.СерийныеНомера.Удалить(МассивСтрокСерийныхНомеров[КоличествоСерийныхНомеров - СчетчикНомеров]);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Если ТекущийОбъект.СоставНабора.Количество() > 0 Тогда
		//Удаление лишних позиций состава набора - для случая когда 
		//- документ введен в обычной форме
		//- после этого в управляемой форме удалена строка, с которой связаны строки с составом набора
		//Не обрабатывается ситуация изменения количества в табличной части Товары, т.к. нельзя достоверно
		//	рассчитать количество номенклатуры входящей в состав набора - состав набора мог быть скорректирован вручную
		ТаблицаСоставНабора = ТекущийОбъект.СоставНабора.Выгрузить();
		ТаблицаСоставНабора.Свернуть("КлючСтроки");
		ЕстьСтрокиСерийныеНомераСоставНабора = ТекущийОбъект.СерийныеНомераСоставНабора.Количество() > 0;
		Для Каждого СтрокаТаблицыСоставНабора ИЗ ТаблицаСоставНабора Цикл
			СтрокаТаблицыТовары = ТекущийОбъект.Товары.Найти(СтрокаТаблицыСоставНабора.КлючСтроки, "КлючСтроки");
			Если СтрокаТаблицыТовары = Неопределено Тогда
				МассивСтрокСоставНабора = ТекущийОбъект.СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицыСоставНабора.КлючСтроки));
				КоличествоСтрокСоставНабора = МассивСтрокСоставНабора.Количество();
				Для СчетчикНаборов = 1 По КоличествоСтрокСоставНабора Цикл
					ТекущаяСтрокаСоставНабора = МассивСтрокСоставНабора[КоличествоСтрокСоставНабора - СчетчикНаборов];
					//Удаление серийных номеров, связанных с составом набора
					Если ЕстьСтрокиСерийныеНомераСоставНабора Тогда
						МассивСтрокСерийныхНомеров = ТекущийОбъект.СерийныеНомераСоставНабора.НайтиСтроки(Новый Структура("КлючСвязи", ТекущаяСтрокаСоставНабора.КлючСвязи));
						КоличествоСерийныхНомеров = МассивСтрокСерийныхНомеров.Количество();
						Для СчетчикНомеров = 1 ПО КоличествоСерийныхНомеров Цикл
							ТекущийОбъект.СерийныеНомераСоставНабора.Удалить(МассивСтрокСерийныхНомеров[КоличествоСерийныхНомеров - СчетчикНомеров]);
						КонецЦикла;
					КонецЕсли;
					//Удаление строки из состава набора
					ТекущийОбъект.СоставНабора.Удалить(ТекущаяСтрокаСоставНабора);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора("Товары", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора("ВозвратнаяТара", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора("Услуги", ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ ДАННЫХ ИЗ НАСТРОЕК

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ДобавитьДополнительныеДанныеВНастройку(Объект, Настройки, Документы.РеализацияТоваровУслуг.СтруктураДополнительныхДанныхФормы());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектДополнительнымиДанными(Объект, Настройки, Документы.РеализацияТоваровУслуг.СтруктураДополнительныхДанныхФормы());
	Модифицированность = Истина;
	
	// Заполним курс и кратность валюты
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("ВалютаДокумента", Настройки["Объект.ВалютаДокумента"]);
	ДанныеДляЗаполнения.Вставить("Дата",            Объект.Дата);
	ЗаполнитьЗначенияСвойств(Объект, РаботаСДиалогамиСервер.ПолучитьКурсВалюты(ДанныеДляЗаполнения));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияДляЗаполнения);
	ПредставлениеАдресаДоставки = ЗначенияДляЗаполнения.ПредставлениеАдресаДоставки;
	ДоговорПоЗаказам = ЗначенияДляЗаполнения.ДоговорПоЗаказам;
	ДоговорПоСчетам = ЗначенияДляЗаполнения.ДоговорПоСчетам;
	УстановитьДоступность();
	ПересчитатьАвтоматическиеСкидки();
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		УстановитьОграничениеТипаСделки();
	КонецЕсли;
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ДанныеОбменаССервером = Новый Структура("ДоговорКонтрагента, УчитыватьНДС, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ЗначенияДляЗаполнения = ИзменениеДоговораСервер(ДанныеОбменаССервером);
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияДляЗаполнения);
	ДоговорПоЗаказам = ЗначенияДляЗаполнения.ДоговорПоЗаказам;
	ДоговорПоСчетам = ЗначенияДляЗаполнения.ДоговорПоСчетам;
	УстановитьОграничениеТипаСделки();
	ПересчитатьАвтоматическиеСкидки();
	УстановитьДоступность();
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	ИзмененСуммаВключаетНДС = Ложь;
	Если Объект.СуммаВключаетНДС И НЕ Объект.УчитыватьНДС Тогда
		ИзмененСуммаВключаетНДС = Истина;
		Объект.СуммаВключаетНДС = Ложь;
	КонецЕсли;
	Если Объект.Товары.Количество() + Объект.Услуги.Количество() > 0 Тогда
		ПересчитатьСуммыПриИзмененииФлаговНалогов(ИзмененСуммаВключаетНДС);
	КонецЕсли;
	РассчитатьСуммуДокумента();
	УстановитьДоступность();
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)
	Если Объект.Товары.Количество() + Объект.Услуги.Количество() > 0 Тогда
		ПересчитатьСуммыПриИзмененииФлаговНалогов(Истина);
	КонецЕсли;

	РассчитатьСуммуДокумента();
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ВидПередачиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	ДанныеОбменаССервером = Новый Структура("Контрагент", Объект.Грузополучатель);
	ЗначенияДляЗаполнения = Новый Структура();
	ПолучитьАдресДоставки(ДанныеОбменаССервером, ЗначенияДляЗаполнения);
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияДляЗаполнения);
	ПредставлениеАдресаДоставки = ЗначенияДляЗаполнения.ПредставлениеАдресаДоставки;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	РаботаСДиалогамиКлиент.ЗаполнитьКурсИКратностьДокумента(Объект, ВалютаРегламентированногоУчета);
	ПересчитатьАвтоматическиеСкидки();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	РаботаСДиалогамиКлиент.ЗаполнитьКурсИКратностьДокумента(Объект, ВалютаРегламентированногоУчета);
	ОбновитьНадписиИтоговыеСуммы();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Объект.Номер) Тогда
		ПрефиксацияОбъектовСобытия.ОчиститьНомерОбъекта(Объект.Номер, Объект.Организация);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОВТОРЯЮЩИЕСЯ ДЕЙСТВИЯ ПРИ ИЗМЕНЕНИИ РАЗНЫХ РЕКВИЗИТОВ

// Процедура устанавливает доступность элементов формы
//
&НаКлиенте
Процедура УстановитьДоступность()
	Элементы.ТоварыСтавкаНДС.Доступность = 	Объект.УчитыватьНДС;
	Элементы.ТоварыСуммаНДС.Доступность = 	Объект.УчитыватьНДС;
	Элементы.УслугиСтавкаНДС.Доступность = 	Объект.УчитыватьНДС;
	Элементы.УслугиСуммаНДС.Доступность = 	Объект.УчитыватьНДС;
	Элементы.СуммаВключаетНДС.Доступность = Объект.УчитыватьНДС;
	 
	Если ДоговорПоЗаказам ИЛИ ДоговорПоСчетам Тогда
		Элементы.Сделка.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Сделка.АвтоОтметкаНезаполненного = Ложь;
		Если Элементы.Сделка.ОтметкаНезаполненного Тогда
			Элементы.Сделка.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;
	//Если договор по счетам, заказ покупателя в табличной части должен быть недоступен
	Элементы.ТоварыЗаказПокупателя.Доступность = НЕ ДоговорПоСчетам;
	Элементы.УслугиЗаказПокупателя.Доступность = НЕ ДоговорПоСчетам;
	Элементы.ВозвратнаяТараЗаказПокупателя.Доступность = НЕ ДоговорПоСчетам;
КонецПроцедуры
 
&НаКлиенте
Процедура РассчитатьСуммуДокумента(РасчитатьТолькоСуммуНДС = Ложь)
	НДСВсего = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
	Если РасчитатьТолькоСуммуНДС Тогда
		Возврат;
	КонецЕсли;
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента + НДСВсего;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписиИтоговыеСуммы()
	Элементы.СуммаДокумента.Заголовок = "Всего, " + Объект.ВалютаДокумента;
	Элементы.НДСВсего.Заголовок = "НДС (" + ?(Объект.СуммаВключаетНДС, "в т.ч.", "сверху") + ")";
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыПриИзмененииФлаговНалогов(ИзмененФлагСуммаВключаетНДС)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
							СтрокаТабличнойЧасти.Цена,
							Неопределено,
							?(ИзмененФлагСуммаВключаетНДС, НЕ ДокументОбъект.СуммаВключаетНДС, ДокументОбъект.СуммаВключаетНДС),
							ДокументОбъект.УчитыватьНДС,
							ДокументОбъект.СуммаВключаетНДС,
							Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Услуги Цикл
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
							СтрокаТабличнойЧасти.Цена,
							Неопределено,
							?(ИзмененФлагСуммаВключаетНДС, НЕ ДокументОбъект.СуммаВключаетНДС, ДокументОбъект.СуммаВключаетНДС),
							ДокументОбъект.УчитыватьНДС,
							ДокументОбъект.СуммаВключаетНДС,
							Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ В ШАПКЕ

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения, СтруктураПараметровДляПолученияДоговора);
	//Получим адрес доставки
	ПолучитьАдресДоставки(ДанныеДляЗаполнения, ЗначенияДляЗаполнения);
	
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаСервереБезКонтекста
Функция ИзменениеДоговораСервер(ДанныеДляЗаполнения)
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ПриИзмененииЗначенияДоговора(ДанныеДляЗаполнения);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьАдресДоставки(ДанныеДляЗаполнения, ЗначенияДляЗаполнения)
	ДополнениеКАдресуДоставки = "";
	АдресДоставки = ЗаполнениеДокументов.ПолучитьАдресДоставкиСтрокой(ДанныеДляЗаполнения.Контрагент, ДополнениеКАдресуДоставки);
	ЗначенияДляЗаполнения.Вставить("АдресДоставки", АдресДоставки);
	ЗначенияДляЗаполнения.Вставить("ПредставлениеАдресаДоставки", УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресДоставки));
	ЗначенияДляЗаполнения.Вставить("ДополнениеКАдресуДоставки", ДополнениеКАдресуДоставки);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ В ТАБЛИЧНОЙ ЧАСТИ


&НаСервереБезКонтекста
Функция ИзменениеНоменклатурыСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеНоменклатуры(ДанныеДляЗаполнения);
	ЗначенияДляЗаполнения.Вставить("СтавкаНДС",			ДанныеДляЗаполнения.Номенклатура.СтавкаНДС);
	Если ДанныеДляЗаполнения.Свойство("ТипЦен") Тогда
		//Добавим сведения о ценах
		ДанныеДляЗаполнения.Вставить("ЕдиницаИзмерения", ЗначенияДляЗаполнения.ЕдиницаИзмерения);
		ДанныеДляЗаполнения.Вставить("СтавкаНДС", ЗначенияДляЗаполнения.СтавкаНДС);
		Цена = ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения);
		ЗначенияДляЗаполнения.Вставить("Цена", Цена);
	КонецЕсли;
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеНоменклатурыКлиент(СтрокаТабличнойЧасти)
	ДанныеОбменаССервером = Новый Структура("Номенклатура, УчитыватьНДС, СуммаВключаетНДС");
	//Сведения, необходимые для расчета цены
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбменаССервером.Вставить("ТипЦен");
		ДанныеОбменаССервером.Вставить("Дата");
		ДанныеОбменаССервером.Вставить("ХарактеристикаНоменклатуры");
		ДанныеОбменаССервером.Вставить("Контрагент");
		ДанныеОбменаССервером.Вставить("ВалютаДокумента");
		ДанныеОбменаССервером.Вставить("КурсВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("КратностьВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("ДоговорКонтрагента");
		ДанныеОбменаССервером.Вставить("УсловиеПродаж");
		ДанныеОбменаССервером.Вставить("Склад");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = ИзменениеНоменклатурыСервер(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДанныеОбменаССервером.СведенияЕдиницаИзмеренияМест);
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаСуммы();
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, СтруктураПараметров);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеНоменклатурыУслугиСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = Новый Структура();
	
	// Основные реквизиты
	ЗначенияДляЗаполнения.Вставить("СтавкаНДС",				ДанныеДляЗаполнения.Номенклатура.СтавкаНДС);
	ЗначенияДляЗаполнения.Вставить("Содержание",			?(ЗначениеЗаполнено(ДанныеДляЗаполнения.Номенклатура.НаименованиеПолное), ДанныеДляЗаполнения.Номенклатура.НаименованиеПолное, ДанныеДляЗаполнения.Номенклатура.Наименование));
	Если ДанныеДляЗаполнения.Свойство("ТипЦен") Тогда
		//Добавим сведения о ценах
		ДанныеДляЗаполнения.Вставить("СтавкаНДС", ЗначенияДляЗаполнения.СтавкаНДС);
		ДанныеДляЗаполнения.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
		ДанныеДляЗаполнения.Вставить("ХарактеристикаНоменклатуры", Неопределено);
		ДанныеДляЗаполнения.Вставить("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
		Цена = ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения);
		ЗначенияДляЗаполнения.Вставить("Цена", Цена);
	КонецЕсли;
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеНоменклатурыУслугиКлиент(СтрокаТабличнойЧасти)
	ДанныеОбменаССервером = Новый Структура("Номенклатура, УчитыватьНДС, СуммаВключаетНДС");
	//Сведения, необходимые для расчета цены
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбменаССервером.Вставить("ТипЦен");
		ДанныеОбменаССервером.Вставить("Дата");
		ДанныеОбменаССервером.Вставить("Контрагент");
		ДанныеОбменаССервером.Вставить("ВалютаДокумента");
		ДанныеОбменаССервером.Вставить("КурсВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("КратностьВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("ДоговорКонтрагента");
		ДанныеОбменаССервером.Вставить("УсловиеПродаж");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = ИзменениеНоменклатурыУслугиСервер(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаСуммы();
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, СтруктураПараметров);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеНоменклатурыТараСервер(ДанныеДляЗаполнения)
	//Заполняем только цену номенклатуры
	ЗначенияДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("ЕдиницаИзмерения", ДанныеДляЗаполнения.Номенклатура.ЕдиницаХраненияОстатков);
	ДанныеДляЗаполнения.Вставить("СтавкаНДС", ДанныеДляЗаполнения.Номенклатура.СтавкаНДС);
	ДанныеДляЗаполнения.Вставить("СуммаВключаетНДС", Истина);
	ДанныеДляЗаполнения.Вставить("ХарактеристикаНоменклатуры", Неопределено);
	Цена = ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения);
	ЗначенияДляЗаполнения.Вставить("Цена", Цена);
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеНоменклатурыТараКлиент(СтрокаТабличнойЧасти)
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбменаССервером = Новый Структура();
		ДанныеОбменаССервером.Вставить("Номенклатура");
		ДанныеОбменаССервером.Вставить("ТипЦен");
		ДанныеОбменаССервером.Вставить("УчитыватьНДС");
		ДанныеОбменаССервером.Вставить("Дата");
		ДанныеОбменаССервером.Вставить("Контрагент");
		ДанныеОбменаССервером.Вставить("ВалютаДокумента");
		ДанныеОбменаССервером.Вставить("КурсВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("КратностьВзаиморасчетов");
		ДанныеОбменаССервером.Вставить("ДоговорКонтрагента");
		ДанныеОбменаССервером.Вставить("УсловиеПродаж");
		ДанныеОбменаССервером.Вставить("Склад");
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
		// Получим все необходимые данные на сервере
		ЗначенияДляЗаполнения = ИзменениеНоменклатурыТараСервер(ДанныеОбменаССервером);
		
		// Заполним реквизиты строки
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
		РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеЕдиницыИзмеренияСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеЕдиницыИзмерения(ДанныеДляЗаполнения);
	//Пересчитаем цену с учетом изменения коэффициента
	Если ДанныеДляЗаполнения.Цена <> 0 И ДанныеДляЗаполнения.Коэффициент <> ЗначенияДляЗаполнения.Коэффициент
		И ДанныеДляЗаполнения.Коэффициент <> 0 Тогда
		Цена = ДанныеДляЗаполнения.Цена * ЗначенияДляЗаполнения.Коэффициент / ДанныеДляЗаполнения.Коэффициент;
		ДанныеДляЗаполнения.Вставить("Цена", Цена);
	КонецЕсли;
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьЦенуНоменклатуры(ДанныеДляЗаполнения)
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.Склад) И ДанныеДляЗаполнения.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Цена = УправлениеРозничнойТорговлей.ПолучитьПродажнуюЦену(ДанныеДляЗаполнения.Дата, 
										ДанныеДляЗаполнения.Номенклатура,
										ДанныеДляЗаполнения.ХарактеристикаНоменклатуры, 
										ДанныеДляЗаполнения.Склад, 
										ДанныеДляЗаполнения.УсловиеПродаж);

		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, 
										глЗначениеПеременной("глВалютаРегламентированногоУчета"),
										ДанныеДляЗаполнения.ВалютаДокумента, 
										ДанныеДляЗаполнения.КурсВзаиморасчетов, 
										ДанныеДляЗаполнения.КратностьВзаиморасчетов, 
										ДанныеДляЗаполнения.Дата);

	Иначе
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ДанныеДляЗаполнения.Номенклатура, 
										ДанныеДляЗаполнения.ХарактеристикаНоменклатуры,
										ДанныеДляЗаполнения.ТипЦен, 
										ДанныеДляЗаполнения.Дата, 
										ДанныеДляЗаполнения.ЕдиницаИзмерения,
										ДанныеДляЗаполнения.ВалютаДокумента, 
										ДанныеДляЗаполнения.КурсВзаиморасчетов, 
										ДанныеДляЗаполнения.КратностьВзаиморасчетов, ,
										ДанныеДляЗаполнения.ДоговорКонтрагента,
										ДанныеДляЗаполнения.УсловиеПродаж);
	КонецЕсли;
	
	// Если цену заполнили, то ее надо пересчитывать по флагам налогообложения
	Если ЗначениеЗаполнено(Цена) Тогда

		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
										ДанныеДляЗаполнения.ТипЦен.ЦенаВключаетНДС,
										ДанныеДляЗаполнения.УчитыватьНДС, 
										ДанныеДляЗаполнения.СуммаВключаетНДС, 
										Ценообразование.ПолучитьСтавкуНДС(ДанныеДляЗаполнения.СтавкаНДС));
	КонецЕсли;
	Возврат Цена;
КонецФункции

// Процедура выполняет пересчет автоматических скидок в документе.
//
// Возвращаемое значение:
//  Булево - Истина, если автоматические скидки были рассчитаны.
//
&НаСервере
Процедура ПересчитатьАвтоматическиеСкидкиСервер()

	ТекСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Объект.Товары) + Ценообразование.ПолучитьСуммуДокументаБезСкидки(Объект.Услуги);
	ТипЦенДляОграниченияЦены = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа();

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидРеализации"					, Перечисления.ВидыСкидок.Оптовая);
	СтруктураПараметров.Вставить("СуммаДокумента"					, ТекСуммаДокументаБезСкидок);
	СтруктураПараметров.Вставить("Карта"							, Объект.ДисконтнаяКарта);
	СтруктураПараметров.Вставить("УчитыватьНДС"						, Объект.УчитыватьНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС"					, Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета"	, ВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("мУчетнаяПолитика"					,мУчетнаяПолитика);
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ДокументОбъект, ДокументОбъект.Товары, СтруктураПараметров, , ТипЦенДляОграниченияЦены);
	ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ДокументОбъект, ДокументОбъект.Услуги, СтруктураПараметров, , ТипЦенДляОграниченияЦены);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры // ПересчитатьАвтоматическиеСкидки()

// Процедура проверяет необходимость расчета автоскидок и вызывает пересчет автоматических скидок в документе.
//
&НаКлиенте
Процедура ПересчитатьАвтоматическиеСкидки()
	Если НЕ мРассчитыватьАвтоматическиеСкидки 
		ИЛИ Объект.Проведен 
		ИЛИ (Объект.Товары.Количество() = 0 И Объект.Услуги.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьАвтоматическиеСкидкиСервер();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровДляРасчетаСуммы()
	Возврат Новый Структура("ЕстьПроцентАвтоматическихСкидок,ЕстьПроцентСкидкиНаценки,УчитыватьНДС,СуммаВключаетНДС", , , Объект.УчитыватьНДС, Объект.СуммаВключаетНДС);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ТОВАРЫ" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ИзменениеНоменклатурыКлиент(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	//При изменении характеристики меняются только цены
	//Если тип цен не заполнен, ничего делать не надо
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДанныеОбменаССервером = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, СтавкаНДС, 
								|Дата,Контрагент, ТипЦен, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, 
								|ДоговорКонтрагента, УсловиеПродаж, УчитыватьНДС, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
	// Получим все необходимые данные на сервере
	СтрокаТабличнойЧасти.Цена = ОпределитьЦенуНоменклатуры(ДанныеОбменаССервером);
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаСуммы();
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ДанныеОбменаССервером = Новый Структура("ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Коэффициент, Цена");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);

	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = ИзменениеЕдиницыИзмеренияСервер(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДанныеОбменаССервером.СведенияЕдиницаИзмеренияМест);
	// могла измениться цена в табличной части
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаСуммы();

	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.ОчиститьКоличествоМестПриОчисткеЕдиницыМест(СтрокаТабличнойЧасти);
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти);
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаСуммы();
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти);
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаСуммы();
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаСуммы();
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, мПересчитыватьСкидкуДокумента);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаСуммы();

	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			СтрокаТабличнойЧасти.Склад = Объект.Склад;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.Сделка;
		КонецЕсли;
		СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = СпособСписанияСоСклада;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;

	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ПересчитатьАвтоматическиеСкидки();
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПринятыеСчетУчетаБУПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеСобственныеБУПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеПринятыеБУПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	ДействиеПодбор("Товары");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "УСЛУГИ" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ИзменениеНоменклатурыУслугиКлиент(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаСуммы();
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаСуммы();
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляРасчетаСуммы();
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, СтруктураПараметров);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, мПересчитыватьСкидкуДокумента);
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;

	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ПересчитатьАвтоматическиеСкидки();
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПодбор(Команда)
	ДействиеПодбор("Услуги");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ВОЗВРАТНАЯ ТАРА" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			СтрокаТабличнойЧасти.Склад = Объект.Склад;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.Сделка;
		КонецЕсли;
		СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = СпособСписанияСоСклада;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ИзменениеНоменклатурыТараКлиент(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСчетУчетаБУПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПодбор(Команда)
	ДействиеПодбор("ВозвратнаяТара");
КонецПроцедуры




