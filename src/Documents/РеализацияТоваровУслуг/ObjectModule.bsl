Перем мУдалятьДвижения Экспорт;

Перем мИспользоватьТару Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;

Перем мНеОткрыватьФорму Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мЕстьКолонкаСерии Экспорт;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУказаниеСкладов ;
Перем мУказаниеСкладовВТЧ Экспорт;

Перем мИспользоватьРасширеннуюАналитику Экспорт;
Перем мДатаНачалаИспользованияРасширеннойАналитики Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(СуммыВРублях = Ложь)
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,
	|	РеализацияТоваровУслуг.Сделка,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Контрагент.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	РеализацияТоваровУслуг.ДоверенностьПолучил КАК ПредставительПокупателя,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|	РеализацияТоваровУслуг.ПредставительОрганизации КАК ПредставительПоставщика,
	|	РеализацияТоваровУслуг.кпкТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки 			КАК НомерСтрокиТЧ,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	Номенклатура.Код     	КАК Код,
	|	Номенклатура.Артикул 	КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	NULL КАК Характеристика,
	|	NULL КАК Серия
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	ЗапросТовары = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку Акта
	
	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	РуководителиОрганизации = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
	РуководителиКонтрагента = ФормированиеПечатныхФорм.ОтветственныеЛицаКонтрагента(Шапка.Покупатель, Шапка.Дата);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДолжностьРуководителяПоставщика = РуководителиОрганизации.РуководительДолжность;
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПоставщика 			=  РуководителиОрганизации.Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", "");
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	//ОбластьМакета.Параметры.ТорговаяТочка= Шапка.ТорговаяТочка;
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(ПустаяСтрока(РуководителиКонтрагента.РуководительДолжность) И Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", РуководителиКонтрагента.РуководительДолжность);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПокупателя 			= РуководителиКонтрагента.РуководительПредставление;

	ТабДокумент.Вывести(ОбластьМакета);
	
	// Формируем заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='АКТ сдачи-приемки работ (оказания услуг)';uk='АКТ здачі-прийняття робіт (надання послуг)'",КодЯзыкаПечать) + Символы.ПС,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);                                            

	// Начинаем формировать собственно текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаНачало");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// выводим сведения о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	// Заканчиваем формировать текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаКонец");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим табличную часть
	ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") > 0;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
			
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;

	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) И НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка) Тогда
			Скидка = 0;
		Иначе

			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка - ВыборкаСтрокТовары.АвтоматическаяСкидка) * (ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.АвтоматическаяСкидка);
			//округлим скидку до двух знаков
			Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Выводим Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");	
	СуммаКПрописиСНДС 	= Сумма + ?(Шапка.СуммаВключаетНДС, 	   0, СуммаНДС);
	СуммаКПрописиБезНДС = Сумма - ?(Шапка.СуммаВключаетНДС, СуммаНДС, 		 0);
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила без НДС ';uk='Загальна вартість робіт (послуг) без ПДВ склала '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', НДС ';uk=', ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', общая стоимость работ (услуг) с НДС ';uk=', загальна вартість робіт (послуг) з ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиСНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 ".";												 											 
 	Иначе
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила ';uk='Загальна вартість робіт (послуг) склала '",КодЯзыкаПечать)	+ ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) + ".";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	// выводим подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
								
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
	ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;
	
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

//Коновалова 26022013 +
//Верескул 21.10.2014
// Функция формирует табличный документ с печатной формой инвойса
//
// Возвращаемое значение:
//  Табличный документ - печатная форма Инвойса
//
Функция ПечатьИнвойс()
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	ГОД(РеализацияТоваровУслуг.Дата) КАК Год,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Договор,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг._CMR КАК CMR,
	|	РеализацияТоваровУслуг._TIR КАК TIR,
	|	РеализацияТоваровУслуг.НомерИнвойса,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ВалютаДокумента.НаименованиеПолное КАК ВалютаДокумента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Дата КАК ДатаДоговора
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросТов = Новый Запрос;
	ЗапросТов.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.ТорговаяМарка);
	ЗапросТов.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросТов.Текст =
	"ВЫБРАТЬ
    |   РеализацияТоваровУслугТовары.Номенклатура,
    |   РеализацияТоваровУслугТовары.Номенклатура.Родитель КАК Родитель,
    |   РеализацияТоваровУслугТовары.Количество,
    |   РеализацияТоваровУслугТовары.Коэффициент,
    |   ВЫБОР
    |       КОГДА НЕ РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Вес ЕСТЬ NULL
    |           ТОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Вес * РеализацияТоваровУслугТовары.Количество
    |       ИНАЧЕ РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Коэффициент
    |   КОНЕЦ КАК НЕТТО,
    |   ВЫБОР
    |       КОГДА НЕ РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Вес ЕСТЬ NULL
    |           ТОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Вес * РеализацияТоваровУслугТовары.Количество
    |       ИНАЧЕ РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Коэффициент
    |   КОНЕЦ КАК ПР_БРУТТО,
    |   РеализацияТоваровУслугТовары.Цена,
    |   РеализацияТоваровУслугТовары.Сумма,
    |   ЗначенияСвойствОбъектов.Значение КАК ТорговаяМарка,
    |   ВЫБОР
    |       КОГДА РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры.Код = ""000000002""
    |           ТОГДА ВЫБОР
    |                   КОГДА НЕ РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Вес ЕСТЬ NULL
    |                       ТОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Вес * РеализацияТоваровУслугТовары.Количество
    |                   ИНАЧЕ РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Коэффициент
    |               КОНЕЦ
    |       ИНАЧЕ ВЫБОР
    |               КОГДА НЕ РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Вес ЕСТЬ NULL
    |                   ТОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Вес * РеализацияТоваровУслугТовары.Количество * 1.05
    |               ИНАЧЕ РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Коэффициент * 1.05
    |           КОНЕЦ
    |   КОНЕЦ КАК БРУТТО
    |ИЗ
    |   Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
    |       ПО РеализацияТоваровУслугТовары.Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
    |ГДЕ
    |   ЗначенияСвойствОбъектов.Свойство = &Свойство
    |   И РеализацияТоваровУслугТовары.Ссылка = &ТекущийДокумент";
	ЗапросТовары = ЗапросТов.Выполнить().Выгрузить();
	ТаблицаНоменклатурныхГрупп = ЗапросТовары.Скопировать();
	ТаблицаНоменклатурныхГрупп.Свернуть("Родитель");
	ТаблицаТорговаяМарка = ЗапросТовары.Скопировать();
	ТаблицаТорговаяМарка.Свернуть("ТорговаяМарка");
	СтрокиНГ = ЗапросТовары.Скопировать();
	СтрокиНГ.Очистить();
	СтрокиТМ = ЗапросТовары.Скопировать();
	СтрокиТМ.Очистить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Инвойс";
	Макет       = ПолучитьМакет("Инвойс");

	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата,,,);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Договор = "До контракту " + Шапка.Договор + " от " + Формат(Шапка.ДатаДоговора,"ДЛФ=Д");
	ОбластьМакета.Параметры.НомерИнвойса = "INV" + СтрЗаменить(Строка(Шапка.Год),Символы.НПП,"") + Формат(Шапка.НомерИнвойса,"ЧЦ=3; ЧВН=") + " от " + Формат(Шапка.Дата,"ДЛФ=Д");
	ОбластьМакета.Параметры.НомерУпаковочногоЛиста = "PL" + СтрЗаменить(Строка(Шапка.Год),Символы.НПП,"") + Формат(Шапка.НомерИнвойса,"ЧЦ=3; ЧВН=") + " от " + Формат(Шапка.Дата,"ДЛФ=Д");
	ОбластьМакета.Параметры.Организация ="ТОВ ""ЕСКАРО КОЛОР""";// СтрЗаменить(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,ЮридическийАдрес,",,),"юр. адрес: ","");
	ОбластьМакета.Параметры.Контрагент = СтрЗаменить(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,ЮридическийАдрес,",,),"юр. адрес: ","");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);                                            

	ОбластьГруппаТаблицы = Макет.ПолучитьОбласть("ГруппаТаблицы");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьИтогиГруппы = Макет.ПолучитьОбласть("ИтогиГруппы");
	ном = 0;
	ВсегоМест = 0;
	ВсегоПоддонов = 0;
	ГруппаМест = 0;
	ГруппаПоддонов = 0;
	Для каждого СтрокаНГ из ТаблицаНоменклатурныхГрупп Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("Родитель",СтрокаНГ.Родитель);
		СтрокиНГ_ = ЗапросТовары.НайтиСтроки(Отбор);
		Если СтрокиНГ_.Количество() > 0 Тогда
			Для каждого стр из СтрокиНГ_ Цикл
				НоваяСтрока = СтрокиНГ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
			КонецЦикла;	
			Для каждого СтрокаТМ из ТаблицаТорговаяМарка Цикл
				Отбор1 = Новый Структура();
				Отбор1.Вставить("ТорговаяМарка",СтрокаТМ.ТорговаяМарка);
				СтрокиТМ_ = СтрокиНГ.НайтиСтроки(Отбор1);
				Если СтрокиТМ_.Количество() > 0 Тогда
					Для каждого стр из СтрокиТМ_ Цикл
						НоваяСтрока = СтрокиТМ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
					КонецЦикла;	
					ОбластьГруппаТаблицы.Параметры.НоменклатурнаяГруппа = "" + СтрокаНГ.Родитель + "  ТМ " + СтрокаТМ.ТорговаяМарка;
					ТабДокумент.Вывести(ОбластьГруппаТаблицы);                                            
					Для каждого строка из СтрокиТМ Цикл
						ном = ном + 1;
						ОбластьСтрокаТаблицы.Параметры.Номер = ном;
						ОбластьСтрокаТаблицы.Параметры.Заполнить(строка);
						КоличествоИЕУ = ПолучитьИЕУ(строка.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Коробка);
						Если КоличествоИЕУ <> 0 Тогда
							//ОбластьСтрокаТаблицы.Параметры.УпаковкаТовара = ?(КоличествоИЕУ=1,"банка","коробка ("+ КоличествоИЕУ + " шт)");
							//ОбластьСтрокаТаблицы.Параметры.Мест = Формат(строка.Количество/КоличествоИЕУ, "ЧДЦ=2");
						КонецЕсли;
						КоличествоМест=?(КоличествоИЕУ=0,строка.Количество,строка.Количество/КоличествоИЕУ);
						ГруппаМест = ГруппаМест + Формат(КоличествоМест, "ЧДЦ=2");
						КоличествоИЕУ_ = ПолучитьИЕУ(строка.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Паллета);
						КоличествоПоддонов = ?(КоличествоИЕУ_=0,строка.Количество,строка.Количество/КоличествоИЕУ_);
						ГруппаПоддонов = ГруппаПоддонов + Формат(КоличествоПоддонов, "ЧДЦ=2");
                        ОбластьСтрокаТаблицы.Параметры.Цена = Окр(Строка.Сумма/Строка.Количество,2);
                        ТабДокумент.Вывести(ОбластьСтрокаТаблицы);                                            
					КонецЦикла;
//					ОбластьИтогиГруппы.Параметры.ИтогМест = ГруппаМест;
					ОбластьИтогиГруппы.Параметры.ИтогКолво=СтрокиТМ.Итог("Количество");
					ОбластьИтогиГруппы.Параметры.ИтогНетто = СтрокиТМ.Итог("НЕТТО");
					ОбластьИтогиГруппы.Параметры.ИтогБрутто=Формат(СтрокиТМ.Итог("БРУТТО"), "ЧДЦ=2");
					ОбластьИтогиГруппы.Параметры.ИтогСумма = СтрокиТМ.Итог("Сумма");
					ОбластьИтогиГруппы.Параметры.Поддоны = ГруппаПоддонов;
					ВсегоМест = ВсегоМест+ГруппаМест;
					ВсегоПоддонов = ВсегоПоддонов + ГруппаПоддонов;
					ТабДокумент.Вывести(ОбластьИтогиГруппы);                                            
				КонецЕсли;
				ГруппаМест=0;
				ГруппаПоддонов=0;
	            СтрокиТМ.Очистить();
			КонецЦикла;
		КонецЕсли;
	СтрокиНГ.Очистить();
	СтрокиТМ.Очистить();
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогиДокумента");
//	ОбластьМакета.Параметры.ИтогоМест = ВсегоМест;
	ОбластьМакета.Параметры.ИтогоШТ=ЗапросТовары.Итог("Количество");
	ОбластьМакета.Параметры.ИтогоНетто = ЗапросТовары.Итог("НЕТТО");
	ОбластьМакета.Параметры.ИтогоБрутто=Формат(ЗапросТовары.Итог("БРУТТО"), "ЧДЦ=2"); 
	ОбластьМакета.Параметры.ИтогоСумма = ЗапросТовары.Итог("Сумма");
	ОбластьМакета.Параметры.ИтогоПоддонов = ВсегоПоддонов;
	ОбластьМакета.Параметры.ВалютаДокумента = Шапка.ВалютаДокумента;
	ТабДокумент.Вывести(ОбластьМакета);                                            

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);                                            

	Возврат ТабДокумент;

КонецФункции // ПечатьИнвойс()


Функция ПечатьУпаковочныйЛист()
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	ГОД(РеализацияТоваровУслуг.Дата) КАК Год,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг._CMR КАК CMR,
	|	РеализацияТоваровУслуг._TIR КАК TIR,
	|	РеализацияТоваровУслуг.НомерИнвойса,
	|	РеализацияТоваровУслуг.Дата
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросТов = Новый Запрос;
	ЗапросТов.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.ТорговаяМарка);
	ЗапросТов.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросТов.Текст =
	"ВЫБРАТЬ
    |   РеализацияТоваровУслугТовары.Номенклатура,
    |   РеализацияТоваровУслугТовары.Номенклатура.Родитель КАК Родитель,
    |   РеализацияТоваровУслугТовары.Количество,
    |   РеализацияТоваровУслугТовары.Коэффициент,
    |   ВЫБОР
    |       КОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Вес = 0
    |           ТОГДА РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Коэффициент
    |       ИНАЧЕ РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Вес
    |   КОНЕЦ КАК НЕТТО,
    |   ЗначенияСвойствОбъектов.Значение КАК ТорговаяМарка
    |ИЗ
    |   Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
    |       ПО РеализацияТоваровУслугТовары.Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
    |ГДЕ
    |   ЗначенияСвойствОбъектов.Свойство = &Свойство
    |   И РеализацияТоваровУслугТовары.Ссылка = &ТекущийДокумент";
	ЗапросТовары = ЗапросТов.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_УпаковочныйЛист";
	Макет       = ПолучитьМакет("УпаковочныйЛист");

	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата,,,);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерИнвойса = "INV" + СтрЗаменить(Строка(Шапка.Год),Символы.НПП,"") + Формат(Шапка.НомерИнвойса,"ЧЦ=3; ЧВН=") + " от " + Формат(Шапка.Дата,"ДЛФ=Д");
	ОбластьМакета.Параметры.НомерУпаковочногоЛиста = "PL" + СтрЗаменить(Строка(Шапка.Год),Символы.НПП,"") + Формат(Шапка.НомерИнвойса,"ЧЦ=3; ЧВН=") + " от " + Формат(Шапка.Дата,"ДЛФ=Д");
	ОбластьМакета.Параметры.Организация = СтрЗаменить(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,ЮридическийАдрес,",,),"юр. адрес: ","");
	ОбластьМакета.Параметры.Контрагент = СтрЗаменить(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,ЮридическийАдрес,",,),"юр. адрес: ","");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);                                            

	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ном = 0;
	ВсегоМест = 0;
	ВсегоПоддонов = 0;
	Для каждого строка из ЗапросТовары Цикл
		ном = ном + 1;
		ОбластьСтрокаТаблицы.Параметры.Номер = ном;
		ОбластьСтрокаТаблицы.Параметры.Заполнить(строка);
		КоличествоИЕУ = ПолучитьИЕУ(строка.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Коробка);
        Если НЕ ЗначениеЗаполнено(КоличествоИЕУ) Тогда
            Сообщить("В " + строка.Номенклатура + " в единице измерения Коробка ЕХО равно 0");
            КоличествоИЕУ = 0;
        КонецЕсли; 
		Если КоличествоИЕУ <> 0 Тогда
			ОбластьСтрокаТаблицы.Параметры.УпаковкаТовара = ?(КоличествоИЕУ=1,"банка","коробка ("+ КоличествоИЕУ + " шт)");
			КоличествоМест = Формат(строка.Количество/КоличествоИЕУ, "ЧДЦ=2");
			ОбластьСтрокаТаблицы.Параметры.Мест = КоличествоМест;
		КонецЕсли;
		ОбластьСтрокаТаблицы.Параметры.ТорговаяМарка = строка.ТорговаяМарка;
		КоличествоИЕУ_ = ПолучитьИЕУ(строка.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Паллета);
        Если НЕ ЗначениеЗаполнено(КоличествоИЕУ_) Тогда
            Сообщить("В " + строка.Номенклатура + " в единице измерения Паллета ЕХО равно 0");
            КоличествоИЕУ_ = 0;
        КонецЕсли; 
		КоличествоПоддонов = ?(КоличествоИЕУ_=0,0,строка.Количество/КоличествоИЕУ_);
		КоличествоПоддонов=Окр(КоличествоПоддонов,2);
		ВсегоМест = ВсегоМест + КоличествоМест;
		ВсегоПоддонов = ВсегоПоддонов + КоличествоПоддонов;
		ТабДокумент.Вывести(ОбластьСтрокаТаблицы);                                            
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогиДокумента");
	ОбластьМакета.Параметры.ИтогоМест = ВсегоМест;
	ОбластьМакета.Параметры.ИтогоНетто = ЗапросТовары.Итог("НЕТТО");
	ОбластьМакета.Параметры.ИтогоПоддонов = ВсегоПоддонов;
	ТабДокумент.Вывести(ОбластьМакета);                                            

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);                                            

	Возврат ТабДокумент;

КонецФункции // ПечатьУпаковочныйЛист()



Функция ПолучитьИЕУ(номен, единица)
	
	Запрос = новый Запрос("ВЫБРАТЬ
	                      |	ЕдиницыИзмерения.СодержитЕХО
	                      |ИЗ
	                      |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	                      |ГДЕ
	                      |	ЕдиницыИзмерения.Владелец = &Владелец
	                      |	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору");
	Запрос.УстановитьПараметр("Владелец",номен);
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору",единица);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(Результат) ТОгда
		Возврат Результат[0].СодержитЕХО;
	Иначе
		Возврат 0;
	КонецЕсли;
		
КонецФункции

//Коновалова 26022013 -

//ИЗМЕНЕНО Верескул Игорь(Начало 06.06.2016
////////////////////////////////////////////////////////////////////////////////
//
// Процедура ПечатьУЛЭпицентр
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
Функция ПечатьУЛЭпицентр()
    ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
    |   ГОД(РеализацияТоваровУслуг.Дата) КАК Год,
    |   РеализацияТоваровУслуг.Организация,
    |   РеализацияТоваровУслуг.Контрагент,
    |   РеализацияТоваровУслуг.НомерИнвойса,
    |   РеализацияТоваровУслуг.Дата,
    |   РеализацияТоваровУслуг.Сделка.Номер КАК ВнутреннийНомер,
    |   РеализацияТоваровУслуг.Сделка.НомерПокупателя КАК ЗаказПОкупателяEDI
    |ИЗ
    |   Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |ГДЕ
    |   РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросТов = Новый Запрос;
	ЗапросТов.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.ТорговаяМарка);
	ЗапросТов.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросТов.Текст =
	"ВЫБРАТЬ
    |   РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
    |   РеализацияТоваровУслугТовары.Номенклатура.Родитель КАК Родитель,
    |   РеализацияТоваровУслугТовары.Количество,
    |   РеализацияТоваровУслугТовары.Коэффициент,
    |   РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Коэффициент КАК НЕТТО,
    |   ЗначенияСвойствОбъектов.Значение КАК ТорговаяМарка,
    |   Штрихкоды.Штрихкод,
    |   НоменклатураАртикулыКонтрагентов.Артикул
    |ИЗ
    |   РегистрСведений.Штрихкоды КАК Штрихкоды
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
    |           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
    |           ПО РеализацияТоваровУслугТовары.Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
    |           ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.АртикулыКонтрагентов КАК НоменклатураАртикулыКонтрагентов
    |           ПО (НоменклатураАртикулыКонтрагентов.Контрагент = РеализацияТоваровУслугТовары.Ссылка.Контрагент)
    |               И (НоменклатураАртикулыКонтрагентов.Ссылка = РеализацияТоваровУслугТовары.Номенклатура)
    |       ПО Штрихкоды.Владелец = РеализацияТоваровУслугТовары.Номенклатура
    |ГДЕ
    |   ЗначенияСвойствОбъектов.Свойство = &Свойство
    |   И РеализацияТоваровУслугТовары.Ссылка = &ТекущийДокумент
    |
    |УПОРЯДОЧИТЬ ПО
    |   Номенклатура";
	ЗапросТовары = ЗапросТов.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_УпаковочныйЛист";
	Макет       = ПолучитьМакет("УЛЭпицентр");

	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата,,,);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	//ОбластьМакета.Параметры.НомерИнвойса = "INV" + СтрЗаменить(Строка(Шапка.Год),Символы.НПП,"") + Формат(Шапка.НомерИнвойса,"ЧЦ=3; ЧВН=") + " от " + Формат(Шапка.Дата,"ДЛФ=Д");
	ОбластьМакета.Параметры.НомерУпаковочногоЛиста = "PL" + СтрЗаменить(Строка(Шапка.Год),Символы.НПП,"") + Формат(Шапка.НомерИнвойса,"ЧЦ=3; ЧВН=") + " от " + Формат(Шапка.Дата,"ДЛФ=Д");
	ОбластьМакета.Параметры.Организация = СтрЗаменить(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,ЮридическийАдрес,",,),"юр. адрес: ","");
	ОбластьМакета.Параметры.Контрагент = СтрЗаменить(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,ЮридическийАдрес,",,),"юр. адрес: ","");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);                                            

	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ном = 0;
	ВсегоМест = 0;
	ВсегоПоддонов = 0;
	Для каждого строка из ЗапросТовары Цикл
		ном = ном + 1;
		ОбластьСтрокаТаблицы.Параметры.Номер = ном;
		ОбластьСтрокаТаблицы.Параметры.Заполнить(строка);
		КоличествоИЕУ = ПолучитьИЕУ(строка.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Коробка);
		Если КоличествоИЕУ <> 0 Тогда
			ОбластьСтрокаТаблицы.Параметры.УпаковкаТовара = ?(КоличествоИЕУ=1,"банка","коробка ("+ КоличествоИЕУ + " шт)");
			КоличествоМест = Формат(строка.Количество/КоличествоИЕУ, "ЧДЦ=2");
			ОбластьСтрокаТаблицы.Параметры.Мест = КоличествоМест;
        КонецЕсли;
        ОбластьСтрокаТаблицы.Параметры.Артикул = СокрЛП(строка.Артикул);
		ОбластьСтрокаТаблицы.Параметры.ТорговаяМарка = строка.ТорговаяМарка;
		КоличествоИЕУ_ = ПолучитьИЕУ(строка.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Паллета);
		КоличествоПоддонов = ?(КоличествоИЕУ_=0,0,строка.Количество/КоличествоИЕУ_);
		КоличествоПоддонов=Окр(КоличествоПоддонов,2);
		ВсегоМест = ВсегоМест + КоличествоМест;
		ВсегоПоддонов = ВсегоПоддонов + КоличествоПоддонов;
		ТабДокумент.Вывести(ОбластьСтрокаТаблицы);                                            
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогиДокумента");
	ОбластьМакета.Параметры.ИтогоМест = ВсегоМест;
	ОбластьМакета.Параметры.ИтогоНетто = ЗапросТовары.Итог("НЕТТО");
	ОбластьМакета.Параметры.ИтогоПоддонов = ВсегоПоддонов;
	ТабДокумент.Вывести(ОбластьМакета);                                            

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);                                            

	Возврат ТабДокумент;
    
КонецФункции //ПечатьУЛЭпицентр

 
//Окончание)Верескул Игорь 

//ИЗМЕНЕНО Верескул Игорь(Начало 05.03.2015

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН_Практикер()
  ТабДокумент = Новый ТабличныйДокумент;
  тКоды=РегистрыСведений.КодыОрганизации.СрезПоследних(,Новый Структура("Организация",Организация));
  тКонтакты="+380(48) 707-01-20";
  Макет       = ПолучитьМакет("ТТН_Практикер"); 
  Шапка=Макет.ПолучитьОбласть("Шапка");
  Шапка.Параметры.ПредставлениеПоставщика=Организация.НаименованиеПолное;
  Шапка.Параметры.ЕДПОУ=тКоды[0].КодПоЕДРПОУ;
  Шапка.Параметры.Телефон=тКонтакты;//тКонтакты[0].Представление;
  Шапка.Параметры.ДатаДок=Формат(Дата, "ДФ=dd.MM.yyyy");
  Шапка.Параметры.Контрагент=Контрагент;
  Шапка.Параметры.АдресДоставки=кпкТорговаяТочка.Адрес;
  ТабДокумент.Вывести(Шапка);
  Тело=Макет.ПолучитьОбласть("Тело");
  Запрос = Новый Запрос;
  Запрос.Текст = "ВЫБРАТЬ
                 |	РеализацияТоваровУслугТовары.Ссылка,
                 |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
                 |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
                 |	РеализацияТоваровУслугТовары.Количество,
                 |	НоменклатураАртикулыКонтрагентов.Артикул,
                 |	Штрихкоды.Штрихкод,
                 |	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
                 |	РеализацияТоваровУслугТовары.ЕдиницаИзмеренияМест,
                 |	РеализацияТоваровУслугТовары.Номенклатура
                 |ИЗ
                 |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
                 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.АртикулыКонтрагентов КАК НоменклатураАртикулыКонтрагентов
                 |		ПО РеализацияТоваровУслугТовары.Номенклатура = НоменклатураАртикулыКонтрагентов.Ссылка
                 |			И РеализацияТоваровУслугТовары.Ссылка.Контрагент = НоменклатураАртикулыКонтрагентов.Контрагент
                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
                 |		ПО РеализацияТоваровУслугТовары.Номенклатура = Штрихкоды.Владелец
                 |ГДЕ
                 |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	НомерСтроки";
  Запрос.УстановитьПараметр("Ссылка", Ссылка);
  РезультатЗапроса = Запрос.Выполнить().Выбрать();
  
  ГруппаМест=0; ГруппаПоддонов=0; ВсегоКол=0;
  Пока РезультатЗапроса.Следующий() Цикл
  	Тело.Параметры.Заполнить(РезультатЗапроса);
	ВсегоКол=ВсегоКол+ РезультатЗапроса.Количество;
	КоличествоИЕУ = ПолучитьИЕУ(РезультатЗапроса.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Коробка);
	Тело.Параметры.КоличествоУпаковок=Окр(?(КоличествоИЕУ=0,РезультатЗапроса.Количество,РезультатЗапроса.Количество/КоличествоИЕУ),2);
	ГруппаМест = ГруппаМест + Формат(?(КоличествоИЕУ=0,РезультатЗапроса.Количество,РезультатЗапроса.Количество/КоличествоИЕУ), "ЧДЦ=2");
	КоличествоИЕУ_ = ПолучитьИЕУ(РезультатЗапроса.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Паллета);
	Тело.Параметры.КолчествоПаллет = Окр(?(КоличествоИЕУ_=0,РезультатЗапроса.Количество,РезультатЗапроса.Количество/КоличествоИЕУ_),2);
	ГруппаПоддонов = ГруппаПоддонов + Формат(?(КоличествоИЕУ_=0,РезультатЗапроса.Количество,РезультатЗапроса.Количество/КоличествоИЕУ_), "ЧДЦ=2");
	ТабДокумент.Вывести(Тело);
  КонецЦикла; 
  Подвал=Макет.ПолучитьОбласть("Подвал");
  Подвал.Параметры.ВсегоКол=ВсегоКол;
  Подвал.Параметры.ВсегоУпак=ГруппаМест;
  Подвал.Параметры.ВсегоПоддонов=ГруппаПоддонов;
  ТабДокумент.Вывести(Подвал);
  Возврат ТабДокумент;
КонецФункции //ПечатьТТН_Практикер

Функция ПечатьТТН_Ашан()
  ТабДокумент = Новый ТабличныйДокумент;
  тКоды=РегистрыСведений.КодыОрганизации.СрезПоследних(,Новый Структура("Организация",Организация));
  тКонтакты="+380(48) 707-01-20";
  Макет       = ПолучитьМакет("ТТН_Ашан"); 
  Шапка=Макет.ПолучитьОбласть("Шапка");
  Шапка.Параметры.ПредставлениеПоставщика=Организация.НаименованиеПолное;
  Шапка.Параметры.ЕДПОУ=тКоды[0].КодПоЕДРПОУ;
  Шапка.Параметры.Телефон=тКонтакты;//тКонтакты[0].Представление;
  Шапка.Параметры.ДатаДок=Формат(Дата, "ДФ=dd.MM.yyyy");
  Если ЗначениеЗаполнено(Сделка) Тогда
    Шапка.Параметры.ДатаЗаказа = Формат(Сделка.Дата, "ДФ=dd.MM.yyyy");
    Шапка.Параметры.НомерЗаказа = Сделка.Комментарий; 
  КонецЕсли; 
  
  Шапка.Параметры.Контрагент=Контрагент;
  Шапка.Параметры.АдресДоставки=кпкТорговаяТочка.Адрес;
  ТабДокумент.Вывести(Шапка);
  Тело=Макет.ПолучитьОбласть("Тело");
  Запрос = Новый Запрос;
  Запрос.Текст = "ВЫБРАТЬ
                 |	РеализацияТоваровУслугТовары.Ссылка,
                 |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
                 |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
                 |	РеализацияТоваровУслугТовары.Количество,
                 |	НоменклатураАртикулыКонтрагентов.Артикул,
                 |	Штрихкоды.Штрихкод,
                 |	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
                 |	РеализацияТоваровУслугТовары.ЕдиницаИзмеренияМест,
                 |	РеализацияТоваровУслугТовары.Номенклатура
                 |ИЗ
                 |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
                 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.АртикулыКонтрагентов КАК НоменклатураАртикулыКонтрагентов
                 |		ПО РеализацияТоваровУслугТовары.Номенклатура = НоменклатураАртикулыКонтрагентов.Ссылка
                 |			И РеализацияТоваровУслугТовары.Ссылка.Контрагент = НоменклатураАртикулыКонтрагентов.Контрагент
                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
                 |		ПО РеализацияТоваровУслугТовары.Номенклатура = Штрихкоды.Владелец
                 |ГДЕ
                 |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	НомерСтроки";
  Запрос.УстановитьПараметр("Ссылка", Ссылка);
  РезультатЗапроса = Запрос.Выполнить().Выбрать();
  
  ГруппаМест=0; ГруппаПоддонов=0; ВсегоКол=0;
  Пока РезультатЗапроса.Следующий() Цикл
  	Тело.Параметры.Заполнить(РезультатЗапроса);
	ВсегоКол=ВсегоКол+ РезультатЗапроса.Количество;
	КоличествоИЕУ = ПолучитьИЕУ(РезультатЗапроса.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Коробка);
	Тело.Параметры.КоличествоУпаковок=Окр(?(КоличествоИЕУ=0,РезультатЗапроса.Количество,РезультатЗапроса.Количество/КоличествоИЕУ),2);
	ГруппаМест = ГруппаМест + Формат(?(КоличествоИЕУ=0,РезультатЗапроса.Количество,РезультатЗапроса.Количество/КоличествоИЕУ), "ЧДЦ=2");
	КоличествоИЕУ_ = ПолучитьИЕУ(РезультатЗапроса.Номенклатура, Справочники.КлассификаторЕдиницИзмерения.Паллета);
	Тело.Параметры.КолчествоПаллет = Окр(?(КоличествоИЕУ_=0,РезультатЗапроса.Количество,РезультатЗапроса.Количество/КоличествоИЕУ_),2);
	ГруппаПоддонов = ГруппаПоддонов + Формат(?(КоличествоИЕУ_=0,РезультатЗапроса.Количество,РезультатЗапроса.Количество/КоличествоИЕУ_), "ЧДЦ=2");
	ТабДокумент.Вывести(Тело);
  КонецЦикла; 
  Подвал=Макет.ПолучитьОбласть("Подвал");
  Подвал.Параметры.ВсегоКол=ВсегоКол;
  Подвал.Параметры.ВсегоУпак=ГруппаМест;
  Подвал.Параметры.ВсегоПоддонов=ГруппаПоддонов;
  ТабДокумент.Вывести(Подвал);
  Возврат ТабДокумент;
КонецФункции //ПечатьТТН_Ашан

Функция ПечатьСогласования()
    ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(Ссылка);
    УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РеализацияТоваровУслуг", "Согласование", 
										ПараметрКоманды, Неопределено, Неопределено);
    		
КонецФункции
 
//Окончание)Верескул Игорь 

Функция ПечатьТТН()
	
	ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	
	ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
	ОбработкаПечати.ПунктРазгрузки = АдресДоставки;
	
	ОбработкаПечати.Открыть();
	
	Возврат Неопределено;
	
КонецФункции // ПечатьТТН()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли; 
		
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
		
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Акт" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг(Ложь);
	ИначеЕсли ИмяМакета = "1Т" или ИмяМакета = "_1Т" Тогда
		ТабДокумент = ПечатьТТН();
		//Коновалова 26022013 +
	ИначеЕсли ИмяМакета = "Инвойс" Тогда
		ТабДокумент = ПечатьИнвойс();
	ИначеЕсли ИмяМакета = "УпаковочныйЛист" Тогда
		ТабДокумент = ПечатьУпаковочныйЛист();
		//Коновалова 26022013 -
        
    ИначеЕсли ИмяМакета = "УЛЭпицентр" Тогда
		ТабДокумент = ПечатьУЛЭпицентр();
        
    ИначеЕсли ИмяМакета ="ТТН_Практикер" Тогда
		ТабДокумент=ПечатьТТН_Практикер();
    ИначеЕсли ИмяМакета ="ТТН_Ашан" Тогда
		ТабДокумент = ПечатьТТН_Ашан();
	ИначеЕсли ИмяМакета ="Согласование" Тогда
		ТабДокумент=ПечатьСогласования();	
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ИмяМакета = "ТранспУпаковки" Тогда
			
		Обр   = Обработки.ТранспортныеУпаковки.Создать();
		Форма = Обр.ПолучитьФорму(,ЭтотОбъект,);
		Если Форма.Открыта() Тогда
			Форма.Активизировать();
		Иначе
			Форма.Открыть();
			Форма.ПервоначальноеЗаполнение(Ссылка);
		КонецЕсли;
			
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
			
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
			
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	Иначе
		//Формы Накладная печатаются из модуля менеджера
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.РеализацияТоваровУслуг", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РеализацияТоваровУслуг", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
	СтруктПечатныхФорм = Новый Структура;
	СтруктПечатныхФорм.Вставить( "Накладная",    	"Расходная накладная");
	СтруктПечатныхФорм.Вставить( "Акт",          	"Акт об оказании услуг");
	СтруктПечатныхФорм.Вставить( "_1Т",             "1-Т (Товарно-транспортная накладная)");
	СтруктПечатныхФорм.Вставить( "Бланк",           "Бланк товарного наполнения (адресный склад)");
	СтруктПечатныхФорм.Вставить( "ТранспУпаковки",  "Штрихкоды транспортных упаковок");
	СтруктПечатныхФорм.Вставить("СерийныеНомера",   "Список серийных номеров");
	//Коновалова 26022013 +
	СтруктПечатныхФорм.Вставить("Инвойс", "Инвойс");
	СтруктПечатныхФорм.Вставить("УпаковочныйЛист", "Упаковочный лист");
    
	//Коновалова 26022013 -
    //ИЗМЕНЕНО Верескул Игорь(Начало 06.06.2016
    СтруктПечатныхФорм.Вставить("УЛЭпицентр", "УЛ Эпицентр");
    СтруктПечатныхФорм.Вставить("ТТН_Практикер", "ТТН практикер");
    СтруктПечатныхФорм.Вставить("ТТН_Ашан", "ТТН Ашан");
    СтруктПечатныхФорм.Вставить("Согласование", "Согласование скидок в документе");

    //Окончание)Верескул Игорь 
    
    
    
	Возврат СтруктПечатныхФорм;
		
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Проверяет необходимость расчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()
	ИспользованиеСкидок = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);

	Если НЕ ЗначениеЗаполнено(ИспользованиеСкидок) Тогда
		возврат Ложь;
	КонецЕсли;

	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;
	
	Если НЕ мРассчитыватьАвтоматическиеСкидки
		Или Проведен Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет добавление возвратной тары из документа поступления товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ДобавитьВозвратнуюТаруПоПоступлениюТоваровУпр(ДокПоступление) Экспорт
	
	ТабТара = ДокПоступление.ВозвратнаяТара.Выгрузить();
	ТабТара.ЗаполнитьЗначения(0, "Цена,Сумма");
	ТабТара.Колонки.Заказ.Имя = "ЗаказПокупателя";
	
	ВозвратнаяТара.Загрузить(ТабТара);
	Для Каждого СтрокаТара Из ВозвратнаяТара Цикл
		СтрокаТара.СпособСписанияОстаткаТоваров = ?(НЕ ЗначениеЗаполнено(СтрокаТара.ЗаказПокупателя),
		Перечисления.СпособыСписанияОстаткаТоваров.СоСклада,
		Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьВозвратнуюТаруПоПоступлениюТоваровУпр()

// Процедура выполняет заполниение возвратной тары по поступлению Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(ДокументОснование, МассивЗаказов) Экспорт
	
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокТары = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументСсылка";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Склад        КАК Склад,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЛимитыТары.ЛимитПокупателю ЕСТЬ NULL  // Остатки тары у покупателя в регистре отрицательные
	|			ИЛИ (Док.Количество - ОстаткиТары.КоличествоОстаток) < (ЛимитыТары.ЛимитПокупателю) ТОГДА
	|			Док.Количество
	|		КОГДА ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток > 0 ТОГДА
	|			ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК КоличествоТары, // минимум из указанного в документе, и которое можно отгрузить (лимит - уже отгружено)
	|	Остатки.КоличествоОстаток КАК ОстатокТары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЛимитыВозвратнойТары.СрезПоследних(, 
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары +")  
	|	) КАК ЛимитыТары
	|ПО 
	|	ЛимитыТары.Номенклатура = Док.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|	              И СтатусПередачи = &СтатусПередачи 
	|	) КАК ОстаткиТары
	|ПО 
	|	ОстаткиТары.Номенклатура = Док.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,
	|		Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|		// УСЛОВИЕ_СкладИзШапки
	|	    ) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура
	|	И Док.Склад = Остатки.Склад
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	|";
	
	Если МассивЗаказов <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "И Док.Заказ В(&МассивЗаказов)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Док.Заказ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_СкладИзШапки", ?(мУказаниеСкладовВТЧ, "", "И Склад = &Склад"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента"   , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Неопределено);
	Запрос.УстановитьПараметр("ДокументСсылка"       , ДокументОснование);
	Запрос.УстановитьПараметр("Склад"                , Склад);
	Запрос.УстановитьПараметр("СтатусПередачи"       , Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("МассивЗаказов",         МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаОстатков"		 , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОстатокТары = ?(Выборка.ОстатокТары = NULL, 0, Выборка.ОстатокТары);
		Количество  = Мин(Выборка.КоличествоТары, ОстатокТары);
		
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();
		
		СтрокаВозвратнойТары.Номенклатура    = Выборка.Номенклатура;
		СтрокаВозвратнойТары.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		СтрокаВозвратнойТары.Склад           = Выборка.Склад;
		СтрокаВозвратнойТары.Количество      = Количество;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаВозвратнойТары, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
		
		// Получим цену из регистра сведений ЦеныНоменклатуры
		Если НЕ ЗначениеЗаполнено(ТипЦен)
			или (НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов)) Тогда 
			СтрокаВозвратнойТары.Цена = 0;
		Иначе
			// из регистра
			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаВозвратнойТары.Номенклатура, , ТипЦен, Дата,
			СтрокаВозвратнойТары.Номенклатура.ЕдиницаХраненияОстатков, ДоговорКонтрагента.ВалютаВзаиморасчетов,
			КурсВзаиморасчетов, КратностьВзаиморасчетов, , ДоговорКонтрагента);
			
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки бурутся из номенклатуры
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				СтрокаВозвратнойТары.Цена = 0;
			Иначе
				СтрокаВозвратнойТары.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС, Истина,
				Ценообразование.ПолучитьСтавкуНДС(СтрокаВозвратнойТары.Номенклатура.СтавкаНДС));
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоПоступлениюТоваров()

// Процедура выполняет заполниение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваровУпр(ДокументОснование,ИмяТЧ = "Товары", МассивЗаказов = Неопределено) Экспорт
	
	СкладыВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
	
	Если НЕ СкладыВТЧ И НЕ ЗначениеЗаполнено(Склад) Тогда
		Если ДокументОснование.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Склад = ДокументОснование.СкладОрдер.Склад;
		Иначе			
			Склад = ДокументОснование.СкладОрдер;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад"            , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Качество"         , Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ДатаОстатков"	 , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЕстьЗаказы = МассивЗаказов <> Неопределено и ИмяТЧ<>"Оборудование" ;
	Если ЕстьЗаказы Тогда
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	КонецЕсли;
	
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " 
	|ГДЕ Ссылка = &ДокументОснование";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Док.СтавкаНДС,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) < МАКСИМУМ(Остатки.КоличествоОстаток)
	|		ТОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент)
	|		ИНАЧЕ
	|			МАКСИМУМ(Остатки.КоличествоОстаток)
	|	КОНЕЦ КАК МинКоличествоВДокументеОстаток,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	Док.ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|	Док.Склад, ", "") + "
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Остатки.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|		Остатки.Склад КАК Склад,", "") + "
	|		СУММА(Остатки.КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОстаткиНаСкладах.Номенклатура КАК Номенклатура,
	|			ОстаткиНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ОстаткиНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|			ОстаткиНаСкладах.Склад КАК Склад,", "") + "
	|			ОстаткиНаСкладах.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,
	|			   Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|			   И Склад    = &Склад") + "
	|			   И Качество = &Качество
	|			) КАК ОстаткиНаСкладах
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			ОстаткиВРознице.Номенклатура КАК Номенклатура,
	|			ОстаткиВРознице.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ОстаткиВРознице.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|			ОстаткиВРознице.Склад КАК Склад,", "") + "
	|			ОстаткиВРознице.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков,
	|			   Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|			   И Склад    = &Склад") + "
	|			   И Качество = &Качество
	|			) КАК ОстаткиВРознице
	|		) КАК Остатки
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|		Склад,", "") + "
	|		СерияНоменклатуры
	|	) КАК Остатки
	|ПО
	|	Док.Номенклатура                 = Остатки.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры"
	+ ?(СкладыВТЧ, "
	|	И Док.Склад          = Остатки.Склад", "") + "
	|
	|ГДЕ Док.Ссылка = &ДокументОснование 
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.ХарактеристикаНоменклатуры,
	|	// ГРУППИРОВКА_ПО_ЗАКАЗАМ
	|	Док.СерияНоменклатуры" 
	+ ?(СкладыВТЧ, ", 
	|	Док.Склад", "") + "
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";
	
	Если ЕстьЗаказы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      " И Док.Заказ В(&МассивЗаказов) ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  " Док.Заказ, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", " Док.Заказ ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		
		СписКоличество = Выборка.МинКоличествоВДокументеОстаток;
		
		Если НЕ ЗначениеЗаполнено(СписКоличество) ИЛИ СписКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ЗаказПокупателя            = Выборка.ЗаказПокупателя;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
		
		Если СкладыВТЧ Тогда
			СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад = Склад;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		СтрокаТабличнойЧасти.Количество = (СписКоличество * Выборка.КоэффициентЕдиницыХранения) / СтрокаТабличнойЧасти.Коэффициент;
		
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
			СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете);
	КонецЦикла;
	
	// Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мМинимальныеЦены = Новый ТаблицаЗначений;
		мМинимальныеЦены.Колонки.Добавить("Номенклатура");
		мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
		мМинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
		мМинимальныеЦены.Колонки.Добавить("Цена");
		
		мСписокФильтров = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа();
		
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",                      ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата));
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров,  мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

// Заполняет склды в табличной части документа значением из шапки вызывается перед 
// записью и перед заполнением по кнопке "Заполнить и провести"
//
Процедура ЗаполнитьСкладыВТЧ()
	мКэшЗаказПокупателя = Новый Соответствие;
	ЗапросаСкладГруппа = Новый Запрос;
	ЗапросаСкладГруппа.Текст = "ВЫБРАТЬ СкладГруппа КАК СкладГруппа ИЗ Документ.ЗаказПокупателя ГДЕ Ссылка = &Ссылка";

	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки    =  Не мУказаниеСкладовВТЧ;
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	Для каждого СтрокаТЧ из Товары Цикл
		Если СкладИзШапки И НЕ ЕстьКолонкаЗаказ Тогда
			Если СтрокаТЧ.Склад <> Склад Тогда
				СтрокаТЧ.Склад = Склад;
			КонецЕсли;
		ИначеЕсли ЕстьКолонкаЗаказ И НЕ СкладИзШапки И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧЗаказПокупателяСкладГруппа = мКэшЗаказПокупателя[СтрокаТЧ.ЗаказПокупателя];
			Если СтрокаТЧЗаказПокупателяСкладГруппа = Неопределено Тогда
				ЗапросаСкладГруппа.УстановитьПараметр("Ссылка", СтрокаТЧ.ЗаказПокупателя);
				Выборка = ЗапросаСкладГруппа.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаТЧЗаказПокупателяСкладГруппа = Выборка.СкладГруппа;
					мКэшЗаказПокупателя.Вставить(СтрокаТЧ.ЗаказПокупателя, Выборка.СкладГруппа);
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧЗаказПокупателяСкладГруппа)
				ИЛИ ТипЗнч(СтрокаТЧЗаказПокупателяСкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда
				Если СтрокаТЧ.Склад <> Склад Тогда
					СтрокаТЧ.Склад = Склад;
				КонецЕсли;
			Иначе
				Если СтрокаТЧ.Склад <> СтрокаТЧЗаказПокупателяСкладГруппа Тогда
					СтрокаТЧ.Склад = СтрокаТЧЗаказПокупателяСкладГруппа;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЧ из ВозвратнаяТара Цикл
		Если СкладИзШапки И НЕ ЕстьКолонкаЗаказ Тогда
			Если СтрокаТЧ.Склад <> Склад Тогда
				СтрокаТЧ.Склад = Склад;
			КонецЕсли;
		ИначеЕсли ЕстьКолонкаЗаказ И НЕ СкладИзШапки И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧЗаказПокупателяСкладГруппа = мКэшЗаказПокупателя[СтрокаТЧ.ЗаказПокупателя];
			Если СтрокаТЧЗаказПокупателяСкладГруппа = Неопределено Тогда
				ЗапросаСкладГруппа.УстановитьПараметр("Ссылка", СтрокаТЧ.ЗаказПокупателя);
				Выборка = ЗапросаСкладГруппа.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаТЧЗаказПокупателяСкладГруппа = Выборка.СкладГруппа;
					мКэшЗаказПокупателя.Вставить(СтрокаТЧ.ЗаказПокупателя, Выборка.СкладГруппа);
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧЗаказПокупателяСкладГруппа)
				ИЛИ ТипЗнч(СтрокаТЧЗаказПокупателяСкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда
				Если СтрокаТЧ.Склад <> Склад Тогда
					СтрокаТЧ.Склад = Склад;
				КонецЕсли;
			Иначе
				Если СтрокаТЧ.Склад <> СтрокаТЧЗаказПокупателяСкладГруппа Тогда
					СтрокаТЧ.Склад = СтрокаТЧЗаказПокупателяСкладГруппа;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСкладыВТЧ()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям(ДатаОстатков=неопределено)
	
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");
	СкладыТабличнойЧасти = Товары.Выгрузить();
	СкладыТабличнойЧасти.Свернуть("Склад");
	
	МассивНоменклатуры   = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = СкладыТабличнойЧасти.ВыгрузитьКолонку("Склад");
	
	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий         = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям,ДатаОстатков);
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();
	
	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании") И глЗначениеПеременной("ИспользоватьСерииНоменклатуры");
	
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтуктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);
		флЗаполнятьИзРезервов = ложь;
		Если ИспользоватьУказаниеСерийНоменклатурыПриРезервировании И ИсходнаяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва  Тогда
			Если ИсходнаяСтрока.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ЗаказПокупателя);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;
		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;
		
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией        = Неопределено;
		СтрокаМаксимальнойСуммы    = Неопределено;
		НепогашеннаяСумма          = ИсходнаяСтрока.Сумма;
		МаксимальнаяСумма          = 0;
		
		ЗаполненКлючСвязи = Ложь;
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;
			
			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			
			НоваяСтрока = Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			Если НЕ ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры               = Строка.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатуры               = ИсходнаяСтрока.СерияНоменклатуры;
			КонецЕсли;
			НоваяСтрока.Количество                          = СписанноеКоличество;
			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);
			
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;
			
			ТекущаяСумма      = НоваяСтрока.Сумма;
			НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
			
			// Проверим текущую сумму на максимум.
			Если ТекущаяСумма > МаксимальнаяСумма Тогда
				МаксимальнаяСумма       = ТекущаяСумма;
				СтрокаМаксимальнойСуммы = НоваяСтрока;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить > 0 Тогда
			
			Если СтрокаСПустойСерией = Неопределено Тогда
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
				
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);
				
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				
				ТекущаяСумма      = НоваяСтрока.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
				
				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = НоваяСтрока;
				КонецЕсли;
				
			Иначе
				
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				
				ТекущаяСумма      = СтрокаСПустойСерией.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
				
				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = СтрокаСПустойСерией;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Если что-то осталось, кидаем на строку с максимальной суммой.
		Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
			СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;
			
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьПоСериям()

//Процедура выполняет заполнение табличной части неполученными ТМЦ (резервом) по заказу покупателя.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ТабличнаяЧасть, ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТабличнаяЧасть = Товары Тогда
		ТекстЗапросаПоТЧЗаказа = "
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмеренияМест, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказПокупателя.Товары
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмеренияМест) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура И Остатки.ХарактеристикаНоменклатуры = ТЧЗаказа.ХарактеристикаНоменклатуры";
	Иначе
		ТекстЗапросаПоТЧЗаказа = "
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказПокупателя.ВозвратнаяТара
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура";
	КонецЕсли;
	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",       Сделка);
	Запрос.УстановитьПараметр("Склад",        Склад);
	Запрос.УстановитьПараметр("СтатусТары",   Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	//Формирование временной таблицы
	МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЕстьТоварыСУчетомПоСерии = ложь;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Остатки.Номенклатура                 КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	Остатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.Цена                         КАК Цена,
	|	Остатки.ПроцентСкидкиНаценки         КАК ПроцентСкидкиНаценки,
	|	Остатки.ПроцентАвтоматическихСкидок  КАК ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки  КАК УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
	|	Остатки.СтавкаНДС                    КАК СтавкаНДС,
	|	Остатки.КоличествоОстаток            КАК КоличествоОстаток,
	|	Остатки.СуммаВзаиморасчетовОстаток   КАК СуммаВзаиморасчетовОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|                                                И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + ") КАК Остатки
	|ГДЕ КоличествоОстаток>0";
	Запрос.Выполнить();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	//Условие используется в виртуальной таблице остатков
	УсловиеСклад = "";
	Если мУказаниеСкладовВТЧ Тогда
		Если ЗначениеЗаполнено(ДокументОснование.СкладГруппа)
			И ТипЗнч(ДокументОснование.СкладГруппа) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
			ГруппаДоступностиСкладов = ДокументОснование.СкладГруппа;
		Иначе
			ГруппаДоступностиСкладов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ГруппаДоступностиСкладов");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГруппаДоступностиСкладов) Тогда
			Запрос.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
			
			УсловиеСклад = 
				" И Склад В (
				|	ВЫБРАТЬ
				|		ГруппыДоступности.Склад
				|	ИЗ
				|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
				|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";	
		КонецЕсли;		
	Иначе
		УсловиеСклад = " И Склад = &Склад";
	КонецЕсли; 
	
	УсловиеОстатки = "Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ВременнаяТаблицаОстаткиПоЗаказу)" + УсловиеСклад;
	
	ПревышатьОстаткиОрганизации = УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации(Организация);
	
	Если НЕ ПревышатьОстаткиОрганизации Тогда
		УсловиеОстаткиОрганизаций = "Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ВременнаяТаблицаОстаткиПоЗаказу)";
		ПараметрыУП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
		Если ПараметрыУП <> Неопределено И ПараметрыУП.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			УсловиеОстаткиОрганизаций = УсловиеОстаткиОрганизаций + УсловиеСклад;
		КонецЕсли; 
	КонецЕсли; 
	
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура                 КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	Остатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Остатки.Номенклатура.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
	|	Остатки.Цена                         КАК Цена,
	|	Остатки.ПроцентСкидкиНаценки         КАК ПроцентСкидкиНаценки,
	|	Остатки.ПроцентАвтоматическихСкидок  КАК ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки  КАК УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
	|	NULL                                 КАК Склад,
	|	NULL                                 КАК СортировкаПоСкладу,
	|	Остатки.СтавкаНДС                    КАК СтавкаНДС,
	|	Остатки.КоличествоОстаток            КАК КоличествоОстатокПоЗаказу,
	|	Остатки.СуммаВзаиморасчетовОстаток   КАК СуммаОстатокПоЗаказу,
	|	0                                    КАК ОстатокНаСкладе,
	|	0                                    КАК ОстатокРезерваПоСделке,
	|	0                                    КАК ОстатокРезерва,
	|	0                                    КАК ОстатокКПередаче,
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL 
	|		ТОГДА 9999999 
	|		ИНАЧЕ ТЧЗаказа.НомерСтроки 
	|	КОНЕЦ                                КАК НомерСтрокиЗаказа"
	
	+ ?(ТабличнаяЧасть = Товары, 
	"	, ТЧЗаказа.ЕдиницаИзмеренияМест      КАК ЕдиницаИзмеренияМест", "")
	
	+ ?(ТабличнаяЧасть = Товары И НЕ ПревышатьОстаткиОрганизации, "
	|	, ВЫБОР КОГДА ОстаткиОрганизации.КоличествоОстаток ЕСТЬ NULL 
	|		ТОГДА 0 
	|		ИНАЧЕ ОстаткиОрганизации.КоличествоОстаток 
	|	КОНЕЦ КАК КоличествоОстатокОрганизации", "") + "
	|ИЗ
	|	ВременнаяТаблицаОстаткиПоЗаказу КАК Остатки
	
	|" + ?(ТабличнаяЧасть = Товары И НЕ ПревышатьОстаткиОрганизации,
	"ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаОстатков, 
	|								 Организация = &Организация %Условие_Качество% 
	|								И " + УсловиеОстаткиОрганизаций + "
	|   ) КАК ОстаткиОрганизации
	|ПО
	|	Остатки.Номенклатура = ОстаткиОрганизации.Номенклатура 
	|	И Остатки.ХарактеристикаНоменклатуры = ОстаткиОрганизации.ХарактеристикаНоменклатуры", "") + " 
	
	|
	|" + ТекстЗапросаПоТЧЗаказа + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|	ОстаткиНаСкладе.Номенклатура                                     КАК Номенклатура,
	|	ОстаткиНаСкладе.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	NULL                                                             КАК ЕдиницаХранения,
	|	NULL                                                             КАК КоэффициентЕдиницыХранения,
	|	ОстаткиНаСкладе.Номенклатура.ВестиУчетПоСериям 					 КАК ВестиУчетПоСериям,
	|	0                                                                КАК Цена,
	|	0                                                                КАК ПроцентСкидкиНаценки,
	|	0                                                                КАК ПроцентАвтоматическихСкидок,
	|	NULL                                                             КАК УсловиеАвтоматическойСкидки,
	|	NULL                                                             КАК ЗначениеУсловияАвтоматическойСкидки,
	|	ОстаткиНаСкладе.Склад                                            КАК Склад,
	|	ВЫБОР КОГДА ОстаткиНаСкладе.Склад = &Склад ТОГДА
	|	0
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                       КАК СортировкаПоСкладу,
	|	ОстаткиНаСкладе.Номенклатура.СтавкаНДС      КАК СтавкаНДС,
	|	0                                           КАК КоличествоОстатокПоЗаказу,
	|	0                                           КАК СуммаОстатокПоЗаказу,
	|	ОстаткиНаСкладе.КоличествоОстаток           КАК ОстатокНаСкладе,
	|   РезервыОстаткиПоСделке.КоличествоОстаток    КАК ОстатокРезерваПоСделке,
	|   РезервыОстатки.КоличествоОстаток            КАК ОстатокРезерва,
	|   КПередаче.КоличествоОстаток                 КАК ОстатокКПередаче,
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL 
	|		ТОГДА 9999999 
	|		ИНАЧЕ ТЧЗаказа.НомерСтроки 
	|	КОНЕЦ                                       КАК НомерСтрокиЗаказа"
	
	+ ?(ТабличнаяЧасть = Товары, "
	|	, ТЧЗаказа.ЕдиницаИзмеренияМест             КАК ЕдиницаИзмеренияМест", "")
	
	+ ?(ТабличнаяЧасть = Товары И НЕ ПревышатьОстаткиОрганизации, "
	|	, 0                                         КАК КоличествоОстатокОрганизации", "") + "
	|		
	|   ИЗ
	|   // остатки на складе
	|	(ВЫБРАТЬ
	|		Склад КАК Склад,
	|		Номенклатура КАК Номенклатура,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Склад КАК Склад,
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, " + УсловиеОстатки + "
	|										%Условие_Качество%
	|			)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Склад КАК Склад,
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, " + УсловиеОстатки + "
	| 										%Условие_Качество%
	|			)
	|		) КАК ОстаткиНаСкладе
	|		СГРУППИРОВАТЬ ПО
	|			Склад,
	|			Номенклатура,
	|			ХарактеристикаНоменклатуры
	|	) КАК ОстаткиНаСкладе
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ //Резервы по сделке
	|		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков," + УсловиеОстатки + "
	|										И ДокументРезерва = &Сделка
	|		) КАК РезервыОстаткиПоСделке
	|	ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстаткиПоСделке.Номенклатура"
		+ ?(ТабличнаяЧасть = Товары, Символы.ПС + "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстаткиПоСделке.ХарактеристикаНоменклатуры ", "")	
		+ ?(мУказаниеСкладовВТЧ, Символы.ПС + "И ОстаткиНаСкладе.Склад = РезервыОстаткиПоСделке.Склад", "") 
		+ " 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков," + УсловиеОстатки + "
	|	                                   И ДокументРезерва <> &Сделка
	|		) КАК РезервыОстатки
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстатки.Номенклатура"
		+ ?(ТабличнаяЧасть = Товары, Символы.ПС + "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстатки.ХарактеристикаНоменклатуры ", "")	
		+ ?(мУказаниеСкладовВТЧ, Символы.ПС + "И ОстаткиНаСкладе.Склад = РезервыОстатки.Склад", "") 
		+ " 
	|ЛЕВОЕ СОЕДИНЕНИЕ // к передаче
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков," + УсловиеОстатки + "
	| 										%Условие_Качество%
	|										И СтатусПартии " + ?(ТабличнаяЧасть = Товары, " <> &СтатусТары", " = &СтатусТары") + "
	|	) КАК КПередаче
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = КПередаче.Номенклатура"
		+ ?(ТабличнаяЧасть = Товары, Символы.ПС + "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = КПередаче.ХарактеристикаНоменклатуры ", "")
		+ ?(мУказаниеСкладовВТЧ, Символы.ПС + "И ОстаткиНаСкладе.Склад = КПередаче.Склад", "")
		+ "
	|" + СтрЗаменить(ТекстЗапросаПоТЧЗаказа, "Остатки.", "ОстаткиНаСкладе.");
	
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"%Условие_Качество%"," И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый) ");
	Иначе
		Запрос.Текст = стрЗаменить(Запрос.Текст,"%Условие_Качество%"," ");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблица остатков по заказу по результатам запроса
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	ТаблицаПоЗаказу.Сортировать("НомерСтрокиЗаказа возр");
	
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	// Таблица остатков на складах, резервов и т. п.
	ТаблицаПоОстаткам = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоОстаткам.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоОстаткам.Получить(Сч);
		Если СтрокаТаблицы.ОстатокНаСкладе <= 0 Тогда
			ТаблицаПоОстаткам.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	ТаблицаПоОстаткам.Сортировать("СортировкаПоСкладу, ОстатокРезерваПоСделке УБЫВ");
	
	// Нам надо знать сколько на самом деле осталось конкретной номенклатуры 
	// с конкретной характеристикой	по данному заказу, поскольку в разрезе цен и скидок
	// остаки могут расходится
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	Если ТабличнаяЧасть = Товары Тогда
		Если ПревышатьОстаткиОрганизации Тогда
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
		Иначе
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, КоличествоОстатокОрганизации","КоличествоОстатокПоЗаказу");
		КонецЕсли;
	Иначе
		ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
	КонецЕсли;
	
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные(), ИмяТабличнойЧасти);
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные(), ИмяТабличнойЧасти);	

	Для каждого СтрокаТаблицы ИЗ ТаблицаБезЦен Цикл
		
		Если ТабличнаяЧасть = Товары Тогда
			Если ПревышатьОстаткиОрганизации Тогда
				ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
			Иначе
				ОстатокКоличестваПоЗаказу = Мин(СтрокаТаблицы.КоличествоОстатокПоЗаказу, СтрокаТаблицы.КоличествоОстатокОрганизации);
			КонецЕсли;
		Иначе
			ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		СтрокиЗаказа   = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);
		СтрокиОстатков = ТаблицаПоОстаткам.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
			
			Если ОстатокКоличестваПоЗаказу <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаЗаказа.КоличествоОстатокПоЗаказу <= 0 Тогда
				Продолжить;
			Иначе
				ОстатокКоличестваПоСтрокеЗаказа = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			КонецЕсли;
			
			//  Делаем два прохода в первом списываем все резервы по сделке, во втором, если
			//  количество еще не выбрано, то добираем из свободных остатков.
			Для Сч = 1 По 2 Цикл
				
				Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
					
					Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаОстатков.ОстатокНаСкладе = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					
					РезервПоСделке           = ?(СтрокаОстатков.ОстатокРезерваПоСделке = NULL, 0, СтрокаОстатков.ОстатокРезерваПоСделке);
					РезервПоДругимСделкам    = ?(СтрокаОстатков.ОстатокРезерва         = NULL, 0, СтрокаОстатков.ОстатокРезерва);
					КПередаче                = ?(СтрокаОстатков.ОстатокКПередаче       = NULL, 0, СтрокаОстатков.ОстатокКПередаче);
					СвободныйОстатокНаСкладе = Макс(СтрокаОстатков.ОстатокНаСкладе - РезервПоДругимСделкам - КПередаче, 0);
					
					КоличествоКСписанию   = ?(Сч = 1, Мин(Макс(СтрокаОстатков.ОстатокНаСкладе-КПередаче,0), РезервПоСделке), Макс(СвободныйОстатокНаСкладе-РезервПоСделке,0));
					КоличествоКЗаполнению = Мин(КоличествоКСписанию, Мин(ОстатокКоличестваПоЗаказу,  ОстатокКоличестваПоСтрокеЗаказа));
					
					Если КоличествоКЗаполнению = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОстатокКоличестваПоЗаказу       = ОстатокКоличестваПоЗаказу       - КоличествоКЗаполнению;
					ОстатокКоличестваПоСтрокеЗаказа = ОстатокКоличестваПоСтрокеЗаказа - КоличествоКЗаполнению;
					СтрокаОстатков.ОстатокНаСкладе  = СтрокаОстатков.ОстатокНаСкладе  - КоличествоКЗаполнению;
					
					СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
					
					СтрокаТабличнойЧасти.Номенклатура = СтрокаОстатков.Номенклатура;
					
					Если ТабличнаяЧасть = Товары Тогда
						Если не ЕстьТоварыСУчетомПоСерии И СтрокаОстатков.ВестиУчетПоСериям Тогда
							ЕстьТоварыСУчетомПоСерии = истина;
						КонецЕсли;

						СтрокаТабличнойЧасти.Количество       = ?(НЕ ЗначениеЗаполнено(СтрокаЗаказа.Коэффициент), 0,
						КоличествоКЗаполнению * СтрокаЗаказа.КоэффициентЕдиницыХранения / СтрокаЗаказа.Коэффициент);
						СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаЗаказа.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.Коэффициент      = СтрокаЗаказа.Коэффициент;
						
						Если ЗначениеЗаполнено(СтрокаЗаказа.ЕдиницаИзмеренияМест) Тогда
							СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаЗаказа.ЕдиницаИзмеренияМест;
							ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						Иначе
							ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						КонецЕсли;
						
						СтрокаТабличнойЧасти.СтавкаНДС                           = СтрокаЗаказа.СтавкаНДС;
						СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры          = СтрокаОстатков.ХарактеристикаНоменклатуры;

						СтрокаТабличнойЧасти.ПроцентСкидкиНаценки                = СтрокаЗаказа.ПроцентСкидкиНаценки;
						СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок         = СтрокаЗаказа.ПроцентАвтоматическихСкидок;
						СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки         = СтрокаЗаказа.УсловиеАвтоматическойСкидки;
						СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = СтрокаЗаказа.ЗначениеУсловияАвтоматическойСкидки;
						СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
						Сделка.ВалютаДокумента, ВалютаДокумента,
						ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
						Сделка.СуммаВключаетНДС,
						УчитыватьНДС,
						СуммаВключаетНДС,
						Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						
					Иначе
						
						СтрокаТабличнойЧасти.Количество = КоличествоКЗаполнению;
						СтрокаТабличнойЧасти.Цена       = СтрокаЗаказа.Цена;
					КонецЕсли;
					
					Если РезервПоСделке > 0 Тогда
						СтрокаОстатков.ОстатокРезерваПоСделке                = СтрокаОстатков.ОстатокРезерваПоСделке - КоличествоКЗаполнению;
					КонецЕсли;
					
					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					Иначе
						ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					КонецЕсли;
					
					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
					КонецЕсли;
					
					Если Сч = 1 Тогда
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
					Иначе
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
					КонецЕсли;
					
					СтрокаТабличнойЧасти.Склад           = СтрокаОстатков.Склад;
					СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
					
					Если ТабличнаяЧасть = Товары Тогда
						ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете);
					Иначе
						ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
					КонецЕсли;
					
				КонецЦикла; // По строкам остатков
			КонецЦикла;  // по проходам
		КонецЦикла; // по строкам заказа
	КонецЦикла;    // по строкам таблицы (без цен)
	
	//Заполнение серий
	Если ТабличнаяЧасть = Товары И ЕстьТоварыСУчетомПоСерии Тогда
		ЗаполнитьПоСериям(ДатаОстатков);
	КонецЕсли;
	
	// Заполнение табличной части СоставНабора
	Если ТабличнаяЧасть = Товары
		И ДокументОснование.СоставНабора.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПарДокумент", ДокументОснование);
		Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Док.Номенклатура,
		|	Док.ХарактеристикаНоменклатуры,
		|	Док.СерияНоменклатуры,
		|	Док.ЕдиницаИзмеренияМест,
		|	Док.ЕдиницаИзмерения,
		|	Док.Количество,
		|	Док.Коэффициент,
		|	Док.Цена,
		|	Док.СтавкаНДС,
		|	Док.ПроцентСкидкиНаценки,
		|	Док.ПроцентАвтоматическихСкидок,
		|	Док.УсловиеАвтоматическойСкидки,
		|	Док.ЗначениеУсловияАвтоматическойСкидки,
		|	Док.Сумма,
		|	Док.Ссылка.ВалютаДокумента         КАК ВалютаДокумента,
		|	Док.Ссылка.СуммаВключаетНДС        КАК СуммаВключаетНДС,
		|	Док.Ссылка.КратностьВзаиморасчетов КАК КратностьДокумента,
		|	Док.Ссылка.КурсВзаиморасчетов      КАК КурсДокумента,
		|	ВЫБОР 
		|		КОГДА Док.Размещение ССЫЛКА Справочник.Склады ТОГДА Док.Размещение
		|		КОГДА Док.Ссылка.СкладГруппа ССЫЛКА Справочник.Склады ТОГДА Док.Ссылка.СкладГруппа
		|		ИНАЧЕ &ПустойСклад
		|	КОНЕЦ                              КАК Склад,
		|	ВЫБОР 
		|		КОГДА Остатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ Остатки.КоличествоОстаток
		|	КОНЕЦ                              КАК Остаток,
		|	Док.КлючСтроки
		|
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ПарДокумент) КАК Остатки
		|		ПО Остатки.Номенклатура               = Док.Номенклатура
		|		 И Остатки.ХарактеристикаНоменклатуры = Док.ХарактеристикаНоменклатуры
		|
		|ГДЕ
		|	Док.Ссылка = &ПарДокумент
		|	И Док.Номенклатура.Комплект
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавленКомплект = Ложь;
		Выборка          = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОстатокКоличестваПоЗаказу = Мин(Выборка.Количество, Выборка.Остаток);
			
			Если ОстатокКоличестваПоЗаказу = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			
			НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры                   = Выборка.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
			НоваяСтрока.Количество                          = ОстатокКоличестваПоЗаказу;
			НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;
			
			НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
			Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока,  ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			НоваяСтрока.Качество                     = Справочники.Качество.Новый;
			НоваяСтрока.Склад                        = Выборка.Склад;
			НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
			НоваяСтрока.ЗаказПокупателя              = Сделка;

			ДобавленКомплект                         = Истина;
		КонецЦикла;
		
		Если ДобавленКомплект Тогда
			УправлениеЗапасами.ЗаполнитьСоставНабораПоОснованию(ЭтотОбъект, ДокументОснование, Истина);
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	КурсСделки = ЗаполнениеДокументов.КурсДокумента(Сделка,     мВалютаРегламентированногоУчета);
	КратностьСделки = ЗаполнениеДокументов.КратностьДокумента(Сделка,     мВалютаРегламентированногоУчета);
	ОстаткиУслуг = УправлениеЗаказами.ОстаткиУслугПоЗаказуПокупателя( Сделка, ДоговорКонтрагента, ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	
	Для каждого Строка из ОстаткиУслуг цикл
		СтрокаУслуг = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУслуг,Строка);
		СтрокаУслуг.Содержание = СокрЛП(СтрокаУслуг.Содержание);
		СтрокаУслуг.Количество                          = Строка.КолОстаток;
		СтрокаУслуг.Цена                                = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Цена,
			   Сделка.ВалютаДокумента, ВалютаДокумента,
			   КурсСделки,
			   Курс,
			   КратностьСделки,
			   Кратность);
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);
		
		СтрокаУслуг.ЗаказПокупателя = Сделка;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаУслуг, "Услуги", ОтражатьВБухгалтерскомУчете); 
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьУслугиПоОстаткам()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  ЗаполнятьПредоплату - Булево.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(ЗаполнятьПредоплату = Истина) Экспорт

	ЗаполнитьСкладыВТЧ();

	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	ТЗТовары = Товары.Выгрузить(, "Номенклатура");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "Номенклатура"), ТЗТовары);
	ТЗТовары.Свернуть("Номенклатура");

	МассивНоменклатуры = ТЗТовары.ВыгрузитьКолонку("Номенклатура");

	// Сформируем массив складов для фильтров запросов.
	СкладИзШапки = Не мУказаниеСкладовВТЧ;

	Если СкладИзШапки Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		ТЗСклады = Товары.Выгрузить(, "Склад");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "Склад"), ТЗСклады);
		ТЗСклады.Свернуть("Склад");

		МассивСклады = ТЗСклады.ВыгрузитьКолонку("Склад");

		КолвоЭлементов = МассивСклады.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			ТекЭлемент = МассивСклады[КолвоЭлементов - ОбратныйИндекс];

			Если Не ЗначениеЗаполнено(ТекЭлемент)Тогда
				МассивСклады.Удалить(КолвоЭлементов - ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОстаткиТоваровВРезерве.Склад,
	|	ОстаткиТоваровВРезерве.Номенклатура,
	|	ОстаткиТоваровВРезерве.ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровВРезерве.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва В (&МассивЗаказов)
	|	   И Склад В (&МассивСклады)
	|	   И Номенклатура В (&МассивНоменклатуры)
	|	) КАК ОстаткиТоваровВРезерве
	|");

	ТЗЗаказы = Товары.Выгрузить(, "ЗаказПокупателя");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "ЗаказПокупателя"), ТЗЗаказы);
	ТЗЗаказы.Свернуть("ЗаказПокупателя");

	Запрос.УстановитьПараметр("Ссылка"            , Ссылка);
	Запрос.УстановитьПараметр("МассивЗаказов"     , ТЗЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
	Запрос.УстановитьПараметр("МассивСклады"      , МассивСклады);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);

	Таблица = Запрос.Выполнить().Выгрузить();

	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	// Сначала вычтем из найденных остатков количество, размещение по которому явно указан
	// способ списания "из резерва". Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		// Сначала вычтем из найденных остатков количество, по которому явно указан
		// способ списания "из резерва". Для этого последовательно обойдем табличные части 
		// Товары и Возвратная тара.
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			// Сначала обходим все строки, у которых уже установлен способ списание "из резерва",
			// если способ списание "со склада" или не установлен - пропускаем строку
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров)
				ИЛИ СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;
			
			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
			
			// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
			КоличествоОсталосьПогасить = СтрокаТЧ.Количество;
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;
				
				СписанноеКоличество        = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				Строка.Количество          = Строка.Количество - СписанноеКоличество;
				
			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задан способ списания. Заполнять не будем
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// способу списания для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив(2);
	
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");
		
		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");
		
		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл
			
			Если СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				Продолжить;
			КонецЕсли;
			
			// Пересчитаем в единицы хранения
			СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;
			
			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
			
			// Погашаем количество в таблице
			КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;
			СуммаОсталосьПогасить      = СтрокаТЧ.Сумма;
			
			// Погашаем количество в таблице, записывая способ списания
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока                      = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество           = СписанноеКоличество;
				
				КоэффПогашения                           = СписанноеКоличество / КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                        = Окр(СуммаОсталосьПогасить * КоэффПогашения, 2 ,1);
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
				КоличествоОсталосьПогасить               = КоличествоОсталосьПогасить - СписанноеКоличество;
				СуммаОсталосьПогасить                    = СуммаОсталосьПогасить - НоваяСтрока.Сумма;
				
				
				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;
				
				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;
				
			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока                      = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество           = КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                = Окр(СуммаОсталосьПогасить, 2, 1);
				
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл
			
			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
				
				Стр                              = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока              = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
				
				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
					РедактируемаяСтрока.СтавкаНДС                  = Стр.СтавкаНДС;
					РедактируемаяСтрока.ПроцентСкидкиНаценки       = Стр.ПроцентСкидкиНаценки;
					РедактируемаяСтрока.ПроцентАвтоматическихСкидок= Стр.ПроцентАвтоматическихСкидок;
					РедактируемаяСтрока.УсловиеАвтоматическойСкидки         = Стр.УсловиеАвтоматическойСкидки;
					РедактируемаяСтрока.ЗначениеУсловияАвтоматическойСкидки = Стр.ЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли;
			
			РедактируемаяСтрока.СпособСписанияОстаткаТоваров = Строка.СпособСписанияОстаткаТоваров;
			РедактируемаяСтрока.Склад                        = Строка.Склад;
			РедактируемаяСтрока.ЗаказПокупателя              = Строка.ЗаказПокупателя;
			
			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(РедактируемаяСтрока, Строка);			
			
			Если ЭтоТовары Тогда
				
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
			Иначе
				РедактируемаяСтрока.Цена  = ?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
			КонецЕсли;
			
			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;
			
		КонецЦикла;
	КонецЦикла;
	
	Если мЕстьКолонкаСерии Тогда
		ЗаполнитьПоСериям();
	КонецЕсли;
	
	Если ЗаполнятьПредоплату Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",		СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",			СчетаУчета.СчетАвансовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре",				СчетаУчета.СчетУчетаТарыПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТареПоАвансам",	СчетаУчета.СчетАвансовПоТареПокупателя);
		
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетовПокупателяПриБартере);
			СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансовПокупателяПриБартере);
		КонецЕсли;	
		
		СтруктураСчетов.Вставить("СчетУчетаНДС",	    		СчетаУчета.СчетУчетаНДСПродаж);
		СтруктураСчетов.Вставить("СчетУчетаНДСПодтвержденный",	СчетаУчета.СчетУчетаНДСПродажПодтвержденный);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьТовары(ДокументОснование = Неопределено) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.ЕдиницаИзмеренияМест,
	|	СчетНаОплатуТовары.Количество,
	|	СчетНаОплатуТовары.КоличествоМест,
	|	СчетНаОплатуТовары.Коэффициент,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры,
	|	СчетНаОплатуТовары.Цена,
	|	СчетНаОплатуТовары.ПроцентСкидкиНаценки,
	|	СчетНаОплатуТовары.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуТовары.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуТовары.ЗначениеУсловияАвтоматическойСкидки,
	|	СчетНаОплатуТовары.ЗаказПокупателя,
	|	СчетНаОплатуТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуТовары.Сумма,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.СуммаНДС,
	|	СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуТовары.Ссылка.УчитыватьНДС          КАК УчитыватьНДС,
	|	СчетНаОплатуТовары.КлючСтроки";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуТовары
	|
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуТовары.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
		НоваяСтрока.Количество                          = Выборка.Количество;
		НоваяСтрока.КоличествоМест                      = Выборка.КоличествоМест;
		НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад                               = ДокументОснование.Склад;
		НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;
		
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
		Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность),
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		Выборка.СуммаВключаетНДС,
		УчитыватьНДС,
		СуммаВключаетНДС,
		Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.Качество                     = Справочники.Качество.Новый;
		НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете);
		
	КонецЦикла;
	
	Если ДокументОснование.СоставНабора.Количество() > 0 Тогда
		СоставНабора.Загрузить(ДокументОснование.СоставНабора.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры // СкопироватьТовары()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьВозвратнуюТару(ДокументОснование = Неопределено) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуВозвратнаяТара.Количество,
	|	СчетНаОплатуВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуВозвратнаяТара.Сумма,
	|	СчетНаОплатуВозвратнаяТара.Цена,
	|	СчетНаОплатуВозвратнаяТара.ЗаказПокупателя,
	|	СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуВозвратнаяТара.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуВозвратнаяТара.НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.ЗаказПокупателя              = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад                        = ДокументОснование.Склад;
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
	КонецЦикла;
	
КонецПроцедуры // СкопироватьВозвратнуюТару()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги(ДокументОснование = Неопределено) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.Цена,
	|	СчетНаОплатуУслуги.ПроцентСкидкиНаценки,
	|	СчетНаОплатуУслуги.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуУслуги.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуУслуги.ЗначениеУсловияАвтоматическойСкидки,
	|	СчетНаОплатуУслуги.ЗаказПокупателя,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Сумма,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.СуммаНДС,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Ссылка.УчитыватьНДС          КАК УчитыватьНДС";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуУслуги.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
		НоваяСтрока.Содержание                          = Выборка.Содержание;
		НоваяСтрока.Количество                          = Выборка.Количество;
		НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;
		
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
		Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность),
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		Выборка.СуммаВключаетНДС,
		УчитыватьНДС,
		СуммаВключаетНДС,
		Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьУслуги()

Процедура ОбработкаЗаполненияРегл(Основание)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
		
		ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(Услуги        , "Услуги"        , ОтражатьВБухгалтерскомУчете);
		
		ЗаполнитьСчетаУчетаВТабЧасти(СоставНабора  , "СоставНабора"  , ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет вид склада в табличной части Товары, при виде операции Оборудование
//                 Оборудование можно реализовывать только с Оптового склада
//
Процедура ПроверитьВидСкладаВТабличнойЧастиТовры(ТаблицаПоТоварам, Отказ = Ложь, Заголовок, ИмяРеквизита = Неопределено) Экспорт

	Для Каждого СтрокаТовара Из ТаблицаПоТоварам Цикл
		Если ЗначениеЗаполнено(СтрокаТовара.Склад) Тогда
			ВидСклада = ?(ИмяРеквизита = Неопределено, СтрокаТовара.Склад.ВидСклада, СтрокаТовара[ИмяРеквизита]);
			Если ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке номер "+ СтрокаТовара.НомерСтроки +
					" табличной части Оборудование: содержится склад с видом не равным ""Оптовый"". Такого быть не должно!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
 	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Заполняет таблицу скидок для проведения.
//
// Параметры: 
//  ТаблицаТоваров          - таблица значений по товарам,
//  ТаблицаУслуг            - таблица значений по скидкам,
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, ТаблицаПоУслугам, СтруктураШапкиДокумента)
	
	МетаданныеДокумента = Метаданные();
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		Если Разница <> 0
			И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
		
		//Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
				СтрокаТаблицы.Номенклатура,
				СтрокаТаблицы.ХарактеристикаНоменклатуры,
				Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Оптовая, ЭтотОбъект)) Тогда
				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));
				
				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;
				
				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;
					
					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.КоличествоДок * Комплектующая.Количество,
					ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					
					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;
				
				СуммаСкидки = СтоимостьКомплектующих - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
				ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
				
				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.Количество, 2), ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		Если Разница <> 0
			И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции // ПодготовитьТаблицуСкидок()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			СтруктураШапкиДокумента.ВалютаЗаказа,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсЗаказа,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
			УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	//Заполним счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаТоваров, СтруктураШапкиДокумента);
	
	// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
	// для отражения расходов по налогу на прибыль по списанной себестоимости
	// при передаче на комиссию собсвтенных товаров, кор. налоговое назначение должно быть нал. назначением по НДС.
		
		ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		
		Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия 
			И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначение") , "НалоговоеНазначениеНовое");
			
		ИначеЕсли СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда	
			
			Если СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
				// расходы будем относить на нехоз. деятельность, это равнозначно непризнанию расходов по себестомости (при реализации товаров по авансу до 01.04)
				ТаблицаТоваров.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность , "НалоговоеНазначениеНовое");
			Иначе	
				ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
			КонецЕсли;

		КонецЕсли;
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	// Надо добавить нужные при проведении колонки.
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			СтруктураШапкиДокумента.ВалютаЗаказа,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсЗаказа,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
			УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

Процедура ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	// заполним налоговое назначение и вид деятельности НДС для услуг, определяется однозначно по ставке НДС
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначение", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаТоваров.Колонки.Добавить("ВидДеятельностиНДС", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиНДС"));
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.ВидДеятельностиНДС = НалоговыйУчет.ПолучитьВидДеятельностиНДС(СтрокаТаблицы.СтавкаНДС);
		СтрокаТаблицы.НалоговоеНазначение = НалоговыйУчетПовтИсп.ОпределитьНалоговоеНазначениеУслугПоВидуДеятельностиНДС(СтрокаТаблицы.ВидДеятельностиНДС);
	КонецЦикла;
	
	//Заполним счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
		ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			// расходы будем относить на нехоз. деятельность, это равнозначно непризнанию расходов по себестомости (при реализации услуг по авансу до 01.04)
			ТаблицаТоваров.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность , "НалоговоеНазначениеНовое");
		Иначе	
			ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
		КонецЕсли;
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры // ПодготовитьТаблицуУслугРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
 	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;
	
КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)
	
	ТаблицаТары.Колонки.Добавить("СуммаПродажная" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
		ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	// Надо добавить колонки "СуммаБезНДС" .
	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС"         , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			СтруктураШапкиДокумента.ВалютаЗаказа,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсЗаказа,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента,
		КратностьВзаиморасчетов);
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, 
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	//Заполним счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", ТаблицаТары, СтруктураШапкиДокумента);
	
	// Сумма для проводки на залоговую стоимость тары
	ТаблицаТары.Колонки.Добавить("ПроводкаСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		Сумма = СтрокаТаблицы.Сумма;
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
		КонецЕсли;
		
	КонецЦикла;
	
	// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
	// для отражения расходов по налогу на прибыль по списанной себестоимости
		
		ТаблицаТары.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			// расходы будем относить на нехоз. деятельность, это равнозначно непризнанию расходов по себестомости (при реализации товаров по авансу до 01.04)
			ТаблицаТары.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность , "НалоговоеНазначениеНовое");
		Иначе	
			ТаблицаТары.ЗагрузитьКолонку(ТаблицаТары.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
		КонецЕсли;
		

	ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре)
	
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		ТаблицаДвижений = ТаблицаКопия.Скопировать();
		
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		ТаблицаДвижений.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		
		ТаблицаДвижений.Колонки.Добавить("Контрагент");
		ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
		ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
		ТаблицаДвижений.Колонки.Добавить("СчетАванса");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент        , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора, "ВидДоговораКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "СчетОплаты");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоАвансам    , "СчетАванса");
	КонецЕсли;
	
	// ТАРА (отдельной строкой)
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвиженийТара = ТаблицаКопия.Скопировать();
	
	ТаблицаДвиженийТара.Колонки.Добавить("Контрагент");
	ТаблицаДвиженийТара.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетОплаты");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Контрагент        , "Контрагент");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора        , "ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре         , "СчетОплаты");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТареПоАвансам, "СчетАванса");
	
	Если НЕ ЗначениеЗаполнено(ТаблицаДвижений) Тогда
		ТаблицаДвижений = ТаблицаДвиженийТара.Скопировать();
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийТара, ТаблицаДвижений);
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
КонецФункции

// Дополняет полями, нужными для регламентированного учета, структуру 
// обязательных полей шапки документа.
//
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
			
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
						
		КонецЕсли;
		
		Если НЕ (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		   Если СтруктураШапкиДокумента.ЕстьНДС
			   И СтруктураШапкиДокумента.УчитыватьНДС 
			   ИЛИ Дата >= '20110101'
			   Тогда
				СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
				Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером И Дата >= '20110101'
					Тогда
					СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПодтвержденный");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ВозвратнаяТара.Количество() > 0 Тогда
			
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по счетам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;
	
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Оборудование нельзя продать по договору, взаиморасчеты по которому ведутся по заказам.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование
		И  (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реализация оборудования не может производиться по договору с ведением взаиморасчетов """
		+  СокрЛП(СтруктураШапкиДокумента.ВедениеВзаиморасчетов)
		+ """.", Отказ, Заголовок);
	КонецЕсли;
	
	// Брак нельзя отдать на реализацию.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		И  (Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реализация товара ненадлежащего качества может производиться только по договору """
		+  СокрЛП(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		+ """.", Отказ, Заголовок);
	КонецЕсли;
	
	ПроверитьВыборТорговойТочки(Отказ);
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	СтруктураОбязательныхПолей = Новый Структура();
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ОбщегоНазначенияКлиентСервер.ПроверитьЗаполнениеВычисляемыхРеквизитовШапки(ЭтотОбъект, СтруктураОбязательныхПолей, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма");
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
		СтруктураОбязательныхПолей.Вставить("Качество");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверка вида склада
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		ПроверитьЧтоСкладОптовый(ТаблицаПоТоварам, Отказ, Заголовок);
	Иначе
		УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
	КонецЕсли;

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоТоварам,
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Реализация",    // ВидОперации
					Ложь             // ЭтоЗатраты 
	);	
	
	
	Если НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		// Схемы реализации должны быть заполнены правильно
		СтруктураПараметровПроверки = Новый Структура;
		СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
		СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимости");
		БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, ИмяТабличнойЧасти, , ТаблицаПоТоварам, 
															 СтруктураПараметровПроверки,
															 СтруктураШапкиДокумента,
															 Отказ, Заголовок);	
    КонецЕсли;
	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Услуги";
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;
	КонецЕсли;
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	
 	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СхемаРеализации");
 	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПокупателя", Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоУслугам,
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Реализация",    // ВидОперации
					Истина           // ЭтоЗатраты 
	);	
	
	Если НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		// Схемы реализации должны быть заполнены правильно
		СтруктураПараметровПроверки = Новый Структура;
		СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
		БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, ИмяТабличнойЧасти, , ТаблицаПоУслугам, 
															 СтруктураПараметровПроверки,
															 СтруктураШапкиДокумента,
															 Отказ, Заголовок);	
    КонецЕсли;
	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ВозвратнаяТара"; 
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей,  СтруктураШапкиДокумента);
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "ВозвратнаяТара", "ЗаказПокупателя", Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоТаре,
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Реализация",    // ВидОперации
					Ложь             // ЭтоЗатраты 
	);	
	
	Если НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		// Схемы реализации должны быть заполнены правильно
		СтруктураПараметровПроверки = Новый Структура;
		СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
		СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимости");
		БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, ИмяТабличнойЧасти, , ТаблицаПоТаре, 
															 СтруктураПараметровПроверки,
															 СтруктураШапкиДокумента,
															 Отказ, Заголовок);	
    КонецЕсли;
	
	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект);
	
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("СоставНабора", ТаблицаПоКомплектам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ);
	
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);
	
	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
		Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, 
	ТаблицаПоКомплектам, ТаблицаПоТаре, Отказ, Заголовок);
	
	Если ТаблицаПоКомплектам.Количество() + ТаблицаПоТаре.Количество() >0 тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	КонецЕсли;
	
	// Проводки формируются и в модуле документа, и при списании партий
	ИспользуетсяРасширеннаяАналитикаУчетаЗатрат = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И 
		(глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух ИЛИ ИспользуетсяРасширеннаяАналитикаУчетаЗатрат) Тогда
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	//Коновалова 13022013 +
	Если ЗначениеЗаполнено(Товары) ИЛИ ЗначениеЗаполнено(ВозвратнаяТара) ТОгда	
		Если (СтруктураШапкиДокумента.ОтражатьВУправленческомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладах")) ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладахБухгалтерскийУчет")) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//Коновалова 13022013 -
	
	Если ТаблицаПоКомплектам.Найти(Перечисления.ТипыНоменклатуры.Комплект, "ТипНоменклатуры") <> Неопределено Тогда
		ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоКомплектам",ТаблицаПоКомплектам);
	КонецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегистрам()

//Коновалова 19022013 +
Функция НетДвиженийПоПартиям(_Регистр)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПартииТоваровНаСкладах.Регистратор
	                      |ИЗ
	                      |	РегистрНакопления."+_Регистр+" КАК ПартииТоваровНаСкладах
	                      |ГДЕ
	                      |	ПартииТоваровНаСкладах.Регистратор = &Регистратор");
						        
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
//Коновалова 19022013 -

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			МассивСерий = ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры");
			УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( МассивСерий, Дата, Отказ, Заголовок);
		КонецЕсли;
		
		УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		ВидДвиженияНакопления.Приход, Отказ, Заголовок);
		
		Если (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный) Тогда
			
			Если СуммаДокумента <> 0 Тогда
				
				// По регистру ПродажиПоДисконтнымКартам.
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
					НаборДвижений = Движения.ПродажиПоДисконтнымКартам;
					
					// Получим таблицу значений, совпадающую со структурой набора записей регистра.
					ТаблицаДвижений = НаборДвижений.Выгрузить();
					
					// Заполним таблицу движений.
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
					СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.Контрагент;
					СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента,
					СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента,
					СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					
					НаборДвижений.мПериод          = Дата;
					НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
					Если Не Отказ Тогда
						НаборДвижений.ВыполнитьДвижения();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			КопияТовары = ТаблицаПоТоварам.Скопировать();
			КопияУслуги = ТаблицаПоУслугам.Скопировать();
			
			ТабИменУслуги = Неопределено;
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДС",    "НДСВрем");
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДСУпр", "НДС");
			
			ТабИменТовары = Неопределено;
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДС",    "НДСВрем");
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДСУпр", "НДС");
			
			// ТОВАРЫ И УСЛУГИ ПО РЕГИСТРУ Закупки.
			Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				
				// В этом случае таблицы документа обрабатываются особым образом
				ТаблицаДвижений = Движения.Продажи.Выгрузить();
				ТаблицаДвижений.Очистить();
				ТаблицаДвиженийУслуги = ТаблицаДвижений.Скопировать();
				ТаблицаДвиженийТовары = ТаблицаДвижений.Скопировать();
				
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияУслуги, ТаблицаДвиженийУслуги, Проект, Дата, "Продажи");
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТовары, ТаблицаДвиженийТовары, Проект, Дата, "Продажи");
				
				// Вставляем уже подготовленные таблицы движений
				ТаблицыДанныхДокумента = Новый Структура;
				ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", ТаблицаДвиженийТовары);
				ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам", ТаблицаДвиженийУслуги);
				
			Иначе
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", КопияУслуги);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТовары);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Продажи, СтруктТаблицДокумента);
				
			КонецЕсли;
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
			
			// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", СтруктураШапкиДокумента.Сделка);
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Продажи, Неопределено, ТаблицыДанныхДокумента, Дата);
			
			// ПО РЕГИСТРУ ПредоставленныеСкидки.
			НаборДвижений = Движения.ПредоставленныеСкидки;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ПолучательСкидки");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		
		Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
			ТаблицаПоКомплектам.Индексы.Добавить("ВидСклада");
			ТаблицаПоТаре.Индексы.Добавить("ВидСклада");

			ВидСкладаОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
			МассивКомплектыОпт = ТаблицаПоКомплектам.НайтиСтроки(ВидСкладаОпт);
			МассивТараОпт = ТаблицаПоТаре.НайтиСтроки(ВидСкладаОпт);
			
			Если МассивКомплектыОпт.Количество() <> 0 ИЛИ МассивТараОпт.Количество() <> 0 Тогда
				
				// Контроль остатков товара
				Если Товары.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ВозвратнаяТара.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("КомплектыОпт", МассивКомплектыОпт);
					СтруктТаблицДокумента.Вставить("ТараОпт",      МассивТараОпт);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараОпт");
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				КонецЕсли;
				
			КонецЕсли;
			
			ВидСкладаРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
			МассивКомплектыРозн = ТаблицаПоКомплектам.НайтиСтроки(ВидСкладаРозн);
			МассивТараРозн = ТаблицаПоТаре.НайтиСтроки(ВидСкладаРозн);
			
			Если МассивКомплектыРозн.Количество() <> 0 ИЛИ МассивТараРозн.Количество() <> 0 Тогда
				
				// Контроль остатков товара
				Если Товары.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ВозвратнаяТара.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если Не Отказ Тогда
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("КомплектыРозн", МассивКомплектыРозн);
					СтруктТаблицДокумента.Вставить("ТараРозн",      МассивТараРозн);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараРозн");
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // отпуск по ордеру
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
			Если Не Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаТовары", ТаблицаПоКомплектам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаТовары");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Контроль остатков товара
		Если ТаблицаПоТаре.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольЛимитовВозвратнойТары(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		// ТАРА ПО РЕГИСТРУ ТоварыПереданные
		Если Не Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
			КопияТаблицаПоТаре = ТаблицаПоТаре.Скопировать();
			КопияТаблицаПоТаре.Колонки.ЗаказПокупателя.Имя = "Сделка";
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", КопияТаблицаПоТаре);
			
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				КопияТовары = ТаблицаПоТоварам.Скопировать();
				КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";
				СтруктТаблицДокумента.Вставить("ТаблицаТовары", КопияТовары);
			КонецЕсли;
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПереданные, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,     "ТаблицаТовары");
			КонецЕсли;
			
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				Для Каждого ТаблицаДанных Из ТаблицыДанныхДокумента Цикл
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",     Сделка, ТаблицаДанных.Ключ);
				КонецЦикла;
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПереданные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
		// ТОВАР, ТАРА И УСЛУГИ ПО РЕГИСТРУ ЗаказыПокупателей.
		
		// Проверка остатков при оперативном проведении.
		Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Товары",         Отказ, Заголовок, РежимПроведения);
		Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "ВозвратнаяТара", Отказ, Заголовок, РежимПроведения);
		Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Услуги",         Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
			ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя");
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам,ТаблицаПоУслугам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;
		
		// ТОВАР И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах.
		ТабРезервТовары = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоКомплектам);	
		ТабРезервТара   = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоТаре);	
		
		Если ТабРезервТовары.Количество() > 0 ИЛИ ТабРезервТара.Количество() > 0 Тогда
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТабРезервТовары);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТабРезервТара);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли; // Если ОтражатьВУправленческомУчете
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Функция удаляет из таблицы значений строки по которым не надо формировать резерв
// Возврат КОПИЯ исходной таблицы с удаленными строками
//
Функция УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТабТовары)
	
	ТабРезерв = ТабТовары.Скопировать();
	
	// Удалим записи таблицы в которых не надо списывать из резерва или не указан заказ покупателя.
	МассивНаУдаление = Новый Массив;
	Для Каждого СтрокаСписанияРезервов Из ТабРезерв Цикл
		
		Если СтрокаСписанияРезервов.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаСписанияРезервов.ЗаказПокупателя) Тогда
			МассивНаУдаление.Добавить(СтрокаСписанияРезервов);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для Каждого Элемент Из МассивНаУдаление Цикл
		ТабРезерв.Удалить(Элемент);
	КонецЦикла;	
	
	ТабРезерв.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
	
	Возврат ТабРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСписаниеИзРезерва()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	// Формирование движений по регистру "Учет продаж и себестоимости".
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоТоварам
		);
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоУслугам
		);
	КонецЕсли;	
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ДатаДока   = Дата;
	Если Дата >= Дата("20210101") Тогда
		НаличнаяОрганизация = Константы.НПТ.Получить();
	Иначе
		НаличнаяОрганизация = Константы.КрафтКолор.Получить();
	КонецЕсли;
	
	// Проводки по реализации товаров
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			//Смартис Лиманчук начало 05.10.2012
			Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссияНал ИЛИ Дата >= Дата("20210101") Тогда
			//Смартис Лиманчук окончание 05.10.2012
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Проводка.Содержание      = "Реализация товаров";
			Проводка.НомерЖурнала    = "";
			
			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			
			Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			    Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтрокаТаблицы.СтоимостьНУ);
			КонецЕсли;
				
			//Смартис Лиманчук начало 05.10.2012
			Иначе
				
				//Смартис Лиманчук начало 25.01.2013 (Исправлено для валютных документов Черный А.В. 21.07.2014)
				Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
					СуммаНормативнойСебестоимости	 = СтрокаТаблицы.СуммаНормативнойСебестоимости;
					СуммаНормативнойСебестоимостиВал = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СуммаНормативнойСебестоимости, мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.Дата);
				Иначе
					СуммаНормативнойСебестоимости	 = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТаблицы.СуммаНормативнойСебестоимости, мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.Дата);
					СуммаНормативнойСебестоимостиВал = СтрокаТаблицы.СуммаНормативнойСебестоимости;
				КонецЕсли;
				//Смартис Лиманчук окончание 25.01.2013
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период          = Дата;
				Проводка.Активность      = Истина;
				Проводка.Организация     = НаличнаяОрганизация;
				Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
				Проводка.Содержание      = "Реализация товаров";
				Проводка.НомерЖурнала    = "";
				
				Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
				КонецЕсли;
				
				Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				    Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтрокаТаблицы.СтоимостьНУ);
				КонецЕсли;
			
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период          = Дата;
				Проводка.Активность      = Истина;
				Проводка.Организация     = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма           = СуммаНормативнойСебестоимости;
				Проводка.Содержание      = "Реализация товаров";
				Проводка.НомерЖурнала    = "";
				
				Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту.Владелец);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту);
				//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
				
				//Смартис Лиманчук начало 25.01.2013
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СуммаНормативнойСебестоимостиВал;
				КонецЕсли;
				//Смартис Лиманчук окончание 25.01.2013
					
				Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				    Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СуммаНормативнойСебестоимости);
				КонецЕсли;
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период          = Дата;
				Проводка.Активность      = Истина;
				Проводка.Организация     = НаличнаяОрганизация;
				Проводка.Сумма           = СуммаНормативнойСебестоимости;
				Проводка.Содержание      = "Реализация товаров";
				Проводка.НомерЖурнала    = "";
				
				Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.РасходыНаСбыт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтруктураШапкиДокумента.СтатьяЗатратДляКрафт);
				
				//Верескул РаботаСДиалогами поменял на РаботаСДиалогамиСервер
				#Если Клиент Тогда
					СписокПодразделений = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(СтруктураШапкиДокумента.Подразделение,СтруктураШапкиДокумента.Организация);
				#Иначе
					СписокПодразделений = РаботаСДиалогамиСервер.ПолучитьСписокПодразделенийОрганизаций(СтруктураШапкиДокумента.Подразделение,СтруктураШапкиДокумента.Организация);
				#КонецЕсли
				
				Если СписокПодразделений.Количество()>0 Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СписокПодразделений[0].Значение);
				КонецЕсли;
				
				Проводка.СчетКт         = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Организация.ДоговорКрафтПокупаетУОрганизации.Владелец);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.Организация.ДоговорКрафтПокупаетУОрганизации);
				
				//Смартис Лиманчук начало 25.01.2013
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПоставщиками;
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СуммаНормативнойСебестоимостиВал;
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СуммаНормативнойСебестоимостиВал;
				КонецЕсли;
				//Смартис Лиманчук окончание 25.01.2013
			
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СуммаНормативнойСебестоимости);
				КонецЕсли;
				
				//Смартис Лиманчук начало 17.12.2012
				//НДС
				
				//Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда //Смартис Черный А.В добавил условие
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период          = Дата;
					Проводка.Активность      = Истина;
					Проводка.Организация     = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма           = Ценообразование.РассчитатьСуммуНДС(СуммаНормативнойСебестоимости,
		                                                   Истина, Истина,
		                                                   Ценообразование.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20));
					Проводка.Содержание      = "НДС: Реализация товаров";
					Проводка.НомерЖурнала    = "";
					
					Проводка.СчетДт          = СтрокаТаблицы.СчетДоходовБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
					
					Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
						Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					    Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, Проводка.Сумма);
					КонецЕсли;
					
					//Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					//Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
					
					Проводка.СчетКт         = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту.Владелец);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту);
				//КонецЕсли;
				//Смартис Лиманчук окончание 17.12.2012
				
			КонецЕсли;
			//Смартис Лиманчук окончание 05.10.2012
			
			
		КонецЦикла;
	КонецЕсли;
	
	// Проводки по реализации услуг
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		 
		Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл

			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			
			//Смартис Лиманчук начало 19.02.2013
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссияНал Тогда
				Проводка.Организация = НаличнаяОрганизация;		
			КонецЕсли;
			//Смартис Лиманчук окончание 19.02.2013
			
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Проводка.Содержание      = "Оказание услуг";
			Проводка.НомерЖурнала    = "";

			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			
			Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			    Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтрокаТаблицы.СтоимостьНУ);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	// Проводки по передачи тары
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = "Передача возвратной тары";
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
		Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		    Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтрокаТаблицы.СтоимостьНУ);
		КонецЕсли;

	КонецЦикла;

	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ);
	
	
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок);
	Если СтруктураПараметровЗачетАванса <> Ложь тогда
		
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
		СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации, Отказ);
		
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//Учет курсовых разниц
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
		СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок);
		ПроводкиБУ.Записать(Ложь);
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР, ПроводкиБУ, мВалютаРегламентированногоУчета, Истина);
		ПроводкиБУ.Записать(Ложь);
	КонецЕсли; // Учет курсовых разниц
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		
		// Проверка остатков при оперативном проведении.
		Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
			
			// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций.
		
		// Проверка остатков при оперативном проведении.
		Движения.ТоварыКПередачеОрганизаций.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеОрганизаций, СтруктТаблицДокумента);
			
			// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",      Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Перекинем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
		
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       Неопределено);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаПоТоварамКопия = ТаблицаПоТоварам.Скопировать();
	Для Каждого СтрокаТоваров Из ТаблицаПоТоварамКопия Цикл
		Если СтрокаТоваров.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый Тогда
			СтрокаТоваров.СчетУчетаБУ             = СтрокаТоваров.ПринятыеСчетУчетаБУ;
			СтрокаТоваров.ПереданныеСобственныеБУ = СтрокаТоваров.ПереданныеПринятыеБУ;
			СтрокаТоваров.НалоговоеНазначение     = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли; 
	КонецЦикла; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	
	Если Не Отказ Тогда
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКопия);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизацийРегл, СтруктТаблицДокумента);
		
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		Если Не ВестиПартионныйУчетПоСкладамРегл Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
		КонецЕсли;
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
		
	
	// Перекинем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизацийРегл.
		ТабИмен = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварамКопия, ТабИмен, "ПереданныеСобственныеБУ", "СчетУчетаБУ");
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКопия);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизацийРегл, СтруктТаблицДокумента);
		
		ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТоварамКопия, ТабИмен);
		
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       Неопределено);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизацийРегл, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование, "ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция, "ДопустимыйСтатус2");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус4");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента,      "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, "КратностьДокумента");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	КонецЕсли;
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Строка.ЗаказСписания = СтруктураШапкиДокумента.Сделка;		
		Иначе
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Перем КэшПоСчетам;
	
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,                 "Организация");

	Если     СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный    Тогда

		Для каждого Строка Из ТаблицаДвижений Цикл

			СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

			Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
			Строка.КорСубконтоБУ1 = СтрокаТЧ.СубконтоРасходовБУ1;
			Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоРасходовБУ2;
			Строка.КорСубконтоБУ3 = СтрокаТЧ.СубконтоРасходовБУ3;

			Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;

		КонецЦикла;

	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Для каждого Строка Из ТаблицаДвижений Цикл

			СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

			Строка.КорСчетБУ         = СтрокаТЧ.ПереданныеСобственныеБУ;
			Строка.ПринятыеКорСчетБУ = СтрокаТЧ.ПереданныеПринятыеБУ;
			
			Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция     ,"ДопустимыйСтатус3");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
  	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация            , "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТаре.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.СтоимостьПоступлениеБУ  = СтрокаТЧ.ПроводкаСумма;
		
		Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
		Строка.КорСубконтоБУ1 = СтрокаТЧ.СубконтоРасходовБУ1;
		Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоРасходовБУ2;
		Строка.КорСубконтоБУ3 = СтрокаТЧ.СубконтоРасходовБУ3;

		Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;


	КонецЦикла;

	
КонецПроцедуры 

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	ТаблицаПоТаре, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаЗаказов = ТаблицаПоТоварам.ВыгрузитьКолонку("ЗаказПокупателя");
	
	// Заполним таблицу движений.
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам), ТаблицаДвижений);
	
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
		
	КонецЦикла;
	
	// Если резервирование под заказ - заказ партии
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей) И СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаЗаказов, "ЗаказПартии");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	Если Не ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный    Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Реализация, "КодОперацииПартииТоваров");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию, "КодОперацииПартииТоваров");
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПередачи");
		
	КонецЕсли;
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	// Данные для регл учета (НДС)
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
	
	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;
		
	КонецЦикла;
	
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаЗаказов, "ЗаказПартии");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");
	//Смартис Лиманчук начало 23.01.2013
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КрафтКолор"                                  , "КрафтКолор");
	//Смартис Лиманчук окончание 23.01.2013
	//Смартис Лиманчук начало 05.10.2012
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "СтатьяЗатратДляКрафт"                        , "СтатьяЗатратДляКрафт");
	//Смартис Лиманчук окончание 05.10.2012
	
	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)
	
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Цена", "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей)
	
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"             , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СчетУчетаБУ"                      , "СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ"              , "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("ПереданныеСобственныеБУ"          , "ПереданныеСобственныеБУ");
 	СтруктураПолей.Вставить("ПереданныеПринятыеБУ"             , "ПереданныеПринятыеБУ");
 	СтруктураПолей.Вставить("Забалансовый"                     , "СчетУчетаБУ.Забалансовый");
 	СтруктураПолей.Вставить("ПринятыеЗабалансовый"             , "ПринятыеСчетУчетаБУ.Забалансовый");
 	СтруктураПолей.Вставить("ПереданныеПринятыеЗабалансовый"   , "ПереданныеПринятыеБУ.Забалансовый");
 	СтруктураПолей.Вставить("ПереданныеСобственныеЗабалансовый", "ПереданныеСобственныеБУ.Забалансовый");
 	СтруктураПолей.Вставить("СхемаРеализации"                  , "СхемаРеализации");
 	СтруктураПолей.Вставить("СчетДоходовБУ"                    , "СхемаРеализации.СчетДоходов");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ1"               , "СхемаРеализации.СубконтоДоходов1");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ2"               , "СхемаРеализации.СубконтоДоходов2");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ3"               , "СхемаРеализации.СубконтоДоходов3");
 	СтруктураПолей.Вставить("СчетРасходовБУ"                   , "СхемаРеализации.СчетСебестоимости");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ1"              , "СхемаРеализации.СубконтоСебестоимости1");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ2"              , "СхемаРеализации.СубконтоСебестоимости2");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ3"              , "СхемаРеализации.СубконтоСебестоимости3");
	
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	       , "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"       	   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  	   , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"  	   		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат" , "НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
	

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)
	
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей)
	
 	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
 	СтруктураПолей.Вставить("Забалансовый"              , "СчетУчетаБУ.Забалансовый");

 	СтруктураПолей.Вставить("СхемаРеализации"           , "СхемаРеализации");
 	СтруктураПолей.Вставить("СчетДоходовБУ"             , "СхемаРеализации.СчетДоходов");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ1"        , "СхемаРеализации.СубконтоДоходов1");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ2"        , "СхемаРеализации.СубконтоДоходов2");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ3"        , "СхемаРеализации.СубконтоДоходов3");
 	СтруктураПолей.Вставить("СчетРасходовБУ"            , "СхемаРеализации.СчетСебестоимости");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ1"       , "СхемаРеализации.СубконтоСебестоимости1");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ2"       , "СхемаРеализации.СубконтоСебестоимости2");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ3"       , "СхемаРеализации.СубконтоСебестоимости3");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"	    , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"  	    , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат" , "НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");

 	СтруктураПростыхПолей.Вставить("СтавкаНДС"              , Перечисления.СтавкиНДС.НеНДС);
 	СтруктураПростыхПолей.Вставить("НДС"                    , 0);
 	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"           , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
КонецПроцедуры

// Проверяет, что размещение указанное в табиличной части, на Оптовый склад.
//
// Параметры:
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части
//  Отказ             - флаг отказа в проведении.
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоСкладОптовый(ТаблицаЗначений, Отказ, Заголовок)
	Перем ПредставлениеТабличнойЧасти;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Склад) И СтрокаТаблицы.ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
			Если ПредставлениеТабличнойЧасти = неопределено Тогда
				ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Товары"].Представление();
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер "+ СтрокаТаблицы.НомерСтроки +
				" табличной части Оборудование: содержится склад с видом не равный ""Оптовый"". Такого быть не должно!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ПроверитьЧтоСкладОптовый()

Процедура ПроверитьВыборТорговойТочки(Отказ)
	Если НЕ Отказ И НЕ ЗначениеЗаполнено(кпкТорговаяТочка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	кпкТорговыеТочки.Ссылка
		|ИЗ
		|	Справочник.кпкТорговыеТочки КАК кпкТорговыеТочки
		|ГДЕ
		|	кпкТорговыеТочки.Владелец = &Контрагент";
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		тзРезультат = Запрос.Выполнить().Выгрузить();
		
		Если тзРезультат.Количество() > 0 Тогда
			Если НЕ РольДоступна("ПолныеПрава") Тогда
				Отказ = Истина;
			//КонецЕсли;
			
			Сообщить("Не выбрана торговая точка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЗаказПокупателя")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		//ИЗМЕНЕНО Верескул Игорь(Начало 11.12.2020
		//Внедрение НПТ, нальные договора только через обработку
		Если Основание.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
			Если Основание.Организация <> Константы.НПТ.Получить() И Основание.Контрагент <> Справочники.Контрагенты.НайтиПоКоду("ЭК-001856") Тогда
				Если Основание.Дата >= Дата("20210101") Тогда				
					Сообщить("Нельзя проводить реализации по наличному расчету!", СтатусСообщения.Внимание);
					Сообщить("Воспользуйтесь кнопкой ""Оформление реализации"" внутри документа", СтатусСообщения.Внимание);
					мНеОткрыватьФорму = Истина;
					Возврат;					
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли;
		//Окончание)Верескул Игорь 
		// Заполним реквизиты шапки по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(ЭтотОбъект, Основание);
		
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#Если Клиент Тогда
			Если НЕ ЗначениеЗаполнено(Склад) И НЕ мУказаниеСкладовВТЧ И ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ВвестиЗначение(Склад, "Выберите склад", Тип("СправочникСсылка.Склады"));
			КонецЕсли;
		#КонецЕсли
		
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЗаказПокупателя")
			ИЛИ (ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
			И ДоговорКонтрагента.ВедениеВзаиморасчетов = 
			Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
			Сделка = Основание;
		Иначе
			Сделка = Основание.ЗаказПокупателя;
        КонецЕсли;
        //ИЗМЕНЕНО Верескул Игорь(Начало 08.08.2017
        Комментарий = Основание.Комментарий;
        Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
            кпкТорговаяТочка = Основание.кпкТорговаяТочка;
            Если ЗначениеЗаполнено(Основание.Подразделение) Тогда
            	Проект = Основание.Подразделение.ОсновнойПроект;
            КонецЕсли; 
        КонецЕсли;
        //Окончание)Верескул Игорь 
		Если Основание.Проведен Тогда
			
			// Заполним табличные части неполученными ТМЦ (резервом) по заказу покупателя.
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(Товары, Основание);
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ВозвратнаяТара, Основание);
			ЗаполнитьУслугиПоОстаткамУпр();
			
			Если ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			СкопироватьТовары(Основание);
			СкопироватьВозвратнуюТару(Основание);
			СкопироватьУслуги(Основание);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		Организация   = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ВидПередачи   = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			Склад = Основание.СкладОрдер;
		ИначеЕсли ТипЗнч(Основание.СкладОрдер)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Склад = Основание.СкладОрдер.Склад;
		КонецЕсли;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
		//Смартис Лиманчук начало 05.12.2012
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал Тогда
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
		//Смартис Лиманчук окончание 05.12.2012
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли;
		
		МассивЗаказов = Неопределено;
		//возможно это межфирменная продажа
		ОрганизацияКонтрагента = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);
		Если  ЗначениеЗаполнено(ОрганизацияКонтрагента) Тогда
			Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации( Основание.Организация);
			Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
		Иначе
			
			#Если КЛИЕНТ Тогда
				// Выбор контрагента/договора
				СтруктТабЧастей = Новый Структура;
				СтруктТабЧастей.Вставить("Товары",         "Заказ");
				СтруктТабЧастей.Вставить("ВозвратнаяТара", "Заказ");
				
				СтруктПараметры = Новый Структура;
				СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
				
				//Смартис Лиманчук начало 05.12.2012
				//Если  Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
				Если  (Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование) ИЛИ (Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал) Тогда
				//Смартис Лиманчук окончание 05.12.2012
					ЗаказыВТабЧасти = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
					СтруктПараметры.Вставить("ЗаказВТабЧасти",
					ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации
					ИЛИ ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
					
					РезультатВыбораЗаказа = РаботаСДиалогами.ВыбратьКонтрагентДоговорЗаказИзДокументаОснования(Основание, СтруктПараметры);
					Если РезультатВыбораЗаказа.ВыборСделан Тогда
						Контрагент         = РезультатВыбораЗаказа.Контрагент;
						ДоговорКонтрагента = РезультатВыбораЗаказа.Договор;
						МассивЗаказов      = РезультатВыбораЗаказа.Заказ;
						Если МассивЗаказов.Количество() = 1 Тогда
							Сделка         = МассивЗаказов[0];
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			#Иначе
				Контрагент         = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПокупатель");
				ОсновнойДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
				Если (ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
					или ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					и ОсновнойДоговорКонтрагента.Организация = Организация Тогда
					ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ОбщегоНазначения.ПолучитьРабочуюДату());
		КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		
		// ТипЦен.
		ТипЦен = ДоговорКонтрагента.ТипЦен;
		
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
		КонецЕсли;
		
		// Флаги включения налогов.
		УчитыватьНДС = Истина;
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			
			// Если цены выбранного типа расчетные, то флаги включения налогов надо брать из базовой цены.
			ВремТипЦен       = ?(ТипЦен.Рассчитывается, ТипЦен.БазовыйТипЦен, ТипЦен);
			СуммаВключаетНДС = ВремТипЦен.ЦенаВключаетНДС;
			
		Иначе
			// Заполним значениями по умолчанию (не заполнен ТипЦен).
			СуммаВключаетНДС = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "СуммаНеВключаетНДС");
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			
			// Заполним табличные части по документу основанию (Поступление товаров);
			// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
				ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание,"Товары", МассивЗаказов);
				//ИЗМЕНЕНО Верескул Игорь(Начало 08.04.2021
				// по просьбе маркетинга
				ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание,"Услуги", МассивЗаказов);
				//Окончание)Верескул Игорь 
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда 
				ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание,"Оборудование", МассивЗаказов);
			КонецЕсли;
			ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Основание, МассивЗаказов);
			
		КонецЕсли;
		
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.Проект) Тогда
				Проект=Основание.Проект;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		ИспользоватьНаработку 			= Основание.ИспользоватьНаработку;
		ИспользоватьНаправленияВыпуска 	= Основание.ИспользоватьНаправленияВыпуска;
		
		// Заполнение таб.части
		Для Каждого ТекСтрокаПродукция Из Основание.Продукция Цикл
			
			Если ИспользоватьНаработку И ТекСтрокаПродукция.ВидВыпуска <> Перечисления.ВидыВыпуска.Выпуск Тогда
				Продолжить;
			КонецЕсли;
			Если ИспользоватьНаправленияВыпуска И ТекСтрокаПродукция.НаправлениеВыпуска <> Перечисления.НаправленияВыпуска.НаСклад Тогда
				Продолжить; // Выпуск в другое подразделение
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаПродукция);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Реализация");

		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипОснования = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.РеализацияТоваровУслуг.СтруктураДополнительныхДанныхФормы());
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");	
	
	ОбработкаЗаполненияРегл(Основание);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;
	
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
			
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
		И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		Услуги.Очистить();
		
	КонецЕсли;
	// Если договор внешнеэкономический, то надо почистить закладку "ВозвратнаяТара".
	Если ВозвратнаяТара.Количество() > 0
		И ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда

		ВозвратнаяТара.Очистить();

	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);

	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругления, ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, "Оборудование", "Товары"));
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, ЭтотОбъект, ПогрешностиОкругления, "Услуги");
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	// В этом случае почистим в табличных частях поле СпособСписанияОстаткаТоваров.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда 
		
		Сделка = Неопределено;
		
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = "";
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = "";
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из Услуги Цикл
			СтрокаТаблицы.ЗаказПокупателя = Неопределено;
		КонецЦикла;
		
	//для брака способ списания всегда - со склада
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Товары"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Возвратная тара"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Необходимо, чтобы качество обязательно было "Новый"
		КачествоНовый = Справочники.Качество.Новый;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.Качество <> КачествоНовый Тогда
				СтрокаТаблицы.Качество = КачествоНовый;
			КонецЕсли;
		КонецЦикла
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сделка) И Сделка <> Неопределено Тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	УправлениеЗаказами.ЗаполнитьЗаказПокупателяВТЧ(ВидОперации,ЭтотОбъект, "Реализация");
	Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСкладыВТЧ();
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "СоставНабора", "СерийныеНомераСоставНабора");
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Реализация",
			Дата,
			Организация,
			Товары,               	// ТабличнаяЧастьТовары
			ВозвратнаяТара,       	// ТабличнаяЧастьВозвратнаяТара
			Услуги,               	// ТабличнаяЧастьУслуги
			Неопределено,         	// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено  			// ТабличнаяЧастьБланкиСтрогогоУчета
		);
	КонецЕсли;
	
	Если ЕстьАвансДо01042011 Тогда
		Если НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			СуммаВДВРПоАвансуДо01042011	= СуммаДокумента + ВозвратнаяТара.Итог("Сумма");
			Если ВалютаДокумента <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
				СуммаВДВРПоАвансуДо01042011	= 9999999999.99;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента, Заголовок)

	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете)
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		
		Возврат;
	КонецЕсли;
		
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Отказ, Заголовок);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента, Загаловок) Экспорт

	УчетнаяПолитикаУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаУпр) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента, Загаловок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено, Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьВСтруктуруШапкиСведенияОСчетахРасчетов(ЭтотОбъект, СтруктураШапкиДокумента);
	
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);
	
	// Для определения где нужно проверять заказ: в шапке или в ТЧ.
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                      , "ВедениеВзаиморасчетов");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                       , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                                , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                                , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом"     , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"           , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                                  , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"               , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "СхемаНалоговогоУчета"                       , "СхемаНалоговогоУчета");
	
	// Если сделка - Заказ покупателя, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) 
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                            , "ВалютаЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                         , "КурсВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"                    , "КратностьВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                                , "СделкаВидОперации");
	КонецЕсли;
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре) Экспорт
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
 	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                        , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                    , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                                , "Цена");
	СтруктураПолей.Вставить("Номенклатура"                        , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"			      , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                          , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("КоличествоДок"                       , "Количество");
	СтруктураПолей.Вставить("Качество"                            , "Качество");
	СтруктураПолей.Вставить("Склад"                               , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                           , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Сумма"                               , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                            , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                                 , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                              , "СуммаНДС");	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"          , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                   , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"                , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"         , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"         , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КлючСтроки"                          , "КлючСтроки");
	СтруктураПолей.Вставить("ТипНоменклатуры"                     , "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("ЗаказПокупателя"                     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"        , "Количество");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"          , "ПринадлежностьНоменклатуры");
	//Смартис Лиманчук начало 05.10.2012
	СтруктураПолей.Вставить("СуммаНормативнойСебестоимости"       , "СуммаНормативнойСебестоимости");
	//Смартис Лиманчук окончание 05.10.2012
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей=Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");	
	СтруктураПолей.Вставить("ЗаказПокупателя"     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"        , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"        , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	//Смартис Лиманчук начало 05.10.2012
	СтруктураПолей.Вставить("СуммаНормативнойСебестоимости"       , "СуммаНормативнойСебестоимости");
	//Смартис Лиманчук окончание 05.10.2012
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
//<
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
//>
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
 	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		, "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                 , "Склад.ВидСклада");	
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей);
	
	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	ПроводитьПоПартиям = ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументов 
		                     ИЛИ ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух 
							 ИЛИ ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовНал;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения, Отказ);
	
	//Коновалова 28022013 +
	Если Не РольДоступна("ПолныеПрава") И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ТОгда
		 Сообщить("Нельзя провести документ без отражения по бух. учету!
		          | Заполните галочку бух. учет.");
		Отказ = Истина;		  
	КонецЕсли;
	//Коновалова 28022013 -
	
	Если НЕ ПроверкаНаДоступностьСклада() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//----Смартис (Черный А.В)----->
	ПроверитьСтавкуНДС(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	//<----Смартис (Черный А.В)-----
	
	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
	
	ПроводитьПоВзаиморасчетам = (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) 
								ИЛИ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);
													
													
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;
	
	//Проверим счета учета
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Услуги", 			ТаблицаПоУслугам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Смартис Лиманчук начало 29.03.2013
	//УправлениеВзаиморасчетами.ПроверитьНаличиеНезакрытыхАвансов(СтруктураШапкиДокумента, Отказ, Заголовок);
	//Смартис Лиманчук окончание 29.03.2013
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура());
	
	// Движения по документу
	Если Не Отказ Тогда
		// Подготовим таблицу товаров для проведения.
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, ТаблицаПоУслугам, СтруктураШапкиДокумента);

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре,
		ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТаре",ТаблицаПоТаре);
	Если ОтключитьКонтрольВзаиморасчетов и РольДоступна("КонтрольВзаиморасчетов") Тогда
		  КонтрольВзаиморасчетов=Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаНаДоступностьСклада() Экспорт
	
	Перем Выборка, ГруппаДоступности, Запрос, ОсновнойСклад, СкладГруппыДоступности;
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Если НЕ РольДоступна("УправлениеСкладскойЛогистикой") Тогда
			ОсновнойСклад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");							
			ГруппаДоступности = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ГруппаДоступностиСкладов");
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СоставГруппДоступностиСкладов.Склад
			|ИЗ
			|	РегистрСведений.СоставГруппДоступностиСкладов КАК СоставГруппДоступностиСкладов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступностиСкладов КАК ГруппыДоступностиСкладов
			|		ПО СоставГруппДоступностиСкладов.ГруппаДоступности = ГруппыДоступностиСкладов.Ссылка
			|ГДЕ
			|	ГруппыДоступностиСкладов.Ссылка = &Ссылка
			|	И СоставГруппДоступностиСкладов.Склад = &Склад";
			Запрос.УстановитьПараметр("Ссылка", ГруппаДоступности);
			Запрос.УстановитьПараметр("Склад", Склад);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий()  Тогда
				СкладГруппыДоступности = Выборка.Склад; 	
			КонецЕсли; 
			
			Если Склад <> ОсновнойСклад Тогда
				Если Склад <> СкладГруппыДоступности Тогда
					Сообщить("Продажи по данному складу вам недоступны");
					Возврат Ложь;
				КонецЕсли;	
			КонецЕсли;  		
		КонецЕсли;
	КонецЕсли; 	
	Возврат Истина;
КонецФункции // ОбработкаПроведения()

Процедура ПриКопировании(ОбъектКопирования)
	
	ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");
	
	Если ЗначениеЗаполнено(ОсновноеПодразделение) Тогда
		Подразделение = ОсновноеПодразделение;
	КонецЕсли;
	
	//Если в копируемом документе было право отпуска без контроля взаиморасчетов, то в новом документе это право нужно давать явно.
	ОтключитьКонтрольВзаиморасчетов = Ложь;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа", ОбъектКопирования.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в бухгалтерском учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;

    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Выбытие);
	СтруктураПараметров.Вставить("РасчетыВозврат",  	Перечисления.РасчетыВозврат.Расчеты);
	
	СтруктураПараметров.Вставить("ЕстьНДС",  			СтруктураШапкиДокумента.ЕстьНДС);
	СтруктураПараметров.Вставить("ВалютаДокумента",     СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("Период",     			СтруктураШапкиДокумента.Дата);
	
	// В случае передачи товаров комиссионеру, движение по продажам осуществит документ "Отчет комитенту о продажах" 
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		СтруктураПараметров.Вставить("ЕстьПродажа", Ложь);
	КонецЕсли;
	
    СтруктураДвижений = Новый Структура;
	СтруктураДвижений.Вставить("НалоговыйУчет", 			 Движения.ПродажиНалоговыйУчет);
	СтруктураДвижений.Вставить("ОжидаемыИПодтвержденныйНДС", Движения.ОжидаемыйИПодтвержденныйНДСПродаж);
	
	// ТОВАРЫ...
	МассивТаблицТоваров = Новый Массив();	
	МассивТаблицТоваров.Добавить(ТаблицаПоТоварам);
	МассивТаблицТоваров.Добавить(ТаблицаПоУслугам);	
	СтруктураПараметров.Вставить("ТаблицыТоваров", МассивТаблицТоваров);
		
	// ТАРА
	МассивТаблицТары = Новый Массив();
	МассивТаблицТары.Добавить(ТаблицаПоТаре);
	СтруктураПараметров.Вставить("ТаблицыТары", МассивТаблицТары);
	
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, мВалютаРегламентированногоУчета, Отказ);
		
КонецПроцедуры // 							  

//
Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ)
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		И Дата < '20110101' Тогда
		// Это не наши ценности, следовательно НДС по ним учитывать не нужно
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.Свернуть("СделкаРегл, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат", "ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговые обязательства: отгрузка";
			Проводка.НомерЖурнала               = "";

			Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				Проводка.СчетДт                     = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				    Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.ПроводкиСуммаНДСРегл);
				КонецЕсли;
				
			Иначе	
				// с 2011 года согласно НК начисляются обязательства при поставке товаров по договорам комиссии
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки", СтрокаТаблицы.СделкаРегл);
			КонецЕсли;

			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры


// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей)

	СтруктураПолей.Вставить("Цена", "Цена");

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей)

	СтруктураПолей.Вставить("СхемаРеализации"          , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"            , "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"       , "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"       , "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"       , "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"           , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"      , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"      , "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"      , "СхемаРеализации.СубконтоСебестоимости3");
	
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"      , "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат"       , "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат"  , "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат" 		  , "НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
	

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;

	// Склад проверяем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	// и склад не в ТЧ.
	Если мУказаниеСкладовВТЧ
		ИЛИ (Товары.Количество() + ВозвратнаяТара.Количество() = 0) Тогда
		//Не требуется указание склада в шапке
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("Склад");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЕсли;
	Если УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
		ПроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);
	
КонецПроцедуры

//----Смартис (Черный А.В)----->
Процедура ПроверитьСтавкуНДС(Отказ)
    Если РольДоступна("ПолныеПрава") Тогда
        отказ = ложь;
        Возврат;
    КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВидВзаиморасчетов) Тогда
		
		//Смартис Лиманчук начало 08.04.2013
		//продажи нерезиденту могут быть не с 20%
		Если Контрагент.НеЯвляетсяРезидентом Тогда
			Возврат;
		КонецЕсли;
		//Смартис Лиманчук окончание 08.04.2013
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.НомерСтроки,
		|	""Товары"" КАК ТЧ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &ДокументСсылка
		|	И НЕ РеализацияТоваровУслугТовары.СтавкаНДС в (&СписокСтавокНДС)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.НомерСтроки,
		|	""Услуги""
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументСсылка
		//ИЗМЕНЕНО Верескул Игорь(Начало 18.04.2022
		//в связи с изменением налогообложения
		|	И НЕ РеализацияТоваровУслугУслуги.СтавкаНДС в (&СписокСтавокНДС)";
		Массив = Новый Массив;
		Массив.Добавить(Перечисления.СтавкиНДС.НДС20);
		Массив.Добавить(Перечисления.СтавкиНДС.НДС0);
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		Запрос.УстановитьПараметр("СписокСтавокНДС", Массив);
		//Окончание)Верескул Игорь 
		тзРез = Запрос.Выполнить().Выгрузить();
		Если тзРез.Количество() > 0 Тогда
			Сообщить("Вид взаиморасчетов договора безналичный. Ставка НДС должна быть 20%.");
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.НомерСтроки,
		|	""Товары"" КАК ТЧ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &ДокументСсылка
		|	И РеализацияТоваровУслугТовары.СтавкаНДС = &СтавкаНДС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.НомерСтроки,
		|	""Услуги""
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументСсылка
		|	И РеализацияТоваровУслугУслуги.СтавкаНДС = &СтавкаНДС";
		
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		Запрос.УстановитьПараметр("СтавкаНДС", Перечисления.СтавкиНДС.НДС20);
		
		тзРез = Запрос.Выполнить().Выгрузить();
		Если тзРез.Количество() > 0 Тогда
			Сообщить("Вид взаиморасчетов договора наличный. Ставка НДС не должна быть 20%.");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мЕстьКолонкаСерии = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");

мУказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
Или (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

мИспользоватьТару = Константы.ИспользоватьВозвратнуюТару.Получить();
мИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат");
мДатаНачалаИспользованияРасширеннойАналитики = глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");

мНеОткрыватьФорму = Ложь;