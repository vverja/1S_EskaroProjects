Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мКоэффициентПропорциональногоНДС Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура РассчитатьПропорциональныйНДС(СтрокаПлатеж = Неопределено) Экспорт
	
	ПересчитыватьВсеСтроки = (СтрокаПлатеж = Неопределено);
	
	Если мКоэффициентПропорциональногоНДС = Неопределено Тогда
		
		мКоэффициентПропорциональногоНДС = НалоговыйУчетПовтИсп.ПолучитьКоэффициентПропорциональногоНДС(Организация, Дата);
	
	КонецЕсли;
	
	Если ПересчитыватьВсеСтроки Тогда
		Для каждого СтрокаРасшифровки Из Приобретения Цикл
			Если НЕ СтрокаРасшифровки.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			    СтрокаРасшифровки.СуммаНДСПропорциональноКредит = 0;
			Иначе	
				СтрокаРасшифровки.СуммаНДСПропорциональноКредит = СтрокаРасшифровки.НДСВходящий * мКоэффициентПропорциональногоНДС;
			КонецЕсли;
		КонецЦикла;
	Иначе	
		Если НЕ СтрокаПлатеж.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			СтрокаПлатеж.СуммаНДСПропорциональноКредит = 0;
		Иначе	
			СтрокаПлатеж.СуммаНДСПропорциональноКредит = СтрокаПлатеж.НДСВходящий * мКоэффициентПропорциональногоНДС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура РассчитатьКурсВСтрокеТабЧасти(СтрокаТЧ) Экспорт
	
	Если СтрокаТЧ.СуммаВзаиморасчетов <> 0 Тогда
	
		СтрокаТЧ.КурсВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетовРегл / СтрокаТЧ.СуммаВзаиморасчетов;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСуммуВзаиморасчетовРеглВСтрокеТабЧасти(СтрокаТЧ) Экспорт
	
	СтрокаТЧ.СуммаВзаиморасчетовРегл = СтрокаТЧ.СуммаВзаиморасчетов * СтрокаТЧ.КурсВзаиморасчетов / ?(СтрокаТЧ.КратностьВзаиморасчетов = 0, 1, СтрокаТЧ.КратностьВзаиморасчетов);
	
КонецПроцедуры


Процедура РассчитатьСуммуНДСВСтрокеТабЧасти(СтрокаТЧ) Экспорт
	
	Если ТипЗнч(СтрокаТЧ) = Тип("ДокументТабличнаяЧастьСтрока.РегистрацияАвансовВНалоговомУчете.Приобретения") Тогда
	
		ИмяКолонкиНДС = "НДСВходящий";
		
	Иначе
		
		ИмяКолонкиНДС = "НДС";
		
	КонецЕсли;
	
	СтрокаТЧ[ИмяКолонкиНДС] = Ценообразование.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВзаиморасчетовРегл,
	                                                   Истина,Истина,Ценообразование.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
	СтрокаТЧ.БазаНДС  = СтрокаТЧ.СуммаВзаиморасчетовРегл - СтрокаТЧ[ИмяКолонкиНДС];
	
	Если ИмяКолонкиНДС = "НДСВходящий" Тогда
    	РассчитатьПропорциональныйНДС(СтрокаТЧ);    
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКурсВзаиморасчетов(СтрокаТЧ) Экспорт
	
	Если НЕ СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
		
		ДанныеОВалюте = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		Курс = ДанныеОВалюте.Курс;
		Кратность = ДанныеОВалюте.Кратность;
		
	Иначе
		
		Курс 	  = 1;
		Кратность = 1;
		
	КонецЕсли;
	
	СтрокаТЧ.КурсВзаиморасчетов = Курс;
	СтрокаТЧ.КратностьВзаиморасчетов = Кратность;
	
КонецПроцедуры

Функция ПолучитьМоментОпределенияБазы(СтрокаТаблицыВозвратов)
	
	 Если СтрокаТаблицыВозвратов.ВозвратнаяТара Тогда
	 	Если СтрокаТаблицыВозвратов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
			Возврат СтрокаТаблицыВозвратов.МоментОпределенияБазыПокупкиТара;
		Иначе	
		    Возврат СтрокаТаблицыВозвратов.МоментОпределенияБазыПродажиТара;
		КонецЕсли;
	 Иначе	
	 	Если СтрокаТаблицыВозвратов.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик Тогда
			Возврат СтрокаТаблицыВозвратов.МоментОпределенияБазыПокупки;
		Иначе	
		    Возврат СтрокаТаблицыВозвратов.МоментОпределенияБазыПродажи;
		КонецЕсли;
	 КонецЕсли;
	
КонецФункции

// Процедура готовит таблицу используемую для корректировки сумм, на которую формируются сторнирующие проводки на начало следующего месяца
// на суммы закрытых "неполных возвратов" (указываются на закладке "Возвраты"). По тем возвратам, по каким
// регистрируются авансы (или сторнируются отргузки) не нужно делать сторно проводок.
//
// Параметры
//	ТаблицаПоВозвратам - Сумма проводки до корректировки
//
//	ТипКонтрагета – Перечисение.СтатусыКонтрагентов -  	для отбора строк из родительской таблицы
//														по Приобретению/Продажам
//
//  СтрокаТаблицы  – Строка таблицы значений, по которой формируются движения.
//
// Возвращаемое значение:
//   ТаблицаЗначений   – подготовленная таблица.
//
Функция ПодготовитьТаблицуВозвратовДляКорректировок(ТаблицаПоВозвратам, ТипКонтрагета)
	
	ТабВозвраты = ТаблицаПоВозвратам.Скопировать();
	ТабВозвраты.Колонки.Добавить("СуммаОтгрузки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТабВозвраты.Колонки.Добавить("СуммаОплаты"	 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	Инд = 0;
	Пока ТабВозвраты.Количество() > Инд Цикл
		СтрокаВозвратов = ТабВозвраты[Инд];
		Если НЕ СтрокаВозвратов.ТипКонтрагента = ТипКонтрагета 
			ИЛИ СтрокаВозвратов.ЗакрыватьВозврат = Ложь 
			ИЛИ СтрокаВозвратов.ПревышениеОтгрузкиНадОплатой = 0 Тогда
			ТабВозвраты.Удалить(СтрокаВозвратов);	
		Иначе
			Если СтрокаВозвратов.ПревышениеОтгрузкиНадОплатой > 0 Тогда
				СтрокаВозвратов.СуммаОтгрузки = СтрокаВозвратов.ПревышениеОтгрузкиНадОплатой;
			Иначе
				СтрокаВозвратов.СуммаОплаты   = -СтрокаВозвратов.ПревышениеОтгрузкиНадОплатой;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТабВозвраты.Свернуть("Контрагент, ДоговорКонтрагента, Сделка, ВозвратнаяТара", "СуммаОтгрузки, СуммаОплаты");	
	
	Возврат  ТабВозвраты;
	
КонецФункции

// Процедура корректирует сумму, на которую формируются сторнирующие проводки на начало следующего месяца
// на суммы закрытых "неполных возвратов" (указываются на закладке "Возвраты"). По тем возвратам, по каким
// регистрируются авансы (или сторнируются отргузки) не нужно делать сторно проводок.
//
// Параметры
//	СуммаПроводки - Сумма проводки до корректировки
//
//	Возвраты  – таблица с данным по закрываемым возвратам 
//
//  СтрокаТаблицы  – Строка таблицы значений, по которой формируются движения.
//
// Возвращаемое значение:
//   Число   – откорректированная сумма проводки.
//
Функция СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СуммаПроводки, ТабВозвраты, СтрокаТаблицы)

	НоваяСуммаПроводки = СуммаПроводки;
	
	// Не нужно сторнировать проводки, для регистрации авансов по закрываемым неполным возвратам
	СтрокиЗакрытияВозвратов = ТабВозвраты.НайтиСтроки(Новый Структура("Контрагент,
																	   |ДоговорКонтрагента,
																	   |Сделка,
																	   |ВозвратнаяТара",	
																	   СтрокаТаблицы.Контрагент,
																	   СтрокаТаблицы.ДоговорКонтрагента,
																	   СтрокаТаблицы.Сделка,
																	   СтрокаТаблицы.ВозвратнаяТара));
	
	Если СтрокиЗакрытияВозвратов.Количество() > 0 Тогда
		//не более одной строки																			
		СтрокаЗакрытияВозвратов = СтрокиЗакрытияВозвратов[0];
		
		ИмяКолонкиСуммы = "";
		Если  СтрокаЗакрытияВозвратов.СуммаОтгрузки > 0
			И СтрокаТаблицы.СуммаОтгрузки > 0 Тогда
			
			ИмяКолонкиСуммы = "СуммаОтгрузки";
			
		ИначеЕсли СтрокаЗакрытияВозвратов.СуммаОплаты > 0
			И СтрокаТаблицы.СуммаОплаты > 0 Тогда
			
			ИмяКолонкиСуммы = "СуммаОплаты";
			
		КонецЕсли;	
		
		Если НЕ ИмяКолонкиСуммы = "" Тогда
			
			СуммаВозврата = Мин(СтрокаЗакрытияВозвратов[ИмяКолонкиСуммы], СтрокаТаблицы[ИмяКолонкиСуммы+"Всего"]); 
			
			Если НЕ СтрокаТаблицы[ИмяКолонкиСуммы+"Всего"] = СуммаВозврата Тогда
				// нужно подкорректировать сумму на сумму возврата
				НоваяСуммаПроводки =  СуммаПроводки * (1 - (СуммаВозврата/СтрокаТаблицы[ИмяКолонкиСуммы+"Всего"]));
				
			Иначе
				
				НоваяСуммаПроводки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
    Возврат НоваяСуммаПроводки;
	
КонецФункции // СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПриобретения(РезультатЗапросаПоПриобретениям, СтруктураШапкиДокумента)

	ТаблицаПриобретения = РезультатЗапросаПоПриобретениям.Выгрузить();
	ВидыОпераций = Перечисления.ВидыОперацийРегистрацияАвансовВНалоговомУчете;
	СобытияНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений;
	События    = Перечисления.СобытияПриобретенияНалоговыйУчет;
	
	ТаблицаПриобретения.Колонки.Добавить("ПроводкиСуммаНДСРегл"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаПриобретения.Колонки.Добавить("НДСКредит"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаПриобретения.Колонки.Добавить("СобытиеНДС");
	ТаблицаПриобретения.Колонки.Добавить("Событие");
	
	ТаблицаПриобретения.Колонки.Добавить("СуммаОтгрузки"	 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаПриобретения.Колонки.Добавить("СуммаОплаты"		 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаПриобретения.Колонки.Добавить("СуммаОтгрузкиВсего", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаПриобретения.Колонки.Добавить("СуммаОплатыВсего"	 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	КэшНалоговыхНазначений = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ТаблицаПриобретения Цикл
		
		Если СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансОпределениеПараметровНУ Тогда
			// нужно зарегистрировать отгрузку
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Поступление;
			СтрокаТаблицы.Событие    = 	События.ПоступлениеОтПоставщика;
			
			СтрокаТаблицы.СуммаОтгрузки = 0;
			СтрокаТаблицы.СуммаОплаты   = СтрокаТаблицы.СуммаВзаиморасчетов;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансВозвратОпределениеПараметровНУ Тогда
			// нужно зарегистрировать возврат отгрузки
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Возврат;
			СтрокаТаблицы.Событие    = 	События.ВозвратПоставщику;
			
			СтрокаТаблицы.СуммаОтгрузки = 0;
			СтрокаТаблицы.СуммаОплаты   = СтрокаТаблицы.СуммаВзаиморасчетов;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаОтменаРегистрацииВНУ Тогда
			// нужно отсторнировать отгрузку
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Поступление;
			СтрокаТаблицы.Событие    = 	События.ПоступлениеОтПоставщика;
			
			СтрокаТаблицы.СуммаОтгрузки = СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.СуммаОплаты   = 0;
			
			СтрокаТаблицы.СуммаВзаиморасчетовРегл 	= - СтрокаТаблицы.СуммаВзаиморасчетовРегл;
			СтрокаТаблицы.СуммаВзаиморасчетов	 	= - СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.БазаНДС 					= - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.НДСВходящий 				= - СтрокаТаблицы.НДСВходящий;
			СтрокаТаблицы.СуммаНДСПропорционально   = - СтрокаТаблицы.СуммаНДСПропорционально;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаВозвратОтменаРегистрацииВНУ Тогда
			// нужно отсторнировать возврат отгрузки
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Возврат;
			СтрокаТаблицы.Событие    = 	События.ВозвратПоставщику;
			
			СтрокаТаблицы.СуммаОтгрузки = СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.СуммаОплаты   = 0;
			
			// при этом суммы должны быть отрицательными
			СтрокаТаблицы.СуммаВзаиморасчетовРегл 	= - СтрокаТаблицы.СуммаВзаиморасчетовРегл;
			СтрокаТаблицы.СуммаВзаиморасчетов	 	= - СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.БазаНДС 					= - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.НДСВходящий	 			= - СтрокаТаблицы.НДСВходящий;
			СтрокаТаблицы.СуммаНДСПропорционально   = - СтрокаТаблицы.СуммаНДСПропорционально;
			
		КонецЕсли; 
		
		// проверим, есть ли право на налоговый кредит
		Если НалоговыйУчетПовтИсп.ЕстьПравоНаНалоговыйКредит(СтрокаТаблицы.НалоговоеНазначение) Тогда
			
			Если СтрокаТаблицы.ВидДеятельностиНДС = перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
				СтрокаТаблицы.НДСКредит 	= СтрокаТаблицы.СуммаНДСПропорционально;
			Иначе
				СтрокаТаблицы.НДСКредит 	= СтрокаТаблицы.НДСВходящий;
			КонецЕсли;
			
		Иначе
			СтрокаТаблицы.НДСКредит		= 0;
		КонецЕсли; 
		
		СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.НДСКредит;
		// Инвертируем суммы по операциям возврата.
		Если  СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансВозвратОпределениеПараметровНУ
		  ИЛИ СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаВозвратОтменаРегистрацииВНУ	Тогда
			
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = - СтрокаТаблицы.ПроводкиСуммаНДСРегл ;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
			СтрокаТаблицы.Сделка = Неопределено;
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаКопия = ТаблицаПриобретения.Скопировать();
	ТаблицаКопия.Свернуть("Контрагент, ДоговорКонтрагента, Сделка, ВозвратнаяТара,ВидОперации,РегистрацияПоНДС", "СуммаОтгрузки, СуммаОплаты");
	СтруктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента, Сделка, ВозвратнаяТара,ВидОперации,РегистрацияПоНДС");
	Для каждого СтрокаТаблицы  Из ТаблицаПриобретения Цикл
		СтруктураПоиска.Контрагент 			= СтрокаТаблицы.Контрагент;
		СтруктураПоиска.ДоговорКонтрагента 	= СтрокаТаблицы.ДоговорКонтрагента;
		СтруктураПоиска.Сделка 				= СтрокаТаблицы.Сделка;
		СтруктураПоиска.ВозвратнаяТара 		= СтрокаТаблицы.ВозвратнаяТара;
		СтруктураПоиска.ВидОперации 		= СтрокаТаблицы.ВидОперации;
		СтруктураПоиска.РегистрацияПоНДС 	= СтрокаТаблицы.РегистрацияПоНДС;
		
		ИтоговыеСтроки = ТаблицаКопия.НайтиСтроки(СтруктураПоиска);
		Если ИтоговыеСтроки.Количество() > 0 Тогда
			СтрокаТаблицы.СуммаОтгрузкиВсего = ИтоговыеСтроки[0].СуммаОтгрузки;
			СтрокаТаблицы.СуммаОплатыВсего   = ИтоговыеСтроки[0].СуммаОплаты;
		КонецЕсли;
	КонецЦикла; 

	Возврат ТаблицаПриобретения;

КонецФункции // ПодготовитьТаблицуПриобретения()

Функция ПодготовитьТаблицуПродажи(РезультатЗапросаПоПродажам, СтруктураШапкиДокумента)

	ТаблицаПродажи = РезультатЗапросаПоПродажам.Выгрузить();
	ВидыОпераций = Перечисления.ВидыОперацийРегистрацияАвансовВНалоговомУчете;
	СобытияНДС = Перечисления.СобытияНДСПродаж;
	СобытияНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж;
	События    = Перечисления.СобытияПродажиНалоговыйУчет;
	
	ТаблицаПродажи.Колонки.Добавить("ПроводкиСуммаНДСРегл"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаПродажи.Колонки.Добавить("СобытиеНДС");
	ТаблицаПродажи.Колонки.Добавить("Событие");
	
	ТаблицаПродажи.Колонки.Добавить("СуммаОтгрузки"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаПродажи.Колонки.Добавить("СуммаОплаты"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаПродажи.Колонки.Добавить("СуммаОтгрузкиВсего", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаПродажи.Колонки.Добавить("СуммаОплатыВсего"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));

	Для каждого СтрокаТаблицы Из ТаблицаПродажи Цикл
		
		Если СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансОпределениеПараметровНУ Тогда
			// нужно зарегистрировать отгрузку
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Реализация;
			СтрокаТаблицы.Событие 	 = 	События.РеализацияПокупателю;
			
			СтрокаТаблицы.СуммаОтгрузки = 0;
			СтрокаТаблицы.СуммаОплаты   = СтрокаТаблицы.СуммаВзаиморасчетов;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансВозвратОпределениеПараметровНУ Тогда
			// нужно зарегистрировать возврат отгрузки
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Возврат;
			СтрокаТаблицы.Событие 	 = 	События.ВозвратОтПокупателя;
			
			СтрокаТаблицы.СуммаОтгрузки = 0;
			СтрокаТаблицы.СуммаОплаты   = СтрокаТаблицы.СуммаВзаиморасчетовРегл;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаОтменаРегистрацииВНУ Тогда
			// нужно отсторнировать отгрузку
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Реализация;
			СтрокаТаблицы.Событие 	 = 	События.РеализацияПокупателю;
			
			СтрокаТаблицы.СуммаОтгрузки = СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.СуммаОплаты   = 0;
			
			СтрокаТаблицы.СуммаВзаиморасчетовРегл 	= - СтрокаТаблицы.СуммаВзаиморасчетовРегл;
			СтрокаТаблицы.СуммаВзаиморасчетов	 	= - СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.БазаНДС 					= - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.НДС 						= - СтрокаТаблицы.НДС;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаВозвратОтменаРегистрацииВНУ Тогда
			// нужно отсторнировать возврат отгрузки
			СтрокаТаблицы.СобытиеНДС = 	СобытияНДС.Возврат;
			СтрокаТаблицы.Событие 	 = 	События.ВозвратОтПокупателя;
			
			СтрокаТаблицы.СуммаОтгрузки = СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.СуммаОплаты   = 0;
			
			// при этом суммы должны быть отрицательными
			СтрокаТаблицы.СуммаВзаиморасчетовРегл 	= - СтрокаТаблицы.СуммаВзаиморасчетовРегл;
			СтрокаТаблицы.СуммаВзаиморасчетов	 	= - СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.БазаНДС 					= - СтрокаТаблицы.БазаНДС;
			СтрокаТаблицы.НДС	 					= - СтрокаТаблицы.НДС;
			
		КонецЕсли; 
		
		СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.НДС;
		
		// Инвертируем суммы ВР по операциям возврата.
		Если  СтрокаТаблицы.ВидОперации = ВидыОпераций.АвансВозвратОпределениеПараметровНУ
		  ИЛИ СтрокаТаблицы.ВидОперации = ВидыОпераций.ОтгрузкаВозвратОтменаРегистрацииВНУ	Тогда
			
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
			СтрокаТаблицы.Сделка = Неопределено;
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаКопия = ТаблицаПродажи.Скопировать();
	ТаблицаКопия.Свернуть("Контрагент, ДоговорКонтрагента, Сделка, ВозвратнаяТара,ВидОперации,РегистрацияПоНДС", "СуммаОтгрузки, СуммаОплаты");
	СтруктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента, Сделка, ВозвратнаяТара,ВидОперации,РегистрацияПоНДС");
	Для каждого СтрокаТаблицы  Из ТаблицаПродажи Цикл
		СтруктураПоиска.Контрагент 			= СтрокаТаблицы.Контрагент;
		СтруктураПоиска.ДоговорКонтрагента 	= СтрокаТаблицы.ДоговорКонтрагента;
		СтруктураПоиска.Сделка 				= СтрокаТаблицы.Сделка;
		СтруктураПоиска.ВозвратнаяТара 		= СтрокаТаблицы.ВозвратнаяТара;
		СтруктураПоиска.ВидОперации 		= СтрокаТаблицы.ВидОперации;
		СтруктураПоиска.РегистрацияПоНДС 	= СтрокаТаблицы.РегистрацияПоНДС;
		
		ИтоговыеСтроки = ТаблицаКопия.НайтиСтроки(СтруктураПоиска);
		Если ИтоговыеСтроки.Количество() > 0 Тогда
			СтрокаТаблицы.СуммаОтгрузкиВсего = ИтоговыеСтроки[0].СуммаОтгрузки;
			СтрокаТаблицы.СуммаОплатыВсего   = ИтоговыеСтроки[0].СуммаОплаты;
		КонецЕсли;
	КонецЦикла; 

	Возврат ТаблицаПродажи;

КонецФункции // ПодготовитьТаблицуПродажи()

Функция ПодготовитьТаблицуВозвраты(РезультатЗапросаПоВозвратам, СтруктураШапкиДокумента)
	
	ТаблицаВозвраты = РезультатЗапросаПоВозвратам.Выгрузить();
	
	СобытияПродаж 		= Перечисления.СобытияПродажиНалоговыйУчет;
	СобытияПриобретений = Перечисления.СобытияПриобретенияНалоговыйУчет;
	
	Поставщик 	= Перечисления.СтатусыКонтрагентов.Поставщик;
	Покупатель 	= Перечисления.СтатусыКонтрагентов.Покупатель;
	
	ТаблицаВозвраты.Колонки.Добавить("СобытиеРасчеты");
	ТаблицаВозвраты.Колонки.Добавить("СобытиеВозврат");

	Для каждого СтрокаТаблицы Из ТаблицаВозвраты Цикл
		
		Если СтрокаТаблицы.ТипКонтрагента = Покупатель Тогда
			
			Если СтрокаТаблицы.СуммаВзаиморасчетов < 0 Тогда
				
				// возврат оплаты
				СтрокаТаблицы.СуммаВзаиморасчетов = -СтрокаТаблицы.СуммаВзаиморасчетов;
				
				СтрокаТаблицы.СобытиеРасчеты = СобытияПродаж.ОплатаПокупателем;
				СтрокаТаблицы.СобытиеВозврат = СобытияПродаж.ВозвратОплатыПокупателю;
				
			Иначе
				
				// возврат отгрузки
				СтрокаТаблицы.СобытиеРасчеты = СобытияПродаж.РеализацияПокупателю;
				СтрокаТаблицы.СобытиеВозврат = СобытияПродаж.ВозвратОтПокупателя;
				
			КонецЕсли; 
			
			
		ИначеЕсли СтрокаТаблицы.ТипКонтрагента = Поставщик Тогда
			
			Если СтрокаТаблицы.СуммаВзаиморасчетов < 0 Тогда
				
				// возврат оплаты
				СтрокаТаблицы.СуммаВзаиморасчетов = -СтрокаТаблицы.СуммаВзаиморасчетов;
				
				СтрокаТаблицы.СобытиеРасчеты = СобытияПриобретений.ОплатаПоставщику;
				СтрокаТаблицы.СобытиеВозврат = СобытияПриобретений.ВозвратОплатыПоставщиком;
				
			Иначе
				
				// возврат отгрузки
				СтрокаТаблицы.СобытиеРасчеты = СобытияПриобретений.ПоступлениеОтПоставщика;
				СтрокаТаблицы.СобытиеВозврат = СобытияПриобретений.ВозвратПоставщику;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
				СтрокаТаблицы.Сделка = Неопределено;
			КонецЕсли;
			
		КонецЕсли; 
		
		// установим признак не проведения по регистрам для нулевых сумм
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			СтрокаТаблицы.ЗакрыватьВозврат = Ложь;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаВозвраты;

КонецФункции

// Проверяет правильность заполнения строк табличной части "Приобретения".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПриобретениям  - таблица значений, содержащая данные для проведения и проверки
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПриобретения(ТаблицаПоПриобретениям, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Приобретения";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент, ДоговорКонтрагента,ВидОперации,СтавкаНДС,НалоговоеНазначение,
						|СчетУчетаНДС,СчетУчетаНДСНеподтвержденный,СуммаВзаиморасчетов,БазаНДС");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоПриобретениям, Отказ, Заголовок);
	
	// Дополнительные проверки:
	Для каждого Строка Из ТаблицаПоПриобретениям Цикл
		
		Если  НЕ ЗначениеЗаполнено(Строка.Сделка)
			И (    Строка.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			   ИЛИ Строка.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
		
			СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
			ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ Строка.НомерСтроки + """ табличной части " + ИмяТабличнойЧасти +" " + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;
		
		// пропорциональный НДС может быть указан только для ставок НДС 20% и для хоз.деятельности
		Если Строка.РегистрацияПоНДС Тогда
				Если Строка.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально
					И  НЕ (    Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Тогда

				
					СтрокаСообщения = Локализация.СтрШаблон(НСтр("ru='Для договора ""¤1¤"" в табличной части ""Приобретение"" указан признак пропорционального включения НДС в кредит."
"При этом ставка НДС может быть только 20% или 0%! Исправьте указанные реквизиты!';uk='Для договору ""¤1¤"" у табличній частині ""Придбання"" зазначена ознака пропорційного включення ПДВ у кредит."
"При цьому ставка ПДВ може бути тільки 20% або 0%, Виправте зазначені реквізити!'"), Строка(Строка.ДоговорКонтрагента));
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПриобретения()

// Проверяет правильность заполнения строк табличной части "Продажи".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПродажам  		- таблица значений, содержащая данные для проведения и проверки
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПродажи(ТаблицаПоПродажам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Продажи";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент, ДоговорКонтрагента,ВидОперации,СтавкаНДС,НалоговоеНазначение,
						|СчетУчетаНДС,СчетУчетаНДСНеподтвержденный,СуммаВзаиморасчетов,БазаНДС");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоПродажам, Отказ, Заголовок);
	
	// Дополнительные проверки:
	Для каждого Строка Из ТаблицаПоПродажам Цикл
		
		Если  НЕ ЗначениеЗаполнено(Строка.Сделка)
			И (    Строка.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			   ИЛИ Строка.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
		
			СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
			ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ Строка.НомерСтроки + """ табличной части " + ИмяТабличнойЧасти +" " + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПродажи()

// Проверяет правильность заполнения строк табличной части "Возвраты".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПродажам  		- таблица значений, содержащая данные для проведения и проверки
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвраты(ТаблицаПоВозвратам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Возвраты";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент, ДоговорКонтрагента, ТипКонтрагента");
						
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоВозвратам, Отказ, Заголовок);
	
	// Дополнительные проверки:
	Для каждого Строка Из ТаблицаПоВозвратам Цикл
		
		Если Строка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+Строка.НомерСтроки+""" табличной части ""Возвраты"" указан договор бартера!", Отказ, Заголовок);
			
		КонецЕсли;
		
		Если (     Строка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			  И НЕ Строка.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель)
			 ИЛИ
			 (     Строка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			  И НЕ Строка.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик) Тогда
			 
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+Строка.НомерСтроки+""" табличной части ""Возвраты"" тип контрагента не соответствует виду договора контрагента", Отказ, Заголовок);
			
		ИначеЕсли НЕ Строка.ТипКонтрагента.Пустая()
				И НЕ Строка.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик
			    И НЕ Строка.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель Тогда
				
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+Строка.НомерСтроки+""" табличной части ""Возвраты"" указа неверный тип контрагента", Отказ, Заголовок);
			
		КонецЕсли;
		
		Если  НЕ ЗначениеЗаполнено(Строка.Сделка)
			И (    Строка.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			   ИЛИ Строка.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
		
			СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
			ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ Строка.НомерСтроки + """ табличной части " + ИмяТабличнойЧасти +" " + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПродажи()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("По выбранной организации не ведется учет НДС и налога на прибыль!", Отказ, Заголовок);
	
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоПриобретениям    - таблица значений, содержащая данные для проведения и проверки ТЧ Приобретения
//  ТаблицаПоПродажам         - таблица значений, содержащая данные для проведения и проверки ТЧ Продажи,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоПриобретениям, ТаблицаПоПродажам, ТаблицаПоВозвратам, Отказ, Заголовок)
							  
	ЗакрытиеВозвратов(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоВозвратам, Отказ, Заголовок);
							  
	ЗакрытиеРегистровНалоговогоУчета(СтруктураШапкиДокумента, Отказ, Заголовок);							  

	ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, 
						  ТаблицаПоПриобретениям, ТаблицаПоПродажам, ТаблицаПоВозвратам, Отказ, Заголовок);
						  
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамНалоговогоУчета(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоПриобретениям, ТаблицаПоПродажам, ТаблицаПоВозвратам, Отказ, Заголовок)
							
	ДатаСторноДвижений = КонецМесяца(СтруктураШапкиДокумента.Дата)+2;
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	// движения по  приобретениям
	НаборДвиженийОиПНДСПриобретений 	= Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийОиПНДСПриобретений	= НаборДвиженийОиПНДСПриобретений.ВыгрузитьКолонки();
	
	// движения по приобретений налоговый учет
	НаборДвиженийНУПриобретений 	= Движения.ПриобретенияНалоговыйУчет;
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийНУПриобретений 	= НаборДвиженийНУПриобретений.ВыгрузитьКолонки();
	
	ТаблицаКопия = ТаблицаПоПриобретениям.Скопировать();
	
	//удалим те строки, для которых не требуется регистрация по НДС
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("РегистрацияПоНДС", Ложь);
	НайденныеСтроки = ТаблицаКопия.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТаблицаКопия.Удалить(Строка);
	КонецЦикла;
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ПриобретенийНалоговыйУчет
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийНУПриобретений);
	
	ТаблицаДвиженийНУПриобретений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	
	НаборДвиженийНУПриобретений.мПериод            = СтруктураШапкиДокумента.Дата;
	НаборДвиженийНУПриобретений.мТаблицаДвижений   = ТаблицаДвиженийНУПриобретений;

	Если Не Отказ Тогда
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
	КонецЕсли;
	
	// теперь сделаем сторно на конец периода
	Для каждого Строка  Из ТаблицаДвиженийНУПриобретений Цикл
		Строка.СуммаВзаиморасчетов = - Строка.СуммаВзаиморасчетов;
	КонецЦикла;
							  
	НаборДвиженийНУПриобретений.мПериод            = ДатаСторноДвижений;
	НаборДвиженийНУПриобретений.мТаблицаДвижений   = ТаблицаДвиженийНУПриобретений;

	Если Не Отказ Тогда
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
	КонецЕсли;	
	
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ОжидаемыйИПодтвержденныйНДСПриобретений
	Сч = 0;
	Пока Сч < ТаблицаКопия.Количество() Цикл
		СтрокаТаблицыКопии = ТаблицаКопия[Сч];
		Если НЕ СтрокаТаблицыКопии.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
			// приобретение у нерезидента не отражается в подсистеме учета НДС
			ТаблицаКопия.Удалить(СтрокаТаблицыКопии);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла; 
	
	// Колонку СчетУчетаНДСНеподтвержденный "переименуем" в СчетУчетаНДС, как в регистре
	ТаблицаКопия.Колонки.Удалить("СчетУчетаНДС");
	ТаблицаКопия.Колонки.СчетУчетаНДСНеподтвержденный.Имя = "СчетУчетаНДС";
	
	// Колонку НДСВходящий "переименуем" в СуммаНДС, как в регистре
	ТаблицаКопия.Колонки.НДСВходящий.Имя = "СуммаНДС";	
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийОиПНДСПриобретений);
	
	ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.РегистрацияАвансов,"КодОперации");
	
	НаборДвиженийОиПНДСПриобретений.мПериод            = СтруктураШапкиДокумента.Дата;
	НаборДвиженийОиПНДСПриобретений.мТаблицаДвижений   = ТаблицаДвиженийОиПНДСПриобретений;

	Если Не Отказ Тогда
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
	КонецЕсли;
	
	// теперь сделаем сторно на конец периода
	ТаблицаДвиженийОиПНДСПриобретений.Очистить();
	
	ТабВозвраты = ПодготовитьТаблицуВозвратовДляКорректировок(ТаблицаПоВозвратам, Перечисления.СтатусыКонтрагентов.Поставщик);

	// удалим формирование движений сторнодвижений по закрываемым неполным возвратам
	Инд = 0;
	Пока ТаблицаКопия.Количество() > Инд Цикл
		СтрокаТаблицы = ТаблицаКопия[Инд];
		СтрокаТаблицы.БазаНДС = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СтрокаТаблицы.БазаНДС, ТабВозвраты, СтрокаТаблицы);
		СтрокаТаблицы.СуммаНДС = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СтрокаТаблицы.СуммаНДС, ТабВозвраты, СтрокаТаблицы);
		СтрокаТаблицы.СуммаНДСПропорционально = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СтрокаТаблицы.СуммаНДСПропорционально, ТабВозвраты, СтрокаТаблицы);
		Если СтрокаТаблицы.БазаНДС = 0 И СтрокаТаблицы.СуммаНДС = 0 Тогда
		
			ТаблицаКопия.Удалить(СтрокаТаблицы);
			Продолжить;
		
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийОиПНДСПриобретений);
	ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОтменаРегистрацииАвансов,"КодОперации");
	ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	Для каждого Строка  Из ТаблицаДвиженийОиПНДСПриобретений Цикл
		Строка.БазаНДС 		= - Строка.БазаНДС;
		Строка.СуммаНДС 	= - Строка.СуммаНДС;
		Строка.СуммаНДСПропорционально 	= - Строка.СуммаНДСПропорционально;
	КонецЦикла;
							  
	НаборДвиженийОиПНДСПриобретений.мПериод            = ДатаСторноДвижений;
	НаборДвиженийОиПНДСПриобретений.мТаблицаДвижений   = ТаблицаДвиженийОиПНДСПриобретений;

	Если Не Отказ Тогда
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
	КонецЕсли;
	
	// Проводки по бухгалтерскому учету
	Для каждого СтрокаТаблицы Из ТаблицаПоПриобретениям Цикл
		
		СуммаПроводки = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		
		Если СуммаПроводки = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = СуммаПроводки;
		
		Проводка.СчетДт						= СтрокаТаблицы.СчетУчетаНДСНеподтвержденный;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , СтрокаТаблицы.Сделка);
		
		Проводка.СчетКт						= СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"     , СтрокаТаблицы.Сделка);
		
		Проводка.Содержание					= "Регистрация авансов по приобретениям";
			
	КонецЦикла; 
	
	// обратные движения на начало следующего месяца
	ТабВозвраты = ПодготовитьТаблицуВозвратовДляКорректировок(ТаблицаПоВозвратам, Перечисления.СтатусыКонтрагентов.Поставщик);
	Для каждого СтрокаТаблицы Из ТаблицаПоПриобретениям Цикл

		СуммаПроводки = -СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		
		// подкорректируем сумму по закрытиям возвратов
		СуммаПроводки = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СуммаПроводки, ТабВозвраты, СтрокаТаблицы);
		
		Если СуммаПроводки = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период                     = ДатаСторноДвижений;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = СуммаПроводки;
		
		Проводка.СчетДт						= СтрокаТаблицы.СчетУчетаНДСНеподтвержденный;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , СтрокаТаблицы.Сделка);
		
		Проводка.СчетКт						= СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"     , СтрокаТаблицы.Сделка);
		
		Проводка.Содержание					= "Отмена регистрации авансов по приобретениям";
		
	КонецЦикла; 
	
	
	// движения по продажам
	НаборДвиженийОиПНДСПродаж = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийОиПНДСПродаж = НаборДвиженийОиПНДСПродаж.ВыгрузитьКолонки();
	
	НаборДвиженийНУПродаж = Движения.ПродажиНалоговыйУчет;
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийНУПродаж = НаборДвиженийНУПродаж.ВыгрузитьКолонки();
	
	ТаблицаКопия = ТаблицаПоПродажам.Скопировать();
	
	//удалим те строки, для которых не требуется регистрация по НДС
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("РегистрацияПоНДС", Ложь);
	НайденныеСтроки = ТаблицаКопия.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТаблицаКопия.Удалить(Строка);
	КонецЦикла;
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ПродажиНалоговыйУчет
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийНУПродаж);
	
	ТаблицаДвиженийНУПродаж.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	
	НаборДвиженийНУПродаж.мПериод            = СтруктураШапкиДокумента.Дата;
	НаборДвиженийНУПродаж.мТаблицаДвижений   = ТаблицаДвиженийНУПродаж;

	Если Не Отказ Тогда
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
	КонецЕсли;
	
	// теперь сделаем сторно на конец периода
	Для каждого Строка  Из ТаблицаДвиженийНУПродаж Цикл
		Строка.СуммаВзаиморасчетов = - Строка.СуммаВзаиморасчетов;
	КонецЦикла;
							  
	НаборДвиженийНУПродаж.мПериод            = ДатаСторноДвижений;
	НаборДвиженийНУПродаж.мТаблицаДвижений   = ТаблицаДвиженийНУПродаж;

	Если Не Отказ Тогда
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
	КонецЕсли;	
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ОжидаемыйИПодтвержденныйНДСПродаж
	
	// Колонку СчетУчетаНДСНеподтвержденный "переименуем" в СчетУчетаНДС, как в регистре
	ТаблицаКопия.Колонки.Удалить("СчетУчетаНДС");
	ТаблицаКопия.Колонки.СчетУчетаНДСНеподтвержденный.Имя = "СчетУчетаНДС";

	// Колонку НДС "переименуем" в СуммаНДС, как в регистре
	ТаблицаКопия.Колонки.НДС.Имя = "СуммаНДС";

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийОиПНДСПродаж);
	
	ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.РегистрацияАвансов,"КодОперации");
	
	НаборДвиженийОиПНДСПродаж.мПериод            = СтруктураШапкиДокумента.Дата;
	НаборДвиженийОиПНДСПродаж.мТаблицаДвижений   = ТаблицаДвиженийОиПНДСПродаж;

	Если Не Отказ Тогда
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
	КонецЕсли;
	
	// теперь сделаем сторно на конец периода
	
	ТабВозвраты = ПодготовитьТаблицуВозвратовДляКорректировок(ТаблицаПоВозвратам, Перечисления.СтатусыКонтрагентов.Покупатель);
	ТаблицаДвиженийОиПНДСПродаж.Очистить();
	// удалим формирование сторно-движений по закрываемым неполным возвратам
	Инд = 0;
	Пока ТаблицаКопия.Количество() > Инд Цикл
		СтрокаТаблицы = ТаблицаКопия[Инд];
		СтрокаТаблицы.БазаНДС = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СтрокаТаблицы.БазаНДС, ТабВозвраты, СтрокаТаблицы);
		СтрокаТаблицы.СуммаНДС = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СтрокаТаблицы.СуммаНДС, ТабВозвраты, СтрокаТаблицы);
		Если СтрокаТаблицы.БазаНДС = 0 И СтрокаТаблицы.СуммаНДС = 0 Тогда
		
			ТаблицаКопия.Удалить(СтрокаТаблицы);
			Продолжить;
		
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийОиПНДСПродаж);
	ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОтменаРегистрацииАвансов,"КодОперации");
	Для каждого Строка  Из ТаблицаДвиженийОиПНДСПродаж Цикл
		Строка.БазаНДС 		= - Строка.БазаНДС;
		Строка.СуммаНДС 	= - Строка.СуммаНДС;
	КонецЦикла;
							  
	НаборДвиженийОиПНДСПродаж.мПериод            = ДатаСторноДвижений;
	НаборДвиженийОиПНДСПродаж.мТаблицаДвижений   = ТаблицаДвиженийОиПНДСПродаж;

	Если Не Отказ Тогда
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
	КонецЕсли;
	
	// Проводки по бухгалтерскому учету
	Для каждого СтрокаТаблицы Из ТаблицаПоПродажам Цикл
		
		СуммаПроводки = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		Если СуммаПроводки = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период                     = СтруктураШапкиДокумента.Дата;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = СуммаПроводки;
		
		Проводка.СчетДт						= СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , СтрокаТаблицы.Сделка);
		
		Проводка.СчетКт						= СтрокаТаблицы.СчетУчетаНДСНеподтвержденный;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"     , СтрокаТаблицы.Сделка);
		
		Проводка.Содержание					= "Регистрация авансов по продажам";
			
	КонецЦикла; 
	
	ТабВозвраты = ПодготовитьТаблицуВозвратовДляКорректировок(ТаблицаПоВозвратам, Перечисления.СтатусыКонтрагентов.Покупатель);

	// обратные движения на начало следующего месяца
	Для каждого СтрокаТаблицы Из ТаблицаПоПродажам Цикл

		СуммаПроводки = -СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		
		// подкорректируем сумму по закрытиям возвратов
		СуммаПроводки = СуммаКорректирующейПроводкиСУчетомЗакрытияВозвратов(СуммаПроводки, ТабВозвраты, СтрокаТаблицы);
		
		Если СуммаПроводки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период                     = ДатаСторноДвижений;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = СуммаПроводки;
		
		Проводка.СчетДт						= СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , СтрокаТаблицы.Сделка);
		
		Проводка.СчетКт						= СтрокаТаблицы.СчетУчетаНДСНеподтвержденный;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"     , СтрокаТаблицы.Сделка);
		
		Проводка.Содержание					= "Отмена регистрации авансов по продажам";
		
	КонецЦикла; 
	
КонецПроцедуры // ДвиженияПоРегистрам_НДС()

Процедура ЗакрытиеВозвратов(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоВозвратам, Отказ, Заголовок)
	
	НаборДвиженийПродажи 	 = Движения.ПродажиНалоговыйУчет;
	НаборДвиженийПриобртение = Движения.ПриобретенияНалоговыйУчет;
	
	ТаблицаДвиженийПродажи = НаборДвиженийПродажи.ВыгрузитьКолонки();
	
	ТаблицаДвиженийПриобретение = НаборДвиженийПриобртение.ВыгрузитьКолонки();
	
	// из таблицы получим данные для проведения по двум регистрам
	// в начале для Продаж (тип контрагента - покупатель)
	ПостроительВозвраты = Новый ПостроительЗапроса();
	ПостроительВозвраты.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаПоВозвратам);
	ПостроительВозвраты.Отбор.Добавить("ЗакрыватьВозврат");
	ПостроительВозвраты.Отбор.ЗакрыватьВозврат.Установить(Истина,Истина);
	
	ПостроительВозвраты.Отбор.Добавить("ТипКонтрагента");
	ПостроительВозвраты.Отбор.ТипКонтрагента.Установить(Перечисления.СтатусыКонтрагентов.Покупатель,Истина);

	ТаблицаПродаж = ПостроительВозвраты.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	// Закрываем событие расчетов (отгрузку или оплату)
	ТаблицаПродаж.Колонки.СобытиеРасчеты.Имя = "Событие";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвиженийПродажи);
	
	// Закрываем событие возвратов (отгрузку или оплату)
	ТаблицаПродаж.Колонки.Удалить("Событие");
	ТаблицаПродаж.Колонки.СобытиеВозврат.Имя = "Событие";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвиженийПродажи);
	
	// теперь закрываем приобретения (тип контрагента - поставщик)
	ПостроительВозвраты.Отбор.ТипКонтрагента.Установить(Перечисления.СтатусыКонтрагентов.Поставщик,Истина);

	ТаблицаПриобретений = ПостроительВозвраты.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	// Закрываем событие расчетов (отгрузку или оплату)
	ТаблицаПриобретений.Колонки.СобытиеРасчеты.Имя = "Событие";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвиженийПриобретение);
	
	// Закрываем событие возвратов (отгрузку или оплату)
	ТаблицаПриобретений.Колонки.Удалить("Событие");
	ТаблицаПриобретений.Колонки.СобытиеВозврат.Имя = "Событие";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвиженийПриобретение);
	
	ТаблицаДвиженийПродажи.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		
		НаборДвиженийПродажи.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПродажи.мТаблицаДвижений   = ТаблицаДвиженийПродажи;

		Если Не Отказ Тогда
			Движения.ПродажиНалоговыйУчет.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаДвиженийПриобретение.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	Если ТаблицаДвиженийПриобретение.Количество() > 0 Тогда
		
		НаборДвиженийПриобртение.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПриобртение.мТаблицаДвижений   = ТаблицаДвиженийПриобретение;

		Если Не Отказ Тогда
			Движения.ПриобретенияНалоговыйУчет.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция НалоговыеРегистрыЗакрывалисьВТекущемМесяце(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК ЕстьЗакрытие
	               |ИЗ
	               |	РегистрНакопления.ПродажиНалоговыйУчет КАК ПродажиНалоговыйУчет
	               |ГДЕ
	               |	ПродажиНалоговыйУчет.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	               |	И ПродажиНалоговыйУчет.Организация = &Организация
	               |	И ПродажиНалоговыйУчет.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА
	               |ИЗ
	               |	РегистрНакопления.ПриобретенияНалоговыйУчет КАК ПриобретенияНалоговыйУчет
	               |ГДЕ
	               |	ПриобретенияНалоговыйУчет.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	               |	И ПриобретенияНалоговыйУчет.Организация = &Организация
	               |	И ПриобретенияНалоговыйУчет.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Процедура ЗакрытиеРегистровНалоговогоУчета(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НалоговыеРегистрыЗакрывалисьВТекущемМесяце(СтруктураШапкиДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвиженийПродажи 	 = Движения.ПродажиНалоговыйУчет;
	НаборДвиженийПриобртение = Движения.ПриобретенияНалоговыйУчет;
	
	ТаблицаДвиженийПродажи = НаборДвиженийПродажи.ВыгрузитьКолонки();
	
	ТаблицаДвиженийПриобретение = НаборДвиженийПриобртение.ВыгрузитьКолонки();
	
	ЗапросПоЗакрытию = Новый Запрос();
	
	ЗапросПоЗакрытию.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Данные.ДоговорКонтрагента			  КАК ДоговорКонтрагента,
			|	Данные.СДелка			  			  КАК Сделка,
			
			|	Данные.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
			|	Данные.ВозвратнаяТара 				  КАК ВозвратнаяТара,
			
			|	ВЫБОР
			|		КОГДА Данные.ПродажиРасчетыОтгрузка > Данные.ПродажиРасчетыОплата
			|			ТОГДА Данные.ПродажиРасчетыОплата
			|		ИНАЧЕ Данные.ПродажиРасчетыОтгрузка
			|	КОНЕЦ КАК ПродажиРасчеты,
			
			|	ВЫБОР
			|		КОГДА Данные.ПродажиВозвратОтгрузка > Данные.ПродажиВозвратОплата
			|			ТОГДА Данные.ПродажиВозвратОплата
			|		ИНАЧЕ Данные.ПродажиВозвратОтгрузка
			|	КОНЕЦ КАК ПродажиВозврат,
			
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияРасчетыОтгрузка > Данные.ПриобретенияРасчетыОплата
			|			ТОГДА Данные.ПриобретенияРасчетыОплата
			|		ИНАЧЕ Данные.ПриобретенияРасчетыОтгрузка
			|	КОНЕЦ КАК ПриобретенияРасчеты,
			
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияВозвратОтгрузка > Данные.ПриобретенияВозвратОплата
			|			ТОГДА Данные.ПриобретенияВозвратОплата
			|		ИНАЧЕ Данные.ПриобретенияВозвратОтгрузка
			|	КОНЕЦ КАК ПриобретенияВозврат,
			
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияРасчетыОтгрузка > Данные.ПродажиРасчетыОтгрузка
			|			ТОГДА Данные.ПродажиРасчетыОтгрузка
			|		ИНАЧЕ Данные.ПриобретенияРасчетыОтгрузка
			|	КОНЕЦ КАК БартерРасчеты,
			
			|	ВЫБОР
			|		КОГДА Данные.ПриобретенияВозвратОтгрузка > Данные.ПродажиВозвратОтгрузка
			|			ТОГДА Данные.ПродажиВозвратОтгрузка
			|		ИНАЧЕ Данные.ПриобретенияВозвратОтгрузка
			|	КОНЕЦ КАК БартерВозврат
			
			|ИЗ
			|	(ВЫБРАТЬ
			|		Данные.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|		Данные.Сделка КАК Сделка,
			|		Данные.ВозвратнаяТара КАК ВозвратнаяТара,
			
			|		ЕстьNULL(СУММА(Данные.ПродажиРасчетыОтгрузка) 		, 0)	КАК ПродажиРасчетыОтгрузка,
			|		ЕстьNULL(СУММА(Данные.ПродажиРасчетыОплата) 		, 0)	КАК ПродажиРасчетыОплата,
			|		ЕстьNULL(СУММА(Данные.ПродажиВозвратОтгрузка) 		, 0)	КАК ПродажиВозвратОтгрузка,
			|		ЕстьNULL(СУММА(Данные.ПродажиВозвратОплата) 		, 0)	КАК ПродажиВозвратОплата,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияРасчетыОтгрузка)	, 0) 	КАК ПриобретенияРасчетыОтгрузка,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияРасчетыОплата) 	, 0)	КАК ПриобретенияРасчетыОплата,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияВозвратОтгрузка)	, 0) 	КАК ПриобретенияВозвратОтгрузка,
			|		ЕстьNULL(СУММА(Данные.ПриобретенияВозвратОплата) 	, 0)	КАК ПриобретенияВозвратОплата
			
			|	ИЗ
			|		(ВЫБРАТЬ
			|			Продажи.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|			Продажи.Сделка КАК Сделка,
			|			Продажи.ВозвратнаяТара КАК ВозвратнаяТара,
			
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиРасчетыОтгрузка
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК ПродажиРасчетыОтгрузка,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиРасчетыОплата
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК ПродажиРасчетыОплата,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиВозвратОтгрузка
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК ПродажиВозвратОтгрузка,
			|			ВЫБОР
			|				КОГДА Продажи.Событие = &ПродажиВозвратОплата
			|					ТОГДА Продажи.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ КАК ПродажиВозвратОплата,
			|			0 КАК ПриобретенияРасчетыОтгрузка,
			|			0 КАК ПриобретенияРасчетыОплата,
			|			0 КАК ПриобретенияВозвратОтгрузка,
			|			0 КАК ПриобретенияВозвратОплата
			
			|		ИЗ
			|			РегистрНакопления.ПродажиНалоговыйУчет.Остатки(&МоментВремени, Организация = &Организация) КАК Продажи
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			Приобретения.ДоговорКонтрагента,
			|			Приобретения.Сделка КАК Сделка,
			|			Приобретения.ВозвратнаяТара,
			
			|			0,
			|			0,
			|			0,
			|			0,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОтгрузка
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияРасчетыОплата
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОтгрузка
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ,
			|			ВЫБОР
			|				КОГДА Приобретения.Событие = &ПриобретенияВозвратОплата
			|					ТОГДА Приобретения.СуммаВзаиморасчетовОстаток
			|			КОНЕЦ
							
			|		ИЗ
			|			РегистрНакопления.ПриобретенияНалоговыйУчет.Остатки(&МоментВремени, Организация = &Организация) КАК Приобретения) КАК Данные
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Данные.ДоговорКонтрагента,
			|		Данные.Сделка,
			|		Данные.ВозвратнаяТара) КАК Данные
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДоговорКонтрагента,
			|	Сделка,
			|	ВозвратнаяТара";
			
			
	ЗапросПоЗакрытию.УстановитьПараметр("МоментВремени",МоментВремени());
	ЗапросПоЗакрытию.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	ЗапросПоЗакрытию.УстановитьПараметр("ПродажиРасчетыОтгрузка", 	Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю);
	ЗапросПоЗакрытию.УстановитьПараметр("ПродажиРасчетыОплата", 	Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
	ЗапросПоЗакрытию.УстановитьПараметр("ПродажиВозвратОтгрузка", 	Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
	ЗапросПоЗакрытию.УстановитьПараметр("ПродажиВозвратОплата", 	Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
	ЗапросПоЗакрытию.УстановитьПараметр("ПриобретенияРасчетыОтгрузка",	Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика);
	ЗапросПоЗакрытию.УстановитьПараметр("ПриобретенияРасчетыОплата",	Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику);
	ЗапросПоЗакрытию.УстановитьПараметр("ПриобретенияВозвратОтгрузка",	Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику);
	ЗапросПоЗакрытию.УстановитьПараметр("ПриобретенияВозвратОплата", 	Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
	
	Выборка = ЗапросПоЗакрытию.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			
			Если Выборка.ПродажиРасчеты 	<> 0 Тогда
			 
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.ПродажиРасчеты;
				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
				
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.ПродажиРасчеты;
				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем;
			
			КонецЕсли; 
			
			Если Выборка.ПродажиВозврат 	<> 0 Тогда
				
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.ПродажиВозврат;
				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
				
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.ПродажиВозврат;
				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю;
			
			КонецЕсли;
			
			Если Выборка.ПриобретенияРасчеты 	 <> 0 Тогда
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.ПриобретенияРасчеты;
				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.ПриобретенияРасчеты;
				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;
			
			КонецЕсли;
			
			Если Выборка.ПриобретенияВозврат 	 <> 0 Тогда
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.ПриобретенияВозврат;
				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.ПриобретенияВозврат;
				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
			
			КонецЕсли;
			
		Иначе
			
			// бартер
			Если Выборка.БартерРасчеты 	 <> 0 Тогда
				  
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.БартерРасчеты;
				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.БартерРасчеты;
				
				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;

			КонецЕсли;
			
			Если Выборка.БартерВозврат 	 <> 0 Тогда
				  
				СтрокаДвижений = ТаблицаДвиженийПродажи.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.БартерВозврат;
				СтрокаДвижений.Событие 					= Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
				
				СтрокаДвижений = ТаблицаДвиженийПриобретение.Добавить();
				СтрокаДвижений.ДоговорКонтрагента 		= Выборка.ДоговорКонтрагента;
				СтрокаДвижений.Сделка 					= Выборка.Сделка;
				СтрокаДвижений.ВозвратнаяТара	  		= Выборка.ВозвратнаяТара;
				СтрокаДвижений.СуммаВзаиморасчетов 		= Выборка.БартерВозврат;
				СтрокаДвижений.Событие 					= Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвиженийПродажи.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		
		НаборДвиженийПродажи.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПродажи.мТаблицаДвижений   = ТаблицаДвиженийПродажи;

		Если Не Отказ Тогда
			Движения.ПродажиНалоговыйУчет.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаДвиженийПриобретение.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	Если ТаблицаДвиженийПриобретение.Количество() > 0 Тогда
		
		НаборДвиженийПриобртение.мПериод            = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПриобртение.мТаблицаДвижений   = ТаблицаДвиженийПриобретение;

		Если Не Отказ Тогда
			Движения.ПриобретенияНалоговыйУчет.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, Организация, , Заголовок);
	
	Если НЕ Отказ Тогда
	
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , УчетнаяПолитикаНУ.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , УчетнаяПолитикаНУ.ЕстьНДС);
		
	КонецЕсли; 
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Для каждого Строка Из Приобретения Цикл
		// поправим налоговые реквизииты
		Если Строка.ВозвратнаяТара Тогда
			
			Строка.СтавкаНДС 	= Перечисления.СтавкиНДС.НеНДС;
			Строка.НДСВходящий  = 0;
			Строка.СуммаНДСПропорциональноКредит = 0;
			Строка.Амортизируется = 0;
			
		КонецЕсли; 
	КонецЦикла; 
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Приобретения".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("Контрагент"                           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                 , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовРегл"            , "ДоговорКонтрагента.ВедениеВзаиморасчетовРегл");
	СтруктураПолей.Вставить("Сделка"            				   , "Сделка");
	СтруктураПолей.Вставить("ДоговорОрганизация"                   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВозвратнаяТара"                       , "ВозвратнаяТара");
	СтруктураПолей.Вставить("ВидОперации"                          , "ВидОперации");
	СтруктураПолей.Вставить("РегистрацияПоНДС"                     , "РегистрацияПоНДС");
	СтруктураПолей.Вставить("СтавкаНДС"                  		   , "СтавкаНДС");
	СтруктураПолей.Вставить("НалоговоеНазначение"			  	   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"		  	   	   , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("Амортизируется"		  	   	   	   , "Амортизируется");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"                  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("СуммаВзаиморасчетовРегл"              , "СуммаВзаиморасчетовРегл");
	СтруктураПолей.Вставить("БазаНДС"                          	   , "БазаНДС");
	СтруктураПолей.Вставить("НДСВходящий"                          , "НДСВходящий");
	СтруктураПолей.Вставить("СчетУчетаНДС"                         , "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДСНеподтвержденный"         , "СчетУчетаНДСНеподтвержденный");
	СтруктураПолей.Вставить("СуммаНДСПропорционально"				, "СуммаНДСПропорциональноКредит");
	
	РезультатЗапросаПоПриобретениям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Приобретения", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Продажи".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("Контрагент"                           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовРегл"            , "ДоговорКонтрагента.ВедениеВзаиморасчетовРегл");
	СтруктураПолей.Вставить("Сделка"            				   , "Сделка");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                 , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"                   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВозвратнаяТара"                       , "ВозвратнаяТара");
	СтруктураПолей.Вставить("ВидОперации"                          , "ВидОперации");
	СтруктураПолей.Вставить("РегистрацияПоНДС"                     , "РегистрацияПоНДС");
	СтруктураПолей.Вставить("СтавкаНДС"                  		   , "СтавкаНДС");
	СтруктураПолей.Вставить("НалоговоеНазначение"			  	   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"                  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("СуммаВзаиморасчетовРегл"              , "СуммаВзаиморасчетовРегл");
	СтруктураПолей.Вставить("БазаНДС"                          	   , "БазаНДС");
	СтруктураПолей.Вставить("НДС"                          		   , "НДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"                         , "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДСНеподтвержденный"         , "СчетУчетаНДСНеподтвержденный");
	
	РезультатЗапросаПоПродажам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продажи", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Возвраты".
	СтруктураПолей        = Новый Структура;

	СтруктураПолей.Вставить("Контрагент"                           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовРегл"            , "ДоговорКонтрагента.ВедениеВзаиморасчетовРегл");
	СтруктураПолей.Вставить("Сделка"            				   , "Сделка");
	СтруктураПолей.Вставить("МоментОпределенияБазыПродажи"         , "ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам");
	СтруктураПолей.Вставить("МоментОпределенияБазыПокупки"		   , "ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам");
	СтруктураПолей.Вставить("МоментОпределенияБазыПродажиТара"	   , "ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам");
	СтруктураПолей.Вставить("МоментОпределенияБазыПокупкиТара"	   , "ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПокупкам");
	СтруктураПолей.Вставить("ВидДоговора"		                   , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ДоговорОрганизация"                   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВозвратнаяТара"                       , "ВозвратнаяТара");
	СтруктураПолей.Вставить("ТипКонтрагента"                       , "ТипКонтрагента");
	СтруктураПолей.Вставить("ПревышениеОтгрузкиНадОплатой"		   , "ПревышениеОтгрузкиНадОплатой");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"		 	       , "ПревышениеОтгрузкиНадОплатой");
	СтруктураПолей.Вставить("ЗакрыватьВозврат"                     , "НеПредполагаетсяЗакрывающаяОперация");
	
	РезультатЗапросаПоВозвратам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Возвраты", СтруктураПолей);
	
	// Подготовим таблицы товаров для проведения.
	ТаблицаПоПриобретениям      = ПодготовитьТаблицуПриобретения(РезультатЗапросаПоПриобретениям, СтруктураШапкиДокумента);
	ТаблицаПоПродажам      		= ПодготовитьТаблицуПродажи(РезультатЗапросаПоПродажам, СтруктураШапкиДокумента);
	ТаблицаПоВозвратам     		= ПодготовитьТаблицуВозвраты(РезультатЗапросаПоВозвратам, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиПриобретения(ТаблицаПоПриобретениям, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПродажи(ТаблицаПоПродажам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвраты(ТаблицаПоВозвратам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоПриобретениям, ТаблицаПоПродажам, ТаблицаПоВозвратам, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
