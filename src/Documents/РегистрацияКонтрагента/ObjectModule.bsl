Перем СканДоговораВыбран Экспорт;

Процедура ПроверкаДокумента(Отказ)

	Заголовок = "";
	
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Организация");
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ 
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеКонтрагента Тогда
	
		СтруктураОбязательныхПолей.Вставить("Родитель");
		СтруктураОбязательныхПолей.Вставить("Наименование");
		СтруктураОбязательныхПолей.Вставить("НаименованиеПолное");
		СтруктураОбязательныхПолей.Вставить("ЮрФизЛицо");
		Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			СтруктураОбязательныхПолей.Вставить("КодПоЕДРПОУ");	
			Если ПлательщикНДС Тогда
				СтруктураОбязательныхПолей.Вставить("ИНН");
				СтруктураОбязательныхПолей.Вставить("НомерСвидетельства");
			КонецЕсли; 
		Иначе
			СтруктураОбязательныхПолей.Вставить("ИНН");
			Если ПлательщикНДС Тогда
				СтруктураОбязательныхПолей.Вставить("КодПоЕДРПОУ");		
				СтруктураОбязательныхПолей.Вставить("НомерСвидетельства");
			КонецЕсли; 			
		КонецЕсли; 		
		СтруктураОбязательныхПолей.Вставить("АдресЮридический");
		СтруктураОбязательныхПолей.Вставить("АдресФактический");
		СтруктураОбязательныхПолей.Вставить("Телефон");	
	КонецЕсли;
	
	
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ 
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеДоговора ИЛИ 
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеДоговора Тогда
	
		СтруктураОбязательныхПолей.Вставить("НаименованиеДоговора");
		СтруктураОбязательныхПолей.Вставить("ВидДоговора");
		СтруктураОбязательныхПолей.Вставить("ВедениеВзаиморасчетов");
		СтруктураОбязательныхПолей.Вставить("ВалютаВзаиморасчетов");
		СтруктураОбязательныхПолей.Вставить("ТипЦен");
		СтруктураОбязательныхПолей.Вставить("ОсновнаяСтатьяДвиженияДенежныхСредств");
	
	КонецЕсли;
	
	Если (ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ 
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеТорговойТочки ИЛИ 
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеТорговойТочки) И НЕ БезЗаключенияДоговора Тогда
	
		СтруктураОбязательныхПолей.Вставить("НаименованиеТочки");
		СтруктураОбязательныхПолей.Вставить("НаименованиеТочкиПолное");
		СтруктураОбязательныхПолей.Вставить("Категория");
		СтруктураОбязательныхПолей.Вставить("Агент");
		СтруктураОбязательныхПолей.Вставить("АдресДоставки");
		СтруктураОбязательныхПолей.Вставить("Телефоны");
	
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеКонтрагента Тогда
		СтруктураОбязательныхПолей.Вставить("Контрагент");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеДоговора Тогда
		СтруктураОбязательныхПолей.Вставить("Контрагент");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеДоговора Тогда
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеТорговойТочки Тогда
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеТорговойТочки Тогда
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		СтруктураОбязательныхПолей.Вставить("ТорговаяТочка");
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	ПроверкаСуществованияКонтрагентаПоЕдрпоу(Отказ);
	
	ПроверкаМенеджерыПокупателя = Ложь;
	ПроверкаКонтактныеЛица = Ложь;
	ПроверкаКонтактныеЛицаБезКонтрагента = Ложь;
	ПроверкаТипыЦен = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента Тогда
		ПроверкаМенеджерыПокупателя = Истина;
		Если ОбработкаВыполнена Тогда
			ПроверкаКонтактныеЛица = Истина;
		Иначе
			ПроверкаКонтактныеЛицаБезКонтрагента = Истина;
		КонецЕсли;
		ПроверкаТипыЦен = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеКонтрагента Тогда
		ПроверкаМенеджерыПокупателя = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеТорговойТочки Тогда
		ПроверкаКонтактныеЛица = Истина;
		ПроверкаТипыЦен = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеТорговойТочки Тогда
		ПроверкаКонтактныеЛица = Истина;
		ПроверкаТипыЦен = Истина;
	КонецЕсли;
	
	Если ПроверкаМенеджерыПокупателя Тогда
		СтруктураОбязательныхПолей = Новый Структура("МенеджерПокупателя");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "МенеджерыПокупателя",СтруктураОбязательныхПолей, Отказ, Заголовок);
		Если МенеджерыПокупателя.Количество()=0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнена табличная часть ""Менеджеры покупателя""!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверкаКонтактныеЛица Тогда
		СтруктураОбязательныхПолей = Новый Структура("КонтактноеЛицо,Должность");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "КонтактныеЛица",СтруктураОбязательныхПолей, Отказ, Заголовок);
		Если КонтактныеЛица.Количество()=0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнена табличная часть ""Контактные лица""!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверкаКонтактныеЛицаБезКонтрагента Тогда
		СтруктураОбязательныхПолей = Новый Структура("КонтактноеЛицо,Должность");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "КонтактныеЛицаБезКонтрагента",СтруктураОбязательныхПолей, Отказ, Заголовок);
		Если КонтактныеЛицаБезКонтрагента.Количество()=0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнена табличная часть ""Контактные лица""!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверкаТипыЦен Тогда
		СтруктураОбязательныхПолей = Новый Структура("ТипЦены");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ТипыЦен",СтруктураОбязательныхПолей, Отказ, Заголовок);
		Если ТипыЦен.Количество()=0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнена табличная часть ""Типы цен""!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СтароеЗначение(ИмяРекв)
	
	Если ИмяРекв = "Родитель" Тогда
	    Возврат Контрагент.Родитель;
	ИначеЕсли ИмяРекв = "Наименование" Тогда
	    Возврат Контрагент.Наименование;
	ИначеЕсли ИмяРекв = "НаименованиеПолное" Тогда
	    Возврат Контрагент.НаименованиеПолное;
	ИначеЕсли ИмяРекв = "ЮрФизЛицо" Тогда
	    Возврат Контрагент.ЮрФизЛицо;
	ИначеЕсли ИмяРекв = "ИНН" Тогда
	    Возврат Контрагент.ИНН;
	ИначеЕсли ИмяРекв = "НомерСвидетельства" Тогда
	    Возврат Контрагент.НомерСвидетельства;
	ИначеЕсли ИмяРекв = "КодПоЕДРПОУ" Тогда
	    Возврат Контрагент.КодПоЕДРПОУ;
	ИначеЕсли ИмяРекв = "АдресЮридический" Тогда
		СтруктураОтбора = Новый Структура("Объект",Контрагент);
		СтруктураОтбора.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
		СтруктураОтбора.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		СтруктураЗаписи = РегистрыСведений.КонтактнаяИнформация.Получить(СтруктураОтбора);
	    Возврат УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(СтруктураЗаписи);
	ИначеЕсли ИмяРекв = "АдресФактический" Тогда
		СтруктураОтбора = Новый Структура("Объект",Контрагент);
		СтруктураОтбора.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
		СтруктураОтбора.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		СтруктураЗаписи = РегистрыСведений.КонтактнаяИнформация.Получить(СтруктураОтбора);
	    Возврат УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(СтруктураЗаписи);
	ИначеЕсли ИмяРекв = "Телефон" Тогда
		СтруктураОтбора = Новый Структура("Объект",Контрагент);
		СтруктураОтбора.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
		СтруктураОтбора.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		СтруктураЗаписи = РегистрыСведений.КонтактнаяИнформация.Получить(СтруктураОтбора);
		Возврат СтруктураЗаписи.Представление;		
	ИначеЕсли ИмяРекв = "Организация" Тогда
	    Возврат ДоговорКонтрагента.Организация;
	ИначеЕсли ИмяРекв = "НаименованиеДоговора" Тогда
	    Возврат ДоговорКонтрагента.Наименование;
	ИначеЕсли ИмяРекв = "ВидДоговора" Тогда
	    Возврат ДоговорКонтрагента.ВидДоговора;
	ИначеЕсли ИмяРекв = "ВедениеВзаиморасчетов" Тогда
	    Возврат ДоговорКонтрагента.ВедениеВзаиморасчетов;
	ИначеЕсли ИмяРекв = "ВидВзаиморасчетов" Тогда
	    Возврат ДоговорКонтрагента.ВидВзаиморасчетов;
	ИначеЕсли ИмяРекв = "ВалютаВзаиморасчетов" Тогда
	    Возврат ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ИначеЕсли ИмяРекв = "ТипЦен" Тогда
	    Возврат ДоговорКонтрагента.ТипЦен;
	ИначеЕсли ИмяРекв = "ОсновнаяСтатьяДвиженияДенежныхСредств" Тогда
	    Возврат ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
	ИначеЕсли ИмяРекв = "ВестиПоДокументамРасчетовСКонтрагентом" Тогда
	    Возврат ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	ИначеЕсли ИмяРекв = "КонтролироватьСуммуЗадолженности" Тогда
	    Возврат ДоговорКонтрагента.КонтролироватьСуммуЗадолженности;
	ИначеЕсли ИмяРекв = "ДопустимаяСуммаЗадолженности" Тогда
	    Возврат ДоговорКонтрагента.ДопустимаяСуммаЗадолженности;
	ИначеЕсли ИмяРекв = "КонтролироватьЧислоДнейЗадолженности" Тогда
	    Возврат ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности;
	ИначеЕсли ИмяРекв = "ДопустимоеЧислоДнейЗадолженности" Тогда
	    Возврат ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
	ИначеЕсли ИмяРекв = "НаименованиеТочки" Тогда
	    Возврат ТорговаяТочка.Наименование;
	ИначеЕсли ИмяРекв = "НаименованиеТочкиПолное" Тогда
	    Возврат ТорговаяТочка.НаименованиеПолное;
	ИначеЕсли ИмяРекв = "Категория" Тогда
	    Возврат ТорговаяТочка.Категория;
	ИначеЕсли ИмяРекв = "Агент" Тогда
	    Возврат ТорговаяТочка.Агент;
	ИначеЕсли ИмяРекв = "АдресДоставки" Тогда
		Возврат ТорговаяТочка.Адрес;
	ИначеЕсли ИмяРекв = "Телефоны" Тогда
		Возврат ТорговаяТочка.Телефоны;
	КонецЕсли;
	
КонецФункции 

Функция НайтиСинонимРеквизита(ИмяРекв="",ИмяТЧ="")

	Если ИмяТЧ = "" Тогда
		Возврат ЭтотОбъект.Метаданные().Реквизиты[ИмяРекв].Синоним;
	ИначеЕсли ИмяРекв = "" Тогда
		Возврат ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Синоним;
	Иначе
		Возврат ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРекв].Синоним;
	КонецЕсли;

КонецФункции 

Процедура ВыполнитьДвижениеПриНесовпаденииРеквизитов(ИмяРекв)

	Старое = СтароеЗначение(ИмяРекв);
	Если Старое = ЭтотОбъект[ИмяРекв] Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Движения.РегистрацияКонтрагентов.Добавить();
	Запись.Активность = Истина;
	Запись.Период = Дата;
	ЗаполнитьЗначенияСвойств(Запись,ЭтотОбъект);
	Запись.ИмяРеквизита = НайтиСинонимРеквизита(ИмяРекв);
	Запись.ЗначениеРеквизита = ЭтотОбъект[ИмяРекв];
	Запись.ЗначениеРеквизитаСтарое = Старое;

КонецПроцедуры

Процедура ПроверитьИзменениеТабличнойЧасти(ИмяТЧ)

	КвоСтрок = ЭтотОбъект[ИмяТЧ].Количество();
	
	Если ИмяТЧ = "МенеджерыПокупателя" Тогда
		спр = Контрагент;
	Иначе
		спр = ТорговаяТочка;
	КонецЕсли;
	
	Если спр.Пустая() Тогда
		КвоСтрокСпр = 0;
	Иначе
		КвоСтрокСпр = спр[ИмяТЧ].Количество();
	КонецЕсли;
	
	Для НомСтроки = 1 По Макс(КвоСтрок,КвоСтрокСпр) Цикл
		
		НоваяСтрока = Ложь;			
		УдаленнаяСтрока = Ложь;
		
		Если НомСтроки > КвоСтрокСпр Тогда //в справочнике этой строки нет
			НоваяСтрока = Истина;			
		ИначеЕсли НомСтроки > КвоСтрок Тогда //в документе этой строки нет
			УдаленнаяСтрока = Истина;
		КонецЕсли;
		
		Для каждого РеквТЧ Из ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
			
			Если ИмяТЧ = "КонтактныеЛица" И РеквТЧ.Имя = "Должность" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НоваяСтрока Тогда
				ЗначениеРеквизита = ЭтотОбъект[ИмяТЧ][НомСтроки-1][РеквТЧ.Имя];
				ЗначениеРеквизитаСтарое = Неопределено;
			ИначеЕсли УдаленнаяСтрока Тогда
				ЗначениеРеквизита = Неопределено;
				ЗначениеРеквизитаСтарое = Спр[ИмяТЧ][НомСтроки-1][РеквТЧ.Имя];
			ИначеЕсли ЭтотОбъект[ИмяТЧ][НомСтроки-1][РеквТЧ.Имя] <> Спр[ИмяТЧ][НомСтроки-1][РеквТЧ.Имя] Тогда
				ЗначениеРеквизита = ЭтотОбъект[ИмяТЧ][НомСтроки-1][РеквТЧ.Имя];
				ЗначениеРеквизитаСтарое = Спр[ИмяТЧ][НомСтроки-1][РеквТЧ.Имя];
			Иначе
				Продолжить;
			КонецЕсли;
			
			Запись = Движения.РегистрацияКонтрагентов.Добавить();
			Запись.Активность = Истина;
			Запись.Период = Дата;
			ЗаполнитьЗначенияСвойств(Запись,ЭтотОбъект);
			Запись.ИмяТЧ = НайтиСинонимРеквизита(,ИмяТЧ);
			Запись.НомерСтрокиТЧ = НомСтроки;
			Запись.ИмяРеквизита = НайтиСинонимРеквизита(РеквТЧ.Имя,ИмяТЧ);
			Запись.ЗначениеРеквизита = ЗначениеРеквизита;
			Запись.ЗначениеРеквизитаСтарое = ЗначениеРеквизитаСтарое;
			
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроверкаДокумента(Отказ);
	
	Если ОбработкаВыполнена Тогда
		
		Набор = Движения.РегистрацияКонтрагентов;
		Набор.Прочитать();
		Для каждого Стр Из Набор Цикл
		    Стр.Контрагент = Контрагент;
			Стр.ДоговорКонтрагента = ДоговорКонтрагента;
			Стр.ТорговаяТочка = ТорговаяТочка;
		КонецЦикла;
		Набор.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, РежимПроведения);
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеКонтрагента Тогда
		
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("Родитель");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("Наименование");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("НаименованиеПолное");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ЮрФизЛицо");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ИНН");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("НомерСвидетельства");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("КодПоЕДРПОУ");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("АдресЮридический");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("АдресФактический");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("Телефон");
		
		ПроверитьИзменениеТабличнойЧасти("МенеджерыПокупателя");
	
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеДоговора ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеДоговора Тогда
		
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("Организация");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("НаименованиеДоговора");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ВидДоговора");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ВедениеВзаиморасчетов");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ВидВзаиморасчетов");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ВалютаВзаиморасчетов");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ТипЦен");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ОсновнаяСтатьяДвиженияДенежныхСредств");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ВестиПоДокументамРасчетовСКонтрагентом");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("КонтролироватьСуммуЗадолженности");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ДопустимаяСуммаЗадолженности");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("КонтролироватьЧислоДнейЗадолженности");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ДопустимоеЧислоДнейЗадолженности");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("СхемаНалоговогоУчета");
	
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеТорговойТочки ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеТорговойТочки Тогда
		
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("НаименованиеТочки");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("НаименованиеТочкиПолное");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("Категория");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("Агент");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("АдресДоставки");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("Телефоны");
		ВыполнитьДвижениеПриНесовпаденииРеквизитов("ТипТочки");
		//ВыполнитьДвижениеПриНесовпаденииРеквизитов("Договор");
	
		ПроверитьИзменениеТабличнойЧасти("ТипыЦен");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента Тогда
		ПроверитьИзменениеТабличнойЧасти("КонтактныеЛицаБезКонтрагента");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеТорговойТочки ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеТорговойТочки Тогда
		
		ПроверитьИзменениеТабличнойЧасти("КонтактныеЛица");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьИзменения() Экспорт

	//контрагент
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеКонтрагента Тогда
	
		Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента Тогда
			к = Справочники.Контрагенты.СоздатьЭлемент();
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеКонтрагента Тогда
			к = Контрагент.ПолучитьОбъект();
		КонецЕсли;
		 
		к.Родитель = Родитель;
		к.Наименование = Наименование;
		к.НаименованиеПолное = НаименованиеПолное;
		к.ЮрФизЛицо = ЮрФизЛицо;
		к.ИНН = ИНН;
		к.НомерСвидетельства = НомерСвидетельства;
		к.КодПоЕДРПОУ = КодПоЕДРПОУ;
		
		Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента Тогда		
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				к.Покупатель = Истина;
			ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				к.Поставщик = Истина;
			ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
				к.Покупатель = Истина;
				к.Поставщик = Истина;
			КонецЕсли;
		КонецЕсли;
		
		к.МенеджерыПокупателя.Очистить();
		Для каждого стр Из МенеджерыПокупателя Цикл
			ЗаполнитьЗначенияСвойств(к.МенеджерыПокупателя.Добавить(),стр);
		КонецЦикла;
		
		к.Записать();
		Контрагент = к.Ссылка;
		
		Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Контрагент);
		Набор.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		Набор.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Набор.Прочитать();
		Если Набор.Количество() = 0 Тогда
			Стр = Набор.Добавить();
			Стр.Объект = Контрагент;
			Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			Стр.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		Иначе			
			Стр = Набор[0];
		КонецЕсли;
		СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(АдресЮридический);
		УправлениеКонтактнойИнформацией.ЗаполнитьОбъектРедактированияАдресаПоСтруктуре(Стр, СтруктураАдреса);
		Набор.Записать();
	
		Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Контрагент);
		Набор.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		Набор.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		Набор.Прочитать();
		Если Набор.Количество() = 0 Тогда
			Стр = Набор.Добавить();
			Стр.Объект = Контрагент;
			Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			Стр.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		Иначе			
			Стр = Набор[0];
		КонецЕсли;
		СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(АдресФактический);
		УправлениеКонтактнойИнформацией.ЗаполнитьОбъектРедактированияАдресаПоСтруктуре(Стр, СтруктураАдреса);
		Набор.Записать();
	
		Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Контрагент);
		Набор.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		Набор.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		Набор.Прочитать();
		Если Набор.Количество() = 0 Тогда
			Стр = Набор.Добавить();
			Стр.Объект = Контрагент;
			Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			Стр.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		Иначе			
			Стр = Набор[0];
		КонецЕсли;
		СтруктураАдреса = УправлениеКонтактнойИнформацией.РазложитьТелефонПоПолям(Телефон);
		Стр.Поле1 = СтруктураАдреса.КодСтраны;
		Стр.Поле2 = СтруктураАдреса.КодГорода;
		Стр.Поле3 = СтруктураАдреса.СамТелефон;
		Стр.Представление = Телефон;
		Набор.Записать();
		
	КонецЕсли;
	
	//договор
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеДоговора ИЛИ 
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеДоговора Тогда
	
		Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ
			 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеДоговора Тогда
			д = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеДоговора Тогда
			д = ДоговорКонтрагента.ПолучитьОбъект();
		КонецЕсли;
	
		д.Владелец = Контрагент;
		д.Наименование = НаименованиеДоговора;
		д.Организация = Организация;
		д.ВидДоговора = ВидДоговора;
		д.ВидВзаиморасчетов = ВидВзаиморасчетов;
		д.ВедениеВзаиморасчетов = ВедениеВзаиморасчетов;
		д.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		д.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		д.ТипЦен = ТипЦен;
		д.ОсновнаяСтатьяДвиженияДенежныхСредств = ОсновнаяСтатьяДвиженияДенежныхСредств;
		д.ВестиПоДокументамРасчетовСКонтрагентом = ВестиПоДокументамРасчетовСКонтрагентом;
		д.КонтролироватьСуммуЗадолженности = КонтролироватьСуммуЗадолженности;
		д.ДопустимаяСуммаЗадолженности = ДопустимаяСуммаЗадолженности;
		д.КонтролироватьЧислоДнейЗадолженности = КонтролироватьЧислоДнейЗадолженности;
		д.ДопустимоеЧислоДнейЗадолженности = ДопустимоеЧислоДнейЗадолженности;
		д.СхемаНалоговогоУчета = СхемаНалоговогоУчета;
	    //Верескул -- добавил запись реквизита основной проект
        д.ОсновнойПроект = ОсновнойПроект;
		д.Записать();
		ДоговорКонтрагента = д.Ссылка;
        //Верескул --  и свойство ассортимент
        ЗаписатьСвойствоАссортимент();
		
	КонецЕсли;
	
	//торговая точка
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеТорговойТочки ИЛИ 
		 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеТорговойТочки Тогда
		 
		//Если НЕ СокрЛП(НаименованиеТочки) = "" Тогда
			Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ
				 ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеТорговойТочки Тогда
				т = Справочники.кпкТорговыеТочки.СоздатьЭлемент();
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеТорговойТочки Тогда
				т = ТорговаяТочка.ПолучитьОбъект();
			КонецЕсли;
		
			т.Владелец = Контрагент;
			т.Наименование = НаименованиеТочки;
			т.НаименованиеПолное = НаименованиеТочкиПолное;
			т.Категория = Категория;
			т.Агент = Агент;
			т.Телефоны = Телефоны;
			т.Адрес = АдресДоставки;
			т.ОсновнойТипЦены = ТипЦен;
			т.Договор = ДоговорКонтрагента;
			т.ТипТочки = ТипТочки;
			
			т.КонтактныеЛица.Очистить();
			Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента Тогда
				Для каждого стр Из КонтактныеЛицаБезКонтрагента Цикл
					//нахождение/создание контактного лица
					кл = Справочники.КонтактныеЛицаКонтрагентов.НайтиПоРеквизиту("КонтактноеЛицо",стр.КонтактноеЛицо,,Контрагент);
					
					Если кл.Пустая() Тогда
						спр = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
						спр.Владелец = Контрагент;
						спр.Наименование = стр.КонтактноеЛицо;
						спр.КонтактноеЛицо = стр.КонтактноеЛицо;
						спр.Должность = стр.Должность;
						спр.Записать();
						кл = спр.Ссылка;
					КонецЕсли;
					нов = т.КонтактныеЛица.Добавить();
					нов.КонтактноеЛицо = кл;
					
					НовСтрКЛ = КонтактныеЛица.Добавить();
					НовСтрКЛ.КонтактноеЛицо = кл;
					НовСтрКЛ.Должность = кл.Должность;
				КонецЦикла;
			Иначе
				Для каждого стр Из КонтактныеЛица Цикл
					//нахождение/создание контактного лица
					кл = Справочники.КонтактныеЛицаКонтрагентов.НайтиПоРеквизиту("КонтактноеЛицо",стр.КонтактноеЛицо,,Контрагент);
					
					Если кл.Пустая() Тогда
						спр = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
						спр.Владелец = Контрагент;
						спр.Наименование = стр.КонтактноеЛицо;
						спр.КонтактноеЛицо = стр.КонтактноеЛицо;
						спр.Должность = стр.Должность;
						спр.Записать();
						кл = спр.Ссылка;
					КонецЕсли;
					нов = т.КонтактныеЛица.Добавить();
					нов.КонтактноеЛицо = кл;
				КонецЦикла;
			КонецЕсли;
			
			т.ТипыЦен.Очистить();
			Для каждого стр Из ТипыЦен Цикл
				ЗаполнитьЗначенияСвойств(т.ТипыЦен.Добавить(),стр);
			КонецЦикла;
			
			т.Записать();
			ТорговаяТочка = т.Ссылка;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если (ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеДоговора ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеДоговора)
		И НЕ БезЗаключенияДоговора Тогда
		
		СканДоговораПоДокументу = ПолучитьСканДоговораПоДокументу();
		СканДоговора = ПолучитьСканДоговора();
		
		Если ЗначениеЗаполнено(СканДоговора) Тогда
			СканДоговораОбъект = СканДоговора.ПолучитьОбъект();
		Иначе
			СканДоговораОбъект = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			СканДоговораОбъект.Наименование = "Скан договора";
			СканДоговораОбъект.Объект = ДоговорКонтрагента;
		КонецЕсли;
		
		СканДоговораОбъект.ИмяФайла = СканДоговораПоДокументу.ИмяФайла;
		СканДоговораОбъект.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
		СканДоговораОбъект.Хранилище = СканДоговораПоДокументу.Хранилище;
		
		//ВнешнийФайл = Новый ДвоичныеДанные(СканДоговораПолноеИмяФайла);
		//СканДоговораОбъект.Хранилище   = Новый ХранилищеЗначения(ВнешнийФайл);
		СканДоговораОбъект.Записать();
		
		//СканДоговораОбъект = СканДоговора.ПолучитьОбъект();
		//СканДоговораОбъект.Объект = ДоговорКонтрагента;
		//СканДоговораОбъект.Записать();
	КонецЕсли;
	
	Если (ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеДоговора
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеДоговора) 
		И НЕ БезЗаключенияДоговора Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.ВидДокумента КАК ВидДокумента,
		|	ХранилищеДополнительнойИнформации.Ссылка КАК ЭлХранилищеДополнительнойИнформации
		|ПОМЕСТИТЬ ХранилищеДополнительнойИнформацииДокумента
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект = &ЭтотДокумент
		|	И ХранилищеДополнительнойИнформации.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.ВидыДокументов.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.ВидДокумента КАК ВидДокумента,
		|	ХранилищеДополнительнойИнформации.Ссылка КАК ЭлХранилищеДополнительнойИнформации
		|ПОМЕСТИТЬ ХранилищеДополнительнойИнформацииДогКонтрагента
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект = &Договор
		|	И ХранилищеДополнительнойИнформации.ВидДокумента <> ЗНАЧЕНИЕ(Справочник.ВидыДокументов.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ХранилищеДополнительнойИнформацииДокумента.ВидДокумента, ХранилищеДополнительнойИнформацииДогКонтрагента.ВидДокумента) КАК ВидДокумента,
		|	ХранилищеДополнительнойИнформацииДокумента.ЭлХранилищеДополнительнойИнформации КАК ЭлХранилищеДопИнфДокумента,
		|	ХранилищеДополнительнойИнформацииДогКонтрагента.ЭлХранилищеДополнительнойИнформации КАК ЭлХранилищеДопИнфДоговораКонтрагента
		|ИЗ
		|	ХранилищеДополнительнойИнформацииДокумента КАК ХранилищеДополнительнойИнформацииДокумента
		|		ПОЛНОЕ СОЕДИНЕНИЕ ХранилищеДополнительнойИнформацииДогКонтрагента КАК ХранилищеДополнительнойИнформацииДогКонтрагента
		|		ПО ХранилищеДополнительнойИнформацииДокумента.ВидДокумента = ХранилищеДополнительнойИнформацииДогКонтрагента.ВидДокумента";
		
		Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		
		тзРезультат = Запрос.Выполнить().Выгрузить();
		
		Для каждого стрРезультат Из тзРезультат Цикл
			Если ЗначениеЗаполнено(стрРезультат.ЭлХранилищеДопИнфДокумента) Тогда
				Если ЗначениеЗаполнено(стрРезультат.ЭлХранилищеДопИнфДоговораКонтрагента) Тогда
					ОбъектХранилищеДопИнфКонтрагента = стрРезультат.ЭлХранилищеДопИнфДоговораКонтрагента.ПолучитьОбъект();
				Иначе
					ОбъектХранилищеДопИнфКонтрагента = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
					ОбъектХранилищеДопИнфКонтрагента.Объект = ДоговорКонтрагента;
					ОбъектХранилищеДопИнфКонтрагента.ВидДокумента = стрРезультат.ЭлХранилищеДопИнфДокумента.ВидДокумента;
				КонецЕсли;
				
				ОбъектХранилищеДопИнфКонтрагента.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл; 
				ОбъектХранилищеДопИнфКонтрагента.Хранилище = стрРезультат.ЭлХранилищеДопИнфДокумента.Хранилище;
				ОбъектХранилищеДопИнфКонтрагента.ИмяФайла = стрРезультат.ЭлХранилищеДопИнфДокумента.ИмяФайла;
				ОбъектХранилищеДопИнфКонтрагента.Наименование = стрРезультат.ЭлХранилищеДопИнфДокумента.ИмяФайла;
				ОбъектХранилищеДопИнфКонтрагента.Записать();
			ИначеЕсли ЗначениеЗаполнено(стрРезультат.ЭлХранилищеДопИнфДоговораКонтрагента) Тогда
				Если ЗначениеЗаполнено(Контрагент) Тогда
					ОбъектХранилищеДопИнфКонтрагента = стрРезультат.ЭлХранилищеДопИнфДоговораКонтрагента.ПолучитьОбъект();
					ОбъектХранилищеДопИнфКонтрагента.Удалить();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

Функция РазрешитьОднуПодпись() Экспорт
	Если БезЗаключенияДоговора Тогда
		Возврат Истина;
	КонецЕсли; 
	ГрДопустимоеЧислоДнейЗадолженности = Константы.ДопустимоеЧислоДнейЗадолженности.Получить();
	ГрДопустимаяСуммаЗадолженности = Константы.ДопустимаяСуммаЗадолженности.Получить();
	РазрешитьОднуПодпись = (ВидОперации <> Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента И ВидОперации <> Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеДоговора И ВидОперации <> Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеДоговора)
			ИЛИ (ДопустимоеЧислоДнейЗадолженности <= ГрДопустимоеЧислоДнейЗадолженности) И (ДопустимаяСуммаЗадолженности <= ГрДопустимаяСуммаЗадолженности);
			
	Возврат РазрешитьОднуПодпись;
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ПроверкаДокумента(Отказ);
	
	Если ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеКонтрагента ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.СозданиеДоговора ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийРегистрацияКонтрагентов.ИзменениеДоговора Тогда
		
		Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Если НЕ БезЗаключенияДоговора Тогда
				Если ЭтоНовый() И НЕ СканДоговораВыбран Тогда
					Отказ = Истина;
				Иначе
					СканДоговора = ПолучитьСканДоговораПоДокументу();
					Если НЕ ЗначениеЗаполнено(СканДоговора) И СканДоговораВыбран = Неопределено ИЛИ СканДоговораВыбран = Ложь Тогда
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Отказ Тогда
					Сообщить("Не выбран скан договора!");
				КонецЕсли;				
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ И НЕ ОбработкаВыполнена Тогда
		РазрешитьОднуПодпись = РазрешитьОднуПодпись();
		
	    ТребуетсяПодписьФинансовогоОтдела = НЕ РазрешитьОднуПодпись И НЕ ЗначениеЗаполнено(ПодписьФинансовогоОтдела);
	    ТребуетсяПодписьГенеральногоДиректора = НЕ РазрешитьОднуПодпись И НЕ ЗначениеЗаполнено(ПодписьГенеральногоДиректора);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСканДоговораПоДокументу() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.Наименование = &Наименование
	|	И ХранилищеДополнительнойИнформации.ВидДокумента = &ПустойВидДокумента";
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Запрос.УстановитьПараметр("ПустойВидДокумента", Справочники.ВидыДокументов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Наименование", "Скан договора");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьСканДоговора() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.Наименование = &Наименование
	|	И ХранилищеДополнительнойИнформации.ВидДокумента = &ПустойВидДокумента";
	
	Запрос.УстановитьПараметр("Объект", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойВидДокумента", Справочники.ВидыДокументов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Наименование", "Скан договора");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

//Верескул Записіваем в регистр сведений выбранное в форме свойство 
Функция ЗаписатьСвойствоАссортимент()
	МЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
    МЗ.Объект = ДоговорКонтрагента;
    МЗ.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00000000056"); // Это код свойства Ассортимент Номенклатуры
    МЗ.Значение = СвойствоАссортимент;
    МЗ.Записать(Истина);
КонецФункции
 

Процедура ПроверкаСуществованияКонтрагентаПоЕдрпоу(Отказ) Экспорт
	Перем Результат;
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Результат = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ИНН);
	Иначе
		Результат = Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ", КодПоЕДРПОУ);	
	КонецЕсли; 
	Если ЗначениеЗаполнено(Результат) Тогда
		Отказ = Истина;
		Сообщить("Контрагент с таким кодом по ЕДРПОУ/ИНН уже есть " + Результат);
	КонецЕсли; 	
КонецПроцедуры