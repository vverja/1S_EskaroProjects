////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для УдержанияРаботниковОрганизации 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуУдержаний(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента);   // ПериодРегистрации, ОбособленноеПодразделение
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента); // БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
	                                                              // ФизЛицо, Организация, 
	                                                              // Результат, Размер, ДокументОснование, Авторасчет, ПорядокРасчетаБазы
КонецПроцедуры // ДобавитьСтрокуУдержаний

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Выполняет расчет удержаний
Процедура РассчитатьУдержания() Экспорт
	
	Отказ = Ложь;
	МассивИндексыСтрокНачисления = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента).Выбрать();
	ЗафиксироватьТранзакцию();	

	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	// создадим наборы записей для выполнения движений
	НаборУдержания = РегистрыРасчета.УдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	
	// сформируем движения удержаний по данным табличной части без записи (запись делается процедурой РассчитатьЗаписиРегистраРасчета)
	Пока ВыборкаПоУдержаниям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, НаборУдержания);
			МассивИндексыСтрокНачисления.Добавить(ВыборкаПоУдержаниям.НомерСтроки-1);
		КонецЕсли;	
	КонецЦикла;
	
	НаборУдержания.Записать();
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	мСотрудники = Новый СписокЗначений;
	мСотрудники.ЗагрузитьЗначения(Удержания.ВыгрузитьКолонку("Сотрудник"));

	// рассчитываем записи
	//ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Удержания);
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания,Удержания,МассивИндексыСтрокНачисления,мСотрудники);
	// Удаляем движения
	НаборУдержания.Очистить();
	НаборУдержания.Записать();
	
КонецПроцедуры

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.НачислениеОтпускаРаботникамОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазовыеУдержания.Сотрудник,
	|	РазовыеУдержания.Физлицо,
	|	-РазовыеУдержания.Результат КАК Результат,
	|	ИСТИНА КАК Сторно,
	|	ЛОЖЬ КАК Авторасчет,
	|	РазовыеУдержания.НомерСтроки КАК НомерСтроки,
	|	РазовыеУдержания.ВидРасчета,
	|	РазовыеУдержания.ДатаНачала,
	|	РазовыеУдержания.ДатаОкончания,
	|	РазовыеУдержания.Показатель1,
	|	РазовыеУдержания.Показатель2,
	|	РазовыеУдержания.Показатель3,
	|	РазовыеУдержания.Показатель4,
	|	РазовыеУдержания.Показатель5,
	|	РазовыеУдержания.Показатель6
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РазовыеУдержания
	|ГДЕ
	|	РазовыеУдержания.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ РазовыеУдержания.Сторно)
	|	И РазовыеУдержания.Ссылка.Проведен
	|	И (&ПоВсемСотрудникам
	|			ИЛИ РазовыеУдержания.Сотрудник В (&Сотрудники))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РазовыеУдержания.Сотрудник,
	|	РазовыеУдержания.Физлицо,
	|	0,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	РазовыеУдержания.НомерСтроки,
	|	РазовыеУдержания.ВидРасчета,
	|	РазовыеУдержания.ДатаНачала,
	|	РазовыеУдержания.ДатаОкончания,
	|	РазовыеУдержания.Показатель1,
	|	РазовыеУдержания.Показатель2,
	|	РазовыеУдержания.Показатель3,
	|	РазовыеУдержания.Показатель4,
	|	РазовыеУдержания.Показатель5,
	|	РазовыеУдержания.Показатель6
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РазовыеУдержания
	|ГДЕ
	|	РазовыеУдержания.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ РазовыеУдержания.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ РазовыеУдержания.Сотрудник В (&Сотрудники))
	|	И РазовыеУдержания.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сторно УБЫВ,
	|	НомерСтроки";
	
	Удержания.Загрузить(Запрос.Выполнить().Выгрузить());

	Записать();
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.Дата,
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.ПериодРегистрации,
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация,
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация КАК ГоловнаяОрганизация,
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация КАК ОбособленноеПодразделение,
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.Ссылка
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций КАК РегистрацияРазовыхУдержанийРаботниковОрганизации
	|ГДЕ
	|	РегистрацияРазовыхУдержанийРаботниковОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Удержания" документа
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПриемНаРаботу",				Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	//Запрос.УстановитьПараметр("ЗаВесьПериод",				Перечисления.ПорядокРасчетаБазы.ЗаВесьПериод);
	//Запрос.УстановитьПараметр("ПриПриемеНаРаботу",			Перечисления.ПорядокРасчетаБазы.ПриПриемеНаРаботу);
	//Запрос.УстановитьПараметр("ПриУвольнении",				Перечисления.ПорядокРасчетаБазы.ПриУвольнении);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ГоловнаяОрганизация КАК Организация,
	|	СтрокиУдержания.Сотрудник,
	|	СтрокиУдержания.Физлицо,
	|	СтрокиУдержания.ВидРасчета,
	|	СтрокиУдержания.ДатаНачала,
	|	СтрокиУдержания.ДатаОкончания,
	|	СтрокиУдержания.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиУдержания.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СтрокиУдержания.ДатаОкончания
	|		ИНАЧЕ КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|	СтрокиУдержания.Показатель1,
	|	СтрокиУдержания.Показатель2,
	|	СтрокиУдержания.Показатель3,
	|	СтрокиУдержания.Показатель4,
	|	СтрокиУдержания.Показатель5,
	|	СтрокиУдержания.Показатель6,
	|	СтрокиУдержания.Результат,
	|	СтрокиУдержания.Сторно,
	|	СтрокиУдержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиУдержания.Авторасчет КАК Авторасчет
	//|	,ВЫБОР
	//|		КОГДА СтрокиУдержания.ДатаНачала > &ПериодРегистрации
	//|				И ПринятыеВТекущемМесяце.Период ЕСТЬ НЕ NULL 
	//|			ТОГДА &ПриПриемеНаРаботу
	//|		КОГДА СтрокиУдержания.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			ТОГДА &ЗаВесьПериод
	//|		КОГДА КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) < &КонецПериодаРегистрации
	//|				И УволенныеВТекущемМесяце.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	//|               И УволенныеВТекущемМесяце.ПериодЗавершения <= &КонецПериодаРегистрации
	//|				И УволенныеВТекущемМесяце.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			ТОГДА &ПриУвольнении
	//|		КОГДА КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) < &КонецПериодаРегистрации
	//|				И УволенныеВТекущемМесяце.Период ЕСТЬ НЕ NULL 
	//|			ТОГДА &ПриУвольнении
	//|		ИНАЧЕ &ЗаВесьПериод
	//|	КОНЕЦ КАК ПорядокРасчетаБазы
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК СтрокиУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|		ИЗ
	|			Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ПО РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|		ГДЕ
	|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.Ссылка = &ДокументСсылка
	|			И РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.ДатаНачала > &ПериодРегистрации
	|			И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|			И РаботникиОрганизаций.Период > &ПериодРегистрации
	|			И РаботникиОрганизаций.Период <= &КонецПериодаРегистрации
	|			И РаботникиОрганизаций.ПричинаИзмененияСостояния = &ПриемНаРаботу
	|			И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.НомерСтроки) КАК ПринятыеВТекущемМесяце
	|		ПО СтрокиУдержания.НомерСтроки = ПринятыеВТекущемМесяце.НомерСтроки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.НомерСтроки КАК НомерСтроки,
	//|			РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения,
	//|			РаботникиОрганизаций.ПериодЗавершения,
	//|			МИНИМУМ(РаботникиОрганизаций.Период) КАК Период
	//|		ИЗ
	//|			Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания
	//|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	//|				ПО РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
	//|		ГДЕ
	//|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.Ссылка = &ДокументСсылка
	//|			И РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			И РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.ДатаОкончания < &КонецПериодаРегистрации
	//|			И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	//|			И РаботникиОрганизаций.Период >= &ПериодРегистрации
	//|			И РаботникиОрганизаций.Период < &КонецПериодаРегистрации
	//|			И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	//|			И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			РегистрацияРазовыхУдержанийРаботниковОрганизацийУдержания.НомерСтроки,
	//|            РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения,
	//|			РаботникиОрганизаций.ПериодЗавершения) КАК УволенныеВТекущемМесяце
	//|		ПО СтрокиУдержания.НомерСтроки = УволенныеВТекущемМесяце.НомерСтроки
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, в которой выполняются удержания!", Отказ, Заголовок);
	КонецЕсли;
	
	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан месяц, в котором выполняются удержания!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Удержания" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Удержания"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой и 
		ВыборкаПоСтрокамДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
		// Дата начала
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала удержания!", Отказ, Заголовок);
		КонецЕсли;

		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания удержания!", Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиУдержания()

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - набор записей 
//      Перерасчет - признак проведения перерасчетов, по умолчанию - Ложь
//      Физлица - список физлиц, по которым производится расчет, по умолчанию - отсутствует
//
// Возвращаемое значение:
//  Нет.
//		
Процедура СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, НаборЗаписей, Перерасчет = Ложь, Физлица = НеОпределено)
	
	УдержанияРаботниковТекст = 
	"ВЫБРАТЬ
	|	ТЧУдержания.Сотрудник КАК Сотрудник,
	|	СУММА(ТЧУдержания.Результат) КАК СуммаУдержания
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК ТЧУдержания
	|
	|ГДЕ
	|	ТЧУдержания.Ссылка = &парамСсылка И
	|	(ТЧУдержания.Результат <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧУдержания.Сотрудник";
	
	Запрос = Новый Запрос(УдержанияРаботниковТекст);
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	// сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период 				= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;  
		
		// измерения 
		Движение.Сотрудник 				= Выборка.Сотрудник;
		Движение.Организация 			= Организация;
		Движение.ПериодВзаиморасчетов 	= ПериодРегистрации;
		Движение.СчетУчета			 	= ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате; 
		
		
		Движение.КодОперации 			= Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Удержания;
		
		// ресурсы
		Движение.СуммаВзаиморасчетов 	= Выборка.СуммаУдержания;  

		
	КонецЦикла;
	
КонецПроцедуры   // СформироватьВзаиморасчетыСРаботниками

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			////////////////////////////////////////////////////////////////////////
			// Удержания

			// получим реквизиты табличной части
			ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоУдержаниям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, Движения.УдержанияРаботниковОрганизаций);
				КонецЕсли;
			КонецЦикла;

			////////////////////////////////////////////////////////////////////////
			// взаиморасчеты с работниками
			
			// сформируем начисления к выплате по начислениям документа
			СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций);
			
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Удержания,, "Физлицо");
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(Удержания);
	
	Если ПерерассчитываемыйДокумент = Ссылка И НЕ Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть исправлением самого себя!",Отказ);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("ДокументСсылка.ПоощрениеВзысканиеОрганизаций") Тогда
		ЗаполнитьДокументНаОснованииПоощренияВзыскания(Основание);		
	КонецЕсли

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

Процедура ЗаполнитьДокументНаОснованииПоощренияВзыскания(Основание)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник						КАК Сотрудник,
	|	РаботникиОрганизации.Размер							КАК Размер
	|ИЗ
	|	Документ.ПоощрениеВзысканиеОрганизаций.РаботникиОрганизации 	КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Ссылка = &Ссылка               
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ЗначениеЗаполнено(Основание.Организация) Тогда
		Организация = Основание.Организация;
	КонецЕсли;
	
	ПериодРегистрации = НачалоМесяца(Основание.Дата);
	
	Если ЗначениеЗаполнено(Основание.ВидПоощренияВзыскания.ВидРасчета) Тогда
		ВидРасчета = Основание.ВидПоощренияВзыскания.ВидРасчета; 
	Иначе
		ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Удержания.Добавить();
		
		НоваяСтрока.Авторасчет = Истина;
		НоваяСтрока.ВидРасчета = ВидРасчета;
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.Показатель1 = Выборка.Размер;
		НоваяСтрока.ДатаНачала = НачалоМесяца(Основание.Дата);
		НоваяСтрока.ДатаОкончания = КонецМесяца(Основание.Дата);
	КонецЦикла;
	
КонецПроцедуры
