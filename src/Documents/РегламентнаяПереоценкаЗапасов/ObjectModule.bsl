Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитикаБУ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПереоценки()

	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	ЗапросПоЗапасам = Новый Запрос;
	ЗапросПоЗапасам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоЗапасам.УстановитьПараметр("ДатаРегистратора", КонецМесяца(ЭтотОбъект.ПериодРегистрации));
	ЗапросПоЗапасам.УстановитьПараметр("Склад", ЭтотОбъект.Склад);

	ЗапросПоЗапасам.Текст =
	"ВЫБРАТЬ
	|	ПартииТовароБухОстаткиИОбороты.Номенклатура							КАК Номенклатура,
	|	ПартииТовароБухОстаткиИОбороты.Номенклатура.Код						КАК Код,
	|	ПартииТовароБухОстаткиИОбороты.Номенклатура.Артикул					КАК Артикул,
	|	ПартииТовароБухОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ПартииТовароБухОстаткиИОбороты.ХарактеристикаНоменклатуры			КАК Характеристика,
	|	ПартииТовароБухОстаткиИОбороты.СерияНоменклатуры					КАК Серия,
	|	ПартииТовароБухОстаткиИОбороты.ДокументОприходования				КАК ДокументОприходования,
	|	ПартииТовароБухОстаткиИОбороты.КоличествоПриход 					КАК Количество,
	|	ПартииТовароБухОстаткиИОбороты.СтоимостьРасход 						КАК СтараяСтоимость,
	|	ПартииТовароБухОстаткиИОбороты.СтоимостьРасход 
	|		/ ПартииТовароБухОстаткиИОбороты.КоличествоПриход 				КАК СтараяЦена,
	|	ПартииТовароБухОстаткиИОбороты.СтоимостьРасход 
	|		+ ПартииТовароБухОстаткиИОбороты.СуммаУценкиНачальныйОстаток 	КАК ПервоначальнаяСтоимость,
	|	(ПартииТовароБухОстаткиИОбороты.СтоимостьРасход 
	|		+ ПартииТовароБухОстаткиИОбороты.СуммаУценкиНачальныйОстаток) 
	|	/ ПартииТовароБухОстаткиИОбороты.КоличествоПриход 					КАК ПервоначальнаяЦена,
	|	ПартииТовароБухОстаткиИОбороты.СтоимостьПриход 						КАК НоваяСтоимость,
	|	ПартииТовароБухОстаткиИОбороты.СтоимостьПриход 
	|		/ ПартииТовароБухОстаткиИОбороты.КоличествоПриход 				КАК НоваяЦена
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.ОстаткиИОбороты(, &ДатаРегистратора, Регистратор, , "+?(ВестиПартионныйУчетПоСкладамРегл, "Склад = &Склад","")+") КАК ПартииТовароБухОстаткиИОбороты
    |
	|ГДЕ
	|	ПартииТовароБухОстаткиИОбороты.Регистратор = &ТекущийДокумент";
	

	ЗапросЗапасы = ЗапросПоЗапасам.Выполнить().Выгрузить();
	
	ЗапросПоШапке = Новый Запрос;
	ЗапросПоШапке.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	ЗапросПоШапке.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	КонецПериода(ПериодРегистрации, Месяц) КАК Дата,
	|	Организация"+?(ВестиПартионныйУчетПоСкладамРегл,
	",
	|	Склад	                     КАК Получатель ,
	|	Склад.Представление          КАК ПредставлениеСклада","")
	+"
	|ИЗ
	|	Документ.РегламентнаяПереоценкаЗапасов КАК РегламентнаяПереоценкаЗапасов
	|
	|ГДЕ
	|	РегламентнаяПереоценкаЗапасов.Ссылка = &ТекущийДокумент";
	
	Шапка = ЗапросПоШапке.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РегламентнаяПереоценкаЗапасов_РегламентнаяПереоценкаЗапасов";
	Макет = ПолучитьМакет("РегламентнаяПереоценкаЗапасов");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Переоценка запасов';uk='Переоцінка запасів'",КодЯзыкаПечать),КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Организация");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,КодЯзыкаПечать), "ПолноеНаименование,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	Если ВестиПартионныйУчетПоСкладамРегл Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Склад");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммыСтарая  		= Макет.ПолучитьОбласть("ШапкаТаблицы|Старая");
	ОбластьСуммыПервоначальная	= Макет.ПолучитьОбласть("ШапкаТаблицы|Первоначальная");
	ОбластьСуммыНовая		  	= Макет.ПолучитьОбласть("ШапкаТаблицы|Новая");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммыСтарая);       	
	ТабДокумент.Присоединить(ОбластьСуммыПервоначальная);       	
	ТабДокумент.Присоединить(ОбластьСуммыНовая);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммыСтарая  		= Макет.ПолучитьОбласть("Строка|Старая");
	ОбластьСуммыПервоначальная	= Макет.ПолучитьОбласть("Строка|Первоначальная");
	ОбластьСуммыНовая		  	= Макет.ПолучитьОбласть("Строка|Новая");

	Для каждого ВыборкаСтрокЗапасов из ЗапросЗапасы Цикл 
	
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокЗапасов.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросЗапасы.Индекс(ВыборкаСтрокЗапасов) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокЗапасов.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокЗапасов.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокЗапасов);
		ОбластьДанных.Параметры.Номенклатура = СокрП(ВыборкаСтрокЗапасов.Номенклатура) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокЗапасов);
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммыСтарая.Параметры.Заполнить(ВыборкаСтрокЗапасов);
		ТабДокумент.Присоединить(ОбластьСуммыСтарая);
		ОбластьСуммыПервоначальная.Параметры.Заполнить(ВыборкаСтрокЗапасов);
		ТабДокумент.Присоединить(ОбластьСуммыПервоначальная);
		ОбластьСуммыНовая.Параметры.Заполнить(ВыборкаСтрокЗапасов);
		ТабДокумент.Присоединить(ОбластьСуммыНовая);
		
	КонецЦикла;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + 	ЗапросЗапасы.Количество() + ".";
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПереоценкиТоваровВРознице()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Последовательности.ПартионныйУчетБУ.ПолучитьГраницу().Дата<КонецМесяца(ПериодРегистрации) Тогда
		Предупреждение("Документ находится за пределами последовательности ""Партионный учет (бухгалтерский)"".
		   |Печать может быть выполнена по неактуальным данным. 
		   |Рекомендуется восстановить последовательность документов ""Партионный учет (бухгалтерский)"".");
	КонецЕсли; 
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "РегламентнаяПереоценкаЗапасов" тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьПереоценки();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
			
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктПечатныхФорм = Новый Структура;
	
	СтруктПечатныхФорм.Вставить("РегламентнаяПереоценкаЗапасов", "Переоценка запасов");

	Возврат СтруктПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части. Если передан документ основание то
//  заполнение производится по документу основанию, иначе по всем.
//
Процедура ЗаполнитьТовары() Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("Организация", Организация);
	Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.ХарактеристикаНоменклатуры,
	|	ПартииТоваров.СерияНоменклатуры,
	|	ПартииТоваров.СчетУчета,
	|	СУММА(ПартииТоваров.СтоимостьОстаток) КАК СтоимостьОстаток,
	|	СУММА(ПартииТоваров.СуммаУценкиОстаток) КАК СуммаУценкиОстаток
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(, Организация = &Организация ";
	
	Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл Тогда
		ТекстЗапроса = ТекстЗапроса + "И Склад = &Склад"
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса + ") КАК ПартииТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.ХарактеристикаНоменклатуры,
	|	ПартииТоваров.СерияНоменклатуры,
	|	ПартииТоваров.СчетУчета";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры 			= Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.СчетУчетаБУ				= Выборка.СчетУчета;
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТовары()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ПериодРегистрации, СчетУчетаЗатрат");
	
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладамБух Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	СписокДопустимыхЗатрат = Новый Соответствие;
	
	СписокДопустимыхЗатрат.Вставить(Перечисления.ХарактерЗатрат.Прочие,Перечисления.ХарактерЗатрат.Прочие);
	СписокДопустимыхЗатрат.Вставить(Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы,Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы);
	
	Если СписокДопустимыхЗатрат[СтруктураШапкиДокумента.СтатьяЗатрат.ХарактерЗатрат] = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В качестве затрат могут выступать только статьи затрат, имеющие характер 
		|""Прочие"" или ""Прочие операционные затраты"" (закладка ""Учет затрат"")!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Качество, Цена, СчетУчетаБУ");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("СписыватьПартииПриПроведенииДокументов", глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументов);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Прежде всего, проверим заполнение реквизита Организация в шапке документа
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	// Теперь позовем общую процедуру проверки
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	// Организация не заполнена, получать учетную политику нет смысла
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Бухгалтерский учет
	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(ПериодРегистрации), Организация, , Заголовок);
	Если НЕ Отказ Тогда
		СтруктураШапкиДокумента.Вставить("ВестиПартионныйУчетПоСкладамБух", глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл);
	КонецЕсли;
	
	// Налоговый учет
	мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(ПериодРегистрации), Организация, , Заголовок);
	Если НЕ Отказ Тогда
		СтруктураШапкиДокумента.Вставить("ВестиПартионныйУчетПоСкладамНал", глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл);
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , мУчетнаяПолитикаНУ.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , мУчетнаяПолитикаНУ.ЕстьНДС);
	КонецЕсли;
		
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Поступление с новой стоимостью (колонка "СтоимостьПоступление")
	ТаблицаПоТоварам.Колонки.Цена.Имя = "СтоимостьПоступлениеБУ"; // сюда будем записыввать новую цену 

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");

	ТаблицаДвижений.ЗаполнитьЗначения(КонецМесяца(ПериодРегистрации),"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПереоценкаКупленных,"КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,    "Организация");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете	, "ОтражатьВБухгалтерскомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаЗатрат,"КорСчетБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто1,"КорСубконтоБУ1");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто2,"КорСубконтоБУ2");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Субконто3,"КорСубконтоБУ3");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.НоменклатурнаяГруппа,"НоменклатурнаяГруппа");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,"ПодразделениеОрганизации");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяЗатрат,"СтатьяЗатрат");
	
	НаборДвижений.мПериод            = КонецМесяца(ПериодРегистрации);
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	Движения.СписанныеТовары.Записать(Истина);
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.СписыватьПартииПриПроведенииДокументов Тогда
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		
		
	Иначе
		
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// всегда отражаем в бухучете
	ОтражатьВБухгалтерскомУчете = Истина;
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам",   "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Качество"         			, "Качество");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Цена"         				, "Цена");
	СтруктураПолей.Вставить("СчетУчетаБУ"         		, "СчетУчетаБУ");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаКачестваТоваров") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Запрос = Новый Запрос;
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КорКачества.Номенклатура,
		               |	КорКачества.СерияНоменклатуры,
		               |	КорКачества.СчетУчетаБУ,
		               |	КорКачества.ХарактеристикаНоменклатуры,
		               |	КорКачества.КачествоНовое
		               |ИЗ
		               |	Документ.КорректировкаКачестваТоваров.Товары КАК КорКачества
		               |
		               |ГДЕ
		               |	КорКачества.КачествоНовое = &Качество И
		               |	КорКачества.Ссылка = &Основание";
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("Качество",Справочники.Качество.Новый);
		Запрос.УстановитьПараметр("Основание",Основание);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура 				= Выборка.Номенклатура;
			НоваяСтрока.СерияНоменклатуры 			= Выборка.СерияНоменклатуры;
			НоваяСтрока.СчетУчетаБУ 				= Выборка.СчетУчетаБУ;
			НоваяСтрока.Качество 					= Выборка.КачествоНовое;
			НоваяСтрока.ХарактеристикаНоменклатуры 	= Выборка.ХарактеристикаНоменклатуры;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");