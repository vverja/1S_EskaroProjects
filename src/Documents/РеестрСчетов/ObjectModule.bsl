Перем мВалютаРегламентированногоУчета Экспорт;

// Функция формирует наименование корреспондента для печати
Функция СформироватьНаименованиеКорреспондентов(Корресп)
	Если ТипЗнч(Корресп) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если ПустаяСтрока(Корресп.Фамилия) и ПустаяСтрока(Корресп.Имя) и ПустаяСтрока(Корресп.Отчество) Тогда
			Результат = СокрЛП(Корресп.Наименование);
		Иначе	
			Результат = СокрЛП(Корресп.Фамилия) + " " + СокрЛП(Корресп.Имя) + " " + СокрЛП(Корресп.Отчество);
		КонецЕсли;	
	Иначе	
		Результат = ?(НЕ ПустаяСтрока(Корресп.НаименованиеПолное),СокрЛП(Корресп.НаименованиеПолное),СокрЛП(Корресп.Наименование));
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции //	СформироватьНаименованиеКорреспондентов()

// Формирует строку корреспондента
//
// Параметры: 
//  БанкСчет - Банковский счет. 
//
// Возвращаемое значение:
//  сформированную строку корреспондента
//
Функция СформироватьСтрокуКорреспондента(БанкСчет, КодЯзыка = "ru")

	Если НЕ БанкСчет.Пустая() Тогда
		ВладБанковскогоСчета = БанкСчет.Владелец;
		Результат = ?(ПустаяСтрока(ВладБанковскогоСчета.ИНН),"",НСтр("ru='ИНН ';uk='ІНН ",КодЯзыка) + ВладБанковскогоСчета.ИНН + " ") + 
					СформироватьНаименованиеКорреспондентов(ВладБанковскогоСчета);
	Иначе
		Результат = "";			
	КонецЕсли;				
					
	Возврат Результат;

КонецФункции // СформироватьСтрокуКорреспондента()


Функция СформироватьСтрокуОрганизации(БанкСчет, КодЯзыка = "ru")


	Если НЕ БанкСчет.Пустая() Тогда
		ВладБанковскогоСчета = БанкСчет.Владелец;
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВладБанковскогоСчета, Дата,,,КодЯзыка);
		Результат = ?(ПустаяСтрока(СведенияОбОрганизации.ИНН),"",НСтр("ru='ИНН ';uk='ІНН ",КодЯзыка) + СведенияОбОрганизации.ИНН + " ") + 
					СформироватьНаименованиеКорреспондентов(ВладБанковскогоСчета);
	Иначе
		Результат = "";			
	КонецЕсли;				
					
	Возврат Результат;

КонецФункции // СформироватьСтрокуОрганизации()

// Формирует строку банка и его МФО
//
// Параметры:
//  БанкСчет - Банковский счет. 
//
// Возвращаемое значение:
//   Строку, сформированную из банка и МФО
//
Функция СформироватьСтрокуБанкМФО(БанкСчет, КодЯзыка = "ru")
  	Если НЕ БанкСчет.Пустая() Тогда

        
		Результат = "" + СокрЛП(БанкСчет.Банк.Наименование) + 
						?(НЕ ПустаяСтрока(БанкСчет.Банк.Город),", " + СокрЛП(БанкСчет.Банк.Город),"")
					+ НСтр("ru=', МФО ';uk=', МФО ",КодЯзыка) + СокрЛП(БанкСчет.Банк.Код);
	Иначе
		Результат = "";			
	КонецЕсли;				
	Возврат Результат;

КонецФункции // СформироватьСтрокуБанкМФО()

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  БанкСчет - Банковский счет. 
//
// Возвращаемое значение:
//   Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	Результат       = СчетКонтрагента.НомерСчета;

	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Если Клиент Тогда

// Формирует печатную форму реестра счетов
//
// Параметры:
//  ТабДок - Табличный документ
//
Функция ПечатьДокумента() Экспорт

	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрСчетов_РеестрСчетов";

	Макет      = ПолучитьМакет("РеестрСчетов");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ФорматДаты = "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать);
             	
	Область    = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.НаименованиеНомер    = НСтр("ru='РЕЕСТР СЧЕТОВ № ';uk='РЕЄСТР РАХУНКІВ № ",КодЯзыкаПечать) + ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	
	Область.Параметры.БанкМФОИсполняющий="" + СокрЛП(ИсполняющийБанк.Наименование) + 
					?(НЕ ПустаяСтрока(ИсполняющийБанк.Город),", " + СокрЛП(ИсполняющийБанк.Город),"") + НСтр("ru=', МФО ';uk=', МФО ",КодЯзыкаПечать) + СокрЛП(ИсполняющийБанк.Код);					
	Область.Параметры.ДатаДокумента        = Формат(Дата,ФорматДаты);                           
	Область.Параметры.НомерАккредитива     = НомерАккредитива;
	Область.Параметры.ДатаАккредитива      = Формат(ДатаАккредитива,ФорматДаты);
	Область.Параметры.НомерСчетаПолучателя = ВернутьРасчетныйСчет(СчетОрганизации);	
	Область.Параметры.БанкМФОПолучателя    = СформироватьСтрокуБанкМФО(СчетОрганизации,КодЯзыкаПечать);
	Область.Параметры.Получатель           = СформироватьСтрокуОрганизации(СчетОрганизации,КодЯзыкаПечать);
	Область.Параметры.БанкМФОПлательщика   = СформироватьСтрокуБанкМФО(СчетКонтрагента,КодЯзыкаПечать);
	Область.Параметры.Плательщик           = СформироватьСтрокуКорреспондента(СчетКонтрагента,КодЯзыкаПечать);
	Область.Параметры.СуммаПрописью        = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаАккредитива, глЗначениеПеременной("ВалютаРегламентированногоУчета"),КодЯзыкаПечать);
	
	ТабДок.Вывести(Область);

	Для каждого СтрокаТабЧ Из Реестр Цикл
		Область    = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.НомерСтроки       = Реестр.Индекс(СтрокаТабЧ)+1;
		Область.Параметры.пДатаОтгрузки     = Формат(СтрокаТабЧ.ДатаОтгрузки,ФорматДаты);
		Область.Параметры.пВидТранспорта    = СокрЛП(СтрокаТабЧ.ВидТранспорта);
		Область.Параметры.пНомераДокументов = СокрЛП(СтрокаТабЧ.НомерДокумента);
		Область.Параметры.пСумма            = СтрокаТабЧ.Сумма;
		ТабДок.Вывести(Область);
	КонецЦикла;

	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(Область);
	Возврат ТабДок;

КонецФункции // Печать()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "РеестрСчетов" Тогда
		
		Отказ = Ложь;
		Заголовок = СокрЛП(Ссылка);
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей(), Отказ, Заголовок);
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Реестр", СтруктураОбязательныхПолейТабличнойЧасти(), Отказ, Заголовок);
		
		Если НЕ Отказ Тогда
			ТабДокумент = ПечатьДокумента();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("РеестрСчетов", "Реестр счетов");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АккредитивПереданный") Тогда
		// Заполнение шапки
		Комментарий = Основание.Комментарий;
		Контрагент = Основание.Контрагент;
		Организация = Основание.Организация;
		Ответственный = Основание.Ответственный;
		ДокументОснование = Основание.Ссылка;
		СчетКонтрагента = Основание.СчетКонтрагента;
		СчетОрганизации = Основание.СчетОрганизации;
		
		НомерАккредитива=ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
		ДатаАккредитива=Основание.Дата;
		СуммаАккредитива=Основание.СуммаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру полей, обязательных к заполнению, в шапке документа
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Структура полей
//
Функция СтруктураОбязательныхПолей()

	СтруктураПолей= Новый Структура("Организация,СчетОрганизации,Контрагент,СчетКонтрагента");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейРасчетыУпр()

// Возвращает структуру полей, обязательных к заполнению, в табличной части документа
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Структура полей
//
Функция СтруктураОбязательныхПолейТабличнойЧасти()

	СтруктураПолей= Новый Структура("ДатаОтгрузки,ВидТранспорта,НомерДокумента,Сумма");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейРасчетыУпр()

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;

КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
