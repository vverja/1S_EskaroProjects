Перем мУдалятьДвижения;    

//Перем ОтражатьВБухгалтерскомУчете  Экспорт;
//Перем ОтражатьВНалоговомУчете      Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мРезервироватьПоСериям Экспорт;
Перем мИспользоватьПотребностиЗаказовНаПроизводство;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой документа,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма документа
//
Функция ПечатьРезервированиеТоваров()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Заказ,
	|	Представление(Заказ) КАК ЗаказПредставление,
	|	Контрагент,
	|	ВЫБОР КОГДА Заказ ССЫЛКА Документ.ЗаказПокупателя Тогда
	|		Заказ.ДоговорКонтрагента
	|	ИНАЧЕ NULL КОНЕЦ КАК ДоговорКонтрагента,
	|	ВЫБОР КОГДА Заказ ССЫЛКА Документ.ВнутреннийЗаказ Тогда
	|		Заказ.ВидЗаказа
	|	ИНАЧЕ NULL КОНЕЦ КАК ВидЗаказа,
	|	ВЫБОР КОГДА Заказ ССЫЛКА Документ.ВнутреннийЗаказ Тогда
	|		Заказ.Заказчик
	|	ИНАЧЕ NULL КОНЕЦ КАК Заказчик,
	|	ВЫБОР КОГДА Заказ ССЫЛКА Документ.ЗаказНаПроизводство Тогда
	|		Заказ.Подразделение
	|	ИНАЧЕ NULL КОНЕЦ КАК Подразделение,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное     КАК Товар,
	|		Количество,
	|		ИсходноеРазмещение,
	|		НовоеРазмещение,
	|		ЕдиницаИзмерения.Представление      КАК ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры          КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное     КАК Товар,
	|		Количество,
	|		ИсходноеРазмещение,
	|		НовоеРазмещение,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения
	|	)
	|ИЗ
	|	Документ.РезервированиеТоваров 
	|
	|ГДЕ
	|	Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РезервированиеТоваров_Резервирование";

	Макет = ПолучитьМакет("РезервированиеТоваров");

	// Выводим шапку 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Резервирование товаров");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ВидОперации");
	ОбластьМакета.Параметры.ПредставлениеВидаОперации = СокрЛП(ВидОперации);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заказ");
	ОбластьМакета.Параметры.ПредставлениеЗаказа = Шапка.ЗаказПредставление;
	ОбластьМакета.Параметры.Заказ = Шапка.Заказ;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ТипЗнч(Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПоляЗаказПокупателя");
        ОбластьМакета.Параметры.ПредставлениеКонтрагент = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");
        ОбластьМакета.Параметры.Контрагент = Шапка.Контрагент;
		ОбластьМакета.Параметры.ПредставлениеДоговор = СокрЛП(Шапка.ДоговорКонтрагента);
		ОбластьМакета.Параметры.ДоговорКонтрагента = Шапка.ДоговорКонтрагента;
        ТабДокумент.Вывести(ОбластьМакета);
	ИначеЕсли  ТипЗнч(Заказ)=Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПоляВнутреннийЗаказ");
        ОбластьМакета.Параметры.ПредставлениеВидЗаказа = Шапка.ВидЗаказа;
		ОбластьМакета.Параметры.ПредставлениеЗаказчик = СокрЛП(Шапка.Заказчик);
		ОбластьМакета.Параметры.Заказчик = Шапка.Заказчик;
        ТабДокумент.Вывести(ОбластьМакета);
    ИначеЕсли  ТипЗнч(Заказ)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
        ОбластьМакета = Макет.ПолучитьОбласть("ПоляЗаказНаПроизводство");
        ОбластьМакета.Параметры.ПредставлениеПодразделение = Шапка.Подразделение;
		ОбластьМакета.Параметры.Подразделение = Шапка.Подразделение;
        ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Ном           = 0;

	// Товары
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			ОбщегоНазначения.Сообщение("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			ОбщегоНазначения.Сообщение("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = ВыборкаСтрокТара.Товар + " (возвратная тара)";

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТара.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + (ВыборкаСтрокТовары.Количество()+ВыборкаСтрокТара.Количество());
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРасходныйОрдерНаТовары()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	 Если ИмяМакета = "РезервированиеТоваров" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьРезервированиеТоваров();


	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	СтруктураМакетов = Новый Структура("РезервированиеТоваров", "Резервирование товаров");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Заполняет переданную табличную часть по внутреннему заказу
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказуУпр(ТабличнаяЧасть)

	Если ТабличнаяЧасть = Товары Тогда
		ЭтоТовары = Истина;
		ИмяТЧ = "Товары";
	Иначе
		ЭтоТовары = Ложь;
		ИмяТЧ = "ВозвратнаяТара";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Тара);
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	КонецЕсли; 

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутренниеЗаказыОстатки.Номенклатура                                     КАК Номенклатура,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ВнутренниеЗаказыОстатки.КоличествоОстаток                                КАК Количество,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                                 КАК Размещение,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток                               КАК КоличествоРазмещение
	|
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&ДатаОстатков, ВнутреннийЗаказ = &Заказ И СтатусПартии = &СтатусПартии) КАК ВнутренниеЗаказыОстатки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &Заказ И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|ПО ВнутренниеЗаказыОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура 
	|	И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	ВнутренниеЗаказыОстатки.СтатусПартии = &СтатусПартии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутренниеЗаказыОстатки.Номенклатура                                     КАК Номенклатура,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ВнутренниеЗаказыОстатки.КоличествоОстаток                                КАК Количество,
	|	ОстаткиТоваровОстатки.Склад                                              КАК Размещение,
	|	ОстаткиТоваровОстатки.КоличествоОстаток                                  КАК КоличествоРазмещение
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&ДатаОстатков, ВнутреннийЗаказ = &Заказ И СтатусПартии = &СтатусПартии) КАК ВнутренниеЗаказыОстатки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва = &Заказ) КАК ОстаткиТоваровОстатки
	|ПО ВнутренниеЗаказыОстатки.Номенклатура = ОстаткиТоваровОстатки.Номенклатура 
	|	И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = ОстаткиТоваровОстатки.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	ВнутренниеЗаказыОстатки.СтатусПартии = &СтатусПартии
	|
	|ИТОГИ МАКСИМУМ (Количество) ПО Номенклатура КАК Номенклатура, ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры";

	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Если ЭтоТовары Тогда
		ТабЧастьЗаказа = Заказ.Товары.Выгрузить();
	Иначе
		ТабЧастьЗаказа = Заказ.ВозвратнаяТара.Выгрузить();
	КонецЕсли;

	Пока ВыборкаПоНоменклатуре.Следующий() Цикл

		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл

			ЕдиницаИзмеренияКоэффициент = ?(ВыборкаПоХарактеристикам.ЕдиницаИзмеренияКоэффициент <> NULL, ВыборкаПоХарактеристикам.ЕдиницаИзмеренияКоэффициент, 0);

			КоличествоОсталосьПогасить = ВыборкаПоХарактеристикам.Количество;

			// Выберем детальные записи
			Выборка = ВыборкаПоХарактеристикам.Выбрать();

			Пока Выборка.Следующий() Цикл

				// При обходе детальных записей заполним размещение
				Если Выборка.Размещение <> NULL Тогда

					КоличествоРазмещение       = Окр(Мин(Выборка.КоличествоРазмещение, КоличествоОсталосьПогасить), 3, 1);

					КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоРазмещение;

					// Если вид операции ограничивает какой-то из вариантов распределения, нужно пропускать соответствующие строки
					// таким образом, в документ будут добавляться строки без размещения
					Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам
						И ТипЗнч(Выборка.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
						Продолжить;
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам
						И ТипЗнч(Выборка.Размещение) = Тип("СправочникСсылка.Склады") Тогда
						Продолжить;
					КонецЕсли;

					НоваяСтрока                    = ТабличнаяЧасть.Добавить();
					НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
					НоваяСтрока.ИсходноеРазмещение = Выборка.Размещение;
					НоваяСтрока.Количество         = КоличествоРазмещение;

					Если ЭтоТовары Тогда
						НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
						НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
						НоваяСтрока.Коэффициент      = ЕдиницаИзмеренияКоэффициент;
					КонецЕсли;

					ОтборСтрок = Новый Структура("Номенклатура", Выборка.Номенклатура);
					Если ЭтоТовары Тогда
						ОтборСтрок.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			// Если при обходе детальных записей размещение не погасило все заказанное количество,
			// добавим его отдельной строкой.
			Если КоличествоОсталосьПогасить > 0 Тогда
				НоваяСтрока                  = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Номенклатура     = ВыборкаПоХарактеристикам.Номенклатура;
				НоваяСтрока.Количество       = КоличествоОсталосьПогасить;

				Если ЭтоТовары Тогда
					НоваяСтрока.ЕдиницаИзмерения = ВыборкаПоХарактеристикам.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент      = ЕдиницаИзмеренияКоэффициент;
					НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаПоХарактеристикам.ХарактеристикаНоменклатуры;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказуУпр()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамУпр(ТабличнаяЧасть)

	Если ТабличнаяЧасть = Товары Тогда
		ЭтоТовары = Истина;
	Иначе
		ЭтоТовары = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Заказ.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Если Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
				Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВПереработку);
			Иначе
				Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Тара);
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	КонецЕсли; 

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура                                     КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.Номенклатура.Услуга                              КАК Услуга,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток                                КАК Количество,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                                  КАК Размещение,
	|	NULL                                                                      КАК СерияНоменклатуры,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток                                КАК КоличествоРазмещение
	|
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента И ЗаказПокупателя = &Заказ И СтатусПартии = &СтатусПартии) КАК ЗаказыПокупателейОстатки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &Заказ И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура 
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	ЗаказыПокупателейОстатки.СтатусПартии = &СтатусПартии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура                                     КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.Номенклатура.Услуга                              КАК Услуга,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток                                КАК Количество,
	|	ОстаткиТоваровОстатки.Склад                                               КАК Размещение,
	|	ОстаткиТоваровОстатки.СерияНоменклатуры                                   КАК СерияНоменклатуры,
	|	ОстаткиТоваровОстатки.КоличествоОстаток                                   КАК КоличествоРазмещение
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента И ЗаказПокупателя = &Заказ И СтатусПартии = &СтатусПартии) КАК ЗаказыПокупателейОстатки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва = &Заказ) КАК ОстаткиТоваровОстатки
	|ПО ЗаказыПокупателейОстатки.Номенклатура = ОстаткиТоваровОстатки.Номенклатура 
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ОстаткиТоваровОстатки.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	ЗаказыПокупателейОстатки.СтатусПартии = &СтатусПартии
	|
	|ИТОГИ МАКСИМУМ (Количество) ПО Номенклатура КАК Номенклатура, ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры";

	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Если ЭтоТовары Тогда
		ТабЧастьЗаказа = Заказ.Товары.Выгрузить();
	Иначе
		ТабЧастьЗаказа = Заказ.ВозвратнаяТара.Выгрузить();
	КонецЕсли;

	Пока ВыборкаПоНоменклатуре.Следующий() Цикл

		// Услуги пропускаем
		Если ВыборкаПоНоменклатуре.Услуга = Истина Тогда
			Продолжить;
		КонецЕсли;

		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл

			ЕдиницаИзмеренияКоэффициент = ?(ВыборкаПоХарактеристикам.ЕдиницаИзмеренияКоэффициент <> NULL, ВыборкаПоХарактеристикам.ЕдиницаИзмеренияКоэффициент, 0);

			КоличествоОсталосьПогасить = ВыборкаПоХарактеристикам.Количество;

			// Выберем детальные записи
			Выборка = ВыборкаПоХарактеристикам.Выбрать();

			Пока Выборка.Следующий() Цикл

				// При обходе детальных записей заполним размещение
				Если ЗначениеЗаполнено(Выборка.Размещение) И Выборка.КоличествоРазмещение > 0 Тогда

					КоличествоРазмещение       = Окр(Мин(Выборка.КоличествоРазмещение, КоличествоОсталосьПогасить), 3, 1);

					КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоРазмещение;

					// Если вид операции ограничивает какой-то из вариантов распределения, нужно пропускать соответствующие строки
					// таким образом, в документ будут добавляться строки без размещения
					Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам
						И ТипЗнч(Выборка.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
						Продолжить;
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам
						И ТипЗнч(Выборка.Размещение) = Тип("СправочникСсылка.Склады") Тогда
						Продолжить;
					КонецЕсли;

					НоваяСтрока                    = ТабличнаяЧасть.Добавить();
					НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
					НоваяСтрока.ИсходноеРазмещение = Выборка.Размещение;
					НоваяСтрока.Количество         = КоличествоРазмещение;

					Если ЭтоТовары Тогда
						НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
						НоваяСтрока.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
						НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
						НоваяСтрока.Коэффициент                = ЕдиницаИзмеренияКоэффициент;
					КонецЕсли;

					ОтборСтрок = Новый Структура("Номенклатура", Выборка.Номенклатура);
					Если ЭтоТовары Тогда
						ОтборСтрок.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			// Если при обходе детальных записей размещение не погасило все заказанное количество,
			// добавим его отдельной строкой.
			Если КоличествоОсталосьПогасить > 0 Тогда
				НоваяСтрока                  = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Номенклатура     = ВыборкаПоХарактеристикам.Номенклатура;
				НоваяСтрока.Количество       = КоличествоОсталосьПогасить;

				Если ЭтоТовары Тогда
					НоваяСтрока.ЕдиницаИзмерения = ВыборкаПоХарактеристикам.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент      = ЕдиницаИзмеренияКоэффициент;
					НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаПоХарактеристикам.ХарактеристикаНоменклатуры;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткамУпр()

// Заполняет переданную табличную часть по заказу на производство
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство() Экспорт

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяРеквРазмещение", "ИсходноеРазмещение");
		
	ЗаказыНаПроизводствоИПереработку.ЗаполнитьТабличнуюЧастьМатериалыПоОстаткам(Товары, Заказ, ДопПараметры);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство()

// Заполняет табличную часть "Товары" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТоварыПоОстаткамУпр() Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткамУпр(Товары);
	
КонецПроцедуры // ЗаполнитьТоварыПоОстаткамУпр()

// Заполняет табличную часть "ВозвратнаяТара" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьВозвратнуюТаруПоОстаткамУпр() Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткамУпр(ВозвратнаяТара);
	
КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОстаткамУпр()

// Заполняет табличную часть "Товары" по остаткам внутреннего заказа
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТоварыПоВнутреннемуЗаказуУпр() Экспорт

	ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказуУпр(Товары);
	
КонецПроцедуры // ЗаполнитьТоварыПоВнутреннемуЗаказуУпр()

// Заполняет табличную часть "ВозвратнаяТара" по остаткам внутреннего заказа
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьВозвратнуюТаруПоВнутреннемуЗаказуУпр() Экспорт

	ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказуУпр(ВозвратнаяТара);
	
КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоВнутреннемуЗаказуУпр()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Кнопка - кнопка подменю "Заполнить и провести".
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(Параметры) Экспорт

	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли; 
	
	Параметры.Вставить("Заказ", Заказ);
	Параметры.Вставить("РезервированиеТоваров", истина);
	Параметры.Вставить("РезервироватьПоСериям",ложь);

	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОбособленныйУчет = ЗначениеЗаполнено(Заказ.ДоговорКонтрагента) И Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		
		Параметры.Вставить("РезервироватьПоСериям",мРезервироватьПоСериям и ОбособленныйУчет);
		Параметры.Вставить("ОбособленныйУчет",ОбособленныйУчет);
	КонецЕсли;
	УправлениеЗаказами.Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(Параметры, Товары, ВозвратнаяТара);
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("ВидОперации, Заказ");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
//  ТаблицаПоПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ИсходноеРазмещениеВидСклада");
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "НовоеРазмещениеВидСклада");
	

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок, "ИсходноеРазмещениеВидСклада");
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок, "НовоеРазмещениеВидСклада");

	// Нельзя резервировать возвратную тару под заказ покупателя с обособленным учетом
	УправлениеЗаказами.ПроверитьРезервированиеТарыПодЗаказСОбособленнымУчетом(ЭтотОбъект,"Заказ", истина, "НовоеРазмещение", Отказ, Заголовок);													   
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);
							  
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							ТаблицаПоТаре, Отказ, Заголовок);
							  
	// Проверку выполняем явно, т.к. может быть значение NULL						
	Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей = Истина Тогда
								  
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
											ТаблицаПоТаре, Отказ, Заголовок);
											
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка,Движения.СписанныеТовары.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПроверкаПревышенияОбъемаЗаказа(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоТоварам, ТаблицаПоТаре, Заголовок)
		
	флЗаказПревышен = ложь;
	Если ТипЗнч(СтруктураШапкиДокумента.Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтруктураШапкиДокумента.Вставить("Сделка",СтруктураШапкиДокумента.Заказ);
        НаборЗаписей = РегистрыНакопления.ЗаказыПокупателей.СоздатьНаборЗаписей();
		Если Товары.Количество()>0 Тогда
			НаборЗаписей.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, флЗаказПревышен, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ВозвратнаяТара.Количество()>0 Тогда
			НаборЗаписей.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, флЗаказПревышен, Заголовок, РежимПроведения);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Заказ)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
	
		Если мИспользоватьПотребностиЗаказовНаПроизводство И Товары.Количество()>0 Тогда
		
			 ДопПараметры = Новый Структура;
			 ДопПараметры.Вставить("ЗаказНаПроизводство", Заказ);
			 
	         НаборЗаписей = РегистрыНакопления.ПотребностиЗаказовНаПроизводство.СоздатьНаборЗаписей();
			 НаборЗаписей.КонтрольОстатков(ЭтотОбъект, "Товары", ДопПараметры, флЗаказПревышен, Заголовок, РежимПроведения);
			 
         КонецЕсли;
         
	 ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Заказ)=Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		 НаборЗаписей = РегистрыНакопления.ВнутренниеЗаказы.СоздатьНаборЗаписей();

		 Если Товары.Количество()>0 Тогда
			Параметры = новый Структура("ИмяТабЧасти,ЗаказВШапке,ИмяРеквизитаЗаказ","Товары",истина,"Заказ");
	        НаборЗаписей.КонтрольОстатков(ЭтотОбъект, Параметры, флЗаказПревышен, Заголовок, РежимПроведения);
		КонецЕсли;
	    Если ВозвратнаяТара.Количество()>0 Тогда
			Параметры = новый Структура("ИмяТабЧасти,ЗаказВШапке,ИмяРеквизитаЗаказ","ВозвратнаяТара",истина,"Заказ");
	        НаборЗаписей.КонтрольОстатков(ЭтотОбъект, Параметры, флЗаказПревышен, Заголовок, РежимПроведения);
		КонецЕсли;

	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам)

	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.ИсходноеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		 Иначе
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРазмещение.Колонки.ИсходноеРазмещение.Имя = "ЗаказПоставщику";
	ТаблицаПоТоварамРазмещение.Колонки.Количество        .Имя = "МинусКоличество";
	
	ТаблицаПоТоварамРазмещение.Колонки.Добавить("Количество");
		
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварамРазмещение Цикл
		СтрокаТаблицы.Количество = - СтрокаТаблицы.МинусКоличество;
	КонецЦикла;
		
	Возврат ТаблицаПоТоварамРазмещение;	

КонецФункции // СоздатьТаблицуРазмещенияЗаказов()

// Функция удаляет из исходной таблицы строки не требующие резервирования
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТоварам)

	// Таблица товаров с непустым исходным размещением - складом
	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.ИсходноеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРезервирование.Колонки.ИсходноеРазмещение.Имя = "Склад";
	ТаблицаПоТоварамРезервирование.Колонки.Количество.Имя = "МинусКоличество";
	ТаблицаПоТоварамРезервирование.Колонки.Добавить("Количество");
		
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварамРезервирование Цикл
		СтрокаТаблицы.Количество = - СтрокаТаблицы.МинусКоличество;
	КонецЦикла;

	Возврат ТаблицаПоТоварамРезервирование;
	
КонецФункции // СоздатьТаблицуРезервированияПодЗаказ()

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуСНовымРазмещениемЗаказа(ТаблицаПоТоварам)

	// Таблица товаров с непустым новым размещением - заказом поставщику
	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовоеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.НовоеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		 Иначе
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
		
	ТаблицаПоТоварамРазмещение.Колонки.НовоеРазмещение.Имя = "ЗаказПоставщику";
		
	Возврат ТаблицаПоТоварамРазмещение;	

КонецФункции // СоздатьТаблицуСНовымРазмещениемЗаказа()

// Функция удаляет из исходной таблицы строки не требующие резервирования
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуСНовымРезервированиемПодЗаказ(ТаблицаПоТоварам)

	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовоеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.НовоеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРезервирование.Колонки.НовоеРазмещение.Имя = "Склад";
	
	Возврат ТаблицаПоТоварамРезервирование;

КонецФункции // СоздатьТаблицуСНовымРезервированиемПодЗаказ()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);
							  
							  
	ПроверкаПревышенияОбъемаЗаказа(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоТоварам, ТаблицаПоТаре, Заголовок);
	
	// Таблица товаров с непустым исходным размещением - заказом поставщику
	ТаблицаПоТоварамСнятиеРазмещения = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам);
	ТаблицаПоТареСнятиеРазмещения    = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТаре);
	
	// Таблица товаров с непустым новым размещением - заказом поставщику
	ТаблицаПоТоварамРазмещение = СоздатьТаблицуСНовымРазмещениемЗаказа(ТаблицаПоТоварам);
	ТаблицаПоТареРазмещение    = СоздатьТаблицуСНовымРазмещениемЗаказа(ТаблицаПоТаре);

	// Проверка остатков
	НаборДвижений = Движения.РазмещениеЗаказовПокупателей;


	Если ТаблицаПоТоварамСнятиеРазмещения.Количество() > 0 ИЛИ  ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	Если ТаблицаПоТареСнятиеРазмещения.Количество() > 0 ИЛИ  ТаблицаПоТареРазмещение.Количество() > 0 Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	
	Если не Отказ Тогда
		Если ТаблицаПоТоварамСнятиеРазмещения.Количество() > 0 ИЛИ ТаблицаПоТареСнятиеРазмещения.Количество() > 0 Тогда
		
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

				
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамСнятиеРазмещения);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареСнятиеРазмещения);
					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", Заказ);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
		КонецЕсли;
	

		Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда

			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРазмещение);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРазмещение);
					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", Заказ);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
		КонецЕсли;
 	КонецЕсли;

	// Таблица товаров с непустым исходным размещением - складом
	ТаблицаПоТоварамСнятиеРезерва = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТоварам);
	ТаблицаПоТареСнятиеРезерва    = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТаре);
	
	// Таблица товаров с непустым новым размещением - складом
	ТаблицаПоТоварамРезервирование = СоздатьТаблицуСНовымРезервированиемПодЗаказ(ТаблицаПоТоварам);
	ТаблицаПоТареРезервирование    = СоздатьТаблицуСНовымРезервированиемПодЗаказ(ТаблицаПоТаре);

	НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

	Если ТаблицаПоТоварамСнятиеРезерва.Количество() > 0 ИЛИ ТаблицаПоТареСнятиеРезерва.Количество() > 0 
		ИЛИ ТаблицаПоТоварамРезервирование.Количество() > 0 ИЛИ ТаблицаПоТареРезервирование.Количество() > 0 Тогда

		// Контроль остатков товара - происходит сразу и для снятия резерва, и для резервирования.
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
	КонецЕсли;
	
	Если не Отказ Тогда
		Если ТаблицаПоТоварамСнятиеРезерва.Количество() > 0 ИЛИ ТаблицаПоТареСнятиеРезерва.Количество() > 0 Тогда
		
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамСнятиеРезерва);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареСнятиеРезерва);
					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Заказ);
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
		КонецЕсли;
		
		Если ТаблицаПоТоварамРезервирование.Количество() > 0 ИЛИ ТаблицаПоТареРезервирование.Количество() > 0 Тогда

			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("Товары", ТаблицаПоТоварамРезервирование);
			СтруктТаблицДокумента.Вставить("Тара",   ТаблицаПоТареРезервирование);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Заказ);
						
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
		КонецЕсли;
   	КонецЕсли;
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
			
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр() 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
				                          ТаблицаПоТоварам, ТаблицаПоТаре,
											Отказ, Заголовок)
											
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
											
	Инд = 0; // Индекс для регистра СписанныеТовары
	
	НеобходимаРегистрацияВПоследовательностях = Ложь;
	
	// Таблица товаров с непустым исходным размещением - складом
	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.ИсходноеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		ТаблицаПоТоварамРезервирование.Колонки.ИсходноеРазмещение.Имя = "Склад";
		
		НеобходимаРегистрацияВПоследовательностях = Истина;
		
		// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
				
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			// Отмена резервирования:
			// 1. Заказ, с которого списать партию - текущий
			ТаблицаДвижений.ЗаполнитьЗначения(Заказ,"ЗаказПартии");
			// 2. Заказ, на который оприходовать партию  - пустой
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"ЗаказСписания");
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Таблица тары с непустым исходным размещением - складом
	ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.ИсходноеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
		ТаблицаПоТареРезервирование.Колонки.ИсходноеРазмещение.Имя = "Склад";
		
		НеобходимаРегистрацияВПоследовательностях = Истина;
		
		// ТАРА ПО РЕГИСТРУ СписанныеТовары.
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			// Отмена резервирования:
			// 1. Заказ, с которого списать партию - текущий
			ТаблицаДвижений.ЗаполнитьЗначения(Заказ,"ЗаказПартии");
			// 2. Заказ, на который оприходовать партию  - пустой
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"ЗаказСписания");
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Таблица товаров с непустым новым размещением - складом
	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовоеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.НовоеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		ТаблицаПоТоварамРезервирование.Колонки.НовоеРазмещение.Имя = "Склад";
		
		НеобходимаРегистрацияВПоследовательностях = Истина;
		
		// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда

			НаборДвижений = Движения.СписанныеТовары;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРезервирование, ТаблицаДвижений);

			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			// Резервирование:
			// 1. Заказ, с которого списать партию - пустой
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"ЗаказПартии");
			// 2. Заказ, на который оприходовать партию  - текущий
			ТаблицаДвижений.ЗаполнитьЗначения(Заказ,"ЗаказСписания");
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Таблица тары с непустым новым размещением - складом
	ТаблицаПоТареРезервирование = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовоеРазмещение) 
		 или ТипЗнч(СтрокаТаблицы.НовоеРазмещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТареРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТареРезервирование.Количество() > 0 Тогда
		ТаблицаПоТареРезервирование.Колонки.НовоеРазмещение.Имя = "Склад";
		
		НеобходимаРегистрацияВПоследовательностях = Истина;
		
		// ТАРА ПО РЕГИСТРУ СписанныеТовары.
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТареРезервирование, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ,"КодОперацииПартииТоваров");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"СписыватьТолькоПоЗаказу");
			
			// Резервирование:
			// 1. Заказ, с которого списать партию - пустой
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"ЗаказПартии");
			// 2. Заказ, на который оприходовать партию  - текущий
			ТаблицаДвижений.ЗаполнитьЗначения(Заказ,"ЗаказСписания");
			
			ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НеобходимаРегистрацияВПоследовательностях Тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, Организация,истина,ложь,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
		
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Заказ = Основание;
		ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладамИЗаказам;
		ДатаОтгрузки = Основание.ДатаОтгрузки;
        //ИЗМЕНЕНО Верескул Игорь(Начало 08.08.2017
        Комментарий = Основание.Комментарий;
        //Окончание)Верескул Игорь
		Если Основание.Проведен
		И Не Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда

			// Заполним табличные части неотгруженными товарми по заказу покупателя.
			ЗаполнитьТоварыПоОстаткамУпр();
			ЗаполнитьВозвратнуюТаруПоОстаткамУпр();
		КонецЕсли;	

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
	
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Заказ			= Основание;
		ВидОперации     = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладамИЗаказам;
		ДатаОтгрузки    = Основание.ДатаОтгрузки;
		
		Если Основание.Проведен Тогда
		
			// Заполним табличные части неотгруженными товарми по заказу покупателя.
			ЗаполнитьТоварыПоВнутреннемуЗаказуУпр();
			ЗаполнитьВозвратнуюТаруПоВнутреннемуЗаказуУпр();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Заказ			= Основание;
		ВидОперации     = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладамИЗаказам;
		ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство();
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
 

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") и ВозвратнаяТара.Количество()>0 Тогда
		//под заказ на производство возвратную тару не резервируем
	   ВозвратнаяТара.Очистить();
   КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ", "ДоговорКонтрагента"       , "ДоговорКонтрагента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"  , "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ", "Организация"                 , "Организация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ", "ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ", "ВидОперации", "ЗаказВидОперации");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ", "ДоговорКонтрагента.ВидДоговора", 	"ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ", "СкладГруппа", 						"Склад");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ", "СкладГруппа.ВидСклада", 			"ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	Если ТипЗнч(Заказ) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтруктураШапкиДокумента.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", Ложь);
	КонецЕсли;

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                        , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                     , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                   , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"   , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ИсходноеРазмещение"           , "ИсходноеРазмещение");
	СтруктураПолей.Вставить("НовоеРазмещение"              , "НовоеРазмещение");
	СтруктураПолей.Вставить("СерияНоменклатуры"            , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ИсходноеРазмещениеВидСклада" , "ИсходноеРазмещение.ВидСклада");
	СтруктураПолей.Вставить("НовоеРазмещениеВидСклада"    , "НовоеРазмещение.ВидСклада");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                        , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                     , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                   , "Количество");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам"   , "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ИсходноеРазмещение"           , "ИсходноеРазмещение");
	СтруктураПолей.Вставить("НовоеРазмещение"              , "НовоеРазмещение");
	СтруктураПолей.Вставить("ИсходноеРазмещениеВидСклада" , "ИсходноеРазмещение.ВидСклада");
	СтруктураПолей.Вставить("НовоеРазмещениеВидСклада"    , "НовоеРазмещение.ВидСклада");

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу                 
	Если Не Отказ Тогда                      
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередУдалением(Отказ)
	// Вставить содержимое обработчика.
	Отказ = Проведен;
КонецПроцедуры

мИспользоватьПотребностиЗаказовНаПроизводство = глЗначениеПеременной("ИспользоватьПотребностиЗаказовНаПроизводство");
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мРезервироватьПоСериям = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании") И глЗначениеПеременной("ИспользоватьСерииНоменклатуры");