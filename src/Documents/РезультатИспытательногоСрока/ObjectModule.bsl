////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим       - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим, РежимНабораПерсонала)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);

	Если РежимНабораПерсонала = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		СтрокаСоединения = "Док.Сотрудник = НамеченныеСобытияПоПерсоналу.Сотрудник";
	Иначе
		СтрокаСоединения = "Док.Сотрудник.Физлицо = НамеченныеСобытияПоПерсоналу.ФизЛицо";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Дата,
	|	Док.ДатаИзменения,
	|	Док.Сотрудник,
	|	Док.Сотрудник.Физлицо КАК Физлицо,
	|	Док.Результат,
	|	ВЫБОР
	|		КОГДА СостояниеРаботниковНаИспытательномСроке.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаНаИспытательномСроке.ПринятНаИспытательныйСрок)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КандидатПринятНаИспытательныйСрок,
	|	ВЫБОР
	|		КОГДА СостояниеРаботниковНаИспытательномСроке.Период = Док.ДатаИзменения
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьРешение,
	|	НамеченныеСобытияПоПерсоналу.ПланируемоеСобытие
	|ИЗ
	|	Документ.РезультатИспытательногоСрока КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НамеченныеСобытияПоПерсоналу КАК НамеченныеСобытияПоПерсоналу
	|		ПО "+СтрокаСоединения+"
	|			И (НАЧАЛОПЕРИОДА(Док.ДатаИзменения, ДЕНЬ) = НамеченныеСобытияПоПерсоналу.ДатаИзменения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковНаИспытательномСроке КАК СостояниеРаботниковНаИспытательномСроке
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(СостояниеРаботниковНаИспытательномСроке.Период) КАК ДатаЗначения,
	|				Док.Сотрудник.Физлицо КАК ФизЛицо
	|			ИЗ
	|				Документ.РезультатИспытательногоСрока КАК Док
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковНаИспытательномСроке КАК СостояниеРаботниковНаИспытательномСроке
	|					ПО СостояниеРаботниковНаИспытательномСроке.Физлицо = Док.Сотрудник.Физлицо
	|						И СостояниеРаботниковНаИспытательномСроке.Период <= Док.ДатаИзменения
	|			ГДЕ
	|				Док.Ссылка = &ДокументСсылка
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Док.Сотрудник.Физлицо) КАК СписокДат
	|			ПО СостояниеРаботниковНаИспытательномСроке.Период = СписокДат.ДатаЗначения
	|				И СостояниеРаботниковНаИспытательномСроке.Физлицо = СписокДат.ФизЛицо
	|		ПО Док.Сотрудник.Физлицо = СостояниеРаботниковНаИспытательномСроке.Физлицо
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)
	
	// Сотрудник
	НетФизлица = НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник);
	Если НетФизлица Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Результат
	НетРезультата = НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Результат);
	Если НетРезультата Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан результат!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаИзменения
	НетДатыИзменения = НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаИзменения);
	Если НетРезультата Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата изменения!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетФизлица И НетРезультата И НетДатыИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыборкаПоШапкеДокумента.КандидатПринятНаИспытательныйСрок Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Кандидат не принят на испытательный срок!", Отказ, Заголовок);
		Возврат;
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента.ЕстьРешение Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По кандидату на дату регистрации уже присутствует результат!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ПланируемоеСобытие <> NULL и ВыборкаПоШапкеДокумента.Результат <> Перечисления.РезультатыИспытательногоСрока.Положительный Тогда
		ОбщегоНазначения.СообщитьОбОшибке("На дату документа по кандидату уже запланировано событие: " + ВыборкаПоШапкеДокумента.ПланируемоеСобытие, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПараметров = "")
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		РежимНабораПерсонала	= СтруктураПараметров.РежимНабораПерсонала;
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.Результат = Перечисления.РезультатыИспытательногоСрока.Положительный Тогда
		Движение = Движения.СостояниеРаботниковНаИспытательномСроке.Добавить();
		// Свойства
		Движение.Период				= ВыборкаПоШапкеДокумента.ДатаИзменения;
		// Измерения
		Движение.Физлицо			= ВыборкаПоШапкеДокумента.Физлицо;
		// Ресурсы
		Движение.Состояние			= Перечисления.СостоянияРаботникаНаИспытательномСроке.ПринятНаРаботу;
		
	ИначеЕсли ВыборкаПоШапкеДокумента.Результат = Перечисления.РезультатыИспытательногоСрока.Отрицательный Тогда
		Движение = Движения.СостояниеРаботниковНаИспытательномСроке.Добавить();
		// Свойства
		Движение.Период				= ВыборкаПоШапкеДокумента.ДатаИзменения;
		// Измерения
		Движение.Физлицо			= ВыборкаПоШапкеДокумента.Физлицо;
		// Ресурсы
		Движение.Состояние			= Перечисления.СостоянияРаботникаНаИспытательномСроке.НеПрошелИспытательныйСрок;
		
		Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();
		// Свойства
		// Измерения
		Если РежимНабораПерсонала = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
			Движение.Сотрудник		= ВыборкаПоШапкеДокумента.Сотрудник;
		Иначе
			Движение.Физлицо		= ВыборкаПоШапкеДокумента.Физлицо;
		КонецЕсли;
		Движение.ПланируемоеСобытие	= Перечисления.НамеченныеСобытияПоПерсоналу.УвольнениеПослеИспытательногоСрока;
		Движение.ДатаИзменения		= ВыборкаПоШапкеДокумента.ДатаИзменения;
		// Ресурсы
		
	ИначеЕсли ВыборкаПоШапкеДокумента.Результат = Перечисления.РезультатыИспытательногоСрока.Продлен Тогда
		Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();
		// Свойства
		// Измерения
		Если РежимНабораПерсонала = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
			Движение.Сотрудник		= ВыборкаПоШапкеДокумента.Сотрудник;
		Иначе
			Движение.Физлицо		= ВыборкаПоШапкеДокумента.Физлицо;
		КонецЕсли;
		Движение.ПланируемоеСобытие	= Перечисления.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока;
		Движение.ДатаИзменения		= ВыборкаПоШапкеДокумента.ДатаИзменения;
		// Ресурсы
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	мУдалятьДвижения = Не ЭтоНовый();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РежимНабораПерсонала = Константы.РежимНабораПерсонала.Получить();

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим, РежимНабораПерсонала);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, Новый Структура("РежимНабораПерсонала", РежимНабораПерсонала));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
