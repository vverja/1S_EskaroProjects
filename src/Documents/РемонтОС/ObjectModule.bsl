Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "Стоимость,
								|Событие,
								|ОС.СуммаРемонтаУУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "СтоимостьБУ,
								|СобытиеРегл,
								|СчетУчетаБУВнеоборотногоАктива,
								|ОС.СуммаРемонтаБУ";

	мСтрокаРеквизитыНалУчета =  "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Функция заполняет список значений доступных видов событий
// только для регламентированного учета
//
Функция ПолучитьСписокЗначенийВидыСобытий() Экспорт
	
	ВидыСобытий = Новый СписокЗначений;
	
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Ремонт);
	
	Возврат ВидыСобытий;
	
 КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

#Если Клиент Тогда

// Функция формирует табличный документ унифицированной формы ОЗ-2
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме ОЗ-2.
//
Функция ПечатьОЗ2(ПечатьПоДаннымУпрУчета = Истина)

	Макет       = ПолучитьОбщийМакет("ОЗ2");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Форма_ОЗ2";
	
	Если Не ПечатьПоДаннымУпрУчета Тогда
		
		Запрос       = Новый Запрос;
		Запрос.УстановитьПараметр("Период",         МоментВремени());
		Запрос.УстановитьПараметр("ТекОрганизация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КодыОрганизацииСрезПоследних.Организация.НаименованиеПолное
		|	                                      КАК СТРОКА(1000))     КАК Организация,
		|	КодыОрганизацииСрезПоследних.КодПоЕДРПОУ                    КАК ЕДРПОУ
		|ИЗ
		|	РегистрСведений.КодыОрганизации.СрезПоследних(&Период, Организация = &ТекОрганизация)
		|	               КАК КодыОрганизацииСрезПоследних";
		ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
		ВыборкаПоШапке.Следующий();
		
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",         Ссылка);
	Запрос.УстановитьПараметр("Период",         МоментВремени());
	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	
	Если ПечатьПоДаннымУпрУчета Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РемонтОСОС.Ссылка.Номер                        КАК НомерАкта,
		|	РемонтОСОС.Ссылка.Дата                         КАК ДатаАкта,
		|	РемонтОСОС.Ссылка.Событие                      КАК ВидОперации,
		|	РемонтОСОС.ОсновноеСредство.Код                КАК ИнвентарныйНомер,
		|	РемонтОСОС.ОсновноеСредство.ЗаводскойНомер     КАК ЗаводскойНомер,
		|	РемонтОСОС.ОсновноеСредство.НаименованиеПолное КАК ОсновноеСредствоНаименование,
		|	РемонтОСОС.СуммаРемонтаУУ                      КАК СуммаРемонта,
		|	РемонтОСОС.Ссылка.Сдал       				   КАК Сдал,
		|	РемонтОСОС.Ссылка.Принял       				   КАК Принял,
		|	РемонтОСОС.Ссылка.ДатаНачалаРемонта       	   КАК ДатаНачала,
		|	РемонтОСОС.Ссылка.ДатаОкончанияРемонта         КАК ДатаОкончания,
		|	РемонтОСОС.Ссылка.ЧтоНеВыполнено 			   КАК ЧтоНеВыполнено,
		|	РемонтОСОС.Ссылка.ЧтоИзменилось                КАК ЧтоИзменилось,
		|	РАЗНОСТЬДАТ(РемонтОСОС.Ссылка.ДатаНачалаРемонта,
		|	            РемонтОСОС.Ссылка.ДатаОкончанияРемонта,
		|	            ДЕНЬ)                              КАК КоличествоДней,
		|	МестонахождениеОС.МОЛ.Код                      КАК КодМОЛа,
		|	МестонахождениеОС.Местонахождение.Наименование КАК Подразделение
		|ИЗ
		|	Документ.РемонтОС.ОС КАК РемонтОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.МестонахождениеОС.СрезПоследних КАК МестонахождениеОС
		|		ПО РемонтОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|ГДЕ
		|	РемонтОСОС.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РемонтОСОС.Ссылка.Номер                          КАК НомерАкта,
		|	РемонтОСОС.Ссылка.Дата                           КАК ДатаАкта,
		|	РемонтОСОС.Ссылка.СобытиеРегл                    КАК ВидОперации,
		|	РемонтОСОС.ОсновноеСредство.ЗаводскойНомер       КАК ЗаводскойНомер,
		|	РемонтОСОС.ОсновноеСредство.НаименованиеПолное   КАК ОсновноеСредствоНаименование,
		|	РемонтОСОС.СуммаРемонтаБУ                        КАК СуммаРемонта,
		|	РемонтОСОС.Ссылка.СчетУчетаБУВнеоборотногоАктива КАК СчетКт,
		|	РемонтОСОС.ОсновноеСредство.Код                  КАК КодАналитикиДт,
		|	РемонтОСОС.Ссылка.ОбъектСтроительства.Код        КАК КодАналитикиКт,
		|	РемонтОСОС.Ссылка.Сдал       				     КАК Сдал,
		|	РемонтОСОС.Ссылка.Принял       				     КАК Принял,
		|	РемонтОСОС.Ссылка.ДатаНачалаРемонта       	     КАК ДатаНачала,
		|	РемонтОСОС.Ссылка.ДатаОкончанияРемонта           КАК ДатаОкончания,
		|	РемонтОСОС.Ссылка.ЧтоНеВыполнено 			     КАК ЧтоНеВыполнено,
		|	РемонтОСОС.Ссылка.ЧтоИзменилось                  КАК ЧтоИзменилось,
		|	РАЗНОСТЬДАТ(РемонтОСОС.Ссылка.ДатаНачалаРемонта,
		|	            РемонтОСОС.Ссылка.ДатаОкончанияРемонта,
		|	            ДЕНЬ)                                КАК КоличествоДней,
	    |	Неопределено 									 КАК СчетДт,
		|	СпособыОтраженияБУ.СпособыОтраженияРасходовПоАмортизации КАК НаправлениеАмортизации,
		|	ПервоначальныеСведенияОСБУ.ИнвентарныйНомер      КАК ИнвентарныйНомер,
		|	МестонахождениеОС.МОЛ.Код                        КАК КодМОЛа,
		|	МестонахождениеОС.Местонахождение.Наименование   КАК Подразделение
		|ИЗ
		|	Документ.РемонтОС.ОС КАК РемонтОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|		                    &Период,
		|		                    Организация = &ТекОрганизация
		|		                    И ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияБУ
		|		ПО РемонтОСОС.ОсновноеСредство = СпособыОтраженияБУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|		                    &Период,
		|		                    Организация = &ТекОрганизация
		|		                    И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБУ
		|		ПО РемонтОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|		                    &Период,
		|		                    Организация = &ТекОрганизация
		|		                    И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|		ПО РемонтОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|ГДЕ
		|	РемонтОСОС.Ссылка = &Ссылка";
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	НеПервая = Ложь;
	
	МассивКоэф 			= Новый Массив;
	МассивСчетовЗатрат 	= Новый Массив;

	Пока Выборка.Следующий() Цикл
		
		Если НеПервая Тогда
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		НеПервая = Истина;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОЗ2");
		
		Если Не ПечатьПоДаннымУпрУчета Тогда
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
			ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
			
			Если ИспользоватьОбщийСпособОтраженияРасходов Тогда
				ТекущееНаправлениеАмортизации = СпособОтраженияРасходов;
			Иначе	
				ТекущееНаправлениеАмортизации = Выборка.НаправлениеАмортизации;
			КонецЕсли;	

			Если Выборка.СуммаРемонта=0 ИЛИ НЕ ЗначениеЗаполнено(ТекущееНаправлениеАмортизации) ИЛИ ТекущееНаправлениеАмортизации.Способы.Количество() = 0 Тогда
				// есть не все данные, тогда выводим пустую строку
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
				Продолжить;
			КонецЕсли;
			
			МассивКоэф.Очистить();
			МассивСчетовЗатрат.Очистить();
			Для Каждого СтрокаНапр Из ТекущееНаправлениеАмортизации.Способы Цикл
				МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
				МассивСчетовЗатрат.Добавить(СтрокаНапр.СчетЗатрат);
			КонецЦикла;

			МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаРемонта, МассивКоэф, 2);
			Если МассивСумм = Неопределено ИЛИ МассивСумм.Количество() <> МассивКоэф.Количество() Тогда
				// есть не все данные, тогда выводим пустую строку
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
				Продолжить;
			КонецЕсли;

			// Шапка
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОЗ2");
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
			ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Строки по направлениям
			Для Каждого СтрокаНапр Из ТекущееНаправлениеАмортизации.Способы Цикл
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОЗ2");
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ОбластьМакета.Параметры.СуммаМодернизации 	= МассивСумм[СтрокаНапр.НомерСтроки - 1];
				ОбластьМакета.Параметры.СчетДт 				= МассивСчетовЗатрат[СтрокаНапр.НомерСтроки - 1];
				
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;		
			
			// Подвал
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОЗ2");
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
			//ОбластьМакета.Параметры.Заполнить(Выборка);

		Иначе
			
			ОбластьМакета.Параметры.Организация = "Управлінський облік";
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(Выборка);

		ТабДокумент.Вывести(ОбластьМакета);
	
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьОЗ2()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОЗ2упр" тогда
		ТабДокумент = ПечатьОЗ2();
	ИначеЕсли ИмяМакета = "ОЗ2бух" тогда
		ТабДокумент = ПечатьОЗ2(Ложь);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Ремонт ОС"));

КонецПроцедуры // Печать


// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	Если  ОтражатьВУправленческомУчете тогда 
		СтруктураМакетов.Вставить("ОЗ2упр","Форма ОЗ-2(упр. учет)");
	КонецЕсли;
	Если  ОтражатьВБухгалтерскомУчете тогда 		
		СтруктураМакетов.Вставить("ОЗ2бух","Форма ОЗ-2(бух. учет)");
	КонецЕсли;
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
///////////////////////////////////////////////////////////////////////////////

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
 	
	Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДока = Дата;

	СобытиеОС              = Движения.СобытияОС;
	НазваниеДокумента      = Метаданные().Представление();

	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Амортизация",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
	ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	
	ТекНаправление = СтруктураШапкиДокумента.СпособОтраженияРасходов;
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		// Движения по регистру СобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Событие              = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента    = НазваниеДокумента;
		Движение.НомерДокумента       = Номер;
		Движение.СуммаЗатрат          = СтрокаТЧ.СуммаРемонтаУУ;

		Если СтрокаТЧ.СуммаРемонтаУУ > 0 Тогда

			Если ТаблицаНаправлений <> Неопределено Тогда
				
				//Затраты списываются по способу отражения расходов по амортзации
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаТЧ.ОсновноеСредство,"ОС_УУ");
				ТекНаправление = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_УУ);
				                                          
			КонецЕсли;

			ТекМестонахождение = Неопределено;
			Если ТаблицаМестонахождений <> Неопределено Тогда
				
				//Затраты списываются по способу отражения расходов по амортзации
				ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаТЧ.ОсновноеСредство,"ОС_УУ");
				ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_УУ);
				                                          
			КонецЕсли;
			
			НоваяСтрока    = ТабАмортизации.Добавить();

			НоваяСтрока.Амортизация            = СтрокаТЧ.СуммаРемонтаУУ;
			НоваяСтрока.ОбъектУчета            = СтрокаТЧ.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации = ТекНаправление;
			НоваяСтрока.Местонахождение 		= ТекМестонахождение;

		КонецЕсли;

	КонецЦикла;

	// вызов процедуры списания амортизации по направлениям
	УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);

	
	// Движения по регистру Строительство
	СтроительствоОС       = Движения.СтроительствоОбъектовОсновныхСредств;
	ТаблицаСтроительство = СтроительствоОС.Выгрузить();
	Движение = ТаблицаСтроительство.Добавить();
	Движение.ОбъектСтроительства        = СтруктураШапкиДокумента.ОбъектСтроительства;
	Движение.Сумма                      = ТаблицаПоОС.Итог("СуммаРемонтаУУ");
	
	СтроительствоОС.мПериод          = ДатаДока;
	СтроительствоОС.мТаблицаДвижений = ТаблицаСтроительство;
	Движения.СтроительствоОбъектовОсновныхСредств.ВыполнитьРасход();

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)


	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	СписокОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	УправлениеВнеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(МоментВремени(), ТекОрганизация, ТаблицаПоОС,
	                                                  СтруктураШапкиДокумента, 
													  Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;

	ТЗНалоговыеНазначения = Неопределено;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
		
		// Сформируем движения по НДС до отражения в бухгалтерском учете, 
		// поскольку бухгалтерская стоимость зависит от права на налоговый кредит
		ТЗНалоговыеНазначения = ТаблицаПоОС.Скопировать();
		ФормированиеДвиженийПоПодсистемеНДС(СтруктураШапкиДокумента, ТЗНалоговыеНазначения, Отказ, Заголовок);
		
	КонецЕсли; 

	ТаблицаПоОС.Колонки.Добавить("СуммаНалоговогоКредита"); // в том числе
	ТаблицаПоОС.ЗаполнитьЗначения(0,"СуммаНалоговогоКредита");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если (ТЗНалоговыеНазначения <> Неопределено) и (ТЗНалоговыеНазначения.Количество() > 0) Тогда
			// Распределим по всем основным средствам пропорционально корректировки по налоговому кредиту
			
			Для каждого СтрокаТЗ Из ТЗНалоговыеНазначения Цикл
				
				СтруктураВидовДеятельности = Новый Структура("НалоговоеНазначение_ОС");
				СтруктураВидовДеятельности.НалоговоеНазначение_ОС = СтрокаТЗ.НалоговоеНазначениеПоФакту;
				
				ОбщаяСуммаРемонтаБУ = 0;
				
				МассивСтрок = ТаблицаПоОС.НайтиСтроки(СтруктураВидовДеятельности);
				КвоСтрокВМассиве = МассивСтрок.ВГраница();
				
				Для Н = 0 По КвоСтрокВМассиве Цикл
				
					ОбщаяСуммаРемонтаБУ = ОбщаяСуммаРемонтаБУ + МассивСтрок[Н].СуммаРемонтаБУ;
				
				КонецЦикла;
				
				Если ОбщаяСуммаРемонтаБУ = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				                       
				Коэф		= СтрокаТЗ.СуммаКорректировкиНалоговогоКредита / ОбщаяСуммаРемонтаБУ;
				Погрешность	= 0;
				
				Для  Н = 0 По КвоСтрокВМассиве Цикл
					
					СтрокаОС = МассивСтрок[Н];
					СтрокаОС.СуммаНалоговогоКредита	 = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэф*СтрокаОС.СуммаРемонтаБУ, 2, Погрешность);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СобытиеОС                = Движения.СобытияОСОрганизаций;
		ПроводкиБУ               = Движения.Хозрасчетный;
		НазваниеДокумента        = Метаданные().Представление();
		
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Амортизация",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		ТекНаправление                = СтруктураШапкиДокумента.СпособОтраженияРасходов;
		СчетУчетаОбъектаСтроительства = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;

		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			СуммаРемонтаБУОткорректированная = СтрокаТЧ.СуммаРемонтаБУ - СтрокаТЧ.СуммаНалоговогоКредита;
			
			// Движения по регистру событияОСОрганизаций
			Движение = СобытиеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
			Движение.СуммаЗатратБУ 		  = СуммаРемонтаБУОткорректированная;
			Движение.НомерДокумента       = Номер;
			Движение.НазваниеДокумента    = НазваниеДокумента;
				

			Если СуммаРемонтаБУОткорректированная > 0 Тогда
				
				Если ТаблицаНаправлений <> Неопределено Тогда
					
					//Затраты списываются по способу отражения расходов по амортзации
					ТекНаправление = ТаблицаНаправлений.Найти(СтрокаТЧ.ОсновноеСредство,"ОС_БУ");
					ТекНаправление = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_БУ);
					
				КонецЕсли;
				
				ТекМестонахождение = Неопределено;
				Если ТаблицаМестонахождений <> Неопределено Тогда
					
					//Затраты списываются по способу отражения расходов по амортзации
					ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаТЧ.ОсновноеСредство,"ОС_БУ");
					ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_БУ);
					                                          
				КонецЕсли;
				
				НоваяСтрока = ТабАмортизации.Добавить();
				НоваяСтрока.Амортизация            = СуммаРемонтаБУОткорректированная;
				НоваяСтрока.ОбъектУчета            = СтрокаТЧ.ОсновноеСредство;
				НоваяСтрока.НаправлениеАмортизации = ТекНаправление;
				НоваяСтрока.СчетАмортизации        = СчетУчетаОбъектаСтроительства;
				НоваяСтрока.ИмяСубконто = "ОбъектыСтроительства";
				
				НоваяСтрока.Местонахождение 		= ТекМестонахождение;
				
			КонецЕсли;

		КонецЦикла;
		
		// Корректировка налогового кредита
		СуммаПроводки =  -ТаблицаПоОС.Итог("СуммаНалоговогоКредита");
		
		Если СуммаПроводки <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = ТекОрганизация;
			Проводка.НомерЖурнала = "ОС";
			Проводка.Содержание   = "Корректировка налогового кредита";
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СчетДт       = СчетУчетаОбъектаСтроительства;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
			
			Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
			
		КонецЕсли;
		
		//вызов процедуры списания амортизации по направлениям
		УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямБухРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "ОС");

	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда 
		
		Если (ТЗНалоговыеНазначения <> Неопределено) и (ТЗНалоговыеНазначения.Количество() > 0) Тогда
			// Распределим по всем основным средствам пропорционально корректировки по налоговому кредиту
			
			Для каждого СтрокаТЗ Из ТЗНалоговыеНазначения Цикл
				
				СтруктураВидовДеятельности = Новый Структура("НалоговоеНазначение_ОС");
				СтруктураВидовДеятельности.НалоговоеНазначение_ОС = СтрокаТЗ.НалоговоеНазначениеПоФакту;
				
				ОбщаяСуммаРемонтаНУ = 0;
				
				МассивСтрок = ТаблицаПоОС.НайтиСтроки(СтруктураВидовДеятельности);
				КвоСтрокВМассиве = МассивСтрок.ВГраница();
				
				Для Н = 0 По КвоСтрокВМассиве Цикл
				
					ОбщаяСуммаРемонтаНУ = ОбщаяСуммаРемонтаНУ + МассивСтрок[Н].СуммаРемонтаНУ;
				
				КонецЦикла;
				
				Если ОбщаяСуммаРемонтаНУ = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Коэф		= СтрокаТЗ.СуммаКорректировкиНалоговогоКредита / ОбщаяСуммаРемонтаНУ;
				Погрешность	= 0;
				
				Для  Н = 0 По КвоСтрокВМассиве Цикл
					
					СтрокаОС = МассивСтрок[Н];
					СтрокаОС.СуммаНалоговогоКредита	 = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэф*СтрокаОС.СуммаРемонтаНУ, 2, Погрешность);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПроводкиНУ = Движения.Налоговый;

		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			Если СтрокаТЧ.УчитываетсяКакЗапасНУ = Истина Тогда
				
				Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СтатьяВаловыхРасходов) Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
										+ "Основное средство """ + ТекОс + """ учитывается как запас в налоговом учете."
										+ Символы.ПС + Символы.Таб + "Модернизация в этом случае относится на валовые расходы, а статья не указана."
										, Отказ, Заголовок);
					Продолжить
					
				КонецЕсли;
				
				//Тогда модернизация списывается на ВР
				СуммаПроводки = СтрокаТЧ.СуммаРемонтаНУ - СтрокаТЧ.СуммаНалоговогоКредита;
				
				Если СуммаПроводки <> 0 Тогда
					
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Модернизация";
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма        = СуммаПроводки;
					
					Проводка.СчетДт       = ПланыСчетов.Налоговый.ВаловыеРасходы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", СтрокаТЧ.ВидНалоговойДеятельности_ОС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиНалоговогоУчета", СтруктураШапкиДокумента.СтатьяВаловыхРасходов);
					
					Проводка.СчетКт       = ПланыСчетов.Налоговый.ВаловыеРасходы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", СтрокаТЧ.ВидНалоговойДеятельности_ОС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиНалоговогоУчета", СтруктураШапкиДокумента.СтатьяВаловыхРасходов);
					
				КонецЕсли;
				
				Продолжить
				
			КонецЕсли;
			
			НалоговаяГруппаОС = СтрокаТЧ.НалоговаяГруппаОС;
			
			Если СтрокаТЧ.ВидНалоговойДеятельности_ОС = Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда
				
				//Это непроизводственные ОС
				СчетУчетаРемонта = ПланыСчетов.Налоговый.НепроизводственныеОсновныеСредства;
				
			Иначе //Производственные ОС
				
				Пообъектно = СтрокаТЧ.Пообъектно;
				
				Если Пообъектно = Истина Тогда
					
					СчетУчетаРемонта = ПланыСчетов.Налоговый.МодернизацияИУлучшениеОбъектовОсновныхСредств;
					
				Иначе
					
					СчетУчетаРемонта = ПланыСчетов.Налоговый.МодернизацияИУлучшениеГруппОсновныхСредств;
					
				КонецЕсли;
				
			КонецЕсли;

			//Д  ОМО(Пообъектно = Истина) или ОМГ (Пообъектно = Ложь)
			СуммаПроводки = СтрокаТЧ.СуммаРемонтаНУ - СтрокаТЧ.СуммаНалоговогоКредита;

			Если СуммаПроводки <> 0 Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Ремонт";
				Проводка.НомерЖурнала = "ОС";
				Проводка.Сумма        = СуммаПроводки;
				
				Проводка.СчетДт       = СчетУчетаРемонта;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", СтрокаТЧ.ВидНалоговойДеятельности_ОС);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ГруппыОсновныхСредств", НалоговаяГруппаОС);

			КонецЕсли;
			
		КонецЦикла;

		
	КонецЕсли;
	
	//При распределении амортизации производилась промежуточная запись проводок.
	//Необходимо записать проводки с сохранением предыдущих движений.
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
		
		ПроводкиБУ.Записать(Ложь);
		
	КонецЕсли; 
		
КонецПроцедуры

// Процедура формирования движений по регистрам подсистемы учета НДС
//
// Параметры:
//		СтруктураШапкиДокумента
//		ТЗНалоговыеНазначения	- таблица с бухгалтерскими данными по основным средствам, в которую будет добавлена 
// 				информация о корректировке налогового кредита
Процедура ФормированиеДвиженийПоПодсистемеНДС(СтруктураШапкиДокумента, ТЗНалоговыеНазначения, Отказ, Заголовок)
	
	ДатаДока = Дата;

	// Объекты строительства
	
	// Спишем накопленный НДС из регистра. 
	// Суммы списываем в той пропорции, в какой стоимость принимаемых к учету объектов 
	// находится к стоимости всего остатка по налоговому учету
	
	ТекОрганизация         = СтруктураШапкиДокумента.Организация;
	ТекОбъектСтроительства = СтруктураШапкиДокумента.ОбъектСтроительства;
	ТекСтоимостьНУ         = СтруктураШапкиДокумента.СтоимостьНУ;
	
	Если ТекСтоимостьНУ = 0 Тогда
		
		//Проверять нечего.
		ТЗНалоговыеНазначения = Неопределено;
		Возврат
		
	КонецЕсли;
	
	// Получим остатки из регистра НДС
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
		
	Если ИспользоватьРасширеннуюАналитику Тогда
		ПериодГраница = Новый Граница (КонецМесяца(Дата), ВидГраницы.Включая);
	Иначе	
		ПериодГраница = Новый Граница (Дата, ВидГраницы.Включая);
	КонецЕсли;

	ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредствНалоговыйУчет.Остатки(ПериодГраница,
		             Новый Структура("Организация,ОбъектСтроительства", ТекОрганизация, ТекОбъектСтроительства));
					 
	ОстатокСтоимостиНУ = ВыборкаЗаписей.Итог("Стоимость");
	
	Если ОстатокСтоимостиНУ = 0 Тогда
		
		ТЗНалоговыеНазначения = Неопределено;
		ОбщегоНазначения.СообщитьОбОшибке("Остаточная стоимость по налоговому учету объекта строительства """ + ТекОбъектСтроительства + """ равна 0",Отказ, Заголовок);
		
		Возврат
		
	ИначеЕсли ОстатокСтоимостиНУ < ТекСтоимостьНУ Тогда
		
		ТЗВидыДеятельности = Неопределено;
		ОбщегоНазначения.СообщитьОбОшибке("Остаточная стоимость по налоговому учету объекта строительства """ + ТекОбъектСтроительства + """ равна "
		                    + Формат(ОстатокСтоимостиНУ,"ЧЦ=15; ЧДЦ=2") + " что меньше, указанной в документе "
							+ Формат(ТекСтоимостьНУ,"ЧЦ=15; ЧДЦ=2"), Отказ, Заголовок);
		Возврат
		
	КонецЕсли;
	
	//Получим суммы модернизации в разрезе налогового назначения ОС
	ТЗНалоговыеНазначения.Свернуть("НалоговоеНазначение_ОС", "СуммаРемонтаНУ");
	
	Для каждого СтрокаТЗ Из ТЗНалоговыеНазначения Цикл
		
		//Определим часть списания приходящуюся на: НалоговоеНазначение_ОС 
		Коэф =  СтрокаТЗ.СуммаРемонтаНУ / ОстатокСтоимостиНУ;
		
		Если Коэф = 0 Тогда
			
			Продолжить
			
		КонецЕсли;
		
		//Распределяем с учетом погрешности
		Погрешность            = 0;
		ПогрешностьНДСВходящий = 0;
		ПогрешностьНДСКредит   = 0;
		
		Для каждого ЗаписьПоОстаткуНДС Из ВыборкаЗаписей Цикл
			
			Движение = Движения.СтроительствоОбъектовОсновныхСредствНалоговыйУчет.ДобавитьРасход();
			
			Движение.Период							= ДатаДока;
			Движение.ОбъектСтроительства			= ТекОбъектСтроительства;
			Движение.Организация					= ТекОрганизация;
	 		Движение.НалоговоеНазначение     		= ЗаписьПоОстаткуНДС.НалоговоеНазначение;
			
			// Ресурсы списываем с учетом коэффициента и погрешности в пределах комбинации: ВидНалоговойДеятельности_ОС, ВидДеятельностиНДС_ОС
			Движение.Стоимость						= ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэф * ЗаписьПоОстаткуНДС.Стоимость,   2, Погрешность);
			Движение.НДСВходящий					= ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэф * ЗаписьПоОстаткуНДС.НДСВходящий, 2, ПогрешностьНДСВходящий);
			Движение.НДСКредит						= ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэф * ЗаписьПоОстаткуНДС.НДСКредит,   2, ПогрешностьНДСКредит);
			
			// Устанавливаем реквизиты фактической принадлежности объекта строительства
			// к облагаемой деятельности
			Движение.НалоговоеНазначениеПоФакту      	= СтрокаТЗ.НалоговоеНазначение_ОС;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	// Обработаем корретировки налогового кредита, к которым привело такое фактическое использование объектов строительства
	ТаблицаСписанияНДС = Движения.СтроительствоОбъектовОсновныхСредствНалоговыйУчет.Выгрузить();
	НалоговыйУчет.ПолучитьТаблицуКорректировокНалоговогоКредита(ТаблицаСписанияНДС);
	
	Для каждого СтрокаСписанияНДС Из ТаблицаСписанияНДС Цикл
	
		Если СтрокаСписанияНДС.СуммаКорректировкиНалоговогоКредита = 0 Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		// Зафиксируем в регистре необходимость корректировки
		Движение = Движения.КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет.ДобавитьПриход();
		
		Движение.Период							 = ДатаДока;
		Движение.Организация					 = СтрокаСписанияНДС.Организация;
		Движение.ОбъектСтроительства			 = СтрокаСписанияНДС.ОбъектСтроительства;
 		Движение.НалоговоеНазначение		 	 = СтрокаСписанияНДС.НалоговоеНазначение;
	 	Движение.НалоговоеНазначениеПоФакту 	 = СтрокаСписанияНДС.НалоговоеНазначениеПоФакту;
		
		Движение.НДСКредит						 = СтрокаСписанияНДС.НДСКредит;
		Движение.НДСКредитПоФакту				 = СтрокаСписанияНДС.НДСКредит + СтрокаСписанияНДС.СуммаКорректировкиНалоговогоКредита;
		
		Движение.КодОперации = Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПредполагаемаяКорректрировка;
		
	КонецЦикла; 
	
	// Изменения  стоимости основных средств из-за потери/получения права на налоговый кредит в резрезе НалоговоеНазначениеПоФакту
	ТаблицаСписанияНДС.Свернуть("НалоговоеНазначениеПоФакту", "СуммаКорректировкиНалоговогоКредита");
	ТЗНалоговыеНазначения = ТаблицаСписанияНДС;
	
КонецПроцедуры // ФормированиеДвиженийПоПодсистемеНДС()

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("ОбъектСтроительства");
	
	Если СтруктураШапкиДокумента.ИспользоватьОбщийСпособОтраженияРасходов Тогда
		
		СтруктураПолей.Вставить("СпособОтраженияРасходов");
		
	КонецЕсли;
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения, ТаблицаПоОС, Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; 
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		// Проверим возможность изменения состояния ОС
		Для каждого СтрокаОС из ТаблицаПоОС Цикл
			Если ОтражатьВБухгалтерскомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьИзмененияСостоянияОС(СтрокаОС.ОсновноеСредство,Дата,СобытиеРегл,Отказ,Организация);
			КонецЕсли;
			Если ОтражатьВУправленческомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьИзмененияСостоянияОС(СтрокаОС.ОсновноеСредство,Дата,Событие,Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитов()

// Проверяет заполнение табличной части документа
// для управленческого учета
Процедура ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок)
	
	// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
	Если ТаблицаОС.Итог("СуммаРемонтаУУ")<> СтруктураШапкиДокумента.СтоимостьУУ Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("По управленческому учету общая сумма ремонта, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если ТаблицаОС.Итог("СуммаРемонтаБУ")<> СтруктураШапкиДокумента.СтоимостьБУ Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("По бухгалтерскому учету общая сумма ремонта, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если ТаблицаОС.Итог("СуммаРемонтаНУ")<> СтруктураШапкиДокумента.СтоимостьНУ Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("По налоговому учету общая сумма ремонта, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(РежимПроведения, ТаблицаПоОС, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		
		ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
			И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
			
		Если ИспользоватьРасширеннуюАналитику Тогда
			ПериодГраница = Новый Граница (КонецМесяца(Дата), ВидГраницы.Включая);
		Иначе	
			ПериодГраница = Новый Граница (Дата, ВидГраницы.Включая);
		КонецЕсли;
			
		ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.Остатки(ПериодГраница,Новый Структура("ОбъектСтроительства",СтруктураШапкиДокумента.ОбъектСтроительства));
		
		ОстатокСтоимости = ВыборкаЗаписей.Итог("Сумма");
		
		Требуется = СтруктураШапкиДокумента.СтоимостьУУ;
		
		Если Требуется > ОстатокСтоимости Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("По управленческому учету для объекта строительства остаток суммы меньше суммы модернизации"+ Символы.ПС + Символы.Таб +
			                    "Не хватает " + ?(ОстатокСтоимости > 0 , Требуется - ОстатокСтоимости, Требуется ) +
			                    "; Остаток " + ОстатокСтоимости +
			                    "; Требуется " + Требуется , Отказ,Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("Событие");
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	// Проверим чем заполнено событие
	ВидыСобытий = ПолучитьСписокЗначенийВидыСобытий();
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
							  ВидыСобытий,
							  ПредставлениеРеквизита,Отказ);
	
	ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеДокументаРегл( СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("СобытиеРегл");
	СтруктураПолей.Вставить("СчетУчетаБУВнеоборотногоАктива");
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	// Проверим чем заполнено событие
	ВидыСобытий = ПолучитьСписокЗначенийВидыСобытий();
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
							  ВидыСобытий,
							  ПредставлениеРеквизита,Отказ);
	
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаОС, Отказ, Заголовок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	                                                           	
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Документ не используется! Вместо него следует использовать ""Модернизация и ремонт ОС""';uk='Документ не використовується! Замість нього треба використовувати ""Модернізація та ремонт ОЗ""'"), Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;

	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	
	СтруктураПолей.Вставить("СуммаРемонтаУУ", "СуммаРемонтаУУ");
	СтруктураПолей.Вставить("СуммаРемонтаБУ", "СуммаРемонтаБУ");
	СтруктураПолей.Вставить("СуммаРемонтаНУ", "СуммаРемонтаНУ");
	

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ПроверитьЗаполнениеДокумента(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
	
	ТаблицаНаправлений = Неопределено;

	Если НЕ СтруктураШапкиДокумента.ИспользоватьОбщийСпособОтраженияРасходов Тогда
		
		Упр  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
		Бухг = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
		
		Запрос   = Новый Запрос;
		Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ТекПериод",      МоментВремени());
		Запрос.УстановитьПараметр("СписокОС",       ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"));
		Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
						|	СпособыОтраженияУУ.ОсновноеСредство                      КАК ОС_УУ,
						|	СпособыОтраженияУУ.СпособыОтраженияРасходовПоАмортизации КАК Направление_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
						|	СпособыОтраженияБУ.ОсновноеСредство                      КАК ОС_БУ,
						|	СпособыОтраженияБУ.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ", "") + "
						|ИЗ" + ?(Упр,"
						|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(
						|		            &ТекПериод,
						|		            ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияУУ", "") + ?(Упр и Бухг,"
						|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг," 
						|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
						|			                &ТекПериод, 
						|			                ОсновноеСредство В (&СписокОС)
						|		                    И Организация = &ТекОрганизация) КАК СпособыОтраженияБУ", "") + ?(Упр и Бухг,"
						|		ПО СпособыОтраженияУУ.ОсновноеСредство = СпособыОтраженияБУ.ОсновноеСредство", "");
		ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Упр  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бухг = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      МоментВремени());
	Запрос.УстановитьПараметр("СписокОС",       ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
					|	МестонахождениеОСУУ.ОсновноеСредство 	КАК ОС_УУ,
					|	МестонахождениеОСУУ.Местонахождение 	КАК Местонахождение_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
					|	МестонахождениеОСБУ.ОсновноеСредство 	КАК ОС_БУ,
					|	МестонахождениеОСБУ.Местонахождение 	КАК Местонахождение_БУ", "") + "
					|ИЗ" + ?(Упр,"
					|	РегистрСведений.МестонахождениеОС.СрезПоследних(
					|		            &ТекПериод,
					|		            ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОСУУ", "") + ?(Упр и Бухг,"
					|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг," 
					|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
					|			                &ТекПериод, 
					|			                ОсновноеСредство В (&СписокОС)
					|		                    И Организация = &ТекОрганизация) КАК МестонахождениеОСБУ", "") + ?(Упр и Бухг,"
					|		ПО МестонахождениеОСУУ.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство", "");
	ТаблицаМестонахождений = Запрос.Выполнить().Выгрузить();
	
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

