////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Предопределенные значения справочника "КлассификаторИспользованияРабочегоВремени"
Перем КлассификаторНочноеВремя, КлассификаторВечернееВремя;

// Значения справочника Классификатор использования рабочего времени. 
Перем КлассификаторЯвка;
Перем КлассификаторНочныеЧасы;
Перем КлассификаторВечерниеЧасы;
Перем КлассификаторПустаяСсылка;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУпрУчета Экспорт;
Перем мПрежнееОтражатьВУправленческомУчете;
Перем мУдалятьДвижения;

// Значение  "ПоДням" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоДням;
// Значение  "ПоЧасам" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоЧасам;
// Индекс записи в наборе записей регистра сведений Графика
Перем ИндексЗаписиЯвка;
// Дата на которую происходит получение записи регистра.
Перем ДатаИндексаЗаписиЯвка;

//Перем ПериодРегистрации;
Перем СтруктураПоиска;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура предназначена для автозаполнения документа
// Если заполнен параметр сотрудники, то в табличную часть будут добавлены 
// строки по указаным сотрудникам.
Процедура Автозаполнение(ПостроительЗапроса = Неопределено, Сотрудники = Неопределено, ТекущаяСтрокаТабличнойЧасти = Неопределено) Экспорт
	
	ЗапросАвтоЗаполнения = Новый Запрос;
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросАвтоЗаполнения.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ТрудовойДоговор", Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	ЗапросАвтоЗаполнения.УстановитьПараметр("НачалоМесяца", ПериодРегистрации);
	ЗапросАвтоЗаполнения.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаНачалаПериода", ДатаНачалаПериода);
		ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаОкончанияПериода", ДатаНачалаПериода);
	Иначе
		ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаНачалаПериода", ПериодРегистрации);
		ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаОкончанияПериода", КонецМесяца(ПериодРегистрации));
	КонецЕсли;
	ЗапросАвтоЗаполнения.УстановитьПараметр("УчитыватьОтработанноеВремя", УчитыватьОтработанноеВремя);
	ЗапросАвтоЗаполнения.УстановитьПараметр("Месяц", ПериодРегистрации);
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоДням", ВидУчетаВремениПоДням);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоЧасам", ВидУчетаВремениПоЧасам);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоВечернимЧасам", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторЯ", Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторВЧ", КлассификаторВечернееВремя);
	ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторНЧ", КлассификаторНочноеВремя);
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ЗапросАвтоЗаполнения.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПустойДокумент", Документы.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка());
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("СверхНормы", Перечисления.ВидыВремени.ОтработанноеСверхНормы);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПустойКлассификатор", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПоВечерним", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПоНочным", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам); 
	
	ВидыВремениУчитываемыеВВыходные = Новый Массив(2);
	ВидыВремениУчитываемыеВВыходные[0] = Перечисления.ВидыВремени.ОтработанноеСверхНормы;
	ВидыВремениУчитываемыеВВыходные[1] = Перечисления.ВидыВремени.ЦелодневноеНеотработанное;
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидыВремениУчитываемыеВВыходные", ВидыВремениУчитываемыеВВыходные);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПустойГрафик", Справочники.ГрафикиРаботы.ПустаяСсылка());
	
	Если ПостроительЗапроса = Неопределено Тогда 
		
		Если Сотрудники = Неопределено Тогда
			СотрудникиТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник КАК Ссылка
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоМесяца, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И (РаботникиОрганизаций.ПодразделениеОрганизации = &Подразделение
			|			ИЛИ &Подразделение = &ПустоеПодразделение)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.Период > &НачалоМесяца
			|	И РаботникиОрганизаций.Период <= &КонецМесяца
			|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
			|	И РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И (РаботникиОрганизаций.ПодразделениеОрганизации = &Подразделение
			|			ИЛИ &Подразделение = &ПустоеПодразделение)
			|
			|"; 
			
			ЗапросАвтоЗаполнения.Текст = СотрудникиТекст;
			СписокСотрудников = ЗапросАвтоЗаполнения.Выполнить().Выгрузить();
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", ?(УчитыватьОтработанноеВремя,Ложь, Истина));
		Иначе
			СписокСотрудников = Сотрудники;
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Истина);
		КонецЕсли;
	Иначе
		
		ИсходныйТекстПостроителя = ПостроительЗапроса.Текст;
		ТекстЗапросаПоСпискуРаботников = СтрЗаменить(ИсходныйТекстПостроителя,"РАЗРЕШЕННЫЕ","");
		ТекстЗапросаПоСпискуРаботников = Лев(ТекстЗапросаПоСпискуРаботников, Найти(ТекстЗапросаПоСпискуРаботников,"УПОРЯДОЧИТЬ") - 1);
		
		СотрудникиТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокРаботников.Сотрудник КАК Ссылка
		|ИЗ
		|	(" + ТекстЗапросаПоСпискуРаботников + ") КАК СписокРаботников ";
		ПостроительЗапроса.Текст = СотрудникиТекст;
		ПостроительЗапроса.Выполнить();
		СписокСотрудников = ПостроительЗапроса.Результат.Выгрузить();
		ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", ?(УчитыватьОтработанноеВремя,Ложь, Истина));
	КонецЕсли;
	ЗапросАвтоЗаполнения.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		
		// Заполнение за целый период.
		ЗапросАвтоЗаполненияТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.ФизЛицо КАК ФизЛицо,
		|	СУММА(ВЫБОР 
		|		КОГДА (ПосчитанноеВремя.ВидВремени Есть NULL) 
		|			ИЛИ ПосчитанноеВремя.ВидВремени.РабочееВремя Тогда
		|			ЕСТЬNULL(ПосчитанноеВремя.Дней, 0)
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ) КАК Дней,
		|	СУММА(ВЫБОР
		|		КОГДА (ПосчитанноеВремя.ВидВремени Есть NULL) 
		|			ИЛИ ПосчитанноеВремя.ВидВремени.РабочееВремя Тогда
		|			ЕСТЬNULL(ПосчитанноеВремя.Часов, 0)  
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ) КАК Часов	
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|			ЕСТЬNULL(СводныеИндивидуальныеГрафики.Дней, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоДням) КАК Дней,
		|			ЕСТЬNULL(СводныеИндивидуальныеГрафики.Часов, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоЧасам) КАК Часов,
		|			ПосчитаннаяНормаВремени.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидВремени
		|		ИЗ
		|			Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ДниСотрудников.Сотрудник КАК Сотрудник,
		|					СУММА(ВЫБОР
		|							КОГДА ДневныеНеявки.ВидВремени = 1
		|								ТОГДА 0
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = &ПоЧасам
		|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ДополнительноеЗначение, ОбщиеГрафики.ДополнительноеЗначение)
		|						КОНЕЦ) КАК ОсновноеЗначениеПоДням,
		|					СУММА(ВЫБОР
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = &ПоЧасам
		|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
		|						КОНЕЦ - ЕСТЬNULL(ДневныеНеявки.Часов, 0)) КАК ОсновноеЗначениеПоЧасам,
		|					КОЛИЧЕСТВО(ВведенныеТабеля.ГрафикРаботы) КАК ВведенныеТабеля,
		|					ДневныеНеявки.ВидРасчета КАК ВидРасчета,
		|					ЕСТЬNULL(ДневныеНеявки.ДействуетВесьПериод, ИСТИНА) КАК ДействуетВесьПериод
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ДатыПериода.Дата КАК Дата,
		|						РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|						МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаИзменения
		|					ИЗ
		|						(ВЫБРАТЬ
		|							ГрафикиРаботыПоВидамВремени.Дата КАК Дата
		|						ИЗ
		|							РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|						ГДЕ
		|							ГрафикиРаботыПоВидамВремени.План
		|							И ГрафикиРаботыПоВидамВремени.Дата >= &НачалоМесяца
		|							И ГрафикиРаботыПоВидамВремени.Дата <= &КонецМесяца
		|						
		|						СГРУППИРОВАТЬ ПО
		|							ГрафикиРаботыПоВидамВремени.Дата) КАК ДатыПериода
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|							ПО (РаботникиОрганизаций.Сотрудник В (&СписокСотрудников))
		|								И РаботникиОрганизаций.Период <= ДатыПериода.Дата
		|					
		|					СГРУППИРОВАТЬ ПО
		|						РаботникиОрганизаций.Сотрудник,
		|						ДатыПериода.Дата) КАК ДниСотрудников
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|						ПО РаботникиОрганизаций.Сотрудник = ДниСотрудников.Сотрудник
		|							И РаботникиОрганизаций.Период = ДниСотрудников.ДатаИзменения
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ВведенныеТабеля
		|						ПО ВведенныеТабеля.ГрафикРаботы = ДниСотрудников.Сотрудник
		|							И ((НЕ ВведенныеТабеля.План))
		|							И (ВведенныеТабеля.Документ <> &ДокументСсылка)
		|							И (ВведенныеТабеля.Документ <> &ПустойДокумент)
		|							И ВведенныеТабеля.Дата = ДниСотрудников.Дата
		|							И (ВведенныеТабеля.ВидУчетаВремени = &ПоЧасам)
		|							И (ВведенныеТабеля.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ИндивидуальныеГрафики
		|						ПО ИндивидуальныеГрафики.ГрафикРаботы = ДниСотрудников.Сотрудник
		|							И (ИндивидуальныеГрафики.План)
		|							И ИндивидуальныеГрафики.Дата = ДниСотрудников.Дата
		|							И (ИндивидуальныеГрафики.ВидУчетаВремени В (&ПоЧасам, &ПоВечерним, &ПоНочным))
		|							И (ИндивидуальныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ОбщиеГрафики
		|						ПО (ОбщиеГрафики.ГрафикРаботы = РаботникиОрганизаций.ГрафикРаботы)
		|							И (ОбщиеГрафики.План)
		|							И ОбщиеГрафики.Дата = ДниСотрудников.Дата
		|							И (ОбщиеГрафики.ВидУчетаВремени В (&ПоЧасам, &ПоВечерним, &ПоНочным))
		|						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							ДневныеНеявки.Сотрудник КАК Сотрудник,
		|							ДневныеНеявки.ПериодДействияНачало КАК ПериодДействияНачало,
		|							ДневныеНеявки.ПериодДействияКонец КАК ПериодДействияКонец,
		|							ВЫБОР
		|								КОГДА ВнутрисменноеВремя.ВидВремени = 0
		|									ТОГДА NULL
		|								ИНАЧЕ ДневныеНеявки.ВидРасчета
		|							КОНЕЦ КАК ВидРасчета,
		|							ВнутрисменноеВремя.Часов КАК Часов,
		|							ВнутрисменноеВремя.ВидВремени КАК ВидВремени,
		|							ВЫБОР
		|								КОГДА ВнутрисменноеВремя.ВидВремени = 0
		|									ТОГДА NULL
		|								КОГДА ДневныеНеявки.ПериодДействияНачало = &НачалоМесяца
		|										И НАЧАЛОПЕРИОДА(ДневныеНеявки.ПериодДействияКонец, ДЕНЬ) = &КонецМесяца
		|									ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК ДействуетВесьПериод
		|						ИЗ
		|							(ВЫБРАТЬ
		|								СУММА(ВЫБОР
		|										КОГДА ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сторно
		|											ТОГДА -1
		|										ИНАЧЕ 1
		|									КОНЕЦ) КАК ПризнакСторно,
		|								ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета КАК ВидРасчета,
		|								ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало КАК ПериодДействияНачало,
		|								ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец КАК ПериодДействияКонец,
		|								ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сотрудник КАК Сотрудник,
		|								ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидУчетаВремени КАК ВидУчетаВремени
		|							ИЗ
		|								РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
		|							ГДЕ
		|								ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Регистратор <> &ДокументСсылка
		|								И ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета.ВидВремени <> Значение(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
		|								И ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействия = &Месяц
		|								И ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сотрудник В(&СписокСотрудников)
		|								И ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействия = &Месяц
		|								И ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> &ПустойКлассификатор
		|							
		|							СГРУППИРОВАТЬ ПО
		|								ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета,
		|								ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало,
		|								ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец,
		|								ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сотрудник,
		|								ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидУчетаВремени) КАК ДневныеНеявки
		|								ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|									ВнутрисменноеВремя.Сотрудник КАК Сотрудник,
		|									ВнутрисменноеВремя.Период КАК Период,
		|									ВнутрисменноеВремя.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
		|									ВнутрисменноеВремя.Часов КАК Часов,
		|									0 КАК ВидВремени
		|								ИЗ
		|									РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменноеВремя
		|								ГДЕ
		|									ВнутрисменноеВремя.Сотрудник В(&СписокСотрудников)
		|									И НАЧАЛОПЕРИОДА(ВнутрисменноеВремя.Период, МЕСЯЦ) = &Месяц
		|								
		|								ОБЪЕДИНИТЬ ВСЕ
		|								
		|								ВЫБРАТЬ
		|									ВнутрисменноеВремя.Сотрудник,
		|									ВнутрисменноеВремя.Период,
		|									ВнутрисменноеВремя.ВидИспользованияРабочегоВремени,
		|									ВнутрисменноеВремя.Часов,
		|									1
		|								ИЗ
		|									РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменноеВремя
		|								ГДЕ
		|									ВнутрисменноеВремя.Сотрудник В(&СписокСотрудников)
		|									И НАЧАЛОПЕРИОДА(ВнутрисменноеВремя.Период, МЕСЯЦ) = &Месяц) КАК ВнутрисменноеВремя
		|								ПО ВнутрисменноеВремя.Сотрудник = ДневныеНеявки.Сотрудник
		|									И (ВнутрисменноеВремя.Период МЕЖДУ ДневныеНеявки.ПериодДействияНачало И ДневныеНеявки.ПериодДействияКонец)
		|									И ВнутрисменноеВремя.ВидИспользованияРабочегоВремени = ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
		|						ГДЕ
		|							ДневныеНеявки.ПризнакСторно > 0 
		|							) КАК ДневныеНеявки
		|						ПО ДневныеНеявки.Сотрудник = ДниСотрудников.Сотрудник
		|							И (ДниСотрудников.Дата МЕЖДУ ДневныеНеявки.ПериодДействияНачало И ДневныеНеявки.ПериодДействияКонец)
		|				СГРУППИРОВАТЬ ПО
		|					ДниСотрудников.Сотрудник,
		|					ДневныеНеявки.ВидРасчета,
		|					ДневныеНеявки.ДействуетВесьПериод) КАК ПосчитаннаяНормаВремени
		|				ПО ПосчитаннаяНормаВремени.Сотрудник = СотрудникиОрганизаций.Ссылка
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|				ПО СводныеИндивидуальныеГрафики.Сотрудник = СотрудникиОрганизаций.Ссылка
		|					И (СводныеИндивидуальныеГрафики.Месяц = &Месяц)
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабеля
		|				ПО СводныеТабеля.Сотрудник = СотрудникиОрганизаций.Ссылка
		|					И (СводныеТабеля.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
		|					И (СводныеТабеля.Регистратор <> &ДокументСсылка)
		|					И (СводныеТабеля.Период = &Месяц)
		|						
		|				ЛЕВОЕ СОЕДИНЕНИЕ 
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ВведенныеНаряды.Регистратор,
		|						ВведенныеНаряды.Сотрудник
		|					ИЗ
		|						РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ВведенныеНаряды
		|					ГДЕ
		|					НАЧАЛОПЕРИОДА(ВведенныеНаряды.Период, МЕСЯЦ) = &Месяц
		|					И ВведенныеНаряды.Регистратор <> &ДокументСсылка
		|					И ВведенныеНаряды.Регистратор ССЫЛКА Документ.СдельныйНаряд) КАК ВведенныеНаряды
		|				ПО ВведенныеНаряды.Сотрудник = СотрудникиОрганизаций.Ссылка
		|						
		|		ГДЕ
		|			СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)
		|			И ПосчитаннаяНормаВремени.ВведенныеТабеля = 0
		|			И СводныеТабеля.Сотрудник ЕСТЬ NULL 
		|			И ВведенныеНаряды.Регистратор ЕСТЬ NULL
		|			И (СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ NULL 
		|					ИЛИ ПосчитаннаяНормаВремени.ДействуетВесьПериод)) КАК ПосчитанноеВремя
		|		ПО ПосчитанноеВремя.Сотрудник = СотрудникиОрганизаций.Ссылка
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)
		|	И (&ВключатьВРезультатПустыеЗаписи
		|			ИЛИ ((НЕ ПосчитанноеВремя.Часов ЕСТЬ NULL) И ПосчитанноеВремя.Часов <> 0))
		|	
		|СГРУППИРОВАТЬ ПО	
		|	СотрудникиОрганизаций.Ссылка
		|	
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник ";
	Иначе
		// Заполнение с разбивкой по дням.
		
		ЗапросАвтоЗаполненияТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
		|	ГрафикиРаботыПоВидамВремени.Месяц,
		|	ГрафикиРаботыПоВидамВремени.Дата,
		|	ГрафикиРаботыПоВидамВремени.План,
		|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
		|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
		|	ГрафикиРаботыПоВидамВремени.Документ
		|ПОМЕСТИТЬ ВТГрафикиРаботыПоВидамВремени
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизацийСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&НачалоМесяца,
		|			Сотрудник В (&СписокСотрудников)
		|				И ГрафикРаботы <> &ПустойГрафик) КАК РаботникиОрганизацийСрезПоследних
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РаботникиОрганизаций.ГрафикРаботы
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ГДЕ
		|		РаботникиОрганизаций.Сотрудник В(&СписокСотрудников)
		|		И РаботникиОрганизаций.Период > &НачалоМесяца
		|		И РаботникиОрганизаций.Период <= &КонецМесяца
		|		И РаботникиОрганизаций.ГрафикРаботы <> &ПустойГрафик
		|	
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВыбранныеСотрудники.Ссылка
		|	ИЗ
		|		Справочник.СотрудникиОрганизаций КАК ВыбранныеСотрудники
		|	ГДЕ
		|		ВыбранныеСотрудники.Ссылка В(&СписокСотрудников)) КАК ГрафикиРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы
		|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
		|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ПустойДокумент)
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
		|			И ((НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ))
		|ГДЕ
		|	(НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL )";
		
		ЗапросАвтоЗаполнения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросАвтоЗаполнения.Текст = ЗапросАвтоЗаполненияТекст;
		
		ЗапросАвтоЗаполнения.Выполнить();
		
		ЗапросАвтоЗаполненияТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка Как Сотрудник,
		|	Сотрудники.ФизЛицо Как ФизЛицо,
		|	ДниСотрудников.Дата,
		|	День(ДниСотрудников.Дата) Как День,
		|	
		|	Сумма(Выбор 
		|		Когда ДниСотрудников.ВидВремени.РабочееВремя Тогда ДниСотрудников.ОсновноеЗначение
		|		Иначе 0
		|	Конец )Как ОсновноеЗначение
		|	
		|	ИЗ
		|		Справочник.СотрудникиОрганизаций Как Сотрудники
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|	ДниСотрудников.Сотрудник,
		|	ДниСотрудников.Дата,
		|	ВЫБОР
		|		КОГДА (НЕ ДневныеНеявки.ВидРасчета ЕСТЬ NULL )
		|				И (ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|					ИЛИ ДневныеНеявки.ВидРасчета.ВидВремени В (&ВидыВремениУчитываемыеВВыходные))
		|			ТОГДА ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
		|		КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = &ПоЧасам
		|						ТОГДА &КлассификаторЯ
		|				КОНЕЦ
		|	КОНЕЦ КАК ВидВремени,
		|	ВЫБОР
		|		КОГДА (НЕ ДневныеНеявки.ВидРасчета ЕСТЬ NULL )
		|				И (ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|					ИЛИ ДневныеНеявки.ВидРасчета.ВидВремени В (&ВидыВремениУчитываемыеВВыходные))
		|			ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ЕСТЬNULL(ОбщиеГрафики.ОсновноеЗначение, 0)) = 0
		|							ТОГДА 8
		|						ИНАЧЕ ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
		|				  КОНЕЦ
		|		КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|			ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
		|	КОНЕЦ КАК ОсновноеЗначение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДатыПериода.Дата КАК Дата,
		|		РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаИзменения
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ГрафикиРаботыПоВидамВремени.Дата КАК Дата
		|		ИЗ
		|			ВТГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ГДЕ
		|			ГрафикиРаботыПоВидамВремени.План
		|			И ГрафикиРаботыПоВидамВремени.Дата >= &НачалоМесяца
		|			И ГрафикиРаботыПоВидамВремени.Дата <= &КонецМесяца
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ГрафикиРаботыПоВидамВремени.Дата) КАК ДатыПериода
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО (РаботникиОрганизаций.Сотрудник В (&СписокСотрудников))
		|				И РаботникиОрганизаций.Период <= ДатыПериода.Дата
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОрганизаций.Сотрудник,
		|		ДатыПериода.Дата) КАК ДниСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО РаботникиОрганизаций.Сотрудник = ДниСотрудников.Сотрудник
		|			И РаботникиОрганизаций.Период = ДниСотрудников.ДатаИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ВведенныеТабеля
		|		ПО ВведенныеТабеля.ГрафикРаботы = ДниСотрудников.Сотрудник
		|			И ((НЕ ВведенныеТабеля.План))
		|			И ВведенныеТабеля.Дата = ДниСотрудников.Дата
		|			И (ВведенныеТабеля.ВидУчетаВремени = &ПоЧасам)
		|			И (ВведенныеТабеля.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ВведенныеНаряды
		|		ПО ВведенныеНаряды.Период МЕЖДУ &ДатаНачалаПериода И &ДатаОкончанияПериода
		|			И ВведенныеНаряды.Регистратор <> &ДокументСсылка
		|			И &УчитыватьОтработанноеВремя
		|			И ВведенныеНаряды.Сотрудник = ДниСотрудников.Сотрудник
	    |
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|		ПО СводныеИндивидуальныеГрафики.Сотрудник = ДниСотрудников.Сотрудник
		|			И (СводныеИндивидуальныеГрафики.Месяц = &Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабеля
		|		ПО СводныеТабеля.Сотрудник = ДниСотрудников.Сотрудник
		|			И (СводныеТабеля.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
		|			И (СводныеТабеля.Регистратор <> &ДокументСсылка)
		|			И (СводныеТабеля.Период = &Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			(ВЫБРАТЬ
		|			СУММА(ВЫБОР
		|					КОГДА ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сторно
		|						ТОГДА -1
		|					ИНАЧЕ 1
		|				КОНЕЦ) КАК ПризнакСторно,
		|			ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета КАК ВидРасчета,
		|			ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало КАК ПериодДействияНачало,
		|			ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец КАК ПериодДействияКонец,
		|			ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сотрудник КАК Сотрудник,
		|			ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидУчетаВремени КАК ВидУчетаВремени
		|		ИЗ
		|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
		|		ГДЕ
		|			ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Регистратор <> &ДокументСсылка
		|			И ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета.ВидВремени <> Значение(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)
		|			И ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействия = &Месяц
		|				
		|		СГРУППИРОВАТЬ ПО
		|			ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета,
		|			ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало,
		|			ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец,
		|			ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сотрудник,
		|			ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидУчетаВремени) КАК ДневныеНеявки
		|		ПО ДневныеНеявки.Сотрудник = ДниСотрудников.Сотрудник
		|			И ДневныеНеявки.ПризнакСторно > 0
		|			И (ДниСотрудников.Дата МЕЖДУ ДневныеНеявки.ПериодДействияНачало И ДневныеНеявки.ПериодДействияКонец)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныеГрафики
		|		ПО ИндивидуальныеГрафики.ГрафикРаботы = ДниСотрудников.Сотрудник
		|			И (ИндивидуальныеГрафики.План)
		|			И ИндивидуальныеГрафики.Дата = ДниСотрудников.Дата
		|			И (ИндивидуальныеГрафики.ВидУчетаВремени = &ПоЧасам)
		|			И (ИндивидуальныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
		|			И (ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
		|				ИЛИ ИндивидуальныеГрафики.ВидУчетаВремени = &ПоЧасам)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ОбщиеГрафики
		|		ПО ОбщиеГрафики.ГрафикРаботы = РаботникиОрганизаций.ГрафикРаботы
		|			И (ОбщиеГрафики.План)
		|			И ОбщиеГрафики.Дата = ДниСотрудников.Дата
		|			И (ОбщиеГрафики.ВидУчетаВремени = &ПоЧасам)
		|			И (ИндивидуальныеГрафики.ГрафикРаботы ЕСТЬ NULL )
		|			И (ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
		|				ИЛИ ОбщиеГрафики.ВидУчетаВремени = &ПоЧасам)
		|ГДЕ
		|	РаботникиОрганизаций.ГрафикРаботы <> &ПустойГрафик
		|	И СводныеТабеля.НомерСтроки ЕСТЬ NULL 
		|   И ВведенныеНаряды.Регистратор ЕСТЬ NULL
		|	И ВведенныеТабеля.ГрафикРаботы ЕСТЬ NULL 
		|	И СводныеИндивидуальныеГрафики.НомерСтроки ЕСТЬ NULL 
		|	И ((НЕ ДневныеНеявки.ВидРасчета ЕСТЬ NULL )
		|			ИЛИ ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
		|				И ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0)
		|	) КАК ДниСотрудников
		|	ПО НЕ ДниСотрудников.ВидВремени Есть NULL
		|		И ДниСотрудников.Сотрудник = Сотрудники.Ссылка
		|	ГДЕ
		|		Сотрудники.Ссылка В(&СписокСотрудников)		
		|		И (&ВключатьВРезультатПустыеЗаписи ИЛИ НЕ (ДниСотрудников.ОсновноеЗначение Есть NULL))
		|	СГРУППИРОВАТЬ ПО 
		|	Сотрудники.Ссылка, ДниСотрудников.Дата
		|	
		|	УПОРЯДОЧИТЬ ПО
		|		Сотрудник,День";
		
	КонецЕсли;
	
	ЗапросАвтоЗаполнения.Текст = ЗапросАвтоЗаполненияТекст;
	РезультатЗапроса = ЗапросАвтоЗаполнения.Выполнить();
	
	Если Сотрудники = Неопределено Тогда
		Исполнители.Очистить();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	 	
	Если Выборка.Количество() > 0 Тогда
		
		Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
			ИЛИ СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
			// по дням.
			
			ВведенныеТабеляПоДнямПоСотруднику = Новый Соответствие;
			Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
				
				ВведенныеТабеляПоДнямПоСотруднику.Очистить();
				Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаРасшифровкиПоДням = Исполнители.Добавить();
				Иначе
					СтрокаРасшифровкиПоДням = ТекущаяСтрокаТабличнойЧасти;
					Для ИндексДня = 1 По 31 Цикл
						ТекущаяСтрокаТабличнойЧасти["Часов" + Строка(ИндексДня)] = 0;
					КонецЦикла;
				КонецЕсли;
				СтрокаРасшифровкиПоДням.Сотрудник = Выборка.Сотрудник;
				СтрокаРасшифровкиПоДням.ФизЛицо = Выборка.ФизЛицо;
				СтрокаРасшифровкиПоДням.ОтработаноЧасов = 0;
				СтрокаРасшифровкиПоДням.ОтработаноДней = 0;
				Если Выборка.День <> NULL Тогда
					
					Пока Выборка.СледующийПоЗначениюПоля("День") Цикл
						
						ИндексЯчейкиВТаблице = Выборка.День;
						Пока Выборка.Следующий() Цикл 
							
							НазваниеЯчейкиВБазе = "Часов"+Строка(ИндексЯчейкиВТаблице);
							СтрокаРасшифровкиПоДням[НазваниеЯчейкиВБазе] = Выборка.ОсновноеЗначение;
							СтрокаРасшифровкиПоДням.ОтработаноЧасов = СтрокаРасшифровкиПоДням.ОтработаноЧасов + Выборка.ОсновноеЗначение;
							СтрокаРасшифровкиПоДням.ОтработаноДней = СтрокаРасшифровкиПоДням.ОтработаноДней + ?(Выборка.ОсновноеЗначение > 0, 1, 0);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// в целом за период
			
			Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
				Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаТабличнойЧасти = Исполнители.Добавить();
					СтрокаТабличнойЧасти.Сотрудник = Выборка.Сотрудник;
					СтрокаТабличнойЧасти.ФизЛицо = Выборка.ФизЛицо;
				Иначе
					СтрокаТабличнойЧасти = ТекущаяСтрокаТабличнойЧасти;
					СтрокаТабличнойЧасти.Сотрудник = Выборка.Сотрудник;
					СтрокаТабличнойЧасти.ФизЛицо = Выборка.Физлицо;
				КонецЕсли;
				
				Пока Выборка.Следующий() Цикл
					
					СтрокаТабличнойЧасти.ОтработаноДней  = Выборка.Дней;
					СтрокаТабличнойЧасти.ОтработаноЧасов = Выборка.Часов;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры // Автозаполнение()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура удаляет из регистра сведений ГрафикиРаботыПоВидамВремени записи,
// введенные данным документом.
Процедура УдалитьЗаписиГрафика()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Дата,
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Документ = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц, ГрафикРаботы, Дата";
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.СледующийПоЗначениюПоля("Месяц") Цикл
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаЗапроса.Месяц);
		Пока ВыборкаЗапроса.СледующийПоЗначениюПоля("ГрафикРаботы") Цикл
			НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.ГрафикРаботы);
			НаборЗаписей.Отбор.План.Установить(Ложь);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.Документ = Ссылка Тогда
					Запись.ОсновноеЗначениеПолное = 0;
					Запись.ДополнительноеЗначениеПолное = 0;
					Запись.Документ = Документы.СдельныйНаряд.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЗаписиГрафика()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Выработка.Сумма, Исполнители.СуммаКНачислению";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "Выработка.СчетУчетаБУ, Выработка.НалоговоеНазначениеДоходовИЗатрат, Выработка.СуммаРегл, Исполнители.СуммаКНачислениюРегл";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") + "Подразделение";
	
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") + "Организация, ПодразделениеОрганизации";
	
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Формирует запрос по таблице "Исполнители" документа
//
// Параметры:
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоИсполнители(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности",	Дата);
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядИсполнители": 
	//		Выбираются строки документа.  
	//
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СдельныйНарядИсполнители.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР КОГДА СдельныйНарядИсполнители.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) ТОГДА СдельныйНарядИсполнители.Сотрудник ИНАЧЕ СдельныйНарядИсполнители.Сотрудник.ОсновноеНазначение КОНЕЦ КАК Сотрудник,
	|	СдельныйНарядИсполнители.Сотрудник КАК Назначение,
	|	СдельныйНарядИсполнители.Сотрудник.Физлицо КАК Физлицо,
	|	СдельныйНарядИсполнители.СуммаКНачислению,
	|	СдельныйНарядИсполнители.ОтработаноЧасов,
	|	СдельныйНарядИсполнители.ОтработаноДней,
	|	СдельныйНарядИсполнители.Часов1,
	|	СдельныйНарядИсполнители.Часов2,
	|	СдельныйНарядИсполнители.Часов3,
	|	СдельныйНарядИсполнители.Часов4,
	|	СдельныйНарядИсполнители.Часов5,
	|	СдельныйНарядИсполнители.Часов6,
	|	СдельныйНарядИсполнители.Часов7,
	|	СдельныйНарядИсполнители.Часов8,
	|	СдельныйНарядИсполнители.Часов9,
	|	СдельныйНарядИсполнители.Часов10,
	|	СдельныйНарядИсполнители.Часов11,
	|	СдельныйНарядИсполнители.Часов12,
	|	СдельныйНарядИсполнители.Часов13,
	|	СдельныйНарядИсполнители.Часов14,
	|	СдельныйНарядИсполнители.Часов15,
	|	СдельныйНарядИсполнители.Часов16,
	|	СдельныйНарядИсполнители.Часов17,
	|	СдельныйНарядИсполнители.Часов18,
	|	СдельныйНарядИсполнители.Часов19,
	|	СдельныйНарядИсполнители.Часов20,
	|	СдельныйНарядИсполнители.Часов21,
	|	СдельныйНарядИсполнители.Часов22,
	|	СдельныйНарядИсполнители.Часов23,
	|	СдельныйНарядИсполнители.Часов24,
	|	СдельныйНарядИсполнители.Часов25,
	|	СдельныйНарядИсполнители.Часов26,
	|	СдельныйНарядИсполнители.Часов27,
	|	СдельныйНарядИсполнители.Часов28,
	|	СдельныйНарядИсполнители.Часов29,
	|	СдельныйНарядИсполнители.Часов30,
	|	СдельныйНарядИсполнители.Часов31,
	|	ВЫБОР
	|		КОГДА РаботникиСрезПоследних.Физлицо ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникУпрУчета
	|ИЗ
	|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(
	|				&ДатаАктуальности,
	|				ФизЛицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СдельныйНарядИсполнители.Сотрудник.Физлицо
	|					ИЗ
	|						Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|					ГДЕ
	|						СдельныйНарядИсполнители.Ссылка = &ДокументСсылка)) КАК РаботникиСрезПоследних
	|		ПО СдельныйНарядИсполнители.ФизЛицо = РаботникиСрезПоследних.ФизЛицо
	|ГДЕ
	|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоИсполнители()

// Формирует запрос по таблице "Исполнители" документа
//
// Параметры: 
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоИсполнителиРегл(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ВР",						ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата);
	Запрос.УстановитьПараметр("ДокументВведенЗаПериод", ВыборкаПоШапкеДокумента.СпособВводаДанных <> Перечисления.СпособыВводаДанныхОВремени.ЗаДень);
	Запрос.УстановитьПараметр("СпособРасчета",			Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	Запрос.УстановитьПараметр("НачальнаяДата",			'00010101');
	Запрос.УстановитьПараметр("ДатаАктуальности", ?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень,ДатаНачалаПериода,ПериодРегистрации));
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядИсполнители":
	//		Выбираются строки документа.
	// 2. Выборка "РаботникиОрганизацииСрезПоследних":
	//		Из регистра (срез последних) РаботникиОрганизаций выбираются строки,
	//		соответствующие работникам документа.
	// 3. Выборка "ПлановыеНачисленияРаботниковОрганизаций":
	//		Из регистра (срез последних) ПлановыеНачисленияРаботниковОрганизаций выбирается в.р.
	//		регистрирующий сдельный заработок
	//
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СдельныйНарядИсполнители.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР КОГДА СдельныйНарядИсполнители.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка) ТОГДА СдельныйНарядИсполнители.Сотрудник ИНАЧЕ СдельныйНарядИсполнители.Сотрудник.ОсновноеНазначение КОНЕЦ КАК Сотрудник,
	|	СдельныйНарядИсполнители.Сотрудник КАК Назначение,
	|	СдельныйНарядИсполнители.ДокументОснование КАК ДокументОснование,
	|	СдельныйНарядИсполнители.Сотрудник.Наименование КАК СотрудникНаименование,
	|	СдельныйНарядИсполнители.Сотрудник.Физлицо КАК Физлицо,
	|	Работники.ГрафикРаботы КАК ГрафикРаботы,
	|	СдельныйНарядИсполнители.СуммаКНачислениюРегл КАК СуммаКНачислению,
	|	СдельныйНарядИсполнители.ОтработаноЧасов,
	|	СдельныйНарядИсполнители.ОтработаноДней,
	|	ЕСТЬNULL(ПлановыеНачисления.ВидРасчета, &ВР) КАК ВидРасчета,
	|	ПлановыеНачисления.ВидРасчета КАК ВидРасчета1,
	|   ВЫБОР КОГДА ПлановыеНачисления.ВидРасчета ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|   	 ИНАЧЕ  ИСТИНА
	|	КОНЕЦ			 КАК ПроверкаВидРасчета,
	|	ВЫБОР
	|		КОГДА СотрудникГПХ.Сотрудник ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА СостояниеСотрудников.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникЧислитсяВОрганизации,
	|
	|	ВЫБОР КОГДА СпособОтражениеГПХ.СчетКт ЕСТЬ НЕ NULL ТОГДА СпособОтражениеГПХ.СчетКт			ИНАЧЕ NULL КОНЕЦ	КАК СчетКт,
	|	ВЫБОР КОГДА СпособОтражениеГПХ.СчетКт ЕСТЬ НЕ NULL ТОГДА СпособОтражениеГПХ.СубконтоКт1	ИНАЧЕ NULL КОНЕЦ	КАК СубконтоКт1,
	|	ВЫБОР КОГДА СпособОтражениеГПХ.СчетКт ЕСТЬ НЕ NULL ТОГДА СпособОтражениеГПХ.СубконтоКт2	ИНАЧЕ NULL КОНЕЦ	КАК СубконтоКт2,
	|	ВЫБОР КОГДА СпособОтражениеГПХ.СчетКт ЕСТЬ НЕ NULL ТОГДА СпособОтражениеГПХ.СубконтоКт3	ИНАЧЕ NULL КОНЕЦ	КАК СубконтоКт3,
	|
	|	СдельныйНарядИсполнители.Часов1,
	|	СдельныйНарядИсполнители.Часов2,
	|	СдельныйНарядИсполнители.Часов3,
	|	СдельныйНарядИсполнители.Часов4,
	|	СдельныйНарядИсполнители.Часов5,
	|	СдельныйНарядИсполнители.Часов6,
	|	СдельныйНарядИсполнители.Часов7,
	|	СдельныйНарядИсполнители.Часов8,
	|	СдельныйНарядИсполнители.Часов9,
	|	СдельныйНарядИсполнители.Часов10,
	|	СдельныйНарядИсполнители.Часов11,
	|	СдельныйНарядИсполнители.Часов12,
	|	СдельныйНарядИсполнители.Часов13,
	|	СдельныйНарядИсполнители.Часов14,
	|	СдельныйНарядИсполнители.Часов15,
	|	СдельныйНарядИсполнители.Часов16,
	|	СдельныйНарядИсполнители.Часов17,
	|	СдельныйНарядИсполнители.Часов18,
	|	СдельныйНарядИсполнители.Часов19,
	|	СдельныйНарядИсполнители.Часов20,
	|	СдельныйНарядИсполнители.Часов21,
	|	СдельныйНарядИсполнители.Часов22,
	|	СдельныйНарядИсполнители.Часов23,
	|	СдельныйНарядИсполнители.Часов24,
	|	СдельныйНарядИсполнители.Часов25,
	|	СдельныйНарядИсполнители.Часов26,
	|	СдельныйНарядИсполнители.Часов27,
	|	СдельныйНарядИсполнители.Часов28,
	|	СдельныйНарядИсполнители.Часов29,
	|	СдельныйНарядИсполнители.Часов30,
	|	СдельныйНарядИсполнители.Часов31,
	|	ВЫБОР
	|		КОГДА СдельныйНарядИсполнители.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&ДатаАктуальности,
	|		Сотрудник В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СдельныйНарядИсполнители.Сотрудник
	|			ИЗ
	|				Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|			ГДЕ
	|				СдельныйНарядИсполнители.Ссылка = &ДокументСсылка)) КАК Работники
	|		ПО СдельныйНарядИсполнители.Сотрудник = Работники.Сотрудник
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ 
	|			   Плановые.Сотрудник,
	|			   Плановые.ВидРасчета,
	|			   Плановые.ДокументОснование
	|			
	|			ИЗ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&ДатаАктуальности,МЕСЯЦ),
	|			Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								СдельныйНарядИсполнители.Сотрудник КАК Сотрудник
	|						ИЗ Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|						ГДЕ СдельныйНарядИсполнители.Ссылка = &ДокументСсылка)
	|			) КАК Плановые
	|			ГДЕ Плановые.ВидРасчетаИзмерение <> Плановые.ВидРасчета
	|			И Плановые.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
	|			,ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой))
	|			ИЛИ (Плановые.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|			И (Плановые.Актуальность ИЛИ (НАЧАЛОПЕРИОДА(Плановые.Период,МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ДатаАктуальности,МЕСЯЦ)))
	|			И Плановые.ВидРасчетаИзмерение = Плановые.ВидРасчета
	|			И Плановые.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)) )
	|		) КАК ПлановыеНачисления
	|		ПО		СдельныйНарядИсполнители.Сотрудник = ПлановыеНачисления.Сотрудник
	|			И	(СдельныйНарядИсполнители.ДокументОснование = ПлановыеНачисления.ДокументОснование
	|			ИЛИ	( СдельныйНарядИсполнители.ДокументОснование = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
	|			И	ПлановыеНачисления.ДокументОснование = НЕОПРЕДЕЛЕНО ))
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостоянияСотрудников.Сотрудник КАК Сотрудник
	|		ИЗ	(ВЫБРАТЬ
	|				РаботникиОрганизаций.Сотрудник КАК Сотрудник
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ГДЕ
	|				РаботникиОрганизаций.Период > &ДатаАктуальности
	|				И РаботникиОрганизаций.Период <= КОНЕЦПЕРИОДА(&ДатаАктуальности, МЕСЯЦ)
	|				И РаботникиОрганизаций.Сотрудник В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СдельныйНарядИсполнители.Сотрудник
	|						ИЗ
	|							Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|						ГДЕ
	|							СдельныйНарядИсполнители.Ссылка = &ДокументСсылка)
	|				И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				И &ДокументВведенЗаПериод
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				РаботникиОрганизаций.Сотрудник
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&ДатаАктуальности,
	|					Сотрудник В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СдельныйНарядИсполнители.Сотрудник
	|						ИЗ
	|							Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|						ГДЕ
	|							СдельныйНарядИсполнители.Ссылка = &ДокументСсылка)) КАК РаботникиОрганизаций
	|			ГДЕ
	|				РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК СостоянияСотрудников
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостоянияСотрудников.Сотрудник) КАК СостояниеСотрудников
	|		ПО СостояниеСотрудников.Сотрудник = СдельныйНарядИсполнители.Сотрудник
	|
	//|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК СпособОтражениеГПХ
	//|ПО    СпособОтражениеГПХ.Сотрудник = СдельныйНарядИсполнители.Сотрудник 
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ(
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Договор.Сотрудник КАК Сотрудник,
	|	Договор.СпособОтраженияВБухучете.СчетКт КАК СчетКт,
	|	Договор.СпособОтраженияВБухучете.СубконтоКт1 КАК СубконтоКт1,
	|	Договор.СпособОтраженияВБухучете.СубконтоКт2 КАК СубконтоКт2,
	|	Договор.СпособОтраженияВБухучете.СубконтоКт3 КАК СубконтоКт3
	|ИЗ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Договор
	|ГДЕ ((&ДатаАктуальности МЕЖДУ Договор.ДатаНачала И Договор.ДатаОкончания)
 	|	ИЛИ (НАЧАЛОПЕРИОДА(Договор.ДатаНачала,МЕСЯЦ)=&ДатаАктуальности))
	|	И  Договор.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|   И Договор.ХарактерОплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыПоДоговору.ПоСдельномуНаряду)
	|)КАК СпособОтражениеГПХ
	|ПО    СпособОтражениеГПХ.Сотрудник = СдельныйНарядИсполнители.Сотрудник 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ(
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Договор.Сотрудник КАК Сотрудник,
	|	Договор.Ссылка КАК ДокументОснование
	|ИЗ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Договор
	|ГДЕ (&ДатаАктуальности МЕЖДУ Договор.ДатаНачала И Договор.ДатаОкончания)
 	|	ИЛИ (НАЧАЛОПЕРИОДА(Договор.ДатаНачала,МЕСЯЦ)=&ДатаАктуальности)
	|   И Договор.ХарактерОплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыПоДоговору.ПоСдельномуНаряду)
	|)КАК СотрудникГПХ
	|ПО		СотрудникГПХ.Сотрудник = СдельныйНарядИсполнители.Сотрудник 
	|	И	СотрудникГПХ.ДокументОснование = СдельныйНарядИсполнители.ДокументОснование 
	|
	|
	|ГДЕ
	|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоИсполнители()

Функция СформироватьЗапросПоВыработка(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядВыработка": 
	//		Выбираются строки документа.  
	//
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СдельныйНарядВыработка.НомерСтроки КАК НомерСтроки,
	|	СдельныйНарядВыработка.ТехнологическаяОперация,
	|	СдельныйНарядВыработка.НоменклатурнаяГруппа,
	|	СдельныйНарядВыработка.СтатьяЗатрат
	|ИЗ
	|	Документ.СдельныйНаряд.Выработка КАК СдельныйНарядВыработка
	|ГДЕ
	|	СдельныйНарядВыработка.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоИсполнители()

// Формирует запрос по таблице "Выработка" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоВыработкаРегл(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядВыработка": 
	//		Выбираются строки документа.  
	// 2. Выборки "ВидСубконтоДт i": 
	//		По плану счетов Хозрасчетный определяем тип 
    //      значения субконто, требуемых счету бух. учета 
    //
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СдельныйНарядВыработка.НомерСтроки КАК НомерСтроки,
	               |	СдельныйНарядВыработка.ТехнологическаяОперация,
	               |	СдельныйНарядВыработка.НоменклатурнаяГруппа,
	               |	СдельныйНарядВыработка.СтатьяЗатрат,
	               |	СдельныйНарядВыработка.СуммаРегл КАК СуммаЗаРаботу,
	               |	СдельныйНарядВыработка.СчетЗатрат,
	               |	СдельныйНарядВыработка.ОбъектСтроительства,
	               |	СдельныйНарядВыработка.Продукция,
	               |	СдельныйНарядВыработка.ХарактеристикаПродукции,
	               |	СдельныйНарядВыработка.СерияПродукции,
	               |	ВидСубконтоДт1.ВидСубконто КАК ВидСубконто1,
	               |	ВидСубконтоДт2.ВидСубконто КАК ВидСубконто2,
	               |	ВидСубконтоДт3.ВидСубконто КАК ВидСубконто3,
	               |	СдельныйНарядВыработка.СпособРаспределенияЗатратНаВыпуск,
	               |	СдельныйНарядВыработка.НалоговоеНазначениеДоходовИЗатрат
	               |ИЗ
	               |	Документ.СдельныйНаряд.Выработка КАК СдельныйНарядВыработка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт1
	               |		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт1.Ссылка И (ВидСубконтоДт1.НомерСтроки = 1)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт2
	               |		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт2.Ссылка И (ВидСубконтоДт2.НомерСтроки = 2)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт3
	               |		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт3.Ссылка И (ВидСубконтоДт3.НомерСтроки = 3)
	               |
	               |ГДЕ
	               |	СдельныйНарядВыработка.Ссылка = &ДокументСсылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВыработкаРегл()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Исполнители" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по работникам
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиИсполнители(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ВыборкаПоРаботникиРегл, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Исполнители"": ";
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан сотрудник!", Отказ, Заголовок);
	Иначе
		Если ОтражатьВУправленческомУчете И Не ВыборкаПоСтрокамДокумента.СотрудникУпрУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "сотрудник не принят по управленческому учету!", Отказ, Заголовок);
		КонецЕсли; 
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
		И  ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
		
		КоличествоДней = День(КонецМесяца(ПериодРегистрации));
		СуммаВремени = 0;
		Для Сч = 1 По КоличествоДней Цикл
			ЗначениеВСтроке = ВыборкаПоСтрокамДокумента["Часов" + Строка(Сч)];
			СуммаВремени = СуммаВремени + ЗначениеВСтроке;
			Если ЗначениеВСтроке > 0 Тогда
				Прервать
			КонецЕсли; 
		КонецЦикла; 
		
		Если СуммаВремени = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано ни одно значение отработаных часов для заполняемых дней!", Отказ, Заголовок);
		КонецЕсли; 
		
	ИначеЕсли ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень 
		И  ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
		
		Если ВыборкаПоСтрокамДокумента["Часов" + Строка(День(ДатаНачалаПериода))] = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано значение отработаных часов для вводимого дня!", Отказ, Заголовок);
		КонецЕсли; 
		
	КонецЕсли; 
	
	ПроверитьЗаполнениеСтрокиИсполнителиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации);
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиИсполнители()

Процедура ПроверитьЗаполнениеСтрокиИсполнителиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Исполнители"": ";
		
		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
		КонецЕсли;
		
		// Проверка: ранее работник должен быть принят на работу
		Если НЕ ВыборкаПоСтрокамДокумента.СотрудникЧислитсяВОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник не принят в организацию в данном периоде!", Отказ, Заголовок);
		
		КонецЕсли;
		
		// Проверка: вид расчета у работника должен быть сдельный наряд
		// Проверка: если работиник работает по договору ГПХ, то должен быть указан договор
		Если ВыборкаПоСтрокамДокумента.Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументОснование) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "у сотрудника не указан договор ГПХ (в поле ""Документ основание"")!", Отказ, Заголовок);
			КонецЕсли;
		ИначеЕсли НЕ ВыборкаПоСтрокамДокумента.ПроверкаВидРасчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "у сотрудника не назначено основное начисление со способом расчета ""Сдельный заработок""!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиИсполнителиРегл()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Выработка" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по работникам
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиВыработка(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Выработка"": ";
	
	// ТехнологическаяОперация
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТехнологическаяОперация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана технологическая операция!", Отказ, Заголовок);
	КонецЕсли;
	
	// СтатьяЗатрат
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СтатьяЗатрат) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана статья затрат!", Отказ, Заголовок);
	КонецЕсли;   	
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиВыработка()

Процедура ПроверитьЗаполнениеСтрокиВыработкаРегл(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Выработка"": ";
	
	// счета учета
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетЗатрат) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан счет бухгалтерского учета!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НалоговоеНазначениеДоходовИЗатрат) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано налоговое назначение!", Отказ, Заголовок);
		КонецЕсли;
		
		
		
	КонецЕсли;
	
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиВыработкаРегл()

// Процедура формирования движения регистров
//
Процедура ДвиженияРегистров(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиУпр, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл)
	
	// фактическая выработка работников
	ДвиженияФактическойВыработкиУпр(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиУпр);
	ДвиженияФактическойВыработкиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл);
	ДвиженияРегистровБУиНУРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл);
	
	ДвиженияПоТабличнойЧастиВыработка(ВыборкаПоШапкеДокумента);
	
КонецПроцедуры // ДвиженияРегистров()


Процедура ДвиженияФактическойВыработкиУпр(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВУправленческомУчете Тогда
		КоличествоДнейВПериодеРегистрации = День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
		МассивКоэффициентов = Новый Массив(КоличествоДнейВПериодеРегистрации);
		МассивРаспределенияНачисленнойСуммыПоДням = Новый Массив(КоличествоДнейВПериодеРегистрации);
		НаборДвижений = Движения.ФактическаяВыработкаРаботников;
		
		Пока ВыборкаПоРаботники.Следующий() Цикл 
			Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
				
				Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
					И ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
					
					Для ИндексДняВТаблице = 1 По КоличествоДнейВПериодеРегистрации Цикл
						МассивКоэффициентов[ИндексДняВТаблице - 1] = ВыборкаПоРаботники["Часов" + Строка(ИндексДняВТаблице)];
					КонецЦикла;
					
					МассивРаспределенияНачисленнойСуммыПоДням = ОбщегоНазначенияЗУП.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению, МассивКоэффициентов);
					
					Для ИндексДня = 1 По КоличествоДнейВПериодеРегистрации Цикл
						Если МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1] <> 0 Тогда
							НоваяСтрока = НаборДвижений.Добавить();
							НоваяСтрока.ФизЛицо				= ВыборкаПоРаботники.ФизЛицо;
							
							НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
							НоваяСтрока.Период				= Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ИндексДня);
							НоваяСтрока.Выработка			= МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1];
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					НоваяСтрока = НаборДвижений.Добавить();
					НоваяСтрока.ФизЛицо				= ВыборкаПоРаботники.ФизЛицо;
					НоваяСтрока.Выработка			= ВыборкаПоРаботники.СуммаКНачислению;
					
					Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
						НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ДатаНачалаПериода;
					Иначе
						НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
					КонецЕсли;
					
					Если НЕ ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя 
							И ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
						НоваяСтрока.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод	
					Иначе
						НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияФактическойВыработкиУпр()

Процедура ДвиженияФактическойВыработкиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		КоличествоДнейВПериодеРегистрации = День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
		МассивКоэффициентов = Новый Массив(КоличествоДнейВПериодеРегистрации);
		МассивРаспределенияНачисленнойСуммыПоДням = Новый Массив(КоличествоДнейВПериодеРегистрации);
		НаборДвижений = Движения.ФактическаяВыработкаРаботниковОрганизаций;
		
		Пока ВыборкаПоРаботники.Следующий() Цикл 
			Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
				
				Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
					И ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
					
					Для ИндексДняВТаблице = 1 По КоличествоДнейВПериодеРегистрации Цикл
						МассивКоэффициентов[ИндексДняВТаблице - 1] = ВыборкаПоРаботники["Часов" + Строка(ИндексДняВТаблице)];
					КонецЦикла;
					
					МассивРаспределенияНачисленнойСуммыПоДням = ОбщегоНазначенияЗУП.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению, МассивКоэффициентов);
					
					Для ИндексДня = 1 По КоличествоДнейВПериодеРегистрации Цикл
						Если МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1] <> 0 Тогда
							НоваяСтрока = НаборДвижений.Добавить();
							НоваяСтрока.Сотрудник			= ВыборкаПоРаботники.Сотрудник;
							НоваяСтрока.Организация			= ВыборкаПоШапкеДокумента.Организация;
							НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
							НоваяСтрока.Период				= Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ИндексДня);
							НоваяСтрока.Выработка			= МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1];
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					НоваяСтрока = НаборДвижений.Добавить();
					НоваяСтрока.Сотрудник			= ВыборкаПоРаботники.Сотрудник;
					НоваяСтрока.Организация			= ВыборкаПоШапкеДокумента.Организация;
					НоваяСтрока.Выработка			= ВыборкаПоРаботники.СуммаКНачислению;
					
					Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
						НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ДатаНачалаПериода;
					Иначе
						НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
					КонецЕсли;
					
					Если НЕ ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя 
							И ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
						НоваяСтрока.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод	
					Иначе
						НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияФактическойВыработкиРегл()

Процедура ДвиженияРегистровБУиНУРегл(СтруктураШапкиДокумента, ВыборкаПоРаботники, ТаблицаРабот)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяЕСВ = ПроведениеРасчетов.ИспользуетсяЕСВ(ПериодРегистрации);
	
	СчетУчетаРасчетовСРаботниками = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	МассивСуммЗаРаботы  = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
	ОстатокСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
	
	ВыборкаПоРаботники.Сбросить();
	Работников = ВыборкаПоРаботники.Количество();
	
	Сч = 0;
	Пока ВыборкаПоРаботники.Следующий() Цикл 
		Сч = Сч + 1;
		Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
			
			МассивСуммКНачислению = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению,МассивСуммЗаРаботы);
			
			Для каждого СтрокаТЗ Из ТаблицаРабот Цикл
				
				НомерУчета = ТаблицаРабот.Индекс(СтрокаТЗ);
				Если Сч = Работников Тогда
					Результат = ОстатокСуммЗаРаботы[НомерУчета];
				Иначе
					Результат = Мин(МассивСуммКНачислению[НомерУчета],ОстатокСуммЗаРаботы[НомерУчета]);
					ОстатокСуммЗаРаботы[НомерУчета] = ОстатокСуммЗаРаботы[НомерУчета] - Результат;
				КонецЕсли;
				
				Если Результат <> 0 Тогда
					Проводка = Движения.Хозрасчетный.Добавить();
					
					Проводка.Активность = Истина;
					Если СтруктураШапкиДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
						Проводка.Период			= СтруктураШапкиДокумента.ДатаНачалаПериода;
					Иначе
						Проводка.Период			= КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации);
					КонецЕсли; 					 					
										
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма        = Результат;
					Проводка.Содержание   = "Сдельная зарплата";
					Проводка.НомерЖурнала = "ЗП";
					
					Проводка.СчетДт = СтрокаТЗ.СчетЗатрат;
					БухгалтерскийУчет.УстановитьСубконто(СтрокаТЗ.СчетЗатрат, Проводка.СубконтоДт, "Подразделения",        ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаТЗ.СчетЗатрат, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЗ.НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаТЗ.СчетЗатрат, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЗ.СтатьяЗатрат);
					БухгалтерскийУчет.УстановитьСубконто(СтрокаТЗ.СчетЗатрат, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЗ.ОбъектСтроительства);
					
					Проводка.НалоговоеНазначениеДт = СтрокаТЗ.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, Результат); 
					
					//Если ВыборкаПоРаботники.СчетКт = NULL Тогда
						Проводка.СчетКт = СчетУчетаРасчетовСРаботниками;
						БухгалтерскийУчет.УстановитьСубконто(СчетУчетаРасчетовСРаботниками, Проводка.СубконтоКт, "РаботникиОрганизации", ВыборкаПоРаботники.ФизЛицо);
					//Иначе
					//	Проводка.СчетКт = ВыборкаПоРаботники.СчетКт;
					//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоРаботники.СубконтоКт1);
					//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоРаботники.СубконтоКт2);
					//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ВыборкаПоРаботники.СубконтоКт3);
					//КонецЕсли;
				
					// проводки по Регистру расчета "ОтражениеЗарплатыОрганизацийВРеглУчете"
					СтрокаДанных = Движения.ОтражениеЗарплатыОрганизацийВРеглУчете.Добавить();
					
					СтрокаДанных.Регистратор = Ссылка;
					
					// период регистрации
					СтрокаДанных.БазовыйПериодНачало  	= НачалоМесяца( Дата );
					СтрокаДанных.БазовыйПериодКонец		= КонецМесяца( Дата );
					
					СтрокаДанных.ВидРасчета = ПланыВидовРасчета.ОтражениеЗарплатыОрганизаций.НачислениеСдельно;
					СтрокаДанных.Организация = Организация;
					
					СтрокаДанных.ВидРасчетаБазы	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата;
					Если НЕ ИспользуетсяЕСВ Тогда
						СтрокаДанных.ВидРасчетаБазы	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата;
					Иначе
						Если ВыборкаПоРаботники.Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
							СтрокаДанных.ВидРасчетаБазы	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплатаГПХ;
						Иначе
							СтрокаДанных.ВидРасчетаБазы	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата;
						КонецЕсли;	
					Конецесли;
					
					// период регистрации
					СтрокаДанных.ПериодРегистрации	= СтруктураШапкиДокумента.ПериодРегистрации;
					
					// измерения
					СтрокаДанных.Сотрудник	= ВыборкаПоРаботники.Сотрудник;
					СтрокаДанных.Назначение	= ВыборкаПоРаботники.Назначение;
					
					// ресурсы
					СтрокаДанных.Результат			= Результат;
					
					// реквизиты
					СтрокаДанных.НалоговоеНазначениеДоходовИЗатрат = СтрокаТЗ.НалоговоеНазначениеДоходовИЗатрат;
					СтрокаДанных.СпособРаспределенияЗатрат	= СтрокаТЗ.СпособРаспределенияЗатратНаВыпуск;
					
					СтрокаДанных.СчетДт			= Проводка.СчетДт;
					
					Инд = 1;
					Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
						
						СтрокаДанных["СубконтоДт"+ Инд] = Проводка.СубконтоДт[ВидСубконто.ВидСубконто];
						Инд = Инд + 1;
						
					КонецЦикла; 
					
					СтрокаДанных.СчетКт      = Проводка.СчетКт;
					Инд = 1;
					Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
						
						СтрокаДанных["СубконтоКт"+ Инд] = Проводка.СубконтоКт[ВидСубконто.ВидСубконто];
						Инд = Инд + 1;
						
					КонецЦикла; 
	
	
				КонецЕсли;	
			
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;

	Движения.Хозрасчетный.Записать(Ложь);
	
КонецПроцедуры

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(ВыборкаПоШапкеДокумента, ВыборкаПоОтработанноеВремя, НаборЗаписей, НомерДня)
	
	ОбрабатываемаяДата = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), НомерДня);
	СуммаВремениЗаВесьДень = ВыборкаПоОтработанноеВремя["Часов" + Строка(НомерДня)];
	Если СуммаВремениЗаВесьДень > 0 Тогда
		Движение = НаборЗаписей.Добавить();
		// Свойства
		Движение.Период								= ОбрабатываемаяДата;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоОтработанноеВремя.Сотрудник;
		Если ЗначениеЗаполнено(ВыборкаПоОтработанноеВремя.Сотрудник.ОсновноеНазначение) Тогда
			Движение.Назначение					= ВыборкаПоОтработанноеВремя.Сотрудник.ОсновноеНазначение;
		Иначе
			Движение.Назначение					= ВыборкаПоОтработанноеВремя.Сотрудник;
		КонецЕсли;	

		Если ОтражатьВБухгалтерскомУчете Тогда
			Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.ВидИспользованияРабочегоВремени	= Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
		
		// Ресурсы
		Движение.Дней								= ?(СуммаВремениЗаВесьДень = 0, 0, 1);
		Движение.Часов								= СуммаВремениЗаВесьДень;
		
		// Реквизиты
		Движение.ВЦеломЗаПериод						= Ложь;
	КонецЕсли;
КонецПроцедуры // ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоОтработанноеВремя, НаборЗаписей, НомерДня)
	
	ОбрабатываемаяДата = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), НомерДня);
	СуммаВремениЗаВесьДень = ВыборкаПоОтработанноеВремя["Часов" + Строка(НомерДня)];
	ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
	
	СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремени);
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	
	МассивСтрок = НаборЗаписей.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
	Иначе
		
		Движение = НаборЗаписей.Добавить();
		Движение.ГрафикРаботы = ?(ОтражатьВБухгалтерскомУчете,ВыборкаПоОтработанноеВремя.Сотрудник,ВыборкаПоОтработанноеВремя.Физлицо);
		Движение.Сотрудник = ВыборкаПоОтработанноеВремя.Назначение;
		Движение.ВидУчетаВремени = ВидУчетаВремени;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ПериодРегистрации;
		
	КонецЕсли;
	
	// Ресурсы
	Движение.ОсновноеЗначениеПолное = Движение.ОсновноеЗначениеПолное + СуммаВремениЗаВесьДень;
	Движение.ДополнительноеЗначениеПолное = ?((Движение.ДополнительноеЗначениеПолное > 0) ИЛИ (СуммаВремениЗаВесьДень > 0), 1, 0);
	
	// Реквизиты
	Движение.Документ				= Ссылка;
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоОтработанноеВремя, НаборЗаписей, НомерДня)
	
	ОбрабатываемаяДата = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), НомерДня);
	СуммаВремениЗаВесьДень = ВыборкаПоОтработанноеВремя["Часов" + Строка(НомерДня)];
	
	СтруктураПоиска.Вставить("ВидУчетаВремени", Перечисления.ВидыУчетаВремени.ПоДням);
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	МассивСтрок = НаборЗаписей.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
	Иначе
		
		Движение = НаборЗаписей.Добавить();
		Движение.ГрафикРаботы = ?(ОтражатьВБухгалтерскомУчете,ВыборкаПоОтработанноеВремя.Сотрудник,ВыборкаПоОтработанноеВремя.Физлицо);
		Движение.Сотрудник = ВыборкаПоОтработанноеВремя.Назначение;
		Движение.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ПериодРегистрации;
		
	КонецЕсли;
	
	// Ресурсы
	Движение.ОсновноеЗначениеПолное = ?(СуммаВремениЗаВесьДень = 0, 0, 1);
	Движение.ДополнительноеЗначениеПолное = СуммаВремениЗаВесьДень;
	
	// Реквизиты
	Движение.Документ 				= Ссылка;
	
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни()
	

// Процедура создает пустые записи в регистре за ПериодРегистрации, в разрезе сотрудников
// если это первый (единственный) документ за этот период, в разрезе сотрудников
Функция ПолучитьМассивСотрудниковДляСозданияПустыхЗаписей(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УсловиеСотрудника = "";
	Иначе
		УсловиеСотрудника = ".ФизЛицо";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СдельныйНарядИсполнители.Сотрудник" + УсловиеСотрудника + " КАК Сотрудник
	|ИЗ
	|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СдельныйНарядИсполнители.Сотрудник" + УсловиеСотрудника + "
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	|			И ((НЕ ГрафикиРаботыПоВидамВремени.План))
	|ГДЕ
	|	СдельныйНарядИсполнители.Ссылка = &Документ
	|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("Месяц", ПериодРегистрации);
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник")
	
	//ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	//
	//НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.План.Установить(Ложь);
	//НаборЗаписей.Отбор.Месяц.Установить(ПериодРегистрации);
	//
	//ДеньОкончанияМесяца = День(КонецМесяца(ПериодРегистрации));
	//ВидУчетаВремениПоДням = Перечисления.ВидыУчетаВремени.ПоДням;
	//ВидУчетаВремениПоЧасам = Перечисления.ВидыУчетаВремени.ПоЧасам;
	//ПустойДокумент = Документы.СдельныйНаряд.ПустаяСсылка();
	//Пока ВыборкаЗапроса.Следующий() Цикл
	//	
	//	НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.Сотрудник);
	//	НаборЗаписей.Отбор.План.Установить(Ложь);
	//	НаборЗаписей.Очистить();
	//	Для ИндексДняМесяца = 1 По ДеньОкончанияМесяца Цикл
	//		
	//		ДатаМесяца = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), ИндексДняМесяца);
	//		Движение = НаборЗаписей.Добавить();
	//		Движение.ГрафикРаботы = ВыборкаЗапроса.Сотрудник;
	//		Движение.ВидУчетаВремени = ВидУчетаВремениПоДням;
	//		Движение.Дата = ДатаМесяца;
	//		Движение.Месяц = ПериодРегистрации;
	//		Движение.План = Ложь;
	//		Движение.Документ = ПустойДокумент;
	//		
	//		Движение = НаборЗаписей.Добавить();
	//		Движение.ГрафикРаботы = ВыборкаЗапроса.Сотрудник;
	//		Движение.ВидУчетаВремени = ВидУчетаВремениПоЧасам;
	//		Движение.Дата = ДатаМесяца;
	//		Движение.Месяц = ПериодРегистрации;
	//		Движение.План = Ложь;
	//		Движение.Документ = ПустойДокумент;
	//		
	//	КонецЦикла;
	//	НаборЗаписей.Записать();
	//КонецЦикла;
	
КонецФункции // ПолучитьМассивСотрудниковДляСозданияПустыхЗаписей()

// Процедура удаляет все записи из регистра за ПериодРегистрации,
// если документ последний в этом периоде, в разрезе сотрудников
Процедура УдалитьЗаписиЗаПериодДокумента()
	
	Запрос = Новый Запрос;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		УсловиеСотрудника = "";
	Иначе
		УсловиеСотрудника = ".ФизЛицо";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СдельныйНарядИсполнители.Сотрудник" + УсловиеСотрудника + " Как Сотрудник,
	|	СдельныйНаряд.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	Документ.СдельныйНаряд КАК СдельныйНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|		ПО (СдельныйНарядИсполнители.Ссылка = &Документ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СдельныйНарядИсполнители.Сотрудник" + УсловиеСотрудника + "
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = СдельныйНаряд.ПериодРегистрации)
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ПустойДокумент)				   
	|			И ((НЕ ГрафикиРаботыПоВидамВремени.План))
	|ГДЕ
	|	СдельныйНаряд.Ссылка = &Документ
	|	И ГрафикиРаботыПоВидамВремени.Документ ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.УстановитьПараметр("ПустойДокумент", Документы.СдельныйНаряд.ПустаяСсылка());
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	Пока ВыборкаЗапроса.Следующий() Цикл
		НаборЗаписей.Отбор.План.Установить(Ложь);
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.Сотрудник);
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаЗапроса.ПериодРегистрации);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьЗаписиЗаПериодДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// удаление движений - документ не удаляет движения автоматически
Процедура УдалитьДвижения()
	
	Если НЕ мУдалятьДвижения Тогда
		Возврат;
	КонецЕсли;
	
	Если мПрежнееОтражатьВУправленческомУчете Тогда
		Движения.ФактическаяВыработкаРаботников.Очистить();
		Движения.ФактическаяВыработкаРаботников.Записать();
		
	Иначе
		Движения.ФактическаяВыработкаРаботниковОрганизаций.Очистить();
		Движения.ФактическаяВыработкаРаботниковОрганизаций.Записать();
		
	КонецЕсли;
	
	Движения.РабочееВремяРаботниковОрганизаций.Очистить();
	Движения.РабочееВремяРаботниковОрганизаций.Записать();
	
КонецПроцедуры // УдалитьДвижения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение И СпособВводаДанных.Пустая();
	Если Отказ Тогда
		Сообщить("Документ был проведен в редакции 1.1 и перепроведению не подлежит!");
		Возврат
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Неопределено,         // ТабличнаяЧастьТовары
			Неопределено,         // ТабличнаяЧастьВозвратнаяТара
			Выработка,            // ТабличнаяЧастьУслуги
			Неопределено,         // ТабличнаяЧастьОборудование
			Неопределено, 		  // ТабличнаяЧастьОбъектыСтроительства
			Неопределено,		  // ТабличнаяЧастьБланкиСтрогогоУчета
			"СчетЗатрат",
			"",
			Истина  			  // НеЗаполнятьНалоговоеНазначение
		);
	КонецЕсли;	
	
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Исполнители);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(Исполнители);
	// Установим прежнее состояние ОтражатьВУправленческомУчете
	мПрежнееОтражатьВУправленческомУчете = Ссылка.ОтражатьВУправленческомУчете;
	
	мУдалятьДвижения = Не ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// удалим движения
	УдалитьДвижения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверка заполнения шапки документа
	РеквизитыШапки = "СпособВводаДанных";
	Если ОтражатьВУправленческомУчете Тогда
		ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);
	КонецЕсли;
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки,"Не указан способ учета времени и выработки по наряду!"), Отказ, Заголовок);
	
	// проверка совпадения сумм по т.ч. 
	Если ОтражатьВУправленческомУчете Тогда
		Если Выработка.Итог("Сумма") <> Исполнители.Итог("СуммаКНачислению") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы к начислению по управленческому учету по табличным частям!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если Выработка.Итог("СуммаРегл") <> Исполнители.Итог("СуммаКНачислениюРегл") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы к начислению по регламентированному учету по табличным частям!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// получим реквизиты табличной части
	ВыборкаПоРаботники = СформироватьЗапросПоИсполнители(Режим).Выбрать();
	ВыборкаПоРаботникиРегл = Неопределено;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ВыборкаПоРаботникиРегл = СформироватьЗапросПоИсполнителиРегл(СтруктураШапкиДокумента).Выбрать();
	КонецЕсли;
	
	Пока ВыборкаПоРаботники.Следующий() Цикл
		Если ОтражатьВБухгалтерскомУчете Тогда
			ВыборкаПоРаботникиРегл.Следующий();
		КонецЕсли;
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиИсполнители(СтруктураШапкиДокумента, ВыборкаПоРаботники, ВыборкаПоРаботникиРегл, Отказ, Заголовок, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"));
	КонецЦикла;
	
	// проверим общие реквизиты
	ВыборкаПоРаботы = СформироватьЗапросПоВыработка(Режим).Выбрать();
	Пока ВыборкаПоРаботы.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиВыработка(СтруктураШапкиДокумента, ВыборкаПоРаботы, Отказ, Заголовок);
	КонецЦикла;
	
	// проверим реквизиты регл учета
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		РезультатЗапросаПоРаботыРегл = СформироватьЗапросПоВыработкаРегл(Режим);
		ТаблицаРаботРегл = РезультатЗапросаПоРаботыРегл.Выгрузить();
		ВыборкаПоРаботыРегл = РезультатЗапросаПоРаботыРегл.Выбрать();
		Пока ВыборкаПоРаботыРегл.Следующий() Цикл 
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиВыработкаРегл(СтруктураШапкиДокумента, ВыборкаПоРаботыРегл, Отказ, Заголовок);
		КонецЦикла;
		
		НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
			СтруктураШапкиДокумента, 
			Выработка.Выгрузить(),
			"Выработка",
			Отказ, 
			Заголовок, 
			"ОтражениеЗатрат",
			Истина
		);	
		
		
	КонецЕсли;
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	// Фактически отработанное время
	
	УдалитьЗаписиГрафика();
	УдалитьЗаписиЗаПериодДокумента();
	
	Если УчитыватьОтработанноеВремя Тогда
		ЗапросПроверкаУникальности = Новый Запрос;
		ЗапросПроверкаУникальности.УстановитьПараметр("ДокументСсылка",	Ссылка);
		ЗапросПроверкаУникальности.УстановитьПараметр("Месяц",			ПериодРегистрации);
		ЗапросПроверкаУникальности.УстановитьПараметр("НачалоМесяца",	?(СпособВводаДанных=Перечисления.СпособыВводаДанныхОВремени.ЗаДень, ДатаНачалаПериода, ПериодРегистрации));
		ЗапросПроверкаУникальности.УстановитьПараметр("КонецМесяца",	?(СпособВводаДанных=Перечисления.СпособыВводаДанныхОВремени.ЗаДень, ДатаНачалаПериода, КонецМесяца(ПериодРегистрации)));
		ЗапросПроверкаУникальности.УстановитьПараметр("Дата",			ПериодРегистрации);
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			УсловиеСотрудника = "";
		Иначе
			УсловиеСотрудника = ".ФизЛицо";
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(РабочееВремяРаботниковОрганизаций.Регистратор, ГрафикиРаботыПоВидамВремени.Документ)) КАК ДокументПредставление,
		|	ЕСТЬNULL(СдельныйНарядИсполнители.Сотрудник.Наименование, ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Наименование) КАК СотрудникНаименование
		|ИЗ
		|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
		|		ПО РабочееВремяРаботниковОрганизаций.Сотрудник = СдельныйНарядИсполнители.Сотрудник
		|			И (РабочееВремяРаботниковОрганизаций.Регистратор <> &ДокументСсылка)
		|			И (СдельныйНарядИсполнители.Ссылка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод))
		|					И (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ &НачалоМесяца И &КонецМесяца)
		|				ИЛИ СдельныйНарядИсполнители.Ссылка.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)
		|					И РабочееВремяРаботниковОрганизаций.Период = СдельныйНарядИсполнители.Ссылка.ДатаНачалаПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СдельныйНарядИсполнители.Сотрудник
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
		|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
		|			И ((НЕ ГрафикиРаботыПоВидамВремени.План))
		|			И ((НЕ ГрафикиРаботыПоВидамВремени.Документ В (ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка))))
		|ГДЕ
		|	((НЕ РабочееВремяРаботниковОрганизаций.НомерСтроки ЕСТЬ NULL )
		|			ИЛИ (НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ))
		|	И СдельныйНарядИсполнители.Ссылка = &ДокументСсылка";
		
		ЗапросПроверкаУникальности.Текст = ТекстЗапроса;
		РезультатЗапроса = ЗапросПроверкаУникальности.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Количество() = 0 Тогда
			
			Если ОтражатьВБухгалтерскомУчете Тогда
				ВыборкаПоРаботникиРегл.Сбросить();
				ВыборкаПоОтработанноеВремя = ВыборкаПоРаботникиРегл;
			КонецЕсли;
			Если ОтражатьВУправленческомУчете Тогда
				ВыборкаПоРаботники.Сбросить();
				ВыборкаПоОтработанноеВремя = ВыборкаПоРаботники;
			КонецЕсли;
			
			НаборДвижений = Движения.РабочееВремяРаботниковОрганизаций;
			
			Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
				// Данные введены в целом за период.
				
				Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
					
					Запись = НаборДвижений.Добавить();
					// Свойства
					//Запись.Период							= ВыборкаПоОтработанноеВремя.ДатаНачала;
					Запись.Период							= ПериодРегистрации;
					
					// Измерения
					Запись.Сотрудник					= ВыборкаПоОтработанноеВремя.Сотрудник;
					Если ЗначениеЗаполнено(ВыборкаПоОтработанноеВремя.Сотрудник.ОсновноеНазначение) Тогда
						Запись.Назначение					= ВыборкаПоОтработанноеВремя.Сотрудник.ОсновноеНазначение;
					Иначе
						Запись.Назначение					= ВыборкаПоОтработанноеВремя.Сотрудник;
					КонецЕсли;	
					Если ОтражатьВБухгалтерскомУчете Тогда
						Запись.Организация					= СтруктураШапкиДокумента.Организация;
					КонецЕсли;
					
					Запись.ВидИспользованияРабочеговремени	= Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
					
					// Ресурсы
					Запись.Дней								= ВыборкаПоОтработанноеВремя.ОтработаноДней;
					Запись.Часов							= ВыборкаПоОтработанноеВремя.ОтработаноЧасов;
					
					// Реквизиты
					Запись.ВЦеломЗаПериод					= Истина;
					
				КонецЦикла;
				
			ИначеЕсли СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
				
				// Данные введены с разбивкой по дням.
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Месяц", ПериодРегистрации);
				
				НаборГрафикиРаботыПоВидамВремени = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
				
				НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ПериодРегистрации);
				НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Ложь);
				
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("План", Ложь);
				СтруктураПоиска.Вставить("Месяц", ПериодРегистрации);
				
				КоличествоДней = День(КонецМесяца(ПериодРегистрации));
				
				Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("Сотрудник") Цикл
					
					Если ОтражатьВБухгалтерскомУчете Тогда
						НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(ВыборкаПоОтработанноеВремя.Сотрудник);
						СтруктураПоиска.Вставить("ГрафикРаботы", ВыборкаПоРаботникиРегл.Сотрудник);
						НаборГрафикиРаботыПоВидамВремени.Отбор.Сотрудник.Установить(ВыборкаПоОтработанноеВремя.Назначение);
						СтруктураПоиска.Вставить("Сотрудник", ВыборкаПоРаботникиРегл.Назначение);
					Иначе
						НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(ВыборкаПоОтработанноеВремя.ФизЛицо);
						СтруктураПоиска.Вставить("ГрафикРаботы", ВыборкаПоОтработанноеВремя.ФизЛицо);
					КонецЕсли;
					
					НаборГрафикиРаботыПоВидамВремени.Прочитать();
					ТаблицаНабора = НаборГрафикиРаботыПоВидамВремени.Выгрузить();
					Для НомерДня = 1 По КоличествоДней Цикл
						
						// По регистру сведений "ГрафикиРаботыПоВидамВремени" по часам
						ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоОтработанноеВремя, ТаблицаНабора, НомерДня);
						
						// По регистру сведений "ГрафикиРаботыПоВидамВремени" по дням
						ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоОтработанноеВремя, ТаблицаНабора, НомерДня);
						
						// По регистру накоплений "РабочееВремяРаботниковОрганизаций"
						ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(СтруктураШапкиДокумента, ВыборкаПоОтработанноеВремя, НаборДвижений, НомерДня);
						
					КонецЦикла;
					
					НаборГрафикиРаботыПоВидамВремени.Загрузить(ТаблицаНабора);
					НаборГрафикиРаботыПоВидамВремени.Записать();
					
				КонецЦикла;
				
			Иначе  
				// Данные введены за день.
				////////////////////////////////////////////////////////////////////////
				// Отработанное время
				
				МассивСотрудниковДляСозданияПустыхЗаписей = ПолучитьМассивСотрудниковДляСозданияПустыхЗаписей(СтруктураШапкиДокумента);
				НаборГрафикиРаботыПоВидамВремени = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
				
				НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ПериодРегистрации);
				НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Ложь);
				
				ДеньОкончанияМесяца = День(КонецМесяца(ПериодРегистрации));
				ВидУчетаВремениПоДням = Перечисления.ВидыУчетаВремени.ПоДням;
				ВидУчетаВремениПоЧасам = Перечисления.ВидыУчетаВремени.ПоЧасам;
				ПустойДокумент = Документы.СдельныйНаряд.ПустаяСсылка();
				
				НомерДня = День(ДатаНачалаПериода);
				
				Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("Сотрудник") Цикл
					
					Если ОтражатьВБухгалтерскомУчете Тогда
						НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(ВыборкаПоОтработанноеВремя.Сотрудник);
						СотрудникДляПоиска = ВыборкаПоОтработанноеВремя.Сотрудник;
					Иначе
						НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(ВыборкаПоОтработанноеВремя.ФизЛицо);
						СотрудникДляПоиска = ВыборкаПоОтработанноеВремя.ФизЛицо;
					КонецЕсли;
					СуммаВремениЗаВесьДень = ВыборкаПоОтработанноеВремя["Часов" + Строка(НомерДня)];
					Если МассивСотрудниковДляСозданияПустыхЗаписей.Найти(СотрудникДляПоиска) = Неопределено Тогда
						// Пустые записи создавать не нужно, записываем только информацию за день
						НаборГрафикиРаботыПоВидамВремени.Отбор.Дата.Установить(ДатаНачалаПериода);
						НаборГрафикиРаботыПоВидамВремени.Прочитать();
						
						Для ИндексЗаписиРегистра = 0 По НаборГрафикиРаботыПоВидамВремени.Количество() - 1 Цикл
							ТекущаяЗаписьРегистра = НаборГрафикиРаботыПоВидамВремени[ИндексЗаписиРегистра];
							
							Если ТекущаяЗаписьРегистра.ВидУчетаВремени = ВидУчетаВремениПоЧасам Тогда
								// По регистру сведений "ГрафикиРаботыПоВидамВремени" по часам
								// Ресурсы
								ТекущаяЗаписьРегистра.ОсновноеЗначениеПолное = ТекущаяЗаписьРегистра.ОсновноеЗначениеПолное + СуммаВремениЗаВесьДень;
								ТекущаяЗаписьРегистра.ДополнительноеЗначениеПолное = ?((ТекущаяЗаписьРегистра.ДополнительноеЗначениеПолное > 0) ИЛИ (СуммаВремениЗаВесьДень > 0), 1, 0);
								// Реквизиты
								ТекущаяЗаписьРегистра.Документ = Ссылка;
							ИначеЕсли ТекущаяЗаписьРегистра.ВидУчетаВремени = ВидУчетаВремениПоДням Тогда
								// По регистру сведений "ГрафикиРаботыПоВидамВремени" по дням
								// Ресурсы
								ТекущаяЗаписьРегистра.ОсновноеЗначениеПолное = ?(СуммаВремениЗаВесьДень = 0, 0, 1);
								ТекущаяЗаписьРегистра.ДополнительноеЗначениеПолное = СуммаВремениЗаВесьДень;
								// Реквизиты
								ТекущаяЗаписьРегистра.Документ = Ссылка;
							КонецЕсли;
						КонецЦикла;
					Иначе
						// Нужно создать пустые записи, и записать информацию за день
						
						
						НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Ложь);
						НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ПериодРегистрации);
						НаборГрафикиРаботыПоВидамВремени.Отбор.Дата.Использование = Ложь;
						
						НаборГрафикиРаботыПоВидамВремени.Очистить();
						Для ИндексДняМесяца = 1 По ДеньОкончанияМесяца Цикл
							
							ДатаМесяца = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), ИндексДняМесяца);
							ДвижениеПоДням = НаборГрафикиРаботыПоВидамВремени.Добавить();
							ДвижениеПоЧасам = НаборГрафикиРаботыПоВидамВремени.Добавить();
							Если ДатаМесяца = ДатаНачалаПериода Тогда
								// Добавляем данные за день
								ДвижениеПоДням.ОсновноеЗначениеПолное = ?(СуммаВремениЗаВесьДень = 0, 0, 1);
								ДвижениеПоДням.ДополнительноеЗначениеПолное = СуммаВремениЗаВесьДень;
								ДвижениеПоДням.Документ = Ссылка;
								
								ДвижениеПоЧасам.ОсновноеЗначениеПолное = ДвижениеПоЧасам.ОсновноеЗначениеПолное + СуммаВремениЗаВесьДень;
								ДвижениеПоЧасам.ДополнительноеЗначениеПолное = ?((ДвижениеПоЧасам.ДополнительноеЗначениеПолное > 0) ИЛИ (СуммаВремениЗаВесьДень > 0), 1, 0);
								ДвижениеПоЧасам.Документ = Ссылка;
							Иначе
								// Создаем пустую запись
								ДвижениеПоДням.Документ = ПустойДокумент;
								ДвижениеПоЧасам.Документ = ПустойДокумент;
							КонецЕсли;
							
							ДвижениеПоДням.ГрафикРаботы = СотрудникДляПоиска;
							ДвижениеПоДням.ВидУчетаВремени = ВидУчетаВремениПоДням;
							ДвижениеПоДням.Дата = ДатаМесяца;
							ДвижениеПоДням.Месяц = ПериодРегистрации;
							ДвижениеПоДням.План = Ложь;
							
							ДвижениеПоЧасам.ГрафикРаботы = СотрудникДляПоиска;
							ДвижениеПоЧасам.ВидУчетаВремени = ВидУчетаВремениПоЧасам;
							ДвижениеПоЧасам.Дата = ДатаМесяца;
							ДвижениеПоЧасам.Месяц = ПериодРегистрации;
							ДвижениеПоЧасам.План = Ложь;
						КонецЦикла;
												
					КонецЕсли;
					НаборГрафикиРаботыПоВидамВремени.Записать();
					
					// По регистру накоплений "РабочееВремяРаботниковОрганизаций"
					ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(СтруктураШапкиДокумента, ВыборкаПоОтработанноеВремя, НаборДвижений, НомерДня);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаСотрудников = "";
			
			Пока РезультатЗапроса.Следующий() Цикл
				СтрокаСотрудников = СтрокаСотрудников + Символы.ПС + РезультатЗапроса.СотрудникНаименование + " (" + РезультатЗапроса.ДокументПредставление + ")";
			КонецЦикла;
			
			ОбщегоНазначения.СообщитьОбОшибке("На следующих работников данные об отработанном времени уже введены: " + СтрокаСотрудников, Истина);
			Отказ = Истина;
			
		КонецЕсли;
	КонецЕсли;
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	// Фактическая выработка
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ВыборкаПоРаботникиРегл.Сбросить();
	КонецЕсли;
	Если ОтражатьВУправленческомУчете Тогда
		ВыборкаПоРаботники.Сбросить();
	КонецЕсли;
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	// Не удалось получить учетную политику
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРегистров(СтруктураШапкиДокумента, ВыборкаПоРаботники, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл);
	
КонецПроцедуры // ОбработкаПроведения()


Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// удалим движения
	УдалитьДвижения();
	
	УдалитьЗаписиГрафика();	
	УдалитьЗаписиЗаПериодДокумента();
	
	Если Не ЗначениеЗаполнено(СпособВводаДанных) Тогда
		СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура определяет дату первого и последнего дня, в котром у работника
// было введено начисление.
//
Процедура ВычислитьДатуНачалаИОкончания(ПериодДействияНачало, ПериодДействияКонец, ВыборкаПоНачислениям, Сотрудник)
	
	ВыборкаПоНачислениям.Сбросить();
	Если ВыборкаПоНачислениям.НайтиСледующий(Сотрудник,"Сотрудник") Тогда
		ПериодДействияНачало = ВыборкаПоНачислениям.ПериодДействияНачало;
		ПериодДействияКонец = ВыборкаПоНачислениям.ПериодДействияКонец;
	КонецЕсли;
	
КонецПроцедуры //ВычислитьДатуНачалаИОкончания()

// Процедура формирует движения в регистры по ТЧ Выработка
Процедура ДвиженияПоТабличнойЧастиВыработка(СтруктураШапкиДокумента)
	
	УправлениеЗатратамиДвиженияПоРегистрам.СформироватьДвиженияПоОтражениюЗатрат(
		СтруктураШапкиДокумента,
		Неопределено, // ТаблицаЗатрат,
		Неопределено // ВидОтраженияВУчете
	);
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиВыработка()

// Функция возвращает график работы  сотрудника, на указанную дату, 
// если сотрудник еще не работал на указанную дату, тогда возвращается ближайший график (срез первых)
Функция ПолучитьГрафикСотрудникаНаДату(Сотрудник, ДатаПолученияГрафика)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Месяц", ДатаПолученияГрафика);
	Запрос.Текст = "ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Месяц, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПервых.ГрафикРаботы
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПервых(&Месяц, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПервых
	|ГДЕ
	|	РаботникиОрганизацийСрезПервых.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ГрафикРаботы;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // ПолучитьГрафикСотрудникаНаДату(Сотрудник, ДатаПолученияГрафика()


// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()
 
// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация, , Заголовок);

		
		Если НЕ Отказ И ЗначениеЗаполнено(мУчетнаяПолитикаНУ) Тогда
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль", мУчетнаяПолитикаНУ.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"           , мУчетнаяПолитикаНУ.ЕстьНДС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

Функция СформироватьЗапросПоНачислениям()

	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачалоПериода.Сотрудник,
	|	НачалоПериода.ВидРасчета,
	|	НачалоПериода.ПериодДействияНачало,
	|	ЕСТЬNULL(КонецПериода.ПериодДействияКонец, &ДатаОкончанияСобытия) КАК ПериодДействияКонец
	|ИЗ
	|	(ВЫБРАТЬ
	|		СрезПервых.Сотрудник КАК Сотрудник,
	|		СрезПервых.Период КАК ПериодДействияНачало,
	|		СрезПервых.ВидРасчета КАК ВидРасчета
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник КАК Сотрудник,
	|			ПлановыеНачисления.Период КАК Период,
	|			ПлановыеНачисления.ВидРасчета КАК ВидРасчета
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПервых(
	|				&ДатаНачалаСобытия,
	|				Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СдельныйНарядИсполнители.Сотрудник
	|					ИЗ
	|						Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|					ГДЕ
	|						СдельныйНарядИсполнители.Ссылка = &ДокументСсылка)) КАК ПлановыеНачисления
	|		ГДЕ
	|			ПлановыеНачисления.ВидРасчета.СпособРасчета = &СпособРасчета
	|			И ПлановыеНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)) КАК СрезПервых
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ПлановыеНачисления.Сотрудник КАК Сотрудник
	|			ИЗ
	|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|					&ДатаНачалаСобытия,
	|					Сотрудник В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СдельныйНарядИсполнители.Сотрудник
	|						ИЗ
	|							Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|						ГДЕ
	|							СдельныйНарядИсполнители.Ссылка = &ДокументСсылка)) КАК ПлановыеНачисления
	|			ГДЕ
	|				ПлановыеНачисления.ВидРасчета.СпособРасчета = &СпособРасчета
	|				И ПлановыеНачисления.Актуальность) КАК СрезПоследних
	|			ПО СрезПервых.Сотрудник = СрезПоследних.Сотрудник
	|	ГДЕ
	|		СрезПоследних.Сотрудник ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлановыеНачисления.Сотрудник,
	|		ВЫБОР
	|			КОГДА ПлановыеНачисления.Период >= &ДатаНачалаСобытия
	|				ТОГДА ПлановыеНачисления.Период
	|			ИНАЧЕ &ДатаНачалаСобытия
	|		КОНЕЦ,
	|		ПлановыеНачисления.ВидРасчета
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			&ДатаНачалаСобытия,
	|			Сотрудник В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СдельныйНарядИсполнители.Сотрудник
	|				ИЗ
	|					Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|				ГДЕ
	|					СдельныйНарядИсполнители.Ссылка = &ДокументСсылка)) КАК ПлановыеНачисления
	|	ГДЕ
	|		ПлановыеНачисления.ВидРасчета.СпособРасчета = &СпособРасчета) КАК НачалоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПлановыеНачисления.Сотрудник КАК Сотрудник,
	|			ПлановыеНачисления.Период КАК ПериодДействияКонец
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|				&ДатаОкончанияСобытия,
	|				Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СдельныйНарядИсполнители.Сотрудник
	|					ИЗ
	|						Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|					ГДЕ
	|						СдельныйНарядИсполнители.Ссылка = &ДокументСсылка)) КАК ПлановыеНачисления
	|		ГДЕ
	|			ПлановыеНачисления.ВидРасчета.СпособРасчета = &СпособРасчета
	|			И ПлановыеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)) КАК КонецПериода
	|		ПО НачалоПериода.Сотрудник = КонецПериода.Сотрудник";
	
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень,ДатаНачалаПериода,ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончанияСобытия", ?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень,ДатаНачалаПериода,КонецМесяца(ПериодРегистрации)));
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("НачальнаяДата", '00010101');
	Запрос.УстановитьПараметр("СпособРасчета", Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // СформироватьЗапросПоНачислениям()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");

ВидУчетаВремениПоДням  = Перечисления.ВидыУчетаВремени.ПоДням;
ВидУчетаВремениПоЧасам = Перечисления.ВидыУчетаВремени.ПоЧасам;


КлассификаторНочноеВремя = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные;

КлассификаторВечернееВремя = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;

КлассификаторЯвка = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
КлассификаторВечерниеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;
КлассификаторНочныеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные;
КлассификаторПустаяСсылка = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
