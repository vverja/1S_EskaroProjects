Перем мУдалятьДвижения;



Перем мОткладываниеНапоминания Экспорт;

Перем мСписокСтарыхПользователей;

Перем мСтараяДатаНачалаСобытия;

Перем мСтараяДатаОкончанияСобытия;

Перем мСписокПользователей;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура проверяет дублирование контактных лиц в табличной части
// "СторонниеЛица" документа.
Процедура ПроверкаДублированиеКонтактныхЛиц(Отказ)
	
	Если СторонниеЛица.Найти(КонтактноеЛицо) <> Неопределено Тогда
		Отказ = Истина;
		# Если Клиент Тогда
		Сообщить("В табл. части ""Кандидаты"" продублировано лицо, указанное также в шапке документа.");
		# КонецЕсли
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.Ссылка,
	|	ПерваяТаблица.Лицо,
	|	ВтораяТаблица.НомерСтроки КАК КонфликтнаяСтрока
	|ИЗ
	|	Документ.Событие.СторонниеЛица КАК ПерваяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Событие.СторонниеЛица КАК ВтораяТаблица
	|		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки И ПерваяТаблица.Лицо = ВтораяТаблица.Лицо
	|
	|ГДЕ
	|	ПерваяТаблица.Ссылка = &ДокументСсылка";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;
		# Если Клиент Тогда
		Сообщить("Повторяющие записи в строке номер """+Выборка.НомерСтроки+""" и в строке """+Выборка.КонфликтнаяСтрока+" табл. части ""Кандидаты""");
		# КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокПользователейДляКалендаря() Экспорт

	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Пользователь");
	
	НоваяСтрокаТаблицыПользователей = ТаблицаПользователей.Добавить();
	Если ЗначениеЗаполнено(Ответственный) Тогда
		НоваяСтрокаТаблицыПользователей.Пользователь = Ответственный;
	Иначе
		НоваяСтрокаТаблицыПользователей.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Для каждого СтрокаТаблицыРаботников Из РаботникиОрганизации Цикл
		
		Если СтрокаТаблицыРаботников.Работник.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		
		НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо", СтрокаТаблицыРаботников.Работник);
		
		Если НЕ НайденныйПользователь.Пустая() Тогда
			НоваяСтрокаТаблицыПользователей = ТаблицаПользователей.Добавить();
			НоваяСтрокаТаблицыПользователей.Пользователь = НайденныйПользователь;
		КонецЕсли; 
	
	КонецЦикла;
	
	ТаблицаПользователей.Свернуть("Пользователь");
	
	СписокПользователей = Новый СписокЗначений;
	
	СписокПользователей.ЗагрузитьЗначения(ТаблицаПользователей.ВыгрузитьКолонку("Пользователь"));
	
	Возврат СписокПользователей;

КонецФункции // ПолучитьСписокПользователейДляКалендаря()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если НЕ Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Диаграмма" Тогда
		Отчет = Отчеты.ДиаграммаГанта.Создать();
		Отчет.ВидОтчета = "Планируемая занятость работников (не утвержденная)";
		Отчет.Периодичность = 0;
		Отчет.мСтильДиаграммыПланНеУтвержденный = ЦветаСтиля.ПлановыйНеутвержденныйПоказатель;
		Отчет.мСтильДиаграммыПланУтвержденный   = ЦветаСтиля.ПлановыйУтвержденныйПоказатель;
		Отчет.мСтильДиаграммыФакт               = ЦветаСтиля.ФактическийПоказатель;
		Отчет.ЗаполнитьНачальныеНастройки();
		Если (ОкончаниеСобытия - НачалоСобытия) < 60*60*24 Тогда
			Отчет.ДатаНач = НачалоДня(НачалоСобытия);
			Отчет.ДатаКон = КонецДня(ОкончаниеСобытия);
		Иначе
			Отчет.ДатаНач = НачалоНедели(НачалоСобытия);
			Отчет.ДатаКон = КонецНедели(ОкончаниеСобытия);
		КонецЕсли;
		Отчет.Печать(Ссылка);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
	КонецЕсли;

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Диаграмма", "Диаграмма");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ВвестиЗаписьВРегистр(Дата, НомерНачальнойСтроки, НомерКонечнойСтроки, НаборЗаписейРегистра, ПоПомещению = Ложь)
	
	Если ПоПомещению Тогда
		
		Если НЕ ЗначениеЗаполнено(Помещение) Тогда
			Возврат;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		
		НоваяЗапись.Событие              = Ссылка;
		НоваяЗапись.Дата                 = Дата;
		НоваяЗапись.НомерНачальнойСтроки = НомерНачальнойСтроки;
		НоваяЗапись.НомерКонечнойСтроки  = НомерКонечнойСтроки;
		НоваяЗапись.Пользователь         = Справочники.Пользователи.ПустаяСсылка();
		
		НоваяЗапись.ДатаНачалаСобытия    = НачалоСобытия;
		НоваяЗапись.ДатаКонцаСобытия     = ОкончаниеСобытия;
		
	Иначе
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			
			НоваяЗапись.Событие              = Ссылка;
			НоваяЗапись.Дата                 = Дата;
			НоваяЗапись.НомерНачальнойСтроки = НомерНачальнойСтроки;
			НоваяЗапись.НомерКонечнойСтроки  = НомерКонечнойСтроки;
			НоваяЗапись.Пользователь         = ЭлементСпискаПользователей.Значение;
			
			НоваяЗапись.ДатаНачалаСобытия    = НачалоСобытия;
			НоваяЗапись.ДатаКонцаСобытия     = ОкончаниеСобытия;
			НоваяЗапись.Контрагент           = Контрагент;
			НоваяЗапись.КонтактноеЛицо       = КонтактноеЛицо;
			НоваяЗапись.ОписаниеСобытия      = ОписаниеСобытия;
			НоваяЗапись.Важность             = Важность;
			НоваяЗапись.СостояниеСобытия     = СостояниеСобытия;
			НоваяЗапись.ТипСобытия           = ТипСобытия;
			НоваяЗапись.ВидСобытия           = ВидСобытия;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗапомнитьСтарыеЗначения()

	мСписокСтарыхПользователей = Новый СписокЗначений;
	мСтараяДатаНачалаСобытия = НачалоСобытия;
	мСтараяДатаОкончанияСобытия = ОкончаниеСобытия;
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущееСобытие", Ссылка);
	
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	СобытияКалендаряПользователяОбобщенные.Пользователь КАК Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата КАК ДатаСобытия
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие = &ТекущееСобытие
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	СобытияКалендаряПользователяОбобщенные.Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
	
		ТаблицаПользователей = ТаблицаЗапроса.Скопировать();
		ТаблицаПользователей.Свернуть("Пользователь");
		мСписокСтарыхПользователей.ЗагрузитьЗначения(ТаблицаПользователей.ВыгрузитьКолонку("Пользователь"));
		
		ТаблицаЗапроса.Свернуть("ДатаСобытия");
		ТаблицаЗапроса.Сортировать("ДатаСобытия ВОЗР");
		
		мСтараяДатаНачалаСобытия = ТаблицаЗапроса[0].ДатаСобытия;
		мСтараяДатаОкончанияСобытия = ТаблицаЗапроса[ТаблицаЗапроса.Количество() - 1].ДатаСобытия;
	
	КонецЕсли; 

КонецПроцедуры

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)
   	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаПо",			ОкончаниеСобытия - 1);
	Запрос.УстановитьПараметр("Помещение",		Помещение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланируемыеВстречи.НачалоСобытия,
	|	ПланируемыеВстречи.Помещение,
	|	ПланируемыеВстречи.ОкончаниеСобытия,
	|	ПланируемыеВстречи.Ссылка,
	|	ПланируемыеВстречи.Ответственный.ФизЛицо КАК ФизЛицо,
	|	ПланируемыеВстречи.Ответственный,
	|	ИмеющаясяЗанятость.Занятость КАК КонфликтнаяЗанятость,
	|	ИмеющаясяЗанятость.Регистратор.Представление КАК КонфликтныйДокумент
	|ИЗ
	|	Документ.Событие КАК ПланируемыеВстречи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемаяЗанятостьПомещений КАК ИмеющаясяЗанятость
	|		ПО ПланируемыеВстречи.НачалоСобытия = ИмеющаясяЗанятость.Период
	|			И ПланируемыеВстречи.Ссылка <> ИмеющаясяЗанятость.Регистратор
	|			И ПланируемыеВстречи.Помещение = ИмеющаясяЗанятость.Помещение
	|ГДЕ
	|	ПланируемыеВстречи.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части "СписокРаботников" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса к табличной части документа.
//
Функция СформироватьЗапросПоСписокРаботников(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоСобытия);
	Запрос.УстановитьПараметр("ДатаОкончания",	ОкончаниеСобытия);
		
		// Описание текста запроса:
		// 1. Выборка "ПерваяТаблица": 
		//		Выбираются строки т.ч. СписокРаботников документа
		// 2. Выборка "СобытийныйПланЗанятостиФизлицСрезПоследних": 
		//		Из таблицы среза последних регистра выбираем планируемое состояние для проверки
		//      В качестве условия на измерение задается список физлиц, упомянутых в документе.
		// 3. Выборка "ВтораяТаблица": 
		//		Среди строк документа ищем строки с пересекающимися периодами отпусков 
		//      для одного работника
		//
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.Ссылка,
	|	ПерваяТаблица.Сотрудник,
	|	ПерваяТаблица.Сотрудник.Физлицо КАК Работник,
	|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК КонфликтнаяСтрока,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|					КОГДА СобытийныйПланЗанятостиФизлицСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|							И СобытийныйПланЗанятостиФизлицСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА СобытийныйПланЗанятостиФизлицСрезПоследних.СостояниеЗавершения
	|					ИНАЧЕ СобытийныйПланЗанятостиФизлицСрезПоследних.Состояние
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|				ИЛИ СобытийныйПланЗанятостиФизлицСрезПоследних.Период >= &ДатаНачала
	|			ТОГДА ""Нельзя""
	|		ИНАЧЕ ""Можно""
	|	КОНЕЦ КАК ПроверяемоеЗначение
	|ИЗ
	|	Документ.Событие.РаботникиОрганизации КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Событие.РаботникиОрганизации КАК ВтораяТаблица
	|		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|			И ПерваяТаблица.Сотрудник = ВтораяТаблица.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц.СрезПоследних(
	|				&ДатаОкончания,
	|				ФизЛицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ПланируемыеВстречиСписокРаботников.Сотрудник.Физлицо
	|					ИЗ
	|						Документ.Событие.РаботникиОрганизации КАК ПланируемыеВстречиСписокРаботников
	|					ГДЕ
	|						ПланируемыеВстречиСписокРаботников.Ссылка = &ДокументСсылка)) КАК СобытийныйПланЗанятостиФизлицСрезПоследних
	|		ПО ПерваяТаблица.Сотрудник.Физлицо = СобытийныйПланЗанятостиФизлицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ПерваяТаблица.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПерваяТаблица.НомерСтроки,
	|	СобытийныйПланЗанятостиФизлицСрезПоследних.Период,
	|	ПерваяТаблица.Ссылка,
	|	СобытийныйПланЗанятостиФизлицСрезПоследних.Состояние,
	|	ПерваяТаблица.Сотрудник,
	|	ПерваяТаблица.Сотрудник.Физлицо,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|					КОГДА СобытийныйПланЗанятостиФизлицСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|							И СобытийныйПланЗанятостиФизлицСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА СобытийныйПланЗанятостиФизлицСрезПоследних.СостояниеЗавершения
	|					ИНАЧЕ СобытийныйПланЗанятостиФизлицСрезПоследних.Состояние
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|				ИЛИ СобытийныйПланЗанятостиФизлицСрезПоследних.Период >= &ДатаНачала
	|			ТОГДА ""Нельзя""
	|		ИНАЧЕ ""Можно""
	|	КОНЕЦ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();


КонецФункции // СформироватьЗапросПоСписокРаботников()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	
	// Помещение
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Помещение) и (ВыборкаПоШапкеДокумента.КонфликтнаяЗанятость <> NULL) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Помещение на указанный период времени ранее уже зарезервировано!", Отказ);
	КонецЕсли;

	// ПродолжительностьЧасов
	Если ВыборкаПоШапкеДокумента.НачалоСобытия = ВыборкаПоШапкеДокумента.ОкончаниеСобытия или НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НачалоСобытия) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задана продолжительность встречи!", Отказ);
	ИначеЕсли ВыборкаПоШапкеДокумента.НачалоСобытия > ВыборкаПоШапкеДокумента.ОкончаниеСобытия Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Начало встречи не может быть позже её окончания!", Отказ);
	КонецЕсли;

	// Проверка: в регистре уже есть такое Движение
	Если ВыборкаПоШапкеДокумента.КонфликтнаяЗанятость <> NULL Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Помещение уже занято документом " + ВыборкаПоШапкеДокумента.КонфликтныйДокумент + "!", Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "СписокРаботников" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Список работников"": ";
	
	// Работник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Работник) Тогда
		Сообщить(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!");
	КонецЕсли;
	
	// Занятость работника
	Если ВыборкаПоСтрокамДокумента.ПроверяемоеЗначение <> "Можно" Тогда
		Сообщить(СтрокаНачалаСообщенияОбОшибке + " работник в указанный период времени уже занят!");
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = " найдена повторяющаяся строка №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока;
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
	КонецЕсли;

	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиСписокРаботников()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("СборДанныхДляПланированияЗанятостиФизлиц");
	Если НЕ Помещение.Пустая() Тогда
		СтруктураПроведенияПоРегистрамСведений.Вставить("ПланируемаяЗанятостьПомещений");
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  ВыборкаПоСписокРаботников             - выборка из результата запроса по строкам документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокРаботников, 
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СборДанныхДляПланированияЗанятостиФизлиц";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = НачалоСобытия;

		// Измерения
		Движение.Физлицо                    = ВыборкаПоСписокРаботников.Работник;
		Движение.Документ                   = Ссылка;
		
		// Ресурсы
		Движение.Состояние                  = Перечисления.ТипыПериодическихЗадачРаботника.Встреча;
		
		// Реквизиты
		Движение.ДатаОкончания              = ОкончаниеСобытия;
		
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ОкончаниеСобытия;

		// Измерения
		Движение.Физлицо                    = ВыборкаПоСписокРаботников.Работник;
		Движение.Документ                   = Ссылка;
		
		
		// Ресурсы
		Движение.Состояние                  = Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
		

		
	КонецЕсли;
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоСписокРаботников

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоШапке(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "ПланируемаяЗанятостьПомещений";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоШапкеДокумента.НачалоСобытия;
	
		// Измерения
		Движение.Помещение                  = ВыборкаПоШапкеДокумента.Помещение;
		Движение.Занятость					= Перечисления.Занятость.Занято;
		// Реквизиты
		Движение.ДатаОкончания              = ВыборкаПоШапкеДокумента.ОкончаниеСобытия - 1;


		// Ресурсы

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоШапкеДокумента.ОкончаниеСобытия - 1;

		// Измерения
		Движение.Помещение                  = ВыборкаПоШапкеДокумента.Помещение;
		Движение.Занятость					= Перечисления.Занятость.Свободно;  

		// Ресурсы
		
	КонецЕсли;
	
	
	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СборДанныхДляПланированияЗанятостиФизлиц";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = НачалоСобытия;
	
		// Измерения
		Движение.Физлицо                    = Ответственный.ФизЛицо;
		Движение.Документ                   = Ссылка;
		
		
		// Ресурсы
		Движение.Состояние                  = Перечисления.ТипыПериодическихЗадачРаботника.Встреча;
		
		// Реквизиты
		Движение.ДатаОкончания              = ОкончаниеСобытия;

		
		
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ОкончаниеСобытия;

		// Измерения
		Движение.Физлицо                    = Ответственный.ФизЛицо;
		Движение.Документ                   = Ссылка;
			
		// Ресурсы
		Движение.Состояние                  = Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
	КонецЕсли;

	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоШапке

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДокОснование)

	ТипСобытия       = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	ВидСобытия       = Перечисления.ВидыСобытий.ТелефонныйЗвонок;
	Основание        = ДокОснование;
	Важность         = Перечисления.Важность.Средняя;
	СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано;
	Ответственный    = ПараметрыСеанса.ТекущийПользователь;
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) ИЛИ Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокОснование.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда
		Проект = ДокОснование.Проект;
	КонецЕсли; 
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
	 ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
	 ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
		Контрагент     = ДокОснование.Контрагент;
		КонтактноеЛицо = ДокОснование.КонтактноеЛицоКонтрагента;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПереоценкаТоваровОтданныхНаКомиссию")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПереоценкаТоваровПринятыхНаКомиссию")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ДокОснование.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ДокОснование.Проект) Тогда
					Проект=ДокОснование.Проект;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Или ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
				Если ДокОснование.РасшифровкаПлатежа.Количество() > 0 Тогда
					Если ЗначениеЗаполнено(ДокОснование.РасшифровкаПлатежа[0].Проект) Тогда
						Проект=ДокОснование.РасшифровкаПлатежа[0].Проект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
		Контрагент = ДокОснование.Контрагент;

	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РезервированиеТоваров") Тогда
		
		Если ДокОснование.Заказ <> Неопределено И НЕ ДокОснование.Заказ.Пустая() И ТипЗнч(ДокОснование.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент     = ДокОснование.Заказ.Контрагент;
			КонтактноеЛицо = ДокОснование.Заказ.КонтактноеЛицоКонтрагента;
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		Если ДокОснование.Контрагент <> Неопределено И ТипЗнч(ДокОснование.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент = ДокОснование.Контрагент;
		КонецЕсли; 
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ДокОснование.РасшифровкаПлатежа.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(ДокОснование.РасшифровкаПлатежа[0].Проект) Тогда
					Проект=ДокОснование.РасшифровкаПлатежа[0].Проект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда

		Если ДокОснование.Контрагент <> Неопределено И ТипЗнч(ДокОснование.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент = ДокОснование.Контрагент;
		КонецЕсли; 
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ДокОснование.РасшифровкаПлатежа.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(ДокОснование.РасшифровкаПлатежа[0].Проект) Тогда
					Проект=ДокОснование.РасшифровкаПлатежа[0].Проект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.Событие") Тогда
		
		Контрагент     = ДокОснование.Контрагент;
		КонтактноеЛицо = ДокОснование.КонтактноеЛицо;
		ВидСобытия     = ДокОснование.ВидСобытия;
		ТипСобытия     = ДокОснование.ТипСобытия;
		Важность       = ДокОснование.Важность;
		Основание      = ДокОснование;
		ВидОбъекта     = ДокОснование.ВидОбъекта;
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Проект=ДокОснование.Проект;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
		
		ВидСобытия       = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
		
		Запрос = Новый Запрос;
		
		Если ДокОснование.СтатусПисьма <> Перечисления.СтатусыПисем.Полученное Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|	ПРАВОЕ СОЕДИНЕНИЕ
			|		(
			|		ВЫБРАТЬ
			|			ЭлектронноеПисьмоКомуТЧ.АдресЭлектроннойПочты
			|		ИЗ
			|			Документ.ЭлектронноеПисьмо.КомуТЧ КАК ЭлектронноеПисьмоКомуТЧ
			|		ГДЕ
			|			ЭлектронноеПисьмоКомуТЧ.Ссылка = &ТекДокумент
			|		) КАК Адреса
			|	ПО
			|		ВЫРАЗИТЬ(Адреса.АдресЭлектроннойПочты КАК СТРОКА(128)) = ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(128))
			|
			|ГДЕ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
			|	ИЛИ
			|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛицаКонтрагентов
			|	ИЛИ
			|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица)
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|";
			
			Запрос.УстановитьПараметр("ТекДокумент", ДокОснование);
			
		Иначе
			
			ТипСобытия       = Перечисления.ВходящееИсходящееСобытие.Входящее;
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|ГДЕ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
			|	ИЛИ
			|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛицаКонтрагентов
			|	ИЛИ
			|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица)
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|	И
			|	КонтактнаяИнформация.Представление ПОДОБНО &Представление
			|";
			
			Запрос.УстановитьПараметр("Представление", ДокОснование.ОтправительАдресЭлектроннойПочты);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Личное", Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ВыбОбъект = Выборка.Объект;
			Иначе
				СписокВыбора = Новый СписокЗначений;
				Пока Выборка.Следующий() Цикл
					СписокВыбора.Добавить(Выборка.Объект);
				КонецЦикла;
				
				ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите объект события");
				
				Если ВыбранныйЭлемент = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				ВыбОбъект = ВыбранныйЭлемент.Значение;
				
			КонецЕсли; 
		
		КонецЕсли; 

		Если ТипЗнч(ВыбОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица;
			КонтактноеЛицоБезКонтрагента = ВыбОбъект;
		ИначеЕсли ТипЗнч(ВыбОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент = ВыбОбъект;
		Иначе
			ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Кандидат;
			КонтактноеЛицо = ВыбОбъект;
		КонецЕсли; 

		Основание       = ДокОснование;
		ОписаниеСобытия = ДокОснование.Тема;
		Если ДокОснование.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ ДокОснование.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
			НовыйHTMLДокумент.open("text/html");
			НовыйHTMLДокумент.write(ДокОснование.ТекстПисьма);
			НовыйHTMLДокумент.close();
			СодержаниеСобытия = СтрЗаменить(НовыйHTMLДокумент.all.item(0).innerText, Символ(13), "");
		Иначе
			СодержаниеСобытия = ДокОснование.ТекстПисьма;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события объекта "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)

	ИсточникИнформацииПриОбращении = Справочники.ИсточникиИнформацииПриОбращенииПокупателей.ПустаяСсылка();
	
КонецПроцедуры

// Процедура - обработчик события объекта "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	//структура, содержащая имена регистров сведений по которым надо проводить документ для управления персоналом
	Перем СтруктураПроведенияПоРегистрамСведений;

	// Формируем движения для нужд календаря пользователя
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ЗапомнитьСтарыеЗначения();
	
	мСписокПользователей = ПолучитьСписокПользователейДляКалендаря();
	
	НаборЗаписей = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НачальнаяСтрока = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(НачалоСобытия,"ДФ=Ч"), Формат(НачалоСобытия,"ДФ=м"), НачалоСобытия, Истина, НачалоСобытия);
	Если Формат(НачалоСобытия,"ДФ=Ч") = Формат(ОкончаниеСобытия,"ДФ=Ч") И Формат(НачалоСобытия,"ДФ=м") = Формат(ОкончаниеСобытия,"ДФ=м") Тогда
		КонечнаяСтрока  = НачальнаяСтрока;
	Иначе
		КонечнаяСтрока  = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(ОкончаниеСобытия,"ДФ=Ч"), Формат(ОкончаниеСобытия,"ДФ=м"), ОкончаниеСобытия, Ложь, ОкончаниеСобытия);
	КонецЕсли; 

	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
	
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));

		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл

			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
		
			ВвестиЗаписьВРегистр(ДатаИнтервала, 1, 48, НаборЗаписей);
			ВвестиЗаписьВРегистр(ДатаИнтервала, 1, 48, НаборЗаписей, Истина);
		
		КонецЦикла;

		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, 48, НаборЗаписей);
		ВвестиЗаписьВРегистр(НачалоДня(ОкончаниеСобытия), 1, КонечнаяСтрока, НаборЗаписей);

		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, 48, НаборЗаписей, Истина);
		ВвестиЗаписьВРегистр(НачалоДня(ОкончаниеСобытия), 1, КонечнаяСтрока, НаборЗаписей, Истина);

		
	Иначе

		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, КонечнаяСтрока, НаборЗаписей);
		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, КонечнаяСтрока, НаборЗаписей, Истина);
		
	КонецЕсли;

	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;

	СписокПерераспределенныхДат = Новый СписокЗначений;

	Если НачалоДня(мСтараяДатаНачалаСобытия) <> НачалоДня(НачалоСобытия) ИЛИ НачалоДня(мСтараяДатаОкончанияСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		КоличествоИнтерваловМеждуДнями = Цел((КонецДня(мСтараяДатаОкончанияСобытия) + 1 - НачалоДня(мСтараяДатаНачалаСобытия))/(60*60*24));
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоДня(мСтараяДатаНачалаСобытия) + (60*60*24)*а - 1);
			СписокПерераспределенныхДат.Добавить(ДатаИнтервала);
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
			// по помещению
			Если ЗначениеЗаполнено(Помещение) Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала);
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 

	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			Если СписокПерераспределенныхДат.НайтиПоЗначению(ДатаИнтервала) = Неопределено Тогда
			
				Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
					СтарыйПользователь = ЭлементСпискаПользователей.Значение;
					Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
						УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
					КонецЕсли; 
				КонецЦикла; 
				
				Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
					УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
				КонецЦикла; 
				
				// по помещению
				Если ЗначениеЗаполнено(Помещение) Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(НачалоСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
			// по помещению
			Если ЗначениеЗаполнено(Помещение) Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия));
			КонецЕсли;
			
		КонецЕсли; 
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(ОкончаниеСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
			// по помещению
			Если ЗначениеЗаполнено(Помещение) Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия));
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(НачалоСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
		
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
			// по помещению
			Если ЗначениеЗаполнено(Помещение) Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия));
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	// Формируем движения для нужд управления персоналом, занятость помещений и физ.лиц
	
	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		
		Если  НЕ Ответственный.Пустая() И НЕ Ответственный.ФизЛицо.Пустая() И РаботникиОрганизации.Найти(Ответственный.ФизЛицо, "Работник") <> Неопределено Тогда
		
			СтрокаСообщенияОбОшибке = "Найдена строка с физ.лицом, которое выбрано в качестве физ.лица у пользователя, являющегося ответственным за данное событие.";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке, Отказ);
			Возврат;
		
		КонецЕсли; 
		
		// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
		// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
		// то проводить по нему не надо.
		ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений);
		
		Если НЕ Помещение.Пустая() Тогда
		
			РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

			ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
			ВыборкаПоШапкеДокумента.Следующий();
			
			//Надо проверить реквизиты шапки
			ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
		
		КонецЕсли; 
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда 

			Если НЕ Помещение.Пустая() Тогда
				ДобавитьСтрокуВДвиженияПоШапке(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			КонецЕсли;

			// получим реквизиты табличной части
			РезультатЗапросаПоСписокРаботников = СформироватьЗапросПоСписокРаботников(Режим);
		
			ВыборкаПоСписокРаботников = РезультатЗапросаПоСписокРаботников.Выбрать();

			Пока ВыборкаПоСписокРаботников.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокРаботников, Отказ);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокРаботников, СтруктураПроведенияПоРегистрамСведений);
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Источник информации
	Если ЗначениеЗаполнено(ИсточникИнформацииПриОбращении) И ТипЗнч(Контрагент)= Тип("СправочникСсылка.Контрагенты") Тогда
		Движение = Движения.ИсточникИнформацииПриОбращении.Добавить();
		Движение.Период 			= Дата;
		Движение.Контрагент			= Контрагент;
		Движение.ИсточникИнформации = ИсточникИнформацииПриОбращении;
		
		Попытка
			Движения.ИсточникИнформацииПриОбращении.Записать();
		Исключение
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события объекта "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	ЗапомнитьСтарыеЗначения();
	
	мСписокПользователей = ПолучитьСписокПользователейДляКалендаря();
	
	НаборЗаписей = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();

	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
		
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЦикла;
			
		Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
			СтарыйПользователь = ЭлементСпискаПользователей.Значение;
			Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), СтарыйПользователь);
			КонецЕсли; 
		КонецЦикла; 
	
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), ЭлементСпискаПользователей.Значение);
		КонецЦикла; 
		
	Иначе
			
		Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
			СтарыйПользователь = ЭлементСпискаПользователей.Значение;
			Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
			КонецЕсли; 
		КонецЦикла; 
	
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
		КонецЦикла; 
		
	КонецЕсли;
	
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

// Процедура - обработчик события объекта "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПолныеПрава.УдалитьДанныеНезарегистрированногоКонтрагента(Ссылка, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события объекта "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ОбменДанными.Загрузка Тогда
		
		Набор = Движения.ОбъектыЭлектронныхПисемИСобытий;
		Набор.Очистить();
		
		Если ЗначениеЗаполнено(КонтактноеЛицо) и ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запись = Набор.Добавить();
			Запись.Объект = КонтактноеЛицо;
			Запись.Предмет = ПредметКонтакта;
			Запись.Период = Дата;
		КонецЕсли;
		
		ПроверкаДублированиеКонтактныхЛиц(Отказ);
		
		Если НЕ Отказ Тогда
			Для каждого СтрокаТЧ из СторонниеЛица Цикл
				Если ЗначениеЗаполнено(СтрокаТЧ.Лицо) и ТипЗнч(СтрокаТЧ.Лицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					Запись = Набор.Добавить();
					Запись.Объект = СтрокаТЧ.Лицо;
					Запись.Предмет = ПредметКонтакта;
					Запись.Период = Дата;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		
		Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") И КонтактноеЛицоБезКонтрагента <> КонтактноеЛицо.КонтактноеЛицо Тогда
			КонтактноеЛицоБезКонтрагента = КонтактноеЛицо.КонтактноеЛицо;
		КонецЕсли;
		
		Если НачалоСобытия <> '00010101' Тогда
			Если НапомнитьОСобытии Тогда
				Если НЕ мОткладываниеНапоминания Тогда
					ВремяНапоминания = НачалоСобытия - ИнтервалНапоминания;
				КонецЕсли; 
			Иначе
				ВремяНапоминания = '00010101';
			КонецЕсли;
		КонецЕсли; 
	
	КонецЕсли; 
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры


мОткладываниеНапоминания = Ложь;
