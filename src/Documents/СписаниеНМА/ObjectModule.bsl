Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПревышенБюджет Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета = "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета = "СчетСписанияБУ, СубконтоБУ1, СубконтоБУ2 , СубконтоБУ3, НМА.СтоимостьБУ, НМА.АмортизацияБУ, НМА.АмортизацияЗаМесяцБУ, НМА.ОстСтоимостьБУ";
	мСтрокаРеквизитыНалУчета = "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()


///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

#Если Клиент Тогда

// Функция формирует табличный документ с типовой печатной формой НА-3
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНА3()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаДок",     Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокНМА",   НематериальныеАктивы.ВыгрузитьКолонку("НематериальныйАктив"));                    
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеНМА.Ссылка.Организация                          КАК Организация,
	|	СписаниеНМА.Ссылка.Организация.НаименованиеПолное       КАК НаименованиеПолноеОрганизации,
	|	СписаниеНМА.Ссылка.Дата                                 КАК ДатаДок,
	|	СписаниеНМА.Ссылка.Номер                                КАК НомерДок,
	|	СписаниеНМА.НематериальныйАктив.НаименованиеПолное      КАК НаименованиеПолное,
	|	СписаниеНМА.НематериальныйАктив.Код                     КАК ИнвентарныйНомер,
	|	СписаниеНМА.НематериальныйАктив.ПрочиеСведения          КАК ПрочиеСведения,
	|	СписаниеНМА.Ссылка.СчетСписанияБУ                       КАК СчетСписанияБУ,
	|	СписаниеНМА.СтоимостьБУ                                 КАК ПервоначальнаяСтоимость,
	|	СписаниеНМА.СтоимостьБУ - СписаниеНМА.АмортизацияБУ 
	|		- СписаниеНМА.АмортизацияЗаМесяцБУ                  КАК ОстаточнаяСтоимость,
	|	ПервоначальныеСведенияНМА_БУ.СрокПолезногоИспользования КАК СрокИспользования,
	|	ПервоначальныеСведенияНМА_БУ.ЛиквидационнаяСтоимость    КАК ЛиквидационнаяСтоимость,
	|	СчетаУчетаНМА_БУ.СчетУчета                              КАК СчетУчетаБУ
	|ИЗ
	|	Документ.СписаниеНМА.НематериальныеАктивы КАК СписаниеНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ДатаДок,
	|			Организация = &Организация
	|		    И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМА_БУ
	|		ПО СписаниеНМА.Ссылка.Организация = ПервоначальныеСведенияНМА_БУ.Организация
	|			И СписаниеНМА.НематериальныйАктив = ПервоначальныеСведенияНМА_БУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&ДатаДок,
	|			Организация = &Организация
	|		    И НематериальныйАктив В (&СписокНМА)) КАК СчетаУчетаНМА_БУ
	|		ПО СписаниеНМА.Ссылка.Организация = СчетаУчетаНМА_БУ.Организация
	|			И СписаниеНМА.НематериальныйАктив = СчетаУчетаНМА_БУ.НематериальныйАктив
	|ГДЕ
	|	СписаниеНМА.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеНМА_НА3";
	Макет         = ПолучитьОбщийМакет("НА3");
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);

	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
	СписокПоказателей.Добавить("", "ФИОРук");
	СписокПоказателей.Добавить("", "ФИОБух");
	СписокПоказателей = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, Дата, СписокПоказателей);
	СписокПоказателей.ФИОРук = ОбщегоНазначения.ФамилияИнициалыФизЛица(СписокПоказателей.ФИОРук);
	СписокПоказателей.ФИОБух = ОбщегоНазначения.ФамилияИнициалыФизЛица(СписокПоказателей.ФИОБух);
	НеПервый                 = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если НеПервый Тогда
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		Иначе
			
			НеПервый = Истина;
			
		КонецЕсли;
	
		ОбластьМакета = Макет.ПолучитьОбласть("НА3");
		Параметры     = ОбластьМакета.Параметры;
		Параметры.Заполнить(Выборка);
		Параметры.Заполнить(СписокПоказателей);
		Параметры.Заполнить(ВыборкаПоКомиссии);
		ТабДокумент.Вывести(ОбластьМакета);
	
	КонецЦикла;	
	
	ТабДокумент.ОбластьПечати = ТабДокумент.Область( , 2, , ТабДокумент.ШиринаТаблицы);

	Возврат ТабДокумент;

КонецФункции // ПечатьНА3()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "НА3" тогда
		
		ТабДокумент = ПечатьНА3();
		
	//ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
	//	
	//	ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
	//	ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
	//	Если ОбъектВнешнейФормы = Неопределено Тогда
	//		Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
	//	ДвоичныеДанные.Записать(ИмяФайла);
	//	Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	//	Обработка.СсылкаНаОбъект = Ссылка;
	//	ТабДокумент = Обработка.Печать();	
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Списание НМА"));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	
	СтруктПечатныхФорм.Вставить( "НА3", "Форма НА-3");
	
	Возврат СтруктПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
 	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()


///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, 
	                          ТаблицаПоНМА, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	////////////////////////////////////////////////////
	// Движения по регистрам подсистемы НематериальныеАктивы
	
	СостояниеНМА = Движения.СостоянияНМА;

	АмортизацияНМА = Движения.СтоимостьНМА;
	ТаблицаДвиженийАмортизация = АмортизацияНМА.Выгрузить();
	ТаблицаДвиженийАмортизация .Очистить();
	
	// Подготовим таблицу с данными по амортизации для списания амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", 	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", 				Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТабАмортизации.Колонки.Добавить("Амортизация", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТабАмортизации.Колонки.Добавить("ИмяСубконто", 				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		
	Для Каждого СтрокаНМА Из ТаблицаПоНМА Цикл
			
		Если СтрокаНМА.АмортизацияЗаМесяцУУ > 0 Тогда
				
			ТекМестонахождение = Неопределено;
			Если ТаблицаМестонахождений <> Неопределено Тогда
				
				//Затраты списываются по способу отражения расходов по амортзации
				ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаНМА.НематериальныйАктив,"НМА_УУ");
				ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_УУ);
														  
			КонецЕсли;
			
			НоваяСтрока = ТабАмортизации.Добавить();
				
			НоваяСтрока.Амортизация            	= СтрокаНМА.АмортизацияЗаМесяцУУ;
			НоваяСтрока.ОбъектУчета            	= СтрокаНМА.НематериальныйАктив;
			НоваяСтрока.ИмяСубконто 			= "НематериальныеАктивы";			
			ТекНаправление                     	= ТаблицаНаправлений.Найти(СтрокаНМА.НематериальныйАктив,"НМА_УУ");
			НоваяСтрока.НаправлениеАмортизации 	= ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_УУ);
			НоваяСтрока.Местонахождение 		= ТекМестонахождение;
			
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			Движение.НематериальныйАктив       = СтрокаНМА.НематериальныйАктив;
			Движение.Амортизация               = СтрокаНМА.АмортизацияЗаМесяцУУ;
			Движение.Стоимость                 = 0;
			
		КонецЕсли;
			
	КонецЦикла;

	АмортизацияНМА.мПериод          = Дата;
	АмортизацияНМА.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьНМА.ВыполнитьПриход();
	
	УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);
	
	АмортизацияНМА = Движения.СтоимостьНМА;
	ТаблицаДвиженийАмортизация = АмортизацияНМА.Выгрузить();
	ТаблицаДвиженийАмортизация .Очистить();
	
	// Создание движений документа по УУ	
	Для Каждого СтрокаТЧ Из ТаблицаПоНМА Цикл

		ТекНМА = СтрокаТЧ.НематериальныйАктив;

		// Движения по регистру СостоянияНМА
		Движение = СостояниеНМА.Добавить();
		Движение.Период               = Дата;
		Движение.НематериальныйАктив  = ТекНМА;
		Движение.Состояние            = Перечисления.ВидыСостоянийНМА.Списан;
		
		// Движения по регистру СтоимостьОС
		Движение = ТаблицаДвиженийАмортизация.Добавить();
		Движение.НематериальныйАктив     = ТекНМА;
		Движение.Амортизация             = СтрокаТЧ.АмортизацияУУ + СтрокаТЧ.АмортизацияЗаМесяцУУ;
		Движение.Стоимость               = СтрокаТЧ.СтоимостьУУ;// - СтрокаТЧ.АмортизацияУУ - СтрокаТЧ.АмортизацияЗаМесяцУУ;
		
	КонецЦикла;	
	
	АмортизацияНМА.мПериод          = Дата;
	АмортизацияНМА.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьНМА.ВыполнитьРасход();
	
КонецПроцедуры	

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	
	//Получение данных о видах налоговой деятельности и счетам учета НМА
	УправлениеВнеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбНМАБухНалогРегл(ДатаДока, ТекОрганизация, ТаблицаПоНМА,
	                                                   СтруктураШапкиДокумента,
		                                               Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;

	//Заполнение переменных
	ВидНалоговойДеятельностиНеОблагаемая = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат

		АмортизацияНМА  = Движения.СтоимостьНМАБухгалтерскийУчет;

		ТаблицаДвиженийАмортизация = АмортизацияНМА.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();

		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", 	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета", 				Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
		ТабАмортизации.Колонки.Добавить("Амортизация", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("АмортизацияНУ", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("Местонахождение", 			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("НалоговоеНазначение", 		Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", 			 	Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));

		Для каждого СтрокаНМА из ТаблицаПоНМА Цикл

			Если СтрокаНМА.АмортизацияЗаМесяцБУ > 0 ИЛИ СтрокаНМА.АмортизацияЗаМесяцНУ > 0 Тогда

				ТекМестонахождение = Неопределено;
				Если ТаблицаМестонахождений <> Неопределено Тогда
					
					//Затраты списываются по способу отражения расходов по амортзации
					ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаНМА.НематериальныйАктив,"НМА_БУ");
					ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_БУ);
					                                          
				КонецЕсли;
				
				НоваяСтрока = ТабАмортизации.Добавить();
				НоваяСтрока.Амортизация 	= СтрокаНМА.АмортизацияЗаМесяцБУ;
				НоваяСтрока.АмортизацияНУ 	= СтрокаНМА.АмортизацияЗаМесяцНУ;
				НоваяСтрока.ОбъектУчета = СтрокаНМА.НематериальныйАктив;
				НоваяСтрока.ИмяСубконто = "НематериальныеАктивы";
				НоваяСтрока.НалоговоеНазначение 	= СтрокаНМА.НалоговоеНазначение_НМА;
				
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаНМА.НематериальныйАктив,"НМА_БУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_БУ);
				НоваяСтрока.Местонахождение 		= ТекМестонахождение;

				НоваяСтрока.СчетАмортизации        = СтрокаНМА.СчетНачисленияАмортизацииБУ;

				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.НематериальныйАктив = СтрокаНМА.НематериальныйАктив;
				Движение.Организация         = ТекОрганизация;
				Движение.Амортизация         = СтрокаНМА.АмортизацияЗаМесяцБУ;
				Движение.Стоимость           = 0;
				Движение.АмортизацияНУ       = СтрокаНМА.АмортизацияЗаМесяцНУ;
				Движение.СтоимостьНУ         = 0;

			КонецЕсли;

		КонецЦикла;

		//вызов процедуры списания амортизации по направлениям
		УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "НА");

		АмортизацияНМА.мПериод          = ДатаДока;
		АмортизацияНМА.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьНМАБухгалтерскийУчет.ВыполнитьПриход();

		СостояниеНМА           = Движения.СостоянияНМАОрганизаций;
		АмортизацияНМА         = Движения.СтоимостьНМАБухгалтерскийУчет;
		ПроводкиБУ             = Движения.Хозрасчетный;

		ТаблицаДвиженийАмортизация = АмортизацияНМА.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();

		Для каждого СтрокаТЧ Из ТаблицаПоНМА Цикл

			ТекНМА = СтрокаТЧ.НематериальныйАктив;
			
			// Движения по регистру СостоянияНМАОрганизаций
			Движение = СостояниеНМА.Добавить();
			Движение.Период               = ДатаДока;
			Движение.НематериальныйАктив  = ТекНМА;
			Движение.Организация          = ТекОрганизация;
			Движение.Состояние            = Перечисления.ВидыСостоянийНМА.Списан;
			
			// Движения по регистру СтоимостьНМАБухгалтерскийУчет
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			
			Движение.НематериальныйАктив = ТекНМА;
			Движение.Организация      	= ТекОрганизация;
			Движение.Амортизация      	= СтрокаТЧ.АмортизацияБУ+СтрокаТЧ.АмортизацияЗаМесяцБУ;
			Движение.Стоимость        	= СтрокаТЧ.СтоимостьБУ;
			Движение.АмортизацияНУ 		= СтрокаТЧ.АмортизацияНУ+СтрокаТЧ.АмортизацияЗаМесяцНУ;
			Движение.СтоимостьНУ        = СтрокаТЧ.СтоимостьНУ;
			
			//Заполнение переменных
			СчетУчетаСтоимости          = СтрокаТЧ.СчетУчетаБУ;
			СчетУчетаАмортизации        = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			
			// списание амортизации Д СчетУчетаАмортизации К СчетУчетаСтоимости
			СуммаПроводки 	= СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
			СуммаПроводкиНУ = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
			
			Если СуммаПроводки <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = ТекОрганизация;
				Проводка.Содержание  = "Списана амортизация";
				Проводка.Сумма       = СуммаПроводки;
				Проводка.НомерЖурнала = "НА";
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_НМА;
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					
				КонецЕсли;
				
				Проводка.СчетДт      = СчетУчетаАмортизации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_НМА;
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					
				КонецЕсли;
				
				Проводка.СчетКт      = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
				
			КонецЕсли;
			
			// списание остаточной стоимости Д СчетСписанияБУ К СчетУчетаСтоимости
			СуммаПроводки 	= СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
			СуммаПроводкиНУ = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ;
			
			Если СуммаПроводки <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = ДатаДока;
				Проводка.Организация = ТекОрганизация;
				Проводка.Содержание  = "Списана ост. стоимость";
				Проводка.Сумма       = СуммаПроводки;
				Проводка.НомерЖурнала = "НА";
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					
				КонецЕсли;
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписанияБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоБУ3);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_НМА;
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					
				КонецЕсли;
				
				Проводка.СчетКт      = СчетУчетаСтоимости;
				
				Если СчетУчетаСтоимости.Количественный Тогда
					
					Проводка.КоличествоКт = 1;
					
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
				
			КонецЕсли;
			
		КонецЦикла;

		АмортизацияНМА.мПериод          = ДатаДока;
		АмортизацияНМА.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьНМАБухгалтерскийУчет.ВыполнитьРасход();

	КонецЕсли;

	//При распределении амортизации производилась промежуточная запись проводок.
	//Необходимо записать проводки с сохранением предыдущих движений.
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и не Отказ Тогда
		
		Движения.Хозрасчетный.Записать(Ложь);
		
	КонецЕсли; 
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("НематериальныйАктив");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитов()

// Проверяет заполнение табличной части документа
// для управленческого учета
Процедура ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из НематериальныеАктивы Цикл
		
		ТекНМА = СтрокаТЧ.НематериальныйАктив;
	
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И (СтрокаТЧ.СтоимостьУУ = 0) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
									+ "Упр. учет: Для нематериального актива """ + ТекНМА + """ не заполнена Стоимость(УУ)",
									Отказ, Заголовок);
				
		КонецЕсли;
		
		СтрокаОстатков = ТаблицаОстатков.Найти(ТекНМА, "НМА_УУ");
		
		Если СтрокаОстатков = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
			                    + "Упр.учет: По нематериальному активу """ + ТекНМА + """ нет записей до даты документа"
			                    + Символы.ПС + Символы.Таб + "в регистре сведений ""Местонахождение нематериальных активов""."
			                    + Символы.ПС + Символы.Таб + "Возможно оно еще не принято к управленческому учету.",
			                    Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Проверяет заполнение табличной части документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок)
	
	Для каждого СтрокаТЧ Из НематериальныеАктивы Цикл
		
		ТекНМА = СтрокаТЧ.НематериальныйАктив;
	
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтрокаТЧ.СтоимостьБУ = 0) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
									+ "Бухг. учет: Организация """ + СтруктураШапкиДокумента.Организация + """. Для нематериального актива """ + ТекНМА + """ не заполнена Стоимость(БУ)",
									Отказ, Заголовок);
				
		КонецЕсли;
								
		СтрокаОстатков = ТаблицаОстатков.Найти(ТекНМА, "НМА_БУ");
		
		Если СтрокаОстатков = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
			                    + "Бух.учет: Организация """ + СтруктураШапкиДокумента.Организация + """. По нематериальному активу """ + ТекНМА + """ нет записей до даты документа"
			                    + Символы.ПС + Символы.Таб + "в регистре сведений ""Местонахождение нематериальных активов организаций""."
			                    + Символы.ПС + Символы.Таб + "Возможно оно еще не принято к бухгалтерскому учету.",
			                    Отказ, Заголовок);
			
		КонецЕсли;
								
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ


// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры


// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеДокументаРегл( СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("Организация");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СчетСписанияБУ");
		
		Для Н = 1 По СчетСписанияБУ.ВидыСубконто.Количество() Цикл
			
			СтруктураПолей.Вставить("СубконтоБУ" + Н);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		Неопределено,      // Неопределено - в случае проверки шапки документа
		Неопределено,      // Неопределено - в случае проверки шапки документа
		Отказ, 
		Заголовок, 
		"ОтражениеЗатрат", // ВидОперации
		Истина,            // ОтражатьПоЗатратам,
		"СчетСписанияБУ",  // ИмяРеквизитаСчетЗатрат
		"СубконтоБУ"       // ИмяРеквизитаСубконтоЗатрат
	);
	
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
		СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
		
	КонецЕсли;
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НематериальныйАктив", "НематериальныйАктив");
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтруктураПолей.Вставить("СтоимостьУУ",          "СтоимостьУУ");
		СтруктураПолей.Вставить("АмортизацияУУ",        "АмортизацияУУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцУУ", "АмортизацияЗаМесяцУУ");
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СтоимостьБУ",          "СтоимостьБУ");
		СтруктураПолей.Вставить("АмортизацияБУ",        "АмортизацияБУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ", "АмортизацияЗаМесяцБУ");
		
		СтруктураПолей.Вставить("СтоимостьНУ",              "СтоимостьНУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ",     "АмортизацияЗаМесяцНУ");
		СтруктураПолей.Вставить("АмортизацияНУ",            "АмортизацияНУ");
		
	КонецЕсли;
	
	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей);
	ТаблицаПоНМА          = РезультатЗапросаПоНМА.Выгрузить();
	СписокНМА             = ТаблицаПоНМА.ВыгрузитьКолонку("НематериальныйАктив");
	ТекОрганизация        = СтруктураШапкиДокумента.Организация;
	
	Упр                  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бухг                 = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	//Проверка на наличие нематериальных активов
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата",        МоментВремени());
	Запрос.УстановитьПараметр("СписокНМА",       СписокНМА);
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
	|	МестонахождениеНМА_УУ.НематериальныйАктив            КАК НМА_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
	|	МестонахождениеНМА_БУ.НематериальныйАктив КАК НМА_БУ", "") + "
	|ИЗ" + ?(Упр,"
	|	РегистрСведений.МестонахождениеНМА.СрезПоследних(&ТекДата, 
	|	                НематериальныйАктив В (&СписокНМА)
	|	                ) КАК МестонахождениеНМА_УУ", "") + ?(Упр и Бухг,"
	|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг,"
	|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(&ТекДата, 
	|	                НематериальныйАктив В (&СписокНМА)
	|	                И Организация = &ТекОрганизация
	|	                ) КАК МестонахождениеНМА_БУ", "") + ?(Упр и Бухг,"
	|		ПО МестонахождениеНМА_УУ.НематериальныйАктив = МестонахождениеНМА_БУ.НематериальныйАктив", "");
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаОстатков, Отказ, Заголовок);
	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоНМА, "Нематериальные активы", "НематериальныйАктив", "Нематериальный актив", Отказ, Заголовок);	
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОтражатьПоЗатратам Тогда
		Если ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ТекПодразделениеОрг = СтруктураШапкиДокумента.СубконтоБУ1;
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ТекПодразделениеОрг = СтруктураШапкиДокумента.СубконтоБУ2;
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ3) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ТекПодразделениеОрг = СтруктураШапкиДокумента.СубконтоБУ3;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
		|ИЗ
		|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
		|ГДЕ
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация
		|	И СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации = &ПодразделениеОрганизации";
		
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", ТекПодразделениеОрг);
		тзРезультат = Запрос.Выполнить().Выгрузить();
		
		Если тзРезультат.Количество() = 0 Тогда
			Сообщить("Для организации """ + СтруктураШапкиДокумента.Организация + """ и подразделения организаций """ + ТекПодразделениеОрг + """ отсутствует сопоставленное подразделение", СтатусСообщения.Важное);
			Отказ = Истина;
		Иначе
			ТекПодразделение = тзРезультат[0].Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Запрос   = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация", 	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      	МоментВремени());
	Запрос.УстановитьПараметр("СписокНМА",       	СписокНМА);
	Запрос.УстановитьПараметр("ВнешнийИсточник", 	ТаблицаПоНМА);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	НематериальныйАктив
	|ПОМЕСТИТЬ НематериальныеАктивы
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НематериальныеАктивы.НематериальныйАктив                                                        КАК НематериальныйАктив,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.НематериальныйАктив         КАК НМА_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.НематериальныйАктив                          КАК НМА_УУ,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов 	КАК Направление_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособОтраженияРасходов                  	КАК Направление_УУ
	|ИЗ
	|	НематериальныеАктивы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(&ТекПериод, НематериальныйАктив В (&СписокНМА) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО НематериальныеАктивы.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМА.СрезПоследних(&ТекПериод, НематериальныйАктив В (&СписокНМА)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	ПО НематериальныеАктивы.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.НематериальныйАктив";
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();
	
	Упр  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бухг = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      МоментВремени());
	Запрос.УстановитьПараметр("СписокНМА",      СписокНМА);
	Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
					|	МестонахождениеНМАУУ.НематериальныйАктив 	КАК НМА_УУ,
					|	МестонахождениеНМАУУ.Местонахождение 		КАК Местонахождение_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
					|	МестонахождениеНМАБУ.НематериальныйАктив 	КАК НМА_БУ,
					|	МестонахождениеНМАБУ.Местонахождение 		КАК Местонахождение_БУ", "") + "
					|ИЗ" + ?(Упр,"
					|	РегистрСведений.МестонахождениеНМА.СрезПоследних(
					|		            &ТекПериод,
					|		            НематериальныйАктив В (&СписокНМА)) КАК МестонахождениеНМАУУ", "") + ?(Упр и Бухг,"
					|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг," 
					|			РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
					|			                &ТекПериод, 
					|			                НематериальныйАктив В (&СписокНМА)
					|		                    И Организация = &ТекОрганизация) КАК МестонахождениеНМАБУ", "") + ?(Упр и Бухг,"
					|		ПО МестонахождениеНМАУУ.НематериальныйАктив = МестонахождениеНМАБУ.НематериальныйАктив", "");
	ТаблицаМестонахождений = Запрос.Выполнить().Выгрузить();
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
		
	КонецЕсли;

	
	Если Не Отказ И ОтражатьПоЗатратам Тогда
		Если ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ТекСтатьяЗатрат = СтруктураШапкиДокумента.СубконтоБУ1;
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ТекСтатьяЗатрат = СтруктураШапкиДокумента.СубконтоБУ2;
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ТекСтатьяЗатрат = СтруктураШапкиДокумента.СубконтоБУ3;
		КонецЕсли;
		
		Если Упр Тогда
			НаборДвижений = Движения.Затраты;
			НаборДвижений.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
			НаборДвижений.Прочитать();
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			Для каждого СтрокаНМА Из ТаблицаПоНМА Цикл
				СуммаСписать 	= СтрокаНМА.СтоимостьУУ - СтрокаНМА.АмортизацияУУ - СтрокаНМА.АмортизацияЗаМесяцУУ;
				
				ТекНМА = СтрокаНМА.НематериальныйАктив;

				
				ДвижениеЗатрат = ТаблицаДвижений.Добавить();
				ДвижениеЗатрат.Регистратор = ЭтотОбъект.Ссылка;
				ДвижениеЗатрат.Активность = Истина;
				ДвижениеЗатрат.ВидДвижения = ВидДвиженияНакопления.Приход;
				ДвижениеЗатрат.Период = Дата;
				ДвижениеЗатрат.Подразделение = ТекПодразделение;
				ДвижениеЗатрат.СтатьяЗатрат = ТекСтатьяЗатрат;
				ДвижениеЗатрат.Сумма = СуммаСписать;
				
			КонецЦикла;
			
			НаборДвижений.Загрузить(ТаблицаДвижений);
			
		КонецЕсли;
		
		Если Бухг Тогда
			НаборДвижений = Движения.ЗатратыБухгалтерскийУчет;
			НаборДвижений.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
			НаборДвижений.Прочитать();
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			Для каждого СтрокаНМА Из ТаблицаПоНМА Цикл
				СуммаСписатьБУ 	= СтрокаНМА.СтоимостьБУ - СтрокаНМА.АмортизацияБУ - СтрокаНМА.АмортизацияЗаМесяцБУ;
				СуммаСписатьНУ = СтрокаНМА.СтоимостьНУ - СтрокаНМА.АмортизацияНУ - СтрокаНМА.АмортизацияЗаМесяцНУ;
				
				ТекНМА = СтрокаНМА.НематериальныйАктив;
				
				ДвижениеЗатрат = ТаблицаДвижений.Добавить();
				ДвижениеЗатрат.Регистратор = ЭтотОбъект.Ссылка;
				ДвижениеЗатрат.Активность = Истина;
				ДвижениеЗатрат.ВидДвижения = ВидДвиженияНакопления.Приход;
				ДвижениеЗатрат.Период = Дата;
				ДвижениеЗатрат.Организация = ТекОрганизация;
				ДвижениеЗатрат.Подразделение = ТекПодразделениеОрг;
				ДвижениеЗатрат.СтатьяЗатрат = ТекСтатьяЗатрат;
				ДвижениеЗатрат.СчетУчета = СтруктураШапкиДокумента.СчетСписанияБУ;
				ДвижениеЗатрат.НалоговоеНазначение = НалоговоеНазначениеДоходовИЗатрат;
				ДвижениеЗатрат.Сумма = СуммаСписатьБУ;
				ДвижениеЗатрат.СуммаНУ = СуммаСписатьНУ;
			КонецЦикла;
			
			НаборДвижений.Загрузить(ТаблицаДвижений);
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ДвиженияЗатрат = Движения.ЗатратыБухгалтерскийУчет;
		Если НЕ ОтражатьПоЗатратам Тогда
			ДвиженияЗатрат.Прочитать();
		КонецЕсли;
		
		тзЗатраты = ДвиженияЗатрат.Выгрузить(, "СтатьяЗатрат, Подразделение, Сумма");
		тзЗатраты.Свернуть("СтатьяЗатрат, Подразделение", "Сумма");
		
		Если тзЗатраты.Количество() > 0 Тогда
			тзЗатратыПоПодразделениям = Бюджетирование.ВыполнитьКонтрольПревышенияБюджета(ЭтотОбъект, тзЗатраты, Отказ);
			
			Если НЕ ЭтотОбъект.ПревышенБюджет И тзЗатратыПоПодразделениям <> Неопределено Тогда
				Бюджетирование.СформироватьДвиженияФактическихЗатратПоБюджетам(ЭтотОбъект, тзЗатратыПоПодразделениям);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ПревышенБюджет Тогда
		Бюджетирование.ОчиститьЗаписиРегистраПревышений(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента(
			ЭтотОбъект,
			"СчетСписанияБУ",   // ИмяРеквизитаСчетЗатрат
			"СубконтоБУ" 		// ИмяРеквизитаСубконто
		);
		
	КонецЕсли;
	
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");
ПревышенБюджет = Ложь;
