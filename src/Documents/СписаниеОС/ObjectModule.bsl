Перем мУдалятьДвижения;
Перем мСкопирован Экспорт; // хранит признак копирования документа

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
Перем ПревышенБюджет Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьОЗ3(ПечатьПоДаннымУпрУчета = Истина)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",         Ссылка);
	Запрос.УстановитьПараметр("ТекДата",        МоментВремени());
	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеОС.Дата                           КАК ДатаАкта,
	|	СписаниеОС.Номер                          КАК НомерАкта,"
	+?(ПечатьПоДаннымУпрУчета,"","
	|	ВЫРАЗИТЬ(СписаниеОС.Организация.НаименованиеПолное 
	|	                    КАК СТРОКА(1000))     КАК Организация,
	|	КодыОрганизации.КодПоЕДРПОУ               КАК ЕДРПОУ,") + "
	|	СписаниеОС.ПричинаСписания                КАК ПричинаСписания,
	|	СписаниеОС.ПричинаСписания.Код            КАК КодПричины
	|ИЗ
	|	Документ.СписаниеОС                       КАК СписаниеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ТекДата,
	|		                                 Организация = &ТекОрганизация) КАК КодыОрганизации
	|		ПО СписаниеОС.Организация = КодыОрганизации.Организация
	|
	|ГДЕ
	|	СписаниеОС.Ссылка = &Ссылка";
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",   Ссылка);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("ТекДата", МоментВремени());
	Запрос.УстановитьПараметр("ТекОрганизация", Организация);
	Запрос.УстановитьПараметр("СостояниеВвода", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	Если Не ПечатьПоДаннымУпрУчета Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияБУ.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ПервоначальныеСведенияБУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета КАК СчетКт,
		|	СписаниеОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
		|	СписаниеОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	СписаниеОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	СписаниеОСОС.ОсновноеСредство.Код КАК КодАналитикиКт,
		|	СписаниеОСОС.Ссылка.СчетСписанияБУ КАК СчетДт,
		|	СписаниеОСОС.СтоимостьБУ - СписаниеОСОС.АмортизацияБУ - СписаниеОСОС.АмортизацияЗаМесяцБУ КАК ОстаточнаяСтоимость,
		|	СписаниеОСОС.АмортизацияБУ + СписаниеОСОС.АмортизацияЗаМесяцБУ КАК Амортизация,
		|	МестонахождениеОС.Местонахождение КАК СдалоПодразделение,
		|	СостояниеОС.ДатаСостояния КАК ДатаВвода
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних( 
		|		&ТекДата,
		|		ОсновноеСредство В (&СписокОС)
		|		    И Организация = &ТекОрганизация) КАК ПервоначальныеСведенияБУ
		|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведенияБУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
		|		&ТекДата,
		|		ОсновноеСредство В (&СписокОС)
		|		    И Организация = &ТекОрганизация) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
		|		ПО СписаниеОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|		&ТекДата,
		|		Организация = &ТекОрганизация
		|		    И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|		ПО СписаниеОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
		|			СостоянияОС.ДатаСостояния КАК ДатаСостояния
		|		ИЗ
		|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
		|		ГДЕ
		|			СостоянияОС.Состояние = &СостояниеВвода
		|			И СостоянияОС.Организация = &ТекОрганизация
		|			И СостоянияОС.ОсновноеСредство В(&СписокОС)) КАК СостояниеОС
		|		ПО СписаниеОСОС.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|ГДЕ
		|	СписаниеОСОС.Ссылка = &Ссылка";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведения.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	СписаниеОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
		|	СписаниеОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	СписаниеОСОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	СписаниеОСОС.Стоимость - СписаниеОСОС.Амортизация - СписаниеОСОС.АмортизацияЗаМесяц КАК ОстаточнаяСтоимость,
		|	СписаниеОСОС.Амортизация + СписаниеОСОС.АмортизацияЗаМесяц КАК Амортизация,
		|	МестонахождениеОС.Местонахождение КАК СдалоПодразделение,
		|	СостояниеОС.ДатаСостояния КАК ДатаВвода
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&ТекДата, ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведения
		|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&ТекДата, ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|		ПО СписаниеОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
		|			СостоянияОС.ДатаСостояния КАК ДатаСостояния
		|		ИЗ
		|			РегистрСведений.СостоянияОС КАК СостоянияОС
		|		ГДЕ
		|			СостоянияОС.Состояние = &СостояниеВвода
		|			И СостоянияОС.ОсновноеСредство В (&СписокОС)) КАК СостояниеОС
		|		ПО СписаниеОСОС.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|ГДЕ
		|	СписаниеОСОС.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеОС_ОЗ3";
	Макет     = ПолучитьМакет("ОЗ3");
	НеНачало  = Ложь;
	
	ВыборкаПоКомиссии = РаботаСДиалогами.ПолучитьСведенияОКомиссии(ЭтотОбъект);
	
	Пока ВыборкаПоОС.Следующий() Цикл
		
		Если НеНачало Тогда
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОЗ3");
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
		Если не ПечатьПоДаннымУпрУчета Тогда
			ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		ОбластьМакета.Параметры.ВидОперации = "Списання";
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоКомиссии);
		ТабДокумент.Вывести(ОбластьМакета);
		НеНачало = Истина;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьСписаниеТоваров()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
		
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
		
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		
		Возврат;
		
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОЗ3упр" Тогда

		ТабДокумент = ПечатьОЗ3()
		
	ИначеЕсли ИмяМакета = "ОЗ3бух" Тогда
		
		ТабДокумент = ПечатьОЗ3(Ложь)
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	
	КонецЕсли;
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	Если  ОтражатьВУправленческомУчете тогда 
		СтруктураМакетов.Вставить("ОЗ3упр","Форма ОЗ-3 (упр. учет)");
	КонецЕсли;
	Если  ОтражатьВБухгалтерскомУчете тогда 
		СтруктураМакетов.Вставить("ОЗ3бух","Форма ОЗ-3 (бух. учет)");
	КонецЕсли;

	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()


#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета = "Событие, 
	                            |ОС.Стоимость, 
								|ОС.Амортизация, 
								|ОС.АмортизацияЗаМесяц, 
								|ОС.ОстСтоимость";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета = "СобытиеРегл, 
								|СчетСписанияБУ, 
								|СубконтоБУ1,
								|СубконтоБУ2,
								|СубконтоБУ3,
								|ОС.СтоимостьБУ,
								|ОС.АмортизацияБУ,
								|ОС.АмортизацияЗаМесяцБУ,
								|ОС.ОстСтоимостьБУ";
	мСтрокаРеквизитыНалУчета = "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда
		
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
 	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Возврат;
		
	КонецЕсли;

	ДатаДока = Дата;

	АмортизацияОС              = Движения.СтоимостьОС;
	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация.Очистить();

	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Амортизация",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
	ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  Новый ОписаниеТипов("СправочникСсылка.Подразделения"));

	Для каждого СтрокаОС из ТаблицаПоОС Цикл

		Если СтрокаОС.АмортизацияЗаМесяц > 0 Тогда

			ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");

			ТекМестонахождение = Неопределено;
			Если ТаблицаМестонахождений <> Неопределено Тогда
				
				//Затраты списываются по способу отражения расходов по амортзации
				ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");
				ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_УУ);
				                                          
			КонецЕсли;
			
			НоваяСтрока    = ТабАмортизации.Добавить();

			НоваяСтрока.Амортизация            = СтрокаОС.АмортизацияЗаМесяц;
			НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_УУ);
			НоваяСтрока.Местонахождение 		= ТекМестонахождение;

			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();

			Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяц;
			Движение.Стоимость        = 0;

		КонецЕсли;

	КонецЦикла;

	// вызов процедуры списания амортизации по направлениям
	УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьПриход();

	
	СостояниеОС             = Движения.СостоянияОС;
	СобытиеОС               = Движения.СобытияОС;
	АмортизацияОС           = Движения.СтоимостьОС;
	НачислениеАмортизацииОС = Движения.НачислениеАмортизацииОС;
	НазваниеДокумента       = Метаданные().Представление();

	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация.Очистить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		// Движения по регистру НачислениеАмортизацииОС
		Движение = НачислениеАмортизацииОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.НачислятьАмортизацию = Ложь;
		Движение.НачислятьАмортизациюВТекущемМесяце = Ложь;
		
		// Движения по регистру СобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Событие              = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента = НазваниеДокумента;
		Движение.НомерДокумента    = Номер;
		
		
		// Движения по регистру СостоянияОС
		Движение = СостояниеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
		Движение.ДатаСостояния        = ДатаДока;
		
		// Движения по регистру СтоимостьОС
		Движение = ТаблицаДвиженийАмортизация.Добавить();
		Движение.ОсновноеСредство = ТекОС;
		Движение.Амортизация      = СтрокаТЧ.Амортизация+СтрокаТЧ.АмортизацияЗаМесяц;
		Движение.Стоимость        = СтрокаТЧ.Стоимость;

	
	КонецЦикла;

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьРасход();


КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	
	//Получение данных о видах налоговой деятельности, к которым принадлежат ОС
	УправлениеВнеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(МоментВремени(), ТекОрганизация, ТаблицаПоОС, 
	                                                  СтруктураШапкиДокумента,
													  Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;

	//Заполнение переменных
	ВидНалоговойДеятельностиНеОблагаемая = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		// подготовим таблицу с данными по амортизации для списания амортизации по 
		// направлениям затрат

		АмортизацияОС  = Движения.СтоимостьОСБухгалтерскийУчет;

		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();

		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", 	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",            	Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Амортизация",            	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("АмортизацияНУ",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
		ТабАмортизации.Колонки.Добавить("Местонахождение", 	  	  	Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		ТабАмортизации.Колонки.Добавить("НалоговоеНазначение", 		Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));

		Для каждого СтрокаОС из ТаблицаПоОС Цикл

			Если СтрокаОС.АмортизацияЗаМесяцБУ > 0 ИЛИ СтрокаОС.АмортизацияЗаМесяцНУ > 0 Тогда
				
				ТекМестонахождение = Неопределено;
				Если ТаблицаМестонахождений <> Неопределено Тогда
					
					//Затраты списываются по способу отражения расходов по амортзации
					ТекМестонахождение = ТаблицаМестонахождений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
					ТекМестонахождение = ?(ТекМестонахождение = Неопределено, Неопределено, ТекМестонахождение.Местонахождение_БУ);
					                                          
				КонецЕсли;
				
				НоваяСтрока = ТабАмортизации.Добавить();
				НоваяСтрока.Амортизация 	= СтрокаОС.АмортизацияЗаМесяцБУ;
				НоваяСтрока.АмортизацияНУ 	= СтрокаОС.АмортизацияЗаМесяцНУ;
				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
				НоваяСтрока.НалоговоеНазначение 	= СтрокаОС.НалоговоеНазначение_ОС;
				
				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено, Неопределено, ТекНаправление.Направление_БУ);
				НоваяСтрока.Местонахождение 		= ТекМестонахождение;
				
				НоваяСтрока.СчетАмортизации        = СтрокаОС.СчетНачисленияАмортизацииБУ;
				
				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				Движение.Организация      = ТекОрганизация;
				Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцБУ;
				Движение.Стоимость        = 0;
				Движение.АмортизацияНУ    = СтрокаОС.АмортизацияЗаМесяцНУ;
				Движение.СтоимостьНУ      = 0;
				Движение.ВидОперации      = Перечисления.ВидыСобытийОС.НачислениеАмортизации;
				
			КонецЕсли;

		КонецЦикла;

		//вызов процедуры списания амортизации по направлениям
		УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "ОС");

		АмортизацияОС.мПериод          = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();
		
		СобытиеОС               = Движения.СобытияОСОрганизаций;
		СостояниеОС             = Движения.СостоянияОСОрганизаций;	
		АмортизацияОС           = Движения.СтоимостьОСБухгалтерскийУчет;
		НачислениеАмортизацииОС = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
		НачислениеАмортизацииОСНУ = Движения.НачислениеАмортизацииОСНалоговыйУчет;
		ПроводкиБУ              = Движения.Хозрасчетный;
		НазваниеДокумента       = Метаданные().Представление();
		
		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();
		
		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			// Движения по регистру НачислениеАмортизацииОСБухгалтерскийУчет
			Движение = НачислениеАмортизацииОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.НачислятьАмортизацию = Ложь;
			
			// Движения по регистру НачислениеАмортизацииОСНалоговыйУчет
			Движение = НачислениеАмортизацииОСНУ.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.НачислятьАмортизацию = Ложь;
			
			// Движения по регистру СобытияОС
			Движение = СобытиеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
			Движение.НазваниеДокумента 	  = НазваниеДокумента;
			Движение.НомерДокумента		  = Номер;
	
			// Движения по регистру СостояниеОСОрганизаций
			Движение = СостояниеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
			Движение.ДатаСостояния        = ДатаДока;
			
			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			
			Движение.ОсновноеСредство = ТекОС;
			Движение.Организация      = ТекОрганизация;
			Движение.Амортизация      = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
			Движение.Стоимость        = СтрокаТЧ.СтоимостьБУ;
			Движение.АмортизацияНУ    = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
			Движение.СтоимостьНУ      = СтрокаТЧ.СтоимостьНУ;
			Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Списание;
			
						//Заполнение переменных
			СчетУчетаСтоимости   = СтрокаТЧ.СчетУчетаБУ;
			СчетУчетаАмортизации = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			
			// списание амортизации Д СчетУчетаАмортизации К СчетУчетаСтоимости
			СуммаПроводки 	= СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
			СуммаПроводкиНУ = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
			
			Если СуммаПроводки <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = ТекОрганизация;
				Проводка.Содержание  = "Списана амортизация";
				Проводка.Сумма       = СуммаПроводки;
				Проводка.НомерЖурнала = "ОС";
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					
				КонецЕсли;
				
				Проводка.СчетДт      = СчетУчетаАмортизации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					
				КонецЕсли;
				
				Проводка.СчетКт      = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
			КонецЕсли;
			
			// списание остаточной стоимости Д СчетСписанияБУ К СчетУчетаСтоимости
			СуммаПроводки 	= СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
			СуммаПроводкиНУ = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ;
			
			Если СуммаПроводки <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = ДатаДока;
				Проводка.Организация = ТекОрганизация;
				Проводка.Содержание  = "Списана ост. стоимость";
				Проводка.Сумма       = СуммаПроводки;
				Проводка.НомерЖурнала = "ОС";
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					
				КонецЕсли;
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетСписанияБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоБУ3);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					
				КонецЕсли;
				
				Проводка.СчетКт      = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
			КонецЕсли;
			
		КонецЦикла;

		АмортизацияОС.мПериод          = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьРасход();

	КонецЕсли;

	//При распределении амортизации производилась промежуточная запись проводок.
	//Необходимо записать проводки с сохранением предыдущих движений.
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
		
		ПроводкиБУ.Записать(Ложь);
		
	КонецЕсли; 
		
КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ОсновноеСредство");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, Отказ, Заголовок);	

	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		// Проверим возможность снятия ОС с учета
		Для каждого СтрокаОС из ОС Цикл
			Если ОтражатьВБухгалтерскомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ,Организация);
			КонецЕсли;
			Если ОтражатьВУправленческомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитов()

// Проверяет заполнение табличной части документа
// для управленческого учета
Процедура ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок)
	
	//Проверка на наличие основных средств
	Для каждого СтрокаТЧ Из ОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		Если СтрокаТЧ.Стоимость = 0 Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
			                    + "Упр. учет: Основное средство """ + ТекОс + """ не заполнена Стоимость(УУ)",
			                    Отказ, Заголовок);
			
		КонецЕсли;
		
		СтрокаОстатков = ТаблицаОстатков.Найти(ТекОС, "ОС_УУ");
		
		Если СтрокаОстатков <> Неопределено Тогда
			
			Продолжить
			
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
		                    + "Упр.учет: По основному средству """ + ТекОс + """ нет записей до даты документа"
		                    + Символы.ПС + Символы.Таб + "в регистре сведений ""Местонахождение основных средств организаций""."
		                    + Символы.ПС + Символы.Таб + "Возможно оно еще не принято к управленческому учету.",
		                    Отказ, Заголовок);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧУпр

// Проверяет заполнение табличной части документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок)
	
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	
	//Проверка на наличие основных средств
		Для каждого СтрокаТЧ Из ОС Цикл
			
			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтрокаТЧ.СтоимостьБУ = 0) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
									+ "Бухг. учет: Основное средство """ + ТекОс + """ не заполнена Стоимость(БУ)",
									Отказ, Заголовок);
				
			КонецЕсли;
			
			СтрокаОстатков = ТаблицаОстатков.Найти(ТекОС, "ОС_БУ");
			
			Если СтрокаОстатков <> Неопределено Тогда
				
				Продолжить
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + СтрокаТЧ.НомерСтроки + "." + Символы.ПС + Символы.Таб
								+ "Бух.учет: Организация """ + ТекОрганизация + """. По основному средству """ + ТекОс + """ нет записей до даты документа"
								+ Символы.ПС + Символы.Таб + "в регистре сведений ""Местонахождение основных средств организаций""."
								+ Символы.ПС + Символы.Таб + "Возможно оно еще не принято к бухгалтерскому учету.",
								Отказ, Заголовок);
			
		КонецЦикла;
		
КонецПроцедуры // ПроверитьЗаполнениеТЧ


// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапки(СтруктураШапкиДокумента), Отказ, Заголовок);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для управленческого учета
Процедура ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Событие");

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
							  Перечисления.ВидыСобытийОС.Списание,
							  ПредставлениеРеквизита,Отказ);
	
	ПроверитьЗаполнениеТЧУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок);
	
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// для бухгалтерского и налогового учета
Процедура ПроверитьЗаполнениеДокументаРегл( СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("СобытиеРегл");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СчетСписанияБУ");
		
		Для Н = 1 По СчетСписанияБУ.ВидыСубконто.Количество() Цикл
			
			СтруктураПолей.Вставить("СубконтоБУ" + Н);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		Неопределено,      // Неопределено - в случае проверки шапки документа
		Неопределено,      // Неопределено - в случае проверки шапки документа
		Отказ, 
		Заголовок, 
		"ОтражениеЗатрат", // ВидОперации
		Истина,            // ОтражатьПоЗатратам,
		"СчетСписанияБУ",  // ИмяРеквизитаСчетЗатрат
		"СубконтоБУ"       // ИмяРеквизитаСубконтоЗатрат
	);
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.Списание,
								  ПредставлениеРеквизита,Отказ);
	
	ПроверитьЗаполнениеТЧРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

		СтрокаТабличнойЧасти = ОС.Добавить();

		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		// Заполнение шапки
		Организация                  = Основание.Организация;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			РасхождениеУУ = ТекСтрокаОС.КоличествоУУ - ТекСтрокаОС.КоличествоПоФактуУУ;
			РасхождениеБУ = ТекСтрокаОС.КоличествоБУ - ТекСтрокаОС.КоличествоПоФактуБУ;
			
			Если (РасхождениеУУ <=  0) И (РасхождениеБУ <= 0) Тогда
				
				Продолжить
				
			КонецЕсли;
			
			НоваяСтрока = ОС.Добавить();
			НоваяСтрока.ОсновноеСредство               = ТекСтрокаОС.ОсновноеСредство;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", КонецМесяца(Дата));
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если ОтражатьПоЗатратам Тогда
		Если ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ1) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ТекПодразделениеОрг = СтруктураШапкиДокумента.СубконтоБУ1;
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ2) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ТекПодразделениеОрг = СтруктураШапкиДокумента.СубконтоБУ2;
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ3) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ТекПодразделениеОрг = СтруктураШапкиДокумента.СубконтоБУ3;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
		|ИЗ
		|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
		|ГДЕ
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация
		|	И СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации = &ПодразделениеОрганизации";
		
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", ТекПодразделениеОрг);
		тзРезультат = Запрос.Выполнить().Выгрузить();
		
		Если тзРезультат.Количество() = 0 Тогда
			Сообщить("Для организации """ + СтруктураШапкиДокумента.Организация + """ и подразделения организаций """ + ТекПодразделениеОрг + """ отсутствует сопоставленное подразделение", СтатусСообщения.Важное);
			Отказ = Истина;
		Иначе
			ТекПодразделение = тзРезультат[0].Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтруктураПолей.Вставить("Стоимость",          "Стоимость");
		СтруктураПолей.Вставить("Амортизация",        "Амортизация");
		СтруктураПолей.Вставить("АмортизацияЗаМесяц", "АмортизацияЗаМесяц");
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СтоимостьБУ",          "СтоимостьБУ");
		СтруктураПолей.Вставить("АмортизацияБУ",        "АмортизацияБУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ", "АмортизацияЗаМесяцБУ");
		
		СтруктураПолей.Вставить("СтоимостьНУ",          "СтоимостьНУ");
		СтруктураПолей.Вставить("АмортизацияНУ",        "АмортизацияНУ");
		СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ", "АмортизацияЗаМесяцНУ");
		                                                                                       
	КонецЕсли;

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
																		   
	СписокОС             = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	ТекОрганизация       = СтруктураШапкиДокумента.Организация;
	Упр                  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бухг                 = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	//Проверка на наличие основных средств
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата",        МоментВремени());
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
	               |	МестонахождениеОС_УУ.ОсновноеСредство КАК ОС_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
	               |	МестонахождениеОС_БУ.ОсновноеСредство КАК ОС_БУ", "") + "
	               |ИЗ" + ?(Упр,"
	               |	РегистрСведений.МестонахождениеОС.СрезПоследних(&ТекДата, 
				   |	                ОсновноеСредство В (&СписокОС)
				   |	                ) КАК МестонахождениеОС_УУ", "") + ?(Упр и Бухг,"
	               |		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг,"
				   |			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
				   |	                        &ТекДата, ОсновноеСредство В (&СписокОС)
				   |	                        И Организация = &ТекОрганизация
				   |	                        ) КАК МестонахождениеОС_БУ", "") + ?(Упр и Бухг,"
	               |		ПО МестонахождениеОС_УУ.ОсновноеСредство = МестонахождениеОС_БУ.ОсновноеСредство", "");
		

	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОстатков, Отказ, Заголовок);

	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
		
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;

	Запрос   = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      МоментВремени());
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                                                         КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство                      КАК ОС_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                                       КАК ОС_УУ,
	|	СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                  КАК Направление_УУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство";
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();
	
	Упр  = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бухг = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      МоментВремени());
	Запрос.УстановитьПараметр("СписокОС",       ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.Текст = "ВЫБРАТЬ" + ?(Упр,"
					|	МестонахождениеОСУУ.ОсновноеСредство 	КАК ОС_УУ,
					|	МестонахождениеОСУУ.Местонахождение 	КАК Местонахождение_УУ", "") + ?(Бухг, ?(Упр, ",", "") + "
					|	МестонахождениеОСБУ.ОсновноеСредство 	КАК ОС_БУ,
					|	МестонахождениеОСБУ.Местонахождение 	КАК Местонахождение_БУ", "") + "
					|ИЗ" + ?(Упр,"
					|	РегистрСведений.МестонахождениеОС.СрезПоследних(
					|		            &ТекПериод,
					|		            ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОСУУ", "") + ?(Упр и Бухг,"
					|		ПОЛНОЕ СОЕДИНЕНИЕ", "") + ?(Бухг," 
					|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
					|			                &ТекПериод, 
					|			                ОсновноеСредство В (&СписокОС)
					|		                    И Организация = &ТекОрганизация) КАК МестонахождениеОСБУ", "") + ?(Упр и Бухг,"
					|		ПО МестонахождениеОСУУ.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство", "");
	ТаблицаМестонахождений = Запрос.Выполнить().Выгрузить();
	
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС,ТаблицаНаправлений, ТаблицаМестонахождений, Отказ, Заголовок);
		
	КонецЕсли;
	
	Если Не Отказ И ОтражатьПоЗатратам Тогда
		Если ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ТекСтатьяЗатрат = СтруктураШапкиДокумента.СубконтоБУ1;
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ТекСтатьяЗатрат = СтруктураШапкиДокумента.СубконтоБУ2;
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ТекСтатьяЗатрат = СтруктураШапкиДокумента.СубконтоБУ3;
		КонецЕсли;
		
		Если Упр Тогда
			НаборДвижений = Движения.Затраты;
			НаборДвижений.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
			НаборДвижений.Прочитать();
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			Для каждого СтрокаОС Из ТаблицаПоОС Цикл
				СуммаСписать 	= СтрокаОС.Стоимость - СтрокаОС.Амортизация - СтрокаОС.АмортизацияЗаМесяц;
				
				ТекОС = СтрокаОС.ОсновноеСредство;
				//ВыборкаЗаписей = РегистрыСведений.МестонахождениеОС.ПолучитьПоследнее(Дата ,Новый Структура("ОсновноеСредство",ТекОС));
				//ТекПодразделение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Местонахождение,0);
				
				ДвижениеЗатрат = ТаблицаДвижений.Добавить();
				ДвижениеЗатрат.Регистратор = ЭтотОбъект.Ссылка;
				ДвижениеЗатрат.Активность = Истина;
				ДвижениеЗатрат.ВидДвижения = ВидДвиженияНакопления.Приход;
				ДвижениеЗатрат.Период = Дата;
				ДвижениеЗатрат.Подразделение = ТекПодразделение;
				ДвижениеЗатрат.СтатьяЗатрат = ТекСтатьяЗатрат;
				ДвижениеЗатрат.Сумма = СуммаСписать;
				
			КонецЦикла;
			
			НаборДвижений.Загрузить(ТаблицаДвижений);
			
		КонецЕсли;
		
		Если Бухг Тогда
			НаборДвижений = Движения.ЗатратыБухгалтерскийУчет;
			НаборДвижений.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
			НаборДвижений.Прочитать();
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			Для каждого СтрокаОС Из ТаблицаПоОС Цикл
				СуммаСписатьБУ 	= СтрокаОС.СтоимостьБУ - СтрокаОС.АмортизацияБУ - СтрокаОС.АмортизацияЗаМесяцБУ;
				СуммаСписатьНУ = СтрокаОС.СтоимостьНУ - СтрокаОС.АмортизацияНУ - СтрокаОС.АмортизацияЗаМесяцНУ;
				
				ТекОС = СтрокаОС.ОсновноеСредство;
				
				//ВыборкаЗаписей = РегистрыСведений.МестонахождениеОСБухгалтерскийУчет.ПолучитьПоследнее(Дата ,Новый Структура("ОсновноеСредство,Организация", ТекОС, ТекОрганизация));
				//ТекПодразделениеОрг = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Местонахождение,0);
				
				ДвижениеЗатрат = ТаблицаДвижений.Добавить();
				ДвижениеЗатрат.Регистратор = ЭтотОбъект.Ссылка;
				ДвижениеЗатрат.Активность = Истина;
				ДвижениеЗатрат.ВидДвижения = ВидДвиженияНакопления.Приход;
				ДвижениеЗатрат.Период = Дата;
				ДвижениеЗатрат.Организация = ТекОрганизация;
				ДвижениеЗатрат.Подразделение = ТекПодразделениеОрг;
				ДвижениеЗатрат.СтатьяЗатрат = ТекСтатьяЗатрат;
				ДвижениеЗатрат.СчетУчета = СтруктураШапкиДокумента.СчетСписанияБУ;
				ДвижениеЗатрат.НалоговоеНазначение = НалоговоеНазначениеДоходовИЗатрат;
				ДвижениеЗатрат.Сумма = СуммаСписатьБУ;
				ДвижениеЗатрат.СуммаНУ = СуммаСписатьНУ;
			КонецЦикла;
			
			НаборДвижений.Загрузить(ТаблицаДвижений);
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ДвиженияЗатрат = Движения.ЗатратыБухгалтерскийУчет;
		Если НЕ ОтражатьПоЗатратам Тогда
			ДвиженияЗатрат.Прочитать();
		КонецЕсли;
		
		тзЗатраты = ДвиженияЗатрат.Выгрузить(, "СтатьяЗатрат, Подразделение, Сумма");
		тзЗатраты.Свернуть("СтатьяЗатрат, Подразделение", "Сумма");
		
		Если тзЗатраты.Количество() > 0 Тогда
			тзЗатратыПоПодразделениям = Бюджетирование.ВыполнитьКонтрольПревышенияБюджета(ЭтотОбъект, тзЗатраты, Отказ);
			
			Если НЕ ЭтотОбъект.ПревышенБюджет И тзЗатратыПоПодразделениям <> Неопределено Тогда
				Бюджетирование.СформироватьДвиженияФактическихЗатратПоБюджетам(ЭтотОбъект, тзЗатратыПоПодразделениям);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ПревышенБюджет Тогда
		Бюджетирование.ОчиститьЗаписиРегистраПревышений(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "При копировании" 
//
Процедура ПриКопировании(ОбъектКопирования)
	
	мСкопирован = Истина;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента(
			ЭтотОбъект,
			"СчетСписанияБУ",   // ИмяРеквизитаСчетЗатрат
			"СубконтоБУ" 		// ИмяРеквизитаСубконто
		);
		
	КонецЕсли;
             	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

мСкопирован = Ложь;
ПревышенБюджет = Ложь;
