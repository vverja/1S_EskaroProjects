Перем мУдалятьДвижения;

Перем мНачДата;
Перем мКонДата;
Перем мПроводкиБУ;

Перем мВалютаРегламентированногоУчета Экспорт;

Функция РазностьДатВДнях(Дата1, Дата2)
	мДлинаСуток = 86400; // в секундах
	Возврат Окр((НачалоДня(Дата2) - НачалоДня(Дата1)) / мДлинаСуток);
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация, , Заголовок);
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , УчетнаяПолитикаНУ.ЕстьНалогНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , УчетнаяПолитикаНУ.ЕстьНДС);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ПериодРегистрации");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Функция СуммаСписанияЗаМесяц(Знач ДатаНачалаСписания, Знач ДатаОкончанияСписания, Остаток)

	Если Остаток = 0 Тогда
		Возврат 0;
	КонецЕсли;

	ДатаНачалаСписания    = НачалоДня(ДатаНачалаСписания);
	ДатаОкончанияСписания = КонецДня(ДатаОкончанияСписания);

	Если НЕ ЗначениеЗаполнено(ДатаНачалаСписания) Тогда
		Возврат 0;

	ИначеЕсли ДатаНачалаСписания > мКонДата Тогда
		Возврат 0;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаОкончанияСписания) Тогда
		Возврат 0;

	ИначеЕсли ДатаОкончанияСписания < мНачДата Тогда
		Возврат 0;

	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат 0;

	КонецЕсли;
	
	// остаток суммы списываем пропорционально оставшимся дням (то есть пропорционально)
	
	НачСписанияВМесяце = МАКС(мНачДата, ДатаНачалаСписания);
	КонСписанияВМесяце = МИН (мКонДата, ДатаОкончанияСписания);
	
	КоличествоДнейОстаткаСписания = РазностьДатВДнях(НачСписанияВМесяце, ДатаОкончанияСписания)+ 1;
	КоличествоДнейСписанияВМесяце = РазностьДатВДнях(НачСписанияВМесяце, КонСписанияВМесяце)+ 1;

	Если КоличествоДнейСписанияВМесяце = КоличествоДнейОстаткаСписания Тогда
		
		Возврат Остаток;
		
	ИначеЕсли КоличествоДнейОстаткаСписания > 0 Тогда
		
		Возврат Окр(Остаток / КоличествоДнейОстаткаСписания * КоличествоДнейСписанияВМесяце,2);
		
	Иначе 
		
		Возврат 0;
		
	КонецЕсли;

КонецФункции // СуммаСписанияЗаМесяц()


Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 
	
	ДатаДока     = Дата;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мКонДата", мКонДата);
	Запрос.УстановитьПараметр("СчетБУ", 			ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустаяСтатьяРБП", 	Справочники.РасходыБудущихПериодов.ПустаяСсылка());
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстатки.Субконто1.ДатаНачалаСписания КАК ДатаНачалаСписания,
	|	ХозрасчетныйОстатки.Субконто1.ДатаОкончанияСписания КАК ДатаОкончанияСписания,
	|	ХозрасчетныйОстатки.Субконто1.СчетБУ КАК СчетБУ,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ1 КАК СубконтоБУ1,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ2 КАК СубконтоБУ2,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ3 КАК СубконтоБУ3,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.СуммаОстатокДт ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|		КОНЕЦ) КАК СуммаОстатокДтБУ,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.СуммаНУОстатокДт ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаНУОстатокДт
	|		КОНЕЦ) КАК СуммаОстатокДтНУ,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ХозрасчетныйОстатки.Субконто1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ХозрасчетныйОстатки.Субконто1.ОбъектСтроительства КАК ОбъектСтроительства,
	|	ХозрасчетныйОстатки.Субконто1.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ХозрасчетныйОстатки.Субконто1.Продукция КАК Продукция,
	|	ХозрасчетныйОстатки.Субконто1.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|	ХозрасчетныйОстатки.Субконто1.СерияПродукции КАК СерияПродукции,
	|	ХозрасчетныйОстатки.Субконто1.СтатьяЗатрат КАК СтатьяЗатрат
	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&мКонДата, Счет В ИЕРАРХИИ (&СчетБУ), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.Субконто1 <> &ПустаяСтатьяРБП
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.НалоговоеНазначение,
	|	ХозрасчетныйОстатки.Субконто1.ДатаНачалаСписания,
	|	ХозрасчетныйОстатки.Субконто1.ДатаОкончанияСписания,
	|	ХозрасчетныйОстатки.Субконто1.СчетБУ,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ1,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ2,
	|	ХозрасчетныйОстатки.Субконто1.СубконтоБУ3,
	|	ХозрасчетныйОстатки.Субконто1.НоменклатурнаяГруппа,
	|	ХозрасчетныйОстатки.Субконто1.ОбъектСтроительства,
	|	ХозрасчетныйОстатки.Субконто1.Подразделение,
	|	ХозрасчетныйОстатки.Субконто1.ПодразделениеОрганизации,
	|	ХозрасчетныйОстатки.Субконто1.Продукция,
	|	ХозрасчетныйОстатки.Субконто1.ХарактеристикаПродукции,
	|	ХозрасчетныйОстатки.Субконто1.СерияПродукции,
	|	ХозрасчетныйОстатки.Субконто1.СтатьяЗатрат
	|
	|";
	
	Результат = Запрос.Выполнить();
	// Подготовим структуру таблицы для отражения затрат.
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	
	ВыборкаРБП = Результат.Выбрать();
	Пока ВыборкаРБП.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаРБП.СчетБУ) Тогда
			Сообщить("В справочнике ""Расходы будущих периодов"" для статьи " + СокрЛП(ВыборкаРБП.Субконто1) + " не заполнен реквизит ""Счет""!", СтатусСообщения.ОченьВажное);
			Продолжить;
		КонецЕсли;
		
		СуммаСписанияБУ = СуммаСписанияЗаМесяц(ВыборкаРБП.ДатаНачалаСписания, ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.СуммаОстатокДтБУ);
		СуммаСписанияНУ = СуммаСписанияЗаМесяц(ВыборкаРБП.ДатаНачалаСписания, ВыборкаРБП.ДатаОкончанияСписания, ВыборкаРБП.СуммаОстатокДтНУ);
		
		ОстатокБУ = ВыборкаРБП.СуммаОстатокДтБУ;
		ОстатокНУ = ВыборкаРБП.СуммаОстатокДтНУ;
		
		//Сформировать проводку БУ
		Если ((ОстатокБУ <= 0) ИЛИ (СуммаСписанияБУ <= 0))
			И 
			 ((ОстатокНУ <= 0) ИЛИ (СуммаСписанияНУ <= 0)) Тогда
			Продолжить;
		КонецЕсли;
		
		РБП    = ВыборкаРБП.Субконто1;
		СчетБУ = ВыборкаРБП.СчетБУ;
		
		Если НЕ ЗначениеЗаполнено(РБП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаСписанияБУ < 0 Тогда
			СуммаСписанияБУ = 0;
		КонецЕсли;
		
		Если СуммаСписанияНУ < 0 Тогда
			СуммаСписанияНУ = 0;
		КонецЕсли;
		
		ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(ВыборкаРБП.СчетБУ);
		
		//Сформировать проводку БУ
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			ПроводкаБУ = мПроводкиБУ.Добавить();
			ПроводкаБУ.Период       = Дата;
			ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаБУ.СчетДт       = ВыборкаРБП.СчетБУ;
			
			Если ПроизводственныеРасходы Тогда
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "Подразделения",        ВыборкаРБП.ПодразделениеОрганизации);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "НоменклатурныеГруппы", ВыборкаРБП.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "СтатьиЗатрат",         ВыборкаРБП.СтатьяЗатрат);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "ОбъектыСтроительства", ВыборкаРБП.ОбъектСтроительства);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, ВыборкаРБП.СубконтоБУ1);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, ВыборкаРБП.СубконтоБУ2);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, ВыборкаРБП.СубконтоБУ3);
			КонецЕсли;
			
			ПроводкаБУ.СчетКт       = ВыборкаРБП.Счет;
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 1, ВыборкаРБП.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 2, ВыборкаРБП.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 3, ВыборкаРБП.Субконто3);
			ПроводкаБУ.Сумма        = СуммаСписанияБУ;
			ПроводкаБУ.Содержание   = "РБП за " + ПредставлениеПериода(мНачДата, мКонДата, "ФП=Истина");
			ПроводкаБУ.НомерЖурнала = "ФР";
			
			ПроводкаБУ.НалоговоеНазначениеДт = ВыборкаРБП.НалоговоеНазначение;
			ПроводкаБУ.НалоговоеНазначениеКт = ВыборкаРБП.НалоговоеНазначение;
			
			ПроводкаБУ.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(ПроводкаБУ.НалоговоеНазначениеДт, СуммаСписанияНУ);
			ПроводкаБУ.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(ПроводкаБУ.НалоговоеНазначениеКт, СуммаСписанияНУ);
			
		КонецЕсли;
		
		// Добавим в таблицу значений для проведения по регистрам затрат.
		Если ПроизводственныеРасходы Тогда
			
			СтрокаЗатрат = ТаблицаЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗатрат, ВыборкаРБП);
			
			СтрокаЗатрат.СчетЗатрат   			           = ВыборкаРБП.СчетБУ;
			СтрокаЗатрат.НалоговоеНазначениеДоходовИЗатрат = ВыборкаРБП.НалоговоеНазначение;
			СтрокаЗатрат.Сумма			                   = 0;
			СтрокаЗатрат.СуммаБух			               = СуммаСписанияБУ;
			СтрокаЗатрат.СуммаНал			               = СуммаСписанияНУ;
		
		КонецЕсли; 
		
	КонецЦикла;
	
	// отразим затраты
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете", Ложь);
	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента,
		ТаблицаЗатрат,
		Неопределено 
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	мНачДата = НачалоМесяца(ПериодРегистрации);
	мКонДата = КонецМесяца(ПериодРегистрации);
	
	мПроводкиБУ   = Движения.Хозрасчетный;
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаРегламентированногоУчета", "ВалютаДокумента");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если УправлениеПроизводством.ДокументыВПериоде(Ссылка, "Месяц", Новый Структура("Организация", Организация)).Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("За указанный период уже существует документ """ + Ссылка.Метаданные().Представление() + """", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ОтражатьВБухгалтерскомУчете = Истина;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
