Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПревышенБюджет Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция рассчитывает сумму списанную по текущей строке документа
Функция РассчитатьСуммуСписания(ТекСтрока, ТабДвижений)
	
	СтруктПоиска = Новый Структура;
	СтруктПоиска.Вставить( "Номенклатура",               ТекСтрока.Номенклатура);
	СтруктПоиска.Вставить( "ХарактеристикаНоменклатуры", ТекСтрока.Характеристика);
	Если (НЕ ТекСтрока.Номенклатура.ВестиУчетПоСериям) ИЛИ (ТекСтрока.Номенклатура.ВестиПартионныйУчетПоСериям) Тогда
		СтруктПоиска.Вставить( "СерияНоменклатуры",          ТекСтрока.Серия);
	КонецЕсли;	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция Тогда
		//для оборудования качество не заполняется
		СтруктПоиска.Вставить( "Качество",                   ТекСтрока.Качество);
	КонецЕсли;
	//Смартис Лиманчук начало 10.01.2013
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукцияЧерезПодотчет Тогда
		//для оборудования качество не заполняется
		СтруктПоиска.Вставить( "Качество",                   ТекСтрока.Качество);
	КонецЕсли;
	//Смартис Лиманчук окончание 10.01.2013
	
	НаборСтрок = ТабДвижений.НайтиСтроки(СтруктПоиска);
	КолСписать = ТекСтрока.Количество*ТекСтрока.Коэффициент;
	Сумма      = 0;
	
	Для Каждого СтрокаДвиж Из НаборСтрок Цикл
		Если КолСписать >= СтрокаДвиж.Количество Тогда
			Сумма      = Сумма      + СтрокаДвиж.Стоимость;
			КолСписать = КолСписать - СтрокаДвиж.Количество;
			СтрокаДвиж.Стоимость  = 0;
			СтрокаДвиж.Количество = 0;
		Иначе
			Если Не СтрокаДвиж.Количество = 0 Тогда
				СумСписать = Окр( СтрокаДвиж.Стоимость * КолСписать / СтрокаДвиж.Количество, 2, 1);
				Сумма      = Сумма + СумСписать;
				СтрокаДвиж.Стоимость  = СтрокаДвиж.Стоимость  - СумСписать;
				СтрокаДвиж.Количество = СтрокаДвиж.Количество - КолСписать;
			Иначе
				Сумма = Сумма + СтрокаДвиж.Стоимость;
				СтрокаДвиж.Стоимость = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции // РассчитатьСуммуСписания()

 // Получает сумму списания активов для заполнения печатных форм документов
Функция ПолучитьСуммуСписанияБланков() Экспорт
	
	ПроводкиДокумента = Новый ТаблицаЗначений;
	ПроводкиДокумента.Колонки.Добавить("Номенклатура");
	ПроводкиДокумента.Колонки.Добавить("Количество");
	ПроводкиДокумента.Колонки.Добавить("Сумма");
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура");
	ТаблицаСуммСписания.Колонки.Добавить("Количество");
	ТаблицаСуммСписания.Колонки.Добавить("Сумма");
	Если Проведен Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|   ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКТ,
		|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, Регистратор = &Регистратор) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СчетКт";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаНач", Дата);
		Запрос.УстановитьПараметр("ДатаКон", Дата);
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		
		
		ПроводкиДокумента = Запрос.Выполнить().Выгрузить();
		Для Каждого ПроводкаДокумента Из ПроводкиДокумента Цикл
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт1) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если ПроводкаДокумента.СчетКт.Забалансовый <> Истина Тогда 
					Строка = ТаблицаСуммСписания.Добавить();
					Строка.Номенклатура = ПроводкаДокумента.СубконтоКт1;
					Строка.Количество   = ПроводкаДокумента.КоличествоКт;
					Строка.Сумма        = ПроводкаДокумента.Сумма;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт2) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт2;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
		КонецЦикла;
		ТаблицаСуммСписания.Свернуть("Номенклатура","Количество,Сумма");
	КонецЕсли;
	
  Возврат  ТаблицаСуммСписания;
  
КонецФункции //ПолучитьСуммуСписанияБланков

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписаниеТоваров(ВидПечати = "Регл")

    Перем ПогрешностьСуммы;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НТТ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	| 	ВидОперации,
	|	Организация,	
	|	Организация КАК Покупатель,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Константы.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета,
	|	Склад,
	|	СчетДт КАК СчетДт,
	|	СубконтоДт1 КАК Субконто1,
	|	СубконтоДт2 КАК Субконто2,
	|	СубконтоДт3 КАК Субконто3,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ПредседательКомиссии,
	|	ПервыйЧленКомиссии,
	|	ВторойЧленКомиссии,
	|	ТретийЧленКомиссии
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров,
	|	Константы
	|
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета КАК БСУ,
	|	НомерСтроки КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	КоличествоМест,
	|	Количество,
	|	Качество,
	|	ЕдиницаИзмеренияМест.Представление   КАК ЕдиницаИзмеренияМест,
	|	ЕдиницаИзмерения.Представление   КАК ЕдиницаИзмерения,
	|	Коэффициент   						КАК Коэффициент,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Цена							 КАК Цена,
	|	Сумма	                         КАК Сумма,
	|	ХарактеристикаНоменклатуры       КАК Характеристика,
	|	СерияНоменклатуры                КАК Серия
	|	
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваров
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета КАК БСУ,
	|	НомерСтроки,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	КоличествоМест,
	|	Количество,
	|	Null,
	|	ЕдиницаИзмеренияМест.Представление,
	|	ЕдиницаИзмерения.Представление,
	|	Коэффициент,
	|	Номенклатура.Код,
	|	Номенклатура.Артикул,
	|	0,
	|	0,
	|	Null,
	|	Null
	|	
	|ИЗ
	|	Документ.СписаниеТоваров.БланкиСтрогогоУчета КАК СписаниеТоваров
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	БСУ,
	|	НомерСтрокиТЧ
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.СписаниеТоваров.ВозвратнаяТара КАК СписаниеТоваров
	|
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
		
	ЭтоСкладНТТ = (Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	
	Если ВидПечати = "Регл"	Тогда
		ТаблицаСуммСписания = БухгалтерскийУчет.ПолучитьСуммуСписанияАктивов(ЭтотОбъект);
		ТаблицаСуммСписанияБланков = ПолучитьСуммуСписанияБланков();
	ИначеЕсли Не ЭтоСкладНТТ тогда 
		Движения.ПартииТоваровНаСкладах.Прочитать();
		ТабДвижений = Движения.ПартииТоваровНаСкладах.Выгрузить();
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_Накладная";

	Макет = ПолучитьМакет("Накладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);	
	
	// Выводим шапку накладной
	ОбластьМакета                          = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Списание товаров';uk='Списання товарів'",КодЯзыкаПечать),КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.РеквизитыПокупателя 	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,ИНН,НомерСвидетельства,/,ЮридическийАдрес,Телефоны,",,КодЯзыкаПечать);	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о складе
	СписокДополнительныхПараметров = "Склад,";
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	МассивСтруктурСтрок.Добавить(Новый Структура("НазваниеПараметра,ЗначениеПараметра", 
									  НСтр("ru='Основание:';uk='Підстава:'",КодЯзыкаПечать),
									  Основание));
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	Если ОтражатьПоЗатратам Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Подразделение,
		               |	СтатьяЗатрат,
		               |	НоменклатурнаяГруппа,
		               |	Заказ,
		               |	Регистратор
		               |ИЗ
		               |	РегистрНакопления.Затраты КАК Затраты" + ?(ОтражатьВБухгалтерскомУчете, "БухгалтерскийУчет", "") + "
		               |ГДЕ
		               |	Затраты" + ?(ОтражатьВБухгалтерскомУчете, "БухгалтерскийУчет", "") + ".Регистратор = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Подразделение,
		               |	СтатьяЗатрат,
		               |	НоменклатурнаяГруппа,
		               |	Заказ,
		               |	Регистратор";
		ВыборкаЗатрат = Запрос.Выполнить().Выбрать();
		ВыборкаЗатрат.Следующий();
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("АналитикаШапка");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("АналитикаСтрока");
		Если ЗначениеЗаполнено(ВыборкаЗатрат.Подразделение) Тогда
			ОбластьМакета.Параметры.ВидСубконто	= "Подразделение:";
			ОбластьМакета.Параметры.Субконто	= ВыборкаЗатрат.Подразделение;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаЗатрат.СтатьяЗатрат) Тогда
			ОбластьМакета.Параметры.ВидСубконто	= "Статья затрат:";
			ОбластьМакета.Параметры.Субконто	= ВыборкаЗатрат.СтатьяЗатрат;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаЗатрат.НоменклатурнаяГруппа) Тогда
			ОбластьМакета.Параметры.ВидСубконто	= "Номенклатурная группа:";
			ОбластьМакета.Параметры.Субконто	= ВыборкаЗатрат.НоменклатурнаяГруппа;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаЗатрат.Заказ) Тогда
			ОбластьМакета.Параметры.ВидСубконто	= "Заказ:";
			ОбластьМакета.Параметры.Субконто	= ВыборкаЗатрат.Заказ;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("АналитикаШапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("АналитикаСтрока");
		Если СчетДт.ВидыСубконто.Количество()>=1 Тогда
			ОбластьМакета.Параметры.ВидСубконто = Строка(СчетДт.ВидыСубконто[0].ВидСубконто) + ":";
			ОбластьМакета.Параметры.Субконто	= Шапка.Субконто1;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		Если СчетДт.ВидыСубконто.Количество()>=2 Тогда
			ОбластьМакета.Параметры.ВидСубконто = Строка(СчетДт.ВидыСубконто[1].ВидСубконто) + ":";
			ОбластьМакета.Параметры.Субконто	= Шапка.Субконто2;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		Если СчетДт.ВидыСубконто.Количество()>=3 Тогда
			ОбластьМакета.Параметры.ВидСубконто = Строка(СчетДт.ВидыСубконто[2].ВидСубконто) + ":";
			ОбластьМакета.Параметры.Субконто	= Шапка.Субконто3;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	КонецЕсли;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	
	//Смартис Лиманчук начало 10.01.2013
	//ОбластьДанных.Параметры.Товар = ?(Шапка.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция, НСтр("ru='Товар';uk='Товар'",КодЯзыкаПечать), НСтр("ru='Оборудование';uk='Устаткування'",КодЯзыкаПечать));		
	ОбластьДанных.Параметры.Товар = ?(Шапка.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукцияЧерезПодотчет, НСтр("ru='Товар';uk='Товар'",КодЯзыкаПечать), НСтр("ru='Оборудование';uk='Устаткування'",КодЯзыкаПечать));		
	//Смартис Лиманчук окончание 10.01.2013
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	// Товары
	ИтогоСумма = 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		
		Сумма = 0;
		
		Если ВидПечати = "Регл" Тогда
		
			Если ЭтоСкладНТТ И Не ВыборкаСтрокТовары.БСУ Тогда
				 Сумма = ВыборкаСтрокТовары.Сумма;
			Иначе	
				
				Если ВыборкаСтрокТовары.БСУ Тогда
				    СтрокаСуммСписания =  ТаблицаСуммСписанияБланков.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
				Иначе	
					СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
				КонецЕсли;
				
				Если СтрокаСуммСписания = Неопределено Тогда
					ОбластьДанных.Параметры.Цена = 0;
					ОбластьДанных.Параметры.Сумма = 0; 
				Иначе
					Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество/ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент)*ВыборкаСтрокТовары.Коэффициент;
					Сумма = Цена*ВыборкаСтрокТовары.Количество;
					ОбластьДанных.Параметры.Цена = Цена;
					ОбластьДанных.Параметры.Сумма = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Сумма, 2,, ПогрешностьСуммы,ВыборкаСтрокТовары.Номенклатура);
				КонецЕсли;
				 
			 КонецЕсли; 	
		
		Иначе //вид печати
		
			Если ЭтоСкладНТТ  И НЕ ВыборкаСтрокТовары.БСУ Тогда                                            
			    Сумма = ВыборкаСтрокТовары.Сумма;
			Иначе
	
				Сумма = РассчитатьСуммуСписания(ВыборкаСтрокТовары, ТабДвижений);

				Если ВыборкаСтрокТовары.Количество <> 0 Тогда
					Цена = Сумма / ВыборкаСтрокТовары.Количество;
					ОбластьДанных.Параметры.Цена = Цена;
				КонецЕсли;
				
				ОбластьДанных.Параметры.Сумма = Сумма;
			КонецЕсли;	
		
		КонецЕсли; //вид печати  		
		
		ТабДокумент.Присоединить(ОбластьДанных);

		ИтогоСумма = ИтогоСумма + Сумма;
	КонецЦикла;


	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Товар);			
			ТабДокумент.Присоединить(ОбластьДанных);
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	Если ВидПечати = "Регл" Тогда
		ВалютаПечати = Шапка.ВалютаРегламентированногоУчета;
	Иначе
		ВалютаПечати = Шапка.ВалютаУправленческогоУчета;
	КонецЕсли;
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество()
										   + ?(ИтогоСумма > 0, НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(ИтогоСумма, ВалютаПечати),"")
										   + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество()) + ".";
	Если ИтогоСумма > 0 Тогда
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСумма, ВалютаПечати, КодЯзыкаПечать);
	КонецЕсли;										   
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСписаниеТоваров()


// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ВедомостьУпр" Тогда
		ТабДокумент = ПечатьСписаниеТоваров("Упр");
	ИначеЕсли ИмяМакета = "ВедомостьРегл" Тогда
		ТабДокумент = ПечатьСписаниеТоваров("Регл");		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов =  Новый Структура("ВедомостьУпр, ВедомостьРегл", "Акт списания товаров (упр)", "Акт списания товаров (регл)");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(ДокументОснование) Экспорт

#Если ВнешнееСоединение Тогда
	Если Товары.Количество() ИЛИ БланкиСтрогогоУчета.Количество() Тогда
		Товары.Очистить();
		БланкиСтрогогоУчета.Очистить();
	КонецЕсли;
#КонецЕсли

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",          Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	Док.Номенклатура,
	|	Док.Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета КАК БСУ,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Ссылка.Склад                              КАК Склад,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ 
	|       ДокСписание.Номенклатура,
	|       ДокСписание.ХарактеристикаНоменклатуры,
	|       ДокСписание.СерияНоменклатуры,
	|       ДокСписание.Ссылка.Склад                 КАК Склад,
	|		ДокСписание.Количество                   КАК Количество,
	|       ДокСписание.Цена
	|	 ИЗ
	|       Документ.СписаниеТоваров.Товары КАК ДокСписание
	|    ГДЕ
	|       ДокСписание.Ссылка <> &ДокументСсылка
	|       И ДокСписание.Ссылка.Проведен
	|       И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|    ОБЪЕДИНИТЬ ВСЕ
	|
	|	 ВЫБРАТЬ 
	|       ДокСписание.Номенклатура,
	|       Null,
	|       Null,
	|       ДокСписание.Ссылка.Склад                 КАК Склад,
	|		ДокСписание.Количество                   КАК Количество,
	|       0
	|	 ИЗ
	|       Документ.СписаниеТоваров.БланкиСтрогогоУчета КАК ДокСписание
	|    ГДЕ
	|       ДокСписание.Ссылка <> &ДокументСсылка
	|       И ДокСписание.Ссылка.Проведен
	|       И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|    ОБЪЕДИНИТЬ ВСЕ  
	|
	|	 ВЫБРАТЬ 
	|       ДокОтчетККМ.Номенклатура,
	|       ДокОтчетККМ.ХарактеристикаНоменклатуры,
	|       ДокОтчетККМ.СерияНоменклатуры,
	|       ДокОтчетККМ.Склад                        КАК Склад,
	|		ДокОтчетККМ.Количество                   КАК Количество,
	|       ДокОтчетККМ.Цена
	|	 ИЗ
	|       Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|    ГДЕ
	|         ДокОтчетККМ.Ссылка.Проведен
	|       И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|ПО
	|      Док.Номенклатура               = ВложенныйЗапрос.Номенклатура
	|    И Док.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
	|    И Док.СерияНоменклатуры          = ВложенныйЗапрос.СерияНоменклатуры
	|    И Док.Ссылка.Склад               = ВложенныйЗапрос.Склад " +
	?(Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ, " 
	|    И Док.Цена                       = ВложенныйЗапрос.Цена ", "") + "
	|
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка 
	|   И Док.КоличествоУчет - Док.Количество > 0
	|  " + ?(Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ, " И Док.ЦенаВРознице > 0 ", "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.ЦенаВРознице,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;

		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = ?(Выборка.БСУ, БланкиСтрогогоУчета.Добавить(), Товары.Добавить());

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Количество                 = КоличествоСписать;
		
		Если НЕ Выборка.БСУ Тогда
		
			СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

			Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда

				СтрокаТабличнойЧасти.Цена = Выборка.Цена;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			КонецЕсли;		
		
		КонецЕсли; // НЕ Выборка.БСУ 
		
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ?(Выборка.БСУ, "БланкиСтрогогоУчета", "Товары"), ОтражатьВБухгалтерскомУчете);	
		
	КонецЦикла;

	#Если Клиент Тогда

	Если НЕ Товары.Количество() 
	   И НЕ БланкиСтрогогоУчета.Количество() Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары учетное количество которых превышает фактическое.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Процедура заполняет счета БУ и НУ в указанной табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий   = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(Склад, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
    ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании");
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтуктураПоиска   = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);

		флЗаполнятьИзРезервов = ложь;
		Если ТипЗнч(ИсходнаяСтрока.ДокументРезерва)=Тип("ДокументСсылка.ЗаказПокупателя") И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании Тогда
			Если ИсходнаяСтрока.ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ДокументРезерва);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;
		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;

		СтрокаСПустойСерией = Неопределено;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			Если НЕ ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры               = Строка.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатуры               = ИсходнаяСтрока.СерияНоменклатуры;
			КонецЕсли;

			НоваяСтрока.Количество                          = СписанноеКоличество;
			
			НоваяСтрока.КоличествоМест             = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество* ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;            

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
				
				НоваяСтрока.СерияНоменклатуры                   = "";
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;
				
				НоваяСтрока.КоличествоМест             = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаТоваров, СтруктураШапкиДокумента);
	
	ТаблицаТоваров.Колонки.Добавить("СчетЗатрат");
	ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеДоходовИЗатрат");
	ТаблицаТоваров.Колонки.Добавить("ВидНалоговойДеятельностиДоходовИЗатрат");
	ТаблицаТоваров.Колонки.Добавить("ВидДеятельностиНДСДоходовИЗатрат");
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетДт, "СчетЗатрат");	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат, "НалоговоеНазначениеДоходовИЗатрат");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности, "ВидНалоговойДеятельностиДоходовИЗатрат");	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС      , "ВидДеятельностиНДСДоходовИЗатрат");	
	
КонецПроцедуры


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоБланкам - результат запроса по табличной части "БланкиСтрогогоУчета",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента)

	ТаблицаБланков = РезультатЗапросаПоБланкам.Выгрузить();

	ПодготовитьТаблицуТоваровУпр(ТаблицаБланков , СтруктураШапкиДокумента);
	
	ПодготовитьТаблицуБланковРегл(ТаблицаБланков, СтруктураШапкиДокумента);
	
	Возврат ТаблицаБланков;

КонецФункции // ПодготовитьТаблицуБланков()

Процедура ПодготовитьТаблицуБланковРегл(ТаблицаБланков, СтруктураШапкиДокумента)
	
	
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("БланкиСтрогогоУчета", ТаблицаБланков, СтруктураШапкиДокумента);
	
	ТаблицаБланков.Колонки.Добавить("СуммаНоминальная");
	ТаблицаБланков.Колонки.Добавить("КоличествоНоминальное");
	
	//получить номинальные реквизиты
	// Установим параметры запроса
	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",           СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("КонецПериода",    СтруктураШапкиДокумента.Ссылка.МоментВремени());	
	Запрос.УстановитьПараметр("Организация",     СтруктураШапкиДокумента.Организация);	
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК Остатки
		|
		|ГДЕ
		|	Остатки.КоличествоОстатокДт > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1
		|";

	Для Каждого Строка из ТаблицаБланков Цикл
				
		Запрос.УстановитьПараметр("Счет",     		 Строка.ПринятыеСчетУчетаБУ);
		Запрос.УстановитьПараметр("Номенклатура", 	 Строка.Номенклатура);
	
		ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
		СтрокаТаблицыЦен = ТаблицаЦен.Найти(Строка.Номенклатура, "Номенклатура");
		Если СтрокаТаблицыЦен <> Неопределено Тогда			
			Строка.СуммаНоминальная 	 = Строка.Количество * ?(СтрокаТаблицыЦен.КоличествоОстаток = 0, 0, Окр(СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток, 2, 1));
			Строка.КоличествоНоминальное = СтрокаТаблицыЦен.КоличествоОстаток;	
		Иначе
			Строка.СуммаНоминальная = 0;
			Строка.КоличествоНоминальное = 0;
		КонецЕсли;		
	КонецЦикла;

	
КонецПроцедуры
                                      
// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре    - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТаре.Выгрузить();
	
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, Склад";
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, Склад");

	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	Если ОтражатьПоЗатратам Тогда  	
		СтруктураОбязательныхПолей.Вставить("СтатьяЗатрат"); 
		Если ОтражатьВУправленческомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("ПодразделениеЗатраты");
		КонецЕсли;
		Если ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("ПодразделениеОрганизацииЗатраты");
		КонецЕсли;	
	КонецЕсли; 
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.Оборудование
	   И СтруктураШапкиДокумента.ВидСклада   = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("При операции с оборудованием склад не может быть НТТ.", Отказ, Заголовок);
	КонецЕсли;
	
	Если ОтражатьПоЗатратам И ЗначениеЗаполнено(СтатьяЗатрат) И ОтражатьВУправленческомУчете Тогда
		Если Не (СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы или
			     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы или
			     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие или
			     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы или
			     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт или
				 СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы) 
		Тогда
		      ОбщегоНазначения.СообщитьОбОшибке("При указании статьи затрат с характером затрат " + СтатьяЗатрат.ХарактерЗатрат + " движения в регистре Затраты (УУ) не будут отражены", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтражатьПоЗатратам И ЗначениеЗаполнено(СчетДт) И ОтражатьВБухгалтерскомУчете Тогда
		ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтруктураШапкиДокумента.СчетДт, СтруктураШапкиДокумента.СтатьяЗатрат);
		Если НЕ (ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы или 
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт или 
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы или 
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы или 
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы) 
		Тогда
			ОбщегоНазначения.СообщитьОбОшибке("При указании счета затрат " + СтруктураШапкиДокумента.СчетДт + " с характером затрат " + ХарактерЗатрат + " движения в регистре Затраты (бух. учет) не будут отражены",  Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;   
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		Неопределено,      // Неопределено - в случае проверки шапки документа
		Неопределено,      // Неопределено - в случае проверки шапки документа
		Отказ, 
		Заголовок, 
		"ОтражениеЗатрат", // ВидОперации
		Истина,            // ОтражатьПоЗатратам,
		"СчетДт",          // ИмяРеквизитаСчетЗатрат
		"СубконтоДт"       // ИмяРеквизитаСубконтоЗатрат
	);
	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если ОтражатьВБухгалтерскомУчете И ВидОперации <> Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукцияЧерезПодотчет Тогда
		СтруктураОбязательныхПолей.Вставить("СчетДт");
	КонецЕсли;
	
КонецПроцедуры
                       
// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция Тогда
		СтруктураОбязательныхПолей.Вставить("Качество")
	КонецЕсли;
	//Смартис Лиманчук начало 10.01.2013
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукцияЧерезПодотчет Тогда
		СтруктураОбязательныхПолей.Вставить("Качество")
	КонецЕсли;
	//Смартис Лиманчук окончание 10.01.2013

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);


	//Счета учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	
	// При списании товаров должен быть указан конкретный вид налоговой деятельности.
	СтруктураПараметровПроверки = Новый Структура("ПроверятьРаспределяемую");
	НалоговыйУчет.ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(ЭтотОбъект, "Товары", , ТаблицаПоТоварам,
	                                                              СтруктураПараметровПроверки,
	                                                              СтруктураШапкиДокумента,
																  Отказ, Заголовок);
																  
																  
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоТоварам, 
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Списание",        // ВидОперации
					ОтражатьПоЗатратам // ЭтоЗатраты 
	);	
																  
																  
																  
																  
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "БланкиСтрогогоУчета".
//
// Параметры:
// Параметры: 
//  ТаблицаПоБланкам        - таблица значений, содержащая данные для проведения и проверки ТЧ БланкиСтрогогоУчета
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиБланки(ТаблицаПоБланкам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "БланкиСтрогогоУчета";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиБланкиРегл(ТаблицаПоБланкам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНЕБланковСтрогогоУчета(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоБланкам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоБланкам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоБланкам, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиБланкиРегл(ТаблицаПоБланкам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиБланки()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиБланкиРегл(ТаблицаПоБланкам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей)
    
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
		СтруктураОбязательныхПолей.Вставить("ПринятыеСчетУчетаБУ");

		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
			СтруктураОбязательныхПолей.Вставить("НалоговоеНазначение");
		КонецЕсли;
	
	КонецЕсли; // ОтражатьВБухгалтерскомУчете 

КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиБланкиРегл(ТаблицаПоБланкам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого СтрокаТЧ Из ТаблицаПоБланкам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Бланки"": ";

		Если (НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаБУ) И 
			НЕ ЗначениеЗаполнено(СтрокаТЧ.ПринятыеСчетУчетаБУ)) Тогда

			СтрокаСообщения = "Не заполнено значение обоих счетов учета номенклатуры!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);

		КонецЕсли;
	КонецЦикла;
	
	//Счета учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("БланкиСтрогогоУчета", ТаблицаПоБланкам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	// При списании тары должен быть указан конкретный вид налоговой деятельности.
	СтруктураПараметровПроверки = Новый Структура("ПроверятьРаспределяемую");
	НалоговыйУчет.ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(  ЭтотОбъект, "БланкиСтрогогоУчета", , ТаблицаПоБланкам,
					                                                              СтруктураПараметровПроверки,
					                                                              СтруктураШапкиДокумента,
																				  Отказ, Заголовок);

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	//Счета учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// При списании тары должен быть указан конкретный вид налоговой деятельности.
	СтруктураПараметровПроверки = Новый Структура("ПроверятьРаспределяемую");
	НалоговыйУчет.ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(ЭтотОбъект, "ВозвратнаяТара", , ТаблицаПоТаре,
	                                                              СтруктураПараметровПроверки,
	                                                              СтруктураШапкиДокумента,
																  Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	ДвиженияПоТоварамОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	
	Если ТаблицаПоТоварам.Количество() + ТаблицаПоТаре.Количество() >0 тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	КонецЕсли;	
		

	// При списании партий также делаются записи в регистры бухгалтерского учета.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать();
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	//Коновалова 13022013 +
	Если (СтруктураШапкиДокумента.ОтражатьВУправленческомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладах")) ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладахБухгалтерскийУчет")) Тогда
		 Отказ = Истина;
		 Возврат;
	КонецЕсли;
	//Коновалова 13022013 -
	
	Если НЕ Отказ Тогда
		// До вызова процедуры, все движения по хозрасчетному, должны быть, записаны.
		ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);			
	КонецЕсли; // НЕ Отказ   

КонецПроцедуры // ДвиженияПоРегистрам()

//Коновалова 19022013 +
Функция НетДвиженийПоПартиям(_Регистр)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПартииТоваровНаСкладах.Регистратор
	                      |ИЗ
	                      |	РегистрНакопления."+_Регистр+" КАК ПартииТоваровНаСкладах
	                      |ГДЕ
	                      |	ПартииТоваровНаСкладах.Регистратор = &Регистратор");
						        
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
//Коновалова 19022013 -

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// Движения по документу.
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиБУ.Прочитать();

	Если ОтражатьВБухгалтерскомУчете Тогда
	
		// ТОВАРЫ ПО РЕГИСТРУ Хозрасчетный.
		// Доп. проводка по забалансу на номинальную стоимость.
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета Тогда
				
			// Проводки по бланкам стогого учета		
			Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
				
				Если СтрокаТаблицы.БСУ = Истина Тогда			
					 //проводка по  счету ПринятыеСчетУчетаБУ (в других документах с учетом БСУ: СчетУчетаЗабалансовыйБУ)
					Если СтрокаТаблицы.КоличествоНоминальное < СтрокаТаблицы.Количество Тогда
						ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон("¤1¤. учет. Строка :¤2¤"
												"Не списано ¤3¤ ¤4¤ товара ¤5¤, счет учета ¤6¤",
												"Бух", СтрокаТаблицы.НомерСтроки, (СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоНоминальное),
												СтрокаТаблицы.Номенклатура.БазоваяЕдиницаИзмерения,
												СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ПринятыеСчетУчетаБУ), "");

						Отказ = Истина;	
					Иначе		
						Проводка = ПроводкиБУ.Добавить();
			            Проводка.Период       = Дата;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание   = "Списаны БСУ";

						Проводка.СчетКТ       = СтрокаТаблицы.ПринятыеСчетУчетаБУ;	
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",       СтруктураШапкиДокумента.Склад);
										
						Проводка.КоличествоКТ = СтрокаТаблицы.Количество;						
						Проводка.Сумма = СтрокаТаблицы.СуммаНоминальная;
					  КонецЕсли;

				
				КонецЕсли; // СтрокаТаблицы.БСУ
				
			КонецЦикла; // Проводки по бланкам строгого учета

		КонецЕсли;
		
		//Смартис Лиманчук начало 10.01.2013
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукцияЧерезПодотчет Тогда
			
			Взаиморасчеты = Движения.ВзаиморасчетыСПодотчетнымиЛицами;
			//ИЗМЕНЕНО Верескул Игорь(Начало 14.12.2020		
			Если Дата >= Дата("20210101") Тогда
				Крафт = Константы.НПТ.Получить();
			Иначе
				Крафт = Константы.КрафтКолор.Получить();
			КонецЕсли;
			//Крафт = Константы.КрафтКолор.Получить();
			ОбщаяСумма = ПроводкиБУ.Итог("Сумма");
			СуммаНеРаспределенная = ОбщаяСумма;
			
			Для каждого СтрМОЛ Из МОЛ Цикл
			
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = Крафт;
				Проводка.Содержание   = "Списание ТМЦ БСУ";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", СтрМОЛ.ФизическоеЛицо);
				
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
				
				Если СтрМОЛ.НомерСтроки < МОЛ.Количество() Тогда
					Проводка.Сумма 		  = Окр(ОбщаяСумма * СтрМОЛ.Процент / 100, 2);
					СуммаНеРаспределенная = СуммаНеРаспределенная - Проводка.Сумма;
				Иначе
					Проводка.Сумма 		  = СуммаНеРаспределенная;
				КонецЕсли;
				
				//проводки по взаиморасчетам с подотчетниками
				Движение = Взаиморасчеты.ДобавитьПриход();
				Движение.Активность = Истина;
				Движение.Период = СтруктураШапкиДокумента.Дата;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.ФизЛицо = СтрМОЛ.ФизическоеЛицо;
				Движение.Валюта = мВалютаРегламентированногоУчета;
				Движение.РасчетныйДокумент = Ссылка;
				Движение.СуммаВзаиморасчетов = Проводка.Сумма;
				Движение.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Проводка.Сумма,мВалютаРегламентированногоУчета,
						   			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,  1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета);			
			
			КонецЦикла;
			
		КонецЕсли;
		//Смартис Лиманчук окончание 10.01.2013
 	
   КонецЕсли;

КонецПроцедуры //ДвиженияПоРегистрамРегл

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// Движения по документу.

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
	
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ.
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			НаборДвижений = Движения.ТоварыВНТТ;
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если БланкиСтрогогоУчета.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("БланкиСтрогогоУчета", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			НаборДвижений = Движения.ТоварыВРознице;
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если БланкиСтрогогоУчета.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("БланкиСтрогогоУчета", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		Иначе
			НаборДвижений = Движения.ТоварыНаСкладах;
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если БланкиСтрогогоУчета.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("БланкиСтрогогоУчета", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;

		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
			
			Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",    Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",    Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЦенаВРознице", 0,                            "ТаблицаПоТаре");
				
			Иначе
			
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",     Справочники.Качество.Новый,   "ТаблицаПоТаре");

				Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			
					// ТОВАР
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента.ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента.ТаблицаПоТоварам, ТаблицаПоЦенам);
					
					// ТАРА
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента.ТаблицаПоТаре   .ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента.ТаблицаПоТаре,    ТаблицаПоЦенам);
					
				КонецЕсли;
				
			КонецЕсли;
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		КонецЕсли;
				
		// Списание резерва по товарам
		ТабРезервТовары = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоТоварам);	
		ТабРезервТара   = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоТаре);	
		
		Если ТабРезервТовары.Количество() > 0 ИЛИ ТабРезервТара.Количество() > 0 Тогда
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если БланкиСтрогогоУчета.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("БланкиСтрогогоУчета", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТабРезервТовары);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТабРезервТара);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;	

		//Товары к передаче со складов
		ТабКПередачеТовары = УдалитьСтрокиНеТребующиеСписаниеИзТоваровКПередаче(ТаблицаПоТоварам);	
		ТабКПередачеТара   = УдалитьСтрокиНеТребующиеСписаниеИзТоваровКПередаче(ТаблицаПоТаре);	
		
		Если ТабКПередачеТовары.Количество() > 0 ИЛИ ТабКПередачеТара.Количество() > 0 Тогда
			НаборДвижений = Движения.ТоварыКПередачеСоСкладов;
            ТабКПередачеТовары.Колонки.ДокументРезерва.Имя = "ДокументПередачи";
            ТабКПередачеТара.Колонки.ДокументРезерва.Имя = "ДокументПередачи";

			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если БланкиСтрогогоУчета.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("БланкиСтрогогоУчета", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТабКПередачеТовары);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТабКПередачеТара);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
                ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;	
   КонецЕсли;
КонецПроцедуры

Функция  УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТабТовары)
	ТабРезерв = ТабТовары.Скопировать();
	
	// Удалим записи таблицы в которых не надо списывать из резерва или не указан заказ покупателя.
	Сч = 0;
	Пока Сч < ТабРезерв.Количество() Цикл
		СтрокаТаблицы = ТабРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ЗаказПокупателя")
			   И ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ВнутреннийЗаказ")
			   И ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ЗаказНаПроизводство")
			   И ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары"))Тогда
			ТабРезерв.Удалить(СтрокаТаблицы);
		Иначе
			Если ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
				И СтрокаТаблицы.ДокументРезерва.БезПраваПродажи Тогда
				ТабРезерв.Удалить(СтрокаТаблицы);
			Иначе	
				Сч = Сч + 1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабРезерв;

КонецФункции

Функция  УдалитьСтрокиНеТребующиеСписаниеИзТоваровКПередаче(ТабТовары)
	ТабРезерв = ТабТовары.Скопировать();
	
	Сч = 0;
	Пока Сч < ТабРезерв.Количество() Цикл
		СтрокаТаблицы = ТабРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
			   И ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПередачаТоваров")
			   И ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПеремещениеТоваров"))Тогда
			ТабРезерв.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабРезерв;

КонецФункции

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	Если СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда

		НаборДвижений = Движения.ТоварыОрганизаций;

		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "БланкиСтрогогоУчета", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
						                                       
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизацийРегл.

	НаборДвижений = Движения.ТоварыОрганизацийРегл;

	Если НЕ Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
														   
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ЗначСклад = ?(ВестиПартионныйУчетПоСкладамРегл, Склад, Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	
	НаборДвижений = Движения.СписанныеТовары;
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	ЕстьНоменклатураВТаблицеДвижений = (ТаблицаДвижений.Колонки.Найти("Номенклатура") <> Неопределено);
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд + 1;
		Строка.НомерСтрокиДокумента = Инд;
		// определить из какой табличной части заполнена номенклатура: БланкиСтрогогоУчета или же Товары.
		Если ЕстьНоменклатураВТаблицеДвижений 
		   И ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		   И НЕ Строка.Номенклатура.Пустая()	
		   И  Строка.Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета Тогда
			Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.БланкиСтрогогоУчета;
		Иначе
			Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
		КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаТоваров из ТаблицаПоТоварам Цикл

		Если ЗначениеЗаполнено(СтрокаТоваров.ДокументРезерва) тогда

			Если СтрокаТоваров.ДокументРезерва.Метаданные().Имя = "ПриходныйОрдерНаТовары" тогда

				ТаблицаДвижений[СтрокаТоваров.НомерСтроки-1].НеСписывать = Истина;
				
			ИначеЕсли СтрокаТоваров.ДокументРезерва.Метаданные().Имя = "ЗаказПокупателя"  тогда

				ТаблицаДвижений[СтрокаТоваров.НомерСтроки-1].ЗаказСписания = СтрокаТоваров.ДокументРезерва;

			КонецЕсли;

			Если ТипЗНЧ(СтрокаТоваров.ДокументРезерва) = Тип("ДокументСсылка.ЗаказПокупателя")
			  И СтрокаТоваров.ДокументРезерва.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
				  ТаблицаДвижений[СтрокаТоваров.НомерСтроки-1].ДоговорКонтрагента = СтрокаТоваров.ДокументРезерва.ДоговорКонтрагента;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	Если СтруктураШапкиДокумента.ОтражатьПоЗатратам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты, "КодОперацииПартииТоваров"); 
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяЗатрат, "СтатьяЗатрат");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.НоменклатурнаяГруппа, "НоменклатурнаяГруппа");  
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеЗатраты, "Подразделение");
	    ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизацииЗатраты, "ПодразделениеОрганизации");
        ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Проект,       "Проект");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Заказ,      "ЗаказСписания");
		
		// Этот документ может делать корректировки по использованию партий 
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,      "КорректироватьПартииНУ");
		
	Иначе  
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоИнвентаризации,"КодОперацииПартииТоваров");
	КонецЕсли; 
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд + 1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;
	КонецЦикла;

	// Если ПУ по складам
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента,  ТаблицаПоТаре);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры//ДвиженияПоРегиструСписанныеТовары

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.Оборудование Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование, "ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,    "ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,    "ДопустимыйСтатус2");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,   "ДопустимыйСтатус3");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВПереработку, "ДопустимыйСтатус4");
	КонецЕсли;
	
	Если НЕ  СтруктураШапкиДокумента.ОтражатьПоЗатратам Тогда  		
	    ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда  
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СчетДТ, "КорСчетБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СубконтоДт1, "КорСубконтоБУ1");
	ТаблицаДвижений.ЗаполнитьЗначения(СубконтоДт2, "КорСубконтоБУ2");
	ТаблицаДвижений.ЗаполнитьЗначения(СубконтоДт3, "КорСубконтоБУ3");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		
		Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;
		Строка.НалоговоеНазначениеНовое = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");

КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СчетДТ, "КорСчетБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СубконтоДт1, "КорСубконтоБУ1");
	ТаблицаДвижений.ЗаполнитьЗначения(СубконтоДт2, "КорСубконтоБУ2");
	ТаблицаДвижений.ЗаполнитьЗначения(СубконтоДт3, "КорСубконтоБУ3");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		
		Строка.НалоговоеНазначениеПоФакту      = СтрокаТЧ.НалоговоеНазначение;
		Строка.НалоговоеНазначениеНовое = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
			
	КонецЦикла;
КонецПроцедуры


Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ"        , "СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ", "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение", 			"НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС", 			"НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности", 	"НалоговоеНазначение.ВидНалоговойДеятельности");
	

КонецПроцедуры

Процедура ДополнитьСтруктуруПолейТабличнойЧастиБланкиРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ",		 			"СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ", 			"ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение", 			"НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС", 			"НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности", 	"НалоговоеНазначение.ВидНалоговойДеятельности");
		
КонецПроцедуры


Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение", 			"НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС", 			"НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности", 	"НалоговоеНазначение.ВидНалоговойДеятельности");

КонецПроцедуры

#Если Клиент Тогда
Процедура ЗаполнитьНалоговыеНазначенияЗапасов() Экспорт 
	
	НалоговыйУчет.ЗаполнитьНалоговыеНазначенияЗапасов(ЭтотОбъект, "Товары", Ложь);

КонецПроцедуры // ЗаполнитьНалоговыеНазначенияЗапасов
#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ИнвентаризацияТоваровНаСкладе = Основание; 		

		ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(Основание);

		ЗаполнитьСчетаУчетаВТабЧасти(Товары,         	  "Товары",         	 Истина);
		ЗаполнитьСчетаУчетаВТабЧасти(БланкиСтрогогоУчета, "БланкиСтрогогоУчета", Истина);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, 	  "ВозвратнаяТара", 	 Истина);
		
		//Заполним состав комиссии
		ПервыйЧленКомиссии = Основание.ПервыйЧленКомиссии;
		ВторойЧленКомиссии = Основание.ВторойЧленКомиссии;
		ТретийЧленКомиссии = Основание.ТретийЧленКомиссии;
		ПредседательКомиссии = Основание.ПредседательКомиссии;

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// При заполнении на основании, происходит распределение между ТЧ БланкиСтрогогоУчета и Товары.
	//  Страница Бланки видна только при виде операции "Бланки строгого учета".
	//  Т.е. может наблюдаться ситуация, когда на скрытой странице содержиться строки ТЧ БланкиСтрогогоУчета.
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета 
	   И БланкиСтрогогоУчета.Количество() Тогда
	    БланкиСтрогогоУчета.Очистить();	
	КонецЕсли; // ВидОперации <> Перечисления.ВидыОперацийСписаниеТоваров.БланкиСтрогогоУчета  
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(БланкиСтрогогоУчета);

	//Смартис Лиманчук начало 10.01.2013
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукцияЧерезПодотчет Тогда
		СчетКт = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
		Если МОЛ.Количество()=0 Тогда
			Сообщить("Не выбран ни один МОЛ!");
			Отказ = Истина;
		ИначеЕсли МОЛ.Итог("Процент")<>100 Тогда
			Сообщить("Сумма процентов по МОЛ не равна 100%!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	//Смартис Лиманчук окончание 10.01.2013
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");

	// Почистим неиспользуемые реквизиты.
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.Оборудование Тогда 

		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл

			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;

			Если СтрокаТаблицы.Качество <> Справочники.Качество.Новый Тогда
				СтрокаТаблицы.Качество = Справочники.Качество.Новый;
			КонецЕсли;

		КонецЦикла;
		
		// тоже для бланков
		Для каждого СтрокаТаблицы Из ЭтотОбъект.БланкиСтрогогоУчета Цикл

			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента(
			ЭтотОбъект,
			"СчетДт",    // ИмяРеквизитаСчетЗатрат
			"СубконтоДт" // ИмяРеквизитаСубконто
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Списание",
			Дата,
			Организация,
			Товары,               	// ТабличнаяЧастьТовары
			ВозвратнаяТара,       	// ТабличнаяЧастьВозвратнаяТара
			Неопределено,           // ТабличнаяЧастьУслуги
			Неопределено,         	// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			БланкиСтрогогоУчета     // ТабличнаяЧастьБланкиСтрогогоУчета
		);
	КонецЕсли;
		
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

	//Коновалова 28022013 +
	Если Не РольДоступна("ПолныеПрава") И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ТОгда
		 Сообщить("Нельзя провести документ без отражения по бух. учету!
		          | Заполните галочку бух. учет.");
		Отказ = Истина;		  
	КонецЕсли;
	//Коновалова 28022013 -
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"           , "ВидСклада",                      "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"     , "ОтражатьВРегламентированномУчете"      , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	Если ОтражатьПоЗатратам Тогда
	     УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "ВедениеУчетаПоПроектам"   , "ВедениеУчетаПоПроектам");
    КонецЕсли; 
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("БСУ" 		                , "Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"      , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ЗаказПартии"               , "ДокументРезерва");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВидСклада"           		, "Ссылка.Склад.ВидСклада");
	
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Бланки строгого учета".
	СтруктураПолей = Новый Структура();
			
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("БСУ" 		                , "Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"      , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЗаказПартии"               , "ДокументРезерва");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВидСклада"           		, "Ссылка.Склад.ВидСклада");
	
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПростыхПолей.Вставить("Цена"				, 0);
	СтруктураПростыхПолей.Вставить("Сумма"				, 0);
	СтруктураПростыхПолей.Вставить("Качество"			, Справочники.Качество.Новый);
	
	
	ДополнитьСтруктуруПолейТабличнойЧастиБланкиРегл(СтруктураПолей);
		
	РезультатЗапросаПоБланкам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "БланкиСтрогогоУчета", СтруктураПолей, СтруктураПростыхПолей);
		
	// Подготовим таблицу бланков для проведения.
	ТаблицаПоБланкам = ПодготовитьТаблицуБланков(РезультатЗапросаПоБланкам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "БланкиСтрогогоУчета".
	ПроверитьЗаполнениеТабличнойЧастиБланки(ТаблицаПоБланкам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ВозвратнаяТара".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"      , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ДоговорКонтрагента"		, "ДокументРезерва.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВидСклада"           		, "Ссылка.Склад.ВидСклада");
	
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей);

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "ВозвратнаяТара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Объединим таблицу товаров и бланков,
	//  чтобы не выполнять аналогичные действия, для каждой таблицы движений. 	
	// Дополним не достающими колонками из таблицы бланков.
	Для каждого КолонкаБланки Из ТаблицаПоБланкам.Колонки Цикл
		
		Если ТаблицаПоТоварам.Колонки.Найти(КолонкаБланки.Имя) = Неопределено Тогда
		
			ТаблицаПоТоварам.Колонки.Добавить(КолонкаБланки.Имя, КолонкаБланки.ТипЗначения);
		
		КонецЕсли; // ТаблицаПоТоварам.Колонки.Найти(КолонкаБланки.Имя) = Неопределено 		
	
	КонецЦикла; //КолонкаТовары
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоБланкам, ТаблицаПоТоварам); 

	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ДвиженияЗатрат = Движения.ЗатратыБухгалтерскийУчет;
		ДвиженияЗатрат.Прочитать();
		
		тзЗатраты = ДвиженияЗатрат.Выгрузить(, "СтатьяЗатрат, Подразделение, Сумма");
		тзЗатраты.Свернуть("СтатьяЗатрат, Подразделение", "Сумма");
		
		Если тзЗатраты.Количество() > 0 Тогда
			тзЗатратыПоПодразделениям = Бюджетирование.ВыполнитьКонтрольПревышенияБюджета(ЭтотОбъект, тзЗатраты, Отказ);
			
			Если НЕ ЭтотОбъект.ПревышенБюджет И тзЗатратыПоПодразделениям <> Неопределено Тогда
				Бюджетирование.СформироватьДвиженияФактическихЗатратПоБюджетам(ЭтотОбъект, тзЗатратыПоПодразделениям);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ПревышенБюджет Тогда
		Бюджетирование.ОчиститьЗаписиРегистраПревышений(ЭтотОбъект);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТаре", ТаблицаПоТоварам, ТаблицаПоТаре));

КонецПроцедуры // ОбработкаПроведения()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
ПревышенБюджет = Ложь;
