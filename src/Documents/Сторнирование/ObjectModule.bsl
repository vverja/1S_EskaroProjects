////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)

	// измерения
	Для Каждого МДОбъект из МетаданныеОбъект.Измерения Цикл
		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
	КонецЦикла;

	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл
		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	КонецЦикла;

	// реквизиты
	Для Каждого МДОбъект из МетаданныеОбъект.Реквизиты Цикл
		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно

// Копирует значения движения по регистру бухгалтерии в строку сторно я
// нового движени для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

	Возврат; // Отложено до появления продуманной методики.

	Если МетаданныеОбъект.Корреспонденция Тогда

		Движение.СчетДт = Строка.СчетДт;
		Движение.СчетКт = Строка.СчетКт;

		ВыборкаСубконто = ПланыВидовХарактеристик[МетаданныеОбъект.ПланСчетов.ВидыСубконто.Имя].Выбрать();
		Пока ВыборкаСубконто.Следующий() Цикл

			Если ВыборкаСубконто.Предопределенный Тогда

				Если Строка.СубконтоДт[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
					Движение.СубконтоДт[ВыборкаСубконто.Ссылка] = Строка.СубконтоДт[ВыборкаСубконто.Ссылка];
				КонецЕсли;
				
				Если Строка.СубконтоКт[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
					Движение.СубконтоКт[ВыборкаСубконто.Ссылка] = Строка.СубконтоКт[ВыборкаСубконто.Ссылка];
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	Иначе

		Движение.Счет   = Строка.Счет;

		ВыборкаСубконто = ПланыВидовХарактеристик[МетаданныеОбъект.ПланСчетов.ВидыСубконто.Имя].Выбрать();
		Пока ВыборкаСубконто.Следующий() Цикл
			Если ВыборкаСубконто.Предопределенный Тогда
				Если Строка.Субконто[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
					Движение.Субконто[ВыборкаСубконто.Ссылка] = Строка.Субконто[ВыборкаСубконто.Ссылка];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// измерения
	Для Каждого МДОбъект из МетаданныеОбъект.Измерения Цикл

		Если МетаданныеОбъект.Корреспонденция Тогда
			Если МДОбъект.ПризнакУчета = Неопределено Тогда
				Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
			Иначе
				Движение[МДОбъект.Имя + "Дт"] = Строка[МДОбъект.Имя + "Дт"];
				Движение[МДОбъект.Имя + "Кт"] = Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;
		Иначе
		КонецЕсли;

	КонецЦикла;

	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл

		Если МДОбъект.ПризнакУчета = Неопределено Тогда
			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
		Иначе

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// реквизиты
	Для Каждого МДОбъект из МетаданныеОбъект.Реквизиты Цикл

		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвиженияСторноПоРегиструБухгалтерии()

// Заполняет набор записей по указанному регистру сторнирующими движениями
//
Процедура ЗаполнитьНаборЗаписей(ЗаполняемыйНаборЗаписей, МетаданныеРегистр) Экспорт

	ЭтоРегистрРасчета     = Ложь;
	ЭтоРегистрБухгалтерии = Ложь;
	ЭтоРегистрНакопления  = Ложь;

	Если ОбщегоНазначения.ПринадлежностьКлассуМетаданных("РегистрыРасчета", МетаданныеРегистр) Тогда
		ЭтоРегистрРасчета     = Истина;
		НаборЗаписей          = РегистрыРасчета[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
		Периодичность		  = МетаданныеРегистр.Периодичность;
		ПериодРегистрации	  = Дата;
		
	ИначеЕсли ОбщегоНазначения.ПринадлежностьКлассуМетаданных("РегистрыБухгалтерии", МетаданныеРегистр) Тогда
		ЭтоРегистрБухгалтерии = Истина;
		НаборЗаписей          = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
	Иначе
		ЭтоРегистрНакопления  = Истина;
		НаборЗаписей          = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
	КонецЕсли;

	НаборЗаписей.Отбор.Регистратор.Значение = СторнируемыйДокумент;
	НаборЗаписей.Прочитать();

	Для Каждого ДвижениеСторнируемое Из НаборЗаписей Цикл

		// реквизиты
		Если ЭтоРегистрРасчета Тогда

			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();

			ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);

			ДвижениеСторно.ПериодРегистрации = Дата;
			ДвижениеСторно.ВидРасчета        = ДвижениеСторнируемое.ВидРасчета;
			ДвижениеСторно.Сторно            = Истина;

			Если МетаданныеРегистр.ПериодДействия Тогда
				ДвижениеСторно.ПериодДействияНачало = ДвижениеСторнируемое.ПериодДействияНачало;
				ДвижениеСторно.ПериодДействияКонец  = ДвижениеСторнируемое.ПериодДействияКонец;
			КонецЕсли;

			Если МетаданныеРегистр.БазовыйПериод Тогда
				ДвижениеСторно.БазовыйПериодНачало = ДвижениеСторнируемое.БазовыйПериодНачало;
				ДвижениеСторно.БазовыйПериодКонец  = ДвижениеСторнируемое.БазовыйПериодКонец;
			КонецЕсли;

		ИначеЕсли ЭтоРегистрБухгалтерии Тогда

			ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			ДвижениеСторно.Период = Дата;

		Иначе

			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();

			ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			
			Если МетаданныеРегистр.Имя = "НДФЛСведенияОДоходах" Тогда
				ДвижениеСторно.Период = ДвижениеСторнируемое.Период;
				ДвижениеСторно.ПериодРегистрации = НачалоМесяца(Дата);
			Иначе
				ДвижениеСторно.Период = Дата;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНаборЗаписей()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

