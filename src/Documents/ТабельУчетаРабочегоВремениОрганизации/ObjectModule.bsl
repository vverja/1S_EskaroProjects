////////////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Предопределенные значения справочника "КлассификаторИспользованияРабочегоВремени"
Перем КлассификаторНочноеВремя, КлассификаторВечернееВремя;

// Значение  "ПоДням" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоДням;

// Значение  "ПоЧасам" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоЧасам;
Перем ВидУчетаВремениПоВечернимЧасам;
Перем ВидУчетаВремениПоНочнымЧасам;

// Массив строк "Первый", "Второй", "Третий" - приставки элементов табличной части документа.
Перем МассивПриставок;

// Значения справочника Классификатор использования рабочего времени. 
Перем КлассификаторЯвка;
Перем КлассификаторНочныеЧасы;
Перем КлассификаторВечерниеЧасы;
Перем КлассификаторПустаяСсылка;
// Индекс записи в наборе записей регистра сведений Графика
Перем ИндексЗаписиЯвка;

// Дата на которую происходит получение записи регистра.
Перем ДатаИндексаЗаписиЯвка;

// Количество часов работы которое проставляется для вида времени ПоДням
Перем ВремяЯвки;

// Структура для поиска строки таблицы значений
Перем СтруктураПоиска;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция предназначена для автозаполнения документа
// если заполнен параметр сотрудники, то в табличную часть будут добавлены
// строки по данным сотрудникам.
Функция Автозаполнение(ПостроительЗапроса = Неопределено, Сотрудники = Неопределено, ТекущаяСтрокаТабличнойЧасти = Неопределено) Экспорт
	
	Если Проведен Тогда
		#Если Клиент Тогда
		Если Вопрос("Заполнить документ можно после отмены его проведения. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет,10,КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		#КонецЕсли
		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	ЗапросАвтоЗаполнения = Новый Запрос;
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросАвтоЗаполнения.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ТрудовойДоговор", Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	ЗапросАвтоЗаполнения.УстановитьПараметр("НачалоМесяца", ДатаНачалаПериода);
	ЗапросАвтоЗаполнения.УстановитьПараметр("КонецМесяца", ДатаОкончанияПериода);
	ЗапросАвтоЗаполнения.УстановитьПараметр("Месяц", ПериодРегистрации);
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоДням", ВидУчетаВремениПоДням);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоЧасам", ВидУчетаВремениПоЧасам);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоВечернимЧасам", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторЯ", Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторВЧ", КлассификаторВечернееВремя);
	ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторНЧ", КлассификаторНочноеВремя);
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ЗапросАвтоЗаполнения.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПустойДокумент", Документы.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка());
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("СверхНормы", Перечисления.ВидыВремени.ОтработанноеСверхНормы);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПустойКлассификатор", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПоВечерним", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПоНочным", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам); 
	
	ВидыВремениУчитываемыеВВыходные = Новый Массив(2);
	ВидыВремениУчитываемыеВВыходные[0] = Перечисления.ВидыВремени.ОтработанноеСверхНормы;
	ВидыВремениУчитываемыеВВыходные[1] = Перечисления.ВидыВремени.ЦелодневноеНеотработанное;
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидыВремениУчитываемыеВВыходные", ВидыВремениУчитываемыеВВыходные);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ПустойГрафик", Справочники.ГрафикиРаботы.ПустаяСсылка());
	
	
	Если ПостроительЗапроса = Неопределено Тогда 
		
		Если Сотрудники = Неопределено Тогда
			СотрудникиТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник КАК Ссылка
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоМесяца, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И (РаботникиОрганизаций.ПодразделениеОрганизации = &Подразделение
			|			ИЛИ &Подразделение = &ПустоеПодразделение)
			|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.Период > &НачалоМесяца
			|	И РаботникиОрганизаций.Период <= &КонецМесяца
			|	И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
			|	И РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И (РаботникиОрганизаций.ПодразделениеОрганизации = &Подразделение
			|			ИЛИ &Подразделение = &ПустоеПодразделение)"; 
			
			ЗапросАвтоЗаполнения.Текст = СотрудникиТекст;
			СписокСотрудников = ЗапросАвтоЗаполнения.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
		Иначе
			СписокСотрудников = Сотрудники;
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Истина);
		КонецЕсли;
	Иначе
		
		ИсходныйТекстПостроителя = ПостроительЗапроса.Текст;
		ТекстЗапросаПоСпискуРаботников = СтрЗаменить(ИсходныйТекстПостроителя,"РАЗРЕШЕННЫЕ","");
		ТекстЗапросаПоСпискуРаботников = Лев(ТекстЗапросаПоСпискуРаботников, Найти(ТекстЗапросаПоСпискуРаботников,"УПОРЯДОЧИТЬ") - 1);
		
		СотрудникиТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокРаботников.Сотрудник КАК Ссылка
		|ИЗ
		|	(" + ТекстЗапросаПоСпискуРаботников + ") КАК СписокРаботников ";
		ПостроительЗапроса.Текст = СотрудникиТекст;
		ПостроительЗапроса.Выполнить();
		СписокСотрудников = ПостроительЗапроса.Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
	КонецЕсли;
	ЗапросАвтоЗаполнения.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	ЗапросАвтоЗаполнения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ГодПериода = Формат(Год(ПериодРегистрации), "ЧГ=4");
	МесяцПериода = Месяц(ПериодРегистрации);
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДатаТабеля
	|	
	|ПОМЕСТИТЬ ВТДатыТабеля 
	|	ИЗ (
	|	ВЫБРАТЬ
	|	ДАТАВРЕМЯ(" + ГодПериода + ", " + МесяцПериода + " , " + День(ДатаНачалаПериода) + ") КАК ДатаТабеля
	|	";           
	Для НомерДня = День(ДатаНачалаПериода) + 1 По День(ДатаОкончанияПериода) Цикл
		ТекстЗапроса = ТекстЗапроса + 
		"ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|  ДАТАВРЕМЯ(" + ГодПериода + ", " + МесяцПериода + " ," + НомерДня + ")
		|	";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + ") КАК ДатыТабеля";
	ЗапросАвтоЗаполнения.Текст = ТекстЗапроса;
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	|	ДатыТабеля.ДатаТабеля,
	|	Начисления.Сотрудник,
	|	Начисления.Назначение,
	|	Начисления.ГрафикРаботы,
	|	Начисления.ВидРасчета,
	|	Начисления.ВидУчетаВремени,
	|	Начисления.ВидРасчета.ВидВремени КАК ВидВремени,
	|	Начисления.ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец,
	|	ВЫБОР КОГДА (Начисления.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)) ТОГДА
	|		ВЫБОР КОГДА ДатыТабеля.ДатаТабеля = Начисления.ПериодДействияНачало ТОГДА
	|			Начисления.ОтработаноЧасов
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	ИНАЧЕ 
	|		NULL
	|	КОНЕЦ КАК ВремяЗаДень
	|ПОМЕСТИТЬ ВТОсновныеНачисления
	|ИЗ 
	|	ВТДатыТабеля КАК ДатыТабеля
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Назначение В (&СписокСотрудников)) КАК Начисления
	|ПО
	|	ДатыТабеля.ДатаТабеля МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец
	|	И НЕ Начисления.Сторно
	|	И Начисления.ПериодДействия = &Месяц
	|	И Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> &ПустойКлассификатор
	|	И НЕ Начисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Назначение В (&СписокСотрудников)) КАК СторноНачисления
	|ПО
	|	ДатыТабеля.ДатаТабеля МЕЖДУ СторноНачисления.ПериодДействияНачало И СторноНачисления.ПериодДействияКонец
	|	И СторноНачисления.Сторно
	|	И СторноНачисления.Сотрудник = Начисления.Сотрудник
	|	И СторноНачисления.ВидРасчета = Начисления.ВидРасчета
	|	И СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации
	|	И СторноНачисления.ПериодДействия = &Месяц
	|	И СторноНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> &ПустойКлассификатор
	|	И НЕ СторноНачисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
	|ГДЕ
	|	СторноНачисления.Сотрудник Есть NULL";
	
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	                             |	СостояниеРаботников.Сотрудник КАК Сотрудник,
	                             |	СостояниеРаботников.Период КАК Период,
	                             |	СостояниеРаботников.Состояние,
	                             |	СостояниеРаботников.ПериодЗавершения,
	                             |	СостояниеРаботников.СостояниеЗавершения
	                             |ПОМЕСТИТЬ ВТСостояниеРаботниковСрез
	                             |ИЗ
	                             |	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(
	                             |			&НачалоМесяца,
	                             |			Сотрудник В
	                             |				(&СписокСотрудников)) КАК СостояниеРаботников
	                             |
	                             |ИНДЕКСИРОВАТЬ ПО
	                             |	Сотрудник,
	                             |	Период";
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	                             |	СостояниеРаботников.Сотрудник КАК Сотрудник,
	                             |	&НачалоМесяца КАК Период,
	                             |	ВЫБОР
	                             |		КОГДА СостояниеРаботников.ПериодЗавершения <= &НачалоМесяца
	                             |				И СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                             |			ТОГДА СостояниеРаботников.СостояниеЗавершения
	                             |		ИНАЧЕ СостояниеРаботников.Состояние
	                             |	КОНЕЦ КАК Состояние
	                             |ПОМЕСТИТЬ ВТСостояниеРаботников
	                             |ИЗ
	                             |	ВТСостояниеРаботниковСрез КАК СостояниеРаботников
	                             |
	                             |ОБЪЕДИНИТЬ ВСЕ
	                             |
	                             |ВЫБРАТЬ
	                             |	СостояниеРаботников.Сотрудник,
	                             |	СостояниеРаботников.ПериодЗавершения,
	                             |	СостояниеРаботников.СостояниеЗавершения
	                             |ИЗ
	                             |	ВТСостояниеРаботниковСрез КАК СостояниеРаботников
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковПроверка
	                             |		ПО (СостояниеРаботниковПроверка.Сотрудник = СостояниеРаботников.Сотрудник)
	                             |			И (СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения)
	                             |			И (СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период)
	                             |ГДЕ
	                             |	СостояниеРаботников.ПериодЗавершения >= &НачалоМесяца
	                             |	И СостояниеРаботников.ПериодЗавершения <= &КонецМесяца
	                             |	И СостояниеРаботниковПроверка.Сотрудник ЕСТЬ NULL 
	                             |
	                             |ОБЪЕДИНИТЬ ВСЕ
	                             |
	                             |ВЫБРАТЬ
	                             |	СостояниеРаботников.Сотрудник,
	                             |	СостояниеРаботников.Период,
	                             |	СостояниеРаботников.Состояние
	                             |ИЗ
	                             |	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	                             |ГДЕ
	                             |	СостояниеРаботников.Период > &НачалоМесяца
	                             |	И СостояниеРаботников.Период <= &КонецМесяца
								 |  И СостояниеРаботников.Сотрудник В(&СписокСотрудников)
	                             |
	                             |ОБЪЕДИНИТЬ ВСЕ
	                             |
	                             |ВЫБРАТЬ
	                             |	СостояниеРаботников.Сотрудник,
	                             |	СостояниеРаботников.ПериодЗавершения,
	                             |	СостояниеРаботников.СостояниеЗавершения
	                             |ИЗ
	                             |	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК СостояниеРаботниковПроверка
	                             |		ПО (СостояниеРаботниковПроверка.Сотрудник = СостояниеРаботников.Сотрудник)
	                             |			И (СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения)
	                             |			И (СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период)
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ПроверкаПерекрытияПериодовСостоянияРаботников
	                             |		ПО (ПроверкаПерекрытияПериодовСостоянияРаботников.Сотрудник = СостояниеРаботников.Сотрудник)
	                             |			И ((НЕ(ПроверкаПерекрытияПериодовСостоянияРаботников.Регистратор = СостояниеРаботников.Регистратор
	                             |					И ПроверкаПерекрытияПериодовСостоянияРаботников.НомерСтроки = СостояниеРаботников.НомерСтроки)))
	                             |			И (ПроверкаПерекрытияПериодовСостоянияРаботников.Период = СостояниеРаботников.ПериодЗавершения)
	                             |ГДЕ
	                             |	СостояниеРаботников.Период > &НачалоМесяца
	                             |	И СостояниеРаботников.Период <= &КонецМесяца
	                             |	И СостояниеРаботников.ПериодЗавершения <= &КонецМесяца
	                             |	И СостояниеРаботников.ПериодЗавершения > &НачалоМесяца
	                             |	И СостояниеРаботниковПроверка.Сотрудник ЕСТЬ NULL 
	                             |	И ПроверкаПерекрытияПериодовСостоянияРаботников.Сотрудник ЕСТЬ NULL
								 |  И СостояниеРаботников.Сотрудник В(&СписокСотрудников)
	                             |
	                             |ИНДЕКСИРОВАТЬ ПО
	                             |	Сотрудник,
	                             |	Период";
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	                             |	Основной.Сотрудник КАК Сотрудник,
								 |	ВЫБОР
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание)
								 |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВынужденныйПрогул)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогул)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ГосударственныеОбязанности)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеотработанноеВремяПоЗаконодательству)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогул)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДругиеНеявки)
							     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)
							     |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Простой)
							     |	КОНЕЦ КАК ВидВремени,
                                 |	Основной.Период КАК ПериодНачало,
	                             |	ВЫБОР
	                             |		КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL 
	                             |			ТОГДА &КонецМесяца
	                             |		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1)
	                             |	КОНЕЦ КАК ПериодКонец
	                             |ПОМЕСТИТЬ ВТСостояниеСотрудников
	                             |ИЗ
	                             |	ВТСостояниеРаботников КАК Основной
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеРаботников КАК Вспомогательный
	                             |		ПО (Вспомогательный.Сотрудник = Основной.Сотрудник)
	                             |			И (Вспомогательный.Период > Основной.Период)
	                             |
	                             |СГРУППИРОВАТЬ ПО
	                             |	Основной.Сотрудник,
	                             |	Основной.Состояние,
	                             |	Основной.Период
	                             |
	                             |ИНДЕКСИРОВАТЬ ПО
	                             |	Сотрудник,
	                             |	ПериодНачало
								 |";
	ЗапросАвтоЗаполнения.Выполнить();

	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		
		// Заполнение за целый период.
		ЗапросАвтоЗаполненияТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	ЕСТЬNULL(ПосчитанноеВремя.Дней, 0) КАК Дней,
		|	ЕСТЬNULL(ПосчитанноеВремя.Часов, 0) КАК Часов,
		|	ЕСТЬNULL(ПосчитанноеВремя.ЧасовВечерних, 0) КАК ЧасовВечерних,
		|	ЕСТЬNULL(ПосчитанноеВремя.ЧасовНочных, 0) КАК ЧасовНочных,
		|	ПосчитанноеВремя.ВидВремени КАК ВидВремени
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|			ЕСТЬNULL(СводныеИндивидуальныеГрафики.Дней, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоДням) КАК Дней,
		|			ЕСТЬNULL(СводныеИндивидуальныеГрафики.Часов, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоЧасам) КАК Часов,
		|			ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовВечерних, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоВечерним) КАК ЧасовВечерних,
		|			ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовНочных, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоНочным) КАК ЧасовНочных,
		|			ПосчитаннаяНормаВремени.ВидРасчета КАК ВидВремени
		|		ИЗ
		|			Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ДниСотрудников.Сотрудник КАК Сотрудник,
		|					СУММА(ВЫБОР
		|							КОГДА ДневныеНеявки.ВидВремени = 1
		|								ТОГДА 0
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = &ПоЧасам
		|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ДополнительноеЗначение, ОбщиеГрафики.ДополнительноеЗначение)
		|						КОНЕЦ) КАК ОсновноеЗначениеПоДням,
		|					СУММА(ВЫБОР
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = &ПоЧасам
		|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
		|						КОНЕЦ - ЕСТЬNULL(ДневныеНеявки.Часов, 0)) КАК ОсновноеЗначениеПоЧасам,
		|					СУММА(ВЫБОР
		|							КОГДА (НЕ ДневныеНеявки.Сотрудник ЕСТЬ NULL )
		|								ТОГДА 0
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = &ПоВечерним
		|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
		|						КОНЕЦ) КАК ОсновноеЗначениеПоВечерним,
		|					СУММА(ВЫБОР
		|							КОГДА (НЕ ДневныеНеявки.Сотрудник ЕСТЬ NULL )
		|								ТОГДА 0
		|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = &ПоНочным
		|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
		|						КОНЕЦ) КАК ОсновноеЗначениеПоНочным,
		|					КОЛИЧЕСТВО(ВведенныеТабеля.ГрафикРаботы) КАК ВведенныеТабеля,
		|					ДневныеНеявки.ВидРасчета КАК ВидРасчета,
		|					ЕСТЬNULL(ДневныеНеявки.ДействуетВесьПериод, ИСТИНА) КАК ДействуетВесьПериод
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ДатыПериода.ДатаТабеля КАК Дата,
		|						РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|						МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаИзменения
		|					ИЗ
		|						ВТДатыТабеля КАК ДатыПериода
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|							ПО (РаботникиОрганизаций.Сотрудник В (&СписокСотрудников))
		|								И РаботникиОрганизаций.Период <= ДатыПериода.ДатаТабеля
		|					
		|					СГРУППИРОВАТЬ ПО
		|						РаботникиОрганизаций.Сотрудник,
		|						ДатыПериода.ДатаТабеля) КАК ДниСотрудников
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|						ПО РаботникиОрганизаций.Сотрудник = ДниСотрудников.Сотрудник
		|							И РаботникиОрганизаций.Период = ДниСотрудников.ДатаИзменения
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийУвольнения
		|						ПО (РаботникиОрганизацийУвольнения.Сотрудник = ДниСотрудников.Сотрудник)
		|							И (РаботникиОрганизацийУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ВведенныеТабеля
		|						ПО ВведенныеТабеля.ГрафикРаботы = ДниСотрудников.Сотрудник
		|							И ((НЕ ВведенныеТабеля.План))
		|							И (ВведенныеТабеля.Документ <> &ДокументСсылка)
		|							И (ВведенныеТабеля.Документ <> &ПустойДокумент)
		|							И ВведенныеТабеля.Дата = ДниСотрудников.Дата
		|							И (ВведенныеТабеля.ВидУчетаВремени = &ПоЧасам)
		|							И (ВведенныеТабеля.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации
		|							   ИЛИ ВведенныеТабеля.Документ ССЫЛКА Документ.СдельныйНаряд)
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ИндивидуальныеГрафики
		|						ПО ИндивидуальныеГрафики.ГрафикРаботы = ДниСотрудников.Сотрудник
		|							И (ИндивидуальныеГрафики.План)
		|							И ИндивидуальныеГрафики.Дата = ДниСотрудников.Дата
		|							И (ИндивидуальныеГрафики.ВидУчетаВремени В (&ПоЧасам, &ПоВечерним, &ПоНочным))
		|							И (ИндивидуальныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ОбщиеГрафики
		|						ПО (ОбщиеГрафики.ГрафикРаботы = РаботникиОрганизаций.ГрафикРаботы)
		|							И (ОбщиеГрафики.План)
		|							И ОбщиеГрафики.Дата = ДниСотрудников.Дата
		|							И (ОбщиеГрафики.ВидУчетаВремени В (&ПоЧасам, &ПоВечерним, &ПоНочным))
		|							И (ИндивидуальныеГрафики.ГрафикРаботы ЕСТЬ NULL)
		|						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							ДневныеНеявки.Сотрудник КАК Сотрудник,
		|							ДневныеНеявки.ПериодДействияНачало КАК ПериодДействияНачало,
		|							ДневныеНеявки.ПериодДействияКонец КАК ПериодДействияКонец,
		|							ДневныеНеявки.ДатаТабеля,
		|							ВЫБОР
		|								КОГДА ВнутрисменноеВремя.ВидВремени = 0
		|									ТОГДА NULL
		|								ИНАЧЕ ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
		|							КОНЕЦ КАК ВидРасчета,
		|							ВнутрисменноеВремя.Часов КАК Часов,
		|							ВнутрисменноеВремя.ВидВремени КАК ВидВремени,
		|							ВЫБОР
		|								КОГДА ВнутрисменноеВремя.ВидВремени = 0
		|									ТОГДА NULL
		|								КОГДА ДневныеНеявки.ПериодДействияНачало = &НачалоМесяца
		|										И НАЧАЛОПЕРИОДА(ДневныеНеявки.ПериодДействияКонец, ДЕНЬ) = &КонецМесяца
		|									ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ КАК ДействуетВесьПериод
		|						ИЗ
		|							ВТОсновныеНачисления КАК ДневныеНеявки
		|								ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|									ВнутрисменноеВремя.Сотрудник КАК Сотрудник,
		|									ВнутрисменноеВремя.Период КАК Период,
		|									ВнутрисменноеВремя.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
		|									ВнутрисменноеВремя.Часов КАК Часов,
		|									0 КАК ВидВремени
		|								ИЗ
		|									РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменноеВремя
		|								ГДЕ
		|									ВнутрисменноеВремя.Сотрудник В(&СписокСотрудников)
		|									И НАЧАЛОПЕРИОДА(ВнутрисменноеВремя.Период, МЕСЯЦ) = &Месяц
		|								
		|								ОБЪЕДИНИТЬ ВСЕ
		|								
		|								ВЫБРАТЬ
		|									ВнутрисменноеВремя.Сотрудник,
		|									ВнутрисменноеВремя.Период,
		|									ВнутрисменноеВремя.ВидИспользованияРабочегоВремени,
		|									ВнутрисменноеВремя.Часов,
		|									1
		|								ИЗ
		|									РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменноеВремя
		|								ГДЕ
		|									ВнутрисменноеВремя.Сотрудник В(&СписокСотрудников)
		|									И НАЧАЛОПЕРИОДА(ВнутрисменноеВремя.Период, МЕСЯЦ) = &Месяц) КАК ВнутрисменноеВремя
		|								ПО ВнутрисменноеВремя.Сотрудник = ДневныеНеявки.Сотрудник
		|									И (ВнутрисменноеВремя.Период = ДневныеНеявки.ДатаТабеля)
		|									И ВнутрисменноеВремя.ВидИспользованияРабочегоВремени = ДневныеНеявки.ВидРасчета
		|						) КАК ДневныеНеявки
		|						ПО ДневныеНеявки.Сотрудник = ДниСотрудников.Сотрудник
		|							И (ДниСотрудников.Дата = ДневныеНеявки.ДатаТабеля)
		|				ГДЕ	(РаботникиОрганизацийУвольнения.Период ЕСТЬ NULL 
		|							ИЛИ РаботникиОрганизацийУвольнения.Период > ДниСотрудников.Дата)
    	|				
		|				СГРУППИРОВАТЬ ПО
		|					ДниСотрудников.Сотрудник,
		|					ДневныеНеявки.ВидРасчета,
		|					ДневныеНеявки.ДействуетВесьПериод) КАК ПосчитаннаяНормаВремени
		|				ПО ПосчитаннаяНормаВремени.Сотрудник = СотрудникиОрганизаций.Ссылка
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|				ПО СводныеИндивидуальныеГрафики.Сотрудник = СотрудникиОрганизаций.Ссылка
		|					И (СводныеИндивидуальныеГрафики.Месяц = &Месяц)
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабеля
		|				ПО СводныеТабеля.Сотрудник = СотрудникиОрганизаций.Ссылка
		|					И (СводныеТабеля.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации
		|					   ИЛИ СводныеТабеля.Регистратор ССЫЛКА Документ.СдельныйНаряд)
		|					И (СводныеТабеля.Регистратор <> &ДокументСсылка)
		|					И (СводныеТабеля.Период = &Месяц)
		|		ГДЕ
		|			СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)
		|			И ПосчитаннаяНормаВремени.ВведенныеТабеля = 0
		|			И СводныеТабеля.Сотрудник ЕСТЬ NULL 
		|			И (СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ NULL 
		|					ИЛИ ПосчитаннаяНормаВремени.ДействуетВесьПериод)) КАК ПосчитанноеВремя
		|		ПО ПосчитанноеВремя.Сотрудник = СотрудникиОрганизаций.Ссылка
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)
		|	И (&ВключатьВРезультатПустыеЗаписи
		|			ИЛИ (НЕ ПосчитанноеВремя.Часов ЕСТЬ NULL ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ВидВремени";
	Иначе
		// Заполнение с разбивкой по дням.
		
		ЗапросАвтоЗаполнения.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |   ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
        |   ГрафикиРаботыПоВидамВремени.Сотрудник,
        |   ГрафикиРаботыПоВидамВремени.Месяц,
        |   ГрафикиРаботыПоВидамВремени.Дата,
        |   ГрафикиРаботыПоВидамВремени.План,
        |   ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
        |   ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
        |   ГрафикиРаботыПоВидамВремени.Документ
        |ПОМЕСТИТЬ ВТГрафикиРаботыПоВидамВремени
        |ИЗ
        |   (ВЫБРАТЬ
        |       РаботникиОрганизацийСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
        |   ИЗ
        |       РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоМесяца, Сотрудник В (&СписокСотрудников)) КАК РаботникиОрганизацийСрезПоследних
        |   ГДЕ
        |       РаботникиОрганизацийСрезПоследних.ГрафикРаботы <> &ПустойГрафик
        |   
        |   ОБЪЕДИНИТЬ ВСЕ
        |   
        |   ВЫБРАТЬ
        |       РаботникиОрганизаций.ГрафикРаботы
        |   ИЗ
        |       РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
        |   ГДЕ
        |       РаботникиОрганизаций.Сотрудник В(&СписокСотрудников)
        |       И РаботникиОрганизаций.Период > &НачалоМесяца
        |       И РаботникиОрганизаций.Период <= &КонецМесяца
        |       И РаботникиОрганизаций.ГрафикРаботы <> &ПустойГрафик
        |   
        |   ОБЪЕДИНИТЬ ВСЕ
        |   
        |   ВЫБРАТЬ
        |       ВыбранныеСотрудники.Ссылка
        |   ИЗ
        |       Справочник.СотрудникиОрганизаций КАК ВыбранныеСотрудники
        |   ГДЕ
        |       ВыбранныеСотрудники.Ссылка В(&СписокСотрудников)) КАК ГрафикиРаботы
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
        |       ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы
        |               ИЛИ ГрафикиРаботыПоВидамВремени.Сотрудник = ГрафикиРаботы.ГрафикРаботы)
        |           И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
        |           И (ГрафикиРаботыПоВидамВремени.Документ <> &ПустойДокумент)
        |           И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
        |           И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
        |           И (НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL)
        |ГДЕ
        |   НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL";
		ЗапросАвтоЗаполнения.Выполнить();
		
		ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТОсновныеНачисления.ДатаТабеля,
		|	ВТОсновныеНачисления.Сотрудник,
		|	ВТОсновныеНачисления.Назначение,
		|	ВТОсновныеНачисления.ГрафикРаботы,
		|	ВТОсновныеНачисления.ВидРасчета,
		|	ВТОсновныеНачисления.ВидВремени,
		|	ВТОсновныеНачисления.ПериодДействияНачало,
		|	ВТОсновныеНачисления.ПериодДействияКонец,
		|	ВТОсновныеНачисления.ВремяЗаДень
		|ПОМЕСТИТЬ ВТОтредактированныеНачисления
		|ИЗ
		|	ВТОсновныеНачисления
		|	
		|ОБЪЕДИНИТЬ 
		|
		|
		|ВЫБРАТЬ
		|	ВТОсновныеНачисления.ДатаТабеля,
		|	ВТОсновныеНачисления.Сотрудник,
		|	ВТОсновныеНачисления.Назначение,
		|	ВТОсновныеНачисления.ГрафикРаботы,
		|	""ПланируемаяЯвка"", 
		|	NULL,
		|	ВТОсновныеНачисления.ПериодДействияНачало,
		|	ВТОсновныеНачисления.ПериодДействияКонец,
		|	ВТОсновныеНачисления.ВремяЗаДень
		|ИЗ
		|	ВТОсновныеНачисления
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТОсновныеНачисления КАК Явки
		|ПО
		|	Явки.ДатаТабеля = ВТОсновныеНачисления.ДатаТабеля
		|	И Явки.Сотрудник = ВТОсновныеНачисления.Сотрудник
		|	И Явки.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы
		|	И Явки.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|ПО
		|	ГрафикиРаботы.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы
		|	И ГрафикиРаботы.Дата = ВТОсновныеНачисления.ДатаТабеля
		|	И ГрафикиРаботы.ВидУчетаВремени = ВТОсновныеНачисления.ВидУчетаВремени
		|ГДЕ
		|	Явки.Сотрудник ЕСТЬ NULL
		|	И ГрафикиРаботы.ОсновноеЗначение > 0 
		|	И ВТОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)";
		ЗапросАвтоЗаполнения.Выполнить();
	
		
		ЗапросАвтоЗаполненияТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка Как Сотрудник,
		|	ДниСотрудников.Дата,
		|	День(ДниСотрудников.Дата) Как День,
		|	ДниСотрудников.ВидВремени Как БукваВидаВремени,
		|	ДниСотрудников.ОсновноеЗначение,
		|	ВЫБОР 
		|		КОГДА ДниСотрудников.ВидВремени = &КлассификаторЯ Тогда 1
		|		КОГДА ДниСотрудников.ВидВремени = &КлассификаторВЧ Тогда 2
		|		КОГДА ДниСотрудников.ВидВремени = &КлассификаторНЧ Тогда 3
		|	ИНАЧЕ 4
		|	КОНЕЦ КАК ПорядокСортировки
		|	
		|	ИЗ
		|		Справочник.СотрудникиОрганизаций Как Сотрудники
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|	ДниСотрудников.Сотрудник,
		|	ДниСотрудников.Дата,
		|	ВЫБОР
		|		КОГДА (НЕ ДневныеНеявки.ВидРасчета ЕСТЬ NULL И ДневныеНеявки.ВидРасчета <> ""ПланируемаяЯвка"")
		|				И (ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|					ИЛИ ДневныеНеявки.ВидРасчета.ВидВремени В (&ВидыВремениУчитываемыеВВыходные))
		|			ТОГДА ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
		|		КОГДА НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL ТОГДА
		|					ВЫБОР 
		|						КОГДА ИндивидуальныеГрафики.ОсновноеЗначение = 0 
		|							ИЛИ ОбщиеГрафики.ОсновноеЗначение = 0 ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|						КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) В  (&ПоВечерним, &ПоНочным)
		|							ТОГДА NULL
		|						ИНАЧЕ ВТСостояниеСотрудников.ВидВремени
		|					КОНЕЦ
		|		КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = &ПоЧасам
		|						ТОГДА &КлассификаторЯ
		|					КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = &ПоВечерним
		|						ТОГДА &КлассификаторВЧ
		|					КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = &ПоНочным
		|						ТОГДА &КлассификаторНЧ
		|				КОНЕЦ
		|	КОНЕЦ КАК ВидВремени,
		|	ВЫБОР
		|		КОГДА НЕ ДневныеНеявки.ВремяЗаДень ЕСТЬ NULL 
		|			И ДневныеНеявки.ВремяЗаДень > 0
		|			ТОГДА ДневныеНеявки.ВремяЗаДень
		|		КОГДА (НЕ ДневныеНеявки.ВидРасчета ЕСТЬ NULL )
		|				И (ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|					ИЛИ ДневныеНеявки.ВидРасчета.ВидВремени В (&ВидыВремениУчитываемыеВВыходные))
		|			ТОГДА 
		|				ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ЕСТЬNULL(ОбщиеГрафики.ОсновноеЗначение, 0))
		|		КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
		|			ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
		|	КОНЕЦ КАК ОсновноеЗначение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДатыПериода.ДатаТабеля КАК Дата,
		|		РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаИзменения
		|	ИЗ
		|		ВТДатыТабеля КАК ДатыПериода
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО (РаботникиОрганизаций.Сотрудник В (&СписокСотрудников))
		|				И РаботникиОрганизаций.Период <= ДатыПериода.ДатаТабеля
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОрганизаций.Сотрудник,
		|		ДатыПериода.ДатаТабеля) КАК ДниСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО РаботникиОрганизаций.Сотрудник = ДниСотрудников.Сотрудник
		|			И РаботникиОрганизаций.Период = ДниСотрудников.ДатаИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийУвольнения
		|			ПО ДниСотрудников.Сотрудник = РаботникиОрганизацийУвольнения.Сотрудник
		|			И (РаботникиОрганизацийУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ВведенныеТабеля
		|		ПО ВведенныеТабеля.Сотрудник = ДниСотрудников.Сотрудник
		|			И ((НЕ ВведенныеТабеля.План))
		|			И ВведенныеТабеля.Дата = ДниСотрудников.Дата
		|			И (ВведенныеТабеля.ВидУчетаВремени = &ПоЧасам)
		|			И (ВведенныеТабеля.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации
		|			   ИЛИ ВведенныеТабеля.Документ ССЫЛКА Документ.СдельныйНаряд)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|		ПО СводныеИндивидуальныеГрафики.Сотрудник = ДниСотрудников.Сотрудник
		|			И (СводныеИндивидуальныеГрафики.Месяц = &Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабеля
		|		ПО СводныеТабеля.Сотрудник = ДниСотрудников.Сотрудник
		|			И (СводныеТабеля.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации
		|			   ИЛИ СводныеТабеля.Регистратор ССЫЛКА Документ.СдельныйНаряд)
		|			И (СводныеТабеля.ВЦеломЗаПериод)
        |			И (СводныеТабеля.Регистратор <> &ДокументСсылка)
		|			И (СводныеТабеля.Период = &Месяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			ВТОтредактированныеНачисления КАК ДневныеНеявки
		|		ПО ДневныеНеявки.Назначение = ДниСотрудников.Сотрудник
		|			И (ДниСотрудников.Дата = ДневныеНеявки.ДатаТабеля)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеСотрудников
		|		ПО ВТСостояниеСотрудников.Сотрудник = ДниСотрудников.Сотрудник
		|			И ДниСотрудников.Дата МЕЖДУ ВТСостояниеСотрудников.ПериодНачало И ВТСостояниеСотрудников.ПериодКонец
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныеГрафики
		|		ПО ИндивидуальныеГрафики.ГрафикРаботы = ДниСотрудников.Сотрудник
		|			И (ИндивидуальныеГрафики.План)
		|			И ИндивидуальныеГрафики.Дата = ДниСотрудников.Дата
		|			И (ИндивидуальныеГрафики.ВидУчетаВремени = &ПоЧасам
		|				ИЛИ ИндивидуальныеГрафики.ВидУчетаВремени В (&ПоВечерним, &ПоНочным)
		|					И ИндивидуальныеГрафики.ОсновноеЗначение > 0)
		|			И (ИндивидуальныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
		|			И (ДневныеНеявки.ВидРасчета ЕСТЬ NULL ИЛИ ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
		|				ИЛИ ИндивидуальныеГрафики.ВидУчетаВремени = &ПоЧасам)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ОбщиеГрафики
		|		ПО ОбщиеГрафики.ГрафикРаботы = РаботникиОрганизаций.ГрафикРаботы
		|			И (ОбщиеГрафики.План)
		|			И ОбщиеГрафики.Дата = ДниСотрудников.Дата
		|			И (ОбщиеГрафики.ВидУчетаВремени = &ПоЧасам
		|				ИЛИ ОбщиеГрафики.ВидУчетаВремени В (&ПоВечерним, &ПоНочным)
		|					И ОбщиеГрафики.ОсновноеЗначение > 0)
		|			И (ИндивидуальныеГрафики.ГрафикРаботы ЕСТЬ NULL )
		|			И (ДневныеНеявки.ВидРасчета ЕСТЬ NULL ИЛИ ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""	
		|				ИЛИ ОбщиеГрафики.ВидУчетаВремени = &ПоЧасам)
		|ГДЕ
		|	(РаботникиОрганизацийУвольнения.Период ЕСТЬ NULL 
		|	ИЛИ РаботникиОрганизацийУвольнения.Период > ДниСотрудников.Дата)
		|	И РаботникиОрганизаций.ГрафикРаботы <> &ПустойГрафик
		|	И СводныеТабеля.НомерСтроки ЕСТЬ NULL 
		|	И ВведенныеТабеля.ГрафикРаботы ЕСТЬ NULL 
		|	И СводныеИндивидуальныеГрафики.НомерСтроки ЕСТЬ NULL 
		|	И ((НЕ ДневныеНеявки.ВидРасчета ЕСТЬ NULL )
		|			ИЛИ ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
		|				И ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0)
		|	) КАК ДниСотрудников
		|	ПО НЕ ДниСотрудников.ВидВремени Есть NULL
		|		И ДниСотрудников.Сотрудник = Сотрудники.Ссылка
		|	ГДЕ
		|		Сотрудники.Ссылка В(&СписокСотрудников)		
		|		И (&ВключатьВРезультатПустыеЗаписи ИЛИ НЕ (ДниСотрудников.ВидВремени Есть NULL))
		|	УПОРЯДОЧИТЬ ПО
		|		Сотрудник,День, ПорядокСортировки";
		
	КонецЕсли;
	
	
	ЗапросАвтоЗаполнения.Текст = ЗапросАвтоЗаполненияТекст;
	РезультатЗапроса = ЗапросАвтоЗаполнения.Выполнить();
	
	Если Сотрудники = Неопределено Тогда
		ОтработанноеВремя.Очистить();
		ОтработанноеВремяВЦеломЗаПериод.Очистить();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
			// по дням.
			
			ВведенныеТабеляПоДнямПоСотруднику = Новый Соответствие;
			Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
				
				ВведенныеТабеляПоДнямПоСотруднику.Очистить();
				Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаРасшифровкиПоДням = ОтработанноеВремя.Добавить();
				Иначе
					СтрокаРасшифровкиПоДням = ТекущаяСтрокаТабличнойЧасти;
					Для ИндексДня = 1 По 31 Цикл
						ТекущаяСтрокаТабличнойЧасти["ПервыйВидВремени" + Строка(ИндексДня)] = КлассификаторПустаяСсылка;
						ТекущаяСтрокаТабличнойЧасти["ВторойВидВремени" + Строка(ИндексДня)] = КлассификаторПустаяСсылка;
						ТекущаяСтрокаТабличнойЧасти["ТретийВидВремени" + Строка(ИндексДня)] = КлассификаторПустаяСсылка;
						ТекущаяСтрокаТабличнойЧасти["ПервыйЧасов" + Строка(ИндексДня)] = 0;
						ТекущаяСтрокаТабличнойЧасти["ВторойЧасов" + Строка(ИндексДня)] = 0;
						ТекущаяСтрокаТабличнойЧасти["ТретийЧасов" + Строка(ИндексДня)] = 0;
					КонецЦикла;
				КонецЕсли;
				СтрокаРасшифровкиПоДням.Сотрудник = ?(ЗначениеЗаполнено(Выборка.Сотрудник.ОсновноеНазначение),Выборка.Сотрудник.ОсновноеНазначение,Выборка.Сотрудник);
				СтрокаРасшифровкиПоДням.Назначение = Выборка.Сотрудник;
				Если Выборка.День <> NULL Тогда
					
					Пока Выборка.СледующийПоЗначениюПоля("День") Цикл
						
						ИндексЯчейкиВТаблице = Выборка.День;
						ИндексМассиваПриставок = 0;
						Пока Выборка.Следующий() Цикл 
							
							Если ИндексМассиваПриставок > 2 Тогда
								// На данный момент мы можем вводить только 3 вида времени в один день
								Прервать;
							КонецЕсли;
							НазваниеЯчейкиВБазе = МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+Строка(ИндексЯчейкиВТаблице);
							СтрокаРасшифровкиПоДням[НазваниеЯчейкиВБазе] = Выборка.БукваВидаВремени;
							НазваниеЯчейкиВБазе = МассивПриставок[ИндексМассиваПриставок]+"Часов"+Строка(ИндексЯчейкиВТаблице);
							СтрокаРасшифровкиПоДням[НазваниеЯчейкиВБазе] = Выборка.ОсновноеЗначение;
							
							ИндексМассиваПриставок = ИндексМассиваПриставок + 1;
							
							
							
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// в целом за период
			
			Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
				КоличествоЗаписей = 1;
				Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаТабличнойЧасти = ОтработанноеВремяВЦеломЗаПериод.Добавить();
				Иначе
					СтрокаТабличнойЧасти = ТекущаяСтрокаТабличнойЧасти;
				КонецЕсли;
				СтрокаТабличнойЧасти.Сотрудник = ?(ЗначениеЗаполнено(Выборка.Сотрудник.ОсновноеНазначение),Выборка.Сотрудник.ОсновноеНазначение,Выборка.Сотрудник);
				СтрокаТабличнойЧасти.Назначение = Выборка.Сотрудник;
			Пока Выборка.Следующий() Цикл
					Если Выборка.ВидВремени = NULL Тогда
						
						Если КоличествоЗаписей < 7 Тогда
							СтрокаТабличнойЧасти["ВидВремени" + Строка(КоличествоЗаписей)] = КлассификаторЯвка;
							СтрокаТабличнойЧасти["Дней" + Строка(КоличествоЗаписей)] = Выборка.Дней;
							СтрокаТабличнойЧасти["Часов" + Строка(КоличествоЗаписей)] = Выборка.Часов;
							КоличествоЗаписей = КоличествоЗаписей + 1;
						КонецЕсли;
						
						Если КоличествоЗаписей < 7  И Выборка.ЧасовВечерних > 0 Тогда
							СтрокаТабличнойЧасти["ВидВремени"+Строка(КоличествоЗаписей)] = КлассификаторВечерниеЧасы;
							СтрокаТабличнойЧасти["Часов" + Строка(КоличествоЗаписей)] = Выборка.ЧасовВечерних;
							КоличествоЗаписей = КоличествоЗаписей + 1;
						КонецЕсли;
						
						Если КоличествоЗаписей < 7  И Выборка.ЧасовНочных > 0 Тогда
							СтрокаТабличнойЧасти["ВидВремени"+Строка(КоличествоЗаписей)] = КлассификаторНочныеЧасы;
							СтрокаТабличнойЧасти["Часов" + Строка(КоличествоЗаписей)] = Выборка.ЧасовНочных;
							КоличествоЗаписей = КоличествоЗаписей + 1;
						КонецЕсли;
					Иначе
						Если КоличествоЗаписей < 7 Тогда
							СтрокаТабличнойЧасти["ВидВремени"+Строка(КоличествоЗаписей)] = Выборка.ВидВремени;
							СтрокаТабличнойЧасти["Дней" + Строка(КоличествоЗаписей)] = Выборка.Дней;
							СтрокаТабличнойЧасти["Часов" + Строка(КоличествоЗаписей)] = Выборка.Часов;
							КоличествоЗаписей = КоличествоЗаписей + 1;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;	
КонецФункции // Автозаполнение()

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "П13" Тогда
		
		Если Не Проведен Тогда
			Предупреждение("Документ можно распечатать только после его проведения!");
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремя.Назначение КАК Сотрудник
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ОтработанноеВремя
		|ГДЕ
		|	ОтработанноеВремя.Ссылка = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяВЦеломЗаПериод.Назначение КАК Сотрудник
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремяВЦеломЗаПериод КАК ОтработанноеВремяВЦеломЗаПериод
		|ГДЕ
		|	ОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка";

		СписокСотрудников = Новый СписокЗначений;
		СписокСотрудников.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
		ФильтрСоответствия = Новый Соответствие;
		
		ФильтрСоответствия.Вставить("Организация", Организация);
		ФильтрСоответствия.Вставить("Подразделение", ПодразделениеОрганизации);
		
		ФильтрСоответствия.Вставить("ОтборОрганизации", ЗначениеЗаполнено(Организация));
		ФильтрСоответствия.Вставить("ОтборПодразделения", ЗначениеЗаполнено(ПодразделениеОрганизации));
		
		ФильтрСоответствия.Вставить("ВидСравненияОрганизации", ВидСравнения.Равно);
		ФильтрСоответствия.Вставить("ВидСравненияПодразделения", ВидСравнения.Равно);
		
		ФильтрСоответствия.Вставить("ПериодРегистрации", ПериодРегистрации);
		
		Если СписокСотрудников.Количество() = 1 Тогда
			ФильтрСоответствия.Вставить("Работник", СписокСотрудников[0].Значение);
			ФильтрСоответствия.Вставить("ВидСравненияРаботника", ВидСравнения.Равно);
			ФильтрСоответствия.Вставить("ОтборРаботника", Истина);
		ИначеЕсли СписокСотрудников.Количество() > 1 Тогда
			ФильтрСоответствия.Вставить("Работник", СписокСотрудников);
			ФильтрСоответствия.Вставить("ВидСравненияРаботника", ВидСравнения.ВСписке);
			ФильтрСоответствия.Вставить("ОтборРаботника", Истина);
		КонецЕсли;
		
		ТабДокумент = Новый ТабличныйДокумент;	
		Отчет = Отчеты.УнифицированнаяФормаП13.Создать();
		Отчет.УстановитьФильтр(ФильтрСоответствия);
		ТекстОшибки = "";
		Отчет.СформироватьОтчет(ТабДокумент, "Табель", ТекстОшибки);
		Если ТекстОшибки <> "" Тогда
			Предупреждение(ТекстОшибки);
			Возврат Неопределено;
		Иначе
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + " (форма П-13)"));
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "П5" Тогда
		
		Если Не Проведен Тогда
			Предупреждение("Документ можно распечатать только после его проведения!");
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремя.Назначение КАК Сотрудник
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ОтработанноеВремя
		|ГДЕ
		|	ОтработанноеВремя.Ссылка = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяВЦеломЗаПериод.Назначение КАК Сотрудник
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремяВЦеломЗаПериод КАК ОтработанноеВремяВЦеломЗаПериод
		|ГДЕ
		|	ОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка";

		СписокСотрудников = Новый СписокЗначений;
		СписокСотрудников.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
		ФильтрСоответствия = Новый Соответствие;
		
		ФильтрСоответствия.Вставить("Организация", Организация);
		ФильтрСоответствия.Вставить("Подразделение", ПодразделениеОрганизации);
		
		ФильтрСоответствия.Вставить("ОтборОрганизации", ЗначениеЗаполнено(Организация));
		ФильтрСоответствия.Вставить("ОтборПодразделения", ЗначениеЗаполнено(ПодразделениеОрганизации));
		
		ФильтрСоответствия.Вставить("ВидСравненияОрганизации", ВидСравнения.Равно);
		ФильтрСоответствия.Вставить("ВидСравненияПодразделения", ВидСравнения.Равно);
		
		ФильтрСоответствия.Вставить("ПериодРегистрации", ПериодРегистрации);
		ФильтрСоответствия.Вставить("ДатаЗаполнения", Дата);
		ФильтрСоответствия.Вставить("Ответственный", Ответственный);
		
		Если СписокСотрудников.Количество() = 1 Тогда
			ФильтрСоответствия.Вставить("Работник", СписокСотрудников[0].Значение);
			ФильтрСоответствия.Вставить("ВидСравненияРаботника", ВидСравнения.Равно);
			ФильтрСоответствия.Вставить("ОтборРаботника", Истина);
		ИначеЕсли СписокСотрудников.Количество() > 1 Тогда
			ФильтрСоответствия.Вставить("Работник", СписокСотрудников);
			ФильтрСоответствия.Вставить("ВидСравненияРаботника", ВидСравнения.ВСписке);
			ФильтрСоответствия.Вставить("ОтборРаботника", Истина);
		КонецЕсли;
		
		ТабДокумент = Новый ТабличныйДокумент;	
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Табель_Документ";
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		Отчет = Отчеты.ТиповаяФормаП5.Создать();
		Отчет.УстановитьФильтр(ФильтрСоответствия);
		Отчет.Ответственный = Ответственный;
		ТекстОшибки = "";
		Отчет.СформироватьОтчет(ТабДокумент, "Табель", ТекстОшибки, Истина);
		Если ТекстОшибки <> "" Тогда
			Предупреждение(ТекстОшибки);
			Возврат Неопределено;
		Иначе
			 УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + " (форма П-5)"));
		КонецЕсли;	
		
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//	Струткура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("П5",	"Форма П-5");
	СтруктураМакетов.Вставить("П13","Форма П-13 (от 09.10.1995)");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает значение перечислеиня ВидыУчетаВремени, соответствующее 
// справочнику КлассификаторИспользованияРабочегоВремени.
Функция ПолучитьВидУчетаВремениПоКлассификатору(ВидВремени)
	
	Если ВидВремени.Пустая() Тогда
		Возврат ВидУчетаВремениПоЧасам;
	ИначеЕсли ВидВремени = КлассификаторВечернееВремя Тогда
		Возврат Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
	ИначеЕсли ВидВремени = КлассификаторНочноеВремя Тогда
		Возврат Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
	Иначе
		Возврат ВидУчетаВремениПоЧасам;
	КонецЕсли;
	
КонецФункции

// Функция проверяет, нет ли уже аналогичных записей с ключевыми полями в регистре сведений
// ГрафикиРаботыПоВидамВремени.
// Возвращает Истина если проведение возможно, иначе Ложь.
Функция ПроверкаУникальностиЗаписи()
	
	ЗапросПроверкаУникальности = Новый Запрос;
	
	ЗапросПроверкаУникальности.УстановитьПараметр("ДокументСсылка", Ссылка);
	ЗапросПроверкаУникальности.УстановитьПараметр("Месяц", ПериодРегистрации);
	ЗапросПроверкаУникальности.УстановитьПараметр("НачалоМесяца", ДатаНачалаПериода);
	ЗапросПроверкаУникальности.УстановитьПараметр("КонецМесяца", ДатаОкончанияПериода);
	
	ЗапросПроверкаУникальности.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(РабочееВремяРаботниковОрганизаций.Регистратор, ГрафикиРаботыПоВидамВремени.Документ)) КАК ДокументПредставление,
	|	ЕСТЬNULL(СотрудникиТабеля.Назначение.Наименование, ГрафикиРаботыПоВидамВремени.Сотрудник.Наименование) КАК СотрудникНаименование
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПоДням.Сотрудник КАК Сотрудник,
	|		ТаблицаПоДням.Назначение КАК Назначение
	|	ИЗ
	|		Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТаблицаПоДням
	|	ГДЕ
	|		ТаблицаПоДням.Ссылка = &ДокументСсылка
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВЦеломЗаПериод.Сотрудник,
	|		ТаблицаВЦеломЗаПериод.Назначение
	|	ИЗ
	|		Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремяВЦеломЗаПериод КАК ТаблицаВЦеломЗаПериод
	|	ГДЕ
	|		ТаблицаВЦеломЗаПериод.Ссылка = &ДокументСсылка) КАК СотрудникиТабеля
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	|		ПО РабочееВремяРаботниковОрганизаций.Сотрудник = СотрудникиТабеля.Сотрудник
	|			И РабочееВремяРаботниковОрганизаций.Назначение = СотрудникиТабеля.Назначение
	|			И (РабочееВремяРаботниковОрганизаций.Регистратор <> &ДокументСсылка)
	|			И (РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод
	|					И РабочееВремяРаботниковОрганизаций.Период = &Месяц
	|				ИЛИ (НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод)
	|					И (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ &НачалоМесяца И &КонецМесяца))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СотрудникиТабеля.Сотрудник
	|			И ГрафикиРаботыПоВидамВремени.Сотрудник = СотрудникиТабеля.Назначение
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
	|			И (НЕ ГрафикиРаботыПоВидамВремени.План)
	|			И (НЕ ГрафикиРаботыПоВидамВремени.Документ В (ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка)))
	|ГДЕ
	|	((НЕ РабочееВремяРаботниковОрганизаций.НомерСтроки ЕСТЬ NULL )
	|			ИЛИ (НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ))";
	
	ВыборкаРезультата = ЗапросПроверкаУникальности.Выполнить().Выбрать();
	Если ВыборкаРезультата.Количество() > 0 Тогда
		СтрокаСотрудников = "";
		
		Пока ВыборкаРезультата.Следующий() Цикл
			СтрокаСотрудников = СтрокаСотрудников + Символы.ПС + ВыборкаРезультата.СотрудникНаименование+ " ("+ВыборкаРезультата.ДокументПредставление+")";
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьОбОшибке("Проведение документа невозможно так как на следующих сотрудников уже введены данные в этом периоде" + СтрокаСотрудников,Истина);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПроверкаУникальностиЗаписи()	

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")
	
	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой вводится табель!", Отказ, Заголовок);
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура удаляет все записи из регистра за ПериодРегистрации,
// если документ последний в этом периоде, в разрезе сотрудников
Процедура УдалитьЗаписиЗаПериодДокумента()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботы.ГрафикРаботы,
	|	ГрафикиРаботы.Месяц
	|ПОМЕСТИТЬ ВТСотрудникоМесяц
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Документ = &Документ";
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|СотрудникоМесяц.ГрафикРаботы КАК Сотрудник,
	|СотрудникоМесяц.Месяц КАК Месяц,
	|ВЫБОР 
	|	КОГДА ВведенныеДокументы.ГрафикРаботы ЕСТЬ NULL 
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|КОНЕЦ КАК УдалятьЗаписиЗаПериод
	|
	|ИЗ
	|	ВТСотрудникоМесяц КАК СотрудникоМесяц
	|ЛЕВОЕ СОЕДИНЕНИЕ	
	|	(ВЫБРАТЬ
	|	СотрудникоМесяц.ГрафикРаботы,
	|	СотрудникоМесяц.Месяц
	|	ИЗ
	|		ВТСотрудникоМесяц КАК СотрудникоМесяц
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ПО
	|		ГрафикиРаботы.ГрафикРаботы = СотрудникоМесяц.ГрафикРаботы
	|		И НЕ ГрафикиРаботы.План
	|		И ГрафикиРаботы.Месяц = СотрудникоМесяц.Месяц
	|		И ГрафикиРаботы.Документ <> &Документ
	|		И ГрафикиРаботы.Документ <> ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка)
	|	)КАК ВведенныеДокументы
	|ПО
	|	ВведенныеДокументы.ГрафикРаботы = СотрудникоМесяц.ГрафикРаботы
	|	И ВведенныеДокументы.Месяц = СотрудникоМесяц.Месяц";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		НаборЗаписей.Отбор.План.Установить(Ложь);
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.Сотрудник);
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаЗапроса.Месяц);

		Если ВыборкаЗапроса.УдалятьЗаписиЗаПериод Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		Иначе
		
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если (Запись.Документ = Ссылка) Тогда
					Запись.ОсновноеЗначениеПолное = 0;
					Запись.ДополнительноеЗначениеПолное = 0;
					Запись.Документ = Документы.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
 КонецПроцедуры  // УдалитьЗаписиЗаПериодДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизации.Дата,
	|	ТабельУчетаРабочегоВремениОрганизации.ПериодРегистрации,
	|	ТабельУчетаРабочегоВремениОрганизации.СпособВводаДанных,
	|	ТабельУчетаРабочегоВремениОрганизации.ДатаНачалаПериода,
	|	ТабельУчетаРабочегоВремениОрганизации.ДатаОкончанияПериода,
	|	ТабельУчетаРабочегоВремениОрганизации.ПодразделениеОрганизации,
	|	ТабельУчетаРабочегоВремениОрганизации.Организация КАК ГоловнаяОрганизация,
	|	ТабельУчетаРабочегоВремениОрганизации.Организация Как Организация,
	|	ТабельУчетаРабочегоВремениОрганизации.Ссылка КАК Документ
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации КАК ТабельУчетаРабочегоВремениОрганизации
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизации.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ОтработанноеВремя" документа
//
// Параметры:
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоОтработанноеВремя(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			 Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	 ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Месяц", 					 ВыборкаПоШапкеДокумента.ПериодРегистрации);
	
	ИндексНачальногоДня = День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
	СтрИндексДня = Строка(ИндексНачальногоДня);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки КАК НомерСтроки,		
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение КАК Назначение,
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+" КАК ВидВремени,
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйЧасов"+СтрИндексДня+" КАК Часов,
	|		"+СтрИндексДня+" КАК ИндексДня
	|ПОМЕСТИТЬ ВТДанныеТабеляПоДням
	|	ИЗ
	|		Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|	ГДЕ
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+",
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойЧасов"+СтрИндексДня+",
	|		"+СтрИндексДня+"
	|	ИЗ
	|		Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|	ГДЕ
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	|		И (ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+",
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийЧасов"+СтрИндексДня+",
	|		"+СтрИндексДня+"
	|	ИЗ
	|		Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|	ГДЕ
	|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	|		И (ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
	|";
	
	ИндексКонечногоДня = День(ВыборкаПоШапкеДокумента.ДатаОкончанияПериода);
	Для ИндексДня = ИндексНачальногоДня + 1 По ИндексКонечногоДня Цикл
		СтрИндексДня = Строка(ИндексДня);
		Запрос.Текст = Запрос.Текст + 
		"	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|		И (ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|		И (ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
		|
		|";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + 
	"ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Запрос.Выполнить();
	ДанныеТабеляПоДнямТекст = "ВТДанныеТабеляПоДням";
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДанныеТабеляПоДням";
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	СотрудникиДокумента.Сотрудник,
		|	СотрудникиДокумента.Назначение,
		|	ДанныеТабеляПоДням.ИндексДня КАК ДеньМесяца,
		|	ДанныеТабеляПоДням.ВидВремени КАК ВидВремени,
		|	ДанныеТабеляПоДням.Часов КАК Часов,
		|	ДанныеТабеляПоДням.Сотрудник КАК ЗаписатьПустогоСотрудника,
		|	ДанныеТабеляПоДням.НомерСтроки КАК НомерСтроки,
		|	СотрудникиДокумента.Назначение КАК ПроверкаСотрудникаИОрганизации,
		|	СотрудникиДокумента.КоличествоДублей КАК КоличествоДублей
		|ИЗ  (
		|	ВЫБРАТЬ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение КАК Назначение,
		|		СУММА(1) КАК КоличествоДублей,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка КАК Ссылка
		|	ИЗ Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|
		|	СГРУППИРОВАТЬ ПО
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка
		|) КАК СотрудникиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТабеляПоДням КАК ДанныеТабеляПоДням
		|		ПО ДанныеТабеляПоДням.Сотрудник = СотрудникиДокумента.Сотрудник		
		|		И ДанныеТабеляПоДням.Назначение = СотрудникиДокумента.Назначение
		|";
	
    ТекстЗапроса = "ВЫБРАТЬ
    |	ОбщийЗапрос.Сотрудник,
    |	ОбщийЗапрос.Назначение,
    |	ОбщийЗапрос.ДеньМесяца,
    |	МАКСИМУМ(ЕСТЬNULL(ОбщийЗапрос.ВидВремени, ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))) КАК ВидВремени,
    |	МАКСИМУМ(ЕСТЬNULL(ОбщийЗапрос.Часов, 0)) КАК Часов,
    |	МАКСИМУМ(ВЫБОР 
	|				КОГДА ОбщийЗапрос.ЗаписатьПустогоСотрудника ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК ЗаписатьПустоеЗначение,
    |	МАКСИМУМ(ЕСТЬNULL(ОбщийЗапрос.НомерСтроки, 0)) КАК НомерСтроки,
    |	МАКСИМУМ(ВЫБОР
    |				КОГДА ОбщийЗапрос.ПроверкаСотрудникаИОрганизации.Организация = &ГоловнаяОрганизация
    |					ТОГДА ЛОЖЬ
    |				ИНАЧЕ ИСТИНА
    |			КОНЕЦ) КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
    |	МАКСИМУМ(ЕСТЬNULL(ОбщийЗапрос.КоличествоДублей, 0)) КАК КоличествоДублей
    |	ИЗ
    |	(
    |		ВЫБРАТЬ
    |			СотрудникиДокумента.Сотрудник,
    |			СотрудникиДокумента.Назначение,
    |			ДанныеТабеляПоДням.ИндексДня КАК ДеньМесяца,
    |			ДанныеТабеляПоДням.ВидВремени КАК ВидВремени,
    |			ДанныеТабеляПоДням.Часов КАК Часов,
    |			ДанныеТабеляПоДням.Сотрудник КАК ЗаписатьПустогоСотрудника,
    |			ДанныеТабеляПоДням.НомерСтроки КАК НомерСтроки,
    |			СотрудникиДокумента.Назначение КАК ПроверкаСотрудникаИОрганизации,
    |			СотрудникиДокумента.КоличествоДублей КАК КоличествоДублей
    |		ИЗ  (
    |			ВЫБРАТЬ
    |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
    |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение КАК Назначение,
    |				СУММА(1) КАК КоличествоДублей,
    |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка КАК Ссылка
    |			ИЗ Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
    |			ГДЕ	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
    |		
    |			СГРУППИРОВАТЬ ПО
    |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
    |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
    |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка
    |		) КАК СотрудникиДокумента
    |				ЛЕВОЕ СОЕДИНЕНИЕ " + ДанныеТабеляПоДнямТекст + " КАК ДанныеТабеляПоДням
    |				ПО ДанныеТабеляПоДням.Сотрудник = СотрудникиДокумента.Сотрудник		
    |				И ДанныеТабеляПоДням.Назначение = СотрудникиДокумента.Назначение		
    |		 	
    |		ОБЪЕДИНИТЬ
    |		
    |		ВЫБРАТЬ
    |			Сотрудники.Сотрудник КАК Сотрудник,
    |			Сотрудники.Назначение КАК Назначение,
    |			Даты.ИндексДня КАК ИндексДня,
    |			NULL,
    |			NULL,
    |			NULL,
    |			NULL,
    |			Сотрудники.Назначение,
    |			NULL
    |		ИЗ
    |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
    |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
    |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение КАК Назначение
    |			ИЗ
    |				Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
    |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
    |					ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник
    |						И ГрафикиРаботыПоВидамВремени.Сотрудник = ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение
    |						И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
    |						И ((НЕ ГрафикиРаботыПоВидамВремени.План))
    |			ГДЕ
    |				ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
    |				И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ) КАК Сотрудники
    |			ЛЕВОЕ СОЕДИНЕНИЕ (";
    
    Для ИндексДня = День(НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации)) По День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации)) Цикл
    	ТекстЗапроса = ТекстЗапроса + 
    	"	ВЫБРАТЬ " + Строка(ИндексДня) + " КАК ИндексДня
    	|	ОБЪЕДИНИТЬ ВСЕ";
    КонецЦикла;
 ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-14) + " ) КАК Даты
    |			ПО (ИСТИНА)
    |	) КАК ОбщийЗапрос
    |	СГРУППИРОВАТЬ ПО 
    |		Сотрудник, 
    |		Назначение, 
    |		ДеньМесяца,
    |		ЕСТЬNULL(ОбщийЗапрос.ВидВремени, ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
	|УПОРЯДОЧИТЬ ПО
	|  Сотрудник,
	|  Назначение,
	|  ДеньМесяца,
	|  ВидВремени";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоОтработанноеВремя()

// Формирует запрос по таблице "ОтработанноеВремяВЦеломЗаПериод" документа
//
// Параметры:
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоОтработанноеВремяВЦеломЗаПериод(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник КАК Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Назначение КАК Назначение,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация КАК Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени1 КАК ВидИспользованияРабочегоВремени,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней1 КАК Дней,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов1 КАК Часов
	|ПОМЕСТИТЬ ВТОтработанноеВремяВЦеломЗаПериод
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени1 <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Назначение,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени2,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней2,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов2
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени2 <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Назначение,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени3,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней3,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов3
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени3 <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Назначение,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени4,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней4,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов4
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени4 <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Назначение,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени5,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней5,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов5
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени5 <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Назначение,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Сотрудник.Организация,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени6,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Дней6,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Часов6
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремяВЦеломЗаПериод КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.Ссылка = &ДокументСсылка
	|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремяВЦеломЗаПериод.ВидВремени6 <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Назначение,
	|	ВидИспользованияРабочегоВремени";
	Запрос.Выполнить();
	ТаблицаДокументаТекст = "ВТОтработанноеВремяВЦеломЗаПериод";
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Сотрудник,
	|	ТаблицаДокумента.Назначение,
	|	ТаблицаДокумента.ВидИспользованияРабочегоВремени,
	|	ТаблицаДокумента.Дней,
	|	ТаблицаДокумента.Часов,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	Дубли.КоличествоДублей
	|ИЗ " + ТаблицаДокументаТекст + " КАК ТаблицаДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|		Дубли.Сотрудник КАК Сотрудник,
	|		Дубли.Назначение КАК Назначение,
	|		Дубли.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|		КОЛИЧЕСТВО(Дубли.Сотрудник) КАК КоличествоДублей
	|	ИЗ
	|		" + ТаблицаДокументаТекст + " КАК Дубли
	|
	|	СГРУППИРОВАТЬ ПО
	|		Дубли.Сотрудник,
	|		Дубли.Назначение,
	|		Дубли.ВидИспользованияРабочегоВремени) КАК Дубли
	|	ПО Дубли.Сотрудник = ТаблицаДокумента.Сотрудник
	|	И Дубли.Назначение = ТаблицаДокумента.Назначение
	|		И Дубли.ВидИспользованияРабочегоВремени = ТаблицаДокумента.ВидИспользованияРабочегоВремени";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоОтработанноеВремяВЦеломЗаПериод()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОтработанноеВремя" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа,
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиОтработанноеВремя(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Отработанное время"": ";
	
	Если ВыборкаПоСтрокамДокумента.НомерСтроки = 0 Тогда // это строка-дополнение
		Возврат
	КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Назначение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Назначение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник (назначение)!", Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	// Проверка дублирования сотрудников
	Если ВыборкаПоСтрокамДокумента.КоличествоДублей > 1 Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "обнаружен сотрудник, который введен второй раз!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиОтработанноеВремя()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОтработанноеВремяВЦеломЗаПериод" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа,
//	Отказ						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиОтработанноеВремяВЦеломЗаПериод(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	СтрокаНачалаСообщенияОбОшибке = "В строке табл. части ""Отработанное время"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Назначение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Назначение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник (назначение)!", Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	// Проверка дублирования сотрудников
	Если ВыборкаПоСтрокамДокумента.КоличествоДублей <> null Тогда
		Если ВыборкаПоСтрокамДокумента.КоличествоДублей > 1 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "обнаружен сотрудник, который введен второй раз!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;	
	
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидИспользованияРабочегоВремени
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано использование рабочего времени!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиОтработанноеВремяВЦеломЗаПериод()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочееВремяРаботниковОрганизацийВЦеломЗаПериод(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	
	// Свойства
	Движение.Период								= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	
	// Измерения
	Движение.Сотрудник							= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Назначение							= ВыборкаПоСтрокамДокумента.Назначение;
	Движение.Организация						= ВыборкаПоШапкеДокумента.Организация;
	Движение.ВидИспользованияРабочеговремени	= ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени;
	
	// Ресурсы
	Движение.Дней								= ВыборкаПоСтрокамДокумента.Дней;
	Движение.Часов								= ВыборкаПоСтрокамДокумента.Часов;
	
	// Реквизиты
	Движение.ВЦеломЗаПериод						= Истина;
	
КонецПроцедуры // ДобавитьСтрокуРабочееВремяРаботниковОрганизацийВЦеломЗаПериод()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	Движение = НаборЗаписей.Добавить();
	
	// Свойства
	Движение.Период								= Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоСтрокамДокумента.ДеньМесяца);
	
	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Назначение						= ВыборкаПоСтрокамДокумента.Назначение;
	Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
	
	Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоСтрокамДокумента.ВидВремени;
	
	// Ресурсы
	Движение.Дней								= ?(ВыборкаПоСтрокамДокумента.Часов = 0, 0, 1);
	Движение.Часов								= ВыборкаПоСтрокамДокумента.Часов;
	
	// Реквизиты
	Движение.ВЦеломЗаПериод						= Ложь;
	
КонецПроцедуры // ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, ТаблицаНабора)
	ОбрабатываемаяДата = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоСтрокамДокумента.ДеньМесяца);
	
	СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоДням);
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	МассивСтрок = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
	Иначе
		
		Движение = ТаблицаНабора.Добавить();
		Движение.ГрафикРаботы = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Назначение; // ООП 23763
		Движение.ВидУчетаВремени = ВидУчетаВремениПоДням;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
	КонецЕсли;
	
	// Ресурсы
	Если ВремяЯвки > 0 Тогда
		Движение.ОсновноеЗначениеПолное = ?(ВремяЯвки = 0, 0, 1);
		Движение.ДополнительноеЗначениеПолное = ВремяЯвки;
	Иначе
		Движение.ОсновноеЗначениеПолное = ?(ВыборкаПоСтрокамДокумента.Часов = 0, 0, 1);
		Движение.ДополнительноеЗначениеПолное = ВыборкаПоСтрокамДокумента.Часов;
	КонецЕсли;
	
	// Реквизиты
	Движение.Документ 				= ВыборкаПоШапкеДокумента.Документ;
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, ТаблицаНабора)
	
	ОбрабатываемаяДата = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоСтрокамДокумента.ДеньМесяца);
	ВидУчетаВремени = ПолучитьВидУчетаВремениПоКлассификатору(ВыборкаПоСтрокамДокумента.ВидВремени);
	
	Если ВыборкаПоСтрокамДокумента.ВидВремени = КлассификаторВечерниеЧасы Тогда
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоВечернимЧасам);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидВремени = КлассификаторНочныеЧасы Тогда
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоНочнымЧасам);
	Иначе
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоЧасам);
	КонецЕсли;
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	МассивСтрок = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
	Иначе
		
		Движение = ТаблицаНабора.Добавить();
		Движение.ГрафикРаботы = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Назначение; // ООП 23763
		Движение.ВидУчетаВремени = ВидУчетаВремени;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
	КонецЕсли;
	
	// Ресурсы
	Движение.ОсновноеЗначениеПолное = Движение.ОсновноеЗначениеПолное + ВыборкаПоСтрокамДокумента.Часов;
	Движение.ДополнительноеЗначениеПолное = ?((Движение.ДополнительноеЗначениеПолное > 0) ИЛИ (ВыборкаПоСтрокамДокумента.Часов > 0), 1, 0);
	
	// Реквизиты
	Движение.Документ				= ВыборкаПоШапкеДокумента.Документ;
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы()

// Функция формирует запрос по таблице ОтработанноеВремя документа
// для получения периодов невыходов.
Функция СформироватьЗапросДляРегистраРасчета(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	СписокПропусков = Новый Массив(7);
	СписокПропусков[0] = Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя;
	СписокПропусков[1] = Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству;
	СписокПропусков[2] = Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпускБезОплаты;
	СписокПропусков[3] = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый;
	СписокПропусков[4] = Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам;
	СписокПропусков[5] = Справочники.КлассификаторИспользованияРабочегоВремени.Прогул;
	СписокПропусков[6] = Справочники.КлассификаторИспользованияРабочегоВремени.ДругиеНеявки;

	Запрос.УстановитьПараметр("СписокПропусков", СписокПропусков);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки КАК НомерСтроки,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник КАК Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение КАК Назначение,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени1 КАК ВидВремени,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйЧасов1 КАК Часов,
	|	1 КАК ДеньМесяца
	|ПОМЕСТИТЬ ПропущенныеДни
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени1 В(&СписокПропусков)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени1,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойЧасов1,
	|	1
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени1 В(&СписокПропусков)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени1,
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийЧасов1,
	|	1
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
	|ГДЕ
	|	ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
	|	И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени1 В(&СписокПропусков)";
	
	Для ИндексДня = 2 По День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации)) Цикл
		СтрИндексДня = Строка(ИндексДня);
		Запрос.Текст = Запрос.Текст + "		
		|
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ПервыйВидВремени"+СтрИндексДня+" В(&СписокПропусков)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ВторойВидВремени"+СтрИндексДня+" В(&СписокПропусков)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.НомерСтроки,		
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Сотрудник,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Назначение,
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+",
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийЧасов"+СтрИндексДня+",
		|		"+СтрИндексДня+"
		|	ИЗ
		|		Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя
		|	ГДЕ
		|		ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.Ссылка = &ДокументСсылка
		|		И ТабельУчетаРабочегоВремениОрганизацииОтработанноеВремя.ТретийВидВремени"+СтрИндексДня+" В(&СписокПропусков)";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Запрос.Выполнить();
	ПропущенныеДниТекст = "ПропущенныеДни";
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СгруппированныеДанные.Сотрудник,
	|	СгруппированныеДанные.Назначение,
	|	СгруппированныеДанные.ВидВремени,
	|	СгруппированныеДанные.НачалоПериода,
	|	СгруппированныеДанные.КонецПериода,
	|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации	
	|ИЗ		
	|	(ВЫБРАТЬ
	|	НачальнаяДата.Сотрудник,
	|	НачальнаяДата.Назначение,
	|	НачальнаяДата.ВидВремени,
	|	НачальнаяДата.ДеньМесяца КАК НачалоПериода,
	|	МИНИМУМ(КонечнаяДата.ДеньМесяца) КАК КонецПериода,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаПолученияПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачальнаяДата.Сотрудник КАК Сотрудник,
	|		НачальнаяДата.Назначение КАК Назначение,
	|		НачальнаяДата.ВидВремени КАК ВидВремени,
	|		НачальнаяДата.Часов КАК Часов,
	|		НачальнаяДата.ДеньМесяца КАК ДеньМесяца,
	|		НачальнаяДата.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		" + ПропущенныеДниТекст + " КАК НачальнаяДата
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ПропущенныеДниТекст + " КАК ПредыдущаяНачальнаяДата
	|			ПО ПредыдущаяНачальнаяДата.НомерСтроки = НачальнаяДата.НомерСтроки
	|				И (ПредыдущаяНачальнаяДата.ДеньМесяца + 1 = НачальнаяДата.ДеньМесяца)
	|	ГДЕ
	|		(ПредыдущаяНачальнаяДата.НомерСтроки ЕСТЬ NULL 
	|				ИЛИ ПредыдущаяНачальнаяДата.ВидВремени <> НачальнаяДата.ВидВремени)) КАК НачальнаяДата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КонечнаяДата.Сотрудник КАК Сотрудник,
	|			КонечнаяДата.Назначение КАК Назначение,
	|			КонечнаяДата.ВидВремени КАК ВидВремени,
	|			КонечнаяДата.Часов КАК Часов,
	|			КонечнаяДата.ДеньМесяца КАК ДеньМесяца,
	|			КонечнаяДата.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			" + ПропущенныеДниТекст + " КАК КонечнаяДата
	|				ЛЕВОЕ СОЕДИНЕНИЕ " + ПропущенныеДниТекст + " КАК СледующаяКонечнаяДата
	|				ПО СледующаяКонечнаяДата.НомерСтроки = КонечнаяДата.НомерСтроки
	|					И (СледующаяКонечнаяДата.ДеньМесяца = КонечнаяДата.ДеньМесяца + 1)
	|		ГДЕ
	|			(СледующаяКонечнаяДата.НомерСтроки ЕСТЬ NULL 
	|					ИЛИ СледующаяКонечнаяДата.ВидВремени <> КонечнаяДата.ВидВремени)) КАК КонечнаяДата
	|		ПО КонечнаяДата.НомерСтроки = НачальнаяДата.НомерСтроки
	|			И КонечнаяДата.ВидВремени = НачальнаяДата.ВидВремени
	|			И КонечнаяДата.ДеньМесяца >= НачальнаяДата.ДеньМесяца
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО
	|			РаботникиОрганизаций.Сотрудник = НачальнаяДата.Сотрудник
	|			И РаботникиОрганизаций.Период <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), ДЕНЬ, НачальнаяДата.ДеньМесяца - 1)
	|СГРУППИРОВАТЬ ПО
	|	НачальнаяДата.Сотрудник,
	|	НачальнаяДата.Назначение,
	|	НачальнаяДата.ВидВремени,
	|	НачальнаяДата.ДеньМесяца
	|) КАК СгруппированныеДанные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ПО
	|	РаботникиОрганизаций.Сотрудник = СгруппированныеДанные.Сотрудник
	|	И РаботникиОрганизаций.Период = СгруппированныеДанные.ДатаПолученияПодразделения
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода";
	
	Возврат Запрос.Выполнить();	
	
КонецФункции // СформироватьЗапросДляРегистраРасчета()

// Процедура вводит в Регистр расчета ОсновныеНачисленияРаботниковОрганизаций
// ВР ДниНеоплачиваемыеСогласноТабелю 
Процедура ПроведениеПоРегиструРасчета(ВыборкаПоШапкеДокумента)
	
	НаборОсновныеНачисления = Движения.ОсновныеНачисленияРаботниковОрганизаций;
	ВыборкаПериодыПропусков = СформироватьЗапросДляРегистраРасчета(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПериодыПропусков.Следующий() Цикл
		Движение = НаборОсновныеНачисления.Добавить();
		
		// Свойства
		Движение.ПериодРегистрации = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.ПериодДействияНачало = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПериодыПропусков.НачалоПериода);
		Движение.ПериодДействияКонец = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПериодыПропусков.КонецПериода);
		Движение.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю;
		Движение.Сторно = Ложь;
		
		// Измерения
		Если ЗначениеЗаполнено(ВыборкаПериодыПропусков.Сотрудник.ОсновноеНазначение) Тогда
			Движение.Сотрудник = ВыборкаПериодыПропусков.Сотрудник.ОсновноеНазначение;
		Иначе
			Движение.Сотрудник = ВыборкаПериодыПропусков.Сотрудник;
		КонецЕсли;	
		Движение.Назначение = ВыборкаПериодыПропусков.Назначение;
		Движение.Организация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Реквизиты
		Движение.ПодразделениеОрганизации = ВыборкаПериодыПропусков.ПодразделениеОрганизации;
		Движение.ГрафикРаботы = ВыборкаПериодыПропусков.Сотрудник;
		Движение.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		Движение.Авторасчет = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // ПроведениеПоРегиструРасчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		ОтработанноеВремя.Очистить();
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ОтработанноеВремяВЦеломЗаПериод,,"Назначение");
		ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(ОтработанноеВремяВЦеломЗаПериод);
	Иначе
		ОтработанноеВремяВЦеломЗаПериод.Очистить();
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ОтработанноеВремя,,"Назначение");
		ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(ОтработанноеВремя);
	КонецЕсли;
	
	УдалитьЗаписиЗаПериодДокумента();
	
		// проверим допустимо ли изменение состава сотрудников по которым введен табель
	Если Не ЭтоНовый() 
		И СпособВводаДанных <> Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод 
		И РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		
		СоответствиеСотрудники = Новый Соответствие;
		Для Каждого Строка Из ОтработанноеВремя Цикл
			СоответствиеСотрудники.Вставить(Строка.Сотрудник, "");
		КонецЦикла;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НовыеСотрудники.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТНовыеСотрудники
			|ИЗ
			|	&НовыеСотрудники КАК НовыеСотрудники
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисления.Регистратор КАК Документ,
			|	ПРЕДСТАВЛЕНИЕ(ОсновныеНачисления.Регистратор) КАК ДокументПредставление,
			|	ОсновныеНачисления.Сотрудник.Наименование КАК СотрудникНаименование
			|ИЗ
			|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК СтарыеСотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыеСотрудники КАК НовыеСотрудники
			|		ПО СтарыеСотрудники.Сотрудник = НовыеСотрудники.Сотрудник
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ПО СтарыеСотрудники.Сотрудник = ОсновныеНачисления.Сотрудник
			|			И (ОсновныеНачисления.ПериодДействия = НАЧАЛОПЕРИОДА(СтарыеСотрудники.Ссылка.ДатаНачалаПериода, МЕСЯЦ))
			|			И (ОсновныеНачисления.ГрафикРаботы = ОсновныеНачисления.Сотрудник)
			|ГДЕ
			|	СтарыеСотрудники.Ссылка = &Документ
			|	И НовыеСотрудники.Сотрудник ЕСТЬ NULL 
			|	И ОсновныеНачисления.Регистратор <> &Документ");
			
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("Документ", Ссылка);
			
			НовыеСотрудники = Новый ТаблицаЗначений;
			НовыеСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
			Для Каждого КлючЗначение Из СоответствиеСотрудники Цикл
				Строка = НовыеСотрудники.Добавить();
				Строка.Сотрудник = КлючЗначение.Ключ;
			КонецЦикла;
			Запрос.УстановитьПараметр("НовыеСотрудники", НовыеСотрудники);
			
			Выборка = Запрос.ВыполнитьПакет()[1].Выбрать();
			
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисления.Регистратор КАК Документ,
			|	ПРЕДСТАВЛЕНИЕ(ОсновныеНачисления.Регистратор) КАК ДокументПредставление,
			|	ОсновныеНачисления.Сотрудник.Наименование КАК СотрудникНаименование
			|ИЗ
			|	Документ.ТабельУчетаРабочегоВремениОрганизации.ОтработанноеВремя КАК СтарыеСотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ПО СтарыеСотрудники.Сотрудник = ОсновныеНачисления.Сотрудник
			|			И (ОсновныеНачисления.ПериодДействия = НАЧАЛОПЕРИОДА(СтарыеСотрудники.Ссылка.ДатаНачалаПериода, МЕСЯЦ))
			|			И (ОсновныеНачисления.ГрафикРаботы = ОсновныеНачисления.Сотрудник)
			|ГДЕ
			|	СтарыеСотрудники.Ссылка = &Документ
			|	И ОсновныеНачисления.Регистратор <> &Документ");
			
			Запрос.УстановитьПараметр("Документ", Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
		КонецЕсли;
		
		Если Выборка.Количество() > 0 Тогда
			ОбработкаКомментариев.УдалитьСообщения();
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Изменение документа невозможно, так как по следующим сотрудникам уже выполнено начисление зарплаты");
			Пока Выборка.Следующий() Цикл 
				Расшифровки = Новый Массив;
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Выборка.ДокументПредставление, Выборка.Документ));
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(
						Выборка.СотрудникНаименование + " документом %%",
						Отказ, , Перечисления.ВидыСообщений.Ошибка, Расшифровки);
			КонецЦикла;
			ОбработкаКомментариев.ПоказатьСообщения();
			
		КонецЕсли;
			
	КонецЕсли;


КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения" документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		Отказ = Отказ Или (Не ПроверкаУникальностиЗаписи());
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
				// Данные введены в целом за период.
				
				////////////////////////////////////////////////////////////////////////
				// Отработанное время в целом за период
				
				// получим реквизиты табличной части
				ВыборкаПоОтработанноеВремяВЦеломЗаПериод = СформироватьЗапросПоОтработанноеВремяВЦеломЗаПериод(ВыборкаПоШапкеДокумента).Выбрать();
				Пока ВыборкаПоОтработанноеВремяВЦеломЗаПериод.СледующийПоЗначениюПоля("Сотрудник") Цикл
					Если Не Отказ Тогда
						Пока ВыборкаПоОтработанноеВремяВЦеломЗаПериод.Следующий() Цикл
							
							// Проверим очередную строку табличной части
							ПроверитьЗаполнениеСтрокиОтработанноеВремяВЦеломЗаПериод(ВыборкаПоШапкеДокумента, ВыборкаПоОтработанноеВремяВЦеломЗаПериод, Отказ, Заголовок);
							Если Не Отказ Тогда
								// Заполним записи в наборах записей регистров
								ДобавитьСтрокуРабочееВремяРаботниковОрганизацийВЦеломЗаПериод(ВыборкаПоОтработанноеВремяВЦеломЗаПериод, ВыборкаПоШапкеДокумента, Движения.РабочееВремяРаботниковОрганизаций);
							Иначе
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				// Данные введены с разбивкой по дням.
				
				////////////////////////////////////////////////////////////////////////
				// Отработанное время
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("Месяц", ВыборкаПоШапкеДокумента.ПериодРегистрации);
				
				// получим реквизиты табличной части
				ВыборкаПоОтработанноеВремя = СформироватьЗапросПоОтработанноеВремя(ВыборкаПоШапкеДокумента).Выбрать();
				
				НаборГрафикиРаботыПоВидамВремени = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
				
				НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ВыборкаПоШапкеДокумента.ПериодРегистрации);
				НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Ложь);
				
				ДеньНачалаПериода = День(ДатаНачалаПериода);
				ДеньОкончанияПериода = День(ДатаОкончанияПериода);
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("План", Ложь);
				СтруктураПоиска.Вставить("Месяц", ВыборкаПоШапкеДокумента.ПериодРегистрации);
				
				ВидУчетаВремениПоДням = Перечисления.ВидыУчетаВремени.ПоДням;
				ВидУчетаВремениПоЧасам = Перечисления.ВидыУчетаВремени.ПоЧасам;
				ПустойДокумент = Документы.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка();
				
				Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("Сотрудник") Цикл
					Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("Назначение") Цикл 
						// Проверим очередную строка табличной части
						ПроверитьЗаполнениеСтрокиОтработанноеВремя(ВыборкаПоШапкеДокумента, ВыборкаПоОтработанноеВремя, Отказ, Заголовок);
						Если НЕ Отказ Тогда
							
							НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(ВыборкаПоОтработанноеВремя.Сотрудник);
							СтруктураПоиска.Вставить("ГрафикРаботы", ВыборкаПоОтработанноеВремя.Сотрудник);
							НаборГрафикиРаботыПоВидамВремени.Отбор.Сотрудник.Установить(ВыборкаПоОтработанноеВремя.Назначение); 
							СтруктураПоиска.Вставить("Сотрудник", ВыборкаПоОтработанноеВремя.Назначение);                       
							НаборГрафикиРаботыПоВидамВремени.Прочитать();
							ТаблицаНабора = НаборГрафикиРаботыПоВидамВремени.Выгрузить();
							
							Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("ДеньМесяца") Цикл
								Если (ВыборкаПоОтработанноеВремя.ДеньМесяца <= ДеньОкончанияПериода)
									И (ВыборкаПоОтработанноеВремя.ДеньМесяца >= ДеньНачалаПериода)Тогда
									ВремяЯвки = 0;
									Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
										// Заполним записи в наборах записей регистров
										
										
										ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоОтработанноеВремя, ВыборкаПОШапкеДокумента, ТаблицаНабора);
										
										Если НЕ ВыборкаПоОтработанноеВремя.ВидВремени.Пустая() Тогда
											ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(ВыборкаПоОтработанноеВремя, ВыборкаПоШапкеДокумента, Движения.РабочееВремяРаботниковОрганизаций);
											Если ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторЯвка Тогда
												ВремяЯвки = ВыборкаПоОтработанноеВремя.Часов;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоОтработанноеВремя, ВыборкаПОШапкеДокумента, ТаблицаНабора);
								ИначеЕсли ВыборкаПоОтработанноеВремя.ЗаписатьПустоеЗначение Тогда
									ДатаМесяца = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоОтработанноеВремя.ДеньМесяца);
									Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
										
										Движение = ТаблицаНабора.Добавить();
										Движение.ГрафикРаботы = ВыборкаПоОтработанноеВремя.Сотрудник;
										Движение.Сотрудник = ВыборкаПоОтработанноеВремя.Назначение;
										Движение.ВидУчетаВремени = ВидУчетаВремениПоЧасам;
										Движение.Дата = ДатаМесяца;
										Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
										Движение.План = Ложь;
										Движение.Документ = ПустойДокумент;
										
									КонецЦикла;
									
									Движение = ТаблицаНабора.Добавить();
									Движение.ГрафикРаботы = ВыборкаПоОтработанноеВремя.Сотрудник;
									Движение.Сотрудник = ВыборкаПоОтработанноеВремя.Назначение; 
									Движение.ВидУчетаВремени = ВидУчетаВремениПоДням;
									Движение.Дата = ДатаМесяца;
									Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
									Движение.План = Ложь;
									Движение.Документ = ПустойДокумент;
									
								КонецЕсли;
							КонецЦикла;
							НаборГрафикиРаботыПоВидамВремени.Загрузить(ТаблицаНабора);
							НаборГрафикиРаботыПоВидамВремени.Записать();
						КонецЕсли;
					КонецЦикла; 
				КонецЦикла;
				
				ПроведениеПоРегиструРасчета(ВыборкаПоШапкеДокумента);
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

КлассификаторНочноеВремя = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные;
КлассификаторВечернееВремя = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;

ВидУчетаВремениПоДням  			= Перечисления.ВидыУчетаВремени.ПоДням;
ВидУчетаВремениПоЧасам 			= Перечисления.ВидыУчетаВремени.ПоЧасам;
ВидУчетаВремениПоВечернимЧасам 	= Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
ВидУчетаВремениПоНочнымЧасам 	= Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;


МассивПриставок = Новый Массив(3);
МассивПриставок[0] = "Первый";
МассивПриставок[1] = "Второй";
МассивПриставок[2] = "Третий";

КлассификаторЯвка = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
КлассификаторВечерниеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;
КлассификаторНочныеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные;
КлассификаторПустаяСсылка = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
