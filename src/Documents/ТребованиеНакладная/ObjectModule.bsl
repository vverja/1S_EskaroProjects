Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мУчетнаяПолитика;                 // (Общ)
Перем мУчетнаяПолитикаБух;				// (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИндексСтрокиСписанныеТовары;
Перем мУказаниеПроектовВТабличнойЧастиДокументов Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

Перем ИспользоватьРегистрСвободныеОстатки Экспорт;
Перем ПревышенБюджет Экспорт;

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = 'Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	Иначе
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ТребованиеНакладная", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ТребованиеНакладная", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,
	ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка), Ссылка);
	
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("Накладная", "Требование-накладная");
	СтруктураМакетов.Вставить("М11", "Накладная М-11");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
		|Материалы.Счет,
		|Материалы.СчетЗатрат, Материалы.Субконто1, Материалы.Субконто2, Материалы.Субконто3,
		|Материалы.ВидСубконто1, Материалы.ВидСубконто2, Материалы.ВидСубконто3,
		|Материалы.НалоговоеНазначение, Материалы.НалоговоеНазначениеДоходовИЗатрат";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаМатериалов, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// Проверим наличие заказа в зависимости от выбранных статей затрат
	ЗаказОбязателен = Ложь;
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		Если Строка.Услуга Тогда
			ОбщегоНазначения.СообщитьОбОшибке(Нстр("ru = 'Нельзя использовать услугу (строка № " + Строка.НомерСтроки + " таблица ""Материалы"")'"), Отказ, Заголовок);
		КонецЕсли;
		//Заполнение склада в табличной части проверяем здесь, т.к. склад в ТЧможет быть заполнен в процедуре ПередЗаписью
		//		в этом случае его нельзя проверять в ОбработкаПроверкиЗаполнения
		Если мУказаниеСкладовВТЧ И НЕ ЗначениеЗаполнено(Строка.Склад) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(Нстр("ru = 'Не указан склад (строка № " + Строка.НомерСтроки + " таблица ""Материалы"")'"), Отказ, Заголовок);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Строка.СтатьяЗатрат) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(Нстр("ru = 'Не указана статья затрат (строка № " + Строка.НомерСтроки + " таблица ""Материалы"")'"), Отказ, Заголовок);
		КонецЕсли;
		
		Если Строка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нельзя списывать на неоперационную затрату (строка № " + Строка.НомерСтроки + " таблица ""Материалы""). Используйте документ ""Списание товаров"".", Отказ, Заголовок);
		КонецЕсли;
		
		Если Строка.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(Нстр("ru = 'При использовании статей затрат по переработке давальческого сырья заказ обязателен (строка № " + Строка.НомерСтроки + ")'"), Отказ, Заголовок);
			ИначеЕсли ТипЗнч(Строка.Заказ) <> Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ  Не Строка.Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
				ОбщегоНазначения.СообщитьОбОшибке(Нстр("ru = 'При использовании статей затрат по переработке давальческого сырья можно использовать только заказ на переработку (строка № " + Строка.НомерСтроки + ")'"), Отказ, Заголовок);
			КонецЕсли;
			Если Строка.ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				ОбщегоНазначения.СообщитьОбОшибке(Нстр("ru = 'В статье затрат статус материальных затрат ""Принятые в переработку"" можно указывать только для производственных расходов (строка № " + Строка.НомерСтроки + ")'"), Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
		   И Строка.ВидЗатрат <> Перечисления.ВидыЗатрат.Материальные Тогда
			ОбщегоНазначения.СообщитьОбОшибке(Нстр("ru = 'Для производственных расходов можно использовать только материальные статьи затрат! (строка № " + Строка.НомерСтроки + ")'"), Отказ, Заголовок);
		КонецЕсли;

		Если ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
			СтрокаНачалаСообщенияОбОшибке = Нстр("ru = 'В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табличной части "" Материалы "": '");

			Если Строка.ВнутреннийЗаказ.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение Тогда
				//неправильный внутренний заказ
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'указан Внутренний заказ с видом заказа """+Строка.ВнутреннийЗаказ.ВидЗаказа+""". Может быть указан только заказ с видом ""В подразделение"" '") , Отказ, Заголовок);
			КонецЕсли;
			Если Строка.ВнутреннийЗаказ.Заказчик <> Подразделение Тогда
				// неправильное подразделение
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'указан Внутренний заказ, в котором подразделение-заказчик отличается от подразделения, указанного в шапке документа'") , Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", ТаблицаМатериалов, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Материалы", ТаблицаМатериалов, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Материалы", ТаблицаМатериалов, Отказ, Заголовок);
	

КонецПроцедуры // ПроверкаРеквизитов()

//Проверяет корректность счетов учета ТЧ материалы, а также корректность значений реквизитов, 
//зависящих от выбранных счетов учета.
Процедура ПроверитьКорректностьСчетовУчетаМатериалы(ТаблицаМатериалов, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Материалы";
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Строка.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда 
			СтрокаНачалаСообщенияОбОшибке = НСтр("ru = 'В строке номер """+ СокрЛП(Строка.НомерСтроки) +
									   """ табличной части "" Материалы "": '");
									   
			Если ВидОперации = Перечисления.ВидыОперацийТребованиеНакладная.Оборудование Тогда
				Если НЕ ЗначениеЗаполнено(Строка.НалоговоеНазначение) Тогда
					СтрокаСообщения = "Не заполнено значение реквизита "" Налоговое назначение ""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаМатериалов,
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Списание",    // ВидОперации
					Истина         // ЭтоЗатраты 
	);	
	
	
КонецПроцедуры

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаУчетаНоменклатуры=Истина, ЗаполнятьСчетаУчетаЗатрат=Истина) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаУчетаНоменклатуры, ЗаполнятьСчетаУчетаЗатрат);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаУчетаНоменклатуры=Истина, ЗаполнятьСчетаУчетаЗатрат=Истина) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьСчетаУчетаЗатрат, ЗаполнятьСчетаУчетаНоменклатуры);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Процедура выполняет заполнение табличной части "Товары" по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - ссылка на документ основание
//
Процедура ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг(ДокументОснование)

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Товары.Номенклатура.НоменклатурнаяГруппаЗатрат КАК НоменклатурнаяГруппа,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияМест,
	|	Товары.Коэффициент,
	|	Товары.Количество,
	|	Товары.КоличествоМест,
	|	Товары.ХарактеристикаНоменклатуры,
	|	Товары.СерияНоменклатуры,
	|	Товары.Склад,
	|	Товары.Заказ КАК ЗаказРезерв,
	|	ВЫБОР КОГДА (Товары.Заказ ССЫЛКА Документ.ВнутреннийЗаказ) ТОГДА
	|   	Неопределено
	|	ИНАЧЕ
	|		Товары.Заказ
	|	КОНЕЦ КАК Заказ,
	|	Товары.СчетУчетаБУ КАК Счет
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезЗапроса = Запрос.Выполнить();

	Выборка = РезЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

		НоваяСтрока.Качество = Справочники.Качество.Новый;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Материалы", ОтражатьВБухгалтерскомУчете, Ложь, Истина);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет полями, нужными для регл. учета.
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей)

	СтруктураПолей.Вставить("Счет", 		"Счет");
	
	СтруктураПолей.Вставить("СчетУчетаБУ", 	"Счет");
	СтруктураПолей.Вставить("СчетЗатратБУ", "СчетЗатрат");
	СтруктураПолей.Вставить("СчетЗатрат", 	"СчетЗатрат");
	
	СтруктураПолей.Вставить("КорСчетБУ", 	"СчетЗатрат");
	
	СтруктураПолей.Вставить("Субконто1", 	"Субконто1");
	СтруктураПолей.Вставить("Субконто2", 	"Субконто2");
	СтруктураПолей.Вставить("Субконто3", 	"Субконто3");
	
	СтруктураПолей.Вставить("КорСубконтоБУ1", "Субконто1");
	СтруктураПолей.Вставить("КорСубконтоБУ2", "Субконто2");
	СтруктураПолей.Вставить("КорСубконтоБУ3", "Субконто3");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"        , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат",		"НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат", 	"НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат", 		"НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
	

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("ПринадлежностьНоменклатуры",Новый ОписаниеТипов("ПеречислениеСсылка.ПринадлежностьНоменклатуры"));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = NULL Тогда
			СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = Ложь;
		КонецЕсли;
		СтрокаТаблицы.ПринадлежностьНоменклатуры = ?(СтрокаТаблицы.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку,
													Перечисления.ПринадлежностьНоменклатуры.Принятый,
													Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка());
	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()


Процедура ОчиститьНалоговыеНазначенияПринятыхВПереработку(ТаблицаМатериалов)
	
	Для Каждого СтрокаМатериалов Из ТаблицаМатериалов Цикл
		Если СтрокаМатериалов.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			СтрокаМатериалов.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
			СтрокаМатериалов.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры //  ОчиститьНалоговыеНазначенияПринятыхВПереработку

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, мУчетнаяПолитика, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, мУчетнаяПолитика, Отказ, Заголовок);

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	Движения.СписанныеТовары.Записать(Истина);
	
	Если ТаблицаПоТоварам.Количество()>0 Тогда
	
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
			ЭтотОбъект,
			Дата, 
			СтруктураШапкиДокумента.Организация,
			ОтражатьВУправленческомУчете,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	
	КонецЕсли;

	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Движения.Хозрасчетный.Записать();
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	
	//Коновалова 13022013 +
	Если (СтруктураШапкиДокумента.ОтражатьВУправленческомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладах")) ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладахБухгалтерскийУчет")) Тогда
		 Отказ = Истина;
		 Возврат;
	КонецЕсли;
	//Коновалова 13022013 -

КонецПроцедуры // ДвиженияПоРегистрам()

//Коновалова 19022013 +
Функция НетДвиженийПоПартиям(_Регистр)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПартииТоваровНаСкладах.Регистратор
	                      |ИЗ
	                      |	РегистрНакопления."+_Регистр+" КАК ПартииТоваровНаСкладах
	                      |ГДЕ
	                      |	ПартииТоваровНаСкладах.Регистратор = &Регистратор");
						        
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
//Коновалова 19022013 -

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, УчетнаяПолитика, Отказ, Заголовок)

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТЧ Из Материалы Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.СтатьяЗатрат)
			      И СтрокаТЧ.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				МассивСерий.Добавить(СтрокаТЧ.СерияНоменклатуры);
			КонецЕсли;
		КонецЦикла;
		УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( МассивСерий, Дата, Отказ, Заголовок);
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
	                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый));

	Если Не РезультатЗапроса.Пустой() Тогда
	
		НаборДвижений = Движения.ТоварыНаСкладах;
		
		// Контроль остатков товара
		Если Материалы.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;

		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("Материалы", РезультатЗапроса.Выгрузить());
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		КонецЕсли;
		
	КонецЕсли;

	РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
	                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный));

	Если Не РезультатЗапроса.Пустой() Тогда
		НаборДвижений = Движения.ТоварыВРознице;

		// Контроль остатков товара
		Если НЕ ИспользоватьРегистрСвободныеОстатки И Материалы.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;

		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("Материалы", РезультатЗапроса.Выгрузить());
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;

	// Если есть списание из резерва, то надо списать резерв
	ТаблицаПоТоварамИзРезерва = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказРезерв) Тогда
			 ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
			СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ЗаказРезерв;
		КонецЕсли; 
	КонецЦикла;
		
	Если ТаблицаПоТоварамИзРезерва.Количество() > 0 Тогда
	
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Контроль остатков товара
		Если Материалы.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварамИзРезерва);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УчетЗатратПоЗаказамНаПроизводство = мУчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство;
	
	// ТОВАРЫ ПО РЕГИСТРУ МатериалыВПроизводстве.
	НаборДвижений = Движения.МатериалыВПроизводстве;
	
	ТаблицаПоТоварамОперативныйУчет = ТаблицаПоТоварам.Скопировать();
	
	ИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
	
	КолвоЭлементов = ТаблицаПоТоварамОперативныйУчет.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
   		СтрокаТаблицы = ТаблицаПоТоварамОперативныйУчет[КолвоЭлементов - ОбратныйИндекс];
  
		Если Не СтрокаТаблицы.ВестиОперативныйУчетОстатковНЗП 
		 ИЛИ СтрокаТаблицы.ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
      		ТаблицаПоТоварамОперативныйУчет.Удалить(СтрокаТаблицы);
		Иначе
			Если Не СтрокаТаблицы.ВестиУчетПоСериямВНЗП Тогда
				СтрокаТаблицы.СерияЗатраты = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			СтрокаТаблицы.Заказ = УправлениеПроизводством.ПолучитьЗаказДляУчетаЗатрат(СтрокаТаблицы.Заказ, , УчетЗатратПоЗаказамНаПроизводство, ИспользоватьЗаказыНаПроизводство);
		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаПоТоварамОперативныйУчет.Количество() > 0 И НЕ Отказ Тогда

		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварамОперативныйУчет);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение", Подразделение);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации",   Перечисления.КодыОперацийМатериалыВПроизводстве.СписаниеПартийВПроизводствоОперативно);
				
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;
	
	Если Не глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументов
	   И Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
	   И НЕ Отказ
	Тогда
		
		ТаблицаПоТоварамНЗП = ТаблицаПоТоварам.Скопировать();
		
		ИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
	
		КолвоЭлементов = ТаблицаПоТоварамНЗП.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
	   		СтрокаТаблицы = ТаблицаПоТоварамНЗП[КолвоЭлементов - ОбратныйИндекс];
	  
	   		Если СтрокаТаблицы.ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
	      		ТаблицаПоТоварамНЗП.Удалить(СтрокаТаблицы);
			Иначе
				Если Не СтрокаТаблицы.ВестиУчетПоСериямВНЗП Тогда
					СтрокаТаблицы.СерияЗатраты = Справочники.СерииНоменклатуры.ПустаяСсылка();
				КонецЕсли;
				СтрокаТаблицы.Заказ = УправлениеПроизводством.ПолучитьЗаказДляУчетаЗатрат(СтрокаТаблицы.Заказ, , УчетЗатратПоЗаказамНаПроизводство, ИспользоватьЗаказыНаПроизводство);
			КонецЕсли;

		КонецЦикла;
		
		// ПРИХОД ТОВАРОВ ПО РЕГИСТРУ НезавершенноеПроизводство.
		НаборДвижений = Движения.НезавершенноеПроизводство;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварамНЗП);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение", Подразделение);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации",   Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеКоличестваВПроизводствоОперативно);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СписаниеПартий",Истина);
				
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;
	
	// Движения по регистру ЛимитноЗаборныеКарты.
	Если УправлениеПроизводством.ИспользоватьЛимитыОтпускаМатериалов() Тогда
		
		РезультатЗапросаЛимиты = УправлениеПроизводством.СформироватьЗапросЛимитыОтпускаМатериаловПоТабличнойЧасти(ЭтотОбъект);
			
		Если НЕ РезультатЗапросаЛимиты.Пустой() Тогда
			
			НаборДвижений = Движения.ЛимитноЗаборныеКарты;
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
				РезультатЗапросаЛимиты.Выгрузить(), 
				ТаблицаДвижений);

			Если Не СтруктураШапкиДокумента.РазрешитьПревышениеЛимита Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(0, "ОтпущеноСверхЛимита");
			КонецЕсли;
		
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка лимитов при проведении.
			НаборДвижений.КонтрольЛимитов(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок);
						
			Если Не Отказ Тогда
				Движения.ЛимитноЗаборныеКарты.ДобавитьДвижение();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Движение по внутренним заказам
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяТабЧасти",       "Материалы");
	ДопПараметры.Вставить("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить("РежимПроведения",   РежимПроведения);
	ДопПараметры.Вставить("ИмяРеквизитаЗаказ", "ВнутреннийЗаказ");
	ДопПараметры.Вставить("ЗаказВШапке",       Ложь);
	
	ТабИсходная = ТаблицаПоТоварам.Скопировать();
		
	ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);
	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура  ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, знач СтатусПартии)
	Сч = 0;

	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ)  // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ВнутреннийЗаказ.Заказчик = Подразделение Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ВнутреннийЗаказ, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   СтрокаТаблицы.ХарактеристикаНоменклатуры,
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Формирование движений по регистрам по регламентированному учету.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, УчетнаяПолитика, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
		
	Если Не глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух
	   И НЕ Отказ
	   И Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
	Тогда
		
		УчетЗатратПоЗаказамНаПроизводство = мУчетнаяПолитикаБух.УчетЗатратПоЗаказамНаПроизводство;
		
		ТаблицаПоТоварамНЗП = ТаблицаПоТоварам.Скопировать();
		
		ИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
		
		КолвоЭлементов = ТаблицаПоТоварамНЗП.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
	   		СтрокаТаблицы = ТаблицаПоТоварамНЗП[КолвоЭлементов - ОбратныйИндекс];
	  
	   		Если СтрокаТаблицы.ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
	      		ТаблицаПоТоварамНЗП.Удалить(СтрокаТаблицы);
			Иначе
				Если Не СтрокаТаблицы.ВестиУчетПоСериямВНЗП Тогда
					СтрокаТаблицы.СерияЗатраты = Справочники.СерииНоменклатуры.ПустаяСсылка();
				КонецЕсли;
				СтрокаТаблицы.Заказ = УправлениеПроизводством.ПолучитьЗаказДляУчетаЗатрат(СтрокаТаблицы.Заказ, , УчетЗатратПоЗаказамНаПроизводство, ИспользоватьЗаказыНаПроизводство);
			КонецЕсли;

		КонецЦикла;
		
		// ПРИХОД ТОВАРОВ ПО РЕГИСТРУ НезавершенноеПроизводство.
		НаборДвижений = Движения.НезавершенноеПроизводствоБухгалтерскийУчет;
		
		ТабИмен = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварамНЗП, ТабИмен, "СчетЗатратБУ", "СчетУчета");
						
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварамНЗП);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
		ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТоварамНЗП, ТабИмен);
					
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",	 Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение", ПодразделениеОрганизации);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации",   Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеКоличестваВПроизводствоОперативно);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СписаниеПартий",Истина);
						
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()


// Формирование движений по регистру "Товары организаций".
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Проверка остатков при оперативном проведении.
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварам);
						
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
							
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		
		Если НЕ СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
		КонецЕсли;
								
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// Формирование движений по регистру "Товары организаций (Регл)".
//
Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	НаборДвижений = Движения.ТоварыОрганизацийРегл;
	

	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		
		ТабИмен = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварам, ТабИмен, "Счет", "СчетУчетаБУ");
		
		СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварам);
						
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТоварам, ТабИмен);
							
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		
		Если НЕ ВестиПартионныйУчетПоСкладамРегл Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	УчетЗатратПоЗаказамНаПроизводство = мУчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство;

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	Если ВидОперации = Перечисления.ВидыОперацийТребованиеНакладная.Оборудование Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование,"ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,"ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус3");
	КонецЕсли;
		
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		
		Если СтрокаТЧ.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			Строка.ДопустимыйСтатус2 = Перечисления.СтатусыПартийТоваров.ВПереработку;
		Иначе
			Строка.ДопустимыйСтатус2 = Перечисления.СтатусыПартийТоваров.Купленный;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ПодразделениеОрганизации,		"ПодразделениеОрганизации");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 	"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,                	"Организация");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТабличнойЧасти = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти.СтатьяЗатрат);
		
		Если ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			
			Строка.КорСубконтоБУ1 = Строка.ОбъектСтроительства;
			Строка.КорСубконтоБУ2 = Строка.СтатьяЗатрат;
		КонецЕсли;
		
	КонецЦикла;
	
	// Этот документ может делать корректировки по использованию партий
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,      "КорректироватьПартииНУ");
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл()

// Формирование движений по регистру "Списанные товары".
//
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	ТабИмен = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварам, ТабИмен, "НалоговоеНазначение"     , "НалоговоеНазначениеПоФакту");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварам, ТабИмен, "НалоговоеНазначениеДоходовИЗатрат" , "НалоговоеНазначениеНовое");
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам), ТаблицаДвижений);
	
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТоварам, ТабИмен);
	
	// Недостающие поля.
	
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		
		СтатьяЗатрат = Строка.СтатьяЗатрат;
				
		Если СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеПартийВПроизводствоОперативно;
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаБрак;
		ИначеЕсли СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаВложенияВоВнеоборотныеАктивы;
		Иначе
			Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты;
		КонецЕсли;
		Если Строка.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы 
		   И Строка.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
		КонецЕсли;
		
	КонецЦикла;
	
	мИндексСтрокиСписанныеТовары = Инд;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

	//Коновалова 28022013 +
	Если Не РольДоступна("ПолныеПрава") И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ТОгда
		 Сообщить("Нельзя провести документ без отражения по бух. учету!
		          | Заполните галочку бух. учет.");
		Отказ = Истина;		  
	КонецЕсли;
	//Коновалова 28022013 -
	//ИЗМЕНЕНО Верескул Игорь(Начало 10.08.2017
    Отказ = ПроверитьСтатьиЗатрат(); 
    //Окончание)Верескул Игорь 
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад" 				, "ВидСклада" 						, "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "ВестиПартионныйУчетПоСкладам"    , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"      , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуруШапкиПодразделениемОрганизации(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли; 
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		мУчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Материалы".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              	, "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"              , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Услуга"                    	, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     	, "Номенклатура.Набор");
	СтруктураПолей.Вставить("ВестиОперативныйУчетОстатковНЗП", "Номенклатура.ВестиОперативныйУчетОстатковНЗП");
	СтруктураПолей.Вставить("Количество"                	, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"	, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         	, "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиУчетПоСериямВНЗП"         , "Номенклатура.ВестиУчетПоСериямВНЗП");
	СтруктураПолей.Вставить("Склад"                         , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                     , "Склад.ВидСклада");
	
	СтруктураПолей.Вставить("Качество"         				, "Качество");
	СтруктураПолей.Вставить("ДокументРезерва"         		, "ЗаказРезерв");
	СтруктураПолей.Вставить("Заказ"         				, "Заказ");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"         		, "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("ЗаказСписания"         		, "Заказ");
	СтруктураПолей.Вставить("ЗаказПартии"         			, "ЗаказРезерв");
	СтруктураПолей.Вставить("ЗаказРезерв"         	        , "ЗаказРезерв");
	СтруктураПолей.Вставить("ДоговорКонтрагента"         	, "Заказ.ДоговорКонтрагента");
	
	СтруктураПолей.Вставить("Затрата"              			, "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаЗатраты"			, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияЗатраты"         			, "СерияНоменклатуры");
	
	СтруктураПолей.Вставить("СтатьяЗатрат"         			, "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат"      			, "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ВидЗатрат"      				, "СтатьяЗатрат.ВидЗатрат");
	СтруктураПолей.Вставить("СтатусМатериальныхЗатрат"      , "СтатьяЗатрат.СтатусМатериальныхЗатрат");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"         	, "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Продукция"         			, "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции"       , "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукции"         		, "СерияПродукции");
	СтруктураПолей.Вставить("ОбъектСтроительства"         	, "ОбъектСтроительства");
	СтруктураПолей.Вставить("Проект"         				, "Проект");
	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатурыНовая", "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияНоменклатурыНовая"        , "СерияПродукции");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей" , "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	
	СтруктураПолей.Вставить("Комплект", 						"Номенклатура.Комплект");
	
	СтруктураОбрабатываемыхКолонок = Новый Структура();
	ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок);
	
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	//Заполнение незаполненных СтатьиЗатрат и НоменклатурнойГруппы по Номенклатуре в Таблице товаров
	ОбщегоНазначенияКлиентСервер.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВТаблицеДокумента(ТаблицаПоТоварам, СтруктураОбрабатываемыхКолонок);
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Материалы", ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ОчиститьНалоговыеНазначенияПринятыхВПереработку(ТаблицаПоТоварам);
	
	ПроверкаРеквизитовТЧ(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьКорректностьСчетовУчетаМатериалы(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ИспользоватьРегистрСвободныеОстатки = глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки"); 
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
		Если ИспользоватьРегистрСвободныеОстатки И 
			Материалы.Количество() <> 0 
			И НЕ Отказ Тогда
			Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
				Движения.СвободныеОстатки.БлокироватьДляИзменения = Истина;
			КонецЕсли;
			Движения.Записать();
			РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
				"Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ДвиженияЗатрат = Движения.ЗатратыБухгалтерскийУчет;
		ДвиженияЗатрат.Прочитать();
		
		тзЗатраты = ДвиженияЗатрат.Выгрузить(, "СтатьяЗатрат, Подразделение, Сумма");
		тзЗатраты.Свернуть("СтатьяЗатрат, Подразделение", "Сумма");
		
		Если тзЗатраты.Количество() > 0 Тогда
			тзЗатратыПоПодразделениям = Бюджетирование.ВыполнитьКонтрольПревышенияБюджета(ЭтотОбъект, тзЗатраты, Отказ);
			
			Если НЕ ЭтотОбъект.ПревышенБюджет И тзЗатратыПоПодразделениям <> Неопределено Тогда
				Бюджетирование.СформироватьДвиженияФактическихЗатратПоБюджетам(ЭтотОбъект, тзЗатратыПоПодразделениям);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ПревышенБюджет Тогда
		Бюджетирование.ОчиститьЗаписиРегистраПревышений(ЭтотОбъект);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));

КонецПроцедуры	// ОбработкаПроведения()

//Процедура добавляет в структуру полей сведения о СтатьеЗатрат и НоменклатурнойГруппе из Номенклатуры
//	Эти сведения впоследствии могут пригодиться для заполнения незаполненных Статьи и НоменклатурнойГруппы
//	Также процедура готовит структуру, сопоставляющую поля из табличной части документа и поля из номенклатуры
Процедура ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок)
	СтруктураПолей.Вставить("СтатьяЗатратНоменклатуры"				, "Номенклатура.СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатратНоменклатуры"			, "Номенклатура.СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ВидЗатратНоменклатуры"					, "Номенклатура.СтатьяЗатрат.ВидЗатрат");
	СтруктураПолей.Вставить("СтатусМатериальныхЗатратНоменклатуры"	, "Номенклатура.СтатьяЗатрат.СтатусМатериальныхЗатрат");
	СтруктураПолей.Вставить("НоменклатурнаяГруппаНоменклатуры"		, "Номенклатура.НоменклатурнаяГруппаЗатрат");
	
	СтруктураОбрабатываемыхКолонок = Новый Структура();
	СтруктураОбрабатываемыхКолонок.Вставить("СтатьяЗатрат", 			"СтатьяЗатратНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("НоменклатурнаяГруппа", 	"НоменклатурнаяГруппаНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("ХарактерЗатрат", 			"ХарактерЗатратНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("ВидЗатрат", 				"ВидЗатратНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("СтатусМатериальныхЗатрат", "СтатусМатериальныхЗатратНоменклатуры");
КонецПроцедуры

// Процедура заполнения на основании потребностей производства по заданию на производство
//
Процедура ОбработкаЗаполненияПоЗаданиюНаПроизводство(ДокЗадание) Экспорт
	
	// Подготовим переменные.
	ТабПродукция = Новый ТаблицаЗначений;
	ТабПродукция.Колонки.Добавить("Номенклатура");
	ТабПродукция.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабПродукция.Колонки.Добавить("ЕдиницаИзмерения");
	ТабПродукция.Колонки.Добавить("Количество");
	ТабПродукция.Колонки.Добавить("Спецификация");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗаданиеНаПроизводствоВыпускТехПроцесс.Номенклатура,
	|	ЗаданиеНаПроизводствоВыпускТехПроцесс.ХарактеристикаНоменклатуры,
	|	ЗаданиеНаПроизводствоВыпускТехПроцесс.ЕдиницаИзмерения,
	|	ЗаданиеНаПроизводствоВыпускТехПроцесс.Количество,
	|	ЗаданиеНаПроизводствоВыпускТехПроцесс.Спецификация,
	|	ЗаданиеНаПроизводствоВыпускТехПроцесс.Заказ КАК Заказ,
	|	ЗаданиеНаПроизводствоВыпускТехПроцесс.НомерСтроки
	|ИЗ
	|	Документ.ЗаданиеНаПроизводство.ВыпускТехПроцесс КАК ЗаданиеНаПроизводствоВыпускТехПроцесс
	|ГДЕ
	|	ЗаданиеНаПроизводствоВыпускТехПроцесс.Ссылка = &ДокОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаданиеНаПроизводствоВыпускТехПроцесс.НомерСтроки
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Заказ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр( "ДокОснование", ДокЗадание);
	
	РезЗапроса = Запрос.Выполнить();
	ОбходПоЗаказам = РезЗапроса.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоЗаказам.Следующий() Цикл
		
		ТабПродукция.Очистить();
		Обход = ОбходПоЗаказам.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Обход.Следующий() Цикл
			НоваяСтрока = ТабПродукция.Добавить();
			НоваяСтрока.Номенклатура               = Обход.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения           = Обход.ЕдиницаИзмерения;
			НоваяСтрока.Спецификация               = Обход.Спецификация;
			НоваяСтрока.Количество                 = Обход.Количество;
		КонецЦикла;
		
		СтруктРезультат = Новый Структура;
		СтруктРезультат.Вставить( "Потребности");
				
		СтруктПараметры = Новый Структура;
		СтруктПараметры.Вставить( "ДатаСпецификации", Дата);
		СтруктПараметры.Вставить( "ПараметрыВыпуска", Неопределено);
		
		Если РазузлованиеНоменклатуры.ПолучитьПотребность(ТабПродукция, СтруктРезультат, СтруктПараметры).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
			
		ТабМатериалы = СтруктРезультат["Потребности"];
		
		Для Каждого СтрокаМат Из ТабМатериалы Цикл
			
			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаМат.Материал;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаМат.ХарактеристикаМатериала;
			НоваяСтрока.ЕдиницаИзмерения           = СтрокаМат.ЕдиницаИзмеренияМатериала;
			НоваяСтрока.Количество                 = СтрокаМат.КоличествоМатериала;
			НоваяСтрока.СтатьяЗатрат               = СтрокаМат.СтатьяЗатрат;
			
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Качество    = Справочники.Качество.Новый;
			НоваяСтрока.Заказ       = ОбходПоЗаказам.Заказ;
			
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, Ссылка);
			УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(НоваяСтрока);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Материалы", ОтражатьВБухгалтерскомУчете);
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполненияПоЗаданиюНаПроизводство()

// Процедура заполнения на основании плана производства по сменам
//
Процедура ОбработкаЗаполненияПоПлануПроизводстваПоСменам(ДокПлан)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПланПроизводстваПоСменамПотребностиПроизводства.Номенклатура,
	|	ПланПроизводстваПоСменамПотребностиПроизводства.ХарактеристикаНоменклатуры,
	|	ПланПроизводстваПоСменамПотребностиПроизводства.Заказ,
	|	ПланПроизводстваПоСменамПотребностиПроизводства.Проект,
	|	СУММА(ПланПроизводстваПоСменамПотребностиПроизводства.КоличествоИзвне) КАК Количество,
	|	ПланПроизводстваПоСменамПотребностиПроизводства.Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ПланПроизводстваПоСменамПотребностиПроизводства.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ПланПроизводстваПоСменамПотребностиПроизводства.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
	|ИЗ
	|	Документ.ПланПроизводстваПоСменам.ПотребностиПроизводства КАК ПланПроизводстваПоСменамПотребностиПроизводства
	|ГДЕ
	|	ПланПроизводстваПоСменамПотребностиПроизводства.Ссылка = &ДокПлан
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланПроизводстваПоСменамПотребностиПроизводства.Номенклатура,
	|	ПланПроизводстваПоСменамПотребностиПроизводства.ХарактеристикаНоменклатуры,
	|	ПланПроизводстваПоСменамПотребностиПроизводства.Заказ,
	|	ПланПроизводстваПоСменамПотребностиПроизводства.Проект";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "ДокПлан", ДокПлан);
	
	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		
		НоваяСтрока = Материалы.Добавить();
		НоваяСтрока.Номенклатура               = Обход.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Обход.ЕдиницаИзмерения;
		НоваяСтрока.Количество                 = Обход.Количество;
		НоваяСтрока.СтатьяЗатрат               = Обход.СтатьяЗатрат;
			
		НоваяСтрока.Коэффициент = Обход.Коэффициент;
		НоваяСтрока.Качество    = Справочники.Качество.Новый;
		НоваяСтрока.Заказ       = Обход.Заказ;
			
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, Ссылка);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл  ( НоваяСтрока, "Материалы", ОтражатьВБухгалтерскомУчете);
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполненияПоПлануПроизводстваПоСменам()

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(Основание)
	
	ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВУправленческомУчете");
	ОтражатьВБухгалтерскомУчете  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете");
		
	ДокументОснование = Основание;
		
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполнение шапки
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Склад = Основание.СкладОрдер;
		
		Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		КонецЕсли;
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Основание.Сделка)
		   И Не Основание.Сделка.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Заказ = Основание.Сделка;
		КонецЕсли;
			
	    ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг(Основание);
				
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")
		  ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		
		// Заполнение шапки
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		Комментарий                  = Основание.Комментарий;
		Ответственный                = Основание.Ответственный;
		Организация                  = Основание.Организация;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		Подразделение                = Основание.Подразделение;
		ПодразделениеОрганизации     = Основание.ПодразделениеОрганизации;
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
			Склад                    = Основание.Склад;
		КонецЕсли;
		
		ТаблицаМатериалы = Материалы.Выгрузить();
		ТаблицаМатериалы.Очистить();
		
		Если Основание.РаспределениеМатериалов.Количество() > 0 Тогда
			
			ЕстьСчетЗатратВТЧ = Истина;
			
			Для Каждого ТекСтрокаМатериалы Из Основание.РаспределениеМатериалов Цикл
				
				НоваяСтрока = ТаблицаМатериалы.Добавить();
				НоваяСтрока.Номенклатура               = ТекСтрокаМатериалы.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаМатериалы.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры          = ТекСтрокаМатериалы.СерияНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаМатериалы.ЕдиницаИзмерения;
				НоваяСтрока.Количество                 = ТекСтрокаМатериалы.Количество;
				НоваяСтрока.Коэффициент                = ТекСтрокаМатериалы.Коэффициент;
				НоваяСтрока.НоменклатурнаяГруппа       = ТекСтрокаМатериалы.НоменклатурнаяГруппа;
				НоваяСтрока.Качество                   = Справочники.Качество.Новый;
				
				Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
					НоваяСтрока.СтатьяЗатрат           = ?( Основание.ВводитьСтатьиЗатратПоСтрокам, ТекСтрокаМатериалы.СтатьяЗатрат, Основание.СтатьяЗатрат);
					НоваяСтрока.Заказ                  = ТекСтрокаМатериалы.Заказ;
					Если ТипЗнч(ТекСтрокаМатериалы.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") И ТекСтрокаМатериалы.Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
						НоваяСтрока.ЗаказРезерв = ТекСтрокаМатериалы.Заказ;				
					КонецЕсли; 
				Иначе
					НоваяСтрока.СтатьяЗатрат           = ТекСтрокаМатериалы.СтатьяЗатрат;
					НоваяСтрока.Заказ                  = Основание.Сделка;
				КонецЕсли;
				
				//Если переработка, то счета затрат нельзя брать из документа основания, так как
				//в документе-основании это балансовые счета, а в требовании-накладной забалансовые.
				//Здесь мы заполняем всегда, а ниже для переработки перезаполним.
				НоваяСтрока.СчетЗатрат                 = ТекСтрокаМатериалы.СчетЗатрат;
				
			КонецЦикла;
			
		Иначе
			
			ЕстьСчетЗатратВТЧ = Ложь;
			
			Для Каждого ТекСтрокаМатериалы Из Основание.Материалы Цикл
				
				НоваяСтрока = ТаблицаМатериалы.Добавить();
				НоваяСтрока.Номенклатура               = ТекСтрокаМатериалы.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаМатериалы.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры          = ТекСтрокаМатериалы.СерияНоменклатуры;
				НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаМатериалы.ЕдиницаИзмеренияМест;
				НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаМатериалы.ЕдиницаИзмерения;
				НоваяСтрока.Количество                 = ТекСтрокаМатериалы.Количество;
				НоваяСтрока.Коэффициент                = ТекСтрокаМатериалы.Коэффициент;
				НоваяСтрока.КоличествоМест 			   = ?(НоваяСтрока.Коэффициент <> 0, НоваяСтрока.Количество * НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / НоваяСтрока.Коэффициент, 0);
				НоваяСтрока.НоменклатурнаяГруппа       = ТекСтрокаМатериалы.Номенклатура.НоменклатурнаяГруппаЗатрат;
				НоваяСтрока.Качество                   = Справочники.Качество.Новый;
				
				Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
					НоваяСтрока.СтатьяЗатрат           = ?( Основание.ВводитьСтатьиЗатратПоСтрокам, ТекСтрокаМатериалы.СтатьяЗатрат, Основание.СтатьяЗатрат);
					НоваяСтрока.Заказ                  = ТекСтрокаМатериалы.Заказ;
				Иначе
					НоваяСтрока.СтатьяЗатрат           = ТекСтрокаМатериалы.СтатьяЗатрат;
					НоваяСтрока.Заказ                  = Основание.Сделка;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТаблицаМатериалы.ЗаполнитьЗначения(Склад, "Склад");
		ТаблицаМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмеренияМест, ЕдиницаИзмерения, Коэффициент, 
								|НоменклатурнаяГруппа, СтатьяЗатрат, Заказ, ЗаказРезерв, Качество, Счет, СчетЗатрат, ЗаказРезерв, Склад",
								  "КоличествоМест, Количество");
		Материалы.Загрузить(ТаблицаМатериалы);
		
		Для Каждого ДанныеСтроки Из Материалы Цикл
			НадоЗаполнятьСчетаЗатрат = 
			//1 случай - его не было в ТЧ совсем (не использовалась для заполнения ТЧ РаспределениеМатериалов)
			НЕ ЕстьСчетЗатратВТЧ  
			//2 случай - для переработки нельзя брать счет затрат из РаспределенияМатериалов, т.к. он там балансовый, а здесь нужен забалансовый
			ИЛИ	ДанныеСтроки.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку;
	
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(ДанныеСтроки, "Материалы", ОтражатьВБухгалтерскомУчете, , НадоЗаполнятьСчетаЗатрат);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		Если Не УправлениеЗаказами.ИспользоватьВнутренниеЗаказы() Тогда
			Возврат;
		КонецЕсли;
		Если Основание.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			Возврат;
		КонецЕсли;
		
		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		Подразделение = Основание.Заказчик;
		Организация   = Основание.Организация;
		Ответственный = Основание.Ответственный;
		Комментарий   = Основание.Комментарий;
		Контрагент	  = Основание.Контрагент;
		Проект		  = Основание.Проект;            
		
		// Для корректного заполнения счетов БУ и НУ, которые зависят от подразеделения организации
		ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		РезультатЗапроса = ОстаткиТоваровПоВнутреннемуЗаказу_СУчетомРезервов(Основание, Дата);
		ЗаполнитьМатериалыПоВнутреннемуЗаказу(РезультатЗапроса);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АктОтбораПробНоменклатуры") Тогда
		
		// Заполнение шапки
		Организация   = Основание.Организация;
		Склад         = Основание.Склад;
		Подразделение = Основание.Подразделение;
		
		// Для корректного заполнения счетов БУ и НУ, которые зависят от подразеделения организации
		ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;

		ТаблицаМатериалы = Материалы.Выгрузить();
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийАктОтбораПробНоменклатуры.ДляВнешнейСертификации Тогда
			
			НоваяСтрока = ТаблицаМатериалы.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = Основание.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент                = Основание.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			НоваяСтрока.Количество                 = Основание.Испытания;
			НоваяСтрока.Номенклатура               = Основание.Номенклатура;
			НоваяСтрока.СерияНоменклатуры          = Основание.СерияНоменклатуры;
			НоваяСтрока.СтатьяЗатрат = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтатьяЗатратОтбораПробВнешняя");
			НоваяСтрока.Качество                   = Справочники.Качество.Новый;
			
			НоваяСтрока = ТаблицаМатериалы.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = Основание.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент                = Основание.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			НоваяСтрока.Количество                 = Основание.КонтрольнаяПроба;
			НоваяСтрока.Номенклатура               = Основание.Номенклатура;
			НоваяСтрока.СерияНоменклатуры          = Основание.СерияНоменклатуры;
			НоваяСтрока.СтатьяЗатрат = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтатьяЗатратОтбораПробВнешняя");
			НоваяСтрока.Качество                   = Справочники.Качество.Новый;
			
		Иначе
		
			ТабЧастьКопия = Основание.РаспределениеПоЛабораториям.Выгрузить();
			ТабЧастьКопия.Свернуть("Подразделение");
			Если ТабЧастьКопия.Количество() = 1 Тогда
				// Первое, оно же единственное подразделение из таб.части.
				Подразделение = ТабЧастьКопия[0].Подразделение;
			ИначеЕсли ТабЧастьКопия.Количество() = 0 Тогда
				Подразделение = Основание.Подразделение;
			Иначе
				// Первое подразделение из таб.части.
				СписокВыбора = Новый СписокЗначений;
				СписокВыбора.ЗагрузитьЗначения( ТабЧастьКопия.ВыгрузитьКолонку("Подразделение"));
				СписокВыбора.СортироватьПоПредставлению();
				Выбор = СписокВыбора.ВыбратьЭлемент("Выберите тестирующее подразделение (лабораторию).");
				Если Выбор = Неопределено Тогда // Не заполнять таб.часть.
					Подразделение = Неопределено;
				Иначе
					Подразделение = Выбор.Значение;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ТекСтрокаТовары Из Основание.РаспределениеПоЛабораториям Цикл
			
				Если Не ТекСтрокаТовары.Подразделение = Подразделение Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаМатериалы.Добавить();
				НоваяСтрока.ЕдиницаИзмерения           = Основание.Номенклатура.ЕдиницаХраненияОстатков;
				НоваяСтрока.Коэффициент                = Основание.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
				НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
				НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.Количество;
				НоваяСтрока.Номенклатура               = Основание.Номенклатура;
				НоваяСтрока.СерияНоменклатуры          = Основание.СерияНоменклатуры;
				НоваяСтрока.СтатьяЗатрат = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтатьяЗатратОтбораПробВнутренняя");
				НоваяСтрока.Качество                   = Справочники.Качество.Новый;
				
			КонецЦикла;
												
		КонецЕсли;
		
		ТаблицаМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения, Коэффициент, НоменклатурнаяГруппа, СтатьяЗатрат, Заказ, Качество, Счет, СчетЗатрат, ЗаказРезерв",
								  "КоличествоМест, Количество");
		Материалы.Загрузить(ТаблицаМатериалы);

		ЗаполнитьСчетаУчетаВТабЧасти(Материалы, "Материалы", ОтражатьВБухгалтерскомУчете);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		// Заполнение шапки
		Организация = Основание.Организация;
		Склад       = Основание.Склад;
		
		// Для корректного заполнения счетов БУ и НУ, которые зависят от подразеделения организации
		ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из Основание.Товары Цикл
			
			Недостача = СтрокаТЧ.КоличествоУчет - СтрокаТЧ.Количество;
			Если Недостача <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.Склад                        = Основание.Склад;
			НоваяСтрока.Номенклатура                 = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения             = СтрокаТЧ.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест         = СтрокаТЧ.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                  = СтрокаТЧ.Коэффициент;
			НоваяСтрока.Качество                     = СтрокаТЧ.Качество;
			НоваяСтрока.СерияНоменклатуры            = СтрокаТЧ.СерияНоменклатуры;
			НоваяСтрока.НоменклатурнаяГруппа         = НоваяСтрока.Номенклатура.НоменклатурнаяГруппа;
			НоваяСтрока.СтатьяЗатрат                 = НоваяСтрока.Номенклатура.СтатьяЗатрат;
			НоваяСтрока.Количество                   = Недостача;
			НоваяСтрока.ХарактеристикаНоменклатуры   = СтрокаТЧ.ХарактеристикаНоменклатуры;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл  ( НоваяСтрока, "Материалы", Истина);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаданиеНаПроизводство") Тогда
		
		// Заполнение шапки
		Организация   = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Подразделение = Основание.Подразделение;
		ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		ОбработкаЗаполненияПоЗаданиюНаПроизводство(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПланПроизводстваПоСменам") Тогда
		
		Организация   = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Подразделение = Основание.Подразделение;
		ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		ОбработкаЗаполненияПоПлануПроизводстваПоСменам(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Организация              = Основание.Организация;
		Подразделение            = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");
		ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		Склад = Основание.СкладПолучатель;
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		
		Для Каждого СтрокаТЧ Из Основание.Товары Цикл
			
			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = СтрокаТЧ.СерияНоменклатуры;
			
			НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
			НоваяСтрока.КоличествоМест             = СтрокаТЧ.КоличествоМест;
			НоваяСтрока.Коэффициент                = СтрокаТЧ.Коэффициент;
			НоваяСтрока.ЕдиницаИзмерения           = СтрокаТЧ.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = СтрокаТЧ.ЕдиницаИзмеренияМест;
			НоваяСтрока.Склад                      = Основание.СкладПолучатель;
			
			НоваяСтрока.Заказ                      = СтрокаТЧ.ДокументРезерва;
			НоваяСтрока.Качество                   = СтрокаТЧ.Качество;
			
			НоваяСтрока.Счет                       = СтрокаТЧ.НовыйСчетУчетаБУ;
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ЭтотОбъект);

			УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(НоваяСтрока);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл  (НоваяСтрока, "Материалы", ОтражатьВБухгалтерскомУчете);
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(НоваяСтрока, ПодразделениеОрганизации, НоваяСтрока.СтатьяЗатрат);

			//СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
						
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
	
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		// Попробуем заполнить подразделение организации.
		ПодразделениеОрганизации = УправлениеЗатратами.ПолучитьПодразделениеОрганизации(
			Организация,
			Подразделение,
			ОтражатьВБухгалтерскомУчете
		);
												  
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		ЗаказыНаПроизводствоИПереработку.ЗаполнитьТребованиеНакладнаяПоРезервамЗаказаНаПроизводство(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
	
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;	
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
       	       		
		Для Каждого ТекСтрокаМатериалы Из Основание.Материалы Цикл  			               
			
			НоваяСтрока = Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаМатериалы);
			
			УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(НоваяСтрока);
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(НоваяСтрока, ПодразделениеОрганизации, НоваяСтрока.СтатьяЗатрат);
			
		КонецЦикла;  
		
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВыпускПродукции") Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
		
		ТабПродукция = Основание.Продукция.Выгрузить();
		ТабМатериалы = Материалы.Выгрузить();
		СтруктураДопКолонок = Новый Структура("Заказ, НоменклатурнаяГруппа");
		
		УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабМатериалы, ТабПродукция, СтруктураДопКолонок,, Дата);
		ТабМатериалы.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		
		ТабМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, НоменклатурнаяГруппа, Заказ, Коэффициент, Качество", "Количество");
		
		Для Каждого СтрокаМат Из ТабМатериалы Цикл
			НоваяСтрока = Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМат);
			НоваяСтрока.СтатьяЗатрат = СтрокаМат.Номенклатура.СтатьяЗатрат;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, Ссылка);
		КонецЦикла;
		ЗаполнитьСчетаУчетаВТабЧасти(Материалы, "Материалы", ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		// Заполнение по настройке
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.ТребованиеНакладная.СтруктураДополнительныхДанныхФормы());
		
	Иначе
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		Если НЕ ЗначениеЗаполнено(Проект) Тогда
			Проект = Подразделение.ОсновнойПроект;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ЗаполнитьМатериалыПоВнутреннемуЗаказу(РезультатЗапроса) Экспорт
	СоотвСтрок     = Новый Соответствие;
	МассивОстатков = Новый Массив;

	ОбходНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходНоменклатура.Следующий() Цикл
		ОбходХарактеристика = ОбходНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходХарактеристика.Следующий() Цикл
		
			МассивОстатков.Очистить();
			
			Обход = ОбходХарактеристика.Выбрать();
			Пока Обход.Следующий() Цикл
				
				Если Обход.Источник = 1 Тогда // Это строка с остатком. Добавляем в документ
					
					НоваяСтрока = Материалы.Добавить();
					НоваяСтрока.Номенклатура = Обход.Номенклатура;
					
					НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения = Обход.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент      = Обход.Коэффициент;
					НоваяСтрока.Количество 		 = Обход.КолОстаток * Обход.ЕдиницаХраненияКоэффициент / НоваяСтрока.Коэффициент;
					НоваяСтрока.Качество 		 = Справочники.Качество.Новый;
					НоваяСтрока.ВнутреннийЗаказ	 = Обход.ВнутреннийЗаказ;
					НоваяСтрока.СтатьяЗатрат     = Обход.Номенклатура.СтатьяЗатрат;
                    //ИЗМЕНЕНО Верескул Игорь(Начало 02.02.2016
                      ЗапросПоЦенам = Новый Запрос;
                      ЗапросПоЦенам.Текст="ВЫБРАТЬ
                                          | ВнутреннийЗаказТовары.НомерСтроки,
                                          | ВнутреннийЗаказТовары.Номенклатура,
                                          | ВнутреннийЗаказТовары.Цена,
                                          | ВнутреннийЗаказТовары.Сумма
                                          |ИЗ
                                          | Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
                                          |ГДЕ
                                          | ВнутреннийЗаказТовары.Ссылка = &Ссылка
                                          | И ВнутреннийЗаказТовары.Номенклатура = &Номенклатура";
                     ЗапросПоЦенам.УстановитьПараметр("Ссылка", Обход.ВнутреннийЗаказ);
                     ЗапросПоЦенам.УстановитьПараметр("Номенклатура", Обход.Номенклатура);
                     ТабЦен = ЗапросПоЦенам.Выполнить().Выгрузить();
                     Если ТабЦен.Количество()> 0 Тогда
                        НоваяСтрока.Цена = ТабЦен [0].Цена;
                        НоваяСтрока.Сумма = ТабЦен [0].Сумма;
                     КонецЕсли; 
                     ЭтотОбъект.ТипЦен = Обход.ВнутреннийЗаказ.ТипЦен;
                    //Окончание)Верескул Игорь 
					МассивОстатков.Добавить(НоваяСтрока);
					СоотвСтрок.Вставить(НоваяСтрока);
					
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект); 
					ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Материалы", ОтражатьВБухгалтерскомУчете);

				Иначе
				
					НадоРазместить = Обход.КолРезерв;
					
					Пока НадоРазместить > 0 И МассивОстатков.Количество() > 0 Цикл
						Если не мУказаниеСкладовВТЧ Тогда
							Если ЗначениеЗаполнено(Склад) Тогда
								Если Склад<>Обход.Склад Тогда
									Прервать;
								КонецЕсли;	
							Иначе
								Склад = Обход.Склад;
							КонецЕсли;
						КонецЕсли;
						
						НадоРазместить = НадоРазместить * МассивОстатков[0].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / МассивОстатков[0].Коэффициент;
						
						МожноРазместить = Мин( Макс(МассивОстатков[0].Количество, 0), НадоРазместить);
						
						НоваяСтрока = Материалы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивОстатков[0]);
						СоотвСтрок.Вставить(НоваяСтрока);
						
						НоваяСтрока.Количество         = МожноРазместить;
						НоваяСтрока.ЗаказРезерв 	   = Обход.ВнутреннийЗаказ;
						НоваяСтрока.Склад 			   = Обход.Склад;
						
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект); 
						ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Материалы", ОтражатьВБухгалтерскомУчете);

						// Скорректируем исходную строку на размещенное количество
						МассивОстатков[0].Количество = МассивОстатков[0].Количество - МожноРазместить;
						Если МассивОстатков[0].Количество <= 0 Тогда
							СоотвСтрок.Удалить(МассивОстатков[0]);
							Материалы.Удалить(МассивОстатков[0]);
							МассивОстатков.Удалить(0);
						КонецЕсли;
						
						НадоРазместить = НадоРазместить - МожноРазместить;
					
					КонецЦикла;
					
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьМатериалыПоВнутреннемуЗаказу

Функция ОстаткиТоваровПоВнутреннемуЗаказу_СУчетомРезервов( Заказ, Знач КонДата) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 															 КАК Источник,
	|	ВнутренниеЗаказыОстатки.Номенклатура                         КАК Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
	|	ВнутренниеЗаказыОстатки.КоличествоОстаток          			 КАК КолОстаток,
	|	ВнутренниеЗаказыОстатки.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
	|	ВнутренниеЗаказыОстатки.ЕдиницаИзмерения.Коэффициент         КАК Коэффициент,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияКоэффициент,
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ                      КАК ВнутреннийЗаказ,
	|	0 															 КАК КолРезерв,
	|	NULL 														 КАК Склад
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&КонДата, ВнутреннийЗаказ = &Заказ ) КАК ВнутренниеЗаказыОстатки
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 
	|	2 													КАК Источник,
	|	РезервыОстатки.Номенклатура                         КАК Номенклатура,
	|	РезервыОстатки.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
	|	0          			 								КАК КолОстаток,
	|	NULL                     							КАК ЕдиницаИзмерения,
	|	РезервыОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
	|	1         											КАК Коэффициент,
	|	РезервыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияКоэффициент,
	|	РезервыОстатки.ДокументРезерва                      КАК ВнутреннийЗаказ,
	|	РезервыОстатки.КоличествоОстаток          			КАК КолРезерв,
	|	РезервыОстатки.Склад 								КАК Склад
	|ИЗ
    |	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&КонДата,ДокументРезерва = &Заказ %Условие_Склад%)  КАК РезервыОстатки
	|УПОРЯДОЧИТЬ ПО Источник
	|ИТОГИ
	|	СУММА(КолОстаток),
	|	СУММА(КолРезерв)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Если не мУказаниеСкладовВТЧ и ЗначениеЗаполнено(Склад) Тогда
		ТекстЗапроса = стрЗаменить(ТекстЗапроса,"%Условие_Склад%","И Склад = &Склад");
		Запрос.УстановитьПараметр( "Склад",   Склад);
	Иначе
		ТекстЗапроса = стрЗаменить(ТекстЗапроса,"%Условие_Склад%","");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();
	
КонецФункции // ОстаткиТоваровПоВнутреннемуЗаказу_СУчетомРезервов()


#Если Клиент Тогда
Процедура ЗаполнитьНалоговыеНазначенияЗапасов() Экспорт 
	
	НалоговыйУчет.ЗаполнитьНалоговыеНазначенияЗапасов(ЭтотОбъект, "Материалы", мУказаниеСкладовВТЧ);

КонецПроцедуры // ЗаполнитьНалоговыеНазначенияЗапасов
#КонецЕсли


// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаТЧ Из Материалы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
	Если Не мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.ЗаполнитьПроектВСтрокахТабЧасти(ЭтотОбъект, Материалы);
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Неопределено,         // ТабличнаяЧастьТовары
			Неопределено,         // ТабличнаяЧастьВозвратнаяТара
			Материалы,            // ТабличнаяЧастьУслуги
			Неопределено,         // ТабличнаяЧастьОборудование
			Неопределено, 		  // ТабличнаяЧастьОбъектыСтроительства
			Неопределено		  // ТабличнаяЧастьБланкиСтрогогоУчета
		);
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	Если мУказаниеСкладовВТЧ Тогда
		//Склад в шапке не надо проверять, а надо проверять склад в ТЧ
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("Склад");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ОтражатьВУправленческомУчете Тогда
		//Заполнение подразделения проверять не требуется
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("Подразделение");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Если РекламнаяПродукция И НЕ ЗначениеЗаполнено(Контрагент) Тогда
		СтрокаСообщения = Нстр("ru = 'При включенном флаге ""Реклама"" обязательно должен быть выбран контрагент на вкладке ""Дополнительно""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, "");
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		СтрокаСообщения = Нстр("ru = 'Документ нельзя оформлять на НТТ!");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Материалы, ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	//Превышение лимита в документе должно быть установлено явно
	РазрешитьПревышениеЛимита = Ложь;
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
КонецПроцедуры
//ИЗМЕНЕНО Верескул Игорь(Начало 10.08.2017
Функция ПроверитьСтатьиЗатрат()
	Для каждого Строка Из Материалы Цикл
    	Если НЕ ОбщегоНазначения.ПроверкаПоДоступностиСтатейЗатрат(Подразделение,Строка.СтатьяЗатрат) Тогда												   
            Сообщение = Новый СообщениеПользователю;
            Сообщение.Текст = "В строке №" + Строка.НомерСтроки + " статья затрат не соответствует подразделению. Проведение невозможно";
            Сообщение.Сообщить(); 
            Возврат Истина;
        КонецЕсли;
    КонецЦикла; 
    Возврат Ложь;
КонецФункции
 
//Окончание)Верескул Игорь
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мИндексСтрокиСписанныеТовары = 0;

мУказаниеПроектовВТабличнойЧастиДокументов = УправлениеПроектами.УказаниеПроектовВТабличнойЧастиДокументов();

УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");

мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
		  
ПревышенБюджет = Ложь;
