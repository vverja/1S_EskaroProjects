Перем мУдалятьДвижения;

Перем Заголовок;

Перем мНачКвартала;
Перем мКонКвартала;
Перем мНачГода;

// Начало и конец налогового периода
Перем НачПериода, КонПериода;

Перем ИтогБазыРаспределенияПоВНД;

Перем КонПериодаВключая;
Перем мКоэффициентМатериальнойСоставляющей;
Перем мКоэффициентМатериальнойСоставляющейРассчитан;

//Процедура заполнения выполняемых действий при создании нового документа
Процедура ЗаполнитьВыполняемыеДействия() Экспорт
	РаспределитьАмортизациюПоВидамНалоговойДеятельности      = Истина;
	РаспределитьСуммыУлучшенияОС                 = Истина;
	СформироватьОстатокНезавершенногоПроизводства = Истина;
	РассчитатьМатериальнуюСоставляющуюПродукции         = Истина;
	
	НормироватьРасходыНаРекламуНУ         = Истина;
	НормироватьРасходыНаСтрахованиеНУ         = Истина;
	НормироватьРасходыНаГарантийныйРемонтНУ         = Истина;
	НормироватьРасходыНаГСМНУ         = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, НачалоНалоговогоПериода, ПериодРегистрации");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если НЕ Отказ И НачПериода > КонПериода Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("Неправильно задан налоговый период!", Отказ, Заголовок);
	
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения табличной части "Статьи"
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРаспределениеВаловыхРасходовПоВНД(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидНалоговойДеятельности, Коэффициент");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеВаловыхРасходовПоВНД", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если РаспределениеВаловыхРасходовПоВНД.Количество() = 0 И
		(РаспределитьАмортизациюПоВидамНалоговойДеятельности ИЛИ РаспределитьСуммыУлучшенияОС) Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("Для распределения амортизации и сумм улучшения ОС табличная часть должна быть заполнена!", Отказ, Заголовок);
	
	КонецЕсли; 

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиРаспределениеВаловыхРасходовПоВНД()

// Распределяет накопленные на счете МодернизацияИУлучшениеГруппОсновныхСредств суммы по группам (объектам) основных средств. 
//
// Параметры
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура РаспределитьСуммыУлучшенияОС(СтруктураПараметровНУ, Отказ, Заголовок)
	
	// Определение переменных
	СчетМодернизацииПогруппно        = ПланыСчетов.Налоговый.МодернизацияИУлучшениеГруппОсновныхСредств;
	СчетМодернизацииПообъектно       = ПланыСчетов.Налоговый.МодернизацияИУлучшениеОбъектовОсновныхСредств;
	СчетУчетаПогруппно               = ПланыСчетов.Налоговый.ОсновныеСредстваУчетПоГруппам;
	СчетУчетаПообъектно              = ПланыСчетов.Налоговый.ОсновныеСредстваУчетПоОбъектам;
	СчетУчетаВыведенныхИзЭксплутации = ПланыСчетов.Налоговый.ОсновныеСредстваВыведенныеИзЭксплуатации;
	НачГода                          = НачалоГода(ПериодРегистрации);
	Год2005                          = (НачГода = Дата(2005, 01, 01));
	КонецОтчетногоПериода            = (КонПериода = КонецГода(КонПериода));
	
	// Расчет сумм модернизации
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачГода"                   , НачГода);
	Запрос.УстановитьПараметр("КонПериода"                , КонПериода);
	Запрос.УстановитьПараметр("КонПериодаВключая"         , Новый Граница(КонПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация"               , Организация);
	Запрос.УстановитьПараметр("СчетМодернизацииПогруппно" , СчетМодернизацииПогруппно);
	Запрос.УстановитьПараметр("СчетМодернизацииПообъектно", СчетМодернизацииПообъектно);
	Запрос.УстановитьПараметр("СчетУчетаПогруппно"        , СчетУчетаПогруппно);
	
	СчетаМодернизации = Новый Массив(2);
	СчетаМодернизации[0] = СчетМодернизацииПообъектно;
	СчетаМодернизации[1] = СчетМодернизацииПогруппно;
	
	Запрос.УстановитьПараметр("СчетаМодернизации", СчетаМодернизации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛОЖЬ                                       КАК Выбывшие,
	|	ИСТИНА                                     КАК Пообъектно,
	|	МодернизацияПообъектно.Субконто1           КАК ВидНалоговойДеятельности,
	|	МодернизацияПообъектно.Субконто2           КАК ОсновноеСредство,
	|	МодернизацияПообъектно.Субконто3           КАК НалоговаяГруппаОС,
	|	МодернизацияПообъектно.СуммаОстатокДт      КАК СуммаМодернизации,
	|	ЕСТЬNULL(НачислениеАмортизации.НачислятьАмортизацию, ЛОЖЬ) КАК Признак,
	|	NULL                                       КАК СтатьяСписанияСтоимости
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонПериодаВключая, 
	|	                   Счет = &СчетМодернизацииПообъектно, ,
	|	                   Организация = &Организация) КАК МодернизацияПообъектно
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&КонПериодаВключая,
	|			                Организация = &Организация) КАК НачислениеАмортизации
	|		ПО МодернизацияПообъектно.Субконто2 = НачислениеАмортизации.ОсновноеСредство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	МодернизацияПогруппно.Субконто1,
	|	МодернизацияПогруппно.Субконто3.Родитель,
	|	МодернизацияПогруппно.Субконто3,
	|	МодернизацияПогруппно.СуммаОстатокДт,
	|	ВЫБОР
	|		КОГДА ОстаткиГрупп.КоличествоОстатокДт > 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	СведенияОГруппах.СтатьяСписанияСтоимости
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонПериодаВключая, 
	|	                   Счет = &СчетМодернизацииПогруппно, ,
	|	                   Организация = &Организация) КАК МодернизацияПогруппно
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			(ВЫБРАТЬ
	|				ОстаткиГрупп.Субконто3.Родитель         КАК ОбобщеннаяГруппа,
	|				СУММА(ОстаткиГрупп.КоличествоОстатокДт) КАК КоличествоОстатокДт
	|			ИЗ
	|				РегистрБухгалтерии.Налоговый.Остатки(&КонПериода,
	|				                   Счет = &СчетУчетаПогруппно, ,
	|				                   Организация = &Организация) КАК ОстаткиГрупп
	|		
	|			СГРУППИРОВАТЬ ПО
	|				ОстаткиГрупп.Субконто3.Родитель) КАК ОстаткиГрупп
	|		ПО МодернизацияПогруппно.Субконто3.Родитель = ОстаткиГрупп.ОбобщеннаяГруппа
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СведенияОГруппахОсновныхСредствНалоговыйУчет.СрезПоследних(
	|			                &КонПериода, ) КАК СведенияОГруппах
	|		ПО МодернизацияПогруппно.Субконто3 = СведенияОГруппах.ГруппаОС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ИСТИНА,
	|	NULL,
	|	ВыбывшиеПообъектно.СубконтоКт2,
	|	NULL,
	|	СУММА(ВыбывшиеПообъектно.СуммаОборот),
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ОборотыДтКт(&НачГода, &КонПериода, ,
	|	                   (НЕ СчетДт В (&СчетаМодернизации)), , 
	|	                   СчетКт = &СчетМодернизацииПообъектно, ,
	|	                   Организация = &Организация) КАК ВыбывшиеПообъектно
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыбывшиеПообъектно.СубконтоКт2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	NULL,
	|	NULL,
	|	ВыбывшиеПогруппно.СубконтоКт3.Родитель,
	|	СУММА(ВыбывшиеПогруппно.СуммаОборот),
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ОборотыДтКт(&НачГода, &КонПериода, ,
	|	                   (НЕ СчетДт В (&СчетаМодернизации)), , СчетКт = &СчетМодернизацииПогруппно, ,
	|	                   Организация = &Организация) КАК ВыбывшиеПогруппно
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыбывшиеПогруппно.СубконтоКт3.Родитель
	|ИТОГИ
	|	СУММА(СуммаМодернизации)
	|ПО
	|	ОБЩИЕ";
	
	ВыборкаИтоговМодернизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ИтоговаяСуммаМодернизации = 0;
	
	Если ВыборкаИтоговМодернизации.Следующий() Тогда
		
		ИтоговаяСуммаМодернизации = ВыборкаИтоговМодернизации.СуммаМодернизации;
		
	КонецЕсли;
	
	Если ИтоговаяСуммаМодернизации = 0 Тогда
		
		// Нечего распределять
		Возврат
		
	КонецЕсли;
	
	ВыборкаОстатковМодернизации = ВыборкаИтоговМодернизации.Выбрать();

	// Расчет балансовой стоимости групп и основных средств на начало года.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачГода"    , НачГода);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("СчетаУчетаПообъектно", СчетУчетаПообъектно);
	
	Запрос.УстановитьПараметр("СчетУчетаПогруппно"  , СчетУчетаПогруппно);
	
	ЕстьГруппы = Истина;
	ЕстьОС     = Истина;  
	
	Если Год2005 Тогда
		
		МассивГрупп       = Новый Массив; 
		СоответствиеОС    = Новый Соответствие;
		МассивОС          = Новый Массив;
		ЕстьГруппы     = Ложь;
		
		
		Пока ВыборкаОстатковМодернизации.Следующий() Цикл
		
			Если ВыборкаОстатковМодернизации.Выбывшие Тогда
				
				Если ВыборкаОстатковМодернизации.Пообъектно Тогда
					
					Если СоответствиеОС[ВыборкаОстатковМодернизации.ОсновноеСредство] = Неопределено Тогда
						
						СоответствиеОС.Вставить(ВыборкаОстатковМодернизации.ОсновноеСредство, Истина);
						МассивОС.Добавить(ВыборкаОстатковМодернизации.ОсновноеСредство);
						
					КонецЕсли;
					
				Иначе
					
					ЕстьГруппы = Истина;
				
				КонецЕсли;
				
			Иначе
				
				Если ВыборкаОстатковМодернизации.Пообъектно Тогда
					
					Если СоответствиеОС[ВыборкаОстатковМодернизации.ОсновноеСредство] = Неопределено Тогда
						
						СоответствиеОС.Вставить(ВыборкаОстатковМодернизации.ОсновноеСредство, Истина);
						МассивОС.Добавить(ВыборкаОстатковМодернизации.ОсновноеСредство);
						
					КонецЕсли;
					
				Иначе
					
					ЕстьГруппы = Истина;
					
				КонецЕсли;
				
			КонецЕсли;	
		
		КонецЦикла;
		
		СоответствиеОС    = Неопределено;
		
		ЕстьОС = (МассивОС.Количество() > 0);    
		Запрос.УстановитьПараметр("МассивОС"  , МассивОС);
		
		ВыборкаОстатковМодернизации = ВыборкаИтоговМодернизации.Выбрать();
		
	КонецЕсли;
	
	Запрос.Текст = ?(ЕстьОС, 
	"ВЫБРАТЬ
	|	ОстаткиПообъектно.СуммаОстатокДт КАК СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|		               &НачГода,
	|		               Счет В (&СчетаУчетаПообъектно), ,
	|		               Организация = &Организация" + ?(Год2005, "
	|			И Субконто2 В (&МассивОС)", "") + ") КАК ОстаткиПообъектно" + ?(ЕстьГруппы, "
	|
	|ОБЪЕДИНИТЬ ВСЕ", ""), "") + ?(ЕстьГруппы, "
	|
	|ВЫБРАТЬ
	|	ОстаткиПогруппно.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|		               &НачГода,
	|		               Счет = &СчетУчетаПогруппно, ,
	|		               Организация = &Организация) КАК ОстаткиПогруппно", "");
	ТаблицаБалансовойСтоимостиОС = Запрос.Выполнить().Выгрузить();
	
	БалансоваяСтоимостьОСНаНачалоГода = ?(ТаблицаБалансовойСтоимостиОС.Количество() = 0, 0, ТаблицаБалансовойСтоимостиОС.Итог("СуммаОстатокДт"));
	
	// Расчет суммы включения модернизации в балансовую стоимость.
	ГодовойПределВаловыхРасходов = БалансоваяСтоимостьОСНаНачалоГода * СтруктураПараметровНУ.ГодовойПроцентОтнесенияНаВРСуммУлучшенияОС / 100;
	ИтоговаяСуммаУвеличенияБалансовойСтоимости = Макс(ИтоговаяСуммаМодернизации - ГодовойПределВаловыхРасходов, 0);
	КоэфОтнесенияНаБалансовуюСтоимость         = ИтоговаяСуммаУвеличенияБалансовойСтоимости / ИтоговаяСуммаМодернизации;
	
	Погрешность = 0;
	
	Пока ВыборкаОстатковМодернизации.Следующий() Цикл
	
		Если НЕ ВыборкаОстатковМодернизации.Выбывшие Тогда
			
			Пообъектно               = ВыборкаОстатковМодернизации.Пообъектно;
			СуммаМодернизации        = ВыборкаОстатковМодернизации.СуммаМодернизации;
			ВидНалоговойДеятельности = ВыборкаОстатковМодернизации.ВидНалоговойДеятельности;
			ОсновноеСредство         = ВыборкаОстатковМодернизации.ОсновноеСредство;
			НалоговаяГруппаОС        = ВыборкаОстатковМодернизации.НалоговаяГруппаОС;
			ГруппаСписана            = Ложь;
			СтатьяВР                 = СтруктураПараметровНУ.СтатьяВаловыхРасходовПоУлучшениюОС;
			
			СуммаУвеличенияБалансовойСтоимости = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(СуммаМодернизации
			                                                                 * КоэфОтнесенияНаБалансовуюСтоимость, 2, Погрешность);
			СуммаНаВаловыеРасходы  = СуммаМодернизации - СуммаУвеличенияБалансовойСтоимости;
			
			Если КонецОтчетногоПериода Тогда
				
				// Списание сумм модернизации
				Проводка = Движения.Налоговый.Добавить();
				
				Проводка.Период			= КонецМесяца(ПериодРегистрации);
				Проводка.Содержание		= "Списание сумм модернизации";
				Проводка.НомерЖурнала	= "ОС";
				Проводка.Организация	= Организация;
				Проводка.Сумма			= СуммаМодернизации;
				
				Если Пообъектно Тогда
					
					Проводка.СчетКт = СчетМодернизацииПообъектно;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ОсновноеСредство);
					
				Иначе
					
					Проводка.СчетКт = СчетМодернизацииПогруппно;
					
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", ВидНалоговойДеятельности);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ГруппыОсновныхСредств", 	  НалоговаяГруппаОС);
				
			КонецЕсли;
			
			Если Пообъектно Тогда
				
				НачислятьАмортизацию = ВыборкаОстатковМодернизации.Признак;
				СчетУчетаОС          = ?(НачислятьАмортизацию, СчетУчетаПообъектно, 
				                                               СчетУчетаВыведенныхИзЭксплутации);
				
			Иначе
				
				СчетУчетаОС   = СчетУчетаПогруппно;
				ГруппаСписана = ВыборкаОстатковМодернизации.Признак;
				
			КонецЕсли;			
			
			Для Н = 1 По 2 Цикл
			
				Если СуммаНаВаловыеРасходы <> 0 Тогда
					
					// 	Распределение выполняется пропорционально накопленным с начала года суммам модернизации,
					//	поэтому каждый квартал пропорция может изменяться. 
					//	Чтобы этого достичь, проводки по распределению в "непоследних" кварталах года сразу же 
					//  сторнируются будущим числом, и только проводки в последнем квартале остаются "навсегда".
					
					ЗнакПроводки = 1;
					ДатаПроводки = КонецМесяца(ПериодРегистрации);
					
					Для Инд = 1 По 2 Цикл
						
						Если ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.Распределяется Тогда
							
							// Все валовые расходы по распределяемому виду налоговой деятельности проводим 
							// по конкретным видам в пропорции, заданной в табличной части.
							
							ПогрешностьПоВНД = 0;
							ЧастьРаспределения = СуммаНаВаловыеРасходы / ИтогБазыРаспределенияПоВНД;
							
							Для каждого СтрокаТЧ Из РаспределениеВаловыхРасходовПоВНД Цикл
								
								СуммаНаВаловыеРасходыПоВНД = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(ЧастьРаспределения * СтрокаТЧ.Коэффициент , 2, ПогрешностьПоВНД);
								
								Проводка = Движения.Налоговый.Добавить();
								
								Проводка.Период			= ДатаПроводки;
								Проводка.Содержание		= ?(Н = 1, "Вал. расходы по модернизации ОС",
								                                   "Балансовая стоимость списанной группы");
								Проводка.НомерЖурнала	= "ОС";
								Проводка.Организация	= Организация;
								Проводка.Сумма			= ЗнакПроводки * СуммаНаВаловыеРасходыПоВНД;
								
								Проводка.СчетДт			= ПланыСчетов.Налоговый.ВаловыеРасходы;
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", 	СтрокаТЧ.ВидНалоговойДеятельности);
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиНалоговогоУчета", 		СтатьяВР);
								
								Проводка.СчетКт			= ПланыСчетов.Налоговый.ВаловыеРасходы;
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", 	СтрокаТЧ.ВидНалоговойДеятельности);
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиНалоговогоУчета", 		СтатьяВР);
								
							КонецЦикла; 
							
						Иначе
							
							// Указан конкретный вид налоговой деятельности, проводим по нему.
							Проводка = Движения.Налоговый.Добавить();
							
							Проводка.Период			= ДатаПроводки;
							Проводка.Содержание		= ?(Н = 1, "Вал. расходы по модернизации ОС",
															   "Балансовая стоимость списанной группы");
							Проводка.НомерЖурнала	= "ОС";
							Проводка.Организация	= Организация;
							Проводка.Сумма			= ЗнакПроводки * СуммаНаВаловыеРасходы;
							
							Проводка.СчетДт			= ПланыСчетов.Налоговый.ВаловыеРасходы;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", 	ВидНалоговойДеятельности);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиНалоговогоУчета", 		СтатьяВР);
							
							Проводка.СчетКт			= ПланыСчетов.Налоговый.ВаловыеРасходы;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", 	ВидНалоговойДеятельности);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиНалоговогоУчета", 		СтатьяВР);
							
						КонецЕсли; 
						
						Если КонецОтчетногоПериода Тогда
							
							Прервать;
							
						Иначе
							
							ЗнакПроводки = -1;
							ДатаПроводки = КонПериода + 2;
							
						КонецЕсли; 
						
					КонецЦикла;
					
				КонецЕсли; 
				
				Если ГруппаСписана Тогда
					
					СуммаНаВаловыеРасходы              = СуммаУвеличенияБалансовойСтоимости;
					СуммаУвеличенияБалансовойСтоимости = 0;
					СтатьяВР                           = ВыборкаОстатковМодернизации.СтатьяСписанияСтоимости;
					
				Иначе
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СуммаУвеличенияБалансовойСтоимости <> 0 Тогда
				
				// 	Распределение выполняется пропорционально накопленным с начала года суммам модернизации,
				//	поэтому каждый квартал пропорция может изменяться. 
				//	Чтобы этого достичь, проводки по распределению в "непоследних" кварталах года сразу же 
				//  сторнируются будущим числом, и только проводки в последнем квартале остаются "навсегда".
				
				ЗнакПроводки = 1;
				ДатаПроводки = КонецМесяца(ПериодРегистрации);
				
				Для Инд = 1 По 2 Цикл
					
					Проводка = Движения.Налоговый.Добавить();
					
					Проводка.Период			= ДатаПроводки;
					Проводка.Содержание		= "Увеличение бал. ст-сти ОС на сумму модернизации";
					Проводка.НомерЖурнала	= "ОС";
					Проводка.Организация	= Организация;
					Проводка.Сумма			= ЗнакПроводки * СуммаУвеличенияБалансовойСтоимости;
					
					Проводка.СчетДт			= СчетУчетаОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", ВидНалоговойДеятельности);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ГруппыОсновныхСредств"    , НалоговаяГруппаОС);
					
					Если Пообъектно Тогда
						
						// Основное средство определено только для групп с пообъектным учетом
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ОсновноеСредство);
						
					КонецЕсли;
					
					Если КонецОтчетногоПериода Тогда
						
						Прервать;
						
					Иначе
						
						ЗнакПроводки = -1;
						ДатаПроводки = КонПериода + 2;
						
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли; 
			
		КонецЕсли;	
	
	КонецЦикла;
	
КонецПроцедуры // РаспределитьСуммыУлучшенияОСПоГруппам()



// Распределяет амортизацию основных средств, которые участвуют в нескольких видах налоговой деятельности,
// 	между конкретными видами налоговой деятельности
//
// Параметры
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура РаспределитьАмортизациюПоВидамНалоговойДеятельности(СтруктураПараметровНУ, Отказ, Заголовок)

	
	СчетВР            = ПланыСчетов.Налоговый.ВаловыеРасходы;
	РаспределяемыйВНД = Справочники.ВидыНалоговойДеятельности.Распределяется;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Налоговый.СубконтоДт2  КАК СтатьяВР,
	|	Налоговый.НомерЖурнала КАК НомерЖурнала,
	|	СУММА(Налоговый.Сумма) КАК СуммаПроводки
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ДвиженияССубконто(
	|		               &НачПериода,
	|		               &КонПериода,
	|		               Организация = &Организация
	|		               И СчетДт = &СчетВР
	|		               И СубконтоДт1 = &РаспределяемыйВНД
	|		               И Активность) КАК Налоговый
	|
	|СГРУППИРОВАТЬ ПО
	|	Налоговый.СубконтоДт2,
	|	Налоговый.НомерЖурнала
	|
	|ИМЕЮЩИЕ
	|	СУММА(Налоговый.Сумма) <> 0";

	Запрос.УстановитьПараметр("КонПериода"       , КонПериода);
	Запрос.УстановитьПараметр("НачПериода"       , НачПериода);
	Запрос.УстановитьПараметр("Организация"      , Организация);
	Запрос.УстановитьПараметр("РаспределяемыйВНД", РаспределяемыйВНД);
	Запрос.УстановитьПараметр("СчетВР"           , СчетВР);

	ВыборкаПоВР = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоВР.Следующий() Цикл
		
		СуммаПроводки      = ВыборкаПоВР.СуммаПроводки;
		СтатьяВР           = ВыборкаПоВР.СтатьяВР;
		НомерЖурнала       = ВыборкаПоВР.НомерЖурнала;
		СодержаниеПроводки = "Распределение амортизации по видам нал. деят-сти";
		
		// Сторнируем существующий оборот по РаспределяемыйВНД 
		Проводка = Движения.Налоговый.Добавить();
		
		Проводка.Период			= КонецМесяца(ПериодРегистрации);
		Проводка.Содержание		= СодержаниеПроводки;
		Проводка.НомерЖурнала	= НомерЖурнала;
		Проводка.Организация	= Организация;
		Проводка.Сумма			= - СуммаПроводки;
		
		Проводка.СчетДт	= СчетВР;
		БухгалтерскийУчет.УстановитьСубконто(СчетВР, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", РаспределяемыйВНД);
		БухгалтерскийУчет.УстановитьСубконто(СчетВР, Проводка.СубконтоДт, "СтатьиНалоговогоУчета", 	 СтатьяВР);
		
		Проводка.СчетКт	= СчетВР;
		БухгалтерскийУчет.УстановитьСубконто(СчетВР, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", РаспределяемыйВНД);
		БухгалтерскийУчет.УстановитьСубконто(СчетВР, Проводка.СубконтоКт, "СтатьиНалоговогоУчета", 	 СтатьяВР);
		
		// Распределим эту же сумму по конкретным видам налоговой деятельности
		// в пропорции, заданной в табличной части
		
		Погрешность = 0;
		КоэфРаспределения = СуммаПроводки / ИтогБазыРаспределенияПоВНД;
		
		Для каждого СтрокаТЧ Из РаспределениеВаловыхРасходовПоВНД Цикл
		
			РаспределеннаяСумма = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(КоэфРаспределения * СтрокаТЧ.Коэффициент, 2, Погрешность);
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период			= КонецМесяца(ПериодРегистрации);
			Проводка.Содержание		= СодержаниеПроводки;
			Проводка.НомерЖурнала	= НомерЖурнала;
			Проводка.Организация	= Организация;
			Проводка.Сумма			= РаспределеннаяСумма;
			
			Проводка.СчетДт	= СчетВР;
			БухгалтерскийУчет.УстановитьСубконто(СчетВР, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", СтрокаТЧ.ВидНалоговойДеятельности);
			БухгалтерскийУчет.УстановитьСубконто(СчетВР, Проводка.СубконтоДт, "СтатьиНалоговогоУчета", 	 СтатьяВР);
			
			Проводка.СчетКт	= СчетВР;
			БухгалтерскийУчет.УстановитьСубконто(СчетВР, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", СтрокаТЧ.ВидНалоговойДеятельности);
			БухгалтерскийУчет.УстановитьСубконто(СчетВР, Проводка.СубконтоКт, "СтатьиНалоговогоУчета", 	 СтатьяВР);
		
		КонецЦикла; 
	
	КонецЦикла;
	
КонецПроцедуры // РаспределитьАмортизациюПоВидамНалоговойДеятельности()

Функция РассчитатьКоэффициентМатериальнойСоставляющей(СтруктураШапкиДокумента)

	Если мКоэффициентМатериальнойСоставляющейРассчитан Тогда
		Возврат мКоэффициентМатериальнойСоставляющей;
	КонецЕсли;		                                      
	
	// Для только 9 класса счетов - не рассчитываем, 1
	Если БухгалтерскийУчет.ПолучитьИспользуемыеКлассыСчетовРасходов(Дата, Организация) = Перечисления.КлассыСчетовРасходов.Класс9 Тогда
		
		Сообщить("Учет затрат для организации ведется с использованием только 9 класса счетов. Коэффициент материальной составляющей в готовой продукции, полуфабрикатах и в незавершенном производстве полагается равным 1");
			
		мКоэффициентМатериальнойСоставляющей = 1;
		мКоэффициентМатериальнойСоставляющейРассчитан = Истина;
		
		Возврат мКоэффициентМатериальнойСоставляющей;
		
	КонецЕсли; 
	
	Сообщить("Расчет коэффициента материальной составляющей:");
	
	МассивСчетовПроизводства = Новый Массив;
	МассивСчетовПроизводства.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	МассивСчетовПроизводства.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	МассивСчетовПроизводства.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	
	МассивСчетовГП = Новый Массив;
	МассивСчетовГП.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	МассивСчетовГП.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	МассивСчетовГП.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства);
	
	Запрос = Новый Запрос;
	
	// остаток мат. составляющей в продукции на начало периода 
	// ЗА по НП_К1_1ГотовПрод
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&НачПериода, Счет В ИЕРАРХИИ (&СчетаЗапасы) , , Организация = &Организация И Субконто2 = &СтатьяМатериалыГП) КАК НалоговыйОстатки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачПериода",  НачПериода); 
	Запрос.УстановитьПараметр("Организация", Организация); 
	Запрос.УстановитьПараметр("СчетаЗапасы", ПланыСчетов.Налоговый.Запасы);
	Запрос.УстановитьПараметр("СтатьяМатериалыГП", Справочники.СтатьиНалоговыхДеклараций.НП_К1_1ГотовПрод); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	НачальнаяМСГП = 0;
	Если Выборка.Следующий() Тогда
		НачальнаяМСГП = Выборка.Сумма;
	КонецЕсли;
	
	Сообщить("Начальная материальная составляющая ГП = " + НачальнаяМСГП);
	
	// остаток мат. составляющей в НЗП на начало периода
	// ЗА по НП_К1_1НезавершПрво
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&НачПериода, Счет В ИЕРАРХИИ (&СчетаЗапасы) , , Организация = &Организация И Субконто2 = &СтатьяНЗП) КАК НалоговыйОстатки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачПериода",  НачПериода); 
	Запрос.УстановитьПараметр("Организация", Организация); 
	Запрос.УстановитьПараметр("СчетаЗапасы", ПланыСчетов.Налоговый.Запасы);
	Запрос.УстановитьПараметр("СтатьяНЗП",   Справочники.СтатьиНалоговыхДеклараций.НП_К1_1НезавершПрво); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачальнаяМСНЗП = 0;
	Если Выборка.Следующий() Тогда
		НачальнаяМСНЗП = Выборка.Сумма;
	КонецЕсли;
	
	Сообщить("Начальная материальная составляющая НЗП = " + НачальнаяМСНЗП);
	
	// израсходованные материалы на производство продукции за период
	// ОБ(23, 80) 
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК СУММА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, , Счет В ИЕРАРХИИ (&СчетаПроизводства), , Организация = &Организация, КорСчет В ИЕРАРХИИ (&МатериальныеЗатраты), ) КАК ХозрасчетныйОбороты
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачПериода", НачПериода); 
	Запрос.УстановитьПараметр("КонПериода", КонПериодаВключая);
	Запрос.УстановитьПараметр("Организация", Организация); 
	Запрос.УстановитьПараметр("СчетаПроизводства",	МассивСчетовПроизводства); 
	Запрос.УстановитьПараметр("МатериальныеЗатраты", ПланыСчетов.Хозрасчетный.МатериальныеЗатраты); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	МатериалывНЗПЗаПериод = 0;
	Если Выборка.Следующий() Тогда
		МатериалывНЗПЗаПериод = Выборка.Сумма;
	КонецЕсли;
	
	Сообщить("Израсходованные материалы на производство продукции = " + МатериалывНЗПЗаПериод);
	
	// стоимость материалов, входящих в состав общепроизводственных распределенных затрат за период
	// ОБ(23, 91) * ОБ(91, 80)) / ОБ(91, 8)
	МатериалывОПЗЗаПериод = 0;
	
	// ОБ(91, 8)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК СУММА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, , Счет В ИЕРАРХИИ (&СчетаДебет), , Организация = &Организация, КорСчет В ИЕРАРХИИ (&СчетаКредит), ) КАК ХозрасчетныйОбороты
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачПериода", НачПериода); 
	Запрос.УстановитьПараметр("КонПериода", КонПериодаВключая); 
	Запрос.УстановитьПараметр("Организация", Организация); 
	Запрос.УстановитьПараметр("СчетаДебет",	ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Запрос.УстановитьПараметр("СчетаКредит", ПланыСчетов.Хозрасчетный.ЗатратыПоЭлементам); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	ОБ918 = 0;
	Если Выборка.Следующий() Тогда
		ОБ918 = Выборка.Сумма;
	КонецЕсли;
	
	Если ОБ918 = 0 Тогда
		МатериалывОПЗЗаПериод = 0;	
	Иначе
		// ОБ(91, 80)
		Запрос.УстановитьПараметр("СчетаКредит", ПланыСчетов.Хозрасчетный.МатериальныеЗатраты); 
		Выборка = Запрос.Выполнить().Выбрать();
		ОБ9180 = 0;
		Если Выборка.Следующий() Тогда
			ОБ9180 = Выборка.Сумма;
		КонецЕсли;
		// ОБ(23, 91)
		Запрос.УстановитьПараметр("СчетаДебет",	МассивСчетовПроизводства); 
		Запрос.УстановитьПараметр("СчетаКредит", ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы); 
		Выборка = Запрос.Выполнить().Выбрать();
		ОБ2391 = 0;
		Если Выборка.Следующий() Тогда
			ОБ2391 = Выборка.Сумма;
		КонецЕсли; 
		МатериалывОПЗЗаПериод = ОБ2391 * ОБ9180 / ОБ918;
	КонецЕсли; 
	Сообщить("Стоимость материалов, входящих в состав распределенных ОПЗ = " + МатериалывОПЗЗаПериод);
	
	// остатки готовой продукции на начало периода
	
	// остатки готовой продукции определяем по остаткам партий в НУ по ЗА и статье ГП
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(УчетЗатрат.СтоимостьНУОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.УчетЗатратРегл.Остатки(&НачПериода, 
		|		АналитикаВидаУчета В (
		|			ВЫБРАТЬ
		|				Ссылка
		|			ИЗ
		|				РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
		|			ГДЕ
		|				РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ)
		|				И Организация = &Организация
		|	  		  	И СчетУчета В ИЕРАРХИИ (&СчетаГП)
		|	    		И СчетУчетаНУ В ИЕРАРХИИ (&СчетаЗапасов)
		|               И (НЕ НалоговоеНазначение.Амортизируется)
		|			)
		|	) КАК УчетЗатрат
		|
		|";
	Иначе	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ЕСТЬNULL(ПартииТоваровНаСкладахНалоговыйУчетОстатки.СтоимостьОстаток,0)),0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет.Остатки(
		|		&НачПериода,
		|		Организация = &Организация
		|		    И СчетУчета В ИЕРАРХИИ (&СчетаЗапасов)
		|		    И СтатьяПриростаУбылиЗапасов = &СтатьяГП
		|           И (НЕ НалоговоеНазначение.Амортизируется)
		|	) КАК ПартииТоваровНаСкладахНалоговыйУчетОстатки
		|";
	КонецЕсли;	
		
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("НачПериода", 	НачПериода);
	Запрос.УстановитьПараметр("СчетаЗапасов", 	ПланыСчетов.Налоговый.Запасы); 
	Запрос.УстановитьПараметр("СтатьяГП", 		Справочники.СтатьиНалоговыхДеклараций.НП_К1_1ГотовПрод); 
	
	МассивСчетовГП = Новый Массив;
	МассивСчетовГП.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	МассивСчетовГП.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	МассивСчетовГП.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства);	
	
	Запрос.УстановитьПараметр("СчетаГП", 		МассивСчетовГП); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	НачальныйОстатокГП = 0;
	Если Выборка.Следующий() Тогда
		НачальныйОстатокГП = Выборка.Сумма;
	КонецЕсли;
	Сообщить("Остатки готовой продукции на начало периода = " + НачальныйОстатокГП);
	
	// остатки НЗП на начало периода
	// начальные остатки регистра НезавершенноеПроизводствоНалоговыйУчет
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(УчетЗатрат.СтоимостьНУОстаток, 0) КАК СтоимостьОстаток
		|ИЗ
		|	РегистрНакопления.УчетЗатратРегл.Остатки(&НачПериода, 
		|		АналитикаВидаУчета В (
		|			ВЫБРАТЬ
		|				Ссылка
		|			ИЗ
		|				РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
		|			ГДЕ
		|				РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
		|				И Организация = &Организация
		|               И (НЕ НалоговоеНазначение.Амортизируется)
		|			)
		|		И АналитикаУчетаЗатрат В (
		|			ВЫБРАТЬ
		|				Ссылка
		|			ИЗ
		|				РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
		|			ГДЕ
		|				ХарактерЗатрат = ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
		|		)
		|	) КАК УчетЗатрат
		|
		|";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ЕСТЬNULL(НезавершенноеПроизводствоНалоговыйУчетОстатки.СтоимостьОстаток,0)),0) КАК СтоимостьОстаток
		|ИЗ
		|	РегистрНакопления.НезавершенноеПроизводствоНалоговыйУчет.Остатки(
		|		&НачПериода, 
		|		(Организация = &Организация) 
		|       	И (НЕ НалоговоеНазначение.Амортизируется)
		|   ) КАК НезавершенноеПроизводствоНалоговыйУчетОстатки
		|";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачПериода",  НачПериода); 
	Запрос.УстановитьПараметр("Организация", Организация); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	НачальныйОстатокНЗП = 0;
	Если Выборка.Следующий() Тогда
		НачальныйОстатокНЗП = Выборка.СтоимостьОстаток;
	КонецЕсли;
	
	Сообщить("Остатки НЗП на начало периода = " + НачальныйОстатокНЗП);
	
	// все расходы на производство продукции (работ, услуг) за период
	// ОБ(23, 8) + ОБ(23, 91)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК СУММА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, , Счет В ИЕРАРХИИ (&СчетаПроизводства), , Организация = &Организация, КорСчет В ИЕРАРХИИ (&ЗатратыНаПроизводство), ) КАК ХозрасчетныйОбороты
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачПериода", НачПериода); 
	Запрос.УстановитьПараметр("КонПериода", КонПериодаВключая); 
	Запрос.УстановитьПараметр("Организация", Организация); 
	Запрос.УстановитьПараметр("СчетаПроизводства",	МассивСчетовПроизводства);
	
	МассивСчетовЗатратыНаПроизводство = Новый Массив;
	МассивСчетовЗатратыНаПроизводство.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыПоЭлементам);
	МассивСчетовЗатратыНаПроизводство.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Запрос.УстановитьПараметр("ЗатратыНаПроизводство", МассивСчетовЗатратыНаПроизводство); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	РасходыНаПроизводствоГП = 0;
	Если Выборка.Следующий() Тогда
		РасходыНаПроизводствоГП = Выборка.Сумма;
	КонецЕсли;
	Сообщить("Расходы на производство ГП = " + РасходыНаПроизводствоГП);
	
	Знаменатель = НачальныйОстатокГП + НачальныйОстатокНЗП  + РасходыНаПроизводствоГП;
	Если Знаменатель = 0 Тогда
		КоэффициентМатериальнойСоставляющей = 1;	
	Иначе
		КоэффициентМатериальнойСоставляющей = 
		(НачальнаяМСГП + НачальнаяМСНЗП + МатериалывНЗПЗаПериод + МатериалывОПЗЗаПериод) 
		/ Знаменатель;
	КонецЕсли; 
	
	Сообщить("Коэффициент материальной составляющей = " + КоэффициентМатериальнойСоставляющей);
	
	мКоэффициентМатериальнойСоставляющей = КоэффициентМатериальнойСоставляющей;
	мКоэффициентМатериальнойСоставляющейРассчитан = Истина;
	
	Возврат КоэффициентМатериальнойСоставляющей;

КонецФункции // РассчитатьКоэффициентМатериальнойСоставляющей()

Процедура РассчитатьМатериальнуюСоставляющуюПродукции(СтруктураШапкиДокумента, СтруктураПараметровНУ, Отказ, Заголовок)
	
	Если НЕ СтруктураПараметровНУ.РассчитыватьМатериальнуюСоставляющуюПродукцииНЗП Тогда
		Сообщить("В параметрах налогового учета не установлен признак расчета материальной составляющей!");
		Возврат;
	КонецЕсли;	
	
	// рассчитаем коэффициент материальной составляющей
	КоэффициентМатериальнойСоставляющей = РассчитатьКоэффициентМатериальнойСоставляющей(СтруктураШапкиДокумента);
	
	СтатьяГП = Справочники.СтатьиНалоговыхДеклараций.НП_К1_1ГотовПрод;
	
	// Спишем текущие остатки ГП на счете Запасов
	
	МассивВидовСубконто = Новый Массив(2);
	МассивВидовСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыНалоговойДеятельности;
	МассивВидовСубконто[1] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговогоУчета;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(НалоговыйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
	|	НалоговыйОстатки.Субконто1 КАК ВидНалоговойДеятельности
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|		&КонПериода,
	|		Счет В ИЕРАРХИИ (&СчетаЗапасов),
	|		&МассивВидовСубконто,
	|		Организация = &Организация
	|			И Субконто2 = &СтатьяГП) КАК НалоговыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Субконто1";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КонПериода", КонПериодаВключая);
	Запрос.УстановитьПараметр("СчетаЗапасов", ПланыСчетов.Налоговый.Запасы); 
	Запрос.УстановитьПараметр("СтатьяГП", СтатьяГП); 
	Запрос.УстановитьПараметр("МассивВидовСубконто", МассивВидовСубконто); 
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультатовЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаРезультатовЗапроса.Следующий() Цикл
		
		Проводка = Движения.Налоговый.Добавить();
		
		Проводка.Период			= Дата;
		Проводка.Содержание		= "Списание текущих остатков ГП";
		Проводка.НомерЖурнала	= "НУ";
		Проводка.Организация	= Организация;
		Проводка.Сумма			= ВыборкаРезультатовЗапроса.СуммаОстатокДт;
		
		Проводка.СчетКт			= ПланыСчетов.Налоговый.Запасы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", 	ВыборкаРезультатовЗапроса.ВидНалоговойДеятельности);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиНалоговогоУчета", 		СтатьяГП);
			
	КонецЦикла;
	 
	// конечные остатки готовой продукции определяем 
	// для традиционного учета - по остаткам партий в НУ по ЗА и статье ГП
	// для РАУЗ - по остаткам УчетЗатратРегл по разделу учета МПЗ, по ЗА и счетам БУ учета готовой продукции и полуфабрикатов 
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СУММА(УчетЗатрат.СтоимостьНУОстаток) КАК СуммаНал,
		|	РегистрАналитикаВидаУчета.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности
		|ИЗ
		|	РегистрНакопления.УчетЗатратРегл.Остатки(&КонПериода, 
		|		АналитикаВидаУчета В (
		|			ВЫБРАТЬ
		|				Ссылка
		|			ИЗ
		|				РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
		|			ГДЕ
		|				РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ)
		|				И Организация = &Организация
		|	  		  	И СчетУчета В ИЕРАРХИИ (&СчетаГП)
		|	    		И СчетУчетаНУ В ИЕРАРХИИ (&СчетаЗапасов)
		|			)
		|	) КАК УчетЗатрат
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
		|	ПО 
		|		УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрАналитикаВидаУчета.НалоговоеНазначение.ВидНалоговойДеятельности
		|
		|";
		
	Иначе	
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СУММА(ПартииТоваровНаСкладахНалоговыйУчетОстатки.СтоимостьОстаток) КАК СуммаНал,
		|	ПартииТоваровНаСкладахНалоговыйУчетОстатки.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет.Остатки(
		|		&КонПериода,
		|		Организация = &Организация
		|		    И СчетУчета В ИЕРАРХИИ (&СчетаЗапасов)
		|		    И СтатьяПриростаУбылиЗапасов = &СтатьяГП
		|	) КАК ПартииТоваровНаСкладахНалоговыйУчетОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровНаСкладахНалоговыйУчетОстатки.НалоговоеНазначение.ВидНалоговойДеятельности
		|
		|";
		
	КонецЕсли;	

	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("КонПериода", КонПериодаВключая);
	Запрос.УстановитьПараметр("СчетаЗапасов", ПланыСчетов.Налоговый.Запасы); 
	Запрос.УстановитьПараметр("СтатьяГП", СтатьяГП); 
	
	МассивСчетовГП = Новый Массив;
	МассивСчетовГП.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	МассивСчетовГП.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	МассивСчетовГП.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства);
	
	Запрос.УстановитьПараметр("СчетаГП", 		МассивСчетовГП); 
	
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультатовЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаРезультатовЗапроса.Следующий() Цикл
		
		Проводка = Движения.Налоговый.Добавить();
		
		Проводка.Период			= Дата;
		Проводка.Содержание		= "Формирование новых остатков ГП, учитывая коэф. мат. составл.";
		Проводка.НомерЖурнала	= "НУ";
		Проводка.Организация	= Организация;
		Проводка.Сумма			= ВыборкаРезультатовЗапроса.СуммаНал * КоэффициентМатериальнойСоставляющей;
		
		Проводка.СчетДт			= ПланыСчетов.Налоговый.Запасы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", 	ВыборкаРезультатовЗапроса.ВидНалоговойДеятельности);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиНалоговогоУчета", 		СтатьяГП);
			
	КонецЦикла;
	
КонецПроцедуры // РассчитатьМатериальнуюСоставляющуюПродукции()

// Формирует на счете Запасы остаток незавершенного производства по данным регистра
//	НезавершенноеПроизводствоНалоговыйУчет
//
// Параметры
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура СформироватьОстатокНезавершенногоПроизводства(СтруктураШапкиДокумента, СтруктураПараметровНУ, Отказ, Заголовок)

	КоэффициентМатериальнойСоставляющей = 1;
	Если СтруктураПараметровНУ.РассчитыватьМатериальнуюСоставляющуюПродукцииНЗП Тогда
		// рассчитаем коэффициент материальной составляющей
		КоэффициентМатериальнойСоставляющей = РассчитатьКоэффициентМатериальнойСоставляющей(СтруктураШапкиДокумента);
	КонецЕсли;	
	
	// Определим статью, по которой учитывается незавершенное производство.
	СтатьяНЗП = СтруктураПараметровНУ.СтатьяПриростаУбылиНезавершенногоПроизводства;
	
	// Спишем текущие остатки НЗП на счете Запасов.
	
	СтруктураОтбора = Новый Структура("Организация, Счет, Субконто2");
	СтруктураОтбора.Организация 	= Организация;
	СтруктураОтбора.Счет		 	= ПланыСчетов.Налоговый.Запасы;
	СтруктураОтбора.Субконто2	 	= СтатьяНЗП;
	
	МассивВидовСубконто = Новый Массив(2);
	МассивВидовСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыНалоговойДеятельности;
	МассивВидовСубконто[1] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговогоУчета;
	
	//ТаблицаСтоимостиНЗПНач = РегистрыБухгалтерии.Налоговый.Остатки(КонецМесяца(ПериодРегистрации), МассивВидовСубконто, СтруктураОтбора, 
	//	"Субконто1", "Сумма");
	ТаблицаСтоимостиНЗПНач = РегистрыБухгалтерии.Налоговый.Остатки(Новый Граница(КонецМесяца(ПериодРегистрации),ВидГраницы.Включая), МассивВидовСубконто, СтруктураОтбора, 
		"Субконто1", "Сумма");
		
	Для каждого СтрокаСтоимостиНЗПНач Из ТаблицаСтоимостиНЗПНач Цикл
	
		Если СтрокаСтоимостиНЗПНач.СуммаОстатокДт = 0 Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Проводка = Движения.Налоговый.Добавить();
		
		Проводка.Период			= КонецМесяца(ПериодРегистрации);
		Проводка.Содержание		= "Списание текущих остатков НЗП";
		Проводка.НомерЖурнала	= "НУ";
		Проводка.Организация	= Организация;
		Проводка.Сумма			= СтрокаСтоимостиНЗПНач.СуммаОстатокДт;
		
		Проводка.СчетКт			= ПланыСчетов.Налоговый.Запасы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности", 	СтрокаСтоимостиНЗПНач.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиНалоговогоУчета", 		СтатьяНЗП);
	
	КонецЦикла; 
	
	
	// конечные остатки НЗП определяем 
	// для традиционного учета - по остаткам НезавершенноеПроизводствоНалоговыйУчет
	// для РАУЗ - по остаткам УчетЗатратРегл по разделу учета Затраты с характером затрат ПроизводственныеРасходы 
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РегистрАналитикаВидаУчета.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности,
		|	СУММА(УчетЗатрат.СтоимостьНУОстаток) КАК СтоимостьОстаток
		|ИЗ
		|	РегистрНакопления.УчетЗатратРегл.Остатки(&КонПериода, 
		|		АналитикаВидаУчета В (
		|			ВЫБРАТЬ
		|				Ссылка
		|			ИЗ
		|				РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
		|			ГДЕ
		|				РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
		|				И Организация = &Организация
		|               И (НЕ НалоговоеНазначение.Амортизируется)
		|			)
		|		И АналитикаУчетаЗатрат В (
		|			ВЫБРАТЬ
		|				Ссылка
		|			ИЗ
		|				РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
		|			ГДЕ
		|				ХарактерЗатрат = ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
		|		)
		|	) КАК УчетЗатрат
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
		|	ПО 
		|		УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрАналитикаВидаУчета.НалоговоеНазначение.ВидНалоговойДеятельности
		|
		|";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НезавершенноеПроизводствоНалоговыйУчетОстатки.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности,
		|	СУММА(НезавершенноеПроизводствоНалоговыйУчетОстатки.СтоимостьОстаток) КАК СтоимостьОстаток
		|ИЗ
		|	РегистрНакопления.НезавершенноеПроизводствоНалоговыйУчет.Остатки(
		|		&КонПериода, 
		|		(Организация = &Организация) 
		|			И (НЕ НалоговоеНазначение.Амортизируется)
		|	) КАК НезавершенноеПроизводствоНалоговыйУчетОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НезавершенноеПроизводствоНалоговыйУчетОстатки.НалоговоеНазначение.ВидНалоговойДеятельности
		|
		|";
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
				   
	Запрос.УстановитьПараметр("Организация", Организация);
	// Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(КонПериода, ВидГраницы.Включая));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Проводка = Движения.Налоговый.Добавить();
		
		Проводка.Период			= КонецМесяца(ПериодРегистрации);
		Проводка.Содержание		= "Формирование новых остатков НЗП";
		Проводка.НомерЖурнала	= "НУ";
		Проводка.Организация	= Организация;
		Проводка.Сумма			= Выборка.СтоимостьОстаток * КоэффициентМатериальнойСоставляющей;
		
		Проводка.СчетДт			= ПланыСчетов.Налоговый.Запасы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности", 	Выборка.ВидНалоговойДеятельности);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиНалоговогоУчета", 		СтатьяНЗП);
	
	КонецЦикла; 

КонецПроцедуры // СформироватьОстатокНезавершенногоПроизводства()

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НОРМИРОВАНИЮ РАСХОДОВ НУ

Процедура НормированиеРасходовНаРекламуНУ(СтруктураПараметровНУ, Отказ, Заголовок)
		
	СчетВР				= ПланыСчетов.Налоговый.ВаловыеРасходы;
	НормируемаяСтатья	= Справочники.СтатьиНалоговыхДеклараций.НП_ДругиеВР_РекламныеМероприятия;
	
	НормаРасходов = НалогооблагаемаяПрибыльПрошлогоГода * СтруктураПараметровНУ.НормаРасходовНаРекламу / 100;
	
	СуммаРасходов = 0;
	
	СтруктураОтбора				= Новый Структура("Счет, Субконто1, Организация");
	СтруктураОтбора.Счет		= СчетВР;
	СтруктураОтбора.Субконто1	= НормируемаяСтатья;
	СтруктураОтбора.Организация	= Организация;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговогоУчета);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыНалоговойДеятельности);
	
	// Считаем сумму по статье с начала года
	ТаблицаОборотов = РегистрыБухгалтерии.Налоговый.Обороты(мНачГода, мКонКвартала, МассивСубконто, ,СтруктураОтбора, "Субконто2", "Сумма");
	СуммаРасходов   = ТаблицаОборотов.Итог("СуммаОборотДт");
	
	Если СуммаРасходов <= 0 Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Если СуммаРасходов > НормаРасходов Тогда
	
		// Уменьшаем валовые расходы до установленной нормы пропорционально по всем видам деятельности
		
		Погрешность = 0;
		
		Для каждого Строка Из ТаблицаОборотов Цикл
		
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Организация = Организация;
			Проводка.Период      = Дата;
			Проводка.Содержание  = "Нормирование ВР на рекламу ("+СтруктураПараметровНУ.НормаРасходовНаРекламу+"%)";
							
			Проводка.Сумма  = ОбщегоНазначения.ОкруглитьСУчетомПогрешности((НормаРасходов - СуммаРасходов)*Строка.СуммаОборотДт/СуммаРасходов, 2, Погрешность);
							
			Проводка.СчетДт = СчетВР;
			Проводка.СчетКт = СчетВР;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиНалоговогоУчета",  НормируемаяСтатья);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности",  Строка.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиНалоговогоУчета",  НормируемаяСтатья);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности",  Строка.Субконто2);
		
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НормированиеРасходовНаГарантийныйРемонтНУ(СтруктураПараметровНУ, Отказ, Заголовок)
		
	СчетВР				= ПланыСчетов.Налоговый.ВаловыеРасходы;
	НормируемаяСтатья	= Справочники.СтатьиНалоговыхДеклараций.НП_ДругиеВР_ГарантийныйРемонтОбслуживание;
	
	СуммаРасходов = 0;
	
	СтруктураОтбора				= Новый Структура("Счет, Субконто1, Организация");
	СтруктураОтбора.Счет		= СчетВР;
	СтруктураОтбора.Субконто1	= НормируемаяСтатья;
	СтруктураОтбора.Организация	= Организация;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговогоУчета);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыНалоговойДеятельности);
	
	// Считаем сумму по статье за квартал
	ТаблицаОборотов = РегистрыБухгалтерии.Налоговый.Обороты(мНачКвартала, мКонКвартала, МассивСубконто, ,СтруктураОтбора, "Субконто2", "Сумма");
	СуммаРасходов   = ТаблицаОборотов.Итог("СуммаОборотДт");
	
	// Зарегистрируем обороты продаж в регистре ПродажиВРазрезеГарантийныхСроковНалоговыйУчет
	// для нормирования гарантийных расходов в будущих периодах.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГарантийныеСрокиНалоговыйУчетСрезПоследних.Срок КАК Срок,
	               |	ГарантийныеСрокиНалоговыйУчетСрезПоследних.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	               |ИЗ
	               |	РегистрСведений.ГарантийныеСрокиНалоговыйУчет.СрезПоследних КАК ГарантийныеСрокиНалоговыйУчетСрезПоследних
	               |ГДЕ
	               |	ГарантийныеСрокиНалоговыйУчетСрезПоследних.Срок > 0
	               |	И ГарантийныеСрокиНалоговыйУчетСрезПоследних.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	ВыборкаПоСрокам = Результат.Выбрать();
	МассивНоменклатурныхГрупп = Результат.Выгрузить().ВыгрузитьКолонку("НоменклатурнаяГруппа");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.Субконто1 ЕСТЬ NULL 
	               |			ТОГДА ХозрасчетныйОборотыДтКт.СубконтоДт1
	               |		ИНАЧЕ ХозрасчетныйОбороты.Субконто1
	               |	КОНЕЦ КАК НоменклатурнаяГруппа,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.СуммаОборотКт ЕСТЬ NULL 
	               |			ТОГДА 0
	               |		ИНАЧЕ ХозрасчетныйОбороты.СуммаОборотКт
	               |	КОНЕЦ КАК СуммаПродаж,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.Период ЕСТЬ NULL 
	               |			ТОГДА ХозрасчетныйОборотыДтКт.Период
	               |		ИНАЧЕ ХозрасчетныйОбороты.Период
	               |	КОНЕЦ КАК Период,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот ЕСТЬ NULL 
	               |			ТОГДА 0
	               |		ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот
	               |	КОНЕЦ КАК СуммаНДС
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (&СчетаДоходовОтРеализации), &СубконтоНоменклатурныеГруппы, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Месяц, СчетДт В ИЕРАРХИИ (&СчетаДоходовОтРеализации), &СубконтоНоменклатурныеГруппы, СчетКт В ИЕРАРХИИ (&СчетаНДС), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ПО ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоДт1
	               |			И ХозрасчетныйОбороты.Период = ХозрасчетныйОборотыДтКт.Период";
								 
								 
	МассивСчетовНДС = Новый Массив;
	МассивСчетовНДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНДС);
	МассивСчетовНДС.Добавить(ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваВсего);
	МассивСчетовНДС.Добавить(ПланыСчетов.Хозрасчетный.НалоговыйКредитВсего);
		
	Запрос.УстановитьПараметр("НачалоПериода", мНачКвартала);
	Запрос.УстановитьПараметр("КонецПериода", мКонКвартала);
	Запрос.УстановитьПараметр("СчетаДоходовОтРеализации", ПланыСчетов.Хозрасчетный.ДоходыОтРеализации);
	Запрос.УстановитьПараметр("СчетаНДС", МассивСчетовНДС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СубконтоНоменклатурныеГруппы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ВыборкаПоСрокам.Сбросить();
		Если (НЕ ВыборкаПоСрокам.НайтиСледующий(Выборка.НоменклатурнаяГруппа, "НоменклатурнаяГруппа")) 
			ИЛИ (Выборка.СуммаПродаж <= Выборка.СуммаНДС ) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		Движение = Движения.ПродажиВРазрезеГарантийныхСроковНалоговыйУчет.ДобавитьПриход();
		
		Движение.Период						= Дата;
		Движение.Организация				= Организация;
		Движение.ОкончаниеГарантийногоСрока = ДобавитьМесяц(Выборка.Период, ВыборкаПоСрокам.Срок - 1);
		
		Движение.СуммаПродаж				= Выборка.СуммаПродаж - Выборка.СуммаНДС;
		
		Движение.НоменклатурнаяГруппа		= Выборка.НоменклатурнаяГруппа;
	
	КонецЦикла; 
	
	// Запишем движения, они могут повлиять на расчет норм расходов в этом же периоде.
	Движения.ПродажиВРазрезеГарантийныхСроковНалоговыйУчет.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПродажиВРазрезеГарантийныхСроковНалоговыйУчетОстатки.ОкончаниеГарантийногоСрока КАК ОкончаниеГарантийногоСрока,
	               |	ПродажиВРазрезеГарантийныхСроковНалоговыйУчетОстатки.СуммаПродажОстаток
	               |ИЗ
	               |	РегистрНакопления.ПродажиВРазрезеГарантийныхСроковНалоговыйУчет.Остатки(&КонецПериодаВключая, Организация = &Организация) КАК ПродажиВРазрезеГарантийныхСроковНалоговыйУчетОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОкончаниеГарантийногоСрока";
	
	Запрос.УстановитьПараметр("КонецПериодаВключая"         , Новый Граница(КонПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ЗначениеЗаполнено(СтруктураПараметровНУ.НормаРасходовНаГарантийныйРемонт) Тогда
		
		// Такая сумма продаж прошлых периодов требуется для покрытия всей суммы валовых расходов.
		НеобходимаяСуммаПродаж = СуммаРасходов / СтруктураПараметровНУ.НормаРасходовНаГарантийныйРемонт * 100;
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		СписываемаяСумма = 0;
		
		Если (Выборка.ОкончаниеГарантийногоСрока >= мНачКвартала) И (НеобходимаяСуммаПродаж > 0) Тогда
			
			СписываемаяСумма = Мин(НеобходимаяСуммаПродаж, Выборка.СуммаПродажОстаток);
			
			Движение = Движения.ПродажиВРазрезеГарантийныхСроковНалоговыйУчет.ДобавитьРасход();
			
			Движение.Период						= Дата;
			Движение.Организация				= Организация;
			Движение.ОкончаниеГарантийногоСрока	= Выборка.ОкончаниеГарантийногоСрока;
			
			Движение.СуммаПродаж				= СписываемаяСумма;
			
			НеобходимаяСуммаПродаж = НеобходимаяСуммаПродаж - СписываемаяСумма;
		
		КонецЕсли; 
		
		Если (Выборка.ОкончаниеГарантийногоСрока <= мКонКвартала) И
			(СписываемаяСумма < Выборка.СуммаПродажОстаток) Тогда
		
			// Остатки, срок которых "истекает" в текущем квартале, списываем.
			
			Движение = Движения.ПродажиВРазрезеГарантийныхСроковНалоговыйУчет.ДобавитьРасход();
			
			Движение.Период						= Дата;
			Движение.Организация				= Организация;
			Движение.ОкончаниеГарантийногоСрока	= Выборка.ОкончаниеГарантийногоСрока;
			
			Движение.СуммаПродаж				= Выборка.СуммаПродажОстаток - СписываемаяСумма;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(НеобходимаяСуммаПродаж) И НеобходимаяСуммаПродаж > 0 Тогда
	
		// На такую сумму "не хватило" прошлых продаж, чтобы покрыть все валовые расходы.
		// Уменьшаем валовые расходы в соответствии с этой суммой.
		
		Погрешность = 0;
		
		Для каждого Строка Из ТаблицаОборотов Цикл
		
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Организация = Организация;
			Проводка.Период      = Дата;
			Проводка.Содержание  = "Нормирование ВР на гарантийный ремонт ("+СтруктураПараметровНУ.НормаРасходовНаГарантийныйРемонт+"%)";
							
			Проводка.Сумма  = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(- НеобходимаяСуммаПродаж * СтруктураПараметровНУ.НормаРасходовНаГарантийныйРемонт / 100
				* Строка.СуммаОборотДт / СуммаРасходов, 2, Погрешность);
							
			Проводка.СчетДт = СчетВР;
			Проводка.СчетКт = СчетВР;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиНалоговогоУчета",  НормируемаяСтатья);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности",  Строка.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиНалоговогоУчета",  НормируемаяСтатья);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности",  Строка.Субконто2);
			
		КонецЦикла;
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура НормированиеРасходовНаГСМНУ(СтруктураПараметровНУ, Отказ, Заголовок)
		
	СчетВР				= ПланыСчетов.Налоговый.ВаловыеРасходы;
	НормируемаяСтатья	= Справочники.СтатьиНалоговыхДеклараций.НП_ПокупТовар_ГСМиАрендаЛегковых;
	
	СуммаРасходов = 0;
	
	СтруктураОтбора				= Новый Структура("Счет, Субконто1, Организация");
	СтруктураОтбора.Счет		= СчетВР;
	СтруктураОтбора.Субконто1	= НормируемаяСтатья;
	СтруктураОтбора.Организация	= Организация;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговогоУчета);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыНалоговойДеятельности);
	
	// Считаем сумму по статье за квартал
	ТаблицаОборотов = РегистрыБухгалтерии.Налоговый.Обороты(мНачКвартала, мКонКвартала, МассивСубконто, ,СтруктураОтбора, "Субконто2", "Сумма");
	СуммаРасходов   = ТаблицаОборотов.Итог("СуммаОборотДт");
	
	Если СуммаРасходов <= 0 Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	НормаРасходов = СуммаРасходов * СтруктураПараметровНУ.НормаРасходовНаГСМ / 100;
	
	Если СуммаРасходов > НормаРасходов Тогда
	
		// Уменьшаем валовые расходы до установленной нормы
		Погрешность = 0;
		
		Для каждого Строка Из ТаблицаОборотов Цикл
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Организация = Организация;
			Проводка.Период      = Дата;
			Проводка.Содержание  = "Нормирование ВР на ГСМ ("+СтруктураПараметровНУ.НормаРасходовНаГСМ+"%)";
							
			Проводка.Сумма  = ОбщегоНазначения.ОкруглитьСУчетомПогрешности((НормаРасходов - СуммаРасходов) * Строка.СуммаОборотДт / СуммаРасходов, 2, Погрешность);
							
			Проводка.СчетДт = СчетВР;
			Проводка.СчетКт = СчетВР;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиНалоговогоУчета",  НормируемаяСтатья);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности",  Строка.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиНалоговогоУчета",  НормируемаяСтатья);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности",  Строка.Субконто2);
			
		КонецЦикла;
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура НормированиеРасходовНаСтрахованиеНУ(СтруктураПараметровНУ, Отказ, Заголовок)
	
	СчетВР				= ПланыСчетов.Налоговый.ВаловыеРасходы;
	НормируемаяСтатья	= Справочники.СтатьиНалоговыхДеклараций.НП_ДругиеВР_Страхование;
	
	СуммаРасходов = 0;
	
	СтруктураОтбора				= Новый Структура("Счет, Субконто1, Организация");
	СтруктураОтбора.Счет		= СчетВР;
	СтруктураОтбора.Субконто1	= НормируемаяСтатья;
	СтруктураОтбора.Организация	= Организация;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговогоУчета);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыНалоговойДеятельности);
	
	// Считаем сумму по статье за год
	ТаблицаОборотов = РегистрыБухгалтерии.Налоговый.Обороты(мНачГода, мКонКвартала, МассивСубконто, ,СтруктураОтбора, "Субконто2", "Сумма");
	СуммаРасходов   = ТаблицаОборотов.Итог("СуммаОборотДт");
	
	Если СуммаРасходов <= 0 Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	// Норма - процент от всех валовых расходов, т.е. обороты по счету "ВР" 
	// за исключением оборотов по амортизации.
	НормаРасходов = 0;
	
	// Запишем проводки, сформированные на предыдущих этапах.
	// Они оказывают влияние на общую сумму валовых расходов.
	Движения.Налоговый.Записать(Ложь);
	
	СтруктураОтбора				= Новый Структура("Счет, Организация");
	СтруктураОтбора.Счет		= СчетВР;
	СтруктураОтбора.Организация	= Организация;
	
	ТаблицаОборотовВР = РегистрыБухгалтерии.Налоговый.Обороты(мНачГода, мКонКвартала, , ,СтруктураОтбора, "Организация", "Сумма");
	Для каждого Строка Из ТаблицаОборотовВР Цикл
	
		НормаРасходов = Строка.СуммаОборотДт;
		Прервать;
	
	КонецЦикла;
	
	// Получим перечень статей амортизации
	НаборСведенийОГруппахОС = РегистрыСведений.СведенияОГруппахОсновныхСредствНалоговыйУчет.СоздатьНаборЗаписей();
	НаборСведенийОГруппахОС.Прочитать();
	МассивСтатей = НаборСведенийОГруппахОС.ВыгрузитьКолонку("СтатьяАмортизации");
	НаборСведенийОГруппахОС = 0;
	
	// Саму нормируемую статью тоже не учитываем при расчете валовых расходов
	МассивСтатей.Добавить(НормируемаяСтатья);
	
	// Уменьшим норму на сумму оборотов по статьям амортизации
	СтруктураОтбора				= Новый Структура("Счет, Субконто1, Организация");
	СтруктураОтбора.Счет		= СчетВР;
	СтруктураОтбора.Субконто1	= МассивСтатей;
	СтруктураОтбора.Организация	= Организация;
	
	ТаблицаОборотовАмортизации = РегистрыБухгалтерии.Налоговый.Обороты(мНачГода, мКонКвартала, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговогоУчета, ,СтруктураОтбора, "Организация", "Сумма");
	Для каждого Строка Из ТаблицаОборотовАмортизации Цикл
	
		НормаРасходов = НормаРасходов - Строка.СуммаОборотДт;
		Прервать;
	
	КонецЦикла;
	
	НормаРасходов = НормаРасходов * СтруктураПараметровНУ.НормаРасходовНаСтрахование / 100;
	
	Если СуммаРасходов > НормаРасходов Тогда
	
		// Уменьшаем валовые расходы до установленной нормы
		
		Погрешность = 0;
		
		Для каждого Строка Из ТаблицаОборотов Цикл
		
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Организация = Организация;
			Проводка.Период      = Дата;
			Проводка.Содержание  = "Нормирование ВР на страхование ("+СтруктураПараметровНУ.НормаРасходовНаСтрахование+"%)";
							
			Проводка.Сумма  = ОбщегоНазначения.ОкруглитьСУчетомПогрешности((НормаРасходов - СуммаРасходов) * Строка.СуммаОборотДт / СуммаРасходов, 2, Погрешность);
							
			Проводка.СчетДт = СчетВР;
			Проводка.СчетКт = СчетВР;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиНалоговогоУчета",  НормируемаяСтатья);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыНалоговойДеятельности",  Строка.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиНалоговогоУчета",  НормируемаяСтатья);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыНалоговойДеятельности",  Строка.Субконто2);
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

// Выполняет движения по регистрам.
//
// Параметры
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПараметровНУ = РегистрыСведений.ПараметрыНалоговогоУчета.ПолучитьПоследнее(КонПериода);
	
	ИтогБазыРаспределенияПоВНД = РаспределениеВаловыхРасходовПоВНД.Итог("Коэффициент");
	
	Если РаспределитьАмортизациюПоВидамНалоговойДеятельности Тогда
	
		РаспределитьАмортизациюПоВидамНалоговойДеятельности(СтруктураПараметровНУ, Отказ, Заголовок);
		
	КонецЕсли;
	
	Если РаспределитьСуммыУлучшенияОС Тогда
	
		РаспределитьСуммыУлучшенияОС(СтруктураПараметровНУ, Отказ, Заголовок);
		
	
	КонецЕсли; 
	
	Если НормироватьРасходыНаРекламуНУ Тогда
	
		НормированиеРасходовНаРекламуНУ(СтруктураПараметровНУ, Отказ, Заголовок);
		
	КонецЕсли; 
	
	Если НормироватьРасходыНаГарантийныйРемонтНУ Тогда
	
		НормированиеРасходовНаГарантийныйРемонтНУ(СтруктураПараметровНУ, Отказ, Заголовок);
	
	КонецЕсли; 
	
	Если НормироватьРасходыНаГСМНУ Тогда
	
		НормированиеРасходовНаГСМНУ(СтруктураПараметровНУ, Отказ, Заголовок);
		
	КонецЕсли; 
	
	// Расходы на страхование должны рассчитываться последними, поскольку нормируются от общей
	// суммы валовых расходов, т.е. зависят от результатов предыдущих этапов
	Если НормироватьРасходыНаСтрахованиеНУ Тогда
	
		НормированиеРасходовНаСтрахованиеНУ(СтруктураПараметровНУ, Отказ, Заголовок);
		
	КонецЕсли;
	
	// Расчет материальной составляющей
	мКоэффициентМатериальнойСоставляющейРассчитан = Ложь; 
	
	Если РассчитатьМатериальнуюСоставляющуюПродукции Тогда
		
		РассчитатьМатериальнуюСоставляющуюПродукции(СтруктураШапкиДокумента, СтруктураПараметровНУ, Отказ, Заголовок);
		
	КонецЕсли; 
	
	
	Если СформироватьОстатокНезавершенногоПроизводства Тогда
	
		СформироватьОстатокНезавершенногоПроизводства(СтруктураШапкиДокумента, СтруктураПараметровНУ, Отказ, Заголовок);
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрам()
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	
	мНачКвартала 	= НачалоКвартала(ПериодРегистрации);
	мКонКвартала 	= КонецКвартала(ПериодРегистрации);
	мНачГода    	= НачалоГода(ПериодРегистрации);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Сообщить("Документ не используется, проведение невозможно!");
	Возврат;
	
	Если УправлениеПроизводством.ДокументыВПериоде(Ссылка, "Квартал", Новый Структура("Организация", Организация)).Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("За указанный период уже существует документ """ + Ссылка.Метаданные().Представление() + """", Отказ, Заголовок);
	КонецЕсли;
	
	НачПериода = НачалоМесяца(НачалоНалоговогоПериода);
	КонПериода = КонецМесяца(ПериодРегистрации);
	
	КонПериодаВключая = Новый Граница(КонПериода, ВидГраницы.Включая);
	
	// Проверим заполнение шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим заполнение табличной части РаспределениеВаловыхРасходовПоВНД
	ПроверитьЗаполнениеТабличнойЧастиРаспределениеВаловыхРасходовПоВНД(Отказ, Заголовок);
	
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Движения документа по регистрам
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	КонецЕсли; 
	
	Если НормироватьРасходыНаСтрахованиеНУ Тогда
		// при нормировании расходов на страхование уже происходит запись Движения.Налоговый.Записать(Ложь), чтобы не потерять предыдущие движения, необходимо еще раз выполнить Движения.Налоговый.Записать(Ложь)
		Движения.Налоговый.Записать(Ложь);
	КонецЕсли;
		
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");