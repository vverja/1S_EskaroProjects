////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет табличную часть документа "Работники" списком уволенных во всех организациях за период
//
Процедура ЗаполнитьТабличнуюЧастьРаботникиУволенныеИзОрганизаций(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачалаПериода",			ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода",		ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Дата",						Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизаций.Сотрудник,
	|	ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период,ДЕНЬ,-1) КАК ДатаУвольнения,
	|	ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.ПоСобственномуЖеланию) КАК ПричинаУвольнения
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(
	|		&Дата,
	|		Физлицо В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РаботникиОрганизаций.Сотрудник.Физлицо
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ГДЕ
	|				РаботникиОрганизаций.Период МЕЖДУ &ДатаНачалаПериода И &ДатаОкончанияПериода
	|				И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))) КАК РаботникиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО РаботникиСрезПоследних.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|			И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|ГДЕ
	|	РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И РаботникиОрганизаций.Период МЕЖДУ &ДатаНачалаПериода И &ДатаОкончанияПериода
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизаций.Сотрудник.Наименование";
	
	Работники.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаботникиУволенныеИзОрганизаций()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по всем местам работы физлица во всех организациях
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоМестамРаботыРаботника(ВыборкаПоШапкеДокумента,Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",		Дата('00010101'));
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений": 
	// 1. Выборка "ТЧРаботники": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникуДоНазначения": 
	//		Для каждой строки ТЧРаботники выполняем срез по регистру РегистрСведенийРаботники на дату ДатаУвольнения
	//		для выполнения движений и проверки "Работает ли работник на дату увольнения"
	//		(Использует данные выборки "ДатыПоследнегоДвиженияРаботника")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "Сотрудник".

	// Вторая часть запроса - вид строки запроса "НачисленияРаботников" и "УдержанияРаботников" - выборка открытых начислений и удержаний работника для их закрытия
	// 1. Выборка "ТЧРаботники":
	//		Выбираются строки документа 
	// 2. Выборка "СписокВидовРасчета":
	//		Для каждой строки ТЧРаботники по регистрам ПлановыеНачисленияРаботников и ПлановыеУдержанияРаботников выполняем срез последних на дату ДатаУвольнения (выборка СписокВидовРасчета).
	//		Для закрытия нужны только те строки начислений и удержаний, ресурс "Размер" которых не равен нулю.
	//		Удержания физлица закрываем по всем структруным подразделениям только в момент увольнения с основного места работы.

	//
	// Третья часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	//		На каждую дату увольнения ищем движения в регистре "РегистрСведенийРаботники" 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботники.Сотрудник,
	|	ТЧРаботники.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧРаботники.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботники.ДатаУвольнения,
	|	ТЧРаботники.ПричинаУвольнения,
	|	ДанныеПоРаботникуДоНазначения.Подразделение КАК ПрежнееПодразделение,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
	|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL КАК ВидРасчетаИзмерение,
	|	NULL КАК ВидРасчетаРесурс,
	|	NULL КАК ДокументОснованиеРасчета,
	|	NULL КАК КонфликтныйДокумент
	|ИЗ
	|	Документ.Увольнение.Работники КАК ТЧРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РегистрСведенийРаботники.Период) КАК ДатаДвижения
	|		ИЗ
	|			Документ.Увольнение.Работники КАК ТЧРаботники
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрСведенийРаботники
	|				ПО РегистрСведенийРаботники.ФизЛицо = ТЧРаботники.Сотрудник.Физлицо
	|					И РегистрСведенийРаботники.Период <= ТЧРаботники.ДатаУвольнения
	|		ГДЕ
	|			ТЧРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботники.НомерСтроки) КАК ДатыПоследнегоДвиженияРаботника
	|		ПО ДатыПоследнегоДвиженияРаботника.НомерСтроки = ТЧРаботники.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК ДанныеПоРаботникуДоНазначения
	|		ПО ДанныеПоРаботникуДоНазначения.ФизЛицо = ТЧРаботники.Сотрудник.Физлицо
	|			И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнегоДвиженияРаботника.ДатаДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботники2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.Увольнение.Работники КАК ТЧРаботники
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.Работники КАК ТЧРаботники2
	|				ПО (ТЧРаботники2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботники.Сотрудник = ТЧРаботники2.Сотрудник
	|					И ТЧРаботники.НомерСтроки > ТЧРаботники2.НомерСтроки
	|		ГДЕ
	|			ТЧРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботники.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботники.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокВидовРасчета.ВидСтрокиЗапроса,
	|	ТЧРаботники.НомерСтроки,
	|	ТЧРаботники.Сотрудник,
	|	ТЧРаботники.Сотрудник.Наименование,
	|	ТЧРаботники.Сотрудник.Физлицо,
	|	ТЧРаботники.ДатаУвольнения,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СписокВидовРасчета.ВидРасчетаИзмерение,
	|	СписокВидовРасчета.ВидРасчетаРесурс,
	|	СписокВидовРасчета.ДокументОснование,
	|	NULL
	|ИЗ
	|	Документ.Увольнение.Работники КАК ТЧРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			""НачисленияРаботников"" КАК ВидСтрокиЗапроса,
	|			ДатыНачислений.Сотрудник КАК Сотрудник,
	|			NULL КАК Физлицо,
	|			НачисленияРаботников.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|			НачисленияРаботников.ВидРасчета КАК ВидРасчетаРесурс,
	|			NULL КАК ДокументОснование
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботников КАК НачисленияРаботников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					Док.Сотрудник КАК Сотрудник,
	|					НачисленияРаботников.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|					МАКСИМУМ(НачисленияРаботников.Период) КАК ДатаИзмененияРеквизитов
	|				ИЗ
	|					Документ.Увольнение.Работники КАК Док
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботников КАК НачисленияРаботников
	|						ПО Док.Сотрудник.Физлицо = НачисленияРаботников.Физлицо
	|							И Док.ДатаУвольнения >= НачисленияРаботников.Период
	|							И (Док.Ссылка = &ДокументСсылка)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Док.Сотрудник,
	|					НачисленияРаботников.ВидРасчетаИзмерение) КАК ДатыНачислений
	|				ПО НачисленияРаботников.Период = ДатыНачислений.ДатаИзмененияРеквизитов
	|					И НачисленияРаботников.Физлицо = ДатыНачислений.Сотрудник.Физлицо
	|					И НачисленияРаботников.ВидРасчетаИзмерение = ДатыНачислений.ВидРасчетаИзмерение
	|					И (НачисленияРаботников.Действует)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""УдержанияРаботников"",
	|			NULL,
	|			УдержанияРаботников.ФизЛицо,
	|			УдержанияРаботников.ВидРасчета,
	|			NULL,
	|			УдержанияРаботников.ДокументОснование
	|		ИЗ
	|			РегистрСведений.ПлановыеУдержанияРаботников КАК УдержанияРаботников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					УдержанияРаботников.ФизЛицо КАК Физлицо,
	|					УдержанияРаботников.ВидРасчета КАК ВидРасчета,
	|					УдержанияРаботников.ДокументОснование КАК ДокументОснование,
	|					МАКСИМУМ(УдержанияРаботников.Период) КАК ДатаИзмененияРеквизитов
	|				ИЗ
	|					Документ.Увольнение.Работники КАК Док
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботников КАК УдержанияРаботников
	|						ПО Док.Сотрудник.Физлицо = УдержанияРаботников.ФизЛицо
	|							И Док.ДатаУвольнения >= УдержанияРаботников.Период
	|							И (Док.Ссылка = &ДокументСсылка)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					УдержанияРаботников.ФизЛицо,
	|					УдержанияРаботников.ВидРасчета,
	|					УдержанияРаботников.ДокументОснование) КАК ДатыУдержаний
	|				ПО УдержанияРаботников.Период = ДатыУдержаний.ДатаИзмененияРеквизитов
	|					И УдержанияРаботников.ФизЛицо = ДатыУдержаний.Физлицо
	|					И УдержанияРаботников.ВидРасчета = ДатыУдержаний.ВидРасчета
	|					И УдержанияРаботников.ДокументОснование = ДатыУдержаний.ДокументОснование
	|					И (УдержанияРаботников.Действует)) КАК СписокВидовРасчета
	|		ПО (ВЫБОР
	|				КОГДА СписокВидовРасчета.Сотрудник ЕСТЬ NULL 
	|					ТОГДА ТЧРаботники.Сотрудник.Физлицо = СписокВидовРасчета.Физлицо
	|				ИНАЧЕ ТЧРаботники.Сотрудник = СписокВидовРасчета.Сотрудник
	|			КОНЕЦ)
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	ТЧРаботники.НомерСтроки,
	|	NULL,
	|	NULL,
	|	ТЧРаботники.Сотрудник.Физлицо,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КонфликтныеДвижения.Регистратор
	|ИЗ
	|	Документ.Увольнение.Работники КАК ТЧРаботники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегистрСведенийРаботники.Период КАК Период,
	|			РегистрСведенийРаботники.ФизЛицо КАК Физлицо,
	|			РегистрСведенийРаботники.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрСведений.Работники КАК РегистрСведенийРаботники
	|		ГДЕ
	|			РегистрСведенийРаботники.ФизЛицо В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						УвольнениеРаботники.Сотрудник.Физлицо
	|					ИЗ
	|						Документ.Увольнение.Работники КАК УвольнениеРаботники
	|					ГДЕ
	|						УвольнениеРаботники.Ссылка = &ДокументСсылка)) КАК КонфликтныеДвижения
	|		ПО КонфликтныеДвижения.Физлицо = ТЧРаботники.Сотрудник.Физлицо
	|			И (КонфликтныеДвижения.Период = ВЫБОР
	|				КОГДА ТЧРаботники.ДатаУвольнения = &ПустаяДата
	|					ТОГДА &ПустаяДата
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ТЧРаботники.ДатаУвольнения, ДЕНЬ, 1)
	|			КОНЕЦ)
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам. 
//  Отказ        - флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаУвольнения
		НетДатыУвольнения = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения);
		Если НетДатыУвольнения Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата увольнения!", Отказ, Заголовок);
		КонецЕсли;

		Если НетСотрудника ИЛИ НетДатыУвольнения Тогда
			Возврат;
		КонецЕсли;

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		КонецЕсли;

		// Сотрудник указан дважды
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "работник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//	СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();

	СтруктураПроведенияПоРегистрамСведений.Вставить("Работники");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеНачисленияРаботников");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеУдержанияРаботников");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПериодыРаботыРаботников");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаМестРаботы, 
	СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")
	
	Если ВыборкаМестРаботы.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "Работники";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаМестРаботы.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.Физлицо					= ВыборкаМестРаботы.Физлицо;
			
			// Ресурсы
			Движение.Подразделение				= ВыборкаМестРаботы.ПрежнееПодразделение;
			Движение.Должность					= ВыборкаМестРаботы.ПрежняяДолжность;
			// не записываем значения для этих ресурсов:
			//Движение.ЗанимаемыхСтавок
			
			// Реквизиты
			Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Увольнение;
			Движение.ПричинаУвольнения			= ВыборкаМестРаботы.ПричинаУвольнения;
			
		КонецЕсли;
		
		ИмяРегистра = "ПериодыРаботыРаботников";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Измерения
			Движение.Физлицо		= ВыборкаМестРаботы.Физлицо;
			Движение.ДатаОкончания	= ВыборкаМестРаботы.ДатаУвольнения + мДлинаСуток;
		КонецЕсли;
		
	ИначеЕсли ВыборкаМестРаботы.ВидСтрокиЗапроса = "НачисленияРаботников" Тогда
		
		ИмяРегистра = "ПлановыеНачисленияРаботников";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаМестРаботы.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.Физлицо					= ВыборкаМестРаботы.Физлицо;
			Движение.ВидРасчетаИзмерение		= ВыборкаМестРаботы.ВидРасчетаИзмерение;
			
			// Ресурсы
			Движение.Действие					= Перечисления.ВидыДействияСНачислением.Прекратить;
			Движение.ВидРасчета					= ВыборкаМестРаботы.ВидРасчетаРесурс;
			Движение.Действует					= Ложь;
			
		КонецЕсли; 
		
	ИначеЕсли ВыборкаМестРаботы.ВидСтрокиЗапроса = "УдержанияРаботников" Тогда
		
		ИмяРегистра = "ПлановыеУдержанияРаботников";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаМестРаботы.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.Физлицо					= ВыборкаМестРаботы.Физлицо;
			Движение.ВидРасчета					= ВыборкаМестРаботы.ВидРасчетаИзмерение;
			Движение.ДокументОснование			= ВыборкаМестРаботы.ДокументОснованиеРасчета;
			
			// Ресурсы
			Движение.Действие					= Перечисления.ВидыДействияСНачислением.Прекратить;
			Движение.Действует					= Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеРабочиеМеста");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаМестРаботы, 
	СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")
	
	Если ВыборкаМестРаботы.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "ЗанятыеРабочиеМеста";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаМестРаботы.ДатаУвольнения + мДлинаСуток;
			Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.Подразделение 		   	= ВыборкаМестРаботы.ПрежнееПодразделение;
			Движение.Должность			   	= ВыборкаМестРаботы.ПрежняяДолжность;
			
			// Ресурсы
			Движение.Количество		      	= ВыборкаМестРаботы.ПрежняяСтавка;
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоМестамРаботыРаботника(ВыборкаПоШапкеДокумента, Режим);
    	    ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботники.Следующий() Цикл 
				
				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, Отказ, Заголовок);
						
				Если НЕ Отказ тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамНакопления);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамСведений);
				КонецЕсли; 
				
			КонецЦикла;
 		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения" модуля объекта
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.РезультатИспытательногоСрока") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Ссылка",	Основание);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РезультатИспытательногоСрока.Сотрудник,
		|	РезультатИспытательногоСрока.ДатаИзменения КАК ДатаУвольнения,
		|	ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.НеПрошелИспытательныйСрок) КАК ПричинаУвольнения,
		|	ВЫБОР
		|		КОГДА Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|				ИЛИ Работники.ПричинаИзмененияСостояния ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УжеУволен,
		|	ПРЕДСТАВЛЕНИЕ(Работники.Регистратор) КАК ДокументУвольнения
		|ИЗ
		|	Документ.РезультатИспытательногоСрока КАК РезультатИспытательногоСрока
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				Работники.ФизЛицо КАК ФизЛицо
		|			ИЗ
		|				РегистрСведений.Работники КАК Работники
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезультатИспытательногоСрока КАК РезультатИспытательногоСрока
		|					ПО Работники.ФизЛицо = РезультатИспытательногоСрока.Сотрудник.Физлицо
		|						И (Работники.Период <= ДОБАВИТЬКДАТЕ(РезультатИспытательногоСрока.ДатаИзменения, ДЕНЬ, 1))
		|						И (РезультатИспытательногоСрока.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыИспытательногоСрока.Отрицательный))
		|			ГДЕ
		|				РезультатИспытательногоСрока.Ссылка = &Ссылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Работники.ФизЛицо) КАК Периоды
		|			ПО Работники.Период = Периоды.Период
		|				И Работники.ФизЛицо = Периоды.ФизЛицо
		|		ПО РезультатИспытательногоСрока.Сотрудник.Физлицо = Работники.ФизЛицо
		|ГДЕ
		|	РезультатИспытательногоСрока.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.УжеУволен Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Сотрудник " + Выборка.Сотрудник + " уже уволен документом " + Выборка.ДокументУвольнения);
			Иначе
				ЗаполнитьЗначенияСвойств(Работники.Добавить(), Выборка);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.УвольнениеИзОрганизаций") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Регистратор",				Основание);
			Запрос.УстановитьПараметр("Дата",						Дата);
			Запрос.УстановитьПараметр("Увольнение",					Перечисления.ПричиныИзмененияСостояния.Увольнение);
			Запрос.УстановитьПараметр("ПоСобственномуЖеланию",		Справочники.ОснованияУвольнения.ПоСобственномуЖеланию);
			Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник,
			|	МИНИМУМ(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения) КАК ДатаУвольнения,
			|	&ПоСобственномуЖеланию КАК ПричинаУвольнения
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(
			|		&Дата,
			|		Физлицо В
			|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо
			|			ИЗ
			|				Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
			|			ГДЕ
			|				УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Регистратор)) КАК РаботникиСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
			|		ПО РаботникиСрезПоследних.ФизЛицо = УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо
			|			И (УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство)
			|ГДЕ
			|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Регистратор
			|	И РаботникиСрезПоследних.ПричинаИзмененияСостояния <> &Увольнение
			|
			|СГРУППИРОВАТЬ ПО
			|	УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник
			|
			|УПОРЯДОЧИТЬ ПО
			|	УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Наименование";
			
			Работники.Загрузить(Запрос.Выполнить().Выгрузить());
		
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда	
		НоваяСтрока = Работники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Основание);
		НоваяСтрока.Сотрудник = Основание;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Работники);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказы.Добавить();
		ЗаписьРегистрации.Период      = Дата;
		ЗаписьРегистрации.Регистратор = Ссылка;
	КонецЕсли;
	
	Движения.ПериодыРаботыРаботников.РежимЗаписиРегистратора = РежимЗаписи;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;
