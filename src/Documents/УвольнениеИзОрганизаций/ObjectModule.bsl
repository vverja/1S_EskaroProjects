////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если ИмяМакета = "П8_от_09_10_1995" Тогда
 		ТабДокумент = ПечатьП8();
	ИначеЕсли ИмяМакета = "П4_от_05_12_2008" Тогда
 		ТабДокумент = ПечатьП4();	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Увольнение из организации "));

КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("П4_от_05_12_2008", "Форма П-4");
	СтруктураМакетов.Вставить("П8_от_09_10_1995", "Форма П-8 (от 09.10.1995)");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция Автозаполнение(ПостроительЗапроса) Экспорт
	
	ИсходныйТекстПостроителя = ПостроительЗапроса.Текст;
	ТекстЗапросаПоСпискуРаботников = СтрЗаменить(ИсходныйТекстПостроителя,"РАЗРЕШЕННЫЕ","");
	ТекстЗапросаПоСпискуРаботников = Лев(ТекстЗапросаПоСпискуРаботников, Найти(ТекстЗапросаПоСпискуРаботников,"УПОРЯДОЧИТЬ") - 1);
	
	ПостроительЗапроса.Параметры.Вставить("ГоловнаяОрганизация", 	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	ОсновнойТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокРаботников.Сотрудник,
	|	СписокРаботников.Сотрудник.ФизЛицо КАК ФизЛицо
	//|	,ВЫБОР
	//|		КОГДА СписокРаботников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	//|			ТОГДА ЛОЖЬ
	//|		КОГДА НДФЛПрименениеВычетовСрезПоследних.Организация = &ГоловнаяОрганизация
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ПрекращатьСтандартныеВычеты
	|ИЗ
	|		(" + ТекстЗапросаПоСпискуРаботников + ") КАК СписокРаботников
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов.СрезПоследних(&ДатаАктуальности, ) КАК НДФЛПрименениеВычетовСрезПоследних
	//|		ПО СписокРаботников.Сотрудник.Физлицо = НДФЛПрименениеВычетовСрезПоследних.Физлицо
	|";
	
	//Основной текст запроса
	ПостроительЗапроса.Текст = ОсновнойТекстЗапроса;
	ПостроительЗапроса.Выполнить();
	РаботникиОрганизации.Загрузить(ПостроительЗапроса.Результат.Выгрузить());
	
КонецФункции //Автозаполнение()

// Заполняет табличную часть документа "РаботникиОрганизации" списком уволенных в компании за период
//
Процедура ЗаполнитьТабличнуюЧастьРаботникиОрганизацииУволенные(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ДатаНачалаПериода",			ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода",		ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Дата",						Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	МИНИМУМ(УвольнениеРаботники.ДатаУвольнения) КАК ДатаУвольнения
	//|	,ВЫБОР
	//|		КОГДА (НЕ НДФЛПрименениеВычетовСрезПоследних.Физлицо ЕСТЬ NULL )
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ПрекращатьСтандартныеВычеты
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&Дата,
	|		Организация = &ГоловнаяОрганизация
	|			И Сотрудник.Физлицо В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					УвольнениеРаботники.Сотрудник.Физлицо
	|				ИЗ
	|					Документ.Увольнение.Работники КАК УвольнениеРаботники
	|				ГДЕ
	|					УвольнениеРаботники.Ссылка.Проведен
	|					И УвольнениеРаботники.ДатаУвольнения МЕЖДУ &ДатаНачалаПериода И &ДатаОкончанияПериода)) КАК РаботникиОрганизацииСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение.Работники КАК УвольнениеРаботники
	|		ПО (РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Владелец = &Организация)
	|			И РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо = УвольнениеРаботники.Сотрудник.Физлицо
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов.СрезПоследних(
	//|		&Дата,
	//|		Организация = &ГоловнаяОрганизация
	//|			И Физлицо В
	//|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|					УвольнениеРаботники.Сотрудник.Физлицо
	//|				ИЗ
	//|					Документ.Увольнение.Работники КАК УвольнениеРаботники
	//|				ГДЕ
	//|					УвольнениеРаботники.Ссылка.Проведен
	//|					И УвольнениеРаботники.ДатаУвольнения МЕЖДУ &ДатаНачалаПериода И &ДатаОкончанияПериода)) КАК НДФЛПрименениеВычетовСрезПоследних
	//|		ПО РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо = НДФЛПрименениеВычетовСрезПоследних.Физлицо
	//|			И (НДФЛПрименениеВычетовСрезПоследних.Организация = &ГоловнаяОрганизация)
	//|			И (РаботникиОрганизацииСрезПоследних.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|ГДЕ
	|	РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И УвольнениеРаботники.Ссылка.Проведен
	|	И УвольнениеРаботники.ДатаУвольнения МЕЖДУ &ДатаНачалаПериода И &ДатаОкончанияПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизацииСрезПоследних.Сотрудник,
	//|	ВЫБОР
	//|		КОГДА (НЕ НДФЛПрименениеВычетовСрезПоследних.Физлицо ЕСТЬ NULL )
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Наименование";
	
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаботникиОрганизацииУволенные()

Функция ОпределитьКВОДнейОтпускаДляКомпенсации(Сотрудник = Неопределено, ДатаУвольнения)Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаУвольнения", ДатаУвольнения);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.организация	КАК Организация,
	|	&ДатаУвольнения КАК ДатаОкончания,
	|	ПоложенныеОтпуска.ВидОтпуска
	|	
	|ПОМЕСТИТЬ
	|	ВТРаботникиОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПервых(,Сотрудник = &Сотрудник И Организация = &Организация ) КАК РаботникиОрганизации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПоложенныеЕжегодныеОтпускаРаботников.СрезПоследних(&ДатаУвольнения) КАК ПоложенныеОтпуска
	|ПО ПоложенныеОтпуска.Сотрудник = РаботникиОрганизации.Сотрудник
	|ГДЕ
	|	НЕ ПоложенныеОтпуска.ВидОтпуска.ОтпускНеКомпенсируется
	|	
	|";
	Запрос.Выполнить();
	
	//Получаем таблицу остатков отпусков
	ПроцедурыУправленияПерсоналом.ПолучитьТаблицуОстатковДнейОтпуска(Запрос.МенеджерВременныхТаблиц);
		
	//Дни отпуска рабочего периода, в котором увольняется сотрудник, необходимо брать пропорционально количеству отработанных дней.
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОстатокОтпуска.Сотрудник КАК Сотрудник,
	|	ВЫБОР 
	|		КОГДА &ДатаУвольнения МЕЖДУ ОстатокОтпуска.РабочийПериодНачало И ОстатокОтпуска.РабочийПериодОкончание ТОГДА
	|			ВЫРАЗИТЬ(ОстатокОтпуска.ПоложеноДнейОтпуска*РАЗНОСТЬДАТ(ОстатокОтпуска.РабочийПериодНачало,&ДатаУвольнения, ДЕНЬ)/
	|				(РАЗНОСТЬДАТ(ОстатокОтпуска.РабочийПериодНачало,ОстатокОтпуска.РабочийПериодОкончание, ДЕНЬ)+1)
	|			КАК ЧИСЛО(3,0)) - ВЫРАЗИТЬ(ОстатокОтпуска.ИспользованоДнейОтпуска КАК ЧИСЛО(3,0))
	|		ИНАЧЕ
	|	        ОстатокОтпуска.ОстатокДнейОтпуска		
	|	КОНЕЦ КАК ОстатокДней	
	|ИЗ
	|	ВТОстатокДнейОтпуска КАК ОстатокОтпуска
	|ИТОГИ 
	|	СУММА(ОстатокДней)
	|ПО ОстатокОтпуска.Сотрудник
	|";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Сотрудник");
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОстатокДней;
	КонецЕсли;	
КонецФункции

Функция ЗаполнитьКомпенсируемыеДниОтпуска() Экспорт
	Для Каждого СтрокаТЧ ИЗ РаботникиОрганизации Цикл
		КвоДней = ОпределитьКВОДнейОтпускаДляКомпенсации(СтрокаТЧ.Сотрудник, СтрокаТЧ.ДатаУвольнения);
		СтрокаТч.КомпенсироватьДнейЕжегодногоОтпуска = КвоДней;
	КонецЦикла;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	Запрос.УстановитьПараметр("Организация",	Организация);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	УвольнениеИзОрганизаций.Номер КАК НомерДок,
		|	УвольнениеИзОрганизаций.Дата КАК ДатаДок,
		|	УвольнениеИзОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	УвольнениеИзОрганизаций.Организация.Префикс
		|ИЗ
		|	Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО УвольнениеИзОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	УвольнениеИзОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, УвольнениеИзОрганизацииРаботники.Сотрудник.Наименование) КАК Работник,
		|	УвольнениеИзОрганизацииРаботники.Сотрудник.ДатаДоговора КАК ТрудовойДоговорДата,
		|	УвольнениеИзОрганизацииРаботники.Сотрудник.НомерДоговора КАК ТрудовойДоговорНомер,
		|	УвольнениеИзОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	УвольнениеИзОрганизацииРаботники.ДатаУвольнения,
        |	УвольнениеИзОрганизацииРаботники.СтатьяКЗОТ,
		|	УвольнениеИзОрганизацииРаботники.РеквизитыДокументаОснования КАК ОснованиеУвольнения,
		|	УвольнениеИзОрганизацииРаботники.КомпенсироватьДнейЕжегодногоОтпуска КАК КомпенсироватьДнейЕжегодногоОтпуска,
		|	Работники.ПодразделениеОрганизации КАК Подразделение,
		|	Работники.Должность КАК Должность,
		|	ЕСТЬNULL(Пособие.Результат,0) КАК Пособие,
		|	ЕСТЬNULL(Пособие.Флаг,ЛОЖЬ) КАК ФлагПособие,
		|	УвольнениеИзОрганизацииРаботники.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
		|			РаботникиОрганизации.Должность.Наименование КАК Должность
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
		|					ПО РаботникиВнутри.Период <= Док.ДатаУвольнения
		|						И РаботникиВнутри.Сотрудник = Док.Сотрудник
		|			ГДЕ
		|				Док.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
		|					И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник) КАК Работники
		|		ПО УвольнениеИзОрганизацииРаботники.Сотрудник = Работники.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		Физлицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				УвольнениеИзОрганизацииРаботники.Сотрудник.Физлицо
		|			ИЗ
		|				Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботники
		|			ГДЕ
		|				УвольнениеИзОрганизацииРаботники.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО УвольнениеИзОрганизацииРаботники.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|    (ВЫБРАТЬ
		|		Начисления.Сотрудник,
		|		ИСТИНА КАК Флаг,
		|		Начисления.Результат
		|     ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
		|     ГДЕ Начисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВыходноеПособие)
		|    )КАК Пособие
		|    ПО Пособие.Сотрудник = УвольнениеИзОрганизацииРаботники.Сотрудник
		|
		|
		|ГДЕ
		|	УвольнениеИзОрганизацииРаботники.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

Функция ПечатьП8()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УвольнениеИзОрганизации_П8";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаДляШапки.Следующий();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);

	// запоминаем области макета
	Макет = ПолучитьМакет("П8_от_09_10_1995");
	ОбластьМакета = Макет.ПолучитьОбласть("Форма");

	// выводим данные о руководителях организации
    Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // данные из шапки
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // данные из шапки
		ОбластьМакета.Параметры.НазваниеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		ОбластьМакета.Параметры.ЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;

		
		ТабДокумент.Вывести(ОбластьМакета);
        	
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьП8()	

Функция ПечатьП4()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УвольнениеИзОрганизации_П4";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаДляШапки.Следующий();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);

	// запоминаем области макета
	Макет = ПолучитьМакет("П4_от_05_12_2008");
	ОбластьМакета = Макет.ПолучитьОбласть("Форма");

	// выводим данные о руководителях организации
    Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // данные из шапки
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // данные из шапки
		ОбластьМакета.Параметры.НазваниеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		ОбластьМакета.Параметры.ЕДРПОУ = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;

		Если ВыборкаРаботники.Пособие <> 0 Тогда
			ОбластьМакета.Параметры.ПособиеГривны = Цел(ВыборкаРаботники.Пособие); 
			ОбластьМакета.Параметры.ПособиеКопейки = (ВыборкаРаботники.Пособие-Цел(ВыборкаРаботники.Пособие))*100; 
		КонецЕсли;	
		
		ТабДокумент.Вывести(ОбластьМакета);
        	
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьП4()	



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	УвольнениеИзОрганизаций.Дата,
	|	УвольнениеИзОрганизаций.Организация,
	|   УвольнениеИзОрганизаций.Организация КАК ГоловнаяОрганизация,
	|	УвольнениеИзОрганизаций.Ссылка
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
	|ГДЕ
	|	УвольнениеИзОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются данными о 
//  работниках из регистра сведений РаботникиОрганизации и о начислениях
//  и удержаниях из регистров сведений 
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ОсновноеМестоРаботы",		Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("Отпуск",						Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("МассивСотрудников",			РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"));

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникиДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизации на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения" в указанной организации (структурном подразделении). 
	//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие одиноковый набор реквизитов <Сотрудник>.
	//
	// Вторая часть запроса - вид строки запроса "НачисленияРаботникаОрганизации" и "УдержанияРаботниковОрганизации" - выборка открытых начислений и удержаний работника для их закрытия
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "СписокВидовРасчета":
	//		Для каждой строки ТЧРаботникиОрганизации по регистрам ПлановыеНачисленияРаботниковОрганизаций и ПлановыеУдержанияРаботниковОрганизаций выполняем срез последних на дату ДатаУвольнения (выборка СписокВидовРасчета).
	//		Для закрытия нужны только те строки начислений и удержаний, ресурс "Размер" которых не равен нулю.
	//		Удержания физлица закрываем по всем структруным подразделениям только в момент увольнения с основного места работы.

	// Третья часть запроса - вид строки запроса "РабочиеМестаДоУвольнения" - выборка остающихся мест работы после увольнения
	// Данные выборки нужня для проверки "Работник не может быть уволен с основного места работы до тех пор, пока он оформлен внутренним совместителем"
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "ДанныеПоРаботникуДоУвольнения":
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по выборке "ДвиженияРаботниковОрганизации" регистру РаботникиОрганизации на дату ДатаУвольнения.
	//		Где выборка "ДвиженияРаботниковОрганизации" есть объединение движений по регистру "РаботникиОрганизации" и движений, которые должны выполниться
	//		проверяемым документом. 

	// Четвертая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "КонфликтныеДвижения":
	//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистрам РаботникиОрганизации и СостояниеРаботниковОрганизации
	//		на дату ДатаУвольнения по набору измерений <Сотрудник>

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПрежнееПодразделение,
	|	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ПрежняяОрганизация,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ПрежнийГрафик,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
	|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ПрежнийГрафикРаботы,
	|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL КАК ВидРасчетаИзмерение,
	|	NULL КАК ВидРасчета,
	|	NULL КАК ДокументОснованиеРасчета,
	|	NULL КАК КонфликтныйДокумент,
	|	NULL КАК ВидЗанятостиПоДругомуМестуРаботы
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Док.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК СостояниеВнутри
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|					ПО (Док.Ссылка = &ДокументСсылка)
	|						И СостояниеВнутри.Период <= Док.ДатаУвольнения
	|						И СостояниеВнутри.Сотрудник = Док.Сотрудник
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Док.Сотрудник) КАК СписокДат
	|			ПО ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения
	|				И ДанныеПоРаботникуДоНазначения.Сотрудник = СписокДат.Сотрудник
	|		ПО ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
	|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизации2.НомерСтроки
	|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""НачисленияРаботникаОрганизации"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СписокВидовРасчета.ВидРасчетаИзмерение,
	|	СписокВидовРасчета.ВидРасчета,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|			НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|			НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|			NULL КАК ДокументОснование
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|					НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|					МАКСИМУМ(НачисленияРаботниковОрганизации.Период) КАК ДатаИзмененияРеквизитов
	|				ИЗ
	|					Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|						ПО Док.ДатаУвольнения >= НачисленияРаботниковОрганизации.Период
	|							И (Док.Ссылка = &ДокументСсылка)
	|							И Док.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
	|				
	|				СГРУППИРОВАТЬ ПО
	|					НачисленияРаботниковОрганизации.ВидРасчетаИзмерение,
	|					НачисленияРаботниковОрганизации.Сотрудник) КАК ДатыНачислений
	|				ПО НачисленияРаботниковОрганизации.Период = ДатыНачислений.ДатаИзмененияРеквизитов
	|					И НачисленияРаботниковОрганизации.ВидРасчетаИзмерение = ДатыНачислений.ВидРасчетаИзмерение
	|					И НачисленияРаботниковОрганизации.Актуальность
	|					И НачисленияРаботниковОрганизации.Сотрудник = ДатыНачислений.Сотрудник) КАК СписокВидовРасчета
	|		ПО ТЧРаботникиОрганизации.Сотрудник = СписокВидовРасчета.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""УдержанияРаботниковОрганизации"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости,
	|	NULL,
	|	СписокВидовРасчета.Организация,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СписокВидовРасчета.ВидРасчета,
	|	NULL,
	|	СписокВидовРасчета.ДокументОснование,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПлановыеУдержанияРаботниковОрганизаций.Сотрудник.ФизЛицо КАК Физлицо,
	|			ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета,
	|			ПлановыеУдержанияРаботниковОрганизаций.Организация КАК Организация,
	|			ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование КАК ДокументОснование
	|		ИЗ
	|			РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ПлановыеУдержанияРаботниковОрганизаций.Организация КАК Организация,
	|					ПлановыеУдержанияРаботниковОрганизаций.Сотрудник.ФизЛицо КАК Физлицо,
	|					ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета,
	|					ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование КАК ДокументОснование,
	|					МАКСИМУМ(ПлановыеУдержанияРаботниковОрганизаций.Период) КАК ДатаИзмененияРеквизитов
	|				ИЗ
	|					Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
	|						ПО Док.ДатаУвольнения >= ПлановыеУдержанияРаботниковОрганизаций.Период
	|							И (Док.Ссылка = &ДокументСсылка)
	|							И (ПлановыеУдержанияРаботниковОрганизаций.Организация = &Организация)
	|							И Док.Сотрудник.Физлицо = ПлановыеУдержанияРаботниковОрганизаций.Сотрудник.ФизЛицо
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ПлановыеУдержанияРаботниковОрганизаций.Организация,
	|					ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета,
	|					ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование,
	|					ПлановыеУдержанияРаботниковОрганизаций.Сотрудник.ФизЛицо) КАК ДатыУдержаний
	|				ПО ПлановыеУдержанияРаботниковОрганизаций.Период = ДатыУдержаний.ДатаИзмененияРеквизитов
	|					И ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета = ДатыУдержаний.ВидРасчета
	|					И ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование = ДатыУдержаний.ДокументОснование
	|					И ПлановыеУдержанияРаботниковОрганизаций.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И ПлановыеУдержанияРаботниковОрганизаций.Сотрудник.ФизЛицо = ДатыУдержаний.Физлицо) КАК СписокВидовРасчета
	|		ПО ТЧРаботникиОрганизации.Сотрудник.Физлицо = СписокВидовРасчета.Физлицо
	|			И (ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""РабочиеМестаДоУвольнения"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ДанныеПоРаботникуДоУвольнения.Сотрудник,
	|	ДанныеПоРаботникуДоУвольнения.Сотрудник.Наименование,
	|	ДанныеПоРаботникуДоУвольнения.Сотрудник.Физлицо,
	|	NULL,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДанныеПоРаботникуДоУвольнения.Сотрудник.ВидЗанятости
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоУвольнения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ДвиженияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|				МАКСИМУМ(ДвиженияРаботниковОрганизации.Период) КАК ДатаПоследнегоИзменения
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ДвиженияРаботниковОрганизации.Период КАК Период,
	|					ДвиженияРаботниковОрганизации.Сотрудник КАК Сотрудник
	|				ИЗ
	|					РегистрСведений.РаботникиОрганизаций КАК ДвиженияРаботниковОрганизации
	|				ГДЕ
	|					ДвиженияРаботниковОрганизации.Организация = &ГоловнаяОрганизация
	|					И ДвиженияРаботниковОрганизации.Сотрудник В(&МассивСотрудников)
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					ТЧРаботникиОрганизации.ДатаУвольнения,
	|					ТЧРаботникиОрганизации.Сотрудник
	|				ИЗ
	|					Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ГДЕ
	|					ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка) КАК ДвиженияРаботниковОрганизации
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
	|					ПО (Док.Ссылка = &ДокументСсылка)
	|						И (ДвиженияРаботниковОрганизации.Период <= ВЫБОР
	|							КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|						КОНЕЦ)
	|						И ДвиженияРаботниковОрганизации.Сотрудник.Физлицо = Док.Сотрудник.Физлицо
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ДвиженияРаботниковОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийПоПриказам
	|			ПО ДанныеПоРаботникуДоУвольнения.Период = ДатыПоследнихДвиженийПоПриказам.ДатаПоследнегоИзменения
	|				И (ДанныеПоРаботникуДоУвольнения.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|				И ДанныеПоРаботникуДоУвольнения.Сотрудник = ДатыПоследнихДвиженийПоПриказам.Сотрудник
	|		ПО ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоУвольнения.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КонфликтныеДвижения.Регистратор,
	|	NULL
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизации.Период КАК Период,
	|			РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|			РаботникиОрганизации.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ГДЕ
	|			РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|			И РаботникиОрганизации.Сотрудник В(&МассивСотрудников)) КАК КонфликтныеДвижения
	|		ПО (КонфликтныеДвижения.Период = ВЫБОР
	|				КОГДА ТЧРаботникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1)
	|			КОНЕЦ)
	|			И ТЧРаботникиОрганизации.Сотрудник = КонфликтныеДвижения.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	КонфликтныеДвижения.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КонфликтныеДвижения.Регистратор,
	|	NULL
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонфликтныеДвижения.НомерСтроки КАК НомерСтроки,
	|		КонфликтныеДвижения.Регистратор КАК Регистратор
	|	ИЗ
	|		(ВЫБРАТЬ
	|			КонфликтныеДвижения.НомерСтроки КАК НомерСтроки,
	|			КонфликтныеДвижения.Сотрудник КАК Сотрудник,
	|			КонфликтныеДвижения.Период КАК Период,
	|			КонфликтныеДвижения.Регистратор КАК Регистратор,
	|			МАКСИМУМ(СостояниеРаботниковОрганизаций.Период) КАК ДатаРегистра
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|				КонфликтныеДвижения.Период КАК Период,
	|				КонфликтныеДвижения.Регистратор КАК Регистратор
	|			ИЗ
	|				Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						СостояниеРаботниковОрганизации.Период КАК Период,
	|						СостояниеРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|						СостояниеРаботниковОрганизации.Регистратор КАК Регистратор
	|					ИЗ
	|						РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизации
	|					ГДЕ
	|						СостояниеРаботниковОрганизации.Организация = &ГоловнаяОрганизация) КАК КонфликтныеДвижения
	|					ПО (КонфликтныеДвижения.Период = ВЫБОР
	|							КОГДА ТЧРаботникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ИНАЧЕ ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1)
	|						КОНЕЦ)
	|						И ТЧРаботникиОрганизации.Сотрудник = КонфликтныеДвижения.Сотрудник
	|			ГДЕ
	|				ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка) КАК КонфликтныеДвижения
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|				ПО СостояниеРаботниковОрганизаций.Период < КонфликтныеДвижения.Период
	|					И КонфликтныеДвижения.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КонфликтныеДвижения.НомерСтроки,
	|			КонфликтныеДвижения.Период,
	|			КонфликтныеДвижения.Регистратор,
	|			КонфликтныеДвижения.Сотрудник) КАК КонфликтныеДвижения
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|			ПО СостояниеРаботниковОрганизаций.Период = КонфликтныеДвижения.ДатаРегистра
	|				И КонфликтныеДвижения.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА КонфликтныеДвижения.Период > СостояниеРаботниковОрганизаций.ПериодЗавершения
	|						И СостояниеРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА СостояниеРаботниковОрганизаций.СостояниеЗавершения
	|				ИНАЧЕ СостояниеРаботниковОрганизаций.Состояние
	|			КОНЕЦ <> &Отпуск) КАК КонфликтныеДвижения
	|ИТОГИ ПО
	|	НомерСтроки,
	|	ВидСтрокиЗапроса";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Сотрудник
		НетСотрудника = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаУвольнения
		НетДатыУвольнения = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения);
		Если НетДатыУвольнения Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата увольнения!", Отказ, Заголовок);
		КонецЕсли;

		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
		КонецЕсли;
	
		Если НетСотрудника ИЛИ НетДатыУвольнения Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
			
		ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
			
		КонецЕсли;

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "работник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет возможность увольнения работника с точки зрения последовательности приказов по "ВидамЗанятости"
//
Процедура ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";

	// обходим строки запроса
	Пока ВыборкаСтрокЗапроса.Следующий() Цикл

		ВидЗанятостиПоПриказу = ВыборкаСтрокЗапроса.ВидЗанятости;
	
		Если ВидЗанятостиПоПриказу = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда

			// При увольнении с основного места работы потребуем, чтобы не было внутреннего совместительства
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство  Тогда
				СтрокаСообщениеОбОшибке = "нельзя уволить работника с основного места работы до тех пор,
				|	пока он оформлен внутренним совместителем!
				|	(Сотрудник: " + ВыборкаСтрокЗапроса.Сотрудник + ")"; 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьВидыЗанятостиРаботникаВОрганизации()

// Создает и заполняет структуру, содержащую имена регистров сведений
// по которым надо проводить документ
//
// Параметры: 
//	СтруктураПроведенияПоРегистрамСведений	- структура, содержащая имена регистров сведений 
//											  по которым надо проводить документ
//
// Возвращаемое значение:
//	Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("РаботникиОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеНачисленияРаботниковОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеУдержанияРаботниковОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПериодыРаботыРаботниковОрганизацийПоСовместительству");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ЛьготыРаботниковОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ВзносыВФондыРаботниковОрганизаций");	
КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
	СтруктураПроведенияПоРегистрамСведений)
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "РаботникиОрганизаций";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства		
			Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			// Ресурсы
			Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
			Движение.Должность					= ВыборкаПоРаботникиОрганизации.ПрежняяДолжность;
			Движение.ГрафикРаботы				= ВыборкаПоРаботникиОрганизации.ПрежнийГрафик;
			// не записываем значения для этих ресурсов:
			//Движение.ЗанимаемыхСтавок
			//Движение.ВидЗанятости
			
			// Реквизиты
			Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Увольнение;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
			
		КонецЕсли;
		
		ИмяРегистра = "ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			Если ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Измерения
				Движение.Физлицо		= ВыборкаПоРаботникиОрганизации.Физлицо;
				Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			КонецЕсли;
		КонецЕсли;
		
		ИмяРегистра = "ПериодыРаботыРаботниковОрганизацийПоСовместительству";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			Если ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Измерения
				Движение.Физлицо		= ВыборкаПоРаботникиОрганизации.Физлицо;
				Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			КонецЕсли;
		КонецЕсли;
		
		// снимаем льготу НДФПЛ
		Если ВыборкаПоРаботникиОрганизации.ВидЗанятости <> Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			// Льготы работника	
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Льготы.Организация,
			|	Льготы.Сотрудник,
			|	Льготы.Льгота,
			|   Льготы.Актуальность,
			|	Льготы.Период
			|
			|ИЗ
			|	РегистрСведений.ЛьготыРаботниковОрганизаций.СрезПоследних(&Дата)	КАК Льготы
			|
			|ГДЕ
			|	Льготы.Организация 	= &Организация
			| И Льготы.Сотрудник	= &Сотрудник
			|
			|";
			
			Запрос.УстановитьПараметр("Организация"	, ВыборкаПоРаботникиОрганизации.ПрежняяОрганизация);
			Запрос.УстановитьПараметр("Сотрудник"	, ВыборкаПоРаботникиОрганизации.Сотрудник);
			Запрос.УстановитьПараметр("Дата"		, ВыборкаПоРаботникиОрганизации.ДатаУвольнения);
			Выборка = Запрос.Выполнить().Выбрать();
			Отказ = ложь;	
			
			ИспользуетсяНК = ПроведениеРасчетов.ИспользуетсяНК(ВыборкаПоРаботникиОрганизации.ДатаУвольнения);
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Актуальность = Истина Тогда		
					Если Выборка.Период >= НачалоМесяца(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) Тогда
						Сообщить("В месяце " + Выборка.Период + "работнику " + Выборка.Сотрудник + " назначена " + Выборка.Льгота.Наименование + ".
						|Перед проведением документа удалите данную льготу.", СтатусСообщения.Важное);
						Отказ = Истина;
						//Прервать;
						Возврат;
					КонецЕсли;
			
					ИмяРегистра = "ЛьготыРаботниковОрганизаций";
					Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
					
						Движение = Движения[ИмяРегистра].Добавить();		
						// Свойства		
						Если НЕ ИспользуетсяНК Тогда
							Движение.Период						= НачалоМесяца(ВыборкаПоРаботникиОрганизации.ДатаУвольнения);				
						Иначе
							//Льгота применяется в месяце увольнения
							Движение.Период						= КонецМесяца(ВыборкаПоРаботникиОрганизации.ДатаУвольнения)+1;				
						КонецЕсли;
						
						// Измерения
						Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
						Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;	
						Движение.Льгота						= Выборка.Льгота;
						// Ресурсы
						Движение.Актуальность				= Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Взносы в фонды работника
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Взносы.Организация,
			|	Взносы.Сотрудник,
			|	Взносы.Налог,
			|   Взносы.Актуальность
			|
			|ИЗ
			|	РегистрСведений.ВзносыВФондыРаботниковОрганизаций.СрезПоследних(&Дата)	КАК Взносы
			|
			|ГДЕ
			|	Взносы.Организация 	= &Организация
			| И Взносы.Сотрудник	= &Сотрудник
			|
			|";
			
			Запрос.УстановитьПараметр("Организация"	, ВыборкаПоРаботникиОрганизации.ПрежняяОрганизация);
			Запрос.УстановитьПараметр("Сотрудник"	, ВыборкаПоРаботникиОрганизации.Сотрудник);
			Запрос.УстановитьПараметр("Дата"		, ВыборкаПоРаботникиОрганизации.ДатаУвольнения);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Актуальность = Истина Тогда
					Движение = Движения.ВзносыВФондыРаботниковОрганизаций.Добавить();		
					// Свойства
					Движение.Период                     = КонецМесяца(ВыборкаПоРаботникиОрганизации.ДатаУвольнения);
					
					// Измерения
					Движение.Сотрудник                  = Выборка.Сотрудник;
					Движение.Организация           		= Выборка.Организация;
					Движение.Налог						= Выборка.Налог;
					
					// Ресурсы
					Движение.Актуальность				= Ложь;
				КонецЕсли;		
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "НачисленияРаботникаОрганизации" Тогда
		
		ИмяРегистра = "ПлановыеНачисленияРаботниковОрганизаций";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период					= КонецДня(ВыборкаПоРаботникиОрганизации.ДатаУвольнения);  
			
			// Измерения
			Движение.Сотрудник				= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ВидРасчетаИзмерение	= ВыборкаПоРаботникиОрганизации.ВидРасчетаИзмерение;
			
			// Ресурсы
			Движение.Актуальность			= Ложь;
			Движение.ВидРасчета				= ВыборкаПоРаботникиОрганизации.ВидРасчета;
			
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "УдержанияРаботниковОрганизации" Тогда
		
		ИмяРегистра = "ПлановыеУдержанияРаботниковОрганизаций";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период						= КонецДня(ВыборкаПоРаботникиОрганизации.ДатаУвольнения);  
			
			// Измерения
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.ВидРасчета					= ВыборкаПоРаботникиОрганизации.ВидРасчетаИзмерение;
			Движение.ДокументОснование			= ВыборкаПоРаботникиОрганизации.ДокументОснованиеРасчета;
			
			// Ресурсы
			Движение.Действие					= Перечисления.ВидыДействияСНачислением.Прекратить;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеШтатныеЕдиницыОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
	СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "ЗанятыеШтатныеЕдиницыОрганизаций";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
			Движение.Должность					= ВыборкаПоРаботникиОрганизации.ПрежняяДолжность;
			
			// Ресурсы
			Движение.КоличествоСтавок			= ВыборкаПоРаботникиОрганизации.ПрежняяСтавка; 
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления);
			
			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим);
			ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл

				// выберем все виды строк запроса для текущей строки документа
				ВыборкаПоВидамСтрокЗапроса = ВыборкаПоСтрокамДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВидамСтрокЗапроса.Следующий() Цикл

					// Для каждого вида строки запроса свои проверки
					ВидСтрокиЗапроса = ВыборкаПоВидамСтрокЗапроса.ВидСтрокиЗапроса;
					ВыборкаСтрокЗапроса = ВыборкаПоВидамСтрокЗапроса.Выбрать();

					Если (ВидСтрокиЗапроса = "РабочиеМестаДоУвольнения") Тогда

						// проверим виды занятости работника в организации
						ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок);

					Иначе

						// обходим строки запроса, проверяем данные и формируем движения
						Пока ВыборкаСтрокЗапроса.Следующий() Цикл
							
							ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок);
							Если НЕ Отказ Тогда
								ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, СтруктураПроведенияПоРегистрамСведений);
								ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, СтруктураПроведенияПоРегистрамНакопления);
							КонецЕсли;
							
						КонецЦикла;

					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

			//Если НЕ Отказ Тогда
			//	ПрекратитьВычетыРаботникам();
			//КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения" модуля объекта
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.Увольнение") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда
			
			ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			Запрос.УстановитьПараметр("Организация",				Организация);
			Запрос.УстановитьПараметр("Регистратор",				Основание);
			Запрос.УстановитьПараметр("Дата",						Дата);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизацииСрезПоследних.Сотрудник,
			|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
			|	МИНИМУМ(УвольнениеРаботники.ДатаУвольнения) КАК ДатаУвольнения
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|		&Дата,
			|		Организация = &ГоловнаяОрганизация
			|			И Сотрудник.Физлицо В
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					УвольнениеРаботники.Сотрудник.Физлицо
			|				ИЗ
			|					Документ.Увольнение.Работники КАК УвольнениеРаботники
			|				ГДЕ
			|					УвольнениеРаботники.Ссылка = &Регистратор)) КАК РаботникиОрганизацииСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение.Работники КАК УвольнениеРаботники
			|		ПО (РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Владелец = &Организация)
			|			И РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо = УвольнениеРаботники.Сотрудник.Физлицо
			|ГДЕ
			|	РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|
			|СГРУППИРОВАТЬ ПО
			|	РаботникиОрганизацииСрезПоследних.Сотрудник
			|
			|УПОРЯДОЧИТЬ ПО
			|	РаботникиОрганизацииСрезПоследних.Сотрудник.Наименование";
			
			РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
		
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда	
		
		Если Основание.ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Основание.ОбособленноеПодразделение.Пустая() Тогда
			Организация = Основание.ОбособленноеПодразделение;
		Иначе
			Организация = Основание.Организация;
		КонецЕсли;
		
		НоваяСтрока = РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Основание);
		НоваяСтрока.Сотрудник = Основание;
		
		НоваяСтрока.ДатаУвольнения = ТекущаяДата();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// получить новый номер документа по совокупности кадровых документов
	ПроцедурыУправленияПерсоналом.ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Организация.Префикс, Дата);

	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(РаботникиОрганизации);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказыОрганизации.Добавить();
		ЗаписьРегистрации.Период		= Дата;
		ЗаписьРегистрации.Регистратор	= Ссылка;
	КонецЕсли;
	
	Движения.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.РежимЗаписиРегистратора = РежимЗаписи;
	Движения.ПериодыРаботыРаботниковОрганизацийПоСовместительству.РежимЗаписиРегистратора = РежимЗаписи;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// проверим уникальность номера с точки зрения кадровой нумерации
	ПроцедурыУправленияПерсоналом.ПроверкаУникальностиНомераКадровогоДокумента(ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Дата, Ссылка);

КонецПроцедуры // ПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;
