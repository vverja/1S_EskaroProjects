Перем мУдалятьДвижения;

Перем мУказаниеПроектовВТабличнойЧастиДокументов Экспорт;
Перем мСписокСчетовБух Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА, ИСПОЛЬЗУЕМЫЕ ДЛЯ ОБЫЧНОГО ПРИЛОЖЕНИЯ

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	Иначе
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.УслугиСобственнымПодразделениям", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.УслугиСобственнымПодразделениям", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечФорм = Новый Структура;
	СтруктПечФорм.Вставить( "УслугиСобственнымПодразделениям", "Услуги собственным подразделениям");
	Возврат СтруктПечФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	// Передается параметр ЗаполнятьСчетаНоменклатуры = Ложь
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, , Ложь);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

//Заполняет счета учета номенклатуры и затрат в шапке документа
Процедура ЗаполнитьСчетаУчетаВШапке() Экспорт
	//Передаются параметры ЗаполнятьСчетаЗатрат=Истина, ЗаполнятьСчетаНоменклатуры=Ложь
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаШапки(ЭтотОбъект, ОтражатьВБухгалтерскомУчете, Истина, Ложь);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// в обычном режиме
Процедура ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента, ТаблицаЗатрат)
	
	Если ЗначениеЗаполнено(Номенклатура) И НЕ Номенклатура.Услуга Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Указана номенклатура """ + Номенклатура + """, которая не является услугой", Отказ, Заголовок);
	КонецЕсли;
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	УправлениеПроизводством.ПроверитьПроизводственныеПодразделения(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим, что пользователь указал корректные счета учета и налоговые назначения
	Для Каждого СтрокаТЧ Из ТаблицаЗатрат Цикл
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(СтрокаТЧ.Счет) И мСписокСчетовБух.НайтиПоЗначению(СтрокаТЧ.Счет) = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Указан Счет, который НЕ является счетом учета затрат (строка № " + СтрокаТЧ.НомерСтроки + " табличной части ""Получатели"")", Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС) Тогда 

			НалоговыйУчет.ПроверитьНалоговыеНазначенияПриВыпускеПродукции(
				"Получатели",
				СтрокаТЧ.НомерСтроки,
				Отказ, 
				Заголовок,
				СтруктураШапкиДокумента.НалоговоеНазначение,
				СтрокаТЧ.Счет,                               // СчетЗатратПолучатель 
				СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат   // НалоговоеНазначениеДоходовИЗатрат
			);
					
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

//Процедура добавляет в структуру полей сведения о НоменклатурнойГруппе из Номенклатуры
//	Эти сведения впоследствии могут пригодиться для заполнения незаполненной НоменклатурнойГруппы
//	Также процедура готовит структуру, сопоставляющую поля из табличной части документа и поля из номенклатуры
Процедура ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок)
	
	// Откуда берем данные для заполнения
	СтруктураПолей.Вставить("НоменклатурнаяГруппаНоменклатуры", "Ссылка.Номенклатура.НоменклатурнаяГруппаЗатрат");
	СтруктураПолей.Вставить("СтатьяЗатратНоменклатуры", 		"Ссылка.Номенклатура.СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатратНоменклатуры",       "Ссылка.Номенклатура.СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ВидЗатратНоменклатуры",            "Ссылка.Номенклатура.СтатьяЗатрат.ВидЗатрат");
	
	// Куда заполняем данные
	СтруктураОбрабатываемыхКолонок = Новый Структура();
	СтруктураОбрабатываемыхКолонок.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппаНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("СтатьяЗатрат",         "СтатьяЗатратНоменклатуры"); // Обязательная к заполнению
	СтруктураОбрабатываемыхКолонок.Вставить("ХарактерЗатрат",       "ХарактерЗатратНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("ВидЗатрат",            "ВидЗатратНоменклатуры");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// Заполнение нового документа
	Дата = ТекущаяДата();
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
	// Заполнение по настройке
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, ДанныеЗаполнения, Документы.УслугиСобственнымПодразделениям.СтруктураДополнительныхДанныхФормы());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	Если НЕ ОтражатьВУправленческомУчете Тогда
		//Заполнение подразделения проверять не требуется
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("Подразделение");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("Затраты.ПодразделениеПолучатель");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПроверяемыеРеквизиты.Добавить("ПодразделениеОрганизации");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если УчетнаяПолитика <> Неопределено И НЕ УчетнаяПолитика.ЕстьНДС Тогда
			НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		КонецЕсли; 
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Неопределено,         // ТабличнаяЧастьТовары
			Неопределено,         // ТабличнаяЧастьВозвратнаяТара
			Затраты,              // ТабличнаяЧастьУслуги
			Неопределено,         // ТабличнаяЧастьОборудование
			Неопределено, 		  // ТабличнаяЧастьОбъектыСтроительства
			Неопределено,		  // ТабличнаяЧастьБланкиСтрогогоУчета
			"Счет",
			"",
			Истина  			  // НеЗаполнятьНалоговоеНазначение
		);
	КонецЕсли;	
	

	Если Не мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.ЗаполнитьПроектВСтрокахТабЧасти(ЭтотОбъект, Затраты);
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	// Дополним полями, нужными для регл. и упр. учета
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВедениеУчетаЗатратПоПроектам", "ВедениеУчетаЗатратПоПроектам");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	
	
	// Подготовим таблицу с данными табличной части
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НоменклатурнаяГруппа",               "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Продукция",                          "Продукция");
	СтруктураПолей.Вставить("СерияПродукции",                     "СерияПродукции");
	СтруктураПолей.Вставить("Счет",                               "Счет");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат",  "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ХарактеристикаПродукции",            "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("Заказ",                              "Заказ");
	СтруктураПолей.Вставить("Проект",                             "Проект");
	СтруктураПолей.Вставить("ПодразделениеПолучатель",            "ПодразделениеПолучатель");
	СтруктураПолей.Вставить("ПодразделениеОрганизацииПолучатель", "ПодразделениеОрганизацииПолучатель");
	СтруктураПолей.Вставить("СтатьяЗатрат",                       "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат",                     "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ВидЗатрат",                          "СтатьяЗатрат.ВидЗатрат");
	СтруктураПолей.Вставить("Количество",                         "Количество");
	СтруктураПолей.Вставить("Номенклатура",                       "Ссылка.Номенклатура"); // нужна для СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти()

	СтруктураОбрабатываемыхКолонок = Новый Структура();
	ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок);
	
	ТаблицаЗатрат = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Затраты", СтруктураПолей).Выгрузить();
	
	//Заполним в таблице подразделение организации
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуДокументаПодразделениемОрганизации(СтруктураШапкиДокумента, ТаблицаЗатрат);
	
	//Заполнение незаполненных реквизитов табличной части: СтатьяЗатрат, НоменклатурнаяГруппа
	ОбщегоНазначенияКлиентСервер.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВТаблицеДокумента(ТаблицаЗатрат, СтруктураОбрабатываемыхКолонок);
	
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Затраты", ТаблицаЗатрат, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента, ТаблицаЗатрат);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоЗатратам", ТаблицаЗатрат));
	
КонецПроцедуры	// ОбработкаПроведения()

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,, ОбъектКопирования.Ссылка);
КонецПроцедуры

мУказаниеПроектовВТабличнойЧастиДокументов = УправлениеПроектами.УказаниеПроектовВТабличнойЧастиДокументов();

мСписокСчетовБух = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", "231, 232, 233, 24, 91, 92, 93", Ложь);
