Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыМеждУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура();
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "БазаРаспределения.Подразделение";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "БазаРаспределения.ПодразделениеОрганизации,
								|БазаРаспределения.СчетЗатрат, БазаРаспределения.НалоговоеНазначение";
	
								
	мСтрокаРеквизитыМеждУчета = "";
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		мСтрокаРеквизитыМеждУчета = мСтрокаРеквизитыМеждУчета + "БазаРаспределения.ПодразделениеОрганизации";
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Проверим принадлежность документа к одному из видов учета.
	Если Не ОтражатьВУправленческомУчете
	   И Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВМеждународномУчете
	Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"", ""Бухгалтерский"", или ""Международный"".", Отказ, Заголовок);
	КонецЕсли;

	// Укажем, что надо проверить.
	ОбязательныеРеквизитыШапки = "Организация, СпособРаспределенияЗатрат";
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета);
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и оранизации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ЭтотОбъект, БазаРаспределения, "База распределения",, Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					БазаРаспределения.Выгрузить(), 
					"База распределения",
					Отказ, 
					Заголовок, 
					"Производство", // ВидОперации
					Ложь           // ЭтоЗатраты 
	);	
	
	
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура заполняет табличную часть по способу распределения затрат.
//
Процедура ЗаполнитьПоСпособуРаспределенияЗатрат() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СпособРаспределенияЗатратШаблон) Тогда
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
		
	Если не ОтражатьВУправленческомУчете
	   И не ОтражатьВБухгалтерскомУчете Тогда
	    Предупреждение("Не указано отражение в учете");
		Возврат;
	КонецЕсли;
	
	#КонецЕсли
	
	// Выбрать вид учета для заполнения
	СписВыбора = Новый СписокЗначений;
	Если ОтражатьВУправленческомУчете Тогда
		СписВыбора.Добавить("УУ", "Управленческий учет");
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		СписВыбора.Добавить("БУ", "Бухгалтерский учет");
	КонецЕсли;
	
	
	Если СписВыбора.Количество() = 1 Тогда
		Выбор = СписВыбора[0];
	Иначе
		Выбор = СписВыбора.ВыбратьЭлемент("Выберите вид учета для заполнения...", СписВыбора[0].Значение);
		Если Выбор = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВидУчета = Выбор.Значение;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете);
	СтруктураПараметров.Вставить("ОтражатьВМеждународномУчете", ОтражатьВМеждународномУчете);
	СтруктураПараметров.Вставить("Организация", Организация);
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ВалютаУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Иначе
		ВалютаУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	КонецЕсли;
		
	СтруктураПараметров.Вставить("ВалютаУчета", ВалютаУчета);
	СтруктураПараметров.Вставить("Дата", КонецМесяца(Дата));
	СтруктураПараметров.Вставить("БазаРаспределенияЗатрат");
	СтруктураПараметров.Вставить("ПоказательБазыРаспределения");
	СтруктураПараметров.Вставить("ТипЦен");
	СтруктураПараметров.Вставить("РаспределятьНаСобственнуюПродукцию");
	СтруктураПараметров.Вставить("РаспределятьНаПродукциюИзДавальческогоСырья");
	СтруктураПараметров.Вставить("РаспределятьНаПродукциюСтороннегоПереработчика");
	СтруктураПараметров.Вставить("РаспределятьНаНаработку");
	СтруктураПараметров.Вставить("ИзменитьНаКоэффициент");
	СтруктураПараметров.Вставить("Коэффициент");
	СтруктураПараметров.Вставить("ИзменитьНаПроцент");
	СтруктураПараметров.Вставить("Процент");
	СтруктураПараметров.Вставить("ОкруглитьДо");
	СтруктураПараметров.Вставить("ПорядокОкругления");
	СтруктураПараметров.Вставить("СпособРаспределенияЗатрат");
	СтруктураПараметров.Вставить("ОсновноеСырье");
	СтруктураПараметров.Вставить("ТипФильтраПриРаспределенииЗатратНаВыпуск");
	СтруктураПараметров.Вставить("Фильтры");

	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СпособРаспределенияЗатратШаблон,,"Фильтры");    
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
			И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	
	ТаблицаСпособыРаспределения = новый ТаблицаЗначений;
	ТаблицаСпособыРаспределения.Колонки.Добавить("СпособРаспределенияЗатратНаВыпуск",Новый ОписаниеТипов("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск"));
	ТаблицаСпособыРаспределения.Колонки.Добавить("СтатьяЗатрат",Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаСпособыРаспределения.Колонки.Добавить("Фильтры", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаСпособыРаспределения.Колонки.Добавить("ТипФильтраПриРаспределенииЗатратНаВыпуск", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыФильтровПриРаспределенииЗатратНаВыпуск"));

    СтрокаТаблицыСпособыРаспределения = ТаблицаСпособыРаспределения.Добавить();
	СтрокаТаблицыСпособыРаспределения.СпособРаспределенияЗатратНаВыпуск = СпособРаспределенияЗатратШаблон;
	СтрокаТаблицыСпособыРаспределения.Фильтры = СпособРаспределенияЗатратШаблон.Фильтры.Выгрузить();
	СтрокаТаблицыСпособыРаспределения.ТипФильтраПриРаспределенииЗатратНаВыпуск = СпособРаспределенияЗатратШаблон.ТипФильтраПриРаспределенииЗатратНаВыпуск;

	ТаблицаБазыРаспределения = ПроцедурыРасчетаБазыРаспределенияЗатрат.СформироватьТаблицуБазыРаспределенияЗатрат(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		ТаблицаСпособыРаспределения  
	);
	
	БазаРаспределения.Очистить();
	
	Для Каждого Строка Из ТаблицаБазыРаспределения Цикл
			   
		НоваяСтрока = БазаРаспределения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
		Если ВидУчета = "БУ" Тогда
			НоваяСтрока.База = Строка.БазаРегл;
			НоваяСтрока.БазаПриход = Строка.БазаПриходРегл;
			НоваяСтрока.БазаОстатокНЗП = Строка.БазаОстатокНЗПРегл;
			
			
			
		КонецЕсли;   			
					
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоСпособуРаспределенияЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента)
	
	ПроцедурыРасчетаБазыРаспределенияЗатрат.СформироватьДвиженияПоБазеРаспределенияЗатратВручную(СтруктураШапкиДокумента);
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("Период", Дата);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений регистров.
	ДвиженияПоРегистрам(СтруктураШапкиДокумента);
	
КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

