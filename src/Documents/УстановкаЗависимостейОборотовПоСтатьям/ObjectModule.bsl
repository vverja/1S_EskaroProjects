Перем мУдалятьДвижения;
 
Процедура ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Объект,НаименованиеОбъекта,ТекстПустоеЗначение,ПустаяСсылка=Неопределено)

	Если ЗначениеЗаполнено(Объект) Тогда
		
		Если ТекстПустоеЗначение="Неопределено" Тогда
			
			ТекстУсловия=ТекстУсловия+"
			|И (Исх"+НаименованиеОбъекта+"=&"+НаименованиеОбъекта+" ИЛИ Исх"+НаименованиеОбъекта+"=Неопределено)";
			
			Запрос.УстановитьПараметр(НаименованиеОбъекта,Объект);
			
		Иначе
			
			ТекстУсловия=ТекстУсловия+"
			|И (Исх"+НаименованиеОбъекта+"=&"+НаименованиеОбъекта+" ИЛИ Исх"+НаименованиеОбъекта+"=&"+ТекстПустоеЗначение+НаименованиеОбъекта+")";
			
			Запрос.УстановитьПараметр(НаименованиеОбъекта,Объект);
			Запрос.УстановитьПараметр(ТекстПустоеЗначение+НаименованиеОбъекта,ПустаяСсылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьРавенствоРеквизитов(ИсходныйОбъект,ЗависимыйОбъект)
	
	Равенство=Ложь;
	
	Если НЕ ЗначениеЗаполнено(ИсходныйОбъект)
		ИЛИ НЕ ЗначениеЗаполнено(ЗависимыйОбъект)
		ИЛИ ИсходныйОбъект=ЗависимыйОбъект Тогда
		
		Равенство=Истина;
		
	КонецЕсли;
	
	Возврат Равенство;
	
КонецФункции 

Функция ПроверкаНеоднозначнойЗависимости()
		
	ОднозначнаяЗависимость=Истина;
	
	Запрос=Новый Запрос;
	
	ТекстУсловия="ИсхСтатьяОборотов=&ТекСтатьяОборотов";
	Запрос.УстановитьПараметр("ТекСтатьяОборотов",СтатьяОборотовВлияющая);
	
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Сценарий,"Сценарий","Пустой",Справочники.СценарииПланирования.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ЦФО,"ЦФО","Пустой",Справочники.Подразделения.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Проект,"Проект","Пустой",Справочники.Проекты.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Контрагент,"Контрагент","Пустой",Справочники.Контрагенты.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Номенклатура,"Номенклатура","Неопределено");
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ЗависимостиОборотовПоСтатьям.ИсхСценарий КАК ИсхСценарий,
	             |	ЗависимостиОборотовПоСтатьям.ИсхЦФО КАК ИсхЦФО,
	             |	ЗависимостиОборотовПоСтатьям.ИсхПроект КАК ИсхПроект,
				 |	ЗависимостиОборотовПоСтатьям.ИсхКонтрагент КАК ИсхКонтрагент,
				 |	ЗависимостиОборотовПоСтатьям.ИсхНоменклатура КАК ИсхНоменклатура,
	             |	ЗависимостиОборотовПоСтатьям.ЗависимаяСтатьяОборотов КАК ЗависимаяСтатьяОборотов,
	             |	ЗависимостиОборотовПоСтатьям.Регистратор.Представление КАК Регистратор
	             |ИЗ
	             |	РегистрСведений.ЗависимостиОборотовПоСтатьямБюджетирования.СрезПоследних(&ДатаНач,"+ТекстУсловия+") КАК ЗависимостиОборотовПоСтатьям";
	
	Запрос.УстановитьПараметр("ДатаНач",Дата);
		
	РезультатЗапроса=Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат ОднозначнаяЗависимость;
		
	Иначе
		
		ТабЗависимыхСтатей=РезультатЗапроса.Выгрузить();
		
		Для Каждого ТекущаяЗависимость Из ТабЗависимыхСтатей Цикл
			
			Если (НЕ ЗависимостиОборотовПоСтатьям.Найти(ТекущаяЗависимость.ЗависимаяСтатьяОборотов,"ЗависимаяСтатьяОборотов")=Неопределено)
				И (НЕ (ПроверитьРавенствоРеквизитов(ТекущаяЗависимость.ИсхСценарий,Сценарий)
					И ПроверитьРавенствоРеквизитов(ТекущаяЗависимость.ИсхЦФО,ЦФО)
					И ПроверитьРавенствоРеквизитов(ТекущаяЗависимость.ИсхПроект,Проект)
					И ПроверитьРавенствоРеквизитов(ТекущаяЗависимость.ИсхНоменклатура,Номенклатура)
					И ПроверитьРавенствоРеквизитов(ТекущаяЗависимость.ИсхКонтрагент,Контрагент))) Тогда
				#Если Клиент Тогда
				Сообщить("Неоднозначная зависимость для статьи "+ТекущаяЗависимость.ЗависимаяСтатьяОборотов+".
				|Уже установлена следующая зависимость, пересекающаяся с текущей:
				|Документ: "+ТекущаяЗависимость.Регистратор+"
				|Сценарий: "+?(ТекущаяЗависимость.ИсхСценарий=Справочники.СценарииПланирования.ПустаяСсылка()," не указан",ТекущаяЗависимость.ИсхСценарий)+"
				|ЦФО: "+?(ТекущаяЗависимость.ИсхЦФО=Справочники.Подразделения.ПустаяСсылка()," не указан",ТекущаяЗависимость.ИсхЦФО)+"
				|Проект: "+?(ТекущаяЗависимость.ИсхПроект=Справочники.Проекты.ПустаяСсылка()," не указан",ТекущаяЗависимость.ИсхПроект)+"
				|Контрагент: "+?(ТекущаяЗависимость.ИсхКонтрагент=Справочники.Контрагенты.ПустаяСсылка()," не указан",ТекущаяЗависимость.ИсхКонтрагент)+"
				|Номенклатура: "+?(ТекущаяЗависимость.ИсхНоменклатура=Неопределено," не указано",ТекущаяЗависимость.ИсхНоменклатура)+".");
                #КонецЕсли
				ОднозначнаяЗависимость=Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ОднозначнаяЗависимость;
		
	КонецЕсли;
	
КонецФункции // ПроверкаНеоднозначнойЗависимости()



// Проверяет отсутствие среди статей, рекурсивно зависящих от выбранной, выбранной статьи
//
Функция ПроверкаРекурсивнойЗависимости(ТекСтатьяОборотов,
										ТекЦФО,
										ТекПроект,
										ТекКонтрагент,
										ТекНоменклатура)

	ПроверкаПройдена=Истина;
	Запрос=Новый Запрос;
	
	ТекстУсловия="ИсхСтатьяОборотов=&ТекСтатьяОборотов";
	Запрос.УстановитьПараметр("ТекСтатьяОборотов",ТекСтатьяОборотов);
		
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Сценарий,"Сценарий","Пустой",Справочники.СценарииПланирования.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ТекЦФО,"ЦФО","Пустой",Справочники.Подразделения.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ТекПроект,"Проект","Пустой",Справочники.Проекты.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ТекКонтрагент,"Контрагент","Пустой",Справочники.Контрагенты.ПустаяСсылка());
	
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ТекНоменклатура,"Номенклатура","Неопределено");
		
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ЗависимаяСтатьяОборотов КАК ЗависимаяСтатьяОборотов,
	             |	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ЗависимыйЦФО КАК ЗависимыйЦФО,
	             |	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ЗависимыйПроект КАК ЗависимыйПроект,
	             |	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ЗависимыйКонтрагент КАК ЗависимыйКонтрагент,
	             |	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ЗависимаяНоменклатура КАК ЗависимаяНоменклатура
	             |ИЗ
	             |	РегистрСведений.ЗависимостиОборотовПоСтатьямБюджетирования.СрезПоследних(&ДатаДокумента,"+ТекстУсловия+") КАК ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних";

	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("Статья",ТекСтатьяОборотов);

	РезультатЗапроса=Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда

		Возврат ПроверкаПройдена;

	Иначе

		ТабЗависимыхСтатей=РезультатЗапроса.Выгрузить();

		Для Каждого ТекущаяСтатья Из ТабЗависимыхСтатей Цикл
		
			Если ТекущаяСтатья.ЗависимаяСтатьяОборотов=СтатьяОборотовВлияющая
				И ПроверитьРавенствоРеквизитов(ТекущаяСтатья.ЗависимыйЦФО,ЦФО)
				И ПроверитьРавенствоРеквизитов(ТекущаяСтатья.ЗависимыйПроект,Проект)
				И ПроверитьРавенствоРеквизитов(ТекущаяСтатья.ЗависимыйКонтрагент,Контрагент)
                И ПроверитьРавенствоРеквизитов(ТекущаяСтатья.ЗависимаяНоменклатура,Номенклатура) Тогда

				Возврат НЕ ПроверкаПройдена; 

			Иначе

				ПроверкаПройдена=ПроверкаРекурсивнойЗависимости(ТекущаяСтатья.ЗависимаяСтатьяОборотов,
																ТекущаяСтатья.ЗависимыйЦФО,
																ТекущаяСтатья.ЗависимыйПроект,
																ТекущаяСтатья.ЗависимыйКонтрагент,
																ТекущаяСтатья.ЗависимаяНоменклатура);
				Если Не ПроверкаПройдена Тогда

					Возврат ПроверкаПройдена;

				КонецЕсли;

			КонецЕсли;	
		
		КонецЦикла; 

	КонецЕсли;
	
	Возврат ПроверкаПройдена;

КонецФункции // ПроверкаРекурсивнойЗависимости()
 
// Проверяет список зависимостей на образование циклической
// зависимости
//
Функция ПроверкаЦиклическойЗависимости()

	ПроверкаПройдена=Истина;

	// Простая проверка. Если влияющая статья никогда не встречается среди зависимых в регистре, то
	// проверка пройдена

	Запрос=Новый Запрос;

	Запрос.Текст="ВЫБРАТЬ
	|	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ИсхСтатьяОборотов
	|ИЗ
	|	РегистрСведений.ЗависимостиОборотовПоСтатьямБюджетирования.СрезПоследних(&ДатаДокумента, ЗависимаяСтатьяОборотов=&ВлияющаяСтатья)
	|КАК ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних";

	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("ВлияющаяСтатья",СтатьяОборотовВлияющая);

	Если Запрос.Выполнить().Пустой() Тогда

		Возврат ПроверкаПройдена;

	Иначе  // Поиск среди статей, рекурсивно зависящих от статей в строках ТЧ, влияющей статьи.

		Для Каждого Зависимость Из ЗависимостиОборотовПоСтатьям Цикл

			ПроверкаПройдена=ПроверкаРекурсивнойЗависимости(Зависимость.ЗависимаяСтатьяОборотов,
															Зависимость.ЗависимыйЦФО,
															Зависимость.ЗависимыйПроект,
															Зависимость.ЗависимыйКонтрагент,
															Зависимость.ЗависимаяНоменклатура);

			Если Не ПроверкаПройдена Тогда
				Возврат ПроверкаПройдена;
			КонецЕсли;
			  
		КонецЦикла;

	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции // ПроверкаЦиклическойЗависимости() 


Процедура ОбработкаПроведения(Отказ, Режим)

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	Если Не ПроверкаЦиклическойЗависимости() Тогда

		#Если Клиент Тогда
		Сообщить("Обнаружена циклическая зависимость статей!");
		#КонецЕсли
		Отказ=Истина;

	КонецЕсли;
	
	Если НЕ ПроверкаНеоднозначнойЗависимости() Тогда
		Отказ=Истина;
	КонецЕсли;
	
	Если СтатьяОборотовВлияющая.Пустая() Тогда
		#Если Клиент Тогда
		Сообщить("Не выбрана влияющая статья!");
		#КонецЕсли
		Отказ=Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Для Каждого ТекСтрокаЗависимостиОборотовПоСтатьям Из ЗависимостиОборотовПоСтатьям Цикл
			
			Движение = Движения.ЗависимостиОборотовПоСтатьямБюджетирования.Добавить();
			Движение.Период = Дата;
			Движение.ИсхСтатьяОборотов = СтатьяОборотовВлияющая;
			Движение.ИсхСценарий = Сценарий;
			Движение.ИсхЦФО = ЦФО;
			Движение.ИсхПроект = Проект;
			Движение.ИсхКонтрагент = Контрагент;
			
			Если (НЕ Номенклатура=Неопределено) И (НЕ Номенклатура.Пустая()) Тогда		
				Движение.ИсхНоменклатура = Номенклатура;
			КонецЕсли;
			
			Движение.ЗависимаяСтатьяОборотов = ТекСтрокаЗависимостиОборотовПоСтатьям.ЗависимаяСтатьяОборотов;
			
			Если (НЕ ТекСтрокаЗависимостиОборотовПоСтатьям.ЗависимаяНоменклатура=Неопределено) 
				И (НЕ ТекСтрокаЗависимостиОборотовПоСтатьям.ЗависимаяНоменклатура.Пустая()) Тогда		
				Движение.ЗависимаяНоменклатура = ТекСтрокаЗависимостиОборотовПоСтатьям.ЗависимаяНоменклатура;
			КонецЕсли;
			
			Движение.ЗависимыйКонтрагент = ТекСтрокаЗависимостиОборотовПоСтатьям.ЗависимыйКонтрагент;
			Движение.ЗависимыйПроект = ТекСтрокаЗависимостиОборотовПоСтатьям.ЗависимыйПроект;
			Движение.ЗависимыйЦФО = ТекСтрокаЗависимостиОборотовПоСтатьям.ЗависимыйЦФО;
			
			Движение.РеквизитВлияющейСтатьиДляРасчетаСуммы = ТекСтрокаЗависимостиОборотовПоСтатьям.РеквизитВлияющейСтатьиДляРасчетаСуммы;
			Движение.КоэффициентДляРасчетаСуммы = ТекСтрокаЗависимостиОборотовПоСтатьям.КоэффициентДляРасчетаСуммы;
			Движение.РеквизитВлияющейСтатьиДляРасчетаКоличества = ТекСтрокаЗависимостиОборотовПоСтатьям.РеквизитВлияющейСтатьиДляРасчетаКоличества;
			Движение.КоэффициентДляРасчетаКоличества = ТекСтрокаЗависимостиОборотовПоСтатьям.КоэффициентДляРасчетаКоличества;
			Движение.ЗначениеИзмененияПоПериодам = ТекСтрокаЗависимостиОборотовПоСтатьям.ЗначениеИзмененияПоПериодам;
			
		КонецЦикла;
		
		Движения.ЗависимостиОборотовПоСтатьямБюджетирования.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью


