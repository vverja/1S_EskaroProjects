Перем мУдалятьДвижения;
//Смартис Лиманчук начало 24.05.2012
Перем мПостроительОтчета Экспорт;
Перем мДлинаПериода Экспорт, мКоличествоПериодов Экспорт;
//Смартис Лиманчук окончание 24.05.2012

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

//Смартис Лиманчук начало 24.05.2012
Процедура Инициализация() Экспорт

	СписокНастроек = ПараметрыЗаполнения.Получить();
	Если СписокНастроек <> Неопределено Тогда
		мДлинаПериода = СписокНастроек.ДлинаПериода;		
		мКоличествоПериодов = СписокНастроек.КоличествоПериодов;		
	Иначе
		мДлинаПериода = 10;		
		мКоличествоПериодов = 5;		
	КонецЕсли;
	
	СписокПолей = "";
	СписокВложенныхЗапросов = "";
	СписокНулей = "";
	
	Для Ном = 1 По мКоличествоПериодов Цикл
		
		СписокПолей = СписокПолей + "
		|	СУММА(ВложенныйЗапрос.Период"+Ном+") КАК Период"+Ном+",";
		
		СписокВложенныхЗапросов = 
		СписокВложенныхЗапросов + 
		?(СписокВложенныхЗапросов="","","
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|") + "
		|ВЫБРАТЬ
		|		Реализации.Номенклатура КАК Номенклатура,
		|		Реализации.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,";
		
		Для Ном2 = 1 По мКоличествоПериодов Цикл
			
			СписокВложенныхЗапросов = СписокВложенныхЗапросов + ?(Ном=Ном2,
				"			
				|		СУММА(ВЫБОР
				|				КОГДА Реализации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
				|					ТОГДА -1
				|				ИНАЧЕ 1
				|			КОНЕЦ * Реализации.Количество) КАК Период"+Ном+",",
				"
				|		0 КАК Период"+Ном2+",");
			
		КонецЦикла;
		
		СписокВложенныхЗапросов = СписокВложенныхЗапросов + "
		|		0 КАК План
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК Реализации
		|	ГДЕ
		|		Реализации.Период МЕЖДУ &Период"+Ном+" И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&Период"+Ном+", ДЕНЬ, &ДлинаПериода), СЕКУНДА, -1)
		|		И Реализации.КодОперации В(&СписокОпераций)
		|	{ГДЕ
		|		Реализации.Склад}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Реализации.Номенклатура,
		|		Реализации.ХарактеристикаНоменклатуры";
		
		СписокНулей = СписокНулей + "0,";
		
	КонецЦикла;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,"
		+ СписокПолей + "
		|	СУММА(ВложенныйЗапрос.План) КАК План
		|ИЗ
		|	("+СписокВложенныхЗапросов+"
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПланыПродажОбороты.Номенклатура,
		|		ПланыПродажОбороты.ХарактеристикаНоменклатуры,"
		+ СписокНулей + "
 		//|		ПланыПродажОбороты.КоличествоОборот * ПланыПродажОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент * &ДлинаПериода / (РАЗНОСТЬДАТ(&ДатаРекомендованныхОстатков, КОНЕЦПЕРИОДА(&ДатаРекомендованныхОстатков, МЕСЯЦ), ДЕНЬ) + 1)
		|		ПланыПродажОбороты.КоличествоОборот * &ДлинаПериода / (РАЗНОСТЬДАТ(&ДатаРекомендованныхОстатков, КОНЕЦПЕРИОДА(&ДатаРекомендованныхОстатков, МЕСЯЦ), ДЕНЬ) + 1)
 		|	ИЗ
		|		РегистрНакопления.ПланыПродаж.Обороты(&ДатаРекомендованныхОстатков, КОНЕЦПЕРИОДА(&ДатаРекомендованныхОстатков, МЕСЯЦ), , {(ДокументПланирования)}) КАК ПланыПродажОбороты) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	мПостроительОтчета = Новый ПостроительОтчета;
	мПостроительОтчета.Текст = ТекстЗапроса;
	мПостроительОтчета.ЗаполнитьНастройки();
	
	Если СписокНастроек <> Неопределено Тогда
		мПостроительОтчета.УстановитьНастройки(СписокНастроек.НастройкиПостроителя); 
	КонецЕсли;

КонецПроцедуры
//Смартис Лиманчук окончание 24.05.2012

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();
	//Смартис Лиманчук начало 25.05.2012
	СтруктураОбязательныхПолей.Вставить("Склад");
	СтруктураОбязательныхПолей.Вставить("ДатаРекомендованныхОстатков");
	//Смартис Лиманчук окончание 25.05.2012

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ ";

		// Номенклатура.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнена Номенклатура.", Отказ, Заголовок);
		
		КонецЕсли;

		// СпособОпределенияЗначенияТочкиЗаказа.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособОпределенияЗначенияТочкиЗаказа) Тогда
			
			//Смартис Лиманчук начало 25.05.2012
			//ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнен cпособ определения значения точки заказа.", Отказ, Заголовок);
			//Смартис Лиманчук окончание 25.05.2012
		
		Иначе
			
			Если СтрокаТаблицы.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.Фиксированная Тогда
				
				// ЗначениеТочкиЗаказа.
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗначениеТочкиЗаказа) Тогда
				
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнено значение точки заказа.", Отказ, Заголовок);
				
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.СреднийРазмерПартии Тогда
				
				// ДатаНач.
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаНач) Тогда
				
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнено значение даты начала периода.", Отказ, Заголовок);
				
				КонецЕсли;
				
				// ДатаКон.
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаКон) Тогда
				
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнено значение даты окончания периода.", Отказ, Заголовок);
				
				КонецЕсли;
				
				// ПроцентнаяСтавкаЗначенияТочкиЗаказа.
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПроцентнаяСтавкаЗначенияТочкиЗаказа) Тогда
				
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнено значение процентной ставка значения точки заказа.", Отказ, Заголовок);
				
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.ОптимальныйРазмерЗаказа Тогда
				
				// ДатаНач.
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаНач) Тогда
				
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнено значение даты начала периода.", Отказ, Заголовок);
				
				КонецЕсли;
				
				// ДатаКон.
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаКон) Тогда
				
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнено значение даты окончания периода.", Отказ, Заголовок);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	НаборДвижений   = Движения.ЗначенияТочкиЗаказа;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	//Смартис Лиманчук начало 25.05.2012
	//НаборДвижений.мПериод          = Дата;
	НаборДвижений.мПериод          = ДатаРекомендованныхОстатков;
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	//Смартис Лиманчук окончание 25.05.2012
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		
		Движения.ЗначенияТочкиЗаказа.ВыполнитьДвижения();
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Склад", "Склад");
	СтруктураПолей.Вставить("СпособОпределенияЗначенияТочкиЗаказа", "СпособОпределенияЗначенияТочкиЗаказа");
	СтруктураПолей.Вставить("ЗначениеТочкиЗаказа", "ЗначениеТочкиЗаказа");
	СтруктураПолей.Вставить("МинимальныйСтраховойЗапас", "МинимальныйСтраховойЗапас");
	СтруктураПолей.Вставить("ПроцентнаяСтавкаЗначенияТочкиЗаказа", "ПроцентнаяСтавкаЗначенияТочкиЗаказа");
	СтруктураПолей.Вставить("ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса", "ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса");
	СтруктураПолей.Вставить("ДатаНач", "ДатаНач");
	СтруктураПолей.Вставить("ДатаКон", "ДатаКон");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам          = РезультатЗапросаПоТоварам.Выгрузить();

	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью





