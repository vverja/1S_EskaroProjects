////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат Неопределено;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Диаграмма" Тогда
		Возврат Мероприятие.ПолучитьОбъект().Печать(Ссылка)
	КонецЕсли;

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Диаграмма", "Диаграмма");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Дата, 
	|	Док.Мероприятие,
	| 	Док.Ссылка, 
	|	Мероприятия.ДатаНачала,
	|	Мероприятия.ДатаОкончания
	|		
	|ИЗ 
	|	Документ." + Метаданные().Имя + " КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мероприятия КАК Мероприятия
	|		ПО Мероприятия.Ссылка = Док.Мероприятие
	|		
	|ГДЕ 
	|	Док.Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части "Работники" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса к табличной части документа.
//
Функция СформироватьЗапросПоРаботники(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Свободно", Перечисления.ТипыПериодическихЗадачРаботника.Свободен);

	// Описание текста запроса:
	// 1. Выборка "ПерваяТаблица": 
	//		Представляет собой вложенный запрос, в котором:  
	//         - в выборке "УчастиеВМероприятияхРаботники" выбираются строки документа
	//         - из основной таблицы регистра (выборка "ПланируемаяЗанятостьФизлиц") 
	//           присоединяются даты движений, непосредственно предшествующих
	//           датам окончания частей мероприятия из строк документа
	// 2. Выборка "ПланируемаяЗанятостьФизлиц": 
	//		Из основной таблицы регистра выбираются значения ресурсов на полученные  
	//      в первой выборке даты
	// 3. Выборка "ВтораяТаблица": 
	//		Среди строк документа ищем строки с пересекающимися периодами частей мероприятия 
	//      для одного работника
	//
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
		|	ПерваяТаблица.ДатаЗначения КАК ДатаЗначения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПланируемаяЗанятостьФизлиц.Состояние, &Свободно) <> &Свободно
		|				ИЛИ ПланируемаяЗанятостьФизлиц.Период >= ПерваяТаблица.ЧастьМероприятияДатаНачала
		|			ТОГДА ""Нельзя""
		|		ИНАЧЕ ""Можно""
		|	КОНЕЦ КАК ПроверяемоеЗначение,
		|	ПерваяТаблица.Ссылка,
		|	ПерваяТаблица.ФизЛицо,
		|	ПерваяТаблица.ЧастьМероприятия,
		|	ПерваяТаблица.ХарактерУчастия,
		|	ПерваяТаблица.ЧастьМероприятияДатаНачала КАК ДатаНачалаМероприятия,
		|	ПерваяТаблица.ЧастьМероприятияДатаОкончания КАК ДатаОкончанияМероприятия,
		|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК КонфликтнаяСтрока,
		|	ПерваяТаблица.НевернаяЧастьМероприятия
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ПланируемаяЗанятостьФизлиц.Период) КАК ДатаЗначения,
		|		УчастиеВМероприятияхРаботники.Ссылка КАК Ссылка,
		|		УчастиеВМероприятияхРаботники.НомерСтроки КАК НомерСтроки,
		|		УчастиеВМероприятияхРаботники.ФизЛицо КАК ФизЛицо,
		|		УчастиеВМероприятияхРаботники.ХарактерУчастия КАК ХарактерУчастия,
		|		УчастиеВМероприятияхРаботники.ЧастьМероприятия КАК ЧастьМероприятия,
		|		УчастиеВМероприятияхРаботники.ЧастьМероприятия.ДатаНачала КАК ЧастьМероприятияДатаНачала,
		|		УчастиеВМероприятияхРаботники.ЧастьМероприятия.ДатаОкончания КАК ЧастьМероприятияДатаОкончания,
		|		ВЫБОР
		|			КОГДА УчастиеВМероприятияхРаботники.ЧастьМероприятия.Владелец = УчастиеВМероприятияхРаботники.Ссылка.Мероприятие
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК НевернаяЧастьМероприятия
		|	ИЗ
		|		Документ.УчастиеВМероприятиях.Работники КАК УчастиеВМероприятияхРаботники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК ПланируемаяЗанятостьФизлиц
		|			ПО УчастиеВМероприятияхРаботники.ФизЛицо = ПланируемаяЗанятостьФизлиц.ФизЛицо
		|				И УчастиеВМероприятияхРаботники.ЧастьМероприятия.ДатаОкончания > ПланируемаяЗанятостьФизлиц.Период
		|	ГДЕ
		|		УчастиеВМероприятияхРаботники.Ссылка = &ДокументСсылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		УчастиеВМероприятияхРаботники.Ссылка,
		|		УчастиеВМероприятияхРаботники.НомерСтроки,
		|		УчастиеВМероприятияхРаботники.ФизЛицо,
		|		УчастиеВМероприятияхРаботники.ХарактерУчастия,
		|		УчастиеВМероприятияхРаботники.ЧастьМероприятия,
		|		УчастиеВМероприятияхРаботники.ЧастьМероприятия.ДатаНачала,
		|		УчастиеВМероприятияхРаботники.ЧастьМероприятия.ДатаОкончания,
		|		ВЫБОР
		|			КОГДА УчастиеВМероприятияхРаботники.ЧастьМероприятия.Владелец = УчастиеВМероприятияхРаботники.Ссылка.Мероприятие
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ПерваяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК ПланируемаяЗанятостьФизлиц
		|		ПО ПерваяТаблица.ДатаЗначения = ПланируемаяЗанятостьФизлиц.Период
		|			И ПерваяТаблица.ФизЛицо = ПланируемаяЗанятостьФизлиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УчастиеВМероприятиях.Работники КАК ВтораяТаблица
		|		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
		|			И ПерваяТаблица.ФизЛицо = ВтораяТаблица.ФизЛицо
		|			И (ПерваяТаблица.ЧастьМероприятия.ДатаНачала <= ВтораяТаблица.ЧастьМероприятия.ДатаНачала
		|					И ВтораяТаблица.ЧастьМероприятия.ДатаНачала < ПерваяТаблица.ЧастьМероприятия.ДатаОкончания
		|				ИЛИ ПерваяТаблица.ЧастьМероприятия.ДатаНачала < ВтораяТаблица.ЧастьМероприятия.ДатаОкончания
		|					И ВтораяТаблица.ЧастьМероприятия.ДатаОкончания <= ПерваяТаблица.ЧастьМероприятия.ДатаОкончания
		|				ИЛИ ВтораяТаблица.ЧастьМероприятия.ДатаНачала <= ПерваяТаблица.ЧастьМероприятия.ДатаНачала
		|					И ПерваяТаблица.ЧастьМероприятия.ДатаОкончания <= ВтораяТаблица.ЧастьМероприятия.ДатаОкончания)
		|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	ПерваяТаблица.НомерСтроки,
		|	ПерваяТаблица.ДатаЗначения,
		|	ПерваяТаблица.Ссылка,
		|	ПерваяТаблица.ФизЛицо,
		|	ПерваяТаблица.ЧастьМероприятия,
		|	ПерваяТаблица.ХарактерУчастия,
		|	ПерваяТаблица.ЧастьМероприятияДатаНачала,
		|	ПерваяТаблица.ЧастьМероприятияДатаОкончания,
		|	ПланируемаяЗанятостьФизлиц.Состояние,
		|	ПланируемаяЗанятостьФизлиц.Период,
		|	ПерваяТаблица.НевернаяЧастьМероприятия";
		
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботники()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Помещение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Мероприятие) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано мероприятие!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботники(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";
	
	// Работник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Часть мероприятия
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЧастьМероприятия) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана составная часть мероприятия, в которой участвует работник!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.НевернаяЧастьМероприятия Тогда
		СтрокаПродолжениеСообщенияОбОшибке = " указанная часть мероприятия не принадлежит мероприятию """ + ВыборкаПоШапкеДокумента.Мероприятие + """!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	// Занятость работника
	Если ВыборкаПоСтрокамДокумента.ПроверяемоеЗначение <> "Можно" Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "cотрудник в указанный период времени уже занят!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = " найдена пересекающаяся строка №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиСписокПомещений()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("СобытийныйПланЗанятостиФизлиц");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  ВыборкаПоРаботники             - выборка из результата запроса по строкам документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРаботники(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, 
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СобытийныйПланЗанятостиФизлиц";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоРаботники.ДатаНачалаМероприятия;
		
		// Измерения
		Движение.Физлицо                    = ВыборкаПоРаботники.ФизЛицо;

		// Ресурсы
		Движение.Состояние					= Перечисления.ТипыПериодическихЗадачРаботника.Мероприятие;

		// Реквизиты
		Движение.ДатаОкончания				= ВыборкаПоРаботники.ДатаОкончанияМероприятия;
		Движение.ЧастьМероприятия			= ВыборкаПоРаботники.ЧастьМероприятия;
		Движение.ХарактерУчастия			= ВыборкаПоРаботники.ХарактерУчастия;

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоРаботники.ДатаОкончанияМероприятия - 1;
		
		// Измерения
		Движение.Физлицо                  	= ВыборкаПоРаботники.ФизЛицо;

		// Ресурсы
		Движение.Состояние					= Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
	КонецЕсли;
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРаботники

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
	// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
	// то проводить по нему не надо.
	ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);

	// выборка по шапке документа
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда 

		//Надо проверить реквизиты шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботники(Режим);
			ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать();

			Пока ВыборкаПоРаботники.Следующий() Цикл
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботники(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРаботники(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамСведений);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Работники);
КонецПроцедуры
