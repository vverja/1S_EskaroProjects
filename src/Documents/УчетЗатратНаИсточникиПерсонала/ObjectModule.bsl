Перем мВалютаУправленческогоУчета;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Дата, 
	| 	Ссылка 
	|ИЗ 
	|	Документ." + Метаданные().Имя + "
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Кандидаты" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоЗатратам(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", мВалютаУправленческогоУчета);

	// угловыми скобками выделены изменяющиеся фрагменты текста запроса
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.ИсточникПерсонала,
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.Валюта,
	|	Док.Сумма,
	|	Док.Дата,
	|	Док.КурсДокумента,
	|	Док.КратностьДокумента,
	|	ЕСТЬNULL(КурсыВалют.Курс, 0) КАК Курс,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Кратность
	|ИЗ
	|	Документ.УчетЗатратНаИсточникиПерсонала.Затраты КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УчетЗатратНаИсточникиПерсоналаЗатраты.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(КурсыВалют.Период) КАК Период
	|		ИЗ
	|			Документ.УчетЗатратНаИсточникиПерсонала.Затраты КАК УчетЗатратНаИсточникиПерсоналаЗатраты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|				ПО УчетЗатратНаИсточникиПерсоналаЗатраты.Дата >= КурсыВалют.Период
	|					И (КурсыВалют.Валюта = &ВалютаУправленческогоУчета)
	|		ГДЕ
	|			УчетЗатратНаИсточникиПерсоналаЗатраты.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УчетЗатратНаИсточникиПерсоналаЗатраты.НомерСтроки) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО ВложенныйЗапрос.Период = КурсыВалют.Период
	|				И (КурсыВалют.Валюта = &ВалютаУправленческогоУчета)
	|		ПО Док.НомерСтроки = ВложенныйЗапрос.НомерСтроки
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";
				   	   			   
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоЗатратам()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Кандидаты" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по кандидатам, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиЗатрат(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Затраты"": ";
	
	// ИсточникПерсонала
    ЕстьИсточникПерсонала = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ИсточникПерсонала);
	Если Не ЕстьИсточникПерсонала Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран источник!", Отказ, Заголовок);
	КонецЕсли;

	// Дата
    ЕстьДатаРекламнойАкции= ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Дата);
	Если Не ЕстьДатаРекламнойАкции Тогда	
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата поступления резюме!", Отказ, Заголовок);
	КонецЕсли;

	Если ЕстьИсточникПерсонала и ЕстьДатаРекламнойАкции Тогда
				
		// Проверка: противоречие записи уже внесенных данных.
					
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиЗатрат()

// Создает и заполняет структуру, содержащую имена регистров накоплений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакоплений - структура, содержащая имена регистров накоплений 
//                                             по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакоплений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакоплений)

	СтруктураПроведенияПоРегистрамНакоплений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамНакоплений.Вставить("ЗатратыНаИсточникиПерсонала");
	

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамНакоплений - структура, содержащая имена регистров 
//                                             накоплений по которым надо проводить документ,
//  СтруктураПараметров                      - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакоплений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, 
		  СтруктураПроведенияПоРегистрамНакоплений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "ЗатратыНаИсточникиПерсонала";
	Если СтруктураПроведенияПоРегистрамНакоплений.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                    = ВыборкаПоСтрокамДокумента.Дата;
		
		// Измерения
		Движение.ИсточникПерсонала         = ВыборкаПоСтрокамДокумента.ИсточникПерсонала;
		
		// Ресурсы
		Движение.СуммаЗатрат	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ВыборкаПоСтрокамДокумента.Сумма,ВыборкаПоСтрокамДокумента.Валюта,мВалютаУправленческогоУчета,
																		ВыборкаПоСтрокамДокумента.КурсДокумента ,ВыборкаПоСтрокамДокумента.Курс,
																		ВыборкаПоСтрокамДокумента.КратностьДокумента,ВыборкаПоСтрокамДокумента.Кратность);

	КонецЕсли; 
	
		

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакоплений


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
    Перем СтруктураПроведенияПоРегистрамНакоплений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			 ЗаполнитьСтруктуруПроведенияПоРегистрамНакоплений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакоплений);
			
			// получим реквизиты табличной части
			РезультатЗапросаПоЗатраты = СформироватьЗапросПоЗатратам(Режим);
			ВыборкаПоЗатратам = РезультатЗапросаПоЗатраты.Выбрать();

			Пока ВыборкаПоЗатратам.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиЗатрат(ВыборкаПоШапкеДокумента, ВыборкаПоЗатратам, Отказ, Заголовок);

				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакоплений(ВыборкаПоШапкеДокумента, ВыборкаПоЗатратам, СтруктураПроведенияПоРегистрамНакоплений);

				КонецЕсли;
				
				

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры
