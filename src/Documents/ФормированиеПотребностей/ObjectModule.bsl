Перем мУдалятьДвижения;

Перем мИспользоватьПланыПроизводства Экспорт;
Перем мИспользоватьЗаказыНаПроизводство Экспорт;
Перем мИспользоватьПланыПотребностейПроизводстваПоСменам Экспорт;

Перем мИспользоватьРазузлование Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВыполнитьВыборкуДанных() Экспорт
	
	Перем НовыеПотребности, ТекущиеПотребности;
	
	// Новые потребности
	ЗапросНовыеПотребности = Новый Запрос;
	ЗапросНовыеПотребности.УстановитьПараметр("ДатаДокумента", Дата);
	
	// Планы продаж
	Индекс = 0;
	
	Для каждого Строка из ПланыПродаж Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Сценарий.Периодичность) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Для сценария """ + СокрЛП(Строка(Строка.Сценарий.Наименование)) + """ не указана периодичность.");
			Продолжить;
			
		КонецЕсли;
		
		ДатаНач = Строка.ДатаНач;
		ДатаКон = Строка.ДатаКон;
		
		УправлениеПланированием.ВыровнятьПериод(ДатаНач, ДатаКон, Строка.Сценарий.Периодичность);
		
		ЗапросНовыеПотребности.УстановитьПараметр("ПланыПродажДатаНач" + Формат(Индекс, "ЧГ=0"), ДатаНач);
		ЗапросНовыеПотребности.УстановитьПараметр("ПланыПродажДатаКон" + Формат(Индекс, "ЧГ=0"), ДатаКон);
		
		ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ДатаДокумента КАК Период,
		|	ПланыПродажОбороты.Номенклатура КАК Номенклатура,
		|	ПланыПродажОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПланыПродажОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар) КАК ТоварТара,
		|	Ложь КАК Тара,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПланыПродажОбороты.Период, ДЕНЬ, -1), ДЕНЬ) КАК ДатаПотребности,
		|	ПланыПродажОбороты.Заказ КАК Заказ,
		|	ПланыПродажОбороты.Проект КАК Проект,
		|	ПланыПродажОбороты.Сценарий КАК Сценарий," +
		?(мИспользоватьРазузлование, "
		|	ПланыПродажОбороты.Номенклатура КАК КонечнаяПродукция,
		|	ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка) КАК Спецификация,
		|	ПланыПродажОбороты.Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,", "") + "
		|	ПланыПродажОбороты.КоличествоОборот КАК Количество
		|ИЗ
		|	РегистрНакопления.ПланыПродаж.Обороты(&ПланыПродажДатаНач" + Формат(Индекс, "ЧГ=0") + ", &ПланыПродажДатаКон" + Формат(Индекс, "ЧГ=0") + ", ДЕНЬ, ";
		
		ЗапросНовыеПотребности.УстановитьПараметр("Сценарий" + Формат(Индекс, "ЧГ=0"), Строка.Сценарий);
		ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + "Сценарий = &Сценарий" + Формат(Индекс, "ЧГ=0") + " И ВЫБОР КОГДА Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА Номенклатура.Услуга = Ложь ИНАЧЕ Истина КОНЕЦ";
		
		Если ЗначениеЗаполнено(Строка.Проект) Тогда
			
			ЗапросНовыеПотребности.УстановитьПараметр("Проект" + Формат(Индекс, "ЧГ=0"), Строка.Проект);
			ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + " И Проект = &Проект" + Формат(Индекс, "ЧГ=0");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Подразделение) Тогда
			
			ЗапросНовыеПотребности.УстановитьПараметр("Подразделение" + Формат(Индекс, "ЧГ=0"), Строка.Подразделение);
			ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + " И Подразделение = &Подразделение" + Формат(Индекс, "ЧГ=0");
			
		КонецЕсли;
		
		ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст +
		") КАК ПланыПродажОбороты
		|";
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	// Планы производства
	
	Если мИспользоватьПланыПроизводства Тогда
		
		Индекс = 0;
		
		Для каждого Строка из ПланыПроизводства Цикл
			
			Если НЕ ЗначениеЗаполнено(Строка.Сценарий.Периодичность) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Для сценария """ + СокрЛП(Строка(Строка.Сценарий.Наименование)) + """ не указана периодичность.");
				Продолжить;
				
			КонецЕсли;
			
			ДатаНач = Строка.ДатаНач;
			ДатаКон = Строка.ДатаКон;
			
			УправлениеПланированием.ВыровнятьПериод(ДатаНач, ДатаКон, Строка.Сценарий.Периодичность);
			
			ЗапросНовыеПотребности.УстановитьПараметр("ПланыПроизводстваДатаНач" + Формат(Индекс, "ЧГ=0"), ДатаНач);
			ЗапросНовыеПотребности.УстановитьПараметр("ПланыПроизводстваДатаКон" + Формат(Индекс, "ЧГ=0"), ДатаКон);
			
			ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ДатаДокумента КАК Период,
			|	ПланыПроизводстваОбороты.Номенклатура КАК Номенклатура,
			|	ПланыПроизводстваОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ПланыПроизводстваОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|	ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар) КАК ТоварТара,
			|	Ложь КАК Тара,
			|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПланыПроизводстваОбороты.Период, ДЕНЬ, -1), ДЕНЬ) КАК ДатаПотребности,
			|	ПланыПроизводстваОбороты.Заказ КАК Заказ,
			|	ПланыПроизводстваОбороты.Проект КАК Проект,
			|	ПланыПроизводстваОбороты.Сценарий КАК Сценарий," +
			?(мИспользоватьРазузлование, "
			|	ПланыПроизводстваОбороты.Номенклатура КАК КонечнаяПродукция,
			|	ПланыПроизводстваОбороты.Спецификация КАК Спецификация,
			|	ПланыПроизводстваОбороты.Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,", "") + "
			|	ПланыПроизводстваОбороты.КоличествоОборот КАК Количество
			|ИЗ
			|	РегистрНакопления.ПланыПроизводства.Обороты(&ПланыПроизводстваДатаНач" + Формат(Индекс, "ЧГ=0") + ", &ПланыПроизводстваДатаКон" + Формат(Индекс, "ЧГ=0") + ", ДЕНЬ, ";
			
			ЗапросНовыеПотребности.УстановитьПараметр("Сценарий" + Формат(Индекс, "ЧГ=0"), Строка.Сценарий);
			ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + "Сценарий = &Сценарий" + Формат(Индекс, "ЧГ=0") + " И ВЫБОР КОГДА Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА Номенклатура.Услуга = Ложь ИНАЧЕ Истина КОНЕЦ";
			
			Если ЗначениеЗаполнено(Строка.Проект) Тогда
				
				ЗапросНовыеПотребности.УстановитьПараметр("Проект" + Формат(Индекс, "ЧГ=0"), Строка.Проект);
				ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + " И Проект = &Проект" + Формат(Индекс, "ЧГ=0");
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Подразделение) Тогда
				
				ЗапросНовыеПотребности.УстановитьПараметр("Подразделение" + Формат(Индекс, "ЧГ=0"), Строка.Подразделение);
				ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + " И Подразделение = &Подразделение" + Формат(Индекс, "ЧГ=0");
				
			КонецЕсли;
			
			ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст +
			") КАК ПланыПроизводстваОбороты
			|";
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Внутренние заказы
	Индекс = 0;
	
	Для каждого Строка из ВнутренниеЗаказы Цикл
		
		ЗапросНовыеПотребности.УстановитьПараметр("ВнутреннийЗаказДатаПотребности" + Формат(Индекс, "ЧГ=0"), НачалоДня(Строка.ДатаПотребности));
		
		ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ДатаДокумента КАК Период,
		|	ВнутренниеЗаказыОстатки.Номенклатура КАК Номенклатура,
		|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ВЫБОР КОГДА	СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВозвратнаяТара) ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.ТоварТара.Тара)
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар)
		|	КОНЕЦ КАК ТоварТара,
		|	ВЫБОР КОГДА	СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВозвратнаяТара) ТОГДА
		|		Истина
		|	ИНАЧЕ
		|		Ложь
		|	КОНЕЦ КАК Тара,
		|	&ВнутреннийЗаказДатаПотребности" + Формат(Индекс, "ЧГ=0") + " КАК ДатаПотребности,
		|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ КАК Заказ,
		|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
		|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) КАК Сценарий," +
		?(мИспользоватьРазузлование, "
		|	ВнутренниеЗаказыОстатки.Номенклатура КАК КонечнаяПродукция,
		|	ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка) КАК Спецификация,
		|	ВнутренниеЗаказыОстатки.Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,", "") + "
		|	ВнутренниеЗаказыОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ВнутренниеЗаказы.Остатки(КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ), Номенклатура.Услуга = Ложь";
		
		Если ЗначениеЗаполнено(Строка.Заказ) Тогда
			
			ЗапросНовыеПотребности.УстановитьПараметр("ВнутреннийЗаказ" + Формат(Индекс, "ЧГ=0"), Строка.Заказ);
			ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + " И ВнутреннийЗаказ = &ВнутреннийЗаказ" + Формат(Индекс, "ЧГ=0");
			
		КонецЕсли;
		
		ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст +
		") КАК ВнутренниеЗаказыОстатки
		|
		|ГДЕ ВнутренниеЗаказыОстатки.КоличествоОстаток > 0
		|";
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
			
	// Заказы покупателей
	Индекс = 0;
	
	Для каждого Строка из ЗаказыПокупателей Цикл
		
		ЗапросНовыеПотребности.УстановитьПараметр("ЗаказПокупателяДатаПотребности" + Формат(Индекс, "ЧГ=0"), НачалоДня(Строка.ДатаПотребности));
		
		ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ДатаДокумента КАК Период,
		|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ВЫБОР КОГДА	СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВозвратнаяТара) ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.ТоварТара.Тара)
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар)
		|	КОНЕЦ КАК ТоварТара,
		|	ВЫБОР КОГДА	СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВозвратнаяТара) ТОГДА
		|		Истина
		|	ИНАЧЕ
		|		Ложь
		|	КОНЕЦ КАК Тара,
		|	&ЗаказПокупателяДатаПотребности" + Формат(Индекс, "ЧГ=0") + " КАК ДатаПотребности,
		|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК Заказ,
		|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
		|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) КАК Сценарий," +
		?(мИспользоватьРазузлование, "
		|	ЗаказыПокупателейОстатки.Номенклатура КАК КонечнаяПродукция,
		|	ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка) КАК Спецификация,
		|	ЗаказыПокупателейОстатки.Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,", "") + "
		|	ЗаказыПокупателейОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ), Номенклатура.Услуга = Ложь";
		
		Если ЗначениеЗаполнено(Строка.Заказ) Тогда
			
			ЗапросНовыеПотребности.УстановитьПараметр("ЗаказПокупателя" + Формат(Индекс, "ЧГ=0"), Строка.Заказ);
			ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + " И ЗаказПокупателя = &ЗаказПокупателя" + Формат(Индекс, "ЧГ=0");
			
		КонецЕсли;
		
		ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст +
		") КАК ЗаказыПокупателейОстатки
		|
		|ГДЕ ЗаказыПокупателейОстатки.КоличествоОстаток > 0
		|";
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	// Заказы на производство
	Если мИспользоватьЗаказыНаПроизводство Тогда
		
		Индекс = 0;
	
		Для каждого Строка из ЗаказыНаПроизводство Цикл
			
			ЗапросНовыеПотребности.УстановитьПараметр("ЗаказНаПроизводствоДатаПотребности" + Формат(Индекс, "ЧГ=0"), НачалоДня(Строка.ДатаПотребности));
			
			ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ДатаДокумента КАК Период,
			|	ЗаказыНаПроизводствоОстатки.Номенклатура КАК Номенклатура,
			|	ЗаказыНаПроизводствоОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ЗаказыНаПроизводствоОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|	ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар) КАК ТоварТара,
			|	Ложь КАК Тара,
			|	&ЗаказНаПроизводствоДатаПотребности" + Формат(Индекс, "ЧГ=0") + " КАК ДатаПотребности,
			|	ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство КАК Заказ,
			|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
			|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) КАК Сценарий," +
			?(мИспользоватьРазузлование, "
			|	ЗаказыНаПроизводствоОстатки.Номенклатура КАК КонечнаяПродукция,
			|	ЗаказыНаПроизводствоОстатки.Спецификация КАК Спецификация,
			|	ЗаказыНаПроизводствоОстатки.ВидВоспроизводства КАК ВидВоспроизводства,", "") + "
			|	ЗаказыНаПроизводствоОстатки.КоличествоОстаток КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыНаПроизводство.Остатки(КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ), Номенклатура.Услуга = Ложь";
			
			Если ЗначениеЗаполнено(Строка.Заказ) Тогда
				
				ЗапросНовыеПотребности.УстановитьПараметр("ЗаказНаПроизводство" + Формат(Индекс, "ЧГ=0"), Строка.Заказ);
				ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + " И ЗаказНаПроизводство = &ЗаказНаПроизводство" + Формат(Индекс, "ЧГ=0");
				
			КонецЕсли;
			
			ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст +
			") КАК ЗаказыНаПроизводствоОстатки
			|
			|ГДЕ ЗаказыНаПроизводствоОстатки.КоличествоОстаток > 0
			|";
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если ЗапросНовыеПотребности.Текст <> "" Тогда
		
		ЗапросНовыеПотребности.Текст = Сред(ЗапросНовыеПотребности.Текст, 16);
		Результат = ЗапросНовыеПотребности.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		РаспределитьПоНоменклатуре(НовыеПотребности, Результат);
		
	КонецЕсли;
	
	// Текущие потребности
	ЗапросТекущиеПотребности = Новый Запрос;
	ЗапросТекущиеПотребности.УстановитьПараметр("ДатаДокумента", Дата);
	
	// Планы закупок
	Индекс = 0;
	
	Для каждого Строка из ПланыЗакупок Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Сценарий.Периодичность) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Для сценария """ + СокрЛП(Строка(Строка.Сценарий.Наименование)) + """ не указана периодичность.");
			Продолжить;
			
		КонецЕсли;
		
		ДатаНач = Строка.ДатаНач;
		ДатаКон = Строка.ДатаКон;
		
		УправлениеПланированием.ВыровнятьПериод(ДатаНач, ДатаКон, Строка.Сценарий.Периодичность);
		
		ЗапросТекущиеПотребности.УстановитьПараметр("ПланыЗакупокДатаНач" + Формат(Индекс, "ЧГ=0"), ДатаНач);
		ЗапросТекущиеПотребности.УстановитьПараметр("ПланыЗакупокДатаКон" + Формат(Индекс, "ЧГ=0"), ДатаКон);
		
		ЗапросТекущиеПотребности.Текст = ЗапросТекущиеПотребности.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ДатаДокумента КАК Период,
		|	ПланыЗакупокОбороты.Номенклатура КАК Номенклатура,
		|	ПланыЗакупокОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПланыЗакупокОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар) КАК ТоварТара,
		|	Ложь КАК Тара,
		|	НАЧАЛОПЕРИОДА(ПланыЗакупокОбороты.Период, ДЕНЬ) КАК ДатаПотребности,
		|	ПланыЗакупокОбороты.Заказ КАК Заказ,
		|	ПланыЗакупокОбороты.Проект КАК Проект,
		|	ПланыЗакупокОбороты.Сценарий КАК Сценарий," +
		?(мИспользоватьРазузлование, "
		|	ПланыЗакупокОбороты.Номенклатура КАК КонечнаяПродукция,
		|	ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка) КАК Спецификация,
		|	ПланыЗакупокОбороты.Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,", "") + "
		|	ПланыЗакупокОбороты.КоличествоОборот КАК Количество
		|ИЗ
		|	РегистрНакопления.ПланыЗакупок.Обороты(&ПланыЗакупокДатаНач" + Формат(Индекс, "ЧГ=0") + ", &ПланыЗакупокДатаКон" + Формат(Индекс, "ЧГ=0") + ", ДЕНЬ, ";
		
		ЗапросТекущиеПотребности.УстановитьПараметр("Сценарий" + Формат(Индекс, "ЧГ=0"), Строка.Сценарий);
		ЗапросТекущиеПотребности.Текст = ЗапросТекущиеПотребности.Текст + "Сценарий = &Сценарий" + Формат(Индекс, "ЧГ=0") + " И ВЫБОР КОГДА Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА Номенклатура.Услуга = Ложь ИНАЧЕ Истина КОНЕЦ";
		
		Если ЗначениеЗаполнено(Строка.Проект) Тогда
			
			ЗапросТекущиеПотребности.УстановитьПараметр("Проект" + Формат(Индекс, "ЧГ=0"), Строка.Проект);
			ЗапросТекущиеПотребности.Текст = ЗапросТекущиеПотребности.Текст + " И Проект = &Проект" + Формат(Индекс, "ЧГ=0");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Подразделение) Тогда
			
			ЗапросТекущиеПотребности.УстановитьПараметр("Подразделение" + Формат(Индекс, "ЧГ=0"), Строка.Подразделение);
			ЗапросТекущиеПотребности.Текст = ЗапросТекущиеПотребности.Текст + " И Подразделение = &Подразделение" + Формат(Индекс, "ЧГ=0");
			
		КонецЕсли;
		
		ЗапросТекущиеПотребности.Текст = ЗапросТекущиеПотребности.Текст +
		") КАК ПланыЗакупокОбороты
		|";
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	// Планы посменные
	Если мИспользоватьПланыПотребностейПроизводстваПоСменам Тогда
		
		Индекс = 0;
	
		Для каждого Строка из ПланыПосменные Цикл
			
			ЗапросТекущиеПотребности.УстановитьПараметр("ПланыПотребностейДатаНач" + Формат(Индекс, "ЧГ=0"), НачалоДня(Строка.ДатаНач));
			ЗапросТекущиеПотребности.УстановитьПараметр("ПланыПотребностейДатаКон" + Формат(Индекс, "ЧГ=0"), КонецДня(Строка.ДатаКон));
			
			ЗапросТекущиеПотребности.Текст = ЗапросТекущиеПотребности.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ДатаДокумента КАК Период,
			|	ПланыПотребностейПроизводстваПоСменамОбороты.Номенклатура КАК Номенклатура,
			|	ПланыПотребностейПроизводстваПоСменамОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ПланыПотребностейПроизводстваПоСменамОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|	ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар) КАК ТоварТара,
			|	Ложь КАК Тара,
			|	НАЧАЛОПЕРИОДА(ПланыПотребностейПроизводстваПоСменамОбороты.Период, ДЕНЬ) КАК ДатаПотребности,
			|	ПланыПотребностейПроизводстваПоСменамОбороты.Заказ КАК Заказ,
			|	ПланыПотребностейПроизводстваПоСменамОбороты.Проект КАК Проект,
			|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) КАК Сценарий," +
			?(мИспользоватьРазузлование, "
			|	ПланыПотребностейПроизводстваПоСменамОбороты.КонечнаяПродукция КАК КонечнаяПродукция,
			|	ПланыПотребностейПроизводстваПоСменамОбороты.Спецификация КАК Спецификация,
			|	ПланыПотребностейПроизводстваПоСменамОбороты.Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,", "") + "
			|	ПланыПотребностейПроизводстваПоСменамОбороты.КоличествоИзвнеОборот КАК Количество
			|ИЗ
			|	РегистрНакопления.ПланыПотребностейПроизводстваПоСменам.Обороты(&ПланыПотребностейДатаНач" + Формат(Индекс, "ЧГ=0") + ", &ПланыПотребностейДатаКон" + Формат(Индекс, "ЧГ=0") + ", Регистратор, Номенклатура ССЫЛКА Справочник.Номенклатура И Номенклатура.Услуга = Ложь И Номенклатура.ВидВоспроизводства <> ЗНАЧЕНИЕ(Перечисление.ВидыВоспроизводстваНоменклатуры.Производство)";
			
			Если ЗначениеЗаполнено(Строка.Проект) Тогда
				
				ЗапросТекущиеПотребности.УстановитьПараметр("Проект" + Формат(Индекс, "ЧГ=0"), Строка.Проект);
				ЗапросТекущиеПотребности.Текст = ЗапросТекущиеПотребности.Текст + " И Проект = &Проект" + Формат(Индекс, "ЧГ=0");
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Заказ) Тогда
				
				ЗапросТекущиеПотребности.УстановитьПараметр("Заказ" + Формат(Индекс, "ЧГ=0"), Строка.Заказ);
				ЗапросТекущиеПотребности.Текст = ЗапросТекущиеПотребности.Текст + " И Заказ = &Заказ" + Формат(Индекс, "ЧГ=0");
				
			КонецЕсли;
			
			ЗапросТекущиеПотребности.Текст = ЗапросТекущиеПотребности.Текст +
			") КАК ПланыПотребностейПроизводстваПоСменамОбороты
			|";
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗапросТекущиеПотребности.Текст <> "" Тогда
	
		ЗапросТекущиеПотребности.Текст = Сред(ЗапросТекущиеПотребности.Текст, 16);
		Результат = ЗапросТекущиеПотребности.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		РаспределитьПоНоменклатуре(ТекущиеПотребности, Результат);
		
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеПотребности) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого Строка из ТекущиеПотребности Цикл
			
			ДатаПотребности = Строка.ДатаПотребности;
			УправлениеПланированием.ВыровнятьДатуПоНачалуПериода(ДатаПотребности, Строка.Сценарий.Периодичность);
			Строка.ДатаПотребности = ДатаПотребности;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НовыеПотребности) = Тип("ТаблицаЗначений") Тогда
		
		СкорректироватьПотребности(НовыеПотребности);
		
		// Разузлование
		Если мИспользоватьРазузлование Тогда
			
			Для каждого Строка из НовыеПотребности Цикл
				
				Если Строка.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство Тогда
					
					ИсхПараметры = Новый Структура;
					ИсхПараметры.Вставить("Номенклатура", Строка.Номенклатура);
					ИсхПараметры.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
					ИсхПараметры.Вставить("Количество", Строка.Количество);
					ИсхПараметры.Вставить("Спецификация", Строка.Спецификация);
							
					Результат = Новый Структура;
					Результат.Вставить("ИсходныеКомплектующие");
							
					МассивВидовВоспроизводства = Новый Массив;
					МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка);
					МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка);
					
					Параметры = Новый Структура;
					Параметры.Вставить("ДатаСпецификации", Строка.ДатаПотребности);
					Параметры.Вставить("Отбор", Новый Структура("ВидВоспроизводства", МассивВидовВоспроизводства));
					
					МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(ИсхПараметры, Результат, Параметры);
					
					Если МассивОшибок.Количество() > 0 Тогда
						
						Для каждого Ошибка из МассивОшибок Цикл
							
							Сообщить("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
							Сообщить(" Спецификация: " + Ошибка.Спецификация);
							Сообщить(" Номер строки: " + Ошибка.НомерСтроки);
							Сообщить(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
						
						КонецЦикла;
						
					КонецЕсли;
							
					Если Результат <> Неопределено Тогда
						
						Для каждого СтрокаРазузлования из Результат.ИсходныеКомплектующие Цикл
							
							УправлениеПланированием.ДополнитьТаблицу(ТекущиеПотребности, НовыеПотребности,, НовыеПотребности.Индекс(Строка));
							ИндексСтроки = ТекущиеПотребности.Количество() - 1;
							ТекущиеПотребности[ИндексСтроки].Номенклатура = СтрокаРазузлования.Номенклатура;
							ТекущиеПотребности[ИндексСтроки].ХарактеристикаНоменклатуры = СтрокаРазузлования.ХарактеристикаНоменклатуры;
							ТекущиеПотребности[ИндексСтроки].ЕдиницаИзмерения = СтрокаРазузлования.Номенклатура.ЕдиницаХраненияОстатков;
							ТекущиеПотребности[ИндексСтроки].Количество = СтрокаРазузлования.Количество * СтрокаРазузлования.ЕдиницаИзмерения.Коэффициент / СтрокаРазузлования.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
							ТекущиеПотребности[ИндексСтроки].КонечнаяПродукция = Строка.Номенклатура;
							
						КонецЦикла;
						
					КонецЕсли;
					
				Иначе
					
					УправлениеПланированием.ДополнитьТаблицу(ТекущиеПотребности, НовыеПотребности,, НовыеПотребности.Индекс(Строка));
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			УправлениеПланированием.ДополнитьТаблицу(ТекущиеПотребности, НовыеПотребности);
			
		КонецЕсли;
		
		Если ТипЗнч(ТекущиеПотребности) = Тип("ТаблицаЗначений") Тогда
			
			СложениеОбъединениеИсточников(ТекущиеПотребности, ОбъединениеИсточников);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеПотребности) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого Строка из ТекущиеПотребности Цикл
			
			Строка.ДатаПотребности = НачалоДня(Строка.ДатаПотребности);
			
		КонецЦикла;
		
		Если мИспользоватьРазузлование Тогда

			ТекущиеПотребности.Свернуть("Период, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, ДатаПотребности, Заказ, КонечнаяПродукция, Проект", "Количество");
			
		Иначе
			
			ТекущиеПотребности.Свернуть("Период, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, ДатаПотребности, Заказ, Проект", "Количество");
			
		КонецЕсли;
		
		Возврат ТекущиеПотребности;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ВыполнитьВыборкуДанных()

Процедура СложениеОбъединениеИсточников(ТаблицаИсточник, Объединение)
	
	Если Объединение = Ложь Тогда
		
		Если мИспользоватьРазузлование Тогда

			ТаблицаИсточник.Свернуть("Период, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, ДатаПотребности, Заказ, КонечнаяПродукция, Проект", "Количество");
			
		Иначе
			
			ТаблицаИсточник.Свернуть("Период, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, ДатаПотребности, Заказ, Проект", "Количество");
			
		КонецЕсли;
		
	Иначе
		
		Если мИспользоватьРазузлование Тогда
		
			ТаблицаИсточник.Сортировать("Период, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, ДатаПотребности, Заказ, КонечнаяПродукция, Проект, Количество Убыв");
			
		Иначе
			
			ТаблицаИсточник.Сортировать("Период, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, ДатаПотребности, Заказ, Проект, Количество Убыв");
			
		КонецЕсли;
		
		Индекс = 1;
		
		Пока Индекс < ТаблицаИсточник.Количество() Цикл
			
			Если мИспользоватьРазузлование Тогда
			
				Если  ТаблицаИсточник[Индекс].Номенклатура = ТаблицаИсточник[Индекс-1].Номенклатура
					И ТаблицаИсточник[Индекс].ХарактеристикаНоменклатуры = ТаблицаИсточник[Индекс-1].ХарактеристикаНоменклатуры
					И ТаблицаИсточник[Индекс].ТоварТара = ТаблицаИсточник[Индекс-1].ТоварТара
					И ТаблицаИсточник[Индекс].ДатаПотребности = ТаблицаИсточник[Индекс-1].ДатаПотребности
					И ТаблицаИсточник[Индекс].Заказ = ТаблицаИсточник[Индекс-1].Заказ
					И ТаблицаИсточник[Индекс].КонечнаяПродукция = ТаблицаИсточник[Индекс-1].КонечнаяПродукция
					И ТаблицаИсточник[Индекс].Проект = ТаблицаИсточник[Индекс-1].Проект Тогда
					
					ТаблицаИсточник.Удалить(Индекс);
					
				Иначе
					
					Индекс = Индекс + 1;
					
				КонецЕсли;
				
			Иначе
				
				Если  ТаблицаИсточник[Индекс].Номенклатура = ТаблицаИсточник[Индекс-1].Номенклатура
					И ТаблицаИсточник[Индекс].ХарактеристикаНоменклатуры = ТаблицаИсточник[Индекс-1].ХарактеристикаНоменклатуры
					И ТаблицаИсточник[Индекс].ТоварТара = ТаблицаИсточник[Индекс-1].ТоварТара
					И ТаблицаИсточник[Индекс].ДатаПотребности = ТаблицаИсточник[Индекс-1].ДатаПотребности
					И ТаблицаИсточник[Индекс].Заказ = ТаблицаИсточник[Индекс-1].Заказ
					И ТаблицаИсточник[Индекс].Проект = ТаблицаИсточник[Индекс-1].Проект Тогда
					
					ТаблицаИсточник.Удалить(Индекс);
					
				Иначе
					
					Индекс = Индекс + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // СложениеОбъединениеИсточников()

Функция СкорректироватьПотребности(ТаблицаПотребности)

	// Резервы по заказам покупателей и внутренним заказам
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыВРезервеНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва КАК ДокументРезерва,
	|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток КАК ОстатокРезерва
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаДокумента, (НЕ ДокументРезерва ССЫЛКА Документ.ПриходныйОрдерНаТовары)) КАК ТоварыВРезервеНаСкладахОстатки");
	
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	
	ТаблицаРезервовПоЗаказам = Запрос.Выполнить().Выгрузить();
	
	// Скорректируем план потребности с учетом резервов по заказам покупателей и внутренним заказам
	ТаблицаПотребности.Сортировать("ДатаПотребности ВОЗР");
	
	Для каждого СтрокаРезерваПоЗаказу Из ТаблицаРезервовПоЗаказам Цикл
		
		// Скорректируем товары
		ОстатокРезерваПоЗаказу = СтрокаРезерваПоЗаказу.ОстатокРезерва;
		СтрокиПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Заказ, Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаРезерваПоЗаказу.ДокументРезерва, СтрокаРезерваПоЗаказу.Номенклатура, СтрокаРезерваПоЗаказу.ХарактеристикаНоменклатуры, Ложь));
		
		Для каждого СтрокаПотребности Из СтрокиПотребности Цикл
			
			Если ОстатокРезерваПоЗаказу = 0 Тогда
				
				Прервать;
				
			КонецЕсли;
			
			Если СтрокаПотребности.Количество > ОстатокРезерваПоЗаказу Тогда
				
				СтрокаПотребности.Количество = СтрокаПотребности.Количество - ОстатокРезерваПоЗаказу;
				ОстатокРезерваПоЗаказу = 0;
				
			Иначе
				
				ОстатокРезерваПоЗаказу = ОстатокРезерваПоЗаказу - СтрокаПотребности.Количество;
				ТаблицаПотребности.Удалить(СтрокаПотребности);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОстатокРезерваПоЗаказу > 0 Тогда
			
			// Скорректируем тару
			СтрокиПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Заказ, Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаРезерваПоЗаказу.ДокументРезерва, СтрокаРезерваПоЗаказу.Номенклатура, СтрокаРезерваПоЗаказу.ХарактеристикаНоменклатуры, Истина));
			
			Для каждого СтрокаПотребности Из СтрокиПотребности Цикл
				
				Если ОстатокРезерваПоЗаказу = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
				Если СтрокаПотребности.Количество > ОстатокРезерваПоЗаказу Тогда
					
					СтрокаПотребности.Количество = СтрокаПотребности.Количество - ОстатокРезерваПоЗаказу;
					ОстатокРезерваПоЗаказу = 0;
					
				Иначе
					
					ОстатокРезерваПоЗаказу = ОстатокРезерваПоЗаказу - СтрокаПотребности.Количество;
					ТаблицаПотребности.Удалить(СтрокаПотребности);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Остатки без резервов
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РезервыНеЗаказов.КоличествоОстатокРезерва ЕСТЬ NULL 
	|			ТОГДА ОстаткиНоменклатуры.ОстатокНоменклатуры
	|		ИНАЧЕ ОстаткиНоменклатуры.ОстатокНоменклатуры - РезервыНеЗаказов.КоличествоОстатокРезерва
	|	КОНЕЦ КАК ОстатокНоменклатуры,
	|	ОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
	|	ОстаткиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрНакопленияОстаткиТоваров.Номенклатура КАК Номенклатура,
	|		РегистрНакопленияОстаткиТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(РегистрНакопленияОстаткиТоваров.КоличествоОстаток) КАК ОстатокНоменклатуры
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаДокумента, ) КАК РегистрНакопленияОстаткиТоваров
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РегистрНакопленияОстаткиТоваров.Номенклатура,
	|		РегистрНакопленияОстаткиТоваров.ХарактеристикаНоменклатуры) КАК ОстаткиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыВРезервеНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|			ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстатокРезерва
	|		ИЗ
	|			РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаДокумента, ) КАК ТоварыВРезервеНаСкладахОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТоварыВРезервеНаСкладахОстатки.Номенклатура,
	|			ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры) КАК РезервыНеЗаказов
	|		ПО ОстаткиНоменклатуры.Номенклатура = РезервыНеЗаказов.Номенклатура
	|			И ОстаткиНоменклатуры.ХарактеристикаНоменклатуры = РезервыНеЗаказов.ХарактеристикаНоменклатуры");
	
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	
	ТаблицаОстатковБезРезервов = Запрос.Выполнить().Выгрузить();
	
	// Разделим остатки на товары и тару
	ЗапросОстаткиТара = Новый Запрос(
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	СУММА(ВложенныйЗапрос.КоличествоОстатокПолученные - ВложенныйЗапрос.КоличествоОстатокПереданные) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыПолученныеОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыПолученныеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ТоварыПолученныеОстатки.КоличествоОстаток КАК КоличествоОстатокПолученные,
	|		0 КАК КоличествоОстатокПереданные
	|	ИЗ
	|		РегистрНакопления.ТоварыПолученные.Остатки(&ДатаДокумента, СтатусПолучения = ЗНАЧЕНИЕ(Перечисление.СтатусыПолученияПередачиТоваров.ВозвратнаяТара)) КАК ТоварыПолученныеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыПереданныеОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыПереданныеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		0 КАК КоличествоОстатокПолученные,
	|		ТоварыПереданныеОстатки.КоличествоОстаток КАК КоличествоОстатокПереданные
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданные.Остатки(&ДатаДокумента, СтатусПередачи = ЗНАЧЕНИЕ(Перечисление.СтатусыПолученияПередачиТоваров.ВозвратнаяТара)) КАК ТоварыПереданныеОстатки) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры");
	
	ЗапросОстаткиТара.УстановитьПараметр("ДатаДокумента", Дата);
	
	ОстаткиТарыДополнительные = ЗапросОстаткиТара.Выполнить().Выгрузить();
	
	ТаблицаОстатковБезРезервовКонечная = Новый ТаблицаЗначений;
	ТаблицаОстатковБезРезервовКонечная.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОстатковБезРезервовКонечная.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОстатковБезРезервовКонечная.Колонки.Добавить("ОстатокНоменклатуры", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОстатковБезРезервовКонечная.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаОстатковБезРезервов Из ТаблицаОстатковБезРезервов Цикл
	
		СтрокиТары = ОстаткиТарыДополнительные.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаОстатковБезРезервов.Номенклатура, СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры));
		
		Если СтрокиТары.Количество() = 0 Тогда
			
			НоваяСтрока = ТаблицаОстатковБезРезервовКонечная.Добавить();
			НоваяСтрока.Номенклатура = СтрокаОстатковБезРезервов.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры;
			НоваяСтрока.ОстатокНоменклатуры = СтрокаОстатковБезРезервов.ОстатокНоменклатуры;
			НоваяСтрока.Тара = Ложь;
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТары = СтрокиТары[0];
		
		Если СтрокаТары.Количество <= 0 Тогда
			
			НоваяСтрока = ТаблицаОстатковБезРезервовКонечная.Добавить();
			НоваяСтрока.Номенклатура = СтрокаОстатковБезРезервов.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры;
			НоваяСтрока.ОстатокНоменклатуры = СтрокаОстатковБезРезервов.ОстатокНоменклатуры;
			НоваяСтрока.Тара = Ложь;
			
		ИначеЕсли СтрокаТары.Количество >= СтрокаОстатковБезРезервов.ОстатокНоменклатуры Тогда
			
			НоваяСтрока = ТаблицаОстатковБезРезервовКонечная.Добавить();
			НоваяСтрока.Номенклатура = СтрокаОстатковБезРезервов.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры;
			НоваяСтрока.ОстатокНоменклатуры = СтрокаОстатковБезРезервов.ОстатокНоменклатуры;
			НоваяСтрока.Тара = Истина;
			
		ИначеЕсли СтрокаТары.Количество < СтрокаОстатковБезРезервов.ОстатокНоменклатуры Тогда
			
			НоваяСтрока = ТаблицаОстатковБезРезервовКонечная.Добавить();
			НоваяСтрока.Номенклатура = СтрокаОстатковБезРезервов.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры;
			НоваяСтрока.ОстатокНоменклатуры = СтрокаТары.Количество;
			НоваяСтрока.Тара = Истина;
			НоваяСтрока = ТаблицаОстатковБезРезервовКонечная.Добавить();
			НоваяСтрока.Номенклатура = СтрокаОстатковБезРезервов.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатковБезРезервов.ХарактеристикаНоменклатуры;
			НоваяСтрока.ОстатокНоменклатуры = СтрокаОстатковБезРезервов.ОстатокНоменклатуры - СтрокаТары.Количество;
			НоваяСтрока.Тара = Ложь;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// Скорректируем остатки товарами к передаче со складов
	
	ЗапросТоварыКПередаче = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыКПередачеСоСкладовОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток) КАК КоличествоОстатокРезерва
	|ИЗ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаДокумента, ) КАК ТоварыКПередачеСоСкладовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПередачеСоСкладовОстатки.Номенклатура,
	|	ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры");
	
	ЗапросТоварыКПередаче.УстановитьПараметр("ДатаДокумента" , Дата);
	
	ТаблицаТоваровКПередаче = ЗапросТоварыКПередаче.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваровКПередаче Цикл
		
		ОстатокКПередаче = СтрокаТаблицы.КоличествоОстатокРезерва;
		
		СтрокиОстатков = ТаблицаОстатковБезРезервовКонечная.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, Истина));
		
		Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
			
			Если ОстатокКПередаче = 0 Тогда
				
				Прервать;
				
			КонецЕсли;
			
			Если СтрокаОстатков.ОстатокНоменклатуры >= ОстатокКПередаче Тогда
				
				СтрокаОстатков.ОстатокНоменклатуры = СтрокаОстатков.ОстатокНоменклатуры - ОстатокКПередаче;
				ОстатокКПередаче = 0;
				
			Иначе
				
				ОстатокКПередаче = ОстатокКПередаче - СтрокаОстатков.ОстатокНоменклатуры;
				ТаблицаОстатковБезРезервовКонечная.Удалить(СтрокаОстатков);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОстатокКПередаче > 0 Тогда
			
			СтрокиОстатков = ТаблицаОстатковБезРезервовКонечная.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, Ложь));
			
			Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
				
				Если ОстатокКПередаче = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
				Если СтрокаОстатков.ОстатокНоменклатуры >= ОстатокКПередаче Тогда
					
					СтрокаОстатков.ОстатокНоменклатуры = СтрокаОстатков.ОстатокНоменклатуры - ОстатокКПередаче;
					ОстатокКПередаче = 0;
					
				Иначе
					
					ОстатокКПередаче = ОстатокКПередаче - СтрокаОстатков.ОстатокНоменклатуры;
					ТаблицаОстатковБезРезервовКонечная.Удалить(СтрокаОстатков);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// Скорректируем план потребности с учетом остатков на складе
	ТаблицаПотребности.Сортировать("ДатаПотребности ВОЗР, Заказ ВОЗР");
	
	Для каждого СтрокаТаблицыОстатков Из ТаблицаОстатковБезРезервовКонечная Цикл
		
		ОстатокТовара = СтрокаТаблицыОстатков.ОстатокНоменклатуры;
		СтрокиПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицыОстатков.Номенклатура, СтрокаТаблицыОстатков.ХарактеристикаНоменклатуры, СтрокаТаблицыОстатков.Тара));
		
		Если СтрокиПотребности.Количество() > 0 И НЕ ЗначениеЗаполнено(СтрокиПотребности[0].Заказ) Тогда
			
			СтрокиПотребности.Добавить(СтрокиПотребности[0]);
			СтрокиПотребности.Удалить(0);
			
		КонецЕсли;
		
		Для каждого СтрокаПотребности Из СтрокиПотребности Цикл
			
			Если ОстатокТовара = 0 Тогда
				
				Прервать;
				
			КонецЕсли;
			
			Если СтрокаПотребности.Количество > ОстатокТовара Тогда
				
				СтрокаПотребности.Количество = СтрокаПотребности.Количество - ОстатокТовара;
				ОстатокТовара = 0;
				
			Иначе
				
				ОстатокТовара = ОстатокТовара - СтрокаПотребности.Количество;
				ТаблицаПотребности.Удалить(СтрокаПотребности);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Уберем отрицательные количества потребности
	Индекс = 0;
	
	Пока Истина Цикл
	
		Если Индекс > ТаблицаПотребности.Количество() - 1 Тогда
			
			Прервать;
			
		КонецЕсли;
		
		СтрокаПотребности = ТаблицаПотребности[Индекс];
		
		Если СтрокаПотребности.Количество <= 0 Тогда
			
			ТаблицаПотребности.Удалить(СтрокаПотребности);
			Продолжить;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	Возврат ТаблицаПотребности;
	
КонецФункции // СкорректироватьПотребностиВНоменклутуре()

Процедура РаспределитьПоНоменклатуре(ТаблицаПриемник, ТаблицаИсточник)

	ИндексСтроки = 0;

	Пока ИндексСтроки < ТаблицаИсточник.Количество() Цикл
		
		Если ТипЗнч(ТаблицаИсточник[ИндексСтроки].Номенклатура) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда

			ТаблицаРезультатРаспределения = Новый ТаблицаЗначений;

			Коэффициенты = Новый Массив();
			Значения     = Новый Соответствие();

			Значения.Вставить("Количество", ТаблицаИсточник[ИндексСтроки].Количество * ТаблицаИсточник[ИндексСтроки].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);

			Номенклатура = Справочники.Номенклатура.Выбрать(,, Новый Структура("НоменклатурнаяГруппа", ТаблицаИсточник[ИндексСтроки].Номенклатура));
			
			Пока Номенклатура.Следующий() Цикл
				
				Если Номенклатура.ВесовойКоэффициентВхождения > 0 Тогда
					
					УправлениеПланированием.ДополнитьТаблицу(ТаблицаРезультатРаспределения, ТаблицаИсточник, , ИндексСтроки);
	                ТаблицаРезультатРаспределения[ТаблицаРезультатРаспределения.Количество() - 1].Номенклатура = Номенклатура.Ссылка;
	                ТаблицаРезультатРаспределения[ТаблицаРезультатРаспределения.Количество() - 1].ВидВоспроизводства = Номенклатура.Ссылка.ВидВоспроизводства;
					Коэффициенты.Добавить(Номенклатура.ВесовойКоэффициентВхождения);
					
				КонецЕсли;
				
			КонецЦикла;

			ТаблицаИсточник.Удалить(ТаблицаИсточник[ИндексСтроки]);
			
			Строки = Новый Массив();
			Для каждого Строка из ТаблицаРезультатРаспределения Цикл
				
				Строки.Добавить(Строка);
				
			КонецЦикла;
			
			Распределить(Строки, Коэффициенты, Значения);
			
			Индекс = 0;
			
			Пока Индекс < ТаблицаРезультатРаспределения.Количество() Цикл
				
				Если ТаблицаРезультатРаспределения[Индекс].Количество <= 0 Тогда
					
					ТаблицаРезультатРаспределения.Удалить(Индекс);
					
				Иначе
					
					ТаблицаРезультатРаспределения[Индекс].Количество = ТаблицаРезультатРаспределения[Индекс].Количество / ТаблицаРезультатРаспределения[Индекс].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
					Индекс = Индекс + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
			УправлениеПланированием.ДополнитьТаблицу(ТаблицаПриемник, ТаблицаРезультатРаспределения);
			
		Иначе
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;

	УправлениеПланированием.ДополнитьТаблицу(ТаблицаПриемник, ТаблицаИсточник);
	
КонецПроцедуры // РаспределитьПоНоменклатуре()

Процедура Распределить(Строки, Коэффициенты, Значения, ДополнятьЗначения = Ложь)

	СуммаКоэффициентов = 0;
	
	Для каждого Коэффициент из Коэффициенты Цикл
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
		
	КонецЦикла;
	
	Для Индекс = 0 по Строки.Количество() - 1 Цикл
		
		Для каждого Значение из Значения Цикл
			
			Если СуммаКоэффициентов = 0 Тогда
				
				Строки[Индекс][Значение.Ключ] = 0;
				
			Иначе
				
				Если Индекс = Строки.Количество() - 1 Тогда
					
					Строки[Индекс][Значение.Ключ] = ?(ДополнятьЗначения, Строки[Индекс][Значение.Ключ], 0) + Значение.Значение;
					Значения.Вставить(Значение.Ключ, 0);
					
				Иначе
					
					Строки[Индекс][Значение.Ключ] = ?(ДополнятьЗначения, Строки[Индекс][Значение.Ключ], 0) + Окр(Значение.Значение * Коэффициенты[Индекс] / СуммаКоэффициентов, 2);
					
					Если Значение.Значение > 0 Тогда
						
						Значения.Вставить(Значение.Ключ, Значение.Значение - Строки[Индекс][Значение.Ключ]);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаКоэффициентов = СуммаКоэффициентов - Коэффициенты[Индекс];
		
	КонецЦикла;

КонецПроцедуры // Распределить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверкаРеквизитов(Отказ, Заголовок)
	
	РеквизитыТабПотребности = "ДатаПотребности, Номенклатура, Количество, ЕдиницаИзмерения";
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Потребности", Новый Структура(РеквизитыТабПотребности), Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
		
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверкаРеквизитов(Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат = Потребности.Выгрузить();
	
	Для каждого Строка из Результат Цикл
		
		Строка.Количество = Строка.Количество * Строка.ЕдиницаИзмерения.Коэффициент / Строка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		
	КонецЦикла;
	
	СрезПоследних = РегистрыСведений.КалендарныеПотребностиВНоменклатуре.СрезПоследних(Дата);
	
	СрезПоследних.Колонки.Удалить(СрезПоследних.Колонки["Регистратор"]);
	СрезПоследних.Колонки.Удалить(СрезПоследних.Колонки["НомерСтроки"]);
	СрезПоследних.Колонки.Удалить(СрезПоследних.Колонки["Активность"]);
	
	Индекс = 0;
	
	Пока Индекс < СрезПоследних.Количество() Цикл
		
		Если СрезПоследних[Индекс].Период < Дата И СрезПоследних[Индекс].Количество = 0 Тогда
			
			СрезПоследних.Удалить(Индекс);
			
		Иначе
			
			Индекс = Индекс + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СрезПоследних.ЗаполнитьЗначения(0, "Количество");
	
	Результат.Колонки.Добавить("Период");
	
	УправлениеПланированием.ДополнитьТаблицу(Результат, СрезПоследних);

	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		
		Результат.ЗаполнитьЗначения(Дата, "Период");
		Результат.Свернуть("Период, ДатаПотребности, Проект, Заказ, Номенклатура, ХарактеристикаНоменклатуры, КонечнаяПродукция, ТоварТара", "Количество");
		
		Движения.КалендарныеПотребностиВНоменклатуре.Загрузить(Результат);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		
		Возврат;
		
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

мИспользоватьПланыПроизводства = Метаданные.РегистрыНакопления.Найти("ПланыПроизводства") <> Неопределено;
мИспользоватьЗаказыНаПроизводство = Метаданные.РегистрыНакопления.Найти("ЗаказыНаПроизводство") <> Неопределено;
мИспользоватьПланыПотребностейПроизводстваПоСменам = Метаданные.РегистрыНакопления.Найти("ПланыПотребностейПроизводстваПоСменам") <> Неопределено;

мИспользоватьРазузлование = Метаданные.Справочники.Найти("СпецификацииНоменклатуры") <> Неопределено;
