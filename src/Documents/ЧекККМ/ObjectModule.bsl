Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мАннулировать Экспорт;
Перем мПострочнаяПечать Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет операцию оплаты картой, используя подключенную эквайринговую систему.
//
// Параметры:
//  СуммаОплаты - сумма оплаты
//
Процедура ОплатитьКартой(СуммаОплаты) Экспорт

	Перем ЭС;
	Перем ФР;

	Если РаботаСТорговымОборудованием.ПолучитьПроверитьПараметрыДляОплатыКартой(ЭС, ФР) Тогда
		КодRRN = Неопределено;

		Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			Результат = ПолучитьСерверТО().ОплатитьПлатежнойКартой(ЭС, СуммаОплаты, КодRRN, ФР);
		Иначе
			Результат = ПолучитьСерверТО().ОтменитьПлатежПоПлатежнойКарте(ЭС, СуммаОплаты, КодRRN, ФР);
		КонецЕсли;

		Если ЗначениеЗаполнено(Результат) Тогда
			Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат);
			Предупреждение(Ошибка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОплатитьКартой()

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьЧека()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокЧек.Номер,
	|	ДокЧек.Дата,
	|	ДокЧек.КассаККМ,
	|	ДокЧек.КассаККМ.Представление       КАК Покупатель,
	|	ДокЧек.Организация                  КАК Организация,
	|	ДокЧек.Организация.Представление    КАК Поставщик,
	|	ДокЧек.СуммаДокумента,
	|	ДокЧек.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Представление      КАК Товар,
	|		Номенклатура.НаименованиеПолное КАК ТоварПолноеНаименование,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            Как Артикул,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		ПроцентСкидкиНаценки            КАК Скидка,
	|		ПроцентАвтоматическихСкидок     КАК СкидкаАвтоматическая,
	|		Сумма,
	|		ХарактеристикаНоменклатуры      КАК Характеристика,
	|		СерияНоменклатуры               КАК Серия
	|	)
	|ИЗ
	|	Документ.ЧекККМ КАК ДокЧек
	|ГДЕ
	|	ДокЧек.Ссылка = &ТекущийДокумент
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	// Выводим шапку накладной.
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Товарный чек';uk='Товарний чек'",КодЯзыкаПечать),КодЯзыкаПечать);                                                                                 
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,КодЯзыкаПечать), "ПолноеНаименование,");
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.СкидкаАвтоматическая <> 0 Тогда
			ЕстьСкидки = Истина;
		КонецЕсли;
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма  = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать);;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если Не ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("СуммаБезСкидки").ШиринаКолонки
		                                  + Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма          = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ТоварПолноеНаименование),
		                                ВыборкаСтрокТовары.Товар, ВыборкаСтрокТовары.ТоварПолноеНаименование)
		                              + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество - ВыборкаСтрокТовары.Сумма;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма + ВыборкаСтрокТовары.Сумма;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма + ВсегоСкидок;
	КонецЦикла;

	// Вывести Итого.
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = Сумма;
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести Сумму прописью.
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока =НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ВыборкаСтрокТовары.Количество()
											+ НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета);											
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета,КодЯзыкаПечать);

	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывести подписи.
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьЧека()

// Функция осуществляет проведение документа и печать чека на ФР.
//
// Параметры:
//  СерверТО - <ОбработкаОбъект.ТОСервер>
//           - Сервер торгового оборудования.
//
//  Ответ    - <Строка>
//           - Выходной параметр; описание произошедшей ошибки.
//
//  Отказ    - <Булево>
//           - Выходной параметр; признак отказа от выполнения операции.
//
// Возвращаемое значение:
//  <Булево> - Истина в случае успешного завершения операции.
//
Функция ПровестиИРаспечататьЧек(СерверТО, Ответ, Отказ) Экспорт

	Результат = Истина;
	Ответ     = "";

	Попытка
		Записать(РежимЗаписиДокумента.Проведение,
		         РежимПроведенияДокумента.Оперативный);
	Исключение
		Ответ     = "Ошибка при попытке проведения документа!";
		Отказ     = Истина;
		Результат = Ложь;
		Возврат Результат;
	КонецПопытки;

	Если ЧекПробитНаККМ Тогда
		Возврат Результат;
	КонецЕсли;

	ПарольКассира = СерверТО.ПолучитьПарольКассираККМ();
	МассивФР      = СерверТО.ПолучитьСписокУстройств(
	                    Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор,
	                    КассаККМ);

	ФР            = Неопределено;
	СписокФР      = Новый СписокЗначений();
	Вид           = Неопределено;
	Представление = Неопределено;

	Для каждого ФР Из МассивФР Цикл
		СерверТО.ПолучитьПредставлениеУстройства(ФР, Вид, Представление);
		СписокФР.Добавить(ФР, Представление);
	КонецЦикла;

	КоличествоФР = СписокФР.Количество();
	Если      КоличествоФР = 0 Тогда
		Ответ     = "";
		Отказ     = Истина;
		Результат = Истина;
		Возврат Результат;
	ИначеЕсли КоличествоФР = 1 Тогда
		ФР = СписокФР[0].Значение;
	Иначе
		ФР = СписокФР.ВыбратьЭлемент("Необходимо выбрать фискальный регистратор");
		Если ФР = Неопределено Тогда
			Ответ     = "Операция отменена пользователем.";
			Отказ     = Истина;
			Результат = Ложь;
			Возврат Результат;
		Иначе
			ФР = ФР.Значение;
		КонецЕсли;
	КонецЕсли;	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    ТчТовары.Номенклатура.Представление               КАК Номенклатура,
	|    ТчТовары.Номенклатура.Код			               КАК Код,
	|    ТчТовары.Номенклатура.СтавкаНДС                   КАК СтавкаНДС,
	|    ТчТовары.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатуры,
	|    ТчТовары.СерияНоменклатуры.Представление          КАК СерияНоменклатуры,
	|    ТчТовары.ЕдиницаИзмерения.Представление           КАК ЕдиницаИзмерения,
	|    ТчТовары.Цена                                     КАК Цена,
	|    ТчТовары.Количество                               КАК Количество,
	|    ТчТовары.ПроцентСкидкиНаценки + ТчТовары.ПроцентАвтоматическихСкидок КАК ПроцентСкидкиНаценки
	|ИЗ
	|    Документ.ЧекККМ.Товары КАК ТчТовары
	|ГДЕ
	|    ТчТовары.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Ответ     = "Пустой чек не может быть пробит на фискальном регистраторе!";
		Отказ     = Истина;
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;

	Выборка        = РезультатЗапроса.Выбрать();
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Код");
	ТаблицаТоваров.Колонки.Добавить("НомерСекции");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Скидка");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	
	фЕстьНДС = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина).ЕстьНДС;

	Пока Выборка.Следующий() Цикл
		Товар              = ТаблицаТоваров.Добавить();
		Товар.Код		   = Выборка.Код;	
		Товар.Наименование = Выборка.Номенклатура + "(" + Выборка.ЕдиницаИзмерения
		                     + ?(ПустаяСтрока(Выборка.ХарактеристикаНоменклатуры), "", ", Выборка.ХарактеристикаНоменклатуры")
		                     + ?(ПустаяСтрока(Выборка.СерияНоменклатуры),          "", ", Выборка.СерияНоменклатуры") + ")";
		Товар.НомерСекции  = Склад.НомерСекции;
		Товар.Цена         = Выборка.Цена;
		Товар.Количество   = Выборка.Количество;
		Товар.Скидка       = Выборка.ПроцентСкидкиНаценки;
		Товар.СтавкаНДС    = ?(фЕстьНДС,Ценообразование.ПолучитьСтавкуНДС(Выборка.СтавкаНДС),0);
	КонецЦикла;


	ОшибкаТО = СерверТО.ПечатьЧека(ФР, ПарольКассира, НомерЧекаККМ, НомерСменыККМ,
	                               ТаблицаТоваров, ПолучитьСуммуНаличнойОплаты(),
	                               ПолучитьСуммуБезналичнойОплаты(),
	                               ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат);
	Если НЕ ЗначениеЗаполнено(ОшибкаТО) Тогда
		ЧекПробитНаККМ = Истина;
		Попытка
			Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Ответ     = "Не удалось записать документ с установленными параметрами пробитого чека.";
			Отказ     = Истина;
			Результат = Ложь;
		КонецПопытки;
	Иначе
		Ответ     = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(ОшибкаТО);
		Отказ     = Истина;
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПровестиИРаспечататьЧек()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Чек" Тогда
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
				НачалоСообщенияОбОшибке = "Не выбрана касса ККМ."
			Иначе
				НачалоСообщенияОбОшибке = "У выбранной кассы ККМ не задана организация.";
			КонецЕсли;

			Предупреждение(НачалоСообщенияОбОшибке + Символы.ПС + "Печать чека невозможна.");
			Возврат;
		КонецЕсли;

		// Получить экземпляр документа на печать.
		ТабДокумент = ПечатьЧека();
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Чек", "Чек");
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли

// Функция считает сумму, оплаченную наличными.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная наличными.
//
Функция ПолучитьСуммуНаличнойОплаты() Экспорт

	СуммаНаличнойОплаты = 0;
	Для Каждого ТекОплата Из Оплата Цикл
		Если ЗначениеЗаполнено(ТекОплата.ВидОплаты) И ТекОплата.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаНаличнойОплаты;

КонецФункции // ПолучитьСуммуНаличнойОплаты()

// Функция считает сумму, оплаченную безналичными.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная наличными.
//
Функция ПолучитьСуммуБезналичнойОплаты() Экспорт

	СуммаБезналичнойОплаты = 0;
	Для Каждого ТекОплата Из Оплата Цикл
		Если ЗначениеЗаполнено(ТекОплата.ВидОплаты) И ТекОплата.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			СуммаБезналичнойОплаты = СуммаБезналичнойОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаБезналичнойОплаты;

КонецФункции // ПолучитьСуммуБезналичнойОплаты()

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	// Количество, для услуг не имеющих единицы.
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.Услуга = Истина Тогда
			Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
					СтрокаТаблицы.Количество = 1;
				КонецЕсли;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КоличествоДок) Тогда
					СтрокаТаблицы.КоличествоДок = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ТаблицаТоваров.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));

		Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
			Если СтрокаТаблицы.КоличествоДок = NULL Тогда
				СтрокаТаблицы.КоличествоДок = 0;
			КонецЕсли;

			СтрокаТаблицы.Количество = - СтрокаТаблицы.КоличествоДок;
			СтрокаТаблицы.Сумма = - СтрокаТаблицы.СуммаДок;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), мВалютаРегламентированногоУчета,
		   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;

		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;

			СкидкиЕсть = Истина;
		КонецЕсли;

		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		СуммаСтроки = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма);
		СуммаСтроки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСтроки, мВалютаРегламентированногоУчета,
		   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Разница = СуммаСтроки - СуммаСоСкидками;
		Если Разница <> 0 И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;

		// Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
			        СтрокаТаблицы.Номенклатура,
			        СтрокаТаблицы.ХарактеристикаНоменклатуры,
			        Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Розничная, ЭтотОбъект)) Тогда
				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));

				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;

				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;

					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.Количество * Комплектующая.Количество,
					   мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 1,
					   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;

				СуммаСкидки = СтоимостьКомплектующих - СуммаСтроки;

				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Для Каждого СтрокаСкидки Из ТаблицаДвижений Цикл
			СтрокаСкидки.СуммаСкидки = -СтрокаСкидки.СуммаСкидки;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаДвижений;

КонецФункции // ПодготовитьТаблицуСкидок()

// Проверяет правильность заполнения шапки документа.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Склад, КассаККМ, Организация");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Оплата".
//
// Параметры:
//  ТаблицаПоОплате - таблица значений, содержащая данные для проведения и проверки ТЧ "Оплата".
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоОплате, Отказ, Заголовок)

	СуммаВсего = Товары.Итог("Сумма");
	ОплаченоНал = ПолучитьСуммуНаличнойОплаты();
	ОплаченоБезнал = ПолучитьСуммуБезналичнойОплаты();
	ОплаченоВсего = Оплата.Итог("Сумма");

	Если ОплаченоВсего < СуммаВсего Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма всех типов оплат меньше суммы документа!", Отказ, Заголовок);
	КонецЕсли;

	Если ОплаченоБезнал > СуммаВсего Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма безналичной оплаты не может быть больше суммы документа!", Отказ, Заголовок);
	КонецЕсли;

	Если Оплата.Количество() = 1 Тогда
		СтрокаОплаты = Оплата[0];

		Если НЕ ЗначениеЗаполнено(СтрокаОплаты.ВидОплаты) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита ""Вид оплаты""!", Отказ, Заголовок);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаОплаты.Сумма) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита ""Сумма оплаты""!", Отказ, Заголовок);
		КонецЕсли;
	Иначе

		// Укажем, что надо проверить.
		СтруктураОбязательныхПолей = Новый Структура("ВидОплаты, Сумма");

		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплата()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ "Товары".
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента,
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		Если СтрокаТаблицы.Услуга <> Истина Тогда // для товаров единица измерения обязательна
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для товара нужно заполнять единицу измерения (строка " + СтрокаТаблицы.НомерСтроки + ").", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры:
//  РежимПроведения - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоСкидкам - таблица значений, содержащая данные для проведения по скидкам,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);

	// Движения по документу.
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"), Дата, Ложь, Заголовок);
	КонецЕсли;

	// По некоторым регистрам услуги проводить не нужно.
	// Подготовим отдельную таблицу.
	ТаблицаПоТоварамБезУслуг = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
	                           Новый Структура("Услуга", Ложь)).Выгрузить();

	// По регистру РозничнаяВыручка.
	СуммаНалБезСдачи = СуммаДокумента - ПолучитьСуммуБезналичнойОплаты();
	Если СуммаНалБезСдачи <> 0 Тогда
		НаборДвижений = Движения.РозничнаяВыручка;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.РозничнаяТочка = КассаККМ;
		СтрокаДвижений.Сумма          = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -СуммаНалБезСдачи, СуммаНалБезСдачи);
		СтрокаДвижений.Подразделение  = Неопределено;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;

	// По регистру ПродажиПоДисконтнымКартам.
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
		СуммаДок = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -СуммаДокумента, СуммаДокумента);

		НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
		СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.ВладелецДисконтнойКарты;
		СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДок, мВалютаРегламентированногоУчета,
								   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВРознице.
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		НаборДвижений = Движения.ТоварыНаСкладах;
	Иначе
		НаборДвижений = Движения.ТоварыВРознице;
	КонецЕсли;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	//Получим таблицу по комплектам.
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварамБезУслуг, ЭтотОбъект);
	ТаблицаПоКомплектам.Колонки.Добавить("Склад");
	ТаблицаПоКомплектам.ЗаполнитьЗначения(Склад, "Склад");

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ТаблицаПоКомплектам.Колонки.Добавить("СуммаПродажная");

		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад,
		                 ТаблицаПоКомплектам.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаПоКомплектам, ТаблицаПоЦенам);
	КонецЕсли;

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	// Проверка остатков при оперативном проведении.
	Если СтруктураШапкиДокумента.КонтролироватьОстаткиТоваровПриОперативномПроведенииЧековККМ
	   И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		
		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			Иначе
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьРасход();
	КонецЕсли;

	// ПО РЕГИСТРУ ПредоставленныеСкидки.
	НаборДвижений = Движения.ПредоставленныеСкидки;

	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "ПолучательСкидки");

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ЧекККМПродажа, "ДокументСкидки");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументСкидки");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ") Тогда

		// Заполним вид операции.
		ВидыОперацийЧек = Перечисления.ВидыОперацийЧекККМ;
		Если Основание.ВидОперации = ВидыОперацийЧек.Продажа Тогда
			ВидОперации = ВидыОперацийЧек.Возврат;
			ЧекККМПродажа = Основание;
		Иначе
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		КассаККМ = Основание.КассаККМ;
		ВладелецДисконтнойКарты = Основание.ВладелецДисконтнойКарты;

		// Скопируем состав.
		ТЗТовары = Основание.Товары.Выгрузить();
		ТЗТовары.ЗаполнитьЗначения(Ложь, "РегистрацияПродажи");
		Товары.Загрузить(ТЗТовары);

		Оплата.Загрузить(Основание.Оплата.Выгрузить());
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"    , "ВидСклада"                     , "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("КонтролироватьОстаткиТоваровПриОперативномПроведенииЧековККМ", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КонтролироватьОстаткиТоваровПриОперативномПроведенииЧековККМ"));

	// Проверим правильность заполнения шапки документа.
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим допустимость для пользователя цен документа.
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);

	// Получим необходимые данные для проведения и проверки заполнения по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");

	Если ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		СтруктураПолей.Вставить("Количество"   , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("Сумма"        , "Сумма");
	Иначе
		СтруктураПолей.Вставить("КоличествоДок", "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("СуммаДок"     , "Сумма");
	КонецЕсли;

	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("Набор"                              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                           , "Номенклатура.Комплект");	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("СерияНоменклатуры"                  , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"               , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"        , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"        , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КлючСтроки"                         , "КлючСтроки");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"       , "Количество");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И ЗначениеЗаполнено(ЧекККМПродажа) И Не ОбменДанными.Загрузка Тогда
		РезультатЗапросаПоТоварамОснования = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЧекККМПродажа, "Товары", СтруктураПолей);
		ТаблицаТоваровДокумента = РезультатЗапросаПоТоварам.Выгрузить();
		ТаблицаТоваровДокумента.Свернуть("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры", "КоличествоДок");
		ТаблицаТоваровДокументаОснования = РезультатЗапросаПоТоварамОснования.Выгрузить();
		ТаблицаТоваровДокументаОснования.Свернуть("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры", "КоличествоДок");

		Для Каждого СтрокаТаблицыТоваровДокумента Из ТаблицаТоваровДокумента Цикл
			СтрокиОснования = ТаблицаТоваровДокументаОснования.НайтиСтроки(
			                  Новый Структура ("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры",
			                                   СтрокаТаблицыТоваровДокумента.Номенклатура,
			                                   СтрокаТаблицыТоваровДокумента.Цена,
			                                   СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры,
			                                   СтрокаТаблицыТоваровДокумента.СерияНоменклатуры));

			Продано = 0;
			Если СтрокиОснования.Количество() > 0 Тогда
				Если СтрокиОснования[0].КоличествоДок >= СтрокаТаблицыТоваровДокумента.КоличествоДок Тогда
					Продолжить;
				Иначе
					Продано = СтрокиОснования[0].КоличествоДок;
				КонецЕсли;
			КонецЕсли;

			ОбщегоНазначения.СообщитьОбОшибке("По документу основанию товара """ + СтрокаТаблицыТоваровДокумента.Номенклатура
			                    + """ по цене """ + ОбщегоНазначения.ФорматСумм(СтрокаТаблицыТоваровДокумента.Цена, мВалютаРегламентированногоУчета)+ """ "
			                    + Символы.ПС + ? (ЗначениеЗаполнено(СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры),
			                         "с характеристикой """ + СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры + """", "")
			                    + ? (ЗначениеЗаполнено(СтрокаТаблицыТоваровДокумента.СерияНоменклатуры),
			                         "с серией """ + СтрокаТаблицыТоваровДокумента.СерияНоменклатуры + """", "")
			                    + "продано """ + Продано +""", возвращается от покупателя """
			                    + СтрокаТаблицыТоваровДокумента.КоличествоДок + """.", Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения по табличной части "Оплата".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидОплаты", "ВидОплаты");
	СтруктураПолей.Вставить("Сумма"    , "Сумма");

	ТаблицаПоОплате = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей).Выгрузить();

	// Проверить заполнение ТЧ "Оплата".
	ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоОплате, Отказ, Заголовок);


	Если Не Отказ Тогда
		// Подготовим таблицу скидок для проведения.
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, СтруктураШапкиДокумента);

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мАннулировать                   = Ложь;
мПострочнаяПечать               = Ложь;
мПараметрыСвязиСтрокТЧ          = Новый Соответствие;

мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

УказаниеСкладов     = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);
