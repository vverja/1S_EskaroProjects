//Переменные модуля

Перем ТаблицаЗаданий Экспорт; // Таблица значений, в которую записываются задания агента

// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура формирует таблицу с заданиями
//
Процедура ОбновитьТаблицуЗаданий() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(кпкЗаданиеАгента.Дата, ДЕНЬ) КАК День,
	|	кпкЗаданиеАгента.Ссылка КАК Документ,
	|	кпкЗаданиеАгента.Контрагент,
	|	кпкЗаданиеАгента.кпкТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	Документ.кпкЗаданиеАгента КАК кпкЗаданиеАгента
	|ГДЕ
	|	кпкЗаданиеАгента.Агент = &Агент
	|	И кпкЗаданиеАгента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И кпкЗаданиеАгента.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Агент", 		   Агент);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ДобавитьМесяц(Дата, 1)));
	
	ТаблицаЗаданий = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры //ОбновитьТаблицуЗаданий()   

Функция НайтиПодчиненныеМаршруты()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	кпкМаршрут.Ссылка КАК Док
	|ИЗ
	|	Документ.кпкМаршрут КАК кпкМаршрут
	|ГДЕ
	|	кпкМаршрут.ДокОснование = &ДокОснование");
	
	Запрос.УстановитьПараметр("ДокОснование", Ссылка);
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Док");
	
	Возврат МассивДокументов;
	
КонецФункции // НайтиПодчиненныеМаршруты()

Функция НайтиПодчиненныеЗадания()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	кпкЗадание.Ссылка КАК Док
	|ИЗ
	|	Документ.кпкЗаданиеАгента КАК кпкЗадание
	|ГДЕ
	|	кпкЗадание.ДокОснование = &ДокОснование");
	
	Запрос.УстановитьПараметр("ДокОснование", Ссылка);
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Док");
	
	Возврат МассивДокументов;
	
КонецФункции // НайтиПодчиненныеЗадания() 

#Если Клиент Тогда
	
// Процедура выводит на печать план посещений агента.
//
Процедура ПечатьПланаПосещений(ФормаПечати, КолДней, ЭтаФорма) Экспорт
	
	Таб = ФормаПечати.ЭлементыФормы.Найти("ТаблицаПланаПосещений");
	Таб.Очистить();
	
	Если ТипПлана = 1 Тогда
		Макет = ЭтотОбъект.ПолучитьМакет("Макет");   
	Иначе
		Макет = ЭтотОбъект.ПолучитьМакет("МакетКлиент");
	КонецЕсли;
	
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка|ТоргТочка");
	ОбластьШапки.Параметры.Дата = Формат(Дата, "ДЛФ=DD");
	ОбластьШапки.Параметры.Номер = Номер;
	ОбластьШапки.Параметры.Наименование = Агент.Наименование;
	ОбластьШапки.Параметры.Код = Агент.Код;
	Таб.Вывести(ОбластьШапки);
	
	Для пНомер = 1 По КолДней Цикл
		Текст = Вычислить("ЭтаФорма.ЭлементыФормы.Дни.Колонки.Д" + пНомер + ".ТекстШапки");
		СтрДень = Прав(СокрЛП(Текст), 2);
		СтрЧисло = СокрЛП(Лев(Текст, 2));
		Если СтрДень = "ВС" Тогда
			ДопОбластьШапки = Макет.ПолучитьОбласть("Шапка|Воскр");
		ИначеЕсли СтрДень = "СБ" Тогда
			ДопОбластьШапки = Макет.ПолучитьОбласть("Шапка|Субб");
		Иначе
			ДопОбластьШапки = Макет.ПолучитьОбласть("Шапка|День");
		КонецЕсли;
		ДопОбластьШапки.Параметры.ДеньНед = СтрДень;
		ДопОбластьШапки.Параметры.ДеньМес = СтрЧисло;
		Таб.Присоединить(ДопОбластьШапки);
	КонецЦикла;
	
	ВсегоОбластьШапки = Макет.ПолучитьОбласть("Шапка|Всего");
	Таб.Присоединить(ВсегоОбластьШапки);
	
	Зеленый = Новый Цвет(0, 255, 0);
	
	Для Индекс = 0 По Дни.Количество() - 1 Цикл
		Строка = ?(Строка = "Строка", "Строка2", "Строка");
		Стр = Дни.Получить(Индекс);
		Область = Макет.ПолучитьОбласть(Строка + "|ТоргТочка");
		Область.Параметры.Ном = Стр.НомерСтроки;
		
		ТорговаяТочка = Справочники.кпкТорговыеТочки.ПустаяСсылка();	
		Если ТипПлана = 1 Тогда
			Контрагент 	  = Стр.ТорговаяТочка.Владелец;
			ТорговаяТочка = Стр.ТорговаяТочка;
			Область.Параметры.Клиент   = Контрагент;
			Область.Параметры.ПечТочка = ТорговаяТочка;
			Область.Параметры.ТоргТочкаАдрес = Стр.ТорговаяТочка.Адрес;
		Иначе
			Контрагент = Стр.Контрагент;		
			Область.Параметры.Клиент = Контрагент;
			Область.Параметры.ТоргТочкаАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Контрагент, "Фактический");
		КонецЕсли;
		Таб.Вывести(Область);
		
		Смещение = (НачалоДня(Дата) - НачалоМесяца(Дата))/86400 + 1;	
		
		ТекДень =  Дата(Формат(Год(Дата), "ЧГ=0") + Формат(Месяц(Дата), "ЧЦ=2; ЧВН=") + Формат(Смещение, "ЧЦ=2; ЧВН=")); 
		
		Для пНомер = 1 По КолДней Цикл
			Текст    = Вычислить("ЭтаФорма.ЭлементыФормы.Дни.Колонки.Д" + пНомер + ".ТекстШапки");
			Значение = Вычислить("Стр.Д" + пНомер);
			СтрДень  = ВРег(Прав(СокрЛП(Текст), 2));
			
			Если СтрДень = "ВС" Тогда
				ДопОбласть = Макет.ПолучитьОбласть(Строка + "|Воскр");
			ИначеЕсли СтрДень = "СБ" Тогда
				ДопОбласть = Макет.ПолучитьОбласть(Строка + "|Субб");
			Иначе
				ДопОбласть = Макет.ПолучитьОбласть(Строка + "|День");
			КонецЕсли;			
			
			Работа = ?(Значение, "Х", "");
			ДопОбласть.Параметры.ПечРабота = Работа;  			
		 
			СтруктураПараметров = Новый Структура("Контрагент, ТорговаяТочка, День, Работа",
												  Контрагент, ТорговаяТочка, ТекДень, Работа); 
												  
			ДопОбласть.Параметры.СтрПечРабота = СтруктураПараметров;   			
			
			НайденныеСтроки = ТаблицаЗаданий.НайтиСтроки(Новый Структура("Контрагент, ТорговаяТочка, День", 
			Контрагент, ТорговаяТочка, ТекДень));
			
			// Выделяем ячейки с заданием
			Для Каждого НужнаяСтрока Из НайденныеСтроки Цикл 				
				Если пНомер > 0 Тогда 					
					ДопОбласть.ТекущаяОбласть.ЦветФона = Зеленый;
				КонецЕсли;
			КонецЦикла;
			
			Таб.Присоединить(ДопОбласть);
			
			ТекДень = ТекДень + 86400; 
		КонецЦикла;
		
		ВсегоОбласть 					      = Макет.ПолучитьОбласть(Строка + "|Всего");
		ВсегоОбласть.Параметры.ВсегоПосещений = Стр.ВсегоПосещений;
		Таб.Присоединить(ВсегоОбласть);
		
	КонецЦикла;
	
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|ТоргТочка");
	ОбластьПодвала.Параметры.КоличествоСтрок = Дни.Количество();
	ОбластьПодвала.Параметры.Автор = Автор;
	Таб.Вывести(ОбластьПодвала);
	
	Для пНомер = 1 По КолДней Цикл
		Итог    = Вычислить("Дни.Итог(""Д" + пНомер + """)");
		Текст   = Вычислить("ЭтаФорма.ЭлементыФормы.Дни.Колонки.Д" + пНомер + ".ТекстШапки");
		СтрДень = ВРег(Прав(СокрЛП(Текст), 2));
		Если СтрДень      = "ВС" Тогда
			ДопОбластьПодвала = Макет.ПолучитьОбласть("Подвал|Воскр");
		ИначеЕсли СтрДень = "СБ" Тогда
			ДопОбластьПодвала = Макет.ПолучитьОбласть("Подвал|Субб");
		Иначе
			ДопОбластьПодвала = Макет.ПолучитьОбласть("Подвал|День");
		КонецЕсли;
		ДопОбластьПодвала.Параметры.ПечИтог = Итог;
		Таб.Присоединить(ДопОбластьПодвала);
	КонецЦикла;
	
	ВсегоОбластьПодвала 				   = Макет.ПолучитьОбласть("Подвал|Всего");
	ВсегоОбластьПодвала.Параметры.ПечВсего = Дни.Итог("ВсегоПосещений");
	Таб.Присоединить(ВсегоОбластьПодвала);
	
	Таб.ТолькоПросмотр 	   = Истина;
	Таб.АвтоМасштаб    	   = Истина;
	Таб.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Таб.ФиксацияСлева 	   = 5;
	Таб.ФиксацияСверху 	   = 7;
	Таб.Показать();
	
	Если НЕ ФормаПечати.Открыта() Тогда
		ФормаПечати.ИспТочек = ТипПлана;
		ФормаПечати.Открыть();
	Иначе
		ФормаПечати.Активизировать();
	КонецЕсли;
	
КонецПроцедуры //Печать()

// Процедура осуществляет печать плана продаж. 
//
Процедура ПечатьПланаПродаж() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланПосещений.Номер,
	|	ПланПосещений.Дата,
	|	ПланПосещений.ИнтервалПланирования КАК Интервал,
	|	ПланПосещений.Агент,
	|	ПланПосещений.Автор,
	|	ПланПосещений.ПланПродаж.(
	|		НомерСтроки,
	|		НоменклатурнаяГруппа.Наименование КАК Группа,
	|		Количество,
	|		Сумма
	|	)
	|ИЗ
	|	Документ.кпкПланПосещений КАК ПланПосещений
	|ГДЕ
	|	ПланПосещений.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланПосещений.ПланПродаж.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаТоваров = Шапка.ПланПродаж.Выбрать();
	
	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланПродаж_ПланПродаж";
	Макет         = ПолучитьМакет("ПланПродаж");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "План продаж №" + Шапка.Номер + " от " + Формат(Шапка.Дата, "ДЛФ=DD");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	КолДней = Шапка.Интервал;
	КолДнейМесяца = (КонецМесяца(Шапка.Дата) - НачалоМесяца(Шапка.Дата) + 1)/86400;
	Если      КолДней = 1 тогда
		ИнтервалСтр = "День";
	ИначеЕсли КолДней = 7 тогда
		ИнтервалСтр = "Неделя";
	ИначеЕсли КолДней = 14  тогда
		ИнтервалСтр = "Две недели";		
	ИначеЕсли КолДней = КолДнейМесяца Тогда
		ИнтервалСтр = "Месяц";
	Иначе		
		ИнтервалСтр = Строка(КолДней) + " дней";				
	КонецЕсли;

	ОбластьМакета.Параметры.Интервал = ИнтервалСтр; 	
	ОбластьМакета.Параметры.Дата = Формат(Шапка.Дата, "ДЛФ=DD"); 	
		
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	ВыборкаТоваров = Шапка.ПланПродаж.Выбрать();
	Пока ВыборкаТоваров.Следующий() Цикл
		ОбластьСтроки.Параметры.Заполнить(ВыборкаТоваров);		
		ТабДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Автор = Шапка.Автор;
	ОбластьМакета.Параметры.Автор = "/"+Автор + "/";	
	ОбластьМакета.Параметры.ИтогоСтоимость     = ПланПродаж.Итог("Сумма");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.АвтоМасштаб = Истина;	
	ТабДокумент.Показать();          

КонецПроцедуры // ПечатьПланаПродаж()

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, Отказ, Заголовок) Экспорт

	// Укажем, что надо проверить:	
	РежимПланирования = Константы.кпкРежимПланированияПродаж.Получить();
	
	Если РежимПланирования = 1 Тогда
		СтруктураОбязательныхПолей = Новый Структура("НоменклатурнаяГруппа, Количество");
	ИначеЕсли РежимПланирования = 2 Тогда
		СтруктураОбязательныхПолей = Новый Структура("НоменклатурнаяГруппа, Сумма");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("НоменклатурнаяГруппа, Количество, Сумма");
	КонецЕсли;	
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПланПродаж", СтруктураОбязательныхПолей, Отказ, Заголовок);
    
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  ВыборкаПоШапкеДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, ТаблицаПоТоварам, Отказ)

	// ПО РЕГИСТРУ ПланыПродаж.
	
	Если ВидОперации <> Перечисления.кпкВидыОперацийПланирования.ПланированиеПосещений Тогда
		
		НаборДвижений = Движения.кпкПланыПродаж;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		ТаблицаТоваров = ТаблицаПоТоварам.Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаТоваров, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументПланирования");
		ТаблицаДвижений.ЗаполнитьЗначения(Агент,  "Агент");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.кпкПланыПродаж.ДобавитьДвижение();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()
 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//  
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
    		
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ПланПродаж, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, ПланПродаж, Отказ);
	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда
		// Произошло изменение пометки на удаление
		
		// Получаем список подчиненных документов маршрутов
		МассивМаршрутов = НайтиПодчиненныеМаршруты();

		Для Каждого ЭлМассива Из МассивМаршрутов Цикл  			
			
			// Нужно установить для документа маршрута пометку удаления
			Маршрут = ЭлМассива.ПолучитьОбъект();
			Маршрут.УстановитьПометкуУдаления(ЭтотОбъект.ПометкаУдаления);
			
			Если ЭтотОбъект.ПометкаУдаления Тогда
				Сообщить("Документ «" + Маршрут + "» помечен на удаление.", СтатусСообщения.Информация);
			Иначе
				Сообщить("У документа «" + Маршрут + "» снята пометка на удаление.",СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЦикла;	
		
		// Получаем список подчиненных документов заданий
		МассивЗаданий = НайтиПодчиненныеЗадания();

		Для Каждого ЭлМассива Из МассивЗаданий Цикл  			
			
			// Нужно установить для документа маршрута пометку удаления
			Задание = ЭлМассива.ПолучитьОбъект();
			Задание.УстановитьПометкуУдаления(ЭтотОбъект.ПометкаУдаления);
			
			Если ЭтотОбъект.ПометкаУдаления Тогда
				Сообщить("Документ «" + Задание + "» помечен на удаление.", СтатусСообщения.Информация);
			Иначе
				Сообщить("У документа «" + Задание + "» снята пометка на удаление.",СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЦикла;	

			
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

ТаблицаЗаданий = Новый ТаблицаЗначений;
ТаблицаЗаданий.Колонки.Добавить("День");
ТаблицаЗаданий.Колонки.Добавить("Контрагент");
ТаблицаЗаданий.Колонки.Добавить("ТорговаяТочка");
ТаблицаЗаданий.Колонки.Добавить("Документ");


