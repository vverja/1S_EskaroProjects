#Если Клиент Тогда
Перем мЕстьНЗП;	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

Функция СформироватьТекстЗапросаНЗП()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|		РегНЗП.Заказ КАК ЗаказНаПроизводство,
	|		РегНЗП.Затрата КАК Материал,
	|		РегНЗП.ХарактеристикаЗатраты КАК ХарактеристикаМатериала,
	|		NULL КАК Продукция,
	|		NULL КАК ХарактеристикаПродукции,
	|		РегНЗП.Затрата.ЕдиницаХраненияОстатков,
	|		NULL КАК ВидВоспроизводства,
	|		NULL КАК Спецификация,
	|		РегНЗП.Подразделение,
	|		NULL КАК Склад,
	|		NULL КАК ЗаказПоставщику,
	|		0 КАК КолПотребность,
	|		0 КАК КолРезерв,
	|		0 КАК КолРазмещено,
	|		РегНЗП.КоличествоОстаток КАК КолНЗП
	|ИЗ
	|	РегистрНакопления.НезавершенноеПроизводство.Остатки(&ДатаКон, Заказ ССЫЛКА Документ.ЗаказНаПроизводство {Заказ.*, Затрата.*, ХарактеристикаЗатраты.*}) КАК РегНЗП
	|";
	Возврат ТекстЗапроса;
КонецФункции

Функция СформироватьТекстЗапросаНЗП_РасширеннаяАналитика()
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ВЫРАЗИТЬ(РегистрАналитикаУчетаПартий.Заказ КАК Документ.ЗаказНаПроизводство) КАК ЗаказНаПроизводство,
	|		РегистрАналитикаУчетаЗатрат.Затрата КАК Материал,
	|		РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаМатериала,
	|		NULL КАК Продукция,
	|		NULL КАК ХарактеристикаПродукции,
	|		РегистрАналитикаУчетаЗатрат.Затрата.ЕдиницаХраненияОстатков,
	|		NULL КАК ВидВоспроизводства,
	|		NULL КАК Спецификация,
	|//ДляУпрУчета РегистрАналитикаВидаУчета.Подразделение,
	|//ДляРеглУчета РегистрАналитикаВидаУчета.ПодразделениеОрганизации КАК Подразделение,
	|		NULL КАК Склад,
	|		NULL КАК ЗаказПоставщику,
	|		0 КАК КолПотребность,
	|		0 КАК КолРезерв,
	|		0 КАК КолРазмещено,
	|		ЗатратыНаВыпуск.КоличествоОстаток КАК КолНЗП
	|	ИЗ
	|		РегистрНакопления.УчетЗатрат%СуффиксРегл%.Остатки(&ДатаКон, 
	|			АналитикаВидаУчета В (
	|				ВЫБРАТЬ
	|					Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|				ГДЕ
	|					РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
	|				{Затрата.*, ХарактеристикаЗатраты.*}
	|				)
	|			И АналитикаУчетаПартий В (
	|				ВЫБРАТЬ
	|					Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|				ГДЕ
	|					Заказ ССЫЛКА Документ.ЗаказНаПроизводство
	|				{Заказ.*}
	|				)
	|		) КАК ЗатратыНаВыпуск
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|	ПО
	|		ЗатратыНаВыпуск.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|	ПО
	|		ЗатратыНаВыпуск.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|	ПО
	|		ЗатратыНаВыпуск.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка 
	|";
	
	РежимИспользованияРасширеннойАналитики = глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");

	Если РежимИспользованияРасширеннойАналитики = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
	Иначе
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете;
	КонецЕсли;
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапроса,
		ВидОтраженияВУчете
	);

    Возврат ТекстЗапроса;

КонецФункции

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	// При написании текста запроса рекомендуется следовать правилам, описанным в следующем шаблоне текста запроса:
	//
	//ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	<ПсевдонимТаблицы.Поле> КАК <ПсевдонимПоля>,
	//	ПРЕДСТАВЛЕНИЕ(<ПсевдонимТаблицы>.<Поле>),
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>
	//	<ПсевдонимТаблицы>.Регистратор КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//{ВЫБРАТЬ
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПСЕВДОНИМЫ_СВОЙСТВА
	//	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	//}
	//ИЗ
	//	<Таблица> КАК <ПсевдонимТаблицы>
	//	//СОЕДИНЕНИЯ
	//{ГДЕ
	//	<ПсевдонимТаблицы.Поле>.* КАК <ПсевдонимПоля>,
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>,
	//	<ПсевдонимТаблицы>.Регистратор.* КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//УСЛОВИЯ_СВОЙСТВА
	//	//УСЛОВИЯ_КАТЕГОРИИ
	//}
	//{УПОРЯДОЧИТЬ ПО
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор.*,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПСЕВДОНИМЫ_СВОЙСТВА
	//	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	//}
	//ИТОГИ
	//	АГРЕГАТНАЯ_ФУНКЦИЯ(<ПсевдонимПоказателя>)
	//	//ИТОГИ_СВОЙСТВА
	//	//ИТОГИ_КАТЕГОРИИ
	//ПО
	//	ОБЩИЕ
	//{ИТОГИ ПО
	//	<ПсевдонимПоля>.*,
	//	Регистратор.*,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПСЕВДОНИМЫ_СВОЙСТВА
	//	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	//}
	ВидимостьНЗП = Ложь;
	Если глЗначениеПеременной("ИспользоватьПотребностиЗаказовНаПроизводство")
		И глЗначениеПеременной("СпособЗакрытияПотребностейЗаказовНаПроизводство") = Перечисления.СпособыЗакрытияПотребностейЗаказовНаПроизводство.АвтоматическиПриРаспределении Тогда
		
		ВидимостьНЗП = Истина;
	КонецЕсли;

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегПотребности.ЗаказНаПроизводство,
		|	РегПотребности.Номенклатура,
		|	РегПотребности.ХарактеристикаНоменклатуры,
		|	РегПотребности.Продукция,
		|	РегПотребности.ХарактеристикаПродукции,
		|	РегПотребности.ЕдиницаИзмерения,
		|	РегПотребности.ВидВоспроизводства,
		|	РегПотребности.Спецификация,
		|	РегПотребности.Подразделение,
		|	РегПотребности.Склад,
		|	РегПотребности.ЗаказПоставщику,
		|	ПРЕДСТАВЛЕНИЕ(РегПотребности.ЗаказНаПроизводство),
		|	ПРЕДСТАВЛЕНИЕ(РегПотребности.Номенклатура),
		|	ПРЕДСТАВЛЕНИЕ(РегПотребности.ХарактеристикаНоменклатуры),
		|	ПРЕДСТАВЛЕНИЕ(РегПотребности.Продукция),
		|	ПРЕДСТАВЛЕНИЕ(РегПотребности.ХарактеристикаПродукции),
		|	ПРЕДСТАВЛЕНИЕ(РегПотребности.ЕдиницаИзмерения),
		|	ПРЕДСТАВЛЕНИЕ(РегПотребности.ВидВоспроизводства),
		|	ПРЕДСТАВЛЕНИЕ(РегПотребности.Спецификация),
		|	ПРЕДСТАВЛЕНИЕ(РегПотребности.Подразделение),
		|	ПРЕДСТАВЛЕНИЕ(РегПотребности.Склад),
		|	ПРЕДСТАВЛЕНИЕ(РегПотребности.ЗаказПоставщику),
		|	РегПотребности.КолПотребность КАК КолПотребность,
		|	РегПотребности.КолРезерв КАК КолРезерв,
		|	РегПотребности.КолРазмещено КАК КолРазмещено,
		|	РегПотребности.КолНЗП КАК КолНЗП,
		|	РегПотребности.КолПотребность - РегПотребности.КолРезерв - РегПотребности.КолРазмещено - РегПотребности.КолНЗП КАК Необеспечено
		|	//ПОЛЯ_СВОЙСТВА
		|	//ПОЛЯ_КАТЕГОРИИ
		|{ВЫБРАТЬ
		|	ЗаказНаПроизводство.*,
		|	Номенклатура.*,
		|	ХарактеристикаНоменклатуры.*,
		|	Продукция.*,
		|	ХарактеристикаПродукции.*,
		|	ЕдиницаИзмерения.*,
		|	ВидВоспроизводства.*,
		|	Спецификация.*,
		|	Подразделение.*,
		|	Склад.*,
		|	ЗаказПоставщику.*,
		|	КолПотребность,
		|	КолРезерв,
		|	КолРазмещено,
		|	КолНЗП,
		|	Необеспечено
		|	//ПСЕВДОНИМЫ_СВОЙСТВА
		|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
		|}
		|ИЗ
		|(ВЫБРАТЬ
		|	РегПотребности.ЗаказНаПроизводство,
		|	РегПотребности.Номенклатура,
		|	РегПотребности.ХарактеристикаНоменклатуры,
		|	РегПотребности.Продукция,
		|	РегПотребности.ХарактеристикаПродукции,
		|	РегПотребности.ЕдиницаИзмерения,
		|	РегПотребности.ВидВоспроизводства,
		|	РегПотребности.Спецификация,
		|	РегПотребности.Подразделение,
		|	NULL КАК Склад,
		|	NULL КАК ЗаказПоставщику,
		|	РегПотребности.КоличествоОстаток КАК КолПотребность,
		|	0 КАК КолРезерв,
		|	0 КАК КолРазмещено,
		|	0 КАК КолНЗП
		|ИЗ
		|	РегистрНакопления.ПотребностиЗаказовНаПроизводство.Остатки(&ДатаКон, {ЗаказНаПроизводство.*, Номенклатура.*, ХарактеристикаНоменклатуры.*}) КАК РегПотребности
		|
		//Резерв складывается из трех регистров: ТоварыВРезервеНаСкладах
		//	ТоварыКПередачеСоСкладов, ТоварыКПолучениюНаСклады (с отрицательным знаком) - для учета резервов, перемещаемых по ордерной схеме
		|ОБЪЕДИНИТЬ ВСЕ
		|		
		|ВЫБРАТЬ
		|	РегРезерв.ДокументРезерва КАК ЗаказНаПроизводство,
		|	РегРезерв.Номенклатура,
		|	РегРезерв.ХарактеристикаНоменклатуры,
		|	NULL КАК Продукция,
		|	NULL КАК ХарактеристикаПродукции,
		|	РегРезерв.Номенклатура.ЕдиницаХраненияОстатков,
		|	NULL КАК ВидВоспроизводства,
		|	NULL КАК Спецификация,
		|	NULL КАК Подразделение,
		|	РегРезерв.Склад КАК Склад,
		|	NULL КАК ЗаказПоставщику,
		|	0 КАК КолПотребность,
		|	РегРезерв.КоличествоОстаток КАК КолРезерв,
		|	0 КАК КолРазмещено,
		|	0 КАК КолНЗП
		|ИЗ
		|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаКон, ДокументРезерва ССЫЛКА Документ.ЗаказНаПроизводство {ДокументРезерва.*, Номенклатура.*, ХарактеристикаНоменклатуры.*}) КАК РегРезерв
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|		
		|ВЫБРАТЬ
		|	РезервыКПередаче.ДокументРезерва КАК ЗаказНаПроизводство,
		|	РезервыКПередаче.Номенклатура,
		|	РезервыКПередаче.ХарактеристикаНоменклатуры,
		|	NULL КАК Продукция,
		|	NULL КАК ХарактеристикаПродукции,
		|	РезервыКПередаче.Номенклатура.ЕдиницаХраненияОстатков,
		|	NULL КАК ВидВоспроизводства,
		|	NULL КАК Спецификация,
		|	NULL КАК Подразделение,
		|	РезервыКПередаче.Склад КАК Склад,
		|	NULL КАК ЗаказПоставщику,
		|	0 КАК КолПотребность,
		|	РезервыКПередаче.КоличествоОстаток КАК КолРезерв,
		|	0 КАК КолРазмещено,
		|	0 КАК КолНЗП
		|ИЗ
		|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаКон, ДокументРезерва ССЫЛКА Документ.ЗаказНаПроизводство {ДокументРезерва.*, Номенклатура.*, ХарактеристикаНоменклатуры.*}) КАК РезервыКПередаче
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|		
		|ВЫБРАТЬ
		|	РезервыКПолучению.ДокументРезерва КАК ЗаказНаПроизводство,
		|	РезервыКПолучению.Номенклатура,
		|	РезервыКПолучению.ХарактеристикаНоменклатуры,
		|	NULL КАК Продукция,
		|	NULL КАК ХарактеристикаПродукции,
		|	РезервыКПолучению.Номенклатура.ЕдиницаХраненияОстатков,
		|	NULL КАК ВидВоспроизводства,
		|	NULL КАК Спецификация,
		|	NULL КАК Подразделение,
		|	РезервыКПолучению.Склад КАК Склад,
		|	NULL КАК ЗаказПоставщику,
		|	0 КАК КолПотребность,
		|	(-1)*РезервыКПолучению.КоличествоОстаток КАК КолРезерв,
		|	0 КАК КолРазмещено,
		|	0 КАК КолНЗП
		|ИЗ
		|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаКон, ДокументРезерва ССЫЛКА Документ.ЗаказНаПроизводство {ДокументРезерва.*, Номенклатура.*, ХарактеристикаНоменклатуры.*}) КАК РезервыКПолучению
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|		
		|ВЫБРАТЬ
		|	РегРазмещение.ЗаказПокупателя КАК ЗаказНаПроизводство,
		|	РегРазмещение.Номенклатура,
		|	РегРазмещение.ХарактеристикаНоменклатуры,
		|	NULL КАК Продукция,
		|	NULL КАК ХарактеристикаПродукции,
		|	РегРазмещение.Номенклатура.ЕдиницаХраненияОстатков,
		|	NULL КАК ВидВоспроизводства,
		|	NULL КАК Спецификация,
		|	NULL КАК Подразделение,
		|	NULL КАК Склад,
		|	РегРазмещение.ЗаказПоставщику КАК ЗаказПоставщику,
		|	0 КАК КолПотребность,
		|	0 КАК КолРезерв,
		|	РегРазмещение.КоличествоОстаток КАК КолРазмещено,
		|	0 КАК КолНЗП
		|ИЗ
		|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаКон, ЗаказПокупателя ССЫЛКА Документ.ЗаказНаПроизводство {ЗаказПокупателя.*, Номенклатура.*, ХарактеристикаНоменклатуры.*}) КАК РегРазмещение
		|//Подзапрос_НЗП	
		|) КАК РегПотребности
		|	//СОЕДИНЕНИЯ
		|
		|{ГДЕ
		|	РегПотребности.ЗаказНаПроизводство.*,
		|	РегПотребности.Номенклатура.*,
		|	РегПотребности.ХарактеристикаНоменклатуры.*,
		|	РегПотребности.Продукция.*,
		|	РегПотребности.ХарактеристикаПродукции.*,
		|	РегПотребности.ЕдиницаИзмерения.*,
		|	РегПотребности.ВидВоспроизводства.*,
		|	РегПотребности.Спецификация.*,
		|	РегПотребности.Подразделение.*,
		|	РегПотребности.Склад.*,
		|	РегПотребности.ЗаказПоставщику.*,
		|	ЕСТЬNULL(РегПотребности.КолПотребность, 0) КАК КолПотребность,
		|	ЕСТЬNULL(РегПотребности.КолРезерв, 0) КАК КолРезерв,
		|	ЕСТЬNULL(РегПотребности.КолРазмещено, 0) КАК КолРазмещено,
		|	ЕСТЬNULL(РегПотребности.КолНЗП, 0) КАК КолНЗП,
		|	ЕСТЬNULL(РегПотребности.КолПотребность, 0) - ЕСТЬNULL(РегПотребности.КолРезерв, 0) - ЕСТЬNULL(РегПотребности.КолРазмещено, 0) - ЕСТЬNULL(РегПотребности.КолНЗП, 0) КАК Необеспечено
		|	//УСЛОВИЯ_СВОЙСТВА
		|	//УСЛОВИЯ_КАТЕГОРИИ
		|}
		|{УПОРЯДОЧИТЬ ПО
		|	ЗаказНаПроизводство.*,
		|	Номенклатура.*,
		|	ХарактеристикаНоменклатуры.*,
		|	Продукция.*,
		|	ХарактеристикаПродукции.*,
		|	ЕдиницаИзмерения.*,
		|	ВидВоспроизводства.*,
		|	Спецификация.*,
		|	Подразделение.*,
		|	Склад.*,
		|	ЗаказПоставщику.*,
		|	КолПотребность,
		|	КолРезерв,
		|	КолРазмещено,
		|	КолНЗП,
		|	Необеспечено
		|	//ПСЕВДОНИМЫ_СВОЙСТВА
		|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
		|}
		|ИТОГИ
		|	СУММА(КолПотребность),
		|	СУММА(КолРезерв),
		|	СУММА(КолРазмещено),
		|	СУММА(КолНЗП),
		|	СУММА(Необеспечено)
		|	//ИТОГИ_СВОЙСТВА
		|	//ИТОГИ_КАТЕГОРИИ
		|ПО
		|	ОБЩИЕ
		|{ИТОГИ ПО
		|	ЗаказНаПроизводство.*,
		|	Номенклатура.*,
		|	ХарактеристикаНоменклатуры.*,
		|	Продукция.*,
		|	ХарактеристикаПродукции.*,
		|	ЕдиницаИзмерения.*,
		|	ВидВоспроизводства.*,
		|	Спецификация.*,
		|	Подразделение.*,
		|	Склад.*,
		|	ЗаказПоставщику.*
		|	//ПСЕВДОНИМЫ_СВОЙСТВА
		|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
		|	}";
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегПотребности.ЗаказНаПроизводство",        "ЗаказНаПроизводство",        "Заказ на производство",       ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегПотребности.Номенклатура",               "Номенклатура",               "Номенклатура",                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегПотребности.Продукция",                  "Продукция",                  "Продукция",                   ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегПотребности.ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегПотребности.ХарактеристикаПродукции",    "ХарактеристикаПродукции",    "Характеристика продукции",    ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегПотребности.Подразделение",              "Подразделение",              "Подразделение",               ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегПотребности.ЗаказПоставщику",        	  "ЗаказПоставщику",            "Заказ резервирования",       ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);

		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ВидимостьНЗП Тогда
		Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") И 
			(НЕ ЗначениеЗаполнено(УниверсальныйОтчет.ДатаКон) ИЛИ 
				глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= УниверсальныйОтчет.ДатаКон) Тогда
			ТекстЗапросаНЗП = СформироватьТекстЗапросаНЗП_РасширеннаяАналитика();
		Иначе
			ТекстЗапросаНЗП = СформироватьТекстЗапросаНЗП();
		КонецЕсли;
		ТекстЗапроса = стрЗаменить(ТекстЗапроса,"//Подзапрос_НЗП","
		|ОБЪЕДИНИТЬ ВСЕ 
		|"+ТекстЗапросаНЗП);
	КонецЕсли;

		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗаказНаПроизводство",        "Заказ на производство");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ХарактеристикаНоменклатуры", "Характеристика номенклатуры");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ХарактеристикаПродукции",    "Характеристика продукции");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЕдиницаИзмерения",           "Единица измерения");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВидВоспроизводства",         "Вид воспроизводства");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗаказПоставщику",            "Заказ размещения");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Склад",            		   "Склад резервирования");

	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КолПотребность", "Потребность (кол-во)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КолРезерв",      "Зарезервировано на складе (кол-во)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КолРазмещено",   "Размещено в заказах (кол-во)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КолНЗП",         "Наличие в НЗП (кол-во)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Необеспечено",   "Осталось обеспечить");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	УниверсальныйОтчет.ДобавитьПоказатель("КолПотребность", "Потребность",         Истина, "ЧЦ=15; ЧДЦ=3; ЧН=-");
	УниверсальныйОтчет.ДобавитьПоказатель("КолРезерв",      "Зарезервировано на складе",     Истина, "ЧЦ=15; ЧДЦ=3; ЧН=-", "Обеспечение", "Обеспечение");
	УниверсальныйОтчет.ДобавитьПоказатель("КолРазмещено",   "Размещено в заказах",           Истина, "ЧЦ=15; ЧДЦ=3; ЧН=-", "Обеспечение", "Обеспечение");
	Если ВидимостьНЗП Тогда
		УниверсальныйОтчет.ДобавитьПоказатель("КолНЗП",         "НЗП",                 Истина, "ЧЦ=15; ЧДЦ=3; ЧН=-", "Обеспечение", "Обеспечение");
	КонецЕсли;
	УниверсальныйОтчет.ДобавитьПоказатель("Необеспечено",   "Осталось обеспечить", Истина, "ЧЦ=15; ЧДЦ=3; ЧН=-");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ЗаказНаПроизводство");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("ЗаказНаПроизводство");
	УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	УниверсальныйОтчет.ДобавитьОтбор("Подразделение");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

Функция ПолучитьТекстСправкиФормы() Экспорт
	Если мЕстьНЗП = неопределено Тогда
		мЕстьНЗП = (глЗначениеПеременной("СпособЗакрытияПотребностейЗаказовНаПроизводство")=Перечисления.СпособыЗакрытияПотребностейЗаказовНаПроизводство.АвтоматическиПриРаспределении);
	КонецЕсли;

	ТекстМакета = ПолучитьМакет("Отчет_МакетВстроеннойСправки").ПолучитьТекст();
	
	ТекстМакета = СтрЗаменить(ТекстМакета,"#ТекстСправкиНЗП",?(мЕстьНЗП, "inline", "none"));
	ТекстМакета = СтрЗаменить(ТекстМакета,"#ТекстСправкиБезНЗП",?(не мЕстьНЗП, "inline", "none"));
    Возврат ТекстМакета;
КонецФункции

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: // (-1) - не выбирать период, 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли