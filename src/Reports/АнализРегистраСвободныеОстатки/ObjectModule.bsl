#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета по метаданным регистра накопления
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СвободныеОстаткиОстаткиИОбороты.Склад,
		|	СвободныеОстаткиОстаткиИОбороты.Номенклатура,
		|	СвободныеОстаткиОстаткиИОбороты.ХарактеристикаНоменклатуры,
		|	СвободныеОстаткиОстаткиИОбороты.Качество,
		|	СвободныеОстаткиОстаткиИОбороты.СерияНоменклатуры,
		|	СвободныеОстаткиОстаткиИОбороты.КоличествоНачальныйОстаток,
		|	СвободныеОстаткиОстаткиИОбороты.КоличествоКонечныйОстаток,
		|	СвободныеОстаткиОстаткиИОбороты.КоличествоОборот,
		|	СвободныеОстаткиОстаткиИОбороты.КоличествоПриход,
		|	СвободныеОстаткиОстаткиИОбороты.КоличествоРасход
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.ОстаткиИОбороты(
		|		&ДатаНач,
		|		&ДатаКон, 
		|		, , 
		|		{(Склад), (Номенклатура), (ХарактеристикаНоменклатуры), (Качество), (СерияНоменклатуры)}
		|	) КАК СвободныеОстаткиОстаткиИОбороты";
		
	// Заполним регистр движениями с даты начала
	Для каждого ЭлРегистр Из Метаданные.Перечисления["ВидыРегистровОснованийРегистраСвободныеОстатки"].ЗначенияПеречисления Цикл
		ЕстьКачество = Метаданные.РегистрыНакопления[ЭлРегистр.Имя].Измерения.Найти("Качество") <> Неопределено;
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлРегистр.Склад,
		|	ЭлРегистр.Номенклатура,
		|	ЭлРегистр.ХарактеристикаНоменклатуры,
		|	" + ?(ЕстьКачество, "ЭлРегистр.Качество", "&Новый") + ",
		|	ЭлРегистр.СерияНоменклатуры,";
		Если ЭлРегистр.Имя = "ТоварыВРезервеНаСкладах"
			ИЛИ ЭлРегистр.Имя = "ТоварыКПередачеСоСкладов" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
				|	ЭлРегистр.КоличествоНачальныйОстаток,
				|	ЭлРегистр.КоличествоКонечныйОстаток,
				|	ЭлРегистр.КоличествоОборот,
				|	-ЭлРегистр.КоличествоРасход,
				|	-ЭлРегистр.КоличествоПриход";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				|	-ЭлРегистр.КоличествоНачальныйОстаток,
				|	-ЭлРегистр.КоличествоКонечныйОстаток,
				|	-ЭлРегистр.КоличествоОборот,
				|	-ЭлРегистр.КоличествоПриход,
				|	-ЭлРегистр.КоличествоРасход";
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	РегистрНакопления." + ЭлРегистр.Имя + ".ОстаткиИОбороты(
			|		&ДатаНач,
			|		&ДатаКон, 
			|		, , 
			|		{(Склад), (Номенклатура), (ХарактеристикаНоменклатуры), " + ?(ЕстьКачество, "(Качество)","") + " (СерияНоменклатуры)}
			|	)КАК ЭлРегистр";
		
	КонецЦикла;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Склад КАК Склад,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Качество КАК Качество,
		|	ВложенныйЗапрос.СерияНоменклатуры КАК СерияНоменклатуры,
		|	СУММА(ВложенныйЗапрос.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
		|	СУММА(ВложенныйЗапрос.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток,
		|	СУММА(ВложенныйЗапрос.КоличествоОборот) КАК КоличествоОборот,
		|	СУММА(ВложенныйЗапрос.КоличествоПриход) КАК КоличествоПриход,
		|	СУММА(ВложенныйЗапрос.КоличествоРасход) КАК КоличествоРасход
		|{
		|ВЫБРАТЬ
		|	КоличествоНачальныйОстаток,
		|	КоличествоКонечныйОстаток,
		|	КоличествоОборот,
		|	КоличествоПриход,
		|	КоличествоРасход
		|}
		|ИЗ (" + ТекстЗапроса + ") КАК ВложенныйЗапрос
		|
		
		|{ГДЕ
		|	Склад.*,
		|	Номенклатура.*,
		|	ХарактеристикаНоменклатуры.*,
		|	Качество.*,
		|	СерияНоменклатуры.*,
		|	КоличествоНачальныйОстаток,
		|	КоличествоКонечныйОстаток,
		|	КоличествоОборот,
		|	КоличествоПриход,
		|	КоличествоРасход
		|}
		
		|	СГРУППИРОВАТЬ ПО 
		|		Склад,
		|		Номенклатура,
		|		ХарактеристикаНоменклатуры,
		|		Качество,
		|		СерияНоменклатуры
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.КоличествоНачальныйОстаток) <> 0
		|	ИЛИ СУММА(ВложенныйЗапрос.КоличествоКонечныйОстаток) <> 0
		|	ИЛИ СУММА(ВложенныйЗапрос.КоличествоОборот) <> 0
		|	ИЛИ СУММА(ВложенныйЗапрос.КоличествоПриход) <> 0
		|	ИЛИ СУММА(ВложенныйЗапрос.КоличествоРасход) <> 0
		
		|{УПОРЯДОЧИТЬ ПО
		|	Склад.*,
		|	Номенклатура.*,
		|	ХарактеристикаНоменклатуры.*,
		|	Качество.*,
		|	СерияНоменклатуры.*,
		|	КоличествоНачальныйОстаток,
		|	КоличествоКонечныйОстаток,
		|	КоличествоОборот,
		|	КоличествоПриход,
		|	КоличествоРасход
		|}
		
		|{ИТОГИ ПО 
		|	Склад,
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	Качество,
		|	СерияНоменклатуры
		|}";
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СерияНоменклатуры", "Серия номенклатуры");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ХарактеристикаНоменклатуры", "Характеристика номенклатуры");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоНачальныйОстаток", "Начальный остаток", Истина, "ЧЦ=15; ЧДЦ=3", "Расхождение", "Расхождение (количество)");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоПриход", "Приход", Истина, "ЧЦ=15; ЧДЦ=3", "Расхождение", "Расхождение (количество)");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоРасход", "Расход", Истина, "ЧЦ=15; ЧДЦ=3", "Расхождение", "Расхождение (количество)");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоОборот", "Оборот", Истина, "ЧЦ=15; ЧДЦ=3", "Расхождение", "Расхождение (количество)");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоКонечныйОстаток", "Конечный остаток", Истина, "ЧЦ=15; ЧДЦ=3", "Расхождение", "Расхождение (количество)");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Склад");
	УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	ДатаНачалаИспользованияРегистраСвободныеОстатки = глЗначениеПеременной("ДатаНачалаИспользованияРегистраСвободныеОстатки");
	Если НЕ глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки") Тогда
		ТекстВопроса = "Регистр ""Свободные остатки"" не используется. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли УниверсальныйОтчет.ДатаНач < ДатаНачалаИспользованияРегистраСвободныеОстатки Тогда
		ТекстВопроса = "Начало периода отчета (" + Формат(УниверсальныйОтчет.ДатаНач, "ДФ=dd.MM.yyyy; ДП='...'") + ") меньше даты с которой заполнен регистр (" + Формат(ДатаНачалаИспользованияРегистраСвободныеОстатки, "ДФ=dd.MM.yyyy") + ").
		|Сформировать отчет с " + Формат(УниверсальныйОтчет.ДатаНач, "ДФ=dd.MM.yyyy; ДП='...'") + " по " + Формат(УниверсальныйОтчет.ДатаКон, "ДФ=dd.MM.yyyy; ДП='...'") + "?
		|
		|Кнопка ""Да""     - сформировать с " + Формат(УниверсальныйОтчет.ДатаНач, "ДФ=dd.MM.yyyy; ДП='...'") + " по " + Формат(УниверсальныйОтчет.ДатаКон, "ДФ=dd.MM.yyyy; ДП='...'") + "
		|Кнопка ""Нет""    - сформировать с " + Формат(ДатаНачалаИспользованияРегистраСвободныеОстатки, "ДФ=dd.MM.yyyy; ДП='...'") + " по " + Формат(УниверсальныйОтчет.ДатаКон, "ДФ=dd.MM.yyyy; ДП='...'") + "
		|Кнопка ""Отмена"" - отменить";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			УниверсальныйОтчет.ДатаНач = ДатаНачалаИспользованияРегистраСвободныеОстатки;
		КонецЕсли; 
	КонецЕсли;
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Новый", Справочники.Качество.Новый);
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	ТекстСправкиФормы = "";
	
	Если НЕ глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки") Тогда
		ТекстСправкиФормы = "Регистр ""Свободные остатки"" не используется";
	КонецЕсли; 
	
	Возврат ТекстСправкиФормы;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли
