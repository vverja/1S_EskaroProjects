Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем РежимРасшифровки Экспорт;
Перем СохранятьНастройкуОтчета Экспорт;

#Если Клиент Тогда

Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата"              , КонецПериода);
	СписокПараметров.Вставить("СчетУчета"         , Неопределено);
	СписокПараметров.Вставить("Номенклатура"      , Неопределено);
	СписокПараметров.Вставить("Склад"             , Неопределено);
	СписокПараметров.Вставить("Организация"       , Организация);
	СписокПараметров.Вставить("Контрагент"        , Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	СписокПараметров.Вставить("ЭтоНовыйДокумент"  , Ложь);
	
	Возврат СписокПараметров;
	
КонецФункции

Процедура ОбработкаИзмененияСоставаСубконто(ПолнаяОбработка = Истина) Экспорт
	
	МассивСубконто = Новый Массив;
	
	ИмяПоляПрефикс = "Субконто";
	
	ПараметрыОС      = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	ПараметрыНМА     = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	ПараметрыФизЛица = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	
	// Изменение представления и наложения ограничения типа значения
	Индекс = 1;
	Для Каждого ВидСубконто Из СписокВидовСубконто Цикл
		Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
			МассивСубконто.Добавить(ВидСубконто.Значение);
			Поле = СхемаКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Поля.Найти(ИмяПоляПрефикс + Индекс);
			Если Поле <> Неопределено Тогда
				Поле.ТипЗначения = ВидСубконто.Значение.ТипЗначения;
				Поле.Заголовок   = Строка(ВидСубконто.Значение);
			КонецЕсли;
			
			Если Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
				ПараметрыОС.ИндексСубконто    = Индекс;
				ПараметрыОС.ЗаголовокСубконто = Поле.Заголовок;
			ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
				ПараметрыНМА.ИндексСубконто    = Индекс;
				ПараметрыНМА.ЗаголовокСубконто = Поле.Заголовок;
			ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
				ПараметрыФизЛица.ИндексСубконто    = Индекс;
				ПараметрыФизЛица.ЗаголовокСубконто = Поле.Заголовок;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	СтандартныеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеОС"     , ПараметрыОС);
	СтандартныеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеНМА"    , ПараметрыНМА);
	СтандартныеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеФизЛица", ПараметрыФизЛица);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	
	Если ПолнаяОбработка Тогда
		
		// Управление показателями
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВС1.Ссылка.Количественный) КАК Количественный,
		|	МАКСИМУМ(ВС1.Ссылка.Валютный) КАК Валютный,
		|	МАКСИМУМ(ВС1.Ссылка.НалоговыйУчет) КАК НалоговыйУчет,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВС1.Ссылка) КАК КоличествоСчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВС1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВС2
		|		ПО ВС1.Ссылка = ВС2.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВС3
		|		ПО ВС1.Ссылка = ВС3.Ссылка
		|ГДЕ
		|	ВС1.ВидСубконто = &ВидСубконто1
		|	И ВС2.ВидСубконто = &ВидСубконто2
		|	И ВС3.ВидСубконто = &ВидСубконто3";
		Индекс = 3;
		Пока Индекс <> 0 Цикл
			Если Индекс > МассивСубконто.Количество() Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВС" + Индекс + ".ВидСубконто = &ВидСубконто" + Индекс, "ИСТИНА");	
			КонецЕсли;	
			Индекс = Индекс - 1;
		КонецЦикла;
		Для Индекс = 1 По МассивСубконто.Количество() Цикл
			Запрос.УстановитьПараметр("ВидСубконто" + Индекс, МассивСубконто[Индекс - 1]);
		КонецЦикла;
		ЕстьВалюта               = Ложь;
		ЕстьКоличество           = Ложь;
		ЕстьНалоговыйУчет        = Ложь;
		ЕстьСчета                = Ложь;	
		
		Если СписокВидовСубконто.Количество() = 0 Тогда
			ЕстьВалюта               = Истина;
			ЕстьКоличество           = Истина;
			ЕстьНалоговыйУчет        = Истина;
			ЕстьСчета                = Истина;
		Иначе
			ВыборкаСчета = Запрос.Выполнить().Выбрать();
			Пока ВыборкаСчета.Следующий() Цикл
				ЕстьВалюта               = ?(ВыборкаСчета.Валютный             = Истина, Истина, Ложь);
				ЕстьКоличество           = ?(ВыборкаСчета.Количественный       = Истина, Истина, Ложь);
				ЕстьНалоговыйУчет        = ?(ВыборкаСчета.НалоговыйУчет        = Истина, Истина, Ложь);
				ЕстьСчета                = ?(ВыборкаСчета.КоличествоСчетов     = 0, Ложь, Истина);  
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьНалоговыйУчет Тогда
			ДанныеОтчета.ПоказателиОтчета.БУ.Использование = Истина;
			ДанныеОтчета.ПоказателиОтчета.БУ.Значение      = Истина;
			ДанныеОтчета.ПоказателиОтчета.НУ.Использование = Истина;
			ДанныеОтчета.ПоказателиОтчета.НУ.Значение      = Ложь;
			ДанныеОтчета.ПоказателиОтчета.Контроль.Использование = Истина;
			ДанныеОтчета.ПоказателиОтчета.Контроль.Значение      = Ложь;
		Иначе
			ДанныеОтчета.ПоказателиОтчета.БУ.Использование = Истина;
			ДанныеОтчета.ПоказателиОтчета.БУ.Значение      = Истина;
			ДанныеОтчета.ПоказателиОтчета.НУ.Использование = Ложь;
			ДанныеОтчета.ПоказателиОтчета.НУ.Значение      = Ложь;
			ДанныеОтчета.ПоказателиОтчета.Контроль.Использование = Ложь;
			ДанныеОтчета.ПоказателиОтчета.Контроль.Значение      = Ложь;	
		КонецЕсли;
		
		Если ЕстьСчета Тогда
			ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Использование = Истина;
			ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Значение      = Ложь;
		Иначе
			ДанныеОтчета.ПоказателиОтчета.БУ.Использование = Ложь;
			ДанныеОтчета.ПоказателиОтчета.БУ.Значение      = Ложь;
			ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Использование = Ложь;
			ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Значение      = Ложь;
		КонецЕсли;
		
		Если ЕстьВалюта Тогда
			ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Использование = Истина;
			ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Значение      = Истина;			
		Иначе
			ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Использование = Ложь;
			ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Значение      = Ложь;		
		КонецЕсли;
		Если ЕстьКоличество Тогда
			ДанныеОтчета.ПоказателиОтчета.Количество.Использование = Истина;
			ДанныеОтчета.ПоказателиОтчета.Количество.Значение      = Истина;		
		Иначе
			ДанныеОтчета.ПоказателиОтчета.Количество.Использование = Ложь;
			ДанныеОтчета.ПоказателиОтчета.Количество.Значение      = Ложь;	
		КонецЕсли;
		
		КоличествоСубконто = МассивСубконто.Количество();
		
		
		// Добавление группировок с соответствии с выбранным счетом	
		ДанныеОтчета.Группировка.Очистить();
		
		Для Индекс = 1 По КоличествоСубконто Цикл
			НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
			Поле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПрефикс + Индекс));
			НоваяСтрока.Поле           = Поле.Поле;
			НоваяСтрока.Использование  = Истина;
			НоваяСтрока.Представление  = Поле.Заголовок;
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;	
		КонецЦикла;
		
		Если ЕстьНалоговыйУчет Тогда
			НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
			НоваяСтрока.Поле           = "НалоговоеНазначение";
			НоваяСтрока.Использование  = Истина;
			НоваяСтрока.Представление  = НСтр("ru='Налоговое назначение';uk='Податкове призначення'");
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		КонецЕсли;
			
		// Обработка дополнительных полей
		СтандартныеОтчеты.ЗаполнитьДополнительныеПоляПоУмолчанию(ЭтотОбъект);
		
		Если Не РежимРасшифровки Тогда
			// Добавление неактивных отборов по субконто в соответствии с выбранным счетом
			ОтборыДляУдаления = Новый Массив;
			Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
					Если Найти(ЭлементОтбора.ЛевоеЗначение, "Субконто") > 0 ИЛИ Строка(ЭлементОтбора.ЛевоеЗначение) = "Валюта" 
							ИЛИ (Найти(ЭлементОтбора.ЛевоеЗначение, "НалоговоеНазначение") = 1) Тогда
						ОтборыДляУдаления.Добавить(ЭлементОтбора);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ЭлементОтбора Из ОтборыДляУдаления Цикл
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЦикла;
			
			Для Индекс = 1 По МассивСубконто.Количество() Цикл
				Поле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПрефикс + Индекс));
				ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, ИмяПоляПрефикс + Индекс, МассивСубконто[Индекс - 1].ТипЗначения.ПривестиЗначение(Неопределено), , Ложь);	
			КонецЦикла;
			
			Если ЕстьНалоговыйУчет Тогда
				Поле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("НалоговоеНазначение"));
				ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "НалоговоеНазначение", Поле.Тип.ПривестиЗначение(Неопределено), , Ложь); 
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтандартныеОтчеты.ЗаполнитьДанныеОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	Если ВыводитьПолностью Тогда
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КомпоновщикНастроек.Восстановить();
		НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		Если РольДоступна("ГруппаА") Тогда
			ОбщегоНазначения.ОбработкаОтчетаПоГруппеА(НастройкаКомпоновкиДанных);
		КонецЕсли;
		СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Истина, НастройкаКомпоновкиДанных);
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтотОбъект, Результат);
	
	Если ВыводитьПолностью Тогда
		// Выполним дополнительную обработку Результата отчета
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		СтандартныеОтчеты.СохранитьНастройкуДляИстории(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;	
	
	МакетШапкиОтчета = СтандартныеОтчеты.ПолучитьМакетШапки(МакетКомпоновки);
	
	КоличествоПоказателей = СтандартныеОтчеты.КоличествоПоказателей(ЭтотОбъект);
	
	КоличествоГруппировок = 1;
	Для Каждого Группировка Из ДанныеОтчета.Группировка Цикл
		Если Группировка.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрокШапки = Макс(КоличествоГруппировок, 2);
	ДанныеОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки);
	
	МассивДляУдаления = Новый Массив;
	Для Индекс = КоличествоСтрокШапки По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 2 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = КоличествоКолонок - 6 По КоличествоКолонок - 1 Цикл
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоПоказателей > 1 Тогда
		Для ИндексСтроки = 1 По КоличествоСтрок - 1 Цикл
			СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
			
			КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
			Ячейка = СтрокаМакета.Ячейки[КоличествоКолонок - 7];
			ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЕсли;
	
	МакетПодвалаОтчета            = СтандартныеОтчеты.ПолучитьМакетПодвала(МакетКомпоновки);
	МакетГруппировкиОрганизация   = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация");
	МакетГруппировкиСчет          = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет");
	МакетГруппировкиВалюта        = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта");
	
	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
		Если Макет = МакетШапкиОтчета Тогда
		Иначе			
			Индекс = -1;
			МассивПоказателей = Новый Массив;
			МассивПоказателей.Добавить("БУ");
			МассивПоказателей.Добавить("НУ");
			
			Для Каждого ЭлементМассива Из МассивПоказателей Цикл
				Если ПоказателиОтчета[ЭлементМассива].Значение Тогда
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
			Если ПоказателиОтчета.Контроль.Значение Тогда 
				Индекс = Индекс + 1;					
			КонецЕсли;
			
			Если ПоказателиОтчета.ВалютнаяСумма.Значение И КоличествоПоказателей = 1 Тогда 
			
			ИначеЕсли ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
				Индекс = Индекс + 1;				
				Если МакетГруппировкиВалюта.Найти(Макет) <> Неопределено ИЛИ Макет = МакетПодвалаОтчета Тогда
			
				Иначе
					Макет.Макет.Удалить(Макет.Макет[Индекс]);
					Индекс = Индекс - 1;
				КонецЕсли;
			КонецЕсли;
			
			Если ПоказателиОтчета.Количество.Значение Тогда
				Индекс = Индекс + 1;
				Если МакетГруппировкиВалюта.Найти(Макет) <> Неопределено Тогда
					Макет.Макет.Удалить(Макет.Макет[Индекс]);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт

	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	ИспользоватьКлассыСчетовВКачествеГрупп = БухгалтерскийУчет.ПолучитьИспользоватьКлассыСчетовВКачествеГрупп();
	КоличествоУровнейСчет = ?(ИспользоватьКлассыСчетовВКачествеГрупп, 2, 1);
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	СтандартныеОтчеты.ДобавитьДиаграммуВСтандартныеОтчеты(ЭтотОбъект);
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Периодичность);
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(КонецПериода));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДата()));
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");

	МассивПоказателей.Добавить("Контроль");
	МассивПоказателей.Добавить("ВалютнаяСумма");
	МассивПоказателей.Добавить("Количество");

	МассивВидовСубконто = Новый Массив;
	Для Каждого ЭлементСписка Из СписокВидовСубконто Цикл
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда 
			МассивВидовСубконто.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокВидовСубконто", МассивВидовСубконто);
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	КоличествоПоказателей = СтандартныеОтчеты.КоличествоПоказателей(ЭтотОбъект);
	
	Если КоличествоПоказателей > 1 Тогда
		ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = НСтр("ru='Показатели';uk='Показники'");
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ЭлементМассива);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;

	
	ГруппаСальдоНаНачало = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачало.Заголовок     = НСтр("ru='Сальдо на начало периода';uk='Сальдо на початок періоду'");
	ГруппаСальдоНаНачало.Использование = Истина;
	ГруппаСальдоНаНачалоДт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоДт.Заголовок     = "Дебет";
	ГруппаСальдоНаНачалоДт.Использование = Истина;
	ГруппаСальдоНаНачалоДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаНачалоКт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоКт.Заголовок     = "Кредит";
	ГруппаСальдоНаНачалоКт.Использование = Истина;
	ГруппаСальдоНаНачалоКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = НСтр("ru='Обороты за период';uk='Обороти за період'");
	ГруппаОбороты.Использование = Истина;
	ГруппаОборотыДт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыДт.Заголовок     = "Дебет";
	ГруппаОборотыДт.Использование = Истина;
	ГруппаОборотыДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаОборотыКт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыКт.Заголовок     = "Кредит";
	ГруппаОборотыКт.Использование = Истина;
	ГруппаОборотыКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаСальдоНаКонец = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонец.Заголовок     = НСтр("ru='Сальдо на конец периода';uk='Сальдо на кінець періоду'");
	ГруппаСальдоНаКонец.Использование = Истина;
	ГруппаСальдоНаКонецДт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецДт.Заголовок     = "Дебет";
	ГруппаСальдоНаКонецДт.Использование = Истина;
	ГруппаСальдоНаКонецДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаКонецКт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецКт.Заголовок     = "Кредит";
	ГруппаСальдоНаКонецКт.Использование = Истина;
	ГруппаСальдоНаКонецКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			Если ЭлементМассива = "Контроль" Тогда
				ВидОстатка = "";
			Иначе
				ВидОстатка = ?(ПоказателиОтчета.РазвернутоеСальдо.Значение, "Развернутый", "");
			КонецЕсли;
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатка + "ОстатокДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатка + "ОстатокКт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотКт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ЭлементМассива + "Конечный"  + ВидОстатка + "ОстатокДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ЭлементМассива + "Конечный"  + ВидОстатка + "ОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные данные
	СтандартныеОтчеты.ДобавитьДополнительныеПоля(ЭтотОбъект);
	
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Первый = Истина;
	Для Каждого ПолеВыбраннойГруппировки Из ДанныеОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			Первый = Ложь;
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		КонецЕсли;
	КонецЦикла;
	Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));  
	
	Если Не ПоСубсчетам Тогда
		ЗначениеОтбора = ТиповыеОтчеты.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", КоличествоУровнейСчет, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;
	
	// Период
	СтандартныеОтчеты.ДобавитьГруппировкуПоПериоду(ЭтотОбъект, Структура);
	
	Если ДанныеОтчета.ПоказателиОтчета.ВалютнаяСумма.Значение Тогда 
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
	КонецЕсли;
	
	СтандартныеОтчеты.ДобавитьОтборПоОрганизации(ЭтотОбъект);
	СтандартныеОтчеты.ДобавитьОтборДляПоказателяКонтроль(ЭтотОбъект);
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	 СтандартныеОтчеты.ВыводЗаголовкаОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводПодписейОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ТекстСубконто = "";
	Для Каждого ВидСубконто Из СписокВидовСубконто Цикл
		ТекстСубконто = ТекстСубконто + ВидСубконто + ", ";	
	КонецЦикла;
	Если Не ПустаяСтрока(ТекстСубконто) Тогда
		ТекстСубконто = Лев(ТекстСубконто, СтрДлина(ТекстСубконто) - 2);
	КонецЕсли;
	
	ЗаголовокОтчета = НСтр("ru='Анализ субконто ';uk='Аналіз субконто '") + ТекстСубконто + СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = СтандартныеОтчеты.ПолучитьСтруктуруПоказателейОтчета(,,, Истина, Истина, Истина);
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);

КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);

	СтандартныеОтчеты.ОбработкаРезультатаОтчетаСДиаграммой(ЭтотОбъект, Результат);
	
	СтандартныеОтчеты.ОбработкаИзмененияНастроекДиаграммы(ЭтотОбъект, Результат, ДанныеОтчета.ВысотаШапки);
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	ОбработкаИзмененияСоставаСубконто(РежимРасшифровки);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	Если СохранятьНастройкуОтчета Тогда	
		СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	Если РежимРасшифровки Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
	Иначе
		ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

РежимРасшифровки = Ложь;

#КонецЕсли
