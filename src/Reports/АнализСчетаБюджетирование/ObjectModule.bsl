#Если Клиент Тогда

Перем НП Экспорт;

Перем ИмяРегистраБухгалтерии Экспорт;
Перем ИмяПланаСчетов Экспорт;

Перем МассивШиринКолонок;
Перем ШиринаТаблицы;
Перем СоотвСубконто; // Соответствие имен полей и видов субконто

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

Функция ЗаголовокОтчета() Экспорт
	Возврат  "Анализ счета (бюдж.) " + ?(ЗначениеЗаполнено(Счет), Счет, " не выбран счет");
КонецФункции

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период: без ограничения.";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
		Иначе
			ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
		КонецЕсли;

	КонецЕсли;
	
	Макет = ПолучитьМакет("Макет");
	
	Если НЕ ВВалютеСценария Тогда
		Макет.УдалитьОбласть(Макет.Область("ВвалютеСценария"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ ПоВалютам Тогда
		Макет.УдалитьОбласть(Макет.Область("ВВалюте"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ ПоСубсчетамИСубконто И ПостроительОтчета.ИзмеренияСтроки.Количество()=0 И НЕ ЗначениеЗаполнено(Период) И НЕ ПоВалютам Тогда
		Макет.УдалитьОбласть(Макет.Область("КорСчет"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок=Макет.Область("Заголовок");
	
	// После удаления областей нужно установить свойства ПоВыделеннымКолонкам
	Для Сч = 1 По ЗаголовокОтчета.ВысотаТаблицы-1 Цикл
		
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, 2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, ОбластьЗаголовок.Право).ПоВыделеннымКолонкам = Истина;
		
	КонецЦикла;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеСценария = Строка(Сценарий);
	
	ЗаголовокОтчета.Параметры.НазваниеСценария = НазваниеСценария;
	
	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	
	Если ПоВалютам Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
	
	КонецЕсли; 

	Если ПоКоличеству Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", количество";
	
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетамИСубконто Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", субсчетам"
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", субконто: " + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	КонецЕсли;
	
	Если ПоКорСубсчетамИСубконто Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", кор.субсчетам и субконто"
	КонецЕсли;

	ТекстПроИтоги = Сред(ТекстПроИтоги, 2);

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

	Возврат Новый ТабличныйДокумент;

КонецФункции // СформироватьЗаголовок()


//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

// Вывод субконто определенного номера
Процедура ВыводСубконто(Выборка, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки, ТолькоОборотыПредУровень = Ложь)
	
	Если Инд<= СтруктураПараметров.МассивСубконто.Количество()-1 Тогда
		
		Измерение = СтруктураПараметров.МассивСубконто[Инд];
		
		ВыборкаПоСубконто = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
		ВидСубконто = СоотвСубконто[Лев(Измерение, Найти(Измерение+".", ".")-1)];
		Если ВидСубконто<>Неопределено Тогда
			ТолькоОбороты = ВидСубконто.ТолькоОбороты;
		Иначе
			ТолькоОбороты = Ложь;
		КонецЕсли;
		
		ТолькоОбороты = ТолькоОборотыПредУровень ИЛИ ТолькоОбороты;
		
		Пока ВыборкаПоСубконто.Следующий() Цикл
			
			// Вывод начального сальдо
			СуммаНачДт = ВЧисло(ВыборкаПоСубконто.СуммаНачДт);
			СуммаНачКт = ВЧисло(ВыборкаПоСубконто.СуммаНачКт);
			Если ВВалютеСценария Тогда
				СуммаСценарияНачДт = ВЧисло(ВыборкаПоСубконто.СуммаСценарияНачДт);
				СуммаСценарияНачКт = ВЧисло(ВыборкаПоСубконто.СуммаСценарияНачКт);
			КонецЕсли;
			
			Если ПоКоличеству Тогда
				КоличествоНачДт = ВЧисло(ВыборкаПоСубконто.КоличествоНачДт);
				КоличествоНачКт = ВЧисло(ВыборкаПоСубконто.КоличествоНачКт);
			КонецЕсли;
			
			// Вывод нач сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСубконто;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.СубконтоПредставление = ВыборкаПоСубконто[Измерение+"Представление"];
			ВыводимаяОбласть.Параметры.СуммаНачДт = СуммаНачДт;
			ВыводимаяОбласть.Параметры.СуммаНачКт = СуммаНачКт;
			Если ВВалютеСценария Тогда
				ВыводимаяОбласть.Параметры.СуммаСценарияНачДт = СуммаСценарияНачДт;
				ВыводимаяОбласть.Параметры.СуммаСценарияНачКт = СуммаСценарияНачКт;
			КонецЕсли;
			
			Если ПоКоличеству Тогда
				ВыводимаяОбласть.Параметры.КоличествоНачДт = КоличествоНачДт;
				ВыводимаяОбласть.Параметры.КоличествоНачКт = КоличествоНачКт;
			КонецЕсли;
			
			Уровень = ВыборкаПоСубконто.Уровень();
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоСубконто, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			// Вывод начального сальдо: конец
			
			
			// Вывод вложенных итогов
			ВыводСубконто(ВыборкаПоСубконто, Инд+1, СтруктураПараметров, СделатьКопиюСоотв(ОтборДляРасшифровки), ТолькоОбороты);
			// Вывод вложенных итогов: конец
			
			
			// Вывод оборота и кон сальдо
			СуммаОборотДт = ВЧисло(ВыборкаПоСубконто.СуммаОборотДт);
			СуммаОборотКт = ВЧисло(ВыборкаПоСубконто.СуммаОборотКт);
			Если ВВалютеСценария Тогда
				СуммаСценарияОборотДт = ВЧисло(ВыборкаПоСубконто.СуммаСценарияОборотДт);
				СуммаСценарияОборотКт = ВЧисло(ВыборкаПоСубконто.СуммаСценарияОборотКт);
			КонецЕсли;
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСубконто;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.СуммаОборотДт = СуммаОборотДт;
			ВыводимаяОбласть.Параметры.СуммаОборотКт = СуммаОборотКт;
			Если ВВалютеСценария Тогда
				ВыводимаяОбласть.Параметры.СуммаСценарияОборотДт = СуммаСценарияОборотДт;
				ВыводимаяОбласть.Параметры.СуммаСценарияОборотКт = СуммаСценарияОборотКт;
			КонецЕсли;
			
			Если ПоКоличеству Тогда
				КоличествоОборотДт = ВЧисло(ВыборкаПоСубконто.КоличествоОборотДт);
				КоличествоОборотКт = ВЧисло(ВыборкаПоСубконто.КоличествоОборотКт);
				
				ВыводимаяОбласть.Параметры.КоличествоОборотДт = КоличествоОборотДт;
				ВыводимаяОбласть.Параметры.КоличествоОборотКт = КоличествоОборотКт;
			КонецЕсли;
			
			// Расчет конечного сальдо
			
			СуммаКонДт =0;
			СуммаКонКт =0;
			СуммаСценарияКонДт =0;
			СуммаСценарияКонКт =0;
			КоличествоКонДт = 0;
			КоличествоКонКт = 0;
			
			Если Не ТолькоОбороты Тогда // по оборотным субконто кон. сальдо не считаем (начальное - из запроса - всегда 0)
				
				Если Счет.Вид = ВидСчета.Активный Тогда 
					СуммаКонДт = СуммаНачДт + СуммаОборотДт - СуммаОборотКт;
					СуммаКонКт = 0;
					Если ВВалютеСценария Тогда
						СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт - СуммаСценарияОборотКт;
						СуммаСценарияКонКт = 0;
					КонецЕсли;
					
					Если ПоКоличеству Тогда
						КоличествоКонДт = КоличествоНачДт + КоличествоОборотДт - КоличествоОборотКт;
						КоличествоКонКт = 0;
					КонецЕсли;
					
				ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
					СуммаКонДт = 0;
					СуммаКонКт = СуммаНачКт + СуммаОборотКт - СуммаОборотДт;
					Если ВВалютеСценария Тогда
						СуммаСценарияКонДт = 0;
						СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт - СуммаСценарияОборотДт;
					КонецЕсли;
					
					Если ПоКоличеству Тогда
						КоличествоКонДт = 0;
						КоличествоКонКт = КоличествоНачКт + КоличествоОборотКт - КоличествоОборотДт;
					КонецЕсли;
					
				Иначе
					СуммаКонДт = СуммаНачДт + СуммаОборотДт;
					СуммаКонКт = СуммаНачКт + СуммаОборотКт;
					Если ВВалютеСценария Тогда
						СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт;
						СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт;
					КонецЕсли;
					
					Если СуммаКонДт>СуммаКонКт Тогда
						СуммаКонДт=СуммаКонДт-СуммаКонКт;
						СуммаКонКт=0;
						Если ВВалютеСценария Тогда
							СуммаСценарияКонДт=СуммаСценарияКонДт-СуммаСценарияКонКт;
							СуммаСценарияКонКт=0;
						КонецЕсли;
					Иначе
						СуммаКонКт=СуммаКонКт-СуммаКонДт;
						СуммаКонДт=0;
						Если ВВалютеСценария Тогда
							СуммаСценарияКонКт=СуммаСценарияКонКт-СуммаСценарияКонДт;
							СуммаСценарияКонДт=0;
						КонецЕсли;
					КонецЕсли;
					
					Если ПоКоличеству Тогда
						КоличествоКонДт = КоличествоНачДт + КоличествоОборотДт;
						КоличествоКонКт = КоличествоНачКт + КоличествоОборотКт;
						
						Если КоличествоКонДт>КоличествоКонКт Тогда
							КоличествоКонДт=КоличествоКонДт-КоличествоКонКт;
							КоличествоКонКт=0;
						Иначе
							КоличествоКонКт=КоличествоКонКт-КоличествоКонДт;
							КоличествоКонДт=0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ВыводимаяОбласть.Параметры.СуммаКонДт = СуммаКонДт;
			ВыводимаяОбласть.Параметры.СуммаКонКт = СуммаКонКт;
			Если ВВалютеСценария Тогда
				ВыводимаяОбласть.Параметры.СуммаСценарияКонДт = СуммаСценарияКонДт;
				ВыводимаяОбласть.Параметры.СуммаСценарияКонКт = СуммаСценарияКонКт;
			КонецЕсли;
			
			Если ПоКоличеству Тогда
				ВыводимаяОбласть.Параметры.КоличествоКонДт = КоличествоКонДт;
				ВыводимаяОбласть.Параметры.КоличествоКонКт = КоличествоКонКт;
			КонецЕсли;
			
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоСубконто, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			// Вывод оборота и кон сальдо: конец
			
		КонецЦикла;
		
	Иначе
		
		ВывестиПериоды(Выборка, СтруктураПараметров, СделатьКопиюСоотв(ОтборДляРасшифровки), ТолькоОборотыПредУровень);
		
	КонецЕсли;
	
КонецПроцедуры

// Вывод периодов
Процедура ВывестиПериоды(Выборка, СтруктураПараметров, ОтборДляРасшифровки, ТолькоОборотыПредУровень = Ложь)
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		ВыборкаПоПериодам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
		
		СуммаНачДт = 0;
		СуммаНачКт = 0;
		КоличествоНачДт = 0;
		КоличествоНачКт = 0;
		
		ТолькоОбороты = ТолькоОборотыПредУровень;
		
		// Количество выводится только если период идет после субконто
		ЕстьСубконто = (СтруктураПараметров.МассивСубконто.Количество()>0);
		
		ПервыйПериод = Истина;
		
		// Идем по остаткам, т.к. там есть начпериоды без оборотов
		Пока ВыборкаПоПериодам.Следующий() Цикл
			
			// Начальный остаток
			Если ПервыйПериод Тогда
				ПервыйПериод = Ложь;
				СуммаНачДт = ВЧисло(ВыборкаПоПериодам.СуммаНачДт);
				СуммаНачКт = ВЧисло(ВыборкаПоПериодам.СуммаНачКт);
				Если ВВалютеСценария Тогда
					СуммаСценарияНачДт = ВЧисло(ВыборкаПоПериодам.СуммаСценарияНачДт);
					СуммаСценарияНачКт = ВЧисло(ВыборкаПоПериодам.СуммаСценарияНачКт);
				КонецЕсли;
				
				Если ПоКоличеству И ЕстьСубконто Тогда
					КоличествоНачДт = ВЧисло(ВыборкаПоПериодам.КоличествоНачДт);
					КоличествоНачКт = ВЧисло(ВыборкаПоПериодам.КоличествоНачКт);
				КонецЕсли;
				
				// Если валютный учет, получим сальдо по валютам
				Если ПоВалютам Тогда
					ПолучитьСальдоПоВалютам(ВыборкаПоПериодам, СтруктураПараметров);
				КонецЕсли;
				
				Если ВыборкаПоПериодам.Период = NULL Тогда // это начальный остаток из таблицы остатков
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Вывод начального сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПериод;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаПоПериодам);
			
			ВыводимаяОбласть.Параметры.СуммаНачДт = СуммаНачДт;
			ВыводимаяОбласть.Параметры.СуммаНачКт = СуммаНачКт;
			Если ВВалютеСценария Тогда
				ВыводимаяОбласть.Параметры.СуммаСценарияНачДт = СуммаСценарияНачДт;
				ВыводимаяОбласть.Параметры.СуммаСценарияНачКт = СуммаСценарияНачКт;
			КонецЕсли;
			
			Если ПоКоличеству И ЕстьСубконто Тогда
				ВыводимаяОбласть.Параметры.КоличествоНачДт = КоличествоНачДт;
				ВыводимаяОбласть.Параметры.КоличествоНачКт = КоличествоНачКт;
			КонецЕсли;
			
			Уровень = ВыборкаПоПериодам.Уровень();
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоПериодам, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
			// Вывод вложенных итогов
			Если ПоВалютам Тогда
				
				ВывестиВалюты(ВыборкаПоПериодам, СтруктураПараметров, СделатьКопиюСоотв(ОтборДляРасшифровки), ТолькоОбороты);
				
			Иначе
				ВывестиКорСчета(ВыборкаПоПериодам, СтруктураПараметров, СделатьКопиюСоотв(ОтборДляРасшифровки));
			КонецЕсли;
			// Вывод вложенных итогов: конец

			
			// Вывод оборота и кон сальдо
			СуммаОборотДт = ВЧисло(ВыборкаПоПериодам.СуммаОборотДт);
			СуммаОборотКт = ВЧисло(ВыборкаПоПериодам.СуммаОборотКт);
			Если ВВалютеСценария Тогда
				СуммаСценарияОборотДт = ВЧисло(ВыборкаПоПериодам.СуммаСценарияОборотДт);
				СуммаСценарияОборотКт = ВЧисло(ВыборкаПоПериодам.СуммаСценарияОборотКт);
			КонецЕсли;
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогПериод;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.СуммаОборотДт = СуммаОборотДт;
			ВыводимаяОбласть.Параметры.СуммаОборотКт = СуммаОборотКт;
			
			Если ПоКоличеству И ЕстьСубконто Тогда
				КоличествоОборотДт = ВЧисло(ВыборкаПоПериодам.КоличествоОборотДт);
				КоличествоОборотКт = ВЧисло(ВыборкаПоПериодам.КоличествоОборотКт);
				
				ВыводимаяОбласть.Параметры.КоличествоОборотДт = КоличествоОборотДт;
				ВыводимаяОбласть.Параметры.КоличествоОборотКт = КоличествоОборотКт;
			КонецЕсли;
			
			// Расчет конечного сальдо
			
			СуммаКонДт =0;
			СуммаКонКт =0;
			КоличествоКонДт = 0;
			КоличествоКонКт = 0;
			
			Если Не ТолькоОбороты Тогда // по оборотным субконто кон. сальдо не считаем (начальное - из запроса - всегда 0)
				
				Если Счет.Вид = ВидСчета.Активный Тогда 
					СуммаКонДт = СуммаНачДт + СуммаОборотДт - СуммаОборотКт;
					СуммаКонКт = 0;
					Если ВВалютеСценария Тогда
						СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт - СуммаСценарияОборотКт;
						СуммаСценарияКонКт = 0;
					КонецЕсли;
					
					Если ПоКоличеству И ЕстьСубконто Тогда
						КоличествоКонДт = КоличествоНачДт + КоличествоОборотДт - КоличествоОборотКт;
						КоличествоКонКт = 0;
					КонецЕсли;
					
				ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
					СуммаКонДт = 0;
					СуммаКонКт = СуммаНачКт + СуммаОборотКт - СуммаОборотДт;
					Если ВВалютеСценария Тогда
						СуммаСценарияКонДт = 0;
						СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт - СуммаСценарияОборотДт;
					КонецЕсли;
					
					Если ПоКоличеству И ЕстьСубконто Тогда
						КоличествоКонДт = 0;
						КоличествоКонКт = КоличествоНачКт + КоличествоОборотКт - КоличествоОборотДт;
					КонецЕсли;
					
				Иначе
					СуммаКонДт = СуммаНачДт + СуммаОборотДт;
					СуммаКонКт = СуммаНачКт + СуммаОборотКт;
					Если ВВалютеСценария Тогда
						СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт;
						СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт;
					КонецЕсли;
					
					Если СуммаКонДт>СуммаКонКт Тогда
						СуммаКонДт=СуммаКонДт-СуммаКонКт;
						СуммаКонКт=0;
						Если ВВалютеСценария Тогда
							СуммаСценарияКонДт=СуммаСценарияКонДт-СуммаСценарияКонКт;
							СуммаСценарияКонКт=0;
						КонецЕсли;
					Иначе
						СуммаКонКт=СуммаКонКт-СуммаКонДт;
						СуммаКонДт=0;
						Если ВВалютеСценария Тогда
							СуммаСценарияКонКт=СуммаСценарияКонКт-СуммаСценарияКонДт;
							СуммаСценарияКонДт=0;
						КонецЕсли;
					КонецЕсли;
					
					Если ПоКоличеству И ЕстьСубконто Тогда
						КоличествоКонДт = КоличествоНачДт + КоличествоОборотДт;
						КоличествоКонКт = КоличествоНачКт + КоличествоОборотКт;
						
						Если КоличествоКонДт>КоличествоКонКт Тогда
							КоличествоКонДт=КоличествоКонДт-КоличествоКонКт;
							КоличествоКонКт=0;
						Иначе
							КоличествоКонКт=КоличествоКонКт-КоличествоКонДт;
							КоличествоКонДт=0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ВыводимаяОбласть.Параметры.СуммаКонДт = СуммаКонДт;
			ВыводимаяОбласть.Параметры.СуммаКонКт = СуммаКонКт;
			Если ВВалютеСценария Тогда
				ВыводимаяОбласть.Параметры.СуммаСценарияКонДт = СуммаСценарияКонДт;
				ВыводимаяОбласть.Параметры.СуммаСценарияКонКт = СуммаСценарияКонКт;
			КонецЕсли;
			
			Если ПоКоличеству И ЕстьСубконто Тогда
				ВыводимаяОбласть.Параметры.КоличествоКонДт = КоличествоКонДт;
				ВыводимаяОбласть.Параметры.КоличествоКонКт = КоличествоКонКт;
			КонецЕсли;
			
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоПериодам, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			// Вывод оборота и кон сальдо: конец
			
			// Нач.сальдо следующего периода равен кон.сальдо предыдущего
			СуммаНачДт = СуммаКонДт;
			СуммаНачКт = СуммаКонКт;
			Если ВВалютеСценария Тогда
				СуммаСценарияНачДт = СуммаСценарияКонДт;
				СуммаСценарияНачКт = СуммаСценарияКонКт;
			КонецЕсли;
			
			Если ПоКоличеству И ЕстьСубконто Тогда
				КоличествоНачДт = КоличествоКонДт;
				КоличествоНачКт = КоличествоКонКт;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Если ПоВалютам Тогда
			
			ВывестиВалюты(Выборка, СтруктураПараметров, Новый Соответствие, ТолькоОборотыПредУровень);
			
		Иначе
			
			ВывестиКорСчета(Выборка, СтруктураПараметров, СделатьКопиюСоотв(ОтборДляРасшифровки));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Вывод кор счетов
Процедура ВывестиКорСчета(ВыборкаОбороты, СтруктураПараметров, ОтборДляРасшифровки)

	// Кор счета выводятся всегда
	ВыборкаОборотыПоКорСчетам = ВыборкаОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
	
	ВерхнийУровень = 1000;
	
	Пока ВыборкаОборотыПоКорСчетам.Следующий() Цикл
		
		// Это итог по строке остатка
		Если ВыборкаОборотыПоКорСчетам.КорСчет = NULL И НЕ ЗначениеЗаполнено(ВыборкаОборотыПоКорСчетам.СуммаОборотДт) И НЕ ЗначениеЗаполнено(ВыборкаОборотыПоКорСчетам.СуммаОборотКт) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПоКорСубсчетамИСубконто Тогда
			
			// Выводим только верхний уровень
			Если ВерхнийУровень < ВыборкаОборотыПоКорСчетам.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = ВыборкаОборотыПоКорСчетам.Уровень();
			КонецЕсли;
			
		КонецЕсли;
		
		// Вывод оборота или кон сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаКорСчет;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОборотыПоКорСчетам);
		
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаОборотыПоКорСчетам, ОтборДляРасшифровки);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, ВыборкаОборотыПоКорСчетам.Уровень());
		
		Если ПоКорСубсчетамИСубконто Тогда
			
			ПравилоКорСчета = ПравилаВыводаИтогов.Найти(ВыборкаОборотыПоКорСчетам.КорСчет, "Счет");
			
			ВывестиКорСубконто(ВыборкаОборотыПоКорСчетам, ПравилоКорСчета, СтруктураПараметров, ОтборДляРасшифровки);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Вывод кор субконто: общая процедура
Процедура ВывестиКорСубконто(ВыборкаОбороты, ПравилоКорСчета, СтруктураПараметров, ОтборДляРасшифровки)

	Если ПравилоКорСчета<>Неопределено Тогда
		
		Если ПравилоКорСчета.РазворотПоСубконто.Количество()>0 Тогда
			
			ВыводКорСубконто(ВыборкаОбороты, ПравилоКорСчета, 0, СтруктураПараметров, СделатьКопиюСоотв(ОтборДляРасшифровки));
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Вывод кор субконто определенного номера
Процедура ВыводКорСубконто(ВыборкаОбороты, ПравилоКорСчета, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки)

	Если Инд<ПравилоКорСчета.РазворотПоСубконто.Количество() Тогда
		
		ВыборкаОборотыПоКорСубконто = ВыборкаОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Кор"+ПравилоКорСчета.РазворотПоСубконто[Инд].Имя);
		
		Пока ВыборкаОборотыПоКорСубконто.Следующий() Цикл
			
			// Вывод оборота
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаКорСубконто;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОборотыПоКорСубконто);
			
			ВыводимаяОбласть.Параметры.КорСубконтоПредставление = ВыборкаОборотыПоКорСубконто["Кор"+ПравилоКорСчета.РазворотПоСубконто[Инд].Имя];
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаОборотыПоКорСубконто, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, ВыборкаОборотыПоКорСубконто.Уровень());
			
			ВыводКорСубконто(ВыборкаОборотыПоКорСубконто, ПравилоКорСчета, Инд+1, СтруктураПараметров, ОтборДляРасшифровки);
			
		КонецЦикла;
		
	КонецЕсли;
	

КонецПроцедуры

// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено)

	СписокРасшифровкиДт = Неопределено;
	СписокРасшифровкиКт = Неопределено;
	
	ПараметрыРасшифровки = Новый Соответствие;
	
	//ПараметрыРасшифровки.Вставить("ИмяОбъекта", "РегистрыБухгалтерии."+ИмяРегистраБухгалтерии);

	//ПараметрыРасшифровки.Вставить("Счет", Счет);
	//ПараметрыРасшифровки.Вставить("СпособРасшифровки", "Журнал");
	ПараметрыРасшифровки.Вставить("ИмяОбъекта", "КарточкаСчета"+ИмяРегистраБухгалтерии);
	ПараметрыРасшифровки.Вставить("Счет", ?(Выборка.Счет=NULL, Счет, Выборка.Счет));
	ПараметрыРасшифровки.Вставить("СпособРасшифровки", "Отчет");
	
	ПараметрыКарточкиСчета = Новый Структура;
	
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "КарточкаСчета"+ИмяРегистраБухгалтерии);
	ПараметрыКарточкиСчета.Вставить("Счет", ?(Выборка.Счет=NULL, Счет, Выборка.Счет));
	ПараметрыКарточкиСчета.Вставить("СпособРасшифровки", "Отчет");

	Если Лев(Выборка.Группировка(), 8) = "Субконто" Тогда

		Если ОтборСубконто <> Неопределено Тогда
			
			Измерение = ПостроительОтчета.ИзмеренияСтроки.Найти(Выборка.Группировка());
			
			ОтборСубконто.Вставить(Измерение.ПутьКДанным, Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = СделатьКопиюСоотв(ОтборСубконто);
			
			ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + Выборка.Счет);
		
	ИначеЕсли Выборка.Группировка() = "Счет" Тогда

		СписокРасшифровки = Новый СписокЗначений;
		
		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + Выборка.Счет);
		
	ИначеЕсли Выборка.Группировка() = "КорСчет" Тогда

		СписокРасшифровки = Новый СписокЗначений;
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = СделатьКопиюСоотв(ОтборСубконто);
			
			//ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;
		
		ПараметрыРасшифровкиДт = СделатьКопиюСоотв(ПараметрыРасшифровки);
		ПараметрыРасшифровкиДт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоДт"), Элемент.Значение);
				
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоКт"), Элемент.Значение);
				
			Иначе
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиДт.Вставить("СчетДт", ?(Выборка.Счет=NULL, Счет, Выборка.Счет));
		ПараметрыРасшифровкиДт.Вставить("СчетКт", Выборка.КорСчет);
		
		СписокРасшифровкиДт = Новый СписокЗначений;
		СписокРасшифровкиДт.Добавить(ПараметрыРасшифровкиДт, "Отчет по проводкам " + Выборка.Счет);
		ПараметрыРасшифровкиКт = СделатьКопиюСоотв(ПараметрыРасшифровки);
		ПараметрыРасшифровкиКт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоКт"), Элемент.Значение);
				
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоДт"), Элемент.Значение);
				
			Иначе
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиКт.Вставить("СчетДт", Выборка.КорСчет);
		ПараметрыРасшифровкиКт.Вставить("СчетКт", ?(Выборка.Счет=NULL, Счет, Выборка.Счет));
		
		СписокРасшифровкиКт = Новый СписокЗначений;
		СписокРасшифровкиКт.Добавить(ПараметрыРасшифровкиКт, "Отчет по проводкам " + Выборка.Счет);
		
		// для счета в целом
		ПараметрыРасшифровки.Вставить("Отбор", Новый Соответствие);
		Для каждого Элемент Из ОтборРасшифровка Цикл
			ПараметрыРасшифровки["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Отчет по проводкам " + Выборка.Счет);
		
	ИначеЕсли Лев(Выборка.Группировка(), 11) = "КорСубконто" Тогда

		СписокРасшифровки = Новый СписокЗначений;
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = СделатьКопиюСоотв(ОтборСубконто);
			
		КонецЕсли;
		
		ПараметрыРасшифровкиДт = СделатьКопиюСоотв(ПараметрыРасшифровки);
		ПараметрыРасшифровкиДт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоДт"), Элемент.Значение);
				
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоКт"), Элемент.Значение);
				
			Иначе
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиДт.Вставить("СчетДт", ?(Выборка.Счет=NULL, Счет, Выборка.Счет));
		ПараметрыРасшифровкиДт.Вставить("СчетКт", Выборка.КорСчет);
		
		СписокРасшифровкиДт = Новый СписокЗначений;
		СписокРасшифровкиДт.Добавить(ПараметрыРасшифровкиДт, "Отчет по проводкам " + Выборка.Счет);
		ПараметрыРасшифровкиКт = СделатьКопиюСоотв(ПараметрыРасшифровки);
		ПараметрыРасшифровкиКт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоКт"), Элемент.Значение);
				
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоДт"), Элемент.Значение);
				
			Иначе
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиКт.Вставить("СчетДт", Выборка.КорСчет);
		ПараметрыРасшифровкиКт.Вставить("СчетКт", ?(Выборка.Счет=NULL, Счет, Выборка.Счет));
		
		СписокРасшифровкиКт = Новый СписокЗначений;
		СписокРасшифровкиКт.Добавить(ПараметрыРасшифровкиКт, "Отчет по проводкам " + Выборка.Счет);
		
		// для счета в целом
		ПараметрыРасшифровки.Вставить("Отбор", Новый Соответствие);
		Для каждого Элемент Из ОтборРасшифровка Цикл
			ПараметрыРасшифровки["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Отчет по проводкам " + Выборка.Счет);
		
	ИначеЕсли Выборка.Группировка() = "Период" Тогда
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ДатаНачПериода = Выборка[Выборка.Группировка()];
			ОтборСубконто.Вставить(Выборка.Группировка(), ДатаНачПериода);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = Сделатькопиюсоотв(ОтборСубконто);
			
			ОтборРасшифровкаБезПериода = Сделатькопиюсоотв(ОтборРасшифровка);
			ОтборРасшифровкаБезПериода.Удалить("Период");
			
			ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровкаБезПериода);
			
			ПараметрыКарточкиСчета.Вставить("ДатаНач", ДатаНачПериода);
			
			ПараметрыКарточкиСчета.Вставить("ДатаКон", ПолучитьКонецПериода(ДатаНачПериода, Период));
			
			СписокРасшифровки = Новый СписокЗначений;
			
			СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + Выборка.Счет);
			
		КонецЕсли;
		
	Иначе
		СписокРасшифровки = Неопределено;
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;
	
	Если СписокРасшифровкиДт<>Неопределено Тогда
		Область.Параметры.РасшифровкаДт = СписокРасшифровкиДт;
	КонецЕсли;
	Если СписокРасшифровкиКт<>Неопределено Тогда
		Область.Параметры.РасшифровкаКт = СписокРасшифровкиКт;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!", 60);
		Возврат;
	КонецЕсли;

	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода", 60);
		Возврат;
	КонецЕсли;

	// Запоминание ширины колонки
	Если НЕ ДокументРезультат.ВысотаТаблицы = ВысотаЗаголовка Тогда

		МассивШиринКолонок.Очистить();

		// Запоминать следует, если документ не пустой
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			
			Для Сч=1 По ШиринаТаблицы Цикл
				МассивШиринКолонок.Добавить(ДокументРезультат.Область(1,Сч).ШиринаКолонки);
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

	ДокументРезультат.Очистить();
	
	
	МассивРесурсов = Новый СписокЗначений;
	МассивРесурсов.Добавить("СуммаУпр", "Сумма");
	
	Если ВВалютеСценария Тогда
		МассивРесурсов.Добавить("СуммаСценария", "СуммаСценария");
	КонецЕсли;
	
	Если ПоВалютам Тогда
		МассивРесурсов.Добавить("ВалютнаяСумма", "ВалютнаяСумма");
	КонецЕсли;
	
	Если ПоКоличеству Тогда
		МассивРесурсов.Добавить("Количество", "Количество");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаНач='00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач+1);
	КонецЕсли;
	
	Если ДатаКон <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	КонецЕсли;
	
	Периодичность = Период;
	
	ТекстСубконто = "";
	ТекстСубконтоИтоги = "";
	
	ТекстОтбор = "";
	
	МассивСубконто = Новый Массив;
	
	СоотТипыИзмерений = Новый Соответствие;
	СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.Иерархия, " ИЕРАРХИЯ");
	СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.ТолькоИерархия, " ТОЛЬКО ИЕРАРХИЯ");
	СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.Элементы, "");
	
	// Субконто отчета
	Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		
		Измерение = ПостроительОтчета.ИзмеренияСтроки[Инд];
		
		ТекстСубконтоИтоги = ТекстСубконтоИтоги + ",
		|	" + Измерение.ПутьКДанным + СоотТипыИзмерений[Измерение.ТипИзмерения] + " КАК " + Измерение.Имя;
		
		ТекстСубконто = ТекстСубконто + ",
		|	" + Измерение.ПутьКДанным + " КАК " + Измерение.Имя + ",
		|	ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
		
		МассивСубконто.Добавить(Измерение.Имя);
		
	КонецЦикла;
	
	ОтборСубконто = Новый Соответствие;
	
	Сч = 0;
	Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
		
		Если НЕ Элемент.Использование ИЛИ ПустаяСтрока(Элемент.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
	
		ТекстОтбор = ТекстОтбор + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(Элемент.ВидСравнения, "&Значение"+Сч, Элемент.ПутьКДанным, "&ЗначениеС"+Сч, "&ЗначениеПо"+Сч, Элемент.Значение, Элемент.ЗначениеС, Элемент.ЗначениеПо);
		
		ВидСр = новый Структура;
		ВидСр.Вставить("Значение",Элемент.Значение);
		ВидСр.Вставить("ВидСравнения",Элемент.ВидСравнения);
		ОтборСубконто.Вставить(Элемент.ПутьКДанным, ВидСр);
		
		БухгалтерскиеОтчеты.УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, Элемент, Строка(Сч));
		
		Сч=Сч+1;
	
	КонецЦикла; 
	
	ТекстОтбор = ТекстОтбор + " И Сценарий = &Сценарий";
	
	СоответствиеКорСубконто = Новый Соответствие;
	
	Если ПоКорСубсчетамИСубконто Тогда
		
		Для Каждого Строка Из ПравилаВыводаИтогов Цикл
			
			Для Каждого СтрокаРазворота Из Строка.РазворотПоСубконто Цикл
				
				СоответствиеКорСубконто.Вставить(СтрокаРазворота.Имя, СтрокаРазворота.Имя);
			
			КонецЦикла; 
			
		КонецЦикла;
	
	КонецЕсли; 
	
	ТекстКорСубконто = "";
	ТекстNULLКорСубконто = "";
	Для Каждого Элемент Из СоответствиеКорСубконто Цикл
		
		ТекстКорСубконто = ТекстКорСубконто + ", " + "Кор" +Элемент.Ключ + " КАК " + "Кор" +Элемент.Ключ;
		
		ТекстNULLКорСубконто = ТекстNULLКорСубконто + ", NULL";
	
	КонецЦикла;
	
	Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Счета.Ссылка КАК Счет, 
	|	Счета.Ссылка.Вид КАК ВидСчета, 
	|	Счета.Ссылка.Порядок КАК СчетПорядок, 
	|	Счета.Ссылка.Представление КАК СчетПредставление"+ТекстСубконто+",
	|	КорСчета.Ссылка КАК КорСчет, 
	|	КорСчета.Ссылка.Порядок КАК КорСчетПорядок, 
	|	КорСчета.Ссылка.Представление КАК КорСчетПредставление"+ТекстКорСубконто+"";
	
	Если ПоВалютам Тогда
		Текст = Текст + ",
		|	БухОбороты.Валюта КАК Валюта, БухОбороты.Валюта.Представление КАК ВалютаПредставление  ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		Текст = Текст + ", Период";
		
	КонецЕсли;
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		Текст = Текст + ",
		|	" +ИмяРесурса.Значение+ "ОборотДт КАК " +ИмяРесурса.Представление+ "ОборотДт,
		|	" +ИмяРесурса.Значение+ "ОборотКт КАК " +ИмяРесурса.Представление+ "ОборотКт,
		|	0 КАК " +ИмяРесурса.Представление+ "НачДт,
		|	0 КАК " +ИмяРесурса.Представление+ "НачКт";
		
	КонецЦикла;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(&ДатаНач, &ДатаКон, "+Периодичность+", Счет В ИЕРАРХИИ (&Счет), , " + Сред(ТекстОтбор, 3) + ") КАК БухОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов."+ИмяПланаСчетов+" КАК Счета
	|		ПО БухОбороты.Счет = Счета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов."+ИмяПланаСчетов+" КАК КорСчета
	|		ПО БухОбороты.КорСчет = КорСчета.Ссылка
	|";
	
	
	Текст = Текст + "
	| ОБЪЕДИНИТЬ ВСЕ ";
	
	Текст = Текст + "
	|ВЫБРАТЬ
	|	Счета.Ссылка, 
	|	Счета.Ссылка.Вид, 
	|	Счета.Ссылка.Порядок, 
	|	Счета.Ссылка.Представление "+ТекстСубконто+",
	|	NULL , NULL, NULL "+ТекстNULLКорСубконто+"";
	
	Если ПоВалютам Тогда
		Текст = Текст + ",
		|	БухОстатки.Валюта КАК Валюта, БухОстатки.Валюта.Представление ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		Текст = Текст + ", NULL";
		
	КонецЕсли;
	
	ТекстИтоги = "";
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		Текст = Текст + ",
		|	0 КАК " +ИмяРесурса.Представление+ "ОборотДт,
		|	0 КАК " +ИмяРесурса.Представление+ "ОборотКт,
		|	" +ИмяРесурса.Значение+ "ОстатокДт КАК " +ИмяРесурса.Представление+ "НачДт,
		|	" +ИмяРесурса.Значение+ "ОстатокКт КАК " +ИмяРесурса.Представление+ "НачКт";
	КонецЦикла;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Остатки(&ДатаНач, Счет В ИЕРАРХИИ (&Счет), , " + Сред(ТекстОтбор, 3)+ ") КАК БухОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов."+ИмяПланаСчетов+" КАК Счета
	|		ПО БухОстатки.Счет = Счета.Ссылка
	|";

	ТекстПорядок = "";
	Если ПоСубсчетамИСубконто Тогда
		
		ТекстПорядок = ТекстПорядок + ", СчетПорядок";
		
	КонецЕсли;
	
	Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		Измерение = ПостроительОтчета.ИзмеренияСтроки[Инд];
		ТекстПорядок = ТекстПорядок + ",
		|	" + Измерение.Имя;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		ТекстПорядок = ТекстПорядок + ", Период";
		
	КонецЕсли;
	
	Текст = Текст + "
	|УПОРЯДОЧИТЬ ПО "+Сред(ТекстПорядок + ", КорСчетПорядок", 2);
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
	
		ТекстИтоги = ТекстИтоги + ",
		|	СУММА(" +ИмяРесурса.Представление+ "ОборотДт),
		|	СУММА(" +ИмяРесурса.Представление+ "ОборотКт),
		|	СУММА(" +ИмяРесурса.Представление+ "НачДт),
		|	СУММА(" +ИмяРесурса.Представление+ "НачКт)";
	
	КонецЦикла; 
	
	
	Текст = Текст + "
	|ИТОГИ " + Сред(ТекстИтоги, 2)+ "
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетамИСубконто Тогда
		
		Текст = Текст +	",
		|	Счет ИЕРАРХИЯ КАК Счет"
		
	КонецЕсли;
	
	// добавим итоги по субконто
	Текст = Текст + ТекстСубконтоИтоги;
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		Текст = Текст + ", Период КАК Период";
		
	КонецЕсли;
	
	Текст = Текст + ", КорСчет ИЕРАРХИЯ КАК КорСчет";
	
	Текст = Текст + ТекстКорСубконто;
	
	Если ПоВалютам Тогда
		Текст = Текст + ", Валюта КАК Валюта";
	КонецЕсли;
	
	Текст = Текст + " АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = Текст;
	
	Состояние("Выполнение запроса");
	Результат = Запрос.Выполнить();
	
	Макет       = ПолучитьМакет("Макет");
	
	Если НЕ ВВалютеСценария Тогда
		Макет.УдалитьОбласть(Макет.Область("ВвалютеСценария"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ ПоВалютам Тогда
		Макет.УдалитьОбласть(Макет.Область("ВВалюте"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;

	Если НЕ ПоСубсчетамИСубконто И ПостроительОтчета.ИзмеренияСтроки.Количество()=0 И НЕ ЗначениеЗаполнено(Период) И НЕ ПоВалютам Тогда
		Макет.УдалитьОбласть(Макет.Область("Счет"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;

	// Вывод заголовка отчета
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка  = ОбластьЗаголовка.ВысотаТаблицы;
	
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);

	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
	ОбластьЗаголовкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьЗаголовкаТаблицы.Параметры.Д="Д";
	ОбластьЗаголовкаТаблицы.Параметры.К="К";
	ДокументРезультат.Вывести(ОбластьЗаголовкаТаблицы, 1);
	
	// Счет
	ОбластьСтрокаСчет       = Макет.ПолучитьОбласть("СтрокаСчет");
	ОбластьИтогСчет         = Макет.ПолучитьОбласть("ИтогСчет");
	
	// Валюта
	ОбластьСтрокаВалюта       = Макет.ПолучитьОбласть("СтрокаВалюта");
	ОбластьИтогВалюта         = Макет.ПолучитьОбласть("ИтогВалюта");
	
	// Субконто
	
	// Для вывода количества используются другие области
	СтрокаКоличество = ?(ПоКоличеству, "Количество", "");
	
	ОбластьСтрокаСубконто  = Макет.ПолучитьОбласть("СтрокаСубконто" + СтрокаКоличество);
	ОбластьИтогСубконто    = Макет.ПолучитьОбласть("ИтогСубконто" + СтрокаКоличество);
	
	// Для вывода количества используются другие области
	СтрокаКоличество = ?(ПоКоличеству И (МассивСубконто.Количество()>0), "Количество", "");
	ОбластьСтрокаПериод  = Макет.ПолучитьОбласть("СтрокаПериод" + СтрокаКоличество);
	ОбластьИтогПериод    = Макет.ПолучитьОбласть("ИтогПериод" + СтрокаКоличество);
	
	// КорСчет
	ОбластьСтрокаКорСчет       = Макет.ПолучитьОбласть("СтрокаКорСчет" + СтрокаКоличество);
	
	// КорСубконто
	ОбластьСтрокаКорСубконто  = Макет.ПолучитьОбласть("СтрокаКорСубконто" + СтрокаКоличество);
	
	Если ЗначениеЗаполнено(Период) Тогда
		ФорматПериода = "";
		Если Врег(Период) = "ГОД" Тогда
			ФорматПериода = "ДФ = ""гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "КВАРТАЛ" Тогда
			ФорматПериода = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "МЕСЯЦ" Тогда
			ФорматПериода = "ДФ = ""ММММ гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "НЕДЕЛЯ" Тогда
			ФорматПериода = "ДФ = """"""Неделя с"""" дд.ММ.гггг """"""";
		ИначеЕсли Врег(Период) = "ДЕНЬ" Тогда
			ФорматПериода = "ДЛФ = D";
		КонецЕсли;
		ОбластьСтрокаПериод.Область(1,2).Формат = ФорматПериода;
	КонецЕсли;

	// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
	СдвигУровня = 0;
	
	// Флаг сброса сдвига уровня при выводе группировки по счету
	СброситьСдвигУровня = Истина;

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ОбластьСтрокаСчет", ОбластьСтрокаСчет);
	СтруктураПараметров.Вставить("ОбластьИтогСчет", ОбластьИтогСчет);
	СтруктураПараметров.Вставить("ОбластьСтрокаВалюта", ОбластьСтрокаВалюта);
	СтруктураПараметров.Вставить("ОбластьИтогВалюта", ОбластьИтогВалюта);
	
	СтруктураПараметров.Вставить("ОбластьСтрокаКорСчет", ОбластьСтрокаКорСчет);
	
	СтруктураПараметров.Вставить("ОбластьСтрокаПериод",ОбластьСтрокаПериод);
	СтруктураПараметров.Вставить("ОбластьИтогПериод",ОбластьИтогПериод);
	
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконто", ОбластьСтрокаСубконто);
	СтруктураПараметров.Вставить("ОбластьИтогСубконто", ОбластьИтогСубконто);
	
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	
	СтруктураПараметров.Вставить("ОбластьСтрокаКорСубконто", ОбластьСтрокаКорСубконто);
	
	СтруктураПараметров.Вставить("МассивСубконто", МассивСубконто);
	
	
	// Вывод отчета
	ОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ЕстьИтог = ОбщийИтог.Следующий();
	ОбластьНачало = Макет.ПолучитьОбласть("НачалоОтчет");
	ОбластьНачало.Параметры.Заполнить(ОбщийИтог);
	
	ДокументРезультат.Вывести(ОбластьНачало);

	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	ВывестиСчета(Результат, СтруктураПараметров, ОтборСубконто);
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Итого по отчету
	
	ОбластьИтог = Макет.ПолучитьОбласть("ИтогОтчет");
	ОбластьИтог.Параметры.Заполнить(ОбщийИтог);
	
	Если ЕстьИтог Тогда
		Если Счет.Вид = ВидСчета.Активный Тогда 
			СуммаКонДт = ОбщийИтог.СуммаНачДт + ОбщийИтог.СуммаОборотДт - ОбщийИтог.СуммаОборотКт;
			СуммаКонКт = 0;
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			СуммаКонДт = 0;
			СуммаКонКт = ОбщийИтог.СуммаНачКт + ОбщийИтог.СуммаОборотКт - ОбщийИтог.СуммаОборотДт;
		Иначе
			СуммаКонДт = ОбщийИтог.СуммаНачДт + ОбщийИтог.СуммаОборотДт;
			СуммаКонКт = ОбщийИтог.СуммаНачКт + ОбщийИтог.СуммаОборотКт;
			
			Если СуммаКонДт>СуммаКонКт Тогда
				СуммаКонДт=СуммаКонДт-СуммаКонКт;
				СуммаКонКт=0;
			Иначе
				СуммаКонКт=СуммаКонКт-СуммаКонДт;
				СуммаКонДт=0;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьИтог.Параметры.СуммаКонДт =СуммаКонДт;
		ОбластьИтог.Параметры.СуммаКонКт =СуммаКонКт;
	КонецЕсли;
	
	
	ДокументРезультат.Вывести(ОбластьИтог);
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Сценарий", Сценарий);
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
	
	СтруктураНастроекОтчета.Вставить("Период", Период);
	НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);


	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;
	
	// Обведение таблицы отчета линией, как в области границы
	ТолстаяЛиния = ОбластьИтог.Область(ОбластьИтог.ВысотаТаблицы, 2).ГраницаСнизу;
	
	ДокументРезультат.Область(ВысотаЗаголовка+2, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
	
	ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
	
	// Восстановление ширин колонок
	Если ТипЗнч(МассивШиринКолонок) = Тип("Массив") Тогда
		Если МассивШиринКолонок.Количество() = ШиринаТаблицы Тогда
			Инд = 0;
			Для Каждого Элемент Из МассивШиринКолонок Цикл
				ДокументРезультат.Область(,1+Инд, , 1+Инд).ШиринаКолонки = Элемент;
				Инд = Инд+1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "АнализСчета"+ИмяРегистраБухгалтерии;
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры

// Процедура заполняет структуру, в которой будут храниться данные сальдо по валютам
//
// Параметры:
//	Нет.
//
Процедура ПолучитьСальдоПоВалютам(Выборка, СтруктураПараметров)
	
	ВыборкаВалют = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта", "Все"); // выбираем все валюты

	СальдоПоВалютам = Новый Соответствие;
	
	Пока ВыборкаВалют.Следующий() Цикл
		
		СуммаНачДт = ВЧисло(ВыборкаВалют.СуммаНачДт);
		СуммаНачКт = ВЧисло(ВыборкаВалют.СуммаНачКт);
		
		ВалютнаяСуммаНачДт = ВЧисло(ВыборкаВалют.ВалютнаяСуммаНачДт);
		ВалютнаяСуммаНачКт = ВЧисло(ВыборкаВалют.ВалютнаяСуммаНачКт);
		
		СальдоПоВалютам.Вставить(ВыборкаВалют.Валюта, 
		Новый Структура("СуммаНачДт, СуммаНачКт, ВалютнаяСуммаНачДт, ВалютнаяСуммаНачКт", 
		СуммаНачДт, 
		СуммаНачКт,
		ВалютнаяСуммаНачДт,
		ВалютнаяСуммаНачКт));
		
		Если ВВалютеСценария Тогда
			СуммаСценарияНачДт = ВЧисло(ВыборкаВалют.СуммаСценарияНачДт);
			СуммаСценарияНачКт = ВЧисло(ВыборкаВалют.СуммаСценарияНачКт);
		
			СальдоПоВалютам[ВыборкаВалют.Валюта].Вставить("СуммаСценарияНачДт", СуммаСценарияНачДт);
			СальдоПоВалютам[ВыборкаВалют.Валюта].Вставить("СуммаСценарияНачКт", СуммаСценарияНачКт);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("СальдоПоВалютам", СальдоПоВалютам);
	
КонецПроцедуры // ПолучитьСальдоПоВалютам()

// Вывод счетов
Процедура ВывестиСчета(Выборка, СтруктураПараметров, ОтборСубконто)

	Если ПоСубсчетамИСубконто Тогда
		
		ВыборкаПоСчетам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
		
		Пока ВыборкаПоСчетам.Следующий() Цикл
			
			//ЭтоНовыйСчет = (Выборка.Счет = Счет ИЛИ Счет.ПринадлежитЭлементу(Выборка.Счет));
			
			// Вывод начального сальдо
			СуммаНачДт = ВЧисло(ВыборкаПоСчетам.СуммаНачДт);
			СуммаНачКт = ВЧисло(ВыборкаПоСчетам.СуммаНачКт);
			
			Если ВВалютеСценария Тогда
				СуммаСценарияНачДт = ВЧисло(ВыборкаПоСчетам.СуммаСценарияНачДт);
				СуммаСценарияНачКт = ВЧисло(ВыборкаПоСчетам.СуммаСценарияНачКт);
			КонецЕсли;
			
			// Вывод нач сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчет;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаПоСчетам);
			
			Уровень = ВыборкаПоСчетам.Уровень();
			
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоСчетам, ОтборСубконто);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			// Вывод начального сальдо: конец
			
			// Вывод вложенных итогов
			
			ВывестиСубконто(ВыборкаПоСчетам, СтруктураПараметров, ОтборСубконто);
			
			ВывестиСчета(ВыборкаПоСчетам, СтруктураПараметров, ОтборСубконто);
			// Вывод вложенных итогов: конец
				
			// Вывод оборота и кон сальдо
			СуммаОборотДт = ВЧисло(ВыборкаПоСчетам.СуммаОборотДт);
			СуммаОборотКт = ВЧисло(ВыборкаПоСчетам.СуммаОборотКт);
			Если ВВалютеСценария Тогда
				СуммаСценарияОборотДт = ВЧисло(ВыборкаПоСчетам.СуммаСценарияОборотДт);
				СуммаСценарияОборотКт = ВЧисло(ВыборкаПоСчетам.СуммаСценарияОборотКт);
			КонецЕсли;
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСчет;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.СуммаОборотДт = СуммаОборотДт;
			ВыводимаяОбласть.Параметры.СуммаОборотКт = СуммаОборотКт;
			Если ВВалютеСценария Тогда
				ВыводимаяОбласть.Параметры.СуммаСценарияОборотДт = СуммаСценарияОборотДт;
				ВыводимаяОбласть.Параметры.СуммаСценарияОборотКт = СуммаСценарияОборотКт;
			КонецЕсли;
			
			Если ВыборкаПоСчетам.ВидСчета = ВидСчета.Активный Тогда
				
				СуммаКонДт = СуммаНачДт + СуммаОборотДт - СуммаОборотКт;
				СуммаКонКт = 0;
				Если ВВалютеСценария Тогда
					СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт - СуммаСценарияОборотКт;
					СуммаСценарияКонКт = 0;
				КонецЕсли;
				
			ИначеЕсли ВыборкаПоСчетам.ВидСчета = ВидСчета.Пассивный Тогда
				
				СуммаКонКт = СуммаНачКт + СуммаОборотКт - СуммаОборотДт;
				СуммаКонДт = 0;
				Если ВВалютеСценария Тогда
					СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт - СуммаСценарияОборотДт;
					СуммаСценарияКонДт = 0;
				КонецЕсли;
				
			Иначе
				
				СуммаКонДт = СуммаНачДт + СуммаОборотДт;
				СуммаКонКт = СуммаНачКт + СуммаОборотКт;
				Если ВВалютеСценария Тогда
					СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт;
					СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт;
				КонецЕсли;
				
				Если СуммаКонДт>СуммаКонКт Тогда
					СуммаКонДт=СуммаКонДт-СуммаКонКт;
					СуммаКонКт=0;
					Если ВВалютеСценария Тогда
						СуммаСценарияКонДт=СуммаСценарияКонДт-СуммаСценарияКонКт;
						СуммаСценарияКонКт=0;
					КонецЕсли;
				Иначе
					СуммаКонКт=СуммаКонКт-СуммаКонДт;
					СуммаКонДт=0;
					Если ВВалютеСценария Тогда
						СуммаСценарияКонКт=СуммаСценарияКонКт-СуммаСценарияКонДт;
						СуммаСценарияКонДт=0;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			ВыводимаяОбласть.Параметры.СуммаКонДт = СуммаКонДт;
			ВыводимаяОбласть.Параметры.СуммаКонКт = СуммаКонКт;
			Если ВВалютеСценария Тогда
				ВыводимаяОбласть.Параметры.СуммаСценарияКонДт = СуммаСценарияКонДт;
				ВыводимаяОбласть.Параметры.СуммаСценарияКонКт = СуммаСценарияКонКт;
			КонецЕсли;
			
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоСчетам, ОтборСубконто);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			// Вывод оборота и кон сальдо: конец
			
		КонецЦикла;
		
	Иначе
		
		ВывестиСубконто(Выборка, СтруктураПараметров, ОтборСубконто);
		
	КонецЕсли;

КонецПроцедуры

// Вывод валют
Процедура ВывестиВалюты(Выборка, СтруктураПараметров, ОтборДляРасшифровки, ТолькоОборотыПредУровень = Ложь)
	
	ВыборкаВалют = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
	
	ЕстьПериоды = ЗначениеЗаполнено(Период);
	
	ТолькоОбороты = ТолькоОборотыПредУровень;

	Пока ВыборкаВалют.Следующий() Цикл
		
		// Вывод начального сальдо
		СуммаНачДт = ВЧисло(ВыборкаВалют.СуммаНачДт);
		СуммаНачКт = ВЧисло(ВыборкаВалют.СуммаНачКт);
		Если ВВалютеСценария Тогда
			СуммаСценарияНачДт = ВЧисло(ВыборкаВалют.СуммаСценарияНачДт);
			СуммаСценарияНачКт = ВЧисло(ВыборкаВалют.СуммаСценарияНачКт);
		КонецЕсли;
		
		ВалютнаяСуммаНачДт = ВЧисло(ВыборкаВалют.ВалютнаяСуммаНачДт);
		ВалютнаяСуммаНачКт = ВЧисло(ВыборкаВалют.ВалютнаяСуммаНачКт);
		
		// Сальдо после детализации по периодам получается расчетным путем и хранится в структуре СтруктураПараметров.СальдоПоВалютам
		Если ЕстьПериоды Тогда
			СтСальдоВал = СтруктураПараметров.СальдоПоВалютам[ВыборкаВалют.Валюта];
			
			СуммаНачДт = СтСальдоВал.СуммаНачДт;
			СуммаНачКт = СтСальдоВал.СуммаНачКт;
			Если ВВалютеСценария Тогда
				СуммаСценарияНачДт = СтСальдоВал.СуммаСценарияНачДт;
				СуммаСценарияНачКт = СтСальдоВал.СуммаСценарияНачКт;
			КонецЕсли;
			
			ВалютнаяСуммаНачДт = СтСальдоВал.ВалютнаяСуммаНачДт;
			ВалютнаяСуммаНачКт = СтСальдоВал.ВалютнаяСуммаНачКт;
		КонецЕсли;
			
		// Вывод нач сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалюта;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалют);
		
		Если ЕстьПериоды Тогда
			ВыводимаяОбласть.Параметры.Заполнить(СтСальдоВал);
		КонецЕсли;
		
		Уровень = ВыборкаВалют.Уровень();
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаВалют);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		// Вывод начального сальдо: конец
		
		// Вывод вложенных итогов
		ВывестиКорСчета(ВыборкаВалют, СтруктураПараметров, СделатьКопиюСоотв(ОтборДляРасшифровки));
		// Вывод вложенных итогов: конец
		
		// Вывод оборота и кон сальдо
		СуммаОборотДт = ВЧисло(ВыборкаВалют.СуммаОборотДт);
		СуммаОборотКт = ВЧисло(ВыборкаВалют.СуммаОборотКт);
		Если ВВалютеСценария Тогда
			СуммаСценарияОборотДт = ВЧисло(ВыборкаВалют.СуммаСценарияОборотДт);
			СуммаСценарияОборотКт = ВЧисло(ВыборкаВалют.СуммаСценарияОборотКт);
		КонецЕсли;
		
		ВалютнаяСуммаОборотДт = ВЧисло(ВыборкаВалют.ВалютнаяСуммаОборотДт);
		ВалютнаяСуммаОборотКт = ВЧисло(ВыборкаВалют.ВалютнаяСуммаОборотКт);
		
		ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогВалюта;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ВыводимаяОбласть.Параметры.СуммаОборотДт = СуммаОборотДт;
		ВыводимаяОбласть.Параметры.СуммаОборотКт = СуммаОборотКт;
		Если ВВалютеСценария Тогда
			ВыводимаяОбласть.Параметры.СуммаСценарияОборотДт = СуммаСценарияОборотДт;
			ВыводимаяОбласть.Параметры.СуммаСценарияОборотКт = СуммаСценарияОборотКт;
		КонецЕсли;
		
		ВыводимаяОбласть.Параметры.ВалютнаяСуммаОборотДт = ВалютнаяСуммаОборотДт;
		ВыводимаяОбласть.Параметры.ВалютнаяСуммаОборотКт = ВалютнаяСуммаОборотКт;
		
		СуммаКонДт = 0;
		СуммаКонКт = 0;
		ВалютнаяСуммаКонДт = 0;
		ВалютнаяСуммаКонКт = 0;
		
		Если Не ТолькоОбороты Тогда // по оборотным субконто кон. сальдо не считаем (начальное - из запроса - всегда 0)
			
			Если Счет.Вид = ВидСчета.Активный Тогда 
				СуммаКонДт = СуммаНачДт + СуммаОборотДт - СуммаОборотКт;
				СуммаКонКт = 0;
				Если ВВалютеСценария Тогда
					СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт - СуммаСценарияОборотКт;
					СуммаСценарияКонКт = 0;
				КонецЕсли;
				
				ВалютнаяСуммаКонДт = ВалютнаяСуммаНачДт + ВалютнаяСуммаОборотДт - ВалютнаяСуммаОборотКт;
				ВалютнаяСуммаКонКт = 0;
				
			ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
				СуммаКонДт = 0;
				СуммаКонКт = СуммаНачКт + СуммаОборотКт - СуммаОборотДт;
				Если ВВалютеСценария Тогда
					СуммаСценарияКонДт = 0;
					СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт - СуммаСценарияОборотДт;
				КонецЕсли;
				
				ВалютнаяСуммаКонДт = 0;
				ВалютнаяСуммаКонКт = ВалютнаяСуммаНачКт + ВалютнаяСуммаОборотКт - ВалютнаяСуммаОборотДт;
			Иначе
				СуммаКонДт = СуммаНачДт + СуммаОборотДт;
				СуммаКонКт = СуммаНачКт + СуммаОборотКт;
				Если ВВалютеСценария Тогда
					СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт;
					СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт;
				КонецЕсли;
				
				Если СуммаКонДт>СуммаКонКт Тогда
					СуммаКонДт=СуммаКонДт-СуммаКонКт;
					СуммаКонКт=0;
					Если ВВалютеСценария Тогда
						СуммаСценарияКонДт=СуммаСценарияКонДт-СуммаСценарияКонКт;
						СуммаСценарияКонКт=0;
					КонецЕсли;
				Иначе
					СуммаКонКт=СуммаКонКт-СуммаКонДт;
					СуммаКонДт=0;
					Если ВВалютеСценария Тогда
						СуммаСценарияКонКт=СуммаСценарияКонКт-СуммаСценарияКонДт;
						СуммаСценарияКонДт=0;
					КонецЕсли;
				КонецЕсли;
				
				ВалютнаяСуммаКонДт = ВалютнаяСуммаНачДт + ВалютнаяСуммаОборотДт;
				ВалютнаяСуммаКонКт = ВалютнаяСуммаНачКт + ВалютнаяСуммаОборотКт;
				
				Если ВалютнаяСуммаКонДт>ВалютнаяСуммаКонКт Тогда
					ВалютнаяСуммаКонДт=ВалютнаяСуммаКонДт-ВалютнаяСуммаКонКт;
					ВалютнаяСуммаКонКт=0;
				Иначе
					ВалютнаяСуммаКонКт=ВалютнаяСуммаКонКт-ВалютнаяСуммаКонДт;
					ВалютнаяСуммаКонДт=0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Запомним новые значения сальдо по валютам
		Если ЕстьПериоды Тогда
			СтСальдоВал.СуммаНачДт = СуммаКонДт;
			СтСальдоВал.СуммаНачКт = СуммаКонКт;
			Если ВВалютеСценария Тогда
				СтСальдоВал.СуммаСценарияНачДт = СуммаСценарияКонДт;
				СтСальдоВал.СуммаСценарияНачКт = СуммаСценарияКонКт;
			КонецЕсли;
			
			СтСальдоВал.ВалютнаяСуммаНачДт = ВалютнаяСуммаКонДт;
			СтСальдоВал.ВалютнаяСуммаНачКт = ВалютнаяСуммаКонКт;
		КонецЕсли;
		
		
		ВыводимаяОбласть.Параметры.СуммаКонДт = СуммаКонДт;
		ВыводимаяОбласть.Параметры.СуммаКонКт = СуммаКонКт;
		Если ВВалютеСценария Тогда
			ВыводимаяОбласть.Параметры.СуммаСценарияКонДт = СуммаСценарияКонДт;
			ВыводимаяОбласть.Параметры.СуммаСценарияКонКт = СуммаСценарияКонКт;
		КонецЕсли;
		
		ВыводимаяОбласть.Параметры.ВалютнаяСуммаКонДт = ВалютнаяСуммаКонДт;
		ВыводимаяОбласть.Параметры.ВалютнаяСуммаКонКт = ВалютнаяСуммаКонКт;
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаВалют);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		
	КонецЦикла;

КонецПроцедуры

// Вывод субконто: общая процедура
Процедура ВывестиСубконто(Выборка, СтруктураПараметров, ОтборСубконто)

	Если СтруктураПараметров.МассивСубконто.Количество() > 0 Тогда
		ВыводСубконто(Выборка, 0, СтруктураПараметров, СделатьКопиюСоотв(ОтборСубконто));
	Иначе
		ВывестиПериоды(Выборка, СтруктураПараметров, СделатьКопиюСоотв(ОтборСубконто));
	КонецЕсли;

КонецПроцедуры

 Процедура ОчиститьПараметрыОбласти(Область)
	
	Для Индекс = 0 По Область.Параметры.Количество() - 1 Цикл
		Область.Параметры.Установить(Индекс, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  );
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, , СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

// Преобразование значения из выборки результат запроса в число.
Функция ВЧисло(Значение)
	
	Если Значение=NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции // ВЧисло()

// Создание копии структуры или соответствия
//
// Параментры:
//   СоотвИсх - Структура/Соответствие - Исходная структура, с которой будет создаваться копия.
//
// Возвращаемое значение:
//   Структура/Соответствие - Копия исходной структуры. Тип данных повторяет тип исходной структуры.
Функция СделатьКопиюСоотв(СоотвИсх) Экспорт
	
	Соотв = Новый(Тип(СоотвИсх));
	
	Для Каждого Элемент Из СоотвИсх Цикл
		Соотв.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Соотв;

КонецФункции // СделатьКопиюСоотв()

// Получение даты конца периода по заданной периодичности и началу периода
//
// Параметры:
//   ПериодС      - Начало периода
//   СтдПериод    - Периодичность: ДЕНЬ, НЕДЕЛЯ, ДЕКАДА, МЕСЯЦ, КВАРТАЛ, ПОЛУГОДИЕ, ГОД
//
// Возвращаемое значение:
//   Дата         - Рассчитанный конец периода
Функция ПолучитьКонецПериода(ПериодС, СтдПериод)
	
	Перем Период;
	
	Период = Врег(СтдПериод);
	
	Если Период = "ДЕНЬ" Тогда
		ПериодПо = КонецДня(ПериодС);
	ИначеЕсли Период = "НЕДЕЛЯ" Тогда
		ПериодПо = КонецНедели(ПериодС);
	ИначеЕсли Период = "ДЕКАДА" Тогда
		ПериодПо = ПериодС + 10 * 24 * 60 * 60 - 1;
	ИначеЕсли Период = "МЕСЯЦ" Тогда
		ПериодПо = КонецДня(КонецМесяца(ПериодС));
	ИначеЕсли Период = "КВАРТАЛ" Тогда
		ПериодПо = КонецДня(КонецКвартала(ПериодС));
	ИначеЕсли Период = "ПОЛУГОДИЕ" Тогда
		
		СерединаГода = КонецМесяца(ДобавитьМесяц(НачалоГода(ПериодС), 6));
		
		Если ПериодС<= СерединаГода Тогда
			ПериодПо = СерединаГода;
		Иначе
			ПериодПо = КонецДня(КонецГода(ПериодС));
		КонецЕсли;
		
	ИначеЕсли Период = "ГОД" Тогда
		ПериодПо = КонецДня(КонецГода(ПериодС));
	КонецЕсли;
	
	Возврат ПериодПо;
	
КонецФункции // ПолучитьКонецПериода()

// Заполнение начальных настроек построителя отчетов
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.СуммаУпрОборотКт КАК СуммаОборотКт";
	
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		Если ВидСубконто.Суммовой Тогда 
			
			ТекстПоля = ТекстПоля + ", ОстаткиИОбороты.Субконто" +Сч+" КАК Субконто"+Сч;
			ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
			//ТекстИтоги = ТекстИтоги + ", Субконто"+Сч;
			ТекстИтоги = ТекстИтоги + ", Субконто"+Сч+".*";
			
			МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		Текст = Текст + "
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля
		, 2) 
		+ "}";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		ТекстОтбор = "{"+Сред(ТекстОтбор, 2)+"}";
	КонецЕсли;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(, , МЕСЯЦ, , Счет В ИЕРАРХИИ (&Счет), , "+ТекстОтбор+") КАК ОстаткиИОбороты
	|
	|ИТОГИ СУММА(СуммаОборотКт) ПО ОБЩИЕ";
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст + "
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги 
		, 2) + "}";
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
	ПостроительОтчета.Параметры.Вставить("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
		
		ПостроительОтчета.Отбор.Добавить("Субконто"+Сч);
	КонецЦикла;
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);

КонецПроцедуры

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	
	Если Счет.Валютный Тогда
	
		ПоВалютам = Истина;
		
	Иначе
		
		ПоВалютам = Ложь;
	
	КонецЕсли; 
	
	Если Счет.Количественный Тогда
	
		ПоКоличеству = Истина;
	
	Иначе
	
		ПоКоличеству = Ложь;
	
	КонецЕсли;
	
	ПоСубсчетам = Истина;
	
	ЗаполнитьНачальныеНастройки();
	
	//Сч = 0;
	//Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
	//	
	//	Сч = Сч+1;
	//	
	//	ПостроительОтчета.Отбор.Добавить("Субконто"+Сч).Использование = Ложь;
	//	
	//	ПостроительОтчета.ИзмеренияСтроки.Добавить("Субконто"+Сч);
	//	
	//КонецЦикла;

КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 

	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	Сценарий = Параметры["Сценарий"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
		ПоСубсчетамИСубконто = Параметры["ПоСубсчетамИСубконто"];
		ПоКорСубсчетамИСубконто = Параметры["ПоКорСубсчетамИСубконто"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	
	БухгалтерскиеОтчеты.ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);

КонецПроцедуры

// Обработка расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка) Экспорт
	
	СпособРасшифровки=Расшифровка["СпособРасшифровки"];
	
	Если СпособРасшифровки="Отчет" Тогда
		
		Отчет = Отчеты[Расшифровка["ИмяОбъекта"]].Создать();
		
		Отчет.Настроить(Расшифровка);
		
		ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
		
		ФормаОтчета.ПоказыватьЗаголовок = Расшифровка["ПоказыватьЗаголовок"];
		
		ФормаОтчета.ОбновитьОтчет();
		
		ФормаОтчета.Открыть();
		

	ИначеЕсли Способрасшифровки="Журнал" Тогда
		ФормаЖурнала = РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПолучитьФормуСписка(,, Новый УникальныйИдентификатор());
		
		Если Расшифровка["ВидОборота"]="Д" Тогда
			ФормаЖурнала.Отбор.СчетДт.Значение = Счет;
			ФормаЖурнала.Отбор.СчетДт.ВидСравнения = ВидСравнения.ВИерархии;
			ФормаЖурнала.Отбор.СчетДт.Использование = Истина;
		ИначеЕсли Расшифровка["ВидОборота"]="К" Тогда
			ФормаЖурнала.Отбор.СчетКт.Значение = Счет;
			ФормаЖурнала.Отбор.СчетКт.ВидСравнения = ВидСравнения.ВИерархии;
			ФормаЖурнала.Отбор.СчетКт.Использование = Истина;
		Иначе
			ФормаЖурнала.Отбор.Счет.Значение = Счет;
			ФормаЖурнала.Отбор.Счет.ВидСравнения = ВидСравнения.ВИерархии;
			ФормаЖурнала.Отбор.Счет.Использование = Истина;
		КонецЕсли;
		
		Для Каждого Элемент Из Расшифровка["Отбор"] Цикл
			
			Если Элемент.Ключ="Период" Тогда
				
				ПериодУстановлен = Истина;
				
				ПериодС = Элемент.Значение;
				
				ПериодПо = ПолучитьКонецПериода(ПериодС, Период);
				
				Если ДатаКон<>'00010101' Тогда
					ПериодПо = Мин(КонецДня(ДатаКон), ПериодПо);
				КонецЕсли;
				
				ФормаЖурнала.Отбор.Период.ЗначениеС = ПериодС;
				ФормаЖурнала.Отбор.Период.ЗначениеПо = ПериодПо;
				ФормаЖурнала.Отбор.Период.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
				ФормаЖурнала.Отбор.Период.Использование = Истина;
				
			ИначеЕсли Лев(Элемент.Ключ, СтрДлина("Субконто")) = "Субконто" Тогда
				
				Если НЕ ЗначениеЗаполнено(ФормаЖурнала.Отбор.Субконто1.Значение) Тогда
					ФормаЖурнала.Отбор.Субконто1.Значение = Элемент.Значение;
					ФормаЖурнала.Отбор.Субконто1.ВидСравнения = ВидСравнения.Равно;
					ФормаЖурнала.Отбор.Субконто1.Использование = Истина;
				Иначе
					
					ПрежнееЗначение = ФормаЖурнала.Отбор.Субконто1.Значение;
					Если ТипЗнч(ПрежнееЗначение)<>Тип("СписокЗначений") Тогда
						СписокСубконто = Новый СписокЗначений;
						СписокСубконто.Добавить(ПрежнееЗначение);
					Иначе
						СписокСубконто = ПрежнееЗначение;
					КонецЕсли;
					
					СписокСубконто.Добавить(Элемент.Значение);
					
					
					ФормаЖурнала.Отбор.Субконто1.ВидСравнения = ВидСравнения.ВСписке;
					ФормаЖурнала.Отбор.Субконто1.Значение = СписокСубконто;
					ФормаЖурнала.Отбор.Субконто1.Использование = Истина;
					
				КонецЕсли;
				
			ИначеЕсли Элемент.Ключ= "КорСчет" Тогда
				
				Если Расшифровка["ВидОборота"]="Д" Тогда
					ФормаЖурнала.Отбор.СчетКт.Значение = Элемент.Значение;
					ФормаЖурнала.Отбор.СчетКт.ВидСравнения = ВидСравнения.ВИерархии;
					ФормаЖурнала.Отбор.СчетКт.Использование = Истина;
				ИначеЕсли Расшифровка["ВидОборота"]="К" Тогда
					ФормаЖурнала.Отбор.СчетДт.Значение = Элемент.Значение;
					ФормаЖурнала.Отбор.СчетДт.ВидСравнения = ВидСравнения.ВИерархии;
					ФормаЖурнала.Отбор.СчетДт.Использование = Истина;
				Иначе
					ФормаЖурнала.Отбор.КорСчет.Значение = Элемент.Значение;
					ФормаЖурнала.Отбор.КорСчет.ВидСравнения = ВидСравнения.ВИерархии;
					ФормаЖурнала.Отбор.КорСчет.Использование = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ФормаЖурнала.Отбор.Сценарий.Значение = Сценарий;
		ФормаЖурнала.Отбор.Сценарий.ВидСравнения = ВидСравнения.Равно;
		ФормаЖурнала.Отбор.Сценарий.Использование = ЗначениеЗаполнено(Сценарий);
		
		Если ПериодУстановлен <> Истина Тогда
			ПериодС  = НачалоДня(Расшифровка.ДатаНач);
			Если Расшифровка.ДатаКон <> '00010101' Тогда
				ПериодПо = Расшифровка.ДатаКон;
			Иначе
				ПериодПо = Расшифровка.ДатаКон;
			КонецЕсли;
			Если ПериодС<>'00010101' И ПериодПо<>'00010101' Тогда
				ФормаЖурнала.Отбор.Период.ЗначениеС     = ПериодС;
				ФормаЖурнала.Отбор.Период.ЗначениеПо    = КонецДня(ПериодПо);
				ФормаЖурнала.Отбор.Период.ВидСравнения  = ВидСравнения.ИнтервалВключаяГраницы;
				ФормаЖурнала.Отбор.Период.Использование = Истина;
			ИначеЕсли ПериодС<>'00010101' И ПериодПо='00010101' Тогда
				ФормаЖурнала.Отбор.Период.Значение     = ПериодС;
				ФормаЖурнала.Отбор.Период.ВидСравнения  = ВидСравнения.БольшеИлиРавно;
				ФормаЖурнала.Отбор.Период.Использование = Истина;
			ИначеЕсли ПериодПо<>'00010101' И ПериодС='00010101' Тогда
				ФормаЖурнала.Отбор.Период.Значение     = КонецДня(ПериодПо);
				ФормаЖурнала.Отбор.Период.ВидСравнения  = ВидСравнения.МеньшеИлиРавно;
				ФормаЖурнала.Отбор.Период.Использование = Истина;
			КонецЕсли;
		КонецЕсли; 
		
		ФормаЖурнала.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровкиСтандартногоОтчета()


//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

НП = Новый НастройкаПериода;
НП.ВариантНастройки = ВариантНастройкиПериода.Период;

ИмяРегистраБухгалтерии = "Бюджетирование";
ИмяПланаСчетов = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя;

ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200));

МассивБулево        = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

ОписаниеТиповБулевоИСтрока = Новый ОписаниеТипов(ОписаниеТиповСтрока, МассивБулево);

МассивТаблицаЗначений        = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

МассивСчет = Новый Массив;
МассивСчет.Добавить(ТипЗнч(ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].ПустаяСсылка()));

ОписаниеТиповСчет  = Новый ОписаниеТипов(МассивСчет);

// Создание структуры реквизитов - таблиц
ПравилаВыводаИтогов.Колонки.Очистить();
ПравилаВыводаИтогов.Колонки.Добавить("Счет",     ОписаниеТиповСчет);
ПравилаВыводаИтогов.Колонки.Добавить("Субсчета", ОписаниеТиповБулево);
ПравилаВыводаИтогов.Колонки.Добавить("ПредставлениеРазворотПоСубконто", ОписаниеТиповСтрока);
ПравилаВыводаИтогов.Колонки.Добавить("РазворотПоСубконто", ОписаниеТиповТаблицаЗначений);

МассивШиринКолонок = Новый Массив;
ШиринаТаблицы = 0;

#КонецЕсли