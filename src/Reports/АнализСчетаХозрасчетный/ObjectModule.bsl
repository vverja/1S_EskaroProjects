#Если Клиент Тогда

Перем НП Экспорт;

Перем ИмяРегистраБухгалтерии Экспорт;

Перем МассивШиринКолонок;
Перем ШиринаТаблицы;
Перем СоотвСубконто; // Соответствие имен полей и видов субконто

//////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА
//

Функция ЗаголовокОтчета() Экспорт
	Возврат  "Анализ счета " + ?(ЗначениеЗаполнено(Счет), Счет, " не выбран счет");
КонецФункции

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период: без ограничения.";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
		Иначе
			ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
		КонецЕсли;

	КонецЕсли;
	
	Макет = ПолучитьМакет("Макет");
	
	Если НЕ ПоВалютам Тогда
		Макет.УдалитьОбласть(Макет.Область("ВВалюте"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ ПоСубсчетамИСубконто И ПостроительОтчета.ИзмеренияСтроки.Количество()=0 И Не ЗначениеЗаполнено(Период) И НЕ ПоВалютам Тогда
		Макет.УдалитьОбласть(Макет.Область("КорСчет"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок=Макет.Область("Заголовок");
	
	// После удаления областей нужно установить свойства ПоВыделеннымКолонкам
	Для Сч = 1 По ЗаголовокОтчета.ВысотаТаблицы-1 Цикл
		
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, 2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Макет.Область(ОбластьЗаголовок.Верх+Сч, 2, ОбластьЗаголовок.Верх+Сч, ОбластьЗаголовок.Право).ПоВыделеннымКолонкам = Истина;
		
	КонецЦикла;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	
	Если ПоВалютам Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
	
	КонецЕсли; 

	Если ПоКоличеству Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", количество";
	
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетамИСубконто Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", субсчетам"
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", субконто: " + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	КонецЕсли;
	
	Если ПоКорСубсчетамИСубконто Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", кор.субсчетам и субконто"
	КонецЕсли;

	ТекстПроИтоги = Сред(ТекстПроИтоги, 2);

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

	Возврат Новый ТабличныйДокумент;

КонецФункции // СформироватьЗаголовок()

//////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА
//

// Вывод субконто определенного номера
Процедура ВыводСубконто(Знач ВыборкаОбороты,Знач ВыборкаОстатки, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки)
	
	Если Инд < СтруктураПараметров.МассивСубконто.Количество() Тогда
		
		Измерение = СтруктураПараметров.МассивСубконто[Инд];
		
		ОборотИспользован = УправлениеОтчетами.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		ОстатокИспользован = УправлениеОтчетами.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
		ОстатокПрочитан = Ложь;
		ОборотПрочитан = Ложь;
		
		Пока Истина Цикл
			
			Если ОстатокИспользован Тогда
				ОстатокПрочитан = ВыборкаОстатки.Следующий();
				ОстатокИспользован = Ложь;
			КонецЕсли;
			
			Если ОборотИспользован Тогда
				ОборотПрочитан = ВыборкаОбороты.Следующий();
				ОборотИспользован = Ложь;
			КонецЕсли;
			
			// Оборот сопоставляется с остатком
			Если ОборотПрочитан И ОстатокПрочитан
			   И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			   
				ОборотИспользован = Истина;
				ОстатокИспользован = Истина;
				
			ИначеЕсли ОборотПрочитан И БухгалтерскиеОтчеты.ЭтоНулевойОборот(ВыборкаОбороты, ПоКоличеству) Тогда
				
				ОборотИспользован = Истина;
				
			ИначеЕсли ОстатокПрочитан Тогда
				ОстатокИспользован = Истина;
			КонецЕсли;
			
			Если Не ОстатокИспользован И Не ОборотИспользован Тогда
				Прервать;
			КонецЕсли;
			
			Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
			ВыборкаОборотыПараметр = ?(ОборотИспользован, ВыборкаОбороты, Неопределено);
			ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
				
			// Вывод нач сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСубконто;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[Измерение + "Представление"];
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборДляРасшифровки);
			
			УправлениеОтчетами.УстановитьКурсивПоТипуЗаписи(ВыводимаяОбласть.Область(1, 2), Выборка.ТипЗаписи());
			
			Уровень = Выборка.Уровень();
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
			// Вывод вложенных итогов
			ВыводСубконто(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, Инд+1, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
			
			// Вывод оборота и кон сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСубконто;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			Если ОборотИспользован Тогда
				ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОбороты);
			КонецЕсли;
			Если ОстатокИспользован тогда
				ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОстатки);
			КонецЕсли;
						
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
		КонецЦикла;
		
	ИначеЕсли ВыборкаОбороты <> Неопределено Тогда
		
		ВывестиПериоды(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		
	КонецЕсли;
	
КонецПроцедуры

// Вывод периодов
Процедура ВывестиПериоды(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров, ОтборДляРасшифровки)
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		Измерение = "Период";
		
		ОборотИспользован  = УправлениеОтчетами.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		ОстатокИспользован = УправлениеОтчетами.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
		ОстатокПрочитан = Ложь;
		ОборотПрочитан = Ложь;
		
		Пока Истина Цикл
			
			Если ОстатокИспользован Тогда
				ОстатокПрочитан = ВыборкаОстатки.Следующий();
				ОстатокИспользован = Ложь;
			КонецЕсли;
			
			Если ОборотИспользован Тогда
				ОборотПрочитан = ВыборкаОбороты.Следующий();
				ОборотИспользован = Ложь;
			КонецЕсли;
			
			// Оборот сопоставляется с остатком
			Если ОборотПрочитан И ОстатокПрочитан
			   И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			   
				ОборотИспользован = Истина;
				ОстатокИспользован = Истина;
				
			ИначеЕсли ОборотПрочитан И БухгалтерскиеОтчеты.ЭтоНулевойОборот(ВыборкаОбороты, ПоКоличеству) Тогда
				
				ОборотИспользован = Истина;
				
			ИначеЕсли ОстатокПрочитан Тогда
				ОстатокИспользован = Истина;
			КонецЕсли;
			
			Если Не ОстатокИспользован И Не ОборотИспользован Тогда
				Прервать;
			КонецЕсли;
			
			Если Не ОборотИспользован Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
			ВыборкаОборотыПараметр = ?(ОборотИспользован, ВыборкаОбороты, Неопределено);
			ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
				
			// Вывод начального сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПериод;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборДляРасшифровки);
			
			Уровень = Выборка.Уровень();
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
			// Вывод вложенных итогов
			Если ПоВалютам Тогда
				ВывестиВалюты(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
			Иначе
				ВывестиКорСчета(ВыборкаОборотыПараметр, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
			КонецЕсли;
			
			// Вывод оборота и кон сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогПериод;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			Если ОборотИспользован Тогда
				ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОбороты);
			КонецЕсли;
			Если ОстатокИспользован тогда
				ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОстатки);
			КонецЕсли;
		
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			// Вывод оборота и кон сальдо: конец
			
		КонецЦикла;
		
	Иначе
		
		Если ПоВалютам Тогда
			ВывестиВалюты(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		Иначе
			ВывестиКорСчета(ВыборкаОбороты, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Вывод кор счетов
Процедура ВывестиКорСчета(Знач Выборка, СтруктураПараметров, ОтборДляРасшифровки)

	// Кор счета выводятся всегда
	ВыборкаОбороты = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
	
	ВерхнийУровень = 1000;
	
	Пока ВыборкаОбороты.Следующий() Цикл
		
		ПравилоКорСчета = ПолучитьПравилоКорСчета(ВыборкаОбороты.КорСчет);
		
		Если НЕ ПоКорСубсчетамИСубконто Тогда
			
			// Выводим 2 верхних уровня - классы счетов и счета
			Если ВерхнийУровень < ВыборкаОбороты.Уровень() Тогда
				Если ВерхнийУровень < ВыборкаОбороты.Уровень() - 1 Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				ВерхнийУровень = ВыборкаОбороты.Уровень();
			КонецЕсли;
			
		КонецЕсли;
		
		// Вывод оборота или кон сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаКорСчет;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОбороты);
		
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаОбороты, ОтборДляРасшифровки);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, ВыборкаОбороты.Уровень());
		
		Если ПоКорСубсчетамИСубконто Тогда
			
			ВывестиКорСубконто(ВыборкаОбороты, ПравилоКорСчета, СтруктураПараметров, ОтборДляРасшифровки);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПравилоКорСчета(КорСчет)
	
	ПравилоКорСчета = ПравилаВыводаИтогов.Найти(КорСчет, "Счет");
	Если ПравилоКорСчета <> Неопределено Тогда
		Возврат ПравилоКорСчета; 
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Вывод кор субконто: общая процедура
Процедура ВывестиКорСубконто(Знач ВыборкаОбороты, ПравилоКорСчета, СтруктураПараметров, ОтборДляРасшифровки)

	Если ПравилоКорСчета <> Неопределено Тогда
		
		Если ПравилоКорСчета.РазворотПоСубконто.Количество() > 0 Тогда
			
			ВыводКорСубконто(ВыборкаОбороты, ПравилоКорСчета, 0, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Вывод кор субконто определенного номера
Процедура ВыводКорСубконто(Знач ВыборкаОбороты, ПравилоКорСчета, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки)

	Если Инд >= ПравилоКорСчета.РазворотПоСубконто.Количество() Тогда
		Возврат;
	КонецЕсли;
		
	ВыборкаОбороты = ВыборкаОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Кор" + ПравилоКорСчета.РазворотПоСубконто[Инд].Имя);
		
	Пока ВыборкаОбороты.Следующий() Цикл
			
		// Вывод оборота                       
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаКорСубконто;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);	
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОбороты);
			
		ВыводимаяОбласть.Параметры.КорСубконтоПредставление = ВыборкаОбороты["Кор" + ПравилоКорСчета.РазворотПоСубконто[Инд].Имя];
			
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаОбороты, ОтборДляРасшифровки);
			
		УправлениеОтчетами.УстановитьКурсивПоТипуЗаписи(ВыводимаяОбласть.Область(1, ВыводимаяОбласть.ШиринаТаблицы - 2), ВыборкаОбороты.ТипЗаписи());

		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, ВыборкаОбороты.Уровень());
			
		ВыводКорСубконто(ВыборкаОбороты, ПравилоКорСчета, Инд + 1, СтруктураПараметров, ОтборДляРасшифровки);
			
	КонецЦикла;
		                                            
КонецПроцедуры

// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено)

	Если Не ПоСубсчетамИСубконто ИЛИ Выборка.Счет = Null Тогда
		СчетРасшифровки = Счет;
	Иначе
		СчетРасшифровки = Выборка.Счет;
	КонецЕсли;
	
	СписокРасшифровкиДт = Неопределено;
	СписокРасшифровкиКт = Неопределено;
	
	ПараметрыРасшифровки = Новый Соответствие;
	
	ПараметрыРасшифровки.Вставить("ИмяОбъекта", "ОтчетПоПроводкам"+ИмяРегистраБухгалтерии);
	ПараметрыРасшифровки.Вставить("Счет", СчетРасшифровки);
	ПараметрыРасшифровки.Вставить("СпособРасшифровки", "Отчет");
	
	ПараметрыКарточкиСчета = Новый Структура;
	
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "КарточкаСчета"+ИмяРегистраБухгалтерии);
	ПараметрыКарточкиСчета.Вставить("Счет", СчетРасшифровки);
	ПараметрыКарточкиСчета.Вставить("СпособРасшифровки", "Отчет");

	Если Лев(Выборка.Группировка(), 8) = "Субконто" Тогда

		Если ОтборСубконто <> Неопределено Тогда
			
			Измерение = ПостроительОтчета.ИзмеренияСтроки.Найти(Выборка.Группировка());
			
			ОтборСубконто.Вставить(Измерение.ПутьКДанным, Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
			ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + СчетРасшифровки);
		
	ИначеЕсли Выборка.Группировка() = "Счет" Тогда

		СписокРасшифровки = Новый СписокЗначений;
		
		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + СчетРасшифровки);
		
	ИначеЕсли Выборка.Группировка() = "КорСчет" Тогда

		СписокРасшифровки = Новый СписокЗначений;
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
			//ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;
		
		ПараметрыРасшифровкиДт = БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
		ПараметрыРасшифровкиДт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоДт"), Элемент.Значение);
				
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоКт"), Элемент.Значение);
				
			Иначе
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиДт.Вставить("СчетДт", СчетРасшифровки);
		ПараметрыРасшифровкиДт.Вставить("СчетКт", Выборка.КорСчет);
		
		СписокРасшифровкиДт = Новый СписокЗначений;
		СписокРасшифровкиДт.Добавить(ПараметрыРасшифровкиДт, "Отчет по проводкам " + СчетРасшифровки);
		ПараметрыРасшифровкиКт = БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
		ПараметрыРасшифровкиКт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоКт"), Элемент.Значение);
				
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоДт"), Элемент.Значение);
				
			Иначе
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиКт.Вставить("СчетДт", Выборка.КорСчет);
		ПараметрыРасшифровкиКт.Вставить("СчетКт", СчетРасшифровки);
		
		СписокРасшифровкиКт = Новый СписокЗначений;
		СписокРасшифровкиКт.Добавить(ПараметрыРасшифровкиКт, "Отчет по проводкам " + СчетРасшифровки);
		
		// для счета в целом
		ПараметрыРасшифровки.Вставить("Отбор", Новый Соответствие);
		Для каждого Элемент Из ОтборРасшифровка Цикл
			ПараметрыРасшифровки["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Отчет по проводкам " + СчетРасшифровки);
		
	ИначеЕсли Лев(Выборка.Группировка(), 11) = "КорСубконто" Тогда

		СписокРасшифровки = Новый СписокЗначений;
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
		КонецЕсли;
		
		ПараметрыРасшифровкиДт = БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
		ПараметрыРасшифровкиДт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоДт"), Элемент.Значение);
				
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоКт"), Элемент.Значение);
				
			Иначе
				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиДт.Вставить("СчетДт", СчетРасшифровки);
		ПараметрыРасшифровкиДт.Вставить("СчетКт", Выборка.КорСчет);
		
		СписокРасшифровкиДт = Новый СписокЗначений;
		СписокРасшифровкиДт.Добавить(ПараметрыРасшифровкиДт, "Отчет по проводкам " + СчетРасшифровки);
		ПараметрыРасшифровкиКт = БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
		ПараметрыРасшифровкиКт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоКт"), Элемент.Значение);
				
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоДт"), Элемент.Значение);
				
			Иначе
				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиКт.Вставить("СчетДт", Выборка.КорСчет);
		ПараметрыРасшифровкиКт.Вставить("СчетКт", СчетРасшифровки);
		
		СписокРасшифровкиКт = Новый СписокЗначений;
		СписокРасшифровкиКт.Добавить(ПараметрыРасшифровкиКт, "Отчет по проводкам " + СчетРасшифровки);
		
		// для счета в целом
		ПараметрыРасшифровки.Вставить("Отбор", Новый Соответствие);
		Для каждого Элемент Из ОтборРасшифровка Цикл
			ПараметрыРасшифровки["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Отчет по проводкам " + СчетРасшифровки);
		
	ИначеЕсли Выборка.Группировка() = "Период" Тогда
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ДатаНачПериода = Выборка[Выборка.Группировка()];
			ОтборСубконто.Вставить(Выборка.Группировка(), ДатаНачПериода);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
			ОтборРасшифровкаБезПериода = БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборРасшифровка);
			ОтборРасшифровкаБезПериода.Удалить("Период");
			
			ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровкаБезПериода);
			
			ПараметрыКарточкиСчета.Вставить("ДатаНач", ДатаНачПериода);
			
			ПараметрыКарточкиСчета.Вставить("ДатаКон", ПолучитьКонецПериода(ДатаНачПериода, Период));
			
			СписокРасшифровки = Новый СписокЗначений;
			
			СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + СчетРасшифровки);
			
		КонецЕсли;
		
	Иначе
		СписокРасшифровки = Неопределено;
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;
	
	Если СписокРасшифровкиДт<>Неопределено Тогда
		Область.Параметры.РасшифровкаДт = СписокРасшифровкиДт;
	КонецЕсли;
	Если СписокРасшифровкиКт<>Неопределено Тогда
		Область.Параметры.РасшифровкаКт = СписокРасшифровкиКт;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

Процедура УстановитьПараметрыЗапроса(Запрос)
	
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаНач='00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач+1);
	КонецЕсли;
	
	Если ДатаКон <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Иначе
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	КонецЕсли;

КонецПроцедуры

Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Сумма");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;

	Возврат МассивПоказателей;
		
КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!", 60);
		Возврат;
	КонецЕсли;

	ОграничениеПоДатамКорректно = БухгалтерскиеОтчеты.ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
		Возврат;
	КонецЕсли;

	// Запоминание ширины колонки
	Если НЕ ДокументРезультат.ВысотаТаблицы = ВысотаЗаголовка Тогда

		МассивШиринКолонок.Очистить();

		// Запоминать следует, если документ не пустой
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			
			Для Сч=1 По ШиринаТаблицы Цикл
				МассивШиринКолонок.Добавить(ДокументРезультат.Область(1,Сч).ШиринаКолонки);
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

	ДокументРезультат.Очистить();
	
	МассивРесурсов = СформироватьМассивПоказателей();

	ЗапросОбороты = Новый Запрос;
	ЗапросОстатки = Новый Запрос;
	УстановитьПараметрыЗапроса(ЗапросОбороты);
	УстановитьПараметрыЗапроса(ЗапросОстатки);
	
	Периодичность = Период;
	
	ТекстСубконто = "";
	ТекстСубконтоИзмерения = "";
	
	ТекстОтбор = "";
	
	МассивСубконто = Новый Массив;
	
	СоотТипыИзмерений = Новый Соответствие;
	СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.Иерархия, " ИЕРАРХИЯ");
	СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.ТолькоИерархия, " ТОЛЬКО ИЕРАРХИЯ");
	СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.Элементы, "");
	
	// Субконто отчета
	Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		
		Измерение = ПостроительОтчета.ИзмеренияСтроки[Инд];
		
		ТекстСубконтоИзмерения  = ТекстСубконтоИзмерения + ", 
		|	" + Измерение.ПутьКДанным + СоотТипыИзмерений[Измерение.ТипИзмерения] + " КАК " + Измерение.Имя;
		
		ТекстСубконто = ТекстСубконто + "
		|	" + Измерение.ПутьКДанным + " КАК " + Измерение.Имя + ",
		|	ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление" + ",";
		
		МассивСубконто.Добавить(Измерение.Имя);
		
	КонецЦикла;
	
	ОтборСубконто = Новый Соответствие;
	
	Сч = 0;
	Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
		
		Если НЕ Элемент.Использование ИЛИ ПустаяСтрока(Элемент.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
	
		ТекстОтбор = ТекстОтбор + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(Элемент.ВидСравнения, "&Значение"+Сч, Элемент.ПутьКДанным, "&ЗначениеС"+Сч, "&ЗначениеПо"+Сч, Элемент.Значение, Элемент.ЗначениеС, Элемент.ЗначениеПо);
		
		ВидСр = новый Структура;
		ВидСр.Вставить("Значение",Элемент.Значение);
		ВидСр.Вставить("ВидСравнения",Элемент.ВидСравнения);
		ОтборСубконто.Вставить(Элемент.ПутьКДанным, ВидСр);
		
		БухгалтерскиеОтчеты.УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(ЗапросОбороты, Элемент, Строка(Сч));
		БухгалтерскиеОтчеты.УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(ЗапросОстатки, Элемент, Строка(Сч));
				
		Сч=Сч+1;
	
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстОтбор = ТекстОтбор + " И Организация = &Организация";
	КонецЕсли;
	
	СоответствиеКорСубконто = Новый Соответствие;
	
	Если ПоКорСубсчетамИСубконто Тогда
		
		Для Каждого Строка Из ПравилаВыводаИтогов Цикл
			
			Для Каждого СтрокаРазворота Из Строка.РазворотПоСубконто Цикл
				
				СоответствиеКорСубконто.Вставить(СтрокаРазворота.Имя, СтрокаРазворота.Имя);
			
			КонецЦикла; 
			
		КонецЦикла;
	
	КонецЕсли; 
	
	ТекстКорСубконто = "";
	ТекстКорСубконтоИтоги = "";
	Для Каждого Элемент Из СоответствиеКорСубконто Цикл
		
		ТекстКорСубконто      = ТекстКорСубконто             + "Кор" +Элемент.Ключ          + " КАК " + "Кор" +Элемент.Ключ + ",";
		ТекстКорСубконтоИтоги = ТекстКорСубконтоИтоги + ", " + "Кор" +Элемент.Ключ + " ИЕРАРХИЯ КАК " + "Кор" +Элемент.Ключ;
		
	КонецЦикла;
	
	Если ПоСубсчетамИСубконто Тогда
		
		ТекстСчет = 
		"	Счет КАК Счет, 
		|	Счет.Вид КАК ВидСчета, 
		|	Счет.Порядок КАК СчетПорядок, 
		|	Счет.Представление КАК СчетПредставление,";
		
	Иначе
		
		ТекстСчет = "";
		
	КонецЕсли;
		
	ТекстОбороты = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстСчет + ТекстСубконто + "
	|	КорСчет.Ссылка КАК КорСчет, 
	|	КорСчет.Порядок КАК КорСчетПорядок, 
	|	КорСчет.Представление КАК КорСчетПредставление," + ТекстКорСубконто + "";
	
	ТекстОстатки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстСчет +  ТекстСубконто + "";
		
	Если ПоВалютам Тогда
		
		ТекстПоВалютам = " Таблица.Валюта КАК Валюта, Таблица.Валюта.Представление КАК ВалютаПредставление,";
		ТекстОбороты = ТекстОбороты + ТекстПоВалютам;
		ТекстОстатки = ТекстОстатки + ТекстПоВалютам;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		ТекстОбороты = ТекстОбороты + " Период,";
		ТекстОстатки = ТекстОстатки + " Период,";
		
	КонецЕсли;
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		ТекстОбороты = ТекстОбороты + "
		|	" +ИмяРесурса+ "ОборотДт КАК " +ИмяРесурса+ "ОборотДт,
		|	" +ИмяРесурса+ "ОборотКт КАК " +ИмяРесурса+ "ОборотКт,";
		ТекстРазвернутоеСальдо = ?(РазвернутоеСальдо, "Развернутый", "");
		ТекстОстатки = ТекстОстатки + "
		|	" +ИмяРесурса+ "Начальный" + ТекстРазвернутоеСальдо + "ОстатокДт КАК " +ИмяРесурса+ "НачДт,
		|	" +ИмяРесурса+ "Начальный" + ТекстРазвернутоеСальдо + "ОстатокКт КАК " +ИмяРесурса+ "НачКт,
		|	" +ИмяРесурса+ "Конечный"  + ТекстРазвернутоеСальдо + "ОстатокДт КАК " +ИмяРесурса+ "КонДт,
		|	" +ИмяРесурса+ "Конечный"  + ТекстРазвернутоеСальдо + "ОстатокКт КАК " +ИмяРесурса+ "КонКт,
		|	" +ИмяРесурса+ "ОборотДт КАК " +ИмяРесурса+ "ЕстьОборотДт,
		|	" +ИмяРесурса+ "ОборотКт КАК " +ИмяРесурса+ "ЕстьОборотКт,";
		
	КонецЦикла;
	ТекстОстатки = Лев(ТекстОстатки, СтрДлина(ТекстОстатки) - 1);
	ТекстОбороты = Лев(ТекстОбороты, СтрДлина(ТекстОбороты) - 1);
	
	ТекстОбороты = ТекстОбороты + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(&ДатаНач, &ДатаКон, "+Периодичность+", Счет В ИЕРАРХИИ (&Счет), , " + Сред(ТекстОтбор, 3) + ") КАК Таблица
	|";
	
	ТекстОстатки = ТекстОстатки + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, "+Периодичность+", ДвиженияИГраницыПериода, счет В ИЕРАРХИИ (&счет), , " + Сред(ТекстОтбор, 3) + ") КАК Таблица
	|";
	
	ТекстИтогиОбороты = "";
	ТекстИтогиОстатки = "";
	ТекстПорядок = "";
	
	Если ПоСубсчетамИСубконто Тогда
		
		ТекстПорядок = ТекстПорядок + ", СчетПорядок";
		
	КонецЕсли;
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		ТекстПорядок = ТекстПорядок + ", " + Измерение.Имя;

	КонецЦикла;
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		ТекстПорядок = ТекстПорядок + ", Период";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		ТекстПорядок = ТекстПорядок + ", Валюта";
	КонецЕсли;
	
	ТекстОбороты = ТекстОбороты + "
	|УПОРЯДОЧИТЬ ПО " + Сред(ТекстПорядок + ", КорСчетПорядок", 2);
	
	Если Не ПустаяСтрока(ТекстПорядок) Тогда
		
		ТекстОстатки = ТекстОстатки + "
		|УПОРЯДОЧИТЬ ПО " + Сред(ТекстПорядок, 2);
		
	КонецЕсли;
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		ТекстИтогиОбороты = ТекстИтогиОбороты + ",
		|	СУММА(" +ИмяРесурса+ "ОборотДт),
		|	СУММА(" +ИмяРесурса+ "ОборотКт)";

		ТекстИтогиОстатки = ТекстИтогиОстатки + ",
		|	СУММА(" +ИмяРесурса+ "НачДт),
		|	СУММА(" +ИмяРесурса+ "НачКт),
		|	СУММА(" +ИмяРесурса+ "КонДт),
		|	СУММА(" +ИмяРесурса+ "КонКт),
		|	СУММА(" +ИмяРесурса+ "ЕстьОборотДт),
		|	СУММА(" +ИмяРесурса+ "ЕстьОборотКт)";

	КонецЦикла; 
	
	ТекстОбороты = ТекстОбороты + "
	|ИТОГИ " + Сред(ТекстИтогиОбороты, 2)+ "
	|	ПО ОБЩИЕ";
	
	ТекстОстатки = ТекстОстатки + "
	|ИТОГИ " + Сред(ТекстИтогиОстатки, 2)+ "
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетамИСубконто Тогда
		
		ТекстОбороты = ТекстОбороты +	",
		|	Счет ИЕРАРХИЯ КАК Счет";
		ТекстОстатки = ТекстОстатки +	",
		|	Счет ИЕРАРХИЯ КАК Счет";
		
	КонецЕсли;
	
	// добавим итоги по субконто
	ТекстОбороты = ТекстОбороты + ТекстСубконтоИзмерения;
	ТекстОстатки = ТекстОстатки + ТекстСубконтоИзмерения;
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		ТекстОбороты = ТекстОбороты + ", Период КАК Период";
		ТекстОстатки = ТекстОстатки + ", Период КАК Период";
		
	КонецЕсли;
	
	ТекстОбороты = ТекстОбороты + ", КорСчет ИЕРАРХИЯ КАК КорСчет";
	
	ТекстОбороты = ТекстОбороты + ТекстКорСубконтоИтоги;
	
	Если ПоВалютам Тогда
		ТекстОбороты = ТекстОбороты + ", Валюта КАК Валюта";
		ТекстОстатки = ТекстОстатки + ", Валюта КАК Валюта";
	КонецЕсли;

	
	ТекстОбороты = ТекстОбороты + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекстОстатки = ТекстОстатки + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ЗапросОбороты.Текст = ТекстОбороты;
	ЗапросОстатки.Текст = ТекстОстатки;
	
	Состояние("Выполнение запроса");
	
	РезультатОбороты = ЗапросОбороты.Выполнить();
	РезультатОстатки = ЗапросОстатки.Выполнить();
	
	Макет = ПолучитьМакет("Макет");
	
	Если НЕ ПоВалютам Тогда
		Макет.УдалитьОбласть(Макет.Область("ВВалюте"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ ПоСубсчетамИСубконто И ПостроительОтчета.ИзмеренияСтроки.Количество()=0 И Не ЗначениеЗаполнено(Период) И НЕ ПоВалютам Тогда
		Макет.УдалитьОбласть(Макет.Область("Счет"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;

	// Вывод заголовка отчета
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка  = ОбластьЗаголовка.ВысотаТаблицы;
	
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);

	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
	ОбластьЗаголовкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьЗаголовкаТаблицы.Параметры.Д="Д";
	ОбластьЗаголовкаТаблицы.Параметры.К="К";
	ДокументРезультат.Вывести(ОбластьЗаголовкаТаблицы, 1);
	
	// Счет
	ОбластьСтрокаСчет       = Макет.ПолучитьОбласть("СтрокаСчет");
	ОбластьИтогСчет         = Макет.ПолучитьОбласть("ИтогСчет");
	
	// Валюта
	ОбластьСтрокаВалюта       = Макет.ПолучитьОбласть("СтрокаВалюта");
	ОбластьИтогВалюта         = Макет.ПолучитьОбласть("ИтогВалюта");
	
	// Субконто
	// Для вывода количества используются другие области
	СтрокаКоличество = ?(ПоКоличеству, "Количество", "");
	
	ОбластьСтрокаСубконто  = Макет.ПолучитьОбласть("СтрокаСубконто" + СтрокаКоличество);
	ОбластьИтогСубконто    = Макет.ПолучитьОбласть("ИтогСубконто" + СтрокаКоличество);
	
	// Для вывода количества используются другие области
	СтрокаКоличество = ?(ПоКоличеству И (МассивСубконто.Количество()>0), "Количество", "");
	ОбластьСтрокаПериод  = Макет.ПолучитьОбласть("СтрокаПериод" + СтрокаКоличество);
	ОбластьИтогПериод    = Макет.ПолучитьОбласть("ИтогПериод" + СтрокаКоличество);
	
	// КорСчет
	ОбластьСтрокаКорСчет       = Макет.ПолучитьОбласть("СтрокаКорСчет" + СтрокаКоличество);
	
	// КорСубконто
	ОбластьСтрокаКорСубконто  = Макет.ПолучитьОбласть("СтрокаКорСубконто" + СтрокаКоличество);
	
	Если ЗначениеЗаполнено(Период) Тогда
		ФорматПериода = "";
		Если Врег(Период) = "ГОД" Тогда
			ФорматПериода = "ДФ = ""гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "КВАРТАЛ" Тогда
			ФорматПериода = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "МЕСЯЦ" Тогда
			ФорматПериода = "ДФ = ""ММММ гггг """"г.""""""";
		ИначеЕсли Врег(Период) = "НЕДЕЛЯ" Тогда
			ФорматПериода = "ДФ = """"""Неделя с"""" дд.ММ.гггг """"""";
		ИначеЕсли Врег(Период) = "ДЕНЬ" Тогда
			ФорматПериода = "ДЛФ = D";
		КонецЕсли;
		ОбластьСтрокаПериод.Область(1,2).Формат = ФорматПериода;
	КонецЕсли;

	// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
	СдвигУровня = 0;
	
	// Флаг сброса сдвига уровня при выводе группировки по счету
	СброситьСдвигУровня = Истина;

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ОбластьСтрокаСчет", ОбластьСтрокаСчет);
	СтруктураПараметров.Вставить("ОбластьИтогСчет", ОбластьИтогСчет);
	СтруктураПараметров.Вставить("ОбластьСтрокаВалюта", ОбластьСтрокаВалюта);
	СтруктураПараметров.Вставить("ОбластьИтогВалюта", ОбластьИтогВалюта);
		
	СтруктураПараметров.Вставить("ОбластьСтрокаКорСчет", ОбластьСтрокаКорСчет);
	
	СтруктураПараметров.Вставить("ОбластьСтрокаПериод",ОбластьСтрокаПериод);
	СтруктураПараметров.Вставить("ОбластьИтогПериод",ОбластьИтогПериод);
	
	СтруктураПараметров.Вставить("ОбластьСтрокаСубконто", ОбластьСтрокаСубконто);
	СтруктураПараметров.Вставить("ОбластьИтогСубконто", ОбластьИтогСубконто);
	
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	
	СтруктураПараметров.Вставить("ОбластьСтрокаКорСубконто", ОбластьСтрокаКорСубконто);
	
	СтруктураПараметров.Вставить("МассивСубконто", МассивСубконто);
	
	// Вывод отчета
	ОбщийИтогОбороты = РезультатОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ОбщийИтогОстатки = РезультатОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ЕстьИтог = ОбщийИтогОстатки.Следующий();
	ОбщийИтогОбороты.Следующий();
	ОбластьНачало = Макет.ПолучитьОбласть("НачалоОтчет");
	ОбластьНачало.Параметры.Заполнить(ОбщийИтогОстатки);
	
	ДокументРезультат.Вывести(ОбластьНачало);

	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	ВывестиСчета(РезультатОбороты, РезультатОстатки, СтруктураПараметров, ОтборСубконто);
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Итого по отчету
	ОбластьИтог = Макет.ПолучитьОбласть("ИтогОтчет");
	ОбластьИтог.Параметры.Заполнить(ОбщийИтогОбороты);
	
	Если ЕстьИтог Тогда
		ОбластьИтог.Параметры.Заполнить(ОбщийИтогОстатки);
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьИтог);
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;
	Если РольДоступна("ГруппаА") Тогда
		//НП = НастройкаКомпоновкиДанных.ПараметрыДанных.Элементы[1];
		//КП = НастройкаКомпоновкиДанных.ПараметрыДанных.Элементы[0];
		Если ДатаНач < ПараметрыСеанса.КонтрольнаяДатаОграничения Тогда
			ДатаНач = НачалоДня(ПараметрыСеанса.КонтрольнаяДатаОграничения);
			Если ДатаНач > ДатаКон Тогда
				ДатаКон = ДатаНач;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
	
	СтруктураНастроекОтчета.Вставить("Период", Период);
	НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);


	ДокументРезультат.Область(1, 1).Расшифровка = СтруктураНастроекОтчета;
	
	// Обведение таблицы отчета линией, как в области границы
	ТолстаяЛиния = ОбластьИтог.Область(ОбластьИтог.ВысотаТаблицы, 2).ГраницаСнизу;
	
	ДокументРезультат.Область(ВысотаЗаголовка + 2, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
	
	ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
	
	// Восстановление ширин колонок
	Если ТипЗнч(МассивШиринКолонок) = Тип("Массив") Тогда
		Если МассивШиринКолонок.Количество() = ШиринаТаблицы Тогда
			Инд = 0;
			Для Каждого Элемент Из МассивШиринКолонок Цикл
				ДокументРезультат.Область(, 1 + Инд, , 1 + Инд).ШиринаКолонки = Элемент;
				Инд = Инд + 1;             
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "АнализСчета"+ИмяРегистраБухгалтерии;
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры

// Вывод счетов
Процедура ВывестиСчета(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров, ОтборСубконто)

	Если Не ПоСубсчетамИСубконто Тогда
		ВывестиСубконто(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, ОтборСубконто);
		Возврат;
	КонецЕсли;
		
	Измерение = "Счет";
	
	ОборотИспользован  = УправлениеОтчетами.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, Измерение);
	ОстатокИспользован = УправлениеОтчетами.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, Измерение);
	
	ОстатокПрочитан = Ложь;
	ОборотПрочитан = Ложь;
		
	Пока Истина Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если ОстатокИспользован Тогда
			ОстатокПрочитан = ВыборкаОстатки.Следующий();
			ОстатокИспользован = Ложь;
		КонецЕсли;
		
		Если ОборотИспользован Тогда
			ОборотПрочитан = ВыборкаОбороты.Следующий();
			ОборотИспользован = Ложь;
		КонецЕсли;
		
		// Оборот сопоставляется с остатком
		Если ОборотПрочитан И ОстатокПрочитан
			И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			
			ОборотИспользован = Истина;
			ОстатокИспользован = Истина;
			
		ИначеЕсли ОборотПрочитан И БухгалтерскиеОтчеты.ЭтоНулевойОборот(ВыборкаОбороты, ПоКоличеству) Тогда
			
			ОборотИспользован = Истина;
			
		ИначеЕсли ОстатокПрочитан Тогда
			ОстатокИспользован = Истина;
		КонецЕсли;
		
		Если Не ОстатокИспользован И Не ОборотИспользован Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
		ВыборкаОборотыПараметр = ?(ОборотИспользован,  ВыборкаОбороты, Неопределено);
		ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
		
		// Вывод начального сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчет;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборСубконто);
		
		Уровень = Выборка.Уровень();
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
		// Вывод вложенных итогов
		ВывестиСубконто(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров, ОтборСубконто);
		ВывестиСчета(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров, ОтборСубконто);
			
		// Вывод оборота и кон сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСчет;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		Если ОборотИспользован Тогда
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОбороты);
		КонецЕсли;
		Если ОстатокИспользован тогда
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОстатки);
		КонецЕсли;
			
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборСубконто);
			
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьПараметрыОбласти(Область)
	
	Для Индекс = 0 По Область.Параметры.Количество() - 1 Цикл
		Область.Параметры.Установить(Индекс, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

Процедура СледующийОборот(Выборка, ИмяИзмерения = Неопределено, ЗначениеИзмерения = Неопределено)
	
	// В выборке могу быть строки без оборотов но с остатками, их пропускаем
	Если ИмяИзмерения <> Неопределено Тогда
		СтруктураПоиска = Новый Структура(ИмяИзмерения, ЗначениеИзмерения);
	КонецЕсли;
		
	Пока ИмяИзмерения = Неопределено И Выборка.Следующий() 
	 ИЛИ Выборка.НайтиСледующий(СтруктураПоиска) Цикл
		Если ВЧисло(Выборка.СуммаЕстьОборотДт) = 0 И ВЧисло(Выборка.СуммаЕстьОборотКт) = 0 
			И (Не ПоКоличеству ИЛИ ВЧисло(Выборка.КоличествоЕстьОборотДт) = 0 И ВЧисло(Выборка.КоличествоЕстьОборотКт)) = 0 Тогда
			Продолжить;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Вывод валют
Процедура ВывестиВалюты(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров, ОтборДляРасшифровки)
	
	ВыборкаВалютОбороты = ВыборкаОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
	ВыборкаВалютОстатки = ВыборкаОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
		
	ЕстьПериоды = ЗначениеЗаполнено(Период);
	
	Пока ВыборкаВалютОбороты.Следующий() Цикл
		
		// Ищем следующий остаток по той же валюте, по которой оборот
		СледующийОборот(ВыборкаВалютОстатки, "Валюта", ВыборкаВалютОбороты.Валюта);
		
		// Вывод нач сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалюта;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалютОстатки);
		
		Уровень = ВыборкаВалютОбороты.Уровень();
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаВалютОбороты, ВыборкаВалютОстатки);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		// Вывод начального сальдо: конец
		
		// Вывод вложенных итогов
		ВывестиКорСчета(ВыборкаВалютОбороты, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		// Вывод вложенных итогов: конец
		
		// Вывод оборота и кон сальдо
		
		ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогВалюта;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалютОбороты);
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалютОстатки);
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаВалютОбороты, ВыборкаВалютОстатки);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		
	КонецЦикла;

КонецПроцедуры

// Вывод субконто: общая процедура
Процедура ВывестиСубконто(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров, ОтборСубконто)

	Если СтруктураПараметров.МассивСубконто.Количество() > 0 Тогда
		ВыводСубконто(ВыборкаОбороты, ВыборкаОстатки, 0, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто));
	ИначеЕсли ВыборкаОбороты <> Неопределено Тогда
		ВывестиПериоды(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто));
	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Обработчик события начала выбора значения субконто
//
// Параметры:
//	Элемент управления.
//	Стандартная обработка.
//
Процедура НачалоВыбораЗначенияСубконто(Элемент, СтандартнаяОбработка, ТипЗначенияПоля=Неопределено) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДатаКон);
	СписокПараметров.Вставить("СчетУчета",    Счет);
	СписокПараметров.Вставить("Номенклатура", Неопределено);
	СписокПараметров.Вставить("Склад", Неопределено);
	СписокПараметров.Вставить("Организация",  Организация);
	СписокПараметров.Вставить("Контрагент",  Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	СписокПараметров.Вставить("ЭтоНовыйДокумент", Ложь);
	
	
	// Поищем значения в отборе и в полях выбора субконто
	Для Инд=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		СтрокаОтбора = ПостроительОтчета.Отбор[Инд];
		
		ЗначениеОтбора=?(ТипЗнч(СтрокаОтбора.Значение)<> Тип("СписокЗначений"), СтрокаОтбора.Значение, СтрокаОтбора.Значение[0].Значение);
		
		Если СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
			СписокПараметров.Вставить("Склад", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
		ИначеЕсли СтрокаОтбора.ТипЗначения = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров, ТипЗначенияПоля);
	
КонецПроцедуры // ОбработкаВыбораСубконто()

// Преобразование значения из выборки результат запроса в число.
Функция ВЧисло(Значение)
	
	Если Значение=NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции // ВЧисло()

// Получение даты конца периода по заданной периодичности и началу периода
//
// Параметры:
//   ПериодС      - Начало периода
//   СтдПериод    - Периодичность: ДЕНЬ, НЕДЕЛЯ, ДЕКАДА, МЕСЯЦ, КВАРТАЛ, ПОЛУГОДИЕ, ГОД
//
// Возвращаемое значение:
//   Дата         - Рассчитанный конец периода
Функция ПолучитьКонецПериода(ПериодС, СтдПериод)
	
	Перем Период;
	
	Период = Врег(СтдПериод);
	
	Если Период = "ДЕНЬ" Тогда
		ПериодПо = КонецДня(ПериодС);
	ИначеЕсли Период = "НЕДЕЛЯ" Тогда
		ПериодПо = КонецНедели(ПериодС);
	ИначеЕсли Период = "ДЕКАДА" Тогда
		ПериодПо = ПериодС + 10 * 24 * 60 * 60 - 1;
	ИначеЕсли Период = "МЕСЯЦ" Тогда
		ПериодПо = КонецДня(КонецМесяца(ПериодС));
	ИначеЕсли Период = "КВАРТАЛ" Тогда
		ПериодПо = КонецДня(КонецКвартала(ПериодС));
	ИначеЕсли Период = "ПОЛУГОДИЕ" Тогда
		
		СерединаГода = КонецМесяца(ДобавитьМесяц(НачалоГода(ПериодС), 6));
		
		Если ПериодС<= СерединаГода Тогда
			ПериодПо = СерединаГода;
		Иначе
			ПериодПо = КонецДня(КонецГода(ПериодС));
		КонецЕсли;
		
	ИначеЕсли Период = "ГОД" Тогда
		ПериодПо = КонецДня(КонецГода(ПериодС));
	КонецЕсли;
	
	Возврат ПериодПо;
	
КонецФункции // ПолучитьКонецПериода()

// Заполнение начальных настроек построителя отчетов
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт";
	
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		ТекстПоля = ТекстПоля + ", ОстаткиИОбороты.Субконто" +Сч+" КАК Субконто"+Сч;
		ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
		//ТекстИтоги = ТекстИтоги + ", Субконто"+Сч;
		ТекстИтоги = ТекстИтоги + ", Субконто"+Сч+".*";
			
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		Текст = Текст + "
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля
		, 2) 
		+ "}";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		ТекстОтбор = "{"+Сред(ТекстОтбор, 2)+"}";
	КонецЕсли;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(, , МЕСЯЦ, , Счет В ИЕРАРХИИ (&Счет), , "+ТекстОтбор+") КАК ОстаткиИОбороты
	|
	|ИТОГИ СУММА(СуммаОборотКт) ПО ОБЩИЕ";
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст + "
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги 
		, 2) + "}";
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
	ПостроительОтчета.Параметры.Вставить("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
		
		ПостроительОтчета.Отбор.Добавить("Субконто"+Сч);
	КонецЦикла;
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);

КонецПроцедуры

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	ПоВалютам = Счет.Валютный;
	
	ПоКоличеству = Счет.Количественный;
	
	ПоСубсчетам = Истина;
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 

	Счет = Параметры["Счет"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
		ПоСубсчетамИСубконто = Параметры["ПоСубсчетамИСубконто"];
		ПоКорСубсчетамИСубконто = Параметры["ПоКорСубсчетамИСубконто"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	
	БухгалтерскиеОтчеты.ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);

КонецПроцедуры

// Обработка расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка) Экспорт
	
	СпособРасшифровки=Расшифровка["СпособРасшифровки"];
	
	Если СпособРасшифровки="Отчет" Тогда
		
		Отчет = Отчеты[Расшифровка["ИмяОбъекта"]].Создать();
		
		Отчет.Настроить(Расшифровка);
		
		ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
		
		ФормаОтчета.ПоказыватьЗаголовок = Расшифровка["ПоказыватьЗаголовок"];
		
		ФормаОтчета.ОбновитьОтчет();
		
		ФормаОтчета.Открыть();
		

	ИначеЕсли Способрасшифровки="Журнал" Тогда
		ФормаЖурнала = РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПолучитьФормуСписка(,, Новый УникальныйИдентификатор());
		
		Если Расшифровка["ВидОборота"]="Д" Тогда
			ФормаЖурнала.Отбор.СчетДт.Значение = Счет;
			ФормаЖурнала.Отбор.СчетДт.ВидСравнения = ВидСравнения.ВИерархии;
			ФормаЖурнала.Отбор.СчетДт.Использование = Истина;
		ИначеЕсли Расшифровка["ВидОборота"]="К" Тогда
			ФормаЖурнала.Отбор.СчетКт.Значение = Счет;
			ФормаЖурнала.Отбор.СчетКт.ВидСравнения = ВидСравнения.ВИерархии;
			ФормаЖурнала.Отбор.СчетКт.Использование = Истина;
		Иначе
			ФормаЖурнала.Отбор.Счет.Значение = Счет;
			ФормаЖурнала.Отбор.Счет.ВидСравнения = ВидСравнения.ВИерархии;
			ФормаЖурнала.Отбор.Счет.Использование = Истина;
		КонецЕсли;
		
		Для Каждого Элемент Из Расшифровка["Отбор"] Цикл
			
			Если Элемент.Ключ="Период" Тогда
				
				ПериодУстановлен = Истина;
				
				ПериодС = Элемент.Значение;
				
				ПериодПо = ПолучитьКонецПериода(ПериодС, Период);
				
				Если ДатаКон<>'00010101' Тогда
					ПериодПо = Мин(КонецДня(ДатаКон), ПериодПо);
				КонецЕсли;
				
				ФормаЖурнала.Отбор.Период.ЗначениеС = ПериодС;
				ФормаЖурнала.Отбор.Период.ЗначениеПо = ПериодПо;
				ФормаЖурнала.Отбор.Период.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
				ФормаЖурнала.Отбор.Период.Использование = Истина;
				
			ИначеЕсли Лев(Элемент.Ключ, СтрДлина("Субконто")) = "Субконто" Тогда
				
				Если Не ЗначениеЗаполнено(ФормаЖурнала.Отбор.Субконто1.Значение) Тогда
					ФормаЖурнала.Отбор.Субконто1.Значение = Элемент.Значение;
					ФормаЖурнала.Отбор.Субконто1.ВидСравнения = ВидСравнения.Равно;
					ФормаЖурнала.Отбор.Субконто1.Использование = Истина;
				Иначе
					
					ПрежнееЗначение = ФормаЖурнала.Отбор.Субконто1.Значение;
					Если ТипЗнч(ПрежнееЗначение)<>Тип("СписокЗначений") Тогда
						СписокСубконто = Новый СписокЗначений;
						СписокСубконто.Добавить(ПрежнееЗначение);
					Иначе
						СписокСубконто = ПрежнееЗначение;
					КонецЕсли;
					
					СписокСубконто.Добавить(Элемент.Значение);
					
					
					ФормаЖурнала.Отбор.Субконто1.ВидСравнения = ВидСравнения.ВСписке;
					ФормаЖурнала.Отбор.Субконто1.Значение = СписокСубконто;
					ФормаЖурнала.Отбор.Субконто1.Использование = Истина;
					
				КонецЕсли;
				
			ИначеЕсли Элемент.Ключ= "КорСчет" Тогда
				
				Если Расшифровка["ВидОборота"]="Д" Тогда
					ФормаЖурнала.Отбор.СчетКт.Значение = Элемент.Значение;
					ФормаЖурнала.Отбор.СчетКт.ВидСравнения = ВидСравнения.ВИерархии;
					ФормаЖурнала.Отбор.СчетКт.Использование = Истина;
				ИначеЕсли Расшифровка["ВидОборота"]="К" Тогда
					ФормаЖурнала.Отбор.СчетДт.Значение = Элемент.Значение;
					ФормаЖурнала.Отбор.СчетДт.ВидСравнения = ВидСравнения.ВИерархии;
					ФормаЖурнала.Отбор.СчетДт.Использование = Истина;
				Иначе
					ФормаЖурнала.Отбор.КорСчет.Значение = Элемент.Значение;
					ФормаЖурнала.Отбор.КорСчет.ВидСравнения = ВидСравнения.ВИерархии;
					ФормаЖурнала.Отбор.КорСчет.Использование = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ФормаЖурнала.Отбор.Организация.Значение = Организация;
		ФормаЖурнала.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
		ФормаЖурнала.Отбор.Организация.Использование = ЗначениеЗаполнено(Организация);
		
		Если ПериодУстановлен <> Истина Тогда
			ПериодС  = НачалоДня(Расшифровка.ДатаНач);
			Если Расшифровка.ДатаКон <> '00010101' Тогда
				ПериодПо = Расшифровка.ДатаКон;
			Иначе
				ПериодПо = Расшифровка.ДатаКон;
			КонецЕсли;
			Если ПериодС<>'00010101' И ПериодПо<>'00010101' Тогда
				ФормаЖурнала.Отбор.Период.ЗначениеС     = ПериодС;
				ФормаЖурнала.Отбор.Период.ЗначениеПо    = КонецДня(ПериодПо);
				ФормаЖурнала.Отбор.Период.ВидСравнения  = ВидСравнения.ИнтервалВключаяГраницы;
				ФормаЖурнала.Отбор.Период.Использование = Истина;
			ИначеЕсли ПериодС<>'00010101' И ПериодПо='00010101' Тогда
				ФормаЖурнала.Отбор.Период.Значение     = ПериодС;
				ФормаЖурнала.Отбор.Период.ВидСравнения  = ВидСравнения.БольшеИлиРавно;
				ФормаЖурнала.Отбор.Период.Использование = Истина;
			ИначеЕсли ПериодПо<>'00010101' И ПериодС='00010101' Тогда
				ФормаЖурнала.Отбор.Период.Значение     = КонецДня(ПериодПо);
				ФормаЖурнала.Отбор.Период.ВидСравнения  = ВидСравнения.МеньшеИлиРавно;
				ФормаЖурнала.Отбор.Период.Использование = Истина;
			КонецЕсли;
		КонецЕсли; 
		
		ФормаЖурнала.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровкиСтандартногоОтчета()

//////////////////////////////////////////////////////////
// МОДУЛЬ ОБЪЕКТА
//

НП = Новый НастройкаПериода;
НП.ВариантНастройки = ВариантНастройкиПериода.Период;

ИмяРегистраБухгалтерии = "Хозрасчетный";

ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200));

МассивБулево        = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

ОписаниеТиповБулевоИСтрока = Новый ОписаниеТипов(ОписаниеТиповСтрока, МассивБулево);

МассивТаблицаЗначений        = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

МассивСчет = Новый Массив;
МассивСчет.Добавить(ТипЗнч(ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].ПустаяСсылка()));

ОписаниеТиповСчет  = Новый ОписаниеТипов(МассивСчет);
                                           
// Создание структуры реквизитов - таблиц
ПравилаВыводаИтогов.Колонки.Очистить();
ПравилаВыводаИтогов.Колонки.Добавить("Счет",     ОписаниеТиповСчет);
ПравилаВыводаИтогов.Колонки.Добавить("Субсчета", ОписаниеТиповБулево);
ПравилаВыводаИтогов.Колонки.Добавить("ПредставлениеРазворотПоСубконто", ОписаниеТиповСтрока);
ПравилаВыводаИтогов.Колонки.Добавить("РазворотПоСубконто", ОписаниеТиповТаблицаЗначений);

МассивШиринКолонок = Новый Массив;
ШиринаТаблицы = 0;

#КонецЕсли