#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройкиУпр(ДополнительныеПараметры = Неопределено)
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	// При написании текста запроса рекомендуется следовать правилам, описанным в следующем шаблоне текста запроса:
	//
	//ВЫБРАТЬ
	//	<ПсевдонимТаблицы.Поле> КАК <ПсевдонимПоля>,
	//	ПРЕДСТАВЛЕНИЕ(<ПсевдонимТаблицы>.<Поле>),
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//{ВЫБРАТЬ
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//ИЗ
	//	<Таблица> КАК <ПсевдонимТаблицы>
	//	//СОЕДИНЕНИЯ
	//{ГДЕ
	//	<ПсевдонимТаблицы.Поле>.* КАК <ПсевдонимПоля>,
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>,
	//	<ПсевдонимТаблицы>.Регистратор КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//{УПОРЯДОЧИТЬ ПО
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//УПОРЯДОЧИТЬ_СВОЙСТВА
	//	//УПОРЯДОЧИТЬ_КАТЕГОРИИ
	//}
	//ИТОГИ
	//	АГРЕГАТНАЯ_ФУНКЦИЯ(<ПсевдонимПоказателя>)
	//	//ИТОГИ_СВОЙСТВА
	//	//ИТОГИ_КАТЕГОРИИ
	//ПО
	//	ОБЩИЕ
	//{ИТОГИ ПО
	//	<ПсевдонимПоля>.*,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//АВТОУПОРЯДОЧИВАНИЕ
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегПервСведения.ОсновноеСредство.Код КАК ИнвНомер,
				   |	РегПервСведения.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
				   |	РегПервСведения.ОсновноеСредство КАК ОсновноеСредство,
				   |	РегПервСведения.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
				   |	РегПринятия.Регистратор КАК ДокПоступления,
				   |	РегПринятия.ДатаСостояния КАК ДатаПринятия,
				   |	РегВыбытия.Регистратор КАК ДокВыбытия,
				   |	РегВыбытия.ДатаСостояния КАК ДатаВыбытия,
				   |	РегМеста.МОЛ,
				   |	РегМеста.Местонахождение КАК Подразделение,
				   |	РегСтоимостьОС.СтоимостьОстаток 	КАК Стоимость,
				   |	РегСтоимостьОС.АмортизацияОстаток 	КАК Амортизация,
				   |	РегСтоимостьОС.СтоимостьОстаток - РегСтоимостьОС.АмортизацияОстаток КАК ОстаточнаяСтоимость
				   |		//ПОЛЯ_СВОЙСТВА
				   |		//ПОЛЯ_КАТЕГОРИИ
				   
				   |{ВЫБРАТЬ
				   |	ОсновноеСредство.*,
				   |	Подразделение.*,
				   |	МОЛ.*,
				   |	ИнвНомер,
				   |	ДатаВыпуска,
				   |	ПервоначальнаяСтоимость,
				   |	ДокПоступления.*,
				   |	ДатаПринятия,
				   |	ДокВыбытия.*,
				   |	ДатаВыбытия,
				   |	Стоимость,
				   |	Амортизация,
				   |	ОстаточнаяСтоимость
				   |		//ПСЕВДОНИМЫ_СВОЙСТВА
				   |		//ПСЕВДОНИМЫ_КАТЕГОРИИ
				   
				   |}

				   |ИЗ
				   |	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&ДатаКон, {ОсновноеСредство.* КАК ОсновноеСредство}) КАК РегПервСведения
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
				   |		ПО ОсновныеСредства.Ссылка = РегПервСведения.ОсновноеСредство.Ссылка
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС КАК РегПринятия
				   |		ПО РегПервСведения.ОсновноеСредство = РегПринятия.ОсновноеСредство
				   |			И (РегПринятия.Состояние = &СостояниеПринят)
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(&ДатаКон, {ОсновноеСредство.* КАК ОсновноеСредство}) КАК РегСтоимостьОС
				   |		ПО РегПервСведения.ОсновноеСредство = РегСтоимостьОС.ОсновноеСредство
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС КАК РегВыбытия
				   |		ПО РегПервСведения.ОсновноеСредство = РегВыбытия.ОсновноеСредство
				   |			И (РегВыбытия.Состояние = &СостояниеВыбыл)
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&ДатаКон, {ОсновноеСредство.* КАК ОсновноеСредство}) КАК РегМеста
				   |		ПО РегПервСведения.ОсновноеСредство = РегМеста.ОсновноеСредство
				   |//СОЕДИНЕНИЯ
				   |{ГДЕ
				   |	РегМеста.Местонахождение.* КАК Подразделение,
				   |	РегМеста.МОЛ.* КАК МОЛ,
				   |	РегПервСведения.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
				   |	РегСтоимостьОС.СтоимостьОстаток 	КАК Стоимость,
				   |	РегСтоимостьОС.АмортизацияОстаток 	КАК Амортизация,
				   |	РегСтоимостьОС.СтоимостьОстаток - РегСтоимостьОС.АмортизацияОстаток КАК ОстаточнаяСтоимость,
				   |	РегПринятия.ДатаСостояния КАК ДатаПринятия,
				   |	ЕстьNULL(РегВыбытия.ДатаСостояния,&ПустаяДата) КАК ДатаВыбытия
				   |		//УСЛОВИЯ_СВОЙСТВА
				   |		//УСЛОВИЯ_КАТЕГОРИИ
				   |}

				   |{УПОРЯДОЧИТЬ ПО
				   |	ОсновноеСредство.*,
				   |	Подразделение.*,
				   |	МОЛ.*,
				   |	ИнвНомер,
				   |	ДатаВыпуска,
				   |	ПервоначальнаяСтоимость,
				   |	ДокПоступления.*,
				   |	ДатаПринятия,
				   |	ДокВыбытия.*,
				   |	ДатаВыбытия,
				   |	Стоимость,
				   |	Амортизация,
				   |	ОстаточнаяСтоимость
				   |	//ПСЕВДОНИМЫ_СВОЙСТВА
				   |	//ПСЕВДОНИМЫ_КАТЕГОРИИ
				   |}

				   |
				   |ИТОГИ
				   |	МАКСИМУМ(ИнвНомер),
				   |	МАКСИМУМ(ДатаВыпуска),
				   |	СУММА(ПервоначальнаяСтоимость),
				   |	МАКСИМУМ(ДокПоступления),
				   |	МАКСИМУМ(ДатаПринятия),
				   |	МАКСИМУМ(ДокВыбытия),
				   |	МАКСИМУМ(ДатаВыбытия),
				   |	СУММА(Стоимость),
				   |	СУММА(Амортизация),
				   |	СУММА(ОстаточнаяСтоимость)
				   |//ИТОГИ_СВОЙСТВА
				   |//ИТОГИ_КАТЕГОРИИ
				   
				   |ПО
				   |	ОБЩИЕ
				   |{ИТОГИ ПО
				   |	Подразделение,
				   |	МОЛ,
				   |	ОсновноеСредство.*
				   |		//ПСЕВДОНИМЫ_СВОЙСТВА
				   |		//ПСЕВДОНИМЫ_КАТЕГОРИИ
				   
				   |}";

	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегПервСведения.ОсновноеСредство" , "ОсновноеСредство", "Основное средство", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ОсновныеСредства);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегМеста.Местонахождение" , "Подразделение", "Подразделение", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегМеста.МОЛ" , "МОЛ", "МОЛ", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица);


		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	// УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ОсновноеСредство",   		"Основное средство");
   	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ИнвНомер",   				"Инвентарный номер");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ДатаВыпуска",   				"Дата выпуска (постройки)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ПервоначальнаяСтоимость",   	"Первоначальная стоимость");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ДокПоступления",   			"Документ поступления");
    УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ДатаПринятия",  				"Дата принятия к учету");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ДокВыбытия",   				"Документ выбытия");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ДатаВыбытия",   				"Дата выбытия");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "Стоимость",   				"Текущая стоимость");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ОстаточнаяСтоимость",   		"Остаточная стоимость");

	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	УниверсальныйОтчет.ДобавитьПоказатель( "ПервоначальнаяСтоимость",  	"Первоначальная стоимость",      	Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель( "Стоимость",              	"Текущая стоимость", 				Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель( "Амортизация",              	"Сумма начисленной амортизации", 	Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель( "ОстаточнаяСтоимость",      	"Остаточная стоимость",          	Истина, "ЧЦ=15; ЧДЦ=2");

	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Подразделение");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ОсновноеСредство");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Подразделение");
	УниверсальныйОтчет.ДобавитьОтбор("МОЛ");
    УниверсальныйОтчет.ДобавитьОтбор("ОсновноеСредство");

	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ИнвНомер", "ОсновноеСредство");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ДатаВыпуска", "ОсновноеСредство");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ДокПоступления", "ОсновноеСредство");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ДатаПринятия", "ОсновноеСредство");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ДокВыбытия", "ОсновноеСредство");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ДатаВыбытия", "ОсновноеСредство");
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ИнвНомер");
	
КонецПроцедуры // УстановитьНачальныеНастройкиУпр()

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройкиБух(ДополнительныеПараметры = Неопределено)
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	// При написании текста запроса рекомендуется следовать правилам, описанным в следующем шаблоне текста запроса:
	//
	//ВЫБРАТЬ
	//	<ПсевдонимТаблицы.Поле> КАК <ПсевдонимПоля>,
	//	ПРЕДСТАВЛЕНИЕ(<ПсевдонимТаблицы>.<Поле>),
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//{ВЫБРАТЬ
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//ИЗ
	//	<Таблица> КАК <ПсевдонимТаблицы>
	//	//СОЕДИНЕНИЯ
	//{ГДЕ
	//	<ПсевдонимТаблицы.Поле>.* КАК <ПсевдонимПоля>,
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>,
	//	<ПсевдонимТаблицы>.Регистратор КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//{УПОРЯДОЧИТЬ ПО
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//УПОРЯДОЧИТЬ_СВОЙСТВА
	//	//УПОРЯДОЧИТЬ_КАТЕГОРИИ
	//}
	//ИТОГИ
	//	АГРЕГАТНАЯ_ФУНКЦИЯ(<ПсевдонимПоказателя>)
	//	//ИТОГИ_СВОЙСТВА
	//	//ИТОГИ_КАТЕГОРИИ
	//ПО
	//	ОБЩИЕ
	//{ИТОГИ ПО
	//	<ПсевдонимПоля>.*,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//АВТОУПОРЯДОЧИВАНИЕ
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	РегПервСведения.Организация 		КАК Организация,
	               |	РегПервСведения.ИнвентарныйНомер 	КАК ИнвНомер,
	               |	РегПервСведения.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	               |	РегПервСведения.ОсновноеСредство КАК ОсновноеСредство,
	               |	РегПервСведения.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	               |	РегПринятия.Регистратор КАК ДокПоступления,
	               |	РегПринятия.ДатаСостояния КАК ДатаПринятия,
	               |	РегВыбытия.Регистратор КАК ДокВыбытия,
	               |	ЕстьNULL(РегВыбытия.ДатаСостояния,&ПустаяДата) КАК ДатаВыбытия,
				   |	НалоговыеНазначенияОС.НалоговоеНазначение 	КАК НалоговоеНазначение,
	               |	РегМеста.МОЛ,
	               |	РегМеста.Местонахождение 	КАК Подразделение,
				   |	СоставОС.ВСоставе 			КАК ОСРодитель,
	               |	РегСтоимостьОС.СтоимостьОстаток 	КАК Стоимость,
	               |	РегСтоимостьОС.АмортизацияОстаток 	КАК Амортизация,
				   |	РегСтоимостьОС.СтоимостьОстаток - РегСтоимостьОС.АмортизацияОстаток КАК ОстаточнаяСтоимость
				   |		//ПОЛЯ_СВОЙСТВА
				   |		//ПОЛЯ_КАТЕГОРИИ
				   
	               |{ВЫБРАТЬ
	               |	ОсновноеСредство.*,
	               |	Подразделение.*,
				   |	Организация.*,
				   |	НалоговоеНазначение.*,
	               |	МОЛ.*,
	               |	ИнвНомер,
	               |	ДатаВыпуска,
	               |	ОсновноеСредство.*,
				   |	ОСРодитель.*,
	               |	ПервоначальнаяСтоимость,
	               |	ДокПоступления.*,
	               |	ДатаПринятия,
	               |	ДокВыбытия.*,
	               |	ДатаВыбытия,
	               |	Стоимость,
	               |	Амортизация,
				   |	ОстаточнаяСтоимость
				   |		//ПСЕВДОНИМЫ_СВОЙСТВА
				   |		//ПСЕВДОНИМЫ_КАТЕГОРИИ
				   |}

	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаКон, {Организация.* КАК Организация, ОсновноеСредство.* КАК ОсновноеСредство}) КАК РегПервСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК РегПринятия
	               |		ПО РегПервСведения.Организация = РегПринятия.Организация И РегПервСведения.ОсновноеСредство = РегПринятия.ОсновноеСредство
	               |			И (РегПринятия.Состояние = &СостояниеПринят)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(&ДатаКон, {Организация.* КАК Организация, ОсновноеСредство.* КАК ОсновноеСредство}) КАК РегСтоимостьОС
	               |		ПО РегПервСведения.Организация = РегСтоимостьОС.Организация И РегПервСведения.ОсновноеСредство = РегСтоимостьОС.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК РегВыбытия
	               |		ПО РегПервСведения.Организация = РегВыбытия.Организация И РегПервСведения.ОсновноеСредство = РегВыбытия.ОсновноеСредство
	               |			И (РегВыбытия.Состояние = &СостояниеВыбыл)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаКон, {Организация.* КАК Организация, ОсновноеСредство.* КАК ОсновноеСредство}) КАК РегМеста
	               |		ПО РегПервСведения.Организация = РегМеста.Организация И РегПервСведения.ОсновноеСредство = РегМеста.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НалоговыеНазначенияОС.СрезПоследних(&ДатаКон, {Организация.* КАК Организация, ОсновноеСредство.* КАК ОсновноеСредство}) КАК НалоговыеНазначенияОС
	               |		ПО РегПервСведения.Организация = НалоговыеНазначенияОС.Организация И РегПервСведения.ОсновноеСредство = НалоговыеНазначенияОС.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставОС.СрезПоследних(, {ОсновноеСредство.* КАК ОсновноеСредство}) КАК СоставОС
	               |		ПО РегПервСведения.ОсновноеСредство = СоставОС.ОсновноеСредство
				   |//СОЕДИНЕНИЯ
	               |{ГДЕ
	               |	РегМеста.Местонахождение.* КАК Подразделение,
				   |	РегМеста.Организация.* КАК Организация,
				   |	НалоговыеНазначенияОС.НалоговоеНазначение.* 	КАК НалоговоеНазначение,
	               |	РегМеста.МОЛ.* КАК МОЛ,
				   |	СоставОС.ВСоставе.* КАК ОСРодитель,
	               |	РегПервСведения.ИнвентарныйНомер КАК ИнвНомер,
	               |	РегПервСведения.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
 	               |	РегСтоимостьОС.СтоимостьОстаток КАК Стоимость,
 	               |	РегСтоимостьОС.АмортизацияОстаток КАК Амортизация,
				   |	РегСтоимостьОС.СтоимостьОстаток - РегСтоимостьОС.АмортизацияОстаток КАК ОстаточнаяСтоимость,
				   |	РегПринятия.ДатаСостояния КАК ДатаПринятия,
				   |	ЕстьNULL(РегВыбытия.ДатаСостояния,&ПустаяДата) КАК ДатаВыбытия
				   //Коновалова 24122012 +
				   |		//УСЛОВИЯ_СВОЙСТВА
				   //Коновалова 24122012 -
				   |}
	               |				   
				   |{УПОРЯДОЧИТЬ ПО
	               |	ОсновноеСредство.*,
	               |	Подразделение.*,
				   |	Организация.*,
	               |	НалоговоеНазначение.*,
	               |	МОЛ.*,
	               |	ОСРодитель.*,
	               |	ИнвНомер,
	               |	ДатаВыпуска,
	               |	ОсновноеСредство.*,
	               |	ПервоначальнаяСтоимость,
	               |	ДокПоступления.*,
	               |	ДатаПринятия,
	               |	ДокВыбытия.*,
	               |	ДатаВыбытия,
	               |	Стоимость,
	               |	Амортизация,
				   |	ОстаточнаяСтоимость
				   |	//ПСЕВДОНИМЫ_СВОЙСТВА
				   |	//ПСЕВДОНИМЫ_КАТЕГОРИИ
				   |}


	               |ИТОГИ
	               |	МАКСИМУМ(ИнвНомер),
	               |	МАКСИМУМ(ДатаВыпуска),
	               |	СУММА(ПервоначальнаяСтоимость),
	               |	МАКСИМУМ(ДокПоступления),
	               |	МАКСИМУМ(ДатаПринятия),
	               |	МАКСИМУМ(ДокВыбытия),
	               |	МАКСИМУМ(ДатаВыбытия),
				   |	СУММА(Стоимость),
				   |	СУММА(Амортизация),
				   |	СУММА(ОстаточнаяСтоимость)
				   |//ИТОГИ_СВОЙСТВА
				   |//ИТОГИ_КАТЕГОРИИ
				   
				   |ПО
				   |	ОБЩИЕ
				   |{ИТОГИ ПО
				   |	Подразделение,
				   |	Организация,
				   |	НалоговоеНазначение.*,
				   |	МОЛ,
				   |	ОСРодитель,
				   |	ОсновноеСредство.*
				   |		//ПСЕВДОНИМЫ_СВОЙСТВА
				   |		//ПСЕВДОНИМЫ_КАТЕГОРИИ
				   
				   |}";

	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегПервСведения.ОсновноеСредство" , "ОсновноеСредство", "Основное средство", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ОсновныеСредства);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегМеста.МОЛ" , "МОЛ", "МОЛ", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегМеста.Организация" , "Организация", "Организация", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации);
		
		
		//21122012 +
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("РегМеста.Местонахождение" , "Подразделение", "Подразделение", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций);
		//21122012 -
		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	// УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ОсновноеСредство",   		"Основное средство");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ИнвНомер",   				"Инвентарный номер");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ДатаВыпуска",   				"Дата выпуска (постройки)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ПервоначальнаяСтоимость",   	"Первоначальная стоимость");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "Амортизация",   				"Сумма начисленной амортизации");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "Стоимость",   				"Текущая стоимость");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ДокПоступления",   			"Документ поступления");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ДатаПринятия",   			"Дата принятия к учету");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ДокВыбытия",   				"Документ выбытия");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ДатаВыбытия",   				"Дата выбытия");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ОстаточнаяСтоимость",   		"Остаточная стоимость");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "ОСРодитель",   				"В составе ОС");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить( "НалоговоеНазначение",       	"Налоговое назначение");

	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	УниверсальныйОтчет.ДобавитьПоказатель( "ПервоначальнаяСтоимость",  	"Первоначальная стоимость",      	Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель( "Стоимость",              	"Текущая стоимость", 				Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель( "Амортизация",              	"Сумма начисленной амортизации", 	Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель( "ОстаточнаяСтоимость",      	"Остаточная стоимость",          	Истина, "ЧЦ=15; ЧДЦ=2");

	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ОсновноеСредство");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Подразделение");

	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("Подразделение");
	УниверсальныйОтчет.ДобавитьОтбор("НалоговоеНазначение");
	УниверсальныйОтчет.ДобавитьОтбор("МОЛ");
	УниверсальныйОтчет.ДобавитьОтбор("ОСРодитель");
    УниверсальныйОтчет.ДобавитьОтбор("ОсновноеСредство");
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ИнвНомер", "ОсновноеСредство");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ДатаВыпуска", "ОсновноеСредство");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ДокПоступления", "ОсновноеСредство");
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ДатаПринятия", "ОсновноеСредство");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ДокВыбытия", "ОсновноеСредство");
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ДатаВыбытия", "ОсновноеСредство");
	
	// Установка представлений полей
	 УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ИнвНомер");

КонецПроцедуры // УстановитьНачальныеНастройкиБух()

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним) + " "
		+ ?(ВидУчета = 1, "(бухгалтерский учет)", "(управленческий учет)");
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Истина;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	УниверсальныйОтчет.ИмяРегистра = "";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	Если ВидУчета = 1 Тогда // Бух.
		УстановитьНачальныеНастройкиБух(ДополнительныеПараметры);
	Иначе // Упр
		УстановитьНачальныеНастройкиУпр(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить( "НачДата", Дата(УниверсальныйОтчет.ДатаНач));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить( "КонДата", КонецДня(Дата(УниверсальныйОтчет.ДатаКон)));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить( "СостояниеПринят" , Перечисления.СостоянияОС.ПринятоКУчету);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить( "СостояниеВыбыл"  , Перечисления.СостоянияОС.СнятоСУчета);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить( "ПустаяДата", Дата('00010101000000'));
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

// Инвентарная карточка должна формироваться на определенную дату.
УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли
