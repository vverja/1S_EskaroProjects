////////////////////////////////////////////////////////////////////////////////
//  МОДУЛЬ ОБЪЕКТА ОТЧЕТА "ОТЧЕТ ПО ИЗМЕНЕНИЯМ"
//  СОДЕРЖИТ ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ОТЧЕТА ПО ИЗМЕНЕНИЯМ ОБЪЕКТА,
//  А ТАК ЖЕ ФУНКЦИИ ДЛЯ ДЕСЕРИАЛИЗАЦИИ И ПОДГОТОВКИ ПРЕДСТАВЛЕНИЯ ОБЪЕКТА
//

// Заполняется при формировании отчета табличным документом из макета "ОбщийШаблон" отчета
Перем ОбщийШаблон;

////////////////////////////////////////////////////////////////////////////////
//  СЕКЦИЯ ЭКСПОРТНЫХ ФУНКЦИЙ

// Основная экспортная функция модуля, отвечающая за формирование отчета.
// В зависимости от числа версий в массиве вызывает либо функциональность
// формирования отчета по одной версии либо функциональность формирования
// отчета по изменениям между несколькими версиями.
//
Процедура СформироватьОтчет(ТЧОтчета, знач СписокВерсий) Экспорт
	
	ОбщийШаблон = Отчеты.ИсторияИзмененийОбъектов.ПолучитьМакет("СтандартныйМакетПредставленияОбъекта");
	
	МассивВерсий = Новый Массив;
	Для Каждого ИдентефикторВерсии Из СписокВерсий Цикл
		МассивВерсий.Добавить(ИдентефикторВерсии.Значение);
	КонецЦикла;
	
	Если МассивВерсий.Количество() = 1 Тогда
		СформироватьОтчетПоВерсииОбъекта(ТЧОтчета, МассивВерсий[0]);
	Иначе
		СформироватьОтчетПоИзменениям(ТЧОтчета, МассивВерсий);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции для получения отчета по объекту

// Функция предназначена для формирования отчета по версии объекта
//
// Параметры:
// ТЧОтчета - ТабличныйДокумент - табличный документ, в который будет выводится отчет
// ИдентификаторВерсии - строка/число - номер версии объекта
//
Процедура СформироватьОтчетПоВерсииОбъекта(ТЧОтчета, ИдентификаторВерсии)
	
	ТЧОтчета.Очистить();
	
	НаименованиеОбъекта = СсылкаНаОбъект.Метаданные().Имя;
	
	Если ПроверитьСсылкаНаСправочник(СсылкаНаОбъект) Тогда
		Если Метаданные.Справочники[НаименованиеОбъекта].Макеты.Найти("МакетОбъекта") <> Неопределено Тогда
			Макет = Справочники[НаименованиеОбъекта].ПолучитьМакет("МакетОбъекта");
		Иначе
			Макет = Неопределено;
		КонецЕсли;
	Иначе
		Если Метаданные.Документы[НаименованиеОбъекта].Макеты.Найти("МакетОбъекта") <> Неопределено Тогда
			Макет = Документы[НаименованиеОбъекта].ПолучитьМакет("МакетОбъекта");
		Иначе
			Макет = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеВерсии = ПолучитьОписаниеПоВерсии(ИдентификаторВерсии);
	
	Если Макет <> Неопределено Тогда
		
		ФормированиеПоСтандартномуМакету(ТЧОтчета,
		                                 Макет,
		                                 ПолучитьОбъектИзXML(ПолучитьСтрокуXMLПоНомеруВерсии(ИдентификаторВерсии)),
		                                 ОписаниеВерсии);
	Иначе
		ВерсияОбъекта = РазборВерсии(ИдентификаторВерсии, СсылкаНаОбъект);
		
		Секция = ТЧОтчета.ПолучитьОбласть("R2");
		ВывестиТекстВОтчет(ТЧОтчета, Секция, "R2C2", СсылкаНаОбъект.Метаданные().Имя,,,16, Истина);
		
		///////////////////////////////////////////////////////////////////////////////
		// вывод списка изменившихся реквизитов
		
		ТЧОтчета.Область("C2").ШиринаКолонки = 50;
		ВывестиШапкуПоВерсии(ТЧОтчета, ОписаниеВерсии, 3);
		ЧислоВыведенныхСтрок = ВывестиРеквизитыПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта);
		ЧислоВыведенныхСтрок = ВывестиТабличныеЧастиПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта, ЧислоВыведенныхСтрок+7);
	КонецЕсли;
	
КонецПроцедуры

// Формирует отчет по объекту, используя стандартный макет.
//
// Параметры:
// ТЧОтчета - ТабличныйДокумент - табличный документ, в который будет выводится отчет
// ВерсияОбъекта - СправочникОбъект,ДокументОбъект - объект, данные которого необходимо отобразить в отчете
// НаименованиеОбъекта - Строка - наименование объекта, по которому 
//
Процедура ФормированиеПоСтандартномуМакету(ТЧОтчета, Макет, ВерсияОбъекта, знач ОписаниеВерсии)
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	
	НаименованиеОбъекта = МетаданныеОбъекта.Имя;
	
	ТЧОтчета = Новый ТабличныйДокумент;
	
	Если ПроверитьСсылкаНаСправочник(СсылкаНаОбъект) Тогда
		Макет = Справочники[НаименованиеОбъекта].ПолучитьМакет("МакетОбъекта");
	Иначе
		Макет = Документы[НаименованиеОбъекта].ПолучитьМакет("МакетОбъекта");
	КонецЕсли;
	
	// Заголовок
	Область = Макет.ПолучитьОбласть("Заголовок");
	ТЧОтчета.Вывести(Область);
	
	Область = ТЧОтчета.ПолучитьОбласть("R3");
	УстановитьСвойстваТекста(Область.Область("R1C2"), ОписаниеВерсии, , , , Истина);
	ТЧОтчета.Вывести(Область);
	
	Область = ТЧОтчета.ПолучитьОбласть("R5");
	ТЧОтчета.Вывести(Область);
	
	// Шапка
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(ВерсияОбъекта);
	ТЧОтчета.Вывести(Шапка);
	
	Для Каждого МетаданныеТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Если ВерсияОбъекта[МетаданныеТЧ.Имя].Количество() > 0 Тогда
			Область = Макет.ПолучитьОбласть(МетаданныеТЧ.Имя+"Шапка");
			ТЧОтчета.Вывести(Область);
			
			ОбластьДеталиПриходаТовара = Макет.ПолучитьОбласть(МетаданныеТЧ.Имя);
			Для Каждого ТекСтрокаДеталиПриходаТовара Из ВерсияОбъекта[МетаданныеТЧ.Имя] Цикл
				ОбластьДеталиПриходаТовара.Параметры.Заполнить(ТекСтрокаДеталиПриходаТовара);
				ТЧОтчета.Вывести(ОбластьДеталиПриходаТовара);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТЧОтчета.ОтображатьСетку = Ложь;
	ТЧОтчета.Защита = Истина;
	ТЧОтчета.ТолькоПросмотр = Истина;
	ТЧОтчета.ОтображатьЗаголовки = Ложь;
	
КонецПроцедуры

// Выводит изменившиеся реквизиты в отчет. При этом получает их представление.
//
Функция ВывестиРеквизитыПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта)
	
	Секция = ТЧОтчета.ПолучитьОбласть("R6");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C2", "Реквизиты", , , 11, Истина);
	ТЧОтчета.НачатьГруппуСтрок("ГруппаРеквизитов");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
	
	ЧислоВыводимыхСтрок = 0;
	
	Для Каждого ЭлементРеквизит Из ВерсияОбъекта.Реквизиты Цикл
		
		НаименованиеРеквизита = ПолучитьПредставлениеРеквизитаНаЯзыке(ЭлементРеквизит.НаименованиеРеквизита);
		
		ОписаниеРеквизита = СсылкаНаОбъект.Метаданные().Реквизиты.Найти(НаименованиеРеквизита);
		
		ЗначениеРеквизита = ?(ЭлементРеквизит.ЗначениеРеквизита = Неопределено, "", ЭлементРеквизит.ЗначениеРеквизита);
		
		Если ЗначениеЗаполнено(ЭлементРеквизит.ТипРеквизита) Тогда
			ВыводимоеНаименование = НаименованиеРеквизита;
			ПредставлениеЗначения = ПривестиКПредставлениюПоТипуИЗначению(
			                           ЭлементРеквизит.ТипРеквизита,
			                           ЗначениеРеквизита);
		ИначеЕсли (ОписаниеРеквизита <> Неопределено) Тогда
			ВыводимоеНаименование = ?(ЗначениеЗаполнено(ОписаниеРеквизита.Синоним), ОписаниеРеквизита.Синоним, ОписаниеРеквизита.Имя);
			ОписаниеТипаРеквизита = ОписаниеРеквизита.Тип;
			// пытаемся найти прямое соответствие
			ПредставлениеЗначения = 
					СформироватьПредставлениеПоОписаниюТипа(ОписаниеТипаРеквизита,
					                                        ЗначениеРеквизита);
		Иначе
			ВыводимоеНаименование = НаименованиеРеквизита;
			ПредставлениеЗначения = ПолучитьПредставлениеЗначенияПоНаименованию(ЭлементРеквизит.НаименованиеРеквизита, ЗначениеРеквизита, СсылкаНаОбъект.Метаданные().Имя);
		КонецЕсли;
		
		УстановитьСвойстваТекста(Секция.Область("R1C2"), ВыводимоеНаименование, ,WebЦвета.Белый, , Истина);
		УстановитьСвойстваТекста(Секция.Область("R1C3"), ПредставлениеЗначения);
		
		ТЧОтчета.Вывести(Секция);
		
		ЧислоВыводимыхСтрок = ЧислоВыводимыхСтрок + 1;
	КонецЦикла;
	
	ТЧОтчета.ЗакончитьГруппуСтрок();
	
	Возврат ЧислоВыводимыхСтрок;
	
КонецФункции

// Выводит табличные части по разобранному объекту, при выводе единственного объекта
//
Функция ВывестиТабличныеЧастиПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта, НомерСтрокиВывода);
	
	ЧислоВыводимыхСтрок = 0;
	
	Если ВерсияОбъекта.ТабличныеЧасти.Количество() <> 0 Тогда
		
		Для Каждого СтрокаТабличнаяЧасть Из ВерсияОбъекта.ТабличныеЧасти Цикл
			НаименованиеТабличнойЧасти = СтрокаТабличнаяЧасть.Ключ;
			ТабличнаяЧасть             = СтрокаТабличнаяЧасть.Значение;
			Если ТабличнаяЧасть.Количество() > 0 Тогда
				
				МетаданныеТЧ = СсылкаНаОбъект.Метаданные().ТабличныеЧасти[НаименованиеТабличнойЧасти];
				СинонимТЧ = МетаданныеТЧ.Синоним;
				СинонимТЧ = ?(ЗначениеЗаполнено(СинонимТЧ), СинонимТЧ, НаименованиеТабличнойЧасти);
				
				Секция = ТЧОтчета.ПолучитьОбласть("R" + Строка(НомерСтрокиВывода));
				ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
				ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C2", СинонимТЧ, , , 11, Истина);
				ТЧОтчета.НачатьГруппуСтрок("ГруппаСтрок");
				ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
				
				ЧислоВыводимыхСтрок = ЧислоВыводимыхСтрок + 1;
				
				НомерСтрокиВывода = НомерСтрокиВывода + 3;
				
				ДобавляемаяТЧ = Новый ТабличныйДокумент;
				
				ДобавляемаяТЧ.Присоединить(СформироватьПустойСектор(ТабличнаяЧасть.Количество()+1));
				
				НомерКолонки = 2;
				
				СоответствиеРазмерностиКолонок = Новый Соответствие;
				
				Секция = Новый ТабличныйДокумент;
				
				УстановитьСвойстваТекста(Секция.Область("R1C1"),"N", ,WebЦвета.СветлоСерый, , Истина, Истина);
				
				НомерСтроки = 1;
				Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					НомерСтроки = НомерСтроки + 1;
					УстановитьСвойстваТекста(Секция.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C1"), Формат(НомерСтроки-1,"ЧГ="), ,WEBЦвета.Белый,,,Истина);
				КонецЦикла;
				ДобавляемаяТЧ.Присоединить(Секция);
				
				НомерКолонки = 3;
				
				Для Каждого КолонкаТабличнойЧасти Из ТабличнаяЧасть.Колонки Цикл
					Секция = Новый ТабличныйДокумент;
					
					НаименованиеПоля = КолонкаТабличнойЧасти.Имя;
					ОписаниеПоля = МетаданныеТЧ.Реквизиты[КолонкаТабличнойЧасти.Имя];
					ВыводимоеНаименованиеПоля = ?(ЗначениеЗаполнено(ОписаниеПоля.Синоним),
												  ОписаниеПоля.Синоним, НаименованиеПоля);
					
					УстановитьСвойстваТекста(Секция.Область("R1C1"),
											 ВыводимоеНаименованиеПоля, ,WebЦвета.СветлоСерый, , Истина, Истина);
					
					СоответствиеРазмерностиКолонок.Вставить(НомерКолонки, СтрДлина(НаименованиеПоля) + 4);
					
					НомерСтроки = 1;
					Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
						НомерСтроки = НомерСтроки + 1;
						НаименованиеПоля = КолонкаТабличнойЧасти.Имя;
						ОписаниеПоля = МетаданныеТЧ.Реквизиты[НаименованиеПоля];
						
						Значение = ?(СтрокаТабличнойЧасти[НаименованиеПоля] = Неопределено, "", СтрокаТабличнойЧасти[НаименованиеПоля]);
						ПредставлениеЗначения = СформироватьПредставлениеПоОписаниюТипа(ОписаниеПоля.Тип, Значение);
						УстановитьСвойстваТекста(Секция.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C1"), ПредставлениеЗначения, ,WEBЦвета.Белый,,,Истина);
						Если СтрДлина(ПредставлениеЗначения) > (СоответствиеРазмерностиКолонок[НомерКолонки] - 4) Тогда
							СоответствиеРазмерностиКолонок[НомерКолонки] = СтрДлина(ПредставлениеЗначения) + 4;
						КонецЕсли;
					КонецЦикла; // Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					
					ДобавляемаяТЧ.Присоединить(Секция);
					НомерКолонки = НомерКолонки + 1;
				КонецЦикла; // Для Каждого КолонкаТабличнойЧасти Из ТабличнаяЧасть.Колонки Цикл
				
				ОбластьВывода = ТЧОтчета.Вывести(ДобавляемаяТЧ);
				ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C1:R"+Формат(ОбластьВывода.Низ,"ЧГ=")+"C"+НомерКолонки).СоздатьФорматСтрок();
				ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C2").ШиринаКолонки = 7;
				Для ТекущийНомерКолонки = 3 По НомерКолонки-1 Цикл
					ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C"+ТекущийНомерКолонки).ШиринаКолонки = СоответствиеРазмерностиКолонок[ТекущийНомерКолонки];
				КонецЦикла;
				ТЧОтчета.ЗакончитьГруппуСтрок();
				
			КонецЕсли; // Если ТабличнаяЧасть.Количество() > 0 Тогда
		КонецЦикла; // Для Каждого СтрокаТабличнаяЧасть Из ВерсияОбъекта.ТабличныеЧасти Цикл
		
	КонецЕсли;
	
КонецФункции

// Выводит шапку отчета при выводе отчета по версии объекта
//
Процедура ВывестиШапкуПоВерсии(ТЧОтчета, знач Текст, знач НомерКолонки)
	
	ТЧОтчета.Область("C"+Строка(НомерКолонки)).ШиринаКолонки = 50;
	
	Регион = "R4C"+Строка(НомерКолонки);
	ТЧОтчета.Область(Регион).Текст = Текст;
	ТЧОтчета.Область(Регион).ЦветФона = WebЦвета.СветлоСерый;
	ТЧОтчета.Область(Регион).Шрифт = Новый Шрифт(, 8, Истина, , , );
	ТЧОтчета.Область(Регион).ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ТЧОтчета.Область(Регион).ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ТЧОтчета.Область(Регион).ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ТЧОтчета.Область(Регион).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции для получения отчета по изменениям

// Основная управляющая функция для формирование отчета по изменениям.
// Cостоит из трех этапов:
// 1. Получение XML представления хранимых версий объекта. Формирование
//    специальных структур данных для сравнения объектов.
// 2. Получение 
//
Процедура СформироватьОтчетПоИзменениям(ТЧОтчета, знач МассивВерсий)
	
	// Хранит переходную распарсированную версию объекта,
	// что бы сократить число разборов XML
	Перем ВерсияОбъекта;
	
	// "Сквозной" идентефикатор измененных строк в версиях
	Перем счетчикУнкИд;
	
	ТЧОтчета.Очистить();
	
	// Формируем массив номеров версий (так как некоторые могут отсутствовать
	// и иметь непоследовательную нумерацию), массив отсортирован по возрастанию.
	МассивНомеровВерсий = МассивВерсий;
	
	// Количество версий объекта хранящихся в базе (k).
	// Для формирования отчета необходимо сделать (k-1) сравнений.
	// Фактически это означает, что у таблиц изменений будет (k) колонок
	//КоличествоВерсийОбъекта = КоличествоВерсий;
	КоличествоВерсийОбъекта = МассивНомеровВерсий.Количество();
	
	// Хранит в себе все изменения реквизитов имеет две размерности:
	// первая (строки) содержит значения наименований реквизитов объекта
	// вторая (столбцы) содержит идентификацию версии объекта и характеристику
	// изменения идентификация версии это строка которая однозначно идентифицирует
	// версию объекта среди остальных и сообщает дополнительную информацию по изменению
	ТаблицаИзмененийРеквизитов = Новый ТаблицаЗначений;
	ПодготовитьКолонкиТаблицИзмененийРеквизитов(ТаблицаИзмененийРеквизитов, МассивНомеровВерсий);
	
	// Хранит в себе изменения табличных частей в виде соответствий имен
	// таблиц значений объекта истории изменений этой таблицы значений
	// каждое соответствие - табличная часть
	// первая (строки) содержит значения наименований полей табличной части
	// вторая (столбцы) содержит идентификацию версии объекта
	// идентификация версии это строка которая однозначно идентифицирует версию
	// объекта среди остальных и сообщает дополнительную информацию по изменению
	ТаблицаИзмененийТабличныхЧастей = Новый Соответствие;
	
	// формируем начальные версии объекта, значения которых показываются всегда
	// (при наличии последующих изменений)
	ВерсияОбъекта_Пред = СчитатьНачальныеЗначенияРеквизитовИТабличныхЧастей(
	                               ТаблицаИзмененийРеквизитов,
	                               ТаблицаИзмененийТабличныхЧастей,
	                               КоличествоВерсийОбъекта,
	                               МассивНомеровВерсий);
	
	счетчикУнкИд = ПолучитьУникальныеУнкИд(ТаблицаИзмененийТабличныхЧастей, "Вер" + МассивНомеровВерсий[0]);
	
	Для ИндексВерсии = 2 По МассивНомеровВерсий.Количество() Цикл
		НомерВерсии = МассивНомеровВерсий[ИндексВерсии-1];
		НомерПредыдущейВерсии = "Вер" + (Число(МассивНомеровВерсий[ИндексВерсии-2]));
		ИмяКолонкиТекущейВерсии = "Вер" + НомерВерсии;
		
		РезультатСравнения = РассчитатьИзменения(НомерВерсии, ВерсияОбъекта_Пред, ВерсияОбъекта);
		
		ИзмРек = РезультатСравнения["Реквизиты"]["и"];
		ДобРек = РезультатСравнения["Реквизиты"]["д"];
		УдлРек = РезультатСравнения["Реквизиты"]["у"];
		
		// заполнение таблицы отчета по реквизитам
		ЗаполнитьХарактеристикуИзмененияРеквизита(ИзмРек, "И", ТаблицаИзмененийРеквизитов, ИмяКолонкиТекущейВерсии, ВерсияОбъекта);
		ЗаполнитьХарактеристикуИзмененияРеквизита(ДобРек, "Д", ТаблицаИзмененийРеквизитов, ИмяКолонкиТекущейВерсии, ВерсияОбъекта);
		ЗаполнитьХарактеристикуИзмененияРеквизита(УдлРек, "У", ТаблицаИзмененийРеквизитов, ИмяКолонкиТекущейВерсии, ВерсияОбъекта);
		
		// Изменения в табличных частях
		ИзмТЧ = РезультатСравнения["ТабличныеЧасти"]["и"];
		
		// Данная функциональность пока не реализуется
		ДобТЧ = РезультатСравнения["ТабличныеЧасти"]["д"];
		УдлТЧ = РезультатСравнения["ТабличныеЧасти"]["у"];
		
		Для Каждого ЭлементСоответствия Из ВерсияОбъекта.ТабличныеЧасти Цикл
			ИмяТаблицы = ЭлементСоответствия.Ключ;
			
			Если ЗначениеЗаполнено(ДобТЧ.Найти(ИмяТаблицы))
			 Или ЗначениеЗаполнено(УдлТЧ.Найти(ИмяТаблицы)) Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][ИмяКолонкиТекущейВерсии] = 
			        ВерсияОбъекта.ТабличныеЧасти[ИмяТаблицы].Скопировать();
			СсылкаНаВерсиюТаблицы = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][ИмяКолонкиТекущейВерсии];
			СсылкаНаВерсиюТаблицы.Колонки.Добавить("_ИдСтроки");
			СсылкаНаВерсиюТаблицы.ЗаполнитьЗначения(Неопределено, "_ИдСтроки");
			СсылкаНаВерсиюТаблицы.Колонки.Добавить("_Модификация");
			СсылкаНаВерсиюТаблицы.ЗаполнитьЗначения(Неопределено, "_Модификация");
			ТаблицаСИзменениями = ИзмТЧ.Получить(ИмяТаблицы);
			Если ТаблицаСИзменениями <> Неопределено Тогда
				ИзмТЧ_СтрокиИ = ТаблицаСИзменениями["И"];
				ИзмТЧ_СтрокиД = ТаблицаСИзменениями["Д"];
				ИзмТЧ_СтрокиУ = ТаблицаСИзменениями["У"];
				
				РазмерностьВТЧ0 = ВерсияОбъекта_Пред.ТабличныеЧасти[ИмяТаблицы].Количество();
				Если РазмерностьВТЧ0 = 0 Тогда
					ПомеченныеВТЧ0 = Новый Массив;
				Иначе
					ПомеченныеВТЧ0 = Новый Массив(РазмерностьВТЧ0);
				КонецЕсли;
				
				РазмерностьВТЧ1 = ВерсияОбъекта.ТабличныеЧасти[ИмяТаблицы].Количество();
				Если РазмерностьВТЧ1 = 0 Тогда
					ПомеченныеВТЧ1 = Новый Массив;
				Иначе
					ПомеченныеВТЧ1 = Новый Массив(РазмерностьВТЧ1);
				КонецЕсли;
				
				Для Каждого ЭлементТЧ Из ИзмТЧ_СтрокиИ Цикл
					СтрокаТИЗ = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][НомерПредыдущейВерсии][ЭлементТЧ.ИндексВТЧ0-1];
					СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1]._ИдСтроки = СтрокаТИЗ._ИдСтроки;
					СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1]._Модификация = "И";
				КонецЦикла;
				
				Для Каждого ЭлементТЧ Из ИзмТЧ_СтрокиД Цикл
					СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1]._ИдСтроки = УвеличитьСчетчик(счетчикУнкИд, ИмяТаблицы);
					СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1]._Модификация = "Д";
				КонецЦикла;
				
				// необходимо заполнить всем элементам УнкИд (сопоставить с предыдущей версией)
				Для Индекс = 1 По СсылкаНаВерсиюТаблицы.Количество() Цикл
					Если СсылкаНаВерсиюТаблицы[Индекс-1]._ИдСтроки = Неопределено Тогда
						// найдена строка, для которой необходимо найти соответствие в предыдущей таблице
						СтрокаТЧ = СсылкаНаВерсиюТаблицы[Индекс-1];
						
						ПараметрыОтбора = Новый Структура;
						Для Каждого ЭлементКоллекции Из СсылкаНаВерсиюТаблицы.Колонки Цикл
							Если (ЭлементКоллекции.Имя <> "_ИдСтроки") И (ЭлементКоллекции.Имя <> "_Модификация") Тогда
								ПараметрыОтбора.Вставить(ЭлементКоллекции.Имя, СтрокаТЧ[ЭлементКоллекции.Имя]);
							КонецЕсли;
						КонецЦикла;
						МассивСтрокТекущейТЧ = СсылкаНаВерсиюТаблицы.НайтиСтроки(ПараметрыОтбора);
						МассивСтрокПредыдущейТЧ = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][НомерПредыдущейВерсии].НайтиСтроки(ПараметрыОтбора);
						
						Для ИндПоТЗ_Текущей = 1 По МассивСтрокТекущейТЧ.Количество() Цикл
							Если ИндПоТЗ_Текущей <= МассивСтрокПредыдущейТЧ.Количество() Тогда
								МассивСтрокТекущейТЧ[ИндПоТЗ_Текущей-1]._ИдСтроки = МассивСтрокПредыдущейТЧ[ИндПоТЗ_Текущей-1]._ИдСтроки;
							КонецЕсли;
							МассивСтрокТекущейТЧ[ИндПоТЗ_Текущей-1]._Модификация = Ложь;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Для Каждого ЭлементТЧ Из ИзмТЧ_СтрокиУ Цикл
					СтрокаМнимая = СсылкаНаВерсиюТаблицы.Добавить();
					СтрокаМнимая._ИдСтроки = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][НомерПредыдущейВерсии][ЭлементТЧ.ИндексВТЧ0-1]._ИдСтроки;
					СтрокаМнимая._Модификация = "У";
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ВерсияОбъекта_Пред = ВерсияОбъекта;
	КонецЦикла;
	
	// передаем скомпонованную информацию в спец блок для вывода данных в отчет
	ВывестиРезультатыКомпоновкиВОтчет(ТаблицаИзмененийРеквизитов,
	                                  ТаблицаИзмененийТабличныхЧастей,
	                                  счетчикУнкИд,
	                                  МассивНомеровВерсий,
	                                  ТЧОтчета);
	
	ШаблонЛегенда = ОбщийШаблон.ПолучитьОбласть("Легенда");
	ТЧОтчета.Вывести(ШаблонЛегенда);
	
КонецПроцедуры

Процедура ВывестиИзмененияРеквизитов(ТЧОтчета,
                                     ТаблицаИзмененийРеквизитов,
                                     МассивНомеровВерсий)
	
	ОбластьШапкаРеквизитов = ОбщийШаблон.ПолучитьОбласть("ШапкаРеквизитов");
	ТЧОтчета.Вывести(ОбластьШапкаРеквизитов);
	ТЧОтчета.НачатьГруппуСтрок("ГруппаРеквизитов");
	
	Для Каждого ЭлементМодРеквизит Из ТаблицаИзмененийРеквизитов Цикл
		Если ЭлементМодРеквизит._Модификация = Истина Тогда
			// получаем имя реквизита
			НаименованиеРеквизита = ЭлементМодРеквизит.Наименование;
			// выводим наименование, предварительно заменяя его на другое, если 
			// оно является предопределенным
			ВыводимоеНаименование = ПолучитьПредставлениеРеквизитаНаЯзыке(НаименованиеРеквизита);
			
			ОписаниеРеквизита = СсылкаНаОбъект.Метаданные().Реквизиты.Найти(ВыводимоеНаименование);
			
			Если ОписаниеРеквизита = Неопределено Тогда
				Для Каждого ОписаниеСтандартногоРеквизита Из СсылкаНаОбъект.Метаданные().СтандартныеРеквизиты Цикл
					Если ОписаниеСтандартногоРеквизита.Имя = ПолучитьПредставлениеРеквизитаНаЯзыке(НаименованиеРеквизита) Тогда
						ОписаниеРеквизита = ОписаниеСтандартногоРеквизита;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПустаяЯчейка = ОбщийШаблон.ПолучитьОбласть("ПустаяЯчейка");
			ТЧОтчета.Вывести(ПустаяЯчейка);;
			
			НаименованиеРеквизита = ОбщийШаблон.ПолучитьОбласть("НаименованиеРеквизитаПоля");
			НаименованиеРеквизита.Параметры.НаименованиеРеквизитаПоля = ВыводимоеНаименование;
			ТЧОтчета.Присоединить(НаименованиеРеквизита);
			
			ИндексПоВерсиямРеквизитов = МассивНомеровВерсий.Количество();
			
			Пока ИндексПоВерсиямРеквизитов >= 1 Цикл
				СтруктураХарактеристикаИзменения = ЭлементМодРеквизит["Вер"+МассивНомеровВерсий[ИндексПоВерсиямРеквизитов-1]];
				
				ПредставлениеЗначенияРеквизита = "";
				ЗначениеРеквизита = "";
				Изменение = Неопределено;
				ТипЗначения = "";
				
				// если в текущей версии не было изменений реквизита, то пропускаем до следующей версии
				Если ТипЗнч(СтруктураХарактеристикаИзменения) = Тип("Строка") Тогда
					ЗначениеРеквизита = СтруктураХарактеристикаИзменения;
					
					ОписаниеТипаРеквизита = ОписаниеРеквизита.Тип;
					// пытаемся найти прямое соответствие
					ПредставлениеЗначенияРеквизита =
							СформироватьПредставлениеПоОписаниюТипа(ОписаниеТипаРеквизита,
							                                        ЗначениеРеквизита);
				ИначеЕсли СтруктураХарактеристикаИзменения <> Неопределено Тогда
					Если СтруктураХарактеристикаИзменения.ТипИзменения = "У" Тогда
					Иначе
						ЗначениеРеквизита = СтруктураХарактеристикаИзменения.Значение.ЗначениеРеквизита;
						ТипЗначения = СтруктураХарактеристикаИзменения.Значение.ТипРеквизита;
						Если ЗначениеЗаполнено(ТипЗначения) Тогда
							ПредставлениеЗначенияРеквизита = 
									ПривестиКПредставлениюПоТипуИЗначению(
									                ТипЗначения,
									                ЗначениеРеквизита);
						ИначеЕсли (ОписаниеРеквизита <> Неопределено) Тогда
							ОписаниеТипаРеквизита = ОписаниеРеквизита.Тип;
							// пытаемся найти прямое соответствие
							ПредставлениеЗначенияРеквизита =
									СформироватьПредставлениеПоОписаниюТипа(ОписаниеТипаРеквизита,
																			ЗначениеРеквизита);
						КонецЕсли;
					КонецЕсли;
					// получаем структуру изменения реквизита в текущей версии
					Изменение = СтруктураХарактеристикаИзменения.ТипИзменения;
				КонецЕсли;
				
				Если ПредставлениеЗначенияРеквизита = "" Тогда
					ПредставлениеЗначенияРеквизита = ЗначениеРеквизита;
					Если ПредставлениеЗначенияРеквизита = "" Тогда
						ПредставлениеЗначенияРеквизита = " ";
					КонецЕсли;
				КонецЕсли;
				
				Если      Изменение = Неопределено Тогда
					ОбластьЗначениеРеквизита = ОбщийШаблон.ПолучитьОбласть("ИсходноеЗначениеРеквизита");
					ОбластьЗначениеРеквизита.Параметры.ЗначениеРеквизита = ПредставлениеЗначенияРеквизита;
				ИначеЕсли Изменение = "И" Тогда
					ОбластьЗначениеРеквизита = ОбщийШаблон.ПолучитьОбласть("ИзмененноеЗначениеРеквизита");
					ОбластьЗначениеРеквизита.Параметры.ЗначениеРеквизита = ПредставлениеЗначенияРеквизита;
				ИначеЕсли Изменение = "У" Тогда
					ОбластьЗначениеРеквизита = ОбщийШаблон.ПолучитьОбласть("УдаленныйРеквизит");
					ОбластьЗначениеРеквизита.Параметры.ЗначениеРеквизита = ПредставлениеЗначенияРеквизита;
				ИначеЕсли Изменение = "Д" Тогда
					ОбластьЗначениеРеквизита = ОбщийШаблон.ПолучитьОбласть("ДобавленныйРеквизит");
					ОбластьЗначениеРеквизита.Параметры.ЗначениеРеквизита = ПредставлениеЗначенияРеквизита;
				КонецЕсли;
				
				ТЧОтчета.Присоединить(ОбластьЗначениеРеквизита);
				
				ИндексПоВерсиямРеквизитов = ИндексПоВерсиямРеквизитов - 1;
			КонецЦикла;
		КонецЕсли; // Если ЭлементМодРеквизит._Модификация = Истина Тогда
	КонецЦикла;
	
	ТЧОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиИзмененияТабличныхЧастей(ТЧОтчета,
                                          ТаблицаИзмененийТабличныхЧастей,
                                          МассивНомеровВерсий,
                                          счетчикУнкИд)
	
	ЗаголовокСекцииТабличныхЧастейВыводился = Ложь;
	
	ШаблонСвободнаяСтрока = ОбщийШаблон.ПолучитьОбласть("СвободнаяСтрока");
	ШаблонОчереднаяСтрокаТЧ = ОбщийШаблон.ПолучитьОбласть("ШапкаСтрокиТабличнойЧасти");
	
	ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
	
	// цикл по всем измененным 
	Для Каждого ЭлементИзмененнаяТЧ Из ТаблицаИзмененийТабличныхЧастей Цикл
		ИмяТабличнойЧасти = ЭлементИзмененнаяТЧ.Ключ;
		ВерсииТекущейТЧ = ЭлементИзмененнаяТЧ.Значение;
		
		ТекущаяТабличнаяЧастьИзменилась = Ложь;
		
		Для ТекСчетчикУнкИд = 1 По СчетчикУнкИд[ИмяТабличнойЧасти] Цикл
			
			СтрокаУнкИдИзменена = Ложь;
			// в случае если найдено изменение, необходимо так же показать изначальную версию,
			// от которой происходят изменения
			НачальнаяВерсияЗаполнена = Ложь;
			
			// поиск по всем версиям изменений по текущей строке (УнкИд = ТекСчетчикУнкИд) 
			// если строка была удалена, то поиск можно прервать и перейти к следующей
			// строке, предварительно подсветив "удалено" цветом удаленной сущности
			ИндексПоВерсиям = МассивНомеровВерсий.Количество();
			
			// ---------------------------------------------------------------------------------
			// "просветим" версии наперед, что бы быть уверенными, что изменения встречаются ---
			
			МодифицированностьСтроки = Ложь;
			
			Пока ИндексПоВерсиям >= 1 Цикл
				ТекущаяКолонкаВерсииТЧ = "Вер"+МассивНомеровВерсий[ИндексПоВерсиям-1];
				ТекущаяТЧВерсии = ВерсииТекущейТЧ[ТекущаяКолонкаВерсииТЧ];
				НайденнаяСтрока = ТекущаяТЧВерсии.Найти(ТекСчетчикУнкИд, "_ИдСтроки");
				Если НайденнаяСтрока <> Неопределено Тогда
					Если (НайденнаяСтрока._Модификация <> Неопределено) Тогда
						Если (ТипЗнч(НайденнаяСтрока._Модификация) = Тип("Строка")
							ИЛИ (ТипЗнч(НайденнаяСтрока._Модификация) = Тип("Булево")
							      И НайденнаяСтрока._Модификация = Истина)) Тогда
							МодифицированностьСтроки = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ИндексПоВерсиям = ИндексПоВерсиям - 1;
			КонецЦикла;
			
			Если Не МодифицированностьСтроки Тогда
				Продолжить;
			КонецЕсли;
			
			// ---------------------------------------------------------------------------------
			
			// приступаем к отображению версий в табличный документ
			ИндексПоВерсиям = МассивНомеровВерсий.Количество();
			
			ПромежутокМеждуЗаполнениями = 0;
			
			// Цикл по всем версиям. Пытаемся найти изменения по строку в каждой версии
			// по ее УнкИд.
			Пока ИндексПоВерсиям >= 1 Цикл
				ПромежутокМеждуЗаполнениями = ПромежутокМеждуЗаполнениями + 1;
				ТекущаяКолонкаВерсииТЧ = "Вер"+МассивНомеровВерсий[ИндексПоВерсиям-1];
				// табличная часть текущей версии (таблица значений с признаками модификации)
				ТекущаяТЧВерсии = ВерсииТекущейТЧ[ТекущаяКолонкаВерсииТЧ];
				НайденнаяСтрока = ТекущаяТЧВерсии.Найти(ТекСчетчикУнкИд, "_ИдСтроки");
				
				// в очередной версии найдено изменение строки (возможно это первое изменение с конца)
				Если НайденнаяСтрока <> Неопределено Тогда
					
					// блок для вывода шапки секции всех табличных частей
					Если Не ЗаголовокСекцииТабличныхЧастейВыводился Тогда
						ЗаголовокСекцииТабличныхЧастейВыводился = Истина;
						ШаблонОбщаяШапкаСекцииТЧ = ОбщийШаблон.ПолучитьОбласть("ШапкаТабличныхЧастей");
						ТЧОтчета.Вывести(ШаблонОбщаяШапкаСекцииТЧ);
						ТЧОтчета.НачатьГруппуСтрок("ГруппаТабличныхЧастей");
						ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
					КонецЕсли;
					
					// блок для вывода шапки текущей обрабатываемой табличной части
					Если Не ТекущаяТабличнаяЧастьИзменилась Тогда
						ТекущаяТабличнаяЧастьИзменилась = Истина;
						ШаблонШапкаТекущейТЧ = ОбщийШаблон.ПолучитьОбласть("ШапкаТабличнойЧасти");
						ШаблонШапкаТекущейТЧ.Параметры.НаименованиеТабличнойЧасти = ИмяТабличнойЧасти;
						ТЧОтчета.Вывести(ШаблонШапкаТекущейТЧ);
						ТЧОтчета.НачатьГруппуСтрок("ТабличнаяЧасть"+ИмяТабличнойЧасти);
						ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
					КонецЕсли;
					
					Модификация = НайденнаяСтрока._Модификация;
					
					Если СтрокаУнкИдИзменена = Ложь Тогда
						СтрокаУнкИдИзменена = Истина;
						
						ШаблонШапкаСтрокиТЧ = ОбщийШаблон.ПолучитьОбласть("ШапкаСтрокиТабличнойЧасти");
						ШаблонШапкаСтрокиТЧ.Параметры.НомерСтрокиТабличнойЧасти = ТекСчетчикУнкИд;
						ТЧОтчета.Вывести(ШаблонШапкаСтрокиТЧ);
						ТЧОтчета.НачатьГруппуСтрок("ГруппаСтрок"+ИмяТабличнойЧасти+ТекСчетчикУнкИд);
						
						ТипВывода = "";
						Если Модификация = "У" Тогда
							ТипВывода = "У"
						КонецЕсли;
						МассивЗаполнения = Новый Массив;
						Для Каждого Колонка Из ТекущаяТЧВерсии.Колонки Цикл
							Если Колонка.Имя = "_ИдСтроки"
							 Или Колонка.Имя = "_Модификация" Тогда
								Продолжить;
							КонецЕсли;
							МассивЗаполнения.Добавить(Колонка.Имя);
						КонецЦикла;
						
						ПустойСектор = СформироватьПустойСектор(ТекущаяТЧВерсии.Колонки.Количество()-2);
						ПустойСекторЗаполняемый = СформироватьПустойСектор(ТекущаяТЧВерсии.Колонки.Количество()-2, ТипВывода);
						Секция = СформироватьСекторСтрокиТЧ(МассивЗаполнения, ТипВывода);
						
						ТЧОтчета.Присоединить(ПустойСектор);
						ТЧОтчета.Присоединить(Секция);
					КонецЕсли;
					
					Пока ПромежутокМеждуЗаполнениями > 1 Цикл
						ТЧОтчета.Присоединить(ПустойСекторЗаполняемый);
						ПромежутокМеждуЗаполнениями = ПромежутокМеждуЗаполнениями - 1;
					КонецЦикла;
					
					ПромежутокМеждуЗаполнениями = 0;
					
					// теперь заполняем очередную измененную табличную строку
					МассивЗаполнения = Новый Массив;
					Для Каждого Колонка Из ТекущаяТЧВерсии.Колонки Цикл
						Если Колонка.Имя = "_ИдСтроки"
						 Или Колонка.Имя = "_Модификация" Тогда
							Продолжить;
						КонецЕсли;
						
						Значение = НайденнаяСтрока[Колонка.Имя];
						
						ОписаниеТабличногоПоля = СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Найти(ИмяТабличнойЧасти).Реквизиты.Найти(Колонка.Имя);
						Представление = ОпределитьПредставление(Значение, Колонка.Имя, ОписаниеТабличногоПоля);
						МассивЗаполнения.Добавить(Представление);
						
					КонецЦикла;
					
					Если ТипЗнч(Модификация) = Тип("Булево") Тогда
						ТипВывода = "";
					Иначе
						ТипВывода = Модификация;
					КонецЕсли;
					
					Секция = СформироватьСекторСтрокиТЧ(МассивЗаполнения, ТипВывода);
					
					ТЧОтчета.Присоединить(Секция);
					
				КонецЕсли; // НайденнаяСтрока <> Неопределено
				ИндексПоВерсиям = ИндексПоВерсиям - 1;
			КонецЦикла;
			
			Если СтрокаУнкИдИзменена Тогда
				ТЧОтчета.ЗакончитьГруппуСтрок();
				ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущаяТабличнаяЧастьИзменилась Тогда
			ТЧОтчета.ЗакончитьГруппуСтрок();
			ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаголовокСекцииТабличныхЧастейВыводился Тогда
		ТЧОтчета.ЗакончитьГруппуСтрок();
		ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Функция ВывестиРезультатыКомпоновкиВОтчет(ТаблицаИзмененийРеквизитов,
                                          ТаблицаИзмененийТабличныхЧастей,
                                          счетчикУнкИд,
                                          МассивНомеровВерсий,
                                          ТЧОтчета)
	
	ЧислоИзменившихсяРеквизитов = РассчитатьЧислоИзменившихсяРеквизитов(ТаблицаИзмененийРеквизитов, МассивНомеровВерсий);
	ЧислоВерсий = МассивНомеровВерсий.Количество();
	
	///////////////////////////////////////////////////////////////////////////////
	//                           ВЫВОДИМ ОТЧЕТ                                   //
	///////////////////////////////////////////////////////////////////////////////
	
	ТЧОтчета.Очистить();
	
	ВывестиШапку(ТЧОтчета, МассивНомеровВерсий, ЧислоВерсий);
	
	Если ЧислоИзменившихсяРеквизитов = 0 Тогда
		ОбластьШапкаРеквизитов = ОбщийШаблон.ПолучитьОбласть("ШапкаРеквизитов");
		ТЧОтчета.Вывести(ОбластьШапкаРеквизитов);
		ТЧОтчета.НачатьГруппуСтрок("ГруппаРеквизитов");
		ОбластьРеквизитыНеИзменялись = ОбщийШаблон.ПолучитьОбласть("РеквизитыНеИзменялись");
		ТЧОтчета.Вывести(ОбластьРеквизитыНеИзменялись);
		ТЧОтчета.ЗакончитьГруппуСтрок();
	Иначе
		ВывестиИзмененияРеквизитов(ТЧОтчета,
		                           ТаблицаИзмененийРеквизитов,
		                           МассивНомеровВерсий);
		
	КонецЕсли;
	
	ВывестиИзмененияТабличныхЧастей(ТЧОтчета,
	                                ТаблицаИзмененийТабличныхЧастей,
	                                МассивНомеровВерсий,
	                                счетчикУнкИд);
	
	ТЧОтчета.ИтогиСнизу = Ложь;
	ТЧОтчета.ОтображатьСетку = Ложь;
	ТЧОтчета.Защита = Ложь;
	ТЧОтчета.ТолькоПросмотр = Истина;
	
КонецФункции

Функция ВывестиШапку(ТЧОтчета, МассивНомеровВерсий, ЧислоВерсий)
	
	ОбластьШапка = ОбщийШаблон.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.НаименованиеОтчета = НСтр("ru = 'Отчет по изменениям версий объекта'");
	ОбластьШапка.Параметры.НаименованиеОбъекта = Строка(СсылкаНаОбъект);
	
	ТЧОтчета.Вывести(ОбластьШапка);
	
	ПустаяЯчейка = ОбщийШаблон.ПолучитьОбласть("ПустаяЯчейка");
	ОбластьВерсии = ОбщийШаблон.ПолучитьОбласть("ЗаголовокВерсии");
	ТЧОтчета.Присоединить(ПустаяЯчейка);
	ТЧОтчета.Присоединить(ОбластьВерсии);
	
	ОбластьВерсии = ОбщийШаблон.ПолучитьОбласть("ПредставлениеВерсии");
	
	ИндексПоВерсиям = ЧислоВерсий;
	Пока ИндексПоВерсиям > 0 Цикл
		ОбластьВерсии.Параметры.ПредставлениеВерсии = 
		                      ПолучитьОписаниеПоВерсии(МассивНомеровВерсий[ИндексПоВерсиям-1]);
		ТЧОтчета.Присоединить(ОбластьВерсии);
		ТЧОтчета.Область("C"+Строка(ИндексПоВерсиям+2)).ШиринаКолонки = 50;
		ИндексПоВерсиям = ИндексПоВерсиям - 1;
	КонецЦикла;
	
	ОбластьСвободнаяСтрока = ОбщийШаблон.ПолучитьОбласть("СвободнаяСтрока");
	ТЧОтчета.Вывести(ОбластьСвободнаяСтрока);
	
КонецФункции

// Движок отчета. Заполняет отчет по номеру переданной версии.
// Выполняется сравнение между версиями переданной в качестве параметра РезультатРазбораВерсии_0
// и заданной по НомерВерсии
// Последовательность выполнения:
// 1. Получение результата разбора версий сравниваемых объектов
// 2. Формирование списка реквизитов и табличных частей, которые были
//    - изменены
//    - добавлены
//    - удалены
//
Функция РассчитатьИзменения(НомерВерсии,
                           РезультатРазбораВерсии_0,
                           РезультатРазбораВерсии_1)
	
	ЭтоДокумент = Ложь;
	
	Если Метаданные.Документы.Содержит(СсылкаНаОбъект.Метаданные()) Тогда
		ЭтоДокумент = Истина;
	КонецЕсли;
	
	// Выполняем разбор предпоследней версии
	Реквизиты_0      = РезультатРазбораВерсии_0.Реквизиты;
	ТабличныеЧасти_0 = РезультатРазбораВерсии_0.ТабличныеЧасти;
	
	// Выполняем разбор последней версии
	РезультатРазбораВерсии_1 = РазборВерсии(НомерВерсии, СсылкаНаОбъект);
	Реквизиты_1      = РезультатРазбораВерсии_1.Реквизиты;
	ТабличныеЧасти_1 = РезультатРазбораВерсии_1.ТабличныеЧасти;
	
	///////////////////////////////////////////////////////////////////////////////
	//           Формируем список табличных частей, которые изменились           //
	///////////////////////////////////////////////////////////////////////////////
	СписокТабличныхЧастей_0	= СоздатьТаблицуСравнения();
	Для Каждого Элемент Из ТабличныеЧасти_0 Цикл
		НоваяСтрока = СписокТабличныхЧастей_0.Добавить();
		НоваяСтрока.Установить(0, СокрЛП(Элемент.Ключ));
	КонецЦикла;
	
	СписокТабличныхЧастей_1	= СоздатьТаблицуСравнения();
	Для Каждого Элемент Из ТабличныеЧасти_1 Цикл
		НоваяСтрока = СписокТабличныхЧастей_1.Добавить();
		НоваяСтрока.Установить(0, СокрЛП(Элемент.Ключ));
	КонецЦикла;
	
	// возможно была изменена структура метаданных - добавились или были удалены реквизиты
	СписокДобавленныхТЧ = ВычестьТаблицу(СписокТабличныхЧастей_1, СписокТабличныхЧастей_0);
	СписокУдаленныхТЧ  = ВычестьТаблицу(СписокТабличныхЧастей_0, СписокТабличныхЧастей_1);
	
	// список не изменившихся реквизитов, по которым будем искать совпадения / расхождения
	СписокОставшихсяТЧ = ВычестьТаблицу(СписокТабличныхЧастей_1, СписокДобавленныхТЧ);
	
	// список реквизитов, которые были изменены
	СписокИзменившихсяТЧ = НайтиИзменившиесяТабличныеЧасти(СписокОставшихсяТЧ,
	                                                       ТабличныеЧасти_0,
	                                                       ТабличныеЧасти_1);
	
	///////////////////////////////////////////////////////////////////////////////
	//           Формируем список реквизитов, которые изменились                 //
	///////////////////////////////////////////////////////////////////////////////
	СписокРеквизитов0 = СоздатьТаблицуСравнения();
	Для Каждого Реквизит Из РезультатРазбораВерсии_0.Реквизиты Цикл
		НоваяСтрока = СписокРеквизитов0.Добавить();		
		НоваяСтрока.Установить(0, СокрЛП(Строка(Реквизит.НаименованиеРеквизита)));
	КонецЦикла;
	
	СписокРеквизитов1 = СоздатьТаблицуСравнения();
	Для Каждого Реквизит Из РезультатРазбораВерсии_1.Реквизиты Цикл
		НоваяСтрока = СписокРеквизитов1.Добавить();
		НоваяСтрока.Установить(0, СокрЛП(Строка(Реквизит.НаименованиеРеквизита)));
	КонецЦикла;
	
	// возможно была изменена структура метаданных - добавились или были удалены реквизиты
	СписокДобавленныхРеквизитов = ВычестьТаблицу(СписокРеквизитов1, СписокРеквизитов0);
	СписокУдаленныхРеквизитов  = ВычестьТаблицу(СписокРеквизитов0, СписокРеквизитов1);
	
	// список не изменившихся реквизитов, по которым будем искать совпадения / расхождения
	СписокОставшихсяРеквизитов = ВычестьТаблицу(СписокРеквизитов1, СписокДобавленныхРеквизитов);
	
	// список реквизитов, которые были изменены
	СписокИзменившихсяРеквизитов = СоздатьТаблицуСравнения();
	
	ИзмененияВРеквизитах = Новый Соответствие;
	ИзмененияВРеквизитах.Вставить("д", СписокДобавленныхРеквизитов);
	ИзмененияВРеквизитах.Вставить("у", СписокУдаленныхРеквизитов);
	ИзмененияВРеквизитах.Вставить("и", СписокИзменившихсяРеквизитов);
	
	Для Каждого СтрокаТаблицыЗначений Из СписокОставшихсяРеквизитов Цикл
		
		Реквизит = СтрокаТаблицыЗначений.Значение;
		Зн_0 = Реквизиты_0.Найти(Реквизит, "НаименованиеРеквизита").ЗначениеРеквизита;
		Зн_1 = Реквизиты_1.Найти(Реквизит, "НаименованиеРеквизита").ЗначениеРеквизита;
		
		Если Зн_0 <> Зн_1 Тогда
			НоваяСтрока = СписокИзменившихсяРеквизитов.Добавить();
			НоваяСтрока.Установить(0, Реквизит);
		КонецЕсли;
		
	КонецЦикла;
	
	ИзмененияВТаблицах = РасчитатьИзмененияТабличныхЧастей(
	                              СписокИзменившихсяТЧ,
	                              ТабличныеЧасти_0,
	                              ТабличныеЧасти_1);
	
	МодификацииТабличныхЧастей = Новый Структура;
	МодификацииТабличныхЧастей.Вставить("д", СписокДобавленныхТЧ);
	МодификацииТабличныхЧастей.Вставить("у", СписокУдаленныхТЧ);
	МодификацииТабличныхЧастей.Вставить("и", ИзмененияВТаблицах);
	
	КомпоновкаИзменений = Новый Соответствие;
	КомпоновкаИзменений.Вставить("Реквизиты",      ИзмененияВРеквизитах);
	КомпоновкаИзменений.Вставить("ТабличныеЧасти", МодификацииТабличныхЧастей);
	
	Возврат КомпоновкаИзменений;
	
КонецФункции

// Функция добавляет колонки, соответственно количеству версий объекта
// Колонки имеют называния в виде "Вер<Номер>", где <Номер> принимает
// значения от 1 до количества сохраненных версий объекта. Нумерация
// является условной, т.е. например название "Вер1" может не соответствовать
// сохраненной версии объекта с версией 0.
//
Процедура ПодготовитьКолонкиТаблицИзмененийРеквизитов(ТаблицаЗначений,
                                                      МассивНомеровВерсий)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("Наименование");
	ТаблицаЗначений.Колонки.Добавить("_Модификация");
	ТаблицаЗначений.Колонки.Добавить("_ТипЗначения"); // предполагаемый тип значения
	
	Для Индекс = 1 По МассивНомеровВерсий.Количество() Цикл
		ТаблицаЗначений.Колонки.Добавить("Вер" + МассивНомеровВерсий[Индекс-1]);
	КонецЦикла;
	
КонецПроцедуры

Функция РасчитатьИзмененияТабличныхЧастей(СписокИзменившихсяТЧ,
                                          ТабличныеЧасти_0,
                                          ТабличныеЧасти_1)
	
	ИзмененияВТаблицах = Новый Соответствие;
	
	// цикл по количеству табличных частей
	Для Индекс = 1 По СписокИзменившихсяТЧ.Количество() Цикл
		
		ИзмененияВТаблицах.Вставить(СписокИзменившихсяТЧ[Индекс-1].Значение, Новый Соответствие);
		
		// Таблица разбиений предназначена для хранения интервалов поиска
		// поиск прекратиться только тогда, когда в таблице разбиений
		// не останется ненулевых размерностей. Поиск может происходить ТОЛЬКО
		// по таблице интервалов и только по текущему интервалу!!!
		//
		ТаблицаИнтерваловПоиска = Новый ТаблицаЗначений;
		ТаблицаИнтерваловПоиска.Колонки.Добавить("БлокНачало_1");
		ТаблицаИнтерваловПоиска.Колонки.Добавить("БлокКонец_1");
		ТаблицаИнтерваловПоиска.Колонки.Добавить("БлокНачало_2");
		ТаблицаИнтерваловПоиска.Колонки.Добавить("БлокКонец_2");
		
		ТаблицаДляАнализа = СписокИзменившихсяТЧ[Индекс-1].Значение;
		ТЧ0 = ТабличныеЧасти_0[ТаблицаДляАнализа];
		ТЧ1 = ТабличныеЧасти_1[ТаблицаДляАнализа];
		
		ПервоеРазбиение = ТаблицаИнтерваловПоиска.Добавить();
		ПервоеРазбиение.БлокНачало_1 = 1;
		ПервоеРазбиение.БлокКонец_1  = ТЧ0.Количество();
		ПервоеРазбиение.БлокНачало_2 = 1;
		ПервоеРазбиение.БлокКонец_2  = ТЧ1.Количество();
		
		// Часть №1:
		// фильтрация совпадающих элементов элементов
		// на выходе - заполненная ТаблицаИнтерваловПоиска.
		// Далее необходимо эту таблицу обработать и вычислить
		// добавленные/удаленные/измененные элементы.
		
		ИзмененияВИнтервалах = Истина;
		// цикл до тех пока появляются новые интервалы для поиска
		Пока ИзмененияВИнтервалах Цикл
			
			// число интервалов в которых будет происходить поиск
			ЧислоИнтерваловПоиска = ТаблицаИнтерваловПоиска.Количество();
			
			ИзмененияВИнтервалах = Ложь;
			
			Для НомерИнтервалаПоиска = 1 По ЧислоИнтерваловПоиска Цикл
			
				БлокНачало_1 = ТаблицаИнтерваловПоиска[НомерИнтервалаПоиска-1].БлокНачало_1;
				БлокКонец_1  = ТаблицаИнтерваловПоиска[НомерИнтервалаПоиска-1].БлокКонец_1;
				
				БлокНачало_2 = ТаблицаИнтерваловПоиска[НомерИнтервалаПоиска-1].БлокНачало_2;
				БлокКонец_2  = ТаблицаИнтерваловПоиска[НомерИнтервалаПоиска-1].БлокКонец_2;
				
				Если    (БлокНачало_1 > БлокКонец_1)
					ИЛИ (БлокНачало_2 > БлокКонец_2) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				// этот интервал можно удалить
				Если      (БлокКонец_1 = 0) И (БлокКонец_2 = 0) Тогда
					// удаляем этот интервал и сбрасываем счетчик по разбиениям
					ТаблицаИнтерваловПоиска.Удалить(НомерИнтервалаПоиска);
					Прервать;
				// Если интервал разбиения ТЧ0 нулевой, то строки были добавлены в ТЧ1
				ИначеЕсли (БлокКонец_1 = 0) Тогда
				// Если интервал разбиения ТЧ1 нулевой, то строки были удалены в ТЧ1
				ИначеЕсли (БлокКонец_2 = 0) Тогда
				
				Иначе
					Результат = НайтиОдинаковыеБлоки(ТЧ0, ТЧ1,
					                                 БлокНачало_1,
					                                 БлокКонец_1,
					                                 БлокНачало_2,
					                                 БлокКонец_2,
					                                 ТаблицаИнтерваловПоиска,
					                                 НомерИнтервалаПоиска);
					
					Если Результат <> Неопределено Тогда
						
						ИзмененияВИнтервалах = Истина;
						
						// разбиваем текущий интервал - выделяем в нем участок, в котором отсутствуют совпадающие элементы
						
						Строка = ТаблицаИнтерваловПоиска.Вставить(НомерИнтервалаПоиска-1);
						Строка.БлокНачало_1 = БлокНачало_1;
						Строка.БлокКонец_1  = Результат.БлокНачало_1 - 1;
						
						Строка.БлокНачало_2 = БлокНачало_2;
						Строка.БлокКонец_2  = Результат.БлокНачало_2 - 1;
						
						Строка = ТаблицаИнтерваловПоиска.Вставить(НомерИнтервалаПоиска);
						Строка.БлокНачало_1 = Результат.БлокНачало_1+Результат.Размер;
						Строка.БлокКонец_1  = БлокКонец_1;
						
						Строка.БлокНачало_2 = Результат.БлокНачало_2+Результат.Размер;
						Строка.БлокКонец_2  = БлокКонец_2;
						
						ТаблицаИнтерваловПоиска.Удалить(НомерИнтервалаПоиска+1);
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Удаляем "пустые интервалы".
		Для Каждого Элемент Из ТаблицаИнтерваловПоиска Цикл
			Если  (Элемент.БлокНачало_1 > Элемент.БлокКонец_1)
				И (Элемент.БлокНачало_2 > Элемент.БлокКонец_2) Тогда
				ТаблицаИнтерваловПоиска.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		// шаг 3- сортировка строк по признаку добавлены / удалены / изменены
		
		ТаблицаДобавленныхСтрок = Новый ТаблицаЗначений;
		ТаблицаУдаленныхСтрок   = Новый ТаблицаЗначений;
		ТаблицаИзмененныхСтрок  = Новый ТаблицаЗначений;
		
		Для Каждого Элемент Из ТЧ0.Колонки Цикл
			ТаблицаДобавленныхСтрок.Колонки.Добавить(Элемент.Имя);
			ТаблицаУдаленныхСтрок.Колонки.Добавить(Элемент.Имя);
			ТаблицаИзмененныхСтрок.Колонки.Добавить(Элемент.Имя);
		КонецЦикла;
		
		// 3.1 ищем все вхождения в своих подинтервалах
		
		ТаблицаИзмененныхСтрок = Новый ТаблицаЗначений;
		ТаблицаИзмененныхСтрок.Колонки.Добавить("ИндексВТЧ0");
		ТаблицаИзмененныхСтрок.Колонки.Добавить("ИндексВТЧ1");
		
		ТаблицаДобавленныхСтрок = Новый ТаблицаЗначений;
		ТаблицаДобавленныхСтрок.Колонки.Добавить("ИндексВТЧ1");
		
		ТаблицаУдаленныхСтрок = Новый ТаблицаЗначений;
		ТаблицаУдаленныхСтрок.Колонки.Добавить("ИндексВТЧ0");
		
		Для Каждого Элемент Из ТаблицаИнтерваловПоиска Цикл
			ИзмененныеСтроки = РассчитатьИзмененияПоСтрокам(ТаблицаИзмененныхСтрок,
			                                                ТаблицаДобавленныхСтрок,
			                                                ТаблицаУдаленныхСтрок,
			                                                Элемент,
			                                                ТЧ0,
			                                                ТЧ1);
		КонецЦикла;
		
		ИзмененияВТаблицах[СписокИзменившихсяТЧ[Индекс-1].Значение].Вставить("Д", ТаблицаДобавленныхСтрок);
		ИзмененияВТаблицах[СписокИзменившихсяТЧ[Индекс-1].Значение].Вставить("У", ТаблицаУдаленныхСтрок);
		ИзмененияВТаблицах[СписокИзменившихсяТЧ[Индекс-1].Значение].Вставить("И", ТаблицаИзмененныхСтрок);
		
	КонецЦикла;
	
	Возврат ИзмененияВТаблицах;
	
КонецФункции

// Сравнивает две табличные части, список которых передается в первом параметре
// и пытается найти расхождения в них (не совпадающие элементы). Если таковые
// таблицы есть, то формируется список таких табличных частей.
//
Функция НайтиИзменившиесяТабличныеЧасти(СписокОставшихсяТЧ,
                                        ТабличныеЧасти_0,
                                        ТабличныеЧасти_1)
	
	СписокИзменившихсяТЧ = СоздатьТаблицуСравнения();
	
	// Поиск Табличных частей, в которых изменились строки
	Для Каждого Элемент Из СписокОставшихсяТЧ Цикл
		
		ТЧ_0 = ТабличныеЧасти_0[Элемент.Значение];
		ТЧ_1 = ТабличныеЧасти_1[Элемент.Значение];
		
		Если ТЧ_0.Количество() = ТЧ_1.Количество() Тогда
			
			НайденоОтличие = Ложь;
			// проверяем, что структура колонок осталась прежней (эквивалентна)
			Если ТЧЭквиваленты (ТЧ_0.Колонки, ТЧ_1.Колонки) Тогда
				
				// ищем различающиеся элементы - строки
				Для Индекс = 0 По ТЧ_0.Количество() - 1 Цикл
					Строка_0 = ТЧ_0[Индекс];
					Строка_1 = ТЧ_1[Индекс];
					
					Если НЕ СтрокиТЧРавны(Строка_0, Строка_1, ТЧ_0.Колонки) Тогда
						НайденоОтличие = Истина;
						Прервать;
					КонецЕсли
				КонецЦикла;
				
			Иначе
				НайденоОтличие = Истина;
			КонецЕсли;
			
			Если НайденоОтличие Тогда
				НоваяСтрока = СписокИзменившихсяТЧ.Добавить();
				НоваяСтрока.Установить(0, Элемент.Значение);
			КонецЕсли;
			
		Иначе
			НоваяСтрока = СписокИзменившихсяТЧ.Добавить();
			НоваяСтрока.Установить(0, Элемент.Значение);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СписокИзменившихсяТЧ;
	
КонецФункции

// Функция по номеру версии объекта и ссылке на него получает объект из
// регистра сведений, записывает его на диск и вызывает функцию разбора
// XML представления объекта.
// Параметры:
// НомерВерсии   - число - номер версии документа в регистре сведений
// Ссылка        - СправочникСсылка/ДокументСсылка - ссылка на экземпляр 
//                 объекта метаданных
// Возвращаемое значение:
// Структура:
//
Функция РазборВерсии(НомерВерсии, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ АвторВерсии, ДатаВерсии, ВерсияОбъекта 
	                |ИЗ РегистрСведений.ВерсииОбъектов
	                |ГДЕ Объект = &Ссылка
	                |И НомерВерсии = &НомВер";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НомВер", Число(НомерВерсии));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ВерсияОбъекта = Выборка.ВерсияОбъекта.Получить();
	
	Если ВерсияОбъекта = Неопределено Тогда
		Возврат Ложь;
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ВерсияОбъекта.Записать(ИмяВременногоФайла);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
		СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
		УдалитьФайлы(ИмяВременногоФайла);
		
		Результат = РазборПредставленияОбъектаXML(СтрокаXML, Ссылка);
		Результат.Вставить("ИмяОбъекта", Строка(Ссылка));
		Результат.Вставить("АвторИзменения", СокрЛП(Строка(Выборка.АвторВерсии)));
		Результат.Вставить("ДатаИзменения", Выборка.ДатаВерсии);
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

// Функция считывает начальные значения реквизитов и табличных частей документа
// формат формируемой структуры данных для реквизитов:
// ТаблицаРеквизитов - ТаблицаЗначений
// Колонки 
// |-Вер<младший номер версии>
// |-...
// |-Вер<старший номер версии>
// |-_Модификация (Булево)
// |-Наименование
//
// Строки содержат список реквизитов и их изменения во времени, в колонке _Модификация
// содержится признак модифицированности строки:
// ложь - строка не была изменена
// "д"  - строка была добавлена
// "у"  - строка была удалена
// "и"  - строка была изменена
//
// Формат формируемой структуры данных для таблиц значений:
// ТаблицаТЧ - Соответствие
// |- <Имя табличной части1> - Соответствие
//    |-Вер<младший номер версии> - ТаблицаЗначений
//       Колонки
//       |- Базовые колонки соответствующей таблицы части объекта
//       |- _ИдСтроки     - уникальный, в пределах таблицы, идентификатор данной строки
//       |- _Модификация  - признак модифицированности строки
//           принимает следующие значения:
//           ложь - строка не была изменена
//           "д"  - строка была добавлена
//           "у"  - строка была удалена
//           "и"  - строка была изменена
//    |-...
//    |-Вер<старший номер версии>
// |-...
// |- <Имя табличной частиN>
//
Функция СчитатьНачальныеЗначенияРеквизитовИТабличныхЧастей(ТаблицаРеквизитов,
                                                           ТаблицаТЧ,
                                                           КоличествоВерсий,
                                                           МассивНомеровВерсий)
	
	МладшаяВерсияОбъекта = МассивНомеровВерсий[0];
	
	// Выполняем разбор первой версии
	ВерсияОбъекта  = РазборВерсии(МладшаяВерсияОбъекта, СсылкаНаОбъект);
	Реквизиты      = ВерсияОбъекта.Реквизиты;
	ТабличныеЧасти = ВерсияОбъекта.ТабличныеЧасти;
	
	Колонка = "Вер" + МассивНомеровВерсий[0];
	
	Для Каждого СтрокаТаблицыЗначений Из Реквизиты Цикл
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока[Колонка] = СтрокаТаблицыЗначений.ЗначениеРеквизита;
		НоваяСтрока.Наименование = СтрокаТаблицыЗначений.НаименованиеРеквизита;
		НоваяСтрока._Модификация = Ложь;
		НоваяСтрока._ТипЗначения = СтрокаТаблицыЗначений.ТипРеквизита;
	КонецЦикла;
	
	Для Каждого ЭлементТЧ Из ТабличныеЧасти Цикл
		
		ТаблицаТЧ.Вставить(ЭлементТЧ.Ключ, Новый Соответствие);
		ПодготовитьКолонкиТаблицИзмененийДляСоответствия(ТаблицаТЧ[ЭлементТЧ.Ключ], МассивНомеровВерсий);
		ТаблицаТЧ[ЭлементТЧ.Ключ]["Вер"+МладшаяВерсияОбъекта] = ЭлементТЧ.Значение.Скопировать();
		
		ТекущаяТЗ = ТаблицаТЧ[ЭлементТЧ.Ключ]["Вер"+МладшаяВерсияОбъекта];
		
		// спец идентификатор строки что бы различать строки
		// значение является уникальным в пределах данной таблицы значений
		ТекущаяТЗ.Колонки.Добавить("_ИдСтроки");
		ТекущаяТЗ.Колонки.Добавить("_Модификация");
		
		Для Индекс = 1 По ТекущаяТЗ.Количество() Цикл
			ТекущаяТЗ[Индекс-1]._ИдСтроки = Индекс;
			ТекущаяТЗ[Индекс-1]._Модификация = Ложь;
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат ВерсияОбъекта;
	
КонецФункции

// Процедура считывает данные XML из файла и заполняет структуры данных
//
// Возвращаемое значение:
// Структура, содержащая два соответствия: ТабличныеЧасти, Реквизиты
// Структура хранения данных:
// Соответствие ТабличныеЧасти, которое содержит в себе значения табличных частей
// формат: 
//          СоответствиеИмя1 -> ТаблицаЗначений1
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM1
//
//          СоответствиеИмя2 -> ТаблицаЗначений2
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM2
//
//
//          СоответствиеИмяN -> ТаблицаЗначенийN
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM3
//
// Соответствие ЗначенияРеквизитов
//          ИмяРеквизита1 -> Значение1
//          ИмяРеквизита2 -> Значение2
//          ...
//          ИмяРеквизитаN -> ЗначениеN
//
Функция РазборПредставленияОбъектаXML(СтрокаXML, Ссылка)
	
	// содержит имя метаданного измененного объекта
	Перем ИмяОбъекта;
	
	// Содержит положение маркера в дереве XML.
	// Требуется для идентификации текущего элемента.
	Перем УровеньЧтения;
	
	// Содержат значения реквизитов справочников / документов
	ЗначенияРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияРеквизитов.Колонки.Добавить("НаименованиеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ЗначениеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ТипРеквизита");
	
	ТабличныеЧасти = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	// уровень позиции маркера в иерархии XML:
	// 0 - уровень не задан
	// 1 - первый элемент (имя объекта)
	// 2 - описание реквизита или табличной части
	// 3 - описание строки табличной части
	// 4 - описание поля строки табличной части
	УровеньЧтения = 0;
	
	ТабличныеЧастиМТД = Ссылка.Метаданные().ТабличныеЧасти;
	
	ТипЗначения = "";
	
	// основной цикл разбора по XML
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			УровеньЧтения = УровеньЧтения + 1;
			Если УровеньЧтения = 1 Тогда // указатель на первом элементе XML - корень XML
				ИмяОбъекта = ЧтениеXML.Имя;
			ИначеЕсли УровеньЧтения = 2 Тогда // указатель на втором уровне - это реквизит или имя табличной части
				ИмяРеквизита = ЧтениеXML.Имя;
				Если ТабличныеЧастиМТД.Найти(ИмяРеквизита) <> Неопределено Тогда
					ИмяТабличнойЧасти = ИмяРеквизита;
					// создаем новую таблицу значений в таблице соответствий
					Если ТабличныеЧасти[ИмяТабличнойЧасти] = Неопределено Тогда
						ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, Новый ТаблицаЗначений);
					КонецЕсли;
				КонецЕсли;
				НовоеЗР = ЗначенияРеквизитов.Добавить();
				НовоеЗР.НаименованиеРеквизита = ИмяРеквизита;
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут 
						   И ЧтениеXML.Имя = "xsi:type" Тогда
							НовоеЗР.ТипРеквизита = ЧтениеXML.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			
			ИначеЕсли (УровеньЧтения = 3) и (ЧтениеXML.Имя = "Row") Тогда // указатель на поле табличной части
				ТабличныеЧасти[ИмяТабличнойЧасти].Добавить();
			ИначеЕсли УровеньЧтения = 4 Тогда // указатель на поле табличной части
				
				ИмяПоляТЧ = ЧтениеXML.Имя; // 
				Таблица   = ТабличныеЧасти[ИмяТабличнойЧасти];
				Если Таблица.Колонки.Найти(ИмяПоляТЧ)= Неопределено Тогда
					Таблица.Колонки.Добавить(ИмяПоляТЧ);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			УровеньЧтения = УровеньЧтения - 1;
			ТипЗначения = "";
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если (УровеньЧтения = 2) Тогда // значение реквизита
				НовоеЗР.ЗначениеРеквизита = ЧтениеXML.Значение;
				//ЗначенияРеквизитов[ИмяРеквизита] = ЧтениеXML.Значение;
				
			ИначеЕсли (УровеньЧтения = 4) Тогда // значение реквизита
				ПоследняяСтрока = ТабличныеЧасти[ИмяТабличнойЧасти].Получить(ТабличныеЧасти[ИмяТабличнойЧасти].Количество()-1);
				ПоследняяСтрока[ИмяПоляТЧ] = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// 2-й этап: из списка реквизитов исключаем табличные части
	Для Каждого Элемент Из ТабличныеЧасти Цикл
		ЗначенияРеквизитов.Удалить(ЗначенияРеквизитов.Найти(Элемент.Ключ));
	КонецЦикла;
	//ТабличныеЧастиМТД
	Для Каждого ЭлементСоответствия Из ТабличныеЧасти Цикл
		Таблица = ЭлементСоответствия.Значение;
		Если Таблица.Колонки.Количество() = 0 Тогда
			ТаблицаМТД = ТабличныеЧастиМТД.Найти(ЭлементСоответствия.Ключ);
			Если ТаблицаМТД <> Неопределено Тогда
				Для Каждого ОписаниеКолонки Из ТаблицаМТД.Реквизиты Цикл
					Если Таблица.Колонки.Найти(ОписаниеКолонки.Имя)= Неопределено Тогда
						Таблица.Колонки.Добавить(ОписаниеКолонки.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизиты", ЗначенияРеквизитов);
	Результат.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	Возврат Результат;
	
КонецФункции

Процедура ПодготовитьКолонкиТаблицИзмененийДляСоответствия(Соответствие, МассивНомеровВерсий)
	
	Количество = МассивНомеровВерсий.Количество();
	
	Для Индекс = 1 По Количество Цикл
		Соответствие.Вставить("Вер" + МассивНомеровВерсий[Индекс-1], Новый ТаблицаЗначений);
	КонецЦикла;
	
КонецПроцедуры

// Функция ищет одно вхождение части одного блока в другой
//
Функция НайтиОдинаковыеБлоки(ТаблицаЗначений1,
                             ТаблицаЗначений2,
                             БлокНачало_1,
                             БлокКонец_1,
                             БлокНачало_2,
                             БлокКонец_2,
                             ТаблицаИнтерваловПоиска,
                             ТекущийНомерИнтервала);
	
	// количество разбиений меньшей таблицы значений интервала поиска 
	ЧислоРазбиений = 0;
	
	// инициализация, что бы компилятор не ругался
	Кон = 0;
	
	НайденоСовпадение = Ложь;
	
	ТаблицаСовпадений = Новый ТаблицаЗначений;
	ТаблицаСовпадений.Колонки.Добавить("БлокНачало_1");
	ТаблицаСовпадений.Колонки.Добавить("БлокНачало_2");
	ТаблицаСовпадений.Колонки.Добавить("Размер");
	
	Размерность1 = БлокКонец_1 - БлокНачало_1 + 1;
	Размерность2 = БлокКонец_2 - БлокНачало_2 + 1;
	
	// находим разбиваемую таблицу - это таблица с наименьшим числом
	// элементов
	
	Если Размерность1 <= Размерность2 Тогда
		ТаблицаАнализа1 = ТаблицаЗначений1;
		ТаблицаАнализа2 = ТаблицаЗначений2;
		ПервыйБлок_Нач = БлокНачало_1;
		ПервыйБлок_Кон = БлокКонец_1;
		ВторойБлок_Нач = БлокНачало_2;
		ВторойБлок_Кон = БлокКонец_2;
		ПрямоеСоответствие = Истина;
	Иначе
		ТаблицаАнализа1 = ТаблицаЗначений2;
		ТаблицаАнализа2 = ТаблицаЗначений1;
		ПервыйБлок_Нач = БлокНачало_2;
		ПервыйБлок_Кон = БлокКонец_2;
		ВторойБлок_Нач = БлокНачало_1;
		ВторойБлок_Кон = БлокКонец_1;
		ПрямоеСоответствие = Ложь;
	КонецЕсли;
	
	Пока НЕ НайденоСовпадение Цикл
		
		ЧислоРазбиений = ЧислоРазбиений + 1;
		
		Если ЧислоРазбиений > (ПервыйБлок_Кон - ПервыйБлок_Нач + 1) Тогда
			Прервать;
		КонецЕсли;
		
		Для Счетчик = 1 По ЧислоРазбиений Цикл
			
			// ограничиваем область искомого блока в ТЧ
			Если Счетчик = 1 Тогда
				Нач = Цел(ПервыйБлок_Нач + (ПервыйБлок_Кон-ПервыйБлок_Нач)/ЧислоРазбиений*(Счетчик-1));
			Иначе
				Нач = Кон + 1;
			КонецЕсли;
			
			Кон = Цел(ПервыйБлок_Нач + (ПервыйБлок_Кон-ПервыйБлок_Нач)/ЧислоРазбиений*Счетчик);
			
			// возвращает номер позиции
			Результат = ПоискПодтаблицы(ТаблицаАнализа1, Нач, Кон, ТаблицаАнализа2, ВторойБлок_Нач, ВторойБлок_Кон);
			
			// Если совпадение найдено - развиваем успех: 
			// ищем продолжение подтаблицы до найденного паттерна и после.
			// Нижняя граница искомого паттерна ограничена ПервыйБлок_Нач, его верхняя граница
			// ограничена ПервыйБлок_Кон. Граница таблицы на основе которой происходит поиск
			// ограничивается ВторойБлок_Нач и ВторойБлок_Кон соответственно.
			// 
			Если Результат <> Неопределено Тогда
				
				// 1. пробуем "откатиться" к началу
				
				НижняяСдвигаемаяГраницаТаблицыАнализа1 = Нач;
				НижняяСдвигаемаяГраницаТаблицыАнализа2 = Результат;
				
				Пока  (НижняяСдвигаемаяГраницаТаблицыАнализа1 - 1) >= 1
					И (НижняяСдвигаемаяГраницаТаблицыАнализа2 - 1) >= 1
					И (НижняяСдвигаемаяГраницаТаблицыАнализа1 - 1) > ТаблицаИнтерваловПоиска[ТекущийНомерИнтервала-1].БлокНачало_1
					И (НижняяСдвигаемаяГраницаТаблицыАнализа2 - 1) > ТаблицаИнтерваловПоиска[ТекущийНомерИнтервала-1].БлокНачало_2
					И СтрокиТЧРавны(ТаблицаАнализа1[НижняяСдвигаемаяГраницаТаблицыАнализа1-2], ТаблицаАнализа2[НижняяСдвигаемаяГраницаТаблицыАнализа2-2], ТаблицаАнализа1.Колонки) Цикл
					
					Если (НижняяСдвигаемаяГраницаТаблицыАнализа1-1)>=ПервыйБлок_Нач И (НижняяСдвигаемаяГраницаТаблицыАнализа2-1)>=ВторойБлок_Нач Тогда
						НижняяСдвигаемаяГраницаТаблицыАнализа1 = НижняяСдвигаемаяГраницаТаблицыАнализа1 - 1;
						НижняяСдвигаемаяГраницаТаблицыАнализа2 = НижняяСдвигаемаяГраницаТаблицыАнализа2 - 1;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// 2. пробуем "откатиться" к концу таблицы
				
				ВерхняяСдвигаемаяГраницаТаблицыАнализа1 = Кон;
				ВерхняяСдвигаемаяГраницаТаблицыАнализа2 = Результат + Кон - Нач;
				
				Пока  ВерхняяСдвигаемаяГраницаТаблицыАнализа1 < ТаблицаАнализа1.Количество()
					И ВерхняяСдвигаемаяГраницаТаблицыАнализа2 < ТаблицаАнализа2.Количество()
					И СтрокиТЧРавны(ТаблицаАнализа1[ВерхняяСдвигаемаяГраницаТаблицыАнализа1-1+1], ТаблицаАнализа2[ВерхняяСдвигаемаяГраницаТаблицыАнализа2-1+1], ТаблицаАнализа1.Колонки) Цикл
					
					Если ВерхняяСдвигаемаяГраницаТаблицыАнализа1 < ПервыйБлок_Кон И ВерхняяСдвигаемаяГраницаТаблицыАнализа2 < ВторойБлок_Кон Тогда
						ВерхняяСдвигаемаяГраницаТаблицыАнализа1 = ВерхняяСдвигаемаяГраницаТаблицыАнализа1 + 1;
						ВерхняяСдвигаемаяГраницаТаблицыАнализа2 = ВерхняяСдвигаемаяГраницаТаблицыАнализа2 + 1;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// 3. ТаблицаСовпадений
				// когда нашли продолжение вычисляем индекс, с которого начинается совпадение
				// и размер совпадения в строках (число строк)
				НоваяСтрока = ТаблицаСовпадений.Добавить();
				НоваяСтрока.БлокНачало_1 = НижняяСдвигаемаяГраницаТаблицыАнализа1;
				НоваяСтрока.БлокНачало_2 = НижняяСдвигаемаяГраницаТаблицыАнализа2;
				НоваяСтрока.Размер       = ВерхняяСдвигаемаяГраницаТаблицыАнализа1-НижняяСдвигаемаяГраницаТаблицыАнализа1 + 1;
				
				НайденоСовпадение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Макс_Инд = -1;
	
	Для I = 1 По ТаблицаСовпадений.Количество() Цикл
		
		Если Макс_Инд = -1 Тогда
			Макс_Инд = I;
		КонецЕсли;
		
		Если ТаблицаСовпадений[I-1].Размер > ТаблицаСовпадений[Макс_Инд-1].Размер Тогда
			Макс_Инд = I;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Макс_Инд = -1 Тогда
		Возврат Неопределено;
	Иначе
		
		Если Не ПрямоеСоответствие Тогда
			ВремПерем = ТаблицаСовпадений[Макс_Инд-1].БлокНачало_1;
			ТаблицаСовпадений[Макс_Инд-1].БлокНачало_1 = ТаблицаСовпадений[Макс_Инд-1].БлокНачало_2;
			ТаблицаСовпадений[Макс_Инд-1].БлокНачало_2 = ВремПерем;
		КонецЕсли;
		
		Возврат ТаблицаСовпадений[Макс_Инд-1];
	КонецЕсли;
	
КонецФункции

// Спецификация функции
// функция производит точный поиск ВСЕГО ОКНА поиска ИскомыйШаблон(НачальнаяПозицияВОкнеПоиска, ОконечнаяПозицияВОкнеПоиска) в границах поиска
// АнализируемаяТаблица (НижняяГраницаПоиска, ВерхняяГраницаПоиска)
// Возвращает номер позиции в АнализируемаяТаблица (нумерация с 1) с которой найдена подтаблица
Функция ПоискПодтаблицы(
                         ИскомыйШаблон,               // искомая таблица 
                         НачальнаяПозицияВОкнеПоиска, // индекс первого элемента в окне поиска
                         ОконечнаяПозицияВОкнеПоиска, // индекс последнего элемента в окне поиска 
                                                      // НачальнаяПозицияВОкнеПоиска и ОконечнаяПозицияВОкнеПоиска определяют окно поиска
                         АнализируемаяТаблица,        // Таблица в которой производится поиск
                         НижняяГраницаПоиска,         // НижняяГраницаПоиска, ВерхняяГраницаПоиска - определяют границы,
                         ВерхняяГраницаПоиска)        // в которых возможен поиск
	
	// имеет смысл искать только до тех пор пока выполняется неравенство
	// ТекущаяПозицияПоиска + (ОконечнаяПозицияВОкнеПоиска - НачальнаяПозицияВОкнеПоиска) <= ВерхняяГраницаПоиска
	
	ТекущаяПозицияПоиска = НижняяГраницаПоиска;
	
	Пока ((ТекущаяПозицияПоиска + (ОконечнаяПозицияВОкнеПоиска - НачальнаяПозицияВОкнеПоиска)) <= ВерхняяГраницаПоиска) Цикл
		
		ПодстрокаНайдена = Истина;
		
		Для Индекс = НачальнаяПозицияВОкнеПоиска По ОконечнаяПозицияВОкнеПоиска Цикл
			Если НЕ СтрокиТЧРавны(ИскомыйШаблон[Индекс-1], АнализируемаяТаблица[ТекущаяПозицияПоиска+Индекс-НачальнаяПозицияВОкнеПоиска-1], ИскомыйШаблон.Колонки) Тогда
				ПодстрокаНайдена = Ложь;                            //НижняяГраницаПоиска+ТекущаяПозицияПоиска+Индекс-НачальнаяПозицияВОкнеПоиска-2
				Прервать;
			КонецЕсли
		КонецЦикла;
		
		Если ПодстрокаНайдена Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяПозицияПоиска = ТекущаяПозицияПоиска + 1;
		
	КонецЦикла;
	
	Если ПодстрокаНайдена Тогда
		
		Возврат ТекущаяПозицияПоиска;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Принимает две табличные части с записью об интервалах, в которых необходимо найти
// изменения
Функция РассчитатьИзмененияПоСтрокам(ТаблицаИзмененныхСтрок,
                                    ТаблицаДобавленныхСтрок,
                                    ТаблицаУдаленныхСтрок,
                                    Элемент,
                                    ТЧ0,
                                    ТЧ1)
	
	кТЧ0 = Новый ТаблицаЗначений;
	кТЧ1 = Новый ТаблицаЗначений;
	
	Колонки = ТЧ0.Колонки;
	
	Для Каждого Колонка Из ТЧ0.Колонки Цикл
		кТЧ0.Колонки.Добавить(Колонка.Имя);
		кТЧ1.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	кТЧ0.Колонки.Добавить("Использована");
	кТЧ1.Колонки.Добавить("Использована");
	
	Для Индекс = Элемент.БлокНачало_1 По Элемент.БлокКонец_1 Цикл
		НоваяСтрока = кТЧ0.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТЧ0[Индекс-1]);
	КонецЦикла;
	
	Для Индекс = Элемент.БлокНачало_2 По Элемент.БлокКонец_2 Цикл
		НоваяСтрока = кТЧ1.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТЧ1[Индекс-1]);
	КонецЦикла;
	
	РазмерностьТЧ0 = Элемент.БлокКонец_1 - Элемент.БлокНачало_1 + 1;
	РазмерностьТЧ1 = Элемент.БлокКонец_2 - Элемент.БлокНачало_2 + 1;
	
	Для Индекс1 = 1 По РазмерностьТЧ0 Цикл
	
		СтрокаТЧ0 = кТЧ0[Индекс1 - 1];
		СоответствиеНайдено = Ложь;
		
		Если СтрокаТЧ0.Использована <> Истина Тогда
			Для Индекс2 = 1 По РазмерностьТЧ1 Цикл
				СтрокаТЧ1 = кТЧ1[Индекс2 - 1];
				Если СтрокаТЧ1.Использована <> Истина Тогда
					Если ПроверитьСтрокиНаРавенство (СтрокаТЧ0, СтрокаТЧ1, Колонки) Тогда
						СоответствиеНайдено = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли; // Если СтрокаТЧ1.Использована <> Истина Тогда
			КонецЦикла; // Для Индекс2= 1 По РазмерностьТЧ1 Цикл
		КонецЕсли; // Если СтрокаТЧ0.Использована <> Истина Тогда
		
		Если СоответствиеНайдено Тогда
			СтрокаТЧ0.Использована = Истина;
			СтрокаТЧ1.Использована = Истина;
			НоваяСтрока = ТаблицаИзмененныхСтрок.Добавить();
			НоваяСтрока.ИндексВТЧ0 = Индекс1+Элемент.БлокНачало_1-1;
			НоваяСтрока.ИндексВТЧ1 = Индекс2+Элемент.БлокНачало_2-1;
		Иначе
			СтрокаТЧ0.Использована = Истина;
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИндексВТЧ0 = Индекс1+Элемент.БлокНачало_1-1;
		КонецЕсли;
		
	КонецЦикла; // Для Индекс1 = 1 По РазмерностьТЧ0 Цикл
	
	Для Индекс = 1 По РазмерностьТЧ1 Цикл
	
		СтрокаТЧ1 = кТЧ1[Индекс - 1];
		Если СтрокаТЧ1.Использована <> Истина Тогда
			СтрокаТЧ1.Использована = Истина;
			НоваяСтрока = ТаблицаДобавленныхСтрок.Добавить();
			НоваяСтрока.ИндексВТЧ1 = Индекс+Элемент.БлокНачало_2-1;
		КонецЕсли; // Если СтрокаТЧ0.Использована <> Истина Тогда
		
	КонецЦикла; // Для Индекс1 = 1 По РазмерностьТЧ0 Цикл
	
КонецФункции

// Принимает на вход две строки из табличных частей с одинаковой структурой и сравнивает их.
// Строки считаются измененными, если у них совпадает хотя бы одна колонка.
Функция ПроверитьСтрокиНаРавенство(Строка1, Строка2, НаборКолонок)
	
	ЧислоОдинаковыхКолонок = 0;
	ЧислоКолонок = 0;
	
	Для Каждого Колонка Из НаборКолонок Цикл
		ЧислоКолонок = ЧислоКолонок + 1;
		Если Строка1[Колонка.Имя] = Строка2[Колонка.Имя] Тогда
			ЧислоОдинаковыхКолонок = ЧислоОдинаковыхКолонок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если (ЧислоОдинаковыхКолонок/ЧислоКолонок) >= КритерийДоступаНаРавенствоСтрок() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает доступ - отношение числа неизмененных колонок в строке табличной 
// части к общему числу колонок. На данный момент доступ - 3/5. Т.е. если 
// при сравнении двух строк в двух табличной частях с одинаковым составом колонок
// изменилось всего 2 колонки из 5 то считается, что это та же самая строка.
// 
Функция КритерийДоступаНаРавенствоСтрок()
	Возврат (0.6);
КонецФункции

// Возвращает Истина или Ложь в зависимости от того, эквивалентны табличные
// части или нет. ТЧ считаются эквивалентными, если количество, наименование
// и тип их полей одинаков. Изменение порядка следования колонок не считается
// изменением табличной части.
//
Функция ТЧЭквиваленты(Колонки1, Колонки2)
	
	ТаблицаКолонок1 = СоздатьТаблицуСравнения();
	Для Каждого Элемент Из Колонки1 Цикл
		НоваяСтрока = ТаблицаКолонок1.Добавить();
		НоваяСтрока.Установить(0, Элемент.Имя);
	КонецЦикла;
	
	ТаблицаКолонок2 = СоздатьТаблицуСравнения();
	Для Каждого Элемент Из Колонки2 Цикл
		НоваяСтрока = ТаблицаКолонок2.Добавить();
		НоваяСтрока.Установить(0, Элемент.Имя);
	КонецЦикла;
	
	СписокДобавленныхКолонок = ВычестьТаблицу(ТаблицаКолонок1, ТаблицаКолонок2);
	Если СписокДобавленныхКолонок.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокУдаленныхКолонок   = ВычестьТаблицу(ТаблицаКолонок1, ТаблицаКолонок2);
	Если СписокУдаленныхКолонок.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем совпадение типов колонок
	Для Каждого Элемент1 Из Колонки1 Цикл
		
		Элемент2 = Колонки2.Найти(Элемент1.Имя);
		Типы1 = Элемент1.ТипЗначения.Типы();
		Для Каждого Тип Из Типы1 Цикл
			Если Не Элемент2.ТипЗначения.СодержитТип (Тип) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// проверяем совпадение типов колонок
	Для Каждого Элемент2 Из Колонки2 Цикл
		
		Элемент1 = Колонки1.Найти(Элемент1.Имя);
		Типы2 = Элемент2.ТипЗначения.Типы();
		Для Каждого Тип Из Типы2 Цикл
			Если Не Элемент1.ТипЗначения.СодержитТип (Тип) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция сравнивает значения двух строк (по значению) и возвращает 
// Истина, в случае если строки равны, иначе возвращает Ложь
// Предполагается что структура метаданных табличных частей  эквивалентна.
//
Функция СтрокиТЧРавны(СтрокаТЧ1, СтрокаТЧ2, Колонки)
	
	Для Каждого Колонка Из Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		ЗначениеИзТЧ1 = СтрокаТЧ1[ИмяКолонки];
		ЗначениеИзТЧ2 = СтрокаТЧ2[ИмяКолонки];
		Если ЗначениеИзТЧ1 <> ЗначениеИзТЧ2 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция пытается получить представление реквизита по описанию его типа
//
Функция ОпределитьПредставление(ЗначениеРеквизита, НаименованиеПоля, ОписаниеРеквизита)
	
	Если НаименованиеПоля = "Date" Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Дата"));
		ОписаниеТипаДаты = Новый ОписаниеТипов(МассивТипов);
		ОписаниеРеквизита = ОписаниеТипаДаты;
	КонецЕсли;
	
	Если (ОписаниеРеквизита <> Неопределено) Тогда
		ОписаниеТипаРеквизита = ОписаниеРеквизита.Тип;
		// пытаемся найти прямое соответствие
		ПредставлениеЗначенияРеквизита = 
		         СформироватьПредставлениеПоОписаниюТипа(ОписаниеТипаРеквизита,
		                                                 ЗначениеРеквизита);
	КонецЕсли;
	
	Если ПредставлениеЗначенияРеквизита = "" Тогда
		ПредставлениеЗначенияРеквизита = ЗначениеРеквизита;
		Если ПредставлениеЗначенияРеквизита = "" Тогда
			ПредставлениеЗначенияРеквизита = " ";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеЗначенияРеквизита;
	
КонецФункции

// Функция пытается привести значение реквизита по типу его значения
// к прелставлению для пользователя
//
Функция ПривестиКПредставлениюПоТипуИЗначению(ТипЗначения,
                                              Значение)
	
	Представление = Значение;
	
	Попытка
		GUID = Новый УникальныйИдентификатор (Значение);
	Исключение
		Возврат Представление;
	КонецПопытки;
	
	Если Лев(ТипЗначения, 10) = "CatalogRef" Тогда
		ИмяСправочника = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 11);
		Представление = НайтиЭлементСправочникаПоGUIDиСформироватьПредставление(
		                           GUID,
		                           ИмяСправочника);
	ИначеЕсли Лев(ТипЗначения, 11) = "DocumentRef" Тогда
		ИмяДокумента = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 12);
		Представление = НайтиДокументПоGUIDиСформироватьПредставление(
		                           GUID,
		                           ИмяДокумента);
	ИначеЕсли Лев(ТипЗначения, 29) = "ChartOfCharacteristicTypesRef" Тогда
		ИмяПланаВидаХарактеристик = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 30);
		Представление = НайтиПланВидовХарактеристикПоGUIDиСформироватьПредставление(
		                           GUID,
		                           ИмяПланаВидаХарактеристик);
	ИначеЕсли Лев(ТипЗначения, 18) = "ChartOfAccountsRef" Тогда
		ИмяПланаСчетов = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 19);
		Представление = НайтиПланСчетовПоGUIDиСформироватьПредставление(
		                           GUID,
		                           ИмяПланаСчетов);
	ИначеЕсли Лев(ТипЗначения, 26) = "ChartOfCalculationTypesRef" Тогда
		ИмяПланаВидовРасчета = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 27);
		Представление = НайтиПланВидовРасчетаПоGUIDиСформироватьПредставление(
		                           GUID,
		                           ИмяПланаВидовРасчета);
	ИначеЕсли Лев(ТипЗначения, 18) = "BusinessProcessRef" Тогда
		ИмяБизнесПроцесса = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 19);
		Представление = НайтиБизнесПроцессПоGUIDиСформироватьПредставление(
		                           GUID,
		                           ИмяБизнесПроцесса);
	ИначеЕсли Лев(ТипЗначения, 7) = "TaskRef" Тогда
		ИмяЗадачи = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 8);
		Представление = НайтиЗадачуПоGUIDиСформироватьПредставление(GUID, ИмяЗадачи);
	ИначеЕсли Лев(ТипЗначения, 15) = "ExchangePlanRef" Тогда
		ИмяПланаОбмена = Прав(ТипЗначения, СтрДлина(ТипЗначения) - 16);
		Представление = НайтиПланОбменаПоGUIDиСформироватьПредставление(GUID, ИмяПланаОбмена);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Получает представление наименования системного реквизита
//
Функция ПолучитьПредставлениеРеквизитаНаЯзыке(знач ИмяРеквизита)
	
	Если      ИмяРеквизита = "Number" Тогда
		Возврат НСтр("ru = 'Номер'; en='Number'");
	ИначеЕсли ИмяРеквизита = "Name" Тогда
		Возврат НСтр("ru = 'Наименование'; en='Name'");
	ИначеЕсли ИмяРеквизита = "Code" Тогда
		Возврат НСтр("ru = 'Код'; en='Code'");
	ИначеЕсли ИмяРеквизита = "IsFolder" Тогда
		Возврат НСтр("ru = 'ЭтоГруппа'; en='Is folder'");
	ИначеЕсли ИмяРеквизита = "Description" Тогда
		Возврат НСтр("ru = 'Наименование'; en='Description'");
	ИначеЕсли ИмяРеквизита = "Date" Тогда
		Возврат НСтр("ru = 'Дата'; en='Date'");
	ИначеЕсли ИмяРеквизита = "Posted" Тогда
		Возврат НСтр("ru = 'Проведен'; en='Posted'");
	ИначеЕсли ИмяРеквизита = "DeletionMark" Тогда
		Возврат НСтр("ru = 'ПометкаУдаления'; en='Deletion mark'");
	ИначеЕсли ИмяРеквизита = "Ref" Тогда
		Возврат НСтр("ru = 'Ссылка'; en='Ref'");
	ИначеЕсли ИмяРеквизита = "Parent" Тогда
		Возврат НСтр("ru = 'Родитель'; en='Parent'");
	Иначе
		Возврат ИмяРеквизита;
	КонецЕсли;
	
КонецФункции

// Используется для вывода текста в область табличного документа
// с условным оформлением
//
Процедура УстановитьСвойстваТекста(ОбластьСекции, Текст,
                                   знач ЦветТекста = Неопределено,
                                   знач ЦветФона = Неопределено,
                                   знач Размер = 9,
                                   знач Жирный = Ложь,
                                   знач ПоказыватьГраницы = Ложь)
	
	ОбластьСекции.Текст = Текст;
	
	Если ЦветТекста = Неопределено Тогда
		ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
	
	ОбластьСекции.ЦветТекста = ЦветТекста;
	
	Если ЦветФона <> Неопределено Тогда
		ОбластьСекции.ЦветФона = ЦветФона;
	КонецЕсли;
	
	ОбластьСекции.Шрифт = Новый Шрифт(, Размер, Жирный, , , );
	
	Если ПоказыватьГраницы Тогда
		ОбластьСекции.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	КонецЕсли;
	
КонецПроцедуры

// Получает описание хранимой версии объекта в виде строки
//
Функция ПолучитьОписаниеПоВерсии(НомерВерсии)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ АвторВерсии, ДатаВерсии
	                |ИЗ РегистрСведений.ВерсииОбъектов
	                |ГДЕ Объект = &Ссылка
	                |И НомерВерсии = &НомВер";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("НомВер", Число(НомерВерсии));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ОписаниеХранимойВерсии = "№"+ НомерВерсии + " / (" 
	                       + Строка(Выборка.ДатаВерсии) + " ) / " 
	                       + СокрЛП(Выборка.АвторВерсии.Наименование);
	
	Возврат ОписаниеХранимойВерсии;
	
КонецФункции

// Подсчитывает число изменившихся реквизитов в таблице изменившихся реквизитов
//
Функция РассчитатьЧислоИзменившихсяРеквизитов(ТаблицаИзмененийРеквизитов, МассивНомеровВерсий)
	
	Результат = 0;
	
	Для Каждого ЭлементТЗ Из ТаблицаИзмененийРеквизитов Цикл
		Если ЭлементТЗ._Модификация <> Неопределено И ЭлементТЗ._Модификация = Истина Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Увеличивает значение скозного счетчика для таблицы
//
Функция УвеличитьСчетчик(счетчикУнкИд, ИмяТаблицы);
	
	счетчикУнкИд[ИмяТаблицы] = счетчикУнкИд[ИмяТаблицы] + 1;
	
	Возврат счетчикУнкИд[ИмяТаблицы];
	
КонецФункции

// Возращает уникальный номер для идентефикации строки из таблицы по версии
//
Функция ПолучитьУникальныеУнкИд(ТаблицаИзмененийТЧ, ИмяКолонкиВерсии)
	
	СоответствиеУнкИд = Новый Соответствие;
	
	Для Каждого ЭлементСоотв Из ТаблицаИзмененийТЧ Цикл
		СоответствиеУнкИд[ЭлементСоотв.Ключ] = Число(ЭлементСоотв.Значение[ИмяКолонкиВерсии].Количество());
	КонецЦикла;
	
	Возврат СоответствиеУнкИд;
	
КонецФункции

// Заполняет таблицу отчета по результатам сравнения на некотором шаге
//
// Параметры:
// ПометкаИзменения - строка - "д" - реквизит добавлен
//                             "у" - реквизит удален
//                             "и" - реквизит изменен
//
Процедура ЗаполнитьХарактеристикуИзмененияРеквизита(ТаблицаИзмененийРеквизита, 
                                                    ПометкаИзменения,
                                                    ТаблицаИзмененийРеквизитов,
                                                    ИмяКолонкиТекущейВерсии,
                                                    ВерсияОбъекта)
	
	Для Каждого Элемент Из ТаблицаИзмененийРеквизита Цикл
		Наименование = Элемент.Значение;
		ИзменениеРеквизита = ТаблицаИзмененийРеквизитов.Найти (Наименование, "Наименование");
		
		Если ИзменениеРеквизита = Неопределено Тогда
			ИзменениеРеквизита = ТаблицаИзмененийРеквизитов.Добавить();
			ИзменениеРеквизита.Наименование = Наименование;
		КонецЕсли;
		
		ПараметрыИзменения = Новый Структура;
		ПараметрыИзменения.Вставить("ТипИзменения", ПометкаИзменения);
		
		Если ПометкаИзменения = "у" Тогда
			ПараметрыИзменения.Вставить("Значение", "удалено");
		Иначе
			ПараметрыИзменения.Вставить("Значение", ВерсияОбъекта.Реквизиты.Найти(Наименование, "НаименованиеРеквизита"));
		КонецЕсли;
		
		ИзменениеРеквизита[ИмяКолонкиТекущейВерсии] = ПараметрыИзменения;
		ИзменениеРеквизита._Модификация = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Пытается сформировать представление значения по описанию его типа
//
Функция СформироватьПредставлениеПоОписаниюТипа(ОписаниеТипаРеквизита, РеквизитЗначение)
	
	Текст = "";
	
	Если ОписаниеТипаРеквизита.СодержитТип(Тип("Дата")) Тогда
		Текст = Сред(РеквизитЗначение,12,2) + ":" + Сред(РеквизитЗначение,15,2) + ":" + Сред(РеквизитЗначение,18,2)
		        + ", " + Сред(РеквизитЗначение,9,2) + "." + Сред(РеквизитЗначение,6,2) + "." + Лев(РеквизитЗначение, 4);
		Возврат Текст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Возврат Текст;
	КонецЕсли;
	
	Если ОписаниеТипаРеквизита.СодержитТип(Тип("Булево")) Тогда
		Если РеквизитЗначение = "true" Тогда
			Текст = "Истина";
		Иначе
			Текст = "Ложь";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Возврат Текст;
	КонецЕсли;
	
	Попытка
		GUID = Новый УникальныйИдентификатор(РеквизитЗначение);
	Исключение
		Возврат РеквизитЗначение;
	КонецПопытки;
	
	Для Каждого Элемент Из Метаданные.Справочники Цикл
		Оп = Новый ОписаниеТипов("СправочникСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиЭлементСправочникаПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.Документы Цикл
		Оп = Новый ОписаниеТипов("ДокументСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиДокументПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.БизнесПроцессы Цикл
		Оп = Новый ОписаниеТипов("БизнесПроцессСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиБизнесПроцессПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.БизнесПроцессы Цикл
		Оп = Новый ОписаниеТипов("БизнесПроцессСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиБизнесПроцессПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.Задачи Цикл
		Оп = Новый ОписаниеТипов("ЗадачаСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиЗадачуПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.ПланыВидовХарактеристик Цикл
		Оп = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиПланВидовХарактеристикПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.ПланыВидовРасчета Цикл
		Оп = Новый ОписаниеТипов("ПланВидовРасчетаСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиПланВидовРасчетаПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого Элемент Из Метаданные.ПланыСчетов Цикл
		Оп = Новый ОписаниеТипов("ПланСчетовСсылка." + Элемент.Имя);
		Если ОписаниеТипаРеквизита.СодержитТип(Оп.Типы()[0]) Тогда
			Если Текст = "" Тогда
				Текст = НайтиПланСчетовПоGUIDиСформироватьПредставление(GUID, Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Текст) или Текст = " " Тогда
		Возврат Текст;
	КонецЕсли;
	
	Возврат РеквизитЗначение;
	
КонецФункции

// Получает ссылку на объект - план счетов по GUID
//
Функция НайтиПланСчетовПоGUIDиСформироватьПредставление(GUID, ИмяПланаСчетов)
	
	Если Строка(GUID) = XMLСтрока(ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка()) Тогда
		Возврат " ";
	КонецЕсли;
	
	Возврат Строка(ПланыСчетов[ИмяПланаСчетов].ПолучитьСсылку(GUID));
	
КонецФункции

// Получает ссылку на объект - план видов расчета по GUID
//
Функция НайтиПланВидовРасчетаПоGUIDиСформироватьПредставление(GUID, ИмяПланаВидовРасчета)
	
	Если Строка(GUID) = XMLСтрока(ПланыВидовРасчета[ИмяПланаВидовРасчета].ПустаяСсылка()) Тогда
		Возврат " ";
	КонецЕсли;
	
	Возврат Строка(ПланыВидовРасчета[ИмяПланаВидовРасчета].ПолучитьСсылку(GUID));
	
КонецФункции

// Получает ссылку на объект - план видов характеристик по GUID
//
Функция НайтиПланВидовХарактеристикПоGUIDиСформироватьПредставление(GUID, ИмяПланаВидовХарактеристик)
	
	Если Строка(GUID) = XMLСтрока(ПланыВидовХарактеристик[ИмяПланаВидовХарактеристик].ПустаяСсылка()) Тогда
		Возврат " ";
	КонецЕсли;
	
	Возврат Строка(ПланыВидовХарактеристик[ИмяПланаВидовХарактеристик].ПолучитьСсылку(GUID));
	
КонецФункции

// Получает ссылку на объект - задачу по GUID
//
Функция НайтиЗадачуПоGUIDиСформироватьПредставление(GUID, ИмяЗадачи)
	
	Если Строка(GUID) = XMLСтрока(Задачи[ИмяЗадачи].ПустаяСсылка()) Тогда
		Возврат " ";
	КонецЕсли;
	
	Возврат Строка(Задачи[ИмяЗадачи].ПолучитьСсылку(GUID));
	
КонецФункции

// Получает ссылку на объект - бизнес процесс по GUID
//
Функция НайтиБизнесПроцессПоGUIDиСформироватьПредставление(GUID, ИмяБизнесПроцесса)
	
	Если Строка(GUID) = XMLСтрока(БизнесПроцессы[ИмяБизнесПроцесса].ПустаяСсылка()) Тогда
		Возврат " ";
	КонецЕсли;
	
	Возврат Строка(БизнесПроцессы[ИмяБизнесПроцесса].ПолучитьСсылку(GUID));
	
КонецФункции

// Получает ссылку на объект - документ по GUID
//
Функция НайтиДокументПоGUIDиСформироватьПредставление(GUID, ИмяДокумента)
	
	Возврат Строка(Документы[ИмяДокумента].ПолучитьСсылку(GUID));
	
КонецФункции

// Получает ссылку на объект - справочник по GUID
//
Функция НайтиЭлементСправочникаПоGUIDиСформироватьПредставление(GUID, ИмяСправочника)
	
	Если Строка(GUID) = XMLСтрока(Справочники[ИмяСправочника].ПустаяСсылка()) Тогда
		Возврат " ";
	КонецЕсли;
	
	Возврат Строка(Справочники[ИмяСправочника].ПолучитьСсылку(GUID));
	
КонецФункции

// Получает ссылку на объект - план обмена по GUID
//
Функция НайтиПланОбменаПоGUIDиСформироватьПредставление(GUID, ИмяПланаОбмена)
	
	Если Строка(GUID) = XMLСтрока(ПланыОбмена[ИмяПланаОбмена].ПустаяСсылка()) Тогда
		Возврат " ";
	КонецЕсли;
	
	Возврат Строка(ПланыОбмена[ИмяПланаОбмена].ПолучитьСсылку(GUID));
	
КонецФункции

// Выводит текст в область табличного документа с определенным оформлением
//
Процедура ВывестиТекстВОтчет(ТЧОтчета,
                             знач Секция,
                             знач Регион,
                             знач Текст,
                             знач ЦветТекста = Неопределено,
                             знач ЦветФона   = Неопределено,
                             знач Размер     = 9,
                             знач Жирный     = Ложь)
	
	Если ЦветТекста = Неопределено Тогда
		ЦветТекста = WEBЦвета.Черный;
	КонецЕсли;
	
	Если ЦветФона = Неопределено Тогда
		ЦветФона = WEBЦвета.Белый;
	КонецЕсли;
	
	Секция.Область(Регион).Текст      = Текст;
	Секция.Область(Регион).ЦветФона   = ЦветФона;
	Секция.Область(Регион).ЦветТекста = ЦветТекста;
	Секция.Область(Регион).Шрифт      = Новый Шрифт(, Размер, Жирный, , , );
	
	Секция.Область(Регион).ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	Секция.Область(Регион).ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	Секция.Область(Регион).ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	Секция.Область(Регион).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	ТЧОтчета.Вывести(Секция);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//  СЕКЦИЯ СЛУЖЕБНЫХ ФУНКЦИЙ (ВНУТРЕННЯЯ ЛОГИКА)

// Проверяет, что тип обрабатываемого объекта - справочник
//
// Возвращаемое значение
// Булево : Истина - ссылка на справочник
//        : Ложь   - ссылка на документ
//
Функция ПроверитьСсылкаНаСправочник(Ссылка)
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПредставлениеЗначенияПоНаименованию(Наименование, Значение, ИмяОбъекта);
	
	Если      Наименование = "Ref" Тогда
		Если ПроверитьСсылкаНаСправочник(СсылкаНаОбъект) Тогда
			ТипЗначения = "CatalogRef" + "." + ИмяОбъекта;
		Иначе
			ТипЗначения = "DocumentRef" + "." + ИмяОбъекта;
		КонецЕсли;
		Возврат ПривестиКПредставлениюПоТипуИЗначению(ТипЗначения, Значение);
	ИначеЕсли Наименование = "Date" Тогда
		Возврат Строка(Значение);
	ИначеЕсли Наименование = "Number" Тогда
		Возврат Строка(Значение);
	ИначеЕсли Наименование = "DeletionMark" Тогда
		Возврат ?(Значение = "true", Истина, Ложь);
	ИначеЕсли Наименование = "Posted" Тогда
		Возврат ?(Значение = "true", Истина, Ложь);
	ИначеЕсли Наименование = "Owner" Тогда
		ТипЗначения = "CatalogRef" + "." + ИмяОбъекта;
		Возврат ПривестиКПредставлениюПоТипуИЗначению(ТипЗначения, Значение);
	ИначеЕсли Наименование = "Code" Тогда
		Возврат Строка(Значение);
	ИначеЕсли Наименование = "Description" Тогда
		Возврат Строка(Значение);
	ИначеЕсли Наименование = "Predefined" Тогда
		Возврат ?(Значение = "true", Истина, Ложь);
	ИначеЕсли Наименование = "Parent" Тогда
		ТипЗначения = "CatalogRef" + "." + ИмяОбъекта;
		Возврат ПривестиКПредставлениюПоТипуИЗначению(ТипЗначения, Значение);
	ИначеЕсли Наименование = "IsFolder" Тогда
		Возврат ?(Значение = "true", Истина, Ложь);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция по номеру версии объекта и ссылке на него получает объект из
// регистра сведений, записывает его на диск и вызывает функцию разбора
// XML представления объекта.
// Параметры:
// НомерВерсии   - число - номер версии документа в регистре сведений
// Ссылка        - СправочникСсылка/ДокументСсылка - ссылка на экземпляр 
//                 объекта метаданных
// Возвращаемое значение:
// Структура:
//
Функция ПолучитьСтрокуXMLПоНомеруВерсии(НомерВерсии)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ АвторВерсии, ДатаВерсии, ВерсияОбъекта 
	                |ИЗ РегистрСведений.ВерсииОбъектов
	                |ГДЕ Объект = &Ссылка
	                |И НомерВерсии = &НомВер";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("НомВер", Число(НомерВерсии));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ВерсияОбъекта = Выборка.ВерсияОбъекта.Получить();
	
	Если ВерсияОбъекта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка получения версии объекта из информационной базы'");
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ВерсияОбъекта.Записать(ИмяВременногоФайла);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
		СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
		УдалитьФайлы(ИмяВременногоФайла);
		
		Возврат СтрокаXML;
	КонецЕсли;
	
КонецФункции

// Восстанавливает сериализованный в XML объект. 
// Параметры
// ИмяФайла - строка - путь к файлу, в котором хранится сериализованное 
//                     представление объекта
//
Функция ПолучитьОбъектИзXML(СтрокаXML)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Если ЧтениеXML.Прочитать() Тогда
		Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
			Объект = ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();
			Возврат Объект;
		Иначе
			ЧтениеXML.Закрыть();
			ВызватьИсключение НСтр("ru = 'Ошибка при восстановлении объекта'");
		КонецЕсли;
	Иначе
		ЧтениеXML.Закрыть();
		ВызватьИсключение НСтр("ru = 'Ошибка чтения данных'");
	КонецЕсли;
	
КонецФункции

// ЗначениеЗаполнения - массив строк
// ТипВывода - строка :
//           "и" - изменение
//           "д" - добавление
//           "у" - удаление
//           ""  - обычный вывод
Функция СформироватьСекторСтрокиТЧ(знач ЗначениеЗаполнения,знач ТипВывода = "")
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если      ТипВывода = ""  Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ИсходноеЗначениеРеквизита");
	ИначеЕсли ТипВывода = "И" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ИзмененноеЗначениеРеквизита");
	ИначеЕсли ТипВывода = "Д" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ДобавленныйРеквизит");
	ИначеЕсли ТипВывода = "У" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("УдаленныйРеквизит");
	КонецЕсли;
	
	Для Каждого ОчередноеЗначение Из ЗначениеЗаполнения Цикл
		Шаблон.Параметры.ЗначениеРеквизита = ОчередноеЗначение;
		ТабличныйДокумент.Вывести(Шаблон);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует пустой сектор для вывода в отчет. Используется,
// если строка не была изменена в одной из версий.
//
Функция СформироватьПустойСектор(знач ЧислоСтрок, знач ТипВывода = "")
	
	ЗначениеЗаполнения = Новый Массив;
	
	Для Индекс = 1 По ЧислоСтрок Цикл
		ЗначениеЗаполнения.Добавить(" ");
	КонецЦикла;
	
	Возврат СформироватьСекторСтрокиТЧ(ЗначениеЗаполнения, ТипВывода);
	
КонецФункции

// Функция возвращает результат вычитания элементов множества таблицы
// ТаблицаВычитаемая из ТаблицаОсновная.
//
Функция ВычестьТаблицу(знач ТаблицаОсновная,
                       знач ТаблицаВычитаемая,
                       знач КолонкаСравненияОсновнойТаблицы = "",
                       знач КолонкаСравненияВычитаемойТаблицы = "")
	
	Если Не ЗначениеЗаполнено(КолонкаСравненияОсновнойТаблицы) Тогда
		КолонкаСравненияОсновнойТаблицы = "Значение";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаСравненияВычитаемойТаблицы) Тогда
		КолонкаСравненияВычитаемойТаблицы = "Значение";
	КонецЕсли;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат = ТаблицаОсновная.Скопировать();
	
	Для Каждого Элемент Из ТаблицаВычитаемая Цикл
		Значение = Элемент[КолонкаСравненияОсновнойТаблицы];
		НайденнаяСтрока = ТаблицаРезультат.Найти(Значение, КолонкаСравненияОсновнойТаблицы);
		Если НайденнаяСтрока <> Неопределено Тогда
			ТаблицаРезультат.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Функция возвращает таблицу созданную на основе ТаблицаИнициализации.
// Если ТаблицаИнициализации не указана, то создается пустая таблица.
//
Функция СоздатьТаблицуСравнения(ТаблицаИнициализации = Неопределено,
                                ИмяКолонкиСравнения = "Значение")
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить(ИмяКолонкиСравнения);
	
	Если ТаблицаИнициализации <> Неопределено Тогда
		
		МассивЗначений = ТаблицаИнициализации.ВыгрузитьКолонку(ИмяКолонкиСравнения);
		
		Для Каждого Элемент Из ТаблицаИнициализации Цикл
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Установить(0, Элемент[ИмяКолонкиСравнения]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;

КонецФункции
