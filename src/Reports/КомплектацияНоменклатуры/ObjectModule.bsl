#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Добавление в текст запроса комплектации номенклатуры новый реквизит с условием
 //
Функция ДобавитьВЗапросКомплектацииПоУсловию(ИмяРеквизита)
	КусокТекстаЗапроса = "
	|		ВЫБОР 
	|			КОГДА ((Регистратор.ВидКомплектации =  &ВидКомплектации) И (КоличествоРасход <> 0))
	|			  ИЛИ ((Регистратор.ВидКомплектации <> &ВидКомплектации) И (КоличествоПриход <> 0)) ТОГДА
	|				"+ИмяРеквизита+"
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК "+ИмяРеквизита+",";
	Возврат КусокТекстаЗапроса;
КонецФункции

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	 УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	// При написании текста запроса рекомендуется следовать правилам, описанным в следующем шаблоне текста запроса:
	//
	//ВЫБРАТЬ // РАЗРЕШЕННЫЕ
	//	<ПсевдонимТаблицы.Поле> КАК <ПсевдонимПоля>,
	//	ПРЕДСТАВЛЕНИЕ(<ПсевдонимТаблицы>.<Поле>),
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>
	//	<ПсевдонимТаблицы>.Регистратор КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//{ВЫБРАТЬ
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//ИЗ
	//	<Таблица> КАК <ПсевдонимТаблицы>
	//	//СОЕДИНЕНИЯ
	//{ГДЕ
	//	<ПсевдонимТаблицы.Поле>.* КАК <ПсевдонимПоля>,
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>,
	//	<ПсевдонимТаблицы>.Регистратор КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//{УПОРЯДОЧИТЬ ПО
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//УПОРЯДОЧИТЬ_СВОЙСТВА
	//	//УПОРЯДОЧИТЬ_КАТЕГОРИИ
	//}
	//ИТОГИ
	//	АГРЕГАТНАЯ_ФУНКЦИЯ(<ПсевдонимПоказателя>)
	//	//ИТОГИ_СВОЙСТВА
	//	//ИТОГИ_КАТЕГОРИИ
	//ПО
	//	ОБЩИЕ
	//{ИТОГИ ПО
	//	<ПсевдонимПоля>.*,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ //РАЗЛИЧНЫЕ
	|	ОборотыКомплектов.Номенклатура                  КАК Комплект,
	|	ОборотыКомплектов.ХарактеристикаНоменклатуры    КАК ХарактеристикаКомплекта,
	|	ВЫБОР КОГДА ОборотыКомплектующих.ВидСтрокиДвижения = ""ДвижениеКомплекта"" ТОГДА ОборотыКомплектов.КоличествоПриход ИНАЧЕ 0 КОНЕЦ КАК КомплектКоличествоПриход,
	|	ВЫБОР КОГДА ОборотыКомплектующих.ВидСтрокиДвижения = ""ДвижениеКомплекта"" ТОГДА ОборотыКомплектов.КоличествоРасход ИНАЧЕ 0 КОНЕЦ КАК КомплектКоличествоРасход,
	|	ОборотыКомплектующих.Номенклатура               КАК Комплектующая,
	|	ОборотыКомплектующих.ХарактеристикаНоменклатуры КАК ХарактеристикаКомплектующей,
	|	ОборотыКомплектующих.КоличествоПриход    КАК КомплектующаяКоличествоПриход,
	|	ОборотыКомплектующих.КоличествоРасход    КАК КомплектующаяКоличествоРасход,
	|	ОборотыКомплектов.Период,
	|	ОборотыКомплектов.Склад
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ
	|{ВЫБРАТЬ
	|	Комплект.* КАК Комплект,
	|	ХарактеристикаКомплекта.* КАК ХарактеристикаКомплекта,
	|	Комплектующая.* КАК Комплектующая,
	|	ХарактеристикаКомплектующей.* КАК ХарактеристикаКомплектующей,
	|	ХарактеристикаКомплектующей,
	|	КомплектКоличествоПриход,
	|	КомплектКоличествоРасход,
	|	КомплектующаяКоличествоПриход,
	|	КомплектующаяКоличествоРасход,
	|	Период.*,
	|	ОборотыКомплектующих.Регистратор.*,
	|	НачалоПериода(Период, День) КАК ПериодДень ,
	|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
	|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
	|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
	|	НачалоПериода(Период, Год) КАК ПериодГод
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}

	|	ИЗ
	|		(
	|		ВЫБРАТЬ
	|			Номенклатура,
	|			ХарактеристикаНоменклатуры,
	|			КоличествоПриход,
	|			КоличествоРасход,
	|			Период,
	|			Регистратор,
	|			Склад
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНач, &ДатаКон, Запись, )
	|			
	|		ГДЕ
	|			Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры И
	|			((Регистратор.ВидКомплектации =  &ВидКомплектации) И (КоличествоПриход <> 0)
	|			  ИЛИ
	|			 (Регистратор.ВидКомплектации <> &ВидКомплектации) И (КоличествоРасход <> 0))
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|				 ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура
	|				, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
	|				, 0 КАК КоличествоПриход
	|				, 0 КАК КоличествоРасход
	|				, NULL КАК Период
	|				, ТоварыНаСкладах.Регистратор КАК Регистратор
	|				, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад
	|		ИЗ
	|		(ВЫБРАТЬ Регистратор
	|		ИЗ РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНач, &ДатаКон, Регистратор)
	|		ГДЕ
	|			Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры И
	|			((Регистратор.ВидКомплектации =  &ВидКомплектации) И (КоличествоПриход <> 0)
	|			  ИЛИ
	|			 (Регистратор.ВидКомплектации <> &ВидКомплектации) И (КоличествоРасход <> 0))
	|		 ) КАК ПромежуточнаяОборотыКомплектов
	|		ПРАВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ Регистратор
	|		ИЗ РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНач, &ДатаКон, Регистратор)
	|		ГДЕ
	|		Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры) КАК ТоварыНаСкладах
	|		ПО ТоварыНаСкладах.Регистратор = ПромежуточнаяОборотыКомплектов.Регистратор
	|		ГДЕ ПромежуточнаяОборотыКомплектов.Регистратор ЕСТЬ NULL
	|		
	|		) КАК ОборотыКомплектов
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|
	|	(ВЫБРАТЬ"
	+ДобавитьВЗапросКомплектацииПоУсловию("Номенклатура")
	+ДобавитьВЗапросКомплектацииПоУсловию("ХарактеристикаНоменклатуры")
	+ДобавитьВЗапросКомплектацииПоУсловию("КоличествоПриход")
	+ДобавитьВЗапросКомплектацииПоУсловию("КоличествоРасход")+"
	|		ВЫБОР 
	|			КОГДА ((Регистратор.ВидКомплектации =  &ВидКомплектации) И (КоличествоРасход <> 0))
	|			  ИЛИ ((Регистратор.ВидКомплектации <> &ВидКомплектации) И (КоличествоПриход <> 0)) ТОГДА
	|				""ДвижениеКомплектующей""
	|			ИНАЧЕ ""ДвижениеКомплекта""
	|		КОНЕЦ КАК ВидСтрокиДвижения,
	|		Регистратор
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНач, &ДатаКон, Запись, )
	|	ГДЕ
	|		Регистратор ССЫЛКА Документ.КомплектацияНоменклатуры
	|	)  КАК ОборотыКомплектующих
	|
	|ПО
	|	ОборотыКомплектов.Регистратор = ОборотыКомплектующих.Регистратор
	|	//СОЕДИНЕНИЯ
	|
	|{ГДЕ
	|	ОборотыКомплектов.Номенклатура.*                  КАК Комплект,
	|	ОборотыКомплектов.ХарактеристикаНоменклатуры.*    КАК ХарактеристикаКомплекта,
	|	ОборотыКомплектующих.Номенклатура.*               КАК Комплектующая,
	|	ОборотыКомплектующих.ХарактеристикаНоменклатуры.* КАК ХарактеристикаКомплектующей,
	|	Период,
	|	ОборотыКомплектующих.Регистратор.*,
	|	НачалоПериода(Период, День) КАК ПериодДень ,
	|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
	|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
	|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
	|	НачалоПериода(Период, Год) КАК ПериодГод,
	|	ВЫБОР КОГДА ОборотыКомплектующих.ВидСтрокиДвижения = ""ДвижениеКомплекта"" ТОГДА ОборотыКомплектов.КоличествоПриход ИНАЧЕ 0 КОНЕЦ КАК КомплектКоличествоПриход,
	|	ВЫБОР КОГДА ОборотыКомплектующих.ВидСтрокиДвижения = ""ДвижениеКомплекта"" ТОГДА ОборотыКомплектов.КоличествоРасход ИНАЧЕ 0 КОНЕЦ КАК КомплектКоличествоРасход,
	|	ОборотыКомплектующих.КоличествоПриход    КАК КомплектующаяКоличествоПриход,
	|	ОборотыКомплектующих.КоличествоРасход    КАК КомплектующаяКоличествоРасход
	|	//УСЛОВИЯ_СВОЙСТВА
	|	//УСЛОВИЯ_КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО 
	|	Комплект.*                         КАК Комплект,
	|	ХарактеристикаКомплекта.*          КАК ХарактеристикаКомплекта,
	|	Комплектующая.*                    КАК Комплектующая,
	|	ХарактеристикаКомплектующей.*      КАК ХарактеристикаКомплектующей,
	|	Период,
	|	ОборотыКомплектующих.Регистратор.*,
	|	НачалоПериода(Период, День) КАК ПериодДень ,
	|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
	|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
	|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
	|	НачалоПериода(Период, Год) КАК ПериодГод,
	|	ВЫБОР КОГДА ОборотыКомплектующих.ВидСтрокиДвижения = ""ДвижениеКомплекта"" ТОГДА ОборотыКомплектов.КоличествоПриход ИНАЧЕ 0 КОНЕЦ КАК КомплектКоличествоПриход,
	|	ВЫБОР КОГДА ОборотыКомплектующих.ВидСтрокиДвижения = ""ДвижениеКомплекта"" ТОГДА ОборотыКомплектов.КоличествоРасход ИНАЧЕ 0 КОНЕЦ КАК КомплектКоличествоРасход,
	|	ОборотыКомплектующих.КоличествоПриход    КАК КомплектующаяКоличествоПриход,
	|	ОборотыКомплектующих.КоличествоРасход    КАК КомплектующаяКоличествоРасход
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}
	|
	|{ИТОГИ ПО
	|	Комплект.*                    КАК Комплект,
	|	ХарактеристикаКомплекта.*     КАК ХарактеристикаКомплекта,
	|	Комплектующая.*               КАК Комплектующая,
	|	ХарактеристикаКомплектующей.* КАК ХарактеристикаКомплектующей,
	|	Период,
	|	ОборотыКомплектующих.Регистратор.*,
	|	НачалоПериода(Период, День) КАК ПериодДень ,
	|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
	|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
	|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
	|	НачалоПериода(Период, Год) КАК ПериодГод
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}

	|
	|ИТОГИ  
	|	СУММА(КомплектКоличествоПриход),
	|	СУММА(КомплектКоличествоРасход),
	|	СУММА(КомплектующаяКоличествоПриход),
	|	СУММА(КомплектующаяКоличествоРасход)
	|	//ИТОГИ_СВОЙСТВА
	|	//ИТОГИ_КАТЕГОРИИ
	|ПО ОБЩИЕ, 
	|	Комплект,
	|	Комплектующая
	|АВТОУПОРЯДОЧИВАНИЕ
	|";
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ОборотыКомплектов.Номенклатура",                  "Комплект",                    "Комплект",                     ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ОборотыКомплектов.ХарактеристикаНоменклатуры",    "ХарактеристикаКомплекта",     "Характеристика комплекта",     ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ОборотыКомплектующих.Номенклатура",               "Комплектующая",               "Комплектующая",                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ОборотыКомплектующих.ХарактеристикаНоменклатуры", "ХарактеристикаКомплектующей", "Характеристика комплектующей", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры);
		
		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ХарактеристикаКомплекта",       "Характеристика комплекта");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ХарактеристикаКомплектующей",   "Характеристика комплектующей");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КомплектКоличествоПриход",      "Комплект к-во приход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КомплектКоличествоРасход",      "Комплект к-во расход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КомплектующаяКоличествоПриход", "Комплектующая к-во приход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КомплектующаяКоличествоРасход", "Комплектующая к-во расход");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	УниверсальныйОтчет.ДобавитьПоказатель("КомплектКоличествоПриход",      "Комплект к-во приход", Истина, "ЧЦ=15; ЧДЦ=3");
	УниверсальныйОтчет.ДобавитьПоказатель("КомплектКоличествоРасход",      "Комплект к-во расход", Истина, "ЧЦ=15; ЧДЦ=3");
	УниверсальныйОтчет.ДобавитьПоказатель("КомплектующаяКоличествоПриход", "Комплектующая к-во приход", Истина, "ЧЦ=15; ЧДЦ=3");
	УниверсальныйОтчет.ДобавитьПоказатель("КомплектующаяКоличествоРасход", "Комплектующая к-во расход", Истина, "ЧЦ=15; ЧДЦ=3");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Комплект");
	УниверсальныйОтчет.ДобавитьОтбор("Комплектующая");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВидКомплектации", Перечисления.ВидыКомплектации.Сборка);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ПустаяДата", '00010101000000');
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли
