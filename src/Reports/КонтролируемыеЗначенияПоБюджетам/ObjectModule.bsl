#Если Клиент Тогда
Перем мНастройка Экспорт;				// Текущий вариант настройки отчета
Перем мИмяОтчета Экспорт;				// Имя этого отчета
Перем мСтруктураНеСохраняемыеВНастройкеРеквизиты Экспорт;	// Структура, содержит реквизиты отчета, не подлежащие сохранению

// Все возможные показатели
Перем мТаблицаПоказатели Экспорт; 

// Настройка периода
Перем НП Экспорт;

// Соответствия, содержащая назначения свойств и категорий именам
Перем мСоответствиеНазначений Экспорт;

Перем мСтруктураСвязиПоказателейИИзмерений Экспорт; // содержит связь показателей и измерений

Перем мМассивШиринКолонок Экспорт; // массив ширин колонок табличного документа для сохранения между формированиями отчета

Перем мИсходныйМакетОтчета Экспорт; // исходный макет, используемый для отчета. По умолчанию "Макет", но может быть переопределен

Перем мНазваниеОтчета Экспорт; // название отчета

Перем мВыбиратьИмяРегистра Экспорт; // признак выбора (изменения) имени регистра (вида отчета)

Перем мВыбиратьИспользованиеСвойств Экспорт; // признак выбора (изменения) флажка использования свойств и категорий

Перем мСтруктураДляОтбораПоКатегориям Экспорт; // содержит связь отборов текста запроса Построителя и значений категорий

Перем мРежимВводаПериода Экспорт; // 0 - произвольный период, 1 - дата, 2 - месяц, 3 - квартал, 4 - год

Перем ШиринаТаблицы;

Перем СтруктураФорматаПолей Экспорт; // хранит формат полей примитивных типов

Перем мСтруктураНевыводимыхГруппировок Экспорт; // Хранит список тех группировок, которые не надо выводить.
											// Применяется в тех случаях, когда нужно пропускать итоги,
											// например Номенклатура - Характеристика - Серия: итоги 
											// по номенклатуре не нужны, нужно только для всех трех


// Процедура заполнения начальных настроек отчета
Процедура СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей)
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтролируемыеЗначенияБюджетовОбороты.СтатьяОборотов КАК СтатьяОборотов,
	|	КонтролируемыеЗначенияБюджетовОбороты.КонтролирующийСценарий КАК КонтролирующийСценарий,
	|	УстановкаОграниченийПоБюджетам.НачалоКонтролируемогоПериода КАК КонтролируемыйПериод,
	|	КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот КАК СуммаСценарияКонтроль,
	|	КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот КАК СуммаСценарияИсполнение,
	|	КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот - КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот КАК СуммаСценарияОстаток
	|{ВЫБРАТЬ
	|	КонтролируемыеЗначенияБюджетовОбороты.СтатьяОборотов.* КАК СтатьяОборотов,
	|	КонтролируемыеЗначенияБюджетовОбороты.КонтролирующийСценарий КАК КонтролирующийСценарий,
	|	КонтролируемыеЗначенияБюджетовОбороты.КонтролирующийСценарий.Периодичность КАК ПериодКонтролирующегоСценария,
	|	УстановкаОграниченийПоБюджетам.НачалоКонтролируемогоПериода КАК КонтролируемыйПериод,
	|	КонтролируемыеЗначенияБюджетовОбороты.ЦФО.* КАК ЦФО,
	|	КонтролируемыеЗначенияБюджетовОбороты.Проект.* КАК Проект,
	|	КонтролируемыеЗначенияБюджетовОбороты.Контрагент.* КАК Контрагент,
	|	КонтролируемыеЗначенияБюджетовОбороты.Номенклатура.* КАК Номенклатура}
	|ИЗ
	|	РегистрСведений.УстановкаОграниченийПоБюджетам КАК УстановкаОграниченийПоБюджетам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КонтролируемыеЗначенияБюджетов.Обороты(, , День, ) КАК КонтролируемыеЗначенияБюджетовОбороты
	|		ПО УстановкаОграниченийПоБюджетам.НачалоКонтролируемогоПериода = КонтролируемыеЗначенияБюджетовОбороты.Период 
	|		И УстановкаОграниченийПоБюджетам.СтатьяОборотов = КонтролируемыеЗначенияБюджетовОбороты.СтатьяОборотов 
	|		И УстановкаОграниченийПоБюджетам.ЦФО = КонтролируемыеЗначенияБюджетовОбороты.ЦФО 
	|		И УстановкаОграниченийПоБюджетам.Проект = КонтролируемыеЗначенияБюджетовОбороты.Проект 
	|		И УстановкаОграниченийПоБюджетам.Контрагент = КонтролируемыеЗначенияБюджетовОбороты.Контрагент 
	|		И УстановкаОграниченийПоБюджетам.Номенклатура = КонтролируемыеЗначенияБюджетовОбороты.Номенклатура 
	|		И УстановкаОграниченийПоБюджетам.КонтролирующийСценарий = КонтролируемыеЗначенияБюджетовОбороты.КонтролирующийСценарий
	|		И УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения = КонтролируемыеЗначенияБюджетовОбороты.ИспользованиеКонтролируемогоЗначения
	|
	|ГДЕ
	|	УстановкаОграниченийПоБюджетам.Период = &ДатаОтчета И
	|	УстановкаОграниченийПоБюджетам.Сценарий = &Сценарий И
	|	УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения = &ИспользованиеКонтролируемогоЗначения И
	|	УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения = &ВидКонтролируемогоЗначения	
	|{ГДЕ
	|	УстановкаОграниченийПоБюджетам.СтатьяОборотов,
	|	УстановкаОграниченийПоБюджетам.КонтролирующийСценарий,
	|	УстановкаОграниченийПоБюджетам.ЦФО,
	|	УстановкаОграниченийПоБюджетам.Проект,
	|	УстановкаОграниченийПоБюджетам.Контрагент,
	|	УстановкаОграниченийПоБюджетам.Номенклатура}
	|
	|ИТОГИ СУММА(СуммаСценарияКонтроль), СУММА(СуммаСценарияИсполнение), СУММА(СуммаСценарияОстаток) ПО
	|	КонтролируемыеЗначенияБюджетовОбороты.КонтролирующийСценарий КАК КонтролирующийСценарий,
	|	УстановкаОграниченийПоБюджетам.НачалоКонтролируемогоПериода КАК КонтролируемыйПериод,
	|	КонтролируемыеЗначенияБюджетовОбороты.СтатьяОборотов КАК СтатьяОборотов
	|	{
	|	ИТОГИ ПО 
	|	КонтролируемыеЗначенияБюджетовОбороты.КонтролирующийСценарий КАК КонтролирующийСценарий,
	|	КонтролируемыеЗначенияБюджетовОбороты.КонтролирующийСценарий.Периодичность КАК ПериодКонтролирующегоСценария,
	|	КонтролируемыеЗначенияБюджетовОбороты.СтатьяОборотов КАК СтатьяОборотов,
	|	УстановкаОграниченийПоБюджетам.НачалоКонтролируемогоПериода КАК КонтролируемыйПериод,
	|	КонтролируемыеЗначенияБюджетовОбороты.ЦФО.* КАК ЦФО,
	|	КонтролируемыеЗначенияБюджетовОбороты.Проект.* КАК Проект,
	|	КонтролируемыеЗначенияБюджетовОбороты.Контрагент.* КАК Контрагент,
	|	КонтролируемыеЗначенияБюджетовОбороты.Номенклатура.* КАК Номенклатура}";
	
	ПостроительОтчета.Текст = ТекстЗапроса;
			
	Для Сч=0 по ПостроительОтчета.ДоступныеПоля.Количество()-1 Цикл
		Поле=ПостроительОтчета.ДоступныеПоля[Сч];
		Если Поле.Имя="Номенклатура" Тогда
			МассивТипов=Новый Массив;
			Если Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
				МассивТипов.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
			Иначе
				МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
			КонецЕсли;
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		Поле.Измерение=Истина;
	КонецЦикла;

	СтруктураПредставлениеПолей = Новый Структура("СтатьяОборотов,
	|	КонтролирующийСценарий,
	|	ПериодКонтролирующегоСценария,
	|	КонтролируемыйПериод,
	|	ЦФО,
	|	Проект,
	|	Контрагент,
	|	Номенклатура,
	|	СуммаСценарияКонтроль,
	|	СуммаСценарияИсполнение,
	|	СуммаСценарияОстаток",
	"Статья оборотов",
	"Контролирующий сценарий",
	"Периодичность контролирующего сценария",
	"Контролируемый период",
	"ЦФО",
	"Проект",
	"Контрагент",
	"Номенклатура",
	"Установленное ограничение",
	"Текущее исполнение",
	"Остаток к использованию");

	// Числовые показатели заносятся в специальную таблицу
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаСценарияКонтроль";          // Какому полю в запросе соответствует
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля]; // Представление показателя в отчете
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";        // Строка форматирования

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаСценарияИсполнение";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаСценарияОстаток";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
	
	// ... и добавляются в табличную часть Показатели
	Для Каждого Строка Из мТаблицаПоказатели Цикл

		Показатель = Показатели.Добавить();
		Показатель.Имя           = Строка.ИмяПоля;
		Показатель.Представление = Строка.ПредставлениеПоля;
		
		Показатель.Использование = Истина;
		
	КонецЦикла;
	
	ВыводитьПоказателиВСтроку=Истина;
		
	// Поля отбора, которые будут показаны на основной форме, заносятся в массив МассивОтбора
	МассивОтбора.Добавить("СтатьяОборотов");
	МассивОтбора.Добавить("ЦФО");
	МассивОтбора.Добавить("Проект");
	МассивОтбора.Добавить("Контрагент");
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("КонтролирующийСценарий");
			
КонецПроцедуры // СформироватьНастройкиОтчета()

Процедура ЗаполнитьНачальныеНастройки() Экспорт
		
	мВыбиратьИмяРегистра = Ложь;
	ИмяРегистра = "ОборотыПоСтатьямБюджета";
	ВыводитьИтогиПоВсемУровням=Истина;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	
	мТаблицаПоказатели  = Новый ТаблицаЗначений;
	мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);
	
	мСтруктураСвязиПоказателейИИзмерений = Новый Структура;
	
	ЕстьНастройка=Ложь;
	
	Если НЕ ПостроительОтчета.Текст="" Тогда
		
		ЕстьНастройка=Истина;
		Настройка=ПостроительОтчета.ПолучитьНастройки(Истина,Истина,Истина,Ложь);
		
	КонецЕсли;
	
	СтруктураПредставлениеПолей = Новый Структура;

	мСоответствиеНазначений = Новый Соответствие;

	МассивОтбора = Новый Массив;
	
	мРежимВводаПериода = 1;
	мНазваниеОтчета = "Контролируемые значения по статьям оборотов";

	Показатели.Очистить();

	//Очистим отбор
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла;

	СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей);

//	КонецЕсли; 

	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	Если ЕстьНастройка Тогда
		ПостроительОтчета.УстановитьНастройки(Настройка,Истина,Истина,Истина,Ложь);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Создает бюджетную операцию по параметрам расшифровки
//
Процедура СоздатьОперацию(Расшифровка, ЭтотОтчет)
	
	Если НЕ ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НоваяОперация=Документы.БюджетнаяОперация.СоздатьДокумент();
	НоваяОперация.Сценарий=Сценарий;
	
	Если Расшифровка.Свойство("ЦФО") и НЕ Расшифровка.ЦФО.ЭтоГруппа Тогда
		НоваяОперация.ЦФО=Расшифровка.ЦФО;
	КонецЕсли;
	
	Если Расшифровка.Свойство("СтатьяОборотов") и НЕ Расшифровка.СтатьяОборотов.ЭтоГруппа Тогда
		НоваяОперация.СтатьяОборотов=Расшифровка.СтатьяОборотов;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Проект") и НЕ Расшифровка.Проект.ЭтоГруппа Тогда
		НоваяОперация.Проект=Расшифровка.Проект;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Контрагент") и НЕ Расшифровка.Контрагент.ЭтоГруппа Тогда
		НоваяОперация.Контрагент=Расшифровка.Контрагент;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Номенклатура") И НЕ Расшифровка.Номенклатура=Неопределено И НЕ Расшифровка.Номенклатура.ЭтоГруппа Тогда
		НоваяОперация.Номенклатура=Расшифровка.Номенклатура;
	ИначеЕсли Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.Номенклатура Тогда
		НоваяОперация.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
	ИначеЕсли Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		НоваяОперация.Номенклатура=Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	КонецЕсли;
		
	НоваяОперация.ПериодПланирования=ДатаОтчета;
	
	НоваяОперация.Дата=РабочаяДата;
	НоваяОперация.УстановитьВремя(АвтоВремя.ТекущееИлиПоследним);
		
	ФормаОперации=НоваяОперация.ПолучитьФорму("ФормаДокумента");
	ФормаОперации.ОткрытьМодально();
	
	Если НоваяОперация.Проведен Тогда
		ПолучитьФорму().ОбновитьТаблицуОтчета();
	КонецЕсли;
	
КонецПроцедуры // СоздатьОперацию()

// Создает заявку на расходование средств по параметрам расшифровки
//
Процедура СоздатьЗаявку(Расшифровка, ЭтотОтчет)
	
	Если НЕ ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НоваяЗаявка=Документы.ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
	НоваяЗаявка.Сценарий=Сценарий;
	
	Если Расшифровка.Свойство("ЦФО") и НЕ Расшифровка.ЦФО.ЭтоГруппа Тогда
		НоваяЗаявка.ЦФО=Расшифровка.ЦФО;
	КонецЕсли;
	
	Если Расшифровка.Свойство("СтатьяОборотов") и НЕ Расшифровка.СтатьяОборотов.ЭтоГруппа Тогда
		НоваяЗаявка.СтатьяОборотов=Расшифровка.СтатьяОборотов;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Проект") и НЕ Расшифровка.Проект.ЭтоГруппа Тогда
		НоваяЗаявка.Проект=Расшифровка.Проект;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Контрагент") и НЕ Расшифровка.Контрагент.ЭтоГруппа Тогда
		НоваяЗаявка.Контрагент=Расшифровка.Контрагент;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Номенклатура") И НЕ Расшифровка.Номенклатура=Неопределено И НЕ Расшифровка.Номенклатура.ЭтоГруппа Тогда
		НоваяЗаявка.Номенклатура=Расшифровка.Номенклатура;
	ИначеЕсли Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.Номенклатура Тогда
		НоваяЗаявка.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
	ИначеЕсли Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		НоваяЗаявка.Номенклатура=Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	КонецЕсли;
	
    НоваяЗаявка.ДатаРасхода=ДатаОтчета;
		
	НоваяЗаявка.Дата=РабочаяДата;
	НоваяЗаявка.УстановитьВремя(АвтоВремя.ТекущееИлиПоследним);
			
	ФормаОперации=НоваяЗаявка.ПолучитьФорму("ФормаДокумента");
	ФормаОперации.ОткрытьМодально();
	
	Если НоваяЗаявка.Проведен Тогда
		ПолучитьФорму().ОбновитьТаблицуОтчета();
	КонецЕсли;
	
КонецПроцедуры // СоздатьЗаявку()

// Расшифровывает данные отчета по регистру "КонтролируемыеЗначенияБюджетов"
//
Процедура РасшифровкаПоРегистру(Расшифровка,ЭтотОтчет)
	
	// Настройка отчета
		Отчет = Отчеты.ОтчетСписокКроссТаблица.Создать();
		
		Параметры = Новый Соответствие;
		Параметры.Вставить("ИмяРегистра","КонтролируемыеЗначенияБюджетов");
		Параметры.Вставить("ДатаНач",ОбщегоНазначения.ДатаНачалаПериода(ДатаОтчета,Расшифровка.КонтролирующийСценарий.Периодичность));
		Параметры.Вставить("ДатаКон",ОбщегоНазначения.ДатаКонцаПериода(ДатаОтчета,Расшифровка.КонтролирующийСценарий.Периодичность));

		ИсходныйОтчет = ЭтотОтчет;

		// Переносимые свойства
		Параметры.Вставить("ПоказыватьЗаголовок",     ПоказыватьЗаголовок);
		Параметры.Вставить("ВыводитьПоказателиВСтроку", ВыводитьПоказателиВСтроку);
		Параметры.Вставить("ВыводитьИтогиПоВсемУровням", ВыводитьИтогиПоВсемУровням);
		Параметры.Вставить("ВыводитьДополнительныеПолявОтдельнойКолонке", ВыводитьДополнительныеПолявОтдельнойКолонке);
		Параметры.Вставить("РаскрашиватьИзмерения",   РаскрашиватьИзмерения);

		//Параметры.Вставить("ВыводитьДетальныеЗаписи", ВыводитьДетальныеЗаписи);

		ТабПоказатели=Показатели.Выгрузить();
		ТабПоказатели.Очистить();
		
		НоваяСтрока=ТабПоказатели.Добавить();
		НоваяСтрока.Имя="СуммаСценарияКонтроль";
		НоваяСтрока.Представление="Установленное ограничение";
		НоваяСтрока.Использование=Истина;
		
		НоваяСтрока=ТабПоказатели.Добавить();
		НоваяСтрока.Имя="СуммаСценарияИсполнение";
		НоваяСтрока.Представление="Текущее исполнение";
		НоваяСтрока.Использование=Истина;
		
		// Перенос табличной части
		Параметры.Вставить("Показатели", ТабПоказатели);
		
		Отчет.Настроить(Параметры);
		
		Форма = Отчет.ПолучитьОсновнуюФорму();

		ПостроительОтчета.НастроитьРасшифровку(Отчет.ПолучитьПостроительОтчета(), Расшифровка);

		// Добавим измерения из расшифровываемого отчета
		МассивДобавленныеИзмерения = Новый Массив;

		ТабОтбор = Новый ТаблицаЗначений;
		ТабОтбор.Колонки.Добавить("Имя");
		ТабОтбор.Колонки.Добавить("ВидСравнения");
		ТабОтбор.Колонки.Добавить("Значение");

		Для каждого Элемент Из Отчет.ПолучитьПостроительОтчета().Отбор Цикл

			Если Элемент.Использование Тогда

				НоваяСтрока = ТабОтбор.Добавить();
				НоваяСтрока.Имя = Элемент.Имя;
				НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
				НоваяСтрока.Значение = Элемент.Значение;

			КонецЕсли;

		КонецЦикла; 

		Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
			
			Если ПостроительОтчета.ИзмеренияСтроки[Инд].Имя="КонтролируемыйПериод" ИЛИ ПостроительОтчета.ИзмеренияСтроки[Инд].Имя="ПериодКонтролирующегоСценария" Тогда
				Продолжить;
			КонецЕсли;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя",ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);

			НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);

			// Измерение не нужно добавлять, если в нем заведомо будет один элемент
			НеДобавлятьИзмерение = Ложь;

			Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл

				// Не добавляем измерения по отборам на равенство - в них будет один элемент
				Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда

					НеДобавлятьИзмерение = Истина;
					Прервать;

					// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
					// или плана видов характеристик - в них будет один элемент
				ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
					ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда

					Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
						ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;

						МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));

						Если МетаданныеОбъекта<>Неопределено Тогда
							Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
								ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда

								Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда

									НеДобавлятьИзмерение = Истина;
									Прервать;

								КонецЕсли; 
							КонецЕсли; 
						КонецЕсли; 

					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

			Если НеДобавлятьИзмерение Тогда

				// Удалим также и предыдущие измерения
				Для каждого ПредыдущееИзмерение Из МассивДобавленныеИзмерения Цикл

					Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Удалить(ПредыдущееИзмерение);

				КонецЦикла;

				Продолжить;

			КонецЕсли;
			
			// Добавляем новое измерение и запоминаем его в массиве
			МассивДобавленныеИзмерения.Добавить(Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияСтроки[Инд].Имя,
			ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения));
		КонецЦикла;
		
		Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Очистить();
		Отчет.ПолучитьПостроительОтчета().ВыбранныеПоля.Добавить("Регистратор");
		Форма.ОбновитьОтчет();
		Форма.Открыть();
		
КонецПроцедуры // РасшифровкаПоРегистру()

// Расшифровывает отчеты, реализуемые при помощи данного
//
// Параметры:
//	Расшифровка           - Структура, значение расшифровки, взятое из табличного документа, и, в случае надобности, дополненное
//	СтандартнаяОбраьотка  - Флаг стандартной обработки расшифровки
//	ЭтотОтчет             - Контекст, из которого происходит вызов. Позволяет определить, как именно расшифровывать.
//
Процедура ОбработкаРасшифровкиОтчетаБюджетирования(Расшифровка, СтандартнаяОбработка, ЭтотОтчет) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;

		СписокВыбора = Новый СписокЗначений;

		ДоступныеИзмерения = Новый Соответствие;

		Для ДП = 0 По ПостроительОтчета.ДоступныеПоля.Количество() - 1 Цикл
			Поле = ПостроительОтчета.ДоступныеПоля[ДП];
			Если Поле.Измерение Тогда
				ДоступныеИзмерения.Вставить(Поле.Имя, Поле.Представление);
			КонецЕсли;
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияСтроки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияКолонки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		ИмяДобавляемогоИзмерения = "";
		ПредставлениеДобавляемогоИзмерения = "";
		Если ДоступныеИзмерения.Количество() > 0 Тогда
			Для Каждого ДИ ИЗ ДоступныеИзмерения Цикл
				СписокВыбора.Добавить(ДИ.Ключ, ДИ.Значение);
				ИмяДобавляемогоИзмерения = ДИ.Ключ;
				ПредставлениеДобавляемогоИзмерения = ДИ.Значение;
			КонецЦикла;
		КонецЕсли;

		СписокВыбора.СортироватьПоПредставлению();
 
		СписокВыбора.Добавить(0, "По документам движения");
  
		
		Если ИспользованиеКонтролируемыхЗначений=Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании Тогда
			
			СписокВыбора.Добавить(-1,"Ввести бюджетную операцию");
			
		Иначе
			
			СписокВыбора.Добавить(-2,"Ввести заявку на расходование средств");
			
		КонецЕсли;

		Выбор = СписокВыбора.ВыбратьЭлемент("Выберите действие", СписокВыбора[СписокВыбора.Количество()-1]);

		Если Выбор = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Выбор.Значение=-1 Тогда
			
			СоздатьОперацию(Расшифровка,ЭтотОтчет);
			
		ИначеЕсли Выбор.Значение=-2 Тогда
			
			СоздатьЗаявку(Расшифровка,ЭтотОтчет);
			
		ИначеЕсли Выбор.Значение=0 Тогда
			
			РасшифровкаПоРегистру(Расшифровка,ЭтотОтчет);
						
		Иначе

		// Настройка отчета
		Отчет = Отчеты[Метаданные().Имя].Создать();
		
		Параметры = Новый Соответствие;
		Параметры.Вставить("Сценарий",Сценарий);
		Параметры.Вставить("ИспользованиеКонтролируемыхЗначений",ИспользованиеКонтролируемыхЗначений);
		Параметры.Вставить("ВидКонтролируемыхЗначений",ВидКонтролируемыхЗначений);
		Параметры.Вставить("ДатаОтчета",ДатаОтчета);

		ИсходныйОтчет = ЭтотОтчет;

		// Переносимые свойства
		Параметры.Вставить("ПоказыватьЗаголовок",     ПоказыватьЗаголовок);
		Параметры.Вставить("ВыводитьПоказателиВСтроку", ВыводитьПоказателиВСтроку);
		Параметры.Вставить("ВыводитьИтогиПоВсемУровням", ВыводитьИтогиПоВсемУровням);
		Параметры.Вставить("ВыводитьДополнительныеПолявОтдельнойКолонке", ВыводитьДополнительныеПолявОтдельнойКолонке);
		Параметры.Вставить("РаскрашиватьИзмерения",   РаскрашиватьИзмерения);

		//Параметры.Вставить("ВыводитьДетальныеЗаписи", ВыводитьДетальныеЗаписи);

		// Перенос табличной части
		Параметры.Вставить("Показатели", Показатели.Выгрузить());

		Отчет.Настроить(Параметры);
		
		Форма = Отчет.ПолучитьОсновнуюФорму();

		ПостроительОтчета.НастроитьРасшифровку(Отчет.ПолучитьПостроительОтчета(), Расшифровка);

		// Добавим измерения из расшифровываемого отчета
		МассивДобавленныеИзмерения = Новый Массив;

		ТабОтбор = Новый ТаблицаЗначений;
		ТабОтбор.Колонки.Добавить("Имя");
		ТабОтбор.Колонки.Добавить("ВидСравнения");
		ТабОтбор.Колонки.Добавить("Значение");

		Для каждого Элемент Из Отчет.ПолучитьПостроительОтчета().Отбор Цикл

			Если Элемент.Использование Тогда

				НоваяСтрока = ТабОтбор.Добавить();
				НоваяСтрока.Имя = Элемент.Имя;
				НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
				НоваяСтрока.Значение = Элемент.Значение;

			КонецЕсли;

		КонецЦикла; 

		Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя",ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);

			НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);

			// Измерение не нужно добавлять, если в нем заведомо будет один элемент
			НеДобавлятьИзмерение = Ложь;

			Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл

				// Не добавляем измерения по отборам на равенство - в них будет один элемент
				Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда

					НеДобавлятьИзмерение = Истина;
					Прервать;

					// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
					// или плана видов характеристик - в них будет один элемент
				ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
					ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда

					Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
						ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;

						МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));

						Если МетаданныеОбъекта<>Неопределено Тогда
							Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
								ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда

								Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда

									НеДобавлятьИзмерение = Истина;
									Прервать;

								КонецЕсли; 
							КонецЕсли; 
						КонецЕсли; 

					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

			Если НеДобавлятьИзмерение Тогда

				// Удалим также и предыдущие измерения
				Для каждого ПредыдущееИзмерение Из МассивДобавленныеИзмерения Цикл

					Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Удалить(ПредыдущееИзмерение);

				КонецЦикла;

				Продолжить;

			КонецЕсли;

			// Добавляем новое измерение и запоминаем его в массиве
			МассивДобавленныеИзмерения.Добавить(Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияСтроки[Инд].Имя,
			ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения));
		КонецЦикла;

		Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
			Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияКолонки[Инд].Имя,
			ПостроительОтчета.ИзмеренияКолонки[Инд].ТипИзмерения)
		КонецЦикла;


		// Текущий отчет с детальными записями по документам
		Если Выбор.Значение = 0 Тогда
			Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Очистить();

			Отчет.ПолучитьПостроительОтчета().ВыбранныеПоля.Добавить("Регистратор");

			Форма.ОбновитьТаблицуОтчета();

		Иначе

			// Текущий отчет с дополнительным измерением

			Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(Выбор.Значение, Выбор.Значение);

			Форма.ОбновитьТаблицуОтчета();
		КонецЕсли;
		Форма.неВосстанавливатьНастройку=Истина;
		Форма.Открыть();
	КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
// 

// Выводит шапку таблицы
Процедура ВывестиКолонкуШапки(Выборка, Знач Индекс, СтруктураПараметров, ДокументРезультат, ДеревоКолонкиОтчета, Расшифровка)

	Пока Выборка.Следующий() Цикл
		
		// Если группировка не выводится, переходим к выбору следующей (кроме иерархии)
		Если СтруктураПараметров.СтруктураПропускаемыеГруппировки.Свойство(Выборка.Группировка()) Тогда
			
			НачКолонка = СтруктураПараметров.НачКолонка;
			СтруктураПараметров.ПропущеноГруппировок=1;
			Перейти ~M2;
			
		КонецЕсли;

		МакетКолонкаШапки = СтруктураПараметров.МакетКолонкаШапки;

		ФорматПоля = "";
		СтруктураПараметров.СтруктураФорматаПолей.Свойство(ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя, ФорматПоля);

		// Если выводятся имена показателей, то их не очищаем
		Если Не ВыводитьПоказателиВСтроку Тогда

			МакетКолонкаШапки.Область().Очистить(Истина);
		Иначе

			МакетКолонкаШапки.Область(1,1,СтруктураПараметров.МакетКолонкаШапки.ВысотаТаблицы-1,СтруктураПараметров.МакетКолонкаШапки.ШиринаТаблицы).Очистить(Истина);

		КонецЕсли; 

		// Накопление количества колонок в шапке.
		СтруктураПараметров.КоличествоКолонокПоказателей = СтруктураПараметров.КоличествоКолонокПоказателей + 1;

		Расшифровка.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);

		СтруктураРасшифровки = Новый Структура;
		Для Каждого Элемент Из Расшифровка Цикл
			СтруктураРасшифровки.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Обл = ДокументРезультат.Присоединить(МакетКолонкаШапки, Выборка.Уровень());
		Обл.Расшифровка = СтруктураРасшифровки;

		// Добавим 1 к количеству значений группировок колонок
		Если Индекс = 0 Тогда
			СтруктураПараметров.КоличествоКолонокГруппировок = СтруктураПараметров.КоличествоКолонокГруппировок+1;
		КонецЕсли;

		НачКолонка = Обл.Лево;

		// В специальном параметре будет сохраняться правая ячейка
		СтруктураПараметров.Вставить("КонКолонка", Обл.Право);
		
		// Нач. колонка для следующей группировки
		СтруктураПараметров.Вставить("НачКолонка", Обл.Право+1);

~M2:	НоваяСтрока = ДеревоКолонкиОтчета.Строки.Добавить();
		НоваяСтрока.Значение = Выборка[Выборка.Группировка()];
		НоваяСтрока.ИмяИзмерения = ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя;
		
		Если Индекс < ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Тогда

			// На следующем уровне используем новую структуру расшифровки
			КопияРасшифровка = Новый Структура;

			Для Каждого Элемент Из Расшифровка Цикл

				КопияРасшифровка.Вставить(Элемент.Ключ, Элемент.Значение);

			КонецЦикла;
			
			ВывестиКолонкуШапки(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[Индекс+1].Имя), Индекс+1, СтруктураПараметров, ДокументРезультат, НоваяСтрока, КопияРасшифровка);
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.СтруктураПропускаемыеГруппировки.Свойство(Выборка.Группировка()) Тогда
			
			// Заголовок колонки			
			Если Выборка.Группировка()="КонтролируемыйПериод" Тогда
				ТекстЗаголовка=ОбщегоНазначения.ПолучитьПериодСтрокой(Выборка.КонтролируемыйПериод,Строка(Выборка.ПериодКонтролирующегоСценария));
			Иначе
				ТекстЗаголовка=Формат(Выборка[Выборка.Группировка()], ФорматПоля);
			КонецЕсли;
			
			ДокументРезультат.Область(СтруктураПараметров.ВысотаЗаголовка+2 +Индекс-СтруктураПараметров.ПропущеноГруппировок, НачКолонка, СтруктураПараметров.ВысотаЗаголовка+2 + Индекс-СтруктураПараметров.ПропущеноГруппировок, НачКолонка).Текст = ТекстЗаголовка;
			
		КонецЕсли;
		
		// Оформление ячеек группы непоследнего уровня
		Если НачКолонка <> СтруктураПараметров.КонКолонка Тогда

			Обл = ДокументРезультат.Область(СтруктураПараметров.ВысотаЗаголовка+2 +Индекс-СтруктураПараметров.ПропущеноГруппировок, НачКолонка, СтруктураПараметров.ВысотаЗаголовка+2 + Индекс-СтруктураПараметров.ПропущеноГруппировок, СтруктураПараметров.КонКолонка);
			Обл.ПоВыделеннымКолонкам = Истина;
			Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			Обл.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;

			// Очистим границы слева и справа
			ЛинияНетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			Обл.ГраницаСправа = ЛинияНетЛинии;
			Обл.ГраницаСнизу  = ЛинияНетЛинии;

			Обл2 = ДокументРезультат.Область(СтруктураПараметров.ВысотаЗаголовка+2 +Индекс-СтруктураПараметров.ПропущеноГруппировок, НачКолонка+1, СтруктураПараметров.ВысотаЗаголовка+2 + Индекс-СтруктураПараметров.ПропущеноГруппировок, СтруктураПараметров.КонКолонка);
			Обл2.ГраницаСлева  = ЛинияНетЛинии;

		КонецЕсли;
		
	Если СтруктураПараметров.СтруктураПропускаемыеГруппировки.Свойство(Выборка.Группировка()) Тогда
			
		СтруктураПараметров.ПропущеноГруппировок=0;
		
	КонецЕсли;				
		
	КонецЦикла;	
	
		
КонецПроцедуры

Процедура ЗаполнитьПоказатели(ИмяПоля, ПредставлениеПоля, ВклПоУмолчанию, ФорматнаяСтрока) Экспорт

	//СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

	// Показатели заносятся в специальную таблицу и добавляются в список
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = ИмяПоля;
	СтрПоказатели.ПредставлениеПоля = ПредставлениеПоля;
	//СтрПоказатели.ВклПоУмолчанию    = ВклПоУмолчанию;
	СтрПоказатели.ФорматнаяСтрока   = ФорматнаяСтрока;
	Если Показатели.Найти(ИмяПоля) = Неопределено Тогда
		НовыйПоказатель = Показатели.Добавить();
		НовыйПоказатель.Имя = ИмяПоля;
		НовыйПоказатель.Представление = ПредставлениеПоля;
		НовыйПоказатель.Использование    = ВклПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

// Выводит показатели в строку отчета
Процедура ВывестиПоказатели(СтруктураПараметров, ДокументРезультат, ДеревоКолонкиОтчета, ДеревоСтроки, МакетПоказатель)

	Для Каждого Строка Из ДеревоКолонкиОтчета.Строки Цикл
		
		Если ДеревоСтроки <> Неопределено Тогда
			НайденнаяСтрока = ДеревоСтроки.Строки.Найти(Строка.Значение, "Значение", Ложь);
			Если НайденнаяСтрока <> Неопределено Тогда
				СтруктураЗначенийПоказателей = НайденнаяСтрока.СтруктураЗначенийПоказателей;
			Иначе

				СтруктураЗначенийПоказателей = Новый Структура();
				Для Каждого ИмяПоказателя Из СтруктураПараметров.Показатели Цикл
					СтруктураЗначенийПоказателей.Вставить(ИмяПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе

			СтруктураЗначенийПоказателей = Новый Структура();
			Для Каждого ИмяПоказателя Из СтруктураПараметров.Показатели Цикл
				СтруктураЗначенийПоказателей.Вставить(ИмяПоказателя);
			КонецЦикла;
		КонецЕсли;
		
		// Если группировка не выводится, переходим к выбору следующей (кроме иерархии)
		Если НЕ СтруктураПараметров.СтруктураПропускаемыеГруппировки.Свойство(Строка.ИмяИзмерения) Тогда
			
			МакетПоказатель.Параметры.Заполнить(СтруктураЗначенийПоказателей);
			
			ДокументРезультат.Присоединить(МакетПоказатель);
			
		КонецЕсли;

		// Следующий уровень:
		ВывестиПоказатели(СтруктураПараметров, ДокументРезультат, Строка, НайденнаяСтрока, МакетПоказатель);

	КонецЦикла; 

КонецПроцедуры

// Получает значения показателей для
Процедура ПолучитьПоказатели(Выборка, Знач Индекс, СтруктураПараметров, ДокументРезультат, ДеревоСтроки)

	Пока Выборка.Следующий() Цикл
		
		// Запомним соответствие значений показателей и группировки в дереве
		НоваяСтрока = ДеревоСтроки.Строки.Добавить();
		НоваяСтрока.Значение = Выборка[Выборка.Группировка()];
		НоваяСтрока.ИмяИзмерения = ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя;
		НоваяСтрока.СтруктураЗначенийПоказателей = Новый Структура;

		Для Каждого ИмяПоказателя Из СтруктураПараметров.Показатели Цикл

			НоваяСтрока.СтруктураЗначенийПоказателей.Вставить(ИмяПоказателя, Выборка[ИмяПоказателя]);
			
		КонецЦикла;

		Если Индекс < ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Тогда

			ПолучитьПоказатели(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[Индекс+1].Имя, ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя), 
			Индекс+1, СтруктураПараметров, ДокументРезультат, НоваяСтрока);

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Выводит строку отчета
Процедура ВывестиСтроку(Выборка, Знач Индекс, СтруктураПараметров, ДокументРезультат, Расшифровка)

	ИзмерениеСтроки = ПостроительОтчета.ИзмеренияСтроки[Индекс];
	
	Пока Выборка.Следующий() Цикл

		// Вывод значения измерения
		МакетСтроки = ?(Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии,
							ПостроительОтчета.ИзмеренияСтроки[Индекс].МакетИерархии,
							ПостроительОтчета.ИзмеренияСтроки[Индекс].Макет);


		// Значения измерений и т.д.
		МакетСтроки.Параметры.Заполнить(Выборка);

		Расшифровка.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);

		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке ИЛИ Выборка.ТипЗаписи()=ТипЗаписиЗапроса.ИтогПоИерархии Тогда

			СтруктураРасшифровки = Новый Структура("Расшифровка", Новый Структура);
			Для Каждого Элемент Из Расшифровка Цикл
				СтруктураРасшифровки.Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			
			МакетСтроки.Параметры.Заполнить(СтруктураРасшифровки);
		КонецЕсли;
		
		МакетИзмерение = МакетСтроки.ПолучитьОбласть(1,1,МакетСтроки.ВысотаТаблицы,1+СтруктураПараметров.КоличествоКолонок);
		
		
		// Если группировка не выводится, переходим к выбору следующей (кроме иерархии)
		Если СтруктураПараметров.СтруктураПропускаемыеГруппировки.Свойство(Выборка.Группировка()) 
			И Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке  Тогда
			
			Перейти ~M1;
			
		КонецЕсли;

		ДокументРезультат.Вывести(МакетИзмерение, Выборка.Уровень());

		// Дерево значений для хранения значений по измерениям колонки
		ДеревоСтроки = Новый ДеревоЗначений;
		ДеревоСтроки.Колонки.Добавить("ИмяИзмерения");
		ДеревоСтроки.Колонки.Добавить("Значение");
		ДеревоСтроки.Колонки.Добавить("СтруктураЗначенийПоказателей");
		
		// Получение значений показателей по измерениям колонки
		ПолучитьПоказатели(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[0].Имя, "Все"), 
		                 0, СтруктураПараметров, ДокументРезультат, ДеревоСтроки);

		// Макет для показателей
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			МакетСтроки = ПостроительОтчета.ИзмеренияСтроки[Индекс].МакетИерархии;
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			МакетСтроки = ПостроительОтчета.ИзмеренияСтроки[Индекс].Макет;
		КонецЕсли;

		// Макет показателей
		МакетПоказатель = 
		МакетСтроки.ПолучитьОбласть(1,1+СтруктураПараметров.КоличествоКолонок+1,
		МакетСтроки.ВысотаТаблицы,
		1+СтруктураПараметров.КоличествоКолонок+?(ВыводитьПоказателиВСтроку,СтруктураПараметров.КоличествоПоказателей,1));


		// Выводим показатели в соответствии с их порядком в шапке
		ВывестиПоказатели(СтруктураПараметров, ДокументРезультат, СтруктураПараметров.ДеревоКолонкиОтчета, ДеревоСтроки, МакетПоказатель);
		
~M1:	Если Индекс < ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Тогда

			// На следующем уровне используем новую структуру расшифровки
			КопияРасшифровка = Новый Структура;

			Для Каждого Элемент Из Расшифровка Цикл

				КопияРасшифровка.Вставить(Элемент.Ключ, Элемент.Значение);

			КонецЦикла;
			
			ВывестиСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияСтроки[Индекс+1].Имя), 
			              Индекс+1, СтруктураПараметров, ДокументРезультат, КопияРасшифровка);
		
		КонецЕсли;
	КонецЦикла;;

КонецПроцедуры

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	
	Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1  Цикл
	
		Для Инд2=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл

			Если ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Инд2].ПутьКДанным Тогда

				Предупреждение("Повторяющаяся группировка " + ПостроительОтчета.ИзмеренияКолонки[Инд].Представление +"."+ Символы.ПС+
				"Нельзя использовать одинаковые поля группировки в строках и в колонках!");
				ЕстьОшибки = Истина;
				Возврат;
			
			КонецЕсли; 
		КонецЦикла;
	
	КонецЦикла;
	
	мСтруктураНевыводимыхГруппировок.Вставить("ПериодКонтролирующегоСценария", Новый Структура("ПериодКонтролирующегоСценария,КонтролируемыйПериод"));
    мСтруктураНевыводимыхГруппировок.Вставить("Общие", Новый Структура);
	ВыводитьИтогиПоВсемУровням=Ложь;
	
	СписокЗначений = Новый СписокЗначений;
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		
		Если СписокЗначений.НайтиПоЗначению(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным) = Неопределено Тогда
			СписокЗначений.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным);
		Иначе
			Предупреждение("Повторяющаяся группировка " + ПостроительОтчета.ИзмеренияСтроки[Инд].Представление +"."+ Символы.ПС+
			"Нельзя использовать одинаковые поля группировки строк!");
			ЕстьОшибки = Истина;
			Возврат;
			
		КонецЕсли;

		// Если добавлялись одни и те же поля в строки и в колонки, то  у них будет неправильное автогенеренное имя, оканчивающееся на число
		ИмяИзмерения = ПостроительОтчета.ИзмеренияСтроки[Инд].Имя;

		ПоследнийСимвол = Сред(ИмяИзмерения, СтрДлина(ИмяИзмерения));

		Если ПоследнийСимвол = "1"
			ИЛИ ПоследнийСимвол = "2" 
			ИЛИ ПоследнийСимвол = "3" 
			ИЛИ ПоследнийСимвол = "4" 
			ИЛИ ПоследнийСимвол = "5" 
			ИЛИ ПоследнийСимвол = "6" 
			ИЛИ ПоследнийСимвол = "7" 
			ИЛИ ПоследнийСимвол = "8" 
			ИЛИ ПоследнийСимвол = "9" 
			ИЛИ ПоследнийСимвол = "0" Тогда
			
			// Удалим старое измерение и добавим новое
			СтрПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным;

			ПостроительОтчета.ИзмеренияСтроки.Удалить(ПостроительОтчета.ИзмеренияСтроки[Инд]);
			ПостроительОтчета.ИзмеренияСтроки.Вставить(СтрПутьКДанным, , , , , Инд);
		КонецЕсли;
		
	КонецЦикла;


	СписокЗначений = Новый СписокЗначений;
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1  Цикл
		
		Если СписокЗначений.НайтиПоЗначению(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным) = Неопределено Тогда
			СписокЗначений.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным);
		Иначе
			Предупреждение("Повторяющаяся группировка " + ПостроительОтчета.ИзмеренияКолонки[Инд].Представление +"."+ Символы.ПС+
			"Нельзя использовать одинаковые поля группировки колонок!");
			ЕстьОшибки = Истина;
			Возврат;
			
		КонецЕсли;

		// Если добавлялись одни и те же поля в строки и в колонки, то  у них будет неправильное автогенеренное имя, оканчивающееся на число
		ИмяИзмерения = ПостроительОтчета.ИзмеренияКолонки[Инд].Имя;

		ПоследнийСимвол = Сред(ИмяИзмерения, СтрДлина(ИмяИзмерения));

		Если ПоследнийСимвол = "1"
			ИЛИ ПоследнийСимвол = "2" 
			ИЛИ ПоследнийСимвол = "3" 
			ИЛИ ПоследнийСимвол = "4" 
			ИЛИ ПоследнийСимвол = "5" 
			ИЛИ ПоследнийСимвол = "6" 
			ИЛИ ПоследнийСимвол = "7" 
			ИЛИ ПоследнийСимвол = "8" 
			ИЛИ ПоследнийСимвол = "9" 
			ИЛИ ПоследнийСимвол = "0" Тогда

			// Удалим старое измерение и добавим новое
			СтрПутьКДанным = ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным;

			ПостроительОтчета.ИзмеренияКолонки.Удалить(ПостроительОтчета.ИзмеренияКолонки[Инд]);
			ПостроительОтчета.ИзмеренияКолонки.Вставить(СтрПутьКДанным, , , , , Инд);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Запоминание ширины колонки
	Если НЕ ДокументРезультат.ВысотаТаблицы = ВысотаЗаголовка Тогда

		мМассивШиринКолонок.Очистить();

		// Запоминать следует, если документ не пустой
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			
			Для Сч=1 По ШиринаТаблицы Цикл
				мМассивШиринКолонок.Добавить(ДокументРезультат.Область(1,Сч).ШиринаКолонки);
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли; 
	
	
	// Признак вывода детальных записей: в кросс-таблице не выводятся, в списке - в зависимости от связи с измерениями
	ВыводитьДетальныеЗаписи = Ложь;
	
	
	// Если это отчет-список, то нужно оперделить, выводить ли детальные записи
	МассивИндексовНезависимыхВыбранныхПолей = Новый Массив;
	
	Если ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 Тогда
		
		// Определим, нужно ли выводить детальные записи:
		// Если выбранное поле подчинено измерению, то выводим рядом с измерением,
		// Если выбранное поле не связано ни с обним измерением, то выводим его в детальных записях
		
		ЕстьНесвязанныеПоля = Ложь;
		
		Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
			
			НайденаСвязь = Ложь;
			
			Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
				
				Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];
				
				// Если поле - подчиненое
				Если Найти(ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным, Измерение.ПутьКДанным) >0 Тогда
					
					НайденаСвязь = Истина;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ НайденаСвязь Тогда
				
				МассивИндексовНезависимыхВыбранныхПолей.Добавить(Инд);
				
			КонецЕсли;
			
			ЕстьНесвязанныеПоля  = ЕстьНесвязанныеПоля ИЛИ НЕ НайденаСвязь;
		КонецЦикла;
		
		// Детальные записи выводим, если есть несвязанные выбранные поля
		ВыводитьДетальныеЗаписи = ЕстьНесвязанныеПоля;
		
	КонецЕсли;
	
	ПостроительОтчета.Макет = Неопределено;
	
	ПостроительОтчета.Параметры.Вставить("Сценарий",Сценарий);
	ПостроительОтчета.Параметры.Вставить("ИспользованиеКонтролируемогоЗначения",ИспользованиеКонтролируемыхЗначений);
	ПостроительОтчета.Параметры.Вставить("ВидКонтролируемогоЗначения",ВидКонтролируемыхЗначений);
	ПостроительОтчета.Параметры.Вставить("ДатаОтчета",ДатаОтчета);
	
	НомерКолонкиПериод=0;
	НомерСтрокиПериод=0;
	
	Для Индекс=1 По ПостроительОтчета.ИзмеренияКолонки.Количество() Цикл
		
		Если ПостроительОтчета.ИзмеренияКолонки[Индекс-1].Имя="КонтролируемыйПериод" Тогда
			НомерКолонкиПериод=Индекс;
		ИначеЕсли ПостроительОтчета.ИзмеренияКолонки[Индекс-1].Имя="ПериодКонтролирующегоСценария" Тогда 	
			НомерКолонкиПериод=0;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерКолонкиПериод>0 Тогда
		ПостроительОтчета.ИзмеренияКолонки.Добавить("ПериодКонтролирующегоСценария","ПериодКонтролирующегоСценария");
		ПостроительОтчета.ИзмеренияКолонки.Сдвинуть(ПостроительОтчета.ИзмеренияКолонки[ПостроительОтчета.ИзмеренияКолонки.Количество()-1],НомерКолонкиПериод-ПостроительОтчета.ИзмеренияКолонки.Количество());
	Иначе
		
		Для Индекс=1 По ПостроительОтчета.ИзмеренияСтроки.Количество() Цикл
			
			Если ПостроительОтчета.ИзмеренияСтроки[Индекс-1].Имя="КонтролируемыйПериод" Тогда
				НомерСтрокиПериод=Индекс;
			ИначеЕсли ПостроительОтчета.ИзмеренияСтроки[Индекс-1].Имя="ПериодКонтролирующегоСценария" Тогда 	
				НомерСтрокиПериод=0;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НомерСтрокиПериод>0 Тогда
			Позиция=НомерСтрокиПериод-1;
			ПостроительОтчета.ИзмеренияСтроки.Добавить("ПериодКонтролирующегоСценария","ПериодКонтролирующегоСценария");
			ПостроительОтчета.ИзмеренияСтроки.Сдвинуть(ПостроительОтчета.ИзмеренияСтроки[ПостроительОтчета.ИзмеренияСтроки.Количество()-1],НомерСтрокиПериод-ПостроительОтчета.ИзмеренияСтроки.Количество());
		КонецЕсли;
		
	КонецЕсли;
	
	// Макет по умолчанию может быть переопределен
	Если мИсходныйМакетОтчета = Неопределено Тогда

		МакетОтчета = ПолучитьМакет("Макет");

	Иначе

		МакетОтчета = мИсходныйМакетОтчета;

	КонецЕсли; 

	// Оформление измерений
	ОформлениеДетальныхЗаписей = Неопределено;

	ОформлениеСтроки = Новый Массив;

	ОформлениеСтрокиИерархии = Новый ТаблицаЗначений;
	ОформлениеСтрокиИерархии = Новый Массив;
	
	ТабДокОформлениеИзмерений = МакетОтчета.ПолучитьОбласть("ОформлениеИзмерений");
	
	Для Сч = 1 По ТабДокОформлениеИзмерений.ВысотаТаблицы Цикл
		
		Если не РаскрашиватьИзмерения Тогда
			
			ТабДокОформлениеИзмерений.Область(Сч,2).ЦветФона=Новый Цвет(255,255,255);
			
		КонецЕсли;

		// Нечетные строки - иерархия, четные - измерения
		Если Сч - Цел(Сч/2)*2 = 1 Тогда

			ОформлениеСтроки.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
		Иначе
			ОформлениеСтрокиИерархии.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
		КонецЕсли;
						
	КонецЦикла;

	Если ВыводитьДетальныеЗаписи Тогда
		
		// Удаляем последний цвет из оформлений
		Если ОформлениеСтроки.Количество()>0 Тогда
			ОформлениеСтроки.Удалить(ОформлениеСтроки.ВГраница());
		КонецЕсли;
		Если ОформлениеСтрокиИерархии.Количество()>0 Тогда
			ОформлениеСтрокиИерархии.Удалить(ОформлениеСтрокиИерархии.ВГраница());
		КонецЕсли;
		
		ТабДокОформлениеДеталей = МакетОтчета.ПолучитьОбласть("ОформлениеДеталей");
		
	КонецЕсли; 
	
	// Расшифровки
	ПостроительОтчета.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.Расшифровка;

	ПостроительОтчета.ВыводитьДетальныеЗаписи = ВыводитьДетальныеЗаписи;

    // Добавление необходимого количества строк или колонок для вывода показателей 
	ОбластьСтрока = МакетОтчета.Область("Строка");
	ОбластьСтрокаИерархии = МакетОтчета.Область("СтрокаИерархии");
	ОбластьДетали = МакетОтчета.Область("СтрокаДетали");
	ОбластьОбщиеИтоги = МакетОтчета.Область("ОбщиеИтоги");

	ОбластьКолонкаПоказатель = МакетОтчета.Область("Показатель");

	МассивПоказателей = Новый Массив;
	
	КоличествоПоказателей = 0;
	КоличествоКолонок = 1;
	
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Использование = Истина Тогда

			Если КоличествоПоказателей>0 Тогда

				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.ВставитьОбласть(ОбластьОбщиеИтоги,     ОбластьОбщиеИтоги,     ТипСмещенияТабличногоДокумента.ПоВертикали);
					МакетОтчета.ВставитьОбласть(ОбластьДетали,         ОбластьДетали,         ТипСмещенияТабличногоДокумента.ПоВертикали);
					МакетОтчета.ВставитьОбласть(ОбластьСтрока,         ОбластьСтрока,         ТипСмещенияТабличногоДокумента.ПоВертикали);
					МакетОтчета.ВставитьОбласть(ОбластьСтрокаИерархии, ОбластьСтрокаИерархии, ТипСмещенияТабличногоДокумента.ПоВертикали);

					ОбластьСтрока = МакетОтчета.Область("Строка");
					ОбластьСтрокаИерархии = МакетОтчета.Область("СтрокаИерархии");
					ОбластьДетали = МакетОтчета.Область("СтрокаДетали");
					ОбластьОбщиеИтоги = МакетОтчета.Область("ОбщиеИтоги");
				Иначе
					МакетОтчета.ВставитьОбласть(ОбластьКолонкаПоказатель, ОбластьКолонкаПоказатель, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
					ОбластьКолонкаПоказатель = МакетОтчета.Область("Показатель");
					
				КонецЕсли;
			КонецЕсли;

			КоличествоПоказателей = КоличествоПоказателей+1;

			МассивПоказателей.Добавить(Показатель.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Для отчета без показателей область "Показатель" не нужна
	Если Показатели.Количество() = 0 Тогда
	
		МакетОтчета.УдалитьОбласть(МакетОтчета.Область("Показатель"));
		//ВыводитьПоказателивСтроку = Ложь;
	
	КонецЕсли;

    // Добавление необходимого количества колонок для вывода выбранных полей
    ОбластьПоле = МакетОтчета.Область("Поле");

	ВыводДопРеквизитов = Ложь;

	Если ВыводитьДетальныеЗаписи Тогда

		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда

			ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицыНиз");

		Иначе

			ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицы");

		КонецЕсли; 

		Для Сч=1 По МассивИндексовНезависимыхВыбранныхПолей.Количество()-1 Цикл  // на 1(2) меньше количества полей - одно уже есть
			
			МакетОтчета.ВставитьОбласть(ОбластьПоле,ОбластьПоле,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
			КоличествоКолонок = КоличествоКолонок+1;
			
			ОбластьПоле = МакетОтчета.Область("Поле");
		КонецЦикла;

		// Все поля, которые не подчинены группировкам, будут колонками детальных записей
		Сч = 0;
		Для Каждого Инд ИЗ МассивИндексовНезависимыхВыбранныхПолей Цикл

			// В заголовке колонки детальной записи оставим только название последнего поля
			ЗаголовокКолонки = ПостроительОтчета.ВыбранныеПоля[Инд].Представление;
			
			ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, ". ", "__");
			
			Для Поз = 1 По СтрЧислоВхождений(ЗаголовокКолонки, ".") Цикл
				ЗаголовокКолонки = Сред(ЗаголовокКолонки, Найти(ЗаголовокКолонки,".")+1);
			КонецЦикла;
			
			ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, "__", ". ");
			
			МакетОтчета.Область(ОбластьШапкаТаблицыНиз.Низ,1+1+Сч).Текст = ЗаголовокКолонки;
			
			Сч = Сч+1;
		КонецЦикла; 

		Если ВыводитьПоказателиВСтроку Тогда
			МакетОтчета.Область(ОбластьДетали.Верх,1+1,
								ОбластьДетали.Верх,1+КоличествоКолонок+4*КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		КонецЕсли;

		Сч = 0;
		Для Каждого Инд ИЗ МассивИндексовНезависимыхВыбранныхПолей Цикл

			Поле = ПостроительОтчета.ВыбранныеПоля[Инд];

			ФорматПоляДетальнойЗаписи = "";
			СтруктураФорматаПолей.Свойство(Поле.Имя, ФорматПоляДетальнойЗаписи);
			
			МакетОтчета.Область(ОбластьДетали.Верх,1+1+Сч).Параметр            = Поле.Имя;
			МакетОтчета.Область(ОбластьДетали.Верх,1+1+Сч).ПараметрРасшифровки = Поле.Имя;
			МакетОтчета.Область(ОбластьДетали.Верх,1+1+Сч).Формат              = ФорматПоляДетальнойЗаписи;
			
			Сч = Сч+1;
		КонецЦикла;

		Кол = 0;
		Для Каждого Показатель Из Показатели Цикл

			Если Показатель.Использование = Истина Тогда

				ИмяПоказателя = Показатель.Имя;

				ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;

				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+1,
					                    ОбластьДетали.Верх+Кол,1+КоличествоКолонок+4).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				Иначе
					МакетОтчета.Область(ОбластьДетали.Верх,1+1,
					                    ОбластьДетали.Верх,1+КоличествоКолонок+4*КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				КонецЕсли;

				Если Кол=0 Тогда
					Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

						Если НЕ ВыводитьПоказателиВСтроку Тогда
							Если КоличествоПоказателей>1 Тогда
								МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+1+Инд, 
											ОбластьДетали.Верх+Кол+КоличествоПоказателей-1, 1+1+Инд).Объединить();
							КонецЕсли; 
						КонецЕсли; 

					КонецЦикла;
				КонецЕсли;

				Если НЕ ВыводитьПоказателиВСтроку Тогда

					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+КоличествоКолонок+1).Параметр = ИмяПоказателя;
					МакетОтчета.Область(ОбластьДетали.Верх+Кол,1+КоличествоКолонок+1).Формат= ФорматПоказателя;
				Иначе
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя;
					МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Формат = ФорматПоказателя;
				КонецЕсли;

				Кол = Кол+1;
			КонецЕсли; 

		КонецЦикла; 

		Если НЕ ВыводитьПоказателиВСтроку Тогда
			ПостроительОтчета.МакетДетальныхЗаписей = МакетОтчета.ПолучитьОбласть(ОбластьДетали.Верх, ,ОбластьДетали.Верх+Кол-1);
		Иначе
			ПостроительОтчета.МакетДетальныхЗаписей = МакетОтчета.ПолучитьОбласть(ОбластьДетали.Верх, ,ОбластьДетали.Верх);
		КонецЕсли;
	Иначе

		Если ВыводитьДополнительныеПоляВОтдельнойКолонке Тогда

			// Определим, нужна ли дополнительная колонка для реквизитов измерений
			Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

				Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];
				Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

					Если ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным <> Измерение.ПутьКДанным
						И Найти(ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным, Измерение.ПутьКДанным) >0 Тогда

						ИмяПараметра = ПостроительОтчета.ВыбранныеПоля[Инд].Имя;;

						ВыводДопРеквизитов = Истина;

						Прервать;

					КонецЕсли;

				КонецЦикла;
				Если ВыводДопРеквизитов	Тогда
					МакетОтчета.ВставитьОбласть(ОбластьПоле,ОбластьПоле,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
					КоличествоКолонок = КоличествоКолонок+1;
					ОбластьПоле = МакетОтчета.Область("Поле");
					Прервать;
				КонецЕсли; 
			КонецЦикла;

		КонецЕсли; 

	КонецЕсли; 

	// Если выводятся только итоги или количество колонок =1, увеличим ширину первой колонки 
	Если НЕ ВыводитьДетальныеЗаписи ИЛИ КоличествоКолонок=1 Тогда
		//ОбластьПоле.ШиринаКолонки = ОбластьПоле.ШиринаКолонки*2;
		ОбластьПоле.ШиринаКолонки = 30;
	КонецЕсли; 

	// Формирование макета заголовка отчета
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+4).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+4).Очистить(Истина);
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+4).ПоВыделеннымКолонкам = Истина;
	
	ЗаголовокОтчета = МакетОтчета.ПолучитьОбласть("Заголовок");

	Заголовок = мНазваниеОтчета;
	
	ОписаниеПериода = "на " + Формат(ДатаОтчета, "ДФ=dd.MM.yyyy; ДП=...");
			
	СписокИзмерений = "";
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
	
		СписокИзмерений = СписокИзмерений +", "+ ПостроительОтчета.ИзмеренияСтроки[Сч].Представление
		+" "+ ПостроительОтчета.ИзмеренияСтроки[Сч].ТипИзмерения;
	
	КонецЦикла; 

	СписокКолонок = "";
	СписокПолейДетальныхЗаписей = "";
	Для Сч=0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

		Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

			Если ПостроительОтчета.ВыбранныеПоля[Сч].ПутьКДанным <> ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным
				И Найти(ПостроительОтчета.ВыбранныеПоля[Сч].ПутьКДанным, ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным) >0 Тогда
		
				СписокКолонок = СписокКолонок +", "+ ПостроительОтчета.ВыбранныеПоля[Сч].Представление;
			КонецЕсли;

		КонецЦикла;
		Если ВыводитьДетальныеЗаписи Тогда
		
			СписокПолейДетальныхЗаписей = СписокПолейДетальныхЗаписей +", "+ ПостроительОтчета.ВыбранныеПоля[Сч].Представление;
		
		КонецЕсли; 
		
	КонецЦикла;

	СписокПоказателей = "";
	Для Сч=0 По Показатели.Количество()-1 Цикл

		Если Показатели[Сч].Использование Тогда
		
			СписокПоказателей = СписокПоказателей +", "+ Показатели[Сч].Представление;
		
		КонецЕсли; 
	
	КонецЦикла; 

	СписокОтбор = "";
	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

		Если ПостроительОтчета.Отбор[Сч].Использование И Не ПостроительОтчета.Отбор[Сч].Имя = "Периодичность" Тогда

			СписокОтбор = СписокОтбор +", "+ ПостроительОтчета.Отбор[Сч].Представление 
			+" "+ ПостроительОтчета.Отбор[Сч].ВидСравнения +" "+ ПостроительОтчета.Отбор[Сч].Значение;

		КонецЕсли; 
	
	КонецЦикла; 

	ЗаголовокОтчета.Параметры.ЗаголовокОтчета = Заголовок;
	ЗаголовокОтчета.Параметры.Период     = "Период: "+ОписаниеПериода;
	ЗаголовокОтчета.Параметры.Измерения  = "Итоги по: "+Сред(СписокИзмерений,2);
	ЗаголовокОтчета.Параметры.Показатели = "Показатели: " +Сред(СписокПоказателей,2);
	ЗаголовокОтчета.Параметры.Колонки = 
	?((ПостроительОтчета.ИзмеренияСтроки.Количество()>0 И Не ПустаяСтрока(СписокКолонок)), "Дополнительные поля: "+ Сред(СписокКолонок, 2)+" ", "") 
	+ ?(ВыводитьДетальныеЗаписи, "Поля детальных записей: "+Сред(СписокПолейДетальныхЗаписей, 2),"");
	ЗаголовокОтчета.Параметры.Отбор      = "Отбор:"    +Сред(СписокОтбор,2);
	
	ПостроительОтчета.МакетЗаголовкаОтчета = ЗаголовокОтчета;

	// Параметр для показа заголовка
	ВысотаЗаголовка = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда

		ДокументРезультат.Вывести(ЗаголовокОтчета);

		Возврат;
	
	КонецЕсли; 
	
	// Назначение имен колонкам шапки
	
	ОбластьШапкаТаблицы = МакетОтчета.Область("ШапкаТаблицы");
	ОбластьШапкаТаблицыНиз = МакетОтчета.Область("ШапкаТаблицыНиз");

	Если ВыводитьПоказателиВСтроку Тогда

		
		Кол =0 ;
		Для Каждого Показатель Из Показатели Цикл
			Если Показатель.Использование = Истина Тогда
				Стр = мТаблицаПоказатели.Найти(Показатель.Имя);
				Если Стр <> Неопределено Тогда
					Представление = Стр.ПредставлениеПоля;
				Иначе
					Представление = Показатель.Имя;
				КонецЕсли;
				МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Текст = Представление;

				Кол=Кол+1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;


	// Назначение, корректировка макетов измерений
	Сдвиг = Макс(ОформлениеСтроки.Количество()-ПостроительОтчета.ИзмеренияСтроки.Количество(),0);

	// Структура, определяющая вывод показателей
	СтруктураВыводаПоказателей = Новый Структура;

	Если НЕ ВыводитьИтогиПоВсемУровням Тогда

		СтруктураФлагов = Новый Структура;

		СтруктураОтборНаРавенствоПоСвязанномуИзмерению = Новый Структура;

		// Перенесем отбор в таблицу для поиска
		ТабОтбор = Новый ТаблицаЗначений;
		ТабОтбор.Колонки.Добавить("Имя");
		ТабОтбор.Колонки.Добавить("ВидСравнения");
		ТабОтбор.Колонки.Добавить("Значение");

		Для каждого Элемент Из ПостроительОтчета.Отбор Цикл

			Если Элемент.Использование Тогда

				НоваяСтрока = ТабОтбор.Добавить();
				НоваяСтрока.Имя = Элемент.Имя;
				НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
				НоваяСтрока.Значение = Элемент.Значение;

			КонецЕсли;

		КонецЦикла; 

		Для Каждого Показатель Из Показатели Цикл

			// Сбрасываем флаги
			СтруктураФлагов.Вставить(Показатель.Имя, Ложь);
			СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Вставить(Показатель.Имя, Ложь);

			// Поищем, есть ли отбор на равенство по связанному измерению. Если есть, то показатель можно выводить
			// по всем уровням.
			СвязанныеИзмерения = Неопределено;
			Если мСтруктураСвязиПоказателейИИзмерений.Свойство(Показатель.Имя, СвязанныеИзмерения) Тогда
				
				Если СвязанныеИзмерения <> Неопределено Тогда
					
					Для каждого СвязанноеИзмерение Из СвязанныеИзмерения Цикл
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Имя",СвязанноеИзмерение.Ключ);
						
						НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);
						
						Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл
							
							// Не добавляем измерения по отборам на равенство - в них будет один элемент
							Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
								
								СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Вставить(Показатель.Имя, Истина);
								Прервать;
								
								// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
								// или плана видов характеристик - в них будет один элемент
							ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
								ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
								
								Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
									ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;
									
									МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));
									
									Если МетаданныеОбъекта<>Неопределено Тогда
										Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
											ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда
											
											Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда
												
												// Этот отбор тоже можно считать отбором на равенство
												СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Вставить(Показатель.Имя, Истина);
												Прервать;
												
											КонецЕсли; 
										КонецЕсли; 
									КонецЕсли; 
									
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтруктураОтборНаРавенствоПоСвязанномуИзмерению[Показатель.Имя] Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла; 
					
				КонецЕсли;
			КонецЕсли;

			// Если в колонках выводятся измерения, связанные с показателем, то устанавливаем флаги
			Для Инд = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
				ИзмерениеКолонки = ПостроительОтчета.ИзмеренияКолонки[Инд];
				
				СвязанныеИзмерения = Неопределено;
				мСтруктураСвязиПоказателейИИзмерений.Свойство(Показатель.Имя, СвязанныеИзмерения);
				
				Если СвязанныеИзмерения <> Неопределено Тогда
					
					Если СвязанныеИзмерения.Свойство(ИзмерениеКолонки.Имя) Тогда
						
						СтруктураФлагов.Вставить(Показатель.Имя, Истина);
						
					КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;

	КонецЕсли;

	ИспользоватьОформление = Истина;

	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];

		Если ОформлениеСтроки.Количество()>0 Тогда
			Индекс = Сдвиг+((Сч) - (ОформлениеСтроки.Количество()-Сдвиг)*Цел((Сч)/(ОформлениеСтроки.Количество()-Сдвиг)));
		Иначе
			ИспользоватьОформление = Ложь;
		КонецЕсли;;

		ФорматПоля = "";
		СтруктураФорматаПолей.Свойство(Измерение.Имя, ФорматПоля);
		
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1,
							ОбластьСтрока.Верх,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей,1)).Заполнение = 
							ТипЗаполненияОбластиТабличногоДокумента.Параметр;

		// Первая колонка имеет для элементов стандартную расшифровку
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).ПараметрРасшифровки = Измерение.Имя;	
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).ПараметрРасшифровки = Измерение.Имя;
		
		Если ВыводитьДополнительныеПоляВОтдельнойКолонке Тогда

			МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Параметр = Измерение.Имя;

			МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Формат= ФорматПоля;
		КонецЕсли;

		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Отступ = Сч;

		Если ИспользоватьОформление Тогда

			Область = МакетОтчета.Область(ОбластьСтрока.Верх,1+1,
										  ОбластьСтрока.Верх,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей,1));

			Область.ЦветФона   = ОформлениеСтроки[Индекс].ЦветФона;
			Область.ЦветТекста = ОформлениеСтроки[Индекс].ЦветТекста;
						
		КонецЕсли;


		Если ИспользоватьОформление Тогда
			Область = МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,
										  ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку,КоличествоПоказателей,1));
		
			Область.ЦветФона   = ОформлениеСтрокиИерархии[Индекс].ЦветФона;
			Область.ЦветТекста = ОформлениеСтрокиИерархии[Индекс].ЦветТекста;
					
		КонецЕсли;

		// Объединение области измерения, если выводится несколько показателей, или колонок детальных записей
		Если ВыводитьДетальныеЗаписи Тогда
			Если КоличествоКолонок>1 ИЛИ КоличествоПоказателей>1 Тогда
				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1, 
					ОбластьСтрока.Верх+КоличествоПоказателей-1, 1+КоличествоКолонок).Объединить();
				Иначе
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1, 
					ОбластьСтрока.Верх,1+КоличествоКолонок).Объединить();
				КонецЕсли; 

			КонецЕсли;
		Иначе
			Если КоличествоПоказателей>1 Тогда
				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.Область(ОбластьСтрока.Верх,1+1, 
					ОбластьСтрока.Верх+КоличествоПоказателей-1, 1+1).Объединить();
				КонецЕсли;

				Если КоличествоКолонок=2 Тогда // колонка с дополнительным реквизитом
					Если НЕ ВыводитьПоказателиВСтроку Тогда
						МакетОтчета.Область(ОбластьСтрока.Верх,1+2, 
						ОбластьСтрока.Верх+КоличествоПоказателей-1, 1+2).Объединить();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;

		// Вывод дополнительных реквизитов рядом со значением измерения
		Если ВыводитьДополнительныеПоляВОтдельнойКолонке Тогда
			
			Если ВыводДопРеквизитов Тогда
				ИмяПараметра = "";

				Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

					Если ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным <> Измерение.ПутьКДанным
						И Найти(ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным, Измерение.ПутьКДанным) >0 Тогда

						ИмяПараметра = ПостроительОтчета.ВыбранныеПоля[Инд].Имя;

						ФорматПоляРеквизита = "";
						СтруктураФорматаПолей.Свойство(Измерение.Имя, ФорматПоляРеквизита);

					КонецЕсли;

				КонецЦикла;

				МакетОтчета.Область(ОбластьСтрока.Верх,1+1+1).Параметр = ИмяПараметра;
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1+1).Формат = ФорматПоляРеквизита;
			КонецЕсли;
		Иначе
		
			Шаблон = "["+Измерение.Имя+"]";

			ВсегоВЯчейке=1;
			Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

				Если ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным <> Измерение.ПутьКДанным
					И Найти(ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным, Измерение.ПутьКДанным) >0 Тогда

					Шаблон = Шаблон + ", [" + ПостроительОтчета.ВыбранныеПоля[Инд].Имя+"]";
					ВсегоВЯчейке = ВсегоВЯчейке+1;

				КонецЕсли;

			КонецЦикла;

			Если ВсегоВЯчейке>1 Тогда
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон; 
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Текст = Шаблон;

			Иначе // Выводим через параметр
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр; 
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Параметр = Измерение.Имя;
				МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Формат= ФорматПоля;
			КонецЕсли; 

		КонецЕсли; 

		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,
							ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+
							?(ВыводитьПоказателиВСтроку,КоличествоПоказателей,1)).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).Параметр = Измерение.Имя;


		Если КоличествоКолонок>1 ИЛИ КоличествоПоказателей>1 Тогда
			Если Не ВыводитьПоказателиВСтроку Тогда
				МакетОтчета.Область(ОбластьСтрокаИерархии.Верх, 1+1, 
									ОбластьСтрокаИерархии.Верх+КоличествоПоказателей-1, 1+КоличествоКолонок).Объединить();
			Иначе
				МакетОтчета.Область(ОбластьСтрокаИерархии.Верх, 1+1, 
									ОбластьСтрокаИерархии.Верх, 1+КоличествоКолонок).Объединить();
			КонецЕсли;
		КонецЕсли; 

		Кол = 0;
		
		Для Каждого Показатель Из Показатели Цикл

			Если Показатель.Использование = Истина Тогда

				ИмяПоказателя = Показатель.Имя;

				ФорматПоказателя = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;


				// Ограничение вывода показателей по уровням группировки задается значением ВыводитьИтогиПоВсемУровням
				// По умолчанию, если ВыводитьИтогиПоВсемУровням=Ложь или для показателя не задан ключ, то он выводится.
				ВыводитьПоказатель = Истина;
				ВыводитьПоказательПоИерархии = Истина;

				Если НЕ ВыводитьИтогиПоВсемУровням Тогда

					СвязанныеИзмерения = Неопределено;
					Если мСтруктураСвязиПоказателейИИзмерений.Свойство(Показатель.Имя, СвязанныеИзмерения) Тогда
						
						Если СвязанныеИзмерения <> Неопределено Тогда
							
							// Поищем в структуре отбора на равенство по связанному измерению
							ВыводитьПоВсем = Ложь;
							СтруктураОтборНаРавенствоПоСвязанномуИзмерению.Свойство(Показатель.Имя, ВыводитьПоВсем);
							
							// Если нет связи, или отбор
							Если СвязанныеИзмерения.Количество()=0 
								ИЛИ ВыводитьПоВсем = Истина Тогда
								
								// Взводим флаг вывода данного показателя
								СтруктураФлагов[Показатель.Имя]=Истина;
								ВыводитьПоказательПоИерархии = Истина;
								
								// Если это связанное измерение
							ИначеЕсли СвязанныеИзмерения.Свойство(Измерение.Имя) Тогда
								
								// Взводим флаг вывода данного показателя
								СтруктураФлагов[Показатель.Имя]=Истина;
								ВыводитьПоказательПоИерархии = Ложь;
								
							Иначе
								ВыводитьПоказательПоИерархии = СтруктураФлагов[Показатель.Имя];
							КонецЕсли;
							
							ВыводитьПоказатель = СтруктураФлагов[Показатель.Имя];
							
						КонецЕсли;
						
					КонецЕсли;

				КонецЕсли;

				Если НЕ ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+1+1,
										ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+1+1,
										ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

					Если ИспользоватьОформление Тогда

						// Устанавливаем оформление для строк показателей
						Область = МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+1+1,
													ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1);
						//Область.Шрифт      = ОформлениеСтроки[Индекс].Шрифт;
						Область.ЦветФона   = ОформлениеСтроки[Индекс].ЦветФона;
						Область.ЦветТекста = ОформлениеСтроки[Индекс].ЦветТекста;
						//Область.Узор       = ОформлениеСтроки[Индекс].Узор;
						//Область.ЦветУзора  = ОформлениеСтроки[Индекс].ЦветУзора;

						Область = МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+1+1,
													ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1);
						//Область.Шрифт      = ОформлениеСтроки[Индекс].Шрифт;
						Область.ЦветФона   = ОформлениеСтроки[Индекс].ЦветФона;
						Область.ЦветТекста = ОформлениеСтроки[Индекс].ЦветТекста;
						//Область.Узор       = ОформлениеСтроки[Индекс].Узор;
						//Область.ЦветУзора  = ОформлениеСтроки[Индекс].ЦветУзора;
					КонецЕсли;
				КонецЕсли;

				
				Если Не ВыводитьПоказателиВСтроку Тогда
					
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1).Параметр = ИмяПоказателя;
					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1).ПараметрРасшифровки = "Расшифровка";

					МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1).Формат= ФорматПоказателя;

					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказатель Тогда
					
						МакетОтчета.Область(ОбластьСтрока.Верх+Кол,1+КоличествоКолонок+1).Очистить(Истина);
					
					КонецЕсли; 
				Иначе
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя;
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).ПараметрРасшифровки = "Расшифровка";
					МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
					
					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказатель Тогда
						
						МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Очистить(Истина);
						
					КонецЕсли;
					
				КонецЕсли;

				Если Не ВыводитьПоказателиВСтроку Тогда
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1).Параметр = ИмяПоказателя;
                    МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1).ПараметрРасшифровки="Расшифровка";
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1).Формат= ФорматПоказателя;

					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказательПоИерархии Тогда
						МакетОтчета.Область(ОбластьСтрокаИерархии.Верх+Кол,1+КоличествоКолонок+1).Очистить(Истина);
					КонецЕсли;
					
				Иначе
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Параметр = ИмяПоказателя;
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Формат= ФорматПоказателя;
					МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).ПараметрРасшифровки= "Расшифровка";

					Если НЕ ВыводитьИтогиПоВсемУровням И Не ВыводитьПоказательПоИерархии Тогда
						МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+1+0*КоличествоПоказателей+Кол).Очистить(Истина);
					КонецЕсли;
				КонецЕсли;

				Кол = Кол+1;
			КонецЕсли; 

		КонецЦикла; 

		Если Не ВыводитьПоказателиВСтроку Тогда
			Измерение.Макет = МакетОтчета.ПолучитьОбласть(ОбластьСтрока.Верх, , ОбластьСтрока.Верх+Кол-1);

			Измерение.МакетИерархии = МакетОтчета.ПолучитьОбласть(ОбластьСтрокаИерархии.Верх, , ОбластьСтрокаИерархии.Верх+Кол-1);
		Иначе
			Измерение.Макет = МакетОтчета.ПолучитьОбласть(ОбластьСтрока.Верх, , ОбластьСтрока.Верх);

			Измерение.МакетИерархии = МакетОтчета.ПолучитьОбласть(ОбластьСтрокаИерархии.Верх, , ОбластьСтрокаИерархии.Верх);
		КонецЕсли;

	КонецЦикла;

	// Макет из двух строк используется только при выводе и измерений и детальных записей
	Если ВыводитьДетальныеЗаписи И ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда
		МакетШапкиТаблицы = МакетОтчета.ПолучитьОбласть("ШапкаТаблицыОбщая");
	Иначе
		МакетШапкиТаблицы = МакетОтчета.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;

	Если Не ВыводитьПоказателиВСтроку Тогда

		ПостроительОтчета.МакетОбщихИтогов = МакетОтчета.ПолучитьОбласть(ОбластьОбщиеИтоги.Верх, , ОбластьОбщиеИтоги.Верх+Кол-1);

	Иначе

		ПостроительОтчета.МакетОбщихИтогов = МакетОтчета.ПолучитьОбласть(ОбластьОбщиеИтоги.Верх, , ОбластьОбщиеИтоги.Верх);

	КонецЕсли; 
	
	// Отчет без показателей выводится без итогов
	Если Показатели.Количество()=0 Тогда
	
		ПостроительОтчета.МакетОбщихИтогов = Новый ТабличныйДокумент;
	
	КонецЕсли; 

	// Заголовок первой колонки
	Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда

		// В заголовке колонки детальной записи оставим только название последнего поля
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияСтроки[ПостроительОтчета.ИзмеренияСтроки.Количество()-1].Представление;
			
		ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, ". ", "__");
		
		Для Поз = 1 По СтрЧислоВхождений(ЗаголовокКолонки, ".") Цикл
			ЗаголовокКолонки = Сред(ЗаголовокКолонки, Найти(ЗаголовокКолонки,".")+1);
		КонецЦикла;
		
		ЗаголовокКолонки = СтрЗаменить(ЗаголовокКолонки, "__", ". ");
		
		МакетШапкиТаблицы.Область(2,1+1).Текст = ЗаголовокКолонки;

	ИначеЕсли НЕ ВыводитьДетальныеЗаписи Тогда
		МакетШапкиТаблицы.Область(2,1+1).Текст = "Общий итог";
	КонецЕсли; 

	ПостроительОтчета.МакетПодвалаТаблицы = МакетОтчета.ПолучитьОбласть("Подвал");

	// Объединение ячеек в шапке
	Если Не ВыводитьДетальныеЗаписи Тогда
		
		Если КоличествоКолонок>1 Тогда
			МакетШапкиТаблицы.Область(2, 1+1,
			2, 1+КоличествоКолонок).Объединить();
		КонецЕсли; 
		
	Иначе

		// Объединение заголовков производится, если выводится шапка в две строки
		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 И ВыводитьПоказателиВСтроку Тогда
			Для Кол = 1 По КоличествоПоказателей  Цикл
				МакетШапкиТаблицы.Область(2, 1+КоличествоКолонок+Кол, 3, 1+КоличествоКолонок+Кол).Объединить();
			КонецЦикла;
		КонецЕсли;
		
		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда

			// Объединение ячеек, в которых выводится название измерения, сверху от ячеек с полями детальных записей
			Если КоличествоКолонок>1 Тогда
				МакетШапкиТаблицы.Область(2, 1+1,
				2, 1+КоличествоКолонок).Объединить();
			КонецЕсли; 

		КонецЕсли; 
	КонецЕсли;

	// Объединение ячеек заголовка показателя если выводятся измерения и детальные записи
	Если ВыводитьДетальныеЗаписи И НЕ ВыводитьПоказателиВСтроку 
		И НЕ ПостроительОтчета.ИзмеренияСтроки.Количество()=0 Тогда
		
		МакетШапкиТаблицы.Область(2, 1+КоличествоКолонок+1,3, 1+КоличествоКолонок+1).Объединить();
	КонецЕсли;

	// Шапка таблицы имеет внизу границу той же линией, что и вверху
	ШиринаТаблицы = 1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1);
	МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2, 
							  МакетШапкиТаблицы.ВысотаТаблицы, ШиринаТаблицы).ГраницаСнизу =
	Новый Линия(
	МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.ТипЛинии, 
	МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.Толщина);

	// Линия в заголовке таблицы, когда выводится несколько колонок
	Если КоличествоКолонок>1 И ВыводитьДетальныеЗаписи Тогда
		ЛинияНетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии,0);
		ЛинияТонкаяЛиния = 
		Новый Линия(
		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок).ГраницаСправа.ТипЛинии,
		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок).ГраницаСправа.Толщина);

		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2+1, МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок).ГраницаСлева = ЛинияТонкаяЛиния;
		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2,   МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок-1).ГраницаСправа = ЛинияНетЛинии;
	КонецЕсли;

	// Назначим построителю сформированный макет шапки
	ПостроительОтчета.МакетШапкиТаблицы = МакетШапкиТаблицы;

	// Подвал отчета не выводится
	ПостроительОтчета.ВыводитьПодвалОтчета = Ложь;
	ПостроительОтчета.ВыводитьОбщиеИтоги=Ложь;
	
	// Вывод в макет
	ПостроительОтчета.Выполнить();

	ДокументРезультат.Очистить();
	
	// Если заданы невыводимые группировки мСтруктураНевыводимыхГруппировок, нужно изменить макет
	ДокументРезультат.ОтображатьГруппировки = Истина;
	
	СтруктураПропускаемыеГруппировки = Новый Структура;
	
	Для ИндексГруппировки = 1 По ПостроительОтчета.ИзмеренияСтроки.Количество() Цикл
		
		Инд = ПостроительОтчета.ИзмеренияСтроки.Количество() - ИндексГруппировки;
		
		Если мСтруктураНевыводимыхГруппировок.Свойство(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя) Тогда
			
			//1. Проверяем, есть ли в отчете группировка, куда надо вывести эту
			ДругаяГруппировка = Неопределено;
			мСтруктураНевыводимыхГруппировок.Свойство(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя, ДругаяГруппировка);
			
			// Это структура
			Для Инд1 = 1 По ПостроительОтчета.ИзмеренияСтроки.Количество() Цикл
				ИндексИзмерения = ПостроительОтчета.ИзмеренияСтроки.Количество() - Инд1;
				Если ДругаяГруппировка.Свойство(ПостроительОтчета.ИзмеренияСтроки[ИндексИзмерения].Имя) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Инд1 = ПостроительОтчета.ИзмеренияСтроки.Количество() Тогда
				// Если не найдено
				Продолжить;
				
			КонецЕсли;
			
			Если ИндексИзмерения <= Инд Тогда
				
				// Это чтобы вставлять только в самое нижнее
				Продолжить;
				
			КонецЕсли;
			
			СтруктураПропускаемыеГруппировки.Вставить(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);
			
			МакетИзмеренияВКотороеДобавляемЭто = ПостроительОтчета.ИзмеренияСтроки[ИндексИзмерения].Макет;
			Если МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Заполнение <> ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст = "["+МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст+"]";
			КонецЕсли;
			
			Если ПостроительОтчета.ИзмеренияСтроки[Инд].Макет.Область(1, 2).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст = ПостроительОтчета.ИзмеренияСтроки[Инд].Макет.Область(1, 2).Текст + ", "+
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст;
			Иначе
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст = "["+ ПостроительОтчета.ИзмеренияСтроки[Инд].Имя+ "], "+
				МакетИзмеренияВКотороеДобавляемЭто.Область(1, 2).Текст;
			КонецЕсли;
			
			ПостроительОтчета.ИзмеренияСтроки[ИндексИзмерения].Макет = МакетИзмеренияВКотороеДобавляемЭто;
			
			ПостроительОтчета.ИзмеренияСтроки[Инд].Макет = Новый ТабличныйДокумент;
			//ПостроительОтчета.ИзмеренияСтроки[Инд].МакетИерархии = Новый ТабличныйДокумент;
			
			МакетПостроителя = ПостроительОтчета.Макет;
			Если ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия ИЛИ ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения = ТипИзмеренияПостроителяОтчета.Элементы Тогда
				МакетПостроителя.УдалитьОбласть(МакетПостроителя.Область(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя), ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
			Если ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия ИЛИ ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения = ТипИзмеренияПостроителяОтчета.ТолькоИерархия Тогда
				МакетПостроителя.УдалитьОбласть(МакетПостроителя.Область(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя+"Иерархия"), ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
			
			ДокументРезультат.ОтображатьГруппировки = Ложь;
			
			ПостроительОтчета.Макет = МакетПостроителя;

		КонецЕсли;
		
	КонецЦикла;
	
	// Пропускаемые группировки колонок: итог по ни не выводится (кроме последнего)
	Для Инд = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество() - 2 Цикл
		Если мСтруктураНевыводимыхГруппировок.Свойство(ПостроительОтчета.ИзмеренияКолонки[Инд].Имя) Тогда
			
			СтруктураПропускаемыеГруппировки.Вставить(ПостроительОтчета.ИзмеренияКолонки[Инд].Имя);
			
		КонецЕсли;
	КонецЦикла;
		
	// Структура общих передаваемых параметров
	СтруктураПараметров = Новый Структура;
	
	// Структура, содержащая список группировок, которые нужно пропустить при обходе.
	СтруктураПараметров.Вставить("СтруктураПропускаемыеГруппировки", СтруктураПропускаемыеГруппировки);
	СтруктураПараметров.Вставить("ПропущеноГруппировок",0);
		
	// Отдельно обрабатываются случаи, когда нет измерений колонки, и когда они есть
	Если ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 Тогда

		ПостроительОтчета.Вывести(ДокументРезультат);
		
		// Ширина таблицы
		ШиринаТаблицы = 1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1);
		
		// Вывод кросс-таблицы
	Иначе

		ПостроительОтчета.АвтоДетальныеЗаписи = Ложь;
		ПостроительОтчета.ВыводитьДетальныеЗаписи = Ложь;

		СтруктураПараметров.Вставить("КоличествоКолонок", КоличествоКолонок);
		СтруктураПараметров.Вставить("КоличествоПоказателей", КоличествоПоказателей);
		СтруктураПараметров.Вставить("СтруктураФорматаПолей", СтруктураФорматаПолей);
		СтруктураПараметров.Вставить("ВысотаЗаголовка", ВысотаЗаголовка);

		// Имя первого измерения колонки
		СтруктураПараметров.Вставить("ПервоеИзмерениеКолонкиИмя", ПостроительОтчета.ИзмеренияКолонки[0].Имя);

		РезультатЗапроса = ПостроительОтчета.Результат;

		// 1. Вывод заголовка отчета
		ДокументРезультат.Вывести(ПостроительОтчета.МакетЗаголовкаОтчета);
		
		ШапкаТаблицы = ПостроительОтчета.МакетШапкиТаблицы;

		// Если показатели выводятся в строку, то нужно добавить на одну строку меньше
		Линия1 = ШапкаТаблицы.Область(ШапкаТаблицы.ВысотаТаблицы, 1+КоличествоКолонок+1).ГраницаСлева;
		ИсхШиринаТаблицы = 1+ КоличествоКолонок + ?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1);
		ДобавленоСтрок = 0;
		
		Для Сч=1 По ПостроительОтчета.ИзмеренияКолонки.Количество()
			- ?(ВыводитьПоказателиВСтроку, 0, 1) Цикл
			
			Если НЕ СтруктураПропускаемыеГруппировки.Свойство(ПостроительОтчета.ИзмеренияКолонки[Сч-1].Имя) Тогда
				
				ШапкаТаблицыСтрока = ПостроительОтчета.МакетШапкиТаблицы.Область("ШапкаТаблицыСтрока");
				ШапкаТаблицы.ВставитьОбласть(ШапкаТаблицыСтрока,,ТипСмещенияТабличногоДокумента.ПоВертикали);
				
				// Горизонтальные линии внутри - тонкие
				ШапкаТаблицы.Область(ШапкаТаблицы.ВысотаТаблицы, 2, ШапкаТаблицы.ВысотаТаблицы, 1+ИсхШиринаТаблицы).ГраницаСверху = Линия1;
				ШапкаТаблицы.Область(ШапкаТаблицы.ВысотаТаблицы-1, 2, ШапкаТаблицы.ВысотаТаблицы-1, 1+ИсхШиринаТаблицы).ГраницаСнизу = Линия1;
				
				ДобавленоСтрок = ДобавленоСтрок+1;
				
			КонецЕсли;
			
		КонецЦикла; 

		// Объединение ячеек в начале шапки
		ШапкаТаблицы.Область(2, 2, 2+ДобавленоСтрок,1+КоличествоКолонок).Объединить();


		// 2. Вывод шапки таблицы
		ОбластьНачалоШапкиТаблицы = ШапкаТаблицы.ПолучитьОбласть(1,1,ШапкаТаблицы.ВысотаТаблицы,1+КоличествоКолонок);

		Обл = ДокументРезультат.Вывести(ОбластьНачалоШапкиТаблицы);
		
		// Нач. колонка для следующей группировки
		СтруктураПараметров.Вставить("НачКолонка", Обл.Право+1);
		
		// В специальном параметре будет сохраняться правая ячейка
		СтруктураПараметров.Вставить("КонКолонка", Обл.Право+1);

		МакетКолонкаШапки = МакетШапкиТаблицы.ПолучитьОбласть(1,1+КоличествоКолонок+1,ШапкаТаблицы.ВысотаТаблицы,1+КоличествоКолонок+?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1));

		СтруктураПараметров.Вставить("ГраницаКолонки", Новый Линия(ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.ТипЛинии, ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.Толщина));
		
		СтруктураПараметров.Вставить("МакетКолонкаШапки", МакетКолонкаШапки);
		
		ДокументРезультат.НачатьАвтогруппировкуКолонок();

		// Здесь количество колонок показателей
		СтруктураПараметров.Вставить("КоличествоКолонокПоказателей", 0);

		// Здесь количество значений в группировках колонок
		СтруктураПараметров.Вставить("КоличествоКолонокГруппировок", 0);

		// Дерево значений, представляющее набор и порядок значений измерений колонкок отчета. Заполняется при выводе шапки 
		// и в дальнейшем определяет последовательность вывода ячеек с со значениями показателей при выводе строк.
		ДеревоКолонкиОтчета = Новый ДеревоЗначений;
		ДеревоКолонкиОтчета.Колонки.Добавить("Значение");
		ДеревоКолонкиОтчета.Колонки.Добавить("ИмяИзмерения");
		
		ВывестиКолонкуШапки(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[0].Имя, "Все"), 0, СтруктураПараметров, ДокументРезультат, ДеревоКолонкиОтчета, Новый Структура);

		ДокументРезультат.ЗакончитьАвтогруппировкуКолонок();
		
		// Вывод колонки для общего итога

		// Если выводятся имена показателей, то их не очищаем
		Если Не ВыводитьПоказателиВСтроку Тогда

			МакетКолонкаШапки.Область().Очистить(Истина);
		Иначе

			МакетКолонкаШапки.Область(1,1,СтруктураПараметров.МакетКолонкаШапки.ВысотаТаблицы-1,СтруктураПараметров.МакетКолонкаШапки.ШиринаТаблицы).Очистить(Истина);

		КонецЕсли; 

		// Последовательность и значения колонок в шапке, как они заданы в ДеревоКолонкиОтчета, будут
		// использоваться для вывода строк по следующим причинам:
		// - При построении шапки обходятся все значения всех измерений колонки в правильном порядке
		// - На каждом уровне присутствуют не все значения из значений измерений колонки,
		// - Сортировка по агрегатной функции приводит к порядку выборки измерений, отличному от порядка в шапке
		
		СтруктураПараметров.Вставить("ДеревоКолонкиОтчета", ДеревоКолонкиОтчета);

		СтруктураПараметров.Вставить("СтруктураФлаговПоказателейОбщие", СтруктураФлагов);

		// Массив, содержащий отмеченные показатели
		СтруктураПараметров.Вставить("Показатели", МассивПоказателей);

		// Общие итоги добавляются всегда, даже если выборка пустая - нет данных
		СтруктураПараметров.Вставить("СоответствиеПоказателейОбщие", Новый Соответствие);
		
		// 3. Вывод самой таблицы
		Если ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Тогда
			
			ДокументРезультат.НачатьАвтогруппировкуСтрок();

			ВывестиСтроку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияСтроки[0].Имя), 0, СтруктураПараметров, ДокументРезультат, Новый Структура);

			ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
			
		КонецЕсли;
			
		// Ширина таблицы:
		
		ШиринаТаблицы = 1+КоличествоКолонок + СтруктураПараметров.КоличествоКолонокПоказателей * ?(ВыводитьПоказателиВСтроку, КоличествоПоказателей, 1);
		
		// Зафиксируем колонки слева
		ДокументРезультат.ФиксацияСлева = 1+КоличествоКолонок;

		// Снизу граница той же линией, что и слева в шапке таблицы
		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
		                          ДокументРезультат.ВысотаТаблицы, 
								  ШиринаТаблицы).ГраницаСнизу =
		Новый Линия(ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.ТипЛинии, ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.Толщина);
			
	КонецЕсли;

	// Управление заголовком
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	// Обводим таблицу той же линией, что и слева в шапке таблицы
	ЛинияГраницы = Новый Линия(ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.ТипЛинии, ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева.Толщина);
	
	ДокументРезультат.Область(ВысотаЗаголовка+2, 
	                          2, 
							  ДокументРезультат.ВысотаТаблицы-?(ПостроительОтчета.ИзмеренияКолонки.Количество()=0, 1, 0), 
							  ШиринаТаблицы).Обвести(ЛинияГраницы, ЛинияГраницы, ЛинияГраницы, ЛинияГраницы);
	// Фиксация шапки
	ДокументРезультат.ФиксацияСверху = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы + ПостроительОтчета.МакетШапкиТаблицы.ВысотаТаблицы;

	// Восстановление ширин колонок
	Если ТипЗнч(мМассивШиринКолонок) = Тип("Массив") Тогда
		Если мМассивШиринКолонок.Количество() = ШиринаТаблицы Тогда
			Инд = 0;
			Для Каждого Элемент Из мМассивШиринКолонок Цикл
				ДокументРезультат.Область(,1+Инд, , 1+Инд).ШиринаКолонки = Элемент;
				Инд = Инд+1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерКолонкиПериод>0 Тогда
		ПостроительОтчета.ИзмеренияКолонки.Удалить(ПостроительОтчета.ИзмеренияКолонки[НомерКолонкиПериод-1]);
	ИначеЕсли НомерСтрокиПериод>0 Тогда
		ПостроительОтчета.ИзмеренияСтроки.Удалить(ПостроительОтчета.ИзмеренияСтроки[НомерСтрокиПериод-1]);
	КонецЕсли;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "КонтролируемыеЗначенияПоБюджетам";

КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ПостроительОтчета;

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет для параметрического вызова
//
// Параметры
//  СтруктураПараметров  – Структура, Соответсвие – содержит список параметров:
//	ДатаНач,
//	ДатаКон,
//	ИмяРегистра,
//	ЗаполнитьПоУмолчанию,
//	ПоказыватьЗаголовок,
//	ВыводитьПоказателиВСтроку,
//	ВыводитьИтогиПоВсемУровням,
//	ВыводитьДополнительныеПолявОтдельнойКолонке,
//	РаскрашиватьИзмерения
//	ГруппировкиСтрок  - структура или соответсвие,
//	ГруппировкиКолонок- структура или соответствие,
//	Показатели - таблица значений,
//	Отбор - структура или соответсвие
//
Процедура Настроить(СтруктураПараметров, ЗаполняемыйОбъект = Неопределено) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 

	ДатаОтчета= Параметры["ДатаОтчета"];
	
	// Это свойство влияет на заполнение	
	Сценарий = Параметры["Сценарий"];
	ВидКонтролируемыхЗначений = Параметры["ВидКонтролируемыхЗначений"];
	ИспользованиеКонтролируемыхЗначений = Параметры["ИспользованиеКонтролируемыхЗначений"];
	
	// Прочие свойства
	ПоказыватьЗаголовок        = Параметры["ПоказыватьЗаголовок"];
	ВыводитьПоказателиВСтроку  = Параметры["ВыводитьПоказателиВСтроку"];
	ВыводитьИтогиПоВсемУровням = Параметры["ВыводитьИтогиПоВсемУровням"];
	ВыводитьДополнительныеПолявОтдельнойКолонке = Параметры["ВыводитьДополнительныеПолявОтдельнойКолонке"];
	РаскрашиватьИзмерения      = Параметры["РаскрашиватьИзмерения"];
	
	Если ЗаполняемыйОбъект = Неопределено Тогда
		ЗаполняемыйОбъект = ЭтотОбъект;
	КонецЕсли;
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
	Иначе
		
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
		ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ПостроительОтчета.ИзмеренияКолонки.Очистить();
		ПостроительОтчета.ВыбранныеПоля.Очистить();

		Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
			ПостроительОтчета.Отбор.Удалить(0);
		КонецЦикла; 
		
		// Группировки строк
		
		ГруппировкиСтрок = Параметры["ГруппировкиСтрок"];
		Если ТипЗнч(ГруппировкиСтрок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиСтрок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияСтроки.Очистить();
			
			Для каждого Строка Из ГруппировкиСтрок Цикл
				
				ПостроительОтчета.ИзмеренияСтроки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Группировки колонок
		
		ГруппировкиКолонок = Параметры["ГруппировкиКолонок"];
		Если ТипЗнч(ГруппировкиКолонок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиКолонок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияКолонки.Очистить();
			
			Для каждого Строка Из ГруппировкиКолонок Цикл
				
				ПостроительОтчета.ИзмеренияКолонки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Показатели: флажки использования
		
		ТаблицаПоказатели = Параметры["Показатели"];
		Если ТипЗнч(ТаблицаПоказатели) = Тип("ТаблицаЗначений") 
			И ТаблицаПоказатели.Колонки.Найти("Имя")<>Неопределено
			И ТаблицаПоказатели.Колонки.Найти("Использование")<>Неопределено Тогда
			
			Для Каждого Строка Из Показатели Цикл
				
				НайдСтрока = ТаблицаПоказатели.Найти(Строка.Имя, "Имя");
				Если НайдСтрока<>Неопределено Тогда
					Строка.Использование = НайдСтрока.Использование;
				Иначе
					Строка.Использование=Ложь;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	// Выбранные поля
	
	ВыбранныеПоля = Параметры["ВыбранныеПоля"];
	Если ТипЗнч(ВыбранныеПоля) = Тип("Соответствие")
		ИЛИ ТипЗнч(ВыбранныеПоля) = Тип("Структура") Тогда
		
		ПостроительОтчета.ВыбранныеПоля.Очистить();
		
		Для каждого Строка Из ВыбранныеПоля Цикл
		
			ПостроительОтчета.ВыбранныеПоля.Добавить(Строка.Ключ);
		
		КонецЦикла; 
		
	КонецЕсли;
	
	// Отбор, заданный списком
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
			ПостроительОтчета.Отбор.Удалить(0);
		КонецЦикла; 

		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

НП = Новый НастройкаПериода;

мТаблицаПоказатели  = Новый ТаблицаЗначений;

МассивСтрока = Новый Массив; 
МассивСтрока.Добавить(Тип("Строка"));
КвалификаторСтроки = Новый КвалификаторыСтроки(100);
ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

// Инициализация таблиц всех возможных показателей, группировок,  фильтров
мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);

мМассивШиринКолонок = Новый Массив;

мСтруктураСвязиПоказателейИИзмерений = Новый Структура;

мСоответствиеНазначений = Новый Соответствие;

мНазваниеОтчета = "";
мИмяОтчета = Метаданные().Имя;

мРежимВводаПериода = 1;

мСтруктураНевыводимыхГруппировок = Новый Структура;

ПоказыватьЗаголовок = Истина;

ШиринаТаблицы = 0;

СтруктураФорматаПолей = Новый Структура;
СтруктураФорматаПолей.Вставить("ПериодГод", "ДФ = ""гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодКвартал", "ДФ = ""к"""" квартал"""" гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодМесяц", "ДФ = ""ММММ гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодНеделя","ДФ = """"""Неделя с"""" дд.ММ.гггг """"""");
СтруктураФорматаПолей.Вставить("ПериодДень", "ДФ = дд.ММ.гггг");

мСтруктураНеСохраняемыеВНастройкеРеквизиты = Новый Структура;
#КонецЕсли
