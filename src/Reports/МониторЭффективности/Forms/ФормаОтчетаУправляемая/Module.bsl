&НаСервере
Процедура ОбновитьОтчет()
	Перем ДанныеРасшифровки;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если СтруктураНастроек <> Неопределено Тогда
			ОтчетОбъект.Показатели = СтруктураНастроек.Показатели;
		КонецЕсли;
	КонецЕсли;
    ОтчетОбъект.ПересчетДатыОтчета();
	ОтчетОбъект.СформироватьОтчет(Результат, ДанныеРасшифровки);
	
	мДатаОтчета = ОтчетОбъект.мДатаОтчета;
	
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
КонецПроцедуры //
 
&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОбновитьОтчет();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройку() Экспорт
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетОбъект.СохраненнаяНастройка = СохраненнаяНастройка;
	ОтчетОбъект.ПрименитьНастройку();
	
	ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПометкуКнопкиНастроек()

	Элементы.ВидимостьПользовательскойНастройки.Пометка = Элементы.ГруппаПользовательскаяНастройка.Видимость;
	
КонецПроцедуры //
 
&НаКлиенте
Процедура ВидимостьПользовательскойНастройки(Команда)
	
	Элементы.ГруппаПользовательскаяНастройка.Видимость = НЕ Элементы.ГруппаПользовательскаяНастройка.Видимость;
	ОбновитьПометкуКнопкиНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетДатыОтчета()
	
	ДатаКон = Отчет.ТекДата.Дата;
	
	Если Отчет.ТекДата.Вариант <> ВариантСтандартнойДатыНачала.ПроизвольнаяДата Тогда
		Дней = Отчет.ЧислоДнейДоТекущейДаты;
		Если Отчет.УчитыватьВыходные Тогда
			Если ДеньНедели(ДатаКон) > 5 Тогда
				Дней = Дней + 1;
			КонецЕсли;
			Пока Дней > 0 Цикл
				ДатаКон = ДатаКон - 3600 * 24;
				Если ДеньНедели(ДатаКон) < 6 Тогда
					Дней = Дней - 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ДатаКон = ДатаКон - 3600 * 24 * Дней;
		КонецЕсли;
	КонецЕсли; 

	ДатаФормированияОтчета = ДатаКон;
    ОбновитьНадписи();
	
КонецПроцедуры // ПересчетДаты()

&НаКлиенте
Процедура ОбновитьНадписи()

	Элементы.ДекорацияДатаФормирования.Заголовок = "Дата формирования: "+ Формат(ДатаФормированияОтчета, "ДЛФ=DD");
	
КонецПроцедуры //

&НаКлиенте
Процедура УправлениеГруппойНастройкиСтандартнойДаты()
	
	ЭтоПроизвольнаяДата = (Отчет.ТекДата.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата);
    Элементы.ГруппаНастройкаСтандартнойДаты.Видимость = НЕ ЭтоПроизвольнаяДата;
	
КонецПроцедуры //

&НаКлиенте
Процедура ТекДатаПриИзменении(Элемент)
	
	УправлениеГруппойНастройкиСтандартнойДаты();
	
	ПересчетДатыОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧислоДнейДоТекущейДатыПриИзменении(Элемент)
	
	ПересчетДатыОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьВыходныеПриИзменении(Элемент)
	
	ПересчетДатыОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СохраненнаяНастройкаПриИзменении(Элемент)
	
	ПрименитьНастройку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПометкуКнопкиНастроек();
	УправлениеГруппойНастройкиСтандартнойДаты();
	ПересчетДатыОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	СписокДоступныхВариантов = ТиповыеОтчеты.ПолучитьСписокДоступныхВариантов(ИдентификаторОбъекта);
	Элементы.СохраненнаяНастройка.СписокВыбора.ЗагрузитьЗначения(СписокДоступныхВариантов.ВыгрузитьЗначения());
	
	Если СохраненнаяНастройка.Пустая() И СписокДоступныхВариантов.Количество() <> 0 Тогда
		Если НЕ ВосстановитьПоследнююИспользуемуюНастройку(СохраненнаяНастройка, СписокДоступныхВариантов) Тогда
			СохраненнаяНастройка = СписокДоступныхВариантов.Получить(0).Значение;
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ СохраненнаяНастройка.Пустая() Тогда
		ОтчетОбъект.СохраненнаяНастройка = СохраненнаяНастройка;
		ОтчетОбъект.ПрименитьНастройку();
		
		ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеПараметраПоказателя(ПоказательОтчета, ПараметрОтчета) Экспорт
	
	ПараметрПоказателя = ПоказательОтчета.НастройкиПоказателя.ПараметрыПоказателя.Найти(ПараметрОтчета, "Параметр");
	
	Если ПараметрПоказателя = Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ПараметрПоказателя.Значение) Тогда
			Если ПараметрПоказателя.Параметр = "Периодичность" Тогда
				Возврат Отчет.ПериодичностьПоУмолчанию;
			ИначеЕсли ПараметрПоказателя.Параметр = "СмещениеПериода" Тогда
				Возврат Отчет.СмещениеПериодаПоУмолчанию;
			ИначеЕсли ПараметрПоказателя.Параметр = "Горизонт" Тогда
				Возврат -Отчет.СмещениеПериодаПоУмолчанию;
			КонецЕсли; 
		КонецЕсли; 
	
	КонецЕсли; 
	
	Возврат ПараметрПоказателя.Значение;
	
КонецФункции //

&НаСервере
Функция ВыполнитьРасшифровку(Расшифровка)

	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	
	// Получим показатель, который будем расшифровывать
	ЗначенияПолейРасшифровкиКомпоновкиДанных = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
	
	ПоказательЗначениеРасшифровки = ЗначенияПолейРасшифровкиКомпоновкиДанных.Найти("Показатель");
	
	Если ПоказательЗначениеРасшифровки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	Если СтруктураНастроек = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Показатели = СтруктураНастроек.Показатели;
	КонецЕсли;
	
	ПоказательОтчета = Неопределено;
	
	// Пользователь может создать группу показателей с таким же названием
	ПоказателиОтчета = Показатели.Строки.НайтиСтроки(Новый Структура("Представление", ПоказательЗначениеРасшифровки.Значение), Истина);
	Для каждого ЭлКоллекции Из ПоказателиОтчета Цикл
		Если НЕ ЭлКоллекции.ЭтоГруппа Тогда
			ПоказательОтчета = ЭлКоллекции;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПоказательОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ЗначенияПолейРасшифровкиКомпоновкиДанных.Количество() = 1 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	СписокОтчетовДляРасшифровки = Новый СписокЗначений;	
	
	СписокОтчетовДляРасшифровки.Добавить(-1, "<Основная расшифровка>");
	
	СмещениеПериода = ПолучитьЗначениеПараметраПоказателя(ПоказательОтчета, "СмещениеПериода");
	ПериодичностьАнализа = ПолучитьЗначениеПараметраПоказателя(ПоказательОтчета, "Периодичность");
	
	ЗначенияПараметров = Новый СписокЗначений;
	ЗначенияПараметров.Добавить(СмещениеПериода,      "СмещениеПериода");
	ЗначенияПараметров.Добавить(ПериодичностьАнализа, "Периодичность");
	ЗначенияПараметров.Добавить(мДатаОтчета,          "Период");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПроизвольныйОтчет",      ПоказательОтчета.СтруктураИсточникаДанных.ИмяИсточника);
	СтруктураПараметров.Вставить("СохраненнаяНастройка",   ПоказательОтчета.СтруктураИсточникаДанных.СохраненнаяНастройка);
	СтруктураПараметров.Вставить("ЗначенияПараметров",     ЗначенияПараметров);
	СтруктураПараметров.Вставить("ФормироватьПриОткрытии", Истина);
	
	Возврат СтруктураПараметров
	
КонецФункции //
 
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = ВыполнитьРасшифровку(Расшифровка);
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ПроизвольныйОтчет.ФормаОбъекта", СтруктураПараметров);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВосстановитьПоследнююИспользуемуюНастройку(СохраненнаяНастройка, СписокДоступныхВариантов)
	
	КлючОбъекта = "Отчет.МониторЭффективности.Форма.ФормаОтчетаУправляемая";
	СохраненнаяНастройка = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, "ПоследнийИспользуемыйВариант");
	Если СохраненнаяНастройка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СписокДоступныхВариантов.НайтиПоЗначению(СохраненнаяНастройка) = Неопределено Тогда
		СохраненнаяНастройка = Неопределено;
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // 
	
&НаСервереБезКонтекста
Процедура СохранитьПоследнююИспользуемуюНастройку(СохраненнаяНастройка)
	
	КлючОбъекта = "Отчет.МониторЭффективности.Форма.ФормаОтчетаУправляемая";
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, "ПоследнийИспользуемыйВариант", СохраненнаяНастройка);
	
КонецПроцедуры //

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьПоследнююИспользуемуюНастройку(СохраненнаяНастройка);
	
КонецПроцедуры

