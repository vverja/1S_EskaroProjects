Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Перем мСписокПолейОтчета Экспорт;
Перем мДатаОтчета Экспорт;

Перем КодИндикаторДинамикаПозитивная;
Перем КодИндикаторДинамикаСтабильная;
Перем КодИндикаторДинамикаНегативная;
								
Перем КодИндикаторСостояниеПозитивное;
Перем КодИндикаторСостояниеСтабильное;
Перем КодИндикаторСостояниеНегативное;

Функция ПолучитьПорядокПоказателя(Знач ПоказательОтчета)
	
	ПорядокПоказателя = 0;
	
	Родитель = ПоказательОтчета.Родитель;
	Если Родитель = Неопределено Тогда
		Родитель = Показатели;
	КонецЕсли;
	
	Пока Родитель <> Неопределено Цикл
		
		ПорядокПоказателя = ПорядокПоказателя + Родитель.Строки.Индекс(ПоказательОтчета);
		
		Для каждого ПоказательЭтойГруппы Из Родитель.Строки Цикл
			Если ПоказательЭтойГруппы = ПоказательОтчета Тогда
				Прервать;
			КонецЕсли;
			Если ПоказательЭтойГруппы.ЭтоГруппа Тогда
				ПорядокПоказателя = ПорядокПоказателя + ПоказательЭтойГруппы.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина).Количество();
			КонецЕсли; 
		КонецЦикла;
		
		Если Родитель = Показатели Тогда
			Прервать;
		КонецЕсли; 
		
		ПоказательОтчета = Родитель;
		Родитель = ПоказательОтчета.Родитель;
		Если Родитель = Неопределено Тогда
			Родитель = Показатели;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ПорядокПоказателя;
	

КонецФункции //

Функция ПроверитьНаименованияПоказателей()
	
	ЕстьОшибки = Ложь;
	
	МассивНаименований = Новый Массив;
	МассивДублей = Новый Массив;;
	
	Для каждого Показатель1 Из Показатели.Строки Цикл
		Если МассивНаименований.Найти(Показатель1.Представление) <> Неопределено Тогда
			Если МассивДублей.Найти(Показатель1.Представление) = Неопределено Тогда
				МассивДублей.Добавить(Показатель1.Представление);
			КонецЕсли; 
		КонецЕсли; 
		
		МассивНаименований.Добавить(Показатель1.Представление);
		
		Для каждого Показатель2 Из Показатель1.Строки Цикл
			Если МассивНаименований.Найти(Показатель2.Представление) <> Неопределено Тогда
				Если МассивДублей.Найти(Показатель2.Представление) = Неопределено Тогда
					МассивДублей.Добавить(Показатель2.Представление);
				КонецЕсли; 
			КонецЕсли; 
			
			МассивНаименований.Добавить(Показатель2.Представление);
		КонецЦикла; 
	КонецЦикла; 
	
	Если МассивДублей.Количество() <> 0 Тогда
		ЕстьОшибки = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Обнаружены ошибки в структуре отчета.");
	КонецЕсли; 
	Для каждого ЭлКоллекции Из МассивДублей Цикл
		ОбщегоНазначения.СообщитьОбОшибке("Показатель с именем """ + ЭлКоллекции + """ уже существует.",,, СтатусСообщения.Информация);
	КонецЦикла; 
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции //

Функция ПроверитьНастройки(ЗаголовокДействия)
	
	ЕстьОшибки = Ложь;
	
	Если Показатели.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина).Количество() = 0 Тогда
		ТекстОшибки = "Не выбраны показатели отчета.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки,ЕстьОшибки, ЗаголовокДействия);
	КонецЕсли; 
	
	Если НЕ ОтборДинамикаПозитивная 
		И НЕ ОтборДинамикаСтабильная
		И НЕ ОтборДинамикаНегативная Тогда
		
		ТекстОшибки = "Не установлен отбор по динамике.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки,ЕстьОшибки, ЗаголовокДействия);
	КонецЕсли; 
	
	Если НЕ ОтборСостояниеХорошее 
		И НЕ ОтборСостояниеУдовлетворительное
		И НЕ ОтборСостояниеТревожное Тогда
		
		ТекстОшибки = "Не установлен отбор по состоянию.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки,ЕстьОшибки, ЗаголовокДействия);
	КонецЕсли; 
	
	Если НЕ ПроверитьНаименованияПоказателей() Тогда
		ЕстьОшибки = Истина;
	КонецЕсли; 
	
    Возврат НЕ ЕстьОшибки;
	
КонецФункции //
 
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	Если НЕ ПроверитьНастройки("Формирование отчета") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	СоздатьСхемуКомпоновкиДанных();		
	
	ВнешниеНаборыДанных = ПроцедурыПроизвольныхОтчетов.ПолучитьДанныеИсточников(ИсточникиДанныхПроизвольногоОтчета, ПараметрыИсточниковДанныхПроизвольногоОтчета, КомпоновщикНастроек.Настройки, СхемаКомпоновкиДанных);
	Если ВнешниеНаборыДанных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Для каждого ИсточникДанныхНабора Из ИсточникиДанныхПроизвольногоОтчета Цикл
		
		НаборДанныхСхемы = ПроцедурыПроизвольныхОтчетов.НайтиНаборДанныхСхемы(ИсточникДанныхНабора.НаборДанных, СхемаКомпоновкиДанных.НаборыДанных);
		
		ИмяОбъектаНабора = НаборДанныхСхемы.ИмяОбъекта;
		
		ДанныеНабора = Неопределено;
		Если НЕ ВнешниеНаборыДанных.Свойство(ИмяОбъектаНабора, ДанныеНабора) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеНабора.Колонки.Добавить("ГруппаПоказателей", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ДанныеНабора.Колонки.Добавить("Показатель", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ДанныеНабора.Колонки.Добавить("ПорядокПоказателя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
		ДанныеНабора.Колонки.Добавить("КлючПоказателя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,0)));
		
		Если ДанныеНабора.Количество() = 0 Тогда
			// Добавим одну строку, чтобы показатель был в отчете
			// и установим значения числовых полей
			НоваяСтрока = ДанныеНабора.Добавить();
			Для каждого ЭлКоллекции Из ДанныеНабора.Колонки Цикл
				Если ЭлКоллекции.ТипЗначения.СодержитТип(Тип("Число")) Тогда
					НоваяСтрока[ЭлКоллекции.Имя] = 0;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		ПоказательОтчета = Показатели.Строки.Найти(НаборДанныхСхемы.Имя, "Представление", Истина);
		
		Если ПоказательОтчета.Родитель <> Неопределено Тогда
			ГруппаПоказателей = ПоказательОтчета.Родитель.Представление;
		Иначе
			ГруппаПоказателей = "";
		КонецЕсли; 
		
		ПорядокПоказателя = ПолучитьПорядокПоказателя(ПоказательОтчета);
		
		ДанныеНабора.ЗаполнитьЗначения(ПорядокПоказателя, "ПорядокПоказателя");
		ДанныеНабора.ЗаполнитьЗначения(ГруппаПоказателей, "ГруппаПоказателей");
		ДанныеНабора.ЗаполнитьЗначения(ПоказательОтчета.Представление, "Показатель");
		ДанныеНабора.ЗаполнитьЗначения(ПоказательОтчета.КлючПоказателя, "КлючПоказателя");
		
	КонецЦикла; 
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	
	ВывестиГрафическиеИндикаторы(Результат);
	
КонецФункции

Процедура ПриВыводеЗаголовкаОтчета(ОбластьЗаголовок) Экспорт

	ОбластьЗаголовок.Параметры.ОписаниеНастроекОтчета = "";
	
КонецПроцедуры //
 
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	СтруктураНатроек.Вставить("ПриВыводеЗаголовкаОтчета", Истина);
	Возврат СтруктураНатроек;
	
КонецФункции

Функция ПолучитьДополнительныеНастройкиОтчета() Экспорт

	ДополнительныеНастройкиОтчета = Новый Массив;
	
	Возврат ДополнительныеНастройкиОтчета;

КонецФункции //

Функция ДобавитьКартинкуВТабличныйДокумент(ТабличныйДокумент, Картинка)
	
	РисунокТД = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	РисунокТД.Картинка = Картинка;	
	РисунокТД.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	РисунокТД.ГраницаСверху = Ложь;
	РисунокТД.ГраницаСнизу = Ложь;
	РисунокТД.ГраницаСлева = Ложь;
	РисунокТД.ГраницаСправа = Ложь;
	РисунокТД.ЦветФона = Новый Цвет();
	
	Возврат РисунокТД;
	
КонецФункции //
	 
Процедура ВывестиГрафическиеИндикаторы(Результат)

	Если НЕ ПоказыватьИндикаторы Тогда
		Возврат;
	КонецЕсли;
	
	ВыводитьТренд = мСписокПолейОтчета.НайтиПоЗначению("Тренд").Пометка;
	ВыводитьСостояние = мСписокПолейОтчета.НайтиПоЗначению("ИндикаторСостояния").Пометка;
	
	Если НЕ ВыводитьТренд И НЕ ВыводитьСостояние Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаИндикаторТренда = Неопределено;
	КолонкаИндикаторСостояния = Неопределено;
	
	//Получим номера колонок в которых находятся индикаторы
	Для НомерСтроки = 1 По Результат.ВысотаТаблицы Цикл
		Для НомерКолонки = 1 По Результат.ШиринаТаблицы Цикл
			ТекстОбласти = Результат.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст;
			Если ВыводитьТренд И (ТекстОбласти = КодИндикаторДинамикаНегативная 
				ИЛИ ТекстОбласти = КодИндикаторДинамикаСтабильная
				ИЛИ ТекстОбласти = КодИндикаторДинамикаПозитивная) Тогда
				
				КолонкаИндикаторТренда = НомерКолонки;
				
			ИначеЕсли ВыводитьСостояние И (ТекстОбласти = КодИндикаторСостояниеНегативное 
				ИЛИ ТекстОбласти = КодИндикаторСостояниеСтабильное
				ИЛИ ТекстОбласти = КодИндикаторСостояниеПозитивное) Тогда
				
				КолонкаИндикаторСостояния = НомерКолонки;
				
			КонецЕсли; 
			
			Если (НЕ ВыводитьТренд ИЛИ КолонкаИндикаторТренда <> Неопределено)
				И (НЕ ВыводитьСостояние ИЛИ КолонкаИндикаторСостояния <> Неопределено) Тогда
				
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Если (НЕ ВыводитьТренд ИЛИ КолонкаИндикаторТренда <> Неопределено)
			И (НЕ ВыводитьСостояние ИЛИ КолонкаИндикаторСостояния <> Неопределено) Тогда
			
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если КолонкаИндикаторТренда = Неопределено И КолонкаИндикаторСостояния = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СмещениеВысоты = 0.4;
	
	// Расположим в ячейках картинки индикаторов
	Для НомерСтроки = 1 По Результат.ВысотаТаблицы Цикл
		Если КолонкаИндикаторТренда <> Неопределено Тогда
			ОбластьТренд = Результат.Область(НомерСтроки, КолонкаИндикаторТренда, НомерСтроки, КолонкаИндикаторТренда);
			Если ОбластьТренд.Текст = КодИндикаторДинамикаНегативная Тогда
				РисунокТрендНисходящий = ДобавитьКартинкуВТабличныйДокумент(Результат, БиблиотекаКартинок.ДинамикаНегативная);
				РисунокТрендНисходящий.Расположить(ОбластьТренд);
				ОбластьТренд.Текст = "";
			ИначеЕсли ОбластьТренд.Текст = КодИндикаторДинамикаСтабильная Тогда
				РисунокТрендСтабильный = ДобавитьКартинкуВТабличныйДокумент(Результат, БиблиотекаКартинок.ДинамикаСтабильная);
				РисунокТрендСтабильный.Расположить(ОбластьТренд);
				ОбластьТренд.Текст = "";
			ИначеЕсли ОбластьТренд.Текст = КодИндикаторДинамикаПозитивная Тогда
				РисунокТрендВосходящий = ДобавитьКартинкуВТабличныйДокумент(Результат, БиблиотекаКартинок.ДинамикаПозитивная);
				РисунокТрендВосходящий.Расположить(ОбластьТренд);
				ОбластьТренд.Текст = "";
			КонецЕсли; 
		КонецЕсли; 
		
		Если КолонкаИндикаторСостояния <> Неопределено Тогда
			ОбластьСостояние = Результат.Область(НомерСтроки, КолонкаИндикаторСостояния, НомерСтроки, КолонкаИндикаторСостояния);
			Если ОбластьСостояние.Текст = КодИндикаторСостояниеНегативное Тогда
				РисунокСостояниеНегативное = ДобавитьКартинкуВТабличныйДокумент(Результат, БиблиотекаКартинок.СостояниеТревожное);
				РисунокСостояниеНегативное.Расположить(ОбластьСостояние);
				ОбластьСостояние.Текст = "";
			ИначеЕсли ОбластьСостояние.Текст = КодИндикаторСостояниеСтабильное Тогда
				РисунокСостояниеСтабильное = ДобавитьКартинкуВТабличныйДокумент(Результат, БиблиотекаКартинок.СостояниеУдовлетворительное);
				РисунокСостояниеСтабильное.Расположить(ОбластьСостояние);
				ОбластьСостояние.Текст = "";
			ИначеЕсли ОбластьСостояние.Текст = КодИндикаторСостояниеПозитивное Тогда
				РисунокСостояниеПозитивное = ДобавитьКартинкуВТабличныйДокумент(Результат, БиблиотекаКартинок.СостояниеХорошее);
				РисунокСостояниеПозитивное.Расположить(ОбластьСостояние);
				ОбластьСостояние.Текст = "";
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	
КонецПроцедуры //
	
// Процедура запускается каждый раз перед формированием отчета. В ней содержиться код который обрабатывает настройки отчета 
// перед формированим отчета. К примеру подстановка периода отчета по умолчанию если пользователь не задал не период в отчете
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);
	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;
	
	ПересчетДатыОтчета();

КонецПроцедуры

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

#КонецЕсли

#Если Клиент Тогда
	
Процедура ПроверитьЗначениеПараметра(ИмяПараметра, ПредставлениеПараметра, КоллекцияПараметрыДанных, СтрокаПредупреждения)

	ЗначениеПараметра = КоллекцияПараметрыДанных.Найти(ИмяПараметра);
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
		СтрокаПредупреждения = СтрокаПредупреждения + "
							|- " + ПредставлениеПараметра;
		
	КонецЕсли; 
	
КонецПроцедуры //


// Процедура вызывается перед формированием показателя монитора эффективности
//
Процедура ПроверитьЗначенияПараметровПоказателя(ЗначенияНастроек, ПараметрыПанели, Отказ) Экспорт
	
	СтрокаПредупреждения = "";
	
	Если ЗначенияНастроек.Свойство("СтандартнаяДатаНачала") Тогда
		Если НЕ ЗначениеЗаполнено(ЗначенияНастроек.СтандартнаяДатаНачала.Дата) Тогда
			СтрокаПредупреждения = СтрокаПредупреждения + "
								|- дата формирования отчета";
		КонецЕсли; 
	КонецЕсли; 
	
	ПараметрыДанных = ЗначенияНастроек.НастройкиКомпоновщика.ПараметрыДанных;
	ПроверитьЗначениеПараметра("СмещениеПериода", "Смещение периода", ПараметрыДанных.Элементы, СтрокаПредупреждения);
	ПроверитьЗначениеПараметра("Горизонт", "Горизонт", ПараметрыДанных.Элементы, СтрокаПредупреждения);
	ПроверитьЗначениеПараметра("Периодичность", "Периодичность", ПараметрыДанных.Элементы, СтрокаПредупреждения);
	
	Если СтрокаПредупреждения <> "" Тогда
		Отказ = Истина;
		Предупреждение("Необходимо заполнить параметры:" + СтрокаПредупреждения,, "Формирование отчета");
	КонецЕсли; 
	
КонецПроцедуры //

// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МОНИТОРА ЭФФЕКТИВНОСТИ

Функция ПолучитьЗначениеПараметраПоказателя(ПоказательОтчета, ПараметрОтчета) Экспорт
	
	ПараметрПоказателя = ПоказательОтчета.НастройкиПоказателя.ПараметрыПоказателя.Найти(ПараметрОтчета, "Параметр");
	
	Если ПараметрПоказателя = Неопределено Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли ПараметрПоказателя.Параметр = "Периодичность"
		ИЛИ ПараметрПоказателя.Параметр = "СмещениеПериода" Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрПоказателя.Значение) Тогда
			Возврат ЭтотОбъект[ПараметрПоказателя.Параметр + "ПоУмолчанию"];
		КонецЕсли; 
		
	ИначеЕсли ПараметрПоказателя.Параметр = "Горизонт" Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрПоказателя.Значение) Тогда
			Возврат -СмещениеПериодаПоУмолчанию;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ПараметрПоказателя.Значение;
	
КонецФункции //

Процедура ПересчетДатыОтчета() Экспорт
	
	ДатаКон = ТекДата.Дата;
	
	Если ТекДата.Вариант <> ВариантСтандартнойДатыНачала.ПроизвольнаяДата Тогда
		Дней = ЧислоДнейДоТекущейДаты;
		Если УчитыватьВыходные Тогда
			Если ДеньНедели(ДатаКон) > 5 Тогда
				Дней = Дней + 1;
			КонецЕсли;
			Пока Дней > 0 Цикл
				ДатаКон = ДатаКон - 3600 * 24;
				Если ДеньНедели(ДатаКон) < 6 Тогда
					Дней = Дней - 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ДатаКон = ДатаКон - 3600 * 24 * Дней;
		КонецЕсли;
	КонецЕсли; 

	мДатаОтчета = ДатаКон;
	
КонецПроцедуры // ПересчетДаты()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОКАЗАТЕЛЯМИ

#Если Клиент Тогда

Функция РедактироватьПоказатель(ВыбраннаяСтрока, ГруппаПоказателей, ПоказателиКопия) Экспорт

	ФормаНастройки = ПолучитьФорму("НастройкаПоказателя");
	
	ФормаНастройки.Показатель = ВыбраннаяСтрока;
	ФормаНастройки.ГруппаПоказателей = ГруппаПоказателей;
	ФормаНастройки.ПоказателиКопия = ПоказателиКопия;
	
	Результат = ФормаНастройки.ОткрытьМодально();
	Если Результат = Истина Тогда
		ВыбраннаяСтрока = ФормаНастройки.Показатель;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции //

Функция ПолучитьНовыйКлюч(СтрокаДерева, Знач МаксКлюч) Экспорт
	
	Для каждого ЭлКоллекции Из СтрокаДерева.Строки Цикл
		Если МаксКлюч <= ЭлКоллекции.КлючПоказателя Тогда
			МаксКлюч = ЭлКоллекции.КлючПоказателя + 1;
		КонецЕсли;	
		
		МаксКлюч = ПолучитьНовыйКлюч(ЭлКоллекции, МаксКлюч);
	КонецЦикла; 
	
	Возврат МаксКлюч;

КонецФункции //

Процедура УстановитьПометкуДочернихСтрок(ГруппаПоказателей, ИмяКолонки) Экспорт

	Пометка = ГруппаПоказателей[ИмяКолонки];
	
	СтрокиДляПометки = ГруппаПоказателей.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
	Для каждого ЭлКоллекции Из СтрокиДляПометки Цикл
		
		Если ЭлКоллекции.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности
			И (ИмяКолонки = "ЗначениеПлан"
			ИЛИ ИмяКолонки = "ПроцентВыполнения"
			ИЛИ ИмяКолонки = "ОтклонениеПроцент"
			ИЛИ ИмяКолонки = "ОтклонениеАбс")
			Тогда
			
			Продолжить;
		ИначеЕсли ЭлКоллекции.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз
			И (ИмяКолонки = "ПроцентВыполнения"
			ИЛИ ИмяКолонки = "ОтклонениеПроцент"
			ИЛИ ИмяКолонки = "ОтклонениеАбс"
			ИЛИ ИмяКолонки = "ПредыдущееЗначение"
			ИЛИ ИмяКолонки = "ИзменениеПроцент"
			ИЛИ ИмяКолонки = "ИзменениеАбс")
			Тогда
			
			Продолжить;
		КонецЕсли;
		ЭлКоллекции[ИмяКолонки] = Пометка;
	КонецЦикла;
	
КонецПроцедуры //
 
Процедура ОбновитьПометкуГруппПоказателей(СписокПоказателей, Знач КолонкиПометок = "Пометка") Экспорт
	
	Если ТипЗнч(КолонкиПометок) = Тип("Строка") Тогда
		СписокКолонок = Новый СписокЗначений;
		СписокКолонок.Добавить(КолонкиПометок);
	Иначе
		СписокКолонок = КолонкиПометок;
	КонецЕсли; 
	
	МассивГруппПоказателей = СписокПоказателей.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа",Истина), Истина);
	Для каждого ГруппаПоказателей Из МассивГруппПоказателей Цикл
		МассивПоказателей = ГруппаПоказателей.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа",Ложь), Истина);
		
		Для каждого Колонка Из СписокКолонок Цикл
			ИмяКолонки = Колонка.Значение;
			
			ВыбраноПоказателей = 0;
			ВсегоПоказателей = 0;
			Для каждого Показатель Из МассивПоказателей Цикл		
				
				Если ИмяКолонки = "ЗначениеПлан"
					ИЛИ ИмяКолонки = "ПроцентВыполнения"
					ИЛИ ИмяКолонки = "ОтклонениеПроцент"
					ИЛИ ИмяКолонки = "ОтклонениеАбс" Тогда
					
					Если Показатель.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда						
						ВсегоПоказателей = ВсегоПоказателей + 1;
						
					ИначеЕсли Показатель.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз 
						И ИмяКолонки = "ЗначениеПлан" Тогда
						
						ВсегоПоказателей = ВсегоПоказателей + 1;
					КонецЕсли; 
				ИначеЕсли ИмяКолонки = "ПредыдущееЗначение"
					ИЛИ ИмяКолонки = "ИзменениеАбс"
					ИЛИ ИмяКолонки = "ИзменениеПроцент" Тогда
					
					Если Показатель.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности
						ИЛИ Показатель.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
						
						ВсегоПоказателей = ВсегоПоказателей + 1;
					КонецЕсли;
				Иначе
					ВсегоПоказателей = ВсегоПоказателей + 1;
				КонецЕсли;
				
				Если Показатель[ИмяКолонки] = 1 Тогда
					ВыбраноПоказателей = ВыбраноПоказателей + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если ВыбраноПоказателей = 0 Тогда
				ГруппаПоказателей[ИмяКолонки] = 0;
			ИначеЕсли ВыбраноПоказателей = ВсегоПоказателей Тогда
				ГруппаПоказателей[ИмяКолонки] = 1;
			Иначе
				ГруппаПоказателей[ИмяКолонки] = 2;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры //

Функция СоздатьТаблицуНастройкиПараметров() Экспорт
	
	ПараметрыПоказателя = Новый ТаблицаЗначений;
	ПараметрыПоказателя.Колонки.Добавить("Параметр");
	ПараметрыПоказателя.Колонки.Добавить("ПараметрПредставление");
	ПараметрыПоказателя.Колонки.Добавить("Значение");
	ПараметрыПоказателя.Колонки.Добавить("СписокДоступныхЗначений");
	
    Возврат ПараметрыПоказателя;
	
КонецФункции //

Функция СоздатьТаблицуНастройкиПараметровИсточника() Экспорт

	ПараметрыИсточника = Новый ТаблицаЗначений;
	ПараметрыИсточника.Колонки.Добавить("Параметр");
	ПараметрыИсточника.Колонки.Добавить("ПараметрПредставление");
	ПараметрыИсточника.Колонки.Добавить("Значение");
	
    Возврат ПараметрыИсточника;
	

КонецФункции //

Функция СоздатьСписокРасшифровок()
	
	СписокРасшифровок = Новый ТаблицаЗначений;
	СписокРасшифровок.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СписокРасшифровок.Колонки.Добавить("КлючОтчета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0)));
	
	// Должны совпадать с реквизитами источника данных
	СписокРасшифровок.Колонки.Добавить("ИмяИсточника", Новый ОписаниеТипов("СправочникСсылка.ВнешниеОбработки, Строка, СправочникСсылка.ПроизвольныеОтчеты",, Новый КвалификаторыСтроки(100)));
	СписокРасшифровок.Колонки.Добавить("ПредставлениеРасшифровки", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СписокРасшифровок.Колонки.Добавить("СохраненнаяНастройка", Новый ОписаниеТипов("СправочникСсылка.СохраненныеНастройки"));
	СписокРасшифровок.Колонки.Добавить("НаименованиеНастройкиОтчета", Новый ОписаниеТипов("Строка"));
	СписокРасшифровок.Колонки.Добавить("ПользовательНастройкиОтчета", Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.ГруппыПользователей"));
	СписокРасшифровок.Колонки.Добавить("ТипИсточникаДанных", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИсточниковДанных"));

	Возврат СписокРасшифровок;
	
КонецФункции //

Процедура ЗаполнитьПараметрыПоказателя(ЗначенияНастроек) Экспорт

	ЗначенияНастроек.ПараметрыПоказателя.Очистить();
	
	Если ЗначенияНастроек.ОсновнаяРасшифровка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	СКД = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЗначенияНастроек.ОсновнаяРасшифровка);
	
	Для каждого ЭлПараметрСКД Из СКД.Параметры Цикл
		
		Если ЭлПараметрСКД.ОграничениеИспользования 
			ИЛИ НРег(ЭлПараметрСКД.Имя) = НРег("Период") Тогда
			
			Продолжить;
		КонецЕсли; 
		
		НастройкаПараметра = ЗначенияНастроек.ПараметрыПоказателя.Добавить();
		НастройкаПараметра.Параметр = ЭлПараметрСКД.Имя;
		НастройкаПараметра.ПараметрПредставление = ЭлПараметрСКД.Заголовок;
		НастройкаПараметра.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ЭлПараметрСКД.ТипЗначения.Типы().Получить(0));
		
	КонецЦикла; 
	
	ЗначенияНастроек.ПараметрыПоказателя.Сортировать("ПараметрПредставление");
	
КонецПроцедуры //

Процедура ЗаполнитьНастройкиНовогоПоказателя(ЗначенияНастроек) Экспорт

	ЗначенияНастроек.ТрендВерхняяГраница = 0;
	ЗначенияНастроек.ТрендНижняяГраница = 0;
	ЗначенияНастроек.СостояниеВерхняяГраница = 0;
	ЗначенияНастроек.СостояниеНижняяГраница = 0;
	
	ЗначенияНастроек.ИндикаторТрендВерхняяГраница = "Позитивная";
	ЗначенияНастроек.ИндикаторТрендСредняяГраница = "Стабильная";
	ЗначенияНастроек.ИндикаторТрендНижняяГраница = "Негативная";
	
	ЗначенияНастроек.ИндикаторСостояниеВерхняяГраница = "Хорошее";
	ЗначенияНастроек.ИндикаторСостояниеСредняяГраница = "Удовлетворительное";
	ЗначенияНастроек.ИндикаторСостояниеНижняяГраница = "Тревожное";
	
	ЗначенияНастроек.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности;
	
	ЗначенияНастроек.ПараметрыПоказателя = СоздатьТаблицуНастройкиПараметров();
	ЗначенияНастроек.СписокРасшифровок = СоздатьСписокРасшифровок();
	
	ЗаполнитьПараметрыПоказателя(ЗначенияНастроек);
	
КонецПроцедуры //

Функция ЗаполнитьНастройкиПоказателя(Показатель, ЗначенияНастроек, ГруппаПоказателей = Неопределено) Экспорт

	Если Показатель = Неопределено Тогда
		
		Показатель = ГруппаПоказателей.Строки.Добавить();
		
		Если ТипЗнч(ГруппаПоказателей) = Тип("ДеревоЗначений") Тогда
			Показатель.КлючПоказателя = ПолучитьНовыйКлюч(ГруппаПоказателей, 0);
		Иначе
			Показатель.КлючПоказателя = ПолучитьНовыйКлюч(ГруппаПоказателей.Владелец(), 0);
		КонецЕсли; 
		
		Показатель.ЭтоГруппа = Ложь;
		
		Показатель.ИндикаторСостояния = 1;
		Показатель.Тренд = 1;
		Показатель.ТекущееЗначение = 1;
		
		Если ЗначенияНастроек.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности
			ИЛИ ЗначенияНастроек.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
			
			Показатель.ПредыдущееЗначение = 1;
			Показатель.ИзменениеПроцент = 1;
			Показатель.ИзменениеАбс = 1;
		КонецЕсли; 
		
		Если ЗначенияНастроек.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт
			ИЛИ ЗначенияНастроек.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
			
			Показатель.ЗначениеПлан = 1;
		Иначе
			Показатель.ЗначениеПлан = 0;
		КонецЕсли; 
		
		Если ЗначенияНастроек.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
			Показатель.ПроцентВыполнения = 1;
			Показатель.ОтклонениеПроцент = 1;
			Показатель.ОтклонениеАбс = 1;
		Иначе
			Показатель.ПроцентВыполнения = 0;
			Показатель.ОтклонениеПроцент = 0;
			Показатель.ОтклонениеАбс = 0;
		КонецЕсли;
		
		Показатель.НастройкиПоказателя = Новый Структура;
		Показатель.НастройкиПоказателя.Вставить("ПараметрыПоказателя", СоздатьТаблицуНастройкиПараметров());
		Показатель.НастройкиПоказателя.Вставить("СписокРасшифровок", СоздатьСписокРасшифровок());
		
	КонецЕсли; 
	
	Показатель.Представление = ЗначенияНастроек.ПредставлениеПоказателя;
	Показатель.ВидПроизвольногоОтчета = ЗначенияНастроек.ВидПроизвольногоОтчета;
			
	Показатель.СтруктураИсточникаДанных = Новый Структура;
	Показатель.СтруктураИсточникаДанных.Вставить("ТипИсточникаДанных", Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет);
	Показатель.СтруктураИсточникаДанных.Вставить("ИмяИсточника", ЗначенияНастроек.ОсновнаяРасшифровка);
	Показатель.СтруктураИсточникаДанных.Вставить("СохраненнаяНастройка", ЗначенияНастроек.НастройкаОсновнойРасшифровки);
	
	Показатель.ТрендНижняяГраница = ЗначенияНастроек.ТрендНижняяГраница;
	Показатель.ТрендВерхняяГраница = ЗначенияНастроек.ТрендВерхняяГраница;
	
	Показатель.СостояниеНижняяГраница = ЗначенияНастроек.СостояниеНижняяГраница;
	Показатель.СостояниеВерхняяГраница = ЗначенияНастроек.СостояниеВерхняяГраница;
	
	Показатель.ИндикаторТрендВерхняяГраница = ЗначенияНастроек.ИндикаторТрендВерхняяГраница;
	Показатель.ИндикаторТрендСредняяГраница = ЗначенияНастроек.ИндикаторТрендСредняяГраница;
	Показатель.ИндикаторТрендНижняяГраница = ЗначенияНастроек.ИндикаторТрендНижняяГраница;
	
	Показатель.ИндикаторСостояниеВерхняяГраница = ЗначенияНастроек.ИндикаторСостояниеВерхняяГраница;
	Показатель.ИндикаторСостояниеСредняяГраница = ЗначенияНастроек.ИндикаторСостояниеСредняяГраница;
	Показатель.ИндикаторСостояниеНижняяГраница = ЗначенияНастроек.ИндикаторСостояниеНижняяГраница;

	Показатель.НастройкиПоказателя.ПараметрыПоказателя = ЗначенияНастроек.ПараметрыПоказателя.Скопировать();
	Показатель.НастройкиПоказателя.СписокРасшифровок = ЗначенияНастроек.СписокРасшифровок.Скопировать();
	
	Возврат Истина;
	
КонецФункции //

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// СОЗДАНИЕ СХЕМЫ КОМПОНОВКИ ДАННЫХ

Процедура СоздатьВычисляемыеПоляОтчета(ЕстьПоказательПлан)

	НовоеВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "ИзменениеАбс";
	НовоеВычисляемоеПоле.Заголовок = "Изменение (абс)";
	НовоеВычисляемоеПоле.Выражение = "ЕСТЬNULL(ТекущееЗначение,0) - ЕСТЬNULL(ПредыдущееЗначение,0)";
	НовоеВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	
	НовоеВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "ИзменениеПроцент";
	НовоеВычисляемоеПоле.Заголовок = "Изменение %";
	НовоеВычисляемоеПоле.Выражение = 
							"ВЫБОР КОГДА ЕСТЬNULL(ПредыдущееЗначение,0) = 0 
							|	ТОГДА 100
							|ИНАЧЕ
							|	(ЕСТЬNULL(ТекущееЗначение,0)-ЕСТЬNULL(ПредыдущееЗначение,0))*100/ЕСТЬNULL(ПредыдущееЗначение,0)
							|КОНЕЦ";
	НовоеВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	
	Если ЕстьПоказательПлан Тогда
		НовоеВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = "ОтклонениеАбс";
		НовоеВычисляемоеПоле.Заголовок = "Отклонение (абс)";
		НовоеВычисляемоеПоле.Выражение = "ТекущееЗначение - ЗначениеПлан";
		НовоеВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
		
		НовоеВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = "ПроцентВыполнения";
		НовоеВычисляемоеПоле.Заголовок = "% Выполнения";
		НовоеВычисляемоеПоле.Выражение = 
								"ВЫБОР КОГДА СУММА(ЕСТЬNULL(ЗначениеПлан,0)) = 0 
								|	ТОГДА 100
								|ИНАЧЕ
								|	СУММА(ЕСТЬNULL(ТекущееЗначение,0))*100/СУММА(ЕСТЬNULL(ЗначениеПлан,0))
								|КОНЕЦ";
		
		НовоеВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = "ОтклонениеПроцент";
		НовоеВычисляемоеПоле.Заголовок = "Отклонение %";
		НовоеВычисляемоеПоле.Выражение = 
								"ВЫБОР КОГДА ЗначениеПлан = 0 
								|	ТОГДА 100
								|ИНАЧЕ
								|	(ТекущееЗначение-ПредыдущееЗначение)*100/ЗначениеПлан
								|КОНЕЦ";
		НовоеВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	КонецЕсли;
	
КонецПроцедуры //

Функция ПолучитьДатуНачалаПоказателя(ПериодичностьАнализа, СмещениеПериода = 0) Экспорт
	
	Если ПериодичностьАнализа = Перечисления.Периодичность.День Тогда
		НачалоПериода = НачалоДня(мДатаОтчета + СмещениеПериода*86400);
	ИначеЕсли ПериодичностьАнализа = Перечисления.Периодичность.Неделя Тогда
		НачалоПериода = НачалоНедели(мДатаОтчета + СмещениеПериода*604800);
	ИначеЕсли ПериодичностьАнализа = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(ДобавитьМесяц(мДатаОтчета, СмещениеПериода*3));
	Иначе // Месяц
		НачалоПериода = НачалоМесяца(ДобавитьМесяц(мДатаОтчета, СмещениеПериода));
	КонецЕсли; 
	
	Возврат НачалоПериода;

КонецФункции //
 
Процедура УстановитьПараметрыОтчета(МассивВыбранныхПоказателей)

	НастройкиКомпоновкиДанных = КомпоновщикНастроек.Настройки;
	
	Для каждого ПоказательОтчета Из МассивВыбранныхПоказателей Цикл
		
		Для каждого ПараметрПоказателя Из ПоказательОтчета.НастройкиПоказателя.ПараметрыПоказателя Цикл
			ИмяПараметра = "Показатель" + Формат(ПоказательОтчета.КлючПоказателя, "ЧГ=") + "_" + ПараметрПоказателя.Параметр;
			ПараметрКомпоновщика = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
			ПараметрКомпоновщика.Значение = ПолучитьЗначениеПараметраПоказателя(ПоказательОтчета, ПараметрПоказателя.Параметр);
			ПараметрКомпоновщика.Использование = Истина;
		КонецЦикла; 
		
		// Период
		ИмяПараметра = "Показатель" + Формат(ПоказательОтчета.КлючПоказателя, "ЧГ=") + "_Период";
		ПараметрКомпоновщика = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
		ПараметрКомпоновщика.Значение = мДатаОтчета;
		ПараметрКомпоновщика.Использование = Истина;
		
	КонецЦикла; 
	
КонецПроцедуры //

Процедура ДобавитьОтборИндикатора(ПредставленениеИндикатора, НастройкаПоказателя, НастройкаИндикатора)

	ГруппаОтбораПоказателя = НастройкаИндикатора.ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораПоказателя.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбораПоказателя.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючПоказателя");
	ЭлементОтбора.ПравоеЗначение = НастройкаПоказателя.КлючПоказателя;
	
	// Условное оформление
	ГруппаОтбораПоказателяУсловноеОформление = НастройкаИндикатора.ГруппаОтбораУсловноеОформление.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораПоказателяУсловноеОформление.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементОтбора = ГруппаОтбораПоказателяУсловноеОформление.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючПоказателя");
	ЭлементОтбора.ПравоеЗначение = НастройкаПоказателя.КлючПоказателя;
	
	Если НастройкаПоказателя.ИндикаторВерхняяГраница = ПредставленениеИндикатора Тогда
		Если НастройкаПоказателя.ВерхняяГраница < 0 Тогда
			ГруппаОтбораПоказателя = ГруппаОтбораПоказателя.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбораПоказателя.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора = ГруппаОтбораПоказателя.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ГруппаОтбораПоказателяУсловноеОформление = ГруппаОтбораПоказателяУсловноеОформление.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбораПоказателяУсловноеОформление.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора = ГруппаОтбораПоказателяУсловноеОформление.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		КонецЕсли; 
		ЭлементОтбора = ГруппаОтбораПоказателя.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		ЭлементОтбора.ПравоеЗначение = НастройкаПоказателя.ВерхняяГраница;
		
		// Условное оформление
		ЭлементОтбора = ГруппаОтбораПоказателяУсловноеОформление.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		ЭлементОтбора.ПравоеЗначение = НастройкаПоказателя.ВерхняяГраница;
		
	ИначеЕсли НастройкаПоказателя.ИндикаторНижняяГраница = ПредставленениеИндикатора Тогда
		Если НастройкаПоказателя.НижняяГраница > 0 Тогда
			ГруппаОтбораПоказателя = ГруппаОтбораПоказателя.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбораПоказателя.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора = ГруппаОтбораПоказателя.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ГруппаОтбораПоказателяУсловноеОформление = ГруппаОтбораПоказателяУсловноеОформление.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбораПоказателяУсловноеОформление.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора = ГруппаОтбораПоказателяУсловноеОформление.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		КонецЕсли; 
		ЭлементОтбора = ГруппаОтбораПоказателя.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ЭлементОтбора.ПравоеЗначение = НастройкаПоказателя.НижняяГраница;
		
		// Условное оформление
		ЭлементОтбора = ГруппаОтбораПоказателяУсловноеОформление.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ЭлементОтбора.ПравоеЗначение = НастройкаПоказателя.НижняяГраница;
	Иначе
		Если НастройкаПоказателя.НижняяГраница <= 0 
			И НастройкаПоказателя.ВерхняяГраница >= 0 Тогда
			
			ГруппаОтбораПоказателя = ГруппаОтбораПоказателя.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбораПоказателя.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора = ГруппаОтбораПоказателя.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ГруппаОтбораПоказателяУсловноеОформление = ГруппаОтбораПоказателяУсловноеОформление.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбораПоказателяУсловноеОформление.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора = ГруппаОтбораПоказателяУсловноеОформление.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		КонецЕсли;
		
		ГруппаОтбораПоказателяИ = ГруппаОтбораПоказателя.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораПоказателяИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора = ГруппаОтбораПоказателяИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НастройкаПоказателя.ВерхняяГраница;
		
		ЭлементОтбора = ГруппаОтбораПоказателяИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НастройкаПоказателя.НижняяГраница;
		
		// Условное оформление
		ГруппаОтбораПоказателяИ = ГруппаОтбораПоказателяУсловноеОформление.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораПоказателяИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора = ГруппаОтбораПоказателяИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НастройкаПоказателя.ВерхняяГраница;
		
		ЭлементОтбора = ГруппаОтбораПоказателяИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = НастройкаИндикатора.ПолеОтбора;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НастройкаПоказателя.НижняяГраница;
	КонецЕсли; 
	
КонецПроцедуры //

Функция СоздатьНастройкуИндикатора(ИмяИндикатора, ПредставлениеИндикатора, ЦветИндикатора, ПользовательскоеПоле, ПолеОтбора)

	НастройкиКомпоновкиДанных = КомпоновщикНастроек.Настройки;
	
	ВариантИндикатора = ПользовательскоеПоле.Варианты.Элементы.Добавить();
	ВариантИндикатора.Значение = ИмяИндикатора;
	ВариантИндикатора.Представление = ПредставлениеИндикатора;
	
	ГруппаОтбора = ВариантИндикатора.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	УсловноеОформление = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЗначениеПараметраУсловногоОформления = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextColor"));
	ЗначениеПараметраУсловногоОформления.Значение = ЦветИндикатора;
	ЗначениеПараметраУсловногоОформления.Использование = Истина;
	
	Если ПоказыватьИндикаторы Тогда
		ОформляемоеПоле = УсловноеОформление.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);	
	ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("ИзменениеПроцент") Тогда
		ОформляемоеПоле = УсловноеОформление.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИзменениеАбс");	
		ОформляемоеПоле = УсловноеОформление.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИзменениеПроцент");	
	ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("ТекущееЗначение") Тогда
		ОформляемоеПоле = УсловноеОформление.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТекущееЗначение");	
	КонецЕсли; 
	
	ГруппаОтбораУсловноеОформление = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораУсловноеОформление.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	
	НастройкаИндикатора = Новый Структура;
	НастройкаИндикатора.Вставить("ГруппаОтбора", ГруппаОтбора);
	НастройкаИндикатора.Вставить("УсловноеОформление", УсловноеОформление);
	НастройкаИндикатора.Вставить("ГруппаОтбораУсловноеОформление", ГруппаОтбораУсловноеОформление);
	НастройкаИндикатора.Вставить("ПолеОтбора", ПолеОтбора);
	
	Возврат НастройкаИндикатора;
	
КонецФункции //

Процедура СоздатьСтруктуруНастроекСхемы(МассивВыбранныхПоказателей, ЕстьПоказательПлан, ЕстьПредыдущееЗначение)

	НастройкиКомпоновкиДанных = КомпоновщикНастроек.Настройки;
	
	НастройкиКомпоновкиДанных.Выбор.Элементы.Очистить();
	НастройкиКомпоновкиДанных.Структура.Очистить();
    НастройкиКомпоновкиДанных.ПользовательскиеПоля.Элементы.Очистить();
    НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Очистить();
    НастройкиКомпоновкиДанных.Отбор.Элементы.Очистить();
    НастройкиКомпоновкиДанных.Порядок.Элементы.Очистить();
	
	ПользовательскоеПолеДинамика = НастройкиКомпоновкиДанных.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыборКомпоновкиДанных"));
	ПользовательскоеПолеДинамика.Заголовок = "Динамика";
	ПолеДинамика = Новый ПолеКомпоновкиДанных(ПользовательскоеПолеДинамика.ПутьКДанным);
	
	ПользовательскоеПолеСостояние = НастройкиКомпоновкиДанных.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыборКомпоновкиДанных"));
	ПользовательскоеПолеСостояние.Заголовок = "Состояние";
	ПолеСостояние = Новый ПолеКомпоновкиДанных(ПользовательскоеПолеСостояние.ПутьКДанным);
	

	Для каждого ПолеОтчета Из мСписокПолейОтчета Цикл
		ПолеОтчета.Пометка = Ложь;
	КонецЦикла; 
	Для каждого ПоказательОтчета Из МассивВыбранныхПоказателей Цикл
		Для каждого ПолеОтчета Из мСписокПолейОтчета Цикл
			ПолеОтчета.Пометка = Макс(ПолеОтчета.Пометка, (ПоказательОтчета[ПолеОтчета.Значение] = 1));
		КонецЦикла; 
	КонецЦикла;
	
	ЕстьГруппыПоказателей = (Показатели.Строки.Найти(Истина, "ЭтоГруппа") <> Неопределено);
	Если ЕстьГруппыПоказателей Тогда
		ГруппировкаОтчета = ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, "ГруппаПоказателей");
	КонецЕсли; 
	ГруппировкаПоказатель = ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, "Показатель");
	
	Для каждого ПолеОтчета Из мСписокПолейОтчета Цикл
		Если НЕ ПолеОтчета.Пометка Тогда
			Продолжить;				
		КонецЕсли;
		
		Если ПолеОтчета.Значение = "ИндикаторСостояния" Тогда
			Если ПоказыватьИндикаторы Тогда
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппировкаПоказатель.Выбор, ПолеСостояние);
			КонецЕсли; 
		ИначеЕсли ПолеОтчета.Значение = "Тренд" Тогда
			Если ПоказыватьИндикаторы Тогда
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппировкаПоказатель.Выбор, ПолеДинамика);
			КонецЕсли; 
		Иначе	
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппировкаПоказатель.Выбор, ПолеОтчета.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
	
	Если ЕстьПредыдущееЗначение Тогда
		// ДинамикаПозитивная
		НастройкаДинамикаПозитивная = СоздатьНастройкуИндикатора("ДинамикаПозитивная",
									КодИндикаторДинамикаПозитивная,
									Новый Цвет(0,128,0),
									ПользовательскоеПолеДинамика,
									Новый ПолеКомпоновкиДанных("ИзменениеПроцент"));
									
		
		// ДинамикаСтабильная
		НастройкаДинамикаСтабильная = СоздатьНастройкуИндикатора("ДинамикаСтабильная",
									КодИндикаторДинамикаСтабильная,
									Новый Цвет(0,0,0),
									ПользовательскоеПолеДинамика,
									Новый ПолеКомпоновкиДанных("ИзменениеПроцент"));
		
		
		// ДинамикаНегативная
		НастройкаДинамикаНегативная = СоздатьНастройкуИндикатора("ДинамикаНегативная",
									КодИндикаторДинамикаНегативная,
									Новый Цвет(224,48,24),
									ПользовательскоеПолеДинамика,
									Новый ПолеКомпоновкиДанных("ИзменениеПроцент"));
	КонецЕсли; 
								
								
								
	// СостояниеПозитивное
	НастройкаСостояниеПозитивное = СоздатьНастройкуИндикатора("СостояниеПозитивное",
								КодИндикаторСостояниеПозитивное,
								Новый Цвет(0,128,0),
								ПользовательскоеПолеСостояние,
								Новый ПолеКомпоновкиДанных("ТекущееЗначение"));
								
	
	// СостояниеСтабильное
	НастройкаСостояниеСтабильное = СоздатьНастройкуИндикатора("СостояниеСтабильное",
								КодИндикаторСостояниеСтабильное,
								Новый Цвет(0,0,0),
								ПользовательскоеПолеСостояние,
								Новый ПолеКомпоновкиДанных("ТекущееЗначение"));
	
	
	// СостояниеНегативное
	НастройкаСостояниеНегативное = СоздатьНастройкуИндикатора("СостояниеНегативное",
								КодИндикаторСостояниеНегативное,
								Новый Цвет(224,48,24),
								ПользовательскоеПолеСостояние,
								Новый ПолеКомпоновкиДанных("ТекущееЗначение"));
								
	// Для каждого показателя создим свой вариант значения поля
	Для каждого ПоказательОтчета Из МассивВыбранныхПоказателей Цикл
		
		НастройкаПоказателя = Новый Структура;
		НастройкаПоказателя.Вставить("КлючПоказателя", ПоказательОтчета.КлючПоказателя);
		НастройкаПоказателя.Вставить("Представление", ПоказательОтчета.Представление);
		
		// Тренд
		Если ЕстьПредыдущееЗначение Тогда
			НастройкаПоказателя.Вставить("ВерхняяГраница", ПоказательОтчета.ТрендВерхняяГраница);
			НастройкаПоказателя.Вставить("НижняяГраница", ПоказательОтчета.ТрендНижняяГраница);
			НастройкаПоказателя.Вставить("ИндикаторВерхняяГраница", ПоказательОтчета.ИндикаторТрендВерхняяГраница);
			НастройкаПоказателя.Вставить("ИндикаторНижняяГраница", ПоказательОтчета.ИндикаторТрендНижняяГраница);
			
			ДобавитьОтборИндикатора("Позитивная", НастройкаПоказателя, НастройкаДинамикаПозитивная); 
			ДобавитьОтборИндикатора("Стабильная", НастройкаПоказателя, НастройкаДинамикаСтабильная); 
			ДобавитьОтборИндикатора("Негативная", НастройкаПоказателя, НастройкаДинамикаНегативная); 
		КонецЕсли; 
		
		// Состояние
		НастройкаПоказателя.Вставить("ВерхняяГраница", ПоказательОтчета.СостояниеВерхняяГраница);
		НастройкаПоказателя.Вставить("НижняяГраница", ПоказательОтчета.СостояниеНижняяГраница);
		НастройкаПоказателя.Вставить("ИндикаторВерхняяГраница", ПоказательОтчета.ИндикаторСостояниеВерхняяГраница);
		НастройкаПоказателя.Вставить("ИндикаторНижняяГраница", ПоказательОтчета.ИндикаторСостояниеНижняяГраница);
		
		ДобавитьОтборИндикатора("Хорошее", НастройкаПоказателя, НастройкаСостояниеПозитивное); 
		ДобавитьОтборИндикатора("Удовлетворительное", НастройкаПоказателя, НастройкаСостояниеСтабильное); 
		ДобавитьОтборИндикатора("Тревожное", НастройкаПоказателя, НастройкаСостояниеНегативное); 		
		
		
		// Установим видимость полей
		УсловноеОформлениеВидимостиПоля = Неопределено;
		Для каждого ПолеОтчета Из мСписокПолейОтчета Цикл
			Если ПолеОтчета.Пометка 
				И ПоказательОтчета[ПолеОтчета.Значение] = 0 Тогда
				
				Если УсловноеОформлениеВидимостиПоля = Неопределено Тогда
					УсловноеОформлениеВидимостиПоля = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
					ЗначениеПараметраУсловногоОформления = УсловноеОформлениеВидимостиПоля.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Text"));
					ЗначениеПараметраУсловногоОформления.Значение = "х";
					ЗначениеПараметраУсловногоОформления.Использование = Истина;
				КонецЕсли; 
				
				ОформляемоеПоле = УсловноеОформлениеВидимостиПоля.Поля.Элементы.Добавить();
				
				Если ПолеОтчета.Значение = "Тренд" Тогда
					ОформляемоеПоле.Значение = ПолеДинамика;
				ИначеЕсли ПолеОтчета.Значение = "ИндикаторСостояния" Тогда
					ОформляемоеПоле.Поле = ПолеСостояние;
				Иначе
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеОтчета.Значение);	
				КонецЕсли; 
				
				ЭлементОтбора = УсловноеОформлениеВидимостиПоля.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючПоказателя");
				ЭлементОтбора.ПравоеЗначение = ПоказательОтчета.КлючПоказателя;
			КонецЕсли; 
		КонецЦикла; 

	КонецЦикла;	
	
	УсловноеОформлениеИзменениеПроцент = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЗначениеПараметраУсловногоОформления = УсловноеОформлениеИзменениеПроцент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Format"));
	ЗначениеПараметраУсловногоОформления.Значение = "ЧДЦ=2";
	ЗначениеПараметраУсловногоОформления.Использование = Истина;
	ОформляемоеПоле = УсловноеОформлениеИзменениеПроцент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИзменениеПроцент");
	ОформляемоеПоле = УсловноеОформлениеИзменениеПроцент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИзменениеАбс");
	
	НовоеУсловноеОформление = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЗначениеПараметраУсловногоОформления = НовоеУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MaximumWidth"));
	ЗначениеПараметраУсловногоОформления.Значение = 8;
	ЗначениеПараметраУсловногоОформления.Использование = Истина;
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИзменениеПроцент");
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПроцентВыполнения");
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтклонениеПроцент");
	
	
	НовоеУсловноеОформление = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЗначениеПараметраУсловногоОформления = НовоеУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MaximumWidth"));
	ЗначениеПараметраУсловногоОформления.Значение = 13.5;
	ЗначениеПараметраУсловногоОформления.Использование = Истина;
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТекущееЗначение");
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПредыдущееЗначение");
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтклонениеАбс");
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИзменениеАбс");
	
	
	
	НовоеУсловноеОформление = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЗначениеПараметраУсловногоОформления = НовоеУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MaximumWidth"));
	ЗначениеПараметраУсловногоОформления.Значение = 7;
	ЗначениеПараметраУсловногоОформления.Использование = Истина;
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = ПолеДинамика;
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = ПолеСостояние;
		
	Если ЕстьПоказательПлан Тогда
		УсловноеОформлениеОтклонениеПроцент = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
		ЗначениеПараметраУсловногоОформления = УсловноеОформлениеОтклонениеПроцент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Format"));
		ЗначениеПараметраУсловногоОформления.Значение = "ЧДЦ=2";
		ЗначениеПараметраУсловногоОформления.Использование = Истина;
		ОформляемоеПоле = УсловноеОформлениеОтклонениеПроцент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтклонениеПроцент");
		
		УсловноеОформлениеПроцентВыполнения = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
		ЗначениеПараметраУсловногоОформления = УсловноеОформлениеПроцентВыполнения.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Format"));
		ЗначениеПараметраУсловногоОформления.Значение = "ЧДЦ=2";
		ЗначениеПараметраУсловногоОформления.Использование = Истина;
		ОформляемоеПоле = УсловноеОформлениеПроцентВыполнения.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПроцентВыполнения");
	КонецЕсли; 
	
	// Отборы по динамике
	Если ЕстьПредыдущееЗначение
		И (НЕ ОтборДинамикаПозитивная
			ИЛИ НЕ ОтборДинамикаСтабильная
			ИЛИ НЕ ОтборДинамикаНегативная) Тогда
			
		ГруппаОтбораПоДинамике = ГруппировкаПоказатель.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
		
		ГруппаОтбораПоДинамике.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбораПоДинамике.Использование = Истина;
		
		Если ОтборДинамикаПозитивная Тогда
			ОтборПоДинамике = ГруппаОтбораПоДинамике.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПоДинамике.ЛевоеЗначение = ПолеДинамика;
			ОтборПоДинамике.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборПоДинамике.ПравоеЗначение = "ДинамикаПозитивная";
		КонецЕсли; 
		Если ОтборДинамикаСтабильная Тогда
			ОтборПоДинамике = ГруппаОтбораПоДинамике.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПоДинамике.ЛевоеЗначение = ПолеДинамика;
			ОтборПоДинамике.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборПоДинамике.ПравоеЗначение = "ДинамикаСтабильная";
		КонецЕсли; 
		Если ОтборДинамикаНегативная Тогда
			ОтборПоДинамике = ГруппаОтбораПоДинамике.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПоДинамике.ЛевоеЗначение = ПолеДинамика;
			ОтборПоДинамике.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборПоДинамике.ПравоеЗначение = "ДинамикаНегативная";
		КонецЕсли; 
			
	КонецЕсли;	
	
	
	// Отборы по состоянию
	Если НЕ ОтборСостояниеХорошее
		ИЛИ НЕ ОтборСостояниеУдовлетворительное
		ИЛИ НЕ ОтборСостояниеТревожное Тогда
		
		ГруппаОтбораПоДинамике = ГруппировкаПоказатель.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
		ГруппаОтбораПоДинамике.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбораПоДинамике.Использование = Истина;
		
		Если ОтборСостояниеХорошее Тогда
			ОтборПоДинамике = ГруппаОтбораПоДинамике.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПоДинамике.ЛевоеЗначение = ПолеСостояние;
			ОтборПоДинамике.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборПоДинамике.ПравоеЗначение = "СостояниеПозитивное";
		КонецЕсли; 
		Если ОтборСостояниеУдовлетворительное Тогда
			ОтборПоДинамике = ГруппаОтбораПоДинамике.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПоДинамике.ЛевоеЗначение = ПолеСостояние;
			ОтборПоДинамике.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборПоДинамике.ПравоеЗначение = "СостояниеСтабильное";
		КонецЕсли; 
		Если ОтборСостояниеТревожное Тогда
			ОтборПоДинамике = ГруппаОтбораПоДинамике.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПоДинамике.ЛевоеЗначение = ПолеСостояние;
			ОтборПоДинамике.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборПоДинамике.ПравоеЗначение = "СостояниеНегативное";
		КонецЕсли; 
			
	КонецЕсли;	
	
	УстановитьПараметрыОтчета(МассивВыбранныхПоказателей);
	
	ЭлементПорядка = НастройкиКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ПорядокПоказателя");
	ЭлементПорядка.Использование = Истина;
	
	// Убрать итоги
	РасположениеОбщихИтоговПоВертикали = НастройкиКомпоновкиДанных.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("VerticalOverallPlacement"));
	РасположениеОбщихИтоговПоВертикали.Значение = РасположениеИтоговКомпоновкиДанных.Нет;
	РасположениеОбщихИтоговПоВертикали.Использование = Истина;
	
	// Убрать вывод параметров
	РасположениеОбщихИтоговПоВертикали = НастройкиКомпоновкиДанных.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("DataParametersOutput"));
	РасположениеОбщихИтоговПоВертикали.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	РасположениеОбщихИтоговПоВертикали.Использование = Истина;
	
	// Убрать вывод отбора
	РасположениеОбщихИтоговПоВертикали = ГруппировкаПоказатель.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("FilterOutput"));
	РасположениеОбщихИтоговПоВертикали.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	РасположениеОбщихИтоговПоВертикали.Использование = Истина;	
	
КонецПроцедуры //

Процедура ЗаполнитьПоляНабораДанных(ОсновнойНабор, СтруктураИсточникаДанных)
	
	ОсновнойНабор.Поля.Очистить();
	
	ПоляНабораДанных = ПроцедурыПроизвольныхОтчетов.ПолучитьСписокПолейИсточника(СтруктураИсточникаДанных);
	
	Для каждого СтрокаПоляНабораДанных Из ПоляНабораДанных Цикл
		ИмяПоля = СтрокаПоляНабораДанных.Поле;
		ЗаголовокПоля = СтрокаПоляНабораДанных.Заголовок;
		ПутьКДанным = ИмяПоля;
		
		ПолеНабораДанных = ТиповыеОтчеты.ДобавитьПолеНабораДанных(ОсновнойНабор, ИмяПоля, ЗаголовокПоля, ПутьКДанным);
		Если ЗначениеЗаполнено(СтрокаПоляНабораДанных.ТипЗначения) Тогда
		    ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов(СтрокаПоляНабораДанных.ТипЗначения);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры //

Процедура ЗаполнитьПараметрыИсточникаДанных(КлючИсточника, СтруктураИсточникаДанных, КлючПоказателя)

	СписокПараметровИсточникаДанных = ПроцедурыПроизвольныхОтчетов.ПолучитьСписокПараметровИсточника(СтруктураИсточникаДанных);
	
	СписокЗамены = Новый СписокЗначений;
	Для каждого СтрокаПараметрыИсточника Из СписокПараметровИсточникаДанных Цикл
		НовыйПутьКДанным = "Показатель" + Формат(КлючПоказателя, "ЧГ=") + "_" + СтрокаПараметрыИсточника.Имя;
		СписокЗамены.Добавить(СтрокаПараметрыИсточника.Имя, НовыйПутьКДанным);
	КонецЦикла; 
	
	Для каждого СтрокаПараметрыИсточника Из СписокПараметровИсточникаДанных Цикл
		Параметр = ПараметрыИсточниковДанныхПроизвольногоОтчета.Добавить();
		Параметр.КлючИсточника = КлючИсточника;
		
		Параметр.Параметр    = СтрокаПараметрыИсточника.Имя;
		
		НовыйПутьКДанным = СписокЗамены.НайтиПоЗначению(СтрокаПараметрыИсточника.Имя).Представление;
		
		Параметр.ПутьКДанным = НовыйПутьКДанным;
		
		ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
		ПараметрСхемы.Имя = НовыйПутьКДанным;
		ПараметрСхемы.Заголовок = СтрокаПараметрыИсточника.Заголовок;
			
		ПараметрСхемы.Выражение = СтрокаПараметрыИсточника.Выражение;
			
		// Заменим параметры в выражении
		Для каждого ЗначениеЗамены Из СписокЗамены Цикл
			ПараметрСхемы.Выражение = СтрЗаменить(ПараметрСхемы.Выражение, "&" + ЗначениеЗамены.Значение, "&" + ЗначениеЗамены.Представление);
		КонецЦикла; 
		
		ПараметрСхемы.ВключатьВДоступныеПоля = Истина;
		ПараметрСхемы.ОграничениеИспользования = СтрокаПараметрыИсточника.ОграничениеИспользования;
		ПараметрСхемы.ТипЗначения = Новый ОписаниеТипов(СтрокаПараметрыИсточника.ТипЗначения);
		
	КонецЦикла; 
		
КонецПроцедуры //

Процедура ДобавитьДополнительныеПоляВНаборДанных(НаборДанных)

	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле        = "ПорядокПоказателя";
	НовоеПоле.ПутьКДанным = "ПорядокПоказателя";
	НовоеПоле.Заголовок   = "Порядок показателя";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0));
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле        = "Показатель";
	НовоеПоле.ПутьКДанным = "Показатель";
	НовоеПоле.Заголовок   = "Показатель";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле        = "КлючПоказателя";
	НовоеПоле.ПутьКДанным = "КлючПоказателя";
	НовоеПоле.Заголовок   = "Ключ показателя";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,0));
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле        = "ГруппаПоказателей";
	НовоеПоле.ПутьКДанным = "ГруппаПоказателей";
	НовоеПоле.Заголовок   = "Группа показателей";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	
КонецПроцедуры //
 
Процедура СоздатьСхемуКомпоновкиДанных() Экспорт

	ИсточникиДанныхПроизвольногоОтчета.Очистить();
	ПараметрыИсточниковДанныхПроизвольногоОтчета.Очистить();
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ТиповыеОтчеты.ДобавитьЛокальныйИсточникДанных(СхемаКомпоновкиДанных);
	ИмяЛокальногоИсточника = СхемаКомпоновкиДанных.ИсточникиДанных.Получить(0).Имя;
	
	ОсновнойНабор = ТиповыеОтчеты.ДобавитьНаборДанныхОбъединение(СхемаКомпоновкиДанных.НаборыДанных, "Монитор эффективности");
	
	МассивВыбранныхПоказателей = Показатели.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
	
	ЕстьГруппыПоказателей = (Показатели.Строки.Найти(Истина, "ЭтоГруппа") <> Неопределено);
	
	ЕстьПредыдущееЗначение = Ложь;
	ЕстьПоказательПлан = Ложь;
	
	Для каждого ПоказательОтчета Из МассивВыбранныхПоказателей Цикл
		
		НовыйНабор = ОсновнойНабор.Элементы.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
		НовыйНабор.Имя = ПоказательОтчета.Представление;
		НовыйНабор.ИмяОбъекта = "Показатель" + Формат(ПоказательОтчета.КлючПоказателя, "ЧГ=");
		НовыйНабор.ИсточникДанных = ИмяЛокальногоИсточника;
		
		СтруктураИсточникаДанных = ПоказательОтчета.СтруктураИсточникаДанных;
		ЗаполнитьПоляНабораДанных(НовыйНабор, СтруктураИсточникаДанных);
		
		НовыйИсточникДанных = ИсточникиДанныхПроизвольногоОтчета.Добавить();
		НовыйИсточникДанных.КлючИсточника = ПоказательОтчета.КлючПоказателя;
		НовыйИсточникДанных.НаборДанных = НовыйНабор.Имя;
		ЗаполнитьЗначенияСвойств(НовыйИсточникДанных, СтруктураИсточникаДанных);
		
		ЗаполнитьПараметрыИсточникаДанных(НовыйИсточникДанных.КлючИсточника, СтруктураИсточникаДанных, ПоказательОтчета.КлючПоказателя);
		
		// Добавим дополнительные поля, которые заполняются перед формированием отчета
		ДобавитьДополнительныеПоляВНаборДанных(НовыйНабор);
		
		Если НЕ ЕстьПредыдущееЗначение Тогда
			ЕстьПредыдущееЗначение = (НовыйНабор.Поля.Найти("ПредыдущееЗначение") <> Неопределено);
		КонецЕсли; 
		
		Если ПоказательОтчета.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
			ЕстьПоказательПлан = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	СоздатьВычисляемыеПоляОтчета(ЕстьПоказательПлан);
	
	ПолеИтога = ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "ТекущееЗначение");
	ПолеИтога = ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "КлючПоказателя", "МАКСИМУМ(КлючПоказателя)");
	
	Если ЕстьПредыдущееЗначение Тогда
		
		ПолеИтога = ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "ПредыдущееЗначение");
		
		ПолеИтога = ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "ИзменениеАбс", "СУММА(ЕСТЬNULL(ТекущееЗначение,0)) - СУММА(ЕСТЬNULL(ПредыдущееЗначение,0))");
		
		ПолеИтога = ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "ИзменениеПроцент", 
																"ВЫБОР КОГДА СУММА(ЕСТЬNULL(ПредыдущееЗначение,0)) = 0 
																|	ТОГДА 
																|		ВЫБОР КОГДА СУММА(ЕСТЬNULL(ТекущееЗначение,0)) = 0 
																|			ТОГДА 0
																|		ИНАЧЕ 100
																|		КОНЕЦ
																|ИНАЧЕ
																|	(СУММА(ЕСТЬNULL(ТекущееЗначение,0))-СУММА(ЕСТЬNULL(ПредыдущееЗначение,0)))*100/СУММА(ЕСТЬNULL(ПредыдущееЗначение,0))
																|КОНЕЦ");
	КонецЕсли; 
															
    Если ЕстьПоказательПлан Тогда
		ПолеИтога = ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "ЗначениеПлан");
		
		ПолеИтога = ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "ОтклонениеАбс", "СУММА(ЕСТЬNULL(ТекущееЗначение,0)) - СУММА(ЕСТЬNULL(ЗначениеПлан,0))");
		
		ПолеИтога = ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "ПроцентВыполнения", 
																"ВЫБОР КОГДА СУММА(ЕСТЬNULL(ЗначениеПлан,0)) = 0 
																|	ТОГДА 0
																|ИНАЧЕ
																|	СУММА(ЕСТЬNULL(ТекущееЗначение,0))*100/СУММА(ЕСТЬNULL(ЗначениеПлан,0))
																|КОНЕЦ");
		
		ПолеИтога = ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "ОтклонениеПроцент", 
																"ВЫБОР КОГДА СУММА(ЕСТЬNULL(ЗначениеПлан,0)) = 0 
																|	ТОГДА 0
																|ИНАЧЕ
																|	(СУММА(ЕСТЬNULL(ТекущееЗначение,0))-СУММА(ЕСТЬNULL(ЗначениеПлан,0)))*100/СУММА(ЕСТЬNULL(ЗначениеПлан,0))
																|КОНЕЦ");
	КонецЕсли; 
	
	ПолеИтога = ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "ПорядокПоказателя", "МАКСИМУМ(ПорядокПоказателя)");
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных)) ;
	
	СоздатьСтруктуруНастроекСхемы(МассивВыбранныхПоказателей, ЕстьПоказательПлан, ЕстьПредыдущееЗначение);
	
КонецПроцедуры //

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ

Процедура ИнициализацияПоказателей()

	Показатели.Колонки.Добавить("Представление",  Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ВидПроизвольногоОтчета",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПроизвольныхОтчетов"));
	Показатели.Колонки.Добавить("ЭтоГруппа",      Новый ОписаниеТипов("Булево"));
	
	Показатели.Колонки.Добавить("СтруктураИсточникаДанных",  Новый ОписаниеТипов("Структура"));
	
	Показатели.Колонки.Добавить("КлючПоказателя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,0)));
	Показатели.Колонки.Добавить("Пометка",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0)));
	
	Показатели.Колонки.Добавить("ТрендНижняяГраница",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Показатели.Колонки.Добавить("ТрендВерхняяГраница",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Показатели.Колонки.Добавить("ИндикаторТрендНижняяГраница",  Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ИндикаторТрендВерхняяГраница",  Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ИндикаторТрендСредняяГраница",  Новый ОписаниеТипов("Строка"));
	
	Показатели.Колонки.Добавить("СостояниеНижняяГраница",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Показатели.Колонки.Добавить("СостояниеВерхняяГраница",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Показатели.Колонки.Добавить("ИндикаторСостояниеНижняяГраница",  Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ИндикаторСостояниеВерхняяГраница",  Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("ИндикаторСостояниеСредняяГраница",  Новый ОписаниеТипов("Строка"));
	
	Показатели.Колонки.Добавить("НастройкиПоказателя");
	
	ВыбранныеПоказатели = Показатели.Скопировать();
	
	// Признаки вывода полей
	мСписокПолейОтчета = Новый СписокЗначений;
	мСписокПолейОтчета.Добавить("Тренд", "Тренд", Истина);
	мСписокПолейОтчета.Добавить("ИндикаторСостояния", "Состояние", Истина);
	мСписокПолейОтчета.Добавить("ТекущееЗначение", "Текущее значение", Истина);
	мСписокПолейОтчета.Добавить("ПредыдущееЗначение", "Значение предыдущего периода", Истина);
	мСписокПолейОтчета.Добавить("ИзменениеПроцент", "Изменение %", Истина);
	мСписокПолейОтчета.Добавить("ИзменениеАбс", "Изменение (абс)", Истина);
	мСписокПолейОтчета.Добавить("ЗначениеПлан", "План", Истина);
	мСписокПолейОтчета.Добавить("ПроцентВыполнения", "% Выполнения", Истина);
	мСписокПолейОтчета.Добавить("ОтклонениеПроцент", "Отклонение %", Истина);
	мСписокПолейОтчета.Добавить("ОтклонениеАбс", "Отклонение (абс)", Истина);
	
	Для каждого ПолеОтчета Из мСписокПолейОтчета Цикл
		Показатели.Колонки.Добавить(ПолеОтчета.Значение, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0)), ПолеОтчета.Представление);
	КонецЦикла; 
	
КонецПроцедуры //

Процедура ИнициализацияОбъекта()

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИнициализацияПоказателей();
	
	мСписокПериодичность = Новый СписокЗначений;
	мСписокПериодичность.Добавить(Перечисления.Периодичность.День);
	мСписокПериодичность.Добавить(Перечисления.Периодичность.Неделя);
	мСписокПериодичность.Добавить(Перечисления.Периодичность.Месяц);
	мСписокПериодичность.Добавить(Перечисления.Периодичность.Квартал);
	мСписокПериодичность.Добавить(Перечисления.Периодичность.Полугодие);
	мСписокПериодичность.Добавить(Перечисления.Периодичность.Год);
	
КонецПроцедуры //

ИнициализацияОбъекта();

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

// Текст индикаторов не должен совпадать
КодИндикаторДинамикаПозитивная = Символ(9650);
КодИндикаторДинамикаСтабильная = Символ(9632);
КодИндикаторДинамикаНегативная = Символ(9660);
								
КодИндикаторСостояниеПозитивное = Символ(9679);
КодИндикаторСостояниеСтабильное = Символ(9674);
КодИндикаторСостояниеНегативное = Символ(9830);
								