#Если Клиент Тогда
Перем НП Экспорт;
Перем ИмяРегистраБухгалтерии Экспорт;
Перем ТекстЗапросаМеждународный;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос по установленным условия, фильтрам и группировкам
//
Функция СформироватьЗапрос(СтруктураПараметров)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода",  НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("КонПериода",  КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Организация",  Организация);

	ТекстЗапроса = "";
	ТекстИтогов  = "";
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	Счет КАК Счет,
	|	Счет.Код КАК СчетКод,
	|	Счет.Наименование КАК СчетНаименование,
	|	Счет.Представление КАК СчетПредставление,
	|	Счет.Забалансовый КАК СчетЗабалансовый";

	Если ПоВалютам Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	Валюта КАК Валюта,
		|	Валюта.Представление КАК ВалютаПредставление ";
	КонецЕсли;
	
	// Добавим в текст запроса все выбранные ресурсы 
	
	Для каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл
		
		ТекстЗапроса = ТекстЗапроса + ",
		|	" + ИмяПоказателя + "НачальныйОстатокДт КАК " + ИмяПоказателя + "НачальныйОстатокДт,
		|	" + ИмяПоказателя + "НачальныйОстатокКт КАК " + ИмяПоказателя + "НачальныйОстатокКт,
		|	" + ИмяПоказателя + "ОборотДт КАК "           + ИмяПоказателя + "ОборотДт,
		|	" + ИмяПоказателя + "ОборотКт КАК "           + ИмяПоказателя + "ОборотКт,
		|	" + ИмяПоказателя + "КонечныйОстатокДт КАК "  + ИмяПоказателя + "КонечныйОстатокДт,
		|	" + ИмяПоказателя + "КонечныйОстатокКт КАК "  + ИмяПоказателя + "КонечныйОстатокКт";
		
		ТекстИтогов = ТекстИтогов + ",
		|	СУММА(" + ИмяПоказателя + "НачальныйОстатокДт),
		|	СУММА(" + ИмяПоказателя + "НачальныйОстатокКт),
		|	СУММА(" + ИмяПоказателя + "ОборотДт),
		|	СУММА(" + ИмяПоказателя + "ОборотКт),
		|	СУММА(" + ИмяПоказателя + "КонечныйОстатокДт),
		|	СУММА(" + ИмяПоказателя + "КонечныйОстатокКт)";
		
		
	КонецЦикла;

	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(" 
	+ ?(ДатаНач = '00010101000000', "" , "&НачПериода") + ", "
	+ ?(ДатаКон = '00010101000000', "",  "&КонПериода") + ", , , " 
	+ ?(ПоЗабалансовымСчетам, "", " НЕ Счет.Забалансовый ") + ", , "
	+ ?(НЕ ЗначениеЗаполнено(Организация), "",	" Организация = &Организация") + ") КАК БухРегОстаткиИОбороты";
	
	ТекстЗапроса = ТекстЗапроса + "
	|АВТОУПОРЯДОЧИВАНИЕ
	|ИТОГИ " + Сред(ТекстИтогов, 2) + "
	|ПО
	|	Счет ИЕРАРХИЯ";
	
	Если ПоВалютам Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	Валюта КАК Валюта ";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	
	ТекстЗапросаМеждународный = СтрЗаменить(ТекстЗапроса,ИмяРегистраБухгалтерии,"Международный");

	Возврат Запрос;

КонецФункции // СформироватьЗапрос()

// Формирует запросы по каждому счету, указанному в таблице вывода итогов
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Таблица запросов
//
Функция СформироватьТаблицуРазворотаСчетов(СтруктураПараметров)

	// Результат функции будут укладываться в таблицу
	ТаблицаРазворотаСчетов = Новый ТаблицаЗначений;
	ТаблицаРазворотаСчетов.Колонки.Добавить("Счет");
	ТаблицаРазворотаСчетов.Колонки.Добавить("Результат");
	ТаблицаРазворотаСчетов.Колонки.Добавить("МассивГруппировок");
	ТаблицаРазворотаСчетов.Колонки.Добавить("СоответсвиеСчетов");

	Если НЕ ПоСубсчетамИСубконто Тогда
		Возврат ТаблицаРазворотаСчетов;
	КонецЕсли;

	Если ПравилаВыводаИтогов.Количество() > 0 тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачПериода", НачалоДня(ДатаНач));
		Запрос.УстановитьПараметр("КонПериода", КонецДня(ДатаКон));
		Запрос.УстановитьПараметр("Организация", Организация);

		// Сформируем текст запроса
		Для Каждого ПравилаСчета из ПравилаВыводаИтогов Цикл
			
			ТекстЗапроса = "";
			ТекстИтогов  = "";
			ТекстВыбранныеПоля = "";
			ТекстИтогиПо = "";
			ТекстПорядок = "";
			
			МассивГруппировок = Новый Массив;
			
			Субконто = Новый Массив;

			Если ПравилаСчета.Счет.Пустая() Тогда
				
				Продолжить; // неправильно заполненная строка, не обрабатываем
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Счет", ПравилаСчета.Счет);

			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Счет КАК Счет";
			
			ТекстВнеш = 
			"ВЫБРАТЬ
			|	Счет КАК Счет,
			|	Счет.Код КАК СчетКод,
			|	Счет.Наименование КАК СчетНаименование,
			|	Счет.Представление КАК СчетПредставление,
			|	Счет.Забалансовый КАК СчетЗабалансовый";

			Если ПоВалютам Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|	Валюта КАК Валюта";
				
				ТекстПорядок = ТекстПорядок + ", Валюта";
				
				ТекстВнеш = ТекстВнеш + ",
				|	Валюта КАК Валюта,
				|	Валюта.Представление КАК ВалютаПредставление ";
			КонецЕсли;
			
			Если ПравилаСчета.Субсчета Тогда
				ТекстИтогиПо = ТекстИтогиПо + ", Счет ИЕРАРХИЯ";
				
				МассивГруппировок.Добавить("Счет");
			Иначе
				
				// Если не нужно разворачивать ни по субсчетам, ни по субконто, 
				// строку не обрабатываем
				Если ПравилаСчета.РазворотПоСубконто.Количество() = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ТекстИтогиПо = ТекстИтогиПо + ", Счет ";
				
				МассивГруппировок.Добавить("Счет");
				
			КонецЕсли;
			
			Для каждого СтрокаПоСубконто Из ПравилаСчета.РазворотПоСубконто Цикл
				
				// Найдем соответствующий вид субконто
				Для каждого ВидСубконто Из ПравилаСчета.Счет.ВидыСубконто Цикл
					Если "Субконто"+ВидСубконто.НомерСтроки=СтрокаПоСубконто.Имя Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Сч=ВидСубконто.НомерСтроки;
				
				// Определим тип значения поля и в соответствии с этим типом добавим поле запроса
				ТипыСубконто = ВидСубконто.ВидСубконто.ТипЗначения;
				СтрПолеЗапроса =  "";
				Выб = "";
				ВыбИначе = "";
				
				Для каждого Элемент Из ТипыСубконто.Типы() Цикл
					ОбъектМетаданных=Метаданные.НайтиПоТипу(Элемент);
					Если ОбъектМетаданных<>Неопределено Тогда
						ИмяТаблицы = ОбъектМетаданных.ПолноеИмя();
						Выб = Выб + "КОГДА #Поле ССЫЛКА "+ИмяТаблицы+" ТОГДА ВЫРАЗИТЬ( #Поле КАК ("+ИмяТаблицы+"))";
						
						ЕстьПредставление=Истина;
						Если Метаданные.Перечисления.Найти(ОбъектМетаданных)<>Неопределено Тогда
							ЕстьПредставление=Ложь;
						КонецЕсли;
					Иначе
						// Для примитивных типов прибется добавлять само значение
						ВыбИначе = " #Поле ";
						
						ЕстьПредставление=Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ПустаяСтрока(Выб) Тогда
					Если НЕ ПустаяСтрока(ВыбИначе) Тогда
						СтрПоле = "
						|	ВЫБОР "+Выб+" ИНАЧЕ "+ВыбИначе+ " КОНЕЦ";
					Иначе
						СтрПоле = "
						|	ВЫБОР "+Выб+" КОНЕЦ";
					КонецЕсли;
				Иначе
					СтрПоле = ВыбИначе;
				КонецЕсли;
				
				ТекстВыбранныеПоля = ТекстВыбранныеПоля + ", " + СтрЗаменить(СтрПоле, "#Поле"," ОстаткиИОбороты.Субконто" +Сч)+" КАК Субконто"+Сч;
				
				ТекстИтогиПо = ТекстИтогиПо + ", " + СтрокаПоСубконто.Имя;
				
				ТекстВнеш  = ТекстВнеш + ", " + СтрокаПоСубконто.Имя;
				Если ЕстьПредставление Тогда
					ТекстВнеш  = ТекстВнеш + ", " + СтрокаПоСубконто.Имя+".Представление КАК " + СтрокаПоСубконто.Имя+"Представление";
				Иначе //поле с именем Представление будет содержать сам объект
					ТекстВнеш  = ТекстВнеш + ", " + СтрокаПоСубконто.Имя+" КАК " + СтрокаПоСубконто.Имя+"Представление";
				КонецЕсли;
				
				МассивГруппировок.Добавить(СтрокаПоСубконто.Имя);
				
			КонецЦикла; 

			ТекстЗапроса = ТекстЗапроса + ТекстВыбранныеПоля;

			
			// Добавим в текст запроса все выбранные ресурсы 
			
			Для каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл
				
				ТекстЗапроса = ТекстЗапроса + ",
				|	" + ИмяПоказателя + "НачальныйОстатокДт КАК " + ИмяПоказателя + "НачальныйОстатокДт,
				|	" + ИмяПоказателя + "НачальныйОстатокКт КАК " + ИмяПоказателя + "НачальныйОстатокКт,
				|	" + ИмяПоказателя + "ОборотДт КАК "           + ИмяПоказателя + "ОборотДт,
				|	" + ИмяПоказателя + "ОборотКт КАК "           + ИмяПоказателя + "ОборотКт,
				|	" + ИмяПоказателя + "КонечныйОстатокДт КАК "  + ИмяПоказателя + "КонечныйОстатокДт,
				|	" + ИмяПоказателя + "КонечныйОстатокКт КАК "  + ИмяПоказателя + "КонечныйОстатокКт";
				
				ТекстВнеш = ТекстВнеш + ",
				|	" + ИмяПоказателя + "НачальныйОстатокДт,
				|	" + ИмяПоказателя + "НачальныйОстатокКт,
				|	" + ИмяПоказателя + "ОборотДт,
				|	" + ИмяПоказателя + "ОборотКт,
				|	" + ИмяПоказателя + "КонечныйОстатокДт,
				|	" + ИмяПоказателя + "КонечныйОстатокКт";
				
				ТекстИтогов = ТекстИтогов + ",
				|	СУММА(" + ИмяПоказателя + "НачальныйОстатокДт),
				|	СУММА(" + ИмяПоказателя + "НачальныйОстатокКт),
				|	СУММА(" + ИмяПоказателя + "ОборотДт),
				|	СУММА(" + ИмяПоказателя + "ОборотКт),
				|	СУММА(" + ИмяПоказателя + "КонечныйОстатокДт),
				|	СУММА(" + ИмяПоказателя + "КонечныйОстатокКт)";
				
				
			КонецЦикла;
		
			ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты( "
			+ ?(ДатаНач = '00010101000000', "", "&НачПериода") + ", "
			+ ?(ДатаКон = '00010101000000', "", "&КонПериода") 
			+ ", , , Счет В ИЕРАРХИИ ( &Счет) " 
			+ ?(ПоЗабалансовымСчетам, "", " И НЕ Счет.Забалансовый ") + ", "
			+ ", "
			+ ?(НЕ ЗначениеЗаполнено(Организация), "",	" Организация = &Организация") + ") КАК ОстаткиИОбороты";
			
			ТекстЗапроса = ТекстВнеш + " ИЗ ("+ТекстЗапроса + " ) КАК Подзапрос 
			|	АВТОУПОРЯДОЧИВАНИЕ";

			Если Не ПустаяСтрока(ТекстИтогиПо) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|ИТОГИ ";

				ТекстЗапроса = ТекстЗапроса + Сред(ТекстИтогов, 2);

				ТекстЗапроса = ТекстЗапроса + "
				|ПО " + Сред(ТекстИтогиПо, 2);

				Если ПоВалютам Тогда
					ТекстЗапроса = ТекстЗапроса + ",
					|	Валюта КАК Валюта ";
				КонецЕсли;

			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;

			НоваяСтрока = ТаблицаРазворотаСчетов.Добавить();
			НоваяСтрока.Счет      = ПравилаСчета.Счет;
			НоваяСтрока.Результат = Запрос.Выполнить(); // в таблицу помещается выполненный запрос
			НоваяСтрока.МассивГруппировок = МассивГруппировок;
			НоваяСтрока.СоответсвиеСчетов = Новый Соответствие;
			
			Запрос.Текст =
			"ВЫБРАТЬ ПланСчетовРегистра.Ссылка КАК Ссылка
			|ИЗ	ПланСчетов.Хозрасчетный КАК ПланСчетовРегистра
			|ГДЕ	ПланСчетовРегистра.Ссылка В Иерархии(&Ссылка)";
			Запрос.УстановитьПараметр("Ссылка",ПравилаСчета.Счет);
			Выборка=Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Ссылка<>ПравилаСчета.Счет Тогда
					НоваяСтрока.СоответсвиеСчетов.Вставить(Выборка.Ссылка, Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;

	КонецЕсли;
	
	Возврат ТаблицаРазворотаСчетов;
	
КонецФункции // СформироватьТаблицуРазворотаСчетов()

// Формирует запросы по каждому из счетов, указанному в таблице развернутого сальдо
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Таблица запросов
//
Функция СформироватьТаблицуРазвернутогоСальдо(СтруктураПараметров)

	// Результат каждого запроса будет укладываться в специальную таблицу
	ТаблицаРазвернутогоСальдо = Новый ТаблицаЗначений;
	ТаблицаРазвернутогоСальдо.Колонки.Добавить("Счет");
	ТаблицаРазвернутогоСальдо.Колонки.Добавить("Результат");
	
	Если НЕ ВыводитьРазвернутоеСальдо Тогда
		Возврат ТаблицаРазвернутогоСальдо;
	КонецЕсли;

	Если ПравилаРазвернутогоСальдо.Количество() > 0 тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачПериода", НачалоДня(ДатаНач));
		Запрос.УстановитьПараметр("КонПериода", КонецДня(ДатаКон));
		Запрос.УстановитьПараметр("Организация", Организация);

		// Сформируем текст запроса
		Для Каждого ПравилаСчета из ПравилаРазвернутогоСальдо Цикл
			
			ТекстЗапроса = "";
			ТекстИтогов  = "";
			ТекстВыбранныеПоля = "";
			
			ТекстИтогиПо = "";
			
			МассивГруппировок = Новый Массив;
			
			Субконто = Новый Массив;

			Если ПравилаСчета.Счет.Пустая() Тогда
				
				Продолжить; // неправильно заполненная строка, не обрабатываем
				
			КонецЕсли;
			
			МассивГруппировок.Добавить("Общие"); // всегда есть общий итог
			
			Запрос.УстановитьПараметр("Счет", ПравилаСчета.Счет);
			
			ТекстЗапроса =  
			"ВЫБРАТЬ
			|	Счет КАК Счет ";
			
			Если ПоВалютам Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|	Валюта КАК Валюта,
				|	Валюта.Представление КАК ВалютаПредставление ";
			КонецЕсли;
			
			// Развернутое сальдо может быть подсчитано либо по субсчетам, либо по субконто
			Если ПравилаСчета.Субсчета Тогда
				
				ТекстИтогиПо = ТекстИтогиПо + ", Счет ТОЛЬКО ИЕРАРХИЯ";
				
				МассивГруппировок.Добавить("Счет");
			Иначе
				
				// Если не нужно разворачивать ни по субсчетам, ни по субконто, 
				// строку не обрабатываем
				Если ПравилаСчета.РазворотПоСубконто.Количество() = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Для каждого СтрокаПоСубконто Из ПравилаСчета.РазворотПоСубконто Цикл
					
					ТекстВыбранныеПоля = ТекстВыбранныеПоля + ",
					|	" + СтрокаПоСубконто.Имя + " КАК " + СтрокаПоСубконто.Имя;
					
					ТекстИтогиПо = ТекстИтогиПо + ", " + СтрокаПоСубконто.Имя;
					
					МассивГруппировок.Добавить(СтрокаПоСубконто.Имя);
					
				КонецЦикла; 
				
				ТекстЗапроса = ТекстЗапроса + ТекстВыбранныеПоля;
				
			КонецЕсли;

			
			// Добавим в текст запроса все выбранные ресурсы 
			
			Для каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл
				
				ТекстЗапроса = ТекстЗапроса + ",
				|	" + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт КАК " + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт,
				|	" + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт КАК " + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт,
				|	" + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт КАК "  + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт,
				|	" + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт КАК "  + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт";
				
				ТекстИтогов = ТекстИтогов + ",
				|	СУММА(" + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт),
				|	СУММА(" + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт),
				|	СУММА(" + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт),
				|	СУММА(" + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт)";
				
			КонецЦикла;
		
			ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты( "
			+ ?(ДатаНач = '00010101000000', "", "&НачПериода") + ", "
			+ ?(ДатаКон = '00010101000000', "", "&КонПериода") 
			+ ", , , Счет В ИЕРАРХИИ ( &Счет) " 
			+ ?(ПоЗабалансовымСчетам, "", " И НЕ Счет.Забалансовый ") + ", "
			+ ", "
			+ ?(НЕ ЗначениеЗаполнено(Организация), "",	" Организация = &Организация") + ") КАК ОстаткиИОбороты";
 			

			Если Не ПустаяСтрока(ТекстИтогиПо) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|ИТОГИ ";

				ТекстЗапроса = ТекстЗапроса + Сред(ТекстИтогов, 2);

				ТекстЗапроса = ТекстЗапроса + "
				|ПО ОБЩИЕ " + ТекстИтогиПо;

				Если ПоВалютам Тогда
					ТекстЗапроса = ТекстЗапроса + ",
					|	Валюта КАК Валюта ";
				КонецЕсли;

			КонецЕсли;

			Запрос.Текст = ТекстЗапроса;

			НоваяСтрока = ТаблицаРазвернутогоСальдо.Добавить();
			НоваяСтрока.Счет      = ПравилаСчета.Счет;
			НоваяСтрока.Результат = Запрос.Выполнить(); // в таблицу помещается выполненный запрос
			
		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаРазвернутогоСальдо;

КонецФункции // СформироватьТаблицуРазвернутогоСальдо()

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ПЕЧАТНОЙ ФОРМЫ ОТЧЕТА
//

// Формирует табличный документ с заголовком отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	// Вывод заголовка, описателя периода и фильтров и шапки
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период: без ограничения.";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда

			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");

		Иначе

			ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");

		КонецЕсли;

	КонецЕсли;
	
	Макет = ПолучитьМакет("Макет");
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОписаниеПериода = ОписаниеПериода + " По всем организациям.";
	Иначе
		ОписаниеПериода = ОписаниеПериода + " Организация: " + Организация + ".";
	КонецЕсли;

	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода + " Соответствия БУ и МСФО";

	ТекстСписокПоказателей = "Выводимые данные: сумма";
	Если ПоВалютам Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ", валютная сумма";
	КонецЕсли;

    ЗаголовокОтчета.Параметры.СписокПоказателей = ТекстСписокПоказателей;

	Возврат(ЗаголовокОтчета);
	
КонецФункции // СформироватьЗаголовок()

// Заполняет параметры расшифровки переданной области перед выводом в отчет
//
// Параметры:
//	Область - табличный документ, параметры расшифровки которого заполняются,
//	Выборка - спозиционированная выборка из результата запроса,
//	ОтборСубконто - параметр, содержащий таблицу отбора, которая будет использована
//	при построении отчета по расшифровке.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено, ВыведенныйСчет=Неопределено)
	
	// Заполнение параметров расшифровки
	ПараметрыОСВПоСчету = Новый Соответствие;
	
	ПараметрыОСВПоСчету.Вставить("ИмяОбъекта", "ОборотноСальдоваяВедомостьПоСчету"+ИмяРегистраБухгалтерии);
	ПараметрыОСВПоСчету.Вставить("ЗаполнитьПоУмолчанию", Истина);

	ПараметрыКарточкиСчета = Новый Соответствие;
	
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "КарточкаСчета"+ИмяРегистраБухгалтерии);
	
	ПараметрыАнализСчета = Новый Соответствие;
	ПараметрыАнализСчета.Вставить("ИмяОбъекта", "АнализСчета"+ИмяРегистраБухгалтерии);
	ПараметрыАнализСчета.Вставить("ЗаполнитьПоУмолчанию", Истина);
	
	ПараметрыОборотыСчетаМесяц = Новый Соответствие;
	ПараметрыОборотыСчетаМесяц.Вставить("ИмяОбъекта", "ОборотыСчета"+ИмяРегистраБухгалтерии);
	ПараметрыОборотыСчетаМесяц.Вставить("ЗаполнитьПоУмолчанию", Истина);
	
	ПараметрыОборотыСчетаДень = Новый Соответствие;
	ПараметрыОборотыСчетаДень.Вставить("ИмяОбъекта", "ОборотыСчета"+ИмяРегистраБухгалтерии);
	ПараметрыОборотыСчетаДень.Вставить("ЗаполнитьПоУмолчанию", Истина);

	// Заполение значений для расшифровки
	СчетДляРасшифровки=?(Выборка.Счет<>NULL, Выборка.Счет, ВыведенныйСчет);
	ПараметрыОСВПоСчету.Вставить("Счет", СчетДляРасшифровки);
	ПараметрыКарточкиСчета.Вставить("Счет", СчетДляРасшифровки);
	ПараметрыАнализСчета.Вставить("Счет", СчетДляРасшифровки);
	ПараметрыОборотыСчетаМесяц.Вставить("Счет", СчетДляРасшифровки);
	ПараметрыОборотыСчетаДень.Вставить("Счет", СчетДляРасшифровки);
	
	ПараметрыОборотыСчетаМесяц.Вставить("Период", "МЕСЯЦ");
	ПараметрыОборотыСчетаМесяц.Вставить("ВсеПериоды",  Истина);
	ПараметрыОборотыСчетаДень.Вставить("Период",  "ДЕНЬ");
	ПараметрыОборотыСчетаДень.Вставить("ВсеПериоды",  Ложь);

	Если Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "Субконто" Тогда

		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
			
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
			КонецЦикла; 
			
			ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + Выборка.СчетПредставление);
		
	ИначеЕсли Выборка.Группировка() = "Счет" Тогда

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыОСВПоСчету,    "Ведомость по счету " + Выборка.СчетПредставление);
		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + Выборка.СчетПредставление);
		СписокРасшифровки.Добавить(ПараметрыАнализСчета,   "Анализ счета " + Выборка.СчетПредставление);
		
		Если НЕ (Месяц(ДатаНач) = Месяц(ДатаКон) И Год(ДатаНач) = Год(ДатаКон))
			ИЛИ (ДатаНач = '00010101' И ДатаКон= '00010101') Тогда
			СписокРасшифровки.Добавить(ПараметрыОборотыСчетаМесяц,  "Обороты счета " + Выборка.СчетПредставление + " по месяцам");
		КонецЕсли;
		СписокРасшифровки.Добавить(ПараметрыОборотыСчетаДень,  "Обороты счета " + Выборка.СчетПредставление + " по дням");
	Иначе
		СписокРасшифровки = Неопределено;
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;
	
КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

// Выводит показатели
//
// Параметры:
//	ДокументРезультат - таблица отчета
//	Макет - используемый макет
//	Результат - выборка
//	Счет - счет выборки
//	ЭтоПерваяСтрока - признак вывода отступов перед субконто
//	СтрокаРазвернутогоСальдо - строка с выборкой - развернутым сальдо по счету
//	СтруктураОбщийИтог - структура, в которой накапливается общий итог.
//
Процедура ВывестиПоказатели(ДокументРезультат, Выборка, Счет, ЭтоПерваяСтрока, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров)

	ВыведеноПоказателей = 0;
	
	Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл

		// Сумму в валюте выводим только по группировке Валюта
		Попытка
			Если ИмяПоказателя = "ВалютнаяСумма" Тогда
				Если Выборка.Группировка() <> "Валюта" Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;

		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		ВыведеноПоказателей = ВыведеноПоказателей + 1;
		
		Если ЭтоПерваяСтрока = Истина Тогда
			Область = СтруктураПараметров.ОбластьСтрокаПоказателяЧисла;
		Иначе
			Область = СтруктураПараметров.ОбластьСтрокаЧисла;
		КонецЕсли;

		ОборотДт = Выборка[ИмяПоказателя + "ОборотДт"];
		ОборотКт = Выборка[ИмяПоказателя + "ОборотКт"];

		Если СтрокаРазвернутогоСальдо = Неопределено Тогда

			НачальныйОстатокДт = Выборка[ИмяПоказателя + "НачальныйОстатокДт"];
			НачальныйОстатокКт = Выборка[ИмяПоказателя + "НачальныйОстатокКт"];
			КонечныйОстатокДт  = Выборка[ИмяПоказателя + "КонечныйОстатокДт"];
			КонечныйОстатокКт  = Выборка[ИмяПоказателя + "КонечныйОстатокКт"];

		Иначе

			// Спозиционируемся на самом верхнем итоге
			ВыборкаОбщиеИтоги = СтрокаРазвернутогоСальдо.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ВыборкаОбщиеИтоги.Следующий() Тогда
				НачальныйОстатокДт = ВыборкаОбщиеИтоги[ИмяПоказателя + "НачальныйРазвернутыйОстатокДт"];
				НачальныйОстатокКт = ВыборкаОбщиеИтоги[ИмяПоказателя + "НачальныйРазвернутыйОстатокКт"];
				КонечныйОстатокДт  = ВыборкаОбщиеИтоги[ИмяПоказателя + "КонечныйРазвернутыйОстатокДт"];
				КонечныйОстатокКт  = ВыборкаОбщиеИтоги[ИмяПоказателя + "КонечныйРазвернутыйОстатокКт"];
			Иначе
				НачальныйОстатокДт = 0;
				НачальныйОстатокКт = 0;
				КонечныйОстатокДт  = 0;
				КонечныйОстатокКт  = 0;
			КонецЕсли;

		КонецЕсли;

		// Накопление итогов по счетам
		Попытка
			Если Выборка.Группировка() = "Счет" 
				И Выборка.Уровень() = 0 
				И НЕ Выборка.СчетЗабалансовый Тогда

				СтруктураОбщийИтог.Вставить(ИмяПоказателя + "НачальныйОстатокДт", СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокДт"] + НачальныйОстатокДт);
				СтруктураОбщийИтог.Вставить(ИмяПоказателя + "НачальныйОстатокКт", СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокКт"] + НачальныйОстатокКт);
				СтруктураОбщийИтог.Вставить(ИмяПоказателя + "КонечныйОстатокДт",  СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокДт" ] + КонечныйОстатокДт);
				СтруктураОбщийИтог.Вставить(ИмяПоказателя + "КонечныйОстатокКт",  СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокКт" ] + КонечныйОстатокКт);
				СтруктураОбщийИтог.Вставить(ИмяПоказателя + "ОборотДт",           СтруктураОбщийИтог[ИмяПоказателя + "ОборотДт"]           + ОборотДт);
				СтруктураОбщийИтог.Вставить(ИмяПоказателя + "ОборотКт",           СтруктураОбщийИтог[ИмяПоказателя + "ОборотКт"]           + ОборотКт);

			КонецЕсли;
		Исключение
		КонецПопытки; 	

		Область.Параметры.НачальныйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
		Область.Параметры.НачальныйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
		Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйОстатокДт,  ФорматПоказателя);
		Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйОстатокКт,  ФорматПоказателя);
		Область.Параметры.ОборотДт           = Формат(ОборотДт,           ФорматПоказателя);
		Область.Параметры.ОборотКт           = Формат(ОборотКт,           ФорматПоказателя);

		Если ЭтоПерваяСтрока = Истина Тогда

			ОбластьСтрокаПоказателяСчет = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			Если ИмяПоказателя = "ВалютнаяСумма" Тогда
				ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = "Валютная сумма";
			Иначе
				ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = "";
			КонецЕсли;
				

			ВыведеннаяОбласть = ДокументРезультат.Вывести(СтруктураПараметров.ОбластьСтрокаПоказателяСчет);
			
			Если ВыведеноПоказателей > 0 Тогда
				ВыведеннаяОбласть.ГраницаСверху = СтруктураПараметров.НетЛинии; //Область(1,3,1,4)
			КонецЕсли;

		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ЭтоПерваяСтрока = Истина;

	КонецЦикла;

КонецПроцедуры // ВывестиПоказатели()

// Выводит группировку при развороте счета по субсчетам и/или субконто
//
// Параметры:
//	Выборка         - выборка из результата запроса по выводимой группировке,
//	ИндексТекущейГруппировки - индекс выводимой группировки в массиве группировок,
//	МассивГруппировок - массив, содержащий имена группировок, по которым строится разворот счета,
//	Уровень 		- уровень  группировки верхнего уровня
//	СдвигУровня     - сдвиг уровня группировки отчета относительно уровня группировки запроса,
//	СброситьСдвигУровня - признак сброса сдвига уровня,
//	СтрокаРазвернутогоСальдо - строка таблицы значений с развернутым сальдо по текущему счету.
//	СтруктураОбщийИтог - структура, в которой накапливаются общие итоги,
//	ПоследнийВыведенныйСчет - последний выведенный счет,
//	СтруктураПараметров - структура, содержащая неизменные для разворота счета параметры:
//	                      Области макета табличного документа, линии, уровень группировки, 
//	                      с которой начался вывод отчета.
//	ОтборСубконто	- параметр отбора по субконто
//
Процедура ВывестиГруппировку(Выборка, Знач ИндексТекущейГруппировки, МассивГруппировок, Уровень, СдвигУровня, 
	СброситьСдвигУровня, ПоследнийВыведенныйСчет, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров, ОтборСубконто)

	Пока Выборка.Следующий() Цикл

		// Итоги более высокого уровня по счету - пропускаем (он уже выведен)
		Если Выборка.Группировка() = "Счет" Тогда

			// При выводе субсчетов не делаем отступы
			Если СброситьСдвигУровня Тогда
				СброситьСдвигУровня = Ложь;
				СдвигУровня = 0;
			КонецЕсли;
			
			Отступ = 0;
			СдвигУровня = СдвигУровня+1;

			// Уже выведенные счета не выводим
			Если ПоследнийВыведенныйСчет = Выборка.Счет 
				ИЛИ ПоследнийВыведенныйСчет.ПринадлежитЭлементу(Выборка.Счет) Тогда
				
				Перейти ~М1;
				
			КонецЕсли;
			
		Иначе
			
			Отступ = Макс(Выборка.Уровень() - СдвигУровня, 0);
			СброситьСдвигУровня = Истина;
			
		КонецЕсли;
		
		ОбластьСтрокаСчет = СтруктураПараметров.ОбластьСтрокаСчет;
		ОбластьСтрокаСчет.Параметры.Заполнить(Выборка);
		
		ВыводимаяОбласть = ОбластьСтрокаСчет;

		// Заполенние параметров расшифровки
		Если Выборка.Группировка() = "Счет" Тогда
			ЗаполнитьПараметрыРасшифровки(ОбластьСтрокаСчет, Выборка);
		КонецЕсли;

		Если Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "Субконто" тогда

			// Субконто, которых нет, равны NULL
			Если Выборка[Выборка.Группировка()] = NULL Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаПоказателяСчет = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;

			ОбластьСтрокаПоказателяСчет.Параметры.Заполнить(Выборка);

			ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = Выборка[Выборка.Группировка()+"Представление"];
			
			ВыводимаяОбласть = ОбластьСтрокаПоказателяСчет;

			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборСубконто, ПоследнийВыведенныйСчет);

			ВыводимаяОбласть.Область(1,4).Отступ = Отступ;

		КонецЕсли;

		ДокументРезультат = СтруктураПараметров.ДокументРезультат;
		ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень + Выборка.Уровень());
		
		ЭтоПерваяСтрока = Ложь;

		ВывестиПоказатели(ДокументРезультат, Выборка, Выборка.Счет, ЭтоПерваяСтрока, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров);

		// Если по валютам,
		Если ПоВалютам Тогда

			ОбластьСтрокаПоказателяСчет = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;

			ВыборкаПоВалютам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
			
			Пока ВыборкаПоВалютам.Следующий() Цикл

				ОбластьСтрокаПоказателяСчет.Параметры.Заполнить(Выборка);
				ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = "Валюта " + ВыборкаПоВалютам.ВалютаПредставление;

				// Заполенние параметров расшифровки
				ЗаполнитьПараметрыРасшифровки(ОбластьСтрокаПоказателяСчет, Выборка);

				ОбластьСтрокаПоказателяСчет.Область(1,4).Отступ = Отступ+1;

				ДокументРезультат.Вывести(ОбластьСтрокаПоказателяСчет, Выборка.Уровень());
				
				ЭтоПерваяСтрока = Ложь;

				ВывестиПоказатели(ДокументРезультат, ВыборкаПоВалютам, ВыборкаПоВалютам.Счет, ЭтоПерваяСтрока, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров);

			КонецЦикла;
			
		КонецЕсли;

		// Если есть следующая группировка, то выбираем ее
		~М1:	Если ИндексТекущейГруппировки + 1 < МассивГруппировок.Количество() Тогда
			
			КопияОтборСубконто = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
				
				КопияОтборСубконто.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
			КонецЦикла; 
			
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[ИндексТекущейГруппировки + 1]), 
								ИндексТекущейГруппировки + 1, МассивГруппировок, Уровень, 
								СдвигУровня, СброситьСдвигУровня, ПоследнийВыведенныйСчет, 
								СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров, КопияОтборСубконто);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ВывестиГруппировку()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//	ПоказыватьЗаголовок - признак видимости строк с заголовком отчета
//	ВысотаЗаголовка - параметр, через который возвращается высота заголовка в строках 
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	// Проверка на пустые значения
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда

		Предупреждение("Дата начала периода не может быть больше даты конца периода");
		Возврат;

	КонецЕсли;

	ДокументРезультат.Очистить();

	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	Макет  = ПолучитьМакет("Макет");
	
	// Переменная, содержащая имена показателей отчета (ресурсов) в виде массива
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Сумма");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли;

	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);

	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	СтруктураОбщийИтог = Новый Структура;

	// Используемые области макета
	ОбластьСтрокаСчет           = Макет.ПолучитьОбласть("Строка|Счет");
	ОбластьСтрокаПоказателяСчет = Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");

	// В этой структуре будут храниться постоянные значения, передаваемые во другие процедуры:
	// - формат, 
	// - области макета
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);
	
	// Области для вывода показателей
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла",Макет.ПолучитьОбласть("СтрокаПоказателя|Числа"));
	СтруктураПараметров.Вставить("ОбластьСтрокаЧисла",          Макет.ПолучитьОбласть("Строка|Числа"));
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет", Макет.ПолучитьОбласть("СтрокаПоказателя|Счет"));

	// Линии, используемые при выводе
	СтруктураПараметров.Вставить("ТонкаяЛиния", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1));
	СтруктураПараметров.Вставить("НетЛинии",    Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));

	// Формат показателей
	СтруктураПараметров.Вставить("ФорматПоказателей", Новый Структура);

	Для каждого ИмяПоказателя Из МассивПоказателей Цикл
		
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "НачальныйОстатокДт", 0);
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "НачальныйОстатокКт", 0);
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "КонечныйОстатокДт", 0);
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "КонечныйОстатокКт", 0);
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "ОборотДт", 0);
		СтруктураОбщийИтог.Вставить(ИмяПоказателя + "ОборотКт", 0);
		
		Ресурс = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Ресурсы.Найти(ИмяПоказателя);
		Если Ресурс <> Неопределено Тогда
			
			СтруктураПараметров.ФорматПоказателей.Вставить(ИмяПоказателя,"ЧЦ = "+Ресурс.Тип.КвалификаторыЧисла.Разрядность
			+" ; ЧДЦ = "+Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти);
			
		Иначе // по умолчанию - сумма
			СтруктураПараметров.ФорматПоказателей.Вставить(ИмяПоказателя ,"ЧЦ = 15 ; ЧДЦ = 2");
		КонецЕсли;
		
	КонецЦикла;
		
	ТекущийРазворачиваемыйСчет = ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].ПустаяСсылка();
	СоотвПодчСчета = Новый Соответствие;
	
	Запрос = СформироватьЗапрос(СтруктураПараметров);
	
	//+++
	Состояние("Расчет итогов по международному учету");
	ЗапросМеждународный = СформироватьЗапрос(СтруктураПараметров);
	ЗапросМеждународный.Текст = ТекстЗапросаМеждународный;
	ТЗМеждународный = ЗапросМеждународный.Выполнить().Выгрузить();
	//---

	// Рассчитаем итоги по счетам, заданным в таблице вывода итогов по счетам
	ТаблицаРазворотаСчетов = СформироватьТаблицуРазворотаСчетов(СтруктураПараметров);

	// Рассчитаем итоги по счетам, заданным в таблице развернутого сальдо
	ТаблицаРазвернутогоСальдо = СформироватьТаблицуРазвернутогоСальдо(СтруктураПараметров);

	Состояние("Расчет итогов по бухгалтерскому учету");
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");

	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПоСубсчетамИСубконто Тогда
			Если Выборка.Уровень() > 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Пропускаем подчиненные счета разворачиваемого счета
		Если СоотвПодчСчета[Выборка.Счет]<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьСтрокаСчет.Параметры.Заполнить(Выборка);
		
		// Заполенние параметров расшифровки
		ЗаполнитьПараметрыРасшифровки(ОбластьСтрокаСчет, Выборка);
		
		Уровень = Выборка.Уровень();
		
		ДокументРезультат.Вывести(ОбластьСтрокаСчет, Уровень);
		
		ЭтоПерваяСтрока = Ложь;
		
		// Определим, нужно ли выводить развернутое сальдо по счету и
		// разворачивать счет по субконто
		СтрокаРазвернутогоСальдо = Неопределено;
		СтрокаРазворотаСчета     = Неопределено;
		
		Если ВыводитьРазвернутоеСальдо Тогда
			СтрокаРазвернутогоСальдо = ТаблицаРазвернутогоСальдо.Найти(Выборка.Счет, "Счет");
		КонецЕсли;
		
		Если ПоСубсчетамИСубконто Тогда
			СтрокаРазворотаСчета = ТаблицаРазворотаСчетов.Найти(Выборка.Счет, "Счет");
		КонецЕсли;
		
		ВывестиПоказатели(ДокументРезультат, Выборка, Выборка.Счет, ЭтоПерваяСтрока, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров);
		
		Если ПоВалютам Тогда
			
			ВыборкаПоВалютам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
			
			Пока ВыборкаПоВалютам.Следующий() Цикл
				
				ОбластьСтрокаПоказателяСчет.Параметры.Заполнить(Выборка);
				ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = "Валюта " + ВыборкаПоВалютам.ВалютаПредставление;
				
				// Заполенние параметров расшифровки
				ЗаполнитьПараметрыРасшифровки(ОбластьСтрокаПоказателяСчет, Выборка);
				
				ОбластьСтрокаПоказателяСчет.Область(1,4).Отступ = 0;
				
				ДокументРезультат.Вывести(ОбластьСтрокаПоказателяСчет, Выборка.Уровень());
				
				ЭтоПерваяСтрока = Ложь;
				
				ВывестиПоказатели(ДокументРезультат, ВыборкаПоВалютам, ВыборкаПоВалютам.Счет, ЭтоПерваяСтрока, СтрокаРазвернутогоСальдо, СтруктураОбщийИтог, СтруктураПараметров);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Вывод разворота счета по субконто
		Если СтрокаРазворотаСчета <> Неопределено Тогда
			
			ТекущийРазворачиваемыйСчет = СтрокаРазворотаСчета.Счет;
			СтрокаРазвернутогоСальдо   = Неопределено;
			СоотвПодчСчета=СтрокаРазворотаСчета.СоответсвиеСчетов;
			
			// Переменная, содержащая отбор по субконто
			ОтборСубконто = Неопределено;
			
			// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
			СдвигУровня = 0;
			
			// Флаг сброса сдвига уровня при выводе группировки по счету
			СброситьСдвигУровня = Истина;
			
			ВыборкаПоСчету = СтрокаРазворотаСчета.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, СтрокаРазворотаСчета.МассивГруппировок[0]);
			
			СтруктураПараметров.Вставить("ОбластьСтрокаСчет",           ОбластьСтрокаСчет);
			СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет", ОбластьСтрокаПоказателяСчет);
			СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
			
			ВывестиГруппировку(ВыборкаПоСчету, 0, СтрокаРазворотаСчета.МассивГруппировок, 
			Уровень, СдвигУровня, СброситьСдвигУровня, 
			Выборка.Счет, СтрокаРазвернутогоСальдо, 
			СтруктураОбщийИтог, СтруктураПараметров, Новый Соответствие);
			
		КонецЕсли;
		
		//+++
		Если (ПоСубсчетамИСубконто и Выборка.Счет.Уровень() > 0) или (НЕ ПоСубсчетамИСубконто) Тогда
			Состояние("Поиск соответствия счету: " + Выборка.Счет.Код);
			СтруктураКонвертации = МеждународныйУчет.ПреобразоватьСчетаБУвСчетМСФО(Выборка.Счет,,,,,Истина);
			СчетМеждународный = СтруктураКонвертации.Счет;
			КоличествоСтрок = 0;
			Если СчетМеждународный <> Неопределено Тогда
				ИтогоСуммаНачальныйОстатокДт = 0;
				ИтогоСуммаНачальныйОстатокКт = 0;
				ИтогоСуммаОборотДт = 0;
				ИтогоСуммаОборотКт = 0;
				ИтогоСуммаКонечныйОстатокДт = 0;
				ИтогоСуммаКонечныйОстатокКт = 0;
				
				Для каждого Сч Из СтруктураКонвертации.СтруктураСчетов Цикл
					СчетМежд = Сч.Значение;
					СтрокаТаблицыЗначений = ТЗМеждународный.Найти(СчетМежд,"Счет");
					Если СтрокаТаблицыЗначений <> Неопределено Тогда
						ОбластьСтрокаСчет1 = Макет.ПолучитьОбласть("Строка1|Счет");
						ОбластьСтрокаЧисла1 = Макет.ПолучитьОбласть("Строка1|Числа");
						ОбластьСтрокаСчет1.Параметры.СчетКод = СчетМежд.Код;
						ОбластьСтрокаСчет1.Параметры.СчетНаименование = СчетМежд.Наименование;

						// Заполнение параметров расшифровки
						ПараметрыОСВПоСчету = Новый Соответствие;
						ПараметрыОСВПоСчету.Вставить("ИмяОбъекта", "ОборотноСальдоваяВедомостьПоСчетуМеждународный");
						ПараметрыОСВПоСчету.Вставить("ЗаполнитьПоУмолчанию", Истина);
	                    ПараметрыОСВПоСчету.Вставить("Счет", СчетМежд);
						
						ПараметрыКарточкиСчета = Новый Соответствие;
						ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "КарточкаСчетаМеждународный");
						ПараметрыКарточкиСчета.Вставить("Счет", СчетМежд);

						ПараметрыОСВПоСчету1 = Новый Соответствие;
						ПараметрыОСВПоСчету1.Вставить("ИмяОбъекта", "ОборотноСальдоваяВедомостьПоСчетуБухМСФО");
						ПараметрыОСВПоСчету1.Вставить("ЗаполнитьПоУмолчанию", Истина);
	                    ПараметрыОСВПоСчету1.Вставить("Счет", Выборка.Счет);
						ПараметрыОСВПоСчету1.Вставить("СчетМеждународный", СчетМежд);
						
						СписокРасшифровки = Новый СписокЗначений;
						СписокРасшифровки.Добавить(ПараметрыОСВПоСчету1, "Оборотно-сальдовая ведомость по счетам (сравнение)");
						СписокРасшифровки.Добавить(ПараметрыОСВПоСчету, "Оборотно-сальдовая ведомость по счету " + СчетМежд);
						СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + СчетМежд);

						ОбластьСтрокаСчет1.Параметры.Расшифровка = СписокРасшифровки;					
						ДокументРезультат.Вывести(ОбластьСтрокаСчет1, Уровень+1);
						
						Выб = Новый Структура();
						Выб.Вставить("СуммаНачальныйОстатокДт", СтрокаТаблицыЗначений.СуммаНачальныйОстатокДт);
						Выб.Вставить("СуммаНачальныйОстатокКт", СтрокаТаблицыЗначений.СуммаНачальныйОстатокКт);
						Выб.Вставить("СуммаОборотДт", СтрокаТаблицыЗначений.СуммаОборотДт);
						Выб.Вставить("СуммаОборотКт", СтрокаТаблицыЗначений.СуммаОборотКт);
						Выб.Вставить("СуммаКонечныйОстатокДт", СтрокаТаблицыЗначений.СуммаКонечныйОстатокДт);
						Выб.Вставить("СуммаКонечныйОстатокКт", СтрокаТаблицыЗначений.СуммаКонечныйОстатокКт);
						СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", ОбластьСтрокаЧисла1);
						ВывестиПоказатели(ДокументРезультат, Выб, СчетМежд, Ложь, Неопределено, СтруктураОбщийИтог, СтруктураПараметров);
						СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", Макет.ПолучитьОбласть("Строка|Числа"));
						КоличествоСтрок = КоличествоСтрок + 1;
						
						ИтогоСуммаНачальныйОстатокДт = ИтогоСуммаНачальныйОстатокДт + СтрокаТаблицыЗначений.СуммаНачальныйОстатокДт;
						ИтогоСуммаНачальныйОстатокКт = ИтогоСуммаНачальныйОстатокКт + СтрокаТаблицыЗначений.СуммаНачальныйОстатокКт;
						ИтогоСуммаОборотДт = ИтогоСуммаОборотДт + СтрокаТаблицыЗначений.СуммаОборотДт;
						ИтогоСуммаОборотКт = ИтогоСуммаОборотКт + СтрокаТаблицыЗначений.СуммаОборотКт;
						ИтогоСуммаКонечныйОстатокДт = ИтогоСуммаКонечныйОстатокДт + СтрокаТаблицыЗначений.СуммаКонечныйОстатокДт;
						ИтогоСуммаКонечныйОстатокКт = ИтогоСуммаКонечныйОстатокКт + СтрокаТаблицыЗначений.СуммаКонечныйОстатокКт;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Вывод дельты
			Если КоличествоСтрок > 0 Тогда
				ОбластьСтрокаСчет2 = Макет.ПолучитьОбласть("Строка2|Счет");
				ОбластьСтрокаЧисла2 = Макет.ПолучитьОбласть("Строка2|Числа");
				ОбластьСтрокаСчет2.Параметры.СчетКод = "";
				ОбластьСтрокаСчет2.Параметры.СчетНаименование = "Разница:";
				
				ДокументРезультат.Вывести(ОбластьСтрокаСчет2, Уровень+1);
				
				Выб = Новый Структура();
				Выб.Вставить("СуммаНачальныйОстатокДт", Выборка.СуммаНачальныйОстатокДт - ИтогоСуммаНачальныйОстатокДт);
				Выб.Вставить("СуммаНачальныйОстатокКт", Выборка.СуммаНачальныйОстатокКт - ИтогоСуммаНачальныйОстатокКт);
				Выб.Вставить("СуммаОборотДт", Выборка.СуммаОборотДт - ИтогоСуммаОборотДт);
				Выб.Вставить("СуммаОборотКт", Выборка.СуммаОборотКт - ИтогоСуммаОборотКт);
				Выб.Вставить("СуммаКонечныйОстатокДт", Выборка.СуммаКонечныйОстатокДт - ИтогоСуммаКонечныйОстатокДт);
				Выб.Вставить("СуммаКонечныйОстатокКт", Выборка.СуммаКонечныйОстатокКт - ИтогоСуммаКонечныйОстатокКт);
				СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", ОбластьСтрокаЧисла2);
				ВывестиПоказатели(ДокументРезультат, Выб, "", Ложь, Неопределено, СтруктураОбщийИтог, СтруктураПараметров);
				СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", Макет.ПолучитьОбласть("Строка|Числа"));
			КонецЕсли;
		КонецЕсли;
		//---

	КонецЦикла;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	// Выведем итоговую строку
	ОбластьИтогиСчет = Макет.ПолучитьОбласть("Итоги|Счет");
	
	ДокументРезультат.Вывести(ОбластьИтогиСчет, 0);
	
	ЭтоПерваяСтрока = Ложь;

	ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока|Числа");
	ОбластьИтогиЧисла       = Макет.ПолучитьОбласть("Итоги|Числа");
	ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока|Счет");
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл

		Если НЕ Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Ресурсы[ИмяПоказателя].Балансовый Тогда
			Продолжить;
		КонецЕсли;

		Если ЭтоПерваяСтрока Тогда
			Область = ОбластьИтогиСтрокаЧисла
		Иначе
			Область = ОбластьИтогиЧисла;
		КонецЕсли;

		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		Область.Параметры.НачальныйОстатокДт = Формат(СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокДт"], ФорматПоказателя);
		Область.Параметры.НачальныйОстатокКт = Формат(СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокКт"], ФорматПоказателя);
		Область.Параметры.ОборотДт           = Формат(СтруктураОбщийИтог[ИмяПоказателя + "ОборотДт"], ФорматПоказателя);
		Область.Параметры.ОборотКт           = Формат(СтруктураОбщийИтог[ИмяПоказателя + "ОборотКт"], ФорматПоказателя);
		Область.Параметры.КонечныйОстатокДт  = Формат(СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокДт"], ФорматПоказателя);
		Область.Параметры.КонечныйОстатокКт  = Формат(СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокКт"], ФорматПоказателя);

		Если ЭтоПерваяСтрока Тогда
			ДокументРезультат.Вывести(ОбластьИтогиСтрокаСчет, 0);
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ЭтоПерваяСтрока = Истина;

	КонецЦикла;

	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");

	ДокументРезультат.Вывести(ИтогиПодвал, 0);
	
		
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;


	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Выводится по ширине листа
	ДокументРезультат.Автомасштаб   = Истина;

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НП = Новый НастройкаПериода;

// Константа - имя регистра бухгалтерии
ИмяРегистраБухгалтерии = "Хозрасчетный";

ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200));

МассивБулево        = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

ОписаниеТиповБулевоИСтрока = Новый ОписаниеТипов(ОписаниеТиповСтрока, МассивБулево);

МассивТаблицаЗначений        = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

МассивСчет = Новый Массив;
МассивСчет.Добавить(ТипЗнч(ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].ПустаяСсылка()));

ОписаниеТиповСчет  = Новый ОписаниеТипов(МассивСчет);

// Создание структуры реквизитов - таблиц
ПравилаВыводаИтогов.Колонки.Очистить();
ПравилаВыводаИтогов.Колонки.Добавить("Счет",     ОписаниеТиповСчет);
ПравилаВыводаИтогов.Колонки.Добавить("Субсчета", ОписаниеТиповБулево);
ПравилаВыводаИтогов.Колонки.Добавить("ПредставлениеРазворотПоСубконто", ОписаниеТиповСтрока);
ПравилаВыводаИтогов.Колонки.Добавить("РазворотПоСубконто", ОписаниеТиповТаблицаЗначений);

ПравилаРазвернутогоСальдо.Колонки.Очистить();
ПравилаРазвернутогоСальдо.Колонки.Добавить("Счет",     ОписаниеТиповСчет);
ПравилаРазвернутогоСальдо.Колонки.Добавить("Субсчета", ОписаниеТиповБулево);
ПравилаРазвернутогоСальдо.Колонки.Добавить("ПредставлениеРазворотПоСубконто", ОписаниеТиповСтрока);
ПравилаРазвернутогоСальдо.Колонки.Добавить("РазворотПоСубконто", ОписаниеТиповТаблицаЗначений);
#КонецЕсли
