#Если Клиент Тогда

Перем БухИтогиМеждународный;
Перем ИмяРегистраБухгалтерии Экспорт;

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ
	|	ОстаткиИОбороты.Счет КАК Счет";
	
	ТекстВнеш = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Счет, Счет.Представление КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст +	",
		|	ОстаткиИОбороты.Валюта КАК Валюта";
		
		ТекстВнеш = ТекстВнеш +	", Валюта,
		|	Валюта.Представление КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст +	",
	|	ОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	ОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
	|	ОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт";
	
	ТекстВнеш = ТекстВнеш +	",
	|	СуммаНачальныйОстатокДт,
	|	СуммаНачальныйОстатокКт,
	|	СуммаКонечныйОстатокДт,
	|	СуммаКонечныйОстатокКт,
	|	СуммаОборотДт,
	|	СуммаОборотКт";
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	ОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалютнаяСуммаНачальныйОстатокДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалютнаяСуммаНачальныйОстатокКт,
		|	ОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ВалютнаяСуммаОборотДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ВалютнаяСуммаОборотКт,
		|	ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалютнаяСуммаКонечныйОстатокДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК ВалютнаяСуммаКонечныйОстатокКт
		|	";
		
		ТекстВнеш = ТекстВнеш +	",
		|	ВалютнаяСуммаНачальныйОстатокДт,
		|	ВалютнаяСуммаНачальныйОстатокКт,
		|	ВалютнаяСуммаОборотДт,
		|	ВалютнаяСуммаОборотКт,
		|	ВалютнаяСуммаКонечныйОстатокДт,
		|	ВалютнаяСуммаКонечныйОстатокКт
		|	";
	КонецЕсли;
	
	Если ПоКоличеству Тогда
		
		Текст = Текст +	",
		|	ОстаткиИОбороты.КоличествоНачальныйОстатокДт КАК КоличествоНачальныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоНачальныйОстатокКт КАК КоличествоНачальныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоОборотДт КАК КоличествоОборотДт,
		|	ОстаткиИОбороты.КоличествоОборотКт КАК КоличествоОборотКт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК КоличествоКонечныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК КоличествоКонечныйОстатокКт
		|	";
		
		ТекстВнеш = ТекстВнеш +	",
		|	КоличествоНачальныйОстатокДт,
		|	КоличествоНачальныйОстатокКт,
		|	КоличествоОборотДт,
		|	КоличествоОборотКт,
		|	КоличествоКонечныйОстатокДт,
		|	КоличествоКонечныйОстатокКт
		|	";
	КонецЕсли;
	
	ТекстПоля = "";
	ТекстПоляВнеш = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		ТипыСубконто = ВидСубконто.ВидСубконто.ТипЗначения;
		СтрПолеЗапроса =  "";
		Выб = "";
		ВыбИначе = "";
		
		Для каждого Элемент Из ТипыСубконто.Типы() Цикл
			Если Метаданные.НайтиПоТипу(Элемент)<>Неопределено Тогда
				ИмяТаблицы = Метаданные.НайтиПоТипу(Элемент).ПолноеИмя();
				Выб = Выб + "КОГДА #Поле ССЫЛКА "+ИмяТаблицы+" ТОГДА ВЫРАЗИТЬ( #Поле КАК ("+ИмяТаблицы+"))";
			Иначе
				// Для примитивных типов придется добавлять само значение
				ВыбИначе = " #Поле ";
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(Выб) Тогда
			Если НЕ ПустаяСтрока(ВыбИначе) Тогда
				СтрПоле = "ВЫБОР "+Выб+" ИНАЧЕ "+ВыбИначе+ " КОНЕЦ";
			Иначе
				СтрПоле = "ВЫБОР "+Выб+" КОНЕЦ";
			КонецЕсли;
		Иначе
			СтрПоле = ВыбИначе;
		КонецЕсли;
		
		ТекстПоля = ТекстПоля + ", " + СтрЗаменить(СтрПоле, "#Поле"," ОстаткиИОбороты.Субконто" +Сч)+" КАК Субконто"+Сч;
		ТекстПоляВнеш = ТекстПоляВнеш + ", Субконто"+Сч;
	
		ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
		ТекстИтоги = ТекстИтоги + ", Субконто"+Сч;
		
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	Текст = Текст +	ТекстПоля;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		Текст = Текст +	"
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля, 2) + "}";
		
		ТекстВнеш = ТекстВнеш +	"
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоляВнеш, 2) + "}";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		ТекстОтбор = "{"+Сред(ТекстОтбор, 2)+"}";
	КонецЕсли;
	
	СтрокаОграниченийПоРеквизитам = "";
	БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	
	Текст = ТекстВнеш +" ИЗ (
	|"+ Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	|, " + СтрокаОграниченийПоРеквизитам + ТекстОтбор + ") КАК ОстаткиИОбороты
	|) Подзапрос
	|УПОРЯДОЧИТЬ ПО Счет.Порядок ";
	
	Если Не ПустаяСтрока(ТекстПоляВнеш) Тогда
		Текст = Текст + "
		| {УПОРЯДОЧИТЬ ПО "+Сред(ТекстПоляВнеш,2)+"}";
	КонецЕсли;
	
	Текст = Текст + "
	|
	|ИТОГИ СУММА(СуммаНачальныйОстатокДт), СУММА(СуммаНачальныйОстатокКт), СУММА(СуммаКонечныйОстатокДт), СУММА(СуммаКонечныйОстатокКт), СУММА(СуммаОборотДт), СУММА(СуммаОборотКт) ";
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	СУММА(ВалютнаяСуммаНачальныйОстатокДт), СУММА(ВалютнаяСуммаНачальныйОстатокКт), СУММА(ВалютнаяСуммаОборотДт), СУММА(ВалютнаяСуммаОборотКт), СУММА(ВалютнаяСуммаКонечныйОстатокДт), СУММА(ВалютнаяСуммаКонечныйОстатокКт) ";
	КонецЕсли;
	
	Если ПоКоличеству Тогда
	
		Текст = Текст +	",
		|	СУММА(КоличествоНачальныйОстатокДт), СУММА(КоличествоНачальныйОстатокКт), СУММА(КоличествоОборотДт), СУММА(КоличествоОборотКт), СУММА(КоличествоКонечныйОстатокДт), СУММА(КоличествоКонечныйОстатокКт) ";
	
	КонецЕсли; 
	
	Текст = Текст +	"
	|	ПО ОБЩИЕ ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст +	",
		|	Счет ИЕРАРХИЯ КАК Счет "
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	Валюта ";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст +	"
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги, 2) + "}";
	КонецЕсли;
	
	Текст = Текст + "
	| АВТОУПОРЯДОЧИВАНИЕ ";
	
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
	ПостроительОтчета.Параметры.Вставить("Организация", Организация);
		
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
				
КонецПроцедуры

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = БухгалтерскиеОтчеты.СформироватьСтрокуВыводаПараметровПоДатам(ДатаНач, ДатаКон);
	
	Макет = ПолучитьМакет("Макет");
	Итоги = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	Если ЗначениеЗаполнено(Организация) Тогда
		
		ОписаниеПериода = ОписаниеПериода + " Организация: "+ Организация + ".";

	Иначе
		ОписаниеПериода = ОписаниеПериода + " По всем организациям.";
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	
	Если ПоВалютам Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
	
	КонецЕсли; 

	Если ПоКоличеству Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", количество";
	
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетам Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субсчетам, "
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субконто ";
	КонецЕсли;

	ТекстПроИтоги = ТекстПроИтоги + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);

	Заголовок = "Оборотно-сальдовая ведомость по счетам " + ?(ЗначениеЗаполнено(Счет), Счет, " не выбран счет") + " и " + СчетМеждународный;

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок              = Заголовок;

	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

// Выводит группировку при развороте счета по субсчетам и/или субконто
//
// Параметры:
//	Выборка         - выборка из результата запроса по выводимой группировке,
//	ИндексТекущейГруппировки - индекс выводимой группировки в массиве группировок,
//	Уровень 		- уровень  группировки верхнего уровня
//	СдвигУровня     - сдвиг уровня группировки отчета относительно уровня группировки запроса,
//	СброситьСдвигУровня - признак сброса сдвига уровня,
//	ПоВалютам       - признак вывода валют и валютных сумм,
//	СтрокаРазвернутогоСальдо - строка таблицы значений с развернутым сальдо по текущему счету.
//	СтруктураОбщийИтог - структура, в которой накапливаются общие итоги
//	СтруктураПараметров - структура, содержащая неизменные для разворота счета параметры:
//	                      Области макета табличного документа, линии, уровень группировки, 
//	                      с которой начался вывод отчета.
//
Процедура ВывестиГруппировку(Выборка, Знач ИндексТекущейГруппировки, СдвигУровня, 
	СброситьСдвигУровня, СтруктураПараметров, ОтборСубконто)
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Группировка() = "Счет" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			БухгалтерскиеОтчеты.ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ЭтотОбъект, ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
		ИначеЕсли Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "Субконто" Тогда
			
			Если Выборка[Выборка.Группировка()]=Null Тогда
				Продолжить;
			КонецЕсли;
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			Попытка
				ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[Выборка.Группировка()+"Представление"];
			Исключение
				ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[Выборка.Группировка()];
			КонецПопытки;
			
			БухгалтерскиеОтчеты.ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ЭтотОбъект, ВыводимаяОбласть, Выборка, СтруктураПараметров);
			
		Иначе
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[Выборка.Группировка()];
			
		КонецЕсли;
		
		// При выводе субсчетов не делаем отступы
		Если Выборка.Группировка() = "Счет" Тогда
			
			Если СброситьСдвигУровня Тогда
				СброситьСдвигУровня = Ложь;
				СдвигУровня = 0;
			КонецЕсли;
			
			Отступ = 0;
			СдвигУровня = Выборка.Уровень();
			
		Иначе
			
			Отступ = Макс(Выборка.Уровень() - СдвигУровня - 1, 0);
			СброситьСдвигУровня = Истина;
			
		КонецЕсли;
		
		// Не выводим счета более высокого уровня
		Если Выборка.Группировка() = "Счет"
			И СтруктураПараметров.СоответствиеСчетовПредков[Выборка.Счет] <> Неопределено Тогда
			
			Перейти ~М1;
			
		КонецЕсли;
		
		ДокументРезультат = СтруктураПараметров.ДокументРезультат;
		
		ВыводимаяОбласть.Область("R1C2").Отступ = Отступ;
		
		ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень() );
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии И 
			
			Выборка.Группировка() <> "Счет" Тогда
			
			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2).Шрифт = СтруктураПараметров.ШрифтГрупп;
			
		КонецЕсли;
		
		БухгалтерскиеОтчеты.ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров, Счет);
		
		// Если по валютам,
		Если ПоВалютам Тогда
			
			ВыборкаПоВалютам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
			Пока ВыборкаПоВалютам.Следующий() Цикл
				
				ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
				
				ВыводимаяОбласть.Параметры.Заполнить(Выборка);
				ВыводимаяОбласть.Параметры.СубконтоПредставление = "Валюта " + ВыборкаПоВалютам.ВалютаПредставление;
				
				ВыводимаяОбласть.Область("R1C2").Отступ = Отступ+1;
				
				// Заполнение параметров расшифровки
				БухгалтерскиеОтчеты.ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ЭтотОбъект, ВыводимаяОбласть, Выборка, СтруктураПараметров);
				
				ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень());
												
				БухгалтерскиеОтчеты.ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров, Счет);
				
			КонецЦикла;
		КонецЕсли;

		//+MAV
		Макет = ПолучитьМакет("Макет");
		ВыводимаяОбласть = Макет.ПолучитьОбласть("СтрокаПоказателяМСФО|Счет");
		
		БухгалтерскиеОтчеты.ЗаполнитьРасшифровкуДляСчета(ЭтотОбъект, ВыводимаяОбласть, Выборка, СтруктураПараметров, "Международный",
			СчетМеждународный, Строка(СчетМеждународный));
			
		//--
		ВыводимаяОбласть.Параметры.СубконтоПредставление = "По МСФО";
		ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень());

		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("Счет", СчетМеждународный);
		Для Ном = 1 по 3 Цикл
			
			Попытка
				Суб = Выборка["Субконто"+Ном];
				Если Суб <> Null Тогда
					СтруктураДанных.Вставить("Субконто" + Ном, Суб);
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЦикла;

		СтруктураПок = Новый Структура();
		СтруктураПок.Вставить("СуммаНачальныйОстатокДт", БухИтогиМеждународный.ПолучитьИтог("СуммаНачальныйОстатокДт", СтруктураДанных));
		СтруктураПок.Вставить("СуммаНачальныйОстатокКт", БухИтогиМеждународный.ПолучитьИтог("СуммаНачальныйОстатокКт", СтруктураДанных));
		СтруктураПок.Вставить("СуммаОборотДт", БухИтогиМеждународный.ПолучитьИтог("СуммаОборотДт", СтруктураДанных));
		СтруктураПок.Вставить("СуммаОборотКт", БухИтогиМеждународный.ПолучитьИтог("СуммаОборотКт", СтруктураДанных));
		СтруктураПок.Вставить("СуммаКонечныйОстатокДт", БухИтогиМеждународный.ПолучитьИтог("СуммаКонечныйОстатокДт", СтруктураДанных));
		СтруктураПок.Вставить("СуммаКонечныйОстатокКт", БухИтогиМеждународный.ПолучитьИтог("СуммаКонечныйОстатокКт", СтруктураДанных));
		
		Если ПоКоличеству Тогда
			СтруктураПок.Вставить("КоличествоНачальныйОстатокДт", БухИтогиМеждународный.ПолучитьИтог("КоличествоНачальныйОстатокДт", СтруктураДанных));
			СтруктураПок.Вставить("КоличествоНачальныйОстатокКт", БухИтогиМеждународный.ПолучитьИтог("КоличествоНачальныйОстатокКт", СтруктураДанных));
			СтруктураПок.Вставить("КоличествоОборотДт", БухИтогиМеждународный.ПолучитьИтог("КоличествоОборотДт", СтруктураДанных));
			СтруктураПок.Вставить("КоличествоОборотКт", БухИтогиМеждународный.ПолучитьИтог("КоличествоОборотКт", СтруктураДанных));
			СтруктураПок.Вставить("КоличествоКонечныйОстатокДт", БухИтогиМеждународный.ПолучитьИтог("КоличествоКонечныйОстатокДт", СтруктураДанных));
			СтруктураПок.Вставить("КоличествоКонечныйОстатокКт", БухИтогиМеждународный.ПолучитьИтог("КоличествоКонечныйОстатокКт", СтруктураДанных));
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", Макет.ПолучитьОбласть("СтрокаПоказателяМСФО|Числа"));
		СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", Макет.ПолучитьОбласть("СтрокаМСФО|Числа"));
		
		БухгалтерскиеОтчеты.ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров, СчетМеждународный, СтруктураПок);
		
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", Макет.ПолучитьОбласть("СтрокаПоказателя|Числа"));
		СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", Макет.ПолучитьОбласть("Строка|Числа"));
		
		//Вывод разницы
		ВыводимаяОбласть = Макет.ПолучитьОбласть("Разница|Счет");
		ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень());
		
		СтруктураПок.Вставить("СуммаНачальныйОстатокДт", Выборка.СуммаНачальныйОстатокДт  - СтруктураПок.СуммаНачальныйОстатокДт);
		СтруктураПок.Вставить("СуммаНачальныйОстатокКт", Выборка.СуммаНачальныйОстатокКт  - СтруктураПок.СуммаНачальныйОстатокКт);
		СтруктураПок.Вставить("СуммаОборотДт", Выборка.СуммаОборотДт  - СтруктураПок.СуммаОборотДт);
		СтруктураПок.Вставить("СуммаОборотКт", Выборка.СуммаОборотКт  - СтруктураПок.СуммаОборотКт);
		СтруктураПок.Вставить("СуммаКонечныйОстатокДт", Выборка.СуммаКонечныйОстатокДт  - СтруктураПок.СуммаКонечныйОстатокДт);
		СтруктураПок.Вставить("СуммаКонечныйОстатокКт", Выборка.СуммаКонечныйОстатокКт  - СтруктураПок.СуммаКонечныйОстатокКт);
		
		Если ПоКоличеству Тогда
			СтруктураПок.Вставить("КоличествоНачальныйОстатокДт", Выборка.КоличествоНачальныйОстатокДт  - СтруктураПок.КоличествоНачальныйОстатокДт);
			СтруктураПок.Вставить("КоличествоНачальныйОстатокКт", Выборка.КоличествоНачальныйОстатокКт  - СтруктураПок.КоличествоНачальныйОстатокКт);
			СтруктураПок.Вставить("КоличествоОборотДт", Выборка.КоличествоОборотДт  - СтруктураПок.КоличествоОборотДт);
			СтруктураПок.Вставить("КоличествоОборотКт", Выборка.КоличествоОборотКт  - СтруктураПок.КоличествоОборотКт);
			СтруктураПок.Вставить("КоличествоКонечныйОстатокДт", Выборка.КоличествоКонечныйОстатокДт  - СтруктураПок.КоличествоКонечныйОстатокДт);
			СтруктураПок.Вставить("КоличествоКонечныйОстатокКт", Выборка.КоличествоКонечныйОстатокКт  - СтруктураПок.КоличествоКонечныйОстатокКт);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", Макет.ПолучитьОбласть("Разница|Числа"));
		СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", Макет.ПолучитьОбласть("Разница2|Числа"));
		
		БухгалтерскиеОтчеты.ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров, СчетМеждународный, СтруктураПок);
		
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", Макет.ПолучитьОбласть("СтрокаПоказателя|Числа"));
		СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", Макет.ПолучитьОбласть("Строка|Числа"));
		//-MAV
		
~М1:
		// Если есть следующая группировка, то выбираем ее
		Если ИндексТекущейГруппировки + 1 < СтруктураПараметров.МассивГруппировок.Количество() Тогда
			
			КопияОтборСубконто = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
				
				КопияОтборСубконто.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
			КонецЦикла; 

			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, СтруктураПараметров.МассивГруппировок[ИндексТекущейГруппировки + 1]), 
				ИндексТекущейГруппировки + 1, СдвигУровня, 
				СброситьСдвигУровня, СтруктураПараметров, КопияОтборСубконто);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет бухгалтерского учета!");
		Возврат;
	КонецЕсли;

	Если СчетМеждународный.Пустая() Тогда
		Предупреждение("Не выбран счет международного учета!");
		Возврат;
	КонецЕсли;
	
	ОграничениеПоДатамКорректно = БухгалтерскиеОтчеты.ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;
	
	Если Счет.ВидыСубконто.Количество() > СчетМеждународный.ВидыСубконто.Количество() Тогда
		Предупреждение("У счета бухгалтерского учета большее кол-во субконто, чем у международного!");
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();

	Макет       = ПолучитьМакет("Макет");
	Итоги       = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	// Наклонный шрифт групп
	ШрифтГрупп = Новый Шрифт(Макет.Область("СтрокаПоказателя|Счет").Шрифт,,,,Истина);

	// Вывод заголовка отчета
	БухгалтерскиеОтчеты.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	НаличиеДублей = БухгалтерскиеОтчеты.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	Если НаличиеДублей Тогда
		Возврат;
	КонецЕсли;

	МассивГруппировок = СформироватьМассивГруппировок();

	МассивПоказателей = СформироватьМассивПоказателей();
	
	// Формат показателей
	СтруктураФорматовПоказателей = БухгалтерскиеОтчеты.СформироватьСтруктуруФорматовПоказателей(МассивПоказателей, ИмяРегистраБухгалтерии);
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач", ДатаНач);
	
	Если ДатаКон <> '00010101000000' Тогда
		ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон));
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаКон", ДатаКон);
	КонецЕсли;

	ПостроительОтчета.Параметры.Вставить("Организация", Организация);
	
	ПостроительОтчета.Порядок.Очистить();
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		Измерение = ПостроительОтчета.ИзмеренияСтроки[Инд];
		ПостроительОтчета.Порядок.Добавить(Измерение.ПутьКДанным);
	КонецЦикла;
	
	ПостроительОтчета.Выполнить();
	
	РезультатЗапроса = ПостроительОтчета.Результат;

	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);

	ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока|Числа");
	ОбластьИтогиЧислаМакет  = Макет.ПолучитьОбласть("Итоги|Числа");
	ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока|Счет");
	ОбластьИтогиСчет        = Макет.ПолучитьОбласть("Итоги|Счет");
	ОбластьСтрокаСчет       = Макет.ПолучитьОбласть("Строка|Счет");
	ОбластьСтрокаЧисла      = Макет.ПолучитьОбласть("Строка|Числа");
	ОбластьСтрокаПоказателяСчет  = Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");
	ОбластьСтрокаПоказателяЧисла = Макет.ПолучитьОбласть("СтрокаПоказателя|Числа");

	СоответствиеСчетовПредков = БухгалтерскиеОтчеты.ВернутьСоответвиеСчетовПредков(Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя, Счет);
	
	СтруктураПараметровОграничений = БухгалтерскиеОтчеты.СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, ПоВалютам);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрокаСчет", ОбластьСтрокаСчет);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет",ОбластьСтрокаПоказателяСчет);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("ШрифтГрупп", ШрифтГрупп);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", ОбластьСтрокаПоказателяЧисла);
	СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", ОбластьСтрокаЧисла);
	СтруктураПараметров.Вставить("ФорматПоказателей", СтруктураФорматовПоказателей);
	СтруктураПараметров.Вставить("НетЛинии", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);
	СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
	СтруктураПараметров.Вставить("СоответствиеСчетовПредков", СоответствиеСчетовПредков);
	СтруктураПараметров.Вставить("СтруктураОграничений", СтруктураПараметровОграничений);

	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	//+MAV
	// Бухгалтерские итоги по счетам, без аналитики
	Итоги = "НачальныйОстатокДт,
	        |НачальныйОстатокКт,
	        |КонечныйОстатокДт,
	        |КонечныйОстатокКт,
			|ОборотДт,
			|ОборотКт";

	// Бухгалтерские итоги по счетам, без аналитики
	МассивСубконтоМежд = Новый Массив();
	СтрГруппировок = "Счет";
	Кол = 1;
	Для Каждого ВидСубконто Из СчетМеждународный.ВидыСубконто Цикл
		МассивСубконтоМежд.Добавить(ВидСубконто.ВидСубконто);
		СтрГруппировок = СтрГруппировок + "," + "Субконто" + Кол;
		Кол = Кол + 1;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		ОграничениеПоОрганизации = Неопределено;
		СтрокаОрганизации = "";
	
	Иначе
		
		ОграничениеПоОрганизации = "Организация";
		СтрокаОрганизации = Организация;	
		
	КонецЕсли;
	
	БухИтогиМеждународный.РассчитатьИтоги("Международный", Итоги, "Сумма,Количество", СтрГруппировок, 
		ПостроительОтчета.Параметры.ДатаНач, ПостроительОтчета.Параметры.ДатаКон, , СчетМеждународный, МассивСубконтоМежд, , , ОграничениеПоОрганизации, 
		СтрокаОрганизации);
		
	//-MAV
	
	Если МассивГруппировок.Количество() > 0 Тогда
		
		ВывестиГруппировку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[0]), 
							0, 0, Истина, 
							СтруктураПараметров, Новый Соответствие);
	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");

	// Выведем общие итоги
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Выборка.Следующий();
	ВыводимаяОбласть = ОбластьИтогиСчет;
	ДокументРезультат.Вывести(ВыводимаяОбласть, 1);
	
	БухгалтерскиеОтчеты.ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Выборка, ИмяРегистраБухгалтерии, МассивПоказателей, СтруктураФорматовПоказателей,
		Счет, ОбластьИтогиСтрокаЧисла, ОбластьИтогиЧислаМакет, ОбластьИтогиСтрокаСчет, ДокументРезультат);

	ДокументРезультат.Вывести(ИтогиПодвал, 1);
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = СформироватьОбщуюСтруктуруДляРасшифровки();
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету " + ИмяРегистраБухгалтерии;

КонецПроцедуры // СформироватьОтчет()

//Функция возвращает массив показателей для отчета
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Сумма");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;

	Возврат МассивПоказателей;
		
КонецФункции

//Функция возвращает общую структуру для расшифровки
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	
	НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

//Функция возвращает массив группировок для отчета
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	ПоВалютам = Счет.Валютный; 
	
	ПоКоличеству = Счет.Количественный;
	
	ПоСубсчетам = Истина;
	
	ОбновитьЗапросПостроителю();
	
	БухгалтерскиеОтчеты.СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Счет);
	
КонецПроцедуры

//Процедура обновляет запрос построителю отчетов с сохранением параметров отбора
Процедура ОбновитьЗапросПостроителю()
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	ЗаполнитьНачальныеНастройки();
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);	
	
КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = БухгалтерскиеОтчеты.СоздатьПоСтруктуреСоответствие(СтруктураПараметров); 

	Счет = Параметры["Счет"];
	СчетМеждународный = Параметры["СчетМеждународный"];
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	
	БухгалтерскиеОтчеты.ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);

КонецПроцедуры

ИмяРегистраБухгалтерии = "Хозрасчетный";

БухИтогиМеждународный = Обработки.БухгалтерскиеИтоги.Создать();
#КонецЕсли