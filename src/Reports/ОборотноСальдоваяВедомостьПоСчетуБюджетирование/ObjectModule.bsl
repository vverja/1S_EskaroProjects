#Если Клиент Тогда

Перем ИмяРегистраБухгалтерии Экспорт;

Перем СоответсвиеСчетов;

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ
	|	ОстаткиИОбороты.Счет КАК Счет";
	
	ТекстВнеш = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Счет, Счет.Представление КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст +	",
		|	ОстаткиИОбороты.Валюта КАК Валюта";
		
		ТекстВнеш = ТекстВнеш +	", Валюта,
		|	Валюта.Представление КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст +	",
	|	ОстаткиИОбороты.СуммаУпрНачальныйОстатокДт КАК СуммаУпрНачальныйОстатокДт,
	|	ОстаткиИОбороты.СуммаУпрНачальныйОстатокКт КАК СуммаУпрНачальныйОстатокКт,
	|	ОстаткиИОбороты.СуммаУпрКонечныйОстатокДт КАК СуммаУпрКонечныйОстатокДт,
	|	ОстаткиИОбороты.СуммаУпрКонечныйОстатокКт КАК СуммаУпрКонечныйОстатокКт,
	|	ОстаткиИОбороты.СуммаУпрОборотДт КАК СуммаУпрОборотДт,
	|	ОстаткиИОбороты.СуммаУпрОборотКт КАК СуммаУпрОборотКт";
	
	ТекстВнеш = ТекстВнеш +	",
	|	СуммаУпрНачальныйОстатокДт,
	|	СуммаУпрНачальныйОстатокКт,
	|	СуммаУпрКонечныйОстатокДт,
	|	СуммаУпрКонечныйОстатокКт,
	|	СуммаУпрОборотДт,
	|	СуммаУпрОборотКт";
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	ОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалютнаяСуммаНачальныйОстатокДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалютнаяСуммаНачальныйОстатокКт,
		|	ОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ВалютнаяСуммаОборотДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ВалютнаяСуммаОборотКт,
		|	ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалютнаяСуммаКонечныйОстатокДт,
		|	ОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК ВалютнаяСуммаКонечныйОстатокКт
		|	";
		
		ТекстВнеш = ТекстВнеш +	",
		|	ВалютнаяСуммаНачальныйОстатокДт,
		|	ВалютнаяСуммаНачальныйОстатокКт,
		|	ВалютнаяСуммаКонечныйОстатокДт,
		|	ВалютнаяСуммаКонечныйОстатокКт,
		|	ВалютнаяСуммаОборотДт,
		|	ВалютнаяСуммаОборотКт";
		
	КонецЕсли;
	
	Если ВВалютеСценария Тогда
		
		Текст = Текст +	",
		|	ОстаткиИОбороты.СуммаСценарияНачальныйОстатокДт КАК СуммаСценарияНачальныйОстатокДт,
		|	ОстаткиИОбороты.СуммаСценарияНачальныйОстатокКт КАК СуммаСценарияНачальныйОстатокКт,
		|	ОстаткиИОбороты.СуммаСценарияКонечныйОстатокДт КАК СуммаСценарияКонечныйОстатокДт,
		|	ОстаткиИОбороты.СуммаСценарияКонечныйОстатокКт КАК СуммаСценарияКонечныйОстатокКт,
		|	ОстаткиИОбороты.СуммаСценарияОборотДт КАК СуммаСценарияОборотДт,
		|	ОстаткиИОбороты.СуммаСценарияОборотКт КАК СуммаСценарияОборотКт";
		
		ТекстВнеш = ТекстВнеш +	",
		|	СуммаСценарияНачальныйОстатокДт,
		|	СуммаСценарияНачальныйОстатокКт,
		|	СуммаСценарияКонечныйОстатокДт,
		|	СуммаСценарияКонечныйОстатокКт,
		|	СуммаСценарияОборотДт,
		|	СуммаСценарияОборотКт";
		
	КонецЕсли;
	
	Если ПоКоличеству Тогда
		
		Текст = Текст +	",
		|	ОстаткиИОбороты.КоличествоНачальныйОстатокДт КАК КоличествоНачальныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоНачальныйОстатокКт КАК КоличествоНачальныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоОборотДт КАК КоличествоОборотДт,
		|	ОстаткиИОбороты.КоличествоОборотКт КАК КоличествоОборотКт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК КоличествоКонечныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК КоличествоКонечныйОстатокКт
		|	";
		
		ТекстВнеш = ТекстВнеш +	",
		|	КоличествоНачальныйОстатокДт,
		|	КоличествоНачальныйОстатокКт,
		|	КоличествоОборотДт,
		|	КоличествоОборотКт,
		|	КоличествоКонечныйОстатокДт,
		|	КоличествоКонечныйОстатокКт
		|	";
	КонецЕсли;
	
	ТекстПоля = "";
	ТекстПоляВнеш = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		ТипыСубконто = ВидСубконто.ВидСубконто.ТипЗначения;
		СтрПолеЗапроса =  "";
		Выб = "";
		ВыбИначе = "";
		
		Для каждого Элемент Из ТипыСубконто.Типы() Цикл
			Если Метаданные.НайтиПоТипу(Элемент)<>Неопределено Тогда
				ИмяТаблицы = Метаданные.НайтиПоТипу(Элемент).ПолноеИмя();
				Выб = Выб + "КОГДА #Поле ССЫЛКА "+ИмяТаблицы+" ТОГДА ВЫРАЗИТЬ( #Поле КАК ("+ИмяТаблицы+"))";
			Иначе
				// Для примитивных типов придется добавлять само значение
				ВыбИначе = " #Поле ";
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(Выб) Тогда
			Если НЕ ПустаяСтрока(ВыбИначе) Тогда
				СтрПоле = "ВЫБОР "+Выб+" ИНАЧЕ "+ВыбИначе+ " КОНЕЦ";
			Иначе
				СтрПоле = "ВЫБОР "+Выб+" КОНЕЦ";
			КонецЕсли;
		Иначе
			СтрПоле = ВыбИначе;
		КонецЕсли;
		
		ТекстПоля = ТекстПоля + ", " + СтрЗаменить(СтрПоле, "#Поле"," ОстаткиИОбороты.Субконто" +Сч)+" КАК Субконто"+Сч;
		ТекстПоляВнеш = ТекстПоляВнеш + ", Субконто"+Сч;
	
		ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
		ТекстИтоги = ТекстИтоги + ", Субконто"+Сч;
		
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	Текст = Текст +	ТекстПоля;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		Текст = Текст +	"
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля, 2) + "}";
		
		ТекстВнеш = ТекстВнеш +	"
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоляВнеш, 2) + "}";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		ТекстОтбор = "{"+Сред(ТекстОтбор, 2)+"}";
	КонецЕсли;
	
	СтрокаОграниченийПоРеквизитам = "";
	БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Сценарий", Сценарий);
	
	Текст = ТекстВнеш +" ИЗ (
	|"+ Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	|, " + СтрокаОграниченийПоРеквизитам + ТекстОтбор + ") КАК ОстаткиИОбороты
	|) Подзапрос
	|УПОРЯДОЧИТЬ ПО Счет.Порядок ";
	
	Если Не ПустаяСтрока(ТекстПоляВнеш) Тогда
		Текст = Текст + "
		| {УПОРЯДОЧИТЬ ПО "+Сред(ТекстПоляВнеш,2)+"}";
	КонецЕсли;
	
	Текст = Текст + "
	|ИТОГИ СУММА(СуммаУпрНачальныйОстатокДт), СУММА(СуммаУпрНачальныйОстатокКт), СУММА(СуммаУпрКонечныйОстатокДт), СУММА(СуммаУпрКонечныйОстатокКт), СУММА(СуммаУпрОборотДт), СУММА(СуммаУпрОборотКт) ";
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	СУММА(ВалютнаяСуммаНачальныйОстатокДт), СУММА(ВалютнаяСуммаНачальныйОстатокКт), СУММА(ВалютнаяСуммаОборотДт), СУММА(ВалютнаяСуммаОборотКт), СУММА(ВалютнаяСуммаКонечныйОстатокДт), СУММА(ВалютнаяСуммаКонечныйОстатокКт) ";
	КонецЕсли;
	
	Если ВВалютеСценария Тогда
		
		Текст = Текст +	",
		|	СУММА(СуммаСценарияНачальныйОстатокДт), СУММА(СуммаСценарияНачальныйОстатокКт), СУММА(СуммаСценарияОборотДт), СУММА(СуммаСценарияОборотКт), СУММА(СуммаСценарияКонечныйОстатокДт), СУММА(СуммаСценарияКонечныйОстатокКт) ";
		
	КонецЕсли;
	
	Если ПоКоличеству Тогда
	
		Текст = Текст +	",
		|	СУММА(КоличествоНачальныйОстатокДт), СУММА(КоличествоНачальныйОстатокКт), СУММА(КоличествоОборотДт), СУММА(КоличествоОборотКт), СУММА(КоличествоКонечныйОстатокДт), СУММА(КоличествоКонечныйОстатокКт) ";
	
	КонецЕсли; 
	
	Текст = Текст +	"
	|	ПО ОБЩИЕ ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст +	",
		|	Счет ИЕРАРХИЯ КАК Счет "
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	Валюта ";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст +	"
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги, 2) + "}";
	КонецЕсли;
	
	Текст = Текст + "
	|АВТОУПОРЯДОЧИВАНИЕ ";
	
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
			
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
		
КонецПроцедуры

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = БухгалтерскиеОтчеты.СформироватьСтрокуВыводаПараметровПоДатам(ДатаНач, ДатаКон);
	
	Макет = ПолучитьМакет("Макет");
	Итоги = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		ОписаниеПериода = ОписаниеПериода + " По фактическим данным.";
	Иначе
		ОписаниеПериода = ОписаниеПериода + " Сценарий планирования: " + Сценарий + ".";
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода + " " + Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Представление();

	ТекстПроСписокПоказателей = "Выводимые данные: сумма";
	
	Если ПоВалютам Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
	
	КонецЕсли; 

	Если ПоКоличеству Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", количество";
	
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетам Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субсчетам, "
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субконто ";
	КонецЕсли;

	ТекстПроИтоги = ТекстПроИтоги + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);

	Заголовок = "Оборотно-сальдовая ведомость по счету " + ?(ЗначениеЗаполнено(Счет), Счет, " не выбран счет");

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок              = Заголовок;

	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!");
		Возврат;
	КонецЕсли;

	ОграничениеПоДатамКорректно = БухгалтерскиеОтчеты.ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();

	Макет       = ПолучитьМакет("Макет");
	Итоги       = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	// Наклонный шрифт групп
	ШрифтГрупп = Новый Шрифт(Макет.Область("СтрокаПоказателя|Счет").Шрифт,,,,Истина);

	БухгалтерскиеОтчеты.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	НаличиеДублей = БухгалтерскиеОтчеты.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	Если НаличиеДублей Тогда
		Возврат;
	КонецЕсли;

	МассивГруппировок = СформироватьМассивГруппировок();

	МассивПоказателей = СформироватьМассивПоказателей();
	
	// Формат показателей
	СтруктураФорматовПоказателей = БухгалтерскиеОтчеты.СформироватьСтруктуруФорматовПоказателей(МассивПоказателей, ИмяРегистраБухгалтерии);
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач", ДатаНач);
	
	Если ДатаКон <> '00010101000000' Тогда
		ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон));
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаКон", ДатаКон);
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Сценарий", Сценарий);
	
	ПостроительОтчета.Порядок.Очистить();
	Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		Измерение = ПостроительОтчета.ИзмеренияСтроки[Инд];
		ПостроительОтчета.Порядок.Добавить(Измерение.ПутьКДанным);
	КонецЦикла;
	
	ПостроительОтчета.Выполнить();
	
	РезультатЗапроса = ПостроительОтчета.Результат;

	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);

	ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока|Числа");
	ОбластьИтогиЧислаМакет  = Макет.ПолучитьОбласть("Итоги|Числа");
	ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока|Счет");
	ОбластьИтогиСчет        = Макет.ПолучитьОбласть("Итоги|Счет");
	ОбластьСтрокаСчет       = Макет.ПолучитьОбласть("Строка|Счет");
	ОбластьСтрокаЧисла      = Макет.ПолучитьОбласть("Строка|Числа");
	ОбластьСтрокаПоказателяСчет  = Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");
	ОбластьСтрокаПоказателяЧисла = Макет.ПолучитьОбласть("СтрокаПоказателя|Числа");

	СоответствиеСчетовПредков = БухгалтерскиеОтчеты.ВернутьСоответвиеСчетовПредков(Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя, Счет);
	
	СтруктураПараметровОграничений = БухгалтерскиеОтчеты.СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект,
		ПоВалютам, , ,
		Сценарий, ВВалютеСценария);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрокаСчет", ОбластьСтрокаСчет);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет",ОбластьСтрокаПоказателяСчет);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("ШрифтГрупп", ШрифтГрупп);
	СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", ОбластьСтрокаПоказателяЧисла);
	СтруктураПараметров.Вставить("ОбластьСтрокаЧисла", ОбластьСтрокаЧисла);
	СтруктураПараметров.Вставить("ФорматПоказателей", СтруктураФорматовПоказателей);
	СтруктураПараметров.Вставить("НетЛинии", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);
	СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
	СтруктураПараметров.Вставить("СоответствиеСчетовПредков", СоответствиеСчетовПредков);
	СтруктураПараметров.Вставить("СтруктураОграничений", СтруктураПараметровОграничений);

	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	Если МассивГруппировок.Количество() > 0 Тогда
		
		БухгалтерскиеОтчеты.ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[0]), 
							0, СтруктураПараметров);
	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");

	// Выведем общие итоги
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Выборка.Следующий();
	ВыводимаяОбласть = ОбластьИтогиСчет;
	ДокументРезультат.Вывести(ВыводимаяОбласть, 1);
	
	БухгалтерскиеОтчеты.ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Выборка, ИмяРегистраБухгалтерии, МассивПоказателей, СтруктураФорматовПоказателей,
		Счет, ОбластьИтогиСтрокаЧисла, ОбластьИтогиЧислаМакет, ОбластьИтогиСтрокаСчет, ДокументРезультат);

	ДокументРезультат.Вывести(ИтогиПодвал, 1);
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = СформироватьОбщуюСтруктуруДляРасшифровки();
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету "+ИмяРегистраБухгалтерии;

КонецПроцедуры // СформироватьОтчет()

//Функция возвращает массив показателей для отчета
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("СуммаУпр");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ВВалютеСценария Тогда
		МассивПоказателей.Добавить("СуммаСценария");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;
	
	Возврат МассивПоказателей;
		
КонецФункции

//Функция возвращает общую структуру для расшифровки
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Сценарий", Сценарий);
	СтруктураНастроекОтчета.Вставить("ВВалютеСценария", ВВалютеСценария);
		
	НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

//Функция возвращает массив группировок для отчета
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	ПоВалютам = Счет.Валютный; 
	
	ПоКоличеству = Счет.Количественный;
	
	ПоСубсчетам = Истина;
	
	ОбновитьЗапросПостроителю();
	
	БухгалтерскиеОтчеты.СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Счет);
	
КонецПроцедуры

//Процедура обновляет запрос построителю отчетов с сохранением параметров отбора
Процедура ОбновитьЗапросПостроителю()
	
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	ЗаполнитьНачальныеНастройки();
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);	
	
КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = БухгалтерскиеОтчеты.СоздатьПоСтруктуреСоответствие(СтруктураПараметров); 

	Счет = Параметры["Счет"];
	Сценарий = Параметры["Сценарий"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	СтрокиОтбора = Параметры["Отбор"];
	
	БухгалтерскиеОтчеты.ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);

КонецПроцедуры

Функция ЗаголовокОтчета() Экспорт
	Возврат "Оборотно-сальдовая ведомость по счету " + ?(ЗначениеЗаполнено(Счет), Счет, " не выбран счет");	
КонецФункции // ЗаголовокОтчета()

ИмяРегистраБухгалтерии = "Бюджетирование";
#КонецЕсли