#Если Клиент Тогда
	
	Перем ИмяРегистраБухгалтерии Экспорт;

Перем МассивШиринКолонок;
Перем ШиринаТаблицы;

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СальдоНачДт=Истина;
	СальдоНачКт=Истина;
	СальдоКонДт=Истина;
	СальдоКонКт=Истина;

	ОборотДт   =Истина;
	ОборотКт   =Истина;
	ОборотДтКорСчета = Истина;
	ОборотКтКорСчета = Истина;
	
	ВсеПериоды = Истина;
	
	ТекстПоля = "";
	ТекстОтбор = "";
	ТекстИтоги = "";
	МассивСубконто=Новый Массив;
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		Если ВидСубконто.Суммовой Тогда 
			
			ТекстПоля = ТекстПоля + ", Регистр.Субконто" +Сч+" КАК Субконто"+Сч;
			ТекстОтбор = ТекстОтбор + ", Субконто"+Сч+".*";
			ТекстИтоги = ТекстИтоги + ", Субконто"+Сч;
			
			МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстПоля = Сред(ТекстПоля, 2);
	ТекстОтбор = Сред(ТекстОтбор, 2);
	ТекстИтоги = Сред(ТекстИтоги, 2);
	
	ПостроительОтчета.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регистр.СуммаУпрОборот КАК СуммаОборот
	|	" +?(НЕ ПустаяСтрока(ТекстПоля), "{ВЫБРАТЬ " +ТекстПоля+ "}", "") + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(,,,Счет В Иерархии (&Счет),&МассивСубконто," + ?(НЕ ПустаяСтрока(ТекстОтбор), "{"+ТекстОтбор+"}", "") + ") КАК Регистр
	|
	|ИТОГИ СУММА(СуммаОборот) ПО ОБЩИЕ
	|	" +?(НЕ ПустаяСтрока(ТекстИтоги), "{ИТОГИ ПО "+ТекстИтоги+"}", "");
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
		
		ПостроительОтчета.Отбор.Добавить("Субконто"+Сч);
	КонецЦикла;
	
КонецПроцедуры

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	ОписаниеПериода = БухгалтерскиеОтчеты.СформироватьСтрокуВыводаПараметровПоДатам(ДатаНач, ДатаКон);
	
	Макет = ПолучитьМакет("Макет");
	
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоНачДт", СальдоНачДт);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоНачКт", СальдоНачКт);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоКонДт", СальдоКонДт);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "СальдоКонКт", СальдоКонКт);
	
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотДт", ОборотДт);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотКт", ОборотКт);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотДтКорСчет", ОборотДтКорСчета);
	БухгалтерскиеОтчеты.УдалитьОбластьИзмакетаПриНеобходимости(Макет, "ОборотКтКорСчет", ОборотКтКорСчета);
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		ОписаниеПериода = ОписаниеПериода + " По фактическим данным.";
	Иначе
		ОписаниеПериода = ОписаниеПериода + " Сценарий планирования: " + Сценарий + ".";
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода + " " + Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Представление();

	ТекстПроСписокПоказателей = "Выводимые данные: сумма в валюте упр.учета ("+глЗначениеПеременной("ВалютаУправленческогоУчета")+")";
	
	Если ВВалютеСценария Тогда
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", сумма в валюте сценария ("+Сценарий.Валюта+")";
	КонецЕсли;
	
	Если ПоВалютам Тогда
	
		ТекстПроСписокПоказателей = ТекстПроСписокПоказателей + ", валютная сумма";
	
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	//Если ПоСубсчетам Тогда
	//	ТекстПроИтоги = ТекстПроИтоги + ", субсчетам"
	//КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", субконто";
	КонецЕсли;

	ТекстПроИтоги = Сред(ТекстПроИтоги, 2);

	Заголовок = "Обороты счета " + ?(ЗначениеЗаполнено(Счет), Счет, " не выбран счет");

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстПроСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Детализация по " + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок              = Заголовок;
	
	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()


//Функция возвращает ограничения для отчета
Функция ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(Запрос)
	
	ОграниченияПоПостроителюОтчета = БухгалтерскиеОтчеты.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос);
	
	СтрокаОграниченийПоРеквизитам = "";
	БухгалтерскиеОтчеты.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Сценарий", Сценарий);
		
	Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета)
		И Не ПустаяСтрока(СтрокаОграниченийПоРеквизитам) Тогда
		
		ОграниченияПоПостроителюОтчета = " И " + ОграниченияПоПостроителюОтчета;
		
	КонецЕсли;
	
	Возврат СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета;
	
КонецФункции

//Процедура устанавливает ограничения по запросу
Процедура УстановитьПараметрыОграниченийДляЗапроса(Запрос, Знач АвтоматическиРассчитатьКонечнуюДатуОтчета = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Если ДатаНач='00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач+1);
	КонецЕсли;
	
	КонечнаяДатаОтчета = ДатаКон;			
		
	Если АвтоматическиРассчитатьКонечнуюДатуОтчета Тогда
			
		Если НЕ(НЕ ЗначениеЗаполнено(Период)
			ИЛИ Врег(Период) = "РЕГИСТРАТОР") Тогда
				
			ДатаПоследнегоОборота = ПолучитьДатуПоследнегоОборотаПоОтчету();
			КонечнаяДатаОтчета = ДатаПоследнегоОборота;
				
		КонецЕсли;
				
	КонецЕсли;
	
	Если КонечнаяДатаОтчета <> '00010101000000' Тогда
		КонечнаяДатаОтчета = КонецДня(КонечнаяДатаОтчета);			
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ДатаКон", КонечнаяДатаОтчета);
	
КонецПроцедуры

//Функция возвращает дату последнего оборота по ограничениям
Функция ПолучитьДатуПоследнегоОборотаПоОтчету()
	
	Запрос = Новый Запрос;
	УстановитьПараметрыОграниченийДляЗапроса(Запрос);
	
	ОграниченияПоРеквизитам = ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(Запрос);
	
	Запрос.Текст = "
	|Выбрать Разрешенные 
	|	Период КАК Период,
	|	КорСчет КАК КорСчет
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(&ДатаНач, &ДатаКон, " + Период + ", Счет В ИЕРАРХИИ (&Счет), , " + 
	ОграниченияПоРеквизитам + ") КАК БухОбороты
	|	УПОРЯДОЧИТЬ ПО
	|		Период УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Если ЗначениеЗаполнено(ДатаКон) Тогда
			Возврат БухгалтерскиеОтчеты.ПолучитьДатуОкончанияПериода(ДатаКон, Период);
		Иначе
			Возврат БухгалтерскиеОтчеты.ПолучитьДатуОкончанияПериода(ТекущаяДата(), Период);
		КонецЕсли; 
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	КонечнаяДатаПериода = БухгалтерскиеОтчеты.ПолучитьДатуОкончанияПериода(Выборка.Период, Период);
	Возврат КонечнаяДатаПериода;
	
КонецФункции



// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	Если Счет.Пустая() Тогда
		Предупреждение("Не выбран счет!", 60);
		Возврат;
	КонецЕсли;

	ОграничениеПоДатамКорректно = БухгалтерскиеОтчеты.ПроверитьКорректностьОграниченийПоДатам(ДатаНач, ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;
	
	НаличиеДублей = БухгалтерскиеОтчеты.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	Если НаличиеДублей Тогда
		Возврат;
	КонецЕсли;
	
	// Запоминание ширины колонки
	Если НЕ ДокументРезультат.ВысотаТаблицы = ВысотаЗаголовка Тогда

		МассивШиринКолонок.Очистить();

		// Запоминать следует, если документ не пустой
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			
			Для Сч=1 По ШиринаТаблицы Цикл
				МассивШиринКолонок.Добавить(ДокументРезультат.Область(1,Сч).ШиринаКолонки);
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

	ДокументРезультат.Очистить();
	
	МассивРесурсов = СформироватьМассивПоказателей();
	
	МассивГруппировок = СформироватьМассивГруппировок();
	
	Запрос = Новый Запрос;
	
	УстановитьПараметрыОграниченийДляЗапроса(Запрос, Истина);
	
	Периодичность = Период;
	
	ТекстСубконто = "";
	ТекстСубконтоИзмерения = "";
			
	МассивСубконто = Новый Массив;
	
	// Субконто отчета
	Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		Измерение = ПостроительОтчета.ИзмеренияСтроки[Инд];
		
		СтрокаТипаИзмерения = БухгалтерскиеОтчеты.ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);			
		
		ТекстСубконто = ТекстСубконто +	",
		|	" +	Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
		
		ТекстСубконтоИзмерения = ТекстСубконтоИзмерения + ",
		|	" +	Измерение.ПутьКДанным +" "+СтрокаТипаИзмерения + " КАК " + Измерение.Имя;
		
		МассивСубконто.Добавить(Измерение.Имя);
		
	КонецЦикла;
	
	ОграниченияПоРеквизитам = ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(Запрос);
		
	Текст = "
	|ВЫБРАТЬ
	|	БухОбороты.Счет КАК Счет, 
	|	БухОбороты.Счет.Вид КАК ВидСчета, 
	|	БухОбороты.Счет.Порядок КАК СчетПорядок, 
	|	БухОбороты.Счет.Представление КАК СчетПредставление " +ТекстСубконто+",
	|	БухОбороты.КорСчет КАК КорСчет, 
	|	БухОбороты.КорСчет.Порядок КАК КорСчетПорядок, 
	|	БухОбороты.КорСчет.Представление КАК КорСчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст + ",
		|	БухОбороты.Валюта КАК Валюта, БухОбороты.Валюта.Представление КАК ВалютаПредставление  ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) Тогда
		Текст = Текст + ", Период";
	КонецЕсли;
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		Текст = Текст + ",
		|	" +ИмяРесурса+ "ОборотДт КАК " +ИмяРесурса+ "ОборотДт,
		|	" +ИмяРесурса+ "ОборотКт КАК " +ИмяРесурса+ "ОборотКт,
		|	0 КАК " +ИмяРесурса+ "НачДт,
		|	0 КАК " +ИмяРесурса+ "НачКт";
		
	КонецЦикла;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Обороты(&ДатаНач, &ДатаКон, "+Периодичность+", Счет В ИЕРАРХИИ (&Счет), , " + ОграниченияПоРеквизитам + ") КАК БухОбороты
	| ";
	
	
	Текст = Текст + "
	| ОБЪЕДИНИТЬ ВСЕ ";
	
	Текст = Текст + "
	|ВЫБРАТЬ
	|	БухОстатки.Счет, 
	|	БухОстатки.Счет.Вид, 
	|	БухОстатки.Счет.Порядок, 
	|	БухОстатки.Счет.Представление " +ТекстСубконто+",
	|	NULL , NULL, NULL ";
	
	Если ПоВалютам Тогда
		Текст = Текст + ",
		|	БухОстатки.Валюта КАК Валюта, БухОстатки.Валюта.Представление ";
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Период) Тогда
		Текст = Текст + ", NULL";
	КонецЕсли;
	
	ТекстИтоги = "";
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		Текст = Текст + ",
		|	0 КАК " +ИмяРесурса+ "ОборотДт,
		|	0 КАК " +ИмяРесурса+ "ОборотКт,
		|	" +ИмяРесурса+ "ОстатокДт КАК " +ИмяРесурса+ "НачДт,
		|	" +ИмяРесурса+ "ОстатокКт КАК " +ИмяРесурса+ "НачКт";
	КонецЦикла;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".Остатки(&ДатаНач, Счет В ИЕРАРХИИ (&Счет), , " + ОграниченияПоРеквизитам + ") КАК БухОстатки ";
	
	ТекстПорядок = "";
	ТекстПорядок = ТекстПорядок + ", СчетПорядок";
		
	Если ЗначениеЗаполнено(Период) Тогда
		ТекстПорядок = ТекстПорядок + ", Период";
	КонецЕсли;
	
	Текст = Текст + "
	|УПОРЯДОЧИТЬ ПО "+Сред(ТекстПорядок + ", КорСчетПорядок", 2);
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
	
		ТекстИтоги = ТекстИтоги + ",
		|	СУММА(" +ИмяРесурса+ "ОборотДт),
		|	СУММА(" +ИмяРесурса+ "ОборотКт),
		|	СУММА(" +ИмяРесурса+ "НачДт),
		|	СУММА(" +ИмяРесурса+ "НачКт)";
	
	КонецЦикла; 
	
	
	Текст = Текст + "
	|ИТОГИ " + Сред(ТекстИтоги, 2)+ "
	|	ПО ОБЩИЕ "+ТекстСубконтоИзмерения;
	
	Если ЗначениеЗаполнено(Период) Тогда
		Текст = Текст+", Период "+?(ВсеПериоды, " ПЕРИОДАМИ("+Период+",,)", "") + " КАК Период";
	КонецЕсли;
	
	Текст = Текст + ", КорСчет ИЕРАРХИЯ КАК КорСчет";
	
	Если ПоВалютам Тогда
		Текст = Текст + ", Валюта КАК Валюта";
	КонецЕсли;
	
	Запрос.Текст = Текст;
	
	Состояние("Выполнение запроса");
	Результат = Запрос.Выполнить();
	
	Макет       = ПолучитьМакет("Макет");


	// Вывод заголовка отчета
	БухгалтерскиеОтчеты.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	ФорматПериода = БухгалтерскиеОтчеты.ПолучитьСтрокуФорматаПериода(Период);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументРезультат",ДокументРезультат);
	СтруктураПараметров.Вставить("МассивСубконто", МассивСубконто);
	СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
	
	ДопИмяОбл= "";
	Если ВВалютеСценария Тогда
		ДопИмяОбл = "Сценарий";
	КонецЕсли;
	// Период
	СтруктураПараметров.Вставить("ОбластьСтрокаПериод", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"|Период"));
	СтруктураПараметров.ОбластьСтрокаПериод.Область(1, 2).Формат = ФорматПериода;
	
	// Нач сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачДт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"|СальдоНачДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачКт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"|СальдоНачКт"));
	
	// Кон сальдо
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонДт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"|СальдоКонДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонКт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"|СальдоКонКт"));
	
	// Оборот 
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"|ОборотДт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотКт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"|ОборотКт"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотДтКорСчет", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"|ОборотДтКорСчет"));
	СтруктураПараметров.Вставить("ОбластьСтрокаОборотКтКорСчет", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"|ОборотКтКорСчет"));
	
	Если ПоВалютам Тогда	
		// Валюта
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаПериод", Макет.ПолучитьОбласть("СтрокаВалюта"+ДопИмяОбл+"|Период"));
		
		// Нач сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачДт", Макет.ПолучитьОбласть("СтрокаВалюта"+ДопИмяОбл+"|СальдоНачДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачКт", Макет.ПолучитьОбласть("СтрокаВалюта"+ДопИмяОбл+"|СальдоНачКт"));
		
		// Кон сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонДт", Макет.ПолучитьОбласть("СтрокаВалюта"+ДопИмяОбл+"|СальдоКонДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонКт", Макет.ПолучитьОбласть("СтрокаВалюта"+ДопИмяОбл+"|СальдоКонКт"));
		
		// Оборот 
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДт", Макет.ПолучитьОбласть("СтрокаВалюта"+ДопИмяОбл+"|ОборотДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКт", Макет.ПолучитьОбласть("СтрокаВалюта"+ДопИмяОбл+"|ОборотКт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта"+ДопИмяОбл+"|ОборотДтКорСчет"));
		СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта"+ДопИмяОбл+"|ОборотКтКорСчет"));
	КонецЕсли;
	
	Если МассивСубконто.Количество()>0 Тогда
		// Субконто
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоПериод", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"|Период"));
		
		// Нач сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"|СальдоНачДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"|СальдоНачКт"));
		
		// Кон сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"|СальдоКонДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"|СальдоКонКт"));
		
		// Оборот 
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"|ОборотДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"|ОборотКт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"|ОборотДтКорСчет"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"|ОборотКтКорСчет"));
		
		Если ПоКоличеству Тогда
			// Субконто
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоПериод", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"Количество|Период"));
			
			// Нач сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"Количество|СальдоНачДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"Количество|СальдоНачКт"));
			
			// Кон сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"Количество|СальдоКонДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"Количество|СальдоКонКт"));
			
			// Оборот 
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"Количество|ОборотДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"Количество|ОборотКт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"Количество|ОборотДтКорСчет"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто"+ДопИмяОбл+"Количество|ОборотКтКорСчет"));
			
			
			// Период
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоПериод", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"Количество|Период"));
			СтруктураПараметров.ОбластьСтрокаКоличествоПериод.Область(1, 2).Формат = ФорматПериода;
			
			// Нач сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоНачДт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"Количество|СальдоНачДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоНачКт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"Количество|СальдоНачКт"));
			
			// Кон сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоКонДт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"Количество|СальдоКонДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоКонКт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"Количество|СальдоКонКт"));
			
			// Оборот 
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотДт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"Количество|ОборотДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотКт", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"Количество|ОборотКт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотДтКорСчет", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"Количество|ОборотДтКорСчет"));
			СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотКтКорСчет", Макет.ПолучитьОбласть("Строка"+ДопИмяОбл+"Количество|ОборотКтКорСчет"));
		КонецЕсли;
	КонецЕсли;
	
	
	// Вывод отчета
	ОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ЕстьИтог = ОбщийИтог.Следующий();
	
	ИмяСтроки = "ЗаголовокТаблицы";
	
	ДокументРезультат.НачатьАвтогруппировкуКолонок();
	
	НачалоЗаголовка=Макет.ПолучитьОбласть(ИмяСтроки+"|Период");
	
	Если МассивСубконто.Количество()>0 Тогда
		НачалоЗаголовка.Параметры.Заголовок = "Субконто";
	ИначеЕсли ЗначениеЗаполнено(Период) Тогда
		НачалоЗаголовка.Параметры.Заголовок = "Период";
	КонецЕсли;
	
	ДокументРезультат.Вывести(НачалоЗаголовка,0);
	// Вывод заголовков нач.сальдо
	
	Если СальдоНачДт Тогда
		ДокументРезультат.Присоединить(Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачДт"),0);
	КонецЕсли;
	Если СальдоНачКт Тогда
		ДокументРезультат.Присоединить(Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачКт"),0);
	КонецЕсли;
	
	// Вывод заголовков оборотов
	Если ОборотДт Тогда
		ДокументРезультат.Присоединить(Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДт"),0);
	КонецЕсли;
	
	// Вывод кор счетов с дебетовыми оборотами
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет", "Все");
	
	СоотвДт = Новый Соответствие;
	
	Если ОборотДтКорСчета Тогда
		ВерхнийУровень = 1000;
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДтКорсчет");
		Пока Выборка.Следующий() Цикл
			
			// Это итог по строке остатка
			Если Выборка.КорСчет = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПоСубсчетам Тогда
				
				// Выводим только верхний уровень
				Если ВерхнийУровень < Выборка.Уровень() Тогда
					Продолжить;
				Иначе
					ВерхнийУровень = Выборка.Уровень();
				КонецЕсли;
				
			КонецЕсли;
			
			Если Выборка.СуммаУпрОборотДт<>0 Тогда
				СоотвДт.Вставить(Выборка.КорСчет, 0);
				
				Обл.Параметры.Заполнить(Выборка);
				ДокументРезультат.Присоединить(Обл,Выборка.Уровень()+1);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Если ОборотКт Тогда
		ДокументРезультат.Присоединить(Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотКт"),0);
	КонецЕсли;
	// Вывод кор счетов с кредитовыми оборотами
	
	СоотвКт = Новый Соответствие();
	
	Выборка.Сбросить();
	Если ОборотКтКорСчета Тогда
		ВерхнийУровень = 1000;
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотКтКорсчет");
		Пока Выборка.Следующий() Цикл
			
			// Это итог по строке остатка
			Если Выборка.КорСчет = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПоСубсчетам Тогда
				
				// Выводим только верхний уровень
				Если ВерхнийУровень < Выборка.Уровень() Тогда
					Продолжить;
				Иначе
					ВерхнийУровень = Выборка.Уровень();
				КонецЕсли;
				
			КонецЕсли;
			
			Если Выборка.СуммаУпрОборотКт<>0 Тогда
				СоотвКт.Вставить(Выборка.КорСчет);
				
				Обл.Параметры.Заполнить(Выборка);
				ДокументРезультат.Присоединить(Обл,Выборка.Уровень()+1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СальдоКонДт Тогда
		ДокументРезультат.Присоединить(Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонДт"),0);
	КонецЕсли;
	Если СальдоКонКт Тогда
		ДокументРезультат.Присоединить(Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонКт"),0);
	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуКолонок();
	
	// Соответствия хранят счета, по которым были обороты
	
	СтруктураПараметров.Вставить("СоотвДт", СоотвДт);
	СтруктураПараметров.Вставить("СоотвКт", СоотвКт);
	// Вывод заголовков кон.сальдо

	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	Если МассивСубконто.Количество()>0 Тогда
		ВывестиСубконто(Результат, СтруктураПараметров, ПоКоличеству);
	ИначеЕсли ЗначениеЗаполнено(Период) Тогда
		ВывестиПериоды(Результат, СтруктураПараметров, Новый Соответствие);
	КонецЕсли;
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Итого по отчету
	
	Если ВВалютеСценария Тогда
		ИмяСтроки = "ИтогСЦенарий";
	Иначе
		ИмяСтроки = "Итог";
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть(ИмяСтроки+"|Период"));
	// Вывод заголовков нач.сальдо
	
	Если СальдоНачДт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачДт");
		Обл.Параметры.Заполнить(ОбщийИтог);
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	Если СальдоНачКт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоНачКт");
		Обл.Параметры.Заполнить(ОбщийИтог);
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	
	// Вывод заголовков оборотов
	Если ОборотДт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДт");
		Обл.Параметры.Заполнить(ОбщийИтог);
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	
	// Вывод кор счетов с дебетовыми оборотами
	Выборка.Сбросить();
	
	Если ОборотДтКорСчета Тогда
		ВерхнийУровень = 1000;
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотДтКорсчет");
		Пока Выборка.Следующий() Цикл
			
			// Это итог по строке остатка
			Если Выборка.КорСчет = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПоСубсчетам Тогда
				
				// Выводим только верхний уровень
				Если ВерхнийУровень < Выборка.Уровень() Тогда
					Продолжить;
				Иначе
					ВерхнийУровень = Выборка.Уровень();
				КонецЕсли;
				
			КонецЕсли;
			
			Если Выборка.СуммаУпрОборотДт<>0 Тогда
				Обл.Параметры.Заполнить(Выборка);
				ДокументРезультат.Присоединить(Обл,Выборка.Уровень());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОборотКт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотКт");
		Обл.Параметры.Заполнить(ОбщийИтог);
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	
	// Вывод кор счетов с кредитовыми оборотами
	Выборка.Сбросить();
	
	Если ОборотКтКорСчета Тогда
		ВерхнийУровень = 1000;
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|ОборотКтКорсчет");
		Пока Выборка.Следующий() Цикл
			
			// Это итог по строке остатка
			Если Выборка.КорСчет = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПоСубсчетам Тогда
				
				// Выводим только верхний уровень
				Если ВерхнийУровень < Выборка.Уровень() Тогда
					Продолжить;
				Иначе
					ВерхнийУровень = Выборка.Уровень();
				КонецЕсли;
				
			КонецЕсли;
			
			Если Выборка.СуммаУпрОборотКт<>0 Тогда
				Обл.Параметры.Заполнить(Выборка);
				ДокументРезультат.Присоединить(Обл,Выборка.Уровень());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Сосчитаем конечное сальдо:
	СуммаУпрКонКт = 0;
	СуммаУпрКонКт = 0;
	
	СуммаСценарияКонКт = 0;
	СуммаСценарияКонКт = 0;
	
	Если ЕстьИтог Тогда
		Если Счет.Вид = ВидСчета.Активный Тогда 
			СуммаУпрКонДт = ОбщийИтог.СуммаУпрНачДт + ОбщийИтог.СуммаУпрОборотДт - ОбщийИтог.СуммаУпрОборотКт;
			СуммаУпрКонКт = 0;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияКонДт = ОбщийИтог.СуммаСценарияНачДт + ОбщийИтог.СуммаСценарияОборотДт - ОбщийИтог.СуммаСценарияОборотКт;
				СуммаСценарияКонКт = 0;
			КонецЕсли;
			
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			СуммаУпрКонДт = 0;
			СуммаУпрКонКт = ОбщийИтог.СуммаУпрНачКт + ОбщийИтог.СуммаУпрОборотКт - ОбщийИтог.СуммаУпрОборотДт;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияКонДт = 0;
				СуммаСценарияКонКт = ОбщийИтог.СуммаСценарияНачКт + ОбщийИтог.СуммаСценарияОборотКт - ОбщийИтог.СуммаСценарияОборотДт;
			КонецЕсли;
		Иначе
			СуммаУпрКонДт = ОбщийИтог.СуммаУпрНачДт + ОбщийИтог.СуммаУпрОборотДт;
			СуммаУпрКонКт = ОбщийИтог.СуммаУпрНачКт + ОбщийИтог.СуммаУпрОборотКт;
			
			Если СуммаУпрКонДт>СуммаУпрКонКт Тогда
				СуммаУпрКонДт=СуммаУпрКонДт-СуммаУпрКонКт;
				СуммаУпрКонКт=0;
			Иначе
				СуммаУпрКонКт=СуммаУпрКонКт-СуммаУпрКонДт;
				СуммаУпрКонДт=0;
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияКонДт = ОбщийИтог.СуммаСценарияНачДт + ОбщийИтог.СуммаСценарияОборотДт;
				СуммаСценарияКонКт = ОбщийИтог.СуммаСценарияНачКт + ОбщийИтог.СуммаСценарияОборотКт;
			
				Если СуммаСценарияКонДт>СуммаСценарияКонКт Тогда
					СуммаСценарияКонДт=СуммаСценарияКонДт-СуммаСценарияКонКт;
					СуммаСценарияКонКт=0;
				Иначе
					СуммаСценарияКонКт=СуммаСценарияКонКт-СуммаСценарияКонДт;
					СуммаСценарияКонДт=0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СальдоКонДт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонДт");
		Обл.Параметры.СуммаУпрКонДт=СуммаУпрКонДт;
		
		Если ВВалютеСценария Тогда
			Обл.Параметры.СуммаСценарияКонДт=СуммаСценарияКонДт;
		КонецЕсли;
		
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	
	Если СальдоКонКт Тогда
		Обл=Макет.ПолучитьОбласть(ИмяСтроки+"|СальдоКонКт");
		Обл.Параметры.СуммаУпрКонКт=СуммаУпрКонКт;
		
		Если ВВалютеСценария Тогда
			Обл.Параметры.СуммаСценарияКонКт=СуммаСценарияКонКт;
		КонецЕсли;
		
		ДокументРезультат.Присоединить(Обл);
	КонецЕсли;
	
	// Обведение таблицы отчета линией, как в области границы
	ОбластьИтогПериод = Макет.ПолучитьОбласть("Итог|Период");
	
	ТолстаяЛиния = ОбластьИтогПериод.Область(1, 2).ГраницаСверху;
	
	ДокументРезультат.Область(ВысотаЗаголовка+2, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
	
	ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
	
	// Восстановление ширин колонок
	Если ТипЗнч(МассивШиринКолонок) = Тип("Массив") Тогда
		Если МассивШиринКолонок.Количество() = ШиринаТаблицы Тогда
			Инд = 0;
			Для Каждого Элемент Из МассивШиринКолонок Цикл
				ДокументРезультат.Область(,1+Инд, , 1+Инд).ШиринаКолонки = Элемент;
				Инд = Инд+1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним общую расшифровку:
	СтруктураНастроекОтчета =СформироватьОбщуюСтруктуруДляРасшифровки();
	СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 2;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету "+ИмяРегистраБухгалтерии;
	
КонецПроцедуры

//Функция возвращает массив показателей для отчета
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("СуммаУпр");
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли; 
	
	Если ВвалютеСценария Тогда
		МассивПоказателей.Добавить("СуммаСценария");
	КонецЕсли;

	Возврат МассивПоказателей;
		
КонецФункции

//Функция возвращает общую структуру для расшифровки
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("ДатаНач", ДатаНач);
	СтруктураНастроекОтчета.Вставить("ДатаКон", ДатаКон);
	СтруктураНастроекОтчета.Вставить("Сценарий", Сценарий);
	СтруктураНастроекОтчета.Вставить("Период", Период);
		
	//НастройкиОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	//
	//СтруктураНастроекОтчета.Вставить("Отбор", НастройкиОтбора);
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

//Функция возвращает массив группировок для отчета
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции


// Вывод субконто определенного номера
Процедура ВыводСубконто(Выборка, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества)
	
	Если Инд<= СтруктураПараметров.МассивСубконто.Количество()-1 Тогда
		
		Измерение = СтруктураПараметров.МассивСубконто[Инд];
		
		Если ВыводКоличества Тогда
			ИндСубконто = Число(Сред(Измерение, СтрДлина("Субконто")+1));
			ВыводКоличества=Счет.ВидыСубконто[ИндСубконто-1].Количественный;
		КонецЕсли;
		
		ВыборкаПоСубконто = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
		СуммаУпрНачДт = 0;
		СуммаУпрНачКт = 0;
		КоличествоНачДт = 0;
		КоличествоНачКт = 0;
		СуммаСценарияНачДт = 0;
		СуммаСценарияНачКт = 0;
		
		Пока ВыборкаПоСубконто.Следующий() Цикл
			
			Уровень = ВыборкаПоСубконто.Уровень();
			
			ТипЗаписи = ВыборкаПоСубконто.ТипЗаписи();
			
			Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				 ВыводитьКоличествоВТекущейСтроке=Ложь;
			Иначе
				 ВыводитьКоличествоВТекущейСтроке=ВыводКоличества;
			КонецЕсли;
			
			Если ВыводитьКоличествоВТекущейСтроке Тогда
				ОблНачало = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоПериод;
				ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоНачДт;
				ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоНачКт;
				ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотДт;
				ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотКт;
				ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотДтКорСчет;
				ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоОборотКтКорСчет;
				ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоКонДт;
				ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаСубконтоКоличествоСальдоКонКт;
			Иначе
				ОблНачало = СтруктураПараметров.ОбластьСтрокаСубконтоПериод;
				ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоНачДт;
				ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоНачКт;
				ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотДт;
				ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотКт;
				ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотДтКорСчет;
				ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаСубконтоОборотКтКорСчет;
				ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоКонДт;
				ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаСубконтоСальдоКонКт;
			КонецЕсли;
			
			ОблНачало.Область(1, 2, ОблНачало.ВысотаТаблицы, 2).Отступ = Уровень;
			
			// Вывод нач сальдо
			ОблНачало.Параметры.СубконтоПредставление = ВыборкаПоСубконто[Измерение];
			
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ОблНачало, ВыборкаПоСубконто, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало, Уровень);
			
			// В итогах по иерархии шрифт меняется на наклонный
			Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				СтруктураПараметров.ДокументРезультат.Область(СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, 2).Шрифт = 
				Новый Шрифт(СтруктураПараметров.ДокументРезультат.Область(СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, 2).Шрифт,,,,Истина);
			КонецЕсли;
			
			СуммаУпрНачДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.СуммаУпрНачДт);
			СуммаУпрНачКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.СуммаУпрНачКт);
			Если ВыводитьКоличествоВТекущейСтроке Тогда
				КоличествоНачДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.КоличествоНачДт);
				КоличествоНачКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.КоличествоНачКт);
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияНачДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.СуммаСценарияНачДт);
				СуммаСценарияНачКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.СуммаСценарияНачКт);
			КонецЕсли;
			
			Если СальдоНачДт Тогда
				ОблСальдоНачДт.Параметры.СуммаУпрНачДт=СуммаУпрНачДт;
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					ОблСальдоНачДт.Параметры.КоличествоНачДт=КоличествоНачДт;
				КонецЕсли;
				
				Если ВВалютеСценария Тогда
					ОблСальдоНачДт.Параметры.СуммаСценарияНачДт=СуммаСценарияНачДт;
				КонецЕсли;
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачДт, Уровень);
			КонецЕсли;
			
			Если СальдоНачКт Тогда
				ОблСальдоНачКт.Параметры.СуммаУпрНачКт=СуммаУпрНачКт;
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					ОблСальдоНачКт.Параметры.КоличествоНачКт=КоличествоНачКт;
				КонецЕсли;
				
				Если ВВалютеСценария Тогда
					ОблСальдоНачКт.Параметры.СуммаСценарияНачКт=СуммаСценарияНачКт;
				КонецЕсли;
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачКт, Уровень);
			КонецЕсли;
			
			// Оборот Дт
			Если ОборотДт Тогда
				ОблОборотДт.Параметры.Заполнить(ВыборкаПоСубконто);
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотДт, Уровень);
			КонецЕсли;
			
			// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов
			Если ОборотДтКорСчета ИЛИ ОборотКтКорСчета Тогда
				ВыборкаОборотыПоКорСчетам = ВыборкаПоСубконто.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
			КонецЕсли;
			
			Если ОборотДтКорСчета Тогда
				
				// Вывод вложенных итогов по кор счетам
				ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "СуммаУпр"+?(ВВалютеСценария, ", СуммаСценария", "")+?(ВыводитьКоличествоВТекущейСтроке, ", Количество", ""), ОблОборотДтКорСчет);
			КонецЕсли;
			
			
			
			// Оборот Кт
			Если ОборотКт Тогда
				ОблОборотКт.Параметры.Заполнить(ВыборкаПоСубконто);
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотКт, Уровень);
			КонецЕсли;
			
			Если ОборотКтКорСчета Тогда
				ВыборкаОборотыПоКорСчетам.Сбросить();
				
				// Вывод вложенных итогов по кор счетам
				ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", "СуммаУпр"+?(ВВалютеСценария, ", СуммаСценария", "")+?(ВыводитьКоличествоВТекущейСтроке, ", Количество", ""), ОблОборотКтКорСчет);
			КонецЕсли;
			
			// Вывод вложенных итогов: конец
			
			// Вывод оборота и кон сальдо
			СуммаУпрОборотДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.СуммаУпрОборотДт);
			СуммаУпрОборотКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.СуммаУпрОборотКт);
			
			Если ВыводитьКоличествоВТекущейСтроке Тогда
				КоличествоОборотДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.КоличествоОборотДт);
				КоличествоОборотКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.КоличествоОборотКт);
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияОборотДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.СуммаСценарияОборотДт);
				СуммаСценарияОборотКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоСубконто.СуммаСценарияОборотКт);
			КонецЕсли;
			
			Если Счет.Вид = ВидСчета.Активный Тогда 
				СуммаУпрКонДт = СуммаУпрНачДт + СуммаУпрОборотДт - СуммаУпрОборотКт;
				СуммаУпрКонКт = 0;
				
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					КоличествоКонДт = КоличествоНачДт + КоличествоОборотДт - КоличествоОборотКт;
					КоличествоКонКт = 0;
				КонецЕсли;
				
				Если ВВалютеСценария Тогда
					СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт - СуммаСценарияОборотКт;
					СуммаСценарияКонКт = 0;
				КонецЕсли;
				
			ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
				СуммаУпрКонДт = 0;
				СуммаУпрКонКт = СуммаУпрНачКт + СуммаУпрОборотКт - СуммаУпрОборотДт;
				
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					КоличествоКонДт = 0;
					КоличествоКонКт = КоличествоНачКт + КоличествоОборотКт - КоличествоОборотДт;
				КонецЕсли;
				
				Если ВВалютеСценария Тогда
					СуммаСценарияКонДт = 0;
					СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт - СуммаСценарияОборотДт;
				КонецЕсли;
			Иначе
				СуммаУпрКонДт = СуммаУпрНачДт + СуммаУпрОборотДт;
				СуммаУпрКонКт = СуммаУпрНачКт + СуммаУпрОборотКт;
				
				Если СуммаУпрКонДт>СуммаУпрКонКт Тогда
					СуммаУпрКонДт=СуммаУпрКонДт-СуммаУпрКонКт;
					СуммаУпрКонКт=0;
				Иначе
					СуммаУпрКонКт=СуммаУпрКонКт-СуммаУпрКонДт;
					СуммаУпрКонДт=0;
				КонецЕсли;
				
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					КоличествоКонДт = КоличествоНачДт + КоличествоОборотДт;
					КоличествоКонКт = КоличествоНачКт + КоличествоОборотКт;
					
					Если КоличествоКонДт>КоличествоКонКт Тогда
						КоличествоКонДт=КоличествоКонДт-КоличествоКонКт;
						КоличествоКонКт=0;
					Иначе
						КоличествоКонКт=КоличествоКонКт-КоличествоКонДт;
						КоличествоКонДт=0;
					КонецЕсли;
				КонецЕсли;
				
				Если ВВалютеСценария Тогда
					СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт;
					СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт;
			
					Если СуммаСценарияКонДт>СуммаСценарияКонКт Тогда
						СуммаСценарияКонДт=СуммаСценарияКонДт-СуммаСценарияКонКт;
						СуммаСценарияКонКт=0;
					Иначе
						СуммаСценарияКонКт=СуммаСценарияКонКт-СуммаСценарияКонДт;
						СуммаСценарияКонДт=0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			
			// Вывод конечного сальдо
			
			Если СальдоКонДт Тогда
				ОблСальдоКонДт.Параметры.СуммаУпрКонДт=СуммаУпрКонДт;
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					ОблСальдоКонДт.Параметры.КоличествоКонДт=КоличествоКонДт;
				КонецЕсли;
				
				Если ВВалютеСценария Тогда
					ОблСальдоКонДт.Параметры.СуммаСценарияКонДт=СуммаСценарияКонДт;
				КонецЕсли;
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонДт, Уровень);
			КонецЕсли;
			
			Если СальдоКонКт Тогда
				ОблСальдоКонКт.Параметры.СуммаУпрКонКт=СуммаУпрКонКт;
				Если ВыводитьКоличествоВТекущейСтроке Тогда
					ОблСальдоКонКт.Параметры.КоличествоКонКт=КоличествоКонКт;
				КонецЕсли;
				
				Если ВВалютеСценария Тогда
					ОблСальдоКонКт.Параметры.СуммаСценарияКонКт=СуммаСценарияКонКт;
				КонецЕсли;
				
				СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонКт, Уровень);
			КонецЕсли;
			
			Если ПоВалютам Тогда
				ВывестиВалюты(ВыборкаПоСубконто, СтруктураПараметров);
			КонецЕсли;
			
			// Вывод вложенных итогов
			Если НЕ ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				
				ВыводСубконто(ВыборкаПоСубконто, Инд+1, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки), ВыводКоличества);
			КонецЕсли;
			// Вывод вложенных итогов: конец
		
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(Период) Тогда
			
			ВывестиПериоды(Выборка, СтруктураПараметров, БухгалтерскиеОтчеты.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки), ВыводКоличества);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вывод субконто: общая процедура
Процедура ВывестиСубконто(Выборка, СтруктураПараметров, ВыводКоличества)

	ВыводСубконто(Выборка, 0, СтруктураПараметров, Новый Соответствие, ВыводКоличества);

КонецПроцедуры

// Вывод периодов
Процедура ВывестиПериоды(Выборка, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества=Ложь)
	
	Если ВсеПериоды Тогда
		ВыборкаПоПериодам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	Иначе
		ВыборкаПоПериодам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
	КонецЕсли;
	
	СуммаУпрНачДт = 0;
	СуммаУпрНачКт = 0;
	КоличествоНачДт = 0;
	КоличествоНачКт = 0;
	СуммаСценарияНачДт = 0;
	СуммаСценарияНачКт = 0;
	
	Если ВыводКоличества Тогда
		ОблНачало = СтруктураПараметров.ОбластьСтрокаКоличествоПериод;
		ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоНачДт;
		ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоНачКт;
		ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотДт;
		ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотКт;
		ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотДтКорСчет;
		ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаКоличествоОборотКтКорСчет;
		ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоКонДт;
		ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаКоличествоСальдоКонКт;
	Иначе
		ОблНачало = СтруктураПараметров.ОбластьСтрокаПериод;
		ОблСальдоНачДт = СтруктураПараметров.ОбластьСтрокаСальдоНачДт;
		ОблСальдоНачКт = СтруктураПараметров.ОбластьСтрокаСальдоНачКт;
		ОблОборотДт    = СтруктураПараметров.ОбластьСтрокаОборотДт;
		ОблОборотКт    = СтруктураПараметров.ОбластьСтрокаОборотКт;
		ОблОборотДтКорСчет    = СтруктураПараметров.ОбластьСтрокаОборотДтКорСчет;
		ОблОборотКтКорСчет    = СтруктураПараметров.ОбластьСтрокаОборотКтКорСчет;
		ОблСальдоКонДт = СтруктураПараметров.ОбластьСтрокаСальдоКонДт;
		ОблСальдоКонКт = СтруктураПараметров.ОбластьСтрокаСальдоКонКт;
	КонецЕсли;
	
	// Идем по остаткам, т.к. там есть начпериоды без оборотов
	Пока ВыборкаПоПериодам.Следующий() Цикл
		
		// Начальный остаток
		Если ВыборкаПоПериодам.Период = NULL Тогда
			СуммаУпрНачДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаУпрНачДт);
			СуммаУпрНачКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаУпрНачКт);
			
			Если ВыводКоличества Тогда
				КоличествоНачДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.КоличествоНачДт);
				КоличествоНачКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.КоличествоНачКт);
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияНачДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаСценарияНачДт);
				СуммаСценарияНачКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаСценарияНачКт);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Уровень = ВыборкаПоПериодам.Уровень();
		
		// Вывод начального сальдо
		
		// Выводим начало строки:
		ОблНачало.Параметры.Заполнить(ВыборкаПоПериодам);
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ОблНачало, ВыборкаПоПериодам, ОтборДляРасшифровки);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало, Уровень);
		
		Если СальдоНачДт Тогда
			
			ОблСальдоНачДт.Параметры.СуммаУпрНачДт=СуммаУпрНачДт;
			Если ВыводКоличества Тогда
				ОблСальдоНачДт.Параметры.КоличествоНачДт=КоличествоНачДт;
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				ОблСальдоНачДт.Параметры.СуммаСценарияНачДт=СуммаСценарияНачДт;
			КонецЕсли;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачДт, Уровень);
		КонецЕсли;
		
		Если СальдоНачКт Тогда
			ОблСальдоНачКт.Параметры.СуммаУпрНачКт=СуммаУпрНачКт;
			Если ВыводКоличества Тогда
				ОблСальдоНачКт.Параметры.КоличествоНачКт=КоличествоНачКт;
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				ОблСальдоНачКт.Параметры.СуммаСценарияНачКт=СуммаСценарияНачКт;
			КонецЕсли;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоНачКт, Уровень);
		КонецЕсли;
		
		// Оборот Дт
		Если ОборотДт Тогда
			ОблОборотДт.Параметры.Заполнить(ВыборкаПоПериодам);
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотДт, Уровень);
		КонецЕсли;
		
		// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов
		Если ОборотДтКорСчета ИЛИ ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам = ВыборкаПоПериодам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		КонецЕсли;
		
		Если ОборотДтКорСчета Тогда
			
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "СуммаУпр"+?(ВВалютеСценария, ", СуммаСценария", ""), ОблОборотДтКорСчет);
		КонецЕсли;
		
		
		
		// Оборот Кт
		Если ОборотКт Тогда
			ОблОборотКт.Параметры.Заполнить(ВыборкаПоПериодам);
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблОборотКт, Уровень);
		КонецЕсли;
		
		Если ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам.Сбросить();
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", "СуммаУпр"+?(ВВалютеСценария, ", СуммаСценария", ""), ОблОборотКтКорСчет);
		КонецЕсли;
		
		// Вывод вложенных итогов: конец
		
		// Вывод оборота и кон сальдо
		СуммаУпрОборотДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаУпрОборотДт);
		СуммаУпрОборотКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаУпрОборотКт);
		Если ВыводКоличества Тогда
			КоличествоОборотДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.КоличествоОборотДт);
			КоличествоОборотКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.КоличествоОборотКт);
		КонецЕсли;
		
		Если ВВалютеСценария Тогда
			СуммаСценарияОборотДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаСценарияОборотДт);
			СуммаСценарияОборотКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаПоПериодам.СуммаСценарияОборотКт);
		КонецЕсли;
		
		Если Счет.Вид = ВидСчета.Активный Тогда 
			СуммаУпрКонДт = СуммаУпрНачДт + СуммаУпрОборотДт - СуммаУпрОборотКт;
			СуммаУпрКонКт = 0;
			
			Если ВыводКоличества Тогда
				КоличествоКонДт = КоличествоНачДт + КоличествоОборотДт - КоличествоОборотКт;
				КоличествоКонКт = 0;
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт - СуммаСценарияОборотКт;
				СуммаСценарияКонКт = 0;
			КонецЕсли;
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			СуммаУпрКонДт = 0;
			СуммаУпрКонКт = СуммаУпрНачКт + СуммаУпрОборотКт - СуммаУпрОборотДт;
			
			Если ВыводКоличества Тогда
				КоличествоКонДт = 0;
				КоличествоКонКт = КоличествоНачКт + КоличествоОборотКт - КоличествоОборотДт;
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияКонДт = 0;
				СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт - СуммаСценарияОборотДт;
			КонецЕсли;
		Иначе
			СуммаУпрКонДт = СуммаУпрНачДт + СуммаУпрОборотДт;
			СуммаУпрКонКт = СуммаУпрНачКт + СуммаУпрОборотКт;
			
			Если СуммаУпрКонДт>СуммаУпрКонКт Тогда
				СуммаУпрКонДт=СуммаУпрКонДт-СуммаУпрКонКт;
				СуммаУпрКонКт=0;
			Иначе
				СуммаУпрКонКт=СуммаУпрКонКт-СуммаУпрКонДт;
				СуммаУпрКонДт=0;
			КонецЕсли;
			
			Если ВыводКоличества Тогда
				КоличествоКонДт = КоличествоНачДт + КоличествоОборотДт;
				КоличествоКонКт = КоличествоНачКт + КоличествоОборотКт;
			
				Если КоличествоКонДт>КоличествоКонКт Тогда
					КоличествоКонДт=КоличествоКонДт-КоличествоКонКт;
					КоличествоКонКт=0;
				Иначе
					КоличествоКонКт=КоличествоКонКт-КоличествоКонДт;
					КоличествоКонДт=0;
				КонецЕсли;
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт;
				СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт;
				
				Если СуммаСценарияКонДт>СуммаСценарияКонКт Тогда
					СуммаСценарияКонДт=СуммаСценарияКонДт-СуммаСценарияКонКт;
					СуммаСценарияКонКт=0;
				Иначе
					СуммаСценарияКонКт=СуммаСценарияКонКт-СуммаСценарияКонДт;
					СуммаСценарияКонДт=0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		// Вывод конечного сальдо
		
		Если СальдоКонДт Тогда
			ОблСальдоКонДт.Параметры.СуммаУпрКонДт=СуммаУпрКонДт;
			Если ВыводКоличества Тогда
				ОблСальдоКонДт.Параметры.КоличествоКонДт=КоличествоКонДт;
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				ОблСальдоКонДт.Параметры.СуммаСценарияКонДт=СуммаСценарияКонДт;
			КонецЕсли;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонДт, Уровень);
		КонецЕсли;
		
		Если СальдоКонКт Тогда
			ОблСальдоКонКт.Параметры.СуммаУпрКонКт=СуммаУпрКонКт;
			Если ВыводКоличества Тогда
				ОблСальдоКонКт.Параметры.КоличествоКонКт=КоличествоКонКт;
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				ОблСальдоКонКт.Параметры.СуммаСценарияКонКт=СуммаСценарияКонКт;
			КонецЕсли;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ОблСальдоКонКт, Уровень);
		КонецЕсли;
		
		// Нач.сальдо следующего периода равен кон.сальдо предыдущего
		СуммаУпрНачДт = СуммаУпрКонДт;
		СуммаУпрНачКт = СуммаУпрКонКт;
		
		Если ВыводКоличества Тогда
			КоличествоНачДт = КоличествоКонДт;
			КоличествоНачКт = КоличествоКонКт;
		КонецЕсли;
		
		Если ВВалютеСценария Тогда
			СуммаСценарияНачДт = СуммаСценарияКонДт;
			СуммаСценарияНачКт = СуммаСценарияКонКт;
		КонецЕсли;
		
		Если ПоВалютам Тогда
			ВывестиВалюты(ВыборкаПоПериодам, СтруктураПараметров);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Вывод валют
Процедура ВывестиВалюты(Выборка, СтруктураПараметров)
	
	ВыборкаВалют = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");

	Пока ВыборкаВалют.Следующий() Цикл
		
		СуммаУпрНачДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.СуммаУпрНачДт);
		СуммаУпрНачКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.СуммаУпрНачКт);
		
		ВалютнаяСуммаНачДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.ВалютнаяСуммаНачДт);
		ВалютнаяСуммаНачКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.ВалютнаяСуммаНачКт);
		
		Если ВВалютеСценария Тогда
			СуммаСценарияНачДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.СуммаСценарияНачДт);
			СуммаСценарияНачКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.СуммаСценарияНачКт);
		КонецЕсли;
			
		// Вывод начала строки
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаПериод;
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалют);
		
		Уровень = ВыборкаВалют.Уровень();
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		
		Если СальдоНачДт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоНачДт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаНачДт=ВалютнаяСуммаНачДт;
			ВыводимаяОбласть.Параметры.СуммаУпрНачДт        =СуммаУпрНачДт;
			
			Если ВВалютеСценария Тогда
				ВыводимаяОбласть.Параметры.СуммаСценарияНачДт        =СуммаСценарияНачДт;
			КонецЕсли;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		Если СальдоНачКт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоНачКт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаНачКт=ВалютнаяСуммаНачКт;
			ВыводимаяОбласть.Параметры.СуммаУпрНачКт        =СуммаУпрНачКт;
			
			Если ВВалютеСценария Тогда
				ВыводимаяОбласть.Параметры.СуммаСценарияНачКт        =СуммаСценарияНачКт;
			КонецЕсли;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		// Оборот Дт
		Если ОборотДт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаОборотДт;
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалют);
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов
		Если ОборотДтКорСчета ИЛИ ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам = ВыборкаВалют.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		КонецЕсли;
		
		Если ОборотДтКорСчета Тогда
			
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", "СуммаУпр, ВалютнаяСумма"+?(ВВалютеСценария, ", СуммаСценария", ""), СтруктураПараметров.ОбластьСтрокаВалютаОборотДтКорСчет);
		КонецЕсли;
		
		
		
		// Оборот Кт
		Если ОборотКт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаОборотКт;
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалют);
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		Если ОборотКтКорСчета Тогда
			ВыборкаОборотыПоКорСчетам.Сбросить();
			
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", "СуммаУпр, ВалютнаяСумма"+?(ВВалютеСценария, ", СуммаСценария", ""), СтруктураПараметров.ОбластьСтрокаВалютаОборотКтКорСчет);
		КонецЕсли;
		
		// Вывод оборота и кон сальдо
		ВалютнаяСуммаОборотДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.ВалютнаяСуммаОборотДт);
		ВалютнаяСуммаОборотКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.ВалютнаяСуммаОборотКт);
		
		СуммаУпрОборотДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.СуммаУпрОборотДт);
		СуммаУпрОборотКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.СуммаУпрОборотКт);
		
		Если ВВалютеСценария Тогда
			СуммаСценарияОборотДт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.СуммаСценарияОборотДт);
			СуммаСценарияОборотКт = БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаВалют.СуммаСценарияОборотКт);
		КонецЕсли;
		
		Если Счет.Вид = ВидСчета.Активный Тогда 
			ВалютнаяСуммаКонДт = ВалютнаяСуммаНачДт + ВалютнаяСуммаОборотДт - ВалютнаяСуммаОборотКт;
			ВалютнаяСуммаКонКт = 0;
			
			СуммаУпрКонДт = СуммаУпрНачДт + СуммаУпрОборотДт - СуммаУпрОборотКт;
			СуммаУпрКонКт = 0;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт - СуммаСценарияОборотКт;
				СуммаСценарияКонКт = 0;
			КонецЕсли;
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			ВалютнаяСуммаКонДт = 0;
			ВалютнаяСуммаКонКт = ВалютнаяСуммаНачКт + ВалютнаяСуммаОборотКт - ВалютнаяСуммаОборотДт;
			
			СуммаУпрКонДт = 0;
			СуммаУпрКонКт = СуммаУпрНачКт + СуммаУпрОборотКт - СуммаУпрОборотДт;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияКонДт = 0;
				СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт - СуммаСценарияОборотДт;
			КонецЕсли;
		Иначе
			ВалютнаяСуммаКонДт = ВалютнаяСуммаНачДт + ВалютнаяСуммаОборотДт;
			ВалютнаяСуммаКонКт = ВалютнаяСуммаНачКт + ВалютнаяСуммаОборотКт;
			
			Если ВалютнаяСуммаКонДт>ВалютнаяСуммаКонКт Тогда
				ВалютнаяСуммаКонДт=ВалютнаяСуммаКонДт-ВалютнаяСуммаКонКт;
				ВалютнаяСуммаКонКт=0;
			Иначе
				ВалютнаяСуммаКонКт=ВалютнаяСуммаКонКт-ВалютнаяСуммаКонДт;
				ВалютнаяСуммаКонДт=0;
			КонецЕсли;
			
			СуммаУпрКонДт = СуммаУпрНачДт + СуммаУпрОборотДт;
			СуммаУпрКонКт = СуммаУпрНачКт + СуммаУпрОборотКт;
			
			Если СуммаУпрКонДт>СуммаУпрКонКт Тогда
				СуммаУпрКонДт=СуммаУпрКонДт-СуммаУпрКонКт;
				СуммаУпрКонКт=0;
			Иначе
				СуммаУпрКонКт=СуммаУпрКонКт-СуммаУпрКонДт;
				СуммаУпрКонДт=0;
			КонецЕсли;
			
			Если ВВалютеСценария Тогда
				СуммаСценарияКонДт = СуммаСценарияНачДт + СуммаСценарияОборотДт;
				СуммаСценарияКонКт = СуммаСценарияНачКт + СуммаСценарияОборотКт;
				
				Если СуммаСценарияКонДт>СуммаСценарияКонКт Тогда
					СуммаСценарияКонДт=СуммаСценарияКонДт-СуммаСценарияКонКт;
					СуммаСценарияКонКт=0;
				Иначе
					СуммаСценарияКонКт=СуммаСценарияКонКт-СуммаСценарияКонДт;
					СуммаСценарияКонДт=0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		// Вывод конечного сальдо
		
		Если СальдоКонДт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоКонДт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаКонДт=ВалютнаяСуммаКонДт;
			
			ВыводимаяОбласть.Параметры.СуммаУпрКонДт=СуммаУпрКонДт;
			
			Если ВВалютеСценария Тогда
				ВыводимаяОбласть.Параметры.СуммаСценарияКонДт=СуммаСценарияКонДт;
			КонецЕсли;
			
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		Если СальдоКонКт Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаСальдоКонКт;
			ВыводимаяОбласть.Параметры.ВалютнаяСуммаКонКт=ВалютнаяСуммаКонКт;
			
			ВыводимаяОбласть.Параметры.СуммаУпрКонКт=СуммаУпрКонКт;
			
			Если ВВалютеСценария Тогда
				ВыводимаяОбласть.Параметры.СуммаСценарияКонКт=СуммаСценарияКонКт;
			КонецЕсли;
			СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть, Уровень);
		КонецЕсли;
		
		// Нач.сальдо следующего периода равен кон.сальдо предыдущего
		ВалютнаяСуммаНачДт = ВалютнаяСуммаКонДт;
		ВалютнаяСуммаНачКт = ВалютнаяСуммаКонКт;
		
		СуммаУпрНачДт = СуммаУпрКонДт;
		СуммаУпрНачКт = СуммаУпрКонКт;
		
		Если ВВалютеСценария Тогда
			СуммаСценарияНачДт = СуммаСценарияКонДт;
			СуммаСценарияНачКт = СуммаСценарияКонКт;
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Вывод кор счетов
Процедура ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, ВидОборота, Ресурсы, ВыводимаяОбласть)
	
	СтРесурсы = Новый Структура(Ресурсы);
	
	Если ВидОборота = "ДТ" Тогда
		
		ТипПоля = "ОборотДт";
		
		Соотв = СтруктураПараметров.СоотвДт;
	ИначеЕсли ВидОборота = "КТ" Тогда
		
		ТипПоля = "ОборотКт";
		
		Соотв = СтруктураПараметров.СоотвКт;
	Иначе
		Возврат;
	КонецЕсли;
	
	// Очистим значения соответствия счетов
	Для каждого Элемент Из Соотв Цикл
		Соотв[Элемент.Ключ]=Новый Структура(Ресурсы);
	КонецЦикла;
	
	ВерхнийУровень = 1000;
	
	// Обойдем выборку по счетам, получим все ненулевые значения ресурсов и поставим их в соответсвие счетам
	Пока ВыборкаОборотыПоКорСчетам.Следующий() Цикл
		
		// Это итог по строке остатка
		Если ВыборкаОборотыПоКорСчетам.КорСчет = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		// В выборке присутствуют счета всех уровней, если не нужно выводить субсчета, пропускаем 
		// группировки следующего уровня
		Если НЕ ПоСубсчетам Тогда
			
			// Выводим только верхний уровень
			Если ВерхнийУровень < ВыборкаОборотыПоКорСчетам.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = ВыборкаОборотыПоКорСчетам.Уровень();
			КонецЕсли;
			
		КонецЕсли;
		
		СтЗначенияРесурсов = Новый Структура(Ресурсы);
		Вставлять = Ложь;
		
		Для каждого Элемент Из СтРесурсы Цикл
			
			Если НЕ БухгалтерскиеОтчеты.ПривестиКЧислу(ВыборкаОборотыПоКорСчетам[Элемент.Ключ+ТипПоля])=0 Тогда
				СтЗначенияРесурсов.Вставить(Элемент.Ключ, ВыборкаОборотыПоКорСчетам[Элемент.Ключ+ТипПоля]);
				
				Вставлять = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Полученную структуру вставляем в соответствие счетов
		Если Вставлять Тогда
			Соотв.Вставить(ВыборкаОборотыПоКорСчетам.КорСчет, СтЗначенияРесурсов);
		КонецЕсли;
		
	КонецЦикла;

	// Вывод ресурсов
	Для каждого ЭлементСчет Из Соотв Цикл
		
		Для каждого Элемент Из ЭлементСчет.Значение Цикл
			ВыводимаяОбласть.Параметры[Элемент.Ключ+ТипПоля] = Элемент.Значение;
		КонецЦикла;
		
		СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть);
	КонецЦикла;

	
КонецПроцедуры
 
// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено)

	ПараметрыРасшифровки = Новый Соответствие;
	
	ПараметрыРасшифровки.Вставить("ИмяОбъекта", "РегистрыБухгалтерии."+ИмяРегистраБухгалтерии);

	ПараметрыРасшифровки.Вставить("Счет", Счет);

	Если Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "Субконто" Тогда

		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
			
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
			КонецЦикла; 
			
			ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Журнал проводок " + Выборка.Счет);
		
	ИначеЕсли Выборка.Группировка() = "Период" Тогда
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто
			ОтборРасшифровка = Новый Соответствие;
			
			Для каждого ЭлементОтбора Из ОтборСубконто Цикл
			
				ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
			КонецЦикла; 
			
			ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);
			
			СписокРасшифровки = Новый СписокЗначений;
			
			СписокРасшифровки.Добавить(ПараметрыРасшифровки, "Журнал проводок " + Выборка.Счет);
			
		КонецЕсли;
		
	Иначе
		СписокРасшифровки = Неопределено;
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;

КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

// Процедура выполняется при смене счета
Процедура ОбработкаВыбораСчета() Экспорт

	ПоВалютам = Счет.Валютный; 
	
	ПоКоличеству = Счет.Количественный;
	
	ПоСубсчетам = Истина;
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 

	Счет = Параметры["Счет"];
	Сценарий = Параметры["Сценарий"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ОбработкаВыбораСчета();
		
	Иначе
		
		ПоВалютам    = Параметры["ПоВалютам"];
		ПоКоличеству = Параметры["ПоКоличеству"];
	
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	Период = Параметры["Период"];
	ВсеПериоды = Параметры["ВсеПериоды"];
	ВВалютеСценария = Параметры["ВВалютеСценария"];
	
	СтрокиОтбора = Параметры["Отбор"];
	БухгалтерскиеОтчеты.ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, СтрокиОтбора);

КонецПроцедуры

// Обработка расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка) Экспорт
	
	ФормаЖурнала = РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПолучитьФормуСписка(,, Новый УникальныйИдентификатор());
	
	// если в расшифровке периода не будет, установим период в журнале по периоду отчета
	ФормаЖурнала.Отбор.Период.ЗначениеС = НачалоДня(ДатаНач);
	ФормаЖурнала.Отбор.Период.ЗначениеПо = КонецДня(ДатаКон);
	ФормаЖурнала.Отбор.Период.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
	ФормаЖурнала.Отбор.Период.Использование = Истина;
	
	Для Каждого Элемент Из Расшифровка.Отбор Цикл
	
		Если Элемент.Ключ="Период" Тогда
			
			ПериодС = Элемент.Значение;
			ПериодПо = БухгалтерскиеОтчеты.ПолучитьДатуОкончанияПериода(ПериодС, Период);
			
			Если ДатаКон<>'00010101' Тогда
				ПериодПо = Мин(ДатаКон, ПериодПо);
			КонецЕсли;
			
			ФормаЖурнала.Отбор.Период.ЗначениеС = ПериодС;
			ФормаЖурнала.Отбор.Период.ЗначениеПо = ПериодПо;
			ФормаЖурнала.Отбор.Период.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
			ФормаЖурнала.Отбор.Период.Использование = Истина;
			
		ИначеЕсли Лев(Элемент.Ключ, СтрДлина("Субконто")) = "Субконто" Тогда
			
			Если НЕ ЗначениеЗаполнено(ФормаЖурнала.Отбор.Субконто1.Значение) Тогда
				ФормаЖурнала.Отбор.Субконто1.Значение = Элемент.Значение;
				ФормаЖурнала.Отбор.Субконто1.ВидСравнения = ВидСравнения.Равно;
				ФормаЖурнала.Отбор.Субконто1.Использование = Истина;
			Иначе
				
				ПрежнееЗначение = ФормаЖурнала.Отбор.Субконто1.Значение;
				Если ТипЗнч(ПрежнееЗначение)<>Тип("СписокЗначений") Тогда
					СписокСубконто = Новый СписокЗначений;
					СписокСубконто.Добавить(ПрежнееЗначение);
				Иначе
					СписокСубконто = ПрежнееЗначение;
				КонецЕсли;
				
				СписокСубконто.Добавить(Элемент.Значение);
				
				
				ФормаЖурнала.Отбор.Субконто1.ВидСравнения = ВидСравнения.ВСписке;
				ФормаЖурнала.Отбор.Субконто1.Значение = СписокСубконто;
				ФормаЖурнала.Отбор.Субконто1.Использование = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ФормаЖурнала.Отбор.Сценарий.Значение = Сценарий;
	ФормаЖурнала.Отбор.Сценарий.ВидСравнения = ВидСравнения.Равно;
	ФормаЖурнала.Отбор.Сценарий.Использование = ЗначениеЗаполнено(Сценарий);
	
	ФормаЖурнала.Отбор.Счет.Значение = Счет;
	ФормаЖурнала.Отбор.Счет.ВидСравнения = ВидСравнения.ВИерархии;
	ФормаЖурнала.Отбор.Счет.Использование = Истина;
	
	
	Если ЗначениеЗаполнено(Расшифровка.КорСчет) Тогда
		
		ФормаЖурнала.Отбор.КорСчет.Значение = Расшифровка.КорСчет;
		ФормаЖурнала.Отбор.КорСчет.ВидСравнения = ВидСравнения.ВИерархии;
		ФормаЖурнала.Отбор.КорСчет.Использование = Истина;
	КонецЕсли;
	
	ФормаЖурнала.Открыть();
	
КонецПроцедуры // ОбработкаРасшифровкиСтандартногоОтчета()


ИмяРегистраБухгалтерии = "Бюджетирование";

Период="МЕСЯЦ";

МассивШиринКолонок = Новый Массив;
ШиринаТаблицы = 0;

#КонецЕсли