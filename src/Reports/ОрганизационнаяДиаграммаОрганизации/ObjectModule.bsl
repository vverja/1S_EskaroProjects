#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ВысотаУровня;
Перем ЗапросПоШР;
Перем ЗапросПоСотрудникам;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

Функция ПолеЗапросаПоПредставлению(Показатель)
		
	Если ВидОтчета = "СтруктураШтатногоРасписания" Тогда
		Возврат "ШтатноеРасписание."+Показатель.Имя+" КАК "+Показатель.Имя;
	КонецЕсли;	
	
	Если ВидОтчета = "ОрганизационнаяДиаграмма" Тогда
		Если (Показатель.Представление ="Пол")
		 или (Показатель.Представление ="Дата рождения") Тогда
		    Возврат "Работники.Сотрудник.Физлицо."+Показатель.Имя+" КАК "+Показатель.Имя;
		КонецЕсли;
		Если (Показатель.Представление ="Фамилия")
		 или (Показатель.Представление ="Имя")
		 или (Показатель.Представление ="Отчество") Тогда
		    Возврат "ФИОФизлиц."+Показатель.Имя+" КАК "+Показатель.Имя;
		КонецЕсли;
		Если (Показатель.Представление ="Вид занятости") Тогда
		    Возврат "Работники.Сотрудник."+Показатель.Имя+" КАК "+Показатель.Имя;
		КонецЕсли;
		Если (Показатель.Представление ="Фотография") Тогда
		    Возврат "Изображения.Хранилище КАК Данные";
		КонецЕсли;
		Возврат "Работники."+Показатель.Имя+" КАК "+Показатель.Имя;
	КонецЕсли;	
	
КонецФункции	

// Формирует текста запроса информации о штатном расписании
// по выбранным показателям отчета
//
Процедура СформироватьЗапросПоШтатномуРасписанию()
	ЗапросПоШР = Новый Запрос;

	СтрокаПоказателей = "ШтатноеРасписание.Должность КАК Должность";
	Для Каждого Строка Из Показатели цикл
		Если Не Строка.Использование Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаПоказателей = СтрокаПоказателей +", " + ПолеЗапросаПоПредставлению(Строка);	
	КонецЦикла;

	ЗапросПоШР.Текст ="
	|ВЫБРАТЬ
	| "+ СтрокаПоказателей + "
	|ИЗ
	| РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаАктуальности) КАК ШтатноеРасписание
	|ГДЕ
	| ШтатноеРасписание.ПодразделениеОрганизации = &Подразделение И ШтатноеРасписание.Должность = &Должность";


КонецПроцедуры	

// Формирует текста запроса информации о сотрудниках
// по выбранным показателям отчета
//
Процедура СформироватьЗапросПоСотрудникам()
	ЗапросПоСотрудникам = Новый Запрос;
    
	СтрокаПоказателей = "Работники.Сотрудник.Физлицо.Наименование КАК Наименование";
	Для Каждого Строка Из Показатели цикл
		Если Не Строка.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Представление = "Наименование" Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаПоказателей = СтрокаПоказателей +", " + ПолеЗапросаПоПредставлению(Строка);	
	КонецЦикла;
	
	ЗапросПоСотрудникам.Текст ="
	|ВЫБРАТЬ
	|	"+ СтрокаПоказателей + "
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности) КАК Работники
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности) КАК ФИОФизЛиц
	|	ПО ФИОФизЛиц.ФизЛицо = &ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ХранилищеДополнительнойИнформации КАК Изображения
	|	ПО Изображения.Ссылка = Работники.Сотрудник.Физлицо.ОсновноеИзображение
	|
	|	ГДЕ
	|		Работники.Сотрудник.ФизЛицо = &ФизЛицо
	|		И Работники.ПодразделениеОрганизации = &Подразделение
	|		И Работники.Должность = &Должность";


КонецПроцедуры

// Формирует и заполняет параметрами область
//
Функция СформироватьОбластьДолжность(Должность, Подразделение, ОбластьВерх, ОбластьСередина, ОбластьБольшаяСередина, ОбластьНиз);

	ЗапросПоШР.УстановитьПараметр("ДатаАктуальности",	ДатаАктуальности);
	ЗапросПоШР.УстановитьПараметр("Подразделение",	Подразделение);
	ЗапросПоШР.УстановитьПараметр("Должность",	Должность);
	Результат = ЗапросПоШР.Выполнить();
	Выборка = Результат.Выбрать();

	ОбластьВывода = Новый	ТабличныйДокумент;
	ОбластьВывода.Вывести(ОбластьВерх);

	Пока Выборка.Следующий() Цикл
		ОбластьБольшаяСередина.Параметры.Показатель = Выборка.Должность;
		ОбластьВывода.Вывести(ОбластьБольшаяСередина);
		
		Для Каждого Строка Из Показатели цикл
			Если Не Строка.Использование Тогда
				Продолжить;
			КонецЕсли;	
			ОбластьСередина.Параметры.ИмяПоказателя = Строка.Представление;
			ОбластьСередина.Параметры.Показатель = Выборка[Строка.Имя];
			ОбластьВывода.Вывести(ОбластьСередина);
		КонецЦикла;
	КонецЦикла;

	ОбластьВывода.Вывести(ОбластьНиз);

	Возврат ОбластьВывода;
	
КонецФункции	

// Формирует и заполняет параметрами область
//
Функция СформироватьОбластьСотрудник(ФизЛицо, Подразделение, Должность, ОбластьВерх, ОбластьСередина, ОбластьБольшаяСередина, ОбластьФото, ОбластьНиз);

	ЗапросПоСотрудникам.УстановитьПараметр("ДатаАктуальности",	ДатаАктуальности);
	ЗапросПоСотрудникам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоСотрудникам.УстановитьПараметр("Подразделение", Подразделение);
	ЗапросПоСотрудникам.УстановитьПараметр("Должность", Должность);
	Результат = ЗапросПоСотрудникам.Выполнить();
	Выборка   = Результат.Выбрать();

	ОбластьВывода = Новый	ТабличныйДокумент;
	ОбластьВывода.Вывести(ОбластьВерх);

	Пока Выборка.Следующий() Цикл
		Для Каждого Строка Из Показатели цикл
			Если НЕ Строка.Использование Тогда
				Продолжить;
			КонецЕсли;	
			
			Если Строка.Представление = "Фотография" Тогда
				ДанныеДляФото = Выборка.Данные;
				Если ДанныеДляФото <> Null Тогда
					Фото = ДанныеДляФото.Получить();
					Если Фото <> Неопределено Тогда
						ОбластьФото.Рисунки.Фото.Картинка = Фото;
					КонецЕсли;
				Иначе
					ОбластьФото.Рисунки.Фото.Картинка = Новый Картинка() ;
				КонецЕсли;	
				ОбластьВывода.Вывести(ОбластьФото);
				Продолжить;
			КонецЕсли;	
			Если (Строка.Представление = "Наименование") ИЛИ (Строка.Представление = "Фамилия") ИЛИ (Строка.Представление = "Имя") ИЛИ 
				(Строка.Представление = "Отчество") ИЛИ (Строка.Представление = "Должность") Тогда
				ОбластьБольшаяСередина.Параметры.Показатель = Выборка[Строка.Имя];
				ОбластьВывода.Вывести(ОбластьБольшаяСередина);
			Иначе	
				ОбластьСередина.Параметры.ИмяПоказателя = Строка.Представление;
				ОбластьСередина.Параметры.Показатель = Выборка[Строка.Имя];
				ОбластьВывода.Вывести(ОбластьСередина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ОбластьВывода.Вывести(ОбластьНиз);

	Возврат ОбластьВывода;
	
КонецФункции	

//Выполняет печать отчета
//
// Параметры: 
//	Дерево   - таблица значений, содержащая структуру выводимых данных
//  ТабДокумент - куда выводить
//  ПоказыватьЗаголовок - видимость заголовка
// 
Процедура Печать(Дерево, ТабДокумент, ПоказыватьЗаголовок)

	//Создание табличного документа и загрузка необходимых областей из макета
	ТабДокумент.Очистить();
	Макет		=	ПолучитьМакет("Макет");
	ОбластьЗаголовок         =	Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодразделение     =	Макет.ПолучитьОбласть("Подразделение");
	ОбластьДолжностьВерх     =	Макет.ПолучитьОбласть("ДолжностьВерх");
	ОбластьДолжностьСередина =	Макет.ПолучитьОбласть("ДолжностьСередина");
	ОбластьДолжностьБольшаяСередина =	Макет.ПолучитьОбласть("ДолжностьБольшаяСередина");
	ОбластьДолжностьНиз      =	Макет.ПолучитьОбласть("ДолжностьНиз");
	ОбластьСотрудникВерх     =	Макет.ПолучитьОбласть("СотрудникВерх");
	ОбластьСотрудникСередина =	Макет.ПолучитьОбласть("СотрудникСередина");
	ОбластьСотрудникБольшаяСередина =	Макет.ПолучитьОбласть("СотрудникБольшаяСередина");
	ОбластьСотрудникФото     =	Макет.ПолучитьОбласть("СотрудникФото");
	ОбластьСотрудникНиз      =	Макет.ПолучитьОбласть("СотрудникНиз");
	ОбластьЛевый             =	Макет.ПолучитьОбласть("Левый");
	ОбластьПравый            =	Макет.ПолучитьОбласть("Правый");
	ОбластьСредний           =	Макет.ПолучитьОбласть("Средний");
	ОбластьКорень            =	Макет.ПолучитьОбласть("Корень");
	ОбластьУзел              =	Макет.ПолучитьОбласть("Узел");
	ОбластьУзелПодр          =	Макет.ПолучитьОбласть("УзелПодразделения");
	ОбластьНизкоеСмещение    =	Макет.ПолучитьОбласть("НизкоеСмещение");
	ОбластьПродолжение       =	Макет.ПолучитьОбласть("Продолжение");

	//Шапка документа с указанием вида отчета и даты актуальности
	Если ВидОтчета = "СтруктураПодразделений" Тогда
		ОбластьЗаголовок.Параметры.ВидДиаграммы = "Структура подразделений";
	ИначеЕсли ВидОтчета = "СтруктураШтатногоРасписания" Тогда
		ОбластьЗаголовок.Параметры.ВидДиаграммы = "Структура штатного расписания";
	ИначеЕсли ВидОтчета = "ОрганизационнаяДиаграмма" Тогда
		ОбластьЗаголовок.Параметры.ВидДиаграммы = "Организационная диаграмма";	
	КонецЕсли;	
	ОбластьЗаголовок.Параметры.Дата = Формат(ДатаАктуальности,"ДФ=""дд ММММ гггг""");
	ТабДокумент.Вывести(ОбластьЗаголовок);
	ВысотаЗаголовка = ОбластьЗаголовок.ВысотаТаблицы;
	ТабДокумент.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;

	//Собственно построение диаграммы	
	ПоследнийУровень = 0;
	ПоследняяПозиция = 0;
	Для каждого Узел из Дерево Цикл
		//Каждый новый уровень сдвигаем от края листа на один сдвиг
		Если Узел.Уровень <> ПоследнийУровень Тогда
			ТабДокумент.Вывести(ОбластьНизкоеСмещение);
			ПоследняяПозиция = 1;			   
		КонецЕсли;

		//Сдвигаемся до левой границы объекта

		//Если объект не левый и не корень, то слева от него идет продолжение
		//горизонтальной связи левого соседа
		ОбластьВывода = Новый	ТабличныйДокумент;
		Если (НЕ Узел.ЭтоЛевый) И (НЕ Узел.ЭтоКорень) Тогда
			ОбластьВывода.Вывести(ОбластьПродолжение); 
		КонецЕсли;
		ОбластьВывода.Вывести(ОбластьНизкоеСмещение);

		//Сдвигаемя до позиции сдвиг данного объекта, с учетом правой границы последнго
		//объекта на том же уровне и смещения объекта в своей области
		Для См=1 По (Узел.Сдвиг-ПоследняяПозиция+Узел.Смещение)*2 Цикл
			ТабДокумент.Присоединить(ОбластьВывода);
		КонецЦикла;	


		//Выводим непосредственно объект

		//Формируем связь объекта с верхним уровнем
		//У корня такой связи нет
		//У левого и правого связь с сответствующим поворотом
		//Если объект не левыйи и не правый - то у него горизонтальная связь
		//Если объект и левый и правый (единственный потомок своего родителя) то унего просто вертикальная связь
		ОбластьВывода = Новый	ТабличныйДокумент;
		Если Узел.ЭтоКорень Тогда
			ОбластьВывода.Вывести(ОбластьКорень);
		ИначеЕсли Узел.ЭтоЛевый Тогда
			Если НЕ Узел.ЭтоПравый Тогда
				ОбластьВывода.Вывести(ОбластьЛевый);
			Иначе
				ОбластьВывода.Вывести(ОбластьУзел);
			КонецЕсли;	
		ИначеЕсли Узел.ЭтоПравый Тогда
			ОбластьВывода.Вывести(ОбластьПравый);
		Иначе
			ОбластьВывода.Вывести(ОбластьСредний);
		КонецЕсли;

		Если (Не Узел.ЭтоФизЛицо) И (Не Узел.ЭтоДолжность) Тогда
			//этот объект - подразделение
			ОбластьПодразделение.Параметры.Название = Узел.Подразделение.Наименование;
			ОбластьВывода.Вывести(ОбластьПодразделение); 
		ИначеЕсли Узел.ЭтоФизЛицо Тогда
			//этот объект - физлицо
			ОбластьСотрудник = СформироватьОбластьСотрудник(Узел.Подразделение, Узел.Хозяин, Узел.Должность,ОбластьСотрудникВерх, ОбластьСотрудникСередина, ОбластьСотрудникБольшаяСередина, ОбластьСотрудникФото, ОбластьСотрудникНиз);
			ОбластьВывода.Вывести(ОбластьСотрудник);
		ИначеЕсли Узел.ЭтоДолжность Тогда
			//этот объект - позиция штатного расписания
			ОбластьДолжность = СформироватьОбластьДолжность(Узел.Подразделение, Узел.Хозяин, ОбластьДолжностьВерх, ОбластьДолжностьСередина, ОбластьДолжностьБольшаяСередина, ОбластьДолжностьНиз);
			ОбластьВывода.Вывести(ОбластьДолжность);
		КонецЕсли;	

		//Формируем связь объекта с нижним уровнем
		//У листа такой связи нет, у других - простая вертикальная
		Если Не Узел.ЭтоЛист Тогда
			ОбластьВывода.Вывести(ОбластьУзел);
			Если (Не Узел.ЭтоФизЛицо) И (Не Узел.ЭтоДолжность) И (ВидОтчета <> "СтруктураПодразделений") Тогда
				Для См=1 По (ВысотаУровня*2-4) Цикл
					ОбластьВывода.Вывести(ОбластьУзел);
				КонецЦикла;	
			КонецЕсли;	
		Иначе
			ОбластьВывода.Вывести(ОбластьКорень);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьВывода);

		//Сдвигаемя до правой границы области объекта

		//Если объект не правый и не корень, то справа от него идет продолжение
		//горизонтальной связи правого соседа
		ОбластьВывода = Новый	ТабличныйДокумент;
		Если (НЕ Узел.ЭтоПравый) И (НЕ Узел.ЭтоКорень) Тогда
			ОбластьВывода.Вывести(ОбластьПродолжение); 
		КонецЕсли;
		ОбластьВывода.Вывести(ОбластьНизкоеСмещение);

		//Учитывая смещение объекта в своей области сдвигаемя до края области
		Для См=1 По (Узел.Смещение)*2 Цикл
			ТабДокумент.Присоединить(ОбластьВывода);
		КонецЦикла;	
		
		//Запомним текущий уровень и правую границу
		ПоследнийУровень = Узел.Уровень;
		ПоследняяПозиция = Узел.Сдвиг+Узел.Ширина;			
	КонецЦикла;	

	//Выводим диаграмму
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент);	

КонецПроцедуры	




////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьСписокПоказателей() Экспорт
	
	Показатели.Очистить();
	
	Если ВидОтчета = "СтруктураПодразделений" Тогда
		
	ИначеЕсли ВидОтчета = "СтруктураШтатногоРасписания" Тогда
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Представление     = "Количество ставок";
		СтрПоказатели.Имя     			= "КоличествоСтавок";
    	
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Представление     = "Минимальная ставка";
		СтрПоказатели.Имя			    = "МинимальнаяТарифнаяСтавка";
		        
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Представление     = "Максимальная ставка";
		СтрПоказатели.Имя			    = "МаксимальнаяТарифнаяСтавка";
        
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Представление     = "Вид тарифной ставки";
		СтрПоказатели.Имя     			= "ВидТарифнойСтавки";
        
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Представление     = "Валюта ставки";
		СтрПоказатели.Имя     			= "ВалютаТарифнойСтавки";
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Представление     = "График работы";
		СтрПоказатели.Имя			    = "ГрафикРаботы";
			
		
	ИначеЕсли ВидОтчета = "ОрганизационнаяДиаграмма" Тогда	
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя		        = "Наименование";
		СтрПоказатели.Представление     = "Наименование";
		СтрПоказатели.Использование     = Истина;
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя		        = "Должность";
        СтрПоказатели.Представление		= "Должность";
		СтрПоказатели.Использование    = Истина;
		
		СтрПоказатели = Показатели.Добавить();
	    СтрПоказатели.Имя 				= "Данные";
	    СтрПоказатели.Представление 	= "Фотография";
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя	            = "Фамилия";
        СтрПоказатели.Представление		= "Фамилия";
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя	            = "Имя";
        СтрПоказатели.Представление		= "Имя";
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя		        = "Отчество";
		СтрПоказатели.Представление		= "Отчество";
				
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя		        = "ТабельныйНомер";
		СтрПоказатели.Представление     = "Табельный номер";
		
        СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя		        = "ЗанимаемыхСтавок";
        СтрПоказатели.Представление		= "Занимаемых ставок";
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя		        = "ВидЗанятости";
        СтрПоказатели.Представление		= "Вид занятости";
				
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя		        = "Пол";
		СтрПоказатели.Представление		= "Пол";
		
        СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя		        = "ДатаРождения";
        СтрПоказатели.Представление		= "Дата рождения";
				
	КонецЕсли;	
		
	
КонецПроцедуры	

// Выполняет запрос и формирует структуру отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//  ПоказыватьЗаголовок - видимость заголовка отчета
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок) Экспорт

    Перем ЕстьПоказатели;

	//проверим наличие показателей и вычислим высоту уровня диаграммы
	ЕстьПоказатели = Ложь;
	ВысотаУровня = 1;
	Для Каждого Строка Из Показатели Цикл
		Если Строка.Использование Тогда
			ЕстьПоказатели = Истина;
			Если Строка.Представление = "Фотография" Тогда
				ВысотаУровня = ВысотаУровня + 3;
			Иначе
				ВысотаУровня = ВысотаУровня + 1;
			КонецЕсли;
		КонецЕсли;	
    КонецЦикла;

	Если (ВидОтчета = "ОрганизационнаяДиаграмма") И (НЕ ЕстьПоказатели) Тогда
		Предупреждение("Не выбрано ни одного показателя!");
		Возврат;
	КонецЕсли;

    Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности",	КонецДня(ДатаАктуальности));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	
	//Формируем текст запроса в зависимости от вида диаграммы
    ТекстВыбратьПодразделения = "
	|ВЫБРАТЬ
	| Подразделения.Ссылка                   КАК Подразделение";
	ТекстВыбратьДолжности =" ШтатноеРасписание.Должность    	     КАК Должность,
	| ШтатноеРасписание.КоличествоСтавок     КАК КоличествоСтавок";
	ТекстВыбратьСотрудники ="Работники.Сотрудник.ФизЛицо             	     КАК Сотрудник,
	| ФизЛица.Наименование					 КАК НаименованиеФизЛица,
	| (ВЫБОР
	| 		КОГДА Работники.Сотрудник.ФизЛицо = ОтветственныеЛица.ФизическоеЛицо ТОГДА Истина
	| 		ИНАЧЕ Ложь
	| 	КОНЕЦ)							 КАК ЭтоНачальник";
	ТекстИзПодразделения = "
	|ИЗ 
	| Справочник.ПодразделенияОрганизаций КАК Подразделения
	// подключим начальников
	| ЛЕВОЕ СОЕДИНЕНИЕ
	| РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаАктуальности) КАК ОтветственныеЛица
	| ПО (ОтветственныеЛица.СтруктурнаяЕдиница = Подразделения.Ссылка)";
	ТекстИзДолжности = "ЛЕВОЕ СОЕДИНЕНИЕ
	| РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаАктуальности) КАК ШтатноеРасписание
	| ПО Подразделения.Ссылка=ШтатноеРасписание.ПодразделениеОрганизации
	|  И ШтатноеРасписание.КоличествоСтавок > 0";
	ТекстИзСотрудники = "ЛЕВОЕ СОЕДИНЕНИЕ
	| РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности) КАК Работники
	| ПО (Подразделения.Ссылка=Работники.ПодразделениеОрганизации) И (ШтатноеРасписание.Должность=Работники.Должность) И (Работники.ЗанимаемыхСтавок > 0)
	// подключим наименования физлиц
	| ЛЕВОЕ СОЕДИНЕНИЕ
	| Справочник.ФизическиеЛица КАК ФизЛица
	| ПО (Работники.Сотрудник.ФизЛицо = ФизЛица.Ссылка)";
    ТекстУпорядочить = "УПОРЯДОЧИТЬ ПО
	| Подразделения.Ссылка       ИЕРАРХИЯ,
	| Подразделения.Наименование Возр";
	ТекстУпорядочитьПоСотрудники = "ЭтоНачальник	Убыв,
	| НаименованиеФизЛица Возр";
	
    Запрос.Текст = ТекстВыбратьПодразделения;

	// выборки
	Если (ВидОтчета <> "СтруктураПодразделений") Тогда
		Запрос.Текст = Запрос.Текст + "," + Символы.ПС + ТекстВыбратьДолжности;
	КонецЕсли;
	Если (ВидОтчета = "ОрганизационнаяДиаграмма") Тогда
		Запрос.Текст = Запрос.Текст + "," + Символы.ПС + ТекстВыбратьСотрудники;
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + Символы.ПС + ТекстИзПодразделения;
	Если (ВидОтчета <> "СтруктураПодразделений") Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + ТекстИзДолжности;
	КонецЕсли;
	Если (ВидОтчета = "ОрганизационнаяДиаграмма") Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + ТекстИзСотрудники ;
	КонецЕсли;

	// фильтры
	Запрос.Текст = Запрос.Текст +Символы.ПС+"ГДЕ Подразделения.Ссылка.Владелец = &Организация";
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Запрос.Текст = Запрос.Текст +Символы.ПС+"И Подразделения.Ссылка В ИЕРАРХИИ (&Подразделение)";	
	КонецЕсли;	
		


	// сортировки
    Запрос.Текст = Запрос.Текст + Символы.ПС + ТекстУпорядочить;
	Если (ВидОтчета = "ОрганизационнаяДиаграмма") Тогда
		Запрос.Текст = Запрос.Текст + "," + Символы.ПС + ТекстУпорядочитьПоСотрудники;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();

	
   	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока);
   	МассивЧисло = Новый Массив;
	МассивЧисло.Добавить(Тип("Число"));
	ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивЧисло);
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	МассивСправочник = Новый Массив;
    МассивСправочник.Добавить(Тип("СправочникСсылка.Организации"));
	МассивСправочник.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	МассивСправочник.Добавить(Тип("СправочникСсылка.ДолжностиОрганизаций"));
	МассивСправочник.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ОписаниеТиповСправочник = Новый ОписаниеТипов(МассивСправочник);
	
	//Создание дерева
	Дерево = Новый ("ТаблицаЗначений");
    
	//Собственно объект диаграммы. С точки зрения диаграммы, объекты всех видов равноправны
	//(заложено для возможных последующих модификаций). Поэтому, в качестве подразделения
	//могут выступать и физлица, и позиции штатного расписания.
	Дерево.Колонки.Добавить("Подразделение", ОписаниеТиповСправочник); 
    //"Родитель" объекта - объект, от которого "произростает" данный объект. Для подразделения
	//это его буквальный родитель. Поскольку физлица и должности выводятся в столбик, то для них
	//в качестве родителя может быть их подразделение, либо предыдущее физлицо (должность).
    Дерево.Колонки.Добавить("Родитель", ОписаниеТиповСправочник);
    //Родителем может быть и ФизЛицо. Поскольку одно физлицо может работать в одном
	//подразделении на нескольких должностях - надо хранить должность родителя-физлица
	Дерево.Колонки.Добавить("ДолжностьРодителя", ОписаниеТиповСправочник);
    //Хозяин - подразделение компании, к которому относится данная должность 
	Дерево.Колонки.Добавить("Хозяин", ОписаниеТиповСправочник); 
    //Идентификатор - используется для объектов типа должность и физлицо, поскольку могут быть в разных подразделениях
	//может фигурировать в разных подразделениях. Содержит код хозяина и код самого объекта.
	Дерево.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока); 
	//Флаг объект корень - не имеет "родителя"
	Дерево.Колонки.Добавить("ЭтоКорень", ОписаниеТиповБулево);         
    //Флаг объект лист - не имеет "потомков"
	Дерево.Колонки.Добавить("ЭтоЛист", ОписаниеТиповБулево);           
    //Флаг объект является самым левым среди "потомков" его "родителя"
	Дерево.Колонки.Добавить("ЭтоЛевый", ОписаниеТиповБулево);
	//Флаг объект является самым правым среди "потомков" его "родителя"
	Дерево.Колонки.Добавить("ЭтоПравый", ОписаниеТиповБулево);
	//Должность объекта вида ФизЛицо
	Дерево.Колонки.Добавить("Должность", ОписаниеТиповСправочник);     
    //Количество ставок объекта вида Должность
	Дерево.Колонки.Добавить("КоличествоСтавок", ОписаниеТиповЧисло);   
    //Отросток - последняя должность или физлицо от данного подразделения. Служит для вывода в столбик
	Дерево.Колонки.Добавить("Отросток", ОписаниеТиповСправочник);
    //Какое именно физлицо можно узнать по должности
	Дерево.Колонки.Добавить("ДолжностьОтростка", ОписаниеТиповСправочник);
    //Флаг объект является физлицом
	Дерево.Колонки.Добавить("ЭтоФизЛицо", ОписаниеТиповБулево);        
    //Флаг объект является должностью штатного расписания
	Дерево.Колонки.Добавить("ЭтоДолжность", ОписаниеТиповБулево);      
    //Уровень обекта в иерархии
	Дерево.Колонки.Добавить("Уровень", ОписаниеТиповЧисло);            
    //Ширина области объекта - число листьев, которые "произрастают" от него
	Дерево.Колонки.Добавить("Ширина", ОписаниеТиповЧисло);             
    //Сдвиг объекта - начало его области относительно левого края листа
	Дерево.Колонки.Добавить("Сдвиг", ОписаниеТиповЧисло);              
    //Смещение - смещение объекта относительно собственной области - для центрирования
	Дерево.Колонки.Добавить("Смещение", ОписаниеТиповЧисло);           


	//В корень дерева поместим организацию
    СтрокаДерева = Дерево.Добавить();
	СтрокаДерева.Подразделение = Организация;
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ПервыйРодительОрганизация = Истина;
	Иначе
		ПервыйРодительОрганизация = Ложь;
	КонецЕсли;	
	
	
	//Заполнение дерева по результатам запроса
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		 //Проверяем, было ли текущее подразделение занесено в таблицу
		СтрокаДерева = Дерево.Найти(Выборка.Подразделение,"Подразделение"); 
        Если СтрокаДерева = Неопределено Тогда
            //Если нет - добавляем подразделение
			СтрокаДерева = Дерево.Добавить();
			СтрокаДерева.Подразделение = Выборка.Подразделение;
			СтрокаДерева.Родитель = Выборка.Подразделение.Родитель;
            //Для подразделения верхнего уровня родителем будет организация
			Если НЕ ЗначениеЗаполнено(СтрокаДерева.Родитель) ИЛИ ПервыйРодительОрганизация Тогда
				СтрокаДерева.Родитель = Организация;
				ПервыйРодительОрганизация = Ложь;
			КонецЕсли;	
			СтрокаДерева.Отросток = Выборка.Подразделение;//Изначально отростком подразделения является оно само
        КонецЕсли;
		Если (ВидОтчета = "СтруктураШтатногоРасписания") Тогда
			Если Выборка.Должность <> NULL Тогда
			   //Если строим по штатному расписанию, то добавляем должность
				НоваяЗапись = Дерево.Добавить();
				НоваяЗапись.Подразделение = Выборка.Должность;
				НоваяЗапись.Хозяин = Выборка.Подразделение; 
				НоваяЗапись.Родитель = СтрокаДерева.Отросток; //Родителем становится отросток подразделения
				НоваяЗапись.Идентификатор = Строка(НоваяЗапись.Хозяин.Код)+" "+Строка(НоваяЗапись.Подразделение.Код);
				НоваяЗапись.КоличествоСтавок = Выборка.КоличествоСтавок;
				НоваяЗапись.ЭтоДолжность = Истина;
				СтрокаДерева.Отросток = Выборка.Должность;//Новая должность становится отростком своего подразделения
			КонецЕсли;	
		КонецЕсли;
		Если (ВидОтчета = "ОрганизационнаяДиаграмма") Тогда
			Если Выборка.Сотрудник <> NULL Тогда
		  		НоваяЗапись = Дерево.Добавить();
				НоваяЗапись.Подразделение = Выборка.Сотрудник;
				НоваяЗапись.Хозяин = Выборка.Подразделение; 
				НоваяЗапись.Родитель = СтрокаДерева.Отросток;//Родителем становится отросток подразделения
				НоваяЗапись.ДолжностьРодителя = СтрокаДерева.ДолжностьОтростка;
				НоваяЗапись.Должность = Выборка.Должность;
				НоваяЗапись.Идентификатор = Строка(НоваяЗапись.Хозяин.Код)+" "+Строка(НоваяЗапись.Подразделение.Код)+" "+Строка(НоваяЗапись.Должность.Код);
				НоваяЗапись.ЭтоФизЛицо = Истина;
				СтрокаДерева.Отросток = Выборка.Сотрудник;//Новое физлицо становится отростком своего подразделения
				СтрокаДерева.ДолжностьОтростка = Выборка.Должность;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;

    //Определяем уровень объекта в иерархии (координата по вертикали). 
	//Уровень корня принимается равным 1, Уровень каждого объекта вычисляется как
	//уровень родителя+1
	ВсегоУровней = 0;
	Для каждого Узел из Дерево Цикл
        Если (Узел.ЭтоДолжность)И(Узел.Хозяин <> Узел.Родитель) Тогда
			СтрокаРодителя = Дерево.Найти(Строка(Узел.Хозяин.Код)+" "+Строка(Узел.Родитель.Код),"Идентификатор");
		ИначеЕсли (Узел.ЭтоФизЛицо)И(Узел.Хозяин <> Узел.Родитель) Тогда
			СтрокаРодителя = Дерево.Найти(Строка(Узел.Хозяин.Код)+" "+Строка(Узел.Родитель.Код)+" "+Строка(Узел.ДолжностьРодителя.Код),"Идентификатор");	
		Иначе					
			СтрокаРодителя = Дерево.Найти(Узел.Родитель,"Подразделение"); 
        КонецЕсли;
	
		Если СтрокаРодителя = Неопределено Тогда
			Узел.Уровень = 1;
			Узел.ЭтоКорень  = Истина;
		Иначе
			Узел.Уровень = СтрокаРодителя.Уровень+1;
		КонецЕсли;
		Если Узел.Уровень > ВсегоУровней Тогда
			ВсегоУровней = Узел.Уровень;
		КонецЕсли;	
	  КонецЦикла;

	//Определяем ширину области объекта
	//Ширина листа принимается равной 1. Ширина каждого объекта вычисляется как
	//сумма ширины всех его прямых потомков
	Дерево.Сортировать("Уровень Убыв, Родитель Возр, Подразделение Возр");
	Для каждого Узел из Дерево Цикл
		Если Узел.Уровень = ВсегоУровней Тогда
			Узел.Ширина = 1;
			Узел.ЭтоЛист   = Истина;
		ИначеЕсли Узел.Ширина = 0 Тогда
			Узел.Ширина = 1;
			Узел.ЭтоЛист   = Истина;
		КонецЕсли;

		Если (Узел.ЭтоДолжность)И(Узел.Хозяин <> Узел.Родитель) Тогда
			СтрокаРодителя = Дерево.Найти(Строка(Узел.Хозяин.Код)+" "+Строка(Узел.Родитель.Код),"Идентификатор"); 
		ИначеЕсли (Узел.ЭтоФизЛицо)И(Узел.Хозяин <> Узел.Родитель) Тогда
			СтрокаРодителя = Дерево.Найти(Строка(Узел.Хозяин.Код)+" "+Строка(Узел.Родитель.Код)+" "+Строка(Узел.ДолжностьРодителя.Код),"Идентификатор");		
		Иначе					
			СтрокаРодителя = Дерево.Найти(Узел.Родитель,"Подразделение"); 
        КонецЕсли;

		Если СтрокаРодителя <> Неопределено Тогда
			СтрокаРодителя.Ширина = СтрокаРодителя.Ширина+Узел.Ширина;
		КонецЕсли;
	КонецЦикла;

	//Определяем сдвиг и смещение объекта (координата по горизонтали)
	//Сдвиг отсчитывается от левого края листа. Сдвиг каждого объекта вычисляется как
	//Сдвиг его родителя + правый край левого соседа 
	//Смещение отсчитывается относительно начала области объекта и соответствует
	//центру его области
	Дерево.Сортировать("Уровень Возр, Родитель Возр, ЭтоФизЛицо Убыв, ЭтоДолжность Убыв, Подразделение Возр");
	ПоследнийУровень  = 0;
	ПоследнийРодитель = NULL;
	ПоследнийСдвиг    = 0;
	Для каждого Узел из Дерево Цикл
		Если (Узел.Уровень = ПоследнийУровень) И (Узел.Родитель = ПоследнийРодитель) Тогда
			Узел.Сдвиг   = ПоследнийСдвиг;
			Узел.ЭтоПравый  = Истина;
			ИндексСтроки = Дерево.Индекс(Узел);
			Дерево[ИндексСтроки-1].ЭтоПравый = Ложь;
		Иначе
			Если (Узел.ЭтоДолжность)И(Узел.Хозяин <> Узел.Родитель) Тогда
				СтрокаРодителя = Дерево.Найти(Строка(Узел.Хозяин.Код)+" "+Строка(Узел.Родитель.Код),"Идентификатор"); 
			ИначеЕсли (Узел.ЭтоФизЛицо)И(Узел.Хозяин <> Узел.Родитель) Тогда
				СтрокаРодителя = Дерево.Найти(Строка(Узел.Хозяин.Код)+" "+Строка(Узел.Родитель.Код)+" "+Строка(Узел.ДолжностьРодителя.Код),"Идентификатор");		
			Иначе					
				СтрокаРодителя = Дерево.Найти(Узел.Родитель,"Подразделение"); 
			КонецЕсли;
			
			Если СтрокаРодителя = Неопределено Тогда
				Узел.Сдвиг = 1;
			Иначе
				Узел.Сдвиг = СтрокаРодителя.Сдвиг;
				Узел.ЭтоЛевый  = Истина;
				Узел.ЭтоПравый = Истина;
		   	КонецЕсли;
			ПоследнийУровень = Узел.Уровень;
			Если ((Узел.ЭтоФизлицо)ИЛИ(Узел.ЭтоДолжность))И(Узел.Хозяин <> Узел.Родитель) Тогда 
				ПоследнийРодитель = NULL; 
			Иначе
				ПоследнийРодитель= Узел.Родитель;
			КонецЕсли;	
		КонецЕсли;
		Узел.Смещение  = Узел.Ширина/2-0.5;
		ПоследнийСдвиг = Узел.Сдвиг + Узел.Ширина;
	КонецЦикла;	

    //Выводим структуру в табличный документ
	Дерево.Сортировать("Уровень Возр, Сдвиг Возр");

	Если (ВидОтчета = "СтруктураШтатногоРасписания") Тогда
		СформироватьЗапросПоШтатномуРасписанию();
	ИначеЕсли (ВидОтчета = "ОрганизационнаяДиаграмма") тогда
		СформироватьЗапросПоСотрудникам();
	КонецЕсли;	
	
    Печать(Дерево, ДокументРезультат, ПоказыватьЗаголовок);


КонецПроцедуры // СформироватьОтчет()

#КонецЕсли