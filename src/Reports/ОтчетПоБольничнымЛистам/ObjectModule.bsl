#Если Клиент Тогда

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("РасчетЗаСчетСоцстраха", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("РасчетЗаСчетОрганизации", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛОрганизации);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("РасчетБольничныйТравмаНаПроизводстве", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("РасчетБольничныйОтпускПоБиР", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
	
	                 
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ОбщийОтчет.ИмяРегистра = "-";
	ОбщийОтчет.мНазваниеОтчета = "Отчет по больничным листам";
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	// структура представлений полей
	СтруктураПредставлениеПолей = Новый Структура();
	ТекстЗапроса = "
	| ВЫБРАТЬ РАЗРЕШЕННЫЕ 	
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|   Больничный.Регистратор.ПроцентОплаты						КАК Размер,	
	|	Больничный.Регистратор.ПричинаНетрудоспособности			КАК Причина,	
	|	Больничный.ФизЛицо										КАК ФизЛицо,		
	|	Больничный.Регистратор										КАК Регистратор,
	|	Больничный.Регистратор.СерияБольничногоЛиста				КАК Серия,
	|	Больничный.Регистратор.НомерБольничногоЛиста				КАК Номер,
	|	СУММА(Больничный.НормаДней)					 				КАК НормаДней,
	|	СУММА(Больничный.НормаЧасов)			 					КАК НормаЧасов,	
	|	СУММА(Больничный.Результат)						 			КАК Результат,
	|	СУММА(Больничный.НормаДнейОрг)					 			КАК НормаДнейОрг,
	|	СУММА(Больничный.НормаЧасовОрг)			 					КАК НормаЧасовОрг,	
	|	СУММА(Больничный.РезультатОрг)						 		КАК РезультатОрг,
	|	СУММА(Больничный.НормаДнейСоц)					 			КАК НормаДнейСоц,
	|	СУММА(Больничный.НормаЧасовСоц)			 					КАК НормаЧасовСоц,	
	|	СУММА(Больничный.РезультатСоц)					 			КАК РезультатСоц
	|
	|{ВЫБРАТЬ 
	|	РаботникиОрганизацииСрезПоследних.Организация.* 	КАК Организация	
	| }
	|ИЗ 
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(КонецПериода(&ДатаНач,Месяц),{Организация=&Организация}) КАК РаботникиОрганизацииСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|   	ВЫБРАТЬ
	|   		БольничныйЗаСчетОрганизации.Показатель1								КАК Размер,	
	|			БольничныйЗаСчетОрганизации.Регистратор.ПричинаНетрудоспособности	КАК Причина,	
	|			БольничныйЗаСчетОрганизации.Сотрудник							КАК ФизЛицо,		
	//|			БольничныйЗаСчетОрганизации.Приказ									КАК Приказ,		
	|			БольничныйЗаСчетОрганизации.Организация								КАК Организация,		
	|			БольничныйЗаСчетОрганизации.Регистратор								КАК Регистратор,		
	|			БольничныйЗаСчетОрганизации.НормаДней								КАК НормаДней,
	|			БольничныйЗаСчетОрганизации.НормаЧасов			 					КАК НормаЧасов,	
	|			БольничныйЗаСчетОрганизации.Результат								КАК Результат,
	|			БольничныйЗаСчетОрганизации.НормаДней								КАК НормаДнейОрг,
	|			БольничныйЗаСчетОрганизации.НормаЧасов			 					КАК НормаЧасовОрг,	
	|			БольничныйЗаСчетОрганизации.Результат								КАК РезультатОрг,
	|			0					КАК НормаДнейСоц,
	|			0			 		КАК НормаЧасовСоц,	
	|			0					КАК РезультатСоц
	|   	ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК БольничныйЗаСчетОрганизации
	|
	|   	ГДЕ	БольничныйЗаСчетОрганизации.ПериодРегистрации >= НачалоПериода(&ДатаНач,Месяц)
	|		И	БольничныйЗаСчетОрганизации.ПериодРегистрации <= КонецПериода(&ДатаНач,Месяц)
	|   	И	БольничныйЗаСчетОрганизации.ПериодРегистрации >= НачалоПериода(&ДатаНач,Месяц)
	|		И	БольничныйЗаСчетОрганизации.ПериодРегистрации <= КонецПериода(&ДатаНач,Месяц)
	|   	И	БольничныйЗаСчетОрганизации.ВидРасчета = &РасчетЗаСчетОрганизации
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|   	ВЫБРАТЬ
	|   		БольничныйЗаСчетСоцстраха.Показатель1 КАК Размер,	
	|			БольничныйЗаСчетСоцстраха.Регистратор.ПричинаНетрудоспособности	КАК Причина,	
	|			БольничныйЗаСчетСоцстраха.Сотрудник							КАК ФизЛицо,		
	//|			БольничныйЗаСчетСоцстраха.Приказ							КАК Приказ,		
	|			БольничныйЗаСчетСоцстраха.Организация						КАК Организация,		
	|			БольничныйЗаСчетСоцстраха.Регистратор						КАК Регистратор,		
	|			БольничныйЗаСчетСоцстраха.НормаДней				КАК НормаДней,
	|			БольничныйЗаСчетСоцстраха.НормаЧасов			 	КАК НормаЧасов,	
	|			БольничныйЗаСчетСоцстраха.Результат				КАК Результат,
	|			0				КАК НормаДнейОрг,
	|			0			 	КАК НормаЧасовОрг,	
	|			0				КАК РезультатОрг,
	|			БольничныйЗаСчетСоцстраха.НормаДней					КАК НормаДнейСоц,
	|			БольничныйЗаСчетСоцстраха.НормаЧасов			 	КАК НормаЧасовСоц,	
	|			БольничныйЗаСчетСоцстраха.Результат					КАК РезультатСоц
	|   	ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК БольничныйЗаСчетСоцстраха
	|
	|   	ГДЕ	БольничныйЗаСчетСоцстраха.ПериодРегистрации >= НачалоПериода(&ДатаНач,Месяц)
	|		И	БольничныйЗаСчетСоцстраха.ПериодРегистрации <= КонецПериода(&ДатаНач,Месяц)
	|   	И	БольничныйЗаСчетСоцстраха.ПериодРегистрации >= НачалоПериода(&ДатаНач,Месяц)
	|		И	БольничныйЗаСчетСоцстраха.ПериодРегистрации <= КонецПериода(&ДатаНач,Месяц)
	|   	И	БольничныйЗаСчетСоцстраха.ВидРасчета = &РасчетЗаСчетСоцстраха
	// Больничный "Травма на производстве"
	|		ОБЪЕДИНИТЬ ВСЕ
	|   	ВЫБРАТЬ
	|   		БольничныйТравмаНаПроизводстве.Показатель1 КАК Размер,	
	|			БольничныйТравмаНаПроизводстве.Регистратор.ПричинаНетрудоспособности	КАК Причина,	
	|			БольничныйТравмаНаПроизводстве.Сотрудник								КАК ФизЛицо,		
	//|			БольничныйТравмаНаПроизводстве.Приказ							КАК Приказ,		
	|			БольничныйТравмаНаПроизводстве.Организация						КАК Организация,		
	|			БольничныйТравмаНаПроизводстве.Регистратор						КАК Регистратор,		
	|			БольничныйТравмаНаПроизводстве.НормаДней				КАК НормаДней,
	|			БольничныйТравмаНаПроизводстве.НормаЧасов			 	КАК НормаЧасов,	
	|			БольничныйТравмаНаПроизводстве.Результат				КАК Результат,
	|			0				КАК НормаДнейОрг,
	|			0			 	КАК НормаЧасовОрг,	
	|			0				КАК РезультатОрг,
	|			БольничныйТравмаНаПроизводстве.НормаДней					КАК НормаДнейСоц,
	|			БольничныйТравмаНаПроизводстве.НормаЧасов			 	КАК НормаЧасовСоц,	
	|			БольничныйТравмаНаПроизводстве.Результат					КАК РезультатСоц
	|   	ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК БольничныйТравмаНаПроизводстве
	|
	|   	ГДЕ	БольничныйТравмаНаПроизводстве.ПериодРегистрации >= НачалоПериода(&ДатаНач,Месяц)
	|		И	БольничныйТравмаНаПроизводстве.ПериодРегистрации <= КонецПериода(&ДатаНач,Месяц)
	|   	И	БольничныйТравмаНаПроизводстве.ПериодРегистрации >= НачалоПериода(&ДатаНач,Месяц)
	|		И	БольничныйТравмаНаПроизводстве.ПериодРегистрации <= КонецПериода(&ДатаНач,Месяц)
	|   	И	БольничныйТравмаНаПроизводстве.ВидРасчета = &РасчетБольничныйТравмаНаПроизводстве
	// Больничный "Отпуск по БиР"
	|		ОБЪЕДИНИТЬ ВСЕ
	|   	ВЫБРАТЬ
	|   		БольничныйОтпускПоБиР.Показатель1 КАК Размер,	
	|			БольничныйОтпускПоБиР.Регистратор.ПричинаНетрудоспособности	КАК Причина,	
	|			БольничныйОтпускПоБиР.Сотрудник							КАК ФизЛицо,		
	//|			БольничныйОтпускПоБиР.Приказ							КАК Приказ,		
	|			БольничныйОтпускПоБиР.Организация						КАК Организация,		
	|			БольничныйОтпускПоБиР.Регистратор						КАК Регистратор,		
	|			БольничныйОтпускПоБиР.НормаДней				КАК НормаДней,
	|			БольничныйОтпускПоБиР.НормаЧасов			 	КАК НормаЧасов,	
	|			БольничныйОтпускПоБиР.Результат				КАК Результат,
	|			0				КАК НормаДнейОрг,
	|			0			 	КАК НормаЧасовОрг,	
	|			0				КАК РезультатОрг,
	|			БольничныйОтпускПоБиР.НормаДней					КАК НормаДнейСоц,
	|			БольничныйОтпускПоБиР.НормаЧасов			 	КАК НормаЧасовСоц,	
	|			БольничныйОтпускПоБиР.Результат					КАК РезультатСоц
	|   	ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК БольничныйОтпускПоБиР
	|
	|   	ГДЕ	БольничныйОтпускПоБиР.ПериодРегистрации >= НачалоПериода(&ДатаНач,Месяц)
	|		И	БольничныйОтпускПоБиР.ПериодРегистрации <= КонецПериода(&ДатаНач,Месяц)
	|   	И	БольничныйОтпускПоБиР.ПериодРегистрации >= НачалоПериода(&ДатаНач,Месяц)
	|		И	БольничныйОтпускПоБиР.ПериодРегистрации <= КонецПериода(&ДатаНач,Месяц)
	|   	И	БольничныйОтпускПоБиР.ВидРасчета = &РасчетБольничныйОтпускПоБиР
	//
	|
	|   ) КАК Больничный
	|	ПО	Больничный.ФизЛицо = РаботникиОрганизацииСрезПоследних.Сотрудник 
	//|   И	Больничный.Приказ = РаботникиОрганизацииСрезПоследних.Приказ 
	|   И	(Больничный.Организация = РаботникиОрганизацииСрезПоследних.Организация 
	|   ИЛИ	Больничный.Организация = РаботникиОрганизацииСрезПоследних.Организация.ГоловнаяОрганизация)//условие ИЛИ нужно будет убрать, если при проведении будет указана не головная организация а просто организация
	|
	|{ГДЕ
	|	РаботникиОрганизацииСрезПоследних.Организация.* 				КАК Организация,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.*	КАК ПодразделениеОрганизации,		
	|   Больничный.Регистратор.ПроцентОплаты							КАК Размер,
	|	Больничный.Регистратор.ПричинаНетрудоспособности.*				КАК Причина,		
	|	Больничный.ФизЛицо.* 											КАК ФизЛицо,                        	
	| 	Больничный.Регистратор.*										КАК Регистратор
	|}
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации,
	|	Больничный.Регистратор.ПроцентОплаты,
	|	Больничный.Регистратор.ПричинаНетрудоспособности,
	|	Больничный.ФизЛицо,
	|	Больничный.Регистратор,
	|	Больничный.Регистратор.СерияБольничногоЛиста,
	|	Больничный.Регистратор.НомерБольничногоЛиста
	|
	|{УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизацииСрезПоследних.Организация.* КАК Организация,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.*	КАК ПодразделениеОрганизации,
	|   Больничный.Регистратор.ПроцентОплаты КАК Размер,
	|	Больничный.Регистратор.ПричинаНетрудоспособности.*					КАК Причина,
	|	Больничный.ФизЛицо.*					КАК ФизЛицо,	
	|	Больничный.Регистратор.*				КАК Регистратор	
	|}
	|
	|ИТОГИ 
	|	СУММА(НормаДней),
	|	СУММА(НормаЧасов),			
	|	СУММА(Результат),
	|	СУММА(НормаДнейОрг),
	|	СУММА(НормаЧасовОрг),			
	|	СУММА(РезультатОрг),
	|	СУММА(НормаДнейСоц),
	|	СУММА(НормаЧасовСоц),			
	|	СУММА(РезультатСоц)	
	|ПО ОБЩИЕ,	
	|	ПодразделениеОрганизации,
	|	Размер,
	|   Причина,
	|	ФизЛицо,	
	|	Регистратор
	| 
	|
	|{ИТОГИ ПО	
	|	РаботникиОрганизацииСрезПоследних.Организация.* 				КАК Организация,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.*	КАК ПодразделениеОрганизации,
	|   Больничный.Регистратор.ПроцентОплаты							КАК Размер,
	|	Больничный.Регистратор.ПричинаНетрудоспособности.* 				КАК Причина,
	|   Больничный.ФизЛицо.*											КАК ФизЛицо,                	
	|	Больничный.Регистратор.*										КАК Регистратор	
	|}
	|";
	
							  
	
	ПостроительОтчета.Текст = ТекстЗапроса;							  
							  
	СтруктураПредставлениеПолей.Вставить("ПодразделениеОрганизации", "Подразделение");
	СтруктураПредставлениеПолей.Вставить("ФизЛицо", "Работник");
	СтруктураПредставлениеПолей.Вставить("Размер", "Процент выплаты");
	СтруктураПредставлениеПолей.Вставить("Причина", "Причина болезни");	
	
	Если ОбщийОтчет.Показатели.Найти("Серия", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("Серия", "Серия", истина, "");		
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("Номер", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("Номер", "Номер", истина, "");		
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("НормаДней", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("НормаДней", "Дней болезни", истина, "ЧЦ=15; ЧДЦ=2");		
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("НормаЧасов", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("НормаЧасов", "Часов болезни", Истина, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("Результат", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("Результат", "Сумма", истина, "ЧЦ=15; ЧДЦ=2");		
	КонецЕсли;			
	Если ОбщийОтчет.Показатели.Найти("НормаДнейОрг", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("НормаДнейОрг", "Дни за счет предприятия", истина, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("НормаЧасовОрг", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("НормаЧасовОрг", "Часы за счет предприятия", Истина, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("РезультатОрг", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("РезультатОрг", "Сумма за счет предприятия", истина, "ЧЦ=15; ЧДЦ=2");		
	КонецЕсли;		
	Если ОбщийОтчет.Показатели.Найти("НормаДнейСоц", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("НормаДнейСоц", "Дни за счет соцстраха", истина, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("НормаЧасовСоц", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("НормаЧасовСоц", "Часы за счет соцстраха", Истина, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	Если ОбщийОтчет.Показатели.Найти("РезультатСоц", "Имя") = Неопределено Тогда
		ОбщийОтчет.ЗаполнитьПоказатели("РезультатСоц", "Сумма за счет соцстраха", истина, "ЧЦ=15; ЧДЦ=2");		
	КонецЕсли;		
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
	// группировки по умолчанию
	//ПостроительОтчета.ИзмеренияСтроки.Добавить("Организация");
	//ПостроительОтчета.ИзмеренияСтроки.Добавить("ПодразделениеОрганизации");
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Организация");	
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	
	// настройки отчета
	ОбщийОтчет.РаскрашиватьИзмерения = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	//ОбщийОтчет.мРежимВводаПериода = 1; // Дата
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры

#КонецЕсли