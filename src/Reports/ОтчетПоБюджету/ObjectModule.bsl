#Если Клиент Тогда
// Настройка периода
Перем НП Экспорт;

// Все возможные показатели
Перем мТаблицаПоказатели Экспорт;

Перем мНазваниеОтчета Экспорт;
Перем мИмяОтчета;
Перем мНаДату Экспорт;

// Счетчик выведенных в отчет периодов
Перем мВыведеноПериодов;

// Количество группировок в выводе по горизонтали
Перем мГруппировокПоГоризонтали;

// Группировки, выводимые в отчет по горизонтали
Перем мЗначимыеГруппировкиГор;

Перем КопияТаблицаСценарии;
Перем ГруппировкаГоризонтальнаяИмя;

// Настраивает построитель для вывода остатков по счетам бюджета
//
// Параметры
//  НастройкиПостроителя: НастройкиПостроителяОтчета - настройки построителя из интерфейса
//
// Возвращаемое значение:
//   ПостроительДляСчетов: ПостроительОтчета - настроенный построитель отчета для вывода остатков по счетам бюджета
//
Функция НастроитьПостроительДляСчетов(НастройкиПостроителя)

	ПостроительДляСчетов=Новый ПостроительОтчета;
	Периодичность=?(Сценарий.Пустая(),"День",Строка(Сценарий.Периодичность));
	  
	ТекстПостроителя="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСчетов.СтрокаБюджета КАК СтрокаБюджета,
	|{ВЫБРАТЬ
	|	ДанныеСчетов.Период КАК Период,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"ДанныеСчетов.Период")+"
	|	ДанныеСчетов.ЦФО.* КАК ЦФО,
	|	ДанныеСчетов.Проект.* КАК Проект,
	|	ДанныеСчетов.Контрагент.* КАК Контрагент,
	|	ДанныеСчетов.СтатьяОборотов.* КАК СтатьяОборотов,
	|	ДанныеСчетов.Номенклатура.* КАК Номенклатура,
	|	ДанныеСчетов.Валюта КАК Валюта}
	|	ДанныеСчетов.СуммаУпрОборотДт КАК СуммаУпрОборотДт,
	|	ДанныеСчетов.СуммаУпрОборотКт КАК СуммаУпрОборотКт,
	|	ДанныеСчетов.СуммаУпрНачальныйОстатокДт КАК СуммаУпрНачальныйОстатокДт,
	|	ДанныеСчетов.СуммаУпрНачальныйОстатокКт КАК СуммаУпрНачальныйОстатокКт,
	|	ДанныеСчетов.СуммаУпрКонечныйОстатокДт КАК СуммаУпрКонечныйОстатокДт,
	|	ДанныеСчетов.СуммаУпрКонечныйОстатокКт КАК СуммаУпрКонечныйОстатокКт,
	|	ДанныеСчетов.ВалютнаяСуммаНачальныйОстатокДт КАК ВалютнаяСуммаНачальныйОстатокДт,
	|	ДанныеСчетов.ВалютнаяСуммаНачальныйОстатокКт КАК ВалютнаяСуммаНачальныйОстатокКт,
	|	ДанныеСчетов.ВалютнаяСуммаКонечныйОстатокДт КАК ВалютнаяСуммаКонечныйОстатокДт,
	|	ДанныеСчетов.ВалютнаяСуммаКонечныйОстатокКт КАК ВалютнаяСуммаКонечныйОстатокКт,
	|	ДанныеСчетов.СуммаСценарияНачальныйОстатокДт КАК СуммаСценарияНачальныйОстатокДт,
	|	ДанныеСчетов.СуммаСценарияНачальныйОстатокКт КАК СуммаСценарияНачальныйОстатокКт,
	|	ДанныеСчетов.СуммаСценарияКонечныйОстатокДт КАК СуммаСценарияКонечныйОстатокДт,
	|	ДанныеСчетов.СуммаСценарияКонечныйОстатокКт КАК СуммаСценарияКонечныйОстатокКт,
	|	ДанныеСчетов.КоличествоНачальныйОстатокДт КАК КоличествоНачальныйОстатокДт,
	|	ДанныеСчетов.КоличествоНачальныйОстатокКт КАК КоличествоНачальныйОстатокКт,
	|	ДанныеСчетов.КоличествоКонечныйОстатокДт КАК КоличествоКонечныйОстатокДт,
	|	ДанныеСчетов.КоличествоКонечныйОстатокКт КАК КоличествоКонечныйОстатокКт,
	|	ДанныеСчетов.КоличествоОборотДт КАК КоличествоОборотДт,
	|	ДанныеСчетов.КоличествоОборотКт КАК КоличествоОборотКт
   	|	ИЗ
	| (ВЫБРАТЬ
	|	СчетаБюджета.Ссылка КАК СтрокаБюджета,
	|	БюджетированиеОстаткиИОбороты.Период КАК Период,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1 
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ &ПустойЦФО КОНЕЦ КАК ЦФО,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1 
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ &ПустойПроект КОНЕЦ КАК Проект,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ &ПустойКонтрагент КОНЕЦ КАК Контрагент,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Статьи оборотов"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Статьи оборотов"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Статьи оборотов"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ &ПустаяСтатья КОНЕЦ КАК СтатьяОборотов,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ Неопределено КОНЕЦ КАК Номенклатура,
	|	БюджетированиеОстаткиИОбороты.Валюта КАК Валюта,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрОборотДт*СчетаБюджета.Знак КАК СуммаУпрОборотДт,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрОборотКт*СчетаБюджета.Знак КАК СуммаУпрОборотКт,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрНачальныйОстатокДт*СчетаБюджета.Знак КАК СуммаУпрНачальныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрНачальныйОстатокКт*СчетаБюджета.Знак КАК СуммаУпрНачальныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрКонечныйОстатокДт*СчетаБюджета.Знак КАК СуммаУпрКонечныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрКонечныйОстатокКт*СчетаБюджета.Знак КАК СуммаУпрКонечныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт*СчетаБюджета.Знак КАК ВалютнаяСуммаНачальныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт*СчетаБюджета.Знак КАК ВалютнаяСуммаНачальныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт*СчетаБюджета.Знак КАК ВалютнаяСуммаКонечныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт*СчетаБюджета.Знак КАК ВалютнаяСуммаКонечныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.СуммаСценарияНачальныйОстатокДт*СчетаБюджета.Знак КАК СуммаСценарияНачальныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.СуммаСценарияНачальныйОстатокКт*СчетаБюджета.Знак КАК СуммаСценарияНачальныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.СуммаСценарияКонечныйОстатокДт*СчетаБюджета.Знак КАК СуммаСценарияКонечныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.СуммаСценарияКонечныйОстатокКт*СчетаБюджета.Знак КАК СуммаСценарияКонечныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.КоличествоНачальныйОстатокДт*СчетаБюджета.Знак КАК КоличествоНачальныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.КоличествоНачальныйОстатокКт*СчетаБюджета.Знак КАК КоличествоНачальныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.КоличествоКонечныйОстатокДт*СчетаБюджета.Знак КАК КоличествоКонечныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.КоличествоКонечныйОстатокКт*СчетаБюджета.Знак КАК КоличествоКонечныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.КоличествоОборотДт*СчетаБюджета.Знак КАК КоличествоОборотДт,
	|	БюджетированиеОстаткиИОбороты.КоличествоОборотКт*СчетаБюджета.Знак КАК КоличествоОборотКт
	|ИЗ
	|	Справочник.СчетаБюджета КАК СчетаБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Бюджетирование.ОстаткиИОбороты(&ДатаНач, &ДатаКон, "+Периодичность+", , , , Сценарий = &Сценарий) КАК БюджетированиеОстаткиИОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Бюджетирование.Ссылка КАК Ссылка,
	|				Бюджетирование.Валютный КАК Валютный,
	|				Бюджетирование.Количественный КАК Количественный,
	|				БюджетированиеВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	|				БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	|				БюджетированиеВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	|				БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	|				БюджетированиеВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	|				БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3
	|			ИЗ
	|				ПланСчетов.Бюджетирование КАК Бюджетирование
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	|					ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	|					ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	|					ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)) КАК ВложенныйЗапрос
	|			ПО БюджетированиеОстаткиИОбороты.Счет = ВложенныйЗапрос.Ссылка
	|		ПО СчетаБюджета.СтатьяБаланса = БюджетированиеОстаткиИОбороты.Счет
	|
	|ГДЕ
	|	СчетаБюджета.Владелец = &Бюджет И
	|	(НЕ(СчетаБюджета.ПометкаУдаления)) И
	|	(НЕ(СчетаБюджета.ЭтоГруппа))) КАК ДанныеСчетов
	
	|{ГДЕ
	|	ДанныеСчетов.Период,
	|	ДанныеСчетов.ЦФО.*,
	|	ДанныеСчетов.Проект.*,
	|	ДанныеСчетов.Контрагент.*,
	|	ДанныеСчетов.СтатьяОборотов.*,
	|	ДанныеСчетов.Номенклатура.*,
	|	ДанныеСчетов.Валюта}

	|УПОРЯДОЧИТЬ ПО
	|	ДанныеСчетов.СтрокаБюджета.Код
	|{  УПОРЯДОЧИТЬ ПО
	|   ДанныеСчетов.СтрокаБюджета,
	|	ДанныеСчетов.Период,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"ДанныеСчетов.Период")+"
	|	ДанныеСчетов.ЦФО.*,
	|	ДанныеСчетов.Проект.*,
	|	ДанныеСчетов.Контрагент.*,
	|	ДанныеСчетов.СтатьяОборотов.*,
	|	ДанныеСчетов.Номенклатура.*,
	|	ДанныеСчетов.Валюта}
	|ИТОГИ 
	|СУММА(СуммаУпрОборотДт),
	|СУММА(СуммаУпрОборотКт),
	|СУММА(СуммаУпрНачальныйОстатокДт),
	|СУММА(СуммаУпрНачальныйОстатокКт),
	|СУММА(СуммаУпрКонечныйОстатокДт),
	|СУММА(СуммаУпрКонечныйОстатокКт),
	|СУММА(ВалютнаяСуммаНачальныйОстатокДт),
	|СУММА(ВалютнаяСуммаНачальныйОстатокКт),
	|СУММА(ВалютнаяСуммаКонечныйОстатокДт),
	|СУММА(ВалютнаяСуммаКонечныйОстатокКт),
	|СУММА(СуммаСценарияНачальныйОстатокДт),
	|СУММА(СуммаСценарияНачальныйОстатокКт),
	|СУММА(СуммаСценарияКонечныйОстатокДт),
	|СУММА(СуммаСценарияКонечныйОстатокКт),
	|СУММА(КоличествоНачальныйОстатокДт),
	|СУММА(КоличествоНачальныйОстатокКт),
	|СУММА(КоличествоКонечныйОстатокДт),
	|СУММА(КоличествоКонечныйОстатокКт),
	|СУММА(КоличествоОборотДт),
	|СУММА(КоличествоОборотКт) ПО
	|	ОБЩИЕ,
	|	ДанныеСчетов.СтрокаБюджета ИЕРАРХИЯ КАК СтрокаБюджета
	|{  ИТОГИ ПО
	|   ДанныеСчетов.СтрокаБюджета,
	|	ДанныеСчетов.Период КАК Период,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"ДанныеСчетов.Период")+"
	|	ДанныеСчетов.ЦФО.* КАК ЦФО,
	|	ДанныеСчетов.Проект.* КАК Проект,
	|	ДанныеСчетов.Контрагент.* КАК Контрагент,
	|	ДанныеСчетов.СтатьяОборотов.* КАК СтатьяОборотов,
	|	ДанныеСчетов.Номенклатура.* КАК Номенклатура,
	|	ДанныеСчетов.Валюта КАК Валюта}";	

	ПостроительДляСчетов.Текст=ТекстПостроителя;
	ПостроительДляСчетов.Параметры.Вставить("ДатаНач",НачалоДня(ДатаНач));
	ПостроительДляСчетов.Параметры.Вставить("ДатаКон",КонецДня(ДатаКон));
	ПостроительДляСчетов.Параметры.Вставить("Сценарий",Сценарий);
	ПостроительДляСчетов.Параметры.Вставить("Бюджет",Бюджет);
	ПостроительДляСчетов.Параметры.Вставить("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	ПостроительДляСчетов.Параметры.Вставить("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	ПостроительДляСчетов.Параметры.Вставить("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
	ПостроительДляСчетов.Параметры.Вставить("ПустаяСтатья",Новый(Тип("СправочникСсылка.СтатьиОборотовПоБюджетам")));
	
	ПостроительДляСчетов.ЗаполнитьНастройки();
	
	Для Сч=0 по ПостроительДляСчетов.ДоступныеПоля.Количество()-1 Цикл
		Поле=ПостроительДляСчетов.ДоступныеПоля[Сч];
		Если Поле.Имя="Проект" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
			Поле.Отбор=Истина;
		ИначеЕсли Поле.Имя="ЦФО" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
			Поле.Отбор=Истина;
		ИначеЕсли Поле.Имя="Контрагент" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
			Поле.Отбор=Истина;
		ИначеЕсли Поле.Имя="СтатьяОборотов" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиОборотовПоБюджетам"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
			Поле.Отбор=Истина;
		ИначеЕсли Поле.Имя="Номенклатура" Тогда
			МассивТипов=Новый Массив;
			Если Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
				МассивТипов.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
			Иначе
				МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
			КонецЕсли;
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЦикла;
	
	//Очистим измерения
	Пока ПостроительДляСчетов.ИзмеренияСтроки.Количество()>0 Цикл
		ТекущееИзмерение=ПостроительДляСчетов.ИзмеренияСтроки[0];
		ПостроительДляСчетов.ИзмеренияСтроки.Удалить(ТекущееИзмерение);
	КонецЦикла;

	ПостроительДляСчетов.ИзмеренияСтроки.Добавить("СтрокаБюджета","СтрокаБюджета",ТипИзмеренияПостроителяОтчета.Иерархия);
	
	ПостроительДляСчетов.УстановитьНастройки(НастройкиПостроителя,Истина,Ложь,Ложь,Ложь);
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		ТекущаяСтрока=ПостроительОтчета.ИзмеренияСтроки[Сч];
		ПутьКДанным=ТекущаяСтрока.ПутьКДанным;
		Имя=ТекущаяСтрока.Имя;
		Тип=ТекущаяСтрока.ТипИзмерения;
		
		ПостроительДляСчетов.ИзмеренияСтроки.Добавить(ПутьКДанным,Имя,Тип);
		
	КонецЦикла;
	
	Возврат ПостроительДляСчетов;

КонецФункции // НастроитьПостроительДляСчетов()

//Функция определяет, указаны ли для статей бюджета ссылки на группы статей оборотов
// возвращаемое значение - максимальный уровень группы статей оборотов
Функция ПроверитьНаличиеГруппСтатейОборотовДляСтатейБюджетов()
	//определим количество уровней вложенности справочника СтатьиОборотовПоБюджетам 
	//	для построения запроса по дереву статей
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ СтатьяОборотов ИЗ Справочник.СтатьиБюджета
	|ГДЕ СтатьяОборотов.ЭтоГруппа = истина и Владелец=&Бюджет";
	Запрос.УстановитьПараметр("Бюджет",Бюджет);
	
	Макс_Уровень = -1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		текУровень = Выборка.СтатьяОборотов.Уровень();
		Если текУровень>Макс_Уровень Тогда
			Макс_Уровень = текУровень;
		КонецЕсли;
	КонецЦикла;
    Возврат Макс_Уровень;
КонецФункции


// Настраивает построитель для вывода остатков по счетам бюджета
//
// Параметры
//  НастройкиПостроителя: НастройкиПостроителяОтчета - настройки построителя из интерфейса
//
// Возвращаемое значение:
//   ПостроительДляСчетов: ПостроительОтчета - настроенный построитель отчета для вывода остатков по счетам бюджета
//
Функция НастроитьПостроительДляСтатей(НастройкиПостроителя)
    //формирование запроса по справочникам СтатьиБюджета, СтатьиОборотовПоБюджетам
	УровеньГруппыСтатьиОборотовПоБюджетам = ПроверитьНаличиеГруппСтатейОборотовДляСтатейБюджетов();
	Если УровеньГруппыСтатьиОборотовПоБюджетам = -1 Тогда
		ТекстЗАпроса_СтатьиБюджета = "Справочник.СтатьиБюджета КАК СтатьиБюджета";
	Иначе
		Текст_Родитель = ".Родитель";
		ТекстЗапроса_СтатьиОборотов = "";
		Для тек_ур = 1 по УровеньГруппыСтатьиОборотовПоБюджетам+1 цикл
			Если ТекстЗапроса_СтатьиОборотов<>"" Тогда
				ТекстЗапроса_СтатьиОборотов = ТекстЗапроса_СтатьиОборотов+"
				|объединить";
			КонецЕсли;
			
			ТекстЗапроса_СтатьиОборотов = ТекстЗапроса_СтатьиОборотов+"
			|ВЫБРАТЬ Ссылка КАК Элемент, Ссылка"+Текст_Родитель+" КАК Родитель
			|ИЗ Справочник.СтатьиОборотовПоБюджетам
			|ГДЕ Ссылка.ЭтоГруппа = ложь и Ссылка"+Текст_Родитель+"<>&ПустаяСсылкаСтатьяОборотовПоБюджетам";
			Текст_Родитель = Текст_Родитель+".Родитель";
		КонецЦикла;
		
		ТекстЗАпроса_СтатьиБюджета = "(ВЫБРАТЬ СтБюдж.Ссылка, СтБюдж.Знак, СтБюдж.СтатьяОборотов КАК СтатьяОборотов
		|ИЗ Справочник.СтатьиБюджета КАК СтБюдж
		|ГДЕ СтБюдж.Владелец = &Бюджет  и СтБюдж.ПометкаУдаления = ложь И СтБюдж.СтатьяОборотов.ЭтоГруппа = ложь
        |Объединить
		|ВЫБРАТЬ СтБюдж.Ссылка, СтБюдж.Знак, СтОбор.Элемент КАК СтатьяОборотов
		|ИЗ Справочник.СтатьиБюджета КАК СтБюдж
		|ЛЕВОЕ СОЕДИНЕНИЕ ("+ТекстЗапроса_СтатьиОборотов+") КАК СтОбор
		|ПО СтОбор.Родитель = СтБюдж.СтатьяОборотов
		|ГДЕ СтБюдж.Владелец = &Бюджет  и СтБюдж.ПометкаУдаления = ложь
		|) КАК СтатьиБюджета";
	КонецЕсли;
	
	ПостроительДляСтатей=Новый ПостроительОтчета;
	Периодичность=?(Сценарий.Пустая(),"День",Строка(Сценарий.Периодичность));
	  
	ТекстПостроителя="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|СтатьиБюджета.Ссылка КАК СтрокаБюджета,
	|{ВЫБРАТЬ
	|ОборотыПоСтатьям.ЦФО.* КАК ЦФО,
	|ОборотыПоСтатьям.Проект.* КАК Проект,
	|ОборотыПоСтатьям.Контрагент.* КАК Контрагент,
	|ОборотыПоСтатьям.Номенклатура.* КАК Номенклатура,
	|ОборотыПоСтатьям.Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"ОборотыПоСтатьям.Период")+"
	|ОборотыПоСтатьям.Период КАК Период
	|}
	|ОборотыПоСтатьям.СуммаУпр КАК СуммаУпр,
	|ОборотыПоСтатьям.ВалютнаяСумма КАК ВалютнаяСумма,
	|ОборотыПоСтатьям.СуммаСценария КАК СуммаСценария,
	|ОборотыПоСтатьям.Количество КАК Количество
	| ИЗ Справочник.СтатьиБюджета КАК СтатьиБюджета 
	|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	|	ОборотыБюджетовОбороты.Период КАК Период,
	|	ОборотыБюджетовОбороты.Валюта КАК Валюта,
	|	ОборотыБюджетовОбороты.ЦФО КАК ЦФО,
	|	ОборотыБюджетовОбороты.Проект КАК Проект,
	|	ОборотыБюджетовОбороты.Контрагент КАК Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура КАК Номенклатура,
	|	СУММА(ОборотыБюджетовОбороты.СуммаУпрОборот)*СтатьиБюджета.Знак КАК СуммаУпр,
	|	СУММА(ОборотыБюджетовОбороты.ВалютнаяСуммаОборот)*СтатьиБюджета.Знак КАК ВалютнаяСумма,
	|	СУММА(ОборотыБюджетовОбороты.СуммаСценарияОборот)*СтатьиБюджета.Знак КАК СуммаСценария,
	|	СУММА(ОборотыБюджетовОбороты.КоличествоОборот)*СтатьиБюджета.Знак КАК Количество
	|ИЗ
	|	РегистрНакопления.ОборотыБюджетов.Обороты(&ДатаНач,&ДатаКон,"+Периодичность+",Сценарий=&Сценарий) КАК ОборотыБюджетовОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ТекстЗАпроса_СтатьиБюджета+"
	//Справочник.СтатьиБюджета КАК СтатьиБюджета
	|	ПО ОборотыБюджетовОбороты.СтатьяОборотов В(СтатьиБюджета.СтатьяОборотов)
	| "+?(УровеньГруппыСтатьиОборотовПоБюджетам = -1,"ГДЕ СтатьиБюджета.Владелец = &Бюджет","")+"
	//|ГДЕ
	//|	СтатьиБюджета.Владелец = &Бюджет
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиБюджета.Ссылка, "+
	?(УровеньГруппыСтатьиОборотовПоБюджетам = -1,"","СтатьиБюджета.Знак,")+"
	|	ОборотыБюджетовОбороты.Период,
	|	ОборотыБюджетовОбороты.Валюта,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.ЦФО,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура) КАК ОборотыПоСтатьям
	|ПО СтатьиБюджета.Ссылка=ОборотыПоСтатьям.СтатьяБюджета
	|ГДЕ СтатьиБюджета.Владелец = &Бюджет И
	|(НЕ(СтатьиБюджета.ПометкаУдаления)) И
	|(НЕ(СтатьиБюджета.ЭтоГруппа))
	|{ГДЕ
	|ОборотыПоСтатьям.ЦФО.*,
	|ОборотыПоСтатьям.Проект.*,
	|ОборотыПоСтатьям.Контрагент.*,
	|ОборотыПоСтатьям.Номенклатура.*,
	|ОборотыПоСтатьям.Валюта}
	|УПОРЯДОЧИТЬ ПО СтатьиБюджета.Ссылка.Код
	|{УПОРЯДОЧИТЬ ПО
	|СтрокаБюджета,
	|ЦФО.*,
	|Проект.*,
	|Контрагент.*,
	|Номенклатура.*,
	|Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"ОборотыПоСтатьям.Период")+"
	|Период КАК Период }
	|ИТОГИ
	|СУММА(СуммаУпр),
	|СУММА(ВалютнаяСумма),
	|СУММА(СуммаСценария),
	|СУММА(Количество)
	|ПО ОБЩИЕ,
	|СтрокаБюджета Иерархия
	|{ИТОГИ ПО
	|СтрокаБюджета,
	|ЦФО.*,
	|Проект.*,
	|Контрагент.*,
	|Номенклатура.*,
	|Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"ОборотыПоСтатьям.Период")+"
	|Период КАК Период }";
	
	ПостроительДляСтатей.Текст=ТекстПостроителя;
	ПостроительДляСтатей.Параметры.Вставить("ДатаНач",НачалоДня(ДатаНач));
	ПостроительДляСтатей.Параметры.Вставить("ДатаКон",КонецДня(ДатаКон));
	ПостроительДляСтатей.Параметры.Вставить("Сценарий",Сценарий);
	ПостроительДляСтатей.Параметры.Вставить("Бюджет",Бюджет);
	ПостроительДляСтатей.Параметры.Вставить("ПустаяСсылкаСтатьяОборотовПоБюджетам",Справочники.СтатьиОборотовПоБюджетам.ПустаяСсылка());

	ПостроительДляСтатей.УстановитьНастройки(НастройкиПостроителя,Истина,Ложь,Ложь,Истина);
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		ТекущаяСтрока=ПостроительОтчета.ИзмеренияСтроки[Сч];
		ПутьКДанным=ТекущаяСтрока.ПутьКДанным;
		Имя=ТекущаяСтрока.Имя;
		Тип=ТекущаяСтрока.ТипИзмерения;
		
		ПостроительДляСтатей.ИзмеренияСтроки.Добавить(ПутьКДанным,Имя,Тип);
		
	КонецЦикла;
	
	Возврат ПостроительДляСтатей;

КонецФункции // НастроитьПостроительДляСтатей()


//Формирует список статей, используемых при построении бюджета, для ограничении
// количества запросов при использовании источников фактических данных
Функция СформироватьСписокСтатей()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	СтатьиОборотовПоБюджетам.Ссылка КАК СтатьяОборотов
	             |ИЗ
	             |	Справочник.СтатьиБюджета КАК СтатьиБюджета
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиОборотовПоБюджетам КАК СтатьиОборотовПоБюджетам
	             |		ПО СтатьиБюджета.СтатьяОборотов = СтатьиОборотовПоБюджетам.Ссылка
	             |
	             |ГДЕ
	             |	СтатьиБюджета.Владелец = &Владелец";
				 
	Запрос.УстановитьПараметр("Владелец",Бюджет);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтатьяОборотов");
	
КонецФункции // СформироватьСписокСтатей()

Функция СформироватьСписокСчетов()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	Бюджетирование.Ссылка КАК Счет
	             |ИЗ
	             |	Справочник.СчетаБюджета КАК СчетаБюджета
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование КАК Бюджетирование
	             |		ПО СчетаБюджета.СтатьяБаланса = Бюджетирование.Ссылка
	             |
	             |ГДЕ
	             |	СчетаБюджета.Владелец = &Владелец";
				 
	Запрос.УстановитьПараметр("Владелец",Бюджет);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции // СформироватьСписокСтатей()

Функция ПолучитьПериодичностьДляИсточников()
	
	Периодичность=Перечисления.Периодичность.ПустаяСсылка();
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодГод")<>Неопределено Тогда
		Периодичность = Перечисления.Периодичность.Год;
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодКвартал")<>Неопределено Тогда
		Периодичность = Перечисления.Периодичность.Квартал;
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодМесяц")<>Неопределено Тогда
		Периодичность = Перечисления.Периодичность.Месяц;
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодНеделя")<>Неопределено Тогда
		Периодичность = Перечисления.Периодичность.Неделя;
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодДень")<>Неопределено Тогда
		Периодичность = Перечисления.Периодичность.День;
	КонецЕсли;
	
	Возврат Периодичность;
	
КонецФункции // ПолучитьПериодичностьДляИсточников() 

// Настраивает построитель для вывода остатков по счетам бюджета
//
// Параметры
//  НастройкиПостроителя: НастройкиПостроителяОтчета - настройки построителя из интерфейса
//
// Возвращаемое значение:
//   ПостроительДляСчетов: ПостроительОтчета - настроенный построитель отчета для вывода остатков по счетам бюджета
//
Функция НастроитьПостроительДляСтатейИсточники(НастройкиПостроителя)

	ПостроительДляСтатей=Новый ПостроительОтчета;
	Периодичность=?(Сценарий.Пустая(),"День",Строка(Сценарий.Периодичность));
	  
	ТекстПостроителя="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|СтатьиБюджета.Ссылка КАК СтрокаБюджета,
	|{ВЫБРАТЬ
	|ОборотыПоСтатьям.ЦФО.* КАК ЦФО,
	|ОборотыПоСтатьям.Проект.* КАК Проект,
	|ОборотыПоСтатьям.Контрагент.* КАК Контрагент,
	|ОборотыПоСтатьям.Номенклатура.* КАК Номенклатура,
	|ОборотыПоСтатьям.Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"ОборотыПоСтатьям.Период")+"
	|ОборотыПоСтатьям.Период КАК Период
	|}
	|ОборотыПоСтатьям.СуммаУпрОборот*СтатьиБюджета.Знак КАК СуммаУпр,
	|ОборотыПоСтатьям.ВалютнаяСуммаОборот*СтатьиБюджета.Знак КАК ВалютнаяСумма,
	|ОборотыПоСтатьям.КоличествоОборот*СтатьиБюджета.Знак КАК Количество
	| ИЗ Справочник.СтатьиБюджета КАК СтатьиБюджета 
	|ЛЕВОЕ СОЕДИНЕНИЕ";
	
	// Определим измерения бюджетирования, используемые в полях построителя
	
	СтруктураИспользуемых=Новый Структура;
	
	Для Каждого Поле Из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		Если Поле.ПутьКДанным="ЦФО" 
			ИЛИ Поле.ПутьКДанным="Проект"
			ИЛИ Поле.ПутьКДанным="Контрагент" 
			ИЛИ Поле.ПутьКДанным="Номенклатура"
			ИЛИ Поле.ПутьКДанным="Валюта" Тогда
			
			СтруктураИспользуемых.Вставить(Поле.ПутьКДанным);
			
		Иначе
			
			ИмяИзмерения=Лев(Поле.ПутьКДанным,Найти(Поле.ПутьКДанным,".")-1);
			
			Если ИмяИзмерения="ЦФО"
				ИЛИ ИмяИзмерения="Проект"
				ИЛИ ИмяИзмерения="Контрагент"
				ИЛИ ИмяИзмерения="Номенклатура" Тогда
				
				СтруктураИспользуемых.Вставить(ИмяИзмерения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Поле Из ПостроительОтчета.Отбор Цикл
		
		Если Поле.ПутьКДанным="ЦФО" 
			ИЛИ Поле.ПутьКДанным="Проект"
			ИЛИ Поле.ПутьКДанным="Контрагент" 
			ИЛИ Поле.ПутьКДанным="Номенклатура"
			ИЛИ Поле.ПутьКДанным="Валюта" Тогда
			
			СтруктураИспользуемых.Вставить(Поле.ПутьКДанным);
			
		Иначе
			
			ИмяИзмерения=Лев(Поле.ПутьКДанным,Найти(Поле.ПутьКДанным,".")-1);
			
			Если ИмяИзмерения="ЦФО"
				ИЛИ ИмяИзмерения="Проект"
				ИЛИ ИмяИзмерения="Контрагент"
				ИЛИ ИмяИзмерения="Номенклатура" Тогда
				
				СтруктураИспользуемых.Вставить(ИмяИзмерения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураЗапроса=Бюджетирование.СформироватьТекстЗапросаПоОборотам(СтруктураИспользуемых,Сценарий,ДатаНач,ДатаКон, СформироватьСписокСтатей());
	
	Если СтруктураЗапроса.Свойство("НетИсточников") Тогда
		
		НетИсточников=Истина;
		Сообщить("Для выбранных статей оборотов по бюджетам не указаны источники данных.");
		
		Возврат ПостроительДляСтатей;
		
	КонецЕсли;
	
	Для Каждого Элемент ИЗ СтруктураЗапроса.ПараметрыЗапроса Цикл
			
		ПостроительДляСтатей.Параметры.Вставить(Элемент.Ключ,Элемент.Значение);
			
	КонецЦикла;
		
	ТекстПостроителя=ТекстПостроителя+"
	|("+СтруктураЗапроса.ТекстЗапроса+") КАК ОборотыПоСтатьям
	|ПО СтатьиБюджета.СтатьяОборотов.Ссылка=ОборотыПоСтатьям.СтатьяОборотов.Ссылка
	|ГДЕ СтатьиБюджета.Владелец = &Бюджет И
	|(НЕ(СтатьиБюджета.ПометкаУдаления)) И
	|(НЕ(СтатьиБюджета.ЭтоГруппа))
	|{ГДЕ
	|ОборотыПоСтатьям.ЦФО.*,
	|ОборотыПоСтатьям.Проект.*,
	|ОборотыПоСтатьям.Контрагент.*,
	|ОборотыПоСтатьям.Номенклатура.*,
	|ОборотыПоСтатьям.Валюта.*}
	|УПОРЯДОЧИТЬ ПО СтатьиБюджета.Ссылка.Код
	|{УПОРЯДОЧИТЬ ПО
	|СтрокаБюджета.*,
	|ЦФО.*,
	|Проект.*,
	|Контрагент.*,
	|Номенклатура.*,
	|Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"ОборотыПоСтатьям.Период")+"
	|Период}
	|ИТОГИ
	|СУММА(СуммаУпр),
	|СУММА(ВалютнаяСумма),
	|СУММА(Количество)
	|ПО ОБЩИЕ,
	|СтрокаБюджета Иерархия
	|{ИТОГИ ПО
	|СтрокаБюджета,
	|ЦФО.*,
	|Проект.*,
	|Контрагент.*,
	|Номенклатура.*,
	|Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"ОборотыПоСтатьям.Период")+"
	|Период КАК Период }";
	
	ПостроительДляСтатей.Текст=ТекстПостроителя;
	ПостроительДляСтатей.Параметры.Вставить("ДатаНач",НачалоДня(ДатаНач));
	ПостроительДляСтатей.Параметры.Вставить("ДатаКон",КонецДня(ДатаКон));
	ПостроительДляСтатей.Параметры.Вставить("Сценарий",Сценарий);
	ПостроительДляСтатей.Параметры.Вставить("Бюджет",Бюджет);
	
	Для Каждого Элемент ИЗ СтруктураЗапроса.ПараметрыЗапроса Цикл
			
		ПостроительОтчета.Параметры.Вставить(Элемент.Ключ,Элемент.Значение);
			
	КонецЦикла;

	ПостроительДляСтатей.УстановитьНастройки(НастройкиПостроителя,Истина,Ложь,Ложь,Истина);
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		ТекущаяСтрока=ПостроительОтчета.ИзмеренияСтроки[Сч];
		ПутьКДанным=ТекущаяСтрока.ПутьКДанным;
		Имя=ТекущаяСтрока.Имя;
		Тип=ТекущаяСтрока.ТипИзмерения;
		
		ПостроительДляСтатей.ИзмеренияСтроки.Добавить(ПутьКДанным,Имя,Тип);
		
	КонецЦикла;
	
	Возврат ПостроительДляСтатей;

КонецФункции // НастроитьПостроительДляСтатейИсточник()

// Настраивает построитель для вывода остатков по счетам бюджета
//
// Параметры
//  НастройкиПостроителя: НастройкиПостроителяОтчета - настройки построителя из интерфейса
//
// Возвращаемое значение:
//   ПостроительДляСчетов: ПостроительОтчета - настроенный построитель отчета для вывода остатков по счетам бюджета
//
Функция НастроитьПостроительДляСчетовИсточники(НастройкиПостроителя)

	ПостроительДляСчетов=Новый ПостроительОтчета;
	Периодичность=?(Сценарий.Пустая(),"День",Строка(Сценарий.Периодичность));
	  
	ТекстПостроителя="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБюджета.Ссылка КАК СтрокаБюджета,
	|{ВЫБРАТЬ
	|	СчетаБюджета.Ссылка КАК СтрокаБюджета,
	|	БюджетированиеОстаткиИОбороты.Период КАК Период,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"БюджетированиеОстаткиИОбороты.Период")+"
	|	БюджетированиеОстаткиИОбороты.ЦФО.* КАК ЦФО,
	|	БюджетированиеОстаткиИОбороты.Проект.* КАК Проект,
	|	БюджетированиеОстаткиИОбороты.Контрагент.* КАК Контрагент,
  	|	БюджетированиеОстаткиИОбороты.Номенклатура.* КАК Номенклатура,
	|	БюджетированиеОстаткиИОбороты.Валюта.* КАК Валюта}
	|	БюджетированиеОстаткиИОбороты.СуммаУпрНачальныйОстатокДт*СчетаБюджета.Знак КАК СуммаУпрНачальныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрНачальныйОстатокКт*СчетаБюджета.Знак КАК СуммаУпрНачальныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрКонечныйОстатокДт*СчетаБюджета.Знак КАК СуммаУпрКонечныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрКонечныйОстатокКт*СчетаБюджета.Знак КАК СуммаУпрКонечныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт*СчетаБюджета.Знак КАК ВалютнаяСуммаНачальныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт*СчетаБюджета.Знак КАК ВалютнаяСуммаНачальныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт*СчетаБюджета.Знак КАК ВалютнаяСуммаКонечныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт*СчетаБюджета.Знак КАК ВалютнаяСуммаКонечныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.КоличествоНачальныйОстатокДт*СчетаБюджета.Знак КАК КоличествоНачальныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.КоличествоНачальныйОстатокКт*СчетаБюджета.Знак КАК КоличествоНачальныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.КоличествоКонечныйОстатокДт*СчетаБюджета.Знак КАК КоличествоКонечныйОстатокДт,
	|	БюджетированиеОстаткиИОбороты.КоличествоКонечныйОстатокКт*СчетаБюджета.Знак КАК КоличествоКонечныйОстатокКт,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрНачальныйОстатокДтИтог*СчетаБюджета.Знак КАК СуммаУпрНачальныйОстатокДтИтог,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрНачальныйОстатокКтИтог*СчетаБюджета.Знак КАК СуммаУпрНачальныйОстатокКтИтог,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрКонечныйОстатокДтИтог*СчетаБюджета.Знак КАК СуммаУпрКонечныйОстатокДтИтог,
	|	БюджетированиеОстаткиИОбороты.СуммаУпрКонечныйОстатокКтИтог*СчетаБюджета.Знак КАК СуммаУпрКонечныйОстатокКтИтог,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДтИтог*СчетаБюджета.Знак КАК ВалютнаяСуммаНачальныйОстатокДтИтог,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКтИтог*СчетаБюджета.Знак КАК ВалютнаяСуммаНачальныйОстатокКтИтог,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДтИтог*СчетаБюджета.Знак КАК ВалютнаяСуммаКонечныйОстатокДтИтог,
	|	БюджетированиеОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКтИтог*СчетаБюджета.Знак КАК ВалютнаяСуммаКонечныйОстатокКтИтог,
	|	БюджетированиеОстаткиИОбороты.КоличествоНачальныйОстатокДтИтог*СчетаБюджета.Знак КАК КоличествоНачальныйОстатокДтИтог,
	|	БюджетированиеОстаткиИОбороты.КоличествоНачальныйОстатокКтИтог*СчетаБюджета.Знак КАК КоличествоНачальныйОстатокКтИтог,
	|	БюджетированиеОстаткиИОбороты.КоличествоКонечныйОстатокДтИтог*СчетаБюджета.Знак КАК КоличествоКонечныйОстатокДтИтог,
	|	БюджетированиеОстаткиИОбороты.КоличествоКонечныйОстатокКтИтог*СчетаБюджета.Знак КАК КоличествоКонечныйОстатокКтИтог	
	|ИЗ
	|	Справочник.СчетаБюджета КАК СчетаБюджета
	|ЛЕВОЕ СОЕДИНЕНИЕ";
	
	СтруктураИспользуемых=Новый Структура;
	
	Для Каждого Поле Из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		Если Поле.ПутьКДанным="ЦФО" 
			ИЛИ Поле.ПутьКДанным="Проект"
			ИЛИ Поле.ПутьКДанным="Контрагент" 
			ИЛИ Поле.ПутьКДанным="Номенклатура"
			ИЛИ Поле.ПутьКДанным="Валюта" Тогда

			СтруктураИспользуемых.Вставить(Поле.ПутьКДанным);
			
		Иначе
			
			ИмяИзмерения=Лев(Поле.ПутьКДанным,Найти(Поле.ПутьКДанным,".")-1);
			
			Если ИмяИзмерения="ЦФО"
				ИЛИ ИмяИзмерения="Проект"
				ИЛИ ИмяИзмерения="Контрагент"
				ИЛИ ИмяИзмерения="Номенклатура" Тогда
				
				СтруктураИспользуемых.Вставить(ИмяИзмерения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Поле Из ПостроительОтчета.Отбор Цикл
		
		Если Поле.ПутьКДанным="ЦФО" 
			ИЛИ Поле.ПутьКДанным="Проект"
			ИЛИ Поле.ПутьКДанным="Контрагент" 
			ИЛИ Поле.ПутьКДанным="Номенклатура"
			ИЛИ Поле.ПутьКДанным="Валюта" Тогда
			
			СтруктураИспользуемых.Вставить(Поле.ПутьКДанным);
			
		Иначе
			
			ИмяИзмерения=Лев(Поле.ПутьКДанным,Найти(Поле.ПутьКДанным,".")-1);
			
			Если ИмяИзмерения="ЦФО"
				ИЛИ ИмяИзмерения="Проект"
				ИЛИ ИмяИзмерения="Контрагент"
				ИЛИ ИмяИзмерения="Номенклатура" Тогда
				
				СтруктураИспользуемых.Вставить(ИмяИзмерения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСчетов=СформироватьСписокСчетов();
		
	СтруктураЗапроса=Бюджетирование.СформироватьТекстЗапросаПоОстаткамПериод(СтруктураИспользуемых,Сценарий,ДатаНач,ДатаКон,ПолучитьПериодичностьДляИсточников(), СформироватьСписокСчетов());
	
	Если СтруктураЗапроса.Свойство("НетИсточников") Тогда
		
		НетИсточников=Истина;
		Сообщить("Для выбранных счетов не указаны источники данных.");
		
		Возврат ПостроительДляСчетов;
		
	КонецЕсли;
	
	Для Каждого Элемент ИЗ СтруктураЗапроса.ПараметрыЗапроса Цикл
			
		ПостроительДляСчетов.Параметры.Вставить(Элемент.Ключ,Элемент.Значение);
			
	КонецЦикла;
	
	ТекстПостроителя=ТекстПостроителя+"
	|("+СтруктураЗапроса.ТекстЗапроса+") КАК БюджетированиеОстаткиИОбороты
	|ПО СчетаБюджета.СтатьяБаланса = БюджетированиеОстаткиИОбороты.Счет
	|ГДЕ
	|	СчетаБюджета.Владелец = &Бюджет И
	|	(НЕ(СчетаБюджета.ПометкаУдаления)) И
	|	(НЕ(СчетаБюджета.ЭтоГруппа))
	|{ГДЕ БюджетированиеОстаткиИОбороты.ЦФО.*,
	|БюджетированиеОстаткиИОбороты.Проект.*,
	|БюджетированиеОстаткиИОбороты.Контрагент.*,
	|БюджетированиеОстаткиИОбороты.Номенклатура.*,
	|БюджетированиеОстаткиИОбороты.Валюта}
	|УПОРЯДОЧИТЬ ПО
	|	СчетаБюджета.Ссылка.Код
	|{  УПОРЯДОЧИТЬ ПО
	|	СтрокаБюджета КАК СтрокаБюджета,
	|	БюджетированиеОстаткиИОбороты.Период,
	|	БюджетированиеОстаткиИОбороты.ЦФО.*,
	|	БюджетированиеОстаткиИОбороты.Проект.*,
	|	БюджетированиеОстаткиИОбороты.Контрагент.*,
	|	БюджетированиеОстаткиИОбороты.Номенклатура.*,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"БюджетированиеОстаткиИОбороты.Период")+"
	|	БюджетированиеОстаткиИОбороты.Валюта}
	|ИТОГИ 
	|СУММА(СуммаУпрНачальныйОстатокДт),
	|СУММА(СуммаУпрНачальныйОстатокКт),
	|СУММА(СуммаУпрКонечныйОстатокДт),
	|СУММА(СуммаУпрКонечныйОстатокКт),
	|СУММА(ВалютнаяСуммаНачальныйОстатокДт),
	|СУММА(ВалютнаяСуммаНачальныйОстатокКт),
	|СУММА(ВалютнаяСуммаКонечныйОстатокДт),
	|СУММА(ВалютнаяСуммаКонечныйОстатокКт),
	|СУММА(КоличествоНачальныйОстатокДт),
	|СУММА(КоличествоНачальныйОстатокКт),
	|СУММА(КоличествоКонечныйОстатокДт),
	|СУММА(КоличествоКонечныйОстатокКт), 
	|СУММА(СуммаУпрНачальныйОстатокДтИтог),
	|СУММА(СуммаУпрНачальныйОстатокКтИтог),
	|СУММА(СуммаУпрКонечныйОстатокДтИтог),
	|СУММА(СуммаУпрКонечныйОстатокКтИтог),
	|СУММА(ВалютнаяСуммаНачальныйОстатокДтИтог),
	|СУММА(ВалютнаяСуммаНачальныйОстатокКтИтог),
	|СУММА(ВалютнаяСуммаКонечныйОстатокДтИтог),
	|СУММА(ВалютнаяСуммаКонечныйОстатокКтИтог),
	|СУММА(КоличествоНачальныйОстатокДтИтог),
	|СУММА(КоличествоНачальныйОстатокКтИтог),
	|СУММА(КоличествоКонечныйОстатокДтИтог),
	|СУММА(КоличествоКонечныйОстатокКтИтог) ПО
	|	ОБЩИЕ,
	|	СтрокаБюджета ИЕРАРХИЯ КАК СтрокаБюджета
	|{  ИТОГИ ПО
	|	СтрокаБюджета КАК СтрокаБюджета,
	|	БюджетированиеОстаткиИОбороты.Период КАК Период,
	|	БюджетированиеОстаткиИОбороты.ЦФО.* КАК ЦФО,
	|	БюджетированиеОстаткиИОбороты.Проект.* КАК Проект,
	|	БюджетированиеОстаткиИОбороты.Контрагент.* КАК Контрагент,
	|	БюджетированиеОстаткиИОбороты.Номенклатура.* КАК Номенклатура,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"БюджетированиеОстаткиИОбороты.Период")+"
	|	БюджетированиеОстаткиИОбороты.Валюта КАК Валюта}";	

	ПостроительДляСчетов.Текст=ТекстПостроителя;
	ПостроительДляСчетов.Параметры.Вставить("ДатаНач",НачалоДня(ДатаНач));
	ПостроительДляСчетов.Параметры.Вставить("ДатаКон",КонецДня(ДатаКон));
	ПостроительДляСчетов.Параметры.Вставить("Сценарий",Сценарий);
	ПостроительДляСчетов.Параметры.Вставить("Бюджет",Бюджет);
	ПостроительДляСчетов.Параметры.Вставить("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	ПостроительДляСчетов.Параметры.Вставить("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	ПостроительДляСчетов.Параметры.Вставить("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
	
	ПостроительДляСчетов.ЗаполнитьНастройки();
	
	Для Сч=0 по ПостроительДляСчетов.ДоступныеПоля.Количество()-1 Цикл
		Поле=ПостроительДляСчетов.ДоступныеПоля[Сч];
		Если Поле.Имя="Проект" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
			Поле.Отбор=Истина;
		ИначеЕсли Поле.Имя="ЦФО" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
			Поле.Отбор=Истина;
		ИначеЕсли Поле.Имя="Контрагент" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
			Поле.Отбор=Истина;
		ИначеЕсли Поле.Имя="Номенклатура" Тогда
			МассивТипов=Новый Массив;
			Если Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
				МассивТипов.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
			Иначе
				МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
			КонецЕсли;
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЦикла;
	
	//Очистим измерения
	Пока ПостроительДляСчетов.ИзмеренияСтроки.Количество()>0 Цикл
		ТекущееИзмерение=ПостроительДляСчетов.ИзмеренияСтроки[0];
		ПостроительДляСчетов.ИзмеренияСтроки.Удалить(ТекущееИзмерение);
	КонецЦикла;

	ПостроительДляСчетов.ИзмеренияСтроки.Добавить("СтрокаБюджета","СтрокаБюджета",ТипИзмеренияПостроителяОтчета.Иерархия);
	
	ПостроительДляСчетов.УстановитьНастройки(НастройкиПостроителя,Истина,Ложь,Ложь,Ложь);
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		ТекущаяСтрока=ПостроительОтчета.ИзмеренияСтроки[Сч];
		ПутьКДанным=ТекущаяСтрока.ПутьКДанным;
		Имя=ТекущаяСтрока.Имя;
		Тип=ТекущаяСтрока.ТипИзмерения;
		
		ПостроительДляСчетов.ИзмеренияСтроки.Добавить(ПутьКДанным,Имя,Тип);
		
	КонецЦикла;
	
	Возврат ПостроительДляСчетов;

КонецФункции // НастроитьПостроительДляСчетовИсточник()

// Создает бюджетную операцию по параметрам расшифровки
//
Процедура СоздатьОперацию(Расшифровка, ЭтотОтчет)
	
	Если НЕ ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НоваяОперация=Документы.БюджетнаяОперация.СоздатьДокумент();
	НоваяОперация.Сценарий=Сценарий;
	
	Если ЗначениеЗаполнено(ЦФО) Тогда
		НоваяОперация.ЦФО = ЦФО;
	Иначе
		Если Расшифровка.Свойство("ЦФО") И ТипЗнч(Расшифровка.ЦФО)=Тип("СправочникСсылка.Подразделения") И НЕ Расшифровка.ЦФО.ЭтоГруппа Тогда
			НоваяОперация.ЦФО=Расшифровка.ЦФО;
		КонецЕсли;
	КонецЕсли;
	
	Если Расшифровка.Свойство("СтатьяОборотов") И ТипЗнч(Расшифровка.СтатьяОборотов)=Тип("СправочникСсылка.СтатьиОборотовПоБюджетам") И НЕ Расшифровка.СтатьяОборотов.ЭтоГруппа Тогда
		НоваяОперация.СтатьяОборотов=Расшифровка.СтатьяОборотов;
	ИначеЕсли Расшифровка.Свойство("СтатьяБаланса") Тогда
		
		// Определим список статей, влияющих на выбранную статью баланса
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|				СтатьиШаблоныПроводок.Ссылка КАК СтатьяОборотов,
		|				СтатьиШаблоныПроводок.Ссылка.Наименование КАК СтатьяОборотовНаименование
		|			ИЗ
		|				Справочник.СтатьиОборотовПоБюджетам.ШаблоныПроводок КАК СтатьиШаблоныПроводок
		|			
		|			ГДЕ
		|				((СтатьиШаблоныПроводок.СчетДт В ИЕРАРХИИ(&СтатьяБаланса)) И НЕ (СтатьиШаблоныПроводок.СчетКт В ИЕРАРХИИ(&СтатьяБаланса)))
		|				ИЛИ((СтатьиШаблоныПроводок.СчетКт В ИЕРАРХИИ(&СтатьяБаланса)) И НЕ (СтатьиШаблоныПроводок.СчетДт В ИЕРАРХИИ(&СтатьяБаланса)))";
		
		Запрос.УстановитьПараметр("СтатьяБаланса",Расшифровка.СтатьяБаланса);
		ТабСтатей=Запрос.Выполнить().Выгрузить();
		
		СписокСтатей=Новый СписокЗначений;
		
		Для Каждого Статья ИЗ ТабСтатей Цикл
			
			СписокСтатей.Добавить(Статья.СтатьяОборотов,Статья.СтатьяОборотовНаименование);
			
		КонецЦикла;
		
		Если СписокСтатей.Количество()=0 Тогда
			Сообщить("Нет статей, изменяющих счет "+ Расшифровка.Счет);
			Возврат;
		КонецЕсли;
		
		СтатьяОборотов = СписокСтатей.ВыбратьЭлемент("Выберите статью оборотов", СписокСтатей[СписокСтатей.Количество()-1]);
		
		Если Не СтатьяОборотов=Неопределено Тогда
			НоваяОперация.СтатьяОборотов=СтатьяОборотов.Значение;
		КонецЕсли;
					
	КонецЕсли;
	
	Если Расшифровка.Свойство("Проект") И ТипЗнч(Расшифровка.Проект)=Тип("СправочникСсылка.Проекты") И НЕ Расшифровка.Проект.ЭтоГруппа Тогда
		НоваяОперация.Проект=Расшифровка.Проект;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Контрагент") И ТипЗнч(Расшифровка.Контрагент)=Тип("СправочникСсылка.Контрагенты") И НЕ Расшифровка.Контрагент.ЭтоГруппа Тогда
		НоваяОперация.Контрагент=Расшифровка.Контрагент;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Номенклатура") 
		И НЕ Расшифровка.Номенклатура=Неопределено 
		И (ТипЗнч(Расшифровка.Номенклатура)=Тип("СправочникСсылка.Номенклатура") ИЛИ ТипЗнч(Расшифровка.Номенклатура)=Тип("СправочникСсылка.НоменклатурныеГруппы"))
		И НЕ Расшифровка.Номенклатура.ЭтоГруппа Тогда
		НоваяОперация.Номенклатура=Расшифровка.Номенклатура;
	ИначеЕсли НоваяОперация.Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.Номенклатура Тогда
		НоваяОперация.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
	ИначеЕсли НоваяОперация.Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		НоваяОперация.Номенклатура=Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	КонецЕсли;
		
	ДатаОперации=РабочаяДата;
	
	Для Каждого Элемент Из Расшифровка Цикл
		Если Найти(Элемент.Ключ,"Период")>0 Тогда
			ДатаОперации = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Расшифровка.Свойство("Период") Тогда
			
		ДатаОперации = Расшифровка.Период;
			
	КонецЕсли;
	
	НоваяОперация.ПериодПланирования=ОбщегоНазначения.ДатаНачалаПериода(ДатаОперации,Сценарий.Периодичность);
	
	НоваяОперация.Дата=РабочаяДата;
	НоваяОперация.УстановитьВремя(АвтоВремя.ТекущееИлиПоследним);
		
	ФормаОперации=НоваяОперация.ПолучитьФорму("ФормаДокумента");
	ФормаОперации.ОткрытьМодально();
	
	Если НоваяОперация.Проведен Тогда
		ЭтотОтчет.ПолучитьФорму().ОбновитьТаблицуОтчета();
	КонецЕсли;
	
КонецПроцедуры // СоздатьОперацию()

// Расшифровывает отчеты, реализуемые при помощи данного
//
// Параметры:
//	Расшифровка           - Структура, значение расшифровки, взятое из табличного документа, и, в случае надобности, дополненное
//	СтандартнаяОбраьотка  - Флаг стандартной обработки расшифровки
//	ЭтотОтчет             - Контекст, из которого происходит вызов. Позволяет определить, как именно расшифровывать.
//
Процедура ОбработкаРасшифровкиОтчетаБюджетирования(Расшифровка, СтандартнаяОбработка, ЭтотОтчет) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;

		СписокВыбора = Новый СписокЗначений;

		ДоступныеИзмерения = Новый Соответствие;

		Для ДП = 0 По ПостроительОтчета.ДоступныеПоля.Количество() - 1 Цикл
			Поле = ПостроительОтчета.ДоступныеПоля[ДП];
			Если Поле.Измерение Тогда
				ДоступныеИзмерения.Вставить(Поле.Имя, Поле.Представление);
			КонецЕсли;
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияСтроки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияКолонки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		ИмяДобавляемогоИзмерения = "";
		ПредставлениеДобавляемогоИзмерения = "";
		Если ДоступныеИзмерения.Количество() > 0 Тогда
			Для Каждого ДИ ИЗ ДоступныеИзмерения Цикл
				СписокВыбора.Добавить(ДИ.Ключ, ДИ.Значение);
				ИмяДобавляемогоИзмерения = ДИ.Ключ;
				ПредставлениеДобавляемогоИзмерения = ДИ.Значение;
			КонецЦикла;
		КонецЕсли;

		СписокВыбора.СортироватьПоПредставлению();
		
		СписокВыбора.Добавить(-1, "По статьям оборотов");
 
		СписокВыбора.Добавить(0, "По документам движения");
		
		СписокВыбора.Добавить(-2,"Ввести бюджетную операцию");

		Выбор = СписокВыбора.ВыбратьЭлемент("Выберите действие", СписокВыбора[СписокВыбора.Количество()-1]);

		Если Выбор = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Выбор.Значение=-2 Тогда
			
			СоздатьОперацию(Расшифровка,ЭтотОтчет);
			
		Иначе

		// Настройка отчета
		Отчет = Отчеты.ОборотыПоСтатьямБюджетов.Создать();
		Параметры = Новый Соответствие;
		
		Параметры.Вставить("Сценарий", Сценарий);
		Параметры.Вставить("ДатаНач", ДатаНач);
		Параметры.Вставить("ДатаКон", ДатаКон);
		
		Если Расшифровка.Свойство("СтатьяБаланса") Тогда
			Параметры.Вставить("СтатьяБаланса",Расшифровка.СтатьяБаланса);
		КонецЕсли;
		
		Для Каждого Элемент Из Расшифровка Цикл
			Если Элемент.Ключ="ПериодДень" Тогда
				Параметры.Вставить("ДатаНач", Элемент.Значение);
				Параметры.Вставить("ДатаКон", Элемент.Значение);
			ИначеЕсли Элемент.Ключ="ПериодНеделя" Тогда
				Параметры.Вставить("ДатаНач", НачалоНедели(Элемент.Значение));
				Параметры.Вставить("ДатаКон", КонецНедели(Элемент.Значение));
			ИначеЕсли Элемент.Ключ="ПериодМесяц" Тогда
				Параметры.Вставить("ДатаНач", НачалоМесяца(Элемент.Значение));
				Параметры.Вставить("ДатаКон", КонецМесяца(Элемент.Значение));
			ИначеЕсли Элемент.Ключ="ПериодКвартал" Тогда
				Параметры.Вставить("ДатаНач", НачалоКвартала(Элемент.Значение));
				Параметры.Вставить("ДатаКон", КонецКвартала(Элемент.Значение));
			ИначеЕсли Элемент.Ключ="ПериодГод" Тогда
				Параметры.Вставить("ДатаНач", НачалоГода(Элемент.Значение));
				Параметры.Вставить("ДатаКон", КонецГода(Элемент.Значение));
			КонецЕсли;
		КонецЦикла;
		
		Если Расшифровка.Свойство("Период") Тогда
			
			Параметры.Вставить("ДатаНач", ОбщегоНазначения.ДатаНачалаПериода(Расшифровка.Период,Сценарий.Периодичность));
			Параметры.Вставить("ДатаКон", ОбщегоНазначения.ДатаКонцаПериода(Расшифровка.Период,Сценарий.Периодичность));
			
		КонецЕсли;

		ИсходныйОтчет = ЭтотОтчет;

		// Переносимые свойства
		Параметры.Вставить("ПоказыватьЗаголовок",     	ПоказыватьЗаголовок);
		Параметры.Вставить("СохранятьТекстЗапроса", 	СохранятьТекстЗапроса);
		Параметры.Вставить("РаскрашиватьИзмерения",   	РаскрашиватьИзмерения);
		Параметры.Вставить("ВидДанныхОтчета",   		ВидДанныхОтчета);
		//Параметры.Вставить("ВыводитьДетальныеЗаписи", ВыводитьДетальныеЗаписи);

		// Перенос табличной части
		Параметры.Вставить("Показатели", Показатели.Выгрузить());

		Отчет.Настроить(Параметры);
		
		Форма = Отчет.ПолучитьОсновнуюФорму();

		ПостроительОтчета.НастроитьРасшифровку(Отчет.ПолучитьПостроительОтчета(), Расшифровка);

		// Добавим измерения из расшифровываемого отчета
		МассивДобавленныеИзмерения = Новый Массив;

		ТабОтбор = Новый ТаблицаЗначений;
		ТабОтбор.Колонки.Добавить("Имя");
		ТабОтбор.Колонки.Добавить("ВидСравнения");
		ТабОтбор.Колонки.Добавить("Значение");

		Для каждого Элемент Из Отчет.ПолучитьПостроительОтчета().Отбор Цикл

			Если Элемент.Использование Тогда

				НоваяСтрока = ТабОтбор.Добавить();
				НоваяСтрока.Имя = Элемент.Имя;
				НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
				НоваяСтрока.Значение = Элемент.Значение;

			КонецЕсли;

		КонецЦикла; 

		Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
			
			Если ПостроительОтчета.ИзмеренияСтроки[Инд].Имя="Период" Тогда
				Продолжить;
			КонецЕсли;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя",ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);

			НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);

			// Измерение не нужно добавлять, если в нем заведомо будет один элемент
			НеДобавлятьИзмерение = Ложь;

			Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл

				// Не добавляем измерения по отборам на равенство - в них будет один элемент
				Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда

					НеДобавлятьИзмерение = Истина;
					Прервать;

					// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
					// или плана видов характеристик - в них будет один элемент
				ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
					ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда

					Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
						ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;

						МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));

						Если МетаданныеОбъекта<>Неопределено Тогда
							Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
								ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда

								Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда

									НеДобавлятьИзмерение = Истина;
									Прервать;

								КонецЕсли; 
							КонецЕсли; 
						КонецЕсли; 

					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

			Если НеДобавлятьИзмерение Тогда

				// Удалим также и предыдущие измерения
				Для каждого ПредыдущееИзмерение Из МассивДобавленныеИзмерения Цикл

					Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Удалить(ПредыдущееИзмерение);

				КонецЦикла;

				Продолжить;

			КонецЕсли;

			// Добавляем новое измерение и запоминаем его в массиве
			МассивДобавленныеИзмерения.Добавить(Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияСтроки[Инд].Имя,
			ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения));
		КонецЦикла;

		Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
			Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияКолонки[Инд].Имя,
			ПостроительОтчета.ИзмеренияКолонки[Инд].ТипИзмерения)
		КонецЦикла;

		Если НЕ ГруппировкаГоризонтальная="" Тогда
			
			Измерение=Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Найти(ГруппировкаГоризонтальнаяИмя);
			
			Если Не Измерение=Неопределено Тогда
				
				ПутьКДанным = Измерение.ПутьКДанным;
				ТипИзмерения=Измерение.ТипИзмерения;
				
				Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Удалить(Измерение);
				Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Добавить(ПутьКДанным, , ТипИзмерения);
				
			КонецЕсли;
			
		КонецЕсли;
			
		// Текущий отчет с детальными записями по документам
		Если Выбор.Значение = 0 Тогда
			Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Очистить();
            Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить("СтатьяОборотов", "СтатьяОборотов");
			Отчет.ПолучитьПостроительОтчета().ВыбранныеПоля.Добавить("Регистратор");

			Форма.ОбновитьТаблицуОтчета();
			
		ИначеЕсли Выбор.Значение=-1 Тогда
			
			Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить("СтатьяОборотов", "СтатьяОборотов");
			Форма.ОбновитьТаблицуОтчета();
			
		Иначе

			// Текущий отчет с дополнительным измерением
            Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить("СтатьяОборотов", "СтатьяОборотов");
			Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(Выбор.Значение, Выбор.Значение);

			Форма.ОбновитьТаблицуОтчета();
		КонецЕсли;
		Форма.неВосстанавливатьНастройку=Истина;
		Форма.Открыть();
	КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Обновляет построитель после использования запроса по источникам данных. Объемный текст запроса, полученный при настройке
// построителя, существенно замедляет интерфейсную работу с полями построителя отчетов.
//
Процедура ОбновитьПостроитель()
	
	ЕстьНастройка=Ложь;
	
	Если НЕ ПостроительОтчета.Текст="" Тогда
		
		ЕстьНастройка=Истина;
		Настройка=ПостроительОтчета.ПолучитьНастройки(Истина,Истина,Истина,Истина);
		
		ТабИзмеренияСтроки=Новый ТаблицаЗначений;
		ТабИзмеренияСтроки.Колонки.Добавить("ПутьКДанным");
		ТабИзмеренияСтроки.Колонки.Добавить("Имя");
		ТабИзмеренияСтроки.Колонки.Добавить("Тип");
		ТабИзмеренияСтроки.Колонки.Добавить("Представление");
			
		ТабИзмеренияКолонки=ТабИзмеренияСтроки.Скопировать();
		
		Для Каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
			
			СтрокаИзмерение=ТабИзмеренияСтроки.Добавить();
			СтрокаИзмерение.ПутьКДанным=Измерение.ПутьКДанным;
			СтрокаИзмерение.Имя=Измерение.Имя;
			СтрокаИзмерение.Тип=Измерение.ТипИзмерения;
			СтрокаИзмерение.Представление=Измерение.Представление;
			
		КонецЦикла;
		
		Для Каждого Измерение Из ПостроительОтчета.ИзмеренияКолонки Цикл
			
			СтрокаИзмерение=ТабИзмеренияКолонки.Добавить();
			СтрокаИзмерение.ПутьКДанным=Измерение.ПутьКДанным;
			СтрокаИзмерение.Имя=Измерение.Имя;
			СтрокаИзмерение.Тип=Измерение.ТипИзмерения;
			СтрокаИзмерение.Представление=Измерение.Представление;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СформироватьНастройкиОтчета(Новый Массив,Новый Структура,Истина);
	
	Если ЕстьНастройка Тогда
		ПостроительОтчета.УстановитьНастройки(Настройка,Истина,Истина,Истина,Истина);
		
		ПостроительОтчета.ИзмеренияКолонки.Очистить();
		ПостроительОтчета.ИзмеренияСтроки.Очистить();
		
		Для Каждого СтрокаИзмерение ИЗ ТабИзмеренияСтроки Цикл
			
			НовоеИзмерение=ПостроительОтчета.ИзмеренияСтроки.Добавить(СтрокаИзмерение.ПутьКДанным,
														СтрокаИзмерение.Имя,
														СтрокаИзмерение.Тип);
														
			НовоеИзмерение.Представление=СтрокаИзмерение.Представление;
			
		КонецЦикла;
		
		Для Каждого СтрокаИзмерение ИЗ ТабИзмеренияКолонки Цикл
			
			НовоеИзмерение=ПостроительОтчета.ИзмеренияКолонки.Добавить(СтрокаИзмерение.ПутьКДанным,
														СтрокаИзмерение.Имя,
														СтрокаИзмерение.Тип);
														
			НовоеИзмерение.Представление=СтрокаИзмерение.Представление;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПостроитель()

// Формирует текст запроса построителя по источникам данных
//
Процедура СформироватьТекстЗапросаПоисточникам(НетИсточников)
	
	СтруктураПараметров=Новый Структура;
	Периодичность=?(Сценарий.Пустая(),"День",Строка(Сценарий.Периодичность));
	
	ТекстПостроителя="
	|ВЫБРАТЬ
	|{ВЫБРАТЬ
	|ЦФО.* КАК ЦФО,
	|Проект.* КАК Проект,
	|Контрагент.* КАК Контрагент,
	|Номенклатура.* КАК Номенклатура,
	|Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"Период")+"
	|ВЫРАЗИТЬ(Период КАК Дата) КАК Период
	|}
	|СуммаУпрОборот КАК СуммаУпр,
	|ВалютнаяСуммаОборот КАК ВалютнаяСумма,
	|КоличествоОборот КАК Количество
	| ИЗ";
	
	// Определим измерения бюджетирования, используемые в полях построителя
	
	СтруктураИспользуемых=Новый Структура;
	
	Для Каждого Поле Из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		Если Поле.ПутьКДанным="ЦФО" 
			ИЛИ Поле.ПутьКДанным="Проект"
			ИЛИ Поле.ПутьКДанным="Контрагент" 
			ИЛИ Поле.ПутьКДанным="Номенклатура"
			ИЛИ Поле.ПутьКДанным="Валюта" Тогда
			
			СтруктураИспользуемых.Вставить(Поле.ПутьКДанным);
			
		Иначе
			
			ИмяИзмерения=Лев(Поле.ПутьКДанным,Найти(Поле.ПутьКДанным,".")-1);
			
			Если ИмяИзмерения="ЦФО"
				ИЛИ ИмяИзмерения="Проект"
				ИЛИ ИмяИзмерения="Контрагент"
				ИЛИ ИмяИзмерения="Номенклатура" Тогда
				
				СтруктураИспользуемых.Вставить(ИмяИзмерения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Поле Из ПостроительОтчета.Отбор Цикл
		
		Если Поле.ПутьКДанным="ЦФО" 
			ИЛИ Поле.ПутьКДанным="Проект"
			ИЛИ Поле.ПутьКДанным="Контрагент" 
			ИЛИ Поле.ПутьКДанным="Номенклатура"
			ИЛИ Поле.ПутьКДанным="Валюта" Тогда

			СтруктураИспользуемых.Вставить(Поле.ПутьКДанным);
			
		Иначе
			
			ИмяИзмерения=Лев(Поле.ПутьКДанным,Найти(Поле.ПутьКДанным,".")-1);
			
			Если ИмяИзмерения="ЦФО"
				ИЛИ ИмяИзмерения="Проект"
				ИЛИ ИмяИзмерения="Контрагент"
				ИЛИ ИмяИзмерения="Номенклатура" Тогда
				
				СтруктураИспользуемых.Вставить(ИмяИзмерения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураЗапроса=Бюджетирование.СформироватьТекстЗапросаПоОборотам(СтруктураИспользуемых,Сценарий,ДатаНач,ДатаКон, СформироватьСписокСтатей());
	
	Если СтруктураЗапроса.Свойство("НетИсточников") Тогда
		
		НетИсточников=Истина;
		Сообщить("Для выбранных статей оборотов по бюджетам не указаны источники данных.");
		
		Возврат 
		
	КонецЕсли;
	
	Для Каждого Элемент ИЗ СтруктураЗапроса.ПараметрыЗапроса Цикл
			
		ПостроительОтчета.Параметры.Вставить(Элемент.Ключ,Элемент.Значение);
			
	КонецЦикла;
		
	ТекстПостроителя=ТекстПостроителя+"
	|("+СтруктураЗапроса.ТекстЗапроса+") КАК ОборотыПоСтатьям
	|{ГДЕ
	|ЦФО.*,
	|Проект.*,
	|Контрагент.*,
	|Номенклатура.*,
	|Валюта
	|}
	|УПОРЯДОЧИТЬ ПО Период
	|{УПОРЯДОЧИТЬ ПО 
	|ЦФО.*,
	|Проект.*,
	|Контрагент.*,
	|Номенклатура.*,
	|Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"Период")+"
	|ВЫРАЗИТЬ(Период КАК Дата) КАК Период}
	|ИТОГИ
	|СУММА(СуммаУпр),
	|СУММА(ВалютнаяСумма),
	|СУММА(Количество)
	|ПО ОБЩИЕ
	|{ИТОГИ ПО 
	|ЦФО.*,
	|Проект.*,
	|Контрагент.*,
	|Номенклатура.*,
	|Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"Период")+"
	|ВЫРАЗИТЬ(Период КАК Дата) КАК Период}";
	
	ПостроительОтчета.Текст=ТекстПостроителя;
		
	ПостроительОтчета.Параметры.Вставить("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	ПостроительОтчета.Параметры.Вставить("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	ПостроительОтчета.Параметры.Вставить("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
				
КонецПроцедуры // СформироватьТекстЗапросаПоисточникам()

// Процедура заполнения начальных настроек отчета
Процедура СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей, ОбновлениеПостроителя=Ложь)
	
	СтруктураПараметров=Новый Структура;
	
	Периодичность=?(Сценарий.Пустая(),"День",Строка(Сценарий.Периодичность));
		
	ТекстНастройка="ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.Период КАК Период,
	|	ОборотыБюджетовОбороты.Валюта КАК Валюта,
	|	ОборотыБюджетовОбороты.ЦФО КАК ЦФО,
	|	ОборотыБюджетовОбороты.Проект КАК Проект,
	|	ОборотыБюджетовОбороты.Контрагент КАК Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура КАК Номенклатура,
	|	СУММА(ОборотыБюджетовОбороты.СуммаУпрОборот) КАК СуммаУпр,
	|	СУММА(ОборотыБюджетовОбороты.ВалютнаяСуммаОборот) КАК ВалютнаяСумма,
	|	СУММА(ОборотыБюджетовОбороты.СуммаСценарияОборот) КАК СуммаСценария,
	|	СУММА(ОборотыБюджетовОбороты.КоличествоОборот) КАК Количество
	|ИЗ
	|	РегистрНакопления.ОборотыБюджетов.Обороты(&ДатаНач,&ДатаКон,"+Периодичность+",Сценарий=&Сценарий) КАК ОборотыБюджетовОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиБюджета КАК СтатьиБюджета
	|	ПО ОборотыБюджетовОбороты.СтатьяОборотов = СтатьиБюджета.СтатьяОборотов
	|
	|ГДЕ
	|	СтатьиБюджета.Владелец = &Бюджет
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыБюджетовОбороты.Период,
	|	ОборотыБюджетовОбороты.Валюта,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.ЦФО,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БюджетированиеОстаткиИОбороты.Период КАК Период,
	|	БюджетированиеОстаткиИОбороты.Валюта КАК Валюта,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1 
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|			ИНАЧЕ &ПустойЦФО КОНЕЦ,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|			ИНАЧЕ &ПустойПроект КОНЕЦ,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|			ИНАЧЕ &ПустойКонтрагент КОНЕЦ,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|			ИНАЧЕ Неопределено КОНЕЦ,
	|	СУММА(БюджетированиеОстаткиИОбороты.СуммаУпрНачальныйОстаток) КАК СуммаУпр,
	|	СУММА(БюджетированиеОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток) КАК ВалютнаяСумма,
	|	СУММА(БюджетированиеОстаткиИОбороты.СуммаСценарияНачальныйОстаток) КАК СуммаСценария,
	|	СУММА(БюджетированиеОстаткиИОбороты.КоличествоНачальныйОстаток) КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Бюджетирование.ОстаткиИОбороты(&ДатаНач,&ДатаКон,"+Периодичность+", , , ,Сценарий=&Сценарий) КАК БюджетированиеОстаткиИОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Бюджетирование.Ссылка КАК Ссылка,
	|				Бюджетирование.Валютный КАК Валютный,
	|				Бюджетирование.Количественный КАК Количественный,
	|				БюджетированиеВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	|				БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	|				БюджетированиеВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	|				БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	|				БюджетированиеВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	|				БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3
	|			ИЗ
	|				ПланСчетов.Бюджетирование КАК Бюджетирование
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	|					ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	|					ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	|					ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)) КАК ВложенныйЗапрос
	|			ПО БюджетированиеОстаткиИОбороты.Счет = ВложенныйЗапрос.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СчетаБюджета КАК СчетаБюджета
	|		ПО БюджетированиеОстаткиИОбороты.Счет = СчетаБюджета.СтатьяБаланса
	|
	|ГДЕ
	|	СчетаБюджета.Владелец = &Бюджет 
	|СГРУППИРОВАТЬ ПО
	|	БюджетированиеОстаткиИОбороты.Период,
	|	БюджетированиеОстаткиИОбороты.Валюта,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1 
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|			ИНАЧЕ &ПустойЦФО КОНЕЦ,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|			ИНАЧЕ &ПустойПроект КОНЕЦ,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|			ИНАЧЕ &ПустойКонтрагент КОНЕЦ,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|			ИНАЧЕ Неопределено КОНЕЦ";
	
	
	ТекстПостроителя="
	|ВЫБРАТЬ
	|{ВЫБРАТЬ
	|ЦФО.* КАК ЦФО,
	|Проект.* КАК Проект,
	|Контрагент.* КАК Контрагент,
	|Номенклатура.* КАК Номенклатура,
	|Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"Период")+"
	|ВЫРАЗИТЬ(Период КАК Дата) КАК Период
	|}
	|СуммаУпр,
	|ВалютнаяСумма,
	|СуммаСценария,
	|Количество
	| ИЗ ("+ТекстНастройка+") КАК ОстаткиОборотыБюджета
	|{ГДЕ
	|ЦФО.*,
	|Проект.*,
	|Контрагент.*,
	|Номенклатура.*,
	|Валюта
	|}
	|УПОРЯДОЧИТЬ ПО Период
	|{УПОРЯДОЧИТЬ ПО 
	|ЦФО.*,
	|Проект.*,
	|Контрагент.*,
	|Номенклатура.*,
	|Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"Период")+"
	|ВЫРАЗИТЬ(Период КАК Дата) КАК Период}
	|ИТОГИ
	|СУММА(СуммаУпр),
	|СУММА(ВалютнаяСумма),
	|СУММА(СуммаСценария),
	|СУММА(Количество)
	|ПО ОБЩИЕ
	|{ИТОГИ ПО 
	|ЦФО.*,
	|Проект.*,
	|Контрагент.*,
	|Номенклатура.*,
	|Валюта КАК Валюта,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(Периодичность,"Период")+"
	|ВЫРАЗИТЬ(Период КАК Дата) КАК Период}";
	
	ПостроительОтчета.Текст=ТекстПостроителя;
		
	ПостроительОтчета.Параметры.Вставить("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	ПостроительОтчета.Параметры.Вставить("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	ПостроительОтчета.Параметры.Вставить("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
	
	Для Сч=0 по ПостроительОтчета.ДоступныеПоля.Количество()-1 Цикл
		Поле=ПостроительОтчета.ДоступныеПоля[Сч];
		Если Поле.Имя="Проект" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли Поле.Имя="ЦФО" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли Поле.Имя="Контрагент" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли Поле.Имя="Номенклатура" Тогда
			МассивТипов=Новый Массив;
			Если Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
				МассивТипов.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
			Иначе
				МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
			КонецЕсли;
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОбновлениеПостроителя Тогда
		
		СтруктураПредставлениеПолей = Новый Структура(
		"	ЦФО,
		|	Проект,
		|	Контрагент,
		|	Номенклатура,
		|	Валюта,
		|	Количество,
		|	СуммаУпр,
		|	ВалютнаяСумма,
		|	СуммаСценария",
		"ЦФО",
		"Проект",
		"Контрагент",
		"Номенклатура",
		"Валюта операции",
		"Количество",
		"Сумма в валюте упр. учета",
		"Сумма в валюте операции",
		"Сумма в валюте сценария");
		
		СтруктураПредставлениеПолей.Вставить("Период", "Период");
		СтруктураПредставлениеПолей.Вставить("ПериодДень", "По дням");
		СтруктураПредставлениеПолей.Вставить("ПериодНеделя", "По неделям");
		СтруктураПредставлениеПолей.Вставить("ПериодМесяц", "По месяцам");
		СтруктураПредставлениеПолей.Вставить("ПериодКвартал", "По кварталам");
		СтруктураПредставлениеПолей.Вставить("ПериодГод", "По годам");
		
		// Числовые показатели заносятся в специальную таблицу
		СтрПоказатели = мТаблицаПоказатели.Добавить();
		СтрПоказатели.ИмяПоля           = "Количество";          // Какому полю в запросе соответствует
		СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля]; // Представление показателя в отчете
		СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=3";        // Строка форматирования
		
		СтрПоказатели = мТаблицаПоказатели.Добавить();
		СтрПоказатели.ИмяПоля           = "СуммаУпр";
		СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
		СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
		
		СтрПоказатели = мТаблицаПоказатели.Добавить();
		СтрПоказатели.ИмяПоля           = "ВалютнаяСумма";
		СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
		СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
		
		СтрПоказатели = мТаблицаПоказатели.Добавить();
		СтрПоказатели.ИмяПоля           = "СуммаСценария";
		СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
		СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
		
		// Поля отбора, которые будут показаны на основной форме, заносятся в массив МассивОтбора
		МассивОтбора.Добавить("ЦФО");
		МассивОтбора.Добавить("Проект");
		МассивОтбора.Добавить("Контрагент");
		МассивОтбора.Добавить("Номенклатура");
		
	КонецЕсли;
		
КонецПроцедуры // СформироватьНастройкиОтчета()

Процедура ЗаполнитьНачальныеНастройки() Экспорт
			
	ВыводитьИтогиПоВсемУровням=Истина;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	
	мТаблицаПоказатели  = Новый ТаблицаЗначений;
	мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);
	
	мСтруктураСвязиПоказателейИИзмерений = Новый Структура;
	
	СтруктураПредставлениеПолей = Новый Структура;

	мСоответствиеНазначений = Новый Соответствие;

	МассивОтбора = Новый Массив;
	
	мНазваниеОтчета = "Отчет по бюджету: "+?(Бюджет.НаименованиеПолное="",Бюджет.Наименование,Бюджет.НаименованиеПолное);
	
	Если Сценарий.Пустая() Тогда
		
		Если ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.ФактическиеДанныеИсточники Тогда
			мНазваниеОтчета=мНазваниеОтчета+" По фактическим данным: источники данных для расчетов";
			
		Иначе
			мНазваниеОтчета=мНазваниеОтчета+" По фактическим данным";
			
		КонецЕсли;
		
	Иначе
		
		мНазваниеОтчета=мНазваниеОтчета+" Сценарий: "+Строка(Сценарий);
			
	КонецЕсли;
	
	мНаДату = Ложь;
	
	ГруппировкаГоризонтальная="";

	Если Показатели.Количество()=0 Тогда
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "Количество";          // Какому полю в запросе соответствует
		СтрПоказатели.Представление = "Количество";
		СтрПоказатели.Использование   = Ложь;
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "СуммаУпр";
		СтрПоказатели.Представление = "Сумма в валюте упр. учета";
		СтрПоказатели.Использование   = Истина;
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "ВалютнаяСумма";
		СтрПоказатели.Представление = "Сумма в валюте операции";
		СтрПоказатели.Использование   = Ложь;
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "СуммаСценария";
		СтрПоказатели.Представление = "Сумма в валюте сценария";
		СтрПоказатели.Использование   = Ложь;
		
	КонецЕсли;

	ЕстьНастройка=Ложь;
	
	Если НЕ ПостроительОтчета.Текст="" Тогда
		
		ЕстьНастройка=Истина;
		Настройка=ПостроительОтчета.ПолучитьНастройки(Истина,Истина,Истина,Ложь);
		
		ТабИзмеренияСтроки=Новый ТаблицаЗначений;
		ТабИзмеренияСтроки.Колонки.Добавить("ПутьКДанным");
		ТабИзмеренияСтроки.Колонки.Добавить("Имя");
		ТабИзмеренияСтроки.Колонки.Добавить("Тип");
		ТабИзмеренияСтроки.Колонки.Добавить("Представление");
			
		ТабИзмеренияКолонки=ТабИзмеренияСтроки.Скопировать();
		
		Для Каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
			
			СтрокаИзмерение=ТабИзмеренияСтроки.Добавить();
			СтрокаИзмерение.ПутьКДанным=Измерение.ПутьКДанным;
			СтрокаИзмерение.Имя=Измерение.Имя;
			СтрокаИзмерение.Тип=Измерение.ТипИзмерения;
			СтрокаИзмерение.Представление=Измерение.Представление;
			
		КонецЦикла;
		
		Для Каждого Измерение Из ПостроительОтчета.ИзмеренияКолонки Цикл
			
			СтрокаИзмерение=ТабИзмеренияКолонки.Добавить();
			СтрокаИзмерение.ПутьКДанным=Измерение.ПутьКДанным;
			СтрокаИзмерение.Имя=Измерение.Имя;
			СтрокаИзмерение.Тип=Измерение.ТипИзмерения;
			СтрокаИзмерение.Представление=Измерение.Представление;
			
		КонецЦикла;
		
	КонецЕсли;

	
	//Очистим отбор
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла;
	
	//Очистим порядок
	Пока ПостроительОтчета.Порядок.Количество()>0 Цикл
		ПостроительОтчета.Порядок.Удалить(0);
	КонецЦикла;
	
	СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей);
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	Если ЕстьНастройка Тогда
		ПостроительОтчета.УстановитьНастройки(Настройка,Истина,Истина,Истина,Ложь);
		
		ПостроительОтчета.ИзмеренияКолонки.Очистить();
		ПостроительОтчета.ИзмеренияСтроки.Очистить();
		
		Для Каждого СтрокаИзмерение ИЗ ТабИзмеренияСтроки Цикл
			
			НовоеИзмерение=ПостроительОтчета.ИзмеренияСтроки.Добавить(СтрокаИзмерение.ПутьКДанным,
														СтрокаИзмерение.Имя,
														СтрокаИзмерение.Тип);
														
			НовоеИзмерение.Представление=СтрокаИзмерение.Представление;
			
		КонецЦикла;
		
		Для Каждого СтрокаИзмерение ИЗ ТабИзмеренияКолонки Цикл
			
			НовоеИзмерение=ПостроительОтчета.ИзмеренияКолонки.Добавить(СтрокаИзмерение.ПутьКДанным,
														СтрокаИзмерение.Имя,
														СтрокаИзмерение.Тип);
														
			НовоеИзмерение.Представление=СтрокаИзмерение.Представление;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	мЗначимыеГруппировкиГор.Очистить();
	
	// Проверка на пустые значения
	Если Бюджет.Пустая() Тогда
		Предупреждение("Не выбран бюджет!");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппировкаГоризонтальная) И ПостроительОтчета.ИзмеренияСтроки.Найти(СтрЗаменить(ГруппировкаГоризонтальная,".","")) = Неопределено Тогда
		ГруппировкаГоризонтальная = "";
		ГруппировкаГоризонтальнаяИмя = "";
		Сообщить("Поле ""Разворачивать по горизонтали"" очищено, т.к. выбрано значение не соответствующее ни одной группировке.");
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		
		Если СписокЗначений.НайтиПоЗначению(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным) = Неопределено Тогда
			СписокЗначений.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным);
		Иначе
			Предупреждение("Повторяющаяся группировка " + ПостроительОтчета.ИзмеренияСтроки[Инд].Представление +"."+ Символы.ПС+
			"Нельзя использовать одинаковые поля группировки строк!");
			ЕстьОшибки = Истина;
			Возврат;
			
		КонецЕсли;

		// Если добавлялись одни и те же поля в строки и в колонки, то  у них будет неправильное автогенеренное имя, оканчивающееся на число
		ИмяИзмерения = ПостроительОтчета.ИзмеренияСтроки[Инд].Имя;

		ПоследнийСимвол = Сред(ИмяИзмерения, СтрДлина(ИмяИзмерения));

		Если ПоследнийСимвол = "1"
			ИЛИ ПоследнийСимвол = "2" 
			ИЛИ ПоследнийСимвол = "3" 
			ИЛИ ПоследнийСимвол = "4" 
			ИЛИ ПоследнийСимвол = "5" 
			ИЛИ ПоследнийСимвол = "6" 
			ИЛИ ПоследнийСимвол = "7" 
			ИЛИ ПоследнийСимвол = "8" 
			ИЛИ ПоследнийСимвол = "9" 
			ИЛИ ПоследнийСимвол = "0" Тогда
			
			// Удалим старое измерение и добавим новое
			СтрПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным;

			ПостроительОтчета.ИзмеренияСтроки.Удалить(ПостроительОтчета.ИзмеренияСтроки[Инд]);
			ПостроительОтчета.ИзмеренияСтроки.Вставить(СтрПутьКДанным, , , , , Инд);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.ФактическиеДанныеИсточники Тогда
		
		ТабИзмеренияСтроки=Новый ТаблицаЗначений;
		ТабИзмеренияСтроки.Колонки.Добавить("ПутьКДанным");
		ТабИзмеренияСтроки.Колонки.Добавить("Имя");
		ТабИзмеренияСтроки.Колонки.Добавить("Тип");
		ТабИзмеренияСтроки.Колонки.Добавить("Представление");
			
		ТабИзмеренияКолонки=ТабИзмеренияСтроки.Скопировать();
		
		//Запомним измерения построителя
		Для Каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
			
			СтрокаИзмерение=ТабИзмеренияСтроки.Добавить();
			СтрокаИзмерение.ПутьКДанным=Измерение.ПутьКДанным;
			СтрокаИзмерение.Имя=Измерение.Имя;
			СтрокаИзмерение.Тип=Измерение.ТипИзмерения;
			СтрокаИзмерение.Представление=Измерение.Представление;
			
		КонецЦикла;
		
		Для Каждого Измерение Из ПостроительОтчета.ИзмеренияКолонки Цикл
			
			СтрокаИзмерение=ТабИзмеренияКолонки.Добавить();
			СтрокаИзмерение.ПутьКДанным=Измерение.ПутьКДанным;
			СтрокаИзмерение.Имя=Измерение.Имя;
			СтрокаИзмерение.Тип=Измерение.ТипИзмерения;
			СтрокаИзмерение.Представление=Измерение.Представление;
			
		КонецЦикла;
					
		НастройкиПостроителя=ПостроительОтчета.ПолучитьНастройки(Истина,Истина,Истина,Истина);
		
		// Сформируем заново текст построителя. Это выполняется при формировании отчета, т.е. только в этот момент 
		// можно определить, по каким измерениям должны разворачиваться источники данных. Это необходимо знать точно,
		// т.к. количество полей источников существенно влияет на производительность.
		
		НетИсточников=Ложь;
		
		СформироватьТекстЗапросаПоисточникам(НетИсточников);
		
		Если НетИсточников Тогда
			ДокументРезультат.Очистить();
			Возврат;
		КонецЕсли;
		
		ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя,Истина,Истина,Истина,Истина);
		
		// Установим заново измерения построителя.
		
		ПостроительОтчета.ИзмеренияКолонки.Очистить();
		ПостроительОтчета.ИзмеренияСтроки.Очистить();
		
		Для Каждого СтрокаИзмерение ИЗ ТабИзмеренияСтроки Цикл
			
			НовоеИзмерение=ПостроительОтчета.ИзмеренияСтроки.Добавить(СтрокаИзмерение.ПутьКДанным,
														СтрокаИзмерение.Имя,
														СтрокаИзмерение.Тип);
														
			НовоеИзмерение.Представление=СтрокаИзмерение.Представление;
			
		КонецЦикла;
		
		Для Каждого СтрокаИзмерение ИЗ ТабИзмеренияКолонки Цикл
			
			НовоеИзмерение=ПостроительОтчета.ИзмеренияКолонки.Добавить(СтрокаИзмерение.ПутьКДанным,
														СтрокаИзмерение.Имя,
														СтрокаИзмерение.Тип);
														
			НовоеИзмерение.Представление=СтрокаИзмерение.Представление;
			
		КонецЦикла;
		
		СтрокаСуммаСценария=Показатели.Найти("СуммаСценария","Имя");
		
		Если Не СтрокаСуммаСценария=Неопределено Тогда 
			
			СтрокаСуммаСценария.Использование=Ложь;
			
		КонецЕсли;
															
	КонецЕсли;
	
	// Списки для шапки отчета
	СтрПоказатели = "";
	СтрГруппировкиВерт = "";
	СтрГруппировкиГор="";
	СтрФильтры = "";
	
	Если НЕ ГруппировкаГоризонтальная="" Тогда
		
		Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
			
			ТекущаяСтрока=ПостроительОтчета.ИзмеренияСтроки[Сч];
			
			Если ТекущаяСтрока.ПутьКДанным=ГруппировкаГоризонтальная Тогда
				
				ПутьКДанным = ТекущаяСтрока.ПутьКДанным;
				ГруппировкаГоризонтальнаяИмя=ТекущаяСтрока.Имя;
				
				ПостроительОтчета.ИзмеренияСтроки.Удалить(ТекущаяСтрока);
				ПостроительОтчета.ИзмеренияКолонки.Добавить(ПутьКДанным, , ТипИзмеренияПостроителяОтчета.Элементы);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПостроительОтчета.Порядок.Добавить(ПутьКДанным);
		
	Иначе
		
		ГруппировкаГоризонтальнаяИмя="";
		
	КонецЕсли;

	// Строка в которую выводятся обнаруженные ошибки
	СтрОшибки = "";
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
	
		СтрГруппировкиВерт = СтрГруппировкиВерт +", "+ ПостроительОтчета.ИзмеренияСтроки[Сч].Представление
		+" "+ ПостроительОтчета.ИзмеренияСтроки[Сч].ТипИзмерения;
		
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияСтроки[Сч].Представление;
	
	КонецЦикла;
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
	
		ТекущаяКолонка=ПостроительОтчета.ИзмеренияКолонки[Сч];
		
		СтрГруппировкиГор = СтрГруппировкиГор +", "+ ТекущаяКолонка.Представление
		+" "+ ТипИзмеренияПостроителяОтчета.Элементы;
		
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияКолонки[Сч].Представление;
	
	КонецЦикла;

	Для Сч=0 По Показатели.Количество()-1 Цикл

		Если Показатели[Сч].Использование Тогда
		
			СтрПоказатели = СтрПоказатели +", "+ Показатели[Сч].Представление;
		
		КонецЕсли; 
	
	КонецЦикла; 

	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

		Если ПостроительОтчета.Отбор[Сч].Использование И Не ПостроительОтчета.Отбор[Сч].Имя = "Периодичность" Тогда

			СтрФильтры = СтрФильтры +", "+ ПостроительОтчета.Отбор[Сч].Представление 
			+" "+ ПостроительОтчета.Отбор[Сч].ВидСравнения +" "+ ПостроительОтчета.Отбор[Сч].Значение;

		КонецЕсли; 
	
	КонецЦикла;
	
	СтрГруппировкиВерт=Сред(СтрГруппировкиВерт,2);
	СтрГруппировкиГор=Сред(СтрГруппировкиГор,2);
	СтрПоказатели=Сред(СтрПоказатели,2);
	СтрФильтры=Сред(СтрФильтры,2);

	Если ПостроительОтчета.ИзмеренияКолонки.Количество()>0 Тогда
		
		ТекущаяКолонка=ПостроительОтчета.ИзмеренияКолонки[0];
		ПутьКДанным = ТекущаяКолонка.ПутьКДанным;
		
		ГруппировкаГоризонтальная=ТекущаяКолонка.ПутьКДанным;
		
		ПостроительОтчета.ИзмеренияКолонки.Удалить(ТекущаяКолонка);
		ПостроительОтчета.ИзмеренияСтроки.Добавить(ПутьКДанным, , ТипИзмеренияПостроителяОтчета.Элементы);
		
	КонецЕсли;
	
	СтруктураВыводГруппировокВерт = Новый Структура;
	СтруктураВыводГруппировокГор = Новый Структура;
	МассивГруппировки    = Новый Массив;

	// сдвиг уровня
	СтруктураСдвигУровняГруппировок = Новый Структура;

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	ВсегоГруппировок = 1;
	
	КолГруппировокБезИтогов = 0;
	Массив = Новый Массив;

	СтруктураВыводГруппировокВерт.Вставить("ОБЩИЕ", Новый Массив);
	СтруктураСдвигУровняГруппировок.Вставить("ОБЩИЕ", 0);
	МассивГруппировки.Добавить("ОБЩИЕ");

	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		ВсегоГруппировок = ВсегоГруппировок + 1;
		СтруктураСдвигУровняГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, 0);
		МассивГруппировки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
		Если Сч=ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Тогда
			СтруктураВыводГруппировокГор.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);
		Иначе
			СтруктураВыводГруппировокВерт.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);
		КонецЕсли;
		
	КонецЦикла;
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач",НачалоДня(ДатаНач));
	ПостроительОтчета.Параметры.Вставить("ДатаКон",КонецДня(ДатаКон));
	ПостроительОтчета.Параметры.Вставить("Сценарий",Сценарий);
	ПостроительОтчета.Параметры.Вставить("Бюджет",Бюджет);


	// Выполнение сформированного запроса
		
	ПостроительОтчета.Выполнить();
	Результат = ПостроительОтчета.Результат;

	Макет = ПолучитьМакет("Макет");
	ДокументРезультат.Очистить();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбщийОтступ", Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировки",   Макет.ПолучитьОбласть("Значение|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировкиГор",   Макет.ПолучитьОбласть("План|ШапкаГруппы"));

	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("План|Строка"));
	СтруктураПараметров.Вставить("ТабДок",    ДокументРезультат);

	МассивПоказатели=Новый Массив;
	
	Для каждого Показатель Из Показатели Цикл
	
		Если Показатель.Использование Тогда
			МассивПоказатели.Добавить(Показатель.Имя);
		КонецЕсли;
	
	КонецЦикла; 
		
	СтруктураПараметров.Вставить("МассивПоказатели",МассивПоказатели);

	СтруктураПараметров.Вставить("ВсегоГруппировок", 			ВсегоГруппировок);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировокВерт", 	СтруктураВыводГруппировокВерт);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировокГор", 	СтруктураВыводГруппировокГор);

	СтруктураПараметров.Вставить("ГруппировкаГоризонтальная", 	ГруппировкаГоризонтальная);
	СтруктураПараметров.Вставить("ГруппировкаГоризонтальнаяНачало", 	ГруппировкаГоризонтальнаяИмя);

	СтруктураПараметров.Вставить("МассивГруппировки", 	МассивГруппировки);

	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	СтруктураПараметров.Вставить("ЦветаГруппировок", Новый Структура);
	СтруктураПараметров.Вставить("Периодичность",Строка(Сценарий.Периодичность));
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СтруктураПараметров.ЦветаГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Цвет(240 - (ПостроительОтчета.ИзмеренияСтроки.Количество() - Сч + 1) * 10, 248, 255));
	КонецЦикла;
	
	СтруктураПараметров.ЦветаГруппировок.Вставить("ОБЩИЕ", Новый Цвет(255, 248, 255));

	// наклонный шрифт для групп
	СтруктураПараметров.Вставить("ШрифтГрупп", Новый Шрифт(Макет.Область("Строка|План").Шрифт,,,,Истина));

	// форматная строка для вывода показателей
	СтруктураПараметров.Вставить("ФорматПоказателей", 			Новый Структура);
	Для Каждого Строка Из Показатели Цикл
		МетаданныеРесурса = 0;
		ФорматнаяСтрока = "";

		Нстр = мТаблицаПоказатели.Найти(Строка.Имя, "ИмяПоля");
		Если Не (Нстр = Неопределено) Тогда
			ФорматнаяСтрока = НСтр.ФорматнаяСтрока;
		КонецЕсли;

		СтруктураПараметров.ФорматПоказателей.Вставить(Строка.Имя, ФорматнаяСтрока);
	КонецЦикла;

	мГруппировокПоГоризонтали=0;

	Для Сч = 1 По 3 Цикл
		Если Сч = 1 Тогда
			Префикс = "Верх";
		ИначеЕсли Сч = 2 Тогда
			// Если нет фильтров, не выводим
			Если ПустаяСтрока(СтрФильтры) Тогда
				Продолжить;
			КонецЕсли;
			Префикс = "Середина";
		ИначеЕсли Сч = 3 Тогда
			Префикс = "Низ";
		КонецЕсли;

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Шапка" + Префикс));

		// Вывод шапки отчета
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Шапка" + Префикс);

		Если Префикс = "Верх" Тогда

			ОбластьЗначение.Параметры.ЗаголовокОтчета = мНазваниеОтчета;

			Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
				ОбластьЗначение.Параметры.Период = "Период: без ограничения " + СтрОшибки;
			Иначе
				Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
					ОбластьЗначение.Параметры.Период = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
														  + " - " + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") + СтрОшибки;
				Иначе
					ОбластьЗначение.Параметры.Период = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон)) + СтрОшибки;
				КонецЕсли;
			КонецЕсли;
			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
			ДокументРезультат.ВысотаТаблицы-1, 3).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,   3).Объединить();

		ИначеЕсли Префикс = "Середина" Тогда

			ОбластьЗначение.Параметры.Фильтры = "Отбор: " + СтрФильтры;
			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,   4).Объединить();

		ИначеЕсли Префикс = "Низ" Тогда

			ОбластьЗначение.Параметры.ГруппировкиВерт = ?(СтрДлина(СтрГруппировкиГор)>0,"Группировки по вертикали: ","Группировки: ") + СтрГруппировкиВерт;
			ОбластьЗначение.Параметры.Показатели = "Показатели: " + СтрПоказатели;
            ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
			ДокументРезультат.ВысотаТаблицы-1,   4).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,  4).Объединить();

		КонецЕсли;

	КонецЦикла;

	Если СтрДлина(СтрГруппировкиГор)>0 Тогда

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ГруппировкиГор"));
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ГруппировкиГор");
		ОбластьЗначение.Параметры.ГруппировкиГор = "Группировки по горизонтали: " + СтрГруппировкиГор;

		ДокументРезультат.Присоединить(ОбластьЗначение);

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
		ДокументРезультат.ВысотаТаблицы,  4).Объединить();

	КонецЕсли;
	
	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;
		
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаГруппы"));
	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаГруппы");

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьИтог = Макет.ПолучитьОбласть("ШапкаГруппы|Итог");

	Для Каждого Показатель Из МассивПоказатели Цикл
		ДокументРезультат.Присоединить(ОбластьИтог);
	КонецЦикла;	

	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы-МассивПоказатели.Количество()+1, 
	ДокументРезультат.ВысотаТаблицы,  ДокументРезультат.ШиринаТаблицы).Объединить();

	Если НЕ ПустаяСтрока(ГруппировкаГоризонтальная) Тогда

        ВывестиШапку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,ГруппировкаГоризонтальнаяИмя,"Все"), СтруктураПараметров, 0);

	КонецЕсли;

	Если МассивПоказатели.Количество()>1 Тогда

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаПоказатели"));
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаПоказатели");

		ДокументРезультат.Присоединить(ОбластьЗначение);

		ОбластьПоказатели=Макет.ПолучитьОбласть("План|ШапкаПоказатели");

		Для Индекс=1 по мГруппировокПоГоризонтали+1 Цикл
			Для Каждого Строка Из Показатели Цикл
				Если Строка.Использование Тогда
					ОбластьПоказатели.Параметры.Показатель=Строка.Представление;
					ДокументРезультат.Присоединить(ОбластьПоказатели);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы,2).Объединить();

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы,2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

	Иначе

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
		
	КонецЕсли;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;
	ДокументРезультат.ФиксацияСлева = 2;
		
	//////////////////////////////////////////////////////////////////////////////////////
	// Выводим данные начальных остатков по счетам
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Разделитель"));
	ОбластьРазделительНачало   = Макет.ПолучитьОбласть("Значение|Разделитель");
	ОбластьРазделительНачало.Параметры.ИмяРазделителя="Остатки по счетам на начало";

	ДокументРезультат.Присоединить(ОбластьРазделительНачало);
	
	ОбластьРазделитель=Макет.ПолучитьОбласть("План|Разделитель");
	
	Для Индекс=1 по мГруппировокПоГоризонтали+1 Цикл
		Для Каждого Показатель Из МассивПоказатели Цикл
				ДокументРезультат.Присоединить(ОбластьРазделитель);
		КонецЦикла;	
	КонецЦикла;
	
	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2+(мГруппировокПоГоризонтали+1)*МассивПоказатели.Количество(), 
	ДокументРезультат.ВысотаТаблицы,   2+(мГруппировокПоГоризонтали+1)*МассивПоказатели.Количество()).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
		
	СтруктураВыводГруппировокВерт = Новый Структура;
	СтруктураВыводГруппировокГор = Новый Структура;
	МассивГруппировки    = Новый Массив;

	// сдвиг уровня
	СтруктураСдвигУровняГруппировок = Новый Структура;

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	ВсегоГруппировок = 1;
	
	КолГруппировокБезИтогов = 0;
	Массив = Новый Массив;

	СтруктураВыводГруппировокВерт.Вставить("ОБЩИЕ", Новый Массив);
	СтруктураСдвигУровняГруппировок.Вставить("ОБЩИЕ", 0);
	МассивГруппировки.Добавить("ОБЩИЕ");
	
	Если ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.ФактическиеДанныеИсточники Тогда
		
		ПостроительСчета=НастроитьПостроительДляСчетовИсточники(ПостроительОтчета.ПолучитьНастройки());
		
		Если ПостроительСчета.Текст="" Тогда
			ДокументРезультат.Очистить();
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ПостроительСчета=НастроитьПостроительДляСчетов(ПостроительОтчета.ПолучитьНастройки());
		
	КонецЕсли;
	
	Для Сч=0 По ПостроительСчета.ИзмеренияСтроки.Количество()-1 Цикл

		ВсегоГруппировок = ВсегоГруппировок + 1;
		СтруктураСдвигУровняГруппировок.Вставить(ПостроительСчета.ИзмеренияСтроки[Сч].Имя, 0);
		МассивГруппировки.Добавить(ПостроительСчета.ИзмеренияСтроки[Сч].Имя);
		
		Если Сч=ПостроительСчета.ИзмеренияСтроки.Количество()-1 Тогда
			СтруктураВыводГруппировокГор.Вставить(ПостроительСчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);
		Иначе
			СтруктураВыводГруппировокВерт.Вставить(ПостроительСчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ВсегоГруппировок", 			ВсегоГруппировок);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировокВерт", 	СтруктураВыводГруппировокВерт);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировокГор", 	СтруктураВыводГруппировокГор);

	СтруктураПараметров.Вставить("ГруппировкаГоризонтальная", 	ГруппировкаГоризонтальная);
	СтруктураПараметров.Вставить("ГруппировкаГоризонтальнаяНачало", 	ГруппировкаГоризонтальнаяИмя);

	СтруктураПараметров.Вставить("МассивГруппировки", 	МассивГруппировки);

	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	СтруктураПараметров.Вставить("ЦветаГруппировок", Новый Структура);
	СтруктураПараметров.Вставить("ТекущийПостфикс", "НачальныйОстаток");
		
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СтруктураПараметров.ЦветаГруппировок.Вставить(ПостроительСчета.ИзмеренияСтроки[Сч].Имя, Новый Цвет(240 - (ПостроительСчета.ИзмеренияСтроки.Количество() - Сч + 1) * 10, 248, 255));
	КонецЦикла;
	
	СтруктураПараметров.ЦветаГруппировок.Вставить("ОБЩИЕ", Новый Цвет(255, 248, 255));

		
	Если НЕ ГруппировкаГоризонтальная="" Тогда
		
		ПостроительСчета.Порядок.Добавить(ГруппировкаГоризонтальная);
		
	КонецЕсли;
	
	ПостроительСчета.Выполнить();

	РезультатСчета=ПостроительСчета.Результат;
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	ВывестиВыборку(РезультатСчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0, Новый Массив);

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	//////////////////////////////////////////////////////////////////////////////////////
	// Выводим данные оборотов по статьям
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Разделитель"));
	ОбластьРазделительНачало   = Макет.ПолучитьОбласть("Значение|Разделитель");
	ОбластьРазделительНачало.Параметры.ИмяРазделителя="Обороты по статьям бюджета";

	ДокументРезультат.Присоединить(ОбластьРазделительНачало);
	
	ОбластьРазделитель=Макет.ПолучитьОбласть("План|Разделитель");
	
	Для Индекс=1 по мГруппировокПоГоризонтали+1 Цикл
		Для Каждого Показатель Из МассивПоказатели Цикл
				ДокументРезультат.Присоединить(ОбластьРазделитель);
		КонецЦикла;	
	КонецЦикла;
	
	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2+(мГруппировокПоГоризонтали+1)*МассивПоказатели.Количество(), 
		ДокументРезультат.ВысотаТаблицы,   2+(мГруппировокПоГоризонтали+1)*МассивПоказатели.Количество()).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	СтруктураПараметров.Вставить("ТекущийПостфикс", "");
	
	Если ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.ФактическиеДанныеИсточники Тогда
		
		ПостроительСтатьи=НастроитьПостроительДляСтатейИсточники(ПостроительОтчета.ПолучитьНастройки());
		
		Если ПостроительСтатьи.Текст="" Тогда
			ДокументРезультат.Очистить();
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ПостроительСтатьи=НастроитьПостроительДляСтатей(ПостроительОтчета.ПолучитьНастройки());
		
	КонецЕсли;
	
	Если НЕ ГруппировкаГоризонтальная="" Тогда
		
		ПостроительСтатьи.Порядок.Добавить(ГруппировкаГоризонтальная);
		
	КонецЕсли;
	
	ПостроительСтатьи.Выполнить();
	РезультатСтатьи=ПостроительСтатьи.Результат;
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	ВывестиВыборку(РезультатСтатьи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0, Новый Массив);

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	//////////////////////////////////////////////////////////////////////////////////////
	// Выводим данные конечных остатков по счетам
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Разделитель"));
	ОбластьРазделительНачало   = Макет.ПолучитьОбласть("Значение|Разделитель");
	ОбластьРазделительНачало.Параметры.ИмяРазделителя="Остатки по счетам на конец";

	ДокументРезультат.Присоединить(ОбластьРазделительНачало);
	
	ОбластьРазделитель=Макет.ПолучитьОбласть("План|Разделитель");
	
	Для Индекс=1 по мГруппировокПоГоризонтали+1 Цикл
		Для Каждого Показатель Из МассивПоказатели Цикл
				ДокументРезультат.Присоединить(ОбластьРазделитель);
		КонецЦикла;	
	КонецЦикла;
	
	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2+(мГруппировокПоГоризонтали+1)*МассивПоказатели.Количество(), 
		ДокументРезультат.ВысотаТаблицы,   2+(мГруппировокПоГоризонтали+1)*МассивПоказатели.Количество()).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	СтруктураПараметров.Вставить("ТекущийПостфикс", "КонечныйОстаток");
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	ВывестиВыборку(РезультатСчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0, Новый Массив);

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	// Вывод подвала отчета
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Подвал"));

	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Подвал");

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьПоказатель = Макет.ПолучитьОбласть("План|Подвал");

	Для Индекс=1 по мГруппировокПоГоризонтали+1 Цикл
		Для Каждого Показатель Из МассивПоказатели Цикл
			ДокументРезультат.Присоединить(ОбластьПоказатель);
		КонецЦикла;	
	КонецЦикла;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;
	СтруктураНастроекОтчета.Вставить("ИмяОтчета", мИмяОтчета);

	Для Каждого Реквизит Из Метаданные.Отчеты.ОтчетПоБюджету.Реквизиты Цикл
		СтруктураНастроекОтчета.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из Метаданные.Отчеты.ОтчетПоБюджету.ТабличныеЧасти Цикл
		СтруктураНастроекОтчета.Вставить(ТабличнаяЧасть.Имя, ЭтотОбъект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	ДокументРезультат.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.Автомасштаб=Истина;
	
	Если ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.ФактическиеДанныеИсточники Тогда
		
		ОбновитьПостроитель();
		
	КонецЕсли;
		
КонецПроцедуры

// Вывод строку шапки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	ВыборкаГоризонтальная - выборка горизонтальная из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ЗначениеВыборкиДанные - строка, заголовок вертикальной области данных
//
Процедура ВывестиСтрокуШапки(ВыборкаГоризонтальная, СтруктураПараметров, Номер)

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировкиГор   = СтруктураПараметров.ЗначениеГруппировкиГор;

	СтруктураВыводГруппировокГор = СтруктураПараметров.СтруктураВыводГруппировокГор;

	УровеньЗаписи   = ВыборкаГоризонтальная.Уровень();
	СдвигУровня     = 0;

	ИмяГруппировки  = ВыборкаГоризонтальная.Группировка();

	ТабДок = СтруктураПараметров.ТабДок;

	ЗначениеГруппировки = "";
	МассивПоказатели=СтруктураПараметров.МассивПоказатели;
	Периодичность=СтруктураПараметров.Периодичность;

	ЗначениеРасшифровки = Новый Структура;

	ИдЗначимойГруппировкиГор="";

	ТипЗаписиВыборки = ВыборкаГоризонтальная.ТипЗаписи();

	МассивВыводГруппировок = Новый Массив;

	ИмяГруппировки  = ВыборкаГоризонтальная.Группировка();

	МассивВыводГруппировок = Новый Массив;
	
	Если Найти(ИмяГруппировки,"Период")>0 Тогда
		ЗначениеТекущейГруппировки=ОбщегоНазначения.ПолучитьПериодСтрокой(ВыборкаГоризонтальная[ИмяГруппировки],?(ИмяГруппировки="Период",Периодичность,СтрЗаменить(ИмяГруппировки,"Период","")));
	Иначе
		ЗначениеТекущейГруппировки = "" + ВыборкаГоризонтальная[ИмяГруппировки];
	КонецЕсли;
	
	Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
		
		ЗначениеТекущейГруппировки = "Не указано";
		
	КонецЕсли;

	ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;
	 
	ЗначениеРасшифровки.Вставить(ИмяГруппировки, ВыборкаГоризонтальная[ИмяГруппировки]);

	мЗначимыеГруппировкиГор.Добавить(ВыборкаГоризонтальная[ИмяГруппировки]);
	
	ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировки=ЗначениеГруппировки;
    ОбластьЗначениеГруппировкиГор.Параметры.РасшифровкаГоризонтальная=ЗначениеРасшифровки;
	
	Для Каждого Показатель Из МассивПоказатели Цикл
		ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
	КонецЦикла;	
	ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-МассивПоказатели.Количество()+1, 
	ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

КонецПроцедуры

// Вывод шапки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка				  - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ЗначениеВыборкиДанные - строка, заголовок вертикальной области данных
//
Процедура ВывестиШапку(Выборка, СтруктураПараметров, Номер)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;

	// Берутся группировки все подряд, 

	Пока Выборка.Следующий() Цикл

		Если Выборка.Группировка()=ГруппировкаГоризонтальнаяИмя  Тогда  
			ВывестиСтрокуШапки(Выборка, СтруктураПараметров, Номер);
			мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
		КонецЕсли; 

		// Детальные записи не нужны: для последней группировки после итогов по группировке идут 
		// детальные записи
		Если Номер = ВсегоГруппировок - 1
			И Выборка.ТипЗаписи() =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
			Продолжить;
		КонецЕсли;

		ВывестиШапку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1);

	КонецЦикла;

	//СтруктураПараметров.Вставить("ПредыдущееЗначениеГруппировки" + Выборка.Уровень(), Неопределено);

КонецПроцедуры // ВывестиВыборку()

//Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка               - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ТабДок				  - табличный документ
//	Номер		          - число, номер обходимой группировки
//	МассивПредставленийГруппировок - массив, хранящий представления группировок
Процедура РазвернутьСтроку (Выборка, СтруктураПараметров,ТабДок,Номер)

	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;
	ТипЗаписиВыборки = Выборка.ТипЗаписи();
	ТекущийПостфикс=СтруктураПараметров.ТекущийПостфикс;
	ФорматПоказателей=СтруктураПараметров.ФорматПоказателей;
	
	Для каждого ЗначимаяГруппировка Из мЗначимыеГруппировкиГор Цикл
		
		НомерКолонки=1;
		
		Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл
			
			Если НомерКолонки=1 Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			КонецЕсли;
			
			Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
				Если (НомерКолонки>1) Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				КонецЕсли;
			КонецЕсли;
			
			Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			КонецЕсли;
						
			Если Выборка.НайтиСледующий(ЗначимаяГруппировка.Значение,ГруппировкаГоризонтальнаяИмя) Тогда
				
				Если НЕ ТекущийПостфикс="" Тогда
					
					ЗначениеДт=?(Выборка[Имя+ТекущийПостфикс+"Дт"]=NULL,0,Выборка[Имя+ТекущийПостфикс+"Дт"]);
					ЗначениеКт=?(Выборка[Имя+ТекущийПостфикс+"Кт"]=NULL,0,Выборка[Имя+ТекущийПостфикс+"Кт"]);
					
					Значение=ЗначениеДт-ЗначениеКт;
					
				Иначе
					Значение=Выборка[Имя];
				КонецЕсли;
				
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(Значение, ФорматПоказателей[Имя]);
				
				Выборка.Сбросить();
				
			Иначе
				
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(0, ФорматПоказателей[Имя]);		
				
			КонецЕсли;
							
			ТабДок.Присоединить(ОбластьЗначенияПоказателя);
			
			НомерКолонки=НомерКолонки+1;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры 

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиСтроку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки)

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = СтруктураПараметров.ЗначениеГруппировки;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;
	ТекущийПостфикс=СтруктураПараметров.ТекущийПостфикс;
	ФорматПоказателей=СтруктураПараметров.ФорматПоказателей;

	СтруктураВыводГруппировокВерт = СтруктураПараметров.СтруктураВыводГруппировокВерт;
	Периодичность=СтруктураПараметров.Периодичность;

	УровеньЗаписи   = Выборка.Уровень();
	СдвигУровня     = 0;

	ИмяГруппировки  = Выборка.Группировка();

	ТабДок = СтруктураПараметров.ТабДок;

	ЗначениеГруппировки = "";

	ЗначениеРасшифровки = Неопределено;

	ТипЗаписиВыборки = Выборка.ТипЗаписи();

	МассивВыводГруппировок = Новый Массив;

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

		ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
		Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда

			ЗначениеТекущейГруппировки = "Не указано";
		КонецЕсли;

		ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

	ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

		Если Найти(ИмяГруппировки,"Период")>0 Тогда
			ЗначениеТекущейГруппировки=ОбщегоНазначения.ПолучитьПериодСтрокой(Выборка[ИмяГруппировки],?(ИмяГруппировки="Период",Периодичность,СтрЗаменить(ИмяГруппировки,"Период","")));
		Иначе
			ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
		КонецЕсли;

		Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
			Если Найти(ИмяГруппировки,"Свойство")>0 Тогда
				ЗначениеТекущейГруппировки = "Свойство не указано: "+СтруктураПараметров.СвойстваОписание[ИмяГруппировки];
			Иначе
				ЗначениеТекущейГруппировки = "Не указано";
			КонецЕсли;
		КонецЕсли;

		ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

		Если ЗначениеРасшифровки = Неопределено Тогда 
			ЗначениеРасшифровки = Выборка[ИмяГруппировки];
		КонецЕсли;

	ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ОбщийИтог Тогда
		ЗначениеГруппировки = "ИТОГО: ";
	КонецЕсли;

	// Для итогов по группировке сдвиг нужно уменьшить на количество пропущенных группировок, 
	// заранее рассчитанное для каждой группировки
	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

        МассивРасшифровки.Добавить(ИмяГруппировки);

		ЗначениеРасшифровкиСтрока = Новый Структура;
		Для Каждого Элемент Из МассивРасшифровки Цикл
			ЗначениеРасшифровкиСтрока.Вставить(Элемент, Выборка[Элемент])
		КонецЦикла;

		СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[ИмяГруппировки]+1;

		// Для итогов по иерархии сдвиг нужно уменьшить на количество пропущенных группировок для предыдущей группировки
		// заранее рассчитанное для каждой группировки
	ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
		СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[СтруктураПараметров.МассивГруппировки[Номер - 1]]+1;
	КонецЕсли;

	УровеньЗаписи = УровеньЗаписи - СдвигУровня;

	ТабДок.Вывести(ОбластьОбщийОтступ, УровеньЗаписи);
	ТабДок.Область(ТабДок.ВысотаТаблицы,1).Расшифровка = ЗначениеРасшифровкиСтрока;

	ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = СокрЛП(ЗначениеГруппировки);
	ОбластьЗначениеГруппировки.Параметры.Расшифровка = ЗначениеРасшифровки;
	ОбластьЗначениеГруппировки.Область().Отступ = УровеньЗаписи;

	ТабДок.Присоединить(ОбластьЗначениеГруппировки);

	// Итоги по группировкам

	НомерКолонки=1;

	Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

		Если НомерКолонки=1 Тогда
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		КонецЕсли;

		Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
			Если (НомерКолонки>1) Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			КонецЕсли;
		КонецЕсли;

		Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		КонецЕсли;

		Если НЕ ТекущийПостфикс="" Тогда
			
			Если ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.ФактическиеДанныеИсточники Тогда
				
				ЗначениеДт=?(Выборка[Имя+ТекущийПостфикс+"ДтИтог"]=NULL,0,Выборка[Имя+ТекущийПостфикс+"ДтИтог"]);
				ЗначениеКт=?(Выборка[Имя+ТекущийПостфикс+"КтИтог"]=NULL,0,Выборка[Имя+ТекущийПостфикс+"КтИтог"]);
				
			Иначе
				
				ЗначениеДт=?(Выборка[Имя+ТекущийПостфикс+"Дт"]=NULL,0,Выборка[Имя+ТекущийПостфикс+"Дт"]);
				ЗначениеКт=?(Выборка[Имя+ТекущийПостфикс+"Кт"]=NULL,0,Выборка[Имя+ТекущийПостфикс+"Кт"]);
				
			КонецЕсли;
			
			Значение=ЗначениеДт-ЗначениеКт;
		Иначе
			Значение=Выборка[Имя];
		КонецЕсли;	
		
		ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(Значение, ФорматПоказателей[Имя]);
		
		ТабДок.Присоединить(ОбластьЗначенияПоказателя);

		НомерКолонки=НомерКолонки+1;

	КонецЦикла;

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
		ТабДок.Область(ТабДок.ВысотаТаблицы, 2,ТабДок.ВысотаТаблицы, 2).Шрифт = СтруктураПараметров.ШрифтГрупп;
	КонецЕсли;

	Если НЕ ПустаяСтрока(СтруктураПараметров.ГруппировкаГоризонтальнаяНачало) Тогда

		РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,СтруктураПараметров.ГруппировкаГоризонтальнаяНачало, "Все"),СтруктураПараметров,ТабДок,0);
		
	КонецЕсли;

	Если ЗначениеРасшифровки=Неопределено Тогда // Нет расшифровки
		Для Индекс=3 по ТабДок.ШиринаТаблицы Цикл
			ТабДок.Область(ТабДок.ВысотаТаблицы,Индекс).Расшифровка=Неопределено;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВывестиСтроку()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиВыборку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;

	// Берутся группировки все подряд, 

	Пока Выборка.Следующий() Цикл

		Если Выборка.Группировка()<>ГруппировкаГоризонтальнаяИмя  Тогда  // Не выводим группировку, разворачивающуюся по горизонтали.
			ВывестиСтроку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки);	
		КонецЕсли; 

		// Детальные записи не нужны: для последней группировки после итогов по группировке идут 
		// детальные записи
		Если Номер = ВсегоГруппировок - 1
			И Выборка.ТипЗаписи() =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
			Продолжить;
		КонецЕсли;

        // На каждом уровне используется своя копия структуры расшифровок
		КопияМассивРасшифровки = Новый Массив;
		Для Каждого Элемент Из МассивРасшифровки Цикл
			КопияМассивРасшифровки.Добавить(Элемент);
		КонецЦикла;
		
		ВывестиВыборку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1, КопияМассивРасшифровки);

	КонецЦикла;

	//СтруктураПараметров.Вставить("ПредыдущееЗначениеГруппировки" + Выборка.Уровень(), Неопределено);

КонецПроцедуры // ВывестиВыборку()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ПостроительОтчета;

КонецФункции // ПолучитьПостроительОтчета()

	// Настраивает отчет для параметрического вызова
//
// Параметры
//  СтруктураПараметров  – Структура, Соответсвие – содержит список параметров:
//	ДатаНач,
//	ДатаКон,
//	ИмяРегистра,
//	ЗаполнитьПоУмолчанию,
//	ПоказыватьЗаголовок,
//	ВыводитьПоказателиВСтроку,
//	ВыводитьИтогиПоВсемУровням,
//	ВыводитьДополнительныеПолявОтдельнойКолонке,
//	РаскрашиватьИзмерения
//	ГруппировкиСтрок  - структура или соответсвие,
//	ГруппировкиКолонок- структура или соответствие,
//	Показатели - таблица значений,
//	Отбор - структура или соответсвие
//
Процедура Настроить(СтруктураПараметров, ЗаполняемыйОбъект = Неопределено) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 

	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	// Это свойство влияет на заполнение	
	Сценарий = Параметры["Сценарий"];
	Бюджет = Параметры["Бюджет"];
	
	// Прочие свойства
	ПоказыватьЗаголовок        	= Параметры["ПоказыватьЗаголовок"];
	ГруппировкаГоризонтальная 	= Параметры["ГруппировкаГоризонтальная"];
	РаскрашиватьИзмерения      	= Параметры["РаскрашиватьИзмерения"];
	ВидДанныхОтчета		    	= Параметры["ВидДанныхОтчета"];
	
	Если ЗаполняемыйОбъект = Неопределено Тогда
		ЗаполняемыйОбъект = ЭтотОбъект;
	КонецЕсли;
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
	Иначе
		
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
		ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ПостроительОтчета.ИзмеренияКолонки.Очистить();
		ПостроительОтчета.ВыбранныеПоля.Очистить();

		Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
			ПостроительОтчета.Отбор.Удалить(0);
		КонецЦикла; 
		
		// Группировки строк
		
		ГруппировкиСтрок = Параметры["ГруппировкиСтрок"];
		Если ТипЗнч(ГруппировкиСтрок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиСтрок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияСтроки.Очистить();
			
			Для каждого Строка Из ГруппировкиСтрок Цикл
				
				ПостроительОтчета.ИзмеренияСтроки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Группировки колонок
		
		ГруппировкиКолонок = Параметры["ГруппировкиКолонок"];
		Если ТипЗнч(ГруппировкиКолонок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиКолонок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияКолонки.Очистить();
			
			Для каждого Строка Из ГруппировкиКолонок Цикл
				
				ПостроительОтчета.ИзмеренияКолонки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Показатели: флажки использования
		
		ТаблицаПоказатели = Параметры["Показатели"];
		Если ТипЗнч(ТаблицаПоказатели) = Тип("ТаблицаЗначений") 
			И ТаблицаПоказатели.Колонки.Найти("Имя")<>Неопределено
			И ТаблицаПоказатели.Колонки.Найти("Использование")<>Неопределено Тогда
			
			Для Каждого Строка Из Показатели Цикл
				
				НайдСтрока = ТаблицаПоказатели.Найти(Строка.Имя, "Имя");
				Если НайдСтрока<>Неопределено Тогда
					Строка.Использование = НайдСтрока.Использование;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	// Выбранные поля
	
	ВыбранныеПоля = Параметры["ВыбранныеПоля"];
	Если ТипЗнч(ВыбранныеПоля) = Тип("Соответствие")
		ИЛИ ТипЗнч(ВыбранныеПоля) = Тип("Структура") Тогда
		
		ПостроительОтчета.ВыбранныеПоля.Очистить();
		
		Для каждого Строка Из ВыбранныеПоля Цикл
		
			ПостроительОтчета.ВыбранныеПоля.Добавить(Строка.Ключ);
		
		КонецЦикла; 
		
	КонецЕсли;
	
	// Отбор, заданный списком
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
			ПостроительОтчета.Отбор.Удалить(0);
		КонецЦикла; 

		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

мЗначимыеГруппировкиГор=Новый ("СписокЗначений");
НП=Новый НастройкаПериода;
#КонецЕсли

