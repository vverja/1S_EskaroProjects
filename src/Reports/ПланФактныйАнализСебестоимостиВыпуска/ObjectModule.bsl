Перем ВидУчета Экспорт;
Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если Клиент ИЛИ ВнешнееСоединение Тогда

// Формирует таблицу потребностей материалов и таблицу выпуска.
//
// Параметры:
//	ТаблицаПотребностей - Таблица значений - Полученная таблица потребностей
//	ТаблицаВыпуска - ТаблицаЗначений - Полученная таблица выпуска
//
Процедура ПолучитьТаблицуПотребностей(ТаблицаПотребностей, ТаблицаВыпуска)
	
	Схема = ПолучитьМакет("СхемаКомпоновкиДанныхФактическийВыпуск");
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема);
	
	ДоработатьКомпоновщикПередВыводом();
	
	Настройки = Схема.НастройкиПоУмолчанию;
	КомпоновщикНастроекВыпуск = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекВыпуск.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроекВыпуск.ЗагрузитьНастройки(Настройки);
	
	// Заполним параметры данных.
	СписокКодовОперацийВыпуска = Новый СписокЗначений;
	СписокКодовОперацийВыпуска.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	СписокКодовОперацийВыпуска.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	СписокКодовОперацийВыпуска.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч);
	СписокКодовОперацийВыпуска.Добавить(Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП);
	СписокКодовОперацийВыпуска.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП);
	
	ПараметрКомпоновкиДанных = КомпоновщикНастроекВыпуск.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СписокКодовОперацийВыпуска"));
	Если ПараметрКомпоновкиДанных <> Неопределено Тогда
		ПараметрКомпоновкиДанных.Значение = СписокКодовОперацийВыпуска;
		ПараметрКомпоновкиДанных.Использование = Истина;
	КонецЕсли;
	
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект, КомпоновщикНастроекВыпуск);
	КомпоновщикНастроекВыпуск.Восстановить();
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		Схема, 
		КомпоновщикНастроекВыпуск.Настройки,
		ДанныеРасшифровки,
		, // МакетОформления
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,
		, // ВнешниеНаборыДанных
		ДанныеРасшифровки
	);
	
	ТаблицаВыпуска = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ПроцессорВывода.УстановитьОбъект(ТаблицаВыпуска);
	ТаблицаВыпуска = ПроцессорВывода.Вывести(
		ПроцессорКомпоновки,
		Истина // Воможность прерывания пользователем
	);
	
	Параметры = Новый Структура("ПараметрыВыпуска, КоличествоУровнейРазузлования, ДатаСпецификации, Отбор, РазмещатьВСопутствующихИзделиях");
	Параметры.РазмещатьВСопутствующихИзделиях = Истина;
	Параметры.КоличествоУровнейРазузлования = 1;
	
	ТаблицаПотребностей = ТаблицаВыпуска.СкопироватьКолонки();
	ТаблицаПотребностей.Колонки.Добавить("Затрата", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПотребностей.Колонки.Добавить("ХарактеристикаЗатраты", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПотребностей.Колонки.Добавить("СерияЗатраты", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаПотребностей.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПотребностей.Колонки.Добавить("КоэффициентПотребность", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаВыпуска Из ТаблицаВыпуска Цикл
		
		Если СтрокаВыпуска.СтатьяЗатрат = Неопределено Тогда
			СтрокаВыпуска.СтатьяЗатрат = NULL;
		КонецЕсли;
		
		Если СтрокаВыпуска.КоличествоВыпуск = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Новый Структура("ИсходныеКомплектующие, ВозвратныеОтходы");
		
		СтруктураИсточник = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Количество, Спецификация");
		
		ЗаполнитьЗначенияСвойств(СтруктураИсточник, СтрокаВыпуска);
		СтруктураИсточник.Номенклатура = СтрокаВыпуска.Продукция;
		СтруктураИсточник.ХарактеристикаНоменклатуры = СтрокаВыпуска.ХарактеристикаПродукции;
		СтруктураИсточник.Количество = СтрокаВыпуска.КоличествоВыпуск;

		МассивОшибокРазузлования = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточник, Результат, Параметры);
		
		Для Каждого Строка Из Результат.ИсходныеКомплектующие Цикл
			
			НоваяСтрока = ТаблицаПотребностей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыпуска);
			
			НоваяСтрока.Затрата = Строка.Номенклатура;
			НоваяСтрока.ХарактеристикаЗатраты = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СтатьяЗатрат = Строка.СтатьяЗатрат;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.КоэффициентПотребность = Строка.Коэффициент;
			
		КонецЦикла;
		
		Для Каждого Строка Из Результат.ВозвратныеОтходы Цикл
			
			НоваяСтрока = ТаблицаПотребностей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыпуска);
			
			НоваяСтрока.Затрата = Строка.Номенклатура;
			НоваяСтрока.ХарактеристикаЗатраты = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СтатьяЗатрат = Строка.СтатьяЗатрат;
			НоваяСтрока.Количество = -Строка.Количество;
			НоваяСтрока.КоэффициентПотребность = Строка.Коэффициент;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаПотребностей.ЗаполнитьЗначения(0, "КоличествоВыпуск, КоличествоВыпускЕдиницыДляОтчетов, КоличествоВыпускБазовыеЕдиницы");
	
	// Обработаем таблицу потребностей построителем для установки отбора и расчета количества единиц.
	СхемаПотребности = ПолучитьМакет("СхемаКомпоновкиДанныхПотребности");
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПотребности);
	
	НастройкиПотребности = СхемаПотребности.НастройкиПоУмолчанию;
	
	КомпоновщикНастроекПотребности = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекПотребности.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроекПотребности.ЗагрузитьНастройки(НастройкиПотребности);
	
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект, КомпоновщикНастроекПотребности);
	
	КомпоновщикНастроекПотребности.Восстановить();
	НастройкиКомпоновкиДанных = КомпоновщикНастроекПотребности.ПолучитьНастройки();
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаПотребностей", ТаблицаПотребностей);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаПотребности, 
		НастройкиКомпоновкиДанных,
		, // ДанныеРасшифровки,
		, // МакетОформления
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,
		ВнешниеНаборыДанных,
		, // ДанныеРасшифровки
	);
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ТаблицаРезультата = ПроцессорВывода.Вывести(
		ПроцессорКомпоновки,
		Истина // Воможность прерывания пользователем
	);
	
	ТаблицаПотребностей = ТаблицаРезультата.Скопировать();
	
КонецПроцедуры // ПолучитьТаблицуПотребностей()

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	Перем ТаблицаПотребностей;
	Перем ТаблицаВыпуска;
	
	ПараметрКомпоновкиДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидУчета"));
	Если ПараметрКомпоновкиДанных <> Неопределено Тогда
		ВидУчета = ПараметрКомпоновкиДанных.Значение;
	КонецЕсли;
		
	ПолучитьТаблицуПотребностей(ТаблицаПотребностей, ТаблицаВыпуска);
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПотребностей", ТаблицаПотребностей);
	ВнешниеНаборыДанных.Вставить("ТаблицаВыпуска", ТаблицаВыпуска);
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	ТиповыеОтчеты.СформироватьТиповойОтчет(
		ЭтотОбъект, 
		Результат, 
		ДанныеРасшифровки, 
		ВыводВФормуОтчета,
		ВнешниеНаборыДанных,
		// ВыводитьШапкуОтчетаНаВсехСтраницах
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
		
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры


Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

#КонецЕсли

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	СписокКодовОпераций = Новый СписокЗначений;
	СписокКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	СписокКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	СписокКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	СписокКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	
	ПараметрСписокКодовОпераций = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СписокКодовОпераций"));
	Если ПараметрСписокКодовОпераций <> Неопределено Тогда
		ПараметрСписокКодовОпераций.Значение = СписокКодовОпераций;
		ПараметрСписокКодовОпераций.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
