#Если Клиент Тогда
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт
	
	ВысшееОбразование = Новый Массив;
	ВысшееОбразование.Добавить(Справочники.ВидыОбразованияФизЛиц.Аспирантура);
	ВысшееОбразование.Добавить(Справочники.ВидыОбразованияФизЛиц.АдъюнктураОрдинатура);
	ВысшееОбразование.Добавить(Справочники.ВидыОбразованияФизЛиц.ВысшееОбразование);
	ВысшееОбразование.Добавить(Справочники.ВидыОбразованияФизЛиц.Докторантура);
	
	
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СреднееПолноеОбщееОбразование", Справочники.ВидыОбразованияФизЛиц.СреднееПолноеОбщееОбразование);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("НачальноеПрофессиональноеОбразование", Справочники.ВидыОбразованияФизЛиц.НачальноеПрофессиональноеОбразование);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СреднееПрофессиональноеОбразование", Справочники.ВидыОбразованияФизЛиц.СреднееПрофессиональноеОбразование);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ВысшееОбразование", Справочники.ВидыОбразованияФизЛиц.ВысшееОбразование);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ПустоеОбразование", Справочники.ВидыОбразованияФизЛиц.ПустаяСсылка());
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СписокВысшегоОбразования", ВысшееОбразование);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("Адрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ФактическийАдрес", Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("АдресПрописки", Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДомашнийТелефон", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("Перемещение", Перечисления.ПричиныИзмененияСостояния.Перемещение);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("Призывник", Перечисления.ОтношениеКВоинскойОбязанности.Призывник);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности", ОбщийОтчет.ДатаКон);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_Год", Год(ОбщийОтчет.ДатаКон));
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_Месяц", Месяц(ОбщийОтчет.ДатаКон));
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_День", День(ОбщийОтчет.ДатаКон));
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ОбщийОтчет.ИмяРегистра = "-";
	ОбщийОтчет.мНазваниеОтчета = Метаданные().Синоним;
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	// структура представлений полей
	СтруктураПредставлениеПолей = Новый Структура();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Призывники.Физлицо
	|	
	|{ВЫБРАТЬ
	|	ВЫБОР КОГДА (ФИОФизЛиц.Фамилия) ЕСТЬ NULL ТОГДА Призывники.Физлицо.Наименование ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КОНЕЦ КАК ФиоПолное,
	|	Призывники.ОтношениеКВоинскомуУчету,
	|	Призывники.Годность,
	|	Призывники.Военкомат КАК Военкомат,
	|	Призывники.Организация КАК Организация,
	|	Призывники.Событие,
	|	Призывники.ДатаСобытия,
	|	Призывники.Физлицо.ДатаРождения КАК ДатаРождения,
	|	СемейноеПоложениеФизЛиц.СемейноеПоложение КАК СемейноеПоложение,
	|	ПОДСТРОКА(ФактическийАдрес.Представление, 1, 500) КАК ФактическийАдрес,
	|	ПОДСТРОКА(АдресПрописки.Представление, 1, 500) КАК АдресПрописки,
	|	ПОДСТРОКА(ДомашнийТелефон.Представление, 1, 500) КАК ДомашнийТелефон,
	|	ВЫБОР КОГДА Призывники.УровеньОбразования = 4 ТОГДА &ВысшееОбразование КОГДА Призывники.УровеньОбразования = 0 ТОГДА ""Другое образование"" ИНАЧЕ ФизическиеЛицаОбразование.ВидОбразования КОНЕЦ КАК Образование
	|}
	|	
	|ИЗ
	|	(ВЫБРАТЬ
	|		Призывники.Физлицо КАК Физлицо,
	|		Призывники.ОтношениеКВоинскомуУчету КАК ОтношениеКВоинскомуУчету,
	|		Призывники.Годность КАК Годность,
	|		Призывники.Военкомат КАК Военкомат,
	|		Призывники.Организация КАК Организация,
	|		Призывники.Событие КАК Событие,
	|		Призывники.ДатаСобытия КАК ДатаСобытия,
	|		МАКСИМУМ(ВЫБОР КОГДА ФизическиеЛицаОбразование.ВидОбразования В (&СписокВысшегоОбразования) ТОГДА 4 КОГДА ФизическиеЛицаОбразование.ВидОбразования = &СреднееПрофессиональноеОбразование ТОГДА 3 КОГДА ФизическиеЛицаОбразование.ВидОбразования = &НачальноеПрофессиональноеОбразование ТОГДА 2 КОГДА ФизическиеЛицаОбразование.ВидОбразования = &СреднееПолноеОбщееОбразование ТОГДА 1 КОГДА ФизическиеЛицаОбразование.ВидОбразования <> &ПустоеОбразование ТОГДА 1 ИНАЧЕ -1 КОНЕЦ) КАК УровеньОбразования
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|			ВоинскийУчетСрезПоследних.ОтношениеКВоинскомуУчету КАК ОтношениеКВоинскомуУчету,
	|			ВоинскийУчетСрезПоследних.Годность КАК Годность,
	|			ВоинскийУчетСрезПоследних.Военкомат КАК Военкомат,
	|			РаботникиОрганизации.ПодразделениеОрганизации.Владелец КАК Организация,
	|			РаботникиОрганизации.ПричинаИзмененияСостояния КАК Событие,
	|			ВЫБОР
	|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &Прием
	|					ТОГДА РаботникиОрганизации.Период
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|			КОНЕЦ КАК ДатаСобытия
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВоинскийУчет.СрезПоследних(&ДатаКон, ) КАК ВоинскийУчетСрезПоследних
	|				ПО РаботникиОрганизации.Сотрудник.Физлицо = ВоинскийУчетСрезПоследних.Физлицо
	|		
	|		ГДЕ
	|			РаботникиОрганизации.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|			РаботникиОрганизации.ПричинаИзмененияСостояния <> &Перемещение И
	|			ВоинскийУчетСрезПоследних.ОтношениеКВоинскойОбязанности = &Призывник И
	|			(РаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство)
	|	
	|		{ГДЕ
	|	    	Организация, Военкомат, ПричинаИзмененияСостояния КАК Событие
	|		}
	|	
	|		) КАК Призывники
	|	
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Образование КАК ФизическиеЛицаОбразование
	|			ПО Призывники.Физлицо = ФизическиеЛицаОбразование.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Призывники.Физлицо,
	|		Призывники.ОтношениеКВоинскомуУчету,
	|		Призывники.Годность,
	|		Призывники.Военкомат,
	|		Призывники.Организация,
	|		Призывники.Событие,
	|		Призывники.ДатаСобытия) КАК Призывники
	|	
	|	{	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(&ДатаКон, ) КАК СемейноеПоложениеФизЛиц
	|		ПО Призывники.Физлицо = СемейноеПоложениеФизЛиц.ФизЛицо
	|	}
	|	{	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизЛиц
	|		ПО Призывники.Физлицо = ФИОФизЛиц.ФизЛицо
	|	}
	|   {	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ФактическийАдрес
	|		ПО Призывники.Физлицо = ФактическийАдрес.Объект И (ФактическийАдрес.Тип = &Адрес И ФактическийАдрес.Вид = &ФактическийАдрес)
	|	}
	|   {	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресПрописки
	|		ПО Призывники.Физлицо = АдресПрописки.Объект И (АдресПрописки.Тип = &Адрес И АдресПрописки.Вид = &АдресПрописки)
	|	}
	|   {	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ДомашнийТелефон
	|		ПО Призывники.Физлицо = ДомашнийТелефон.Объект И (ДомашнийТелефон.Тип = &Телефон И ДомашнийТелефон.Вид = &ДомашнийТелефон)
	|	}
	|	{	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Образование КАК ФизическиеЛицаОбразование
	|		ПО Призывники.Физлицо = ФизическиеЛицаОбразование.Ссылка И Призывники.УровеньОбразования = ВЫБОР КОГДА ФизическиеЛицаОбразование.ВидОбразования В (&ВысшееОбразование) ТОГДА 4 КОГДА ФизическиеЛицаОбразование.ВидОбразования = &СреднееПрофессиональноеОбразование ТОГДА 3 КОГДА ФизическиеЛицаОбразование.ВидОбразования = &НачальноеПрофессиональноеОбразование ТОГДА 2 КОГДА ФизическиеЛицаОбразование.ВидОбразования = &СреднееПолноеОбщееОбразование ТОГДА 1 ИНАЧЕ 0 КОНЕЦ
	|	}
	|
	|{УПОРЯДОЧИТЬ ПО
	|	Призывники.Военкомат
	|}
	|
	|{ИТОГИ ПО
	|	Военкомат, Организация, Событие
	|}
	|";	
	
	ПостроительОтчета.Текст = ТекстЗапроса;							  
							  
	//представление полей запроса
	СтруктураПредставлениеПолей.Вставить("ФизЛицо",					"Работник");
	СтруктураПредставлениеПолей.Вставить("ФиоПолное",				"Работник");
	СтруктураПредставлениеПолей.Вставить("ДатаСобытия",				"Дата");
	СтруктураПредставлениеПолей.Вставить("ДатаРождения",			"Дата рождения");
	СтруктураПредставлениеПолей.Вставить("ОтношениеКВоинскомуУчету","Отношение к воинскому учету");
	СтруктураПредставлениеПолей.Вставить("СемейноеПоложение",		"Семейное положение");
	СтруктураПредставлениеПолей.Вставить("ФактическийАдрес",		"Адрес проживания");
	СтруктураПредставлениеПолей.Вставить("АдресПрописки",			"Адрес прописки");
	СтруктураПредставлениеПолей.Вставить("ДомашнийТелефон",			"Домашний телефон");
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
	// формат полей
	ОбщийОтчет.СтруктураФорматаПолей.Вставить("ДатаСобытия", "ДЛФ=DD");
	ОбщийОтчет.СтруктураФорматаПолей.Вставить("ДатаРождения", "ДЛФ=DD");
	ОбщийОтчет.СтруктураФорматаПолей.Вставить("НаличиеМобпредписания", "БЛ=Отсутствует; БИ=Присутствует");
	
	// группировки по умолчанию
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Организация");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Событие");
	
	// отборы по умолчанию
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Организация");
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	// поля по умолчанию
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	ПостроительОтчета.ВыбранныеПоля.Добавить("ДатаСобытия");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ФиоПолное");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ДатаРождения");
	ПостроительОтчета.ВыбранныеПоля.Добавить("Образование");
	
	// настройки отчета
	ОбщийОтчет.РаскрашиватьИзмерения = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Ложь;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.мРежимВводаПериода = 0; // произвольный период
	ОбщийОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()


// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ПоказыватьЗаголовок, Отчет = Неопределено) Экспорт
	
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;
	
	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры
#КонецЕсли
