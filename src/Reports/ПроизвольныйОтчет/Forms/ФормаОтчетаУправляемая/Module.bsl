&НаСервере
Процедура ПрименитьНастройку()
	
	СтруктураНастроек = Неопределено;
	
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
	Если СтруктураНастроек <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
	Иначе
		СхемаКомпоновки = Отчет.ПроизвольныйОтчет.СхемаКомпоновкиДанных.Получить();
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПроизвольныйОтчет()
	
	// Получим вид произвольного отчета
	Если Отчет.ПроизвольныйОтчет.Пустая() Тогда
		Отчет.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Отчет.ВидПроизвольногоОтчета = Отчет.ПроизвольныйОтчет.ВидПроизвольногоОтчета;
	
	URLСхемы = ПолучитьНавигационнуюСсылку(Отчет.ПроизвольныйОтчет, "СхемаКомпоновкиДанных");
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	ПрименитьНастройку();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюПользовательскихНастроек()

	Если КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Количество() = 0 Тогда
		Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;
	Иначе
		Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;
	КонецЕсли; 
	
КонецПроцедуры //

&НаКлиенте
Процедура ПроизвольныйОтчетПриИзменении(Элемент)
	
	ЗаполнитьСписокДоступныхВариантов();
	
	УстановитьПроизвольныйОтчет();
	
	УправлениеВидимостьюПользовательскихНастроек();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ
//

&НаКлиенте
Процедура ЗаполнитьСписокДоступныхВариантов()
	Если Отчет.ПроизвольныйОтчет.Пустая() Тогда
		Элементы.СохраненнаяНастройка.СписокВыбора.Очистить();
		Возврат;
	КонецЕсли; 
	
	СписокДоступныхВариантов = ТиповыеОтчеты.ПолучитьСписокДоступныхВариантов(Отчет.ПроизвольныйОтчет);
	Элементы.СохраненнаяНастройка.СписокВыбора.ЗагрузитьЗначения(СписокДоступныхВариантов.ВыгрузитьЗначения());
	
	// Установим первый доступный вариант отчета, если он не заполнен
	Если СохраненнаяНастройка.Пустая() 
		И СписокДоступныхВариантов.Количество() <> 0 Тогда
		
		СохраненнаяНастройка = СписокДоступныхВариантов.Получить(0).Значение;
		ПрименитьНастройку();
	КонецЕсли; 
	
	Если СписокДоступныхВариантов.Количество() <> 0 Тогда
		Элементы.СохраненнаяНастройка.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.СохраненнаяНастройка.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СохраненнаяНастройка.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 
		
КонецПроцедуры //
 
&НаСервере
Процедура ОбновитьОтчет()
	
	Перем ДанныеРасшифровки;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Вычислим и установим при необходимости период
	Если Отчет.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности
		ИЛИ Отчет.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт 
		ИЛИ Отчет.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		
		ПроцедурыПроизвольныхОтчетов.ВычислитьПериодФормированияПоказателяМонитораЭффективности(Настройки.ПараметрыДанных);

	КонецЕсли; 
	
	СхемаОтчета = Отчет.ПроизвольныйОтчет.СхемаКомпоновкиДанных.Получить();
	
	КомпоновщикНастроек.Восстановить();
	
	Попытка
		
	// Получим данные источников данных (для наборов данных - объект)
	ВнешниеНаборыДанных = ПроцедурыПроизвольныхОтчетов.ПолучитьДанныеИсточников(Отчет.ПроизвольныйОтчет.ИсточникиДанных, Отчет.ПроизвольныйОтчет.ПараметрыИсточниковДанных, Настройки, СхемаОтчета);
	Если ВнешниеНаборыДанных = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаОтчета, Настройки, ДанныеРасшифровки);
	
	//Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных.Количество() = 0 Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	КонецЕсли;
	
	//Очистим табличный документ - результат
	Результат.Очистить();
	
	//Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	//Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	
	//Основной цикл вывода отчета
	Пока Истина Цикл
		
		//Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		
		Если ЭлементРезультата = Неопределено Тогда
			//Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
			
		Иначе
			//Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
			
	//Обозначем завершение вывода
	ПроцессорВывода.ЗакончитьВывод();
	
	Исключение
	Сообщение = Новый СообщениеПользователю;
	ИнформацияОбИсключении = ИнформацияОбОшибке();
	Сообщение.Текст = "Отчет не сформирован!" + Символы.ПС + ТиповыеОтчеты.ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбИсключении);
	Сообщение.Сообщить();
	КонецПопытки;
	
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАСШИФРОВКА ОТЧЕТА
//

&НаСервере
Процедура ВыполнитьРасшифровку(Расшифровка, ДанныеРасшифровки, ПрименяемыеНастройки)

	Источник  = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Обработка = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Источник);
	
	Настройки = Обработка.ПрименитьНастройки(Расшифровка, ПрименяемыеНастройки);
	
	Если ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
		
	ИначеЕсли ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДНАЯ ПАНЕЛЬ ФОРМЫ
//

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОбновитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура СохраненнаяНастройкаПриИзменении(Элемент)
	
	ПрименитьНастройку();
	УправлениеВидимостьюПользовательскихНастроек();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ФОРМА
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.СохраненнаяНастройка.Пустая() Тогда
		СохраненнаяНастройка = Параметры.СохраненнаяНастройка;
	КонецЕсли; 
	
	Если НЕ Параметры.ПроизвольныйОтчет.Пустая() Тогда
		Отчет.ПроизвольныйОтчет = Параметры.ПроизвольныйОтчет;
		УстановитьПроизвольныйОтчет();
	КонецЕсли; 
	
	ФормироватьПриОткрытии = Параметры.ФормироватьПриОткрытии;
	
	Если Параметры.ПараметрОбработкиРашифровки.Данные <> "" Тогда
		// Обработка расшифровки
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Параметры.ПараметрОбработкиРашифровки.Данные);
		ВыполнитьРасшифровку(Параметры.ПараметрОбработкиРашифровки.Идентификатор, ДанныеРасшифровки, Параметры.ПараметрОбработкиРашифровки.ПрименяемыеНастройки);
	КонецЕсли;
	
	Если Параметры.ЗначенияПараметров.Количество() <> 0 Тогда
		// Заполним значения параметров компоновки
		Для каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли; 
			Для каждого ЗначениеПараметра Из Параметры.ЗначенияПараметров Цикл
				Если ЭлементНастройки.Параметр = Новый ПараметрКомпоновкиДанных(ЗначениеПараметра.Представление) Тогда
					ЭлементНастройки.Значение = ЗначениеПараметра.Значение;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если Параметры.ФормироватьПриОткрытии Тогда
		ОбновитьОтчет();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСписокДоступныхВариантов();
	УправлениеВидимостьюПользовательскихНастроек();
	
	Если ФормироватьПриОткрытии Тогда
		ОбновитьОтчет();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
    Перем ДействиеРасшифровки;
    Перем ПараметрДействияРасшифровки;
	
	
	СтандартнаяОбработка = Ложь;
	
	Если URLСхемы <> "" Тогда
		
		Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
		Обработка = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, Источник);
		Обработка.ВыбратьДействие(Расшифровка, ДействиеРасшифровки, ПараметрДействияРасшифровки);
		
		Если ДействиеРасшифровки = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать
			ИЛИ ДействиеРасшифровки = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать Тогда
			
			// Открываем в новом окне
			Описание = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, Расшифровка, ПараметрДействияРасшифровки);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ПараметрОбработкиРашифровки", Описание);
			СтруктураПараметров.Вставить("ПроизвольныйОтчет",           Отчет.ПроизвольныйОтчет);
			СтруктураПараметров.Вставить("СохраненнаяНастройка",        СохраненнаяНастройка);
			СтруктураПараметров.Вставить("ФормироватьПриОткрытии",      Истина);
			
			ОткрытьФорму("Отчет.ПроизвольныйОтчет.ФормаОбъекта", СтруктураПараметров);
			
		ИначеЕсли ДействиеРасшифровки = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			
			ОткрытьЗначение(ПараметрДействияРасшифровки);
			
		ИначеЕсли ДействиеРасшифровки <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
			
			ВыполнитьРасшифровку(Расшифровка, АдресДанныхРасшифровки, ПараметрДействияРасшифровки);
			ОбновитьОтчет();
			
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Элементы.СохраненнаяНастройка.СписокВыбора.Количество() <> 0 Тогда
		ПроверяемыеРеквизиты.Добавить("СохраненнаяНастройка");
	КонецЕсли;
	
КонецПроцедуры
