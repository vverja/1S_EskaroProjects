////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем НачисленияУдержания                        Экспорт; // Таблица значений - внешний источник данных
Перем СохраненнаяНастройка                       Экспорт;            
Перем СписокПолейОтбора                          Экспорт; // Список названий поле схемы компоновки по которым можно устанавливать отбор
Перем ЭлементНастройкиРасчетногоЛистка           Экспорт; // Элемент структуры настройки схемы компоновки данных
Перем ТекстЗапроса                               Экспорт;
Перем ИмяМакетаНачало;
Перем ИмяМакетаКонец;
Перем НастройкаШириныКолонокРасчетногоЛистка     Экспорт;
Перем НастройкаРазмТекстаКолонокРасчетногоЛистка Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

#Если Клиент тогда
	
// Для настройки отчета (расшифровка и др.)
//
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

// Инициализация отчета
//
// Параметры:
//  Нет.
//
Процедура ИнициализацияОтчета() Экспорт
	
КонецПроцедуры //ИнициализацияОтчета()

// Заполняет отборы и параметры схемы копоновки
//
Функция НастроитьОтборыПарметры(Отбор = Неопределено, Параметры = Неопределено) Экспорт
	
	Если Отбор = Неопределено И Параметры = Неопределено тогда
		Возврат ложь;
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Если ТипЗнч(Отбор) = Тип("Массив") тогда
		
		Для каждого ЭлементОтбора из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("Структура") тогда
				
				ЛевоеЗначение    = Неопределено;
				ВидСравненияКомп = Неопределено;
				ПравоеЗначение   = Неопределено;
				
				Если НЕ ЭлементОтбора.Свойство("ЛевоеЗначение", ЛевоеЗначение) тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ЭлементОтбора.Свойство("ВидСравнения", ВидСравненияКомп) тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ЭлементОтбора.Свойство("ПравоеЗначение", ПравоеЗначение) тогда
					Возврат ложь;
				КонецЕсли;
				
				ПолеОтбора = Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Строка(ЛевоеЗначение)));
				
				Если ПолеОтбора = Неопределено тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ТипЗнч(ВидСравненияКомп) = Тип("ВидСравненияКомпоновкиДанных") тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ПолеОтбора.Тип.СодержитТип(ТипЗнч(ПравоеЗначение))   тогда
					Возврат ложь;
				КонецЕсли;
				
				ЭлементОтбораКомпоновки = Неопределено;
				
				Для каждого ЭлементОтбораКомп из Настройки.Отбор.Элементы Цикл
					Если ЭлементОтбораКомп.ЛевоеЗначение = ПолеОтбора.Поле тогда
						ЭлементОтбораКомпоновки = ЭлементОтбораКомп;
					КонецЕсли;
				КонецЦикла;
				
				Если ЭлементОтбораКомпоновки = Неопределено тогда
					ЭлементОтбораКомпоновки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				КонецЕсли;
				
				ЭлементОтбораКомпоновки.ЛевоеЗначение  = ПолеОтбора.Поле;
				ЭлементОтбораКомпоновки.ВидСравнения   = ВидСравненияКомп;
				ЭлементОтбораКомпоновки.ПравоеЗначение = ПравоеЗначение;
				ЭлементОтбораКомпоновки.Использование  = истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("Массив") тогда
		
		Для каждого ЭлементПараметра из Параметры Цикл
			Если ТипЗнч(ЭлементПараметра) = Тип("Структура") тогда
				
				Параметр = Неопределено;
				Значение = Неопределено;
				
				Если НЕ ЭлементПараметра.Свойство("Параметр", Параметр) тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ЭлементПараметра.Свойство("Значение", Значение) тогда
					Возврат ложь;
				КонецЕсли;
				
				ПараметрКомпоновки = Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных(Строка(Параметр)));
				
				Если ПараметрКомпоновки = Неопределено тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ПараметрКомпоновки.Тип.СодержитТип(ТипЗнч(Значение)) тогда
					Возврат ложь;
				КонецЕсли;
				
				ЗначениеПараметра               = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Строка(Параметр)));
				ЗначениеПараметра.Значение      = Значение;
				ЗначениеПараметра.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат истина;
	
 КонецФункции
	
// Удаление элементов структуры настройки	
//	
Процедура УдалитьГруппировку()
	
	ЗапомнитьНастройкуРасчетногоЛистка();
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Если Настройки.Структура.Количество() <> 0 тогда
		Настройки.Структура.Удалить(Настройки.Структура[0]);
	КОнецЕсли;
	
	ВосстановитьНастройкуРасчетногоЛистка();
	
КонецПроцедуры

	
// Формирование отчета в табличный документ "Результат"
//
// Параметры:
//   Результат         – табличный документ, в который помещается результат вывода расчетных листков.
//	 ДанныеРасшифровки - данные расшифровки компоновки данных
//
Процедура СформироватьОтчет(Результат, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = ложь, ВыводитьПоСтраницам = ложь) Экспорт
	
	// Получить настройки схемы компоновки данных
	Настройки = КомпоновщикНастроек.Настройки;
	
	Если ДанныеРасшифровки = Неопределено тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;

	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Группировать"));
	
	Если ЗначениеПараметра.Использование и НЕ ЗначениеПараметра.Значение тогда
		УдалитьГруппировку();
	КонецЕсли;
	
	// Установим параметры настройки отчета
	ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	НачалоПериода     = ЗначениеПараметра.Значение;
	
	ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	КонецПериода      = ЗначениеПараметра.Значение;
	
	ЗначениеПараметра   = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидРасчетногоЛистка"));
	ВидРасчетногоЛистка = ЗначениеПараметра.Значение;
	
	// установим параметры и текст запроса построителя запроса
	ПостроительОтчетов = Новый ПостроительОтчета;
	
	НастроитьПостроительЗапросов(ПостроительОтчетов, ВидРасчетногоЛистка);
	
	ГруппаОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.Элементы.Найти("ВидДвижения").Поле;
	ЭлементОтбора.ПравоеЗначение = "1";
    
    ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.Элементы.Найти("СуммаУпрНачальныйОстаток").Поле;
    ЭлементОтбора.ПравоеЗначение = 0;

	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.Элементы.Найти("СуммаУпрКонечныйОстаток").Поле;
    ЭлементОтбора.ПравоеЗначение = 0;
	
	ЗначениеОтбораСотрудника = Неопределено;
	ЕстьОтборПоФизЛицу = ложь;
	ПолеСотрудник = Новый ПолеКомпоновкиДанных("Сотрудник");
	
	Для каждого ЭлементОтбора из Настройки.Отбор.Элементы Цикл
		
		// если отбор установлен по сотруднику
		Если ЭлементОтбора.Использование  И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = ПолеСотрудник тогда
			Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
				ЗначениеОтбораСотрудника = ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
		
		//если отбор установлен по физлицу
		Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = СписокПолейОтбора.Получить(0).Значение тогда
			Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
				ЕстьОтборПоФизЛицу = истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьОтборПоФизЛицу И ЗначениеОтбораСотрудника <> Неопределено тогда
		
		ОтборПоФизЛицу                = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПоФизЛицу.ВидСравнения   = ЗначениеОтбораСотрудника.ВидСравнения;
		ОтборПоФизЛицу.Использование  = Истина;
		ОтборПоФизЛицу.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ФизЛицо")).Поле;
		
		Если ТипЗнч(ЗначениеОтбораСотрудника.ПравоеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") тогда
			ОтборПоФизЛицу.ПравоеЗначение = ЗначениеОтбораСотрудника.ПравоеЗначение.Физлицо;
		ИначеЕсли ТипЗнч(ЗначениеОтбораСотрудника.ПравоеЗначение) = Тип("СписокЗначений") тогда
			
			СписокЗначенийОтбораФизЛиц = Новый СписокЗначений;
			
			Для каждого ЭлементСписка из ЗначениеОтбораСотрудника.ПравоеЗначение Цикл
				Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") тогда
					СписокЗначенийОтбораФизЛиц.Добавить(ЭлементСписка.Значение.ФизЛицо);
				КонецЕсли;
			КонецЦикла;
			
			ОтборПоФизЛицу.ПравоеЗначение = СписокЗначенийОтбораФизЛиц;
			
		Иначе
			
			Настройки.Отбор.Элементы.Удалить(ОтборПоФизЛицу);
			
		КонецЕсли;
	КонецЕсли;
	
	
	// установим отборы в построителе запросов 
	Для каждого ЭлементОтбора из Настройки.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И СписокПолейОтбора.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение)<>Неопределено тогда
			
			ВидСравненияОтбора = Неопределено;
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно тогда
				ВидСравненияОтбора = ВидСравнения.Равно;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке тогда
				ВидСравненияОтбора = ВидСравнения.ВСписке;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно тогда
				ВидСравненияОтбора = ВидСравнения.НеРавно;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии тогда
				ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии тогда
				ВидСравненияОтбора = ВидСравнения.ВИерархии;
			КонецЕсли;
			Если ВидСравненияОтбора <> Неопределено тогда 
				Имя = Строка(ЭлементОтбора.ЛевоеЗначение);
				ПостроительОтчетов.Отбор.Добавить(Имя);
				ПостроительОтчетов.Отбор[Имя].ВидСравнения  = ВидСравненияОтбора;
				Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
					ПостроительОтчетов.Отбор[Имя].Значение      = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
				ПостроительОтчетов.Отбор[Имя].Использование = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	
	Для каждого МакетГруппировки из СхемаКомпоновкиДанных.МакетыГруппировок Цикл
		Если МакетГруппировки.ИмяГруппировки = "СтрокаНачисленийУдержаний" тогда
			ИмяМакетаСтрокиНачисления = МакетГруппировки.Макет;
		КонецЕсли;
	КонецЦикла;
	
	МакетСтрокиНачисления     = СхемаКомпоновкиДанных.Макеты.Найти(ИмяМакетаСтрокиНачисления);
	
	
	СотрудникМесяц = Новый ПараметрКомпоновкиДанных("СотрудникМесяц");
	
	ЯчейкиСтрокиНачисленийУдержаний = МакетСтрокиНачисления.Макет[0].Ячейки;
	Для сч = 0 по 14 Цикл
		ЯчейкиСтрокиНачисленийУдержаний[Сч].Оформление.Элементы.Найти("Details").Значение = СотрудникМесяц;
	КонецЦикла;

	
	// заполним ТЗ "НачисленияУдержания"
	ЗаполнитьВнешнийИсточникДанных(ВидРасчетногоЛистка, ПостроительОтчетов);
	
	
	// создадим структуру с внешним набором данных
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("НачисленияУдержания", НачисленияУдержания);
	
	// получим макет компоновки данных
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	Для каждого Макет из МакетКомпоновки.Макеты Цикл
		
		Если Макет.Макет[0].Ячейки[0].Элементы.Количество() <> 0 И Макет.Макет[0].Ячейки[0].Элементы[0].Значение = "началоОбл" тогда 
			ИмяМакетаНачало = Макет.Имя;
		КонецЕсли;
		
		Если Макет.Макет.Количество()= 2 И Макет.Макет[1].Ячейки[0].Элементы.Количество() <> 0 И  Макет.Макет[1].Ячейки[0].Элементы[0].Значение = "конец" тогда 
			ИмяМакетаКонец = Макет.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
	// создадим и инициализируем процессор компоновки данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	// очистим результирующий табличный документ
	//Результат.АвтоМасштаб = Истина;
	Результат.Очистить();
	
	Если ВыводВФормуОтчета тогда
		ВыводЗаголовкаОтчета(Результат);
	КонецЕсли;
	
	// выведем отчет в табличный документ "Результат"
	ВывестиРезультатВТабличныйДокумент(ПроцессорКомпоновки, Результат, ВыводитьПоСтраницам);
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// удалим отбор пустых строк начислений
	Настройки.Отбор.Элементы.Удалить(ГруппаОтбора);
	Если ОтборПоФизЛицу <> Неопределено тогда
		Настройки.Отбор.Элементы.Удалить(ОтборПоФизЛицу);
	КонецЕсли;

	
	Если ВыводВФормуОтчета тогда
		ТиповыеОтчеты.УправлениеОтображениемЗаголовкаТиповогоОтчета(ЭтотОбъект, Результат);
	КонецЕсли;

   	Результат.Область(1, 1, 1, 1).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;

КонецПроцедуры

// Вывод заголовка отчета
//
Процедура ВыводЗаголовкаОтчета(Результат, ВыводВФормуОтчета = Истина) Экспорт
	
	Если РасширеннаяНастройка Тогда
		Возврат;                                           
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput"));
	ВыводитьЗаголовок = (ЗначениеПараметра.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить И ЗначениеПараметра.Использование);
	
	Если Не ВыводВФормуОтчета И Не ВыводитьЗаголовок Тогда
		Возврат;
	КонецЕсли;

	
	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокТиповогоОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	ЗаголовокОтчета = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title")).Значение;
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ЗаголовокОтчета;
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

// Восстановление настройки печати табличного документа.
//
// Параметры:
//   ТабличныйДокумент – табличный документ.
//
Процедура ВосстановитьНастройкуТабличногоДокумента(ТабличныйДокумент) Экспорт
	
	Перем СтруктураПараметров;
	
	СтруктураПараметров = ВосстановитьЗначение("ПАРАМЕТРЫ_ПЕЧАТИ_РасчетногоЛистка");
	
	Если СтруктураПараметров = Неопределено тогда
		СтруктураПараметров = Новый Структура("ПолеСверху, ПолеСлева, ПолеСправа, ПолеСнизу, МасштабПечати, АвтоМасштаб");
		СтруктураПараметров.ПолеСверху    = 10;
		СтруктураПараметров.ПолеСлева     = 20;
		СтруктураПараметров.ПолеСправа    = 10;
		СтруктураПараметров.ПолеСнизу     = 10;
		СтруктураПараметров.МасштабПечати = 100;
		СтруктураПараметров.АвтоМасштаб   = истина;
	КонецЕсли;
	
	ТабличныйДокумент.ПолеСверху    = СтруктураПараметров.ПолеСверху;
	ТабличныйДокумент.ПолеСлева     = СтруктураПараметров.ПолеСлева;
	ТабличныйДокумент.ПолеСправа    = СтруктураПараметров.ПолеСправа;
	ТабличныйДокумент.ПолеСнизу     = СтруктураПараметров.ПолеСнизу;
	ТабличныйДокумент.МасштабПечати = ?(СтруктураПараметров.МасштабПечати = Неопределено, 100, СтруктураПараметров.МасштабПечати);
	ТабличныйДокумент.АвтоМасштаб   = СтруктураПараметров.АвтоМасштаб;

	
КонецПроцедуры

// Сохранение настроек печати табличного документа
//
// Параметры:
//   ТабличныйДокумент – табличный документ.
//
Процедура СохранитьНастройкуТабличногоДокумента(ТабличныйДокумент) Экспорт
	
	СтруктураПараметров = Новый Структура("ПолеСверху, ПолеСлева, ПолеСправа, ПолеСнизу, МасштабПечати, АвтоМасштаб");
	
	СтруктураПараметров.ПолеСверху    = ТабличныйДокумент.ПолеСверху;
	СтруктураПараметров.ПолеСлева     = ТабличныйДокумент.ПолеСлева;
	СтруктураПараметров.ПолеСправа    = ТабличныйДокумент.ПолеСправа;
	СтруктураПараметров.ПолеСнизу     = ТабличныйДокумент.ПолеСнизу;
	СтруктураПараметров.МасштабПечати = ТабличныйДокумент.МасштабПечати;
	СтруктураПараметров.АвтоМасштаб   = ТабличныйДокумент.АвтоМасштаб;
	
	СохранитьЗначение("ПАРАМЕТРЫ_ПЕЧАТИ_РасчетногоЛистка", СтруктураПараметров);
	
КонецПроцедуры	
	
// Вывод результата компоновки в табличный документ
//
Процедура ВывестиРезультатВТабличныйДокумент(ПроцессорКомпоновкиДанных, ТабличныйДокумент, ВыводитьПоСтраницам) Экспорт
	
	// Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);

	// Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	Состояние(НСТР("ru='Если Вы хотите прервать вывод отчета, нажмите Ctrl+Break'"));
	
	// Основной цикл вывода отчета
	Пока Истина Цикл

		// Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		
		Если ЭлементРезультата = Неопределено Тогда
			
			// Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
			
		Иначе
			
			// Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();

	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
	Если ВыводитьПоСтраницам тогда
		РазбитьТабличныйДокументПоСтраницам(ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры
	
// Разбивает табличный документ по страницам
//
// Параметры:
//  ТабличныйДокумент - ссылка на табличный документ.
//
Процедура РазбитьТабличныйДокументПоСтраницам(ТабличныйДокумент)
	
	Состояние(НСТР("ru='Разбиение отчета по страницам ...  (Если Вы хотите прервать вывод отчета, нажмите Ctrl+Break)'"));
	
	ТабличныйДокументДляПроверки = Новый ТабличныйДокумент;
	ТабличныйДокументДляПроверки.Очистить();
	
	Для сч = 0 по НастройкаШириныКолонокРасчетногоЛистка.ВГраница() Цикл
		ОбластьКолонкиРЛ                  = ТабличныйДокументДляПроверки.Область(, сч+1, , сч+1);
		ОбластьКолонкиРЛ.ШиринаКолонки    = НастройкаШириныКолонокРасчетногоЛистка[сч];
		ОбластьКолонкиРЛ.РазмещениеТекста = ПолучитьТипРазмещенияТекста(НастройкаРазмТекстаКолонокРасчетногоЛистка[сч]);
	КонецЦикла;
	
	Для сч = 0 по НастройкаШириныКолонокРасчетногоЛистка.ВГраница() Цикл
		ОбластьКолонкиРЛ                  = ТабличныйДокумент.Область(, сч+1, , сч+1);
		ОбластьКолонкиРЛ.ШиринаКолонки    = НастройкаШириныКолонокРасчетногоЛистка[сч];
		ОбластьКолонкиРЛ.РазмещениеТекста = ПолучитьТипРазмещенияТекста(НастройкаРазмТекстаКолонокРасчетногоЛистка[сч]);
	КонецЦикла;

	ТабличныйДокументДляПроверки.АвтоМасштаб = Истина;

	
	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст("Расчетный листок");
	
	Если ОбластьПервойЯчейки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	НомерСтрокиНачалаРЛ = ОбластьПервойЯчейки.Верх;
	НомерСтрокиНачалаРЛ = НомерСтрокиНачалаРЛ - 1;
	
	ОбластьГруппировки = ТабличныйДокумент.Область(1, , НомерСтрокиНачалаРЛ - 2, );
	ОбластьПриемник    = ТабличныйДокументДляПроверки.Область(1, , НомерСтрокиНачалаРЛ - 2, );
	ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьГруппировки, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	ОбластьПоследнейЯчейки = ТабличныйДокумент.НайтиТекст("Долг за ");
	НомерСтрокиКонцаРЛ     = ОбластьПоследнейЯчейки.Верх + 1;
	
	ОбластьРЛ = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиКонцаРЛ, );
	ОбластьПриемник = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы+1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (НомерСтрокиКонцаРЛ - НомерСтрокиНачалаРЛ)+1, );
	ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьРЛ, ОбластьПриемник, , истина);
	
	ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст("Расчетный листок", ОбластьСлед);
	
	Пока ОбластьПервойЯчейки <> Неопределено Цикл
		
		Если ОбластьПервойЯчейки.Верх - НомерСтрокиКонцаРЛ > 2 тогда
		
			ОбластьГруппировки = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ + 1, , ОбластьПервойЯчейки.Верх - 1, );
			ОбластьПриемник    = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы + 1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (ОбластьПервойЯчейки.Верх - НомерСтрокиКонцаРЛ - 2) + 1, );
			ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьГруппировки, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
		КонецЕсли;
		
		НомерСтрокиНачалаРЛ    = ОбластьПервойЯчейки.Верх - 1;
		
		ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиНачалаРЛ, );
		ОбластьПоследнейЯчейки = ТабличныйДокумент.НайтиТекст("Долг за ", ОбластьСлед);
		НомерСтрокиКонцаРЛ     = ОбластьПоследнейЯчейки.Верх + 1;
		
		ОбластьРЛ = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиКонцаРЛ, );
		ОбластьПриемник = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы + 1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (НомерСтрокиКонцаРЛ - НомерСтрокиНачалаРЛ) + 1, );
		ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьРЛ, ОбластьПриемник, , истина);
		
		Если ТабличныйДокументДляПроверки.КоличествоСтраниц() > 1 тогда
			
			ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиНачалаРЛ,).НачалоСтраницы = истина;
			ТабличныйДокументДляПроверки.Очистить();
									   
			ОбластьПриемник = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы + 1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (НомерСтрокиКонцаРЛ - НомерСтрокиНачалаРЛ) + 1, );
			ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьРЛ, ОбластьПриемник, , истина);
			
		КонецЕсли;
		
		ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
		ОбластьПервойЯчейки    = ТабличныйДокумент.НайтиТекст("Расчетный листок", ОбластьСлед);
			
		ОбработкаПрерыванияПользователя();
	
	КонецЦикла;
	
КонецПроцедуры


// Возвращает тип размещения текста в табличном документе
//
// Параметры:
//    Тип Размещения -  тип размещения текста в макете компоновки данных
//
Функция ПолучитьТипРазмещенияТекста(ТипРазмещения) Экспорт
	
	Если ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Выступать тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Авто;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Забивать тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Забивать;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Обрезать тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Переносить тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	КонецЕсли;
	
КонецФункции

// Заполняет таблицу значений "НачисленияУдержания" (внешний источник данных).
//
Процедура ЗаполнитьВнешнийИсточникДанных(ВидРасчетногоЛистка, ПостроительОтчетов) Экспорт 
	
	// Выполнить запрос 
 	ПостроительОтчетов.Выполнить();
	
	// Получим таблицу результатов запроса
	ТаблицаРезультатаЗапроса = ПостроительОтчетов.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	СведенияОВидахРасчета     = Новый Соответствие;
	
	// Сформировать таблицу значений
	НачисленияУдержания.Очистить();
	
	// Если вид расчетного листка подробный сформируем выборку с фактическими периодами действия начислений
	Если ВидРасчетногоЛистка = "Подробно" тогда
		
		Запрос = Новый Запрос;
		
		ФПДУсловиеТекст = 
		"ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации";
		
		Для каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			
			Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И Строка(ЭлементОтбора.ЛевоеЗначение) = "Организация" Тогда
				
				Запрос.УстановитьПараметр("Организация", ЭлементОтбора.ПравоеЗначение);
				              
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ВидСравненияОрганизацииСтрокой = "=" 
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
					ВидСравненияОрганизацииСтрокой = "<>"
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					ВидСравненияОрганизацииСтрокой = "В"
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ 
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					ВидСравненияОрганизацииСтрокой = "В ИЕРАРХИИ"
				КонецЕсли; 
				
				ФПДУсловиеТекст = ФПДУсловиеТекст + " И Организация " + ВидСравненияОрганизацииСтрокой + " (&Организация)";
			КонецЕсли;  
			
			
			Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И Строка(ЭлементОтбора.ЛевоеЗначение) = "ФизЛицо" Тогда
				
				Запрос.УстановитьПараметр("РаботникиОрганизации", ЭлементОтбора.ПравоеЗначение);
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ВидСравненияРаботник = "=" 
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
					ВидСравненияРаботник = "<>"
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					ВидСравненияРаботник = "В"
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ 
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					ВидСравненияРаботник = "В ИЕРАРХИИ"
				КонецЕсли; 
				
				ФПДУсловиеТекст = ФПДУсловиеТекст + " И ФизЛицо " + ВидСравненияРаботник + " (&РаботникиОрганизации)";
			КонецЕсли; 
		КонецЦикла;
		
		НачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода")).Значение;
		КонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода")).Значение;

		
		Запрос.УстановитьПараметр("ПериодРегистрации", 	  	 НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецПериода);
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФактическийПериод.Регистратор КАК Регистратор,
		|	ФактическийПериод.НомерСтроки КАК НомерСтроки,
		|	ФактическийПериод.ПериодДействияНачало,
		|	ФактическийПериод.ПериодДействияКонец
		|ИЗ
		|	РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(" + ФПДУсловиеТекст + ") КАК ФактическийПериод
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	НомерСтроки,
		|	ПериодДействияНачало";
		
		Запрос.Текст = ТекстЗапроса;
		ВыборкаПоФПД = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
	
	// Заполним таблицу значений
	
	Для каждого СтрокаПериодаРегистрации из ТаблицаРезультатаЗапроса.Строки Цикл
		Для каждого СтрокаФизЛицо из СтрокаПериодаРегистрации.Строки Цикл
			
			// Получим таблицы значений по каждой из частей расчетного листка
			Начисления              = СтрокаФизЛицо.Строки.Найти("Начислено", "ВидДвижения");
			Удержания               = СтрокаФизЛицо.Строки.Найти("Удержано", "ВидДвижения");
			СальдоНачальное        	= СтрокаФизЛицо.Строки.Найти("Сальдо начальное", "ВидДвижения");
			СальдоКонечное        	= СтрокаФизЛицо.Строки.Найти("Сальдо конечное", "ВидДвижения");
			
			Если СальдоКонечное <>  Неопределено И СальдоКонечное.Строки.Количество() > 0 тогда
				СальдоКон = СальдоКонечное.Строки[0].Результат;
			Иначе
				СальдоКон = 0;
			КонецЕсли;
			
			Если СальдоНачальное <>  Неопределено И СальдоНачальное.Строки.Количество() > 0 тогда
				СальдоНач = СальдоНачальное.Строки[0].Результат;
			Иначе
				СальдоНач = 0;
			КонецЕсли;
			
			
			// Определим максимальное количество строк из таблиц начислений и удержания
			КолВоСтрокНачислений = ?(Начисления <> Неопределено, Начисления.Строки.Количество(), 0)- 1;
			КолВоСтрокУдержаний  = ?(Удержания <> Неопределено, Удержания.Строки.Количество(), 0) - 1; 
			МаксКолвоСтрок = Макс(КолВоСтрокНачислений, КолВоСтрокУдержаний); 
			
			Если МаксКолвоСтрок = -1 тогда
				СтрокаНачисленияУдержания                            = НачисленияУдержания.Добавить();
				СтрокаНачисленияУдержания.ВидДвижения                = "3";
				СтрокаНачисленияУдержания.ПризнакУпорядочиванияСтрок = 0;
				СтрокаНачисленияУдержания.ФизЛицо           = СтрокаФизЛицо.ФизЛицо;
				СтрокаНачисленияУдержания.ПериодРегистрации = СтрокаФизЛицо.ПериодРегистрации;
				СтрокаНачисленияУдержания.СуммаУпрНачальныйОстаток   = СальдоНач;
				СтрокаНачисленияУдержания.СуммаУпрКонечныйОстаток    = СальдоКон;
			КонецЕсли;

			
			// Перенесем таблицы начисления  значений в таблицу внешнего источника данных 
			Сч = 0;
			
			Пока Сч <= МаксКолвоСтрок Цикл
				
				НомерСтрокиНачисления = 0;
				РегистраторНачисления = "";
				
				// Добавим строку и заполним значений колонок
				СтрокаНачисленияУдержания                            = НачисленияУдержания.Добавить();
				СтрокаНачисленияУдержания.ВидДвижения                = "1";
				СтрокаНачисленияУдержания.ПризнакУпорядочиванияСтрок = Сч;
				СтрокаНачисленияУдержания.СуммаУпрНачальныйОстаток   = СальдоНач;
				СтрокаНачисленияУдержания.СуммаУпрКонечныйОстаток    = СальдоКон;
		
				
				Если Сч <= КолВоСтрокНачислений тогда
					СтрокаНачисленияУдержания.ФизЛицо                              = Начисления.Строки[Сч].ФизЛицо;
					СтрокаНачисленияУдержания.ПериодРегистрации                    = Начисления.Строки[Сч].ПериодРегистрации;
					
					// Если вид расчетного листка подробный, то добавим к начислению периоды действия и показатели
					Если ВидРасчетногоЛистка = "Подробно" И ТипЗнч(Начисления.Строки[Сч].ВидРасчета) = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") тогда
						
						ВидРасчета = Начисления.Строки[Сч].ВидРасчета;
						
						ИмяВР = Строка(ВидРасчета);
						
						НомерСтрокиНачисления = Начисления.Строки[Сч].НомерСтроки;
						РегистраторНачисления = Начисления.Строки[Сч].Регистратор;
						НачалоПериодаДействия = Начисления.Строки[Сч].ПериодДействияНачало;
						КонецПериодаДействия  = Начисления.Строки[Сч].ПериодДействияКонец;
						СчДобавленныхСтрок = 1;
						СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);
						ПервыйРаз = истина;
						
						Для СчПоказатель = 1 по 4 Цикл
							Если СведенияОВидеРасчета["Показатель"+СчПоказатель+"Видимость"] И СведенияОВидеРасчета["Показатель" + СчПоказатель + "Наименование"] <> Null тогда
								Если ПервыйРаз тогда
									ИмяВР     = ИмяВР + " показатели:";
									ПервыйРаз = ложь;
								КонецЕсли;
								ИмяВР = ИмяВР + Символы.ПС + "  " + СведенияОВидеРасчета["Показатель" + СчПоказатель + "Наименование"] + " - " + Начисления.Строки[Сч]["Показатель"+СчПоказатель];
							КонецЕсли;
						КонецЦикла;
						СтрокаНачисленияУдержания.НачисленияУдержанияВидНачисления = ИмяВР;
						
						ВыборкаПоФПД.Сбросить();
						
						Если ВыборкаПоФПД.НайтиСледующий(Новый Структура("Регистратор, НомерСтроки", РегистраторНачисления, НомерСтрокиНачисления)) Тогда
							Если (ВыборкаПоФПД.ПериодДействияНачало <> НачалоПериодаДействия) или (ВыборкаПоФПД.ПериодДействияКонец <> КонецПериодаДействия) Тогда
								
								СтрокаНачислений                      = Начисления.Строки.Вставить(Сч+СчДобавленныхСтрок);
								СтрокаНачислений.ВидРасчета           = "  оплачены периоды:";
								СтрокаНачислений.ФизЛицо              = Начисления.Строки[Сч].ФизЛицо;
								СтрокаНачислений.ПериодРегистрации    = Начисления.Строки[Сч].ПериодРегистрации;
								СтрокаНачислений.ПериодДействияНачало = ВыборкаПоФПД.ПериодДействияНачало;
								СтрокаНачислений.ПериодДействияКонец  = ВыборкаПоФПД.ПериодДействияКонец;
								КолВоСтрокНачислений                  = КолВоСтрокНачислений + 1;
								МаксКолвоСтрок                      = МаксКолвоСтрок + 1;
								СчДобавленныхСтрок                    = СчДобавленныхСтрок + 1;
								
								Пока ВыборкаПоФПД.Следующий() Цикл
									
									Если ВыборкаПоФПД.НомерСтроки <> НомерСтрокиНачисления или ВыборкаПоФПД.Регистратор <> РегистраторНачисления Тогда
										Прервать;
									КонецЕсли;
									
									СтрокаНачислений                      = Начисления.Строки.Вставить(Сч+СчДобавленныхСтрок);
									СтрокаНачислений.ВидРасчета           = "";
									СтрокаНачислений.ФизЛицо              = Начисления.Строки[Сч].ФизЛицо;
									СтрокаНачислений.ПериодРегистрации    = Начисления.Строки[Сч].ПериодРегистрации;
									СтрокаНачислений.ПериодДействияНачало = ВыборкаПоФПД.ПериодДействияНачало;
									СтрокаНачислений.ПериодДействияКонец  = ВыборкаПоФПД.ПериодДействияКонец;
									КолВоСтрокНачислений                  = КолВоСтрокНачислений + 1;
									МаксКолвоСтрок                      = МаксКолвоСтрок + 1;
									СчДобавленныхСтрок                    = СчДобавленныхСтрок + 1;
									
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					Иначе
						СтрокаНачисленияУдержания.НачисленияУдержанияВидНачисления = СокрЛП(Строка(Начисления.Строки[Сч].ВидРасчета));
					КонецЕсли;
					СтрокаНачисленияУдержания.НачисленияУдержанияОтработанныеДни   = Начисления.Строки[Сч].ОтработаноДней;
					СтрокаНачисленияУдержания.НачисленияУдержанияОтработанныеЧасы  = Начисления.Строки[Сч].ОтработаноЧасов;
					СтрокаНачисленияУдержания.НачисленияУдержанияСуммаНачисления   = Начисления.Строки[Сч].Результат;
					
					Если ВидРасчетногоЛистка = "Подробно" и ТипЗнч(Начисления.Строки[Сч].ПериодДействияНачало) = Тип("Дата") тогда
						СтрокаНачисленияУдержания.НачисленияУдержанияПериодНачисления = ОбщегоНазначения.ОписаниеПериода(Начисления.Строки[Сч].ПериодДействияНачало, Начисления.Строки[Сч].ПериодДействияКонец);
					КонецЕсли;
					
				КонецЕсли;
				
				// Добавим строку 2-го раздела
				Если Сч <= КолВоСтрокУдержаний тогда
					
					СтрокаНачисленияУдержания.ФизЛицо                              = Удержания.Строки[Сч].ФизЛицо;
					СтрокаНачисленияУдержания.ПериодРегистрации                    = Удержания.Строки[Сч].ПериодРегистрации;
					СтрокаНачисленияУдержания.НачисленияУдержанияВидУдержания      = Удержания.Строки[Сч].ВидРасчета; 
					
					
					// Если вид расчетного листка подробный, то добавим к начислению периоды действия и показатели
					Если ВидРасчетногоЛистка = "Подробно" И ТипЗнч(Удержания.Строки[Сч].ВидРасчета) = Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания") тогда
						
						ВидРасчета = Удержания.Строки[Сч].ВидРасчета;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияВидУдержания = Строка(ВидРасчета);
						
						НомерСтрокиНачисления = Удержания.Строки[Сч].НомерСтроки;
						РегистраторНачисления = Удержания.Строки[Сч].Регистратор;
						НачалоПериодаДействия = Удержания.Строки[Сч].ПериодДействияНачало;
						КонецПериодаДействия  = Удержания.Строки[Сч].ПериодДействияКонец;
						СчДобавленныхСтрок = 1;
						СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);
						ПервыйРаз = истина;
						
						Для СчПоказатель = 1 по 4 Цикл
							Если СведенияОВидеРасчета["Показатель"+СчПоказатель+"Видимость"] И СведенияОВидеРасчета["Показатель" + СчПоказатель + "Наименование"] <> Null тогда
								Если ПервыйРаз тогда
									СтрокаУдержаний                   = Удержания.Строки.Вставить(Сч+СчДобавленныхСтрок);
									СтрокаУдержаний.ВидРасчета        = " показатели:";
									СтрокаУдержаний.ФизЛицо           = Удержания.Строки[Сч].ФизЛицо;
									СтрокаУдержаний.ПериодРегистрации = Удержания.Строки[Сч].ПериодРегистрации;
									ПервыйРаз                         = ложь;
									КолВоСтрокУдержаний               = КолВоСтрокУдержаний +1;
									МаксКолвоСтрок                    = МаксКолвоСтрок + 1;
									СчДобавленныхСтрок                = СчДобавленныхСтрок + 1;
								КонецЕсли;
								СтрокаУдержаний                   = Удержания.Строки.Вставить(Сч+СчДобавленныхСтрок);
								СтрокаУдержаний.ВидРасчета        = СведенияОВидеРасчета["Показатель" + СчПоказатель + "Наименование"] + " - " + Удержания.Строки[Сч]["Показатель"+СчПоказатель];
								СтрокаУдержаний.ФизЛицо           = Удержания.Строки[Сч].ФизЛицо;
								СтрокаУдержаний.ПериодРегистрации = Удержания.Строки[Сч].ПериодРегистрации;
								КолВоСтрокУдержаний               = КолВоСтрокУдержаний + 1;
								МаксКолвоСтрок                    = МаксКолвоСтрок + 1;
								СчДобавленныхСтрок                = СчДобавленныхСтрок + 1;
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						СтрокаНачисленияУдержания.НачисленияУдержанияВидУдержания = СокрЛП(Строка(Удержания.Строки[Сч].ВидРасчета));
					КонецЕсли;
					
					
					Если ВидРасчетногоЛистка = "Подробно" и ТипЗнч(Удержания.Строки[Сч].ПериодДействияНачало) = Тип("Дата") тогда
						СтрокаНачисленияУдержания.НачисленияУдержанияПериодУдержания = ОбщегоНазначения.ОписаниеПериода(Удержания.Строки[Сч].ПериодДействияНачало, Удержания.Строки[Сч].ПериодДействияКонец);
					КонецЕсли;
					
					СтрокаНачисленияУдержания.НачисленияУдержанияСуммаУдержания    = Удержания.Строки[Сч].Результат;
					
				КонецЕсли;
				
				Сч = Сч + 1;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //ЗаполнитьВнешнийИсточникДанных()

// Настраивает построитель запросов
//
Процедура НастроитьПостроительЗапросов(ПостроительОтчетов, ВидРасчетногоЛистка) Экспорт
	
	// Заполнить параметры построителя запросов
	НачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода")).Значение;
	КонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода")).Значение;
	
	
	ПостроительОтчетов.Параметры.Вставить("ПериодРегистрации", 	  	    НачалоПериода);
	ПостроительОтчетов.Параметры.Вставить("КонецПериодаРегистрации", 	КонецДня(КонецПериода));
	ПостроительОтчетов.Параметры.Вставить("Расход", 					ВидДвиженияНакопления.Расход);

	// Присвоим текст запроса в зависимости от типа расчетного листка
	
	Если ВидРасчетногоЛистка = "Кратко" тогда
		
		ТекстПостроителя = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияУдержания.ВидДвижения КАК ВидДвижения,
		|	НачисленияУдержания.ФизЛицо КАК ФизЛицо,
		|	НачисленияУдержания.ПериодРегистрации КАК ПериодРегистрации,
		|	НачисленияУдержания.ВидРасчета,
		|	НачисленияУдержания.ПорядокВидаРасчета КАК ПорядокВидаРасчета,
		|	НачисленияУдержания.ОтработаноДней КАК ОтработаноДней,
		|	НачисленияУдержания.ОтработаноЧасов,
		|	НачисленияУдержания.Результат
		|ИЗ
		|	(ВЫБРАТЬ
		|		""Начислено"" КАК ВидДвижения,
		|		УправленческиеНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|		УправленческиеНачисления.ФизЛицо КАК ФизЛицо,
		|		УправленческиеНачисления.ВидРасчета КАК ВидРасчета,
		|		УправленческиеНачисления.ВидРасчета.Код КАК ПорядокВидаРасчета,
		|		СУММА(УправленческиеНачисления.ОтработаноДней) КАК ОтработаноДней,
		|		СУММА(УправленческиеНачисления.ОтработаноЧасов) КАК ОтработаноЧасов,
		|		СУММА(УправленческиеНачисления.Результат) КАК Результат
		|	ИЗ
		|		РегистрРасчета.УправленческиеНачисления КАК УправленческиеНачисления
		|	ГДЕ
		|		УправленческиеНачисления.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И (НЕ УправленческиеНачисления.ПоВременнойСхемеМотивации)
		|		И (НЕ(УправленческиеНачисления.ОтработаноДней = 0
		|					И УправленческиеНачисления.ОтработаноЧасов = 0
		|					И УправленческиеНачисления.Результат = 0))
		|	{ГДЕ
		|		УправленческиеНачисления.ФизЛицо.*}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		УправленческиеНачисления.ПериодРегистрации,
		|		УправленческиеНачисления.ФизЛицо,
		|		УправленческиеНачисления.ВидРасчета.Код,
		|		УправленческиеНачисления.ВидРасчета
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Удержано"",
		|		УправленческиеУдержания.ПериодРегистрации,
		|		УправленческиеУдержания.ФизЛицо,
		|		УправленческиеУдержания.ВидРасчета,
		|		УправленческиеУдержания.ВидРасчета.Код,
		|		NULL,
		|		NULL,
		|		СУММА(УправленческиеУдержания.Результат)
		|	ИЗ
		|		РегистрРасчета.УправленческиеУдержания КАК УправленческиеУдержания
		|	ГДЕ
		|		УправленческиеУдержания.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И (НЕ УправленческиеУдержания.ПоВременнойСхемеМотивации)
		|		И УправленческиеУдержания.Результат <> 0
		|	{ГДЕ
		|		УправленческиеУдержания.ФизЛицо.*}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		УправленческиеУдержания.ПериодРегистрации,
		|		УправленческиеУдержания.ФизЛицо,
		|		УправленческиеУдержания.ВидРасчета.Код,
		|		УправленческиеУдержания.ВидРасчета
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Удержано"",
		|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботниками.Период, МЕСЯЦ),
		|		ПогашениеЗаймовРаботниками.ФизЛицо,
		|		""Погашение займа"",
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(ПогашениеЗаймовРаботниками.ОсновнойДолг + ПогашениеЗаймовРаботниками.Проценты)
		|	ИЗ
		|		РегистрНакопления.ПогашениеЗаймовРаботниками КАК ПогашениеЗаймовРаботниками
		|	ГДЕ
		|		ПогашениеЗаймовРаботниками.ВидДвижения = &Расход
		|		И ПогашениеЗаймовРаботниками.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И ПогашениеЗаймовРаботниками.УдержаноИзЗарплаты
		|		И ПогашениеЗаймовРаботниками.ОсновнойДолг + ПогашениеЗаймовРаботниками.Проценты <> 0
		|	{ГДЕ
		|		ПогашениеЗаймовРаботниками.ФизЛицо.*}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботниками.Период, МЕСЯЦ),
		|		ПогашениеЗаймовРаботниками.ФизЛицо
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Удержано"",
		|		НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОстаткиИОбороты.Период, МЕСЯЦ),
		|		ВзаиморасчетыСРаботникамиОстаткиИОбороты.Физлицо,
		|		""Выплата"",
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(ВзаиморасчетыСРаботникамиОстаткиИОбороты.СуммаУпрРасход)
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСРаботниками.ОстаткиИОбороты(&ПериодРегистрации, &КонецПериодаРегистрации, Месяц, , {(Физлицо)}) КАК ВзаиморасчетыСРаботникамиОстаткиИОбороты
		|	ГДЕ
		|		ВзаиморасчетыСРаботникамиОстаткиИОбороты.СуммаУпрРасход <> 0
		|	{ГДЕ
		|		ВзаиморасчетыСРаботникамиОстаткиИОбороты.Физлицо.*}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОстаткиИОбороты.Период, МЕСЯЦ),
		|		ВзаиморасчетыСРаботникамиОстаткиИОбороты.Физлицо
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Сальдо начальное"",
		|		Периоды.Период,
		|		Сальдо.Физлицо,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(Сальдо.СуммаВзаиморасчетовОстаток)
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК Период
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации) КАК Периоды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				&ПериодРегистрации КАК Период,
		|				ВзаиморасчетыСРаботникамиОстатки.Физлицо КАК Физлицо,
		|				ВзаиморасчетыСРаботникамиОстатки.СуммаУпрОстаток КАК СуммаВзаиморасчетовОстаток
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСРаботниками.Остатки(&ПериодРегистрации, {(Физлицо)}) КАК ВзаиморасчетыСРаботникамиОстатки
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ДОБАВИТЬКДАТЕ(ВзаиморасчетыСРаботникамиОбороты.Период, МЕСЯЦ, 1),
		|				ВзаиморасчетыСРаботникамиОбороты.Физлицо,
		|				ВзаиморасчетыСРаботникамиОбороты.СуммаУпрОборот
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСРаботниками.Обороты(&ПериодРегистрации, &КонецПериодаРегистрации, Месяц, {(Физлицо)}) КАК ВзаиморасчетыСРаботникамиОбороты) КАК Сальдо
		|			ПО Сальдо.Период <= Периоды.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Сальдо.Физлицо,
		|		Периоды.Период
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Сальдо конечное"",
		|		Периоды.Период,
		|		Сальдо.Физлицо,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(Сальдо.СуммаВзаиморасчетовОстаток)
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК Период
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации) КАК Периоды
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				&ПериодРегистрации КАК Период,
		|				ВзаиморасчетыСРаботникамиОстатки.Физлицо КАК Физлицо,
		|				ВзаиморасчетыСРаботникамиОстатки.СуммаУпрОстаток КАК СуммаВзаиморасчетовОстаток
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСРаботниками.Остатки(&ПериодРегистрации, {(Физлицо)}) КАК ВзаиморасчетыСРаботникамиОстатки
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ВзаиморасчетыСРаботникамиОбороты.Период,
		|				ВзаиморасчетыСРаботникамиОбороты.Физлицо,
		|				ВзаиморасчетыСРаботникамиОбороты.СуммаУпрОборот
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСРаботниками.Обороты(&ПериодРегистрации, &КонецПериодаРегистрации, Месяц, ) КАК ВзаиморасчетыСРаботникамиОбороты) КАК Сальдо
		|			ПО Сальдо.Период <= Периоды.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Сальдо.Физлицо,
		|		Периоды.Период) КАК НачисленияУдержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Работники.ФизЛицо КАК ФизЛицо,
		|			Работники.Подразделение КАК Подразделение,
		|			Работники.Должность КАК Должность,
		|			ДатыПоследнихДвижений.ПериодРегистрации КАК ПериодРегистрации
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Работники.ФизЛицо КАК ФизЛицо,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				Периоды.ПериодРегистрации КАК ПериодРегистрации
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации
		|				ИЗ
		|					РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|				ГДЕ
		|					РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации) КАК Периоды
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
		|					ПО Периоды.ПериодРегистрации >= Работники.Период
		|			{ГДЕ
		|				Работники.ФизЛицо.*}
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Работники.ФизЛицо,
		|				Периоды.ПериодРегистрации) КАК ДатыПоследнихДвижений
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
		|				ПО ДатыПоследнихДвижений.ФизЛицо = Работники.ФизЛицо
		|					И ДатыПоследнихДвижений.Период = Работники.Период
		|		{ГДЕ
		|			Работники.ФизЛицо.*}) КАК РаботникиСрезПоследних
		|		ПО НачисленияУдержания.ФизЛицо = РаботникиСрезПоследних.ФизЛицо
		|			И НачисленияУдержания.ПериодРегистрации = РаботникиСрезПоследних.ПериодРегистрации
		|{ГДЕ
		|	РаботникиСрезПоследних.Подразделение,
		|	РаботникиСрезПоследних.Должность,
		|	НачисленияУдержания.ПериодРегистрации,
		|	НачисленияУдержания.ФизЛицо}
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации,
		|	ПорядокВидаРасчета
		|ИТОГИ ПО
		|	ПериодРегистрации,
		|	ФизЛицо,
		|	ВидДвижения"	
		
	Иначе
		ТекстПостроителя = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияУдержания.ВидДвижения КАК ВидДвижения,
		|	НачисленияУдержания.Регистратор КАК Регистратор,
		|	НачисленияУдержания.ФизЛицо КАК ФизЛицо,
		|	НачисленияУдержания.ПериодРегистрации КАК ПериодРегистрации,
		|	НачисленияУдержания.ВидРасчета,
		|	НачисленияУдержания.ПорядокВидаРасчета КАК ПорядокВидаРасчета,
		|	НачисленияУдержания.НомерСтроки КАК НомерСтроки,
		|	НачисленияУдержания.ПериодДействияНачало КАК ПериодДействияНачало,
		|	НачисленияУдержания.ПериодДействияКонец КАК ПериодДействияКонец,
		|	НачисленияУдержания.ОтработаноДней КАК ОтработаноДней,
		|	НачисленияУдержания.ОтработаноЧасов КАК ОтработаноЧасов,
		|	НачисленияУдержания.Показатель1,
		|	НачисленияУдержания.Показатель2,
		|	НачисленияУдержания.Показатель3,
		|	НачисленияУдержания.Показатель4,
		|	НачисленияУдержания.Результат
		|ИЗ
		|	(ВЫБРАТЬ
		|		""Начислено"" КАК ВидДвижения,
		|		УправленческиеНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|		УправленческиеНачисления.Регистратор КАК Регистратор,
		|		УправленческиеНачисления.ФизЛицо КАК ФизЛицо,
		|		УправленческиеНачисления.ВидРасчета КАК ВидРасчета,
		|		УправленческиеНачисления.ВидРасчета.Код КАК ПорядокВидаРасчета,
		|		УправленческиеНачисления.НомерСтроки КАК НомерСтроки,
		|		УправленческиеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|		УправленческиеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|		УправленческиеНачисления.ОтработаноДней КАК ОтработаноДней,
		|		УправленческиеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|		УправленческиеНачисления.Результат КАК Результат,
		|		УправленческиеНачисления.Показатель1 КАК Показатель1,
		|		УправленческиеНачисления.Показатель2 КАК Показатель2,
		|		УправленческиеНачисления.Показатель3 КАК Показатель3,
		|		УправленческиеНачисления.Показатель4 КАК Показатель4
		|	ИЗ
		|		РегистрРасчета.УправленческиеНачисления КАК УправленческиеНачисления
		|	ГДЕ
		|		УправленческиеНачисления.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И (НЕ УправленческиеНачисления.ПоВременнойСхемеМотивации)
		|	{ГДЕ
		|		УправленческиеНачисления.ФизЛицо}
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Удержано"",
		|		УправленческиеУдержания.ПериодРегистрации,
		|		УправленческиеУдержания.Регистратор,
		|		УправленческиеУдержания.ФизЛицо,
		|		УправленческиеУдержания.ВидРасчета,
		|		УправленческиеУдержания.ВидРасчета.Код,
		|		УправленческиеУдержания.НомерСтроки,
		|		УправленческиеУдержания.БазовыйПериодНачало,
		|		УправленческиеУдержания.БазовыйПериодКонец,
		|		NULL,
		|		NULL,
		|		УправленческиеУдержания.Результат,
		|		УправленческиеУдержания.Показатель1,
		|		УправленческиеУдержания.Показатель2,
		|		УправленческиеУдержания.Показатель3,
		|		УправленческиеУдержания.Показатель4
		|	ИЗ
		|		РегистрРасчета.УправленческиеУдержания КАК УправленческиеУдержания
		|	ГДЕ
		|		УправленческиеУдержания.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И (НЕ УправленческиеУдержания.ПоВременнойСхемеМотивации)
		|	{ГДЕ
		|		УправленческиеУдержания.ФизЛицо}
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Удержано"",
		|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботниками.Период, МЕСЯЦ),
		|		ПогашениеЗаймовРаботниками.Регистратор,
		|		ПогашениеЗаймовРаботниками.ФизЛицо,
		|		""Погашение займа                                                                                      "",
		|		NULL,
		|		ПогашениеЗаймовРаботниками.НомерСтроки,
		|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботниками.Период, МЕСЯЦ),
		|		КОНЕЦПЕРИОДА(ПогашениеЗаймовРаботниками.Период, МЕСЯЦ),
		|		NULL,
		|		NULL,
		|		ПогашениеЗаймовРаботниками.ОсновнойДолг + ПогашениеЗаймовРаботниками.Проценты,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL
		|	ИЗ
		|		РегистрНакопления.ПогашениеЗаймовРаботниками КАК ПогашениеЗаймовРаботниками
		|	ГДЕ
		|		ПогашениеЗаймовРаботниками.ВидДвижения = &Расход
		|		И ПогашениеЗаймовРаботниками.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И ПогашениеЗаймовРаботниками.УдержаноИзЗарплаты
		|	{ГДЕ
		|		ПогашениеЗаймовРаботниками.ФизЛицо}
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Удержано"",
		|		НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОстаткиИОбороты.Период, МЕСЯЦ),
		|		NULL,
		|		ВзаиморасчетыСРаботникамиОстаткиИОбороты.Физлицо,
		|		""Выплата"",
		|		NULL,
		|		NULL,
		|		НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботникамиОстаткиИОбороты.Период, МЕСЯЦ),
		|		КОНЕЦПЕРИОДА(ВзаиморасчетыСРаботникамиОстаткиИОбороты.Период, МЕСЯЦ),
		|		NULL,
		|		NULL,
		|		ВзаиморасчетыСРаботникамиОстаткиИОбороты.СуммаУпрРасход,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСРаботниками.ОстаткиИОбороты(&ПериодРегистрации, &КонецПериодаРегистрации, Месяц, , {(Физлицо)}) КАК ВзаиморасчетыСРаботникамиОстаткиИОбороты
		|	{ГДЕ
		|		ВзаиморасчетыСРаботникамиОстаткиИОбороты.Физлицо}
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Начальное сальдо"",
		|		Периоды.Период,
		|		NULL,
		|		Сальдо.Физлицо,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(Сальдо.СуммаВзаиморасчетовОстаток),
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК Период
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации) КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				&ПериодРегистрации КАК Период,
		|				ВзаиморасчетыСРаботникамиОстатки.Физлицо КАК Физлицо,
		|				ВзаиморасчетыСРаботникамиОстатки.СуммаУпрОстаток КАК СуммаВзаиморасчетовОстаток
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСРаботниками.Остатки(&ПериодРегистрации, {(Физлицо)}) КАК ВзаиморасчетыСРаботникамиОстатки
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ДОБАВИТЬКДАТЕ(ВзаиморасчетыСРаботникамиОбороты.Период, МЕСЯЦ, 1),
		|				ВзаиморасчетыСРаботникамиОбороты.Физлицо,
		|				ВзаиморасчетыСРаботникамиОбороты.СуммаУпрОборот
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСРаботниками.Обороты(&ПериодРегистрации, &КонецПериодаРегистрации, Месяц, {(Физлицо)}) КАК ВзаиморасчетыСРаботникамиОбороты) КАК Сальдо
		|			ПО Сальдо.Период <= Периоды.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Сальдо.Физлицо,
		|		Периоды.Период
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Конечное сальдо"",
		|		Периоды.Период,
		|		NULL,
		|		Сальдо.Физлицо,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(Сальдо.СуммаВзаиморасчетовОстаток),
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК Период
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации) КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				&ПериодРегистрации КАК Период,
		|				ВзаиморасчетыСРаботникамиОстатки.Физлицо КАК Физлицо,
		|				ВзаиморасчетыСРаботникамиОстатки.СуммаУпрОстаток КАК СуммаВзаиморасчетовОстаток
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСРаботниками.Остатки(&ПериодРегистрации, {(Физлицо)}) КАК ВзаиморасчетыСРаботникамиОстатки
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ВзаиморасчетыСРаботникамиОбороты.Период,
		|				ВзаиморасчетыСРаботникамиОбороты.Физлицо,
		|				ВзаиморасчетыСРаботникамиОбороты.СуммаУпрОборот
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСРаботниками.Обороты(&ПериодРегистрации, &КонецПериодаРегистрации, Месяц, {(Физлицо)}) КАК ВзаиморасчетыСРаботникамиОбороты) КАК Сальдо
		|			ПО Сальдо.Период <= Периоды.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Сальдо.Физлицо,
		|		Периоды.Период) КАК НачисленияУдержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Работники.ФизЛицо КАК ФизЛицо,
		|			Работники.Подразделение КАК Подразделение,
		|			Работники.Должность КАК Должность,
		|			ДатыПоследнихДвижений.ПериодРегистрации КАК ПериодРегистрации
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Работники.ФизЛицо КАК ФизЛицо,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				Периоды.ПериодРегистрации КАК ПериодРегистрации
		|			ИЗ
		|				(ВЫБРАТЬ
		|					НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации
		|				ИЗ
		|					РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь) КАК Периоды
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
		|					ПО Периоды.ПериодРегистрации >= Работники.Период
		|			{ГДЕ
		|				Работники.ФизЛицо}
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Работники.ФизЛицо,
		|				Периоды.ПериодРегистрации) КАК ДатыПоследнихДвижений
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
		|				ПО ДатыПоследнихДвижений.ФизЛицо = Работники.ФизЛицо
		|					И ДатыПоследнихДвижений.Период = Работники.Период
		|		{ГДЕ
		|			Работники.ФизЛицо,
		|			Работники.Подразделение,
		|			Работники.Должность}) КАК РаботникиСрезПоследних
		|		ПО НачисленияУдержания.ФизЛицо = РаботникиСрезПоследних.ФизЛицо
		|			И НачисленияУдержания.ПериодРегистрации = РаботникиСрезПоследних.ПериодРегистрации
		|{ГДЕ
		|	РаботникиСрезПоследних.Подразделение,
		|	РаботникиСрезПоследних.Должность,
		|	НачисленияУдержания.ПериодРегистрации,
		|	НачисленияУдержания.ФизЛицо}
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации,
		|	ПорядокВидаРасчета,
		|	ПериодДействияНачало
		|ИТОГИ ПО
		|	ПериодРегистрации,
		|	ФизЛицо,
		|	ВидДвижения";	
		
	КонецЕсли;
	
	ПостроительОтчетов.Текст = ТекстПостроителя;
	
	// Подготовим построитель запросов к настройке отборов
	ПостроительОтчетов.ЗаполнитьНастройки();
	ПостроительОтчетов.Отбор.Сбросить();
	
КонецПроцедуры

// Запоминает настройку группировки расчетного литска
//
Процедура ЗапомнитьНастройкуРасчетногоЛистка() Экспорт  
	
	// Найдем элемент группировки с названием "ШапкаРасчетногоЛистка"
	ЭлементНайден = Ложь;
	Для Каждого ЭлементСтруктурыГруппировки из КомпоновщикНастроек.Настройки.Структура Цикл
		
		Если ЭлементСтруктурыГруппировки.Имя = "ШапкаРасчетногоЛистка" тогда
			
			ЭлементНастройкиРасчетногоЛистка = ЭлементСтруктурыГруппировки;
			КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
			ЭлементНайден = Истина;
			Возврат;
			
		Иначе
			
			// Рекурсивно проверим остальные элементы структуры
			ПроверитьВложенныеЭлементы(ЭлементСтруктурыГруппировки , ЭлементНайден);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет рекурсивный поиск элемента группировки с именем "ШапкаРасчетногоЛистка"
//
Процедура ПроверитьВложенныеЭлементы(ЭлементСтруктурыГруппировки , ЭлементНайден)
	
	Для Каждого ЭлементСтруктуры из ЭлементСтруктурыГруппировки.Структура Цикл
		
		Если ЭлементНайден тогда
			Возврат;
		КонецЕсли;
		
		Если ЭлементСтруктуры.Имя = "ШапкаРасчетногоЛистка" тогда
			
			ЭлементНастройкиРасчетногоЛистка = ЭлементСтруктуры;
			ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
			ЭлементНайден = истина;
			Возврат;
			
		Иначе
			
			ПроверитьВложенныеЭлементы(ЭлементСтруктуры , ЭлементНайден);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтруктуруРасчетногоЛистка(Структура)
	
	ЭлементСтруктурыРасчетногоЛистка = Структура.Добавить(ТипЗнч(ЭлементНастройкиРасчетногоЛистка));
	
	ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыРасчетногоЛистка, ЭлементНастройкиРасчетногоЛистка);
	
	ЭлементСтруктурыРасчетногоЛистка.Имя                           = "ШапкаРасчетногоЛистка";
	ЭлементСтруктурыРасчетногоЛистка.Структура[0].Имя              = "Начисление";
	ЭлементСтруктурыРасчетногоЛистка.Структура[0].Структура[0].Имя = "СтрокаНачисленийУдержаний";
	ЭлементСтруктурыРасчетногоЛистка.Структура[1].Имя              = "Сальдо";
	
КонецПроцедуры

// Добавление расчетного листка в настройку схемы компоновки
//
Процедура ВосстановитьНастройкуРасчетногоЛистка() Экспорт  
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 тогда
		
		ДобавитьСтруктуруРасчетногоЛистка(КомпоновщикНастроек.Настройки.Структура);
		
	Иначе
		
		Для Каждого ЭлементСтруктурыГруппировки из КомпоновщикНастроек.Настройки.Структура Цикл
			
			Если ЭлементСтруктурыГруппировки.Структура.Количество() <> 0 тогда
				Если ЭлементСтруктурыГруппировки.ПоляГруппировки.Элементы.Количество() <> 0 тогда
					
					ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктурыГруппировки); 
					НайтиСледующийУровень(ЭлементСтруктурыГруппировки);
					
				Иначе
					
					КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
					ДобавитьСтруктуруРасчетногоЛистка(КомпоновщикНастроек.Настройки.Структура);
					
				КонецЕсли;
				
			Иначе
				
				Если ЭлементСтруктурыГруппировки.ПоляГруппировки.Элементы.Количество() = 0 тогда
					
					КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
					ДобавитьСтруктуруРасчетногоЛистка(КомпоновщикНастроек.Настройки.Структура);
					
				Иначе
					
					ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктурыГруппировки);
					ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);
					
				КонецЕсли;
				
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// Поиск последнего уровня иерархии группировки
//
Процедура НайтиСледующийУровень(ЭлементСтруктурыГруппировки)
	
	Для Каждого ЭлементСтруктуры из ЭлементСтруктурыГруппировки.Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "ШапкаРасчетногоЛистка" тогда
			ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
			ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);
			Возврат;
		КонецЕсли;
		
		Если ЭлементСтруктуры.Структура.Количество() <> 0 тогда
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() <> 0 тогда
				
				ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры);
				НайтиСледующийУровень(ЭлементСтруктуры);
				
			Иначе
				
				ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
				
				ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);
				
			КонецЕсли;
		Иначе
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 тогда
				
				ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
				ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);				
				
			Иначе
			
				ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры);
				ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктуры.Структура);				
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавление поля в таблицу выбранных полей из таблицы группировок
//
Процедура ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры)
	
	ЭлементСтруктуры.Выбор.Элементы.Очистить();
	
	ЭлементСтруктуры.ПараметрыВывода.Элементы.Найти("TemplateType").Значение      = ТипМакетаГруппировкиКомпоновкиДанных.Вертикальный;
	ЭлементСтруктуры.ПараметрыВывода.Элементы.Найти("TemplateType").Использование = истина;
	
	Для каждого ЭлементИсточник Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
		
		ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Строка(ЭлементИсточник.Поле)));
		Если ДоступноеПоле <> Неопределено тогда
			ЭлементПриемник               = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЭлементПриемник.Поле          = ДоступноеПоле.Поле;
			ЭлементПриемник.Заголовок     = ДоступноеПоле.Заголовок;
			ЭлементПриемник.Использование = истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Сохранение настроек схемы компоновки
//
Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Заполнение параметров отчета по элементу справочника из переменной СохраненнаяНастройка.
//
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

НастройкаПериода = Новый НастройкаПериода;
	
#КонецЕсли

НачисленияУдержания = Новый ТаблицаЗначений();
НачисленияУдержания.Колонки.Добавить("ВидДвижения");
НачисленияУдержания.Колонки.Добавить("ФизЛицо");
НачисленияУдержания.Колонки.Добавить("ПериодРегистрации");
НачисленияУдержания.Колонки.Добавить("ПризнакУпорядочиванияСтрок");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияВидНачисления");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияПериодНачисления");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияОтработанныеДни");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияОтработанныеЧасы");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияОплаченныеДни");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияОплаченныеЧасы");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияСуммаНачисления");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияВидУдержания");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияПериодУдержания");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияСуммаУдержания");
НачисленияУдержания.Колонки.Добавить("СуммаУпрНачальныйОстаток");
НачисленияУдержания.Колонки.Добавить("СуммаУпрКонечныйОстаток");

СписокПолейОтбора = Новый СписокЗначений;
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("ФизЛицо"));
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("ПериодРегистрации"));
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("Должность"));
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("Подразделение"));

НастройкаШириныКолонокРасчетногоЛистка     = Новый Массив();
НастройкаРазмТекстаКолонокРасчетногоЛистка = Новый Массив();

