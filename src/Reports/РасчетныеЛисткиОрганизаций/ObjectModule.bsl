////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем НачисленияУдержания                        Экспорт; // Таблица значений - внешний источник данных
Перем СохраненнаяНастройка                       Экспорт;            
Перем СписокПолейОтбора                          Экспорт; // Список названий поле схемы компоновки по которым можно устанавливать отбор
Перем ЭлементНастройкиРасчетногоЛистка           Экспорт; // Элемент структуры настройки схемы компоновки данных
Перем ТекстЗапроса                               Экспорт;
Перем ИмяМакетаНачало;
Перем ИмяМакетаКонец;
Перем НастройкаШириныКолонокРасчетногоЛистка     Экспорт;
Перем НастройкаРазмТекстаКолонокРасчетногоЛистка Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

#Если Клиент тогда
	
// Настраивает отчет
//
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

// Инициализация отчета
//
// Параметры:
//  Нет.
//
Процедура ИнициализацияОтчета() Экспорт
	
КонецПроцедуры //ИнициализацияОтчета()

// Заполняет отборы и параметры схемы копоновки
//
Функция НастроитьОтборыПарметры(Отбор = Неопределено, Параметры = Неопределено) Экспорт
	
	Если Отбор = Неопределено И Параметры = Неопределено тогда
		Возврат ложь;
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Если ТипЗнч(Отбор) = Тип("Массив") тогда
		
		Для каждого ЭлементОтбора из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("Структура") тогда
				
				ЛевоеЗначение    = Неопределено;
				ВидСравненияКомп = Неопределено;
				ПравоеЗначение   = Неопределено;
				
				Если НЕ ЭлементОтбора.Свойство("ЛевоеЗначение", ЛевоеЗначение) тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ЭлементОтбора.Свойство("ВидСравнения", ВидСравненияКомп) тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ЭлементОтбора.Свойство("ПравоеЗначение", ПравоеЗначение) тогда
					Возврат ложь;
				КонецЕсли;
				
				ПолеОтбора = Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Строка(ЛевоеЗначение)));
				
				Если ПолеОтбора = Неопределено тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ТипЗнч(ВидСравненияКомп) = Тип("ВидСравненияКомпоновкиДанных") тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ПолеОтбора.Тип.СодержитТип(ТипЗнч(ПравоеЗначение))   тогда
					Возврат ложь;
				КонецЕсли;
				
				ЭлементОтбораКомпоновки = Неопределено;
				
				Для каждого ЭлементОтбораКомп из Настройки.Отбор.Элементы Цикл
					Если ЭлементОтбораКомп.ЛевоеЗначение = ПолеОтбора.Поле тогда
						ЭлементОтбораКомпоновки = ЭлементОтбораКомп;
					КонецЕсли;
				КонецЦикла;
				
				Если ЭлементОтбораКомпоновки = Неопределено тогда
					ЭлементОтбораКомпоновки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				КонецЕсли;
				
				ЭлементОтбораКомпоновки.ЛевоеЗначение  = ПолеОтбора.Поле;
				ЭлементОтбораКомпоновки.ВидСравнения   = ВидСравненияКомп;
				ЭлементОтбораКомпоновки.ПравоеЗначение = ПравоеЗначение;
				ЭлементОтбораКомпоновки.Использование  = истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("Массив") тогда
		
		Для каждого ЭлементПараметра из Параметры Цикл
			Если ТипЗнч(ЭлементПараметра) = Тип("Структура") тогда
				
				Параметр = Неопределено;
				Значение = Неопределено;
				
				Если НЕ ЭлементПараметра.Свойство("Параметр", Параметр) тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ЭлементПараметра.Свойство("Значение", Значение) тогда
					Возврат ложь;
				КонецЕсли;
				
				ПараметрКомпоновки = Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных(Строка(Параметр)));
				
				Если ПараметрКомпоновки = Неопределено тогда
					Возврат ложь;
				КонецЕсли;
				
				Если НЕ ПараметрКомпоновки.Тип.СодержитТип(ТипЗнч(Значение)) тогда
					Возврат ложь;
				КонецЕсли;
				
				ЗначениеПараметра               = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Строка(Параметр)));
				ЗначениеПараметра.Значение      = Значение;
				ЗначениеПараметра.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат истина;
	
 КонецФункции

// Вывод заголовка отчета
//
Процедура ВыводЗаголовкаОтчета(Результат, ВыводВФормуОтчета = Истина) Экспорт
	
	Если РасширеннаяНастройка Тогда
		Возврат;                                           
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput"));
	ВыводитьЗаголовок = (ЗначениеПараметра.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить И ЗначениеПараметра.Использование);
	
	Если Не ВыводВФормуОтчета И Не ВыводитьЗаголовок Тогда
		Возврат;
	КонецЕсли;

	
	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокТиповогоОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	ЗаголовокОтчета = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title")).Значение;
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ЗаголовокОтчета;
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры
	
// Удаление элементов структуры настройки	
//	
Процедура УдалитьГруппировку()
	
	ЗапомнитьНастройкуРасчетногоЛистка();
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Если Настройки.Структура.Количество() <> 0 тогда
		Настройки.Структура.Удалить(Настройки.Структура[0]);
	КОнецЕсли;
	
	ВосстановитьНастройкуРасчетногоЛистка();
	
КонецПроцедуры
	
// Возвращает значение вида сравнения компоновки данных в зависимости от вида сравнения
//
Функция ПолучитьВидСравнения(ВидСравненияЭлемента) Экспорт
	
	ВидСравненияДляСхемыКомпоновки = Неопределено;
	Если ВидСравненияЭлемента = ВидСравнения.Равно тогда
		ВидСравненияДляСхемыКомпоновки = ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ВидСравненияЭлемента = ВидСравнения.НеРавно тогда
		ВидСравненияДляСхемыКомпоновки = ВидСравненияКомпоновкиДанных.НеРавно;
	ИначеЕсли ВидСравненияЭлемента = ВидСравнения.ВСписке тогда
		ВидСравненияДляСхемыКомпоновки = ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли ВидСравненияЭлемента = ВидСравнения.ВСпискеПоИерархии тогда
		ВидСравненияДляСхемыКомпоновки = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ИначеЕсли ВидСравненияЭлемента = ВидСравнения.ВИерархии тогда
		ВидСравненияДляСхемыКомпоновки = ВидСравненияКомпоновкиДанных.ВИерархии;
	КонецЕсли;
	
	Возврат ВидСравненияДляСхемыКомпоновки;
	
КонецФункции
	
	
// Формирование отчета в табличный документ "Результат"
//
// Параметры:
//   Результат         – табличный документ, в который помещается результат вывода расчетных листков.
//	 ДанныеРасшифровки - данные расшифровки компоновки данных
//
Процедура СформироватьОтчет(Результат, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = ложь, ВыводитьПоСтраницам = ложь) Экспорт
	
	Если ДанныеРасшифровки = Неопределено тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Группировать"));
	
	Если ЗначениеПараметра.Использование и НЕ ЗначениеПараметра.Значение тогда
		УдалитьГруппировку();
	КонецЕсли;
	
	// Получить настройки схемы компоновки данных
	Настройки = КомпоновщикНастроек.Настройки;

	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидРасчетногоЛистка"));
	ВидРасчетногоЛистка = ЗначениеПараметра.Значение;
	
	// установим параметры и текст запроса построителя запроса
	ПостроительОтчетов = Новый ПостроительОтчета;
	
	НастроитьПостроительЗапросов(ПостроительОтчетов, ВидРасчетногоЛистка);
	
	// установим отбор р/л без без начислений и удержаний
    ГруппаОтбора                 = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
    ГруппаОтбора.ТипГруппы       = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
    ГруппаОтбора.Использование   = Истина;
    
    ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидДвижения")).Поле;
    ЭлементОтбора.ПравоеЗначение = "1";
    
    ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидДвиженияУд")).Поле;
    ЭлементОтбора.ПравоеЗначение = "2";
    
    ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.Элементы.Найти("СальдоНачальное").Поле;
    ЭлементОтбора.ПравоеЗначение = 0;

	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.Элементы.Найти("СальдоКонечное").Поле;
    ЭлементОтбора.ПравоеЗначение = 0;
	
	
	ЗначениеОтбораСотрудника = Неопределено;
	ЕстьОтборПоФизЛицу = ложь;
	Для каждого ЭлементОтбора из Настройки.Отбор.Элементы Цикл
		
		// если отбор установлен по сотруднику
		Если ЭлементОтбора.Использование  И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = СписокПолейОтбора.Получить(1).Значение тогда
			Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
				ЗначениеОтбораСотрудника = ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
		
		//если отбор установлен по физлицу
		Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = СписокПолейОтбора.Получить(0).Значение тогда
			Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
				ЕстьОтборПоФизЛицу = истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьОтборПоФизЛицу И ЗначениеОтбораСотрудника <> Неопределено тогда
		
		ОтборПоФизЛицу                = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПоФизЛицу.ВидСравнения   = ЗначениеОтбораСотрудника.ВидСравнения;
		ОтборПоФизЛицу.Использование  = Истина;
		ОтборПоФизЛицу.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ФизЛицо")).Поле;
		
		Если ТипЗнч(ЗначениеОтбораСотрудника.ПравоеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") тогда
			ОтборПоФизЛицу.ПравоеЗначение = ЗначениеОтбораСотрудника.ПравоеЗначение.Физлицо;
		ИначеЕсли ТипЗнч(ЗначениеОтбораСотрудника.ПравоеЗначение) = Тип("СписокЗначений") тогда
			
			СписокЗначенийОтбораФизЛиц = Новый СписокЗначений;
			
			Для каждого ЭлементСписка из ЗначениеОтбораСотрудника.ПравоеЗначение Цикл
				Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") тогда
					СписокЗначенийОтбораФизЛиц.Добавить(ЭлементСписка.Значение.ФизЛицо);
				КонецЕсли;
			КонецЦикла;
			
			ОтборПоФизЛицу.ПравоеЗначение = СписокЗначенийОтбораФизЛиц;
			
		Иначе
			
			Настройки.Отбор.Элементы.Удалить(ОтборПоФизЛицу);
			
		КонецЕсли;
	КонецЕсли;
	
	// установим отборы в построителе запросов 
	Для каждого ЭлементОтбора из Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И СписокПолейОтбора.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение)<>Неопределено 
			тогда
			ВидСравненияОтбора = Неопределено;
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно тогда
				ВидСравненияОтбора = ВидСравнения.Равно;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке тогда
				ВидСравненияОтбора = ВидСравнения.ВСписке;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно тогда
				ВидСравненияОтбора = ВидСравнения.НеРавно;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии тогда
				ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии тогда
				ВидСравненияОтбора = ВидСравнения.ВИерархии;
			КонецЕсли;
			Если ВидСравненияОтбора <> Неопределено тогда 
				Имя = Строка(ЭлементОтбора.ЛевоеЗначение);
				ПостроительОтчетов.Отбор.Добавить(Имя);
				ПостроительОтчетов.Отбор[Имя].ВидСравнения  = ВидСравненияОтбора;
				Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
					ПостроительОтчетов.Отбор[Имя].Значение      = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
				ПостроительОтчетов.Отбор[Имя].Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// если отбор установлен по сотруднику
		Если ЭлементОтбора.Использование  И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = СписокПолейОтбора.Получить(1).Значение тогда
			Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
				ЗначениеОтбораСотрудника = ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
		
		//если отбор установлен по физлицу
		Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = СписокПолейОтбора.Получить(0).Значение тогда
			Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
				ЕстьОтборПоФизЛицу = истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним ТЗ "НачисленияУдержания"
	ЗаполнитьВнешнийИсточникДанных(ПостроительОтчетов, ВидРасчетногоЛистка);
	
	//Установить параметрыы расшифровки макета
	
	Для каждого МакетГруппировки из СхемаКомпоновкиДанных.МакетыГруппировок Цикл
		Если МакетГруппировки.ИмяГруппировки = "СтрокаНачисленийУдержаний" тогда
			ИмяМакетаСтрокаНачислений = МакетГруппировки.Макет;
		КонецЕсли;
		Если МакетГруппировки.ИмяГруппировки = "ДоходыВНатуральнойФормеВыплата" тогда
			ИмяМакетаДоходыВнатруальнойФорме = МакетГруппировки.Макет;
		КонецЕсли;

	КонецЦикла;
	
	СотрудникМесяц = Новый ПараметрКомпоновкиДанных("СотрудникМесяц");
	СотрудникМесяц1 = Новый ПараметрКомпоновкиДанных("СотрудникМесяц");
	
	МакетСтрокиНачисленийУдержаний = СхемаКомпоновкиДанных.Макеты.Найти(ИмяМакетаСтрокаНачислений);
	МакетСтрокиДоходовВыплат       = СхемаКомпоновкиДанных.Макеты.Найти(ИмяМакетаДоходыВнатруальнойФорме);
	
	ЯчейкиСтрокиНачисленийУдержаний = МакетСтрокиНачисленийУдержаний.Макет[0].Ячейки;
	ЯчейкиСтрокиДоходовВыплат       = МакетСтрокиДоходовВыплат.Макет[0].Ячейки;
	Для сч = 0 по 16 Цикл
		ЯчейкиСтрокиНачисленийУдержаний[Сч].Оформление.Элементы.Найти("Details").Значение = СотрудникМесяц;
		ЯчейкиСтрокиДоходовВыплат[Сч].Оформление.Элементы.Найти("Details").Значение       = СотрудникМесяц1;
	КонецЦикла;
	
	// создадим структуру с внешним набором данных
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("НачисленияУдержания", НачисленияУдержания);
	
	// получим макет компоновки данных
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	// создадим и инициализируем процессор компоновки данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	// очистим результирующий табличный документ
	Результат.Очистить();
	
	Если ВыводВФормуОтчета тогда
		ВыводЗаголовкаОтчета(Результат);
	КонецЕсли;
	
	// выведем отчет в табличный документ "Результат"
	ВывестиРезультатВТабличныйДокумент(ПроцессорКомпоновки, Результат, ВыводитьПоСтраницам);
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// удалим отбор пустых строк начислений
	Настройки.Отбор.Элементы.Удалить(ГруппаОтбора);
	Если ОтборПоФизЛицу <> Неопределено тогда
		Настройки.Отбор.Элементы.Удалить(ОтборПоФизЛицу);
	КонецЕсли;
	
	Если ВыводВФормуОтчета тогда
		ТиповыеОтчеты.УправлениеОтображениемЗаголовкаТиповогоОтчета(ЭтотОбъект, Результат);
	КонецЕсли;
	
   	Результат.Область(1, 1, 1, 1).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	
КонецПроцедуры

// Восстановление настройки печати табличного документа.
//
// Параметры:
//   ТабличныйДокумент – табличный документ.
//
Процедура ВосстановитьНастройкуТабличногоДокумента(ТабличныйДокумент) Экспорт
	
	Перем СтруктураПараметров;
	
	СтруктураПараметров = ВосстановитьЗначение("ПАРАМЕТРЫ_ПЕЧАТИ_РасчетногоЛисткаОрганизации");
	
	Если СтруктураПараметров = Неопределено тогда
		СтруктураПараметров = Новый Структура("ПолеСверху, ПолеСлева, ПолеСправа, ПолеСнизу, МасштабПечати, АвтоМасштаб");
		СтруктураПараметров.ПолеСверху    = 10;
		СтруктураПараметров.ПолеСлева     = 20;
		СтруктураПараметров.ПолеСправа    = 10;
		СтруктураПараметров.ПолеСнизу     = 10;
		СтруктураПараметров.МасштабПечати = 100;
		СтруктураПараметров.АвтоМасштаб   = истина;
	КонецЕсли;
	
	ТабличныйДокумент.ПолеСверху    = СтруктураПараметров.ПолеСверху;
	ТабличныйДокумент.ПолеСлева     = СтруктураПараметров.ПолеСлева;
	ТабличныйДокумент.ПолеСправа    = СтруктураПараметров.ПолеСправа;
	ТабличныйДокумент.ПолеСнизу     = СтруктураПараметров.ПолеСнизу;
	ТабличныйДокумент.МасштабПечати = ?(СтруктураПараметров.МасштабПечати = Неопределено, 100, СтруктураПараметров.МасштабПечати);
	ТабличныйДокумент.АвтоМасштаб   = СтруктураПараметров.АвтоМасштаб;

	
КонецПроцедуры

// Сохранение настроек печати табличного документа
//
// Параметры:
//   ТабличныйДокумент – табличный документ.
//
Процедура СохранитьНастройкуТабличногоДокумента(ТабличныйДокумент) Экспорт
	
	СтруктураПараметров = Новый Структура("ПолеСверху, ПолеСлева, ПолеСправа, ПолеСнизу, МасштабПечати, АвтоМасштаб");
	
	СтруктураПараметров.ПолеСверху    = ТабличныйДокумент.ПолеСверху;
	СтруктураПараметров.ПолеСлева     = ТабличныйДокумент.ПолеСлева;
	СтруктураПараметров.ПолеСправа    = ТабличныйДокумент.ПолеСправа;
	СтруктураПараметров.ПолеСнизу     = ТабличныйДокумент.ПолеСнизу;
	СтруктураПараметров.МасштабПечати = ТабличныйДокумент.МасштабПечати;
	СтруктураПараметров.АвтоМасштаб   = ТабличныйДокумент.АвтоМасштаб;
	
	СохранитьЗначение("ПАРАМЕТРЫ_ПЕЧАТИ_РасчетногоЛисткаОрганизации", СтруктураПараметров);
	
КонецПроцедуры	
	
// Вывод результата компоновки в табличный документ
//
Процедура ВывестиРезультатВТабличныйДокумент(ПроцессорКомпоновкиДанных, ТабличныйДокумент, ВыводитьПоСтраницам) Экспорт
	
	// Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);

	// Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	Состояние(НСТР("ru='Если Вы хотите прервать вывод отчета, нажмите Ctrl+Break'"));

	// Основной цикл вывода отчета
	Счетчик = 0;
	Пока Истина Цикл
		
		
		// Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		
		// Получим следующий элемент результата компоновки
		Если ЭлементРезультата = Неопределено Тогда
			
			// Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
			
		Иначе
			
			// Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
	Если ВыводитьПоСтраницам тогда
		РазбитьТабличныйДокументПоСтраницам(ТабличныйДокумент);
	КонецЕсли
	
КонецПроцедуры

// Разбивает табличный документ по страницам
//
// Параметры:
//  ТабличныйДокумент - ссылка на табличный документ.
//
Процедура РазбитьТабличныйДокументПоСтраницам(ТабличныйДокумент)
	
	Состояние(НСТР("ru='Разделение расчетных листков по страницам ...  (Если вы хотите прервать вывод отчета, нажмите Ctrl+Break)'"));
	
	ТабличныйДокументДляПроверки = Новый ТабличныйДокумент;
	ТабличныйДокументДляПроверки.Очистить();
	
	Для сч = 0 по НастройкаШириныКолонокРасчетногоЛистка.ВГраница() Цикл
		ОбластьКолонкиРЛ                  = ТабличныйДокументДляПроверки.Область(, сч+1, , сч+1);
		ОбластьКолонкиРЛ.ШиринаКолонки    = НастройкаШириныКолонокРасчетногоЛистка[сч];
		ОбластьКолонкиРЛ.РазмещениеТекста = ПолучитьТипРазмещенияТекста(НастройкаРазмТекстаКолонокРасчетногоЛистка[сч]);
	КонецЦикла;
	
	Для сч = 0 по НастройкаШириныКолонокРасчетногоЛистка.ВГраница() Цикл
		ОбластьКолонкиРЛ                  = ТабличныйДокумент.Область(, сч+1, , сч+1);
		ОбластьКолонкиРЛ.ШиринаКолонки    = НастройкаШириныКолонокРасчетногоЛистка[сч];
		ОбластьКолонкиРЛ.РазмещениеТекста = ПолучитьТипРазмещенияТекста(НастройкаРазмТекстаКолонокРасчетногоЛистка[сч]);
	КонецЦикла;

	ТабличныйДокументДляПроверки.АвтоМасштаб = Истина;

	
	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст("Расчетный листок");
	
	Если ОбластьПервойЯчейки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	НомерСтрокиНачалаРЛ = ОбластьПервойЯчейки.Верх;
	НомерСтрокиНачалаРЛ = НомерСтрокиНачалаРЛ - 1;
	
	ОбластьГруппировки = ТабличныйДокумент.Область(1, , НомерСтрокиНачалаРЛ - 2, );
	ОбластьПриемник    = ТабличныйДокументДляПроверки.Область(1, , НомерСтрокиНачалаРЛ - 2, );
	ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьГруппировки, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	ОбластьПоследнейЯчейки = ТабличныйДокумент.НайтиТекст("Долг за ");
	НомерСтрокиКонцаРЛ     = ОбластьПоследнейЯчейки.Верх + 1;
	
	ОбластьРЛ = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиКонцаРЛ, );
	ОбластьПриемник = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы+1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (НомерСтрокиКонцаРЛ - НомерСтрокиНачалаРЛ)+1, );
	ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьРЛ, ОбластьПриемник, , истина);
	
	ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст("Расчетный листок", ОбластьСлед);
	
	Пока ОбластьПервойЯчейки <> Неопределено Цикл
		
		
		Если ОбластьПервойЯчейки.Верх - НомерСтрокиКонцаРЛ > 2 тогда
		
			ОбластьГруппировки = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ + 1, , ОбластьПервойЯчейки.Верх - 1, );
			ОбластьПриемник    = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы + 1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (ОбластьПервойЯчейки.Верх - НомерСтрокиКонцаРЛ - 2) + 1, );
			ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьГруппировки, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
		КонецЕсли;
		
		НомерСтрокиНачалаРЛ    = ОбластьПервойЯчейки.Верх - 1;
		
		ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиНачалаРЛ, );
		ОбластьПоследнейЯчейки = ТабличныйДокумент.НайтиТекст("Долг за ", ОбластьСлед);
		НомерСтрокиКонцаРЛ     = ОбластьПоследнейЯчейки.Верх + 1;
		
		ОбластьРЛ = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиКонцаРЛ, );
		ОбластьПриемник = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы + 1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (НомерСтрокиКонцаРЛ - НомерСтрокиНачалаРЛ) + 1, );
		ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьРЛ, ОбластьПриемник, , истина);
		
		Если ТабличныйДокументДляПроверки.КоличествоСтраниц() > 1 тогда
			
			ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиНачалаРЛ,).НачалоСтраницы = истина;
			ТабличныйДокументДляПроверки.Очистить();
									   
			ОбластьПриемник = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы + 1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (НомерСтрокиКонцаРЛ - НомерСтрокиНачалаРЛ) + 1, );
			ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьРЛ, ОбластьПриемник, , истина);
			
		КонецЕсли;
		
		ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
		ОбластьПервойЯчейки    = ТабличныйДокумент.НайтиТекст("Расчетный листок", ОбластьСлед);
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТипРазмещенияТекста(ТипРазмещения)
	
	Если ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Выступать тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Авто;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Забивать тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Забивать;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Обрезать тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Переносить тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	КонецЕсли;
	
КонецФункции

// Заполняет таблицу значений "НачисленияУдержания" (внешний источник данных).
//
Процедура ЗаполнитьВнешнийИсточникДанных(ПостроительОтчетов, ВидРасчетногоЛистка) Экспорт 
	
	// Выполнить запрос 
 	ПостроительОтчетов.Выполнить();
	
	// Получим таблицу результатов запроса
	ТаблицаРезультатаЗапроса = ПостроительОтчетов.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	СведенияОВидахРасчета     = Новый Соответствие;
	
	// Сформировать таблицу значений
	НачисленияУдержания.Очистить();
	
	// Если вид расчетного листка подробный сформируем выборку с фактическими периодами действия начислений
	Если ВидРасчетногоЛистка = "Подробно" тогда
		// сформируем начальное и конечное сальдо
		Запрос = Новый Запрос;
		
		ФПДУсловиеТекст = 
		"ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации";
		ПолеОрганизация = Новый ПолеКомпоновкиДанных("Организация");
		ПолеФизЛицо     = Новый ПолеКомпоновкиДанных("ФизЛицо");
		ПолеСотрудник   = Новый ПолеКомпоновкиДанных("Сотрудник");
		
		Для каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			
			Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = ПолеОрганизация Тогда
				
				Запрос.УстановитьПараметр("Организация", ЭлементОтбора.ПравоеЗначение);
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ВидСравненияОрганизацииСтрокой = "=" 
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
					ВидСравненияОрганизацииСтрокой = "<>"
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					ВидСравненияОрганизацииСтрокой = "В"
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ 
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					ВидСравненияОрганизацииСтрокой = "В ИЕРАРХИИ"
				КонецЕсли; 
				
				ФПДУсловиеТекст = ФПДУсловиеТекст + " И Организация " + ВидСравненияОрганизацииСтрокой + " (&Организация)";
			КонецЕсли;  
			
			
			Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = ПолеФизЛицо Тогда
				
				Запрос.УстановитьПараметр("РаботникиОрганизации", ЭлементОтбора.ПравоеЗначение);
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ВидСравненияРаботник = "=" 
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
					ВидСравненияРаботник = "<>"
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					ВидСравненияРаботник = "В"
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ 
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					ВидСравненияРаботник = "В ИЕРАРХИИ"
				КонецЕсли; 
				
				ФПДУсловиеТекст = ФПДУсловиеТекст + " И Сотрудник.ФизЛицо " + ВидСравненияРаботник + " (&РаботникиОрганизации)";
			КонецЕсли; 
			
			Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = ПолеСотрудник И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
				
				Запрос.УстановитьПараметр("РаботникиОрганизации", ЭлементОтбора.ПравоеЗначение.ФизЛицо);
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ВидСравненияРаботник = "=" 
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
					ВидСравненияРаботник = "<>"
				КонецЕсли; 
				
				ФПДУсловиеТекст = ФПДУсловиеТекст + " И Сотрудник " + ВидСравненияРаботник + " (&РаботникиОрганизации)";
			КонецЕсли; 
			
		КонецЦикла;
		
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФактическийПериод.Регистратор КАК Регистратор,
		|	ФактическийПериод.НомерСтроки КАК НомерСтроки,
		|	ФактическийПериод.ПериодДействияНачало,
		|	ФактическийПериод.ПериодДействияКонец
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(" + ФПДУсловиеТекст + ") КАК ФактическийПериод
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	НомерСтроки,
		|	ПериодДействияНачало";
		
		Запрос.Текст = ТекстЗапроса;
		
		
		ДатаНач = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода").Значение;
		ДатаКон = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода").Значение;
		Запрос.УстановитьПараметр("ПериодРегистрации", 	  	 ДатаНач);
		Запрос.УстановитьПараметр("КонецПериодаРегистрации", ДатаКон);
		ВыборкаПоФПД = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
	
	// Заполним таблицу значений
	Для каждого СтрокаОрганизация  из ТаблицаРезультатаЗапроса.Строки Цикл
		Для каждого СтрокаПериодаРегистрации из СтрокаОрганизация.Строки Цикл
			Для каждого СтрокаФизЛицо из СтрокаПериодаРегистрации.Строки Цикл
				
				Выполнился = истина;
				
				// Получим таблицы значений по каждой из частей расчетного листка
				Начисления              = СтрокаФизЛицо.Строки.Найти("Начислено", "ВидДвижения");
				Удержания               = СтрокаФизЛицо.Строки.Найти("Удержано", "ВидДвижения");
				ДоходыВНатуральнойФорме = СтрокаФизЛицо.Строки.Найти("ДоходыВНатуральнойФорме", "ВидДвижения");
				Выплачено              	= СтрокаФизЛицо.Строки.Найти("Выплата", "ВидДвижения");
				Сальдо                  = СтрокаФизЛицо.Строки.Найти("Сальдо", "ВидДвижения");
				
				// Определим максимальное количество строк из таблиц начислений и удержания
				КолВоСтрокНачислений = ?(Начисления <> Неопределено, Начисления.Строки.Количество(), 0)- 1;
				КолВоСтрокУдержаний  = ?(Удержания <> Неопределено, Удержания.Строки.Количество(), 0) - 1; 
				МаксКолвоСтрок = Макс(КолВоСтрокНачислений, КолВоСтрокУдержаний); 
				
				//Проверяем количество строк в отчет
				Если Сальдо <> Неопределено И Сальдо.Строки.Количество()> 0 тогда
					СтрокаСальдо = Сальдо.Строки[0];
					СальдоКон = СтрокаСальдо.СальдоКонечное;
					СальдоНач = СтрокаСальдо.СальдоНачальное;
				Иначе
					СальдоКон = 0;
					СальдоНач = 0;
				КОнецЕсли; 
				
				Если МаксКолвоСтрок = -1 И СтрокаСальдо <> Неопределено тогда
					СтрокаНачисленияУдержания                            = НачисленияУдержания.Добавить();
					СтрокаНачисленияУдержания.ВидДвижения                = "3";
					СтрокаНачисленияУдержания.ПризнакУпорядочиванияСтрок = 999;
					СтрокаНачисленияУдержания.СальдоНачальное   = СальдоНач;
					СтрокаНачисленияУдержания.СальдоКонечное    = СальдоКон;
				КонецЕсли;
				
				
				// Перенесем таблицы начисления  значений в таблицу внешнего источника данных 
				Сч = 0;
				
				Пока Сч <= МаксКолвоСтрок Цикл
					
					НомерСтрокиНачисления = 0;
					РегистраторНачисления = "";
					
					// Добавим строку и заполним значений колонок
					СтрокаНачисленияУдержания                            = НачисленияУдержания.Добавить();
					СтрокаНачисленияУдержания.ВидДвижения                = "1";
					СтрокаНачисленияУдержания.ПризнакУпорядочиванияСтрок = Сч;
					СтрокаНачисленияУдержания.СальдоНачальное   = СальдоНач;
					СтрокаНачисленияУдержания.СальдоКонечное    = СальдоКон;
				
					
					Если Сч <= КолВоСтрокНачислений тогда
						СтрокаНачисленияУдержания.Сотрудник         = Начисления.Строки[Сч].Сотрудник;
						СтрокаНачисленияУдержания.ФизЛицо           = Начисления.Строки[Сч].Сотрудник.ФизЛицо;
						СтрокаНачисленияУдержания.Организация       = Начисления.Строки[Сч].Организация;
						СтрокаНачисленияУдержания.ПериодРегистрации = Начисления.Строки[Сч].ПериодРегистрации;
						
						// Если вид расчетного листка подробный, то добавим к начислению периоды действия и показатели
						Если ВидРасчетногоЛистка = "Подробно" И ТипЗнч(Начисления.Строки[Сч].ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") тогда
							
							ВидРасчета = Начисления.Строки[Сч].ВидРасчета;
							
							ВидНачисленияНаименование = Строка(ВидРасчета) + Начисления.Строки[Сч].ДополнениеКВидуРасчета;
							
							НомерСтрокиНачисления = Начисления.Строки[Сч].НомерСтроки;
							РегистраторНачисления = Начисления.Строки[Сч].Регистратор;
							НачалоПериодаДействия = Начисления.Строки[Сч].ПериодДействияНачало;
							КонецПериодаДействия  = Начисления.Строки[Сч].ПериодДействияКонец;
							СчДобавленныхСтрок = 1;
							СведенияОВидеРасчета = РаботаСДиалогами.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета);
							ПервыйРаз = истина;
							
							Для СчПоказатель = 1 по СведенияОВидеРасчета["КоличествоПоказателей"] Цикл
								Если СведенияОВидеРасчета["Показатель"+СчПоказатель+"НаименованиеВидимость"] И СведенияОВидеРасчета["Показатель" + СчПоказатель + "Наименование"] <> Null тогда
									Если ПервыйРаз тогда
										ВидНачисленияНаименование = ВидНачисленияНаименование + Символы.ПС + " показатели:";
										ПервыйРаз                 = ложь;
									КонецЕсли;
									ВидНачисленияНаименование = ВидНачисленияНаименование + Символы.ПС + " " + СведенияОВидеРасчета["Показатель" + СчПоказатель + "Наименование"] + " - " + Начисления.Строки[Сч]["Показатель"+СчПоказатель];
								КонецЕсли;                                                                  
							КонецЦикла;
							
							СтрокаНачисленияУдержания.НачисленияУдержанияВидНачисления = ВидНачисленияНаименование;
							
							ВыборкаПоФПД.Сбросить();
							
							Если ВыборкаПоФПД.НайтиСледующий(Новый Структура("Регистратор, НомерСтроки", РегистраторНачисления, НомерСтрокиНачисления)) Тогда
								Если (ВыборкаПоФПД.ПериодДействияНачало <> НачалоПериодаДействия) или (ВыборкаПоФПД.ПериодДействияКонец <> КонецПериодаДействия) Тогда
									
									СтрокаНачислений                      = Начисления.Строки.Вставить(Сч+СчДобавленныхСтрок);
									СтрокаНачислений.ВидРасчета           = "  оплачены периоды:";
									СтрокаНачислений.Сотрудник            = Начисления.Строки[Сч].Сотрудник;
									СтрокаНачислений.ФизЛицо              = Начисления.Строки[Сч].Сотрудник.ФизЛицо;
									СтрокаНачислений.Организация          = Начисления.Строки[Сч].Организация;
									СтрокаНачислений.ПериодРегистрации    = Начисления.Строки[Сч].ПериодРегистрации;
									СтрокаНачислений.ПериодДействияНачало = ВыборкаПоФПД.ПериодДействияНачало;
									СтрокаНачислений.ПериодДействияКонец  = ВыборкаПоФПД.ПериодДействияКонец;
									КолВоСтрокНачислений                  = КолВоСтрокНачислений + 1;
									МаксКолвоСтрок                      = МаксКолвоСтрок + 1;
									СчДобавленныхСтрок                    = СчДобавленныхСтрок + 1;
									
									Пока ВыборкаПоФПД.Следующий() Цикл
										
										Если ВыборкаПоФПД.НомерСтроки <> НомерСтрокиНачисления или ВыборкаПоФПД.Регистратор <> РегистраторНачисления Тогда
											Прервать;
										КонецЕсли;
										
										СтрокаНачислений                      = Начисления.Строки.Вставить(Сч+СчДобавленныхСтрок);
										СтрокаНачислений.ВидРасчета           = "";
										СтрокаНачислений.Сотрудник            = Начисления.Строки[Сч].Сотрудник;
										СтрокаНачислений.ФизЛицо              = Начисления.Строки[Сч].Сотрудник.ФизЛицо;
										СтрокаНачислений.Организация          = Начисления.Строки[Сч].Организация;
										СтрокаНачислений.ПериодРегистрации    = Начисления.Строки[Сч].ПериодРегистрации;
										СтрокаНачислений.ПериодДействияНачало = ВыборкаПоФПД.ПериодДействияНачало;
										СтрокаНачислений.ПериодДействияКонец  = ВыборкаПоФПД.ПериодДействияКонец;
										КолВоСтрокНачислений                  = КолВоСтрокНачислений + 1;
										МаксКолвоСтрок                      = МаксКолвоСтрок + 1;
										СчДобавленныхСтрок                    = СчДобавленныхСтрок + 1;
										
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						Иначе
							СтрокаНачисленияУдержания.НачисленияУдержанияВидНачисления = Начисления.Строки[Сч].ВидРасчета;
						КонецЕсли;
						СтрокаНачисленияУдержания.НачисленияУдержанияОтработанныеДни   = Начисления.Строки[Сч].ОтработаноДней;
						СтрокаНачисленияУдержания.НачисленияУдержанияОтработанныеЧасы  = Начисления.Строки[Сч].ОтработаноЧасов;
						СтрокаНачисленияУдержания.НачисленияУдержанияОплаченныеДни     = Начисления.Строки[Сч].ОплаченоДней;
						СтрокаНачисленияУдержания.НачисленияУдержанияОплаченныеЧасы    = Начисления.Строки[Сч].ОплаченоЧасов;
						СтрокаНачисленияУдержания.НачисленияУдержанияСуммаНачисления   = Начисления.Строки[Сч].Результат;
						
						Если ВидРасчетногоЛистка = "Подробно" и ТипЗнч(Начисления.Строки[Сч].ПериодДействияНачало) = Тип("Дата") тогда
							СтрокаНачисленияУдержания.НачисленияУдержанияПериодНачисления = ОбщегоНазначения.ОписаниеПериода(Начисления.Строки[Сч].ПериодДействияНачало, Начисления.Строки[Сч].ПериодДействияКонец);
						КонецЕсли;
						
					КонецЕсли;
					
					// Добавим строку 2-го раздела
					Если Сч <= КолВоСтрокУдержаний тогда
						
						СтрокаНачисленияУдержания.Сотрудник                            = Удержания.Строки[Сч].Сотрудник;
						СтрокаНачисленияУдержания.ФизЛицо                              = Удержания.Строки[Сч].Сотрудник.ФизЛицо;
						СтрокаНачисленияУдержания.Организация                          = Удержания.Строки[Сч].Организация;
						СтрокаНачисленияУдержания.ПериодРегистрации                    = Удержания.Строки[Сч].ПериодРегистрации;
						СтрокаНачисленияУдержания.НачисленияУдержанияВидУдержания      = Удержания.Строки[Сч].ВидРасчета; 
						
						Если ВидРасчетногоЛистка = "Подробно" тогда
							СтрокаНачисленияУдержания.НачисленияУдержанияПериодУдержания = ОбщегоНазначения.ОписаниеПериода(Удержания.Строки[Сч].ПериодДействияНачало, Удержания.Строки[Сч].ПериодДействияКонец);
						КонецЕсли;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияСуммаУдержания    = Удержания.Строки[Сч].Результат;
						
					КонецЕсли;
					
					Сч = Сч + 1;
					
				КонецЦикла;
				
				КолВоСтрокДоходыВНатуральнойФорме = ?(ДоходыВНатуральнойФорме <> Неопределено, ДоходыВНатуральнойФорме.Строки.Количество(), 0)-1;
				КолВоСтрокВыплачено               = ?(Выплачено <> Неопределено, Выплачено.Строки.Количество(), 0)-1;
				
				Если МаксКолвоСтрок = -1 И Макс(КолВоСтрокДоходыВНатуральнойФорме, КолВоСтрокВыплачено) = -1 тогда
					СтрокаНачисленияУдержания                            = НачисленияУдержания.Добавить();
					СтрокаНачисленияУдержания.ВидДвижения                = "3";
					СтрокаНачисленияУдержания.ПризнакУпорядочиванияСтрок = 0;
					СтрокаНачисленияУдержания.Сотрудник         = СтрокаФизЛицо.Сотрудник;
					Если ЗначениеЗаполнено(СтрокаФизЛицо.Сотрудник) тогда
						СтрокаНачисленияУдержания.ФизЛицо           = СтрокаФизЛицо.Сотрудник.ФизЛицо;
					КонецЕсли;	
					СтрокаНачисленияУдержания.Организация       = СтрокаФизЛицо.Организация;
					СтрокаНачисленияУдержания.ПериодРегистрации = СтрокаФизЛицо.ПериодРегистрации;
					СтрокаНачисленияУдержания.СальдоНачальное   = СальдоНач;
					СтрокаНачисленияУдержания.СальдоКонечное    = СальдоКон;
				КонецЕсли;
				
				МаксКолвоСтрок = Макс(КолВоСтрокДоходыВНатуральнойФорме, КолВоСтрокВыплачено);
				
				

				// заполним строки 3-го и 4-го разделов
				Для Сч = 0 по МаксКолвоСтрок Цикл
					
					СтрокаНачисленияУдержания = НачисленияУдержания.Добавить();
					СтрокаНачисленияУдержания.ВидДвиженияУд = "2";
					
					СтрокаНачисленияУдержания.СальдоНачальное = СальдоНач;
					СтрокаНачисленияУдержания.СальдоКонечное  = СальдоКон;
					
					Если Сч <= КолВоСтрокДоходыВНатуральнойФорме тогда
						
						СтрокаНачисленияУдержания.Сотрудник                            = ДоходыВНатуральнойФорме.Строки[Сч].Сотрудник;
						СтрокаНачисленияУдержания.ФизЛицо                              = ДоходыВНатуральнойФорме.Строки[Сч].Сотрудник.ФизЛицо;
						СтрокаНачисленияУдержания.Организация                          = ДоходыВНатуральнойФорме.Строки[Сч].Организация;
						СтрокаНачисленияУдержания.ПериодРегистрации                    = ДоходыВНатуральнойФорме.Строки[Сч].ПериодРегистрации;
						
						Если ВидРасчетногоЛистка = "Подробно" тогда
							СтрокаНачисленияУдержания.НачисленияУдержанияВидНачисления = Строка(ДоходыВНатуральнойФорме.Строки[Сч].ВидРасчета) + ДоходыВНатуральнойФорме.Строки[Сч].ДополнениеКВидуРасчета;
						Иначе
							СтрокаНачисленияУдержания.НачисленияУдержанияВидНачисления = ДоходыВНатуральнойФорме.Строки[Сч].ВидРасчета;
						КонецЕсли;
						
						Если ВидРасчетногоЛистка = "Подробно" тогда
							СтрокаНачисленияУдержания.НачисленияУдержанияПериодНачисления = ОбщегоНазначения.ОписаниеПериода(ДоходыВНатуральнойФорме.Строки[Сч].ПериодДействияНачало, ДоходыВНатуральнойФорме.Строки[Сч].ПериодДействияКонец);
						КонецЕсли;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияОтработанныеДни   = ДоходыВНатуральнойФорме.Строки[Сч].ОтработаноДней;
						СтрокаНачисленияУдержания.НачисленияУдержанияОтработанныеЧасы  = ДоходыВНатуральнойФорме.Строки[Сч].ОтработаноЧасов;
						СтрокаНачисленияУдержания.НачисленияУдержанияОплаченныеДни     = ДоходыВНатуральнойФорме.Строки[Сч].ОплаченоДней;
						СтрокаНачисленияУдержания.НачисленияУдержанияОплаченныеЧасы    = ДоходыВНатуральнойФорме.Строки[Сч].ОплаченоЧасов;
						СтрокаНачисленияУдержания.НачисленияУдержанияСуммаНачисления   = ДоходыВНатуральнойФорме.Строки[Сч].Результат;
						
					КонецЕсли;
					
					Если Сч <= КолВоСтрокВыплачено тогда
						
						СтрокаНачисленияУдержания.Сотрудник                            = Выплачено.Строки[Сч].Сотрудник;
						СтрокаНачисленияУдержания.ФизЛицо                              = Выплачено.Строки[Сч].Сотрудник.ФизЛицо;
						СтрокаНачисленияУдержания.Организация                          = Выплачено.Строки[Сч].Организация;
						СтрокаНачисленияУдержания.ПериодРегистрации                    = Выплачено.Строки[Сч].ПериодРегистрации;
						СтрокаНачисленияУдержания.НачисленияУдержанияВидУдержания      = Выплачено.Строки[Сч].ВидРасчета; 
						
						Если ВидРасчетногоЛистка = "Подробно" тогда
							СтрокаНачисленияУдержания.НачисленияУдержанияПериодУдержания = ОбщегоНазначения.ОписаниеПериода(Выплачено.Строки[Сч].ПериодДействияНачало, Выплачено.Строки[Сч].ПериодДействияКонец);
						КонецЕсли;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияСуммаУдержания    = Выплачено.Строки[Сч].Результат;
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры


// Настраивает построитель запросов
//
Процедура НастроитьПостроительЗапросов(ПостроительОтчетов, ВидРасчетногоЛистка) Экспорт
	
	ДатаНач = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода").Значение;
	ДатаКон = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода").Значение;
	
	// Заполнить параметры построителя запросов
	ПостроительОтчетов.Параметры.Вставить("парамПустаяОрганизация", 	Справочники.Организации.ПустаяСсылка());
	ПостроительОтчетов.Параметры.Вставить("ПериодРегистрации", 	  	    ДатаНач);
	ПостроительОтчетов.Параметры.Вставить("КонецПериодаРегистрации", 	КонецДня(ДатаКон));
	
	ПостроительОтчетов.Параметры.Вставить("Расход", 					ВидДвиженияНакопления.Расход);
	ПостроительОтчетов.Параметры.Вставить("Приход", 					ВидДвиженияНакопления.Приход);
	ПостроительОтчетов.Параметры.Вставить("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	ПостроительОтчетов.Параметры.Вставить("ЗанятостьНеУказана",		    Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка());
	ПостроительОтчетов.Параметры.Вставить("Прием",						Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	Авансы = Новый Массив;
	Авансы.Добавить(Перечисления.ХарактерВыплатыЗарплаты.Аванс);
	
	ПостроительОтчетов.Параметры.Вставить("Аванс",			  Авансы);
	ПостроительОтчетов.Параметры.Вставить("Расчет",		      Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
	ПостроительОтчетов.Параметры.Вставить("ХарактерНеУказан", Перечисления.ХарактерВыплатыЗарплаты.ПустаяСсылка());
	ПостроительОтчетов.Параметры.Вставить("ЧерезКассу",	      Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
	ПостроительОтчетов.Параметры.Вставить("ЧерезБанк",		  Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
	ПостроительОтчетов.Параметры.Вставить("ПустаяКатегория",  Справочники.КатегорииДолжностей.ПустаяСсылка());
	ПостроительОтчетов.Параметры.Вставить("ПустаяДолжность",  Справочники.ДолжностиОрганизаций.ПустаяСсылка());
	ПостроительОтчетов.Параметры.Вставить("СпособРасчетаВзносы",  Перечисления.СпособыРасчетаОплатыТруда.Взносы);
	
	ТекстНеполаченоФСС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтметкаНеоплаченныхНачисленийФССВРасчетныхЛистках");
	
	Если ТекстНеполаченоФСС <> "" Тогда
		ЗапросФСС = Новый Запрос();
		ЗапросФСС.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросФСС.УстановитьПараметр("ПериодРегистрации", 	  	    ДатаНач);
		ЗапросФСС.УстановитьПараметр("КонецПериодаРегистрации", 	КонецДня(ДатаКон));
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| ОсновныеНачисленияРаботниковОрганизации.Регистратор КАК Документ
		|ПОМЕСТИТЬ ВТНачисленияФСС
		|ИЗ
		| РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
		|ГДЕ
		| ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		| И ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.НачислениеЗаСчетФСС
		| И ОсновныеНачисленияРаботниковОрганизации.Результат <> 0
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		ЗапросФСС.Выполнить();
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| ВзаиморасчетыФСС.Документ КАК Документ
		|ПОМЕСТИТЬ ВТПолученоОтФСС
		|ИЗ  РегистрНакопления.ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыФСС
		|ГДЕ
		|	ВзаиморасчетыФСС.Документ.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации 
		|	И ВзаиморасчетыФСС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		ЗапросФСС.Выполнить();
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| НачисленияФСС.Документ КАК Документ
		|ИЗ  ВТНачисленияФСС КАК НачисленияФСС
		| ЛЕВОЕ СОЕДИНЕНИЕ
		| ВТПолученоОтФСС КАК ПолученоОтФСС
		| ПО НачисленияФСС.Документ = ПолученоОтФСС.Документ
		|ГДЕ
		|	ПолученоОтФСС.Документ ЕСТЬ NULL
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		НеоплаченоФСС = ЗапросФСС.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
		ТекстНеполаченоФСС = " " + ТекстНеполаченоФСС;
	Иначе
		НеоплаченоФСС = Новый Массив();
	КонецЕсли;	
	ПостроительОтчетов.Параметры.Вставить("НеоплаченоФСС",  НеоплаченоФСС);
	ПостроительОтчетов.Параметры.Вставить("ТекстНеполаченоФСС",  ТекстНеполаченоФСС);
	
	
	// Присвоим текст запроса в зависимости от типа расчетного листка
	Если ВидРасчетногоЛистка = "Кратко" тогда
		
		ТекстПостроителя = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияУдержания.ВидДвижения КАК ВидДвижения,
		|	НачисленияУдержания.Сотрудник КАК Сотрудник,
		|	НачисленияУдержания.ФизЛицо КАК ФизЛицо,
		|	НачисленияУдержания.Организация КАК Организация,
		|	НачисленияУдержания.ПериодРегистрации КАК ПериодРегистрации,
		|	НачисленияУдержания.ВидРасчета КАК ВидРасчета,
		|	НачисленияУдержания.ПорядокВидаРасчета КАК ПорядокВидаРасчета,
		|	НачисленияУдержания.ОтработаноДней КАК ОтработаноДней,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
		|	РаботникиОрганизацийСрезПоследних.Должность.Категория КАК КатегорияДолжности,
		|	РаботникиОрганизацийСрезПоследних.ВидДоговора КАК ВидДоговора,
		|	НачисленияУдержания.ОтработаноЧасов,
		|	НачисленияУдержания.ОплаченоДней,
		|	НачисленияУдержания.ОплаченоЧасов,
		|	НачисленияУдержания.Результат,
		|	НачисленияУдержания.СальдоНачальное,
		|	НачисленияУдержания.СальдоКонечное
		|ИЗ
		|	(ВЫБРАТЬ
		|		""Начислено"" КАК ВидДвижения,
		|		ОсновныеНачисленияРаботниковОрганизации.Организация КАК Организация,
		|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации КАК ПериодРегистрации,
		|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
		|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
		|		ВЫБОР КОГДА ОсновныеНачисленияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ЗаменыОрганизаций 
		|				И ОсновныеНачисленияРаботниковОрганизации.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Замещение)
		|				ТОГДА ""Замена: ""
		|			 КОГДА ОсновныеНачисленияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ЗаменыОрганизаций 
		|				И ОсновныеНачисленияРаботниковОрганизации.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Совмещение)
		|				ТОГДА ""Совмещение: ""
		|				ИНАЧЕ """"
		|		КОНЕЦ
		|		 + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
		|			КОГДА ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизации.Назначение.ВидЗанятости, &ЗанятостьНеУказана) <> &ВнутреннееСовместительство
		|				ТОГДА """"
		|			ИНАЧЕ "" (по внутр. совмест-ву)"" 
		|		КОНЕЦ
		|		 + ВЫБОР
		|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.НачислениеЗаСчетФСС И ОсновныеНачисленияРаботниковОрганизации.Регистратор В (&НеоплаченоФСС)
		|				ТОГДА &ТекстНеполаченоФСС
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК ВидРасчета,
		|		""А"" + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Код КАК ПорядокВидаРасчета,
		|		СУММА(ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней) КАК ОтработаноДней,
		|		СУММА(ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов) КАК ОтработаноЧасов,
		|		СУММА(ВЫБОР
		|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимДням)
		|					ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоКалендарнымДням)
		|					ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками)
		|					ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
		|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
		|					ТОГДА 0
		|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|					ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ОплаченоДней,
		|		СУММА(ВЫБОР
		|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимДням)
		|					ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоКалендарнымДням)
		|					ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками)
		|					ТОГДА 0
		|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
		|					ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
		|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|					ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
		|					ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы)
		|					ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ОплаченоЧасов,
		|		СУММА(ОсновныеНачисленияРаботниковОрганизации.Результат) КАК Результат,
		|		NULL КАК СальдоНачальное,
		|		NULL КАК СальдоКонечное
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
		|	ГДЕ
		|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И (НЕ(ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней = 0
		|					И ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов = 0
		|					И ВЫБОР
		|						КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|							ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
		|						ИНАЧЕ 0
		|					КОНЕЦ = 0
		|					И ВЫБОР
		|						КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|							ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
		|							ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы)
		|							ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
		|						ИНАЧЕ 0
		|					КОНЕЦ = 0
		|					И ОсновныеНачисленияРаботниковОрганизации.Результат = 0))
		|	{ГДЕ
		|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник,
		|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо,
		|		ОсновныеНачисленияРаботниковОрганизации.Организация КАК Организация}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		""Начислено"",
		|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации,
		|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник,
		|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо,
		|		ВЫБОР КОГДА ОсновныеНачисленияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ЗаменыОрганизаций 
		|				И ОсновныеНачисленияРаботниковОрганизации.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Замещение)
		|				ТОГДА ""Замена: ""
		|			 КОГДА ОсновныеНачисленияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ЗаменыОрганизаций 
		|				И ОсновныеНачисленияРаботниковОрганизации.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Совмещение)
		|				ТОГДА ""Совмещение: ""
		|				ИНАЧЕ """"
		|		КОНЕЦ
		|		+ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
		|			КОГДА ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизации.Назначение.ВидЗанятости, &ЗанятостьНеУказана) <> &ВнутреннееСовместительство
		|				ТОГДА """"
		|			ИНАЧЕ "" (по внутр. совмест-ву)""
		|		КОНЕЦ
		|		 + ВЫБОР
		|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.НачислениеЗаСчетФСС И ОсновныеНачисленияРаботниковОрганизации.Регистратор В (&НеоплаченоФСС)
		|				ТОГДА &ТекстНеполаченоФСС
		|			ИНАЧЕ """"
		|		КОНЕЦ,
		|		""А"" + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Код,
		|		ОсновныеНачисленияРаботниковОрганизации.Организация
		|	
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Удержано"",
		|		УдержанияРаботниковОрганизации.Организация,
		|		УдержанияРаботниковОрганизации.ПериодРегистрации,
		|		УдержанияРаботниковОрганизации.Сотрудник,
		|		УдержанияРаботниковОрганизации.Сотрудник.ФизЛицо,
		|		"""" + УдержанияРаботниковОрганизации.ВидРасчета.Наименование,
		|		""А"" + УдержанияРаботниковОрганизации.ВидРасчета.Код,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(УдержанияРаботниковОрганизации.Результат),
		|		NULL,
		|		NULL
		|	ИЗ
		|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
		|	ГДЕ
		|		УдержанияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И УдержанияРаботниковОрганизации.Результат <> 0
		|	{ГДЕ
		|		УдержанияРаботниковОрганизации.Сотрудник,
		|		УдержанияРаботниковОрганизации.Сотрудник.ФизЛицо,
		|		УдержанияРаботниковОрганизации.Организация}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		УдержанияРаботниковОрганизации.ПериодРегистрации,
		|		УдержанияРаботниковОрганизации.Сотрудник,
		|		УдержанияРаботниковОрганизации.Сотрудник.ФизЛицо,
		|		"""" + УдержанияРаботниковОрганизации.ВидРасчета.Наименование,
		|		""А"" + УдержанияРаботниковОрганизации.ВидРасчета.Код,
		|		УдержанияРаботниковОрганизации.Организация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Удержано"",
		|		ВзносыВФонды.Организация,
		|		ВзносыВФонды.ПериодРегистрации,
		|		ВзносыВФонды.Сотрудник,
		|		ВзносыВФонды.Сотрудник.ФизЛицо,
		|		ВЫБОР КОГДА ВзносыВФонды.ВидРасчета.ЕСВ
		|		 ТОГДА ""ЕСВ""
		|		 ИНАЧЕ """" + ВзносыВФонды.ВидРасчета.Наименование
		|		КОНЕЦ,
		|		ВЫБОР КОГДА ВзносыВФонды.ВидРасчета.ЕСВ
		|		 ТОГДА ""Б""
		|		 ИНАЧЕ ""Б"" + ВзносыВФонды.ВидРасчета.Код
		|		КОНЕЦ,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(ВзносыВФонды.Результат),
		|		NULL,
		|		NULL
		|	ИЗ
		|		РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
		|	ГДЕ
		|		ВзносыВФонды.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И ВзносыВФонды.ВидРасчета.СпособРасчета=&СпособРасчетаВзносы
		|		И ВзносыВФонды.Результат <> 0
		|	{ГДЕ
		|		ВзносыВФонды.Сотрудник,
		|		ВзносыВФонды.Сотрудник.ФизЛицо,
		|		ВзносыВФонды.Организация}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВзносыВФонды.ПериодРегистрации,
		|		ВзносыВФонды.Сотрудник,
		|		ВзносыВФонды.Сотрудник.ФизЛицо,
		|		ВЫБОР КОГДА ВзносыВФонды.ВидРасчета.ЕСВ
		|		 ТОГДА ""ЕСВ""
		|		 ИНАЧЕ """" + ВзносыВФонды.ВидРасчета.Наименование
		|		КОНЕЦ,
		|		ВЫБОР КОГДА ВзносыВФонды.ВидРасчета.ЕСВ
		|		 ТОГДА ""Б""
		|		 ИНАЧЕ ""Б"" + ВзносыВФонды.ВидРасчета.Код
		|		КОНЕЦ,
		|		ВзносыВФонды.Организация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Удержано"",
		|		ВзаиморасчетыПоНДФЛ.Организация,
		|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период, МЕСЯЦ),
		|		ВзаиморасчетыПоНДФЛ.Сотрудник,
		|		ВзаиморасчетыПоНДФЛ.Сотрудник.ФизЛицо,
		|		""НДФЛ"",
		|		""В"",
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(ВзаиморасчетыПоНДФЛ.Налог),
		|		NULL,
		|		NULL
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
		|	ГДЕ
		|		ВзаиморасчетыПоНДФЛ.ВидДвижения = &Приход
		|		И ВзаиморасчетыПоНДФЛ.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И ВзаиморасчетыПоНДФЛ.Налог <> 0
		|		И ВзаиморасчетыПоНДФЛ.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций
		|	{ГДЕ
		|		ВзаиморасчетыПоНДФЛ.Сотрудник,
		|		ВзаиморасчетыПоНДФЛ.Сотрудник.ФизЛицо,
		|		ВзаиморасчетыПоНДФЛ.Организация КАК Организация}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период, МЕСЯЦ),
		|		ВзаиморасчетыПоНДФЛ.Сотрудник,
		|		ВзаиморасчетыПоНДФЛ.Сотрудник.ФизЛицо,
		|		ВзаиморасчетыПоНДФЛ.Организация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Удержано"",
		|		ПогашениеЗаймовРаботникамиОрганизаций.Организация,
		|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
		|		ПогашениеЗаймовРаботникамиОрганизаций.сотрудник,
		|		ПогашениеЗаймовРаботникамиОрганизаций.сотрудник.ФизЛицо,
		|		""Погашение займа"",
		|		""Г"",
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(ПогашениеЗаймовРаботникамиОрганизаций.ОсновнойДолг + ПогашениеЗаймовРаботникамиОрганизаций.Проценты),
		|		NULL,
		|		NULL
		|	ИЗ
		|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОрганизаций
		|	ГДЕ
		|		ПогашениеЗаймовРаботникамиОрганизаций.ВидДвижения = &Расход
		|		И ПогашениеЗаймовРаботникамиОрганизаций.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И ПогашениеЗаймовРаботникамиОрганизаций.УдержаноИзЗарплаты
		|		И ПогашениеЗаймовРаботникамиОрганизаций.ОсновнойДолг + ПогашениеЗаймовРаботникамиОрганизаций.Проценты <> 0
		|	{ГДЕ
		|		ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник,
		|		ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник.ФизЛицо}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПогашениеЗаймовРаботникамиОрганизаций.ДоговорЗайма,
		|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
		|		ПогашениеЗаймовРаботникамиОрганизаций.Организация,
		|		ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник,
		|		ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник.ФизЛицо
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Выплата"",
		|		Взаиморасчеты.Организация,
		|		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
		|		Взаиморасчеты.Сотрудник,
		|		Взаиморасчеты.Сотрудник.Физлицо,
		|		ВЫБОР
		|			КОГДА (НЕ Взаиморасчеты.Регистратор ССЫЛКА Документ.ЗарплатаКВыплатеОрганизаций)
		|				ТОГДА Взаиморасчеты.Ведомость.ВидВыплаты
		|			ИНАЧЕ ""Задепонировано""
		|		КОНЕЦ,
		|		""Г1"",
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(Взаиморасчеты.СуммаВзаиморасчетов -  Взаиморасчеты.СуммаОкругления),
		|		NULL,
		|		NULL
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
		|	ГДЕ
		//|		Взаиморасчеты.ВидДвижения = &Расход
		|		(Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ (Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата))
		|		И Взаиморасчеты.СуммаВзаиморасчетов <> 0
		|		И Взаиморасчеты.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|	{ГДЕ
		|		Взаиморасчеты.Сотрудник,
		|		Взаиморасчеты.Сотрудник.Физлицо,
		|		Взаиморасчеты.Организация}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Взаиморасчеты.Организация,
		|		Взаиморасчеты.Сотрудник,
		|		Взаиморасчеты.Сотрудник.Физлицо,
		|		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
		|		ВЫБОР
		|			КОГДА (НЕ Взаиморасчеты.Регистратор ССЫЛКА Документ.ЗарплатаКВыплатеОрганизаций)
		|				ТОГДА Взаиморасчеты.Ведомость.ВидВыплаты
		|			ИНАЧЕ ""Задепонировано""
		|		КОНЕЦ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""Сальдо"",
		|		Сальдо.Организация,
		|		Периоды.ПериодРегистрации,
		|		Сальдо.Сотрудник,
		|		Сальдо.Физлицо,
		|		"""",
		|		""Я"",
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		СУММА(ВЫБОР
		|				КОГДА Сальдо.Период < Периоды.ПериодРегистрации
		|					ТОГДА Сальдо.СуммаВзаиморасчетовОстаток
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА Сальдо.Период <= Периоды.ПериодРегистрации
		|					ТОГДА Сальдо.СуммаВзаиморасчетовОстаток
		|				ИНАЧЕ 0
		|			КОНЕЦ)
		|	ИЗ
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации) КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация КАК Организация,
		|				ДОБАВИТЬКДАТЕ(&ПериодРегистрации, МЕСЯЦ, -1) КАК Период,
		|				ВзаиморасчетыСРаботникамиОрганизацийОстатки.Сотрудник КАК Сотрудник,
		|				ВзаиморасчетыСРаботникамиОрганизацийОстатки.Сотрудник.Физлицо КАК Физлицо,
		|				ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&ПериодРегистрации, {(Сотрудник), (Организация)}) КАК ВзаиморасчетыСРаботникамиОрганизацийОстатки
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ВзаиморасчетыСРаботникамиОрганизацийОбороты.Организация,
		|				ВзаиморасчетыСРаботникамиОрганизацийОбороты.Период,
		|				ВзаиморасчетыСРаботникамиОрганизацийОбороты.Сотрудник,
		|				ВзаиморасчетыСРаботникамиОрганизацийОбороты.Сотрудник.Физлицо,
		|				ВзаиморасчетыСРаботникамиОрганизацийОбороты.СуммаВзаиморасчетовОборот
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&ПериодРегистрации, &КонецПериодаРегистрации, Месяц, {(Организация), (Сотрудник)}) КАК ВзаиморасчетыСРаботникамиОрганизацийОбороты) КАК Сальдо
		|			ПО Сальдо.Период <= Периоды.ПериодРегистрации
		|	{ГДЕ
		|		Сальдо.Организация,
		|		Сальдо.Сотрудник,
		|		Сальдо.Физлицо}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Сальдо.Организация,
		|		Сальдо.Сотрудник,
		|		Сальдо.Физлицо,
		|		Периоды.ПериодРегистрации) КАК НачисленияУдержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПоследниеДаты.ПериодРегистрации КАК ПериодРегистрации,
		|			РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизаций.ОбособленноеПодразделение КАК Организация,
		|			РаботникиОрганизаций.Сотрудник.Код КАК ТабельныйНомер,
		|			РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		|			РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|			РаботникиОрганизаций.Должность КАК Должность,
		|			РаботникиОрганизаций.Сотрудник.ВидДоговора КАК ВидДоговора
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Периоды.Период КАК ПериодРегистрации,
		|				МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
		|				РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|				РаботникиОрганизаций.ОбособленноеПодразделение КАК Организация
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК Период
		|				ИЗ
		|					РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|				ГДЕ
		|					РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации) КАК Периоды
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|					ПО (РаботникиОрганизаций.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|			{ГДЕ
		|				РаботникиОрганизаций.Сотрудник.*,
		|				РаботникиОрганизаций.Организация.*}
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Периоды.Период,
		|				РаботникиОрганизаций.Сотрудник,
		|				РаботникиОрганизаций.ОбособленноеПодразделение) КАК ПоследниеДаты
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|				ПО ПоследниеДаты.Период = РаботникиОрганизаций.Период
		|					И (ПоследниеДаты.Организация = РаботникиОрганизаций.ОбособленноеПодразделение)
		|					И ПоследниеДаты.Сотрудник = РаботникиОрганизаций.Сотрудник
		|		ГДЕ
		|			РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		{ГДЕ
		|			РаботникиОрганизаций.Сотрудник,
		|			РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо}
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ
		|			ДатыПоследнихДоговоров.ПериодРегистрации,
		|			ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
		|			ДатыПоследнихДоговоров.Организация,
		|			ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Код,
		|			ДатыПоследнихДоговоров.Физлицо,
		|			МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации),
		|			ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка),
		|			ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ВидДоговора
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Договора.Физлицо КАК Физлицо,
		|				Договора.Организация КАК Организация,
		|				МАКСИМУМ(Договора.ДатаНачала) КАК ДатаНачала,
		|				Периоды.Период КАК ПериодРегистрации
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК Период
		|				ИЗ
		|					РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|				ГДЕ
		|					РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации) КАК Периоды
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо КАК Физлицо,
		|						ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК Организация,
		|						ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала КАК ДатаНачала,
		|						ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания КАК ДатаОкончания
		|					ИЗ
		|						Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		|					ГДЕ
		|						ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецПериодаРегистрации
		|						И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &ПериодРегистрации
		|						И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
		|					{ГДЕ
		|						ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо.*,
		|						ДоговорНаВыполнениеРаботСФизЛицом.Организация.*,
		|						ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.*}) КАК Договора
		|					ПО (Договора.ДатаНачала <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|						И Договора.ДатаОкончания >= Периоды.Период
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Договора.Физлицо,
		|				Договора.Организация,
		|				Периоды.Период) КАК ДатыПоследнихДоговоров
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|					ПО ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|						И (СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|							И (СотрудникиОрганизаций.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка))
		|				ПО ДатыПоследнихДоговоров.Физлицо = ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо
		|					И ДатыПоследнихДоговоров.Организация = ДоговорНаВыполнениеРаботСФизЛицом.Организация
		|					И ДатыПоследнихДоговоров.ДатаНачала = ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
		|					И (ДоговорНаВыполнениеРаботСФизЛицом.Проведен)
		|		ГДЕ
		|			(СотрудникиОрганизаций.Ссылка = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
		|					ИЛИ СотрудникиОрганизаций.Ссылка ЕСТЬ NULL )
		|		{ГДЕ
		|			ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
		|			ДоговорНаВыполнениеРаботСФизЛицом.Организация,
		|			ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо,
		|			ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации,
		|			ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ВидДоговора КАК ВидДоговора}
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДатыПоследнихДоговоров.Физлицо,
		|			ДатыПоследнихДоговоров.Организация,
		|			ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ВидДоговора,
		|			ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
		|			ДатыПоследнихДоговоров.ПериодРегистрации,
		|			ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Код) КАК РаботникиОрганизацийСрезПоследних
		|		ПО НачисленияУдержания.ФизЛицо = РаботникиОрганизацийСрезПоследних.Физлицо
		|			И НачисленияУдержания.ПериодРегистрации = РаботникиОрганизацийСрезПоследних.ПериодРегистрации
		|			И НачисленияУдержания.Организация = РаботникиОрганизацийСрезПоследних.Организация
		|{ГДЕ
		|	НачисленияУдержания.ФизЛицо.*,
		|	НачисленияУдержания.Организация.*,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.*,
		|	РаботникиОрганизацийСрезПоследних.Должность.*,
		|	РаботникиОрганизацийСрезПоследних.Должность.Категория.* КАК КатегорияДолжности,
		|	РаботникиОрганизацийСрезПоследних.ВидДоговора.*}
		|ИТОГИ ПО
		|	Организация,
		|	ПериодРегистрации,
		|	Сотрудник,
//		|	ФизЛицо,
		|	ВидДвижения";
		
	Иначе
		
		ТекстПостроителя = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияУдержания.ВидДвижения КАК ВидДвижения,
		|	НачисленияУдержания.Сотрудник КАК Сотрудник,
		|	НачисленияУдержания.ФизЛицо КАК ФизЛицо,
		|	НачисленияУдержания.ПериодРегистрации КАК ПериодРегистрации,
		|	НачисленияУдержания.ВидРасчета КАК ВидРасчета,
		|	НачисленияУдержания.ПорядокВидаРасчета КАК ПорядокВидаРасчета,
		|	НачисленияУдержания.ОтработаноДней,
		|	НачисленияУдержания.ОтработаноЧасов,
		|	НачисленияУдержания.ОплаченоДней,
		|	НачисленияУдержания.Результат,
		|	НачисленияУдержания.ОплаченоЧасов,
		|	НачисленияУдержания.ПериодДействияНачало,
		|	НачисленияУдержания.ПериодДействияКонец,
		|	НачисленияУдержания.Регистратор,
		|	НачисленияУдержания.НомерСтроки,
		|	НачисленияУдержания.Организация КАК Организация,
		|	НачисленияУдержания.ДополнениеКВидуРасчета,
		|	НачисленияУдержания.Показатель1,
		|	НачисленияУдержания.Показатель2,
		|	НачисленияУдержания.Показатель3,
		|	НачисленияУдержания.Показатель4,
		|	НачисленияУдержания.СтатКатегория,
		|	НачисленияУдержания.Должность,
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.СальдоНачальное,
		|	НачисленияУдержания.СальдоКонечное
		|ИЗ
		|	(ВЫБРАТЬ
		|		НачисленияУдержания.ВидДвижения КАК ВидДвижения,
		|		НачисленияУдержания.Сотрудник КАК Сотрудник,
		|		НачисленияУдержания.ФизЛицо КАК ФизЛицо,
		|		НачисленияУдержания.Организация КАК Организация,
		|		НачисленияУдержания.ПериодРегистрации КАК ПериодРегистрации,
		|		НачисленияУдержания.ВидРасчета КАК ВидРасчета,
		|		НачисленияУдержания.ПорядокВидаРасчета КАК ПорядокВидаРасчета,
		|		НачисленияУдержания.ОтработаноДней КАК ОтработаноДней,
		|		НачисленияУдержания.ОтработаноЧасов КАК ОтработаноЧасов,
		|		НачисленияУдержания.ОплаченоДней КАК ОплаченоДней,
		|		НачисленияУдержания.ОплаченоЧасов КАК ОплаченоЧасов,
		|		НачисленияУдержания.Результат КАК Результат,
		|		РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		РаботникиОрганизацийСрезПоследних.Должность.Категория КАК СтатКатегория,
		|		РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
		|		РаботникиОрганизацийСрезПоследних.ВидДоговора КАК ВидДоговора,
		|		НачисленияУдержания.ПериодДействияНачало КАК ПериодДействияНачало,
		|		НачисленияУдержания.ПериодДействияКонец КАК ПериодДействияКонец,
		|		НачисленияУдержания.Регистратор КАК Регистратор,
		|		НачисленияУдержания.НомерСтроки КАК НомерСтроки,
		|		НачисленияУдержания.ДополнениеКВидуРасчета КАК ДополнениеКВидуРасчета,
		|		НачисленияУдержания.Показатель1 КАК Показатель1,
		|		НачисленияУдержания.Показатель2 КАК Показатель2,
		|		НачисленияУдержания.Показатель3 КАК Показатель3,
		|		НачисленияУдержания.Показатель4 КАК Показатель4,
		|		НачисленияУдержания.СальдоНачальное КАК СальдоНачальное,
		|		НачисленияУдержания.СальдоКонечное КАК СальдоКонечное
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|					ТОГДА ""ДоходыВНатуральнойФорме""
		|				ИНАЧЕ ""Начислено""
		|			КОНЕЦ КАК ВидДвижения,
		|			ОсновныеНачисленияРаботниковОрганизации.Организация КАК Организация,
		|			ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации КАК ПериодРегистрации,
		|			ОсновныеНачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
		|			ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
		|			ОсновныеНачисленияРаботниковОрганизации.ВидРасчета	КАК ВидРасчета,
		|			""А"" + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Код КАК ПорядокВидаРасчета,
		|			ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней КАК ОтработаноДней,
		|			ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов КАК ОтработаноЧасов,
		|			ВЫБОР
		|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|					ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ОплаченоДней,
		|			ВЫБОР
		|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|					ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
		|					ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы)
		|					ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ОплаченоЧасов,
		|			ОсновныеНачисленияРаботниковОрганизации.Результат КАК Результат,
		|			ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало КАК ПериодДействияНачало,
		|			ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец КАК ПериодДействияКонец,
		|			ОсновныеНачисленияРаботниковОрганизации.Регистратор КАК Регистратор,
		|			ОсновныеНачисленияРаботниковОрганизации.НомерСтроки КАК НомерСтроки,
		|			ВЫБОР КОГДА ОсновныеНачисленияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ЗаменыОрганизаций 
		|					И ОсновныеНачисленияРаботниковОрганизации.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Замещение)
		|					ТОГДА "" (Замена)""
		|			 	КОГДА ОсновныеНачисленияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ЗаменыОрганизаций 
		|					И ОсновныеНачисленияРаботниковОрганизации.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Совмещение)
		|					ТОГДА "" (Совмещение)""
		|					ИНАЧЕ """"
		|			КОНЕЦ
        |           +
		|			ВЫБОР
		|				КОГДА ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизации.Назначение.ВидЗанятости, &ЗанятостьНеУказана) <> &ВнутреннееСовместительство
		|					ТОГДА """"
		|				ИНАЧЕ "" (по внутр. совмест-ву)""
		|			КОНЕЦ
		|		 	+ ВЫБОР
		|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.НачислениеЗаСчетФСС И ОсновныеНачисленияРаботниковОрганизации.Регистратор В (&НеоплаченоФСС)
		|				ТОГДА &ТекстНеполаченоФСС
		|			ИНАЧЕ """"
		|			КОНЕЦ КАК ДополнениеКВидуРасчета,
		|			ОсновныеНачисленияРаботниковОрганизации.Показатель1 КАК Показатель1,
		|			ОсновныеНачисленияРаботниковОрганизации.Показатель2 КАК Показатель2,
		|			ОсновныеНачисленияРаботниковОрганизации.Показатель3 КАК Показатель3,
		|			ОсновныеНачисленияРаботниковОрганизации.Показатель4 КАК Показатель4,
		|			NULL КАК СальдоНачальное,
		|			NULL КАК СальдоКонечное
		|		ИЗ
		|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
		|		ГДЕ
		|			ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		И (НЕ(ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней = 0
		|					И ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов = 0
		|					И ВЫБОР
		|						КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|							ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
		|						ИНАЧЕ 0
		|					КОНЕЦ = 0
		|					И ВЫБОР
		|						КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|							ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
		|							ИЛИ ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы)
		|							ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
		|						ИНАЧЕ 0
		|					КОНЕЦ = 0
		|					И ОсновныеНачисленияРаботниковОрганизации.Результат = 0))

		|		{ГДЕ
		|			ОсновныеНачисленияРаботниковОрганизации.Сотрудник,
		|			ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ФизЛицо,
		|			ОсновныеНачисленияРаботниковОрганизации.Организация КАК Организация}
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			""Удержано"",
		|			УдержанияРаботниковОрганизации.Организация,
		|			УдержанияРаботниковОрганизации.ПериодРегистрации,
		|			УдержанияРаботниковОрганизации.Сотрудник,
		|			УдержанияРаботниковОрганизации.Сотрудник.ФизЛицо,
		|			"""" + УдержанияРаботниковОрганизации.ВидРасчета.Наименование,
		|			""А"" + УдержанияРаботниковОрганизации.ВидРасчета.Код,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			УдержанияРаботниковОрганизации.Результат,
		|			УдержанияРаботниковОрганизации.БазовыйПериодНачало,
		|			УдержанияРаботниковОрганизации.БазовыйПериодКонец,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL
		|		ИЗ
		|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
		|		ГДЕ
		|			УдержанияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		{ГДЕ
		|			УдержанияРаботниковОрганизации.Сотрудник,
		|			УдержанияРаботниковОрганизации.Сотрудник.ФизЛицо,
		|			УдержанияРаботниковОрганизации.Организация КАК Организация}
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			""Удержано"",
		|			ВзносыВФонды.Организация,
		|			ВзносыВФонды.ПериодРегистрации,
		|			ВзносыВФонды.Сотрудник,
		|			ВзносыВФонды.Сотрудник.ФизЛицо,
		|			ВЫБОР КОГДА ВзносыВФонды.ВидРасчета.ЕСВ
		|			 ТОГДА ""ЕСВ""
		|			 ИНАЧЕ """" + ВзносыВФонды.ВидРасчета.Наименование
		|			КОНЕЦ,
		|			ВЫБОР КОГДА ВзносыВФонды.ВидРасчета.ЕСВ
		|			 ТОГДА ""Б""
		|			 ИНАЧЕ ""Б"" + ВзносыВФонды.ВидРасчета.Код
		|			КОНЕЦ,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			СУММА(ВзносыВФонды.Результат),
		|			НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ),
		|			КОНЕЦПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ),
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL
		|		ИЗ
		|			РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
		|		ГДЕ
		|			ВзносыВФонды.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|			И ВзносыВФонды.ВидРасчета.СпособРасчета=&СпособРасчетаВзносы
		|			И ВзносыВФонды.Результат <> 0
		|		{ГДЕ
		|			ВзносыВФонды.Сотрудник,
		|			ВзносыВФонды.Сотрудник.ФизЛицо,
		|			ВзносыВФонды.Организация}
		|	
		|		СГРУППИРОВАТЬ ПО
		|			ВзносыВФонды.ПериодРегистрации,
		|			ВзносыВФонды.Сотрудник,
		|			ВзносыВФонды.Сотрудник.ФизЛицо,
		|			ВЫБОР КОГДА ВзносыВФонды.ВидРасчета.ЕСВ
		|			 ТОГДА ""ЕСВ""
		|			 ИНАЧЕ """" + ВзносыВФонды.ВидРасчета.Наименование
		|			КОНЕЦ,
		|			ВЫБОР КОГДА ВзносыВФонды.ВидРасчета.ЕСВ
		|			 ТОГДА ""Б""
		|			 ИНАЧЕ ""Б"" + ВзносыВФонды.ВидРасчета.Код
		|			КОНЕЦ,
    	|			ВзносыВФонды.БазовыйПериодНачало,
		|			ВзносыВФонды.Организация
		|	
		|		ОБЪЕДИНИТЬ ВСЕ
		|	
		|		ВЫБРАТЬ
		|			""Удержано"",
		|			ВзаиморасчетыПоНДФЛ.Организация,
		|			НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период, МЕСЯЦ),
		|			ВзаиморасчетыПоНДФЛ.Сотрудник,
		|			ВзаиморасчетыПоНДФЛ.Сотрудник.ФизЛицо,
		|			""НДФЛ"",
		|			""В"",
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			СУММА(ВзаиморасчетыПоНДФЛ.Налог),
		|			НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ),
		|			КОНЕЦПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ),
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
		|		ГДЕ
		|			ВзаиморасчетыПоНДФЛ.ВидДвижения = &Приход
		|			И ВзаиморасчетыПоНДФЛ.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|			И ВзаиморасчетыПоНДФЛ.Налог <> 0
		|			И ВзаиморасчетыПоНДФЛ.Сотрудник ССЫЛКА Справочник.СотрудникиОрганизаций
		|		{ГДЕ
		|			ВзаиморасчетыПоНДФЛ.Сотрудник,
		|			ВзаиморасчетыПоНДФЛ.Сотрудник.ФизЛицо,
		|			ВзаиморасчетыПоНДФЛ.Организация КАК Организация}
		|	
		|		СГРУППИРОВАТЬ ПО
		|			НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период, МЕСЯЦ),
		|			ВзаиморасчетыПоНДФЛ.Сотрудник,
		|			ВзаиморасчетыПоНДФЛ.Сотрудник.ФизЛицо,
		|			ВзаиморасчетыПоНДФЛ.Организация,
		|			ВзаиморасчетыПоНДФЛ.НалоговыйПериод
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			""Удержано"",
		|			ПогашениеЗаймовРаботникамиОрганизаций.Организация,
		|			НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
		|			ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник,
		|			ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник.ФизЛицо,
		|			""Погашение займа"",
		|			""В"",
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			СУММА(ПогашениеЗаймовРаботникамиОрганизаций.ОсновнойДолг + ПогашениеЗаймовРаботникамиОрганизаций.Проценты),
		|			НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
		|			КОНЕЦПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL
		|		ИЗ
		|			РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОрганизаций
		|		ГДЕ
		|			ПогашениеЗаймовРаботникамиОрганизаций.ВидДвижения = &Расход
		|			И ПогашениеЗаймовРаботникамиОрганизаций.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|			И ПогашениеЗаймовРаботникамиОрганизаций.УдержаноИзЗарплаты
		|		{ГДЕ
		|			ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник,
		|			ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник.ФизЛицо}
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПогашениеЗаймовРаботникамиОрганизаций.ДоговорЗайма,
		|			НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
		|			ПогашениеЗаймовРаботникамиОрганизаций.Организация,
		|			ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник,
		|			ПогашениеЗаймовРаботникамиОрганизаций.Сотрудник.ФизЛицо,
		|			КОНЕЦПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
		|			НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			""Выплата"",
		|			Взаиморасчеты.Организация,
		|			НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
		|			Взаиморасчеты.Сотрудник,
		|			Взаиморасчеты.Сотрудник.Физлицо,
		|			ВЫБОР
		|				КОГДА (НЕ Взаиморасчеты.Регистратор ССЫЛКА Документ.ЗарплатаКВыплатеОрганизаций)
		|					ТОГДА Взаиморасчеты.Ведомость.ВидВыплаты.Наименование
		|						 + "" № "" + Взаиморасчеты.Ведомость.Номер
		|				ИНАЧЕ ""Задепонировано""
		|			КОНЕЦ,
		|			""Г1"",
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			СУММА(Взаиморасчеты.СуммаВзаиморасчетов - Взаиморасчеты.СуммаОкругления),
		|			НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
		|			КОНЕЦПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
		|		ГДЕ
		//|			Взаиморасчеты.ВидДвижения = &Расход
		|		(Взаиморасчеты.КодОперации = ЗНАЧЕНИЕ (Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата))
		|			И Взаиморасчеты.СуммаВзаиморасчетов <> 0
		|			И Взаиморасчеты.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		|		{ГДЕ
		|			Взаиморасчеты.Организация,
		|			Взаиморасчеты.Сотрудник,
		|			Взаиморасчеты.Сотрудник.Физлицо}
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Взаиморасчеты.Организация,
		|			Взаиморасчеты.Сотрудник,
		|			Взаиморасчеты.Сотрудник.Физлицо,
		|			НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
		|			ВЫБОР
		|				КОГДА (НЕ Взаиморасчеты.Регистратор ССЫЛКА Документ.ЗарплатаКВыплатеОрганизаций)
		|					ТОГДА Взаиморасчеты.Ведомость.ВидВыплаты.Наименование
		|						 + "" № "" + Взаиморасчеты.Ведомость.Номер
		|				ИНАЧЕ ""Задепонировано""
		|			КОНЕЦ,
		|			КОНЕЦПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
		|			НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			""Сальдо"",
		|			Сальдо.Организация,
		|			Периоды.ПериодРегистрации,
		|			Сальдо.Сотрудник,
		|			Сальдо.Физлицо,
		|			"""",
		|			""Я"",
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			NULL,
		|			СУММА(ВЫБОР
		|					КОГДА Сальдо.Период < Периоды.ПериодРегистрации
		|						ТОГДА Сальдо.СуммаВзаиморасчетовОстаток
		|					ИНАЧЕ 0
		|				КОНЕЦ),
		|			СУММА(ВЫБОР
		|					КОГДА Сальдо.Период <= Периоды.ПериодРегистрации
		|						ТОГДА Сальдо.СуммаВзаиморасчетовОстаток
		|					ИНАЧЕ 0
		|				КОНЕЦ)
		|		ИЗ
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации
		|			ИЗ
		|				РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|			ГДЕ
		|				РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации) КАК Периоды
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.Организация КАК Организация,
		|					ДОБАВИТЬКДАТЕ(&ПериодРегистрации, МЕСЯЦ, -1) КАК Период,
		|					ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.Сотрудник КАК Сотрудник,
		|					ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.Сотрудник.Физлицо КАК Физлицо,
		|					ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
		|				ИЗ
		|					РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&ПериодРегистрации, {(Сотрудник), (Организация)}) КАК ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.Организация,
		|					ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.Период,
		|					ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.Сотрудник,
		|					ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.Сотрудник.Физлицо,
		|					ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовОборот
		|				ИЗ
		|					РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&ПериодРегистрации, &КонецПериодаРегистрации, Месяц, {(Организация), (Сотрудник)}) КАК ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты) КАК Сальдо
		|				ПО Сальдо.Период <= Периоды.ПериодРегистрации
		|		{ГДЕ
		|			Сальдо.Организация,
		|			Сальдо.Сотрудник,
		|			Сальдо.Физлицо}
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Сальдо.Организация,
		|			Сальдо.Сотрудник,
		|			Сальдо.Физлицо,
		|			Периоды.ПериодРегистрации) КАК НачисленияУдержания
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ПоследниеДаты.ПериодРегистрации КАК ПериодРегистрации,
		|				РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|				РаботникиОрганизаций.ОбособленноеПодразделение КАК Организация,
		|				РаботникиОрганизаций.Сотрудник.Код КАК ТабельныйНомер,
		|				РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		|				РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|				РаботникиОрганизаций.Должность КАК Должность,
		|				РаботникиОрганизаций.Сотрудник.ВидДоговора КАК ВидДоговора
		|			ИЗ
		|				(ВЫБРАТЬ
		|					Периоды.Период КАК ПериодРегистрации,
		|					МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
		|					РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		|					РаботникиОрганизаций.ОбособленноеПодразделение КАК Организация
		|				ИЗ
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК Период
		|					ИЗ
		|						РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|					ГДЕ
		|						РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации) КАК Периоды
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|						ПО (РаботникиОрганизаций.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|				{ГДЕ
		|					РаботникиОрганизаций.Сотрудник.*,
		|					РаботникиОрганизаций.Организация.*}
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Периоды.Период,
		|					РаботникиОрганизаций.Сотрудник.Физлицо,
		|					РаботникиОрганизаций.ОбособленноеПодразделение) КАК ПоследниеДаты
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|					ПО ПоследниеДаты.Период = РаботникиОрганизаций.Период
		|						И (ПоследниеДаты.Организация = РаботникиОрганизаций.ОбособленноеПодразделение)
		|						И ПоследниеДаты.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|			ГДЕ
		|				РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|				И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|
		|			{ГДЕ
		|				РаботникиОрганизаций.Сотрудник,
		|				РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо}
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				ДатыПоследнихДоговоров.ПериодРегистрации,
		|				ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
		|				ДатыПоследнихДоговоров.Организация,
		|				ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Код,
		|				ДатыПоследнихДоговоров.Физлицо,
		|				МАКСИМУМ(ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации),
		|				ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка),
		|				ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ВидДоговора
		|			ИЗ
		|				(ВЫБРАТЬ
		|					Договора.Физлицо КАК Физлицо,
		|					Договора.Организация КАК Организация,
		|					МАКСИМУМ(Договора.ДатаНачала) КАК ДатаНачала,
		|					Периоды.Период КАК ПериодРегистрации
		|				ИЗ
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК Период
		|					ИЗ
		|						РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|					ГДЕ
		|						РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации) КАК Периоды
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо КАК Физлицо,
		|							ДоговорНаВыполнениеРаботСФизЛицом.Организация КАК Организация,
		|							ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала КАК ДатаНачала,
		|							ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания КАК ДатаОкончания
		|						ИЗ
		|							Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		|						ГДЕ
		|							ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецПериодаРегистрации
		|							И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &ПериодРегистрации
		|							И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
		|						{ГДЕ
		|							ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо.*,
		|							ДоговорНаВыполнениеРаботСФизЛицом.Организация.*,
		|							ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.*}) КАК Договора
		|						ПО (Договора.ДатаНачала <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|							И Договора.ДатаОкончания >= Периоды.Период
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Договора.Физлицо,
		|					Договора.Организация,
		|					Периоды.Период) КАК ДатыПоследнихДоговоров
		|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|						ПО ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|							И (СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|							И (СотрудникиОрганизаций.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка))
		|					ПО ДатыПоследнихДоговоров.Физлицо = ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо
		|						И ДатыПоследнихДоговоров.Организация = ДоговорНаВыполнениеРаботСФизЛицом.Организация
		|						И ДатыПоследнихДоговоров.ДатаНачала = ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
		|						И (ДоговорНаВыполнениеРаботСФизЛицом.Проведен)
		|			ГДЕ
		|				(СотрудникиОрганизаций.Ссылка = ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
		|						ИЛИ СотрудникиОрганизаций.Ссылка ЕСТЬ NULL )
		|			{ГДЕ
		|				ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
		|				ДоговорНаВыполнениеРаботСФизЛицом.Организация,
		|				ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо,
		|				ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации,
		|				ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ВидДоговора КАК ВидДоговора}
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ДатыПоследнихДоговоров.Физлицо,
		|				ДатыПоследнихДоговоров.Организация,
		|				ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.ВидДоговора,
		|				ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
		|				ДатыПоследнихДоговоров.ПериодРегистрации,
		|				ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Код) КАК РаботникиОрганизацийСрезПоследних
		|			ПО НачисленияУдержания.ФизЛицо = РаботникиОрганизацийСрезПоследних.Физлицо
		|				И НачисленияУдержания.ПериодРегистрации = РаботникиОрганизацийСрезПоследних.ПериодРегистрации
		|				И (РаботникиОрганизацийСрезПоследних.Организация = ВЫБОР
		|					КОГДА НачисленияУдержания.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
		|						ТОГДА НачисленияУдержания.Организация
		|					ИНАЧЕ НачисленияУдержания.Организация.ГоловнаяОрганизация
		|				КОНЕЦ)) КАК НачисленияУдержания
		|{ГДЕ
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.ФизЛицо,
		|	НачисленияУдержания.ПериодРегистрации,
		|	НачисленияУдержания.ВидДоговора,
		|	НачисленияУдержания.ПодразделениеОрганизации КАК Подразделение,
		|	НачисленияУдержания.Должность}
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации,
		|	Сотрудник,
		|	ФизЛицо,
		|	ВидДвижения,
		|	ПорядокВидаРасчета,
		|	ВидРасчета
		|ИТОГИ ПО
		|	Организация,
		|	ПериодРегистрации,
		|	Сотрудник,
//		|	ФизЛицо,
		|	ВидДвижения";
		
	КонецЕсли;
	
	ПостроительОтчетов.Текст = ТекстПостроителя;
	
	// Подготовим построитель запросов к настройке отборов
	ПостроительОтчетов.ЗаполнитьНастройки();
	ПостроительОтчетов.Отбор.Сбросить();
	
КонецПроцедуры

// Запоминает настройку группировки расчетного литска
//
Процедура ЗапомнитьНастройкуРасчетногоЛистка() Экспорт  
	
	// Найдем элемент группировки с названием "ШапкаРасчетногоЛистка"
	ЭлементНайден = Ложь;
	Для Каждого ЭлементСтруктурыГруппировки из КомпоновщикНастроек.Настройки.Структура Цикл
		
		Если ЭлементСтруктурыГруппировки.Имя = "ШапкаРасчетногоЛистка" тогда
			
			ЭлементНастройкиРасчетногоЛистка = ЭлементСтруктурыГруппировки;
			КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
			ЭлементНайден = Истина;
			Возврат;
			
		Иначе
			
			// Рекурсивно проверим остальные элементы структуры
			ПроверитьВложенныеЭлементы(ЭлементСтруктурыГруппировки , ЭлементНайден);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет рекурсивный поиск элемента группировки с именем "ШапкаРасчетногоЛистка"
//
Процедура ПроверитьВложенныеЭлементы(ЭлементСтруктурыГруппировки , ЭлементНайден)
	
	Для Каждого ЭлементСтруктуры из ЭлементСтруктурыГруппировки.Структура Цикл
		
		Если ЭлементНайден тогда
			Возврат;
		КонецЕсли;
		
		Если ЭлементСтруктуры.Имя = "ШапкаРасчетногоЛистка" тогда
			
			ЭлементНастройкиРасчетногоЛистка = ЭлементСтруктуры;
			ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
			ЭлементНайден = истина;
			Возврат;
			
		Иначе
			
			ПроверитьВложенныеЭлементы(ЭлементСтруктуры , ЭлементНайден);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтруктуруРасчетногоЛистка(Структура) 
	
	ЭлементСтруктурыРасчетногоЛистка = Структура.Добавить(ТипЗнч(ЭлементНастройкиРасчетногоЛистка));
	
	ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыРасчетногоЛистка, ЭлементНастройкиРасчетногоЛистка);
	
	ЭлементСтруктурыРасчетногоЛистка.Имя                           = "ШапкаРасчетногоЛистка";
	ЭлементСтруктурыРасчетногоЛистка.Структура[0].Имя              = "Начисление";
	ЭлементСтруктурыРасчетногоЛистка.Структура[0].Структура[0].Имя = "СтрокаНачисленийУдержаний";
	ЭлементСтруктурыРасчетногоЛистка.Структура[1].Имя              = "Удержание";
	ЭлементСтруктурыРасчетногоЛистка.Структура[1].Структура[0].Имя = "СтрокаНачисленийУдержаний";
	ЭлементСтруктурыРасчетногоЛистка.Структура[2].Имя              = "Сальдо";
	
КонецПроцедуры

// Добавление расчетного листка в настройку схемы компоновки
//
Процедура ВосстановитьНастройкуРасчетногоЛистка() Экспорт  
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 тогда
		
		ДобавитьСтруктуруРасчетногоЛистка(КомпоновщикНастроек.Настройки.Структура);
		
	Иначе
		
		Для Каждого ЭлементСтруктурыГруппировки из КомпоновщикНастроек.Настройки.Структура Цикл
			
			Если ТипЗнч(ЭлементСтруктурыГруппировки) <> Тип("ГруппировкаКомпоновкиДанных") тогда
				КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
				ДобавитьСтруктуруРасчетногоЛистка(КомпоновщикНастроек.Настройки.Структура);
				Возврат;
			КонецЕсли;
			
			Если ЭлементСтруктурыГруппировки.Структура.Количество() <> 0 тогда
				Если ЭлементСтруктурыГруппировки.ПоляГруппировки.Элементы.Количество() <> 0 тогда
					
					ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктурыГруппировки); 
					НайтиСледующийУровень(ЭлементСтруктурыГруппировки);
					
				Иначе
					
					КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
					
					ДобавитьСтруктуруРасчетногоЛистка(КомпоновщикНастроек.Настройки.Структура);
					
				КонецЕсли;
				
			Иначе
				
				Если ЭлементСтруктурыГруппировки.ПоляГруппировки.Элементы.Количество() = 0 тогда
					
					КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
					ДобавитьСтруктуруРасчетногоЛистка(КомпоновщикНастроек.Настройки.Структура);
				
				Иначе
					
					ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктурыГруппировки);
					ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// Поиск последнего уровня иерархии группировки
//
Процедура НайтиСледующийУровень(ЭлементСтруктурыГруппировки)
	
	Для Каждого ЭлементСтруктуры из ЭлементСтруктурыГруппировки.Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "ШапкаРасчетногоЛистка" тогда
			ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
			ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);
			Возврат;
		КонецЕсли;
		
		Если ЭлементСтруктуры.Структура.Количество() <> 0 тогда
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() <> 0 тогда
				
				ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры);
				НайтиСледующийУровень(ЭлементСтруктуры);
				
			Иначе
				
				ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
				
				ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);
				
			КонецЕсли;
		Иначе
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 тогда
				
				ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
				ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);
				
			Иначе
			
				ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры);
				ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктуры.Структура);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавление поля в таблицу выбранных полей из таблицы группировок
//
Процедура ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры)
	
	ЭлементСтруктуры.Выбор.Элементы.Очистить();
	
	ЭлементСтруктуры.ПараметрыВывода.Элементы.Найти("TemplateType").Значение      = ТипМакетаГруппировкиКомпоновкиДанных.Вертикальный;
	ЭлементСтруктуры.ПараметрыВывода.Элементы.Найти("TemplateType").Использование = истина;
	
	Для каждого ЭлементИсточник Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
		
		ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Строка(ЭлементИсточник.Поле)));
		Если ДоступноеПоле <> Неопределено тогда
			ЭлементПриемник               = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЭлементПриемник.Поле          = ДоступноеПоле.Поле;
			ЭлементПриемник.Заголовок     = ДоступноеПоле.Заголовок;
			ЭлементПриемник.Использование = истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сохранение настроек схемы компоновки
//
Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Заполнение параметров отчета по элементу справочника из переменной СохраненнаяНастройка.
//
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры


НастройкаПериода = Новый НастройкаПериода;
#КонецЕсли

НастройкаШириныКолонокРасчетногоЛистка     = Новый Массив();
НастройкаРазмТекстаКолонокРасчетногоЛистка = Новый Массив();






НачисленияУдержания = Новый ТаблицаЗначений();
НачисленияУдержания.Колонки.Добавить("ВидДвижения");
НачисленияУдержания.Колонки.Добавить("ВидДвиженияУд");
НачисленияУдержания.Колонки.Добавить("Сотрудник");
НачисленияУдержания.Колонки.Добавить("ФизЛицо");
НачисленияУдержания.Колонки.Добавить("Организация");
НачисленияУдержания.Колонки.Добавить("ПериодРегистрации");
НачисленияУдержания.Колонки.Добавить("ПризнакУпорядочиванияСтрок");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияВидНачисления");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияПериодНачисления");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияОтработанныеДни");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияОтработанныеЧасы");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияОплаченныеДни");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияОплаченныеЧасы");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияСуммаНачисления");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияВидУдержания");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияПериодУдержания");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияСуммаУдержания");
НачисленияУдержания.Колонки.Добавить("СальдоНачальное");
НачисленияУдержания.Колонки.Добавить("СальдоКонечное");

СписокПолейОтбора = Новый СписокЗначений;
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("ФизЛицо"));
//СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("Сотрудник"));
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("ПериодРегистрации"));
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("Должность"));
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("ПодразделениеОрганизации"));
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("Организация"));

