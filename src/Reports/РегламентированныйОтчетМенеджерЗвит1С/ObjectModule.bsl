////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

#Если Клиент Тогда
	
// Общие переменные регламентированных отчетов
Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // Заполняется только для зарегистрированных внешних отчетов
Перем мЗаписьЗапрещена Экспорт;                // Запрещает сохранение данных для не зарегистрированных внешних отчетов

// Служебные переменные менеджера 1С-Звит
Перем мСоответствиеОтчетов;                    // Таблица соответствия рег.отчетов и поддерживаемых схем 1С-Звит


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция заполняет кеш поддерживаемых схем в 1С
//
Процедура ЗаполнитьСоответствиеОтчетов(ИсточникОтчета = Неопределено) Экспорт
	
	// Требутся перезаполнить определенный отчет, а 1С-Звит не используется то отложим до запуска 1С-Звит
	// соотвест
	Если мСоответствиеОтчетов = Неопределено И ЗначениеЗаполнено(ИсточникОтчета) Тогда
		Возврат;
	КонецЕсли;
					
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныеОтчеты.ИсточникОтчета,
	|	РегламентированныеОтчеты.Наименование
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|ГДЕ
	|	РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
	|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМенеджерЗвит1С""
	|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности""";
	
	Если Не ЗначениеЗаполнено(ИсточникОтчета) Тогда		
		Если ФлагОтладки = Истина Тогда
			Сообщить("1С-Звит. Обновление доступных схем для всех отчетов");
		КонецЕсли;
		// Перезаполнение всего кеша
		мСоответствиеОтчетов = Новый ТаблицаЗначений;
		мСоответствиеОтчетов.Колонки.Добавить("ИмяСхемыЗвит1С");
		мСоответствиеОтчетов.Колонки.Добавить("ИмяОтчета");
		мСоответствиеОтчетов.Колонки.Добавить("ИмяФормы");
		мСоответствиеОтчетов.Колонки.Добавить("ИмяОбласти");
		
		мСоответствиеОтчетов.Индексы.Добавить("ИмяСхемыЗвит1С");
		
	Иначе		
		Если ФлагОтладки = Истина Тогда
			Сообщить("1С-Звит. Обновление доступных схем для отчета """+ИсточникОтчета+"""");
		КонецЕсли;
		
		// Удалим не актуальную информацию
		МассивСтрок = мСоответствиеОтчетов.НайтиСтроки(Новый Структура("ИмяОтчета", ИсточникОтчета));
		Для каждого Строка Из МассивСтрок Цикл
			мСоответствиеОтчетов.Удалить(Строка);
		КонецЦикла;
				
		Запрос.Текст = Запрос.Текст +"
		|	И РегламентированныеОтчеты.ИсточникОтчета = &ИсточникОтчета";
		Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	КонецЕсли;	

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПравоДоступаКОтчету = РегламентированнаяОтчетность.ПравоДоступаКРегламентированномуОтчету(Выборка.ИсточникОтчета);
		Если ПравоДоступаКОтчету = Ложь ИЛИ ПравоДоступаКОтчету = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(Выборка.ИсточникОтчета); // Используем существующий КЭШ
		Если ТекОтчет = Неопределено Тогда
			Если ФлагОтладки = Истина Тогда
				Сообщить("1С-Звит. Заполнение соответствия. Не удалось получить отчет """+Выборка.ИсточникОтчета+"""!", СтатусСообщения.Внимание);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ТекОтчетМетаданные = Метаданные.НайтиПоТипу(ТипЗнч(ТекОтчет));
		Если ТекОтчетМетаданные = Неопределено Тогда
			// Если отчет внешний, то возвращается объект типа "Внешний отчет объект"
			Попытка
				ТекОтчетМетаданные = ТекОтчет.Метаданные();
			Исключение 
			КонецПопытки;
		КонецЕсли;
		
		Если ТекОтчетМетаданные = Неопределено Тогда
			Если ФлагОтладки = Истина Тогда
				Сообщить("1С-Звит. Заполнение соответствия. Ошибка получения метаданных отчета """+Выборка.ИсточникОтчета+"""!", СтатусСообщения.Внимание);
			КонецЕсли;
			Продолжить; 			
		КонецЕсли;
		
		Если ТекОтчетМетаданные.Макеты.Найти("ПоказателиЗвит1С") = Неопределено Тогда
			// Отчет не предназначен для выгрузки данных в 1С-Звит
			Продолжить;  
		КонецЕсли;
		
		МакетПоказателиЗвит1С = ТекОтчет.ПолучитьМакет("ПоказателиЗвит1С");
		МакетПоказателиЗвит1С.КодЯзыкаМакета = "ru";
		
		Если МакетПоказателиЗвит1С.Области.Найти("Структура") = Неопределено Тогда
			Если ФлагОтладки = Истина Тогда
				Сообщить("1С-Звит. Заполнение соответствия. В отчете """+Выборка.ИсточникОтчета+""" отсутствует служебная область ""Структура""!", СтатусСообщения.Внимание);
			КонецЕсли;
			Продолжить; 
		КонецЕсли;
		
		ОбластьСтруктура = МакетПоказателиЗвит1С.ПолучитьОбласть("Структура");
		
		Для сч = 1 По ОбластьСтруктура.ВысотаТаблицы Цикл
			ИмяСхемыЗвит1С = СокрЛП(ОбластьСтруктура.Область(сч, 1, сч, 1).Текст);
			ИмяОбласти     = СокрЛП(ОбластьСтруктура.Область(сч, 2, сч, 2).Текст);
			ИмяФормы       = СокрЛП(ОбластьСтруктура.Область(сч, 3, сч, 3).Текст);
			
			Если ПустаяСтрока(ИмяСхемыЗвит1С) ИЛИ Лев(ИмяСхемыЗвит1С, 2)= "//" 
			 ИЛИ ПустаяСтрока(ИмяФормы) Тогда
				Продолжить; 
			КонецЕсли;
			
			// Для наглядности не заполняем параметр "ИмяФормы" если он совпадает с "ИмяСхемы"
			Если ПустаяСтрока(ИмяОбласти) Тогда
				ИмяОбласти = ИмяСхемыЗвит1С;
			КонецЕсли;
			
			Если ФлагОтладки = Истина Тогда
								
				Если МакетПоказателиЗвит1С.Области.Найти(ИмяОбласти) = Неопределено Тогда
					Сообщить("1С-Звит. Заполнение соответствия. В макете ""ПоказателиЗвит1С"" отчета """+Выборка.ИсточникОтчета+""" отсутствует область """+ИмяОбласти+"""!", СтатусСообщения.Внимание);
				КонецЕсли;
				
				Если ТекОтчетМетаданные.Формы.Найти(ИмяФормы) = Неопределено Тогда
					Сообщить("1С-Звит. Заполнение соответствия. В отчете """+Выборка.ИсточникОтчета+""" ссылка на несуществующую форму """+ИмяФормы+"""!", СтатусСообщения.Внимание);
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока = мСоответствиеОтчетов.Добавить();
			
			НоваяСтрока.ИмяСхемыЗвит1С = ИмяСхемыЗвит1С;
			НоваяСтрока.ИмяОтчета      = Выборка.ИсточникОтчета;
			НоваяСтрока.ИмяФормы       = ИмяФормы;
			НоваяСтрока.ИмяОбласти     = ИмяОбласти;
						
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает заполнение дерева доступных схем 1С-Звит
//
Функция ЗаполнитьДеревоДоступныхСхем() Экспорт
	
	Если мСоответствиеОтчетов = Неопределено Тогда
		ЗаполнитьСоответствиеОтчетов();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныеОтчеты.Ссылка КАК Ссылка,
	|	РегламентированныеОтчеты.ИсточникОтчета,
	|	РегламентированныеОтчеты.Наименование КАК Наименование,
	|	РегламентированныеОтчеты.ЭтоГруппа,
	|	РегламентированныеОтчеты.Код КАК Код,
	|	РегламентированныеОтчеты.ПометкаУдаления,
	|	РегламентированныеОтчеты.ВнешнийОтчетИспользовать КАК Внешний
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код ИЕРАРХИЯ";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// Добавим схемы
	Для каждого Строка Из мСоответствиеОтчетов Цикл
	
		СтрокаОтчет = Дерево.Строки.Найти(Строка.ИмяОтчета, "ИсточникОтчета", Истина);
		Если СтрокаОтчет = Неопределено Тогда
			СтрокаОтчет = Дерево.Строки.Добавить();
			СтрокаОтчет.Данные = мСоответствиеОтчетов.ИмяОтчета;
		КонецЕсли;
		
		СтрокаСхема = СтрокаОтчет.Строки.Добавить();
		СтрокаСхема.Наименование = Строка.ИмяСхемыЗвит1С;
	
	КонецЦикла;
	
	//Удалим отчеты без схем
	ЗаполнитьДеревоДоступныхСхем_УдалитьОтчетыБезСхем(Дерево);
	
	Возврат Дерево;
	
КонецФункции

// Рекурсивная процедура обеспечивающая удаление отчетов без схем
//
Процедура ЗаполнитьДеревоДоступныхСхем_УдалитьОтчетыБезСхем(Дерево)

	МассивСтрокКУдалению = Новый Массив;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		// Если это ссылка на отчет
		Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
			
			ЗаполнитьДеревоДоступныхСхем_УдалитьОтчетыБезСхем(СтрокаДерева);
		
			// Если у отчета нет схем или группа отчетов пуста 
			// то необходимо удалить отчет из дерева
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаДерева);
				
			ИначеЕсли СтрокаДерева.ЭтоГруппа = Ложь Тогда 
				// Отсортируем схемы
				СтрокаДерева.Строки.Сортировать("Наименование");
				
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЦикла; 	
	
	Для каждого СтрокаДерева Из МассивСтрокКУдалению Цикл
		Дерево.Строки.Удалить(СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

// Функция переводит период построения отчета из формата 1С-Звит в 1С
//
Функция ОпределитьТипПериодаЗвит1С(Знач ДатаПериода, Знач ТипПериода, Периодичность = Неопределено, 
	                                                                  ДатаНачалаПериодаОтчета = Неопределено, 
	                                                                  ДатаКонцаПериодаОтчета = Неопределено)
	ПредставлениеПериода = "";
	
	Если ТипПериода = 0 Тогда
		// Месяц
		ДатаНачалаПериодаОтчета = НачалоМесяца(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДатаПериода);
		Периодичность = Перечисления.Периодичность.Месяц;
		
	ИначеЕсли ТипПериода = 10 Тогда	
		// Квартал
		ДатаНачалаПериодаОтчета = НачалоКвартала(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецКвартала(ДатаПериода);
		Периодичность = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ТипПериода = 20 Тогда	
		// Полугодие
		ГодПериода = Год(ДатаПериода);
		МесяцПериода = Месяц(ДатаПериода);		
		Если МесяцПериода <= 6 Тогда
			ДатаНачалаПериодаОтчета = Дата(ГодПериода, 1, 1);
			ПредставлениеПериода = "1";
		Иначе
			ДатаНачалаПериодаОтчета = Дата(ГодПериода, 7, 1);
			ПредставлениеПериода = "2";
		КонецЕсли;		
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(ДатаНачалаПериодаОтчета, 5));
		Периодичность = Перечисления.Периодичность.Квартал;
		
		ПредставлениеПериода = ПредставлениеПериода+" півриччя "+ПредставлениеПериода(НачалоГода(ДатаПериода), КонецГода(ДатаПериода), "Л=uk_UA");
		
	ИначеЕсли ТипПериода = 25 Тогда	
		// 9 месяцев
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(ДатаНачалаПериодаОтчета, 8));
		Периодичность = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ТипПериода = 30 Тогда	
		// Год
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецГода(ДатаПериода);
		Периодичность = Перечисления.Периодичность.Год;
		
	КонецЕсли;

	Если ПустаяСтрока(ПредставлениеПериода) Тогда
		ПредставлениеПериода = ПредставлениеПериода(ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Л=uk_UA; ФП=Истина");
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

// Функция возвращает ссылку на текущую организацию для которой строится 
// отчет в 1С-Звит
//
Функция ОпределитьТекущуюОрганизациюЗвит1С(ЕДРПОУ)

	Организация = Справочники.Организации.ПустаяСсылка();
	
	Попытка
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КодыОрганизации.Организация КАК Ссылка,
		|	КодыОрганизации.Период КАК Период
		|ИЗ
		|	РегистрСведений.КодыОрганизации КАК КодыОрганизации
		|ГДЕ
		|	КодыОрганизации.КодПоЕДРПОУ = &ЕДРПОУ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		Запрос.УстановитьПараметр("ЕДРПОУ", СокрЛП(ЕДРПОУ));

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
	
	Исключение КонецПопытки;
	
	Возврат Организация;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ ЗАПОЛНЕНИЕ ПОКАЗАТЕЛЕЙ ОТЧЕТА

// Процедура выполняет заполнение отчета 1С-Звит по подготовленным данным из 1С
//
Процедура ЗаполнениеПоказателейОтчетаЗвит1С(Отчет, СоответствиеПоказателей, ДанныеОтчета, РасшифровкаОтчета, РасшифровкаОтчетаЗвит1С)

	ФормироватьРасшифровку = Ложь;
	Если ЗначениеЗаполнено(РасшифровкаОтчета) Тогда
		РасшифровкаОтчетаЗвит1С = РасшифровкаОтчета.СкопироватьКолонки();	
	    ФормироватьРасшифровку = Истина;
	КонецЕсли;
	
	ВсегоСтрокСоответствия = СоответствиеПоказателей.Количество();
	ТекНомерСтроки = 0;
	Пока ТекНомерСтроки < ВсегоСтрокСоответствия Цикл
		
		СтрокаСоответствия = СоответствиеПоказателей[ТекНомерСтроки];
		
		Если НЕ ЗначениеЗаполнено(СтрокаСоответствия.ТаблицаЗвит) Тогда
			
			// простой показатель
			ЗначПоказателя1С = ПолучитьЗначениеПоказателя1С(ДанныеОтчета, СтрокаСоответствия.Таблица1С, СтрокаСоответствия.Имя1С);
			
			// преобразуем показатель
			Если ЗначениеЗаполнено(СтрокаСоответствия.Формат) Тогда
				Выполнить(СтрокаСоответствия.Формат);
			КонецЕсли;
			
			// Создадим расшифровку
			Если ФормироватьРасшифровку Тогда
				
				ИмяЯчейкиДляРасшифровки = ?(ЗначениеЗаполнено(СтрокаСоответствия.Имя1СРасшифровки), СтрокаСоответствия.Имя1СРасшифровки, СтрокаСоответствия.Имя1С);
				
				СтрокиРасшифровки = РасшифровкаОтчета.НайтиСтроки(Новый Структура("ИмяЯчейки", ИмяЯчейкиДляРасшифровки));
				
				Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					
					СтрокаРасшифровкиЗвит1С = РасшифровкаОтчетаЗвит1С.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасшифровкиЗвит1С, СтрокаРасшифровки);
					
					СтрокаРасшифровкиЗвит1С.ИмяЯчейки = СтрокаСоответствия.ИмяЗвит; 
				
				КонецЦикла;
				
			КонецЕсли;
			
			// запишем показатель в ЗВИТ
			ЗаписатьВОтчетЗвит1С(Отчет, "", СтрокаСоответствия.ИмяЗвит, ЗначПоказателя1С);
			
			ТекНомерСтроки = ТекНомерСтроки + 1;
			
		Иначе
			
			// определим границу таблицы
			ПерваяСтрокаТаблицы    = ТекНомерСтроки;
			ПоследняяСтрокаТаблицы = ТекНомерСтроки;
			
			ИмяТаблицы = СтрокаСоответствия.ТаблицаЗвит;
			
			СтрокаТаблицыДляИдентификации = Неопределено;
			
			// Проверим первую строку соответсвия показателей на наличие итератора
			Если Найти(СоответствиеПоказателей[ПоследняяСтрокаТаблицы].Имя1С, "*") > 0 Тогда
				СтрокаТаблицыДляИдентификации = ПоследняяСтрокаТаблицы;					
			КонецЕсли;
			
			Пока ПоследняяСтрокаТаблицы + 1 < ВсегоСтрокСоответствия
			   И СоответствиеПоказателей[ПоследняяСтрокаТаблицы + 1].ТаблицаЗвит = ИмяТаблицы Цикл
			
				ПоследняяСтрокаТаблицы = ПоследняяСтрокаТаблицы + 1;
				
				// Проверим все остальные строки соответсвия показателей на наличие итератора
				Если Найти(СоответствиеПоказателей[ПоследняяСтрокаТаблицы].Имя1С, "*") > 0 Тогда
					СтрокаТаблицыДляИдентификации = ПоследняяСтрокаТаблицы;					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаТаблицыДляИдентификации = Неопределено Тогда
				СтрокаТаблицыДляИдентификации = ПоследняяСтрокаТаблицы;
				
				Если ФлагОтладки = Истина Тогда
					Сообщить("1С-Звит. Заполнение табличного поля """+ИмяТаблицы+""". Итератор не задан!", СтатусСообщения.Внимание);					
				КонецЕсли;
				
			КонецЕсли;
			
			// будем формировать строки таблицы пока будем находить данные 
			ШаблонИмениПоказателяДляИдентификации = СоответствиеПоказателей[СтрокаТаблицыДляИдентификации].Имя1С;
			ДлинаНомераДляИдентификации           = СоответствиеПоказателей[СтрокаТаблицыДляИдентификации].ДлинаНомера;
			
			// Определим количество строк
			ТекНомерСтрокиТаблицы = 1;
			ИмяТестовогоПоказателяТекСтрокиТаблицы = ПолучитьИмяПоказателяВТаблице(ШаблонИмениПоказателяДляИдентификации, ДлинаНомераДляИдентификации, ТекНомерСтрокиТаблицы);
			// Есть показатель с очередным номером в списке показателей - значит есть и вся строка с таким номером ТекНомерСтрокиТаблицы
			Пока ИмяТестовогоПоказателяТекСтрокиТаблицы <> "" 
			   И ДанныеОтчета[СоответствиеПоказателей[СтрокаТаблицыДляИдентификации].Таблица1С].Свойство(ИмяТестовогоПоказателяТекСтрокиТаблицы) Цикл						
				ТекНомерСтрокиТаблицы = ТекНомерСтрокиТаблицы + 1;
				ИмяТестовогоПоказателяТекСтрокиТаблицы = ПолучитьИмяПоказателяВТаблице(ШаблонИмениПоказателяДляИдентификации, ДлинаНомераДляИдентификации, ТекНомерСтрокиТаблицы);
			КонецЦикла;
			КоличествоСтрокТаблицы = ТекНомерСтрокиТаблицы-1;
			
			Для ТекНомерСтрокиТаблицы = 1 По КоличествоСтрокТаблицы Цикл
				Отчет.NewRow(ИмяТаблицы); 
				
				Для Инд1 = ПерваяСтрокаТаблицы По ПоследняяСтрокаТаблицы Цикл
					
					СтрокаСоответствия = СоответствиеПоказателей[Инд1];
					 					
					ИмяПоказателяТекСтрокиТаблицы = ПолучитьИмяПоказателяВТаблице(СтрокаСоответствия.Имя1С, СтрокаСоответствия.ДлинаНомера, ТекНомерСтрокиТаблицы);
					
					Если ИмяПоказателяТекСтрокиТаблицы = "" Тогда
						// этот параметр мы можем только вычислить
						ЗначПоказателя1С = Неопределено;						
                    ИначеЕсли ИмяПоказателяТекСтрокиТаблицы = "#" Тогда
						// это номер строки таблицы
						ЗначПоказателя1С = ТекНомерСтрокиТаблицы;						
					Иначе
						ЗначПоказателя1С = ПолучитьЗначениеПоказателя1С(ДанныеОтчета, СтрокаСоответствия.Таблица1С, ИмяПоказателяТекСтрокиТаблицы);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаСоответствия.Формат) Тогда
						Выполнить(СтрокаСоответствия.Формат);
					КонецЕсли;
					
					Если ФормироватьРасшифровку Тогда
						
						ИмяЯчейкиДляРасшифровки	= ПолучитьИмяПоказателяВТаблице(СтрокаСоответствия.Имя1СРасшифровки, СтрокаСоответствия.ДлинаНомера, ТекНомерСтрокиТаблицы);
						
						СтрокиРасшифровки = РасшифровкаОтчета.НайтиСтроки(Новый Структура("ИмяЯчейки", ИмяЯчейкиДляРасшифровки));
						
						Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
							
							СтрокаРасшифровкиЗвит1С = РасшифровкаОтчетаЗвит1С.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаРасшифровкиЗвит1С, СтрокаРасшифровки);
							
							СтрокаРасшифровкиЗвит1С.ИмяЯчейки = СтрокаСоответствия.ИмяЗвит + "_" + Формат(ТекНомерСтрокиТаблицы, "ЧГ=0"); 
						
						КонецЦикла;
						
					КонецЕсли;
					
				    ЗаписатьВОтчетЗвит1С(Отчет, ИмяТаблицы, СтрокаСоответствия.ИмяЗвит, ЗначПоказателя1С);
					
				КонецЦикла;
				
			КонецЦикла;
			
			// продолжим обход таблицы соответствия для следующей таблицы или показателя
		    ТекНомерСтроки = ПоследняяСтрокаТаблицы + 1;
			
		КонецЕсли;	
	  
	КонецЦикла;

	Если ФормироватьРасшифровку 
	   И РасшифровкаОтчетаЗвит1С.Количество() = 0 Тогда
		// фактически расшифровки нет
		РасшифровкаОтчетаЗвит1С = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет установку значений параметров в отчетах 1С-Звит
//
Процедура ЗаписатьВОтчетЗвит1С(Отчет, ИмяТаблицыЗвит1С, ИмяЗвит1С, Значение);
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, Значение); 
	Исключение
		Сообщить("1С-Звит. Ошибка установки показателя (схема """+Отчет.CharCode+?(ПустаяСтрока(ИмяТаблицыЗвит1С),"",""", имя таблицы """+ИмяТаблицыЗвит1С)+""", поле """+ИмяЗвит1С+""", тип значения """+ТипЗнч(Значение)+""", значение """+ Значение+""")", СтатусСообщения.Внимание);
	КонецПопытки;
		
КонецПроцедуры

// Функция возвращает таблицу значений с соответствия показателей 1С и 1С-Звит
// оформленную на основании служебного макета "ПоказателиЗвит1С"
//
Функция ПолучитьТаблицуСоответствияПоказателейЗвит1С(ТабличныйДокумент)

	ТаблицаСоответствия = Новый ТаблицаЗначений();
	ТаблицаСоответствия.Колонки.Добавить("ТаблицаЗвит");
	ТаблицаСоответствия.Колонки.Добавить("ИмяЗвит");
	ТаблицаСоответствия.Колонки.Добавить("Имя1С");
	ТаблицаСоответствия.Колонки.Добавить("Имя1СРасшифровки");
	ТаблицаСоответствия.Колонки.Добавить("ДлинаНомера");
	ТаблицаСоответствия.Колонки.Добавить("Таблица1С");
	ТаблицаСоответствия.Колонки.Добавить("Формат");
	
	КоличествоСтрок = ТабличныйДокумент.Область().Низ;
	
	Для Инд = 1 По КоличествоСтрок Цикл
	
		ИмяЗвит = СокрЛП(ТабличныйДокумент.Область(Инд, 2, Инд, 2).Текст);

		Если ПустаяСтрока(ИмяЗвит) ИЛИ Лев(ИмяЗвит,2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаб = ТаблицаСоответствия.Добавить();
		
		СтрокаТаб.ТаблицаЗвит 	   = СокрЛП(ТабличныйДокумент.Область(Инд, 1, Инд, 1).Текст);
		СтрокаТаб.ИмяЗвит 		   = ИмяЗвит;
		СтрокаТаб.Имя1С 		   = СокрЛП(ТабличныйДокумент.Область(Инд, 3, Инд, 3).Текст);
		СтрокаТаб.Имя1СРасшифровки = СокрЛП(ТабличныйДокумент.Область(Инд, 4, Инд, 4).Текст);
		СтрокаТаб.ДлинаНомера 	   = СокрЛП(ТабличныйДокумент.Область(Инд, 5, Инд, 5).Текст);
		СтрокаТаб.Таблица1С 	   = СокрЛП(ТабличныйДокумент.Область(Инд, 6, Инд, 6).Текст);
		СтрокаТаб.Формат 		   = СокрЛП(ТабличныйДокумент.Область(Инд, 7, Инд, 7).Текст);
		
		Если ПустаяСтрока(СтрокаТаб.Имя1СРасшифровки) Тогда
			СтрокаТаб.Имя1СРасшифровки = СтрокаТаб.Имя1С;
		КонецЕсли;
		
	КонецЦикла;
	
	// Для корректной работы функции заполнения данные связанные
	// с одной таблицей должны распологаться без пропусков
	ТаблицаСоответствия.Сортировать("ТаблицаЗвит, ИмяЗвит");
	
	Возврат	ТаблицаСоответствия;

КонецФункции

// Функция возвращает имя поля в таблицах 1С 
//
Функция ПолучитьИмяПоказателяВТаблице(ШаблонИмениПоля, ДлинаНомера, Номер)

	Если Не ЗначениеЗаполнено(ДлинаНомера) Тогда
		ДлинаНомера = "4";
	КонецЕсли;
	
	Возврат СтрЗаменить(ШаблонИмениПоля, "*", Формат(Номер, "ЧГ=0; ЧВН=; ЧЦ="+ДлинаНомера));
	
КонецФункции

// Функция возвращает необходимые данные из структуры 1С
// 
Функция ПолучитьЗначениеПоказателя1С(Данные, ИмяТаблицы,ИмяПоказателя)

	Значение = Неопределено;
	
	// Если показатель 1С не задан, он может быть только вычислен
	Если ПустаяСтрока(ИмяПоказателя) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Попытка
		Значение = Данные[ИмяТаблицы][ИмяПоказателя]
	Исключение
		Если ФлагОтладки = Истина Тогда
			Сообщить("1С-Звит. Ошибка получения показателя (табличное поле """ + ИмяТаблицы + """, показатель """ + ИмяПоказателя + """). Имя табличного поля или показателя указано не верно!", СтатусСообщения.Внимание);
		КонецЕсли;
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С РАСШИФРОВКОЙ

// Функция возвращает параметры расшифровки для 1С-Звит
//
Функция ПолучитьПараметрыРасшифровкиЗвит1С(Знач Запрос)

	ПараметрыРасшифровки = Новый Структура();
	
	НомПоз   = Найти(Запрос,",");
	ИдОтчета = Число(СокрЛП(Лев(Запрос,НомПоз -1))); 
	
	Запрос = СокрЛП(Сред(Запрос,НомПоз+1));
	НомПоз = Найти(Запрос,",");
	ИмяПок = СокрЛП(Лев(Запрос,НомПоз-1)); 
	
	Запрос = СокрЛП(Сред(Запрос,НомПоз+1));
	НомПоз = Найти(Запрос,",");
	Если НомПоз = 0 Тогда
	    НомСтрТаб = Число(СокрЛП(Запрос));   
	Иначе	
		НомСтрТаб = Число(СокрЛП(Лев(Запрос,НомПоз-1)));   
	КонецЕсли;
	Если НомСтрТаб = 0 Тогда
		Если ВРЕГ(ЛЕВ(ИмяПок, 3)) = "TAB" Тогда
		    // показатель в таблице - увеличим не единицу его номер
			ИмяПок = ИмяПок + "_1";
		КонецЕсли;
	Иначе
		ИмяПок = ИмяПок + "_" + Формат(НомСтрТаб + 1, "ЧГ=0");
	КонецЕсли;
	
	Если НомПоз > 0 Тогда
		НомерСтрокиРасшифровки = Число(Сред(Запрос,НомПоз+1)); 
	Иначе
		НомерСтрокиРасшифровки = 0;
	КонецЕсли;
	
	ПараметрыРасшифровки.Вставить("ИдОтчета",  ИдОтчета);
	ПараметрыРасшифровки.Вставить("ИмяЯчейки", ИмяПок);
	ПараметрыРасшифровки.Вставить("НомерСтрокиРасшифровки",  НомерСтрокиРасшифровки);
	
	Возврат ПараметрыРасшифровки;

КонецФункции 

// Функция возвращает расшифровку для 1С-Звит
//
Функция ПолучитьРасшифровкуЗвит1С(ИдОтчета)

	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.Расшифровка,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ИмяСхемыЗвит1С,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ПредставлениеПериода,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.Организация,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ПериодНач,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ПериодКон
	|ИЗ
	|	РегистрСведений.РасшифровкиРегламентированныхОтчетовЗвит1С КАК РасшифровкиРегламентированныхОтчетовЗвит1С
	|ГДЕ
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ИдОтчета = &ИдОтчета";
	
	Запрос.УстановитьПараметр("ИдОтчета", ИдОтчета);
	Расшифровка = Запрос.Выполнить().Выгрузить();
	
	Если Расшифровка.Количество() = 0 Тогда
	
		Возврат Неопределено;
		
	Иначе
		
		// строка таблицы
		Возврат Расшифровка[0];
	
	КонецЕсли;	

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ РАБОТУ РЕГ.ОТЧЕТОВ

// Процедура устанавливает значения служебных переменных в рег отчетах если они есть
//
Процедура НастройкаФормыРегламентированногоОтчета(ФормаОтчета)
	
	Если ФлагОтладки Тогда
		// При появлении модального окна рег.отчета данные не должны измениться
		// При закрытии ничего не должно сохраниться
		ФормаОтчета.УстановитьДействие("ПередОткрытием", Неопределено);
		ФормаОтчета.УстановитьДействие("ПриОткрытии",    Неопределено);
		ФормаОтчета.УстановитьДействие("ПередЗакрытием", Неопределено);
		ФормаОтчета.УстановитьДействие("ПриЗакрытии",    Неопределено);
	КонецЕсли;
	
	ФормаОтчета.мМенеджерЗвит1С = ЭтотОбъект;
	
КонецПроцедуры

// Процедура восстанавливает актуальный режим отладки
//
Процедура УстановитьРежимОтладки() Экспорт

	ФлагОтладки = ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_ФлагОтладки");

КонецПроцедуры

// Функция заполняет и сохраняет отчет 1С-Звит 
//
Функция ЗаполнитьИСохранитьОтчетЗвит1С(ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета, ДанныеДляСохраненияРасшифровкиОтчета = Неопределено);
	
	ИмяОтчета  = СоответствиеОтчета.ИмяОтчета;
	ИмяФормы   = СоответствиеОтчета.ИмяФормы;
	ИмяОбласти = СоответствиеОтчета.ИмяОбласти;
	
	// Получаем менеджер отчета
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИмяОтчета);
	Если ТекОтчет = Неопределено Тогда
		ТекстОшибки = "Не вдалося відкрити звіт """+ИмяОтчета+"""!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
		Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	// Получаем требуемую форму отчета
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИмяОтчета, ИмяФормы,,Новый УникальныйИдентификатор);
	Если ТекФорма = Неопределено Тогда
		ТекстОшибки = "Не вдалося відкрити форму """+ИмяОтчета+"."+ИмяФормы+"""!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
		Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	// Получаем таблицу соответствия имен
	Попытка
		СоответствиеПоказателейЗвит1СМакет = ТекОтчет.ПолучитьМакет("ПоказателиЗвит1С");
	Исключение 
		ТекстОшибки = "Відсутній макет з відповідністю показників 1С-Звіт!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
		Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	СоответствиеПоказателейЗвит1СМакет.КодЯзыкаМакета = "ru";
			
	Если СоответствиеПоказателейЗвит1СМакет.Области.Найти(ИмяОбласти) = Неопределено Тогда
		ТекстОшибки = "Відсутній опис відповідностей показників 1C-Звіт!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
		Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		Возврат Ложь;
	Иначе
		СоответствиеПоказателейЗвит1СОбласть = СоответствиеПоказателейЗвит1СМакет.ПолучитьОбласть(ИмяОбласти);	
	КонецЕсли;	
	
	СоответствиеПоказателейЗвит1С = ПолучитьТаблицуСоответствияПоказателейЗвит1С(СоответствиеПоказателейЗвит1СОбласть);
	
	// Заполняем отчет (получаем его данные и расшифровку)
	ДанныеОтчета      = Неопределено;
	РасшифровкаОтчета = Неопределено;
	
	ИспользоватьКеш = ДанныеОтчетов <> Неопределено И ДанныеОтчетов.Свойство(ИмяОтчета + "_" + ИмяФормы, ДанныеОтчета);	
	Если ИспользоватьКеш Тогда
		// при групповом заполнении этот отчет уже вызывался
		// и его данные имеются в памяти
		// заново заполнять не будем
		
		// Восстановим расшифровку показателей
		РасшифровкиОтчетов.Свойство(ИмяОтчета + "_" + ИмяФормы, РасшифровкаОтчета);
	Иначе	
		
		Для каждого КлючИЗанчение Из НастройкаФормыОтчета Цикл
			Попытка
			ТекФорма[КлючИЗанчение.Ключ] = КлючИЗанчение.Значение;
			Исключение КонецПопытки;
		КонецЦикла;
					
		НастройкаФормыРегламентированногоОтчета(ТекФорма);
		
		// вызываем процедуру формирования необходимых данных - имена показателей будут в формате 1С
		Попытка
			СтруктураДанных = ТекФорма.СформироватьДанныеДляЗвит1С();
		Исключение
			СтруктураДанных = Неопределено;		
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если СтруктураДанных = Неопределено Тогда
			ТекстОшибки = "Помилка алгоритму заповнення звіту!
						  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе
						  |
						  |"+ОписаниеОшибки;
			Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
			СтруктураДанных.Свойство("РасшифровкаОтчета", РасшифровкаОтчета);
			СтруктураДанных.Свойство("ДанныеОтчета", ДанныеОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	// Сохраняем данные отчета для использования в других отчетах из заполняемой группы отчетов
	Если ДанныеОтчетов <> Неопределено И ДанныеОтчета <> Неопределено Тогда
		ДанныеОтчетов.Вставить(ИмяОтчета + "_" + ИмяФормы, ДанныеОтчета);
	КонецЕсли;

	// Заполняем показатели отчета и передаем отчет в Звит1С
	// Одновременно преобразовываем расшифровку и оставляем в ней только строки,
	// относящиеся к данному отчету
	// После сохранения сможем получить  ИД отчета из ЗВит1С и под этим номером сохранить расшифровку
	РасшифровкаОтчетаЗвит1С = Неопределено;
	
	ЗаполнениеПоказателейОтчетаЗвит1С(ОтчетЗвит1С, СоответствиеПоказателейЗвит1С, ДанныеОтчета, РасшифровкаОтчета, РасшифровкаОтчетаЗвит1С);
		
	ИДотчета = Компонента.SaveReport(ОтчетЗвит1С); 
	Если ФлагОтладки Тогда
		Сообщить("1С-Звит. Сохранен  отчет 1С-Звит (ID " + ИДотчета+")");	
	КонецЕсли;
	
	// Сохраняем расшифровку в регистре сведений после 
	// получения ИД отчета - как ключ для хранения в базе
	Если РасшифровкиОтчетов <> Неопределено И РасшифровкаОтчетаЗвит1С <> Неопределено Тогда
		
		// сохраняем в памяти расшифровку с именами показателей в формате 1С
		РасшифровкиОтчетов.Вставить(ИмяОтчета + "_" + ИмяФормы, РасшифровкаОтчета);		
		
		// сохраняем расшифровку в регистре сведений для последующего ее открытия вызовом из Звит1С
		Если РасшифровкаОтчетаЗвит1С <> Неопределено Тогда
			
			
			РСРасшифрокаЗвит1С = РегистрыСведений.РасшифровкиРегламентированныхОтчетовЗвит1С.СоздатьНаборЗаписей();
			РСРасшифрокаЗвит1С.Отбор.ИдОтчета.Значение = ИДотчета;
			РСРасшифрокаЗвит1С.Отбор.ИдОтчета.Использование = Истина;
			
			ЗаписьРСРасшифрокаЗвит1С = РСРасшифрокаЗвит1С.Добавить();
			
			ЗаписьРСРасшифрокаЗвит1С.Расшифровка 	= Новый ХранилищеЗначения(РасшифровкаОтчетаЗвит1С,  Новый СжатиеДанных(9));
			
			ЗаписьРСРасшифрокаЗвит1С.ИдОтчета 		= ИдОтчета;
			ЗаписьРСРасшифрокаЗвит1С.ИмяСхемыЗвит1С = ИмяСхемыЗвит1С;
			
			ЗаписьРСРасшифрокаЗвит1С.Организация 	= ДанныеДляСохраненияРасшифровкиОтчета.Организация;
			ЗаписьРСРасшифрокаЗвит1С.ПредставлениеПериода = ПредставлениеПериода(ДанныеДляСохраненияРасшифровкиОтчета.ДатаНачалаПериодаОтчета, ДанныеДляСохраненияРасшифровкиОтчета.ДатаКонцаПериодаОтчета, "Л=uk_UA; ФП=Истина");
			ЗаписьРСРасшифрокаЗвит1С.ПериодНач 		= ДанныеДляСохраненияРасшифровкиОтчета.ДатаНачалаПериодаОтчета;
			ЗаписьРСРасшифрокаЗвит1С.ПериодКон 		= ДанныеДляСохраненияРасшифровкиОтчета.ДатаКонцаПериодаОтчета;
			ЗаписьРСРасшифрокаЗвит1С.Периодичность 	= ДанныеДляСохраненияРасшифровкиОтчета.Периодичность;
			ЗаписьРСРасшифрокаЗвит1С.ТипПериода 	= ДанныеДляСохраненияРасшифровкиОтчета.ТипПериода;
			ЗаписьРСРасшифрокаЗвит1С.ДатаФормирования = ТекущаяДата();
			
			Попытка
				РСРасшифрокаЗвит1С.Записать();
				Если ФлагОтладки = Истина Тогда
					Сообщить("1С-Звит. Расшифровка записана (строк "+РасшифровкаОтчетаЗвит1С.Количество()+")");	
				КонецЕсли;
			Исключение
				ПредупреждениеЗвит1С("Не вдалося зберегти розшифровку звіту!", "Помилка");
			КонецПопытки;
		
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
			

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИНТЕРАКТИВНОЙ РАБОТЫ С 1С-ЗВИТ

// Функция определяет, возможен ли запуск 1С-Звит на данном компьютере
//
Функция ВозможенЗапускЗвит1С(ВыводитьСообщенияОбОшибках)

	// Определим, установлен ли 1С-Звит
	Если Компонента <> Неопределено Тогда
		// При инициализации менеджера компонента еще не определена
		Если Компонента.IsZvitInstalled() = 0 Тогда
			Если ВыводитьСообщенияОбОшибках Тогда
				Предупреждение(НСтр("ru = 'Ошибка подключения к системе ""1С-Звит""
									 |Приложение ""1С-Звит"" не установлено'; uk = 'Помилка підключення до системи ""1С-Звіт""
									 |Програму ""1С-Звіт"" не встановлено'"));	
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим есть ли организации
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПометкаУдаления = ЛОЖЬ
	|	И Организации.ДатаНачалаИспользованияЗвит1С <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("ДатаНачалаИспользованияЗвит1С", РабочаяДата);
    РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Если ВыводитьСообщенияОбОшибках Тогда
			ТекстВопроса = "На "+Формат(РабочаяДата, "ДФ=dd.MM.yyyy")+
			               НСтр("ru = ' нет организаций использующих ""1С-Звит"".
	                            |Необходимо указать дату начала использования ""1С-Звит"" в карточке организации.
	                            |
	                            |Открыть справочник организаций?'; uk = ' нема організації що використовують ""1С-Звіт""
	                            |Необхідно вказати дату початку використання ""1С-Звіт"" в картці організації.
	                            |
	                            |Відкрити довідник організацій?'");
			ЗаголовокВопроса = НСтр("ru = 'Операция отменена'; uk = 'Операція скасована'");
			
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,ЗаголовокВопроса) = КодВозвратаДиалога.ОК Тогда
				Справочники.Организации.ПолучитьФормуСписка().Открыть();
			КонецЕсли;
		КонецЕсли;
		
	    Возврат Ложь;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Функция выполняющая подключение dll
//
Функция Инициализация(ВыводитьСообщенияОбОшибках) Экспорт
	
	Если Не ВозможенЗапускЗвит1С(ВыводитьСообщенияОбОшибках) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		DLL = глМенеджерЗвит1С.ПолучитьМакет("Zvit1C_dll");
		ИмяВременногоФайла = КаталогВременныхФайлов() + "Zvit1c.dll";
		Попытка
			DLL.Записать(ИмяВременногоФайла);
		Исключение
			Если НайтиФайлы(ИмяВременногоФайла).Количество() = 0 Тогда
				ВызватьИсключение "";
			КонецЕсли;
		КонецПопытки;
		
		ЗагрузитьВнешнююКомпоненту(ИмяВременногоФайла);	

		Компонента = Новый COMОбъект("AddIn.Zvit1C");
					
	Исключение		
		Компонента = Неопределено;
		
		Если ВыводитьСообщенияОбОшибках Тогда
			Предупреждение(НСТР("ru='Ошибка при загрузке компоненты ""zvit1c.dll""!';uk='Помилка при завантаженні компоненти ""zvit1c.dll""!'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	УстановитьРежимОтладки();
	
	Возврат Истина;
	
КонецФункции

// Процедура открывает форму настроек для 1С-Звит
//
Процедура ОткрытьФормуНастроекЗвит1С(ЭтаФорма = Неопределено) Экспорт
			
	// Внимание! Вызов инициируется из конфигурации
	Форма = ПолучитьФорму("ФормаНастройки");
	// Данный флаг устанавливается только программно что позволяет
	// открывать только самую актуальную форму настроек, с учетом 
	// поставки менеджера в виде внешней обработки
	Форма.мЭтоАктуальнаяФорма = Истина;
	Форма.Открыть();

КонецПроцедуры

// Функция выполняет запуск 1С-Звит. Возвращает Истина в случае успеха
//
Функция ЗапуситьЗвит1С(НаПереднийПлан = Истина, Организация = Неопределено) Экспорт
	
	// Внимание! Вызов инициируется из конфигурации
	
	// Возможно 1С-Звит уже запущен
	Если Компонента.IsZvitActive() = 1 Тогда
		Если НаПереднийПлан Тогда
			Компонента.BringZvitToFront();		
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;

	Если Не ВозможенЗапускЗвит1С(Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если запустили в первый раз нужно проверить настройки отчетов
	Если ВосстановитьЗначение("РегламентированнаяОтчетность_МенеджерЗвит1С_НастройкаПрозводилась") <> Истина Тогда
		ТекстВопроса = НСтр("ru = 'Перед использованием ""1С-Звит"" необходимо выполнить настройку параметров 
							 |Открыть форму настройки?'; uk = 'Перед використанням ""1С-Звіт"" необхідно виконати настройку параметрів
							 |Відкрити форму налаштування?'");
		Если Вопрос(ТекстВопроса,  РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОткрытьФормуНастроекЗвит1С();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		// Выполним запуск выбрав сразу определенную организацию
		ПользовательЗвит1С = СокрЛП(ИмяПользователя());
		ПользовательЗвит1С = Лев(ПользовательЗвит1С, 8);	
		
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
        КодПоЕДРПОУ        = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, СписокПоказателей).КодПоЕДРПОУ;
		
		НаименованиеПолное = Организация.НаименованиеПолное;
		
		РезультатЗапуска = Компонента.LaunchZvitDirect(ПользовательЗвит1С, КодПоЕДРПОУ, НаименованиеПолное);
	Иначе		
	    РезультатЗапуска = Компонента.LaunchZvit();
	КонецЕсли;
	
	Если РезультатЗапуска = 0 Тогда
		Предупреждение(НСтр("ru = 'Ошибка подключения к системе ""1С-Звит""'; uk = 'Помилка підключення до системи ""1С-Звіт""'"));	
		Возврат Ложь;
	КонецЕсли;
		
	Если НаПереднийПлан Тогда
		Компонента.BringZvitToFront();		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Процедура выполняет закрывает 1С-Звит. Возвращает Истина в случае успеха
//
Процедура ЗавершитьЗвит1С(Отказ) Экспорт
	
	// Внимание! Вызов инициируется из конфигурации
	Если Компонента = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагОтладки Тогда
		Возврат;
	КонецЕсли;
	
	Если Компонента.IsZvitActive() = 1 Тогда
		Если Компонента.ExitZvit() = 0 Тогда
			Предупреждение(НСтр("ru='Необходимо в начале закрыть окно программы ""1С-Звит""!';uk='Необхідно попередньо закрити вікно програми ""1С-Звіт""!'"));			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выводит сообщение в окне 1С-Звит. 
// Сообщения должны быть оформлены только на украинском языке, т.к. 1С-Звит
// не поддерживает мультиязычность
//
Процедура ПредупреждениеЗвит1С(ТекстПредупреждения, Заголовок) Экспорт

	Попытка
		
		Если ФлагОтладки Тогда
			Компонента.BringZvitToFront();
		КонецЕсли;
		
	    Компонента.MsgBox(ТекстПредупреждения, Заголовок);
		
		Если ФлагОтладки Тогда
			Компонента.Bring1CToFront();
		КонецЕсли;
		
	Исключение
	    Предупреждение(ТекстПредупреждения, , Заголовок);
	КонецПопытки;	

КонецПроцедуры

// Процедура обработчик внешнего события
//
Процедура ОбработкаВнешнегоСобытияЗвит1С(Источник, Событие, Данные) Экспорт

	// Внимание! Вызов инициируется из конфигурации
	Команда = Врег(Событие);
	ИДВызова = Данные;
	
	Если ФлагОтладки = Истина Тогда
		Сообщить("1С-Звит. Внешнее событие (событие """+Событие+""", данные """ + Данные+""")");
	КонецЕсли;
	
	Если глМенеджерЗвит1С = Неопределено Тогда
		Если ФлагОтладки = Истина Тогда
			Сообщить("1С-Звит. Ошибка обработки внешнего события - менеджер ""1С-Звит"" не инициализирован");
		КонецЕсли;
		Возврат;
	КонецЕсли;	

	// Перебираем все рег.отчеты только при первых признаках жизни от 1С-Звит
	Если мСоответствиеОтчетов = Неопределено Тогда
		ЗаполнитьСоответствиеОтчетов();	
	КонецЕсли;
		
	Если Команда = "USER" Тогда    
		
		ПользовательЗвит1С = СокрЛП(ИмяПользователя());
		ПользовательЗвит1С = Лев(ПользовательЗвит1С, 8);
		Компонента.SaveUser(ПользовательЗвит1С);                 
		
	ИначеЕсли Команда = "REQUESTDBINFO" Тогда
		
		базаИнфо = Компонента.GETDBINFO( ИДВызова );
		
		базаИнфо.Name = СтрокаСоединенияИнформационнойБазы();
			
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
		
		// В случае использования RLS мы обязаны использовать параметр выборки записей "РАЗРЕШЕННЫЕ"
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	Организации.НаименованиеПолное
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПометкаУдаления = ЛОЖЬ
		|	И Организации.ДатаНачалаИспользованияЗвит1С <> ДАТАВРЕМЯ(1, 1, 1)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл			
			базаИнфо.AddFirm(РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Выборка.Ссылка, РабочаяДата, СписокПоказателей).КодПоЕДРПОУ, Выборка.НаименованиеПолное);
		КонецЦикла;
		
		Компонента.SaveDBInfo(базаИнфо);
		
	ИначеЕсли Команда = "BEGINREPGROUP" Тогда    
		// начало заполнение группы отчетов
		
		// инициализация структуры
		// структура - код отчета + данные
		ДанныеОтчетов 	   = Новый Структура();
		РасшифровкиОтчетов = Новый Структура();
		Если ФлагОтладки Тогда
			Компонента.Bring1CToFront();
		КонецЕсли;
		
	ИначеЕсли Команда = "ENDREPGROUP" Тогда    
		// конец заполнения группы отчетов
		
		// очистка структуры
		ДанныеОтчетов 	   =  Неопределено;
		РасшифровкиОтчетов =  Неопределено;
		
		Если ФлагОтладки Тогда
			Компонента.BringZvitToFront();
		КонецЕсли;
		
	ИначеЕсли Команда = "REPORT" Тогда
	
		// Заполнение отчета из группы связанных отчетов
		ОтчетЗвит1С = Компонента.GetEmptyReport(ИДВызова); 
		
		// По-умолчанию используются единицы и точности которые устанавливаются при открытии отчета (по умолчанию)
		ИмяСхемы = ОтчетЗвит1С.CharCode;
				
		// Определяем используемый для заполнения имя отчета и имя формы		
		СоответствиеОтчета = мСоответствиеОтчетов.Найти(ИмяСхемы, "ИмяСхемыЗвит1С");
		
		Если СоответствиеОтчета = Неопределено Тогда 
			// Заполнение не предусмотрено в 1С
			ТекстОшибки = "Заповнення звіта """+ИмяСхемы+"""
						  |даними з 1С не передбачене!";
			Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Если СоответствиеОтчета.ИмяОтчета = "РегламентированныйОтчетНалоговаяНакладная"
		 ИЛИ СоответствиеОтчета.ИмяОтчета = "РегламентированныйОтчетПриложение2КНалоговойНакладной" Тогда
			// Два исключения из общих правил
			ТекстОшибки = "Заповнення звіта """+ИмяСхемы+"""
						  |Виконується з форми відповідного документа ""1С""!";
			Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);
			Возврат;
		КонецЕсли;		
		
		ДатаНачалаПериодаОтчета = '00010101';
		ДатаКонцаПериодаОтчета  = '00010101';
		Периодичность = Перечисления.Периодичность.ПустаяСсылка();
		
		ТипПериода     = ОтчетЗвит1С.PeriodType;
		ДатаПериода    = ОтчетЗвит1С.PeriodDate;
		
		ОпределитьТипПериодаЗвит1С(ДатаПериода, ТипПериода, Периодичность, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
		ОрганизацияЗвит1С = ОпределитьТекущуюОрганизациюЗвит1С(ОтчетЗвит1С.FIRM_EDRPOU);
		Если Не ЗначениеЗаполнено(ОрганизацияЗвит1С) Тогда
			ТекстОшибки = "В 1С не знайдено фірму з ЄДРПОУ "+ОтчетЗвит1С.FIRM_EDRPOU+"
			              |Заповенення звіту "+ИмяСхемы+" неможливе";
			Компонента.CancelReport(ОтчетЗвит1С, ТекстОшибки);	
			Возврат;
		КонецЕсли;
		
		Если ФлагОтладки Тогда
			Сообщить("1С-Звит. Запрос заполнения отчета из 1С-Звит (схема """+ИмяСхемы+""", тип периода """+ТипПериода+""", периодичность """+Периодичность+""")");
		КонецЕсли;

		ИмяСхемыЗвит1С = ИмяСхемы;
		
		НастройкаФормыОтчета = Новый Структура;
		НастройкаФормыОтчета.Вставить("Организация", ОрганизацияЗвит1С);
		НастройкаФормыОтчета.Вставить("мДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
		НастройкаФормыОтчета.Вставить("мДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
		НастройкаФормыОтчета.Вставить("мВыбраннаяФорма", СоответствиеОтчета.ИмяФормы);
		НастройкаФормыОтчета.Вставить("мПериодичность", Периодичность);
		НастройкаФормыОтчета.Вставить("Периодичность", Периодичность);
		НастройкаФормыОтчета.Вставить("ДатаПодписи", РабочаяДата);
		
		ДанныеДляСохраненияРасшифровкиОтчета = Новый Структура;
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("Организация", ОрганизацияЗвит1С);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("Периодичность", Периодичность);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("ТипПериода", ТипПериода);
		
		ЗаполнитьИСохранитьОтчетЗвит1С(ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета, ДанныеДляСохраненияРасшифровкиОтчета);
		
		ИмяСхемыЗвит1С = "";
		
	ИначеЕсли Команда = "SHOWREPCELLDETAILS" ИЛИ Команда = "SHOWDETAILSROW" Тогда 
		// Расшифровка		
		// Здесь нужно получить сохраненную расшифровку
		// Определим какую расшифровку "Заказал" Звит1С
		ПараметрыРасшифровки = ПолучитьПараметрыРасшифровкиЗвит1С(ИДВызова);
		
		Если Команда = "SHOWDETAILSROW"
		   И ПараметрыРасшифровки.НомерСтрокиРасшифровки = 0 Тогда
			// вызвали "не ту" строку
			Возврат;
		КонецЕсли;
		
		// Поищем сохраненную расшифровку
		РасшифровкаЗвит1С = ПолучитьРасшифровкуЗвит1С(ПараметрыРасшифровки.ИдОтчета);
		
		Если РасшифровкаЗвит1С = Неопределено 
		 ИЛИ ТипЗнч(РасшифровкаЗвит1С.Расшифровка.Получить()) <> Тип("ТаблицаЗначений") Тогда
			Возврат;
		КонецЕсли;
		
		// Здесь нужно открыть форму расшифровки или отказаться от этой затеи
		ТаблицаРасшифровки = РасшифровкаЗвит1С.Расшифровка.Получить();
		
		// Открываем расшифровку как из регл. отчета
		Обраб = Обработки.РасшифровкаРегламентированнойОтчетности.Создать();
		
		// Нужно создать муляж формы регл. отчета
		ЗаглушкаФормы = Новый Структура();
		ЗаглушкаФормы.Вставить("СпП", 						ТаблицаРасшифровки);
		ЗаглушкаФормы.Вставить("Организация", 				РасшифровкаЗвит1С.Организация);
		ЗаглушкаФормы.Вставить("мДатаНачалаПериодаОтчета", 	РасшифровкаЗвит1С.ПериодНач);
		ЗаглушкаФормы.Вставить("мДатаКонцаПериодаОтчета", 	РасшифровкаЗвит1С.ПериодКон);
		ЗаглушкаФормы.Вставить("мСтруктураВариантыЗаполнения", Новый Структура());
		ЗаглушкаФормы.Вставить("Заголовок", 				РасшифровкаЗвит1С.ИмяСхемыЗвит1С + " за " + РасшифровкаЗвит1С.ПредставлениеПериода);
		
		Обраб.Форма     = ЗаглушкаФормы;
		Обраб.ИмяЯчейки = ПараметрыРасшифровки.ИмяЯчейки;
		
		ФормаРасшифровки = Обраб.ПолучитьФорму();
		
		Если Команда = "SHOWREPCELLDETAILS" Тогда
			ФормаРасшифровки.ПередаватьДанныеВСистемуЗвит1С = Истина;
		Иначе	
			ФормаРасшифровки.ПередаватьДанныеВСистемуЗвит1С = Ложь;
		КонецЕсли;
		ФормаРасшифровки.мКомпонентаЗвит1С = Компонента;
		
		ФормаРасшифровки.Показать();
		
		Если Команда = "SHOWREPCELLDETAILS" Тогда
			// форма передала данные в Звит1С
			Компонента.SaveDetails();
		Иначе
			// Расшифровка конкретной строки из Звит1С,
		    // сделаем эмуляцию вызова подробной расшифровки конкретной строки
			Расшифровка = ФормаРасшифровки.ЭлементыФормы.ПолеРасшифровки.Область(ПараметрыРасшифровки.НомерСтрокиРасшифровки, 2, ПараметрыРасшифровки.НомерСтрокиРасшифровки, 2).Расшифровка;
			Если Расшифровка <> Неопределено Тогда
				ФормаРасшифровки.ПолеРасшифровкиОбработкаРасшифровки(Неопределено, Расшифровка, Неопределено);				
				Компонента.Bring1CToFront();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Команда = "FIRMCARD" Тогда    
		// Выгрузка данных по организации
		
		Звит1С_Спр = Компонента.GETIMPORTSPR( "ORG" ); 
		
		Компонента.SAVEIMPORTSPR( Звит1С_Спр ); 

	КонецЕсли;

КонецПроцедуры

// Функция определяет, доступен ли 1С-Звит для пользователя
//
Функция ВыгрузитьДокумент(ДокументСсылка) Экспорт
	
	// Внимание! Вызов инициируется из конфигурации
	
	// Поддерживаем выгрузку только двух документов
    Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
		ИмяОтчета = "РегламентированныйОтчетНалоговаяНакладная";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
		ИмяОтчета = "РегламентированныйОтчетПриложение2КНалоговойНакладной";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	// Перебираем все рег.отчеты только при первых признаках жизни от 1С-Звит
	Если мСоответствиеОтчетов = Неопределено Тогда
		ЗаполнитьСоответствиеОтчетов();
	КонецЕсли;
			
	// Проверим документ
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено
	 ИЛИ Не ЗначениеЗаполнено(ДокументСсылка.Организация) Тогда		
		Предупреждение(НСтр("ru = 'Выгрузка в систему ""1С-Звит"" невозможна.
                             |Организация не определена'; uk = 'Вивантаження в систему ""1С-Звіт"" неможливо.
                             |Організація не визначена'"));	
		Возврат Ложь;
	КонецЕсли;
	
	Организация = ДокументСсылка.Организация;
	Если Не ЗначениеЗаполнено(Организация.ДатаНачалаИспользованияЗвит1С) Тогда
		Предупреждение(НСтр("ru = 'Выгрузка в систему ""1С-Звит"" невозможна, ""1С-Звит"" не используется для организации'; uk = 'Вивантаження в систему ""1С-Звіт"" неможливо, ""1С-Звіт"" не використовується для організації'")
		+" """+Строка(Организация)+"""."+Символы.ПС+НСтр("ru = 'Не указана дата начала использования ""1С-Звит"" в карточке организации'; uk = 'Не вказана дата початку використання ""1С-Звіт"" в картці організації'"));	
		Возврат Ложь;
	КонецЕсли;
	
	Если ДокументСсылка.Дата < Организация.ДатаНачалаИспользованияЗвит1С Тогда
		ТекстВопроса = (НСтр("ru = 'Дата выгружаемого документа меньше даты начала использования ""1С-Звит"" в организации """+Строка(Организация)+"""
                             |Продолжить?'; uk = 'Дата вивантажується документа менше дати початку використання ""1С-Звіт"" в організації """+Строка(Организация)+"""
                             |Продовжити?'"));	
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			 Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	// Определим рабочую строку из полной таблицы соответствий отчетов 1С и 1С-Звит	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИмяОтчета);
	Если ТекОтчет = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Выгрузка в систему ""1С-Звит"" невозможна.'; uk = 'Вивантаження в систему ""1С-Звіт"" неможливо.'")+Символы.ПС
		            + НСтр("ru = 'Не удалось открыть отчет ""'; uk = 'Не вдалося відкрити звіт ""'")+ИмяОтчета+"""!";
		Предупреждение(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	// Определим форму которая будет выполнять заполнение
	ОсновнаяФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИмяОтчета, "ОсновнаяФорма",,Новый УникальныйИдентификатор);
	ОсновнаяФорма.Организация 	  		   = Организация;
	ОсновнаяФорма.Периодичность 	  	   = Перечисления.Периодичность.Месяц;
	ОсновнаяФорма.мДатаКонцаПериодаОтчета  = КонецМесяца(ДокументСсылка.Дата);
	ОсновнаяФорма.мДатаНачалаПериодаОтчета = НачалоМесяца(ДокументСсылка.Дата);
	ОсновнаяФорма.НалоговыйДокумент 	   = ДокументСсылка;
	
	ОсновнаяФорма.ВыборФормыПоУмолчанию();
	
  	ИмяФормы = ОсновнаяФорма.мВыбраннаяФорма;
	Если Не ЗначениеЗаполнено(ИмяФормы) Тогда
		ТекстОшибки = НСтр("ru = 'Выгрузка в систему ""1С-Звит"" невозможна.'; uk = 'Вивантаження в систему ""1С-Звіт"" неможливо.'")+Символы.ПС
					+ НСтр("ru = 'Не удалось определить форму по умолчанию для выгрузки документа!'; uk = 'Не вдалося визначити форму за умовчанням для вивантаження документа'");
		Предупреждение(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	// Получаем требуемую форму отчета
	РабочаяФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИмяОтчета, ИмяФормы,,Новый УникальныйИдентификатор);
	Если РабочаяФорма = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Выгрузка в систему ""1С-Звит"" невозможна.'; uk = 'Вивантаження в систему ""1С-Звіт"" неможливо.'")+Символы.ПС
		            + НСтр("ru = 'Не удалось открыть форму ""'; uk = 'Не вдалося відкрити форму ""'")+ИмяОтчета+"."+ИмяФормы+"""!""";
		Предупреждение(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	// Определим таблицу схем для заполнения
	Попытка
		РабочаяФорма.мМенеджерЗвит1С          = ЭтотОбъект;
		
		РабочаяФорма.Организация 	  		  = Организация;
		РабочаяФорма.Периодичность 	  	      = Перечисления.Периодичность.Месяц;
		РабочаяФорма.мДатаКонцаПериодаОтчета  = КонецМесяца(ДокументСсылка.Дата);
		РабочаяФорма.мДатаНачалаПериодаОтчета = НачалоМесяца(ДокументСсылка.Дата);
		РабочаяФорма.НалоговыйДокумент 	      = ДокументСсылка;
		
		Результат = РабочаяФорма.СформироватьТаблицуСоСхемамиВыгрузкиВЗвит1С();
		
		тзСхемы  = Результат.Схемы;
		Если ТипЗнч(тзСхемы) <> Тип("ТаблицаЗначений")
		 ИЛИ тзСхемы.Количество() = 0 Тогда
			тзСхемы = Неопределено;
		КонецЕсли;
	Исключение
		// Старые формы не поддерживают выгрузку в 1С-Звит
	    тзСхемы = Неопределено;
	КонецПопытки;
	Если тзСхемы = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Выгрузка в систему ""1С-Звит"" невозможна.'; uk = 'Вивантаження в систему ""1С-Звіт"" неможливо.'")+Символы.ПС
		            + НСтр("ru = 'Отсутствует поддержка устаревшей схемы для выгрузки текущего документа в ""1С-Звит"".'; uk = 'Відсутня підтримка застарілої схеми для вивантаження поточного документа в ""1С-Звіт"".'");
		Предупреждение(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	// На текущий момент поддерживается только выгрузка одной схемы (налоговая накладная, приложение 2 к налоговой накладной)
	ИмяСхемы = тзСхемы[0].ИмяСхемы;
	
	// Последний контроль, технический
	МассивСоответствийОтчета = мСоответствиеОтчетов.НайтиСтроки(Новый Структура("ИмяСхемыЗвит1С, ИмяОтчета, ИмяФормы", ИмяСхемы, ИмяОтчета, ИмяФормы));
	Если МассивСоответствийОтчета.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'Выгрузка в систему ""1С-Звит"" невозможна.
                             |Не найдено соответствие для схемы """+ИмяСхемы+""" регламентированного отчета """+ИмяОтчета+"."+ИмяФормы+"""'; uk = 'Вивантаження в систему ""1С-Звіт"" неможливо.
                             |Не знайдено відповідність для схеми """+ИмяСхемы+"""регламентованого звіта """+ИмяОтчета+"."+ИмяФормы+"""'"));	
		Возврат Ложь;
	КонецЕсли;
	
	// Определим строку из глобальной таблицы соответсвий отчетов
	СоответствиеОтчета = МассивСоответствийОтчета[0];
	
	
	// Попробуем запустить 1С-Звит или выведем причины отказа (не установлен, не используется в этой ИБ)
	Если Не ЗапуситьЗвит1С(Ложь, Организация) Тогда
		Возврат Ложь;
	КонецЕсли;			
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
	
	КодПоЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, СписокПоказателей).КодПоЕДРПОУ;
	ИДДокумента = СтрЗаменить(Строка(ДокументСсылка.УникальныйИдентификатор()), "-", "");

	ИмяСхемыЗвит1С = СоответствиеОтчета.ИмяСхемыЗвит1С;
	ТипПериода     = 0; // периодичность "Месяц";
	НомерВПериоде  = Месяц(ДокументСсылка.Дата);
	Год            = Год(ДокументСсылка.Дата);

	Если ФлагОтладки Тогда
		Сообщить("1С-Звит. Создание отчета из 1С (ЕДРПОУ """+КодПоЕДРПОУ+""", схема """+ИмяСхемыЗвит1С+""", тип периода """+ТипПериода+
		                                           """, номер в периоде """+НомерВПериоде+""", год """+Год+""", внутренний ИД """+ИДДокумента+""")");
	КонецЕсли;
	
	Попытка
		Результат = Компонента.OpenCreateReport(КодПоЕДРПОУ, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, ИДДокумента);
		РезультатаСоздания = Результат.CreateResult;
	Исключение
	    РезультатаСоздания = ИнформацияОбОшибке();
	КонецПопытки;
	
	ТекстЗаголовка = НСтр("ru = 'Выгрузка документа в систему ""1С-Звит""'; uk = 'Вивантаження документу в систему ""1С-Звіт""'");		
	
	// Переберем все возможные варианты 
	Если РезультатаСоздания = 1 Тогда
		ОтчетЗвит1С = Результат;
		Если ФлагОтладки Тогда
			Сообщить("1С-Звит. Открыт существующий отчет");
		КонецЕсли;
				
		// 1. Проверим не сменились ли ключевые реквизиты, перезаписать их в 1С-Звит
		// нельзя. Только удалить отчет и выгрузить по новой
		ДатаПериода = Дата(Год, НомерВПериоде, 1);
		
		ТекстСообщения = "";
		Если ИмяСхемыЗвит1С <> ОтчетЗвит1С.CharCode Тогда
			ТекстСообщения = ТекстСообщения
			               + НСтр("ru = 'Схема: ожидается'; uk = 'Схема: очікується'")+" """+ИмяСхемыЗвит1С+""" "
						   + НСтр("ru = 'обнаружено'; uk = 'виявлено'")+" """+ОтчетЗвит1С.CharCode+""""+Символы.ПС;
		КонецЕсли;		
		Если ТипПериода <> ОтчетЗвит1С.PeriodType
		 ИЛИ ДатаПериода <> ОтчетЗвит1С.PeriodDate Тогда
			ТекстСообщения = ТекстСообщения 
			               + НСтр("ru = 'Период: ожидается'; uk = 'Період: очікується'")+" """+ОпределитьТипПериодаЗвит1С(ДатаПериода, ТипПериода)+""" "
						   + НСтр("ru = 'обнаружено'; uk = 'виявлено'")+" """+ОпределитьТипПериодаЗвит1С(ОтчетЗвит1С.PeriodDate, ОтчетЗвит1С.PeriodType)+""""+Символы.ПС;
		КонецЕсли;				
		Если СокрЛП(КодПоЕДРПОУ) <> СокрЛП(ОтчетЗвит1С.FIRM_EDRPOU) Тогда
			ТекстСообщения = ТекстСообщения 
			               + НСтр("ru = 'Код ЕДРПОУ: ожидается'; uk = 'Код ЄДРПОУ: очікується'")+" """+КодПоЕДРПОУ+""" "
						   + НСтр("ru = 'обнаружено'; uk = 'виявлено'")+" """+ОтчетЗвит1С.FIRM_EDRPOU+""""+Символы.ПС;
		КонецЕсли;				
			
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ТекстПредупреждения = НСтр("ru = 'Обнаружен отчет ""1С-Звит"" соответсвующий выгружаемому из ""1С"" документу.
                                        |Изменены ключевые параметры, выгрузка отменена.'; uk = 'Виявлено звіт ""1С-Звіт"" відповідний вивантаженому з ""1С"" документу.
                                        |Змінено ключові параметри, вивантаження скасовано.'");
			ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения)-СтрДлина(Символы.ПС));
			Сообщить(ТекстПредупреждения, СтатусСообщения.Важное);
			Сообщить(ТекстСообщения, СтатусСообщения.БезСтатуса);
			Предупреждение(ТекстПредупреждения, , ТекстЗаголовка);
			Компонента.CancelReport(ОтчетЗвит1С, "");
			Возврат Ложь;
		
		КонецЕсли;
		
		// 2. Ключевые параметры корректны, предупредим о том что мы затираем существующий документ
		ТекстВопроса = НСтр("ru = 'Обнаружен отчет ""1С-Звит"" соответсвующий выгружаемому из ""1С"" документу. Найденный отчет в ""1С-Звит"" будет перезаписан
							|Продолжить?'; uk = 'Виявлено звіт ""1С-Звіт"" відповідний вивантаженому з ""1С"" документу. Знайдений звіт в ""1С-Звіт"" буде перезаписаний
							|Продовжити?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена, ТекстЗаголовка);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Компонента.CancelReport(ОтчетЗвит1С, "");
			Возврат Ложь;
		КонецЕсли;
				
	ИначеЕсли РезультатаСоздания = 0 Тогда
		ОтчетЗвит1С = Результат;
	 	Если ФлагОтладки Тогда
			Сообщить("1С-Звит. Создан новый отчет");
		КонецЕсли;

	ИначеЕсли РезультатаСоздания = -1 Тогда
		ТекстСообщения = НСтр("ru = 'Общая ошибка ""1С-Звит""'; uk = 'Загальна помилка ""1С-Звіт""'");
		Предупреждение(ТекстСообщения, , ТекстЗаголовка);
		Возврат Ложь;
				
	ИначеЕсли РезультатаСоздания = -2 Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка указания периода отчета'; uk = 'Помилка вказівки періоду звіту'");
		Предупреждение(ТекстСообщения, , ТекстЗаголовка);
		Возврат Ложь;
		
	ИначеЕсли РезультатаСоздания = -3 Тогда
		ТекстСообщения = НСтр("ru = 'ЕДРПОУ организации указанной в документе не совпадает с текущем ЕДРПОУ в ""1С-Звит""
							   |Переключите текущую организацию в ""1С-Звит"" и повторите выгрузку еще раз'; uk = 'ЄДРПОУ організації зазначеної в документі не збігається з поточному ЄДРПОУ в ""1С-Звіт""
							   |Переключіть поточну організацію в ""1С-Звіт"" і повторіть вивантаження ще раз'");
		Предупреждение(ТекстСообщения, , ТекстЗаголовка);
		Возврат Ложь;
		
	ИначеЕсли РезультатаСоздания = -4 Тогда
		ТекстСообщения = НСтр("ru = 'Имя схемы "+ИмяСхемыЗвит1С+" задано не верно или схема отсутсвует'; uk = 'Ім''я схеми "+ИмяСхемыЗвит1С+" задано не вірно або схема відсутня'");
		Предупреждение(ТекстСообщения, , ТекстЗаголовка);
		Возврат Ложь;
		
	ИначеЕсли РезультатаСоздания = -5 Тогда
		ТекстСообщения = НСтр("ru = 'Документ уже подан в контролирующий орган, модификация крайне нежелательна.
                               |Продолжить?'; uk = 'Документ вже подано в контролюючий орган, модифікація вкрай небажана.
                               |Продовжити?'");
		Ответ = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатаСоздания) = Тип("ИнформацияОбОшибке") Тогда
		// Исключение возникшее в 1С
		ИнформацияОбОшибке = РезультатаСоздания;
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина ;
		КонецЕсли;
		
		Предупреждение(ИнформацияОбОшибке.Описание, , ТекстЗаголовка);
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаФормыОтчета = Новый Структура;
	НастройкаФормыОтчета.Вставить("Организация", Организация);
	НастройкаФормыОтчета.Вставить("мДатаНачалаПериодаОтчета", НачалоМесяца(ДокументСсылка.Дата));
	НастройкаФормыОтчета.Вставить("мДатаКонцаПериодаОтчета", КонецМесяца(ДокументСсылка.Дата));
	НастройкаФормыОтчета.Вставить("мВыбраннаяФорма", СоответствиеОтчета.ИмяФормы);
	НастройкаФормыОтчета.Вставить("Периодичность", Перечисления.Периодичность.Месяц);
	НастройкаФормыОтчета.Вставить("ДатаПодписи", РабочаяДата);
	НастройкаФормыОтчета.Вставить("НалоговыйДокумент", ДокументСсылка);
		
	ФлагУспешногоСохранения = ЗаполнитьИСохранитьОтчетЗвит1С(ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета);
	Если ФлагУспешногоСохранения Тогда
		Компонента.BringZvitToFront();
	КонецЕсли;

	ИмяСхемыЗвит1С = "";
	
	Возврат ФлагУспешногоСохранения;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

#КонецЕсли 