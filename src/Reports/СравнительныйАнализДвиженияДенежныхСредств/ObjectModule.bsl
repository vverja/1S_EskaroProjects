#Если Клиент Тогда
// Все возможные показатели
Перем мТаблицаПоказатели Экспорт;

Перем мНазваниеОтчета Экспорт;
Перем мНаДату Экспорт;

// Счетчик выведенных в отчет периодов
Перем мВыведеноПериодов;

// Количество группировок в выводе по горизонтали
Перем мГруппировокПоГоризонтали;

// Группировки, выводимые в отчет по горизонтали
Перем мЗначимыеГруппировкиГор;

Перем КопияТаблицаСценарии;

// Соответствие выводимого периода чмсловой выборке
Перем мСоответствиеНомера; 

// Формирует текст отбора данных по строке ТЧ "ТаблицаСценарии"
//
// Параметры
//  СтрокаСценарий( строка табличной части): строка ТЧ "ТаблицаСценарии", для которой
// 	формируется текст запроса;
// СтруктураПараметров (структура): структура, в которой хранятся згачения параметров для 
//	основного запроса
// Возвращаемое значение:
//   ТекстЗапроса(текст)- текст отбора данных по строке ТЧ "ТаблицаСценарии"
//
Функция ТекстЗапросаПоСценарию(СтрокаСценарий,СтруктураПараметров,Номер,ПериодДанных, СтруктураГруппировки)
  	  
	ПериодДанных=ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность);
	  
	Если СтрокаСценарий.ВидДанных=Перечисления.ВидыДанныхДляПланФактногоАнализаДДС.Сценарий Тогда
		
		ТекстЗапроса="
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|&ПараметрНомерСценария_"+Номер+" КАК НомерСценария,
			|&ПараметрВидДанных_"+Номер+" КАК ВидДанных,
			|Сценарий КАК Сценарий,
			|Период КАК Период,
			|СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|ВидДенежныхСредств КАК ВидДенежныхСредств,
			|ЦФО КАК ЦФО,
			|Проект КАК Проект,
			|Контрагент КАК Контрагент,
			|ДоговорКонтрагента КАК ДоговорКонтрагента,
			|Сделка КАК Сделка,
			|ВалютаДенежныхСредств КАК ВалютаДенежныхСредств";
			
			Для Каждого СтрокаПоказатели Из Показатели Цикл
				
				Если Не СтрокаПоказатели.Использование Тогда
					
					Продолжить;
					
				КонецЕсли; 
				
				Для Индекс=0 По ТаблицаСценарии.Количество()-1 Цикл
					
					Если Номер = Индекс Тогда
						
						ТекстЗапроса = ТекстЗапроса + ",
						|	СУММА("+СтрокаПоказатели.Имя+") КАК " + СтрокаПоказатели.Имя+"_"+Индекс;
						
					Иначе
						ТекстЗапроса = ТекстЗапроса + ",
						|0 КАК " + СтрокаПоказатели.Имя +"_"+Индекс;	
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			ТекстЗапроса=ТекстЗапроса+"
			|ИЗ
			|(ВЫБРАТЬ
			|ПланДвижения.Сценарий КАК Сценарий,
			|ПланДвижения.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|ПланДвижения.ВидДенежныхСредств КАК ВидДенежныхСредств,
			|ПланДвижения.ЦФО КАК ЦФО,
			|ПланДвижения.Проект КАК Проект,
			|ПланДвижения.Контрагент КАК Контрагент,
			|ПланДвижения.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|ПланДвижения.Сделка КАК Сделка,
			|ПланДвижения.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
			|ПланДвижения.Период,
			|ПланДвижения.СуммаПриходВал КАК СуммаПриходВал,
			|ПланДвижения.СуммаПриходУпр КАК СуммаПриходУпр,
			|ПланДвижения.СуммаРасходВал КАК СуммаРасходВал,
			|ПланДвижения.СуммаРасходУпр КАК СуммаРасходУпр,
			|ПланДвижения.СуммаПриходВал-ПланДвижения.СуммаРасходВал КАК ДенежныйПотокВал,
			|ПланДвижения.СуммаПриходУпр-ПланДвижения.СуммаРасходУпр КАК ДенежныйПотокУпр
			|ИЗ	
			|(ВЫБРАТЬ
			|	ПланПоступления.Период,
			|	ПланПоступления.Сценарий,
			|	ПланПоступления.ДокументПланирования.Подразделение КАК ЦФО,
			|	ПланПоступления.ВидДенежныхСредств,
			|	ПланПоступления.ВалютаДенежныхСредств,
			|	ПланПоступления.СтатьяДвиженияДенежныхСредств,
			|	ПланПоступления.Проект,
			|	ПланПоступления.Контрагент,
			|	ПланПоступления.ДоговорКонтрагента,
			|	ПланПоступления.Сделка,
			|	ПланПоступления.СуммаОборот КАК СуммаПриходВал,
			|	ПланПоступления.СуммаУпрОборот КАК СуммаПриходУпр,
			|	0 КАК СуммаРасходВал,
			|	0 КАК СуммаРасходУпр
			|ИЗ
			|	РегистрНакопления.ПланыДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",Сценарий = &Сценарий_"+Номер+" И ПриходРасход=&Приход) КАК ПланПоступления
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ПланПлатежи.Период,
			|	ПланПлатежи.Сценарий,
			|	ПланПлатежи.ДокументПланирования.Подразделение,
			|	ПланПлатежи.ВидДенежныхСредств,
			|	ПланПлатежи.ВалютаДенежныхСредств,
			|	ПланПлатежи.СтатьяДвиженияДенежныхСредств,
			|	ПланПлатежи.Проект,
			|	ПланПлатежи.Контрагент,
			|	ПланПлатежи.ДоговорКонтрагента,
			|	ПланПлатежи.Сделка,
			|	0 КАК СуммаПриходВал,
			|	0 КАК СуммаПриходУпр,
			|	ПланПлатежи.СуммаОборот КАК СуммаРасходВал,
			|	ПланПлатежи.СуммаУпрОборот КАК СуммаРасходУпр
			|ИЗ
			|	РегистрНакопления.ПланыДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",Сценарий = &Сценарий_"+Номер+" И ПриходРасход=&Расход) КАК ПланПлатежи) КАК ПланДвижения) КАК План"+"_"+Номер+"
			|СГРУППИРОВАТЬ ПО
			|Сценарий,
			|Период,
			|СтатьяДвиженияДенежныхСредств,
			|ВидДенежныхСредств,
			|ЦФО,
			|Проект,
			|Контрагент,
			|ДоговорКонтрагента,
			|Сделка,
			|ВалютаДенежныхСредств";

					
	ИначеЕсли СтрокаСценарий.ВидДанных=Перечисления.ВидыДанныхДляПланФактногоАнализаДДС.ФактическиеДанные Тогда
		    ТекстЗапроса="
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|&ПараметрНомерСценария_"+Номер+" КАК НомерСценария,
			|&ПараметрВидДанных_"+Номер+" КАК ВидДанных,
			|&ПустойСценарий КАК Сценарий,
			|Период КАК Период,
			|СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|ВидДенежныхСредств КАК ВидДенежныхСредств,
			|ЦФО КАК ЦФО,
			|Проект КАК Проект,
			|Контрагент КАК Контрагент,
			|ДоговорКонтрагента КАК ДоговорКонтрагента,
			|Сделка КАК Сделка,
			|ВалютаДенежныхСредств КАК ВалютаДенежныхСредств";
			
			Для Каждого СтрокаПоказатели Из Показатели Цикл
				
				Если Не СтрокаПоказатели.Использование Тогда
					
					Продолжить;
					
				КонецЕсли; 
				
				Для Индекс=0 По ТаблицаСценарии.Количество()-1 Цикл
					
					Если Номер = Индекс Тогда
						
						ТекстЗапроса = ТекстЗапроса + ",
						|	СУММА("+СтрокаПоказатели.Имя+") КАК " + СтрокаПоказатели.Имя+"_"+Индекс;
						
					Иначе
						ТекстЗапроса = ТекстЗапроса + ",
						|0 КАК " + СтрокаПоказатели.Имя +"_"+Индекс;	
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			ТекстЗапроса=ТекстЗапроса+"
			|ИЗ
			|(ВЫБРАТЬ
			|ФактДвижения.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|ФактДвижения.ВидДенежныхСредств КАК ВидДенежныхСредств,
			|ФактДвижения.ЦФО КАК ЦФО,
			|ФактДвижения.Проект КАК Проект,
			|ФактДвижения.Контрагент КАК Контрагент,
			|ФактДвижения.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|ФактДвижения.Сделка КАК Сделка,
			|ФактДвижения.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
			|ФактДвижения.Период,
			|ФактДвижения.СуммаПриходВал КАК СуммаПриходВал,
			|ФактДвижения.СуммаПриходУпр КАК СуммаПриходУпр,
			|ФактДвижения.СуммаРасходВал КАК СуммаРасходВал,
			|ФактДвижения.СуммаРасходУпр КАК СуммаРасходУпр,
			|ФактДвижения.СуммаПриходВал-ФактДвижения.СуммаРасходВал КАК ДенежныйПотокВал,
			|ФактДвижения.СуммаПриходУпр-ФактДвижения.СуммаРасходУпр КАК ДенежныйПотокУпр
			|ИЗ	
			|(ВЫБРАТЬ
			|	ФактПоступления.Период,
			|	ВЫБОР КОГДА ЕСТЬNULL(ФактПоступления.ДокументПланированияПлатежа.ЦФО, &ПустойЦФО) = &ПустойЦФО
			|			ТОГДА ФактПоступления.ДокументДвижения.Подразделение 
			|			ИНАЧЕ ФактПоступления.ДокументПланированияПлатежа.ЦФО КОНЕЦ КАК ЦФО,
			|	ФактПоступления.ВидДенежныхСредств,
			|	ФактПоступления.БанковскийСчетКасса.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
			|	ФактПоступления.СтатьяДвиженияДенежныхСредств,
			|	ФактПоступления.Проект,
			|	ФактПоступления.Контрагент,
			|	ФактПоступления.ДоговорКонтрагента,
			|	ФактПоступления.Сделка,
			|	ФактПоступления.СуммаОборот КАК СуммаПриходВал,
			|	ФактПоступления.СуммаУпрОборот КАК СуммаПриходУпр,
			|	0 КАК СуммаРасходВал,
			|	0 КАК СуммаРасходУпр
			|ИЗ
			|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",ПриходРасход=&Приход) КАК ФактПоступления
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ФактПлатежи.Период,
			|	ВЫБОР КОГДА ЕСТЬNULL(ФактПлатежи.ДокументПланированияПлатежа.ЦФО, &ПустойЦФО) = &ПустойЦФО
			|			ТОГДА ФактПлатежи.ДокументДвижения.Подразделение 
			|			ИНАЧЕ ФактПлатежи.ДокументПланированияПлатежа.ЦФО КОНЕЦ,
			|	ФактПлатежи.ВидДенежныхСредств,
			|	ФактПлатежи.БанковскийСчетКасса.ВалютаДенежныхСредств,
			|	ФактПлатежи.СтатьяДвиженияДенежныхСредств,
			|	ФактПлатежи.Проект,
			|	ФактПлатежи.Контрагент,
			|	ФактПлатежи.ДоговорКонтрагента,
			|	ФактПлатежи.Сделка,
			|	0 КАК СуммаПриходВал,
			|	0 КАК СуммаПриходУпр,
			|	ФактПлатежи.СуммаОборот КАК СуммаРасходВал,
			|	ФактПлатежи.СуммаУпрОборот КАК СуммаРасходУпр
			|ИЗ
			|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",ПриходРасход=&Расход) КАК ФактПлатежи) КАК ФактДвижения) КАК Факт"+"_"+Номер+"
			|СГРУППИРОВАТЬ ПО
			|Период,
			|СтатьяДвиженияДенежныхСредств,
			|ВидДенежныхСредств,
			|ЦФО,
			|Проект,
			|Контрагент,
			|ДоговорКонтрагента,
			|Сделка,
			|ВалютаДенежныхСредств";
			
		ИначеЕсли СтрокаСценарий.ВидДанных=Перечисления.ВидыДанныхДляПланФактногоАнализаДДС.ФактическиеИПланируемые Тогда 
			
			 ТекстЗапроса="
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|&ПараметрНомерСценария_"+Номер+" КАК НомерСценария,
			|&ПараметрВидДанных_"+Номер+" КАК ВидДанных,
			|&ПустойСценарий КАК Сценарий,
			|Период КАК Период,
			|СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|ВидДенежныхСредств КАК ВидДенежныхСредств,
			|ЦФО КАК ЦФО,
			|Проект КАК Проект,
			|Контрагент КАК Контрагент,
			|ДоговорКонтрагента КАК ДоговорКонтрагента,
			|Сделка КАК Сделка,
			|ВалютаДенежныхСредств КАК ВалютаДенежныхСредств";
			
			Для Каждого СтрокаПоказатели Из Показатели Цикл
				
				Если Не СтрокаПоказатели.Использование Тогда
					
					Продолжить;
					
				КонецЕсли; 
				
				Для Индекс=0 По ТаблицаСценарии.Количество()-1 Цикл
					
					Если Номер = Индекс Тогда
						
						ТекстЗапроса = ТекстЗапроса + ",
						|	СУММА("+СтрокаПоказатели.Имя+") КАК " + СтрокаПоказатели.Имя+"_"+Индекс;
						
					Иначе
						ТекстЗапроса = ТекстЗапроса + ",
						|0 КАК " + СтрокаПоказатели.Имя +"_"+Индекс;	
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			ТекстЗапроса=ТекстЗапроса+"
			|ИЗ
			|(ВЫБРАТЬ
			|ПланИФактДвижения.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|ПланИФактДвижения.ВидДенежныхСредств КАК ВидДенежныхСредств,
			|ПланИФактДвижения.ЦФО КАК ЦФО,
			|ПланИФактДвижения.Проект КАК Проект,
			|ПланИФактДвижения.Контрагент КАК Контрагент,
			|ПланИФактДвижения.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|ПланИФактДвижения.Сделка КАК Сделка,
			|ПланИФактДвижения.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
			|ПланИФактДвижения.Период,
			|ПланИФактДвижения.СуммаПриходВал КАК СуммаПриходВал,
			|ПланИФактДвижения.СуммаПриходУпр КАК СуммаПриходУпр,
			|ПланИФактДвижения.СуммаРасходВал КАК СуммаРасходВал,
			|ПланИФактДвижения.СуммаРасходУпр КАК СуммаРасходУпр,
			|ПланИФактДвижения.СуммаПриходВал-ПланИФактДвижения.СуммаРасходВал КАК ДенежныйПотокВал,
			|ПланИФактДвижения.СуммаПриходУпр-ПланИФактДвижения.СуммаРасходУпр КАК ДенежныйПотокУпр
			|ИЗ	
			|(ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования.ДатаПоступления, "+ПериодДанных+") КАК Период,
			|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования.ЦФО КАК ЦФО,
			|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования.ФормаОплаты КАК ВидДенежныхСредств,
			|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования.ВалютаДокумента КАК ВалютаДенежныхСредств,
			|	ПланируемыеПоступленияДенежныхСредствОстатки.СтатьяДвиженияДенежныхСредств,
			|	ПланируемыеПоступленияДенежныхСредствОстатки.Проект КАК Проект,
			|	ПланируемыеПоступленияДенежныхСредствОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
			|	ПланируемыеПоступленияДенежныхСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ПланируемыеПоступленияДенежныхСредствОстатки.Сделка КАК Сделка,
			|	ПланируемыеПоступленияДенежныхСредствОстатки.СуммаОстаток КАК СуммаПриходВал,
			|	ПланируемыеПоступленияДенежныхСредствОстатки.СуммаУпрОстаток КАК СуммаПриходУпр,
			|	0 КАК СуммаРасходВал,
			|	0 КАК СуммаРасходУпр
			|ИЗ
			|	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.Остатки(
			|		,
			|		ДокументПланирования.ДатаПоступления МЕЖДУ &ДатаНач_"+Номер+" И &ДатаКон_"+Номер+"
			|		    И Проект ССЫЛКА Справочник.Проекты) КАК ПланируемыеПоступленияДенежныхСредствОстатки
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ПланируемыеПоступленияДенежныхСредствОстатки_1.ДокументПланирования.ДатаПоступления, "+ПериодДанных+") КАК Период,
			|	ПланируемыеПоступленияДенежныхСредствОстатки_1.ДокументПланирования.ЦФО КАК ЦФО,
			|	ПланируемыеПоступленияДенежныхСредствОстатки_1.ДокументПланирования.ФормаОплаты КАК ВидДенежныхСредств,
			|	ПланируемыеПоступленияДенежныхСредствОстатки_1.ДокументПланирования.ВалютаДокумента КАК ВалютаДенежныхСредств,
			|	ПланируемыеПоступленияДенежныхСредствОстатки_1.СтатьяДвиженияДенежныхСредств,
			|	РаспределениеПоПроектамСрезПоследних.Проект,
			|	ПланируемыеПоступленияДенежныхСредствОстатки_1.ДоговорКонтрагента.Владелец КАК Контрагент,
			|	ПланируемыеПоступленияДенежныхСредствОстатки_1.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ПланируемыеПоступленияДенежныхСредствОстатки_1.Сделка КАК Сделка,
			|	ПланируемыеПоступленияДенежныхСредствОстатки_1.СуммаОстаток * РаспределениеПоПроектамСрезПоследних.ДоляРаспределения КАК СуммаПриходВал,
			|	ПланируемыеПоступленияДенежныхСредствОстатки_1.СуммаУпрОстаток * РаспределениеПоПроектамСрезПоследних.ДоляРаспределения КАК СуммаПриходУпр,
			|	0 КАК СуммаРасходВал,
			|	0 КАК СуммаРасходУпр
			|ИЗ
			|	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.Остатки(
			|		,
			|		ДокументПланирования.ДатаПоступления МЕЖДУ &ДатаНач_"+Номер+" И &ДатаКон_"+Номер+"
			|			И Проект ССЫЛКА Справочник.ВидыРаспределенияПоПроектам) КАК ПланируемыеПоступленияДенежныхСредствОстатки_1
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&ДатаКон_"+Номер+", ) КАК РаспределениеПоПроектамСрезПоследних
			|		ПО ПланируемыеПоступленияДенежныхСредствОстатки_1.Проект = РаспределениеПоПроектамСрезПоследних.ВидРаспределения
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ДатаРасхода, "+ПериодДанных+") КАК Период,
			|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ЦФО КАК ЦФО,
			|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ФормаОплаты КАК ВидДенежныхСредств,
			|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаДокумента КАК ВалютаДенежныхСредств,
			|	ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств,
			|	ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
			|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
			|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
			|	0 КАК СуммаПриходВал,
			|	0 КАК СуммаПриходУпр,
			|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаРасходВал,
			|	ЗаявкиНаРасходованиеСредствОстатки.СуммаУпрОстаток КАК СуммаРасходУпр
			|ИЗ
			|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(
			|		,
			|		ЗаявкаНаРасходование.ДатаРасхода МЕЖДУ &ДатаНач_"+Номер+" И &ДатаКон_"+Номер+"
			|		    И Проект ССЫЛКА Справочник.Проекты) КАК ЗаявкиНаРасходованиеСредствОстатки
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ЗаявкиНаРасходованиеСредствОстатки_1.ЗаявкаНаРасходование.ДатаРасхода, "+ПериодДанных+") КАК Период,
			|	ЗаявкиНаРасходованиеСредствОстатки_1.ЗаявкаНаРасходование.ЦФО КАК ЦФО,
			|	ЗаявкиНаРасходованиеСредствОстатки_1.ЗаявкаНаРасходование.ФормаОплаты КАК ВидДенежныхСредств,
			|	ЗаявкиНаРасходованиеСредствОстатки_1.ЗаявкаНаРасходование.ВалютаДокумента КАК ВалютаДенежныхСредств,
			|	ЗаявкиНаРасходованиеСредствОстатки_1.СтатьяДвиженияДенежныхСредств,
			|	РаспределениеПоПроектамСрезПоследних.Проект,
			|	ЗаявкиНаРасходованиеСредствОстатки_1.ДоговорКонтрагента.Владелец КАК Контрагент,
			|	ЗаявкиНаРасходованиеСредствОстатки_1.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ЗаявкиНаРасходованиеСредствОстатки_1.Сделка КАК Сделка,
			|	0 КАК СуммаПриходВал,
			|	0 КАК СуммаПриходУпр,
			|	ЗаявкиНаРасходованиеСредствОстатки_1.СуммаОстаток * РаспределениеПоПроектамСрезПоследних.ДоляРаспределения КАК СуммаРасходВал,
			|	ЗаявкиНаРасходованиеСредствОстатки_1.СуммаУпрОстаток * РаспределениеПоПроектамСрезПоследних.ДоляРаспределения КАК СуммаРасходУпр
			|ИЗ
			|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(
			|		,
			|		ЗаявкаНаРасходование.ДатаРасхода МЕЖДУ &ДатаНач_"+Номер+" И &ДатаКон_"+Номер+"
			|			И Проект ССЫЛКА Справочник.ВидыРаспределенияПоПроектам) КАК ЗаявкиНаРасходованиеСредствОстатки_1
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&ДатаКон_"+Номер+", ) КАК РаспределениеПоПроектамСрезПоследних
			|		ПО ЗаявкиНаРасходованиеСредствОстатки_1.Проект = РаспределениеПоПроектамСрезПоследних.ВидРаспределения
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ФактПоступления.Период,
			|	ВЫБОР КОГДА ЕСТЬNULL(ФактПоступления.ДокументПланированияПлатежа.ЦФО, &ПустойЦФО) = &ПустойЦФО
			|			ТОГДА ФактПоступления.ДокументДвижения.Подразделение 
			|			ИНАЧЕ ФактПоступления.ДокументПланированияПлатежа.ЦФО КОНЕЦ КАК ЦФО,
			|	ФактПоступления.ВидДенежныхСредств,
			|	ФактПоступления.БанковскийСчетКасса.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
			|	ФактПоступления.СтатьяДвиженияДенежныхСредств,
			|	ФактПоступления.Проект,
			|	ФактПоступления.Контрагент,
			|	ФактПоступления.ДоговорКонтрагента,
			|	ФактПоступления.Сделка,
			|	ФактПоступления.СуммаОборот КАК СуммаПриходВал,
			|	ФактПоступления.СуммаУпрОборот КАК СуммаПриходУпр,
			|	0 КАК СуммаРасходВал,
			|	0 КАК СуммаРасходУпр
			|ИЗ
			|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",ПриходРасход=&Приход) КАК ФактПоступления
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ФактПлатежи.Период,
			|	ВЫБОР КОГДА ЕСТЬNULL(ФактПлатежи.ДокументПланированияПлатежа.ЦФО, &ПустойЦФО) = &ПустойЦФО
			|			ТОГДА ФактПлатежи.ДокументДвижения.Подразделение 
			|			ИНАЧЕ ФактПлатежи.ДокументПланированияПлатежа.ЦФО КОНЕЦ,
			|	ФактПлатежи.ВидДенежныхСредств,
			|	ФактПлатежи.БанковскийСчетКасса.ВалютаДенежныхСредств,
			|	ФактПлатежи.СтатьяДвиженияДенежныхСредств,
			|	ФактПлатежи.Проект,
			|	ФактПлатежи.Контрагент,
			|	ФактПлатежи.ДоговорКонтрагента,
			|	ФактПлатежи.Сделка,
			|	0 КАК СуммаПриходВал,
			|	0 КАК СуммаПриходУпр,
			|	ФактПлатежи.СуммаОборот КАК СуммаРасходВал,
			|	ФактПлатежи.СуммаУпрОборот КАК СуммаРасходУпр
			|ИЗ
			|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",ПриходРасход=&Расход) КАК ФактПлатежи) КАК ПланИФактДвижения) КАК ПланФакт"+"_"+Номер+"
			|СГРУППИРОВАТЬ ПО
			|Период,
			|СтатьяДвиженияДенежныхСредств,
			|ВидДенежныхСредств,
			|ЦФО,
			|Проект,
			|Контрагент,
			|ДоговорКонтрагента,
			|Сделка,
			|ВалютаДенежныхСредств";

		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ДатаНач_"+Номер,СтрокаСценарий.ДатаНач);
	СтруктураПараметров.Вставить("ДатаКон_"+Номер,КонецДня(СтрокаСценарий.ДатаКон));
	СтруктураПараметров.Вставить("Сценарий_"+Номер,СтрокаСценарий.Сценарий);
	СтруктураПараметров.Вставить("ПараметрНомерСценария_"+Номер,Номер);
    СтруктураПараметров.Вставить("ПараметрВидДанных_"+Номер,СтрокаСценарий.ВидДанных);
	
	Возврат ТекстЗапроса;
			  
КонецФункции

// Процедура заполнения начальных настроек отчета
Процедура СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей)
	
	ПериодДанных=?(Периодичность.Пустая(),"День",ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность));
	
	// Далее используются таблицы значений, полученные выгрузкой строк из т.ч. отчета
	КопияТаблицаСценарии= ТаблицаСценарии.Выгрузить();

	КопияТаблицаСценарии.Колонки.Добавить("ТекстПараметра");
	КопияТаблицаСценарии.Колонки.Добавить("Эталон");

	СтруктураПараметров=Новый Структура;
	
	СтруктураГруппировки=Новый Структура;
		
	СценарийЭталон=ТаблицаСценарии[0].Сценарий;
	
	ТекстЗапросаСценарии="";
	Номер=0;
		
	Для каждого СтрокаСценарий Из КопияТаблицаСценарии Цикл
		
		ТекстЗапросаСценарии=ТекстЗапросаСценарии+ТекстЗапросаПоСценарию(СтрокаСценарий,СтруктураПараметров,Номер,ПериодДанных,СтруктураГруппировки);
		
		// Эталонный период - самый первый
		СтрокаСценарий.Эталон = ?(Номер=0, Истина, Ложь);
		
		СтрокаПериод="Период с "+Формат(СтрокаСценарий.ДатаНач,"ДФ=dd.MM.yyyy")+" по "+Формат(СтрокаСценарий.ДатаКон,"ДФ=dd.MM.yyyy");

		Если СтрокаСценарий.ВидДанных=Перечисления.ВидыДанныхДляПланФактногоАнализаДДС.ФактическиеДанные Тогда
			СтрокаСценарий.ТекстПараметра=?(Номер=0," Эталонный период.","Сравниваемый период "+Номер+".")
			+Символы.ПС+"Фактические данные."+" "+ПериодДанных+"."+Символы.ПС+СтрокаПериод;
		ИначеЕсли СтрокаСценарий.ВидДанных=Перечисления.ВидыДанныхДляПланФактногоАнализаДДС.Сценарий Тогда
			СтрокаСценарий.ТекстПараметра=?(Номер=0," Эталонный период.","Сравниваемый период "+Номер+".")
			+Символы.ПС+СтрокаСценарий.Сценарий+" "+ПериодДанных+"."+Символы.ПС+СтрокаПериод;
		ИначеЕсли СтрокаСценарий.ВидДанных=Перечисления.ВидыДанныхДляПланФактногоАнализаДДС.ФактическиеИПланируемые Тогда
			СтрокаСценарий.ТекстПараметра=?(Номер=0," Эталонный период.","Сравниваемый период "+Номер+".")
			+Символы.ПС+"Фактические данные с учетом заявок и планируемых поступлений."+" "+ПериодДанных+"."+Символы.ПС+СтрокаПериод;
		КонецЕсли;
		
		Номер=Номер+1;

	КонецЦикла;
	
	ТекстЗапросаСценарии=Сред(ТекстЗапросаСценарии,16);
	ТекстИтоги="";
	ТекстПоля="";
	Для Каждого СтрокаПоказатели Из Показатели Цикл
		
		Если Не СтрокаПоказатели.Использование Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Для Индекс=0 По ТаблицаСценарии.Количество()-1 Цикл
			
			ТекстИтоги= ТекстИтоги + ",
			|	СУММА("+СтрокаПоказатели.Имя+"_"+Индекс+")";
			
			ТекстПоля=ТекстПоля+",
			|"+СтрокаПоказатели.Имя+"_"+Индекс+" КАК "+СтрокаПоказатели.Имя+"_"+Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстИтоги = Сред(ТекстИтоги,2);

	// Формируем финальный текст запроса.
	ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ДанныеСценариев.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|{ВЫБРАТЬ
	|ДанныеСценариев.СтатьяДвиженияДенежныхСредств.* КАК СтатьяДвиженияДенежныхСредств,
	|ДанныеСценариев.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.Период КАК Период,
	|ДанныеСценариев.ЦФО.* КАК ЦФО,
	|ДанныеСценариев.Проект.* КАК Проект,
	|ДанныеСценариев.Контрагент.* КАК Контрагент,
	|ДанныеСценариев.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|ДанныеСценариев.Сделка.* КАК Сделка,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(ПериодДанных,"ДанныеСценариев.Период")+"
	|ДанныеСценариев.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств}";
	ТекстЗапроса=ТекстЗапроса+ТекстПоля+"
	|ИЗ 
	|("+ТекстЗапросаСценарии+") КАК ДанныеСценариев
	|{ГДЕ
	|ДанныеСценариев.СтатьяДвиженияДенежныхСредств.*,
	|ДанныеСценариев.ВидДенежныхСредств,
	|ДанныеСценариев.ЦФО.*,
	|ДанныеСценариев.Проект.*,
	|ДанныеСценариев.Контрагент.*,
	|ДанныеСценариев.ДоговорКонтрагента.*,
	|ДанныеСценариев.Сделка.*,
	|ДанныеСценариев.ВалютаДенежныхСредств
	|}
	|УПОРЯДОЧИТЬ ПО ДанныеСценариев.НомерСценария
	|{УПОРЯДОЧИТЬ ПО ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.Период}
	|ИТОГИ
	|"+ТекстИтоги+"	
	|ПО
	|ОБЩИЕ,
	|ДанныеСценариев.СтатьяДвиженияДенежныхСредств Иерархия
	|{ИТОГИ ПО
	|ДанныеСценариев.СтатьяДвиженияДенежныхСредств.*,
	|ДанныеСценариев.ВидДенежныхСредств,
	|ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.Период КАК Период,
	|ДанныеСценариев.ЦФО.*,
	|ДанныеСценариев.Проект.*,
	|ДанныеСценариев.Контрагент.*,
	|ДанныеСценариев.ДоговорКонтрагента.*,
	|ДанныеСценариев.Сделка.*,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(ПериодДанных,"ДанныеСценариев.Период")+"
	|ДанныеСценариев.ВалютаДенежныхСредств}";
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	Для каждого Параметр Из СтруктураПараметров Цикл
	
		ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
	
	КонецЦикла;
	
	ПостроительОтчета.Параметры.Вставить("Приход",Перечисления.ВидыДвиженийПриходРасход.Приход);
	ПостроительОтчета.Параметры.Вставить("Расход",Перечисления.ВидыДвиженийПриходРасход.Расход);
	ПостроительОтчета.Параметры.Вставить("ПустойСценарий",Справочники.СценарииПланирования.ПустаяСсылка());
	ПостроительОтчета.Параметры.Вставить("ПустойЦФО",Справочники.Подразделения.ПустаяСсылка());
	
	ПостроительОтчета.ДоступныеПоля["НомерСценария"].Порядок=Истина;
	
	ПостроительОтчета.Порядок.Добавить("НомерСценария","НомерСценария",,НаправлениеСортировки.Возр);
				
	СтруктураПредставлениеПолей = Новый Структура(
	"	СтатьяДвиженияДенежныхСредств,
	|	ВидДенежныхСредств,
	|	ЦФО,
	|	Проект,
	|	Контрагент,
	|	ВалютаДенежныхСредств,
	|	ДоговорКонтрагента,
	|	Сделка,
	|	СуммаПриходВал,
	|	СуммаРасходВал,
	|	СуммаПриходУпр,
	|	СуммаРасходУпр,
	|	ДенежныйПотокУпр,
	|	ДенежныйПотокВал",
	"Статья движения денежных средств",
	"Вид денежных средств (наличные, безналичные)",
	"Подразделение",
	"Проект",
	"Контрагент",
	"Валюта движения",
	"Договор контрагента",
	"Сделка",
	"Поступления в валюте операций",
	"Платежи в валюте операций",
	"Поступления в валюте упр. учета (" + глЗначениеПеременной("ВалютаУправленческогоУчета")+")",
	"Платежи в валюте упр. учета (" + глЗначениеПеременной("ВалютаУправленческогоУчета")+")",
	"Чистый денежный поток в валюте упр. учета (" + глЗначениеПеременной("ВалютаУправленческогоУчета")+")",
	"Чистый денежный поток в валюте операций");
	
	СтруктураПредставлениеПолей.Вставить("Период", "Период");
	СтруктураПредставлениеПолей.Вставить("ПериодДень", "По дням");
	СтруктураПредставлениеПолей.Вставить("ПериодНеделя", "По неделям");
	СтруктураПредставлениеПолей.Вставить("ПериодМесяц", "По месяцам");
	СтруктураПредставлениеПолей.Вставить("ПериодКвартал", "По кварталам");
	СтруктураПредставлениеПолей.Вставить("ПериодГод", "По годам");
	
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаПриходВал";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
	
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаРасходВал";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
	
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаПриходУпр";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
	
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "ДенежныйПотокУпр";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "ДенежныйПотокВал";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
	
// Поля отбора, которые будут показаны на основной форме, заносятся в массив МассивОтбора
	МассивОтбора.Добавить("ВидДенежныхСредств");
	МассивОтбора.Добавить("ЦФО");
	МассивОтбора.Добавить("Проект");
	МассивОтбора.Добавить("СтатьяДвиженияДенежныхСредств");
	
	ПостроительОтчета.ДоступныеПоля["НомерСценария"].Измерение=Ложь;
		
КонецПроцедуры // СформироватьНастройкиОтчета()

Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ВыводитьИтогиПоВсемУровням=Истина;

	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	
	мТаблицаПоказатели  = Новый ТаблицаЗначений;
	мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);
	
	мСтруктураСвязиПоказателейИИзмерений = Новый Структура;
	
	СтруктураПредставлениеПолей = Новый Структура;

	мСоответствиеНазначений = Новый Соответствие;

	МассивОтбора = Новый Массив;
	
	мНазваниеОтчета = "Сравнительный анализ движения денежных средств";
	мНаДату = Ложь;

	Если Показатели.Количество()=0 Тогда
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "СуммаПриходВал";
		СтрПоказатели.Представление = "Поступления в валюте операций";
		СтрПоказатели.Использование   = Ложь;
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "СуммаРасходВал";
		СтрПоказатели.Представление = "Платежи в валюте операций";
		СтрПоказатели.Использование   = Ложь;
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "ДенежныйПотокВал";
		СтрПоказатели.Представление = "Чистый денежный поток в валюте операций";
		СтрПоказатели.Использование   = Ложь;
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "СуммаПриходУпр";
		СтрПоказатели.Представление = "Поступления в валюте упр. учета";
		СтрПоказатели.Использование   = Истина;
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "СуммаРасходУпр";
		СтрПоказатели.Представление = "Платежи в валюте упр. учета";
		СтрПоказатели.Использование   = Истина;
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "ДенежныйПотокУпр";
		СтрПоказатели.Представление = "Чистый денежный поток в валюте упр. учета";
		СтрПоказатели.Использование   = Истина;		
		
	КонецЕсли;

	ТекНастройкиПостроителя="";
	
	Если НЕ ПостроительОтчета.Текст="" Тогда
		ТекНастройкиПостроителя=ПостроительОтчета.ПолучитьНастройки(Истина,Истина,Истина,Истина);
	КонецЕсли;
	
	//Очистим отбор
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла;
	
	//Очистим порядок
	Пока ПостроительОтчета.Порядок.Количество()>0 Цикл
		ПостроительОтчета.Порядок.Удалить(0);
	КонецЦикла;
		
	Если ТаблицаСценарии.Количество()>0 Тогда
		СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей);
		
		УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
		УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
		УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
		
	КонецЕсли;
	
	Если ТипЗнч(ТекНастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета.УстановитьНастройки(ТекНастройкиПостроителя,Истина,Истина,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Выводит показатели отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета
//
Процедура ВывестиПоказатели(Выборка, СтруктураПараметров)

	ТабДок = СтруктураПараметров.ТабДок;
	
	мВыведеноПериодов=0;

	РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"НомерСценария", "Все"),СтруктураПараметров,ТабДок,0,Новый Массив);

КонецПроцедуры // ВывестиПоказатели()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиГруппировку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = СтруктураПараметров.ЗначениеГруппировки;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;

	ОформлениеСтроки                = СтруктураПараметров.ОформлениеСтроки;
	ОформлениеСтрокиИерархии        = СтруктураПараметров.ОформлениеСтрокиИерархии;

	СтруктураВыводГруппировок = СтруктураПараметров.СтруктураВыводГруппировок;

	// Назначение, корректировка макетов измерений
	Сдвиг = Макс(ОформлениеСтроки.Количество()-СтруктураПараметров.МассивГруппировки.Количество(),0);

	Пока Выборка.Следующий() Цикл

		Если (Выборка.Группировка()<>"НомерСценария") и (Выборка.Группировка()<>"Период")  Тогда  // Не выводим группировку, разворачивающуюся по горизонтали.

			ИспользоватьОформление = РаскрашиватьИзмерения;
			Если ОформлениеСтроки.Количество()>0 Тогда
				ИндексОформления = Сдвиг+((Номер) - (ОформлениеСтроки.Количество()-Сдвиг)*Цел((Номер)/(ОформлениеСтроки.Количество()-Сдвиг)));
			Иначе
				ИспользоватьОформление = Ложь;
			КонецЕсли;;

			УровеньЗаписи   = Выборка.Уровень();
			СдвигУровня     = 0;

			ИмяГруппировки  = Выборка.Группировка();

			ТабДок = СтруктураПараметров.ТабДок;

			ЗначениеГруппировки = "";

			ЗначениеРасшифровки = Неопределено;

			ТипЗаписиВыборки = Выборка.ТипЗаписи();

			МассивВыводГруппировок = Новый Массив;

			Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

				ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
				Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда

					ЗначениеТекущейГруппировки = "<...>";
				КонецЕсли;

				ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;
				
				Если ЗначениеРасшифровки = Неопределено Тогда 
					ЗначениеРасшифровки = Выборка[ИмяГруппировки];
				КонецЕсли;

			ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

				Если СтруктураВыводГруппировок.Свойство(ИмяГруппировки, МассивВыводГруппировок) Тогда

					КоличествоДопПолей=МассивВыводГруппировок.Количество();
					ВыведеноГруппировок=0;

					Для Каждого ВыводимаяГруппировка Из МассивВыводГруппировок Цикл

						ВыведеноГруппировок=ВыведеноГруппировок+1;

						Если Найти(ВыводимаяГруппировка,"Период")>0 Тогда
							ЗначениеТекущейГруппировки=ОбщегоНазначения.ПолучитьПериодСтрокой(Выборка[ВыводимаяГруппировка],СтрЗаменить(ВыводимаяГруппировка,"Период",""));
						Иначе
							ЗначениеТекущейГруппировки = "" + Выборка[ВыводимаяГруппировка];
						КонецЕсли;
						
						Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
							ЗначениеТекущейГруппировки = "<...>";
						КонецЕсли;
						
						ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки + ", ";

						Если ЗначениеРасшифровки = Неопределено Тогда 
							ЗначениеРасшифровки = Выборка[ВыводимаяГруппировка];
						КонецЕсли;

						МассивРасшифровки.Добавить(ВыводимаяГруппировка);

					КонецЦикла;

					// Если группировки нет в списке, то не выводим, нам нужна только выборка, 
					// т.о. искусственно получаем группировку по набору полей, указанных в одной строке
					// таблицы группировок
					//
				Иначе

					МассивРасшифровки.Добавить(ИмяГруппировки);
					Перейти ~М1;

				КонецЕсли;

				Если Найти(ИмяГруппировки,"Период")>0 Тогда
					ЗначениеТекущейГруппировки=ОбщегоНазначения.ПолучитьПериодСтрокой(Выборка[ИмяГруппировки],СтрЗаменить(ИмяГруппировки,"Период",""));
				Иначе
					ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
				КонецЕсли;
				
				Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
					ЗначениеТекущейГруппировки = "<...>";
				КонецЕсли;

				ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

				Если ЗначениеРасшифровки = Неопределено Тогда 
					ЗначениеРасшифровки = Выборка[ИмяГруппировки];
				КонецЕсли;

			КонецЕсли;

			// Для итогов по группировке сдвиг нужно уменьшить на количество пропущенных группировок, 
			// заранее рассчитанное для каждой группировки
			//
			Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

				МассивРасшифровки.Добавить(ИмяГруппировки);

				ЗначениеРасшифровкиСтрока = Новый Структура;
				Для Каждого Элемент Из МассивРасшифровки Цикл
					ЗначениеРасшифровкиСтрока.Вставить(Элемент, Выборка[Элемент])
				КонецЦикла;

				СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[ИмяГруппировки];

				// Для итогов по иерархии сдвиг нужно уменьшить на количество пропущенных группировок для предыдущей группировки
				// заранее рассчитанное для каждой группировки
				//
			ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				
				МассивРасшифровки.Добавить(ИмяГруппировки);
				
				ЗначениеРасшифровкиСтрока = Новый Структура;
				Для Каждого Элемент Из МассивРасшифровки Цикл
					ЗначениеРасшифровкиСтрока.Вставить(Элемент, Выборка[Элемент])
				КонецЦикла;
				
				Если Номер>0 Тогда
					СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[СтруктураПараметров.МассивГруппировки[Номер - 1]];
				КонецЕсли;
			КонецЕсли;

			УровеньЗаписи = УровеньЗаписи - СдвигУровня;

			НачСтрока = ТабДок.ВысотаТаблицы+1;

			ТабДок.Вывести(ОбластьОбщийОтступ, УровеньЗаписи);
			ТабДок.Область(ТабДок.ВысотаТаблицы,1).Расшифровка = ЗначениеРасшифровкиСтрока;

			ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = ЗначениеГруппировки;
			ОбластьЗначениеГруппировки.Параметры.Расшифровка = ЗначениеРасшифровки;
			ОбластьЗначениеГруппировки.Область().Отступ = УровеньЗаписи;

			ТабДок.Присоединить(ОбластьЗначениеГруппировки);

			ВывестиПоказатели(Выборка, СтруктураПараметров);

			Если ИспользоватьОформление Тогда

				Область = ТабДок.Область(НачСтрока, 2, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы);

				Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

					//Область.Шрифт      = ОформлениеСтроки[ИндексОформления].Шрифт;
					Область.ЦветФона   = ОформлениеСтроки[ИндексОформления].ЦветФона;
					Область.ЦветТекста = ОформлениеСтроки[ИндексОформления].ЦветТекста;
					//Область.Узор       = ОформлениеСтроки[ИндексОформления].Узор;
					//Область.ЦветУзора  = ОформлениеСтроки[ИндексОформления].ЦветУзора;

				ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

					//Область.Шрифт      = ОформлениеСтрокиИерархии[ИндексОформления].Шрифт;
					Область.ЦветФона   = ОформлениеСтрокиИерархии[ИндексОформления].ЦветФона;
					Область.ЦветТекста = ОформлениеСтрокиИерархии[ИндексОформления].ЦветТекста;
					//Область.Узор       = ОформлениеСтрокиИерархии[ИндексОформления].Узор;
					//Область.ЦветУзора  = ОформлениеСтрокиИерархии[ИндексОформления].ЦветУзора;
				КонецЕсли;
			КонецЕсли;

			Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы,2).Шрифт = СтруктураПараметров.ШрифтГрупп;
			КонецЕсли;

			Если ЗначениеРасшифровки=Неопределено Тогда // Нет расшифровки
				Для Индекс=3 по ТабДок.ШиринаТаблицы Цикл
					ТабДок.Область(ТабДок.ВысотаТаблицы,Индекс).Расшифровка=Неопределено;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 

~М1:	Если Номер+1 < СтруктураПараметров.МассивГруппировки.Количество() Тогда

			// На каждом уровне используется своя копия структуры расшифровок
			КопияМассивРасшифровки = Новый Массив;
			Для Каждого Элемент Из МассивРасшифровки Цикл
				КопияМассивРасшифровки.Добавить(Элемент);
			КонецЦикла;
			
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, СтруктураПараметров.МассивГруппировки[Номер+1]), СтруктураПараметров, Номер + 1, КопияМассивРасшифровки);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ВывестиГруппировку()

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

		
	мЗначимыеГруппировкиГор.Очистить();

	// Строка в которую выводятся обнаруженные ошибки
	СтрОшибки = "";

	// Проверка на пустые значения
	Если ТаблицаСценарии.Количество()=0 Тогда
		Предупреждение("Не выбраны данные для сравнения!");
		Возврат;
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		
		Если СписокЗначений.НайтиПоЗначению(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным) = Неопределено Тогда
			СписокЗначений.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным);
		Иначе
			Предупреждение("Повторяющаяся группировка " + ПостроительОтчета.ИзмеренияСтроки[Инд].Представление +"."+ Символы.ПС+
			"Нельзя использовать одинаковые поля группировки строк!");
			ЕстьОшибки = Истина;
			Возврат;
			
		КонецЕсли;

		// Если добавлялись одни и те же поля в строки и в колонки, то  у них будет неправильное автогенеренное имя, оканчивающееся на число
		ИмяИзмерения = ПостроительОтчета.ИзмеренияСтроки[Инд].Имя;

		ПоследнийСимвол = Сред(ИмяИзмерения, СтрДлина(ИмяИзмерения));

		Если ПоследнийСимвол = "1"
			ИЛИ ПоследнийСимвол = "2" 
			ИЛИ ПоследнийСимвол = "3" 
			ИЛИ ПоследнийСимвол = "4" 
			ИЛИ ПоследнийСимвол = "5" 
			ИЛИ ПоследнийСимвол = "6" 
			ИЛИ ПоследнийСимвол = "7" 
			ИЛИ ПоследнийСимвол = "8" 
			ИЛИ ПоследнийСимвол = "9" 
			ИЛИ ПоследнийСимвол = "0" Тогда
			
			// Удалим старое измерение и добавим новое
			СтрПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным;

			ПостроительОтчета.ИзмеренияСтроки.Удалить(ПостроительОтчета.ИзмеренияСтроки[Инд]);
			ПостроительОтчета.ИзмеренияСтроки.Вставить(СтрПутьКДанным, , , , , Инд);
		КонецЕсли;
		
	КонецЦикла;

	СписокИзмерений = "";
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
	
		СписокИзмерений = СписокИзмерений +", "+ ПостроительОтчета.ИзмеренияСтроки[Сч].Представление
		+" "+ ПостроительОтчета.ИзмеренияСтроки[Сч].ТипИзмерения;
		
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияСтроки[Сч].Представление;
	
	КонецЦикла; 

	СписокПоказателей = "";
	Для Сч=0 По Показатели.Количество()-1 Цикл

		Если Показатели[Сч].Использование Тогда
		
			СписокПоказателей = СписокПоказателей +", "+ Показатели[Сч].Представление;
		
		КонецЕсли; 
	
	КонецЦикла; 

	СписокОтбор = "";
	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

		Если ПостроительОтчета.Отбор[Сч].Использование И Не ПостроительОтчета.Отбор[Сч].Имя = "Периодичность" Тогда

			СписокОтбор = СписокОтбор +", "+ ПостроительОтчета.Отбор[Сч].Представление 
			+" "+ ПостроительОтчета.Отбор[Сч].ВидСравнения +" "+ ПостроительОтчета.Отбор[Сч].Значение;

		КонецЕсли; 
	
	КонецЦикла;
	
	ПостроительОтчета.ДоступныеПоля["НомерСценария"].Измерение=Истина;
	ПостроительОтчета.ИзмеренияСтроки.Добавить("НомерСценария");
	
	СписокИзмерений=Сред(СписокИзмерений,2);
	СписокПоказателей=Сред(СписокПоказателей,2);
	СписокОтбор=Сред(СписокОтбор,2);
			
	Если ДетализацияПоПериодам И ПостроительОтчета.ИзмеренияСтроки.Найти("Период") = Неопределено Тогда
		ДобавленоИзмерениеСтрокиПериод = Истина;
		ПостроительОтчета.ИзмеренияСтроки.Добавить("Период");
	КонецЕсли;
			
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодГод")<>Неопределено Тогда
		ПостроительОтчета.ДоступныеПоля["ПериодГод"].Порядок=Истина;
		ПостроительОтчета.Порядок.Добавить("ПериодГод");	
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодКвартал")<>Неопределено Тогда
		ПостроительОтчета.ДоступныеПоля["ПериодКвартал"].Порядок=Истина;
		ПостроительОтчета.Порядок.Добавить("ПериодКвартал");
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодМесяц")<>Неопределено Тогда
		ПостроительОтчета.ДоступныеПоля["ПериодМесяц"].Порядок=Истина;
		ПостроительОтчета.Порядок.Добавить("ПериодМесяц");
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодНеделя")<>Неопределено Тогда
		ПостроительОтчета.ДоступныеПоля["ПериодНеделя"].Порядок=Истина;
		ПостроительОтчета.Порядок.Добавить("ПериодНеделя");
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодДень")<>Неопределено Тогда
		ПостроительОтчета.ДоступныеПоля["ПериодДень"].Порядок=Истина;
		ПостроительОтчета.Порядок.Добавить("ПериодДень");
	КонецЕсли;
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("Период")<>Неопределено Тогда 
		ПостроительОтчета.Порядок.Добавить("Период");
	КонецЕсли;
	
	// Структура вывода группировок: ключи определяют "основные" группировки,
	// значения - дополнительные.
	СтруктураВыводГруппировок = Новый Структура;
	МассивГруппировки    = Новый Массив;

	// Структура "поправок" сдвига группировок вправо: уровень записи строки 
	// формируемого запроса будет отличаться от нужного из-за пропусков группировок,
	// по которым не нужно выводить итоги.
	//
	СтруктураСдвигУровняГруппировок = Новый Структура;

	// Заголовок первой колонки шапки таблицы
	ЗаголовокКолонки = "Общий итог"; // этот заголовок выводится в случае отсутствия группировок

	ВсегоГруппировок=0;
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		ВсегоГруппировок = ВсегоГруппировок + 1;
		СтруктураСдвигУровняГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, 0);
		МассивГруппировки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		СтруктураВыводГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);

	КонецЦикла;

	Макет = ПолучитьМакет("Макет");
	ДокументРезультат.Очистить();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбщийОтступ", Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировки",   Макет.ПолучитьОбласть("Значение|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировкиГор",   Макет.ПолучитьОбласть("План|ШапкаГруппы"));

	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("План|Строка"));
	СтруктураПараметров.Вставить("ТабДок",    ДокументРезультат);

	// Массив выводимых показателей отчета
	СтруктураПараметров.Вставить("МассивПоказатели", Новый Массив);
	Для каждого Строка Из Показатели Цикл

		Если Строка.Использование Тогда

			СтруктураПараметров.МассивПоказатели.Добавить(Строка.Имя);

		КонецЕсли;

	КонецЦикла;

	СтруктураПараметров.Вставить("ВсегоГруппировок", 			ВсегоГруппировок);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировок", 	СтруктураВыводГруппировок);

	СтруктураПараметров.Вставить("МассивГруппировки", 	МассивГруппировки);

	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	СтруктураПараметров.Вставить("КопияТаблицаСценарии", КопияТаблицаСценарии);
	СтруктураПараметров.Вставить("ЦветаГруппировок", Новый Структура);

	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СтруктураПараметров.ЦветаГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Цвет(240 - (ПостроительОтчета.ИзмеренияСтроки.Количество() - Сч + 1) * 10, 248, 255));
	КонецЦикла;

	СтруктураПараметров.ЦветаГруппировок.Вставить("ОБЩИЕ", Новый Цвет(255, 248, 255));

	// Наклонный шрифт для групп
	СтруктураПараметров.Вставить("ШрифтГрупп", Новый Шрифт(Макет.Область("Строка|План").Шрифт,,,,Истина));

	// Форматная строка для вывода показателей
	СтруктураПараметров.Вставить("ФорматПоказателей", 			Новый Структура);
	Для Каждого Строка Из Показатели Цикл
		
		Если Строка.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли; 
		
		МетаданныеРесурса = 0;
		ФорматнаяСтрока = "";

		Нстр = мТаблицаПоказатели.Найти(Строка.Имя, "ИмяПоля");
		Если Не (Нстр = Неопределено) Тогда
			ФорматнаяСтрока = НСтр.ФорматнаяСтрока;
		КонецЕсли;

		СтруктураПараметров.ФорматПоказателей.Вставить(Строка.Имя, ФорматнаяСтрока);
	КонецЦикла;

	// Оформление измерений
	ОформлениеСтроки = Новый Массив;

	ОформлениеСтрокиИерархии = Новый Массив;
	
	Если РаскрашиватьИзмерения Тогда

		ТабДокОформлениеИзмерений = Макет.ПолучитьОбласть("ОформлениеИзмерений");
		Для Сч = 1 По ТабДокОформлениеИзмерений.ВысотаТаблицы Цикл

			// Нечетные строки - иерархия, четные - измерения
			Если Сч - Цел(Сч/2)*2 = 1 Тогда

				ОформлениеСтроки.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			Иначе
				ОформлениеСтрокиИерархии.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			КонецЕсли;
							
		КонецЦикла;

	КонецЕсли; 

	// Оформление строк
	СтруктураПараметров.Вставить("ОформлениеСтроки", ОформлениеСтроки);
	СтруктураПараметров.Вставить("ОформлениеСтрокиИерархии", ОформлениеСтрокиИерархии);
	СтруктураПараметров.Вставить("СтруктураФорматаПолей", Новый Структура);
	мГруппировокПоГоризонтали=0;
	мВыведеноПериодов=0;

	// 1. Вывод заголовка отчета
	Для Сч = 1 По 3 Цикл
		Если Сч = 1 Тогда
			Префикс = "Верх";
		ИначеЕсли Сч = 2 Тогда

			// Если нет фильтров, не выводим
			Если ПустаяСтрока(СписокОтбор) Тогда
				Продолжить;
			КонецЕсли;
			Префикс = "Середина";

		ИначеЕсли Сч = 3 Тогда
			Префикс = "Низ";
		КонецЕсли;

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Шапка" + Префикс));

		// Вывод шапки отчета
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Шапка" + Префикс);

		Если Префикс = "Верх" Тогда

			ОбластьЗначение.Параметры.ЗаголовокОтчета = мНазваниеОтчета;
			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,  3).Объединить();

		ИначеЕсли Префикс = "Середина" Тогда

			ОбластьЗначение.Параметры.Фильтры = "Отбор: " + СписокОтбор;
			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,  4).Объединить();

		ИначеЕсли Префикс = "Низ" Тогда

			ОбластьЗначение.Параметры.Группировки="Группировки: " +СписокИзмерений;
			ОбластьЗначение.Параметры.Показатели = "Показатели: " + СписокПоказателей;
			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
			ДокументРезультат.ВысотаТаблицы-1,  4).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,  4).Объединить();

		КонецЕсли;

	КонецЦикла;

	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда

		Возврат;
	
	КонецЕсли; 

	мГруппировокПоГоризонтали=0;
	мВыведеноПериодов=0;
	
	// Выполнение сформированного запроса
	ПостроительОтчета.Выполнить();
	
	Если УправлениеОтчетами.ПроверитьПовторыИзмеренийПостроителя(ПостроительОтчета) = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПостроительОтчета.Результат;

	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаГруппы"));
	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаГруппы");
	ОбластьЗначение.Область(2,1).Текст = ЗаголовокКолонки;

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ВывестиШапку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"НомерСценария","Все"), СтруктураПараметров, "",);

	КоличествоПоказателей = Показатели.Итог("Использование");
	
	Если КоличествоПоказателей>1 Тогда

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаПоказатели"));
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаПоказатели");

		ДокументРезультат.Присоединить(ОбластьЗначение);

		ОбластьПоказатели=Макет.ПолучитьОбласть("План|ШапкаПоказатели");

		Для Индекс=1 по мГруппировокПоГоризонтали Цикл
			Для Каждого Строка Из Показатели Цикл
				Если Строка.Использование Тогда
					ОбластьПоказатели.Параметры.Показатель=Строка.Представление;
					ДокументРезультат.Присоединить(ОбластьПоказатели);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).Объединить();

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

	Иначе

        ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы, 2).Объединить();
		
		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

	КонецЕсли;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;
	ДокументРезультат.ФиксацияСлева = 2;

	// 1. Вывод строк отчета
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	Если МассивГруппировки.Количество()>0 Тогда

		ВывестиГруппировку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировки[0]), СтруктураПараметров, 0, Новый Массив);

	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	// 3. Вывод общих итогов
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ОбщиеИтоги"));
	ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("Значение|ОбщиеИтоги"));
	
	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("План|ОбщиеИтоги"));

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ВыборкаОбщийИтог.Следующий();
	
	ВывестиПоказатели(ВыборкаОбщийИтог, СтруктураПараметров);

	// 4. Вывод подвала отчета
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Подвал"));

	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Подвал");

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьПоказатель = Макет.ПолучитьОбласть("План|Подвал");

	Для Индекс=1 по мГруппировокПоГоризонтали Цикл
		Для Сч=1 По КоличествоПоказателей Цикл
			ДокументРезультат.Присоединить(ОбластьПоказатель);
		КонецЦикла;	
	КонецЦикла;
	
	ДокументРезультат.Область(1, 2, 
			1,  ДокументРезультат.ШиринаТаблицы).Объединить();

	// Управление заголовком
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;
	СтруктураНастроекОтчета.Вставить("ИмяОтчета", мНазваниеОтчета);

	Для Каждого Реквизит Из Метаданные.Отчеты.СравнительныйАнализДвиженияДенежныхСредств.Реквизиты Цикл
		СтруктураНастроекОтчета.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из Метаданные.Отчеты.СравнительныйАнализДвиженияДенежныхСредств.ТабличныеЧасти Цикл
		СтруктураНастроекОтчета.Вставить(ТабличнаяЧасть.Имя, ЭтотОбъект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	ДокументРезультат.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.Автомасштаб=Истина;
	
	//Удаляем добавленные измерения
	
	ИзмерениеСценарий=ПостроительОтчета.ИзмеренияСтроки.Найти("НомерСценария");
	ПостроительОтчета.ИзмеренияСтроки.Удалить(ИзмерениеСценарий);
	
	Если ДобавленоИзмерениеСтрокиПериод = Истина Тогда
		ИзмерениеПериод=ПостроительОтчета.ИзмеренияСтроки.Найти("Период");
		ПостроительОтчета.ИзмеренияСтроки.Удалить(ИзмерениеПериод);
	КонецЕсли;

КонецПроцедуры

// Вывод строку шапки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	ВыборкаГоризонтальная - выборка горизонтальная из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ЗначениеВыборкиДанные - строка, заголовок вертикальной области данных
//
Процедура ВывестиСтрокуШапки(ВыборкаГоризонтальная, СтруктураПараметров, ЗначениеВыборкиДанные,СтрокаДанныхОтчета)

	КоличествоПоказателей = Показатели.Итог("Использование");

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировкиГор   = СтруктураПараметров.ЗначениеГруппировкиГор;

	УровеньЗаписи   = ВыборкаГоризонтальная.Уровень();
	СдвигУровня     = 0;

	ИмяГруппировки  = ВыборкаГоризонтальная.Группировка();

	ТабДок = СтруктураПараметров.ТабДок;

	ЗначениеГруппировки = "";

	ИдЗначимойГруппировкиГор="";
	
	ПериодДанных = ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность);
	
	ЗначениеГруппировкиПериоды=ОбщегоНазначения.ПолучитьПериодСтрокой(ВыборкаГоризонтальная["Период"],ПериодДанных);

	ИдЗначимойГруппировкиГор=ЗначениеВыборкиДанные+"#"+ВыборкаГоризонтальная["Период"]+"#";

	мЗначимыеГруппировкиГор.Добавить(ИдЗначимойГруппировкиГор);

	ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиДанные=ЗначениеВыборкиДанные;
	ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиПериоды=ЗначениеГруппировкиПериоды;
	
	ОбластьЗначениеГруппировкиГор.Параметры.РасшифровкаДанные=Новый Структура("Сценарий,ВидДанных,ДатаНач,ДатаКон,Период",
																		СтрокаДанныхОтчета.Сценарий,
																		СтрокаДанныхОтчета.ВидДанных,
																		СтрокаДанныхОтчета.ДатаНач,
																		СтрокаДанныхОтчета.ДатаКон,
																		ВыборкаГоризонтальная["Период"]);

	Для Сч=1 По КоличествоПоказателей Цикл
		ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
	КонецЦикла;	

	ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-КоличествоПоказателей+1, 
	ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

КонецПроцедуры

// Вывод шапки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка				  - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ЗначениеВыборкиДанные - строка, заголовок вертикальной области данных
//
Процедура ВывестиШапку(Выборка, СтруктураПараметров, ЗначениеВыборкиДанные,СтрокаДанныхОтчета)

	КоличествоПоказателей = Показатели.Итог("Использование");

	ОбластьЗначениеГруппировкиГор   = СтруктураПараметров.ЗначениеГруппировкиГор;
	ТабДок = СтруктураПараметров.ТабДок;

	ОбработкаПрерыванияПользователя();
	ВыведеноСценариев=0;

	Пока Выборка.Следующий() Цикл

		Если ДетализацияПоПериодам Тогда
			Если Выборка.Группировка()="Период"  Тогда  
				ВывестиСтрокуШапки(Выборка, СтруктураПараметров, ЗначениеВыборкиДанные,СтрокаДанныхОтчета);
				мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
				мВыведеноПериодов=мВыведеноПериодов+1;
			Иначе
				// Строка с параметрами выводимых данных
				СтрокаДанныхОтчета = СтруктураПараметров.КопияТаблицаСценарии[Выборка["НомерСценария"]];
				ЗначениеВыборкиДанные=СтрокаДанныхОтчета.ТекстПараметра;
				ВывестиШапку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период"), СтруктураПараметров, ЗначениеВыборкиДанные,СтрокаДанныхОтчета);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.Группировка()="НомерСценария" Тогда

			мСоответствиеНомера.Вставить(ВыведеноСценариев,Выборка["НомерСценария"]);
			
			СтрокаДанныхОтчета = СтруктураПараметров.КопияТаблицаСценарии[Выборка["НомерСценария"]];

			ЗначениеВыборкиДанные = СтрокаДанныхОтчета.ТекстПараметра;

			ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиДанные=ЗначениеВыборкиДанные;
			ОбластьЗначениеГруппировкиГор.Параметры.РасшифровкаДанные=Новый Структура("Сценарий,ДатаНач,ДатаКон",
																		СтрокаДанныхОтчета.Сценарий,
																		СтрокаДанныхОтчета.ДатаНач,
																		СтрокаДанныхОтчета.ДатаКон);
			ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиПериоды="Итого";

			Для Сч=1 По КоличествоПоказателей Цикл
				ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
			КонецЦикла;

			ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-КоличествоПоказателей+1, 
			ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

			мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
			мВыведеноПериодов=мВыведеноПериодов+1;

			Если НЕ СтрокаДанныхОтчета.Эталон Тогда

				Если ВыводитьАбсолютныеОтклонения Тогда

					ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиПериоды="Отклонение, абс.";

					Для Сч=1 По КоличествоПоказателей Цикл
						ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
					КонецЦикла;

					ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-КоличествоПоказателей+1, 
					ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

					мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
					мВыведеноПериодов=мВыведеноПериодов+1;

				КонецЕсли;

				Если ВыводитьОтносительныеОтклонения Тогда

					ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиПериоды="Отклонение, %";

					Для Сч=1 По КоличествоПоказателей Цикл
						ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
					КонецЦикла;

					ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-КоличествоПоказателей+1, 
					ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

					мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
					мВыведеноПериодов=мВыведеноПериодов+1;

				КонецЕсли;

			КонецЕсли;

			ТабДок.Область(ТабДок.ВысотаТаблицы-1, ТабДок.ШиринаТаблицы-мВыведеноПериодов*КоличествоПоказателей+1, 
			ТабДок.ВысотаТаблицы-1,  ТабДок.ШиринаТаблицы).Объединить();

			мВыведеноПериодов=0;
			ВыведеноСценариев=ВыведеноСценариев+1;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ВывестиШапку()

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка               - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ТабДок				  - табличный документ
//	Номер		          - число, номер обходимой группировки
//	МассивПредставленийГруппировок - массив, хранящий представления группировок
//
Процедура РазвернутьСтроку (Выборка, СтруктураПараметров,ТабДок,Номер,МассивПредставленийГруппировок)

	МассивВыводГруппировок=Новый Массив;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;

	//Структура для значений эталонных данных

	СтруктураЭталон=Новый Структура;
	ЗначениеЭталон=0;

	Пока Выборка.Следующий() Цикл

		Если Выборка.Группировка()="НомерСценария" Тогда

			СтрокаДанныхОтчета = СтруктураПараметров.КопияТаблицаСценарии[Выборка["НомерСценария"]];
			
			МассивПредставленийГруппировок.Добавить(СтрокаДанныхОтчета.ТекстПараметра);
		Иначе
			МассивПредставленийГруппировок.Добавить(Выборка["Период"]);

		КонецЕсли;

		Если ДетализацияПоПериодам Тогда

			Если Выборка.Группировка()="Период" Тогда

				СтрТекущийПуть="";
				Для Каждого Представление Из МассивПредставленийГруппировок Цикл
					СтрТекущийПуть=СтрТекущийПуть+Представление+"#";
				КонецЦикла;

				Если мЗначимыеГруппировкиГор.НайтиПоЗначению(СтрТекущийПуть)<>Неопределено Тогда

					НомерКолонки=1;

					Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

						ФорматПоказателя = "ЧЦ = 15; ЧДЦ = 2";

						Если НомерКолонки=1 Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							Если (НомерКолонки>1) Тогда
								ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							КонецЕсли;
						КонецЕсли;

						Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]], ФорматПоказателя);
						ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";

						ТабДок.Присоединить(ОбластьЗначенияПоказателя);

						НомерКолонки=НомерКолонки+1;

					КонецЦикла;

				КонецЕсли;

			Иначе

				РазвернутьСтроку (Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период","Все"), СтруктураПараметров, ТабДок,Номер,МассивПредставленийГруппировок);

			КонецЕсли;

		КонецЕсли;

		Если Выборка.Группировка()="НомерСценария" Тогда

			НомерКолонки=1;

			// Строка с параметрами выводимых данных
			СтрокаДанныхОтчета = СтруктураПараметров.КопияТаблицаСценарии[Выборка["НомерСценария"]];

			Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

				ФорматПоказателя = "ЧЦ = 15; ЧДЦ = 2";

				ТекущееЗначение=?(ПустаяСтрока(Выборка[Имя+"_"+мВыведеноПериодов]),0,Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]);

				Если НомерКолонки=1 Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				КонецЕсли;

				Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
					Если (НомерКолонки>1) Тогда
						ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
					КонецЕсли;
				КонецЕсли;

				Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				КонецЕсли;

				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(ТекущееЗначение, ФорматПоказателя);
				ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";

				ТабДок.Присоединить(ОбластьЗначенияПоказателя);

				Если СтрокаДанныхОтчета.Эталон Тогда

					СтруктураЭталон.Вставить(Имя+"_0",ТекущееЗначение);

				КонецЕсли;

				НомерКолонки=НомерКолонки+1;

			КонецЦикла;

			Если НЕ СтрокаДанныхОтчета.Эталон Тогда

				Если ВыводитьАбсолютныеОтклонения Тогда

					НомерКолонки=1;

					Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

						ФорматПоказателя = "ЧЦ = 15; ЧДЦ = 2";

						Если НЕ СтруктураЭталон.Свойство(Имя+"_0", ЗначениеЭталон) Тогда
							ЗначениеЭталон=0;
						КонецЕсли;

						ТекущиеДанные =?(ПустаяСтрока(Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]),0,Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]);

						Если НомерКолонки=1 Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							Если (НомерКолонки>1) Тогда
								ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							КонецЕсли;
						КонецЕсли;

						Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат((ТекущиеДанные-ЗначениеЭталон), ФорматПоказателя);

						ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";

						ТабДок.Присоединить(ОбластьЗначенияПоказателя);

						НомерКолонки=НомерКолонки+1;

					КонецЦикла;

				КонецЕсли;

				Если ВыводитьОтносительныеОтклонения Тогда

					НомерКолонки=1;

					Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

						ФорматПоказателя = "ЧЦ = 15; ЧДЦ = 2";

						Если НЕ СтруктураЭталон.Свойство(Имя+"_0", ЗначениеЭталон) Тогда
							ЗначениеЭталон=0;
						КонецЕсли;


						ТекущиеДанные =?(ПустаяСтрока(Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]),0,Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]);
						Процент=?(ЗначениеЭталон=0,?(ТекущиеДанные=0,0,-1),(ТекущиеДанные-ЗначениеЭталон)/ЗначениеЭталон)*100;
						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(Процент, ФорматПоказателя);

						Если НомерКолонки=1 Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							Если (НомерКолонки>1) Тогда
								ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							КонецЕсли;
						КонецЕсли;

						Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;
						ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";
	
						ТабДок.Присоединить(ОбластьЗначенияПоказателя);

						НомерКолонки=НомерКолонки+1;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

			мВыведеноПериодов=мВыведеноПериодов+1;

		КонецЕсли;

		Если МассивПредставленийГруппировок.Количество()>1 Тогда
			МассивПредставленийГруппировок.Удалить(МассивПредставленийГруппировок.Количество()-1);
		Иначе
			МассивПредставленийГруппировок= Новый Массив;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//Настраивает копию текущего отчета
//
Процедура РасшифровкаДвижений(Расшифровка, ЭтотОтчет, Выбор)
	
	ИмяОтчета = ?(Расшифровка.Сценарий = Справочники.СценарииПланирования.ПустаяСсылка(), "АнализДвиженияДенежныхСредств", "ПланыДвиженияДенежныхСредств");
	Отчет = Отчеты[ИмяОтчета].Создать();
	
	Отчет.УстановитьНачальныеНастройки();
	
	МаксИндексОтборов = Отчет.УниверсальныйОтчет.ПостроительОтчета.Отбор.Количество() - 1;
	Для й = 0 По МаксИндексОтборов Цикл
		Отчет.УниверсальныйОтчет.ПостроительОтчета.Отбор.Удалить(МаксИндексОтборов - й);
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
	
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Отчет.УниверсальныйОтчет.ДобавитьОтбор(ЭлементОтбора.ПутьКДанным, Истина, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Значение, ЭлементОтбора.ЗначениеС, ЭлементОтбора.ЗначениеПо);
	
	КонецЦикла;
	
	Если ИмяОтчета = "ПланыДвиженияДенежныхСредств" Тогда
	
		Если Отчет.УниверсальныйОтчет.ПостроительОтчета.Отбор.Найти("Сценарий") = Неопределено Тогда
			Отчет.УниверсальныйОтчет.ДобавитьОтбор("Сценарий");
		КонецЕсли;
		Отчет.УниверсальныйОтчет.ПостроительОтчета.Отбор.Сценарий.Установить(Расшифровка.Сценарий);
	
	КонецЕсли;
	
	Если Расшифровка.Свойство("СтатьяДвиженияДенежныхСредств") 
		И ЗначениеЗаполнено(Расшифровка.СтатьяДвиженияДенежныхСредств)
		Тогда
	
		Если Отчет.УниверсальныйОтчет.ПостроительОтчета.Отбор.Найти("СтатьяДвиженияДенежныхСредств") = Неопределено Тогда
			Отчет.УниверсальныйОтчет.ДобавитьОтбор("СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		Отчет.УниверсальныйОтчет.ПостроительОтчета.Отбор.СтатьяДвиженияДенежныхСредств.Установить(Расшифровка.СтатьяДвиженияДенежныхСредств);
	
	КонецЕсли;
	
	Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
		
	Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Очистить();
		
	Отчет.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	ДатаНач = Расшифровка.ДатаНач;
	ДатаКон = Расшифровка.ДатаКон;
	
	Для Каждого Элемент Из Расшифровка Цикл
		
		Если Найти(Элемент.Ключ, "Период") > 0 Тогда
			
			ДатаНач = ОбщегоНазначения.ДатаНачалаПериода(Элемент.Значение, Периодичность);
			ДатаКон = ОбщегоНазначения.ДатаКонцаПериода(Элемент.Значение, Периодичность);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Отчет.УниверсальныйОтчет.ДатаНач = ДатаНач;
	Отчет.УниверсальныйОтчет.ДатаКон = ДатаКон;
	
	Отчет.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
	
	Отчет.УниверсальныйОтчет.ДобавитьДополнительноеПоле("Период");
	Отчет.УниверсальныйОтчет.ДобавитьДополнительноеПоле("Регистратор");
	Отчет.УниверсальныйОтчет.ДобавитьПорядок("Период");
	Отчет.УниверсальныйОтчет.ДобавитьПорядок("Регистратор");
	Отчет.УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
		
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.Открыть();
	ФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры // РасшифровкаДвижений()

//Настраивает копию текущего отчета
//
Процедура РасшифровкаТекущимОтчетом (Расшифровка,ЭтотОтчет,ЗначениеВыбора)
	
	// Настройка отчета
		Отчет = Отчеты[ЭтотОтчет.Метаданные().Имя].Создать();
		Параметры = Новый Соответствие;
		
		ИсходныйОтчет = ЭтотОтчет;

		// Переносимые свойства
		Параметры.Вставить("ВыводитьАбсолютныеОтклонения",     ВыводитьАбсолютныеОтклонения);
		Параметры.Вставить("ВыводитьОтносительныеОтклонения", ВыводитьОтносительныеОтклонения);
		Параметры.Вставить("РаскрашиватьИзмерения", РаскрашиватьИзмерения);
		Параметры.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
		Параметры.Вставить("ДетализацияПоПериодам",   ДетализацияПоПериодам);
		Параметры.Вставить("Периодичность",   Периодичность);

		//Параметры.Вставить("ВыводитьДетальныеЗаписи", ВыводитьДетальныеЗаписи);

		// Перенос табличных частей части
		Параметры.Вставить("Показатели", Показатели.Выгрузить());
		Параметры.Вставить("ТаблицаСценарии", ТаблицаСценарии.Выгрузить());

		Отчет.Настроить(Параметры);
		
		Форма = Отчет.ПолучитьОсновнуюФорму();

		ПостроительОтчета.НастроитьРасшифровку(Отчет.ПолучитьПостроительОтчета(), Расшифровка);

		// Добавим измерения из расшифровываемого отчета
		МассивДобавленныеИзмерения = Новый Массив;

		ТабОтбор = Новый ТаблицаЗначений;
		ТабОтбор.Колонки.Добавить("Имя");
		ТабОтбор.Колонки.Добавить("ВидСравнения");
		ТабОтбор.Колонки.Добавить("Значение");

		Для каждого Элемент Из Отчет.ПолучитьПостроительОтчета().Отбор Цикл

			Если Элемент.Использование Тогда

				НоваяСтрока = ТабОтбор.Добавить();
				НоваяСтрока.Имя = Элемент.Имя;
				НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
				НоваяСтрока.Значение = Элемент.Значение;

			КонецЕсли;

		КонецЦикла; 

		Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя",ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);

			НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);

			// Измерение не нужно добавлять, если в нем заведомо будет один элемент
			НеДобавлятьИзмерение = Ложь;

			Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл

				// Не добавляем измерения по отборам на равенство - в них будет один элемент
				Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда

					НеДобавлятьИзмерение = Истина;
					Прервать;

					// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
					// или плана видов характеристик - в них будет один элемент
				ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
					ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда

					Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
						ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;

						МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));

						Если МетаданныеОбъекта<>Неопределено Тогда
							Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
								ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда

								Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда

									НеДобавлятьИзмерение = Истина;
									Прервать;

								КонецЕсли; 
							КонецЕсли; 
						КонецЕсли; 

					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

			Если НеДобавлятьИзмерение Тогда

				// Удалим также и предыдущие измерения
				Для каждого ПредыдущееИзмерение Из МассивДобавленныеИзмерения Цикл

					Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Удалить(ПредыдущееИзмерение);

				КонецЦикла;

				Продолжить;

			КонецЕсли;

			// Добавляем новое измерение и запоминаем его в массиве
			МассивДобавленныеИзмерения.Добавить(Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияСтроки[Инд].Имя,
			ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения));
		КонецЦикла;

		Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
			Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияКолонки[Инд].Имя,
			ПостроительОтчета.ИзмеренияКолонки[Инд].ТипИзмерения)
		КонецЦикла;

			// Текущий отчет с дополнительным измерением

			Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ЗначениеВыбора, ЗначениеВыбора);

			Форма.ОбновитьТаблицуОтчета();
			
			Форма.неВосстанавливатьНастройку=Истина;	
			Форма.Открыть();
		
КонецПроцедуры // РасшифровкаТекущимОтчетом (Расшифровка)


// Расшифровывает отчеты, реализуемые при помощи данного
//
// Параметры:
//	Расшифровка           - Структура, значение расшифровки, взятое из табличного документа, и, в случае надобности, дополненное
//	СтандартнаяОбраьотка  - Флаг стандартной обработки расшифровки
//	ЭтотОтчет             - Контекст, из которого происходит вызов. Позволяет определить, как именно расшифровывать.
//
Процедура ОбработкаРасшифровкиОтчетаБюджетирования(Расшифровка, СтандартнаяОбработка, ЭтотОтчет) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;

		СписокВыбора = Новый СписокЗначений;

		ДоступныеИзмерения = Новый Соответствие;

		Для ДП = 0 По ПостроительОтчета.ДоступныеПоля.Количество() - 1 Цикл
			Поле = ПостроительОтчета.ДоступныеПоля[ДП];
			Если Поле.Измерение Тогда
				ДоступныеИзмерения.Вставить(Поле.Имя, Поле.Представление);
			КонецЕсли;
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияСтроки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияКолонки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		ИмяДобавляемогоИзмерения = "";
		ПредставлениеДобавляемогоИзмерения = "";
		Если ДоступныеИзмерения.Количество() > 0 Тогда
			Для Каждого ДИ ИЗ ДоступныеИзмерения Цикл
				
				Если ДИ.Ключ="НомерСценария" Тогда
					Продолжить;
				КонецЕсли;
				
				СписокВыбора.Добавить(ДИ.Ключ, ДИ.Значение);
				ИмяДобавляемогоИзмерения = ДИ.Ключ;
				ПредставлениеДобавляемогоИзмерения = ДИ.Значение;
			КонецЦикла;
		КонецЕсли;

		СписокВыбора.СортироватьПоПредставлению();
 
		СписокВыбора.Добавить(0, "По документам движения");

		Выбор = СписокВыбора.ВыбратьЭлемент("Выберите действие", СписокВыбора[СписокВыбора.Количество()-1]);

		Если Выбор = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Выбор.Значение=0 ИЛИ Выбор.Значение=-1 Тогда
			
			РасшифровкаДвижений(Расшифровка,ЭтотОтчет,Выбор);
			
		Иначе
			
			РасшифровкаТекущимОтчетом (Расшифровка,ЭтотОтчет,Выбор.Значение);
			
		КонецЕсли;
						
	КонецЕсли;
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ПостроительОтчета;

КонецФункции // ПолучитьПостроительОтчета()

	// Настраивает отчет для параметрического вызова
//
// Параметры
//  СтруктураПараметров  – Структура, Соответствие – содержит список параметров:
//	ДатаНач,
//	ДатаКон,
//	ИмяРегистра,
//	ЗаполнитьПоУмолчанию,
//	ПоказыватьЗаголовок,
//	ВыводитьПоказателиВСтроку,
//	ВыводитьИтогиПоВсемУровням,
//	ВыводитьДополнительныеПолявОтдельнойКолонке,
//	РаскрашиватьИзмерения
//	ГруппировкиСтрок  - структура или соответсвие,
//	ГруппировкиКолонок- структура или соответствие,
//	Показатели - таблица значений,
//	Отбор - структура или соответсвие
//
Процедура Настроить(СтруктураПараметров, ЗаполняемыйОбъект = Неопределено) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
		
	// Прочие свойства
	Периодичность       = Параметры["Периодичность"];
	ВыводитьАбсолютныеОтклонения  = Параметры["ВыводитьАбсолютныеОтклонения"];
	ВыводитьОтносительныеОтклонения = Параметры["ВыводитьОтносительныеОтклонения"];
	РаскрашиватьИзмерения = Параметры["РаскрашиватьИзмерения"];
	ПоказыватьЗаголовок      = Параметры["ПоказыватьЗаголовок"];
	ДетализацияПоПериодам      = Параметры["ДетализацияПоПериодам"];
	
	ТаблицаСценарии.Загрузить(Параметры["ТаблицаСценарии"]);
	
	Если ЗаполняемыйОбъект = Неопределено Тогда
		ЗаполняемыйОбъект = ЭтотОбъект;
	КонецЕсли;
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
	Иначе
		
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
		ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ПостроительОтчета.ИзмеренияКолонки.Очистить();
		ПостроительОтчета.ВыбранныеПоля.Очистить();

		Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
			ПостроительОтчета.Отбор.Удалить(0);
		КонецЦикла; 
		
		// Группировки строк
		
		ГруппировкиСтрок = Параметры["ГруппировкиСтрок"];
		Если ТипЗнч(ГруппировкиСтрок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиСтрок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияСтроки.Очистить();
			
			Для каждого Строка Из ГруппировкиСтрок Цикл
				
				ПостроительОтчета.ИзмеренияСтроки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Группировки колонок
		
		ГруппировкиКолонок = Параметры["ГруппировкиКолонок"];
		Если ТипЗнч(ГруппировкиКолонок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиКолонок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияКолонки.Очистить();
			
			Для каждого Строка Из ГруппировкиКолонок Цикл
				
				ПостроительОтчета.ИзмеренияКолонки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Показатели: флажки использования
		
		ТаблицаПоказатели = Параметры["Показатели"];
		Если ТипЗнч(ТаблицаПоказатели) = Тип("ТаблицаЗначений") 
			И ТаблицаПоказатели.Колонки.Найти("Имя")<>Неопределено
			И ТаблицаПоказатели.Колонки.Найти("Использование")<>Неопределено Тогда
			
			Для Каждого Строка Из Показатели Цикл
				
				НайдСтрока = ТаблицаПоказатели.Найти(Строка.Имя, "Имя");
				Если НайдСтрока<>Неопределено Тогда
					Строка.Использование = НайдСтрока.Использование;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	
	// Выбранные поля
	
	ВыбранныеПоля = Параметры["ВыбранныеПоля"];
	Если ТипЗнч(ВыбранныеПоля) = Тип("Соответствие")
		ИЛИ ТипЗнч(ВыбранныеПоля) = Тип("Структура") Тогда
		
		ПостроительОтчета.ВыбранныеПоля.Очистить();
		
		Для каждого Строка Из ВыбранныеПоля Цикл
		
			ПостроительОтчета.ВыбранныеПоля.Добавить(Строка.Ключ);
		
		КонецЦикла; 
		
	КонецЕсли;
	
	// Отбор, заданный списком
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
			ПостроительОтчета.Отбор.Удалить(0);
		КонецЦикла; 

		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

мЗначимыеГруппировкиГор=Новый ("СписокЗначений");
мСоответствиеНомера=Новый Соответствие;



#КонецЕсли

