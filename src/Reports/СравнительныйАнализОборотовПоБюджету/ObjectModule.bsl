// Все возможные показатели
Перем мТаблицаПоказатели Экспорт;

Перем мНазваниеОтчета Экспорт;
Перем мНаДату Экспорт;

// Счетчик выведенных в отчет периодов
Перем мВыведеноПериодов;

// Количество группировок в выводе по горизонтали
Перем мГруппировокПоГоризонтали;

// Группировки, выводимые в отчет по горизонтали
Перем мЗначимыеГруппировкиГор;

Перем КопияТаблицаСценарии;

//Тексты построителей для статей и счетов
Перем ТекстПостроительДляСчетов;
Перем ТекстПостроительДляОборотов;

// Соответствие выводимого периода чмсловой выборке
Перем мСоответствиеНомера; 


#Если Клиент Тогда

  // Формирует текст отбора данных по строке ТЧ "ТаблицаСценарии"
  //
  // Параметры
  //  СтрокаСценарий( строка табличной части): строка ТЧ "ТаблицаСценарии", для которой
  // 	формируется текст запроса;
  // СтруктураПараметров (структура): структура, в которой хранятся згачения параметров для 
  //	основного запроса
   // Возвращаемое значение:
  //   ТекстЗапроса(текст)- текст отбора данных по строке ТЧ "ТаблицаСценарии"
  //
Функция ТекстЗапросаПоСценариюСчета(СтрокаСценарий,СтруктураПараметров,Номер,ПериодДанных, СтруктураГруппировки,ПредварительныйЗапрос)
	
	ПериодДанных=ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность);
	
	ТекстЗапроса="
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	&ПараметрНомерСценария_"+Номер+" КАК НомерСценария,
	|	БюджетированиеОстаткиИОбороты.Сценарий КАК Сценарий,
	|	СчетаБюджета.Ссылка КАК СтрокаБюджета,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1 
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ &ПустойЦФО КОНЕЦ КАК ЦФО,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1 
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ &ПустойПроект КОНЕЦ КАК Проект,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ &ПустойКонтрагент КОНЕЦ КАК Контрагент,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ Неопределено КОНЕЦ КАК Номенклатура,
	| БюджетированиеОстаткиИОбороты.Валюта КАК Валюта,
	|	БюджетированиеОстаткиИОбороты.Период КАК Период";
	
	Для Каждого СтрокаПоказатели Из Показатели Цикл
		
		Если Не СтрокаПоказатели.Использование Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Для Индекс=0 По ТаблицаСценарии.Количество()-1 Цикл
				
			Если ТаблицаСценарии[Индекс].ВидДанных = Перечисления.ВидыДанныхДляОтчетовБюджетирования.ФактическиеДанные И СтрокаПоказатели.Имя = "СуммаСценария" Тогда
				ИмяПоказателя1 = "ВалютнаяСумма";
			Иначе
				ИмяПоказателя1 = СтрокаПоказатели.Имя;
			КонецЕсли;
			ИмяПоказателя = СтрокаПоказатели.Имя;
			
			Если Номер = Индекс Тогда
				
				Если ПредварительныйЗапрос Тогда
					
					ТекстЗапроса = ТекстЗапроса + ",
					|	СУММА(БюджетированиеОстаткиИОбороты."+ИмяПоказателя+"НачальныйОстаток*СчетаБюджета.Знак) КАК " + ИмяПоказателя+"НачальныйОстаток_"+Индекс;
					
				Иначе
					
					ТекстЗапроса = ТекстЗапроса + ",
					|	СУММА(БюджетированиеОстаткиИОбороты."+ИмяПоказателя1+"НачальныйОстатокДт*СчетаБюджета.Знак) КАК " + ИмяПоказателя+"НачальныйОстатокДт_"+Индекс+",
					|	СУММА(БюджетированиеОстаткиИОбороты."+ИмяПоказателя1+"НачальныйОстатокКт*СчетаБюджета.Знак) КАК " + ИмяПоказателя+"НачальныйОстатокКт_"+Индекс+",
					|	СУММА(БюджетированиеОстаткиИОбороты."+ИмяПоказателя1+"КонечныйОстатокДт*СчетаБюджета.Знак) КАК " + ИмяПоказателя+"КонечныйОстатокДт_"+Индекс+",
					|	СУММА(БюджетированиеОстаткиИОбороты."+ИмяПоказателя1+"КонечныйОстатокКт*СчетаБюджета.Знак) КАК " + ИмяПоказателя+"КонечныйОстатокКт_"+Индекс+",
					|	СУММА(БюджетированиеОстаткиИОбороты."+ИмяПоказателя1+"Оборот) КАК " + ИмяПоказателя+"Оборот_"+Индекс;
					
				КонецЕсли;
				
			Иначе
				
				Если ПредварительныйЗапрос Тогда
					
					ТекстЗапроса = ТекстЗапроса + ",
					|0 КАК " + ИмяПоказателя +"НачальныйОстаток_"+Индекс;
					
				Иначе
					
					ТекстЗапроса = ТекстЗапроса + ",
					|0 КАК " + ИмяПоказателя +"НачальныйОстатокДт_"+Индекс+",
					|0 КАК " + ИмяПоказателя +"НачальныйОстатокКт_"+Индекс+",
					|0 КАК " + ИмяПоказателя +"КонечныйОстатокДт_"+Индекс+",
					|0 КАК " + ИмяПоказателя +"КонечныйОстатокКт_"+Индекс+",
					|0 КАК " + ИмяПоказателя +"Оборот_"+Индекс;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	ТекстЗапроса=ТекстЗапроса+"
	|ИЗ
	|	Справочник.СчетаБюджета КАК СчетаБюджета
	|		"+?(ВыводитьНулевыеСтроки,"ЛЕВОЕ СОЕДИНЕНИЕ ","ВНУТРЕННЕЕ СОЕДИНЕНИЕ ")+" РегистрБухгалтерии.Бюджетирование.ОстаткиИОбороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+", , , , Сценарий = &Сценарий_"+Номер+") КАК БюджетированиеОстаткиИОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Бюджетирование.Ссылка КАК Ссылка,
	|				Бюджетирование.Валютный КАК Валютный,
	|				Бюджетирование.Количественный КАК Количественный,
	|				БюджетированиеВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	|				БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	|				БюджетированиеВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	|				БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	|				БюджетированиеВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	|				БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3
	|			ИЗ
	|				ПланСчетов.Бюджетирование КАК Бюджетирование
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	|					ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	|					ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	|					ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)) КАК ВложенныйЗапрос
	|			ПО БюджетированиеОстаткиИОбороты.Счет = ВложенныйЗапрос.Ссылка
	|		ПО СчетаБюджета.СтатьяБаланса = БюджетированиеОстаткиИОбороты.Счет
	|
	|ГДЕ
	|	СчетаБюджета.Владелец = &Бюджет И
	|	(НЕ(СчетаБюджета.ПометкаУдаления)) И
	|	(НЕ(СчетаБюджета.ЭтоГруппа))
	|СГРУППИРОВАТЬ ПО
	|	БюджетированиеОстаткиИОбороты.Сценарий,
	|	СчетаБюджета.Ссылка,
	|	БюджетированиеОстаткиИОбороты.Период,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1 
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""ЦФО"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ &ПустойЦФО КОНЕЦ,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1 
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Проекты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ &ПустойПроект КОНЕЦ,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ &ПустойКонтрагент КОНЕЦ,
	|	ВЫБОР КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто1
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто2
	|	КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА БюджетированиеОстаткиИОбороты.Субконто3
	|	ИНАЧЕ Неопределено КОНЕЦ,
	| БюджетированиеОстаткиИОбороты.Валюта";
	
	СтруктураПараметров.Вставить("ДатаНач_"+Номер,СтрокаСценарий.ДатаНач);
	СтруктураПараметров.Вставить("ДатаКон_"+Номер,КонецДня(СтрокаСценарий.ДатаКон));
	СтруктураПараметров.Вставить("Сценарий_"+Номер,СтрокаСценарий.Сценарий);
	СтруктураПараметров.Вставить("ПараметрНомерСценария_"+Номер,Номер);
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаПоСценариюСчета()
  
  //Функция определяет, указаны ли для статей бюджета ссылки на группы статей оборотов
// возвращаемое значение - максимальный уровень группы статей оборотов
Функция ПроверитьНаличиеГруппСтатейОборотовДляСтатейБюджетов()
	//определим количество уровней вложенности справочника СтатьиОборотовПоБюджетам 
	//	для построения запроса по дереву статей
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ СтатьяОборотов ИЗ Справочник.СтатьиБюджета
	|ГДЕ СтатьяОборотов.ЭтоГруппа = истина и Владелец=&Бюджет";
	Запрос.УстановитьПараметр("Бюджет",Бюджет);
	
	Макс_Уровень = -1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		текУровень = Выборка.СтатьяОборотов.Уровень();
		Если текУровень>Макс_Уровень Тогда
			Макс_Уровень = текУровень;
		КонецЕсли;
	КонецЦикла;
    Возврат Макс_Уровень;
КонецФункции
  
  
// Формирует текст отбора данных по строке ТЧ "ТаблицаСценарии"
//
// Параметры
//  СтрокаСценарий( строка табличной части): строка ТЧ "ТаблицаСценарии", для которой
// 	формируется текст запроса;
// СтруктураПараметров (структура): структура, в которой хранятся згачения параметров для 
//	основного запроса
// Возвращаемое значение:
//   ТекстЗапроса(текст)- текст отбора данных по строке ТЧ "ТаблицаСценарии"
//
Функция ТекстЗапросаПоСценариюОбороты(СтрокаСценарий,СтруктураПараметров,Номер,ПериодДанных, СтруктураГруппировки)
  
  ПериодДанных=ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность);
  
  ТекстЗапроса="
  |ОБЪЕДИНИТЬ ВСЕ
  |ВЫБРАТЬ
  |&ПараметрНомерСценария_"+Номер+" КАК НомерСценария,
  |ОборотыПоСтатьям.Сценарий КАК Сценарий,
  |СтатьиБюджета.Ссылка КАК СтрокаБюджета,
  |ОборотыПоСтатьям.ЦФО КАК ЦФО,
  |ОборотыПоСтатьям.Проект КАК Проект,
  |ОборотыПоСтатьям.Контрагент КАК Контрагент,
  |ОборотыПоСтатьям.Номенклатура КАК Номенклатура,
  |ОборотыПоСтатьям.Валюта КАК Валюта,
  |ОборотыПоСтатьям.Период КАК Период";
   
  Для Каждого СтрокаПоказатели Из Показатели Цикл
	  
	  Если Не СтрокаПоказатели.Использование Тогда
		  
		  Продолжить;
		  
	  КонецЕсли; 
	  
	  Для Индекс=0 По ТаблицаСценарии.Количество()-1 Цикл
		  
		  Если ТаблицаСценарии[Индекс].ВидДанных = Перечисления.ВидыДанныхДляОтчетовБюджетирования.ФактическиеДанные И СтрокаПоказатели.Имя = "СуммаСценария" Тогда
			  ИмяПоказателя1 = "ВалютнаяСумма";
		  Иначе
			  ИмяПоказателя1 = СтрокаПоказатели.Имя;
		  КонецЕсли;
		  ИмяПоказателя = СтрокаПоказатели.Имя;
			
			
		  Если Номер = Индекс Тогда
			  
			  ТекстЗапроса = ТекстЗапроса + ",
			  |	СУММА(ОборотыПоСтатьям."+ИмяПоказателя1+") КАК " + ИмяПоказателя+"_"+Индекс;
			  
		  Иначе
			  ТекстЗапроса = ТекстЗапроса + ",
			  |0 КАК " + ИмяПоказателя +"_"+Индекс;	
			  
		  КонецЕсли;
		  
	  КонецЦикла;
	  
  КонецЦикла;
  
    //формирование запроса по справочникам СтатьиБюджета, СтатьиОборотовПоБюджетам
	УровеньГруппыСтатьиОборотовПоБюджетам = ПроверитьНаличиеГруппСтатейОборотовДляСтатейБюджетов();
	Если УровеньГруппыСтатьиОборотовПоБюджетам = -1 Тогда
		ТекстЗАпроса_СтатьиБюджета = "Справочник.СтатьиБюджета КАК СтатьиБюджета";
	Иначе
		Текст_Родитель = ".Родитель";
		ТекстЗапроса_СтатьиОборотов = "";
		Для тек_ур = 1 по УровеньГруппыСтатьиОборотовПоБюджетам+1 цикл
			Если ТекстЗапроса_СтатьиОборотов<>"" Тогда
				ТекстЗапроса_СтатьиОборотов = ТекстЗапроса_СтатьиОборотов+"
				|объединить";
			КонецЕсли;
			
			ТекстЗапроса_СтатьиОборотов = ТекстЗапроса_СтатьиОборотов+"
			|ВЫБРАТЬ Ссылка КАК Элемент, Ссылка"+Текст_Родитель+" КАК Родитель
			|ИЗ Справочник.СтатьиОборотовПоБюджетам
			|ГДЕ Ссылка.ЭтоГруппа = ложь и Ссылка"+Текст_Родитель+"<>&ПустаяСсылкаСтатьяОборотовПоБюджетам";
			Текст_Родитель = Текст_Родитель+".Родитель";
		КонецЦикла;
		
		ТекстЗАпроса_СтатьиБюджета = "(ВЫБРАТЬ СтБюдж.Ссылка, СтБюдж.Знак, СтБюдж.СтатьяОборотов КАК СтатьяОборотов
		|ИЗ Справочник.СтатьиБюджета КАК СтБюдж
		|ГДЕ СтБюдж.Владелец = &Бюджет  и СтБюдж.ПометкаУдаления = ложь И СтБюдж.СтатьяОборотов.ЭтоГруппа = ложь
        |Объединить
		|ВЫБРАТЬ СтБюдж.Ссылка, СтБюдж.Знак, СтОбор.Элемент КАК СтатьяОборотов
		|ИЗ Справочник.СтатьиБюджета КАК СтБюдж
		|ЛЕВОЕ СОЕДИНЕНИЕ ("+ТекстЗапроса_СтатьиОборотов+") КАК СтОбор
		|ПО СтОбор.Родитель = СтБюдж.СтатьяОборотов
		|ГДЕ СтБюдж.Владелец = &Бюджет  и СтБюдж.ПометкаУдаления = ложь
		|) КАК СтатьиБюджета";
	КонецЕсли;
  
  ТекстЗапроса=ТекстЗапроса+"
  | ИЗ Справочник.СтатьиБюджета КАК СтатьиБюджета 
  |"+?(ВыводитьНулевыеСтроки,"ЛЕВОЕ СОЕДИНЕНИЕ ","ВНУТРЕННЕЕ СОЕДИНЕНИЕ ")+"  (ВЫБРАТЬ
  |	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
  |	ОборотыБюджетовОбороты.Сценарий КАК Сценарий,
  |	ОборотыБюджетовОбороты.Период КАК Период,
  |	ОборотыБюджетовОбороты.Валюта КАК Валюта,
  |	ОборотыБюджетовОбороты.ЦФО КАК ЦФО,
  |	ОборотыБюджетовОбороты.Проект КАК Проект,
  |	ОборотыБюджетовОбороты.Контрагент КАК Контрагент,
  |	ОборотыБюджетовОбороты.Номенклатура КАК Номенклатура,
  |	ОборотыБюджетовОбороты.СуммаУпрОборот*СтатьиБюджета.Знак КАК СуммаУпр,
  |	ОборотыБюджетовОбороты.ВалютнаяСуммаОборот*СтатьиБюджета.Знак КАК ВалютнаяСумма,
  |	ОборотыБюджетовОбороты.СуммаСценарияОборот*СтатьиБюджета.Знак КАК СуммаСценария,
  |	ОборотыБюджетовОбороты.КоличествоОборот*СтатьиБюджета.Знак КАК Количество
  |ИЗ
  |	РегистрНакопления.ОборотыБюджетов.Обороты(&ДатаНач_"+Номер+",&ДатаКон_"+Номер+","+ПериодДанных+",Сценарий=&Сценарий_"+Номер+") КАК ОборотыБюджетовОбороты
  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ТекстЗАпроса_СтатьиБюджета+"
  //Справочник.СтатьиБюджета КАК СтатьиБюджета
  |	ПО ОборотыБюджетовОбороты.СтатьяОборотов = СтатьиБюджета.СтатьяОборотов
  |"+?(УровеньГруппыСтатьиОборотовПоБюджетам = -1,"ГДЕ СтатьиБюджета.Владелец = &Бюджет","")+"
  //|ГДЕ
  //|	СтатьиБюджета.Владелец = &Бюджет
  |) КАК ОборотыПоСтатьям
  |ПО СтатьиБюджета.Ссылка=ОборотыПоСтатьям.СтатьяБюджета
  |ГДЕ СтатьиБюджета.Владелец = &Бюджет И
  |(НЕ(СтатьиБюджета.ПометкаУдаления)) И
  |(НЕ(СтатьиБюджета.ЭтоГруппа))
  |СГРУППИРОВАТЬ ПО
  |ОборотыПоСтатьям.Сценарий,
  |СтатьиБюджета.Ссылка, "+
	?(УровеньГруппыСтатьиОборотовПоБюджетам = -1,"","СтатьиБюджета.Знак,")+"
  |ОборотыПоСтатьям.ЦФО,
  |ОборотыПоСтатьям.Проект,
  |ОборотыПоСтатьям.Контрагент,
  |ОборотыПоСтатьям.Номенклатура,
  |ОборотыПоСтатьям.Валюта,
  |ОборотыПоСтатьям.Период";
    
  СтруктураПараметров.Вставить("ДатаНач_"+Номер,СтрокаСценарий.ДатаНач);
  СтруктураПараметров.Вставить("ДатаКон_"+Номер,КонецДня(СтрокаСценарий.ДатаКон));
  СтруктураПараметров.Вставить("Сценарий_"+Номер,СтрокаСценарий.Сценарий);
  СтруктураПараметров.Вставить("ПараметрНомерСценария_"+Номер,Номер);
  СтруктураПараметров.Вставить("ПустаяСсылкаСтатьяОборотовПоБюджетам",Справочники.СтатьиОборотовПоБюджетам.ПустаяСсылка());

  Возврат ТекстЗапроса;
  
КонецФункции // ТекстЗапросаПоСценариюОбороты()


// Настраивает построитель для вывода остатков по счетам бюджета
//
// Параметры
//  НастройкиПостроителя: НастройкиПостроителяОтчета - настройки построителя из интерфейса
//
// Возвращаемое значение:
//   ПостроительДляСчетов: ПостроительОтчета - настроенный построитель отчета для вывода остатков по счетам бюджета
//
Функция НастроитьПостроительДляСчетов(НастройкиПостроителя)

	ПериодДанных=?(Периодичность.Пустая(),"День",ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность));
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураГруппировки=Новый Структура;
		
	СценарийЭталон=ТаблицаСценарии[0].Сценарий;
	
	ТекстЗапросаСценарииСчета="";
	Номер=0;
		
	Для каждого СтрокаСценарий Из КопияТаблицаСценарии Цикл
		
		ТекстЗапросаСценарииСчета=ТекстЗапросаСценарииСчета+ТекстЗапросаПоСценариюСчета(СтрокаСценарий,СтруктураПараметров,Номер,ПериодДанных,СтруктураГруппировки,Ложь);
		
		// Эталонный период - самый первый
		СтрокаСценарий.Эталон = ?(Номер=0, Истина, Ложь);
		
		СтрокаПериод="Период с "+Формат(СтрокаСценарий.ДатаНач,"ДФ=dd.MM.yyyy")+" по "+Формат(СтрокаСценарий.ДатаКон,"ДФ=dd.MM.yyyy");

		Если СтрокаСценарий.Сценарий.Пустая() Тогда
			СтрокаСценарий.ТекстПараметра=?(Номер=0," Эталонный период.","Сравниваемый период "+Номер+".")
			+Символы.ПС+"Фактические данные."+" "+ПериодДанных+"."+Символы.ПС+СтрокаПериод;
		Иначе
			СтрокаСценарий.ТекстПараметра=?(Номер=0," Эталонный период.","Сравниваемый период "+Номер+".")
			+Символы.ПС+СтрокаСценарий.Сценарий+" "+ПериодДанных+"."+Символы.ПС+СтрокаПериод;
		КонецЕсли;
		
		Номер=Номер+1;

	КонецЦикла;
	
	ТекстПостроительДляСчетов=Сред(ТекстЗапросаСценарииСчета,16);
		
	ПостроительДляСчетов=Новый ПостроительОтчета;
	
	ТекстИтоги="";
	ТекстПоля="";
	Для Каждого СтрокаПоказатели Из Показатели Цикл
		
		Если Не СтрокаПоказатели.Использование Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Для Индекс=0 По ТаблицаСценарии.Количество()-1 Цикл
			
						
			//Если ТаблицаСценарии[Индекс].ВидДанных = Перечисления.ВидыДанныхДляОтчетовБюджетирования.ФактическиеДанные И СтрокаПоказатели.Имя = "СуммаСценария" Тогда
			//	ИмяПоказателя = "ВалютнаяСумма";
			//Иначе
				ИмяПоказателя = СтрокаПоказатели.Имя;
			//КонецЕсли;
			
			ТекстИтоги= ТекстИтоги + ",
			|	СУММА("+ИмяПоказателя+"НачальныйОстатокДт_"+Индекс+"),
			|	СУММА("+ИмяПоказателя+"НачальныйОстатокКт_"+Индекс+"),
			|	СУММА("+ИмяПоказателя+"КонечныйОстатокДт_"+Индекс+"),
			|	СУММА("+ИмяПоказателя+"КонечныйОстатокКт_"+Индекс+"),
			|	СУММА("+ИмяПоказателя+"Оборот_"+Индекс+")";

			ТекстПоля=ТекстПоля+",
			|"+ИмяПоказателя+"НачальныйОстатокДт_"+Индекс+" КАК "+ИмяПоказателя+"НачальныйОстатокДт_"+Индекс+",
			|"+ИмяПоказателя+"НачальныйОстатокКт_"+Индекс+" КАК "+ИмяПоказателя+"НачальныйОстатокКт_"+Индекс+",
			|"+ИмяПоказателя+"КонечныйОстатокДт_"+Индекс+" КАК "+ИмяПоказателя+"КонечныйОстатокДт_"+Индекс+",
			|"+ИмяПоказателя+"КонечныйОстатокКт_"+Индекс+" КАК "+ИмяПоказателя+"КонечныйОстатокКт_"+Индекс+",
			|"+ИмяПоказателя+"Оборот_"+Индекс+" КАК "+ИмяПоказателя+"Оборот_"+Индекс;
			
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстИтоги = Сред(ТекстИтоги,2);

	// Формируем финальный текст запроса.
	ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ДанныеСценариев.СтрокаБюджета КАК СтрокаБюджета
	|{ВЫБРАТЬ
	|ДанныеСценариев.СтрокаБюджета.* КАК СтрокаБюджета,
	|ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.Период КАК Период,
	|ДанныеСценариев.ЦФО.* КАК ЦФО,
	|ДанныеСценариев.Проект.* КАК Проект,
	|ДанныеСценариев.Контрагент.* КАК Контрагент,
	|ДанныеСценариев.Номенклатура.* КАК Номенклатура,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(ПериодДанных,"ДанныеСценариев.Период")+"
	|Валюта.* КАК Валюта}";
	ТекстЗапроса=ТекстЗапроса+ТекстПоля+"
	|ИЗ 
	|("+ТекстПостроительДляСчетов+") КАК ДанныеСценариев
	|{ГДЕ
	|ДанныеСценариев.ЦФО.*,
	|ДанныеСценариев.Проект.*,
	|ДанныеСценариев.Контрагент.*,
	|ДанныеСценариев.Номенклатура.*,
	|ДанныеСценариев.Валюта
	|}
	|УПОРЯДОЧИТЬ ПО ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.СтрокаБюджета.Код
	|{УПОРЯДОЧИТЬ ПО ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.Период,
	|ДанныеСценариев.СтрокаБюджета.Код}
	|ИТОГИ
	|"+ТекстИтоги+"	
	|ПО
	|ОБЩИЕ,
	|ДанныеСценариев.СтрокаБюджета ИЕРАРХИЯ КАК СтрокаБюджета
	|{ИТОГИ ПО
	|ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.СтрокаБюджета.*,
	|ДанныеСценариев.Период,
	|ДанныеСценариев.Проект.*,
	|ДанныеСценариев.ЦФО.*,
	|ДанныеСценариев.Контрагент.*,
	|ДанныеСценариев.Номенклатура.*,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(ПериодДанных,"ДанныеСценариев.Период")+"
	|ДанныеСценариев.Валюта КАК Валюта}";
	
	ПостроительДляСчетов.Текст = ТекстЗапроса;
	Для каждого Параметр Из СтруктураПараметров Цикл
	
		ПостроительДляСчетов.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
	
	КонецЦикла;
	
	ПостроительДляСчетов.Параметры.Вставить("Бюджет",Бюджет);	
	
	ПостроительДляСчетов.Параметры.Вставить("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	ПостроительДляСчетов.Параметры.Вставить("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	ПостроительДляСчетов.Параметры.Вставить("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
	
	ПостроительДляСчетов.ЗаполнитьНастройки();
	
	Для Сч=0 по ПостроительДляСчетов.ДоступныеПоля.Количество()-1 Цикл
		Поле=ПостроительДляСчетов.ДоступныеПоля[Сч];
		Если Поле.Имя="Проект" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли Поле.Имя="ЦФО" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли Поле.Имя="Контрагент" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли Поле.Имя="Номенклатура" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЦикла;
		
	//Очистим измерения
	Пока ПостроительДляСчетов.ИзмеренияСтроки.Количество()>0 Цикл
		ТекущееИзмерение=ПостроительДляСчетов.ИзмеренияСтроки[0];
		ПостроительДляСчетов.ИзмеренияСтроки.Удалить(ТекущееИзмерение);
	КонецЦикла;
	
	ПостроительДляСчетов.УстановитьНастройки(НастройкиПостроителя,Истина,Ложь,Ложь,Ложь,Ложь);
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		ТекущаяСтрока=ПостроительОтчета.ИзмеренияСтроки[Сч];
		ПутьКДанным=ТекущаяСтрока.ПутьКДанным;
		Имя=ТекущаяСтрока.Имя;
		Тип=ТекущаяСтрока.ТипИзмерения;
		
		ПостроительДляСчетов.ИзмеренияСтроки.Добавить(ПутьКДанным,Имя,Тип);
		
	КонецЦикла;
	
	Возврат ПостроительДляСчетов;
	
КонецФункции // НастроитьПостроительДляСчетов()

// Настраивает построитель для вывода остатков по счетам бюджета
//
// Параметры
//  НастройкиПостроителя: НастройкиПостроителяОтчета - настройки построителя из интерфейса
//
// Возвращаемое значение:
//   ПостроительДляСчетов: ПостроительОтчета - настроенный построитель отчета для вывода остатков по счетам бюджета
//
Функция НастроитьПостроительДляСтатей(НастройкиПостроителя)

	ПериодДанных=?(Периодичность.Пустая(),"День",ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность));
	
	СтруктураПараметров=Новый Структура;
	СтруктураГруппировки=Новый Структура;
		
	СценарийЭталон=ТаблицаСценарии[0].Сценарий;
	
	ТекстЗапросаСценарииОбороты="";	
	Номер=0;
		
	Для каждого СтрокаСценарий Из КопияТаблицаСценарии Цикл
		
		ТекстЗапросаСценарииОбороты=ТекстЗапросаСценарииОбороты+ТекстЗапросаПоСценариюОбороты(СтрокаСценарий,СтруктураПараметров,Номер,ПериодДанных,СтруктураГруппировки);
		
		// Эталонный период - самый первый
		СтрокаСценарий.Эталон = ?(Номер=0, Истина, Ложь);
		
		СтрокаПериод="Период с "+Формат(СтрокаСценарий.ДатаНач,"ДФ=dd.MM.yyyy")+" по "+Формат(СтрокаСценарий.ДатаКон,"ДФ=dd.MM.yyyy");

		Если СтрокаСценарий.Сценарий.Пустая() Тогда
			СтрокаСценарий.ТекстПараметра=?(Номер=0," Эталонный период.","Сравниваемый период "+Номер+".")
			+Символы.ПС+"Фактические данные."+" "+ПериодДанных+"."+Символы.ПС+СтрокаПериод;
		Иначе
			СтрокаСценарий.ТекстПараметра=?(Номер=0," Эталонный период.","Сравниваемый период "+Номер+".")
			+Символы.ПС+СтрокаСценарий.Сценарий+" "+ПериодДанных+"."+Символы.ПС+СтрокаПериод;
		КонецЕсли;
		
		Номер=Номер+1;

	КонецЦикла;
	
	ТекстПостроительДляСтатей=Сред(ТекстЗапросаСценарииОбороты,16);
		
	ПостроительДляСтатей=Новый ПостроительОтчета;
	
	ТекстИтоги="";
	ТекстПоля="";
	Для Каждого СтрокаПоказатели Из Показатели Цикл
		
		Если Не СтрокаПоказатели.Использование Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Для Индекс=0 По ТаблицаСценарии.Количество()-1 Цикл
			
			//Если ТаблицаСценарии[Индекс].ВидДанных = Перечисления.ВидыДанныхДляОтчетовБюджетирования.ФактическиеДанные И СтрокаПоказатели.Имя = "СуммаСценария" Тогда
			//	ИмяПоказателя = "ВалютнаяСумма";
			//Иначе
				ИмяПоказателя = СтрокаПоказатели.Имя;
			//КонецЕсли;
			
			ТекстИтоги= ТекстИтоги + ",
			|	СУММА("+ИмяПоказателя+"_"+Индекс+")";
			
			ТекстПоля=ТекстПоля+",
			|"+ИмяПоказателя+"_"+Индекс+" КАК "+ИмяПоказателя+"_"+Индекс;			
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстИтоги = Сред(ТекстИтоги,2);

	// Формируем финальный текст запроса.
	ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ДанныеСценариев.СтрокаБюджета КАК СтрокаБюджета
	|{ВЫБРАТЬ
	|ДанныеСценариев.СтрокаБюджета.* КАК СтрокаБюджета,
	|ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.Период КАК Период,
	|ДанныеСценариев.ЦФО.* КАК ЦФО,
	|ДанныеСценариев.Проект.* КАК Проект,
	|ДанныеСценариев.Контрагент.* КАК Контрагент,
	|ДанныеСценариев.Номенклатура.* КАК Номенклатура,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(ПериодДанных,"ДанныеСценариев.Период")+"
	|Валюта.* КАК Валюта}";
	ТекстЗапроса=ТекстЗапроса+ТекстПоля+"
	|ИЗ 
	|("+ТекстПостроительДляСтатей+") КАК ДанныеСценариев
	|{ГДЕ
	|ДанныеСценариев.ЦФО.*,
	|ДанныеСценариев.Проект.*,
	|ДанныеСценариев.Контрагент.*,
	|ДанныеСценариев.Номенклатура.*,
	|ДанныеСценариев.Валюта
	|}
	|УПОРЯДОЧИТЬ ПО ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.СтрокаБюджета.Код
	|{УПОРЯДОЧИТЬ ПО ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.Период,
	|ДанныеСценариев.СтрокаБюджета.Код}
	|ИТОГИ
	|"+ТекстИтоги+"	
	|ПО
	|ОБЩИЕ,
	|ДанныеСценариев.СтрокаБюджета Иерархия
	|{ИТОГИ ПО
	|ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.СтрокаБюджета.*,
	|ДанныеСценариев.Период,
	|ДанныеСценариев.Проект.*,
	|ДанныеСценариев.ЦФО.*,
	|ДанныеСценариев.Контрагент.*,
	|ДанныеСценариев.Номенклатура.*,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(ПериодДанных,"ДанныеСценариев.Период")+"
	|ДанныеСценариев.Валюта КАК Валюта}";

	
	ПостроительДляСтатей.Текст = ТекстЗапроса;
	Для каждого Параметр Из СтруктураПараметров Цикл
	
		ПостроительДляСтатей.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
	
	КонецЦикла;
	
	ПостроительДляСтатей.Параметры.Вставить("Бюджет",Бюджет);	
	
	ПостроительДляСтатей.Параметры.Вставить("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	ПостроительДляСтатей.Параметры.Вставить("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	ПостроительДляСтатей.Параметры.Вставить("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
			
	//Очистим измерения
	Пока ПостроительДляСтатей.ИзмеренияСтроки.Количество()>0 Цикл
		ТекущееИзмерение=ПостроительДляСтатей.ИзмеренияСтроки[0];
		ПостроительДляСтатей.ИзмеренияСтроки.Удалить(ТекущееИзмерение);
	КонецЦикла;
	
	ПостроительДляСтатей.УстановитьНастройки(НастройкиПостроителя,Истина,Ложь,Ложь,Ложь);
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		ТекущаяСтрока=ПостроительОтчета.ИзмеренияСтроки[Сч];
		ПутьКДанным=ТекущаяСтрока.ПутьКДанным;
		Имя=ТекущаяСтрока.Имя;
		Тип=ТекущаяСтрока.ТипИзмерения;
		
		ПостроительДляСтатей.ИзмеренияСтроки.Добавить(ПутьКДанным,Имя,Тип);
		
	КонецЦикла;
	
	Возврат ПостроительДляСтатей;
	
КонецФункции // НастроитьПостроительДляОборотов()


// Процедура заполнения начальных настроек отчета
//
Процедура СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей)
	
	ПериодДанных=?(Периодичность.Пустая(),"День",ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность));
	
	// Далее используются таблицы значений, полученные выгрузкой строк из т.ч. отчета
	КопияТаблицаСценарии= ТаблицаСценарии.Выгрузить();

	КопияТаблицаСценарии.Колонки.Добавить("ТекстПараметра");
	КопияТаблицаСценарии.Колонки.Добавить("Эталон");

	СтруктураПараметров=Новый Структура;
	
	СтруктураГруппировки=Новый Структура;
		
	СценарийЭталон=ТаблицаСценарии[0].Сценарий;
	
	ТекстЗапросаСценарииСчета="";
	ТекстЗапросаСценарииОбороты="";	
	Номер=0;
		
	Для каждого СтрокаСценарий Из КопияТаблицаСценарии Цикл
		
		ТекстЗапросаСценарииСчета=ТекстЗапросаСценарииСчета+ТекстЗапросаПоСценариюСчета(СтрокаСценарий,СтруктураПараметров,Номер,ПериодДанных,СтруктураГруппировки,Истина);
		ТекстЗапросаСценарииОбороты=ТекстЗапросаСценарииОбороты+ТекстЗапросаПоСценариюОбороты(СтрокаСценарий,СтруктураПараметров,Номер,ПериодДанных,СтруктураГруппировки);
		
		// Эталонный период - самый первый
		СтрокаСценарий.Эталон = ?(Номер=0, Истина, Ложь);
		
		СтрокаПериод="Период с "+Формат(СтрокаСценарий.ДатаНач,"ДФ=dd.MM.yyyy")+" по "+Формат(СтрокаСценарий.ДатаКон,"ДФ=dd.MM.yyyy");

		Если СтрокаСценарий.Сценарий.Пустая() Тогда
			СтрокаСценарий.ТекстПараметра=?(Номер=0," Эталонный период.","Сравниваемый период "+Номер+".")
			+Символы.ПС+"Фактические данные."+" "+ПериодДанных+"."+Символы.ПС+СтрокаПериод;
		Иначе
			СтрокаСценарий.ТекстПараметра=?(Номер=0," Эталонный период.","Сравниваемый период "+Номер+".")
			+Символы.ПС+СтрокаСценарий.Сценарий+" "+ПериодДанных+"."+Символы.ПС+СтрокаПериод;
		КонецЕсли;
		
		Номер=Номер+1;

	КонецЦикла;
	
	ТекстПостроительДляСчетов=Сред(ТекстЗапросаСценарииСчета,16);
	ТекстПостроительДляОборотов=Сред(ТекстЗапросаСценарииОбороты,16);	
	
	ТекстИтоги="";
	ТекстПоля="";
	Для Каждого СтрокаПоказатели Из Показатели Цикл
		
		Если Не СтрокаПоказатели.Использование Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Для Индекс=0 По ТаблицаСценарии.Количество()-1 Цикл
			
			//Если ТаблицаСценарии[Индекс].ВидДанных = Перечисления.ВидыДанныхДляОтчетовБюджетирования.ФактическиеДанные И СтрокаПоказатели.Имя = "СуммаСценария" Тогда
			//	ИмяПоказателя = "ВалютнаяСумма";
			//Иначе
				ИмяПоказателя = СтрокаПоказатели.Имя;
			//КонецЕсли;
			
			ТекстИтоги= ТекстИтоги + ",
			|	СУММА("+ИмяПоказателя+"_"+Индекс+")";
			
			ТекстПоля=ТекстПоля+",
			|"+ИмяПоказателя+"_"+Индекс+" КАК "+ИмяПоказателя+"_"+Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстИтоги = Сред(ТекстИтоги,2);

	// Формируем финальный текст запроса.
	ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ДанныеСценариев.СтрокаБюджета КАК СтрокаБюджета
	|{ВЫБРАТЬ
	|ДанныеСценариев.СтрокаБюджета.* КАК СтрокаБюджета,
	|ВЫРАЗИТЬ(ДанныеСценариев.НомерСценария КАК Число) КАК НомерСценария,
	|ДанныеСценариев.Период КАК Период,
	|ДанныеСценариев.ЦФО.* КАК ЦФО,
	|ДанныеСценариев.Проект.* КАК Проект,
	|ДанныеСценариев.Контрагент.* КАК Контрагент,
	|ДанныеСценариев.Номенклатура.* КАК Номенклатура,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(ПериодДанных,"ДанныеСценариев.Период")+"
	|Валюта.* КАК Валюта}";
	ТекстЗапроса=ТекстЗапроса+ТекстПоля+"
	|ИЗ 
	|("+ТекстПостроительДляОборотов+"
	|ОБЪЕДИНИТЬ ВСЕ
	|"+ТекстПостроительДляСчетов+") КАК ДанныеСценариев
	|{ГДЕ
	|ДанныеСценариев.ЦФО.*,
	|ДанныеСценариев.Проект.*,
	|ДанныеСценариев.Контрагент.*,
	|ДанныеСценариев.Номенклатура.*,
	|ДанныеСценариев.Валюта
	|}
	|УПОРЯДОЧИТЬ ПО НомерСценария,
	|ДанныеСценариев.СтрокаБюджета.Код
	|{УПОРЯДОЧИТЬ ПО НомерСценария,
	|ДанныеСценариев.Период,
	|ДанныеСценариев.СтрокаБюджета.Код}
	|ИТОГИ
	|"+ТекстИтоги+"	
	|ПО
	|ОБЩИЕ,
	|ДанныеСценариев.СтрокаБюджета Иерархия
	|{ИТОГИ ПО
	|ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.СтрокаБюджета.*,
	|ДанныеСценариев.Период,
	|ДанныеСценариев.Проект.*,
	|ДанныеСценариев.ЦФО.*,
	|ДанныеСценариев.Контрагент.*,
	|ДанныеСценариев.Номенклатура.*,
	|"+Бюджетирование.СформироватьТекстЗапросаПоПериодам(ПериодДанных,"ДанныеСценариев.Период")+"
	|ДанныеСценариев.Валюта КАК Валюта}";

	
	ПостроительОтчета.Текст = ТекстЗапроса;
	Для каждого Параметр Из СтруктураПараметров Цикл
	
		ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
	
	КонецЦикла;	
	
	ПостроительОтчета.Параметры.Вставить("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	ПостроительОтчета.Параметры.Вставить("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	ПостроительОтчета.Параметры.Вставить("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
	
	
	Для Сч=0 по ПостроительОтчета.ДоступныеПоля.Количество()-1 Цикл
		Поле=ПостроительОтчета.ДоступныеПоля[Сч];
		Если Поле.Имя="Проект" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли Поле.Имя="ЦФО" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли Поле.Имя="Контрагент" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли Поле.Имя="Номенклатура" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЦикла;
					
	СтруктураПредставлениеПолей = Новый Структура(
	"	СтрокаБюджета,
	|	ЦФО,
	|	Проект,
	|	Контрагент,
	|	Номенклатура,
	|	Валюта,
	|	Количество,
	|	СуммаУпр,
	|	СуммаСценария,
	|	ВалютнаяСумма",
	"Строка бюджета",
	"ЦФО",
	"Проект",
	"Контрагент",
	"Номенклатура",
	"Валюта операции",
	"Количество",
	"Сумма в валюте упр. учета",
	"Сумма в валюте сценария",
	"Сумма в валюте операции");
	
	СтруктураПредставлениеПолей.Вставить("Период", "Период");
	СтруктураПредставлениеПолей.Вставить("ПериодДень", "По дням");
	СтруктураПредставлениеПолей.Вставить("ПериодНеделя", "По неделям");
	СтруктураПредставлениеПолей.Вставить("ПериодМесяц", "По месяцам");
	СтруктураПредставлениеПолей.Вставить("ПериодКвартал", "По кварталам");
	СтруктураПредставлениеПолей.Вставить("ПериодГод", "По годам");
	
	// Числовые показатели заносятся в специальную таблицу
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "Количество";          // Какому полю в запросе соответствует
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля]; // Представление показателя в отчете
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=3";        // Строка форматирования

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаУпр";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаСценария";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "ВалютнаяСумма";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
	
// Поля отбора, которые будут показаны на основной форме, заносятся в массив МассивОтбора
	МассивОтбора.Добавить("ЦФО");
	МассивОтбора.Добавить("Проект");
	МассивОтбора.Добавить("Контрагент");
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("Валюта");
	
	ПостроительОтчета.ДоступныеПоля["НомерСценария"].Измерение=Ложь;
		
КонецПроцедуры // СформироватьНастройкиОтчета()

Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ВыводитьИтогиПоВсемУровням=Истина;

	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	
	мТаблицаПоказатели  = Новый ТаблицаЗначений;
	мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);
	
	мСтруктураСвязиПоказателейИИзмерений = Новый Структура;
	
	СтруктураПредставлениеПолей = Новый Структура;

	мСоответствиеНазначений = Новый Соответствие;

	МассивОтбора = Новый Массив;
	
	мНазваниеОтчета = "Сравнительный анализ оборотов по бюджету: "+Строка(Бюджет);
	мНаДату = Ложь;

	Если Показатели.Количество()=0 Тогда
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "Количество";          // Какому полю в запросе соответствует
		СтрПоказатели.Представление = "Количество";
		СтрПоказатели.Использование   = Ложь;
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "СуммаУпр";
		СтрПоказатели.Представление = "Сумма в валюте упр. учета";
		СтрПоказатели.Использование   = Истина;
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "СуммаСценария";
		СтрПоказатели.Представление = "Сумма в валюте сценария";
		СтрПоказатели.Использование   = Истина;
		
		//СтрПоказатели = Показатели.Добавить();
		//СтрПоказатели.ИмяПоля           = "СуммаСценария";
		//СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
		//СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "ВалютнаяСумма";
		СтрПоказатели.Представление = "Сумма в валюте операции";
		СтрПоказатели.Использование   = Ложь;
		
	КонецЕсли;

	ТекНастройкиПостроителя="";
	
	Если НЕ ПостроительОтчета.Текст="" Тогда
		ТекНастройкиПостроителя=ПостроительОтчета.ПолучитьНастройки(Истина,Истина,Истина,Истина);
	КонецЕсли;
	
	//Очистим отбор
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла;
	
	//Очистим порядок
	Пока ПостроительОтчета.Порядок.Количество()>0 Цикл
		ПостроительОтчета.Порядок.Удалить(0);
	КонецЦикла;
		
	Если ТаблицаСценарии.Количество()>0 Тогда
		СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей);
		
		УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
		УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
		УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
		
	КонецЕсли;
	
	Если ТипЗнч(ТекНастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета.УстановитьНастройки(ТекНастройкиПостроителя,Истина,Истина,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Выводит показатели отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета
//
Процедура ВывестиПоказатели(Выборка, СтруктураПараметров)

	ТабДок = СтруктураПараметров.ТабДок;
	
	мВыведеноПериодов=0;

	РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"НомерСценария", "Все"),СтруктураПараметров,ТабДок,0,Новый Массив);

КонецПроцедуры // ВывестиПоказатели()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиГруппировку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = СтруктураПараметров.ЗначениеГруппировки;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;

	ОформлениеСтроки                = СтруктураПараметров.ОформлениеСтроки;
	ОформлениеСтрокиИерархии        = СтруктураПараметров.ОформлениеСтрокиИерархии;

	СтруктураВыводГруппировок = СтруктураПараметров.СтруктураВыводГруппировок;

	// Назначение, корректировка макетов измерений
	Сдвиг = Макс(ОформлениеСтроки.Количество()-СтруктураПараметров.МассивГруппировки.Количество(),0);

	Пока Выборка.Следующий() Цикл

		Если (Выборка.Группировка()<>"НомерСценария") и (Выборка.Группировка()<>"Период")  Тогда  // Не выводим группировку, разворачивающуюся по горизонтали.

			ИспользоватьОформление = РаскрашиватьИзмерения;
			Если ОформлениеСтроки.Количество()>0 Тогда
				ИндексОформления = Сдвиг+((Номер) - (ОформлениеСтроки.Количество()-Сдвиг)*Цел((Номер)/(ОформлениеСтроки.Количество()-Сдвиг)));
			Иначе
				ИспользоватьОформление = Ложь;
			КонецЕсли;;

			УровеньЗаписи   = Выборка.Уровень();
			СдвигУровня     = 0;

			ИмяГруппировки  = Выборка.Группировка();

			ТабДок = СтруктураПараметров.ТабДок;

			ЗначениеГруппировки = "";

			ЗначениеРасшифровки = Неопределено;

			ТипЗаписиВыборки = Выборка.ТипЗаписи();

			МассивВыводГруппировок = Новый Массив;

			Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

				ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
				Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда

					ЗначениеТекущейГруппировки = "<...>";
				КонецЕсли;

				ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;
				
				Если ЗначениеРасшифровки = Неопределено Тогда 
					ЗначениеРасшифровки = Выборка[ИмяГруппировки];
				КонецЕсли;
				
			ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ОбщийИтог Тогда

				ЗначениеГруппировки = "ИТОГО";
			
			ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

				Если СтруктураВыводГруппировок.Свойство(ИмяГруппировки, МассивВыводГруппировок) Тогда

					КоличествоДопПолей=МассивВыводГруппировок.Количество();
					ВыведеноГруппировок=0;

					Для Каждого ВыводимаяГруппировка Из МассивВыводГруппировок Цикл

						ВыведеноГруппировок=ВыведеноГруппировок+1;

						Если Найти(ВыводимаяГруппировка,"Период")>0 Тогда
							ЗначениеТекущейГруппировки=ОбщегоНазначения.ПолучитьПериодСтрокой(Выборка[ВыводимаяГруппировка],СтрЗаменить(ВыводимаяГруппировка,"Период",""));
						Иначе
							ЗначениеТекущейГруппировки = "" + Выборка[ВыводимаяГруппировка];
						КонецЕсли;
						
						Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
							ЗначениеТекущейГруппировки = "<...>";
						КонецЕсли;
						
						ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки + ", ";

						Если ЗначениеРасшифровки = Неопределено Тогда 
							ЗначениеРасшифровки = Выборка[ВыводимаяГруппировка];
						КонецЕсли;

						МассивРасшифровки.Добавить(ВыводимаяГруппировка);

					КонецЦикла;

					// Если группировки нет в списке, то не выводим, нам нужна только выборка, 
					// т.о. искусственно получаем группировку по набору полей, указанных в одной строке
					// таблицы группировок
					//
				Иначе

					МассивРасшифровки.Добавить(ИмяГруппировки);
					Перейти ~М1;

				КонецЕсли;

				Если Найти(ИмяГруппировки,"Период")>0 Тогда
					ЗначениеТекущейГруппировки=ОбщегоНазначения.ПолучитьПериодСтрокой(Выборка[ИмяГруппировки],СтрЗаменить(ИмяГруппировки,"Период",""));
				Иначе
					ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
				КонецЕсли;
				
				Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
					ЗначениеТекущейГруппировки = "<...>";
				КонецЕсли;

				ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

				Если ЗначениеРасшифровки = Неопределено Тогда 
					ЗначениеРасшифровки = Выборка[ИмяГруппировки];
				КонецЕсли;

			КонецЕсли;

			// Для итогов по группировке сдвиг нужно уменьшить на количество пропущенных группировок, 
			// заранее рассчитанное для каждой группировки
			//
			Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

				МассивРасшифровки.Добавить(ИмяГруппировки);

				ЗначениеРасшифровкиСтрока = Новый Структура;
				Для Каждого Элемент Из МассивРасшифровки Цикл
					ЗначениеРасшифровкиСтрока.Вставить(Элемент, Выборка[Элемент])
				КонецЦикла;

				СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[ИмяГруппировки];

				// Для итогов по иерархии сдвиг нужно уменьшить на количество пропущенных группировок для предыдущей группировки
				// заранее рассчитанное для каждой группировки
				//
			ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				
				МассивРасшифровки.Добавить(ИмяГруппировки);
				
				ЗначениеРасшифровкиСтрока = Новый Структура;
				Для Каждого Элемент Из МассивРасшифровки Цикл
					ЗначениеРасшифровкиСтрока.Вставить(Элемент, Выборка[Элемент])
				КонецЦикла;
				
				Если Номер>0 Тогда
					СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[СтруктураПараметров.МассивГруппировки[Номер - 1]];
				КонецЕсли;
			КонецЕсли;

			УровеньЗаписи = УровеньЗаписи - СдвигУровня;

			НачСтрока = ТабДок.ВысотаТаблицы+1;

			ТабДок.Вывести(ОбластьОбщийОтступ, УровеньЗаписи);
			ТабДок.Область(ТабДок.ВысотаТаблицы,1).Расшифровка = ЗначениеРасшифровкиСтрока;

			ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = ЗначениеГруппировки;
			ОбластьЗначениеГруппировки.Параметры.Расшифровка = ЗначениеРасшифровки;
			ОбластьЗначениеГруппировки.Область().Отступ = УровеньЗаписи;

			ТабДок.Присоединить(ОбластьЗначениеГруппировки);

			ВывестиПоказатели(Выборка, СтруктураПараметров);

			Если ИспользоватьОформление Тогда

				Область = ТабДок.Область(НачСтрока, 2, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы);

				Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

					//Область.Шрифт      = ОформлениеСтроки[ИндексОформления].Шрифт;
					Область.ЦветФона   = ОформлениеСтроки[ИндексОформления].ЦветФона;
					Область.ЦветТекста = ОформлениеСтроки[ИндексОформления].ЦветТекста;
					//Область.Узор       = ОформлениеСтроки[ИндексОформления].Узор;
					//Область.ЦветУзора  = ОформлениеСтроки[ИндексОформления].ЦветУзора;

				ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

					//Область.Шрифт      = ОформлениеСтрокиИерархии[ИндексОформления].Шрифт;
					Область.ЦветФона   = ОформлениеСтрокиИерархии[ИндексОформления].ЦветФона;
					Область.ЦветТекста = ОформлениеСтрокиИерархии[ИндексОформления].ЦветТекста;
					//Область.Узор       = ОформлениеСтрокиИерархии[ИндексОформления].Узор;
					//Область.ЦветУзора  = ОформлениеСтрокиИерархии[ИндексОформления].ЦветУзора;
				КонецЕсли;
			КонецЕсли;

			Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы,2).Шрифт = СтруктураПараметров.ШрифтГрупп;
			КонецЕсли;

			Если ЗначениеРасшифровки=Неопределено Тогда // Нет расшифровки
				Для Индекс=3 по ТабДок.ШиринаТаблицы Цикл
					ТабДок.Область(ТабДок.ВысотаТаблицы,Индекс).Расшифровка=Неопределено;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 

~М1:	Если Номер+1 < СтруктураПараметров.МассивГруппировки.Количество() Тогда

			// На каждом уровне используется своя копия структуры расшифровок
			КопияМассивРасшифровки = Новый Массив;
			Для Каждого Элемент Из МассивРасшифровки Цикл
				КопияМассивРасшифровки.Добавить(Элемент);
			КонецЦикла;
			
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, СтруктураПараметров.МассивГруппировки[Номер+1]), СтруктураПараметров, Номер + 1, КопияМассивРасшифровки);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ВывестиГруппировку()

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт
	
	мЗначимыеГруппировкиГор.Очистить();

	// Строка в которую выводятся обнаруженные ошибки
	СтрОшибки = "";
	
	ПостроительОтчета.Параметры.Вставить("Бюджет",Бюджет);

	// Проверка на пустые значения
	Если ТаблицаСценарии.Количество()=0 Тогда
		Предупреждение("Не выбраны данные для сравнения!");
		Возврат;
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		
		Если СписокЗначений.НайтиПоЗначению(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным) = Неопределено Тогда
			СписокЗначений.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным);
		Иначе
			Предупреждение("Повторяющаяся группировка " + ПостроительОтчета.ИзмеренияСтроки[Инд].Представление +"."+ Символы.ПС+
			"Нельзя использовать одинаковые поля группировки строк!");
			ЕстьОшибки = Истина;
			Возврат;
			
		КонецЕсли;

		// Если добавлялись одни и те же поля в строки и в колонки, то  у них будет неправильное автогенеренное имя, оканчивающееся на число
		ИмяИзмерения = ПостроительОтчета.ИзмеренияСтроки[Инд].Имя;

		ПоследнийСимвол = Сред(ИмяИзмерения, СтрДлина(ИмяИзмерения));

		Если ПоследнийСимвол = "1"
			ИЛИ ПоследнийСимвол = "2" 
			ИЛИ ПоследнийСимвол = "3" 
			ИЛИ ПоследнийСимвол = "4" 
			ИЛИ ПоследнийСимвол = "5" 
			ИЛИ ПоследнийСимвол = "6" 
			ИЛИ ПоследнийСимвол = "7" 
			ИЛИ ПоследнийСимвол = "8" 
			ИЛИ ПоследнийСимвол = "9" 
			ИЛИ ПоследнийСимвол = "0" Тогда
			
			// Удалим старое измерение и добавим новое
			СтрПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным;

			ПостроительОтчета.ИзмеренияСтроки.Удалить(ПостроительОтчета.ИзмеренияСтроки[Инд]);
			ПостроительОтчета.ИзмеренияСтроки.Вставить(СтрПутьКДанным, , , , , Инд);
		КонецЕсли;
		
	КонецЦикла;

	СписокИзмерений = "";
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
	
		СписокИзмерений = СписокИзмерений +", "+ ПостроительОтчета.ИзмеренияСтроки[Сч].Представление
		+" "+ ПостроительОтчета.ИзмеренияСтроки[Сч].ТипИзмерения;
		
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияСтроки[Сч].Представление;
	
	КонецЦикла; 

	СписокПоказателей = "";
	Для Сч=0 По Показатели.Количество()-1 Цикл

		Если Показатели[Сч].Использование Тогда
		
			СписокПоказателей = СписокПоказателей +", "+ Показатели[Сч].Представление;
		
		КонецЕсли; 
	
	КонецЦикла; 

	СписокОтбор = "";
	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

		Если ПостроительОтчета.Отбор[Сч].Использование И Не ПостроительОтчета.Отбор[Сч].Имя = "Периодичность" Тогда

			СписокОтбор = СписокОтбор +", "+ ПостроительОтчета.Отбор[Сч].Представление 
			+" "+ ПостроительОтчета.Отбор[Сч].ВидСравнения +" "+ ПостроительОтчета.Отбор[Сч].Значение;

		КонецЕсли; 
	
	КонецЦикла;
	
	ПостроительОтчета.ДоступныеПоля["НомерСценария"].Измерение=Истина;
	ПостроительОтчета.ИзмеренияСтроки.Добавить("НомерСценария");
	
	СписокИзмерений=Сред(СписокИзмерений,2);
	СписокПоказателей=Сред(СписокПоказателей,2);
	СписокОтбор=Сред(СписокОтбор,2);
						
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодГод")<>Неопределено Тогда
		ПостроительОтчета.ДоступныеПоля["ПериодГод"].Порядок=Истина;
		ПостроительОтчета.Порядок.Добавить("ПериодГод");	
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодКвартал")<>Неопределено Тогда
		ПостроительОтчета.ДоступныеПоля["ПериодКвартал"].Порядок=Истина;
		ПостроительОтчета.Порядок.Добавить("ПериодКвартал");
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодМесяц")<>Неопределено Тогда
		ПостроительОтчета.ДоступныеПоля["ПериодМесяц"].Порядок=Истина;
		ПостроительОтчета.Порядок.Добавить("ПериодМесяц");
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодНеделя")<>Неопределено Тогда
		ПостроительОтчета.ДоступныеПоля["ПериодНеделя"].Порядок=Истина;
		ПостроительОтчета.Порядок.Добавить("ПериодНеделя");
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("ПериодДень")<>Неопределено Тогда
		ПостроительОтчета.ДоступныеПоля["ПериодДень"].Порядок=Истина;
		ПостроительОтчета.Порядок.Добавить("ПериодДень");
	КонецЕсли;
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("Период")<>Неопределено Тогда 
		ПостроительОтчета.Порядок.Добавить("Период");
	КонецЕсли;
	
	// Структура вывода группировок: ключи определяют "основные" группировки,
	// значения - дополнительные.
	СтруктураВыводГруппировок = Новый Структура;
	МассивГруппировки    = Новый Массив;

	// Структура "поправок" сдвига группировок вправо: уровень записи строки 
	// формируемого запроса будет отличаться от нужного из-за пропусков группировок,
	// по которым не нужно выводить итоги.
	//
	СтруктураСдвигУровняГруппировок = Новый Структура;

	// Заголовок первой колонки шапки таблицы
	ЗаголовокКолонки = "Общий итог"; // этот заголовок выводится в случае отсутствия группировок

	ВсегоГруппировок=0;
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		ВсегоГруппировок = ВсегоГруппировок + 1;
		СтруктураСдвигУровняГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, 0);
		МассивГруппировки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		СтруктураВыводГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);

	КонецЦикла;
	
	Макет = ПолучитьМакет("Макет");
	ДокументРезультат.Очистить();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбщийОтступ", Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировки",   Макет.ПолучитьОбласть("Значение|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировкиГор",   Макет.ПолучитьОбласть("План|ШапкаГруппы"));

	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("План|Строка"));
	СтруктураПараметров.Вставить("ТабДок",    ДокументРезультат);

	МассивПоказатели=Новый Массив;
	
	Для каждого Показатель Из Показатели Цикл
	
		Если Показатель.Использование Тогда
			МассивПоказатели.Добавить(Показатель.Имя);
		КонецЕсли;
	
	КонецЦикла; 
		
	СтруктураПараметров.Вставить("МассивПоказатели",МассивПоказатели);

	СтруктураПараметров.Вставить("ВсегоГруппировок", 			ВсегоГруппировок);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировок", 	СтруктураВыводГруппировок);

	СтруктураПараметров.Вставить("МассивГруппировки", 	МассивГруппировки);

	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	СтруктураПараметров.Вставить("КопияТаблицаСценарии", КопияТаблицаСценарии);
	СтруктураПараметров.Вставить("ЦветаГруппировок", Новый Структура);

	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СтруктураПараметров.ЦветаГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Цвет(240 - (ПостроительОтчета.ИзмеренияСтроки.Количество() - Сч + 1) * 10, 248, 255));
	КонецЦикла;

	СтруктураПараметров.ЦветаГруппировок.Вставить("ОБЩИЕ", Новый Цвет(255, 248, 255));

	// Наклонный шрифт для групп
	СтруктураПараметров.Вставить("ШрифтГрупп", Новый Шрифт(Макет.Область("Строка|План").Шрифт,,,,Истина));

	// Форматная строка для вывода показателей
	СтруктураПараметров.Вставить("ФорматПоказателей", 			Новый Структура);
	Для Каждого Строка Из Показатели Цикл
		
		Если Строка.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли; 
		
		МетаданныеРесурса = 0;
		ФорматнаяСтрока = "";

		Нстр = мТаблицаПоказатели.Найти(Строка.Имя, "ИмяПоля");
		Если Не (Нстр = Неопределено) Тогда
			ФорматнаяСтрока = НСтр.ФорматнаяСтрока;
		КонецЕсли;

		СтруктураПараметров.ФорматПоказателей.Вставить(Строка.Имя, ФорматнаяСтрока);
	КонецЦикла;

	// Оформление измерений
	ОформлениеСтроки = Новый Массив;

	ОформлениеСтрокиИерархии = Новый Массив;
	
	Если РаскрашиватьИзмерения Тогда

		ТабДокОформлениеИзмерений = Макет.ПолучитьОбласть("ОформлениеИзмерений");
		Для Сч = 1 По ТабДокОформлениеИзмерений.ВысотаТаблицы Цикл

			// Нечетные строки - иерархия, четные - измерения
			Если Сч - Цел(Сч/2)*2 = 1 Тогда

				ОформлениеСтроки.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			Иначе
				ОформлениеСтрокиИерархии.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			КонецЕсли;
							
		КонецЦикла;

	КонецЕсли; 

	// Оформление строк
	СтруктураПараметров.Вставить("ОформлениеСтроки", ОформлениеСтроки);
	СтруктураПараметров.Вставить("ОформлениеСтрокиИерархии", ОформлениеСтрокиИерархии);
	СтруктураПараметров.Вставить("СтруктураФорматаПолей", Новый Структура);
	мГруппировокПоГоризонтали=0;
	мВыведеноПериодов=0;

	// 1. Вывод заголовка отчета
	Для Сч = 1 По 3 Цикл
		Если Сч = 1 Тогда
			Префикс = "Верх";
		ИначеЕсли Сч = 2 Тогда

			// Если нет фильтров, не выводим
			Если ПустаяСтрока(СписокОтбор) Тогда
				Продолжить;
			КонецЕсли;
			Префикс = "Середина";

		ИначеЕсли Сч = 3 Тогда
			Префикс = "Низ";
		КонецЕсли;

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Шапка" + Префикс));

		// Вывод шапки отчета
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Шапка" + Префикс);

		Если Префикс = "Верх" Тогда

			ОбластьЗначение.Параметры.ЗаголовокОтчета = мНазваниеОтчета;
			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,  3).Объединить();

		ИначеЕсли Префикс = "Середина" Тогда

			ОбластьЗначение.Параметры.Фильтры = "Отбор: " + СписокОтбор;
			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,  4).Объединить();

		ИначеЕсли Префикс = "Низ" Тогда

			ОбластьЗначение.Параметры.Группировки="Группировки: " +СписокИзмерений;
			ОбластьЗначение.Параметры.Показатели = "Показатели: " + СписокПоказателей;
			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
			ДокументРезультат.ВысотаТаблицы-1,  4).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,  4).Объединить();

		КонецЕсли;

	КонецЦикла;

	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда

		Возврат;
	
	КонецЕсли; 

	мГруппировокПоГоризонтали=0;
	мВыведеноПериодов=0;
	
	// Выполнение сформированного запроса
	ПостроительОтчета.Выполнить();
	
	Если УправлениеОтчетами.ПроверитьПовторыИзмеренийПостроителя(ПостроительОтчета) = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПостроительОтчета.Результат;

	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаГруппы"));
	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаГруппы");
	ОбластьЗначение.Область(2,1).Текст = ЗаголовокКолонки;

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ВывестиШапку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"НомерСценария","Все"), СтруктураПараметров, "",);

	КоличествоПоказателей = Показатели.Итог("Использование");
	
	Если КоличествоПоказателей>1 Тогда

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаПоказатели"));
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаПоказатели");

		ДокументРезультат.Присоединить(ОбластьЗначение);

		ОбластьПоказатели=Макет.ПолучитьОбласть("План|ШапкаПоказатели");

		Для Индекс=1 по мГруппировокПоГоризонтали Цикл
			Для Каждого Строка Из Показатели Цикл
				Если Строка.Использование Тогда
					ОбластьПоказатели.Параметры.Показатель=Строка.Представление;
					ДокументРезультат.Присоединить(ОбластьПоказатели);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).Объединить();

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

	Иначе

        ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы, 2).Объединить();
		
		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

	КонецЕсли;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;
	ДокументРезультат.ФиксацияСлева = 2;
	
	// Выводим данные начальных остатков по счетам
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Разделитель"));
	ОбластьРазделительНачало   = Макет.ПолучитьОбласть("Значение|Разделитель");
	ОбластьРазделительНачало.Параметры.ИмяРазделителя="Остатки по счетам на начало";

	ДокументРезультат.Присоединить(ОбластьРазделительНачало);
	
	ОбластьРазделитель=Макет.ПолучитьОбласть("План|Разделитель");
	
	Для Индекс=1 по мГруппировокПоГоризонтали Цикл
		Для Каждого Показатель Из МассивПоказатели Цикл
				ДокументРезультат.Присоединить(ОбластьРазделитель);
		КонецЦикла;	
	КонецЦикла;
	
	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2+(мГруппировокПоГоризонтали)*МассивПоказатели.Количество(), 
	ДокументРезультат.ВысотаТаблицы,   2+(мГруппировокПоГоризонтали)*МассивПоказатели.Количество()).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	
	СтруктураВыводГруппировок = Новый Структура;
	МассивГруппировки    = Новый Массив;

	// сдвиг уровня
	СтруктураСдвигУровняГруппировок = Новый Структура;

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	ВсегоГруппировок = 1;
	
	КолГруппировокБезИтогов = 0;
	Массив = Новый Массив;

	СтруктураВыводГруппировок.Вставить("ОБЩИЕ", Новый Массив);
	СтруктураСдвигУровняГруппировок.Вставить("ОБЩИЕ", 0);
	МассивГруппировки.Добавить("ОБЩИЕ");
			
	ПостроительСчета=НастроитьПостроительДляСчетов(ПостроительОтчета.ПолучитьНастройки());
		
	
	Для Сч=0 По ПостроительСчета.ИзмеренияСтроки.Количество()-1 Цикл

		ВсегоГруппировок = ВсегоГруппировок + 1;
		СтруктураСдвигУровняГруппировок.Вставить(ПостроительСчета.ИзмеренияСтроки[Сч].Имя, 0);
		МассивГруппировки.Добавить(ПостроительСчета.ИзмеренияСтроки[Сч].Имя);
		
		СтруктураВыводГруппировок.Вставить(ПостроительСчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);
				
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ВсегоГруппировок", 			ВсегоГруппировок);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировок", 	СтруктураВыводГруппировок);

	СтруктураПараметров.Вставить("МассивГруппировки", 	МассивГруппировки);

	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	СтруктураПараметров.Вставить("ЦветаГруппировок", Новый Структура);
	СтруктураПараметров.Вставить("ТекущийПостфикс", "НачальныйОстаток");
		
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СтруктураПараметров.ЦветаГруппировок.Вставить(ПостроительСчета.ИзмеренияСтроки[Сч].Имя, Новый Цвет(240 - (ПостроительСчета.ИзмеренияСтроки.Количество() - Сч + 1) * 10, 248, 255));
	КонецЦикла;
	
	СтруктураПараметров.ЦветаГруппировок.Вставить("ОБЩИЕ", Новый Цвет(255, 248, 255));
	
	ПостроительСчета.Выполнить();

	РезультатСчета=ПостроительСчета.Результат;
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	Если МассивГруппировки.Количество()>0 Тогда

		ВывестиГруппировку(РезультатСчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировки[0]), СтруктураПараметров, 0, Новый Массив);

	КонецЕсли;

	//////////////////////////////////////////////////////////////////////////////////////
	// Выводим данные оборотов по статьям
	
	
	ПостроительДляСтатей=НастроитьПостроительДляСтатей(ПостроительОтчета.ПолучитьНастройки());
	ПостроительДляСтатей.Выполнить();
	РезультатСтатьи=ПостроительДляСтатей.Результат;
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Разделитель"));
	ОбластьРазделительНачало   = Макет.ПолучитьОбласть("Значение|Разделитель");
	ОбластьРазделительНачало.Параметры.ИмяРазделителя="Обороты по статьям бюджета";

	ДокументРезультат.Присоединить(ОбластьРазделительНачало);
	
	ОбластьРазделитель=Макет.ПолучитьОбласть("План|Разделитель");
	
	Для Индекс=1 по мГруппировокПоГоризонтали Цикл
		Для Каждого Показатель Из МассивПоказатели Цикл
				ДокументРезультат.Присоединить(ОбластьРазделитель);
		КонецЦикла;	
	КонецЦикла;
	
	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2+(мГруппировокПоГоризонтали)*МассивПоказатели.Количество(), 
	ДокументРезультат.ВысотаТаблицы,   2+(мГруппировокПоГоризонтали)*МассивПоказатели.Количество()).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	СтруктураПараметров.Вставить("ТекущийПостфикс", "");
	
	Если МассивГруппировки.Количество()>0 Тогда

		ВывестиГруппировку(РезультатСтатьи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировки[0]), СтруктураПараметров, 0, Новый Массив);

	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	//Выводим конечные остатки по счетам
		
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Разделитель"));
	ОбластьРазделительНачало   = Макет.ПолучитьОбласть("Значение|Разделитель");
	ОбластьРазделительНачало.Параметры.ИмяРазделителя="Остатки по счетам на конец";

	ДокументРезультат.Присоединить(ОбластьРазделительНачало);
	
	ОбластьРазделитель=Макет.ПолучитьОбласть("План|Разделитель");
	
	Для Индекс=1 по мГруппировокПоГоризонтали Цикл
		Для Каждого Показатель Из МассивПоказатели Цикл
				ДокументРезультат.Присоединить(ОбластьРазделитель);
		КонецЦикла;	
	КонецЦикла;
	
	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2+(мГруппировокПоГоризонтали)*МассивПоказатели.Количество(), 
	ДокументРезультат.ВысотаТаблицы,   2+(мГруппировокПоГоризонтали)*МассивПоказатели.Количество()).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	СтруктураПараметров.Вставить("ТекущийПостфикс", "КонечныйОстаток");
	
	Если МассивГруппировки.Количество()>0 Тогда

		ВывестиГруппировку(РезультатСчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировки[0]), СтруктураПараметров, 0, Новый Массив);

	КонецЕсли;
			
	// 4. Вывод подвала отчета
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Подвал"));

	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Подвал");

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьПоказатель = Макет.ПолучитьОбласть("План|Подвал");

	Для Индекс=1 по мГруппировокПоГоризонтали Цикл
		Для Сч=1 По КоличествоПоказателей Цикл
			ДокументРезультат.Присоединить(ОбластьПоказатель);
		КонецЦикла;	
	КонецЦикла;
	
	ДокументРезультат.Область(1, 2, 
			1,  ДокументРезультат.ШиринаТаблицы).Объединить();

	// Управление заголовком
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;
	СтруктураНастроекОтчета.Вставить("ИмяОтчета", мНазваниеОтчета);

	Для Каждого Реквизит Из Метаданные.Отчеты.СравнительныйАнализОборотовПоБюджету.Реквизиты Цикл
		СтруктураНастроекОтчета.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из Метаданные.Отчеты.СравнительныйАнализОборотовПоСтатьямБюджетов.ТабличныеЧасти Цикл
		СтруктураНастроекОтчета.Вставить(ТабличнаяЧасть.Имя, ЭтотОбъект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	ДокументРезультат.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.Автомасштаб=Истина;
	
	//Удаляем добавленные измерения
	
	ИзмерениеСценарий=ПостроительОтчета.ИзмеренияСтроки.Найти("НомерСценария");
	ПостроительОтчета.ИзмеренияСтроки.Удалить(ИзмерениеСценарий);
	
КонецПроцедуры

// Вывод шапки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка				  - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ЗначениеВыборкиДанные - строка, заголовок вертикальной области данных
//
Процедура ВывестиШапку(Выборка, СтруктураПараметров, ЗначениеВыборкиДанные,СтрокаДанныхОтчета)

	КоличествоПоказателей = Показатели.Итог("Использование");

	ОбластьЗначениеГруппировкиГор   = СтруктураПараметров.ЗначениеГруппировкиГор;
	ТабДок = СтруктураПараметров.ТабДок;

	ОбработкаПрерыванияПользователя();
	ВыведеноСценариев=0;

	Пока Выборка.Следующий() Цикл

		Если Выборка.Группировка()="НомерСценария" Тогда

			мСоответствиеНомера.Вставить(ВыведеноСценариев,Выборка["НомерСценария"]);
			
			СтрокаДанныхОтчета = СтруктураПараметров.КопияТаблицаСценарии[Выборка["НомерСценария"]];

			ЗначениеВыборкиДанные = СтрокаДанныхОтчета.ТекстПараметра;

			ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиДанные=ЗначениеВыборкиДанные;
			ОбластьЗначениеГруппировкиГор.Параметры.РасшифровкаДанные=Новый Структура("Сценарий,ДатаНач,ДатаКон",
																		СтрокаДанныхОтчета.Сценарий,
																		СтрокаДанныхОтчета.ДатаНач,
																		СтрокаДанныхОтчета.ДатаКон);
			ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиПериоды="Итого";

			Для Сч=1 По КоличествоПоказателей Цикл
				ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
			КонецЦикла;

			ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-КоличествоПоказателей+1, 
			ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

			мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
			мВыведеноПериодов=мВыведеноПериодов+1;

			Если НЕ СтрокаДанныхОтчета.Эталон Тогда

				Если ВыводитьАбсолютныеОтклонения Тогда

					ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиПериоды="Отклонение, абс.";

					Для Сч=1 По КоличествоПоказателей Цикл
						ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
					КонецЦикла;

					ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-КоличествоПоказателей+1, 
					ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

					мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
					мВыведеноПериодов=мВыведеноПериодов+1;

				КонецЕсли;

				Если ВыводитьОтносительныеОтклонения Тогда

					ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиПериоды="Отклонение, %";

					Для Сч=1 По КоличествоПоказателей Цикл
						ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
					КонецЦикла;

					ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-КоличествоПоказателей+1, 
					ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

					мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
					мВыведеноПериодов=мВыведеноПериодов+1;

				КонецЕсли;

			КонецЕсли;

			ТабДок.Область(ТабДок.ВысотаТаблицы-1, ТабДок.ШиринаТаблицы-мВыведеноПериодов*КоличествоПоказателей+1, 
			ТабДок.ВысотаТаблицы-1,  ТабДок.ШиринаТаблицы).Объединить();

			мВыведеноПериодов=0;
			ВыведеноСценариев=ВыведеноСценариев+1;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ВывестиШапку()

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка               - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ТабДок				  - табличный документ
//	Номер		          - число, номер обходимой группировки
//	МассивПредставленийГруппировок - массив, хранящий представления группировок
//
Процедура РазвернутьСтроку (Выборка, СтруктураПараметров,ТабДок,Номер,МассивПредставленийГруппировок)

	МассивВыводГруппировок=Новый Массив;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;
	ТекущийПостфикс=СтруктураПараметров.ТекущийПостфикс;

	//Структура для значений эталонных данных

	СтруктураЭталон=Новый Структура;
	ЗначениеЭталон=0;

	Пока Выборка.Следующий() Цикл

		Если Выборка.Группировка()="НомерСценария" Тогда

			СтрокаДанныхОтчета = СтруктураПараметров.КопияТаблицаСценарии[Выборка["НомерСценария"]];
			
			МассивПредставленийГруппировок.Добавить(СтрокаДанныхОтчета.ТекстПараметра);
			
		Иначе
			
			МассивПредставленийГруппировок.Добавить(Выборка["Период"]);

		КонецЕсли;
				
		Если Выборка.Группировка()="НомерСценария" Тогда

			НомерКолонки=1;

			// Строка с параметрами выводимых данных
			СтрокаДанныхОтчета = СтруктураПараметров.КопияТаблицаСценарии[Выборка["НомерСценария"]];

			Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

				ФорматПоказателя = "ЧЦ = 15; ЧДЦ = 2";

				Если НЕ ТекущийПостфикс="" Тогда
					
					ЗначениеДт=?(ПустаяСтрока(Выборка[Имя+ТекущийПостфикс+"Дт_"+мВыведеноПериодов]),0,Выборка[Имя+ТекущийПостфикс+"Дт_"+мСоответствиеНомера[мВыведеноПериодов]]);
					ЗначениеКт=?(ПустаяСтрока(Выборка[Имя+ТекущийПостфикс+"Кт_"+мВыведеноПериодов]),0,Выборка[Имя+ТекущийПостфикс+"Кт_"+мСоответствиеНомера[мВыведеноПериодов]]);
					
					ТекущееЗначение=ЗначениеДт-ЗначениеКт;
					
				Иначе
				
				ТекущееЗначение=?(ПустаяСтрока(Выборка[Имя+"_"+мВыведеноПериодов]),0,Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]);

				КонецЕсли;
				
				Если НомерКолонки=1 Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				КонецЕсли;

				Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
					Если (НомерКолонки>1) Тогда
						ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
					КонецЕсли;
				КонецЕсли;

				Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				КонецЕсли;

				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(ТекущееЗначение, ФорматПоказателя);
				ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";

				ТабДок.Присоединить(ОбластьЗначенияПоказателя);

				Если СтрокаДанныхОтчета.Эталон Тогда

					СтруктураЭталон.Вставить(Имя+ТекущийПостфикс+"_0",ТекущееЗначение);

				КонецЕсли;

				НомерКолонки=НомерКолонки+1;

			КонецЦикла;

			Если НЕ СтрокаДанныхОтчета.Эталон Тогда

				Если ВыводитьАбсолютныеОтклонения Тогда

					НомерКолонки=1;

					Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

						ФорматПоказателя = "ЧЦ = 15; ЧДЦ = 2";

						Если НЕ СтруктураЭталон.Свойство(Имя+ТекущийПостфикс+"_0", ЗначениеЭталон) Тогда
							ЗначениеЭталон=0;
						КонецЕсли;

						Если НЕ ТекущийПостфикс="" Тогда
							
							ЗначениеДт=?(ПустаяСтрока(Выборка[Имя+ТекущийПостфикс+"Дт_"+мСоответствиеНомера[мВыведеноПериодов]]),0,Выборка[Имя+ТекущийПостфикс+"Дт_"+мСоответствиеНомера[мВыведеноПериодов]]);
							ЗначениеКт=?(ПустаяСтрока(Выборка[Имя+ТекущийПостфикс+"Кт_"+мСоответствиеНомера[мВыведеноПериодов]]),0,Выборка[Имя+ТекущийПостфикс+"Кт_"+мСоответствиеНомера[мВыведеноПериодов]]);
							
							ТекущиеДанные=ЗначениеДт-ЗначениеКт;
							
						Иначе
							
							ТекущиеДанные =?(ПустаяСтрока(Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]),0,Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]);
							
						КонецЕсли;
						
						Если НомерКолонки=1 Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							Если (НомерКолонки>1) Тогда
								ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							КонецЕсли;
						КонецЕсли;

						Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат((ТекущиеДанные-ЗначениеЭталон), ФорматПоказателя);

						ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";

						ТабДок.Присоединить(ОбластьЗначенияПоказателя);

						НомерКолонки=НомерКолонки+1;

					КонецЦикла;

				КонецЕсли;

				Если ВыводитьОтносительныеОтклонения Тогда

					НомерКолонки=1;

					Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

						ФорматПоказателя = "ЧЦ = 15; ЧДЦ = 2";

						Если НЕ СтруктураЭталон.Свойство(Имя+ТекущийПостфикс+"_0", ЗначениеЭталон) Тогда
							ЗначениеЭталон=0;
						КонецЕсли;
						
						Если НЕ ТекущийПостфикс="" Тогда
							
							ЗначениеДт=?(ПустаяСтрока(Выборка[Имя+ТекущийПостфикс+"Дт_"+мСоответствиеНомера[мВыведеноПериодов]]),0,Выборка[Имя+ТекущийПостфикс+"Дт_"+мСоответствиеНомера[мВыведеноПериодов]]);
							ЗначениеКт=?(ПустаяСтрока(Выборка[Имя+ТекущийПостфикс+"Кт_"+мСоответствиеНомера[мВыведеноПериодов]]),0,Выборка[Имя+ТекущийПостфикс+"Кт_"+мСоответствиеНомера[мВыведеноПериодов]]);
							
							ТекущиеДанные=ЗначениеДт-ЗначениеКт;
							
						Иначе
							
							ТекущиеДанные =?(ПустаяСтрока(Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]),0,Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]);
							
						КонецЕсли;

						Процент=?(ЗначениеЭталон=0,?(ТекущиеДанные=0,0,-1),(ТекущиеДанные-ЗначениеЭталон)/ЗначениеЭталон)*100;
						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(Процент, ФорматПоказателя);

						Если НомерКолонки=1 Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							Если (НомерКолонки>1) Тогда
								ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							КонецЕсли;
						КонецЕсли;

						Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;
						ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";
	
						ТабДок.Присоединить(ОбластьЗначенияПоказателя);

						НомерКолонки=НомерКолонки+1;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

			мВыведеноПериодов=мВыведеноПериодов+1;

		КонецЕсли;

		Если МассивПредставленийГруппировок.Количество()>1 Тогда
			МассивПредставленийГруппировок.Удалить(МассивПредставленийГруппировок.Количество()-1);
		Иначе
			МассивПредставленийГруппировок= Новый Массив;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Создает бюджетную операцию по параметрам расшифровки
//
Процедура СоздатьОперацию(Расшифровка, ЭтотОтчет)
	
	Если НЕ ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НоваяОперация=Документы.БюджетнаяОперация.СоздатьДокумент();
	НоваяОперация.Сценарий=Расшифровка.Сценарий;
	
	Если Расшифровка.Свойство("ЦФО") И ТипЗнч(Расшифровка.ЦФО)=Тип("СправочникСсылка.Подразделения") И НЕ Расшифровка.ЦФО.ЭтоГруппа Тогда
		НоваяОперация.ЦФО=Расшифровка.ЦФО;
	КонецЕсли;
	
	Если Расшифровка.Свойство("СтатьяОборотов") Тогда
		Если Расшифровка.СтатьяОборотов.Количество()=1 Тогда
			НоваяОперация.СтатьяОборотов=Расшифровка.СтатьяОборотов[0].Значение;
		Иначе
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	СтатьиОборотовПоБюджетам.Ссылка КАК СтатьяОборотов,
			| СтатьиОборотовПоБюджетам.Наименование КАК СтатьяОборотовНаименование
			|ИЗ
			|	Справочник.СтатьиОборотовПоБюджетам КАК СтатьиОборотовПоБюджетам
			|ГДЕ
			|	(НЕ СтатьиОборотовПоБюджетам.ЭтоГруппа)
			|	И СтатьиОборотовПоБюджетам.Ссылка В ИЕРАРХИИ(&СписокСтатей)";
			
			Запрос.УстановитьПараметр("СписокСтатей",Расшифровка.СтатьяОборотов);
			
			ТабСтатей=Запрос.Выполнить().Выгрузить();
			
			СписокСтатей=Новый СписокЗначений;
			
			Для Каждого Статья ИЗ ТабСтатей Цикл
				
				СписокСтатей.Добавить(Статья.СтатьяОборотов,Статья.СтатьяОборотовНаименование);
				
			КонецЦикла;
			
			Если СписокСтатей.Количество()>0 Тогда
				СтатьяОборотов = СписокСтатей.ВыбратьЭлемент("Выберите статью оборотов", СписокСтатей[СписокСтатей.Количество()-1]);
				
				Если Не СтатьяОборотов=Неопределено Тогда
					НоваяОперация.СтатьяОборотов=СтатьяОборотов.Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Расшифровка.Свойство("СтатьяБаланса") Тогда
		
		// Определим список статей, влияющих на выбранную статью баланса
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|				СтатьиШаблоныПроводок.Ссылка КАК СтатьяОборотов,
		|				СтатьиШаблоныПроводок.Ссылка.Наименование КАК СтатьяОборотовНаименование
		|			ИЗ
		|				Справочник.СтатьиОборотовПоБюджетам.ШаблоныПроводок КАК СтатьиШаблоныПроводок
		|			
		|			ГДЕ
		|				((СтатьиШаблоныПроводок.СчетДт В ИЕРАРХИИ(&СтатьяБаланса)) И НЕ (СтатьиШаблоныПроводок.СчетКт В ИЕРАРХИИ(&СтатьяБаланса)))
		|				ИЛИ((СтатьиШаблоныПроводок.СчетКт В ИЕРАРХИИ(&СтатьяБаланса)) И НЕ (СтатьиШаблоныПроводок.СчетДт В ИЕРАРХИИ(&СтатьяБаланса)))";
		
		Запрос.УстановитьПараметр("СтатьяБаланса",Расшифровка.СтатьяБаланса);
		ТабСтатей=Запрос.Выполнить().Выгрузить();
		
		СписокСтатей=Новый СписокЗначений;
		
		Для Каждого Статья ИЗ ТабСтатей Цикл
			
			СписокСтатей.Добавить(Статья.СтатьяОборотов,Статья.СтатьяОборотовНаименование);
			
		КонецЦикла;
		
		Если СписокСтатей.Количество()=0 Тогда
			Сообщить("Нет статей, изменяющих счет "+ Расшифровка.Счет);
			Возврат;
		КонецЕсли;
		
		СтатьяОборотов = СписокСтатей.ВыбратьЭлемент("Выберите статью оборотов", СписокСтатей[СписокСтатей.Количество()-1]);
		
		Если Не СтатьяОборотов=Неопределено Тогда
			НоваяОперация.СтатьяОборотов=СтатьяОборотов.Значение;
		КонецЕсли;
					
	КонецЕсли;
	
	Если Расшифровка.Свойство("Проект") И ТипЗнч(Расшифровка.Проект)=Тип("СправочникСсылка.Проекты") И НЕ Расшифровка.Проект.ЭтоГруппа Тогда
		НоваяОперация.Проект=Расшифровка.Проект;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Контрагент") И ТипЗнч(Расшифровка.Контрагент)=Тип("СправочникСсылка.Контрагенты") И НЕ Расшифровка.Контрагент.ЭтоГруппа Тогда
		НоваяОперация.Контрагент=Расшифровка.Контрагент;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Номенклатура") 
		И НЕ Расшифровка.Номенклатура=Неопределено 
		И (ТипЗнч(Расшифровка.Номенклатура)=Тип("СправочникСсылка.Номенклатура") ИЛИ ТипЗнч(Расшифровка.Номенклатура)=Тип("СправочникСсылка.НоменклатурныеГруппы"))
		И НЕ Расшифровка.Номенклатура.ЭтоГруппа Тогда
		НоваяОперация.Номенклатура=Расшифровка.Номенклатура;
	ИначеЕсли НоваяОперация.Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.Номенклатура Тогда
		НоваяОперация.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
	ИначеЕсли НоваяОперация.Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		НоваяОперация.Номенклатура=Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	КонецЕсли;
		
	ПериодПланирования=Расшифровка.ДатаКон;
	
	Для Каждого Элемент Из Расшифровка Цикл
		Если Найти(Элемент.Ключ,"Период")>0 Тогда
			ПериодПланирования = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Расшифровка.Свойство("Период") Тогда
			
		ПериодПланирования = Расшифровка.Период;
			
	КонецЕсли;
	
	НоваяОперация.ПериодПланирования=ОбщегоНазначения.ДатаНачалаПериода(ПериодПланирования,Расшифровка.Сценарий.Периодичность);
	
	НоваяОперация.Дата=РабочаяДата;
	НоваяОперация.УстановитьВремя(АвтоВремя.ТекущееИлиПоследним);
			
	ФормаОперации=НоваяОперация.ПолучитьФорму("ФормаДокумента");
	ФормаОперации.ОткрытьМодально();
	
	Если НоваяОперация.Проведен Тогда
		ЭтотОтчет.ПолучитьФорму().ОбновитьТаблицуОтчета();
	КонецЕсли;

	
КонецПроцедуры // СоздатьОперацию()

//Настраивает копию текущего отчета
//
Процедура РасшифровкаДвижений(Расшифровка,ЭтотОтчет,Выбор)
	
	// Настройка отчета
	Отчет = Отчеты.ОборотыПоСтатьямБюджетов.Создать();
	Параметры = Новый Соответствие;
	
	Параметры.Вставить("Сценарий", Расшифровка.Сценарий);
	
	Если Расшифровка.Сценарий=Справочники.СценарииПланирования.ПустаяСсылка() Тогда
		Параметры.Вставить("ВидДанныхОтчета", Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.ФактическиеДанныеБюджетирование);
	Иначе
		Параметры.Вставить("ВидДанныхОтчета", Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.Сценарий);
	КонецЕсли;	
		
	Если Расшифровка.Свойство("СтатьяБаланса") Тогда
		Параметры.Вставить("СтатьяБаланса",Расшифровка.СтатьяБаланса);
	КонецЕсли;
	
	ДатаНач=Расшифровка.ДатаНач;
	ДатаКон=Расшифровка.ДатаКон;
	
	Для Каждого Элемент Из Расшифровка Цикл
		Если Найти(Элемент.Ключ,"Период")>0 Тогда
			ДатаНач = ОбщегоНазначения.ДатаНачалаПериода(Элемент.Значение,Периодичность);
			ДатаКон = ОбщегоНазначения.ДатаКонцаПериода(Элемент.Значение,Периодичность);
		КонецЕсли;
	КонецЦикла; 
	
	Параметры.Вставить("ДатаНач", ДатаНач);
	Параметры.Вставить("ДатаКон", ДатаКон);
	
	ИсходныйОтчет = ЭтотОтчет;
	
	// Переносимые свойства
	Параметры.Вставить("РаскрашиватьИзмерения", РаскрашиватьИзмерения);
	Параметры.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
	
	// Перенос табличных частей части
	Параметры.Вставить("Показатели", Показатели.Выгрузить());
	
	Отчет.Настроить(Параметры);
	
	Форма = Отчет.ПолучитьОсновнуюФорму();
	
	ПостроительОтчета.НастроитьРасшифровку(Отчет.ПолучитьПостроительОтчета(), Расшифровка);
	
	Если Расшифровка.Свойство("СтатьяОборотов") Тогда
		
		ОтборСтатья=Отчет.ПолучитьПостроительОтчета().Отбор["СтатьяОборотов"];
		
		ОтборСтатья.ВидСравнения=ВидСравнения.ВСпискеПоИерархии;
		ОтборСтатья.Значение=Расшифровка.СтатьяОборотов;
		
	КонецЕсли;
			
	// Добавим измерения из расшифровываемого отчета
	МассивДобавленныеИзмерения = Новый Массив;
	
	ТабОтбор = Новый ТаблицаЗначений;
	ТабОтбор.Колонки.Добавить("Имя");
	ТабОтбор.Колонки.Добавить("ВидСравнения");
	ТабОтбор.Колонки.Добавить("Значение");
	
	Для каждого Элемент Из Отчет.ПолучитьПостроительОтчета().Отбор Цикл
		
		Если Элемент.Использование Тогда
						
			НоваяСтрока = ТабОтбор.Добавить();
			НоваяСтрока.Имя = Элемент.Имя;
			НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
			НоваяСтрока.Значение = Элемент.Значение;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		Если ПостроительОтчета.ИзмеренияСтроки[Инд].Имя="НомерСценария" ИЛИ ПостроительОтчета.ИзмеренияСтроки[Инд].Имя="Период" 
			ИЛИ ПостроительОтчета.ИзмеренияСтроки[Инд].Имя="СтрокаБюджета" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Имя",ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);
		
		НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);
		
		// Измерение не нужно добавлять, если в нем заведомо будет один элемент
		НеДобавлятьИзмерение = Ложь;
		
		Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл
			
			// Не добавляем измерения по отборам на равенство - в них будет один элемент
			Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
				
				НеДобавлятьИзмерение = Истина;
				Прервать;
				
				// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
				// или плана видов характеристик - в них будет один элемент
			ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
				ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
				
				Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
					ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;
					
					МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));
					
					Если МетаданныеОбъекта<>Неопределено Тогда
						Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
							ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда
							
							Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда
								
								НеДобавлятьИзмерение = Истина;
								Прервать;
								
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли; 
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НеДобавлятьИзмерение Тогда
			
			// Удалим также и предыдущие измерения
			Для каждого ПредыдущееИзмерение Из МассивДобавленныеИзмерения Цикл
				
				Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Удалить(ПредыдущееИзмерение);
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		// Добавляем новое измерение и запоминаем его в массиве
			
		МассивДобавленныеИзмерения.Добавить(Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным,
		ПостроительОтчета.ИзмеренияСтроки[Инд].Имя,
		ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения));
	КонецЦикла;
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
		Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным,
		ПостроительОтчета.ИзмеренияКолонки[Инд].Имя,
		ПостроительОтчета.ИзмеренияКолонки[Инд].ТипИзмерения)
	КонецЦикла;
	
	// Текущий отчет с детальными записями по документам
	Если Выбор.Значение = 0 Тогда
		Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Очистить();
		Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Очистить();
	
		Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить("СтатьяОборотов", "СтатьяОборотов");
		Отчет.ПолучитьПостроительОтчета().ВыбранныеПоля.Добавить("Регистратор");
		
		Форма.ОбновитьТаблицуОтчета();
		
	ИначеЕсли Выбор.Значение=-1 Тогда
		
		Отчет.ПолучитьПостроительОтчета().ВыбранныеПоля.Добавить("СтатьяОборотов");
		Форма.ОбновитьТаблицуОтчета();
		
	КонецЕсли;
	
	Форма.неВосстанавливатьНастройку=Истина;
	Форма.Открыть();
	
КонецПроцедуры // РасшифровкаДвижений ()

//Настраивает копию текущего отчета
//
Процедура РасшифровкаСравнениемПоОборотам(Расшифровка,ЭтотОтчет,ЗначениеВыбора)
	
	// Настройка отчета
		Отчет = Отчеты.СравнительныйАнализОборотовПоСтатьямБюджетов.Создать();
		Параметры = Новый Соответствие;
			
		ИсходныйОтчет = ЭтотОтчет;

		// Переносимые свойства
		Параметры.Вставить("ВыводитьАбсолютныеОтклонения",     ВыводитьАбсолютныеОтклонения);
		Параметры.Вставить("ВыводитьОтносительныеОтклонения", ВыводитьОтносительныеОтклонения);
		Параметры.Вставить("РаскрашиватьИзмерения", РаскрашиватьИзмерения);
		Параметры.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
		Параметры.Вставить("Периодичность",   Периодичность);
		
		//Параметры.Вставить("ВыводитьДетальныеЗаписи", ВыводитьДетальныеЗаписи);
		// Перенос табличных частей части
		Параметры.Вставить("Показатели", Показатели.Выгрузить());
		Параметры.Вставить("ТаблицаСценарии", ТаблицаСценарии.Выгрузить());
		
		Если Расшифровка.Свойство("СтатьяБаланса") Тогда
			Параметры.Вставить("СтатьяБаланса",Расшифровка.СтатьяБаланса);
		КонецЕсли;
		
		Отчет.Настроить(Параметры);
		
		Форма = Отчет.ПолучитьОсновнуюФорму();
		
		ПостроительОтчета.НастроитьРасшифровку(Отчет.ПолучитьПостроительОтчета(), Расшифровка);
		
		Если Расшифровка.Свойство("СтатьяОборотов") Тогда
			
			ОтборСтатья=Отчет.ПолучитьПостроительОтчета().Отбор["СтатьяОборотов"];
			
			ОтборСтатья.ВидСравнения=ВидСравнения.ВСпискеПоИерархии;
			ОтборСтатья.Значение=Расшифровка.СтатьяОборотов;
			
		КонецЕсли;

		// Добавим измерения из расшифровываемого отчета
		МассивДобавленныеИзмерения = Новый Массив;

		ТабОтбор = Новый ТаблицаЗначений;
		ТабОтбор.Колонки.Добавить("Имя");
		ТабОтбор.Колонки.Добавить("ВидСравнения");
		ТабОтбор.Колонки.Добавить("Значение");

		Для каждого Элемент Из Отчет.ПолучитьПостроительОтчета().Отбор Цикл

			Если Элемент.Использование Тогда

				НоваяСтрока = ТабОтбор.Добавить();
				НоваяСтрока.Имя = Элемент.Имя;
				НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
				НоваяСтрока.Значение = Элемент.Значение;

			КонецЕсли;

		КонецЦикла;
		
		// Отчет с дополнительным измерением
		Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить("СтатьяОборотов", "СтатьяОборотов");

		Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
			
			Если ПостроительОтчета.ИзмеренияСтроки[Инд].Имя="СтрокаБюджета" Тогда
				Продолжить;
			КонецЕсли;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя",ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);

			НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);

			// Измерение не нужно добавлять, если в нем заведомо будет один элемент
			НеДобавлятьИзмерение = Ложь;

			Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл

				// Не добавляем измерения по отборам на равенство - в них будет один элемент
				Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда

					НеДобавлятьИзмерение = Истина;
					Прервать;

					// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
					// или плана видов характеристик - в них будет один элемент
				ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
					ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда

					Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
						ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;

						МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));

						Если МетаданныеОбъекта<>Неопределено Тогда
							Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
								ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда

								Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда

									НеДобавлятьИзмерение = Истина;
									Прервать;

								КонецЕсли; 
							КонецЕсли; 
						КонецЕсли; 

					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

			Если НеДобавлятьИзмерение Тогда

				// Удалим также и предыдущие измерения
				Для каждого ПредыдущееИзмерение Из МассивДобавленныеИзмерения Цикл

					Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Удалить(ПредыдущееИзмерение);

				КонецЦикла;

				Продолжить;

			КонецЕсли;

			// Добавляем новое измерение и запоминаем его в массиве
			МассивДобавленныеИзмерения.Добавить(Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияСтроки[Инд].Имя,
			ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения));
		КонецЦикла;

		Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
			Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияКолонки[Инд].Имя,
			ПостроительОтчета.ИзмеренияКолонки[Инд].ТипИзмерения)
		КонецЦикла;
		
		Если НЕ ЗначениеВыбора=-1 Тогда
			
			Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ЗначениеВыбора, ЗначениеВыбора);
			
		КонецЕсли;
		
		Форма.ОбновитьТаблицуОтчета();
		
		Форма.неВосстанавливатьНастройку=Истина;	
		Форма.Открыть();
		
КонецПроцедуры // РасшифровкаТекущимОтчетом (Расшифровка)


// Расшифровывает отчеты, реализуемые при помощи данного
//
// Параметры:
//	Расшифровка           - Структура, значение расшифровки, взятое из табличного документа, и, в случае надобности, дополненное
//	СтандартнаяОбраьотка  - Флаг стандартной обработки расшифровки
//	ЭтотОтчет             - Контекст, из которого происходит вызов. Позволяет определить, как именно расшифровывать.
//
Процедура ОбработкаРасшифровкиОтчетаБюджетирования(Расшифровка, СтандартнаяОбработка, ЭтотОтчет) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;

		СписокВыбора = Новый СписокЗначений;

		ДоступныеИзмерения = Новый Соответствие;

		Для ДП = 0 По ПостроительОтчета.ДоступныеПоля.Количество() - 1 Цикл
			Поле = ПостроительОтчета.ДоступныеПоля[ДП];
			Если Поле.Измерение Тогда
				ДоступныеИзмерения.Вставить(Поле.Имя, Поле.Представление);
			КонецЕсли;
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияСтроки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияКолонки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		ИмяДобавляемогоИзмерения = "";
		ПредставлениеДобавляемогоИзмерения = "";
		Если ДоступныеИзмерения.Количество() > 0 Тогда
			Для Каждого ДИ ИЗ ДоступныеИзмерения Цикл
				
				Если НЕ ДИ.Ключ="НомерСценария" Тогда 
				
				СписокВыбора.Добавить(ДИ.Ключ, ДИ.Значение);
				ИмяДобавляемогоИзмерения = ДИ.Ключ;
				ПредставлениеДобавляемогоИзмерения = ДИ.Значение;
				
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;

		СписокВыбора.СортироватьПоПредставлению();
 
		СписокВыбора.Добавить(0, "По документам движения");

		СписокВыбора.Добавить(-1, "Обороты по статьям");
			
		СписокВыбора.Добавить(-2,"Ввести бюджетную операцию");

		Выбор = СписокВыбора.ВыбратьЭлемент("Выберите действие", СписокВыбора[СписокВыбора.Количество()-1]);

		Если Выбор = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Выбор.Значение=-2 Тогда
			
			СоздатьОперацию(Расшифровка,ЭтотОтчет);
			
		ИначеЕсли Выбор.Значение=0 Тогда
			
			РасшифровкаДвижений(Расшифровка,ЭтотОтчет,Выбор);
			
		Иначе
			
			РасшифровкаСравнениемПоОборотам(Расшифровка,ЭтотОтчет,Выбор.Значение);
			
		КонецЕсли;
						
	КонецЕсли;
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ПостроительОтчета;

КонецФункции // ПолучитьПостроительОтчета()

	// Настраивает отчет для параметрического вызова
//
// Параметры
//  СтруктураПараметров  – Структура, Соответствие – содержит список параметров:
//	ДатаНач,
//	ДатаКон,
//	ИмяРегистра,
//	ЗаполнитьПоУмолчанию,
//	ПоказыватьЗаголовок,
//	ВыводитьПоказателиВСтроку,
//	ВыводитьИтогиПоВсемУровням,
//	ВыводитьДополнительныеПолявОтдельнойКолонке,
//	РаскрашиватьИзмерения
//	ГруппировкиСтрок  - структура или соответсвие,
//	ГруппировкиКолонок- структура или соответствие,
//	Показатели - таблица значений,
//	Отбор - структура или соответсвие
//
Процедура Настроить(СтруктураПараметров, ЗаполняемыйОбъект = Неопределено) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
		
	// Прочие свойства
	Периодичность       = Параметры["Периодичность"];
	ВыводитьАбсолютныеОтклонения  = Параметры["ВыводитьАбсолютныеОтклонения"];
	ВыводитьОтносительныеОтклонения = Параметры["ВыводитьОтносительныеОтклонения"];
	РаскрашиватьИзмерения = Параметры["РаскрашиватьИзмерения"];
	ПоказыватьЗаголовок      = Параметры["ПоказыватьЗаголовок"];
	Бюджет      = Параметры["Бюджет"];
	ВыводитьНулевыеСтроки= Параметры["ВыводитьНулевыеСтроки"];
	
	ТаблицаСценарии.Загрузить(Параметры["ТаблицаСценарии"]);
	
	Если ЗаполняемыйОбъект = Неопределено Тогда
		ЗаполняемыйОбъект = ЭтотОбъект;
	КонецЕсли;
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
	Иначе
		
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
		ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ПостроительОтчета.ИзмеренияКолонки.Очистить();
		ПостроительОтчета.ВыбранныеПоля.Очистить();

		Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
			ПостроительОтчета.Отбор.Удалить(0);
		КонецЦикла; 
		
		// Группировки строк
		
		ГруппировкиСтрок = Параметры["ГруппировкиСтрок"];
		Если ТипЗнч(ГруппировкиСтрок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиСтрок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияСтроки.Очистить();
			
			Для каждого Строка Из ГруппировкиСтрок Цикл
				
				ПостроительОтчета.ИзмеренияСтроки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Группировки колонок
		
		ГруппировкиКолонок = Параметры["ГруппировкиКолонок"];
		Если ТипЗнч(ГруппировкиКолонок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиКолонок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияКолонки.Очистить();
			
			Для каждого Строка Из ГруппировкиКолонок Цикл
				
				ПостроительОтчета.ИзмеренияКолонки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Показатели: флажки использования
		
		ТаблицаПоказатели = Параметры["Показатели"];
		Если ТипЗнч(ТаблицаПоказатели) = Тип("ТаблицаЗначений") 
			И ТаблицаПоказатели.Колонки.Найти("Имя")<>Неопределено
			И ТаблицаПоказатели.Колонки.Найти("Использование")<>Неопределено Тогда
			
			Для Каждого Строка Из Показатели Цикл
				
				НайдСтрока = ТаблицаПоказатели.Найти(Строка.Имя, "Имя");
				Если НайдСтрока<>Неопределено Тогда
					Строка.Использование = НайдСтрока.Использование;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	
	// Выбранные поля
	
	ВыбранныеПоля = Параметры["ВыбранныеПоля"];
	Если ТипЗнч(ВыбранныеПоля) = Тип("Соответствие")
		ИЛИ ТипЗнч(ВыбранныеПоля) = Тип("Структура") Тогда
		
		ПостроительОтчета.ВыбранныеПоля.Очистить();
		
		Для каждого Строка Из ВыбранныеПоля Цикл
		
			ПостроительОтчета.ВыбранныеПоля.Добавить(Строка.Ключ);
		
		КонецЦикла; 
		
	КонецЕсли;
	
	// Отбор, заданный списком
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
			ПостроительОтчета.Отбор.Удалить(0);
		КонецЦикла; 

		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

мЗначимыеГруппировкиГор=Новый ("СписокЗначений");
мСоответствиеНомера=Новый Соответствие;

#КонецЕсли




