#Если Клиент Тогда
// Все возможные показатели
Перем мТаблицаПоказатели Экспорт;

Перем мНазваниеОтчета Экспорт;
Перем мНаДату Экспорт;

// Счетчик выведенных в отчет периодов
Перем мВыведеноПериодов;

// Количество группировок в выводе по горизонтали
Перем мГруппировокПоГоризонтали;

// Группировки, выводимые в отчет по горизонтали
Перем мЗначимыеГруппировкиГор;

Перем КопияТаблицаСценарии;

// Соответствие выводимого периода чмсловой выборке
Перем мСоответствиеНомера;


  // Формирует текст отбора данных по строке ТЧ "ТаблицаСценарии"
  //
  // Параметры
  //  СтрокаСценарий( строка табличной части): строка ТЧ "ТаблицаСценарии", для которой
  // 	формируется текст запроса;
  // СтруктураПараметров (структура): структура, в которой хранятся згачения параметров для 
  //	основного запроса
   // Возвращаемое значение:
  //   ТекстЗапроса(текст)- текст отбора данных по строке ТЧ "ТаблицаСценарии"
  //
  Функция ТекстЗапросаПоСценарию(СтрокаСценарий,СтруктураПараметров,Номер, СтруктураГруппировки)
  	  
	ТекстЗапроса="
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	&ПараметрНомерСценария_"+Номер+" КАК НомерСценария,
	|	БюджетированиеОстатки.Счет КАК Счет,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""ЦФО"" ТОГДА БюджетированиеОстатки.Субконто1 
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""ЦФО"" ТОГДА БюджетированиеОстатки.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""ЦФО"" ТОГДА БюджетированиеОстатки.Субконто3
	|			ИНАЧЕ &НеУказано КОНЕЦ КАК ЦФО,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Проекты"" ТОГДА БюджетированиеОстатки.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Проекты"" ТОГДА БюджетированиеОстатки.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Проекты"" ТОГДА БюджетированиеОстатки.Субконто3
	|			ИНАЧЕ &НеУказано КОНЕЦ КАК Проект,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА БюджетированиеОстатки.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА БюджетированиеОстатки.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА БюджетированиеОстатки.Субконто3
	|			ИНАЧЕ &НеУказано КОНЕЦ КАК Контрагент,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА БюджетированиеОстатки.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА БюджетированиеОстатки.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА БюджетированиеОстатки.Субконто3
	|			ИНАЧЕ &НеУказано КОНЕЦ КАК Номенклатура,
	|	БюджетированиеОстатки.Валюта КАК Валюта";
	
	Для Каждого СтрокаПоказатели Из Показатели Цикл
		
		Если Не СтрокаПоказатели.Использование Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Для Индекс=0 По ТаблицаСценарии.Количество()-1 Цикл
			
			Если Номер = Индекс Тогда
				
				ТекстЗапроса = ТекстЗапроса + ",
				|	СУММА("+СтрокаПоказатели.Имя+"Остаток) КАК " + СтрокаПоказатели.Имя+"_"+Индекс;
				
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
				|0 КАК " + СтрокаПоказатели.Имя +"_"+Индекс;	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	ТекстЗапроса=ТекстЗапроса+"
	|ИЗ
	|	РегистрБухгалтерии.Бюджетирование.Остатки(&ДатаКон_"+Номер+", , , Сценарий = &Сценарий_"+Номер+") КАК БюджетированиеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Бюджетирование.Ссылка КАК Ссылка,
	|			Бюджетирование.Валютный КАК Валютный,
	|			Бюджетирование.Количественный КАК Количественный,
	|			БюджетированиеВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	|			БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	|			БюджетированиеВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	|			БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	|			БюджетированиеВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	|			БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3
	|		ИЗ
	|			ПланСчетов.Бюджетирование КАК Бюджетирование
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)) КАК ВложенныйЗапрос
	|		ПО БюджетированиеОстатки.Счет = ВложенныйЗапрос.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	БюджетированиеОстатки.Счет,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""ЦФО"" ТОГДА БюджетированиеОстатки.Субконто1 
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""ЦФО"" ТОГДА БюджетированиеОстатки.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""ЦФО"" ТОГДА БюджетированиеОстатки.Субконто3
	|			ИНАЧЕ &НеУказано КОНЕЦ,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Проекты"" ТОГДА БюджетированиеОстатки.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Проекты"" ТОГДА БюджетированиеОстатки.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Проекты"" ТОГДА БюджетированиеОстатки.Субконто3
	|			ИНАЧЕ &НеУказано КОНЕЦ,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА БюджетированиеОстатки.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА БюджетированиеОстатки.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА БюджетированиеОстатки.Субконто3
	|			ИНАЧЕ &НеУказано КОНЕЦ,
	|	ВЫБОР 	КОГДА ВложенныйЗапрос.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА БюджетированиеОстатки.Субконто1
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА БюджетированиеОстатки.Субконто2
	|			КОГДА ВложенныйЗапрос.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА БюджетированиеОстатки.Субконто3
	|			ИНАЧЕ &НеУказано КОНЕЦ,
	|	БюджетированиеОстатки.Валюта";
				
	СтруктураПараметров.Вставить("ДатаКон_"+Номер,КонецДня(СтрокаСценарий.ДатаКон));
	СтруктураПараметров.Вставить("Сценарий_"+Номер,СтрокаСценарий.Сценарий);
	СтруктураПараметров.Вставить("ПараметрНомерСценария_"+Номер,Номер);
	
	Возврат ТекстЗапроса;
			  
КонецФункции // ТекстЗапросаПоСценарию()

// Процедура заполнения начальных настроек отчета
Процедура СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей)
	
	// Далее используются таблицы значений, полученные выгрузкой строк из т.ч. отчета
	КопияТаблицаСценарии= ТаблицаСценарии.Выгрузить();

	КопияТаблицаСценарии.Колонки.Добавить("ТекстПараметра");
	КопияТаблицаСценарии.Колонки.Добавить("Эталон");

	СтруктураПараметров=Новый Структура;
	
	СтруктураГруппировки=Новый Структура;
		
	СценарийЭталон=ТаблицаСценарии[0].Сценарий;
	
	ТекстЗапросаСценарии="";
	Номер=0;
		
	Для каждого СтрокаСценарий Из КопияТаблицаСценарии Цикл
		
		ТекстЗапросаСценарии=ТекстЗапросаСценарии+ТекстЗапросаПоСценарию(СтрокаСценарий,СтруктураПараметров,Номер,СтруктураГруппировки);
		
		// Эталонный период - самый первый
		СтрокаСценарий.Эталон = ?(Номер=0, Истина, Ложь);
		
		СтрокаПериод="Дата остатка: "+Формат(СтрокаСценарий.ДатаКон,"ДФ=dd.MM.yyyy");

		Если СтрокаСценарий.Сценарий.Пустая() Тогда
			СтрокаСценарий.ТекстПараметра=?(Номер=0," Эталонный период.","Сравниваемый период "+Номер+".")
			+Символы.ПС+"Фактические данные."+" "+Символы.ПС+СтрокаПериод;
		Иначе
			СтрокаСценарий.ТекстПараметра=?(Номер=0," Эталонный период.","Сравниваемый период "+Номер+".")
			+Символы.ПС+СтрокаСценарий.Сценарий+"."+Символы.ПС+СтрокаПериод;
		КонецЕсли;
		
		Номер=Номер+1;

	КонецЦикла;
	
	ТекстЗапросаСценарии=Сред(ТекстЗапросаСценарии,16);
	ТекстИтоги="";
	ТекстПоля="";
	Для Каждого СтрокаПоказатели Из Показатели Цикл
		
		Если Не СтрокаПоказатели.Использование Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Для Индекс=0 По ТаблицаСценарии.Количество()-1 Цикл
			
			ТекстИтоги= ТекстИтоги + ",
			|	СУММА("+СтрокаПоказатели.Имя+"_"+Индекс+")";
			
			ТекстПоля=ТекстПоля+",
			|"+СтрокаПоказатели.Имя+"_"+Индекс+" КАК "+СтрокаПоказатели.Имя+"_"+Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстИтоги = Сред(ТекстИтоги,2);
		
	СтруктураПараметров.Вставить("НеУказано","Нет аналитики");

	// Формируем финальный текст запроса.
	ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ДанныеСценариев.Счет КАК Счет,
	|ДанныеСценариев.Счет.Наименование КАК СчетНаименование
	|{ВЫБРАТЬ
	|ДанныеСценариев.Счет КАК Счет,
	|ДанныеСценариев.Счет.Наименование КАК СчетНаименование,
	|ДанныеСценариев.Счет.Код КАК СчетКод,
	|ДанныеСценариев.ЦФО.* КАК ЦФО,
	|ДанныеСценариев.Проект.* КАК Проект,
	|ДанныеСценариев.Контрагент.* КАК Контрагент,
	|ДанныеСценариев.Номенклатура.* КАК Номенклатура,
	|ДанныеСценариев.Валюта.* КАК Валюта}";
	ТекстЗапроса=ТекстЗапроса+ТекстПоля+"
	|ИЗ 
	|("+ТекстЗапросаСценарии+") КАК ДанныеСценариев
	|{ГДЕ
	|ДанныеСценариев.Счет,
	|ДанныеСценариев.ЦФО.*,
	|ДанныеСценариев.Проект.*,
	|ДанныеСценариев.Контрагент.*
	|}
	|УПОРЯДОЧИТЬ ПО ДанныеСценариев.НомерСценария, ДанныеСценариев.Счет.Код
	|ИТОГИ
	|"+ТекстИтоги+"	
	|ПО
	|ОБЩИЕ,
	|ДанныеСценариев.Счет Иерархия
	|{ИТОГИ ПО 
	|ДанныеСценариев.НомерСценария,
	|ДанныеСценариев.Счет,
    |ДанныеСценариев.ЦФО.*,
	|ДанныеСценариев.Проект.*,
	|ДанныеСценариев.Контрагент.*,
	|ДанныеСценариев.Номенклатура.*,
	|ДанныеСценариев.Валюта КАК Валюта}";

	ПостроительОтчета.Текст = ТекстЗапроса;
	
	Для каждого Параметр Из СтруктураПараметров Цикл
	
		ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
	
	КонецЦикла;
	
	Для Сч=0 по ПостроительОтчета.ДоступныеПоля.Количество()-1 Цикл
		Поле=ПостроительОтчета.ДоступныеПоля[Сч];
		Если Поле.Имя="Проект" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли Поле.Имя="ЦФО" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли Поле.Имя="Контрагент" Тогда
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
			Поле.ТипЗначения=Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЦикла;
			
	ПостроительОтчета.ДоступныеПоля["НомерСценария"].Порядок=Истина;
	ПостроительОтчета.Порядок.Добавить("НомерСценария","НомерСценария",,НаправлениеСортировки.Возр);
	
	ПостроительОтчета.ДоступныеПоля["Счет"].Порядок=Истина;
	ПостроительОтчета.Порядок.Добавить("Счет","Счет",,НаправлениеСортировки.Возр);

					
	СтруктураПредставлениеПолей = Новый Структура(
	"	Счет,
	|	ЦФО,
	|	Проект,
	|	Контрагент,
	|	Номенклатура,
	|	Валюта,
	|	Количество,
	|	СуммаУпр,
	|	ВалютнаяСумма",
	"Счет",
	"ЦФО",
	"Проект",
	"Контрагент",
	"Номенклатура",
	"Валюта остатка",
	"Количество",
	"Сумма остатка в валюте упр. учета",
	"Сумма остатка в валюте остатка");
		
	// Числовые показатели заносятся в специальную таблицу
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "Количество";          // Какому полю в запросе соответствует
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля]; // Представление показателя в отчете
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=3";        // Строка форматирования

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "СуммаУпр";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";

	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "ВалютнаяСумма";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
	
// Поля отбора, которые будут показаны на основной форме, заносятся в массив МассивОтбора
	МассивОтбора.Добавить("Счет");
	МассивОтбора.Добавить("ЦФО");
	МассивОтбора.Добавить("Проект");
	МассивОтбора.Добавить("Контрагент");
	
	ПостроительОтчета.ДоступныеПоля["НомерСценария"].Измерение=Ложь;
		
КонецПроцедуры // СформироватьНастройкиОтчета()

Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ВыводитьИтогиПоВсемУровням=Истина;

	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));

	мТаблицаПоказатели  = Новый ТаблицаЗначений;
	мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);
	
	мСтруктураСвязиПоказателейИИзмерений = Новый Структура;
	
	СтруктураПредставлениеПолей = Новый Структура;

	мСоответствиеНазначений = Новый Соответствие;

	МассивОтбора = Новый Массив;
	
	мНазваниеОтчета = "Сравнительный анализ балансовых остатков на счетах бюджетирования";
	мНаДату = Истина;

	Если Показатели.Количество()=0 Тогда
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "Количество";          // Какому полю в запросе соответствует
		СтрПоказатели.Представление = "Количество";
		СтрПоказатели.Использование   = Ложь;
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "СуммаУпр";
		СтрПоказатели.Представление = "Сумма в валюте упр. учета";
		СтрПоказатели.Использование   = Истина;
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "ВалютнаяСумма";
		СтрПоказатели.Представление = "Сумма в валюте остатка";
		СтрПоказатели.Использование   = Ложь;
		
	КонецЕсли;

	ТекНастройкиПостроителя="";
	
	Если НЕ ПостроительОтчета.Текст="" Тогда
		ТекНастройкиПостроителя=ПостроительОтчета.ПолучитьНастройки(Истина,Истина,Истина,Истина);
	КонецЕсли;
	
	//Очистим отбор
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла;
	
	//Очистим порядок
	Пока ПостроительОтчета.Порядок.Количество()>0 Цикл
		ПостроительОтчета.Порядок.Удалить(0);
	КонецЦикла;
		
	Если ТаблицаСценарии.Количество()>0 Тогда
		СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей);
		
		УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
		УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
		УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
		
	КонецЕсли;
	
	Если ТипЗнч(ТекНастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета.УстановитьНастройки(ТекНастройкиПостроителя,Истина,Истина,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Выводит показатели отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета
//
Процедура ВывестиПоказатели(Выборка, СтруктураПараметров)

	ТабДок = СтруктураПараметров.ТабДок;
	
	мВыведеноПериодов=0;

	РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"НомерСценария", "Все"),СтруктураПараметров,ТабДок,0,Новый Массив);

КонецПроцедуры // ВывестиПоказатели()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиГруппировку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = СтруктураПараметров.ЗначениеГруппировки;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;

	ОформлениеСтроки                = СтруктураПараметров.ОформлениеСтроки;
	ОформлениеСтрокиИерархии        = СтруктураПараметров.ОформлениеСтрокиИерархии;

	СтруктураВыводГруппировок = СтруктураПараметров.СтруктураВыводГруппировок;

	// Назначение, корректировка макетов измерений
	Сдвиг = Макс(ОформлениеСтроки.Количество()-СтруктураПараметров.МассивГруппировки.Количество(),0);

	Пока Выборка.Следующий() Цикл

		ИмяГруппировки  = Выборка.Группировка();
		
		Если СтрЧислоВхождений(ИмяГруппировки, "НомерСценария") = 0 Тогда  // Не выводим группировку, разворачивающуюся по горизонтали.

			ИспользоватьОформление = РаскрашиватьИзмерения;
			Если ОформлениеСтроки.Количество()>0 Тогда
				ИндексОформления = Сдвиг+((Номер) - (ОформлениеСтроки.Количество()-Сдвиг)*Цел((Номер)/(ОформлениеСтроки.Количество()-Сдвиг)));
			Иначе
				ИспользоватьОформление = Ложь;
			КонецЕсли;;

			УровеньЗаписи   = Выборка.Уровень();
			СдвигУровня     = 0;

			ТабДок = СтруктураПараметров.ТабДок;

			ЗначениеГруппировки = "";

			ЗначениеРасшифровки = Неопределено;

			ТипЗаписиВыборки = Выборка.ТипЗаписи();

			МассивВыводГруппировок = Новый Массив;

			Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

				ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки+?(ИмяГруппировки="Счет","Наименование","")];
				Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда

					ЗначениеТекущейГруппировки = "<...>";
				КонецЕсли;

				ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;
				
				Если ЗначениеРасшифровки = Неопределено Тогда 
					ЗначениеРасшифровки = Выборка[ИмяГруппировки];
				КонецЕсли;

			ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
				
				ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки+?(ИмяГруппировки="Счет","Наименование","")];
				Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
					
					ЗначениеТекущейГруппировки = "<...>";
				КонецЕсли;
				
				ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;
				
				// Если группировки нет в списке, то не выводим, нам нужна только выборка, 
				// т.о. искусственно получаем группировку по набору полей, указанных в одной строке
				// таблицы группировок
				
				Если ЗначениеРасшифровки = Неопределено Тогда 
					ЗначениеРасшифровки = Выборка[ИмяГруппировки];
				КонецЕсли;
				
			КонецЕсли;
			
			// Для итогов по группировке сдвиг нужно уменьшить на количество пропущенных группировок, 
			// заранее рассчитанное для каждой группировки
			//
			Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

				МассивРасшифровки.Добавить(ИмяГруппировки);

				ЗначениеРасшифровкиСтрока = Новый Структура;
				Для Каждого Элемент Из МассивРасшифровки Цикл
					ЗначениеРасшифровкиСтрока.Вставить(Элемент, Выборка[Элемент])
				КонецЦикла;

				СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[ИмяГруппировки];

				// Для итогов по иерархии сдвиг нужно уменьшить на количество пропущенных группировок для предыдущей группировки
				// заранее рассчитанное для каждой группировки
				//
			ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				
				МассивРасшифровки.Добавить(ИмяГруппировки);
				
				ЗначениеРасшифровкиСтрока = Новый Структура;
				Для Каждого Элемент Из МассивРасшифровки Цикл
					ЗначениеРасшифровкиСтрока.Вставить(Элемент, Выборка[Элемент])
				КонецЦикла;
				
				Если Номер>0 Тогда
					СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[СтруктураПараметров.МассивГруппировки[Номер - 1]];
				КонецЕсли;
			КонецЕсли;

			УровеньЗаписи = УровеньЗаписи - СдвигУровня;

			НачСтрока = ТабДок.ВысотаТаблицы+1;

			ТабДок.Вывести(ОбластьОбщийОтступ, УровеньЗаписи);
			ТабДок.Область(ТабДок.ВысотаТаблицы,1).Расшифровка = ЗначениеРасшифровкиСтрока;

			ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = СокрЛП(ЗначениеГруппировки);
			ОбластьЗначениеГруппировки.Параметры.Расшифровка = ЗначениеРасшифровки;
			ОбластьЗначениеГруппировки.Область().Отступ = УровеньЗаписи;

			ТабДок.Присоединить(ОбластьЗначениеГруппировки);

			ВывестиПоказатели(Выборка, СтруктураПараметров);

			Если ИспользоватьОформление Тогда

				Область = ТабДок.Область(НачСтрока, 2, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы);

				Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

					Область.ЦветФона   = ОформлениеСтроки[ИндексОформления].ЦветФона;
					Область.ЦветТекста = ОформлениеСтроки[ИндексОформления].ЦветТекста;

				ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

					Область.ЦветФона   = ОформлениеСтрокиИерархии[ИндексОформления].ЦветФона;
					Область.ЦветТекста = ОформлениеСтрокиИерархии[ИндексОформления].ЦветТекста;
					
				КонецЕсли;
			КонецЕсли;

			Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы,2).Шрифт = СтруктураПараметров.ШрифтГрупп;
			КонецЕсли;

			Если ЗначениеРасшифровки=Неопределено Тогда // Нет расшифровки
				Для Индекс=3 по ТабДок.ШиринаТаблицы Цикл
					ТабДок.Область(ТабДок.ВысотаТаблицы,Индекс).Расшифровка=Неопределено;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 

~М1:	Если Номер+1 < СтруктураПараметров.МассивГруппировки.Количество() Тогда

			// На каждом уровне используется своя копия структуры расшифровок
			КопияМассивРасшифровки = Новый Массив;
			Для Каждого Элемент Из МассивРасшифровки Цикл
				КопияМассивРасшифровки.Добавить(Элемент);
			КонецЦикла;
			
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, СтруктураПараметров.МассивГруппировки[Номер+1]), СтруктураПараметров, Номер + 1, КопияМассивРасшифровки);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ВывестиГруппировку()

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

		
	мЗначимыеГруппировкиГор.Очистить();

	// Строка в которую выводятся обнаруженные ошибки
	СтрОшибки = "";

	// Проверка на пустые значения
	Если ТаблицаСценарии.Количество()=0 Тогда
		Предупреждение("Не выбраны данные для сравнения!");
		Возврат;
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		
		Если СписокЗначений.НайтиПоЗначению(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным) = Неопределено Тогда
			СписокЗначений.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным);
		Иначе
			Предупреждение("Повторяющаяся группировка " + ПостроительОтчета.ИзмеренияСтроки[Инд].Представление +"."+ Символы.ПС+
			"Нельзя использовать одинаковые поля группировки строк!");
			ЕстьОшибки = Истина;
			Возврат;
			
		КонецЕсли;

		// Если добавлялись одни и те же поля в строки и в колонки, то  у них будет неправильное автогенеренное имя, оканчивающееся на число
		ИмяИзмерения = ПостроительОтчета.ИзмеренияСтроки[Инд].Имя;

		ПоследнийСимвол = Сред(ИмяИзмерения, СтрДлина(ИмяИзмерения));

		Если ПоследнийСимвол = "1"
			ИЛИ ПоследнийСимвол = "2" 
			ИЛИ ПоследнийСимвол = "3" 
			ИЛИ ПоследнийСимвол = "4" 
			ИЛИ ПоследнийСимвол = "5" 
			ИЛИ ПоследнийСимвол = "6" 
			ИЛИ ПоследнийСимвол = "7" 
			ИЛИ ПоследнийСимвол = "8" 
			ИЛИ ПоследнийСимвол = "9" 
			ИЛИ ПоследнийСимвол = "0" Тогда
			
			// Удалим старое измерение и добавим новое
			СтрПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным;

			ПостроительОтчета.ИзмеренияСтроки.Удалить(ПостроительОтчета.ИзмеренияСтроки[Инд]);
			ПостроительОтчета.ИзмеренияСтроки.Вставить(СтрПутьКДанным, , , , , Инд);
		КонецЕсли;
		
	КонецЦикла;

	СписокИзмерений = "";
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
	
		СписокИзмерений = СписокИзмерений +", "+ ПостроительОтчета.ИзмеренияСтроки[Сч].Представление
		+" "+ ПостроительОтчета.ИзмеренияСтроки[Сч].ТипИзмерения;
		
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияСтроки[Сч].Представление;
	
	КонецЦикла; 

	СписокПоказателей = "";
	Для Сч=0 По Показатели.Количество()-1 Цикл

		Если Показатели[Сч].Использование Тогда
		
			СписокПоказателей = СписокПоказателей +", "+ Показатели[Сч].Представление;
		
		КонецЕсли; 
	
	КонецЦикла; 

	СписокОтбор = "";
	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

		Если ПостроительОтчета.Отбор[Сч].Использование И Не ПостроительОтчета.Отбор[Сч].Имя = "Периодичность" Тогда

			СписокОтбор = СписокОтбор +", "+ ПостроительОтчета.Отбор[Сч].Представление 
			+" "+ ПостроительОтчета.Отбор[Сч].ВидСравнения +" "+ ПостроительОтчета.Отбор[Сч].Значение;

		КонецЕсли; 
	
	КонецЦикла;
	
	СписокИзмерений=Сред(СписокИзмерений,2);
	СписокПоказателей=Сред(СписокПоказателей,2);
	СписокОтбор=Сред(СписокОтбор,2);

	ПостроительОтчета.ДоступныеПоля["НомерСценария"].Измерение=Истина;
	ПостроительОтчета.ИзмеренияСтроки.Добавить("НомерСценария"); 
	
	Если ДетализацияПоПериодам И ПостроительОтчета.ИзмеренияСтроки.Найти("Период") = Неопределено Тогда
		ДобавленоИзмерениеСтрокиПериод = Истина;
		ПостроительОтчета.ИзмеренияСтроки.Добавить("Период");
	КонецЕсли;
	
	// Структура вывода группировок: ключи определяют "основные" группировки,
	// значения - дополнительные.
	СтруктураВыводГруппировок = Новый Структура;
	МассивГруппировки    = Новый Массив;

	// Структура "поправок" сдвига группировок вправо: уровень записи строки 
	// формируемого запроса будет отличаться от нужного из-за пропусков группировок,
	// по которым не нужно выводить итоги.
	//
	СтруктураСдвигУровняГруппировок = Новый Структура;

	// Заголовок первой колонки шапки таблицы
	ЗаголовокКолонки = "Общий итог"; // этот заголовок выводится в случае отсутствия группировок

	ВсегоГруппировок=0;
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		ВсегоГруппировок = ВсегоГруппировок + 1;
		СтруктураСдвигУровняГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, 0);
		МассивГруппировки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		СтруктураВыводГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);

	КонецЦикла;

	Макет = ПолучитьМакет("Макет");
	ДокументРезультат.Очистить();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбщийОтступ", Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировки",   Макет.ПолучитьОбласть("Значение|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировкиГор",   Макет.ПолучитьОбласть("План|ШапкаГруппы"));

	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("План|Строка"));
	СтруктураПараметров.Вставить("ТабДок",    ДокументРезультат);

	// Массив выводимых показателей отчета
	СтруктураПараметров.Вставить("МассивПоказатели", Новый Массив);
	Для каждого Строка Из Показатели Цикл

		Если Строка.Использование Тогда

			СтруктураПараметров.МассивПоказатели.Добавить(Строка.Имя);

		КонецЕсли;

	КонецЦикла;

	СтруктураПараметров.Вставить("ВсегоГруппировок", 			ВсегоГруппировок);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировок", 	СтруктураВыводГруппировок);

	СтруктураПараметров.Вставить("МассивГруппировки", 	МассивГруппировки);

	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	СтруктураПараметров.Вставить("КопияТаблицаСценарии", КопияТаблицаСценарии);
	СтруктураПараметров.Вставить("ЦветаГруппировок", Новый Структура);

	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СтруктураПараметров.ЦветаГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Цвет(240 - (ПостроительОтчета.ИзмеренияСтроки.Количество() - Сч + 1) * 10, 248, 255));
	КонецЦикла;

	СтруктураПараметров.ЦветаГруппировок.Вставить("ОБЩИЕ", Новый Цвет(255, 248, 255));

	// Наклонный шрифт для групп
	СтруктураПараметров.Вставить("ШрифтГрупп", Новый Шрифт(Макет.Область("Строка|План").Шрифт,,,,Истина));

	// Форматная строка для вывода показателей
	СтруктураПараметров.Вставить("ФорматПоказателей", 			Новый Структура);
	Для Каждого Строка Из Показатели Цикл
		
		Если Строка.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли; 
		
		МетаданныеРесурса = 0;
		ФорматнаяСтрока = "";

		Нстр = мТаблицаПоказатели.Найти(Строка.Имя, "ИмяПоля");
		Если Не (Нстр = Неопределено) Тогда
			ФорматнаяСтрока = НСтр.ФорматнаяСтрока;
		КонецЕсли;

		СтруктураПараметров.ФорматПоказателей.Вставить(Строка.Имя, ФорматнаяСтрока);
	КонецЦикла;

	// Оформление измерений
	ОформлениеСтроки = Новый Массив;

	ОформлениеСтрокиИерархии = Новый Массив;
	
	Если РаскрашиватьИзмерения Тогда

		ТабДокОформлениеИзмерений = Макет.ПолучитьОбласть("ОформлениеИзмерений");
		Для Сч = 1 По ТабДокОформлениеИзмерений.ВысотаТаблицы Цикл

			// Нечетные строки - иерархия, четные - измерения
			Если Сч - Цел(Сч/2)*2 = 1 Тогда

				ОформлениеСтроки.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			Иначе
				ОформлениеСтрокиИерархии.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			КонецЕсли;
							
		КонецЦикла;

	КонецЕсли; 

	// Оформление строк
	СтруктураПараметров.Вставить("ОформлениеСтроки", ОформлениеСтроки);
	СтруктураПараметров.Вставить("ОформлениеСтрокиИерархии", ОформлениеСтрокиИерархии);
	СтруктураПараметров.Вставить("СтруктураФорматаПолей", Новый Структура);
	мГруппировокПоГоризонтали=0;
	мВыведеноПериодов=0;

	// 1. Вывод заголовка отчета
	Для Сч = 1 По 3 Цикл
		Если Сч = 1 Тогда
			Префикс = "Верх";
		ИначеЕсли Сч = 2 Тогда

			// Если нет фильтров, не выводим
			Если ПустаяСтрока(СписокОтбор) Тогда
				Продолжить;
			КонецЕсли;
			Префикс = "Середина";

		ИначеЕсли Сч = 3 Тогда
			Префикс = "Низ";
		КонецЕсли;

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Шапка" + Префикс));

		// Вывод шапки отчета
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Шапка" + Префикс);

		Если Префикс = "Верх" Тогда

			ОбластьЗначение.Параметры.ЗаголовокОтчета = мНазваниеОтчета;
			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,  3).Объединить();

		ИначеЕсли Префикс = "Середина" Тогда

			ОбластьЗначение.Параметры.Фильтры = "Отбор: " + СписокОтбор;
			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,  4).Объединить();

		ИначеЕсли Префикс = "Низ" Тогда

			ОбластьЗначение.Параметры.Группировки="Группировки: " +СписокИзмерений;
			ОбластьЗначение.Параметры.Показатели = "Показатели: " + СписокПоказателей;
			ДокументРезультат.Присоединить(ОбластьЗначение);

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
			ДокументРезультат.ВысотаТаблицы-1,  4).Объединить();

			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
			ДокументРезультат.ВысотаТаблицы,  4).Объединить();

		КонецЕсли;

	КонецЦикла;

	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда

		Возврат;
	
	КонецЕсли; 

	мГруппировокПоГоризонтали=0;
	мВыведеноПериодов=0;
	
	// Выполнение сформированного запроса
	ПостроительОтчета.Выполнить();
	
	Если УправлениеОтчетами.ПроверитьПовторыИзмеренийПостроителя(ПостроительОтчета) = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПостроительОтчета.Результат;

	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаГруппы"));
	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаГруппы");
	ОбластьЗначение.Область(2,1).Текст = ЗаголовокКолонки;

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ВывестиШапку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"НомерСценария","Все"), СтруктураПараметров, "");

	КоличествоПоказателей = Показатели.Итог("Использование");
	
	Если КоличествоПоказателей>1 Тогда

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаПоказатели"));
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаПоказатели");

		ДокументРезультат.Присоединить(ОбластьЗначение);

		ОбластьПоказатели=Макет.ПолучитьОбласть("План|ШапкаПоказатели");

		Для Индекс=1 по мГруппировокПоГоризонтали Цикл
			Для Каждого Строка Из Показатели Цикл
				Если Строка.Использование Тогда
					ОбластьПоказатели.Параметры.Показатель=Строка.Представление;
					ДокументРезультат.Присоединить(ОбластьПоказатели);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).Объединить();

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-2, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

	Иначе

        ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы, 2).Объединить();
		
		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

	КонецЕсли;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;
	ДокументРезультат.ФиксацияСлева = 2;

	// 1. Вывод строк отчета
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	Если МассивГруппировки.Количество()>0 Тогда

		ВывестиГруппировку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировки[0]), СтруктураПараметров, 0, Новый Массив);

	КонецЕсли;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	// 3. Вывод общих итогов
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ОбщиеИтоги"));
	ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("Значение|ОбщиеИтоги"));
	
	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("План|ОбщиеИтоги"));

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ВыборкаОбщийИтог.Следующий();
	
	ВывестиПоказатели(ВыборкаОбщийИтог, СтруктураПараметров);

	// 4. Вывод подвала отчета
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Подвал"));

	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Подвал");

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьПоказатель = Макет.ПолучитьОбласть("План|Подвал");

	Для Индекс=1 по мГруппировокПоГоризонтали Цикл
		Для Сч=1 По КоличествоПоказателей Цикл
			ДокументРезультат.Присоединить(ОбластьПоказатель);
		КонецЦикла;	
	КонецЦикла;
	
	ДокументРезультат.Область(1, 2, 
			1,  ДокументРезультат.ШиринаТаблицы).Объединить();

	// Управление заголовком
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;
	СтруктураНастроекОтчета.Вставить("ИмяОтчета", мНазваниеОтчета);

	Для Каждого Реквизит Из Метаданные.Отчеты.СравнительныйАнализОстатковНаСчетахБюджетирования.Реквизиты Цикл
		СтруктураНастроекОтчета.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из Метаданные.Отчеты.СравнительныйАнализОстатковНаСчетахБюджетирования.ТабличныеЧасти Цикл
		СтруктураНастроекОтчета.Вставить(ТабличнаяЧасть.Имя, ЭтотОбъект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	ДокументРезультат.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.Автомасштаб=Истина;
	
	//Удаляем добавленные измерения
	
	
	ИзмерениеСценарий=ПостроительОтчета.ИзмеренияСтроки.Найти("НомерСценария");
	ПостроительОтчета.ИзмеренияСтроки.Удалить(ИзмерениеСценарий);
	
	Если ДобавленоИзмерениеСтрокиПериод = Истина Тогда
		ИзмерениеПериод=ПостроительОтчета.ИзмеренияСтроки.Найти("Период");
		ПостроительОтчета.ИзмеренияСтроки.Удалить(ИзмерениеПериод);
	КонецЕсли;

КонецПроцедуры

// Вывод строку шапки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	ВыборкаГоризонтальная - выборка горизонтальная из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ЗначениеВыборкиДанные - строка, заголовок вертикальной области данных
//
Процедура ВывестиСтрокуШапки(ВыборкаГоризонтальная, СтруктураПараметров, ЗначениеВыборкиДанные)

	КоличествоПоказателей = Показатели.Итог("Использование");

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировкиГор   = СтруктураПараметров.ЗначениеГруппировкиГор;

	УровеньЗаписи   = ВыборкаГоризонтальная.Уровень();
	СдвигУровня     = 0;

	ИмяГруппировки  = ВыборкаГоризонтальная.Группировка();

	ТабДок = СтруктураПараметров.ТабДок;

	ЗначениеГруппировки = "";

	ЗначениеРасшифровки = Неопределено;
	
	ИдЗначимойГруппировкиГор=ЗначениеВыборкиДанные;

	мЗначимыеГруппировкиГор.Добавить(ИдЗначимойГруппировкиГор);

	ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиДанные=ЗначениеВыборкиДанные;

	Для Сч=1 По КоличествоПоказателей Цикл
		ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
	КонецЦикла;	

	ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-КоличествоПоказателей+1, 
	ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

КонецПроцедуры

// Вывод шапки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка				  - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ЗначениеВыборкиДанные - строка, заголовок вертикальной области данных
//
Процедура ВывестиШапку(Выборка, СтруктураПараметров, ЗначениеВыборкиДанные)

	КоличествоПоказателей = Показатели.Итог("Использование");

	ОбластьЗначениеГруппировкиГор   = СтруктураПараметров.ЗначениеГруппировкиГор;
	ТабДок = СтруктураПараметров.ТабДок;

	ОбработкаПрерыванияПользователя();
	ВыведеноСценариев=0;

	Пока Выборка.Следующий() Цикл

		Если ДетализацияПоПериодам Тогда
			Если Выборка.Группировка()="Период"  Тогда  
				ВывестиСтрокуШапки(Выборка, СтруктураПараметров, ЗначениеВыборкиДанные);
				мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
				мВыведеноПериодов=мВыведеноПериодов+1;
			Иначе
				// Строка с параметрами выводимых данных
				СтрокаДанныхОтчета = СтруктураПараметров.КопияТаблицаСценарии[Выборка["НомерСценария"]];
				ЗначениеВыборкиДанные=СтрокаДанныхОтчета.ТекстПараметра;
				ВывестиШапку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период"), СтруктураПараметров, ЗначениеВыборкиДанные);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.Группировка()="НомерСценария" Тогда
			
			мСоответствиеНомера.Вставить(ВыведеноСценариев,Выборка["НомерСценария"]);

			СтрокаДанныхОтчета = СтруктураПараметров.КопияТаблицаСценарии[Выборка["НомерСценария"]];
			
			ОбластьЗначениеГруппировкиГор.Параметры.РасшифровкаДанные=Новый Структура("Сценарий,ДатаКон",
																		СтрокаДанныхОтчета.Сценарий,
																		СтрокаДанныхОтчета.ДатаКон);


			ЗначениеВыборкиДанные = СтрокаДанныхОтчета.ТекстПараметра;

			ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиДанные=ЗначениеВыборкиДанные;
			ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиПериоды="Итого";

			Для Сч=1 По КоличествоПоказателей Цикл
				ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
			КонецЦикла;

			ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-КоличествоПоказателей+1, 
			ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

			мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
			мВыведеноПериодов=мВыведеноПериодов+1;

			Если НЕ СтрокаДанныхОтчета.Эталон Тогда

				Если ВыводитьАбсолютныеОтклонения Тогда

					ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиПериоды="Отклонение, абс.";

					Для Сч=1 По КоличествоПоказателей Цикл
						ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
					КонецЦикла;

					ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-КоличествоПоказателей+1, 
					ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

					мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
					мВыведеноПериодов=мВыведеноПериодов+1;

				КонецЕсли;

				Если ВыводитьОтносительныеОтклонения Тогда

					ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировкиПериоды="Отклонение, %";

					Для Сч=1 По КоличествоПоказателей Цикл
						ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
					КонецЦикла;

					ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-КоличествоПоказателей+1, 
					ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

					мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
					мВыведеноПериодов=мВыведеноПериодов+1;

				КонецЕсли;

			КонецЕсли;

			ТабДок.Область(ТабДок.ВысотаТаблицы-1, ТабДок.ШиринаТаблицы-мВыведеноПериодов*КоличествоПоказателей+1, 
			ТабДок.ВысотаТаблицы-1,  ТабДок.ШиринаТаблицы).Объединить();

			мВыведеноПериодов=0;
			ВыведеноСценариев=ВыведеноСценариев+1;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ВывестиШапку()

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка               - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ТабДок				  - табличный документ
//	Номер		          - число, номер обходимой группировки
//	МассивПредставленийГруппировок - массив, хранящий представления группировок
//
Процедура РазвернутьСтроку (Выборка, СтруктураПараметров,ТабДок,Номер,МассивПредставленийГруппировок)

	МассивВыводГруппировок=Новый Массив;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;

	//Структура для значений эталонных данных

	СтруктураЭталон=Новый Структура;
	ЗначениеЭталон=0;

	Пока Выборка.Следующий() Цикл

		Если Выборка.Группировка()="НомерСценария" Тогда

			СтрокаДанныхОтчета = СтруктураПараметров.КопияТаблицаСценарии[Выборка["НомерСценария"]];
			
			МассивПредставленийГруппировок.Добавить(СтрокаДанныхОтчета.ТекстПараметра);
		Иначе
			МассивПредставленийГруппировок.Добавить(Выборка["Период"]);

		КонецЕсли;

		Если ДетализацияПоПериодам Тогда

			Если Выборка.Группировка()="Период" Тогда

				СтрТекущийПуть="";
				Для Каждого Представление Из МассивПредставленийГруппировок Цикл
					СтрТекущийПуть=СтрТекущийПуть+Представление+"#";
				КонецЦикла;

				Если мЗначимыеГруппировкиГор.НайтиПоЗначению(СтрТекущийПуть)<>Неопределено Тогда

					НомерКолонки=1;

					Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

						ФорматПоказателя = "ЧЦ = 14; ЧДЦ = 3";

						Если НомерКолонки=1 Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							Если (НомерКолонки>1) Тогда
								ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							КонецЕсли;
						КонецЕсли;

						Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]], ФорматПоказателя);
						ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";

						ТабДок.Присоединить(ОбластьЗначенияПоказателя);

						НомерКолонки=НомерКолонки+1;

					КонецЦикла;

				КонецЕсли;

			Иначе

				РазвернутьСтроку (Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период","Все"), СтруктураПараметров, ТабДок,Номер,МассивПредставленийГруппировок);

			КонецЕсли;

		КонецЕсли;

		Если Выборка.Группировка()="НомерСценария" Тогда

			НомерКолонки=1;

			// Строка с параметрами выводимых данных
			СтрокаДанныхОтчета = СтруктураПараметров.КопияТаблицаСценарии[Выборка["НомерСценария"]];

			Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

				ФорматПоказателя = "ЧЦ = 14; ЧДЦ = 3";

				ТекущееЗначение=?(ПустаяСтрока(Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]),0,Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]);

				Если НомерКолонки=1 Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				КонецЕсли;

				Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
					Если (НомерКолонки>1) Тогда
						ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
					КонецЕсли;
				КонецЕсли;

				Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				КонецЕсли;

				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(ТекущееЗначение, ФорматПоказателя);
				ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";

				ТабДок.Присоединить(ОбластьЗначенияПоказателя);

				Если СтрокаДанныхОтчета.Эталон Тогда

					СтруктураЭталон.Вставить(Имя+"_0",ТекущееЗначение);

				КонецЕсли;

				НомерКолонки=НомерКолонки+1;

			КонецЦикла;

			Если НЕ СтрокаДанныхОтчета.Эталон Тогда

				Если ВыводитьАбсолютныеОтклонения Тогда

					НомерКолонки=1;

					Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

						ФорматПоказателя = "ЧЦ = 14; ЧДЦ = 3";

						Если НЕ СтруктураЭталон.Свойство(Имя+"_0", ЗначениеЭталон) Тогда
							ЗначениеЭталон=0;
						КонецЕсли;

						ТекущиеДанные =?(ПустаяСтрока(Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]),0,Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]);

						Если НомерКолонки=1 Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							Если (НомерКолонки>1) Тогда
								ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							КонецЕсли;
						КонецЕсли;

						Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат((ТекущиеДанные-ЗначениеЭталон), ФорматПоказателя);

						ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";

						ТабДок.Присоединить(ОбластьЗначенияПоказателя);

						НомерКолонки=НомерКолонки+1;

					КонецЦикла;

				КонецЕсли;

				Если ВыводитьОтносительныеОтклонения Тогда

					НомерКолонки=1;

					Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

						ФорматПоказателя = "ЧЦ = 14; ЧДЦ = 3";

						Если НЕ СтруктураЭталон.Свойство(Имя+"_0", ЗначениеЭталон) Тогда
							ЗначениеЭталон=0;
						КонецЕсли;


						ТекущиеДанные =?(ПустаяСтрока(Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]),0,Выборка[Имя+"_"+мСоответствиеНомера[мВыведеноПериодов]]);
						Процент=?(ЗначениеЭталон=0,?(ТекущиеДанные=0,0,-1),(ТекущиеДанные-ЗначениеЭталон)/ЗначениеЭталон)*100;
						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(Процент, ФорматПоказателя);
						ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";

						Если НомерКолонки=1 Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;

						Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
							Если (НомерКолонки>1) Тогда
								ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							КонецЕсли;
						КонецЕсли;

						Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
							ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
						КонецЕсли;
						ОбластьЗначенияПоказателя.Параметры.ТипДанных = "Данные";
	
						ТабДок.Присоединить(ОбластьЗначенияПоказателя);

						НомерКолонки=НомерКолонки+1;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

			мВыведеноПериодов=мВыведеноПериодов+1;

		КонецЕсли;

		Если МассивПредставленийГруппировок.Количество()>1 Тогда
			МассивПредставленийГруппировок.Удалить(МассивПредставленийГруппировок.Количество()-1);
		Иначе
			МассивПредставленийГруппировок= Новый Массив;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Создает бюджетную операцию по параметрам расшифровки
//
Процедура СоздатьОперацию(Расшифровка, ЭтотОтчет)
	
	Если НЕ ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Определим список статей, влияющих на выбранную статью баланса
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
		|				СтатьиШаблоныПроводок.Ссылка КАК СтатьяОборотов,
		|				СтатьиШаблоныПроводок.Ссылка.Наименование КАК СтатьяОборотовНаименование
		|			ИЗ
		|				Справочник.СтатьиОборотовПоБюджетам.ШаблоныПроводок КАК СтатьиШаблоныПроводок
		|			
		|			ГДЕ
		|				((СтатьиШаблоныПроводок.СчетДт В ИЕРАРХИИ(&СтатьяБаланса)) И НЕ (СтатьиШаблоныПроводок.СчетКт В ИЕРАРХИИ(&СтатьяБаланса)))
		|				ИЛИ((СтатьиШаблоныПроводок.СчетКт В ИЕРАРХИИ(&СтатьяБаланса)) И НЕ (СтатьиШаблоныПроводок.СчетДт В ИЕРАРХИИ(&СтатьяБаланса)))";
		
	Запрос.УстановитьПараметр("СтатьяБаланса",Расшифровка.Счет);
	ТабСтатей=Запрос.Выполнить().Выгрузить();
	
	СписокСтатей=Новый СписокЗначений;
	
	Для Каждого Статья ИЗ ТабСтатей Цикл
		
		СписокСтатей.Добавить(Статья.СтатьяОборотов,Статья.СтатьяОборотовНаименование);
		
	КонецЦикла;
	
	Если СписокСтатей.Количество()=0 Тогда
		Сообщить("Нет статей, изменяющих счет "+ Расшифровка.Счет);
		Возврат;
	КонецЕсли;
	
	СтатьяОборотов = СписокСтатей.ВыбратьЭлемент("Выберите статью оборотов", СписокСтатей[СписокСтатей.Количество()-1]);
	
	Если СтатьяОборотов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяОперация=Документы.БюджетнаяОперация.СоздатьДокумент();
	
	Если Расшифровка.Свойство("Сценарий") и ТипЗнч(Расшифровка.Сценарий)=Тип("СправочникСсылка.СценарииПланирования") И НЕ Расшифровка.Сценарий.ЭтоГруппа Тогда
		НоваяОперация.Сценарий=Расшифровка.Сценарий;
	КонецЕсли;
	
	Если Расшифровка.Свойство("ЦФО") И ТипЗнч(Расшифровка.ЦФО)=Тип("СправочникСсылка.Подразделения") И НЕ Расшифровка.ЦФО.ЭтоГруппа Тогда
		НоваяОперация.ЦФО=Расшифровка.ЦФО;
	КонецЕсли;
	
	НоваяОперация.СтатьяОборотов=СтатьяОборотов.Значение;
	
	Если Расшифровка.Свойство("Проект") И ТипЗнч(Расшифровка.Проект)=Тип("СправочникСсылка.Проекты") И НЕ Расшифровка.Проект.ЭтоГруппа Тогда
		НоваяОперация.Проект=Расшифровка.Проект;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Контрагент") И ТипЗнч(Расшифровка.Контрагент)=Тип("СправочникСсылка.Контрагенты") И НЕ Расшифровка.Контрагент.ЭтоГруппа Тогда
		НоваяОперация.Контрагент=Расшифровка.Контрагент;
	КонецЕсли;
	
	Если Расшифровка.Свойство("Номенклатура") 
		И НЕ Расшифровка.Номенклатура=Неопределено 
		И (ТипЗнч(Расшифровка.Номенклатура)=Тип("СправочникСсылка.Номенклатура") ИЛИ ТипЗнч(Расшифровка.Номенклатура)=Тип("СправочникСсылка.НоменклатурныеГруппы"))
		И НЕ Расшифровка.Номенклатура.ЭтоГруппа Тогда
		НоваяОперация.Номенклатура=Расшифровка.Номенклатура;
	ИначеЕсли НоваяОперация.Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.Номенклатура Тогда
		НоваяОперация.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
	ИначеЕсли НоваяОперация.Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		НоваяОперация.Номенклатура=Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	КонецЕсли;
		
	ДатаОперации=Расшифровка.ДатаКон;
	
	Для Каждого Элемент Из Расшифровка Цикл
		Если Найти(Элемент.Ключ,"Период")>0 Тогда
			ДатаОперации = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	НоваяОперация.ПериодПланирования=ОбщегоНазначения.ДатаНачалаПериода(ДатаОперации,НоваяОперация.Сценарий.Периодичность);
	
	НоваяОперация.Дата=РабочаяДата;
	НоваяОперация.УстановитьВремя(АвтоВремя.ТекущееИлиПоследним);
		
	ФормаОперации=НоваяОперация.ПолучитьФорму("ФормаДокумента");
	ФормаОперации.ОткрытьМодально();
	
	Если НоваяОперация.Проведен Тогда
		ЭтотОтчет.ПолучитьФорму().ОбновитьТаблицуОтчета();
	КонецЕсли;
	
КонецПроцедуры // СоздатьОперацию()

//Настраивает копию текущего отчета
//
Процедура РасшифровкаДвижений(Расшифровка,ЭтотОтчет,Выбор)
	
	// Настройка отчета
	Отчет = Отчеты.СравнительныйАнализОборотовПоСтатьямБюджетов.Создать();
	Параметры = Новый Соответствие;
	
	Параметры.Вставить("СтатьяБаланса", Расшифровка.Счет);
	
	ПараметрТаблица=Новый ТаблицаЗначений;
	ПараметрТаблица.Колонки.Добавить("Сценарий");
	ПараметрТаблица.Колонки.Добавить("ДатаНач");
	ПараметрТаблица.Колонки.Добавить("ДатаКон");
			
	ТекущаяПериодичность=Перечисления.Периодичность.День;
	
	Для Каждого Строка Из ТаблицаСценарии Цикл
	
		Если НЕ Строка.Сценарий.Пустая() 
			И ОбщегоНазначения.ЧислоДнейВПериоде(Строка.Сценарий.Периодичность)>ОбщегоНазначения.ЧислоДнейВПериоде(ТекущаяПериодичность) Тогда
			ТекущаяПериодичность=Строка.Сценарий.Периодичность;
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СтрокаСценарий ИЗ ТаблицаСценарии Цикл
		
		СтрокаОтчета=ПараметрТаблица.Добавить();
		СтрокаОтчета.Сценарий=СтрокаСценарий.Сценарий;
		СтрокаОтчета.ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(СтрокаСценарий.ДатаКон,ТекущаяПериодичность);
		СтрокаОтчета.ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(СтрокаСценарий.ДатаКон,Перечисления.Периодичность.Год);
		
	КонецЦикла;
	
	Параметры.Вставить("ТаблицаСценарии",ПараметрТаблица);
	
	Параметры.Вставить("Периодичность",ТекущаяПериодичность);
	
	ИсходныйОтчет = ЭтотОтчет;
	
	// Переносимые свойства
	Параметры.Вставить("РаскрашиватьИзмерения", РаскрашиватьИзмерения);
	Параметры.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
	Параметры.Вставить("ВыводитьАбсолютныеОтклонения",     ВыводитьАбсолютныеОтклонения);
	Параметры.Вставить("ВыводитьОтносительныеОтклонения", ВыводитьОтносительныеОтклонения);

	// Перенос табличных частей части
	Параметры.Вставить("Показатели", Показатели.Выгрузить());
	
	Отчет.Настроить(Параметры);
	
	Форма = Отчет.ПолучитьОсновнуюФорму();
	
	ПостроительОтчета.НастроитьРасшифровку(Отчет.ПолучитьПостроительОтчета(), Расшифровка);
	
	// Добавим измерения из расшифровываемого отчета
	МассивДобавленныеИзмерения = Новый Массив;
	
	ТабОтбор = Новый ТаблицаЗначений;
	ТабОтбор.Колонки.Добавить("Имя");
	ТабОтбор.Колонки.Добавить("ВидСравнения");
	ТабОтбор.Колонки.Добавить("Значение");
	
	Для каждого Элемент Из Отчет.ПолучитьПостроительОтчета().Отбор Цикл
		
		Если Элемент.Использование Тогда
			
			НоваяСтрока = ТабОтбор.Добавить();
			НоваяСтрока.Имя = Элемент.Имя;
			НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
			НоваяСтрока.Значение = Элемент.Значение;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		Если ПостроительОтчета.ИзмеренияСтроки[Инд].Имя="НомерСценария" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Имя",ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);
		
		НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);
		
		// Измерение не нужно добавлять, если в нем заведомо будет один элемент
		НеДобавлятьИзмерение = Ложь;
		
		Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл
			
			// Не добавляем измерения по отборам на равенство - в них будет один элемент
			Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
				
				НеДобавлятьИзмерение = Истина;
				Прервать;
				
				// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
				// или плана видов характеристик - в них будет один элемент
			ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
				ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
				
				Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
					ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;
					
					МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));
					
					Если МетаданныеОбъекта<>Неопределено Тогда
						Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
							ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда
							
							Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда
								
								НеДобавлятьИзмерение = Истина;
								Прервать;
								
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли; 
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НеДобавлятьИзмерение Тогда
			
			// Удалим также и предыдущие измерения
			Для каждого ПредыдущееИзмерение Из МассивДобавленныеИзмерения Цикл
				
				Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Удалить(ПредыдущееИзмерение);
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		// Добавляем новое измерение и запоминаем его в массиве
		
		Если НЕ ПостроительОтчета.ИзмеренияСтроки[Инд].Имя="Счет" Тогда 
			
			МассивДобавленныеИзмерения.Добавить(Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияСтроки[Инд].Имя,
			ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить("СтатьяОборотов", "СтатьяОборотов",ТипИзмеренияПостроителяОтчета.Иерархия);			
	Форма.ОбновитьТаблицуОтчета();
			
	Форма.неВосстанавливатьНастройку=Истина;
	Форма.Открыть();
	
КонецПроцедуры // РасшифровкаДвижений ()

//Настраивает копию текущего отчета
//
Процедура РасшифровкаТекущимОтчетом (Расшифровка,ЭтотОтчет,ЗначениеВыбора)
	
	// Настройка отчета
		Отчет = Отчеты[ЭтотОтчет.Метаданные().Имя].Создать();
		Параметры = Новый Соответствие;
				
		ИсходныйОтчет = ЭтотОтчет;

		// Переносимые свойства
		Параметры.Вставить("ВыводитьАбсолютныеОтклонения",     ВыводитьАбсолютныеОтклонения);
		Параметры.Вставить("ВыводитьОтносительныеОтклонения", ВыводитьОтносительныеОтклонения);
		Параметры.Вставить("РаскрашиватьИзмерения", РаскрашиватьИзмерения);
		Параметры.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

		//Параметры.Вставить("ВыводитьДетальныеЗаписи", ВыводитьДетальныеЗаписи);

		// Перенос табличных частей части
		Параметры.Вставить("Показатели", Показатели.Выгрузить());
		Параметры.Вставить("ТаблицаСценарии", ТаблицаСценарии.Выгрузить());

		Отчет.Настроить(Параметры);
		
		Форма = Отчет.ПолучитьОсновнуюФорму();

		ПостроительОтчета.НастроитьРасшифровку(Отчет.ПолучитьПостроительОтчета(), Расшифровка);

		// Добавим измерения из расшифровываемого отчета
		МассивДобавленныеИзмерения = Новый Массив;

		ТабОтбор = Новый ТаблицаЗначений;
		ТабОтбор.Колонки.Добавить("Имя");
		ТабОтбор.Колонки.Добавить("ВидСравнения");
		ТабОтбор.Колонки.Добавить("Значение");

		Для каждого Элемент Из Отчет.ПолучитьПостроительОтчета().Отбор Цикл

			Если Элемент.Использование Тогда

				НоваяСтрока = ТабОтбор.Добавить();
				НоваяСтрока.Имя = Элемент.Имя;
				НоваяСтрока.ВидСравнения = Элемент.ВидСравнения;
				НоваяСтрока.Значение = Элемент.Значение;

			КонецЕсли;

		КонецЦикла; 

		Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя",ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);

			НайденныеСтрокиОтбора = ТабОтбор.НайтиСтроки(СтруктураПоиска);

			// Измерение не нужно добавлять, если в нем заведомо будет один элемент
			НеДобавлятьИзмерение = Ложь;

			Для каждого НайденныйЭлементОтбора Из НайденныеСтрокиОтбора Цикл

				// Не добавляем измерения по отборам на равенство - в них будет один элемент
				Если НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда

					НеДобавлятьИзмерение = Истина;
					Прервать;

					// Не добавляем измерения по отборам на вхождение в иерархию одного элемента справочника 
					// или плана видов характеристик - в них будет один элемент
				ИначеЕсли НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
					ИЛИ НайденныйЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда

					Если НайденныйЭлементОтбора.Значение.Количество() = 1 Тогда
						ЗначениеОтбора = НайденныйЭлементОтбора.Значение[0].Значение;

						МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));

						Если МетаданныеОбъекта<>Неопределено Тогда
							Если Метаданные.Справочники.Найти(МетаданныеОбъекта)<>Неопределено 
								ИЛИ Метаданные.ПланыВидовХарактеристик.Найти(МетаданныеОбъекта)<>Неопределено  Тогда

								Если НЕ ЗначениеОтбора.ЭтоГруппа Тогда

									НеДобавлятьИзмерение = Истина;
									Прервать;

								КонецЕсли; 
							КонецЕсли; 
						КонецЕсли; 

					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

			Если НеДобавлятьИзмерение Тогда

				// Удалим также и предыдущие измерения
				Для каждого ПредыдущееИзмерение Из МассивДобавленныеИзмерения Цикл

					Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Удалить(ПредыдущееИзмерение);

				КонецЦикла;

				Продолжить;

			КонецЕсли;

			МассивДобавленныеИзмерения.Добавить(Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияСтроки[Инд].Имя,
			ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения));
			
			Если ПостроительОтчета.ИзмеренияСтроки[Инд].Имя="Счет" Тогда 
				
				Отчет.ПолучитьПостроительОтчета().ВыбранныеПоля.Добавить("СчетНаименование");				
				
			КонецЕсли;
			
					
		КонецЦикла;

		Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
			Отчет.ПолучитьПостроительОтчета().ИзмеренияКолонки.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным,
			ПостроительОтчета.ИзмеренияКолонки[Инд].Имя,
			ПостроительОтчета.ИзмеренияКолонки[Инд].ТипИзмерения)
		КонецЦикла;

			// Текущий отчет с дополнительным измерением
			Отчет.ПолучитьПостроительОтчета().ИзмеренияСтроки.Добавить(ЗначениеВыбора, ЗначениеВыбора);

			Форма.ОбновитьТаблицуОтчета();
			
			Форма.неВосстанавливатьНастройку=Истина;	
			Форма.Открыть();
		
КонецПроцедуры // РасшифровкаТекущимОтчетом (Расшифровка)


// Расшифровывает отчеты, реализуемые при помощи данного
//
// Параметры:
//	Расшифровка           - Структура, значение расшифровки, взятое из табличного документа, и, в случае надобности, дополненное
//	СтандартнаяОбраьотка  - Флаг стандартной обработки расшифровки
//	ЭтотОтчет             - Контекст, из которого происходит вызов. Позволяет определить, как именно расшифровывать.
//
Процедура ОбработкаРасшифровкиОтчетаБюджетирования(Расшифровка, СтандартнаяОбработка, ЭтотОтчет) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;

		СписокВыбора = Новый СписокЗначений;

		ДоступныеИзмерения = Новый Соответствие;

		Для ДП = 0 По ПостроительОтчета.ДоступныеПоля.Количество() - 1 Цикл
			Поле = ПостроительОтчета.ДоступныеПоля[ДП];
			Если Поле.Измерение Тогда
				ДоступныеИзмерения.Вставить(Поле.Имя, Поле.Представление);
			КонецЕсли;
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияСтроки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		Для УИ = 0 По ПостроительОтчета.ИзмеренияКолонки.Количество() - 1 Цикл
			Измерение = ПостроительОтчета.ИзмеренияКолонки[УИ];
			ДоступныеИзмерения.Удалить(Измерение.Имя);
		КонецЦикла;

		ИмяДобавляемогоИзмерения = "";
		ПредставлениеДобавляемогоИзмерения = "";
		
		Если ДоступныеИзмерения.Количество() > 0 Тогда
			
			// Получим список возможных измерений
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БюджетированиеВидыСубконто.ВидСубконто.Наименование КАК ВидСубконто
			|ИЗ
			|	ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто
			|
			|ГДЕ
			|	БюджетированиеВидыСубконто.Ссылка В ИЕРАРХИИ(&Счет)";
			
			Запрос.УстановитьПараметр("Счет",Расшифровка.Счет);
			
			СписокСубконто=Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрокаСубконто ИЗ СписокСубконто Цикл
				
				Если СтрокаСубконто.ВидСубконто="Контрагенты" Тогда
					СтрокаСубконто.ВидСубконто="Контрагент";
				ИначеЕсли СтрокаСубконто.ВидСубконто="Проекты" Тогда
					СтрокаСубконто.ВидСубконто="Проект";
				ИначеЕсли СтрокаСубконто.ВидСубконто="СтатьиОборотов" Тогда
					СтрокаСубконто.ВидСубконто="СтатьяОборотов";
				КонецЕсли;
				
			КонецЦикла;
									 	
			Для Каждого ДИ ИЗ ДоступныеИзмерения Цикл
				
				Если НЕ СписокСубконто.Найти(ДИ.Ключ,"ВидСубконто")=Неопределено Тогда
					
					СписокВыбора.Добавить(ДИ.Ключ, ДИ.Значение);
					ИмяДобавляемогоИзмерения = ДИ.Ключ;
					ПредставлениеДобавляемогоИзмерения = ДИ.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

		СписокВыбора.СортироватьПоПредставлению();
 
		СписокВыбора.Добавить(-1, "Сравнение оборотов по статьям");
		СписокВыбора.Добавить(-2,"Ввести бюджетную операцию");

		Выбор = СписокВыбора.ВыбратьЭлемент("Выберите действие", СписокВыбора[СписокВыбора.Количество()-1]);

		Если Выбор = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Выбор.Значение=-1 Тогда
					
			РасшифровкаДвижений(Расшифровка,ЭтотОтчет,Выбор);
			
		ИначеЕсли Выбор.Значение=-2 Тогда
			
			СоздатьОперацию(Расшифровка,ЭтотОтчет);
			
		Иначе
			
			РасшифровкаТекущимОтчетом (Расшифровка,ЭтотОтчет,Выбор.Значение);
			
		КонецЕсли;
						
	КонецЕсли;
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ПостроительОтчета;

КонецФункции // ПолучитьПостроительОтчета()

	// Настраивает отчет для параметрического вызова
//
// Параметры
//  СтруктураПараметров  – Структура, Соответсвие – содержит список параметров:
//	ДатаНач,
//	ДатаКон,
//	ИмяРегистра,
//	ЗаполнитьПоУмолчанию,
//	ПоказыватьЗаголовок,
//	ВыводитьПоказателиВСтроку,
//	ВыводитьИтогиПоВсемУровням,
//	ВыводитьДополнительныеПолявОтдельнойКолонке,
//	РаскрашиватьИзмерения
//	ГруппировкиСтрок  - структура или соответсвие,
//	ГруппировкиКолонок- структура или соответствие,
//	Показатели - таблица значений,
//	Отбор - структура или соответсвие
//
Процедура Настроить(СтруктураПараметров, ЗаполняемыйОбъект = Неопределено) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	
	// Это свойство влияет на заполнение	
	СтатьяБаланса = Параметры["СтатьяБаланса"];
	
	// Прочие свойства
	ВыводитьАбсолютныеОтклонения  = Параметры["ВыводитьАбсолютныеОтклонения"];
	ВыводитьОтносительныеОтклонения = Параметры["ВыводитьОтносительныеОтклонения"];
	РаскрашиватьИзмерения = Параметры["РаскрашиватьИзмерения"];
	ПоказыватьЗаголовок      = Параметры["ПоказыватьЗаголовок"];
	
	ТаблицаСценарии.Загрузить(Параметры["ТаблицаСценарии"]);
	
	Если ЗаполняемыйОбъект = Неопределено Тогда
		ЗаполняемыйОбъект = ЭтотОбъект;
	КонецЕсли;
	
	Если Параметры["ЗаполнитьПоУмолчанию"] = Истина Тогда
		
		// Настраиваем по умолчанию
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
	Иначе
		
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
		ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ПостроительОтчета.ИзмеренияКолонки.Очистить();
		ПостроительОтчета.ВыбранныеПоля.Очистить();

		Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
			ПостроительОтчета.Отбор.Удалить(0);
		КонецЦикла; 
		
		// Группировки строк
		
		ГруппировкиСтрок = Параметры["ГруппировкиСтрок"];
		Если ТипЗнч(ГруппировкиСтрок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиСтрок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияСтроки.Очистить();
			
			Для каждого Строка Из ГруппировкиСтрок Цикл
				
				ПостроительОтчета.ИзмеренияСтроки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Группировки колонок
		
		ГруппировкиКолонок = Параметры["ГруппировкиКолонок"];
		Если ТипЗнч(ГруппировкиКолонок) = Тип("Соответствие")
			ИЛИ ТипЗнч(ГруппировкиКолонок) = Тип("Структура") Тогда
			
			ПостроительОтчета.ИзмеренияКолонки.Очистить();
			
			Для каждого Строка Из ГруппировкиКолонок Цикл
				
				ПостроительОтчета.ИзмеренияКолонки.Добавить(Строка.Ключ);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Показатели: флажки использования
		
		ТаблицаПоказатели = Параметры["Показатели"];
		Если ТипЗнч(ТаблицаПоказатели) = Тип("ТаблицаЗначений") 
			И ТаблицаПоказатели.Колонки.Найти("Имя")<>Неопределено
			И ТаблицаПоказатели.Колонки.Найти("Использование")<>Неопределено Тогда
			
			Для Каждого Строка Из Показатели Цикл
				
				НайдСтрока = ТаблицаПоказатели.Найти(Строка.Имя, "Имя");
				Если НайдСтрока<>Неопределено Тогда
					Строка.Использование = НайдСтрока.Использование;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	
	// Выбранные поля
	
	ВыбранныеПоля = Параметры["ВыбранныеПоля"];
	Если ТипЗнч(ВыбранныеПоля) = Тип("Соответствие")
		ИЛИ ТипЗнч(ВыбранныеПоля) = Тип("Структура") Тогда
		
		ПостроительОтчета.ВыбранныеПоля.Очистить();
		
		Для каждого Строка Из ВыбранныеПоля Цикл
		
			ПостроительОтчета.ВыбранныеПоля.Добавить(Строка.Ключ);
		
		КонецЦикла; 
		
	КонецЕсли;
	
	// Отбор, заданный списком
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
			ПостроительОтчета.Отбор.Удалить(0);
		КонецЦикла; 

		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

мЗначимыеГруппировкиГор=Новый ("СписокЗначений");
мСоответствиеНомера=Новый Соответствие;
#КонецЕсли
