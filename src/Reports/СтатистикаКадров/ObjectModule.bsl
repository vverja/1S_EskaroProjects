
#Если Клиент Тогда

// Отчет выбираест работающих по регистру РаботникиОрганизации

Перем мОсновнойИсточник Экспорт; 	    // Имя основного источника данных
Перем мТаблицаОписанияВсехПолей Экспорт;//Таблица описания информации о всех полях
Перем мТаблицаГруппировки Экспорт;      // Все возможные группировки
Перем мТаблицаПоказатели Экспорт;       // Все возможные показатели
Перем мТаблицаФильтры Экспорт;          // Все возможные фильтры
Перем мТаблицаПараметрыЗапроса Экспорт; // Значения параметров запроса
Перем мНастройка Экспорт;			    // Текущий вариант настройки отчета
Перем мИмяОтчета Экспорт;			    // Имя этого отчета
Перем мРезультатЗапроса Экспорт;	    // Последний сформированный результат запроса
Перем мСтруктураНеСохраняемыеВНастройкеРеквизиты Экспорт;	// Структура, содержит реквизиты отчета, не подлежащие сохранению

// описание типов переменных
Перем мОписаниеТиповСтрока Экспорт;
Перем мОписаниеТиповБулево Экспорт;
Перем мОписаниеТиповЧисло Экспорт;
Перем мОписаниеТиповТаблицаЗначений Экспорт;
Перем мОписаниеТиповСтрокаНеограниченная Экспорт;

// Массив доступных видов отчета
Перем мМассивВидыОтчета Экспорт;

Процедура ДействияПриИзмененииЗначенияОтбора(Элемент,Отчет,Форма) Экспорт

	ИмяОтбора = "";
	ИмяПоля = Элемент.Имя;
	Если Форма.СтруктураСвязиЭлементовСДанными.Свойство(ИмяПоля,ИмяОтбора) Тогда
		НомерПоля = Прав(ИмяПоля,1);
		
		СтрокаТаблицыОтборов = Отчет.мТаблицаФильтры.Найти(ИмяОтбора,"ИмяПоля");
		ТипПоля = СтрокаТаблицыОтборов.ОписаниеТипов;
		ПустойСписок = Новый СписокЗначений;
		ПустойСписок.ТипЗначения = ТипПоля;
		МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(Элемент.Значение));
		Если МетаданныеЗначения <> Неопределено Тогда
			Если Метаданные.Справочники.Найти(МетаданныеЗначения.Имя) <> Неопределено Тогда
				Если ЗначениеЗаполнено(Элемент.Значение) и Элемент.Значение.ЭтоГруппа Тогда
					ПустойСписок.Добавить(Элемент.Значение);
					Элемент.Значение = ПустойСписок;
					Элемент.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
					Форма["ВидСравнения" + НомерПоля] = ВидСравнения.ВСпискеПоИерархии;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(Элемент.Значение) или (ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") и Элемент.Значение.Количество() = 0) Тогда
				ВидСравненияОтбора = Форма["ВидСравнения" + НомерПоля];
				Если (ВидСравненияОтбора = ВидСравнения.ВСписке)
					Или (ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии)
					Или (ВидСравненияОтбора = ВидСравнения.НеВСписке)
					Или (ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии) Тогда
					Элемент.Значение = ПустойСписок;
				Иначе
					Элемент.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ТипПоля.Типы()[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Форма["ФлажокНастройки" + НомерПоля] = Истина;
		КонецЕсли;
		
		ОбновитьЗначенияОтбораВОтчете(ИмяОтбора,Форма["ФлажокНастройки" + НомерПоля],Форма["ВидСравнения" + НомерПоля],Элемент.Значение,Отчет.ОтборыОтчета,СтрокаТаблицыОтборов);
		
	КонецЕсли;

КонецПроцедуры // ДействияПриИзмененииЗначенияОтбора()

// Вывод серии точек диаграммы (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	НомерТочки    - число, номер выводимой точки
//
Процедура ВывестиТочкиДиаграммы(Выборка, СтруктураПараметров, НомерТочки, ТипЗаписиВыборки, ИмяГруппировки)

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке и ИмяГруппировки = СтруктураПараметров.ИмяГруппировкиСерийДиаграммы Тогда

		КоличествоИтоговыхПолей = СтруктураПараметров.КоличествоИтоговыхПолей;
		ТаблицаДиаграммы = СтруктураПараметров.ТаблицаДиаграммы;

		ЗначениеГруппировки = "";

		Если Найти(ИмяГруппировки,"ПоИнтервалам") <> 0 Тогда
			
			НомерИнтервала = Выборка[ИмяГруппировки];
			Если (НомерИнтервала <> NULL) и (НомерИнтервала <> 0)  тогда
				ИнтервалыГруппировокОтчета = СтруктураПараметров.ИнтервалыГруппировокОтчета;
				ЗначениеТекущейГруппировки = ИнтервалыГруппировокОтчета[НомерИнтервала-1].ИмяИнтервала;
			Иначе	
				ЗначениеТекущейГруппировки = "<Вне интервалов>";
			КонецЕсли;
			
		Иначе
			
			ЗначениеТекущейГруппировки = Выборка[ИмяГруппировки + "Представление"];
			Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
				ЗначениеТекущейГруппировки = "<...>";
			КонецЕсли;
		КонецЕсли;

		ЗначениеГруппировки = ЗначениеТекущейГруппировки;

		ИмяСерии = ?(ИмяГруппировки = "Месяц",Формат(ЗначениеГруппировки,"ДФ='ММММ гггг'"),СокрЛП(ЗначениеГруппировки));
		ВсегоПоказателей = СтруктураПараметров.МассивПоказатели.Количество();
		Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказатели Цикл
			ЗначениеПоказателя = "";
			ДобавлятьВДиаграмму = КоличествоИтоговыхПолей = ВсегоПоказателей;
			Если Не ДобавлятьВДиаграмму Тогда
				СтрокаПоказателя = ПоказателиОтчета.Найти(ИмяПоказателя,"ИмяПоказателя");
                ДобавлятьВДиаграмму = СтрокаПоказателя.ИтоговоеПоле;
			КонецЕсли;
			Если ДобавлятьВДиаграмму Тогда
				СтрокаТочек=ТаблицаДиаграммы.Добавить();
				СтрокаТочек.ИмяСерии = ИмяСерии + ?(КоличествоИтоговыхПолей = 1,""," (" + ИмяПоказателя +")");
				СтрокаТочек[НомерТочки]=Выборка[ИмяПоказателя];
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры // ВывестиТочкиДиаграммы()

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//
Процедура ВывестиСтроку(Выборка, СтруктураПараметров, ТипЗаписиВыборки, ИмяГруппировки)

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда

		СтрокаПуста = Истина;
		Для Каждого Показатель Из ПоказателиОтчета Цикл
			Если Не Показатель.ИтоговоеПоле Тогда
				СтрокаПуста = СтрокаПуста и НЕ ЗначениеЗаполнено(Выборка[Показатель.ИмяПоказателя]);
			КонецЕсли; 
			Если Не СтрокаПуста Тогда
				Прервать
			КонецЕсли;
		КонецЦикла;

		Если СтрокаПуста Тогда // ни одного значащего показателя
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = СтруктураПараметров.ЗначениеГруппировки;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;

	СтруктураВыводГруппировок = СтруктураПараметров.СтруктураВыводГруппировок;
	КоличествоИтоговыхПолей = СтруктураПараметров.КоличествоИтоговыхПолей;
	УровеньОкрашиваемойЗаписи = СтруктураПараметров.УровеньОкрашиваемойЗаписи;
	
	УровеньЗаписи   = Выборка.Уровень();

	ТабДок = СтруктураПараметров.ТабДок;

	ЗначениеГруппировки = "";

	ЗначениеРасшифровки = Неопределено;

	МассивВыводГруппировок = Новый Массив;

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

		ЗначениеГруппировки = Выборка[ИмяГруппировки + "Представление"];
		Если ЗначениеЗаполнено(ЗначениеГруппировки) Тогда
			ЗначениеРасшифровки = Выборка[ИмяГруппировки];
		Иначе
			ЗначениеГруппировки = "<...>";
		КонецЕсли;

	ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

		Если Найти(ИмяГруппировки,"ПоИнтервалам") <> 0 Тогда
			
			НомерИнтервала = Выборка[ИмяГруппировки];
			Если (НомерИнтервала <> NULL) и (НомерИнтервала <> 0)  тогда
				ЗначениеГруппировки = СтруктураПараметров.ИнтервалыГруппировокОтчета[НомерИнтервала-1].ИмяИнтервала;
			Иначе	
				ЗначениеГруппировки = "<Вне интервалов>";
			КонецЕсли;
			
		Иначе
			
			ЗначениеГруппировки = Выборка[ИмяГруппировки + "Представление"];
			Если ЗначениеЗаполнено(ЗначениеГруппировки) Тогда
				ЗначениеРасшифровки = Выборка[ИмяГруппировки];
			Иначе
				ЗначениеГруппировки = "<...>";
			КонецЕсли;

		КонецЕсли;	

	ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ОбщийИтог Тогда
		ЗначениеГруппировки = "ИТОГО: ";
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьОбщийОтступ, УровеньЗаписи);

	ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = ?(ТипЗнч(ЗначениеГруппировки) = Тип("Строка"),СокрЛП(ЗначениеГруппировки),ЗначениеГруппировки);
	ОбластьЗначениеГруппировки.Параметры.Расшифровка = ЗначениеРасшифровки;

	ОбластьЗначениеГруппировки.Область().Отступ = УровеньЗаписи;
	ТабДок.Присоединить(ОбластьЗначениеГруппировки);

	// Вывод показателей
	Для Каждого Показатель Из ПоказателиОтчета Цикл

		РасшифровкаПоказателя = Неопределено;
			
		Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ДетальнаяЗапись и Показатель.ИтоговоеПоле Тогда
			// Итоговые поля в детальных записях не показываем
			ПредставлениеПоказателя = "";

		Иначе

			ИмяПоказателя = Показатель.ИмяПоказателя;
			ЗначениеПоказателя = Выборка[ИмяПоказателя];
            ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);

			Если ТипЗначенияПоказателя <> Тип("Число") И ТипЗначенияПоказателя <> Тип("Строка")
				 И ТипЗначенияПоказателя <> Тип("Дата") И ТипЗначенияПоказателя <> Тип("Булево") 
				 И ЗначениеПоказателя <> Null Тогда

				ПредставлениеПоказателя = Выборка[ИмяПоказателя + "Представление"];

				// Расшифровка доступна только для непримитивных непустых значений
				ПустоеЗначениеТипа = Новый(ТипЗначенияПоказателя);
				Если (ЗначениеПоказателя <> ПустоеЗначениеТипа) И (Метаданные.Перечисления.Найти(ПустоеЗначениеТипа.Метаданные().Имя) = Неопределено) Тогда
					РасшифровкаПоказателя = ЗначениеПоказателя;
				КонецЕсли; 

			Иначе// Примитивный тип данных	
				ПредставлениеПоказателя = ЗначениеПоказателя;
			КонецЕсли;

			//Преобразование представления показателя
			Если Найти(ИмяПоказателя,"МестоРождения") <> 0 тогда
				ПредставлениеПоказателя = РегламентированнаяОтчетность.ПредставлениеМестаРождения(ПредставлениеПоказателя);
			ИначеЕсли Найти(ИмяПоказателя,"КонтактнаяИнформация") <> 0 тогда
				Если Лев(Показатель.ПредставлениеПоказателя,5) = "Адрес" тогда
					Если Найти(Показатель.ПредставлениеПоказателя,"Адрес электронной почты") = 0 тогда
						ПредставлениеПоказателя = РегламентированнаяОтчетность.ПредставлениеАдреса(ПредставлениеПоказателя);
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 

		КонецЕсли;
		ОбластьЗначенияПоказателя.Параметры.Расшифровка = РасшифровкаПоказателя;
		ОбластьЗначенияПоказателя.Параметры.Значение = ПредставлениеПоказателя;
		ТабДок.Присоединить(ОбластьЗначенияПоказателя);
	КонецЦикла;

	ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы, 2).РазмещениеТекста =  ТипРазмещенияТекстаТабличногоДокумента.Переносить;

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ОбщийИтог Тогда
		ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы, 2).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	ИначеЕсли ТипЗаписиВыборки <> ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
		Если УровеньЗаписи = УровеньОкрашиваемойЗаписи Тогда
			ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
		Иначе
			ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВывестиСтроку()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//	НомерТочки    - число, номер точки диаграммы
//
Процедура ВывестиВыборку(Выборка, СтруктураПараметров, Номер, НомерТочки = 0)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	ВариантВизуализации = СтруктураПараметров.ВариантВизуализации;
    	
	Если ВариантВизуализации = "ТабличныйДокумент" Тогда

		ВыводитьДетальныеЗаписи = СтруктураПараметров.ВыводитьДетальныеЗаписи;
		// Берутся группировки все подряд, 
		Пока Выборка.Следующий() Цикл
			ВывестиСтроку(Выборка, СтруктураПараметров, Выборка.ТипЗаписи(), Выборка.Группировка());
			// В некоторых случаях детальные записи не нужны: для последней группировки после итогов оп группировке идут 
			// детальные записи
			Если Не ВыводитьДетальныеЗаписи И Номер = ВсегоГруппировок - 1 И Выборка.ТипЗаписи() =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
				Продолжить;
			КонецЕсли;
			ВывестиВыборку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1, НомерТочки);
		КонецЦикла;
	Иначе

		ТаблицаПоиска = СтруктураПараметров.ТаблицаГруппировкиДиаграммы;
		// Берутся группировки все подряд, 
		Пока Выборка.Следующий() Цикл
			ИмяГруппировки = Выборка.Группировка();
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке и ИмяГруппировки = СтруктураПараметров.ИмяГруппировкиТочекДиаграммы и СтруктураПараметров.КоличествоИтоговыхПолей > 0 Тогда
				НомерТочки = ТаблицаПоиска.Индекс(ТаблицаПоиска.Найти(Выборка[ИмяГруппировки],СтруктураПараметров.ИмяГруппировкиТочекДиаграммы));
			КонецЕсли;
			ВывестиТочкиДиаграммы(Выборка, СтруктураПараметров, НомерТочки + 1, Выборка.ТипЗаписи(), Выборка.Группировка());
			// Детальные записи не нужны: для последней группировки после итогов оп группировке идут 
			// детальные записи
			Если  Номер = ВсегоГруппировок - 1 И Выборка.ТипЗаписи() =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
				Продолжить;
			КонецЕсли;
			ВывестиВыборку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1, НомерТочки);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВывестиВыборку()

// Обход дерева значений по группировкам для вывода строк отчета
Процедура ВывестиДеревоЗначений(СтрокиДерева, СтруктураПараметров, Номер, НомерТочки = 0)

   	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	ВариантВизуализации = СтруктураПараметров.ВариантВизуализации;
    	
	Если ВариантВизуализации = "ТабличныйДокумент" Тогда

		ВыводитьДетальныеЗаписи = СтруктураПараметров.ВыводитьДетальныеЗаписи;

		Для каждого Строка Из СтрокиДерева цикл

			ВывестиСтроку(Строка, СтруктураПараметров, Строка.ТипЗаписиЗапроса, Строка.ИмяГруппировкиЗапроса);

			// В некоторых случаях детальные записи не нужны: для последней группировки после итогов по группировке идут детальные записи
			Если Не ВыводитьДетальныеЗаписи И Номер = ВсегоГруппировок - 1 И Строка.ТипЗаписиЗапроса =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
				Продолжить;
			КонецЕсли;

			ВывестиДеревоЗначений(Строка.Строки, СтруктураПараметров, Номер + 1, НомерТочки);

		КонецЦикла; 

   	Иначе

		ТаблицаПоиска = СтруктураПараметров.ТаблицаГруппировкиДиаграммы;
		// Берутся группировки все подряд, 
		Для каждого Строка Из СтрокиДерева цикл
			ИмяГруппировки = Строка.ИмяГруппировкиЗапроса;
			Если Строка.ТипЗаписиЗапроса = ТипЗаписиЗапроса.ИтогПоГруппировке и ИмяГруппировки = СтруктураПараметров.ИмяГруппировкиТочекДиаграммы и СтруктураПараметров.КоличествоИтоговыхПолей > 0 Тогда
				НомерТочки = ТаблицаПоиска.Индекс(ТаблицаПоиска.Найти(Строка[ИмяГруппировки],СтруктураПараметров.ИмяГруппировкиТочекДиаграммы));
			КонецЕсли;
			ВывестиТочкиДиаграммы(Строка, СтруктураПараметров, НомерТочки + 1, Строка.ТипЗаписиЗапроса, Строка.ИмяГруппировкиЗапроса);

			// Детальные записи не нужны: для последней группировки после итогов оп группировке идут 
			// детальные записи
			Если  Номер = ВсегоГруппировок - 1 И Строка.ТипЗаписиЗапроса =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
				Продолжить;
			КонецЕсли;
			ВывестиДеревоЗначений(Строка.Строки, СтруктураПараметров, Номер + 1, НомерТочки);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Выполняет проверку корректности настройки отчета
Функция ПроверитьКорректностьНастройкиОтчета(Отчет)

	СтрОшибки  = "";
	
	Для каждого Группировка Из Отчет.ГруппировкиОтчета Цикл
		Если Отчет.мТаблицаГруппировки.Найти(Группировка.ИмяГруппировки, "ИмяПоля") = Неопределено Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " Задана неверная группировка: "+Группировка.ПредставлениеГруппировки;			
		КонецЕсли; 
	КонецЦикла; 

	Для каждого Показатель Из Отчет.ПоказателиОтчета Цикл
		Если Отчет.мТаблицаПоказатели.Найти(Показатель.ИмяПоказателя, "ИмяПоля") = Неопределено Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " Задан неверный показатель: "+Показатель.ПредставлениеПоказателя;			
		КонецЕсли; 
	КонецЦикла; 

	Для каждого Отбор Из Отчет.ОтборыОтчета Цикл
		Если Отчет.мТаблицаФильтры.Найти(Отбор.ИмяОтбора, "ИмяПоля") = Неопределено Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " Задан неверный отбор: "+Отбор.ПредставлениеОтбора;			
		КонецЕсли; 
	КонецЦикла; 

	Если СтрОшибки <> "" Тогда
		Сообщить("В настройке отчета обнаружены ошибки:"+СтрОшибки+Символы.ПС);
		Возврат Ложь;
	Иначе	
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьДокументРезультатОтчета(Отчет, ДокументРезультат, ФормироватьЗапрос = Истина, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ЕстьОшибки = Ложь, ТаблицаДиаграммы = "", ИмяСерииПредставление = "") Экспорт

	Если Отчет.ПоказателиОтчета.Количество() = 0 Тогда
        Предупреждение("Не указан ни один показатель!" + Символы.ПС + "Отчет не сформирован!");
		ЕстьОшибки = Истина;
		Возврат
	КонецЕсли;

	ТипРезультата = ТипЗнч(ДокументРезультат);
	Если ТипРезультата = Тип("ПолеТабличногоДокумента") Тогда
		ВариантВизуализации = "ТабличныйДокумент"
	ИначеЕсли ТипРезультата = Тип("Диаграмма") Тогда	
		ВариантВизуализации = "Диаграмма"
	ИначеЕсли ТипРезультата = Тип("ВстроеннаяТаблица") Тогда	
		ВариантВизуализации = "СводнаяТаблица"
	Иначе
		ЕстьОшибки = Истина;
		Возврат
	КонецЕсли;
	
	Для Каждого Строка Из Отчет.ПоказателиОтчета цикл
        // Если не задано представление, берем его из имени
		Если ПустаяСтрока(Строка.ПредставлениеПоказателя) Тогда
			Строка.ПредставлениеПоказателя = Строка.ИмяПоказателя;
		КонецЕсли;
	КонецЦикла;

	Если ФормироватьЗапрос Тогда
		Если НЕ ПроверитьКорректностьНастройкиОтчета(Отчет) Тогда
			Предупреждение("Отчет не сформирован. Отредактируйте настройку отчета!");
			ЕстьОшибки = Истина;
			Возврат
		КонецЕсли; 
		СформированныйЗапрос = Отчет.СформироватьЗапрос();
		Если СформированныйЗапрос = Неопределено Тогда
			Сообщить("Запрошен слишком сложный отчет. Упростите отчет, уменьшив число группировок отчета или число выводимых показателей.");
			Возврат
		КонецЕсли; 
		Отчет.мРезультатЗапроса = СформированныйЗапрос;
	КонецЕсли;

	// Структура вывода группировок: ключи определяют "основные" группировки,
	СтруктураВыводГруппировок = Новый Структура;
	МассивГруппировки    = Новый Массив;

	ВсегоГруппировок = 1;
	КолГруппировокБезИтогов = 0;
	Массив = Новый Массив;

	СтруктураПараметров = Новый Структура;
	
	ИмяГруппировкиТочекДиаграммы = "";
	ИмяГруппировкиСерийДиаграммы = "";
	Для Каждого СтрокаГруппировки Из Отчет.ГруппировкиОтчета Цикл

		Если Найти(СтрокаГруппировки.ПредставлениеГруппировки,": по интервалам") > 0 Тогда
			
            ИмяГруппировки = СтрокаГруппировки.ИмяГруппировки+"ПоИнтервалам";
			СтруктураПараметров.Вставить("ИнтервалыГруппировокОтчета",Отчет.ИнтервалыГруппировокОтчета);
			
		Иначе
            ИмяГруппировки = СтрокаГруппировки.ИмяГруппировки
		КонецЕсли;	
		
        ПредставлениеГруппировки = СтрокаГруппировки.ПредставлениеГруппировки;

		Если НЕ ЗначениеЗаполнено(ИмяГруппировкиТочекДиаграммы) Тогда
			ИмяГруппировкиТочекДиаграммы = ИмяГруппировки;
			ИмяСерииПредставление		 = ПредставлениеГруппировки;
		ИначеЕсли НЕ ЗначениеЗаполнено(ИмяГруппировкиСерийДиаграммы) Тогда
			ИмяГруппировкиСерийДиаграммы = ИмяГруппировки
		КонецЕсли;

		СтруктураВыводГруппировок.Вставить(СтрокаГруппировки.ИмяГруппировки, Массив);
		Массив = Новый Массив;

		ВсегоГруппировок = ВсегоГруппировок + 1;
		МассивГруппировки.Добавить(СтрокаГруппировки.ИмяГруппировки);

	КонецЦикла;

	// Массив всех группировок запроса, т.е. как выводимых, так и пропускаемых
	СтруктураПараметров.Вставить("МассивГруппировки",		МассивГруппировки);

	// Общее количество группировок запроса, т.е. как выводимых, так и пропускаемых
	СтруктураПараметров.Вставить("ВсегоГруппировок", 		ВсегоГруппировок);

	// Заполненная структура вывода группировок
	СтруктураПараметров.Вставить("СтруктураВыводГруппировок", СтруктураВыводГруппировок);

	// Массив выводимых показателей отчета
	СтруктураПараметров.Вставить("МассивПоказатели",		Отчет.ПоказателиОтчета.ВыгрузитьКолонку("ИмяПоказателя"));
	
	КоличествоИтоговыхПолей = Отчет.ПоказателиОтчета.НайтиСтроки(Новый Структура("ИтоговоеПоле",Истина)).Количество();
	СтруктураПараметров.Вставить("КоличествоИтоговыхПолей", КоличествоИтоговыхПолей);

	СтруктураПараметров.Вставить("ВариантВизуализации", 	ВариантВизуализации);
	
	Если ВариантВизуализации = "Диаграмма" Тогда

		ДокументРезультат.Очистить();
		
        Если Отчет.мРезультатЗапроса = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		ТаблицаДиаграммы = Новый ТаблицаЗначений;
		ТаблицаДиаграммы.Колонки.Добавить("ИмяСерии",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));

		Если ТипЗнч(Отчет.мРезультатЗапроса) = Тип("ДеревоЗначений") Тогда
			Если Отчет.мРезультатЗапроса.Строки[0].ТипЗаписиЗапроса = ТипЗаписиЗапроса.ОбщийИтог тогда
				СтрокиДереваПервогоУровня = Отчет.мРезультатЗапроса.Строки[0].Строки;
			иначе
				СтрокиДереваПервогоУровня = Отчет.мРезультатЗапроса.Строки;
			КонецЕсли;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ИмяГруппировкиСерийДиаграммы + ИмяГруппировкиТочекДиаграммы) Тогда
			Если НЕ ЗначениеЗаполнено(ИмяГруппировкиСерийДиаграммы) Тогда
				ИмяГруппировкиСерийДиаграммы = ИмяГруппировкиТочекДиаграммы;
				ИмяГруппировкиТочекДиаграммы = "";
				ТаблицаДиаграммы.Колонки.Добавить("_"+Строка(ТаблицаДиаграммы.Колонки.Количество()+1),ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2),
													Отчет.ГруппировкиОтчета.Найти(ИмяГруппировкиСерийДиаграммы,"ИмяГруппировки").ПредставлениеГруппировки);

			Иначе

				ГруппировкаИнтервальная = Найти(ИмяГруппировкиТочекДиаграммы,"ПоИнтервалам") <> 0;
				ПолеПредставлениеГруппировкиТочекДиаграммы = ИмяГруппировкиТочекДиаграммы + ?(НЕ ГруппировкаИнтервальная,"Представление","");

				// Заполним таблицу группировок диаграммы
				Если ТипЗнч(Отчет.мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
					ТаблицаГруппировкиДиаграммы = Отчет.мРезультатЗапроса.Выгрузить();
					//Удалим строку - общий итог
					Если ТаблицаГруппировкиДиаграммы.Количество() > 0 Тогда
						ПерваяСтрока = ТаблицаГруппировкиДиаграммы[0];
						Если НЕ ЗначениеЗаполнено(ПерваяСтрока[ИмяГруппировкиТочекДиаграммы]) Тогда
							ТаблицаГруппировкиДиаграммы.Удалить(0);
						КонецЕсли;
					КонецЕсли;
					ТаблицаГруппировкиДиаграммы.Свернуть(ИмяГруппировкиТочекДиаграммы + ?(Найти(НЕ ГруппировкаИнтервальная,"ПоИнтервалам")=0,"," + ПолеПредставлениеГруппировкиТочекДиаграммы,""));
				Иначе

					ТаблицаГруппировкиДиаграммы = Новый ТаблицаЗначений();
					ТаблицаГруппировкиДиаграммы.Колонки.Добавить(ИмяГруппировкиТочекДиаграммы);
					Если НЕ ГруппировкаИнтервальная Тогда
						ТаблицаГруппировкиДиаграммы.Колонки.Добавить(ПолеПредставлениеГруппировкиТочекДиаграммы);
					КонецЕсли; 
					
					Для каждого СтрокаДерева Из СтрокиДереваПервогоУровня Цикл
						НоваяСтрока = ТаблицаГруппировкиДиаграммы.Добавить();
						НоваяСтрока[ИмяГруппировкиТочекДиаграммы] = СтрокаДерева[ИмяГруппировкиТочекДиаграммы];
						Если НЕ ГруппировкаИнтервальная Тогда
							НоваяСтрока[ПолеПредставлениеГруппировкиТочекДиаграммы] = СтрокаДерева[ПолеПредставлениеГруппировкиТочекДиаграммы];
						КонецЕсли;	
					КонецЦикла; 
				КонецЕсли;	

				ТаблицаГруппировкиДиаграммы.Сортировать(ИмяГруппировкиТочекДиаграммы);

				Для каждого Строка Из ТаблицаГруппировкиДиаграммы Цикл
					ТаблицаДиаграммы.Колонки.Добавить("_"+Строка(ТаблицаДиаграммы.Колонки.Количество()+1),ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2),
														?(ИмяГруппировкиТочекДиаграммы = "Месяц",Формат(Строка[ПолеПредставлениеГруппировкиТочекДиаграммы],"ДФ='ММММ гггг'"),Строка[ПолеПредставлениеГруппировкиТочекДиаграммы]));
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
		
		// значения точек диаграммы и имена участвующих группировок
		СтруктураПараметров.Вставить("ТаблицаГруппировкиДиаграммы", ТаблицаГруппировкиДиаграммы);
		СтруктураПараметров.Вставить("ИмяГруппировкиТочекДиаграммы",ИмяГруппировкиТочекДиаграммы);
		СтруктураПараметров.Вставить("ИмяГруппировкиСерийДиаграммы",ИмяГруппировкиСерийДиаграммы);
		СтруктураПараметров.Вставить("ТаблицаДиаграммы",			ТаблицаДиаграммы);
		
		Если ТипЗнч(Отчет.мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
			ВывестиВыборку(Отчет.мРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0);	
		Иначе	
			ВывестиДеревоЗначений(СтрокиДереваПервогоУровня, СтруктураПараметров, 0);	
		КонецЕсли; 

		СтрКолонкиДляСвертки="";

		Для Индекс=1 По ТаблицаДиаграммы.Колонки.Количество()-1 Цикл
			СтрКолонкиДляСвертки = СтрКолонкиДляСвертки + "," + ТаблицаДиаграммы.Колонки[Индекс].Имя;
		КонецЦикла;

		СтрКолонкиДляСвертки = Сред(СтрКолонкиДляСвертки, 2);

		ТаблицаДиаграммы.Свернуть("ИмяСерии",СтрКолонкиДляСвертки);

		//ДокументРезультат.СерииВСтроках = НЕ ЗначениеЗаполнено(ИмяГруппировкиТочекДиаграммы);
		ДокументРезультат.СерииВСтроках = Ложь;
		Если ТаблицаДиаграммы.Количество() > 0 Тогда
			ДокументРезультат.ИсточникДанных = ТаблицаДиаграммы.Скопировать();
		КонецЕсли;

		ДокументРезультат.МаксимумСерий = МаксимумСерий.Ограничено;
		ДокументРезультат.МаксимумСерийКоличество = ДокументРезультат.Серии.Количество();
		
	ИначеЕсли ВариантВизуализации = "ТабличныйДокумент" Тогда
		
		ДокументРезультат.Очистить();

		Макет=ПолучитьМакет("МакетТаблицы");
		// Области строки отчета - табличные документы из макета отчета
		СтруктураПараметров.Вставить("ОбщийОтступ",				Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
		СтруктураПараметров.Вставить("ЗначениеГруппировки",		Макет.ПолучитьОбласть("Значение|Строка"));
		СтруктураПараметров.Вставить("ЗначенияПоказателя",		Макет.ПолучитьОбласть("Показатель|Строка"));

		// Табличный документ - результат отчета
		СтруктураПараметров.Вставить("ТабДок",					ДокументРезультат);

		
		// Наклонный шрифт для групп
		СтруктураПараметров.Вставить("ШрифтГрупп", 				Новый Шрифт(Макет.Область("Строка|Показатель").Шрифт,,,,Истина));

		// передадим уровень записей, которые выделять другим фоном
		СтруктураПараметров.Вставить("УровеньОкрашиваемойЗаписи", ?(КоличествоИтоговыхПолей=0,0,1));
		
	    // Форматная строка для вывода показателей
		СтруктураПараметров.Вставить("ФорматПоказателей", 		Новый Структура);

		//Для Каждого Строка Из Отчет.ПоказателиОтчета Цикл
		//	МетаданныеРесурса = 0;
		//	ФорматнаяСтрока = "";

		//	Нстр = Отчет.мТаблицаПоказатели.Найти(Строка.ИмяПоказателя, "ИмяПоля");
		//	Если Не (Нстр = Неопределено) Тогда
		//		ФорматнаяСтрока = НСтр.ФорматнаяСтрока;
		//	КонецЕсли;

		//	// Если не задано при начальном заполнении, то из метаданных
		//	Если ПустаяСтрока(ФорматнаяСтрока) Тогда
		//		Если мСтруктураОписаниеПоказателей.Свойство(Строка.ИмяПоказателя, МетаданныеРесурса) Тогда
		//			ФорматнаяСтрока = "ЧЦ = " + Строка(МетаданныеРесурса.Тип.КвалификаторыЧисла.Разрядность) + " ; ЧДЦ = " + Строка(МетаданныеРесурса.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти) + " ; ЧРГ = "" ""; ЧРД = ,";
		//		КонецЕсли;
		//	КонецЕсли;

		//	СтруктураПараметров.ФорматПоказателей.Вставить(Строка.ИмяПоказателя, ФорматнаяСтрока);
		//КонецЦикла;

		СтруктураПараметров.Вставить("ВыводитьДетальныеЗаписи", 	Отчет.ПоказателиОтчета.Количество() > КоличествоИтоговыхПолей);
		
		ОбластьЗаголовка = СформироватьЗаголовокОтчета(Отчет);
		ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
		ДокументРезультат.Вывести(ОбластьЗаголовка);
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;

        Если Отчет.мРезультатЗапроса = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаТаблицы"));
		ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("Значение|ШапкаТаблицы"));
		ОбластьПоказатель = Макет.ПолучитьОбласть("Показатель|ШапкаТаблицы");
		Для Каждого Показатель Из Отчет.ПоказателиОтчета Цикл
			ОбластьПоказатель.Параметры.ИмяПоказателя = Показатель.ПредставлениеПоказателя;
			ДокументРезультат.Присоединить(ОбластьПоказатель);
		КонецЦикла;

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;

		// Вывод строк отчета
		ДокументРезультат.НачатьАвтогруппировкуСтрок();

		Если ТипЗнч(Отчет.мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
			ВывестиВыборку(Отчет.мРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0);	
		Иначе	
			ВывестиДеревоЗначений(Отчет.мРезультатЗапроса.Строки, СтруктураПараметров, 0);	
		КонецЕсли; 

		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
		
	ИначеЕсли ВариантВизуализации = "СводнаяТаблица" Тогда
        Если Отчет.ГруппировкиОтчета.Количество() > 0 и Отчет.мРезультатЗапроса <> Неопределено Тогда
			ДокументРезультат.ИсточникДанных = Отчет.мРезультатЗапроса;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СформироватьДокументРезультатОтчета()

// Выставляет/снимает пометку кнопки Заголовок
//
// Параметры: 
//  КоманднаяПанель - командная панель: кноки которой помечаются
//  КакПометить - булево, признак пометки
//
// Возвращаемое значение:
//  Нет.
//
Процедура ОбработатьКнопкуЗаголовок(КоманднаяПанель,КакПометить) Экспорт
	КоманднаяПанель.Кнопки.Заголовок.Пометка = КакПометить;
	КоманднаяПанель.Кнопки.Подменю.Кнопки.Заголовок.Пометка = КакПометить;
КонецПроцедуры // ОбработатьКнопкуЗаголовок

// Оформляет имеющуюся в форме диаграмму в виде табличного документа
//
// Параметры: 
//  ФормаОтчета - форма, Диаграмма которой печатается
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПечатьДиаграммы(ФормаОтчета) Экспорт

	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
    ПолеМаксимумСерий = ФормаОтчета.ПолеМаксимумСерий;

	ТаблицаЛегенды = ЭлементыФормы.ТаблицаЛегенды.Значение; 
	ВидДиаграммы = ЭлементыФормы.Диаграмма.ТипДиаграммы;

	Если ТаблицаЛегенды.Количество()=0 Тогда
		Предупреждение("Отчет не сформирован!", 60);
		Возврат;
	КонецЕсли;

	ТабДиаграмма=Новый ТабличныйДокумент;

	// Вывод заголовка диаграммы
	Макет=ПолучитьМакет("МакетДиаграмма");
	ТабДиаграмма.Вывести(Макет.ПолучитьОбласть("ДиаграммаВерт|Заголовок"));
	ТабДиаграмма.Присоединить(Макет.ПолучитьОбласть("Легенда|Заголовок"));

	МакетЗаголовка = ПолучитьМакет("МакетТаблицы");
	ОбластьЗначение = МакетЗаголовка.ПолучитьОбласть("Значение|ШапкаВерх");
	ОбластьЗначение.Параметры.ЗаголовокОтчета = ЭлементыФормы.ТекстДиаграммы.Заголовок;
	ТабДиаграмма.Вывести(ОбластьЗначение);

	ТабДиаграмма.Область(ТабДиаграмма.ВысотаТаблицы, 1, ТабДиаграмма.ВысотаТаблицы, ТабДиаграмма.ШиринаТаблицы).Объединить();
	
    НачВставки=ТабДиаграмма.ВысотаТаблицы+1;
	
	ОбластьШапкиЛегенды = Макет.ПолучитьОбласть("Легенда|ШапкаЛегенды");
	ИмяСерииОбщий = ФормаОтчета.ЭлементыФормы.ТаблицаЛегенды.Колонки.ИмяСерии.ТекстШапки;
	ОбластьШапкиЛегенды.Параметры.ИмяСерииОбщий = ИмяСерииОбщий;
	ТабДиаграмма.Вывести(ОбластьШапкиЛегенды);

	ОбластьСерии=Макет.ПолучитьОбласть("Легенда|СтрокаЛегенды");

	Для Каждого СтрЛегенды Из ТаблицаЛегенды Цикл
		ОбластьСерии.Параметры.ИмяСерии=СтрЛегенды.ИмяСерии;
		ТабДиаграмма.Вывести(ОбластьСерии);
		ТабДиаграмма.Область(ТабДиаграмма.ВысотаТаблицы,1,ТабДиаграмма.ВысотаТаблицы,1).ЦветФона=СтрЛегенды.ЦветСерии;
	КонецЦикла;

	КонВставки=ТабДиаграмма.ВысотаТаблицы;
	ТабДиаграмма.Область(КонВставки,1,КонВставки,2).ГраницаСнизу=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);

	ТабДиаграмма.Вывести(Макет.ПолучитьОбласть("ДиаграммаВерт|Диаграмма"));

	ТабДиаграмма.Присоединить(ТабДиаграмма.ПолучитьОбласть(НачВставки,1,КонВставки,2));

	ТабДиаграмма.УдалитьОбласть(ТабДиаграмма.Область(НачВставки,1,КонВставки,ТабДиаграмма.ШиринаТаблицы),ТипСмещенияТабличногоДокумента.ПоВертикали);

	Диаграмма = ТабДиаграмма.Рисунки.РисунокДиаграмма.Объект;
	Диаграмма.СерииВСтроках				= Ложь;
    Диаграмма.МаксимумСерий				= МаксимумСерий.Ограничено;
	Диаграмма.МаксимумСерийКоличество	= ПолеМаксимумСерий;
	Диаграмма.ТипДиаграммы				= ВидДиаграммы;
    Диаграмма.ИсточникДанных			= ФормаОтчета.мТаблицаДиаграммы;
    УстановитьДополнительноеОформлениеДиаграммы(Диаграмма, ВидДиаграммы);
	
	ТабДиаграмма.ОтображатьСетку		= Ложь;
    ТабДиаграмма.ОтображатьЗаголовки	= Ложь;
	ТабДиаграмма.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	ТабДиаграмма.Автомасштаб			= Истина;

	ТабДиаграмма.Показать("Диаграмма: " + ФормаОтчета.Заголовок);
	
КонецПроцедуры // ПечатьДиаграммы()

// Устанавливает оформление "особенных" диаграмм
//
// Параметры: 
//  Диаграмма - объект типа Диаграмма
//  ТипРисуемойДиаграммы - типа системного перечисления ТипДиаграммы
//
// Возвращаемое значение:
//  Нет.
//
Процедура УстановитьДополнительноеОформлениеДиаграммы(Диаграмма, ТипРисуемойДиаграммы) Экспорт

	Если ТипРисуемойДиаграммы = ТипДиаграммы.КруговаяОбъемная или ТипРисуемойДиаграммы = ТипДиаграммы.Круговая Тогда
		Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Процент;
		Диаграмма.АвтоРаздвижениеСерий = АвтоРаздвижениеСерий.Максимум;
	КонецЕсли;

КонецПроцедуры // УстановитьДополнительноеОформлениеДиаграммы

// Обновляет таблицу, диаграмму или сводную таблицу отчета.
//
// Параметры
//  Отчет	     – объект отчета.
//  ФормаОтчета	 – основная форма отчета.
//  ФормироватьЗапрос – булево, если Истина, то заново перечитываются данные из ИБ.
//  ВариантОтображения – строка, визуальное представление отчета(таблица, диаграмма или сводная таблица).
//
Процедура ОбновитьОтчет(Отчет, ФормаОтчета, ФормироватьЗапрос = Истина, ВариантОтображенияОтчета) Экспорт

	ЕстьОшибки		= "";
	ЭлементыФормы	= ФормаОтчета.ЭлементыФормы;
	ИмяСерии		= "";
	
	Если ВариантОтображенияОтчета = Перечисления.ВариантыОтображенияОтчетов.Таблица Тогда
		
		ЭлементыФормы.ПанельИзображений.ТекущаяСтраница = ЭлементыФормы.ПанельИзображений.Страницы.Таблица;
		ЗаполняемыйЭлементФормы = ЭлементыФормы.ДокументРезультат;
		СформироватьДокументРезультатОтчета(Отчет, ЗаполняемыйЭлементФормы, ФормироватьЗапрос, ФормаОтчета.мПоказыватьЗаголовок, ФормаОтчета.мВысотаЗаголовка, ЕстьОшибки);
		
	ИначеЕсли ВариантОтображенияОтчета = Перечисления.ВариантыОтображенияОтчетов.Диаграмма Тогда
		
		ЭлементыФормы.ПанельИзображений.ТекущаяСтраница = ЭлементыФормы.ПанельИзображений.Страницы.Диаграмма;
		ЗаполняемыйЭлементФормы = ЭлементыФормы.Диаграмма;
		
		СписокПоказателей = "";
		Строки = Отчет.ПоказателиОтчета.НайтиСтроки(Новый Структура("ИтоговоеПоле",Истина));
		Если Строки <> Неопределено Тогда
			Для каждого Строка Из Строки Цикл
				СписокПоказателей = СписокПоказателей + ", " + Строка.ПредставлениеПоказателя
			КонецЦикла;
		КонецЕсли;
		ЭлементыФормы.ТекстДиаграммы.Заголовок=?(ЗначениеЗаполнено(СписокПоказателей),"Данные: " + Сред(СписокПоказателей,3),"");

		СформироватьДокументРезультатОтчета(Отчет, ЗаполняемыйЭлементФормы, ФормироватьЗапрос, , , ЕстьОшибки, ФормаОтчета.мТаблицаДиаграммы, ИмяСерии);
		ЭлементыФормы.ПолеМаксимумСерий.Значение= ЭлементыФормы.Диаграмма.Серии.Количество();

		ТаблицаЛегенды = ФормаОтчета.ТаблицаЛегенды;
		ТаблицаЛегенды.Очистить();

		Для Каждого Серия Из ЭлементыФормы.Диаграмма.Серии Цикл

			СтрЛегенды=ТаблицаЛегенды.Добавить();
			СтрЛегенды.ИмяСерии=Серия.Текст;
			СтрЛегенды.ЦветСерии=Серия.Цвет;
			СтрЛегенды.ИндексСерии=ЭлементыФормы.Диаграмма.Серии.Индекс(Серия);

		КонецЦикла;

		ТаблицаЛегенды.Сортировать("ИндексСерии Убыв");
		
		ЭлементыФормы.ТаблицаЛегенды.Колонки.ИмяСерии.ТекстШапки = ИмяСерии;

	ИначеЕсли ВариантОтображенияОтчета = Перечисления.ВариантыОтображенияОтчетов.СводнаяТаблица Тогда
		
		ЭлементыФормы.ПанельИзображений.ТекущаяСтраница = ЭлементыФормы.ПанельИзображений.Страницы.СводнаяТаблица;
		ДокументРезультат = ЭлементыФормы.РезультатТабДокСвод.ВстроенныеТаблицы.СводнаяТаблица;
		СформироватьДокументРезультатОтчета(Отчет, ДокументРезультат, ФормироватьЗапрос, , , ЕстьОшибки);
		ЗаполняемыйЭлементФормы = ЭлементыФормы.РезультатТабДокСвод;
		ОбновлятьОформлениеСводнойТаблицы = ДокументРезультат.Данные.Количество() = 0 и ДокументРезультат.Строки.Количество() = 0;
		Если ОбновлятьОформлениеСводнойТаблицы Тогда
			Для ИндексПоля = 0 По ДокументРезультат.Поля.Количество() - 1 Цикл
				ПолеТаблицы = ДокументРезультат.Поля[ИндексПоля];
				Если ПолеТаблицы.Ресурс Тогда
					ДокументРезультат.Данные.Добавить(ПолеТаблицы)
				Иначе
					ДокументРезультат.Строки.Добавить(ПолеТаблицы)
				КонецЕсли;
			КонецЦикла;
			ДокументРезультат.Колонки.Добавить(ДокументРезультат.Данные);
		КонецЕсли;

	КонецЕсли;

	ФормаОтчета.ТекущийЭлемент = ЗаполняемыйЭлементФормы;
	ОбработатьКнопкуЗаголовок(ЭлементыФормы.КоманднаяПанельФормы, ФормаОтчета.мПоказыватьЗаголовок);

КонецПроцедуры // ОбновитьОтчет()

// Действия при нажатии на кнопку "Настройка".
//
// Параметры
//  Отчет	     – объект отчета.
//  ФормаОтчета  – основная форма отчета.
//  ФормаНастройки  – форма, используемая для изменения отчета.
//
Процедура ДействияПриИзмененииНастройки(Отчет, ФормаОтчета, ФормаНастройки) Экспорт

	ПредшествующиеГруппировки = Отчет.ГруппировкиОтчета.Выгрузить();
	ПредшествующиеГруппировки.Индексы.Добавить("ИмяГруппировки");
	ПредшествующиеПоказатели  = Отчет.ПоказателиОтчета.Выгрузить();
	ПредшествующиеПоказатели.Индексы.Добавить("ИмяПоказателя");

	РезультатРедактирования = ФормаНастройки.ОткрытьМодально();
	Если РезультатРедактирования = "ОбновитьОтчет" Тогда
		
		// отразим результаты редактирования в панелях быстрого отбора
		ЗаполнитьБыстрыйОтборПоОбъекту(ФормаОтчета.ЭлементыФормы, Отчет, ФормаОтчета.СтруктураСвязиЭлементовСДанными);
		
		ОбновитьОтчет(Отчет, ФормаОтчета,, Отчет.ВариантОтображения);
		
		ЭлементыФормы =  ФормаОтчета.ЭлементыФормы;
		Если Отчет.ВариантОтображения = Перечисления.ВариантыОтображенияОтчетов.СводнаяТаблица Тогда

			ОбновлятьГруппировки = Ложь;
			ОбновлятьПоказатели = Ложь;

			Для каждого СтрокаТаблицы Из Отчет.ГруппировкиОтчета Цикл
				ОбновлятьГруппировки = ПредшествующиеГруппировки.Найти(СтрокаТаблицы.ИмяГруппировки,"ИмяГруппировки") = Неопределено; 
				Если ОбновлятьГруппировки Тогда
					Прервать
				КонецЕсли;
			КонецЦикла;
			Для каждого СтрокаТаблицы Из Отчет.ПоказателиОтчета Цикл
				ОбновлятьПоказатели = ПредшествующиеПоказатели.Найти(СтрокаТаблицы.ИмяПоказателя,"ИмяПоказателя") = Неопределено; 
				Если ОбновлятьПоказатели Тогда
					Прервать
				КонецЕсли;
			КонецЦикла;

			Если ОбновлятьГруппировки или ОбновлятьПоказатели Тогда
				ДокументРезультат = ЭлементыФормы.РезультатТабДокСвод.ВстроенныеТаблицы.СводнаяТаблица;
				Если ОбновлятьПоказатели Тогда
					ДокументРезультат.Данные.Очистить();
					ДокументРезультат.Колонки.Очистить();
					Для ИндексПоля = 0 По ДокументРезультат.Поля.Количество() - 1 Цикл
						ПолеТаблицы = ДокументРезультат.Поля[ИндексПоля];
						Если ПолеТаблицы.Ресурс Тогда
							ДокументРезультат.Данные.Добавить(ПолеТаблицы)
						КонецЕсли;
					КонецЦикла;
					ДокументРезультат.Колонки.Добавить(ДокументРезультат.Данные);
				КонецЕсли;
				Если ОбновлятьГруппировки Тогда
					ДокументРезультат.Строки.Очистить();
					Для ИндексПоля = 0 По ДокументРезультат.Поля.Количество() - 1 Цикл
						ПолеТаблицы = ДокументРезультат.Поля[ИндексПоля];
						Если ПолеТаблицы.Измерение Тогда
							ДокументРезультат.Строки.Добавить(ПолеТаблицы)
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДействияПриИзмененииНастройки()

// Формирует "шапку" отчета
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Функция СформироватьЗаголовокОтчета(Отчет) Экспорт

	ДокументРезультат = Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("МакетТаблицы");

	// Строки списков для шапки отчета
	СтрПоказатели = "";
	СтрГруппировки = "";
	СтрФильтры = "";

	Для Каждого Строка Из Отчет.ГруппировкиОтчета цикл

		Если ПустаяСтрока(Строка.ИмяГруппировки) Тогда
			Предупреждение("Не указано имя группировки!", 60);
			Возврат ДокументРезультат;
		КонецЕсли;
        // Если не задано представление, берем его из имени
		Если ПустаяСтрока(Строка.ПредставлениеГруппировки) Тогда
			Строка.ПредставлениеГруппировки = Строка.ИмяГруппировки;
		КонецЕсли;
		СтрГруппировки=СтрГруппировки + ", " + Строка.ПредставлениеГруппировки;

	КонецЦикла;

	Для Каждого СтрокаПоказатели Из Отчет.ПоказателиОтчета Цикл
		// Упорядочивание по показателю:
		СтрокаУпорядочивания = "";
		Если СтрокаПоказатели.Сортировка <> 0 Тогда
			// Строка для шапки отчета
			СтрокаУпорядочивания = СтрокаУпорядочивания + ": " + ?(СтрокаПоказатели.Сортировка = 1, " по возрастанию", " по убыванию");
		КонецЕсли;
		// Строка для шапки отчета
		СтрПоказатели = СтрПоказатели + ", " + СтрокаПоказатели.ПредставлениеПоказателя + СтрокаУпорядочивания;
	КонецЦикла;

    ТаблицаФильтров = Отчет.ОтборыОтчета;
	ТаблицаСписокВсехФильтров = ТаблицаФильтров.Выгрузить();
	ТаблицаСписокВсехФильтров.Свернуть("ИмяОтбора",);

	СтруктураПоиска = Новый Структура("ИмяОтбора");

	Для Каждого Строка Из ТаблицаСписокВсехФильтров Цикл

		Если ПустаяСтрока(Строка.ИмяОтбора) Тогда
			Предупреждение("Не указано имя отбора!", 60);
			Возврат ДокументРезультат;
		КонецЕсли;

		СтруктураПоиска.ИмяОтбора = Строка.ИмяОтбора;

		НайденныеСтроки = ТаблицаФильтров.НайтиСтроки(СтруктураПоиска);

		СтрТипФильтра = НайденныеСтроки[0].ВидСравнения;

		Если НайденныеСтроки.Количество() = 1 Тогда
			// Если не задано представление, берем его из имени
			Если ПустаяСтрока(НайденныеСтроки[0].ПредставлениеОтбора) Тогда
				НайденныеСтроки[0].ПредставлениеОтбора = НайденныеСтроки[0].ИмяОтбора;
			КонецЕсли;

			СтрФильтры=СтрФильтры+", "+НайденныеСтроки[0].ПредставлениеОтбора+ " " + СтрТипФильтра + " "+НайденныеСтроки[0].Значение;
		Иначе
			
			СтрФильтры=СтрФильтры+", "+НайденныеСтроки[0].ПредставлениеОтбора+" "+СтрТипФильтра+" [";
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				// Если не задано представление, берем его из имени
				Если ПустаяСтрока(НайденнаяСтрока.ПредставлениеОтбора) Тогда
					НайденнаяСтрока.ПредставлениеОтбора = НайденнаяСтрока.ИмяОтбора;
				КонецЕсли;
				
				СтрФильтры=СтрФильтры+НайденнаяСтрока.Значение+", ";
			КонецЦикла;

			СтрФильтры=Лев(СокрЛП(СтрФильтры), СтрДлина(СокрЛП(СтрФильтры))-1)+"]";
		КонецЕсли;
	
	КонецЦикла;
	
	СтрПоказатели  = Сред(СтрПоказатели,  2);
	СтрГруппировки = Сред(СтрГруппировки, 2);
	СтрФильтры     = Сред(СтрФильтры,     2);

	Для Сч = 1 По 3 Цикл

		Если Сч = 1 Тогда
			Префикс = "Верх";
		ИначеЕсли Сч = 2 Тогда
			// Если нет фильтров, не выводим
			Если НЕ ЗначениеЗаполнено(СтрФильтры) Тогда
				Продолжить;
			КонецЕсли;
			Префикс = "Середина";
		ИначеЕсли Сч = 3 Тогда
			Префикс = "Низ";
		КонецЕсли;

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Шапка" + Префикс));

		// Вывод шапки отчета
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Шапка" + Префикс);

		Если Префикс = "Верх" Тогда
			Если Отчет.Метаданные().Реквизиты.Найти("ВидОтчета") <> Неопределено Тогда
				ОбластьЗначение.Параметры.ЗаголовокОтчета = Отчет.ВидОтчета + ?(Отчет.мНастройка <> Неопределено, Символы.ПС + " (" + Отчет.мНастройка.Наименование + ")","");
			иначе	
				ОбластьЗначение.Параметры.ЗаголовокОтчета = Отчет.Метаданные().Синоним + ?(Отчет.мНастройка <> Неопределено, Символы.ПС + " (" + Отчет.мНастройка.Наименование + ")","");
			КонецЕсли; 
			
		ИначеЕсли Префикс = "Середина" Тогда
			ОбластьЗначение.Параметры.Фильтры = "Отбор: " + СтрФильтры;
		ИначеЕсли Префикс = "Низ" Тогда
			ОбластьЗначение.Параметры.Группировки = "Группировки: " + СтрГруппировки;
			ОбластьЗначение.Параметры.Показатели = "Показатели: " + СтрПоказатели;
		КонецЕсли;

		ДокументРезультат.Присоединить(ОбластьЗначение);

		ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("Показатель|Шапка" + Префикс));

	КонецЦикла;

	Возврат ДокументРезультат

КонецФункции // СформироватьЗаголовокОтчета()

// Заполняет структуру, описывающую быстрые отборы, устанавливает заголовки флажком и определяет тип выбираемых значений
//
// Параметры
// Параметры:
//	 МассивТипов - массив строк с идентификаторами полей, по которым будет выставляться быстрый отбор
//	 ЭлементыФормы - коллекция элементов формы
//	 СтруктураСвязиЭлементовСДанными - структура, описывающая быстрые отборы
//
Процедура ОбработатьПоляБыстрогоОтбораНаФорме(МассивТипов,ЭлементыФормы,СтруктураСвязиЭлементовСДанными,ТаблицаВсехФильтров) Экспорт

	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ВидСравнения.Равно,"Равно");
	СписокВыбора.Добавить(ВидСравнения.НеРавно,"Не равно");
	СписокВыбора.Добавить(ВидСравнения.ВСписке,"В списке");
	СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии,"В списке по иерархии");
	СписокВыбора.Добавить(ВидСравнения.НеВСписке,"Не в списке");
	СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии,"Не в списке по иерархии");
	
	ЭлементыФормы.ПолеВидаСравнения1.СписокВыбора = СписокВыбора; 
	ЭлементыФормы.ПолеВидаСравнения2.СписокВыбора = СписокВыбора; 

	ТаблицаОтборов = Новый ТаблицаЗначений;
	ТаблицаОтборов.Колонки.Добавить("Имя");
	ТаблицаОтборов.Колонки.Добавить("Тип");
	Для каждого ИмяТипа Из МассивТипов Цикл
		Если ИмяТипа = "Статус" Тогда
		Иначе
			СтрокаОтбора = ТаблицаВсехФильтров.Найти(Новый ОписаниеТипов("СправочникСсылка." + ИмяТипа),"ОписаниеТипов");
		КонецЕсли;
		Если СтрокаОтбора <> Неопределено Тогда
			СтрокаТаблицы = ТаблицаОтборов.Добавить();
			СтрокаТаблицы.Имя = СтрокаОтбора.ИмяПоля;
			СтрокаТаблицы.Тип = СтрокаОтбора.ОписаниеТипов;
		КонецЕсли;
	КонецЦикла; 
	
	СтруктураСвязиЭлементовСДанными = Новый Структура;
	
	КоличествоОтборов = ТаблицаОтборов.Количество();
	Для Сч = 1 По 2 Цикл
		ИмяПоля = "ПолеНастройки" + Строка(Сч);
		ПолеНастройки = ЭлементыФормы[ИмяПоля].Значение;
		Если КоличествоОтборов > Сч - 1 Тогда
			СтруктураСвязиЭлементовСДанными.Вставить(ИмяПоля,ТаблицаОтборов[Сч - 1].Имя);
			ЭлементыФормы[ИмяПоля].ОграничениеТипа = ТаблицаОтборов[Сч - 1].Тип;
			УстанавливаемыйТип = ТаблицаОтборов[Сч - 1].Тип.Типы()[0];
			Если ТипЗнч(ПолеНастройки) <> УстанавливаемыйТип Тогда
				ЭлементыФормы[ИмяПоля].Значение = ОбщегоНазначения.ПустоеЗначениеТипа(УстанавливаемыйТип);
			КонецЕсли;
			ЭлементыФормы["ФлажокНастройки"+Строка(Сч)].Заголовок = ТаблицаВсехФильтров.Найти(ТаблицаОтборов[Сч - 1].Имя,"ИмяПоля").ПредставлениеПоля;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // ОбработатьПоляБыстрогоОтбораНаФорме()

// Управляет видимостью панелей быстрого отбора
Процедура УстановитьВидимостьПанелейБыстрогоОтбора(ЭлементыФормы,СтруктураСвязиЭлементовСДанными) Экспорт
	
	Если НЕ ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка Тогда
		
		Для Инд = 1 по 2 Цикл
			ЭлементыФормы["ПанельОтбора" + инд].Свертка = РежимСверткиЭлементаУправления.Верх;
		КонецЦикла;
			
	Иначе
		Для инд = 1 по 2 Цикл
			Если СтруктураСвязиЭлементовСДанными.Свойство("ПолеНастройки"+ (3 - инд)) Тогда
				ЭлементыФормы["ПанельОтбора"+ (3 - инд)].Свертка = РежимСверткиЭлементаУправления.Нет;
			КонецЕсли
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// при изменении параметров бытрого отбора переписывает это в т.ч. ОтборыОтчета отчета 
//
// Параметры
//	 ОтборыОтчета - т.ч. ОтборыОтчета отчета (содержит выставленные отборы)
//
Процедура ОбновитьЗначенияОтбораВОтчете(ИмяОтбора,Флажок,ВидСравнения,Значение,ОтборыОтчета,СтрокаТаблицы) Экспорт
	
	УдаляемыеСтроки = ОтборыОтчета.НайтиСтроки(Новый Структура("ИмяОтбора", ИмяОтбора));
	Для каждого УдаляемаяСтрокаТаблицы Из УдаляемыеСтроки Цикл
		ОтборыОтчета.Удалить(ОтборыОтчета.Индекс(УдаляемаяСтрокаТаблицы));
	КонецЦикла; 
	
	Если Флажок Тогда
		
		Если ТипЗнч(Значение) <> Тип("СписокЗначений") Тогда		
			
			НоваяСтрока = ОтборыОтчета.Добавить();
			НоваяСтрока.ИмяОтбора			= СтрокаТаблицы.ИмяПоля;
			НоваяСтрока.ПредставлениеОтбора	= СтрокаТаблицы.ПредставлениеПоля;
			НоваяСтрока.Значение      		= Значение;
			НоваяСтрока.ОписаниеФильтра     = СтрокаТаблицы.ОписаниеПоля;
			НоваяСтрока.ВидСравнения        = ВидСравнения;
			
		Иначе
			
			Для Каждого Условие Из Значение Цикл
				
				НоваяСтрока = ОтборыОтчета.Добавить();
				НоваяСтрока.ИмяОтбора           = СтрокаТаблицы.ИмяПоля;
				НоваяСтрока.ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеПоля;
				НоваяСтрока.Значение      		= Условие.Значение;
				НоваяСтрока.ОписаниеФильтра     = СтрокаТаблицы.ОписаниеПоля;
				НоваяСтрока.ВидСравнения        = ВидСравнения;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьЗначенияОтбораВОтчете()

//Функция возвращает текст запроса, обеспечивающий присоединение значений свойств объектов и фильтры на категории
Функция ПолучитьТекстЗапросаНаПрисоединениеСвойствКатегорий(ИмяИcточникаДанных, ТаблицаИсточниковСвойствКатегорий, ТекстОбщиеФильтры, ТекстПоляЗапросаИсточникаОбъекта, ЕстьФильтрыНаСвойстваКатегории) Экспорт

	ТекстЗапроса = "";

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяИсточникаОбъекта",ИмяИcточникаДанных);
	
    НайдСтроки =  ТаблицаИсточниковСвойствКатегорий.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка Из НайдСтроки Цикл

		Индекс = ТаблицаИсточниковСвойствКатегорий.Индекс(Строка);
		СтрокаПараметров = Сред(Строка.СтрокаПараметров, 2); 
		ТипФильтра = СокрЛП(Строка.ТипФильтра);

		ПолноеИмяПоля = Строка.ПолноеИмяПоля;
		ИмяРегистра = Лев(Строка.ПолноеИмяПоля,Найти(Строка.ПолноеИмяПоля,"__")-1);
		ИмяПоляБезИсточника = Сред(ПолноеИмяПоля,Найти(ПолноеИмяПоля, "__") + 2); 
		ИмяПоляБезВторогоИсточника = Сред(ИмяПоляБезИсточника,Найти(ИмяПоляБезИсточника, "__") + 2); 
		
        ИмяТаблицы = ИмяРегистра+Индекс;
		
		//Получим вид соединения и текст условия для фильтра
		Если ТипФильтра = "Равно" Тогда
			// Ограничиваем выборку набором различных объектов, принадлежащих указанной категории
			ВидСоединения = "ВНУТРЕННЕЕ";
			ТекстУсловия = "= " + СтрокаПараметров;
		ИначеЕсли ТипФильтра = "Не равно" Тогда
			// Ограничиваем выборку набором различных объектов, не принадлежащих указанной категории
			ВидСоединения = "ЛЕВОЕ";
			ТекстУсловия = "= " + СтрокаПараметров;
		ИначеЕсли ТипФильтра = "В списке" Тогда
			// Ограничиваем выборку набором различных объектов, принадлежащих одной категорий из указанных в списке
			ВидСоединения = "ВНУТРЕННЕЕ";
			ТекстУсловия = "В (" + СтрокаПараметров + ")";
		ИначеЕсли ТипФильтра = "Не в списке" Тогда
			//// Ограничим выборку только записями, объекты которых не принадлежат ни одной категории из указанных в списке 
			ВидСоединения = "ЛЕВОЕ";
			ТекстУсловия = "В (" + СтрокаПараметров + ")";
		ИначеЕсли ТипФильтра = "Все из" Тогда
			// Последовательно ограничиваем выборку набором различных объектов, принадлежащих каждой категории из списка
			ВидСоединения = "ВНУТРЕННЕЕ";
			ТекстУсловия = "= " + СтрокаПараметров ;
		ИначеЕсли ТипФильтра = "Содержит" Тогда	
			ВидСоединения = "ВНУТРЕННЕЕ";
			ТекстУсловия = "ПОДОБНО(" + СтрокаПараметров + ")";
		ИначеЕсли ТипФильтра = "Не содержит" Тогда	
			ВидСоединения = "ВНУТРЕННЕЕ";
			ТекстУсловия = "НЕ ПОДОБНО(" + СтрокаПараметров + ")";
		ИначеЕсли ТипФильтра = "" Тогда	
			ВидСоединения = "ЛЕВОЕ";
			ТекстУсловия = "";
		КонецЕсли;
		
		//Для инверсных условий надо добавить фильтр в фильтры источника объектов
		Если (ТипФильтра = "Не равно")ИЛИ(ТипФильтра = "Не в списке") Тогда
			ТекстОбщиеФильтры = ТекстОбщиеФильтры + " И " + ИмяТаблицы + ".Объект ЕСТЬ NULL";
		КонецЕсли;

    	//В имени поля может быть суфикс _Фильтр, который мы присоединяли для отрицающих видов сравнения. Его надо убрать
		Если НЕ ПустаяСтрока(ТекстУсловия) и Найти(ИмяПоляБезВторогоИсточника,"_Фильтр") <> 0 Тогда
			ИмяПоляБезВторогоИсточника = Лев(ИмяПоляБезВторогоИсточника,Найти(ИмяПоляБезВторогоИсточника, "_Фильтр") -1);
		КонецЕсли;
		
		Если ИмяРегистра = "ЗначенияСвойствОбъектов" тогда

			ИмяПоляОбъект = Лев(ИмяПоляБезВторогоИсточника,Найти(ИмяПоляБезВторогоИсточника, "_Свойство") - 1); 
			КодСвойства = Сред(ИмяПоляБезВторогоИсточника,Найти(ИмяПоляБезВторогоИсточника, "_Свойство") + 9);

			Если НЕ ПустаяСтрока(ТекстУсловия) тогда
				ТекстЗапроса = ТекстЗапроса + "
				|		//фильтр на значение свойства "+КодСвойства+" объекта: "+ИмяПоляОбъект;
			Иначе	
				ТекстЗапроса = ТекстЗапроса + "
				|		//выборка значений свойства "+КодСвойства+" объекта: "+ИмяПоляОбъект;
			КонецЕсли;	 

			ТекстЗапроса = ТекстЗапроса + "
			|		"+ВидСоединения+" СОЕДИНЕНИЕ 
			|		РегистрСведений.ЗначенияСвойствОбъектов КАК " + ИмяТаблицы + "
			|		ПО " + ИмяТаблицы + ".Объект = " + ИмяПоляОбъект + "
			|		И  " + ИмяТаблицы + ".Свойство.Код = """ + КодСвойства+"""";


			Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|		И  " + ИмяТаблицы + ".Значение " + ТекстУсловия;
				ЕстьФильтрыНаСвойстваКатегории = ИСТИНА;
			КонецЕсли;

			//Откорректируем описание поля запроса соответствующее текущему свойству
			ТекстПоляЗапросаИсточникаОбъекта = СтрЗаменить(ТекстПоляЗапросаИсточникаОбъекта, "<" + ПолноеИмяПоля + ">", ИмяТаблицы+".Значение");

		ИначеЕсли	ИмяРегистра = "КонтактнаяИнформация" тогда

			ИмяПоляОбъект = Лев(ИмяПоляБезВторогоИсточника,Найти(ИмяПоляБезВторогоИсточника, "_Вид") - 1); 
			ВидКИ = Сред(ИмяПоляБезВторогоИсточника,Найти(ИмяПоляБезВторогоИсточника, "_ВидКИ")+1); 

			Если НЕ ПустаяСтрока(ТекстУсловия) тогда

				ТекстЗапроса = ТекстЗапроса + "
				|		//фильтр на значения контактной информации "+ ВидКИ + " объекта: "+ИмяПоляОбъект;
			Иначе	
				ТекстЗапроса = ТекстЗапроса + "
				|		//выборка контактной информации "+ ВидКИ + " по объекту: "+ИмяПоляОбъект;
			КонецЕсли;	 

			ТекстЗапроса = ТекстЗапроса + "
			|		"+ВидСоединения+" СОЕДИНЕНИЕ 
			|		РегистрСведений.КонтактнаяИнформация КАК " + ИмяТаблицы + "
			|		ПО " + ИмяТаблицы + ".Объект = " + ИмяПоляОбъект + "
			|		И  " + ИмяТаблицы + ".Вид = &" + ВидКИ;


			Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|		И  " + ИмяТаблицы + ".Представление " + ТекстУсловия;
				ЕстьФильтрыНаСвойстваКатегории = ИСТИНА;
			КонецЕсли;

			//Откорректируем описание поля запроса соответствующее текущему виду контактной информации
			ТекстПоляЗапросаИсточникаОбъекта = СтрЗаменить(ТекстПоляЗапросаИсточникаОбъекта, "<" + ПолноеИмяПоля + ">", ИмяТаблицы+".Представление");

		ИначеЕсли	ИмяРегистра = "КатегорииОбъектов" тогда

			ТекстЗапроса = ТекстЗапроса + "
			|		//фильтр на значение категорий объекта: "+ИмяПоляОбъект;

			ИмяПоляОбъект = ИмяПоляБезВторогоИсточника;

			Если ТипФильтра <> "В списке" Тогда
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + 
				"		"+ВидСоединения+" СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК " + ИмяТаблицы + "
				|		ПО " + ИмяТаблицы + ".Объект = " + ИмяПоляОбъект + " И " + ИмяТаблицы + ".Категория " + ТекстУсловия;
			Иначе// Для условия "В списке" используем выбор различных объектов, чтобы избежать дублирования строк
				ТекстЗапроса = ТекстЗапроса + "
				|		"+ВидСоединения+" СОЕДИНЕНИЕ (
				|			ВЫБРАТЬ Различные Объект ИЗ РегистрСведений.КатегорииОбъектов КАК " + ИмяТаблицы + "
				|			ГДЕ 
				|				" + ИмяТаблицы + ".Категория " + ТекстУсловия + "
				|		) КАК " + ИмяТаблицы + "
				|		ПО " + ИмяТаблицы + ".Объект = " + ИмяПоляОбъект;
			КонецЕсли;

			ЕстьФильтрыНаСвойстваКатегории = ИСТИНА;

		КонецЕсли;	 

		//Если в истоник данных не включено описание поля объекта, то добавим его
        ОписаниеПоляОбъектаВИсточнике = ИмяИcточникаДанных+"."+ИмяПоляОбъект;
		Если Найти(ТекстПоляЗапросаИсточникаОбъекта,ОписаниеПоляОбъектаВИсточнике+" КАК") = 0 тогда
			ТекстПоляЗапросаИсточникаОбъекта = ТекстПоляЗапросаИсточникаОбъекта + "," + Символы.ПС 	+ "			"
			+ ОписаниеПоляОбъектаВИсточнике+" КАК " + СтрЗаменить(ОписаниеПоляОбъектаВИсточнике,".","__");
		КонецЕсли;		
	КонецЦикла;

	Возврат ТекстЗапроса;

КонецФункции	 

// Определяет вид группировки
Функция ВидГруппировки(ПредставлениеГруппировки) Экспорт
	Если Найти(ПредставлениеГруппировки,": по интервалам") = 0 тогда
		  Возврат "Обычная";
	  ИначеЕсли Найти(ПредставлениеГруппировки,"Возраст") <> 0  
		  тогда	  
		  Возврат "Интервальная";// для простых интервальных группировок суммирование базового показателя не выполняется
	Иначе
		  Возврат "ИнтервальнаяАгрегатная";//для интервальных агрегатных группировок выполняется суммирование значений базового показателя
	КонецЕсли;	
КонецФункции

//Выполняет добавление значение параметра в таблицу параметров
Процедура ДобавитьПараметрЗапроса(ТаблицаПараметров, ИмяПараметра,ЗначениеПараметра) Экспорт
	СтрокаПараметр = ТаблицаПараметров.Найти(ИмяПараметра,"ИмяПараметра");
	Если СтрокаПараметр = Неопределено тогда
		СтрокаПараметр = ТаблицаПараметров.Добавить();
	КонецЕсли;	 
	СтрокаПараметр.ИмяПараметра = ИмяПараметра;
	СтрокаПараметр.ЗначениеПараметра = ЗначениеПараметра;
КонецПроцедуры	

// Служебная процедура, устанавливает признаки возможности расчета итогов по иерархии и 
// принадлежности поля к ссылочным типам.
//
// Параметры:
//	мТаблицаГруппировки - таблица значений с данными табличной части ГруппировкиОтчета
//	                со специальными колонками ЕстьПолеПредставление и ИтогПоИерархии
//
Процедура ЗаполнитьПараметрыПолей(ОбрабатываемаяТаблица, ВспомогательнаяТаблица, ИмяКлючевойКолонки) Экспорт

	Для Каждого СтрокаТаблицы Из ОбрабатываемаяТаблица Цикл

		// Описание типов получаем либо из заполненной таблицы условий, либо заново
		МассивТипов = ВспомогательнаяТаблица.Найти(СтрокаТаблицы[ИмяКлючевойКолонки], "ИмяПоля").ОписаниеТипов.Типы();

		// Определим принадлежность к ссылочным типам (т.е. возможность использования поля Представление)
		СтрокаТаблицы.ЕстьПолеПредставление = Ложь;
		Для Каждого ЭлементТипа Из МассивТипов Цикл
			// нет у примитивных
			Если ЭлементТипа = Тип("Число")
				ИЛИ ЭлементТипа = Тип("Строка")
				ИЛИ ЭлементТипа = Тип("Дата")
				ИЛИ ЭлементТипа = Тип("Булево") Тогда
				
				СтрокаТаблицы.ЕстьПолеПредставление = Ложь;
				Прервать;
			Иначе
				// нет у перечисления
				ПустоеЗначениеТипа = Новый(ЭлементТипа);
				
				Если Метаданные.Перечисления.Найти(ПустоеЗначениеТипа.Метаданные().Имя) <> Неопределено Тогда
					СтрокаТаблицы.ЕстьПолеПредставление = Ложь;
					Прервать;
				Иначе
					СтрокаТаблицы.ЕстьПолеПредставление = Истина;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПараметрыПолей()

// Определяет, есть ли иерархия у поля, используя данные таблицы ВспомогательнаяТаблица.
//
// Параметры:
//	ИмяПоля       - строка, имя поля в таблице мТаблицаФильтры
//	ОписаниеПоляЗапроса - Строка, описание поля запроса
//
// Возвращаемое значение:
//	Истина        - есть иерархия, 
//	Ложь          - нет иерархии
//
Функция ЕстьИерархия(ИмяПоля,ВспомогательнаяТаблица) Экспорт
	
	МассивТипов = ВспомогательнаяТаблица.Найти(ИмяПоля, "ИмяПоля").ОписаниеТипов.Типы();

	ЕстьИерархия = Ложь;

	Для Каждого ЭлементТипа Из МассивТипов Цикл

		Если ЭлементТипа = Тип("Число")
			ИЛИ ЭлементТипа = Тип("Строка")
			ИЛИ ЭлементТипа = Тип("Дата")
			ИЛИ ЭлементТипа = Тип("Булево") Тогда

			Прервать;
		Иначе
			ПустоеЗначениеТипа = Новый(ЭлементТипа);

			// Проверка, является ли поле справочником, чтобы добавить итоги по иерархии. 
			МетаданныеСправочника = Метаданные.Справочники.Найти(ПустоеЗначениеТипа.Метаданные().Имя);
			Если МетаданныеСправочника <> Неопределено Тогда
				// Если справочник иерархический, то можно получать итог по иерархии
				Если МетаданныеСправочника.Иерархический Тогда
					ЕстьИерархия = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьИерархия;

КонецФункции // ЕстьИерархия()

Процедура ДействияПриИзмененииВидаСравнения(Элемент, Отчет, Форма) Экспорт

	// Управление полями настройки в зависимости от вида сравнения
		
	ИмяОтбора = "";
	НомерПоля = Прав(Элемент.Имя,1);
	ИмяПоля = "ПолеНастройки" + НомерПоля;
	Если Форма.СтруктураСвязиЭлементовСДанными.Свойство(ИмяПоля,ИмяОтбора) Тогда
		Если Форма.ЭлементыФормы.Найти(ИмяПоля) <> НеОпределено Тогда
			ПолеНастройки = Форма.ЭлементыФормы[ИмяПоля];
			Если (Элемент.Значение = ВидСравнения.ВСписке
				ИЛИ Элемент.Значение = ВидСравнения.НеВСписке
				ИЛИ Элемент.Значение = ВидСравнения.ВСпискеПоИерархии
				ИЛИ Элемент.Значение = ВидСравнения.НеВСпискеПоИерархии) и (ТипЗнч(ПолеНастройки.Значение) <> Тип("СписокЗначений")) Тогда
				Список = Новый СписокЗначений;
				Список.ТипЗначения = ПолеНастройки.ОграничениеТипа;
				Если ЗначениеЗаполнено(ПолеНастройки.Значение) Тогда
					Список.Добавить(ПолеНастройки.Значение);
				КонецЕсли;
				ПолеНастройки.Значение = Список;
				ПолеНастройки.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
			ИначеЕсли (Элемент.Значение = ВидСравнения.Равно
				ИЛИ Элемент.Значение = ВидСравнения.НеРавно) и (ТипЗнч(ПолеНастройки.Значение) = Тип("СписокЗначений")) Тогда
				ТипПоля = ПолеНастройки.Значение.ТипЗначения;
				Если ПолеНастройки.Значение.Количество() = 0 Тогда
				    Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ТипПоля.Типы()[0])
				Иначе
					Значение = ПолеНастройки.Значение[0].Значение
				КонецЕсли;
				ПолеНастройки.ОграничениеТипа = ТипПоля;
				ПолеНастройки.Значение = Значение;
			КонецЕсли;
		КонецЕсли;
		ОбновитьЗначенияОтбораВОтчете(ИмяОтбора,Форма["ФлажокНастройки" + НомерПоля],Элемент.Значение,Форма[ИмяПоля],Отчет.ОтборыОтчета,Отчет.мТаблицаФильтры.Найти(ИмяОтбора,"ИмяПоля"));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса для расчета базовых показателей интервальных агрегатных группировок текста запроса
// Параметры
//  Отчет  – Отчет.Объект – объект-отчет, таблицы которого надо заполнить
//  КопияГруппировкиОтчета  – таблица – группировки отчета
//  ТекстИсточникДанных - строка - текст выборки (запроса) всех показателей и группировок отчета без значений интервальных агрегатных группировок  
Функция ПолучитьТекстыИсточниковДанныхДляИнтервальныхАгрегатныхГруппировок(КопияГруппировкиОтчета, ТекстИсточникДанных) Экспорт

    ТекстыИсточниковДанныхДляИнтервальныхГруппировок = "";
	ПоляГруппировки = "";

	Для Каждого СтрокаГруппировки из КопияГруппировкиОтчета  Цикл

		Если СтрокаГруппировки.ВидГруппировки = "ИнтервальнаяАгрегатная" тогда

			//Поиск ближайшей группировки снизу
			Индекс = КопияГруппировкиОтчета.Индекс(СтрокаГруппировки);
			СледуюшаяОбычнаяГруппировка = Неопределено;
			Для С=Индекс+1  По КопияГруппировкиОтчета.Количество()-1 Цикл
				Если КопияГруппировкиОтчета[С].ВидГруппировки = "Обычная" Тогда
					СледуюшаяОбычнаяГруппировка = КопияГруппировкиОтчета[С];
					Прервать;
				КонецЕсли; 
			КонецЦикла; 

			ВремПоляГруппировки = ПоляГруппировки;
			Если СледуюшаяОбычнаяГруппировка <> Неопределено Тогда
				ВремПоляГруппировки = ВремПоляГруппировки + ", " +	СледуюшаяОбычнаяГруппировка.ИмяГруппировки;
			КонецЕсли; 
			ВремПоляГруппировки = Сред(ВремПоляГруппировки,2);
			
			ВремПоляВыборки =  ВремПоляГруппировки;
			ВремПоляВыборки = ВремПоляВыборки + ", СУММА(" + СтрокаГруппировки.ИмяГруппировки + ") КАК "+""+СтрокаГруппировки.ИмяГруппировки;

			ПсевдонимДобавляемойВыборки = "ДанныеИГ"+СтрокаГруппировки.ИмяГруппировки;

			УсловиеСоединения = "";
			МассивПолейГруппировки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ВремПоляГруппировки);
			Для каждого ПолеГруппировки Из МассивПолейГруппировки Цикл
				УсловиеСоединения = УсловиеСоединения + " И ОсновнаяВыборка." + СокрЛП(ПолеГруппировки) + "=" + ПсевдонимДобавляемойВыборки + "." + СокрЛП(ПолеГруппировки);									
			КонецЦикла; 
			УсловиеСоединения = Сред(УсловиеСоединения, 3);

			ТекстДобавляемогоЗапроса = "
			|
			|	// РАСЧЕТ ИТОГОВЫХ ДАННЫХ ДЛЯ ИНТЕРВАЛЬНОЙ ГРУППИРОВКИ: " + СтрокаГруппировки.ПредставлениеГруппировки + "
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ ( 
			|	ВЫБРАТЬ 
			|	" + ВремПоляВыборки + "
			|	ИЗ ("+ ТекстИсточникДанных + ") КАК ДанныеДляГруппировки
			|	СГРУППИРОВАТЬ ПО " + ВремПоляГруппировки + "
			|	) КАК " + ПсевдонимДобавляемойВыборки + "
			|	ПО " + УсловиеСоединения;

			ТекстыИсточниковДанныхДляИнтервальныхГруппировок = ТекстыИсточниковДанныхДляИнтервальныхГруппировок + ТекстДобавляемогоЗапроса;

		ИначеЕсли СтрокаГруппировки.ВидГруппировки = "Обычная" Тогда
			ПоляГруппировки = ПоляГруппировки +"," +СтрокаГруппировки.ИмяГруппировки;
		КонецЕсли;	

	КонецЦикла;

	Возврат ТекстыИсточниковДанныхДляИнтервальныхГруппировок;

КонецФункции	 

// Формирует описание поля запроса, вычисляющего номер интервала для значения показателя интервальной группировки
Функция ОписаниеПоляВыбораНомераИнтервала(ИнтервалыГруппировокОтчета, ИмяГруппировки, ВидГруппировки, ПрефиксИсточникаДанных = "") Экспорт

	//Формирую описание поля запроса для расчета объекта интервальной агрегатной группировки
	СтруктураПоиска = Новый Структура("ИмяГруппировки");
	СтруктураПоиска.ИмяГруппировки = ИмяГруппировки;

	НайдСтрокиИнтервалов = ИнтервалыГруппировокОтчета.НайтиСтроки(СтруктураПоиска);

    Если ВидГруппировки  = "ИнтервальнаяАгрегатная" Тогда
		ПолеБазовыйПоказательИГ = ПрефиксИсточникаДанных + ИмяГруппировки;
	Иначе
		ПолеБазовыйПоказательИГ = Сред(ИмяГруппировки,Найти(ИмяГруппировки, "__") + 2); 
	КонецЕсли; 

	ТекстПоляВыбора = "ВЫБОР ";
	Для Каждого СтрокаИнтервал из НайдСтрокиИнтервалов цикл
		Если СтрокаИнтервал.ЗначениеС <= 0 И СтрокаИнтервал.ЗначениеПо >= 0 Тогда
			//В интервал, который охватывает нулевое значение показателя должны поподать и значения  показателя = NULL
			ТекстПоляВыбора = ТекстПоляВыбора + Символы.ПС+"		КОГДА "+ ПолеБазовыйПоказательИГ + " ЕСТЬ NULL ИЛИ ("+ ПолеБазовыйПоказательИГ + ">="+ ЧислоВСтрокуДляТекстаЗапроса(СтрокаИнтервал.ЗначениеС) +" И "+ ПолеБазовыйПоказательИГ + "<="+ ЧислоВСтрокуДляТекстаЗапроса(СтрокаИнтервал.ЗначениеПо) + ") ТОГДА "+СтрокаИнтервал.НомерСтроки;
		Иначе	
			ТекстПоляВыбора = ТекстПоляВыбора + Символы.ПС+"		КОГДА "+ ПолеБазовыйПоказательИГ + ">="+ ЧислоВСтрокуДляТекстаЗапроса(СтрокаИнтервал.ЗначениеС) +" И "+ ПолеБазовыйПоказательИГ + "<="+ ЧислоВСтрокуДляТекстаЗапроса(СтрокаИнтервал.ЗначениеПо) + " ТОГДА "+СтрокаИнтервал.НомерСтроки;
		КонецЕсли; 
	КонецЦикла;	
	ТекстПоляВыбора = ТекстПоляВыбора + Символы.ПС+"		ИНАЧЕ NULL";
	ТекстПоляВыбора = ТекстПоляВыбора + Символы.ПС+"	КОНЕЦ";

	Возврат ТекстПоляВыбора;
КонецФункции	

// форматируем числа интервалов для формирования строк запроса
//
// Параметры:
//	пЧисло       - форматируемое число
//
// Возвращаемое значение:
//	строка - отформатированная число
//
Функция ЧислоВСтрокуДляТекстаЗапроса(пЧисло) Экспорт
	Возврат Формат(пЧисло,"ЧГ=0;ЧРД=.;ЧН=")
КонецФункции	 

// Функция формирует строку отбора для текста запроса (строку условия для предложения "ГДЕ").
Функция ПолучитьТекстДляСтрокиОтбора(ОписаниеПоля,пВидСравнения,ТекстСписокПараметров,ЗначениеС,ЗначениеПо) Экспорт
	Результат = "";
	ТекстПоляЗапроса = "";
		Если ОписаниеПоля = "РаботникиОрганизаций.ПодразделениеОрганизации"  
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.Должность"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ЗанимаемыхСтавок"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ГрафикРаботы"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.Период"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ПричинаИзмененияСостояния"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ОбособленноеПодразделение"
  		Тогда
		ОписаниеПоля = ОписаниеПоля;	
		ИначеЕсли ОписаниеПоля = "РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения"  
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ДолжностьЗавершения"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ЗанимаемыхСтавокЗавершения"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ГрафикРаботыЗавершения"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ПериодЗавершения"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения"
		Тогда
		ОписаниеПоля =	ОписаниеПоля;	
	КонецЕсли;
	Если пВидСравнения = ВидСравнения.Интервал Тогда
		Результат = ОписаниеПоля + " > "+ЗначениеС + " И "+ОписаниеПоля + " < "+ЗначениеПо;
	ИначеЕсли пВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
   		Результат = ОписаниеПоля + " >= "+ЗначениеС + " И "+ОписаниеПоля + " <= "+ЗначениеПо;
	ИначеЕсли пВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
      	Результат = ОписаниеПоля + " >= "+ЗначениеС + " И "+ОписаниеПоля + " < "+ЗначениеПо;
	ИначеЕсли пВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
        Результат = ОписаниеПоля + " > "+ЗначениеС + " И "+ОписаниеПоля + " <= "+ЗначениеПо;
	ИначеЕсли пВидСравнения = ВидСравнения.ВСписке тогда
       	Результат = ОписаниеПоля +" В (" + ТекстСписокПараметров + ")";
	ИначеЕсли пВидСравнения = ВидСравнения.ВСпискеПоИерархии тогда
       	Результат = ОписаниеПоля +" В ИЕРАРХИИ (" + ТекстСписокПараметров + ")";
	ИначеЕсли пВидСравнения = ВидСравнения.НеВСписке тогда
       	Результат = ОписаниеПоля +" НЕ В (" + ТекстСписокПараметров + ")";
	ИначеЕсли пВидСравнения = ВидСравнения.НеВСпискеПоИерархии тогда
       	Результат = ОписаниеПоля +" НЕ В ИЕРАРХИИ (" + ТекстСписокПараметров + ")";
	Иначе
		Если пВидСравнения = ВидСравнения.НеРавно тогда
			ОператорСравнения = "<>";
		ИначеЕсли (пВидСравнения = ВидСравнения.Равно) ИЛИ (пВидСравнения = " Все из ")  тогда
			ОператорСравнения = "=";
		ИначеЕсли пВидСравнения = ВидСравнения.Больше тогда
			ОператорСравнения = ">";
		ИначеЕсли пВидСравнения = ВидСравнения.БольшеИлиРавно тогда
			ОператорСравнения = ">=";
		ИначеЕсли пВидСравнения = ВидСравнения.Меньше тогда
			ОператорСравнения = "<";
		ИначеЕсли пВидСравнения = ВидСравнения.МеньшеИлиРавно тогда
			ОператорСравнения = "<=";
		ИначеЕсли пВидСравнения = ВидСравнения.Содержит тогда
			ОператорСравнения = "ПОДОБНО";
		ИначеЕсли пВидСравнения = ВидСравнения.НеСодержит тогда
			ОператорСравнения = "НЕ ПОДОБНО";
		КонецЕсли;
		
		Результат = ОписаниеПоля +" " + ОператорСравнения +" " +ТекстСписокПараметров;

	КонецЕсли;
    Возврат Результат;
КонецФункции // ПолучитьТекстДляСтрокиОтбора()	 

// Функция выполняет преобразование строкового представления значения типа "ВидСравнения" в само значение
// типа "ВидСравнения".
// Параметры:
//  СтрокаВидСравнения - строка, строковое представление значения.
//
// Возвращаемое значение:
//  Значение типа "ВидСравнения".
Функция ПолучитьВидСравненияПоТексту(Знач СтрокаВидСравнения) Экспорт

	СтрокаВидСравнения = СокрЛП(СтрокаВидСравнения);
	
	Если СтрокаВидСравнения = "Равно" тогда
		Возврат ВидСравнения.Равно;
	ИначеЕсли СтрокаВидСравнения = "Не равно" тогда
		Возврат ВидСравнения.НеРавно;
	ИначеЕсли СтрокаВидСравнения = "Меньше" тогда
		Возврат ВидСравнения.Меньше;
	ИначеЕсли СтрокаВидСравнения = "Меньше или равно" тогда
		Возврат ВидСравнения.МеньшеИлиРавно;
	ИначеЕсли СтрокаВидСравнения = "Больше" тогда
		Возврат ВидСравнения.Больше;
	ИначеЕсли СтрокаВидСравнения = "Больше или равно" тогда
		Возврат ВидСравнения.БольшеИлиРавно;
	ИначеЕсли СтрокаВидСравнения = "Интервал (>, <)" тогда
		Возврат ВидСравнения.Интервал;
   	ИначеЕсли СтрокаВидСравнения = "Интервал (>=, <=)" тогда
		Возврат ВидСравнения.ИнтервалВключаяГраницы;
   	ИначеЕсли СтрокаВидСравнения = "Интервал (>=, <)" тогда
		Возврат ВидСравнения.ИнтервалВключаяНачало;
   	ИначеЕсли СтрокаВидСравнения = "Интервал (>, <=)" тогда
		Возврат ВидСравнения.ИнтервалВключаяОкончание;
   	ИначеЕсли СтрокаВидСравнения = "Содержит" тогда
		Возврат ВидСравнения.Содержит;
   	ИначеЕсли СтрокаВидСравнения = "Не содержит" тогда
		Возврат ВидСравнения.НеСодержит;
   	ИначеЕсли СтрокаВидСравнения = "В списке" тогда
		Возврат ВидСравнения.ВСписке;
   	ИначеЕсли СтрокаВидСравнения = "В списке по иерархии" тогда
		Возврат ВидСравнения.ВСпискеПоИерархии;
   	ИначеЕсли СтрокаВидСравнения = "Не в списке" тогда
		Возврат ВидСравнения.НеВСписке;
   	ИначеЕсли СтрокаВидСравнения = "Не в списке по иерархии" тогда
		Возврат ВидСравнения.НеВСпискеПоИерархии;
   	ИначеЕсли СтрокаВидСравнения = "Все из" тогда
		Возврат " Все из ";
	Иначе
		Сообщить("По тексту "+СтрокаВидСравнения+ " процедурой ПолучитьВидСравненияПоТексту не удалось получить вид сравнения!");
		Возврат " = ";
	КонецЕсли;	 
КонецФункции // ПолучитьВидСравненияПоТексту()	 

// Инициализирует строку таблицы источников данных
//
// Параметры
//  ТаблицаИсточниковДанных  – таблица - таблица источников данных
//                 <продолжение описания параметра>
//  ИмяИсточника  – строка  - имя источника данных
//
// Возвращаемое значение:
//   <СтрокаТаблицыЗначений>   – добавленная строка таблицы источников
//
Функция ИнициализироватьСтрокуТаблицыИсточниковДанных(ТаблицаИсточниковДанных, ИмяИсточника)
	НоваяСтрока = ТаблицаИсточниковДанных.Добавить();	
    НоваяСтрока.ИмяИсточника = ИмяИсточника;
	НоваяСтрока.ТаблицаПолей = Новый ТаблицаЗначений;
	НоваяСтрока.ТаблицаПолей.Колонки.Добавить("ИмяПоля");
	НоваяСтрока.ТаблицаПолей.Колонки.Добавить("ОписаниеПоля");
	НоваяСтрока.ТаблицаПолей.Колонки.Добавить("ТипПоля");
	НоваяСтрока.ТаблицаПолей.Индексы.Добавить("ИмяПоля");
	Возврат НоваяСтрока;
КонецФункции 

// Заполняет значениями из т.ч. ОтборыОтчета отчета панели быстрого отбора
//
// Параметры:
//	 ЭлементыФормы - коллекция элементов формы
//	 СтруктураСвязиЭлементовСДанными - структура, описывающая быстрые отборы
//	 ОтборыОтчета - т.ч. ОтборыОтчета отчета (содержит выставленные отборы)
//
Процедура ЗаполнитьБыстрыйОтборПоОбъекту(ЭлементыФормы,Отчет,СтруктураСвязиЭлементовСДанными) Экспорт

	ТаблицаСписокВсехФильтров = Отчет.ОтборыОтчета.Выгрузить();
	ТаблицаСписокВсехФильтров.Свернуть("ИмяОтбора",);

	СтруктураПоиска = Новый Структура("ИмяОтбора");

	Для Каждого СтрокаТаблицы Из ТаблицаСписокВсехФильтров Цикл
		
		// перенесем значение отбора в поле "быстрого" отбора формы
		ИмяПоля = "";
		ИмяОтбора = СтрокаТаблицы.ИмяОтбора;
		
		Для каждого ЭлементСтруктуры Из СтруктураСвязиЭлементовСДанными Цикл
			Если ЭлементСтруктуры.Значение = ИмяОтбора Тогда
				ИмяПоля = ЭлементСтруктуры.Ключ;
				Прервать
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяПоля) Тогда
			НомерПоля = Прав(ИмяПоля,1);
			ЭлементыФормы["ФлажокНастройки" + НомерПоля].Значение = Истина;
			
			СтруктураПоиска.ИмяОтбора = СтрокаТаблицы.ИмяОтбора;
			НайденныеСтроки = Отчет.ОтборыОтчета.НайтиСтроки(СтруктураПоиска);
			
			ИскомоеЗначение = НайденныеСтроки[0].ВидСравнения;
			Для каждого ЭлементСписка Из ЭлементыФормы["ПолеВидаСравнения" + НомерПоля].СписокВыбора Цикл
				Если ЭлементСписка.Представление = ИскомоеЗначение Тогда
					ЭлементыФормы["ПолеВидаСравнения" + НомерПоля].Значение = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ВидСравненияПринадлежитГруппе(НайденныеСтроки[0].ВидСравнения,"Списковые") Тогда
				
				// Одиночный фильтр
				Значение = НайденныеСтроки[0].Значение;
				
			Иначе
				// Фильтр на список значений
				
				СтрокаФильтра = Отчет.мТаблицаФильтры.Найти(ИмяОтбора,"ИмяПоля");
				ОписаниеТипаЗначения = ?(СтрокаФильтра <> Неопределено,СтрокаФильтра.ОписаниеТипов,Неопределено);
				
				Значение = Новый СписокЗначений;
				Значение.ТипЗначения = ОписаниеТипаЗначения;
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Значение.Добавить(НайденнаяСтрока.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ЭлементыФормы[ИмяПоля].Значение = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьБыстрыйОтбораПоОбъекту()

// Выполняет настройку отчета по умолчанию для заданного отчета
Процедура ЗагрузитьНастройкуПоУмолчанию(Отчет, ТаблицаОписаниеВсехПолей, СтруктураГруппировкиПоУмолчанию, СтруктураПоказателиПоУмолчанию, ТаблицаОтборыПоУмолчанию) Экспорт

		Отчет.ПоказателиОтчета .Очистить();
		Отчет.ГруппировкиОтчета.Очистить();
		Отчет.ОтборыОтчета    .Очистить();

        //Заполнение таблицы показателей
        Для каждого ПоказательПоУмолчанию Из СтруктураПоказателиПоУмолчанию Цикл
			СтрокаОписаниеПоля = ТаблицаОписаниеВсехПолей.Найти(ПоказательПоУмолчанию.Ключ,"ИмяПоля");
			Показатель = Отчет.ПоказателиОтчета.Добавить();
			Показатель.ИмяПоказателя = СтрокаОписаниеПоля.ИмяПоля;
			Показатель.ПредставлениеПоказателя = СтрокаОписаниеПоля.ПредставлениеПоля;
			Показатель.ОписаниеПоказателя = СтрокаОписаниеПоля.ОписаниеПоля;
			Показатель.ИтоговоеПоле = СтрокаОписаниеПоля.ИтоговоеПоле;
		КонецЦикла; 

        //Заполнение таблицы группировок
		Для каждого ГруппировкаПоУмолчанию Из СтруктураГруппировкиПоУмолчанию Цикл
			СтрокаОписаниеПоля = ТаблицаОписаниеВсехПолей.Найти(ГруппировкаПоУмолчанию.Ключ,"ИмяПоля");
			Группировка = Отчет.ГруппировкиОтчета.Добавить();
			Группировка.ИмяГруппировки = СтрокаОписаниеПоля.ИмяПоля;
			Группировка.ПредставлениеГруппировки = СтрокаОписаниеПоля.ПредставлениеПоля;
			Группировка.ОписаниеГруппировки = СтрокаОписаниеПоля.ОписаниеПоля;
		КонецЦикла;

        //Заполнение таблицы отборов
        Для каждого  ОтборПоУмолчанию Из ТаблицаОтборыПоУмолчанию Цикл

			СтрокаОписаниеПоля = ТаблицаОписаниеВсехПолей.Найти(ОтборПоУмолчанию.ИмяОтбора,"ИмяПоля");

            Если ВидСравненияПринадлежитГруппе(ОтборПоУмолчанию.ВидСравнения, "Интервальные") Тогда
				НовыйОтбор 						= Отчет.ОтборыОтчета.Добавить();
				НовыйОтбор.ИмяОтбора            = СтрокаОписаниеПоля.ИмяПоля;
				НовыйОтбор.ПредставлениеОтбора  = СтрокаОписаниеПоля.ПредставлениеПоля;
				НовыйОтбор.ВидСравнения     	= ОтборПоУмолчанию.ВидСравнения;
				НовыйОтбор.ЗначениеС				= ОтборПоУмолчанию.ЗначениеС;
				НовыйОтбор.ЗначениеПо				= ОтборПоУмолчанию.ЗначениеПо;
				НовыйОтбор.ОписаниеФильтра				= СтрокаОписаниеПоля.ОписаниеПоля;
			Иначе	
				Если ТипЗнч(ОтборПоУмолчанию.Значение) <> Тип("СписокЗначений") тогда
					НовыйОтбор 						= Отчет.ОтборыОтчета.Добавить();
					НовыйОтбор.ИмяОтбора            = СтрокаОписаниеПоля.ИмяПоля;
					НовыйОтбор.ПредставлениеОтбора  = СтрокаОписаниеПоля.ПредставлениеПоля;
					НовыйОтбор.ВидСравнения     	= ОтборПоУмолчанию.ВидСравнения;
					НовыйОтбор.Значение				= ОтборПоУмолчанию.Значение;
					НовыйОтбор.ОписаниеФильтра				= СтрокаОписаниеПоля.ОписаниеПоля;
				Иначе
					Для каждого ЭлементСписка Из ОтборПоУмолчанию.Значение Цикл
						НовыйОтбор 						= Отчет.ОтборыОтчета.Добавить();
						НовыйОтбор.ИмяОтбора            = СтрокаОписаниеПоля.ИмяПоля;
						НовыйОтбор.ПредставлениеОтбора  = СтрокаОписаниеПоля.ПредставлениеПоля;
						НовыйОтбор.ВидСравнения     	= ОтборПоУмолчанию.ВидСравнения;
						НовыйОтбор.Значение				= ЭлементСписка.Значение;
						НовыйОтбор.ОписаниеФильтра				= СтрокаОписаниеПоля.ОписаниеПоля;
					КонецЦикла; 
				КонецЕсли;	
			КонецЕсли; 
			
			
		КонецЦикла; 
		
КонецПроцедуры

// Заполняет таблицы мТаблицаГруппировки,мТаблицаПоказатели,мТаблицаФильтры на основе данных таблицы ТаблицаОписаниеВсехПолей
//
// Параметры
//  Отчет  – Отчет.Объект – объект-отчет, таблицы которого надо заполнить
//  ТаблицаОписаниеВсехПолей  – ТаблицаЗначений – таблица, содержащая описание всех полей, доступных отчету
//	ПараметрыЗаполнение - Структура - параметры заполнения таблиц группировок, показателей, фильтров
//		Поля структуры:
//			 ВключатьИтоговыеПоказатели - признак включения в состав показателей итоговых показателей
//			 ВключатьНеИтоговыеПоказатели - признак включения в состав показателей неитоговых показателей
//			 ВключатьИнтервальныеГруппировки - признак включения в состав группировок интервальных группировок
Процедура ЗаполнитьТаблицыВозможныхГруппировокПоказателейФильтров(Отчет, ТаблицаОписаниеВсехПолей, ПараметрыЗаполнение) Экспорт

    //Заполняем таблицу возможных группировок и фильтров на основе таблицы описания всех полей
	Для Каждого Поле Из ТаблицаОписаниеВсехПолей Цикл

		ИмяПоля = Поле.ИмяПоля;
		ИмяРегистра = Поле.ИмяИсточника;
		ПредставлениеПоля = Поле.ПредставлениеПоля;
		ОписаниеПоля = Поле.ОписаниеПоля;
		ОписаниеТипов = Поле.ОписаниеТипов;
		Свойство = Поле.Свойство;
		ИтоговоеПоле = Поле.ИтоговоеПоле;

		// ЗАПОЛНЕНИЕ ТАБЛИЦЫ ФИЛЬТРОВ
		
        // На вычисляемое поле нельзя наложить фильтр
		Если Поле.ТипПоля <> "Вычисляемое"  Тогда
			СтрФильтры = Отчет.мТаблицаФильтры.Добавить();
			СтрФильтры.ИмяПоля           = ИмяПоля;
			СтрФильтры.ПредставлениеПоля = ПредставлениеПоля;
			СтрФильтры.ОписаниеПоля      = ОписаниеПоля;
			СтрФильтры.ОписаниеТипов	 = ОписаниеТипов;
			СтрФильтры.Свойство	 		 = Свойство;
		КонецЕсли; 

    	// Категории объектов в показатели и группировки не включаем
		Если Найти(ИмяПоля,"КатегорииОбъектов") <> 0 тогда
			Продолжить;
		КонецЕсли;	
		
		// ЗАПОЛНЕНИЕ ТАБЛИЦЫ ПОКАЗАТЕЛЕЙ
		
		Если ИтоговоеПоле тогда

			Если ПараметрыЗаполнение.ВключатьИтоговыеПоказатели тогда

				СтрПоказатели = Отчет.мТаблицаПоказатели.Добавить();
				СтрПоказатели.ИмяПоля           = ИмяПоля;
				СтрПоказатели.ПредставлениеПоля = ПредставлениеПоля;
				СтрПоказатели.ОписаниеПоля 		= ОписаниеПоля;
				СтрПоказатели.ОписаниеТипов	 	= ОписаниеТипов;
				СтрПоказатели.ИтоговоеПоле	 	= ИтоговоеПоле;
			КонецЕсли;

		Иначе	

			Если ПараметрыЗаполнение.ВключатьНеИтоговыеПоказатели тогда

				СтрПоказатели = Отчет.мТаблицаПоказатели.Добавить();
				СтрПоказатели.ИмяПоля           = ИмяПоля;
				СтрПоказатели.ПредставлениеПоля = ПредставлениеПоля;
				СтрПоказатели.ОписаниеПоля 		= ОписаниеПоля;
				СтрПоказатели.ОписаниеТипов	 	= ОписаниеТипов;
				СтрПоказатели.ИтоговоеПоле	 	= ИтоговоеПоле;
			КонецЕсли;

		КонецЕсли;	

		// ЗАПОЛНЕНИЕ ТАБЛИЦЫ ГРУППИРОВОК

		НетПримитивныхТипов = Истина;

		Для Каждого ЭлементТипа Из ОписаниеТипов.Типы() Цикл

			// Если тип примитивный, то не анализируем
			Если ЭлементТипа = Тип("Число")
				ИЛИ ЭлементТипа = Тип("Строка")
				ИЛИ ЭлементТипа = Тип("Дата") 
				ИЛИ ЭлементТипа = Тип("Булево") Тогда
				НетПримитивныхТипов = Ложь;
				Прервать;
			КонецЕсли;

		КонецЦикла;

		// группировать имеет смысл только по полям ссылочных типов
		Если (НетПримитивныхТипов)
			//поля табличных частей физлица, значения которых может дублироваться для одного физлица, в группировки поподать не должны
			И (Найти(ИмяПоля,"ФизическиеЛица_СоставСемьи__Родственник")=0) Тогда  
			СтрГруппировки = Отчет.мТаблицаГруппировки.Добавить();
			СтрГруппировки.ИмяПоля           = ИмяПоля;
			СтрГруппировки.ПредставлениеПоля = ПредставлениеПоля;
			СтрГруппировки.ОписаниеПоля      = ОписаниеПоля;
			СтрГруппировки.ОписаниеТипов	 = ОписаниеТипов;
		КонецЕсли;

	КонецЦикла;

	//Второй проход: все поля, по которым возможны итоги, добавим в группировки по интервалам значений
	Если ПараметрыЗаполнение.ВключатьИнтервальныеГруппировки Тогда
		Для Каждого Поле Из ТаблицаОписаниеВсехПолей Цикл
			Если Поле.ИтоговоеПоле или Найти(Поле.ИмяПоля,"Возраст")<>0 тогда
				СтрГруппировки = Отчет.мТаблицаГруппировки.Добавить();
				СтрГруппировки.ИмяПоля           = Поле.ИмяПоля;
				СтрГруппировки.ПредставлениеПоля = Поле.ПредставлениеПоля+": по интервалам";
				СтрГруппировки.ОписаниеПоля      = Поле.ОписаниеПоля;
				СтрГруппировки.ОписаниеТипов	 = Поле.ОписаниеТипов;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли; 

    // Определим, с какими полями нужно устанавливать связь по владельцу для
	// полей - подчиненных справочников
	Для Каждого Строка Из Отчет.мТаблицаФильтры Цикл

		Типы = Строка.ОписаниеТипов.Типы();

		Для Каждого ЭлементТипа Из Типы Цикл

			// Если тип примитивный, то не анализируем
			Если ЭлементТипа = Тип("Число")
				ИЛИ ЭлементТипа = Тип("Строка")
				ИЛИ ЭлементТипа = Тип("Дата") 
				ИЛИ ЭлементТипа = Тип("Булево") Тогда
				Прервать;
			КонецЕсли;

			ПустоеЗначениеТипа = Новый(ЭлементТипа);

			МетаданныеСправочника = Метаданные.Справочники.Найти(ПустоеЗначениеТипа.Метаданные().Имя);

			// Если это не справочник, то не анализируем
			Если МетаданныеСправочника = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ВладелецСправочника = ПустоеЗначениеТипа.Владелец;
			Исключение
				Продолжить;
			КонецПопытки;	
			Если ВладелецСправочника = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Для Каждого ПроверяемаяСтрока Из Отчет.мТаблицаФильтры Цикл
				Если ПроверяемаяСтрока.ОписаниеТипов.СодержитТип(ТипЗнч(ВладелецСправочника)) Тогда
					Строка.ИмяПоляВладелец = ПроверяемаяСтрока.ИмяПоля;
					Прервать;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры	

// Функция определяет принадлежность значения типа "ВидСравнения" одной из групп: "Интервальные" или "Списковые".
//
// Параметры:
//  пВидСравнения - ВидСравнения.
//  ИмяГруппы     - строка, группа определяемых типов. 
//
// Возвращаемое значение:
//  Истина - если значение принадлежит к группе,
//  Ложь - если не принадлежит. 
//
Функция ВидСравненияПринадлежитГруппе(пВидСравнения,ИмяГруппы) Экспорт
	
	Если ИмяГруппы = "Интервальные" тогда
		Если Найти(Строка(пВидСравнения),"Интервал")<>0  тогда
			Возврат Истина;
		КонецЕсли;	 
	ИначеЕсли ИмяГруппы = "Списковые" тогда	
		Если Найти(НРег(Строка(пВидСравнения)),"в списке")<>0  тогда
			Возврат Истина;
		КонецЕсли;
		Если Найти(НРег(Строка(пВидСравнения)),"все из")<>0  тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;	 
	Возврат Ложь;
	
КонецФункции // ВидСравненияПринадлежитГруппе()	 

// Формирует текст запроса для заданного отчета и выполняет его
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	Отчет - объект отчета, для каторого формируется запрос 
//
Функция СформироватьРезультатЗапроса(Отчет) Экспорт

	Запрос = Новый Запрос;

	// Далее используются копии таблиц отчета
	КопияГруппировкиОтчета = Отчет.ГруппировкиОтчета.Выгрузить();
 	КопияПоказателиОтчета = Отчет.ПоказателиОтчета.Выгрузить();
	КопияОтборыОтчета = Отчет.ОтборыОтчета.Выгрузить();
	КопияОтборыОтчета.Индексы.Добавить("ИмяОтбора");
	КопияИнтервалыГруппировокОтчета = Отчет.ИнтервалыГруппировокОтчета.Выгрузить();

	мТаблицаПараметрыЗапроса = Отчет.мТаблицаПараметрыЗапроса.Скопировать();
	мТаблицаГруппировки = Отчет.мТаблицаГруппировки.Скопировать();
	мТаблицаПоказатели = Отчет.мТаблицаПоказатели.Скопировать();

	ОсновнойИсточник = Отчет.мОсновнойИсточник;
	
	// Описание типов	
	мОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(500);
	мОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

    // Установка параметров запроса, заданных таблицей параметров отчета 
	Для Каждого Параметр ИЗ мТаблицаПараметрыЗапроса цикл
		Запрос.УстановитьПараметр(Параметр.ИмяПараметра,	Параметр.ЗначениеПараметра);
	КонецЦикла;	
	
	// Список полей запроса
    ТекстПоляЗапроса = "";
	ТекстПоляУпорядочивания = "";
	ТекстКонтрольныеТочкиИтогов = "";
	ТекстАгрегатныеФункцииИтогов = "";

	// Таблица источников данных
	ТаблицаИсточниковДанных = Новый ТаблицаЗначений;
	ТаблицаИсточниковДанных.Колонки.Добавить("ИмяИсточника",мОписаниеТиповСтрока);
	ТаблицаИсточниковДанных.Колонки.Добавить("СтрФильтры",мОписаниеТиповСтрокаНеограниченная);
	ТаблицаИсточниковДанных.Колонки.Добавить("ТаблицаПолей");
	ТаблицаИсточниковДанных.Индексы.Добавить("ИмяИсточника");

	//Основной источник данных - основа всего запроса
	ИнициализироватьСтрокуТаблицыИсточниковДанных(ТаблицаИсточниковДанных, ОсновнойИсточник);
	
    // Добавим две служебные колонки, содержащие признак ссылочности поля и 
	// возможность расчета итога по иерархии для тех полей, которым поставлен 
	// соответствующий флажок...
	КопияГруппировкиОтчета.Колонки.Добавить("ЕстьПолеПредставление", мОписаниеТиповБулево);
	КопияПоказателиОтчета.Колонки.Добавить("ЕстьПолеПредставление", мОписаниеТиповБулево);

    // ...и заполним эти служебные колонки
	ЗаполнитьПараметрыПолей(КопияГруппировкиОтчета,мТаблицаГруппировки,"ИмяГруппировки");
	ЗаполнитьПараметрыПолей(КопияПоказателиОтчета,мТаблицаПоказатели,"ИмяПоказателя");

    // В группировки добавим служебную колонку, содержащую вид группировки (обычная, интервальная и агрегатная интервальная)
	КопияГруппировкиОтчета.Колонки.Добавить("ВидГруппировки", мОписаниеТиповСтрока);
	КопияГруппировкиОтчета.Индексы.Добавить("ВидГруппировки");
	Для Каждого СтрокаГруппировки Из КопияГруппировкиОтчета Цикл
      	СтрокаГруппировки.ВидГруппировки = ВидГруппировки(СтрокаГруппировки.ПредставлениеГруппировки);
	КонецЦикла;	

    // Признак наличия в настройках отчета "Обычных" групировок
	ЕстьОбычныеГруппировки = КопияГруппировкиОтчета.Найти("Обычная","ВидГруппировки") <> Неопределено;
	
	// Таблица значений, в которой будут храниться данные об источниках свойств, категорий, контактной информации
	ТаблицаИсточниковСвойствКатегорий = Новый ТаблицаЗначений;
	ТаблицаИсточниковСвойствКатегорий.Колонки.Добавить("ПолноеИмяПоля");
	ТаблицаИсточниковСвойствКатегорий.Колонки.Добавить("ИмяИсточникаОбъекта");
	ТаблицаИсточниковСвойствКатегорий.Колонки.Добавить("СтрокаПараметров", мОписаниеТиповСтрока);
	ТаблицаИсточниковСвойствКатегорий.Колонки.Добавить("ТипФильтра", мОписаниеТиповСтрока);
	ТаблицаИсточниковСвойствКатегорий.Индексы.Добавить("ИмяИсточникаОбъекта");
	ТаблицаИсточниковСвойствКатегорий.Индексы.Добавить("ПолноеИмяПоля");

	// Обработка группировок отчета
	Для Каждого СтрокаГруппировки Из КопияГруппировкиОтчета Цикл

		ИмяПоля = СтрокаГруппировки.ИмяГруппировки;
		ИмяИсточника = Лев(ИмяПоля, Найти(ИмяПоля,"__") - 1);
     	ИмяПоляБезИсточника = Сред(ИмяПоля,Найти(ИмяПоля, "__") + 2); 

		//Отдельно обработаем значения свойств
		Если ИмяИсточника = "ЗначенияСвойствОбъектов"  Тогда

			//Подменяем источник данных: свойства будут присоединяться к источникам носителей свойств
			ИмяИсточника = Лев(ИмяПоляБезИсточника, Найти(ИмяПоляБезИсточника,"__") - 1);

			НоваяСтрока = ТаблицаИсточниковСвойствКатегорий.Добавить();
			НоваяСтрока.ПолноеИмяПоля = СтрокаГруппировки.ИмяГруппировки;
			НоваяСтрока.ИмяИсточникаОбъекта = ИмяИсточника;
			ОписаниеПоляДляТаблицыПолей = "<" + ИмяПоля + ">";
		Иначе
			//СтрокаОписаниеПоля = Отчет.мТаблицаОписанияВсехПолей.Найти(ИмяПоля,"ИмяПоля");
			//ОписаниеПоляДляТаблицыПолей = СтрокаОписаниеПоля.ОписаниеПоля;
			ОписаниеПоляДляТаблицыПолей = СтрокаГруппировки.ОписаниеГруппировки;
		КонецЕсли;

		//Пополнение таблицы источников данных
		СтрокаТаблицыИсточников = ТаблицаИсточниковДанных.Найти(ИмяИсточника,"ИмяИсточника");
		Если СтрокаТаблицыИсточников = Неопределено Тогда
			СтрокаТаблицыИсточников = ИнициализироватьСтрокуТаблицыИсточниковДанных(ТаблицаИсточниковДанных, ИмяИсточника);
		КонецЕсли; 

		// Пополнение списка полей источника данных
		НовоеПоле = СтрокаТаблицыИсточников.ТаблицаПолей.Добавить();
		НовоеПоле.ИмяПоля = ИмяПоля;
		НовоеПоле.ОписаниеПоля = ОписаниеПоляДляТаблицыПолей;
		НовоеПоле.ТипПоля = "Группировка"+СтрокаГруппировки.ВидГруппировки;

		//Описание полей основного запроса
		Если СтрокаГруппировки.ВидГруппировки = "Обычная" тогда
			ТекстПоляЗапроса = ТекстПоляЗапроса + ",
			|	" + ИмяПоля + " КАК " + ИмяПоля;

			Если СтрокаГруппировки.ЕстьПолеПредставление Тогда
				ТекстПоляЗапроса = ТекстПоляЗапроса + ",
				|	" + ИмяПоля + ".Представление КАК " + ИмяПоля + "Представление";
			Иначе
				ТекстПоляЗапроса = ТекстПоляЗапроса + ",
				|	" + ИмяПоля + " КАК " + ИмяПоля + "Представление";
			КонецЕсли;

			ИмяПоляГруппировки = ИмяПоля;

		Иначе

			ИмяПоляГруппировки = СтрокаГруппировки.ИмяГруппировки+"ПоИнтервалам";
			
			Если СтрокаГруппировки.ВидГруппировки = "ИнтервальнаяАгрегатная"  тогда

				// Если в настройках есть обычные группировки, то значение интервальной агрегатной группировки
				//будет рассчитываться отдельным подзапросом
				Если ЕстьОбычныеГруппировки Тогда
				    ПрефиксИсточникаДанныхИГ = "БазовыйПоказательИГ";
				Иначе	
					ПрефиксИсточникаДанныхИГ = "";
				КонецЕсли; 

				//Описание поля выбора номера интервала для интервальной агрегатной группировки 
				ТекстПоляЗапроса = ТекстПоляЗапроса + ",
				|	" +  ОписаниеПоляВыбораНомераИнтервала(КопияИнтервалыГруппировокОтчета, СтрокаГруппировки.ИмяГруппировки, "ИнтервальнаяАгрегатная", ПрефиксИсточникаДанныхИГ)+ " КАК " + ИмяПоляГруппировки;

			Иначе
				ТекстПоляЗапроса = ТекстПоляЗапроса + ",
				|	" +  ИмяПоляГруппировки + " КАК " +ИмяПоляГруппировки;
			КонецЕсли;	
		КонецЕсли;	

		ТекстКонтрольныеТочкиИтогов = ТекстКонтрольныеТочкиИтогов + ",
			|	" + ИмяПоляГруппировки + ?(ЕстьИерархия(СтрокаГруппировки.ИмяГруппировки,мТаблицаГруппировки)," ИЕРАРХИЯ","") + " КАК " + ИмяПоляГруппировки;

	КонецЦикла;


	Для Каждого СтрокаПоказатели Из КопияПоказателиОтчета Цикл
		
		ИмяПоля = СтрокаПоказатели.ИмяПоказателя;
		ИмяИсточника = Лев(ИмяПоля, Найти(ИмяПоля,"__") - 1);
		ИмяПоляБезИсточника = Сред(ИмяПоля,Найти(ИмяПоля, "__") + 2); 
		
		ОписаниеПоляПоказателя = ",
		|	" + ИмяПоля + " КАК " + ИмяПоля;

		Если Найти(ТекстПоляЗапроса,ОписаниеПоляПоказателя) <> 0 Тогда//Выполним контроль по полному описанию поля	
			Продолжить;	
		КонецЕсли;	
		
		//Отдельно обработаем значения свойств
		Если (ИмяИсточника = "ЗначенияСвойствОбъектов") или (ИмяИсточника = "КонтактнаяИнформация")  Тогда
			//Подменяем источник данных: свойства будут присоединяться к источникам носителей свойств
			ИмяИсточника = Лев(ИмяПоляБезИсточника, Найти(ИмяПоляБезИсточника,"__") - 1);

			НоваяСтрока = ТаблицаИсточниковСвойствКатегорий.Добавить();
			НоваяСтрока.ПолноеИмяПоля = ИмяПоля;
			НоваяСтрока.ИмяИсточникаОбъекта = ИмяИсточника;
			ОписаниеПоляДляТаблицыПолей = "<" + ИмяПоля + ">";
		Иначе
			//СтрокаОписаниеПоля = Отчет.мТаблицаОписанияВсехПолей.Найти(ИмяПоля,"ИмяПоля");
			//ОписаниеПоляДляТаблицыПолей = СтрокаОписаниеПоля.ОписаниеПоля;
			ОписаниеПоляДляТаблицыПолей = СтрокаПоказатели.ОписаниеПоказателя;
		КонецЕсли;

		//Пополнение таблицы источников данных
		СтрокаТаблицыИсточников = ТаблицаИсточниковДанных.Найти(ИмяИсточника,"ИмяИсточника");
		Если СтрокаТаблицыИсточников = Неопределено Тогда
			СтрокаТаблицыИсточников = ИнициализироватьСтрокуТаблицыИсточниковДанных(ТаблицаИсточниковДанных, ИмяИсточника);
		КонецЕсли; 

		// Пополнение списка полей источника данных
		Если СтрокаТаблицыИсточников.ТаблицаПолей.Найти(ИмяПоля, "ИмяПоля") = Неопределено тогда
			НовоеПоле = СтрокаТаблицыИсточников.ТаблицаПолей.Добавить();
			НовоеПоле.ИмяПоля = ИмяПоля;
			НовоеПоле.ОписаниеПоля = ОписаниеПоляДляТаблицыПолей;
			НовоеПоле.ТипПоля = "Показатель";
		КонецЕсли; 
		
		//Описание полей основного запроса
		ТекстПоляЗапроса = ТекстПоляЗапроса + ОписаниеПоляПоказателя;
		Если СтрокаПоказатели.ЕстьПолеПредставление Тогда
			ТекстПоляЗапроса = ТекстПоляЗапроса + ",
			|	" + ИмяПоля + ".Представление КАК " + ИмяПоля + "Представление";
		Иначе
			ТекстПоляЗапроса = ТекстПоляЗапроса + ",
			|	" + ИмяПоля + " КАК " + ИмяПоля + "Представление";
		КонецЕсли;

		Если СтрокаПоказатели.ИтоговоеПоле Тогда
			ТекстАгрегатныеФункцииИтогов = ТекстАгрегатныеФункцииИтогов + ",
			|	Сумма (" + ИмяПоля + ")";
		КонецЕсли; 

		Если СтрокаПоказатели.Сортировка <> 0 Тогда
			ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ", " + СтрокаПоказатели.ИмяПоказателя + ?(СтрокаПоказатели.Сортировка = 1, " Возр", " Убыв");
		КонецЕсли;

	КонецЦикла;

	//Таблица установленных фильтров
	ТаблицаСписокВсехФильтров = КопияОтборыОтчета.Скопировать();
	ТаблицаСписокВсехФильтров.Свернуть("ИмяОтбора, ПредставлениеОтбора, ВидСравнения,ЗначениеС,ЗначениеПо, ОписаниеФильтра",);
	
	Для Каждого СтрокаФильтры Из ТаблицаСписокВсехФильтров Цикл
		
		// Формируем текст вложенного фильтра
		ИмяПоля = СтрокаФильтры.ИмяОтбора;
		ИмяИсточника = Лев(ИмяПоля, Найти(ИмяПоля,"__") - 1);
		ИмяПоляБезИсточника = Сред(ИмяПоля,Найти(ИмяПоля, "__") + 2); 
		ВидСравненияОтбора = ПолучитьВидСравненияПоТексту(СтрокаФильтры.ВидСравнения);

   		//Отдельно обработаем значения свойств и категорий
		Если (ИмяИсточника = "ЗначенияСвойствОбъектов")или(ИмяИсточника = "КатегорииОбъектов")или(ИмяИсточника = "КонтактнаяИнформация") Тогда

			//В список необходимых источников данных надо добавить источник объектов свойства
			ИмяИсточникаОбъектаСвойства = Лев(ИмяПоляБезИсточника, Найти(ИмяПоляБезИсточника,"__") - 1);
			СтрокаТаблицыИсточников = ТаблицаИсточниковДанных.Найти(ИмяИсточникаОбъектаСвойства,"ИмяИсточника");
			Если СтрокаТаблицыИсточников = Неопределено Тогда
				СтрокаТаблицыИсточников = ИнициализироватьСтрокуТаблицыИсточниковДанных(ТаблицаИсточниковДанных, ИмяИсточникаОбъектаСвойства);
			КонецЕсли; 

			//Для фильтров на значения свойств и контактную информацию надо формировать отдельные запросы,
			//если используется условие-отрицание
			Если Найти(ВидСравненияОтбора,"Не") Тогда
				ПолноеИмяПоляСПрефиксом = ИмяПоля+"_Фильтр";
			Иначе	
				ПолноеИмяПоляСПрефиксом = ИмяПоля;
			КонецЕсли; 
        	
			
			СтруктураПоиска = Новый Структура("ИмяОтбора");
			СтруктураПоиска.ИмяОтбора = ИмяПоля;
			НайденныеСтроки = КопияОтборыОтчета.НайтиСтроки(СтруктураПоиска);

			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

				//Сохраним значение параметра
				ИмяПараметраДляЗначения = "Параметр" + НайденнаяСтрока.НомерСтроки;
				Если НайденнаяСтрока.ВидСравнения = "Содержит" ИЛИ НайденнаяСтрока.ВидСравнения = "Не содержит" Тогда
					Запрос.УстановитьПараметр(ИмяПараметраДляЗначения, "%" + НайденнаяСтрока.Значение + "%");
				Иначе
					Запрос.УстановитьПараметр(ИмяПараметраДляЗначения, НайденнаяСтрока.Значение);
				КонецЕсли;

				Если СтрокаФильтры.ВидСравнения <> "Все из" тогда
					СтрокаИсточник = ТаблицаИсточниковСвойствКатегорий.Найти(ПолноеИмяПоляСПрефиксом, "ПолноеИмяПоля");
					Если СтрокаИсточник = Неопределено Тогда
						СтрокаИсточник = ТаблицаИсточниковСвойствКатегорий.Добавить();
					КонецЕсли;
				Иначе // Для фильтра типа "Все из" каждое условие записывается отдельно
					СтрокаИсточник = ТаблицаИсточниковСвойствКатегорий.Добавить();
				КонецЕсли;

				СтрокаИсточник.ПолноеИмяПоля = ПолноеИмяПоляСПрефиксом;
				СтрокаИсточник.СтрокаПараметров = СтрокаИсточник.СтрокаПараметров + ",  &" + ИмяПараметраДляЗначения;
				СтрокаИсточник.ТипФильтра = ВидСравненияОтбора;
				СтрокаИсточник.ИмяИсточникаОбъекта = ИмяИсточникаОбъектаСвойства;

			КонецЦикла;

		Иначе // остальные источники данных, которые просто присоединяются к основному источнику

			//Пополнение таблицы источников данных
			СтрокаТаблицыИсточников = ТаблицаИсточниковДанных.Найти(ИмяИсточника,"ИмяИсточника");
			Если СтрокаТаблицыИсточников = Неопределено Тогда
				СтрокаТаблицыИсточников = ИнициализироватьСтрокуТаблицыИсточниковДанных(ТаблицаИсточниковДанных, ИмяИсточника);
			КонецЕсли; 

			// Пополнение списка полей источника данных
			Если СтрокаТаблицыИсточников.ТаблицаПолей.Найти(ИмяПоля,"ИмяПоля") = Неопределено тогда
				НовоеПоле = СтрокаТаблицыИсточников.ТаблицаПолей.Добавить();
				НовоеПоле.ИмяПоля = ИмяПоля;
				НовоеПоле.ОписаниеПоля = СтрокаФильтры.ОписаниеФильтра;//ИмяПоляБезИсточника;
				НовоеПоле.ТипПоля = "Фильтр";
			КонецЕсли; 

			ТекстСписокПараметров = "";
			ИмяПараметраДляЗначенияС = "";
			ИмяПараметраДляЗначенияПо = "";
			ЛитералДляЗначенияС = "";
			ЛитералДляЗначенияПо = "";

			Если ВидСравненияПринадлежитГруппе(ВидСравненияОтбора,"Интервальные") тогда

				Если ТипЗнч(СтрокаФильтры.ЗначениеС)=Тип("Дата") тогда
					ЛитералДляЗначенияС = "ДАТАВРЕМЯ("+ЧислоВСтрокуДляТекстаЗапроса(Год(СтрокаФильтры.ЗначениеС))+","+Месяц(СтрокаФильтры.ЗначениеС)+","+День(СтрокаФильтры.ЗначениеС)+")";
				иначе
					ЛитералДляЗначенияС = Строка(ЧислоВСтрокуДляТекстаЗапроса(СтрокаФильтры.ЗначениеС));
				КонецЕсли;	 
				Если ТипЗнч(СтрокаФильтры.ЗначениеС)=Тип("Дата") тогда
					ЛитералДляЗначенияПо = "ДАТАВРЕМЯ("+ЧислоВСтрокуДляТекстаЗапроса(Год(СтрокаФильтры.ЗначениеПо))+","+Месяц(СтрокаФильтры.ЗначениеПо)+","+День(СтрокаФильтры.ЗначениеПо)+")";
				иначе
					ЛитералДляЗначенияПо = Строка(ЧислоВСтрокуДляТекстаЗапроса(СтрокаФильтры.ЗначениеПо));
				КонецЕсли;	 

			Иначе//Для отбора, заданного одним значением или списком значений	

				СтруктураПоиска = Новый Структура("ИмяОтбора");
				СтруктураПоиска.ИмяОтбора = ИмяПоля;
				НайденныеСтроки = КопияОтборыОтчета.НайтиСтроки(СтруктураПоиска);

				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

					//Сохраним значение параметра
					ИмяПараметраДляЗначения = "Параметр" + НайденнаяСтрока.НомерСтроки;
					Если НайденнаяСтрока.ВидСравнения = "Содержит" ИЛИ НайденнаяСтрока.ВидСравнения = "Не содержит" Тогда
						Запрос.УстановитьПараметр(ИмяПараметраДляЗначения, "%" + НайденнаяСтрока.Значение + "%");
					Иначе
						Запрос.УстановитьПараметр(ИмяПараметраДляЗначения, НайденнаяСтрока.Значение);
					КонецЕсли;
					ТекстСписокПараметров = ТекстСписокПараметров + ", &"+ИмяПараметраДляЗначения;

				КонецЦикла;

				ТекстСписокПараметров = Сред(СокрЛП(ТекстСписокПараметров),2);
			КонецЕсли;	 

			//Получаем текст для строки предложения "ГДЕ"
			//СтрокаОписаниеПоля = Отчет.мТаблицаОписанияВсехПолей.Найти(ИмяПоля,"ИмяПоля");
			//ТекстВложенногоФильтры = ПолучитьТекстДляСтрокиОтбора(СтрокаОписаниеПоля.ОписаниеПоля, ВидСравненияОтбора, ТекстСписокПараметров, ЛитералДляЗначенияС,ЛитералДляЗначенияПо);
			ТекстВложенногоФильтры = ПолучитьТекстДляСтрокиОтбора(СтрокаФильтры.ОписаниеФильтра, ВидСравненияОтбора, ТекстСписокПараметров, ЛитералДляЗначенияС,ЛитералДляЗначенияПо);
			Если Не ПустаяСтрока(ТекстВложенногоФильтры) Тогда
				СтрокаТаблицыИсточников.СтрФильтры = СтрокаТаблицыИсточников.СтрФильтры + " И " + ТекстВложенногоФильтры;
			КонецЕсли;

		КонецЕсли;	
	КонецЦикла;

	// Удаление лишних запятых
	ТекстПоляЗапроса = Сред(ТекстПоляЗапроса, 2);
	ТекстКонтрольныеТочкиИтогов = Сред(ТекстКонтрольныеТочкиИтогов, 2);
	ТекстАгрегатныеФункцииИтогов = Сред(ТекстАгрегатныеФункцииИтогов, 2);
	ТекстПоляУпорядочивания = Сред(ТекстПоляУпорядочивания, 2);

	//Формируем текст источника данных на основании соединений данных по всем источникам
 	ТекстИсточникДанных = "";
	Для каждого СтрокаТаблицыИсточников Из ТаблицаИсточниковДанных Цикл
		ТекстИсточникДанных = ТекстИсточникДанных + Отчет.ПолучитьТекстИсточникаПоИмени(СтрокаТаблицыИсточников, ТаблицаИсточниковСвойствКатегорий);
	КонецЦикла;

	//Формируем текст запроса
	
	Если  КопияГруппировкиОтчета.Найти("ИнтервальнаяАгрегатная","ВидГруппировки") <> Неопределено 
		И ЕстьОбычныеГруппировки Тогда

		// ЕСЛИ ПОЛЬЗОВАТЕЛЬ ВЫБРАЛ ИНТЕРВАЛЬНЫЕ АГРЕГАТНЫЕ ГРУППИРОВКИ
		
		//Формируем текст запроса основной выборки
		ТекстПоляОсновнойВыборки = "";
		Для Каждого СтрокаГруппировки из  КопияГруппировкиОтчета цикл
			Если СтрокаГруппировки.ВидГруппировки = "Интервальная" Тогда
				ОписаниеПоля = СтрокаГруппировки.ИмяГруппировки+"ПоИнтервалам" + " КАК "+СтрокаГруппировки.ИмяГруппировки+"ПоИнтервалам";
			Иначе
				ОписаниеПоля = СтрокаГруппировки.ИмяГруппировки + " КАК "+СтрокаГруппировки.ИмяГруппировки;
			КонецЕсли; 
			ТекстПоляОсновнойВыборки = ТекстПоляОсновнойВыборки+", "+Символы.ПС+"	"+ОписаниеПоля;
		КонецЦикла;	

		Для Каждого СтрокаПоказатели из  КопияПоказателиОтчета цикл
			ОписаниеПоля = СтрокаПоказатели.ИмяПоказателя + " КАК "+СтрокаПоказатели.ИмяПоказателя;
			Если Найти(ТекстПоляОсновнойВыборки, ОписаниеПоля) = 0 Тогда
				ТекстПоляОсновнойВыборки = ТекстПоляОсновнойВыборки + ", "+Символы.ПС + "	" + ОписаниеПоля;
			КонецЕсли; 
		КонецЦикла;	
		ТекстПоляОсновнойВыборки = Сред(ТекстПоляОсновнойВыборки,2);

		ТекстОсновнойВыборки =
		"ВЫБРАТЬ " + ТекстПоляОсновнойВыборки + "
		|ИЗ "+ Символы.ПС + ТекстИсточникДанных +"
		|";

		//Получим текст истоничков данных для интервальных агрегатных группировок
		ТекстыИсточниковДанныхИнтервальныхАгрегатныхГруппировок = ПолучитьТекстыИсточниковДанныхДляИнтервальныхАгрегатныхГруппировок(КопияГруппировкиОтчета, ТекстОсновнойВыборки);

		ТекстПоляВсехВыборок = "";
		Для Каждого СтрокаГруппировки из  КопияГруппировкиОтчета цикл
			Если СтрокаГруппировки.ВидГруппировки = "Обычная" Тогда
				ТекстПоляВсехВыборок = ТекстПоляВсехВыборок+", "+Символы.ПС+"	ОсновнаяВыборка."+СтрокаГруппировки.ИмяГруппировки;
			ИначеЕсли СтрокаГруппировки.ВидГруппировки = "Интервальная" тогда
				ТекстПоляВсехВыборок = ТекстПоляВсехВыборок+", "+Символы.ПС+"	ОсновнаяВыборка."+СтрокаГруппировки.ИмяГруппировки+"ПоИнтервалам";
			Иначе//интервальная агрегатная группировка	
				ТекстПоляВсехВыборок = ТекстПоляВсехВыборок+", "+Символы.ПС+"	ДанныеИГ"+СтрокаГруппировки.ИмяГруппировки+"."+СтрокаГруппировки.ИмяГруппировки + " КАК БазовыйПоказательИГ"+СтрокаГруппировки.ИмяГруппировки;
			КонецЕсли;	 
		КонецЦикла;	

		Для Каждого СтрокаПоказатели из  КопияПоказателиОтчета цикл
			ТекстПоляВсехВыборок = ТекстПоляВсехВыборок + ", "+Символы.ПС + "	ОсновнаяВыборка." + СтрокаПоказатели.ИмяПоказателя;
		КонецЦикла;	
		ТекстПоляВсехВыборок = Сред(ТекстПоляВсехВыборок,2);

		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ТекстПоляЗапроса + "
		|ИЗ ("+ Символы.ПС + " 
		|	ВЫБРАТЬ " + ТекстПоляВсехВыборок +" ИЗ (
		|	" + ТекстОсновнойВыборки +") КАК ОсновнаяВыборка"+ ТекстыИсточниковДанныхИнтервальныхАгрегатныхГруппировок+"
		|) КАК ВсеДанные";

	Иначе// интервальных агрегатных группировок нет

		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ТекстПоляЗапроса + "
		|ИЗ "+ Символы.ПС + ТекстИсточникДанных +"
		|";

	КонецЕсли; 
	
	Если Не ПустаяСтрока(ТекстПоляУпорядочивания) Тогда
		ТекстЗапроса = ТекстЗапроса  + Символы.ПС +
		"УПОРЯДОЧИТЬ ПО " + ТекстПоляУпорядочивания;
	КонецЕсли;

	Если Не ПустаяСтрока(ТекстКонтрольныеТочкиИтогов) Тогда
		Если НЕ ПустаяСтрока(ТекстАгрегатныеФункцииИтогов) Тогда
			 ТекстЗапроса = ТекстЗапроса + Символы.ПС +  
			"ИТОГИ " + ТекстАгрегатныеФункцииИтогов + Символы.ПС + "ПО ОБЩИЕ, " + ТекстКонтрольныеТочкиИтогов;
		иначе
			ТекстЗапроса = ТекстЗапроса + Символы.ПС +  
			"ИТОГИ ПО " + ТекстКонтрольныеТочкиИтогов;
		КонецЕсли; 
	КонецЕсли; 

	Запрос.Текст = ТекстЗапроса;

	// Выполнение сформированного запроса
	Попытка
		Возврат Запрос.Выполнить();
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки
	
КонецФункции

// Формирует таблицу полей данных, доступных отчету
//
// Параметры: 
//  ТаблицаПараметрыЗапроса - таблица параметров запроса, которая пополняется при описании вычисляемых полей
//
// Возвращаемое значение:
//  Таблица, содержащая описания полей, доступных отчёту
//
Функция СтатистикаСпискиПолучитьОписаниеВсехПолей(ОсновнойИсточник, СписокРегистровСведений, ТаблицаПараметрыЗапроса) Экспорт

	ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(500);
	ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	ТаблицаОписаниеВсехПолей = Новый ТаблицаЗначений;
	ТаблицаОписаниеВсехПолей.Колонки.Добавить("ИмяИсточника", ОписаниеТиповСтрока);
	ТаблицаОписаниеВсехПолей.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
	ТаблицаОписаниеВсехПолей.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
	ТаблицаОписаниеВсехПолей.Колонки.Добавить("ОписаниеПоля", ОписаниеТиповСтрока);
	ТаблицаОписаниеВсехПолей.Колонки.Добавить("ОписаниеТипов");
	ТаблицаОписаниеВсехПолей.Колонки.Добавить("Свойство");
	ТаблицаОписаниеВсехПолей.Колонки.Добавить("ИтоговоеПоле", ОписаниеТиповБулево);
	ТаблицаОписаниеВсехПолей.Колонки.Добавить("ТипПоля", ОписаниеТиповСтрока);
	ТаблицаОписаниеВсехПолей.Индексы.Добавить("ИмяПоля");
	ТаблицаОписаниеВсехПолей.Индексы.Добавить("ОписаниеТипов");
	ТаблицаОписаниеВсехПолей.Индексы.Добавить("ПредставлениеПоля");

	// предопределенный показатель - физлицо
	ИмяРегистра = ОсновнойИсточник;
	Если ОсновнойИсточник = "РаботникиОрганизаций" Тогда
		Измерение = Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Сотрудник;
	Иначе
		Измерение = Метаданные.РегистрыСведений[ИмяРегистра].Измерения.ФизЛицо;
	КонецЕсли;
	ИмяПоля = ИмяРегистра + "__" + Измерение.Имя;
	
	НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
	НоваяСтрока.ИмяИсточника = ИмяРегистра;
	НоваяСтрока.ПредставлениеПоля = Измерение.Представление();
	НоваяСтрока.ОписаниеПоля = ИмяРегистра +"."+СокрЛП(Измерение.Имя);
	НоваяСтрока.ИмяПоля = ИмяПоля;
	НоваяСтрока.ОписаниеТипов = Измерение.Тип;
	НоваяСтрока.ТипПоля   = "Реальное";

	Если ОсновнойИсточник = "РаботникиОрганизаций" Тогда
		НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
		НоваяСтрока.ИмяИсточника = ИмяРегистра;
		НоваяСтрока.ПредставлениеПоля = "Место работы";
		НоваяСтрока.ОписаниеПоля = ИмяРегистра +".Сотрудник.ВидЗанятости";
		НоваяСтрока.ИмяПоля = ИмяРегистра+"__Сотрудник__ВидЗанятости";
		НоваяСтрока.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятостиВОрганизации");
		НоваяСтрока.ТипПоля = "Реальное";
	КонецЕсли; 
	
	ТипФизЛиц = Тип("СправочникСсылка.ФизическиеЛица");

	//Заполняем структуру информации о всех возможных полях источников данных, на которые могут быть наложены условия
	Для Каждого ЭлементСписка Из СписокРегистровСведений Цикл

		ИмяРегистра = СтрЗаменить(ЭлементСписка.Значение,"_","");
		МетаданныеРегистр = Метаданные.РегистрыСведений[ИмяРегистра];

		Если МетаданныеРегистр.Измерения.Количество() <> 0 Тогда
			Для каждого Измерение Из МетаданныеРегистр.Измерения Цикл

				Если Измерение.Тип.СодержитТип(ТипФизЛиц) Тогда // это предопределенное измерение, оно уже присутствует
					Продолжить
				КонецЕсли;
				
				Если ТаблицаОписаниеВсехПолей.Найти(Измерение.Представление(),"ПредставлениеПоля") = Неопределено Тогда
					ИмяПоля = ИмяРегистра +"__"+СтрЗаменить(СокрЛП(Измерение.Имя),"_","");
					НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
					НоваяСтрока.ИмяИсточника = ИмяРегистра;
					НоваяСтрока.ПредставлениеПоля = Измерение.Представление();
					НоваяСтрока.ОписаниеПоля = ИмяРегистра +"."+СокрЛП(Измерение.Имя);
					НоваяСтрока.ИмяПоля = ИмяПоля;
					НоваяСтрока.ОписаниеТипов = Измерение.Тип;
				    НоваяСтрока.ТипПоля   = "Реальное";
				
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Ресурс Из МетаданныеРегистр.Ресурсы Цикл
			 Если Найти(ВРег(Ресурс),"ЗАВЕРШЕНИЯ") = 0 Тогда  
				ИмяПоля = ИмяРегистра +"__"+СтрЗаменить(СокрЛП(Ресурс.Имя),"_","");
				НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
				НоваяСтрока.ИмяИсточника = ИмяРегистра;
				НоваяСтрока.ПредставлениеПоля = Ресурс.Представление();
				НоваяСтрока.ИмяПоля = ИмяПоля;
				НоваяСтрока.ОписаниеПоля = ИмяРегистра +"."+СокрЛП(Ресурс.Имя);
				НоваяСтрока.ОписаниеТипов = Ресурс.Тип;
				НоваяСтрока.ИтоговоеПоле = Найти("ЗанимаемыхСтавок",Ресурс.Имя) <> 0;
			    НоваяСтрока.ТипПоля   = "Реальное";

				//корректировка представления 
				Если Ресурс.Имя = "ЗанимаемыхСтавок" тогда
					НоваяСтрока.ПредставлениеПоля = "Принят на ставку";
				ИначеЕсли (Ресурс.Имя = "Состояние") и (ИмяРегистра = "СостояниеКандидатовНаРаботу") тогда
					НоваяСтрока.ПредставлениеПоля = "Состояние как кандидата";
				КонецЕсли;
			 КонецЕсли;	
			КонецЦикла;

			Для каждого Реквизит Из МетаданныеРегистр.Реквизиты Цикл

				ИмяПоля = ИмяРегистра +"__"+СтрЗаменить(СокрЛП(Реквизит.Имя),"_","");
				НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
				НоваяСтрока.ИмяИсточника = ИмяРегистра;
				НоваяСтрока.ПредставлениеПоля = Реквизит.Представление();
				НоваяСтрока.ИмяПоля = ИмяПоля;
				НоваяСтрока.ОписаниеПоля = ИмяРегистра +"."+СокрЛП(Реквизит.Имя);
				НоваяСтрока.ОписаниеТипов = Реквизит.Тип;
			    НоваяСтрока.ТипПоля   = "Реальное";
				
			КонецЦикла;

		КонецЕсли;

		// ВЫЧИСЛЯЕМЫЕ ПОЛЯ РЕГИСТРОВ СВЕДЕНИЙ
		Если ЭлементСписка.Значение = "РаботникиОрганизаций" Тогда

			ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, "Прием",Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
			ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, "ПриказНеУказан",Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка());
			
			СтрокаТЗ = ТаблицаОписаниеВсехПолей.Найти("РаботникиОрганизаций__ОбособленноеПодразделение","ИмяПоля");
			СтрокаТЗ.ПредставлениеПоля = "Организация";
			
			СтрокаТЗ = ТаблицаОписаниеВсехПолей.Найти("РаботникиОрганизаций__Организация","ИмяПоля");
			СтрокаТЗ.ПредставлениеПоля = "Головная организация";
			
			// Счетчик количества работников
			НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
			НовоеОписаниеПоля.ИмяПоля           = "РаботникиОрганизаций__КоличествоФизЛиц";
			НовоеОписаниеПоля.ПредставлениеПоля = "Количество работников";
			НовоеОписаниеПоля.ОписаниеПоля      = "1";
			НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
			НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
			НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";

			//Счетчик работающих по основному месту
			НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
			НовоеОписаниеПоля.ИмяПоля           = "РаботникиОрганизаций__КолРаботающихПоОснМесту";
			НовоеОписаниеПоля.ПредставлениеПоля = "Кол-во работающих по основному месту";
			НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА ВЫБОР КОГДА РаботникиОрганизаций.Регистратор = &ПриказНеУказан ТОГДА ОсновныеПриказыОПриеме.Сотрудник.ВидЗанятости ИНАЧЕ РаботникиОрганизаций.Сотрудник.ВидЗанятости КОНЕЦ = &ОсновноеМестоРаботы ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
			НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
			НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
			НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
			ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, "ОсновноеМестоРаботы",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);

			//Счетчик работающих не по основному месту
			НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
			НовоеОписаниеПоля.ИмяПоля           = "РаботникиОрганизаций__КолРаботающихНеПоОснМесту";
			НовоеОписаниеПоля.ПредставлениеПоля = "Кол-во работающих по внешнему совместительству";
			НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА ВЫБОР КОГДА РаботникиОрганизаций.Регистратор = &ПриказНеУказан ТОГДА ОсновныеПриказыОПриеме.Сотрудник.ВидЗанятости ИНАЧЕ РаботникиОрганизаций.Сотрудник.ВидЗанятости КОНЕЦ = &Совместительство ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
			НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
			НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
			НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
			ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, "Совместительство",Перечисления.ВидыЗанятостиВОрганизации.Совместительство);

			НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
			НовоеОписаниеПоля.ИмяПоля           = "РаботникиОрганизаций__КолРаботающихПоВнутрСовм";
			НовоеОписаниеПоля.ПредставлениеПоля = "Кол-во работающих по внутреннему совместительству";
			НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА ВЫБОР КОГДА РаботникиОрганизаций.Регистратор = &ПриказНеУказан ТОГДА ОсновныеПриказыОПриеме.Сотрудник.ВидЗанятости ИНАЧЕ РаботникиОрганизаций.Сотрудник.ВидЗанятости КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
			НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
			НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
			НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
			ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, "ВнутреннееСовместительство",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);

			//Счетчик мужчин
			НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
			НовоеОписаниеПоля.ИмяПоля           = "РаботникиОрганизаций__КоличествоМужчин";
			НовоеОписаниеПоля.ПредставлениеПоля = "Количество мужчин";
			НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА РаботникиОрганизаций.Сотрудник.ФизЛицо.Пол=&Пол_Мужской ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
			НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
			НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
			НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
			ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, "Пол_Мужской",Перечисления.ПолФизическихЛиц.Мужской);

			//Счетчик женщин
			НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
			НовоеОписаниеПоля.ИмяПоля           = "РаботникиОрганизаций__КоличествоЖенщин";
			НовоеОписаниеПоля.ПредставлениеПоля = "Количество женщин";
			НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА РаботникиОрганизаций.Сотрудник.ФизЛицо.Пол=&Пол_Женский ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
			НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
			НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
			НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
			ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, "Пол_Женский",Перечисления.ПолФизическихЛиц.Женский);

		ИначеЕсли ЭлементСписка.Значение = "СостояниеРаботниковОрганизаций" Тогда

			//Счетчики по состоянию - работающих по совместительству
			МетаданныеПеречисления = Метаданные.Перечисления.СостоянияРаботникаОрганизации;
			Для Каждого Значение ИЗ МетаданныеПеречисления.ЗначенияПеречисления цикл
				Если Значение.Имя = "НеРаботает" Тогда
					Продолжить;
				КонецЕсли;
				НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
				НовоеОписаниеПоля.ИмяПоля           = "СостояниеРаботниковОрганизаций__КолПоСостоянию"+Значение.Имя;
				НовоеОписаниеПоля.ПредставлениеПоля = "Имеют состояние: "+Значение.Представление();
				ИмяПараметра = "Состояние_"+Значение.Имя;
				НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА Состояние=&"+ИмяПараметра+" ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
				НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
				НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
				НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
				ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, ИмяПараметра,Перечисления.СостоянияРаботникаОрганизации[Значение.Имя]);
			КонецЦикла;	
			
		ИначеЕсли ЭлементСписка.Значение = "Работники" тогда	

			// Счетчик количества работников
			НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
			НовоеОписаниеПоля.ИмяПоля           = "Работники__КоличествоФизЛиц";
			НовоеОписаниеПоля.ПредставлениеПоля = "Количество работников";
			НовоеОписаниеПоля.ОписаниеПоля      = "1";
			НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
			НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
			НовоеОписаниеПоля.ТипПоля   = "Вычисляемое";

			//Счетчик мужчин
			НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
			НовоеОписаниеПоля.ИмяПоля           = "Работники__КоличествоМужчин";
			НовоеОписаниеПоля.ПредставлениеПоля = "Количество мужчин";
			НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА Работники.ФизЛицо.Пол=&Пол_Мужской ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
			НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
			НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
			НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
			ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, "Пол_Мужской",Перечисления.ПолФизическихЛиц.Мужской);

			//Счетчик женщин
			НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
			НовоеОписаниеПоля.ИмяПоля           = "Работники__КоличествоЖенщин";
			НовоеОписаниеПоля.ПредставлениеПоля = "Количество женщин";
			НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА Работники.ФизЛицо.Пол=&Пол_Женский ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
			НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
			НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
			НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
			ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, "Пол_Женский",Перечисления.ПолФизическихЛиц.Женский);


		ИначеЕсли ЭлементСписка.Значение = "СостояниеРаботников" тогда	

			//Счетчики по состоянию работников
			МетаданныеПеречисления = Метаданные.Перечисления.СостоянияРаботника;
			Для Каждого Значение ИЗ МетаданныеПеречисления.ЗначенияПеречисления цикл
				Если Значение.Имя = "НеРаботает" Тогда
					Продолжить;
				КонецЕсли;
				НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
				НовоеОписаниеПоля.ИмяПоля           = "СостояниеРаботников__КолПоСостоянию"+Значение.Имя;
				НовоеОписаниеПоля.ПредставлениеПоля = "Имеют состояние: "+Значение.Представление();
				ИмяПараметра = "Состояние_"+Значение.Имя;
				НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА Состояние=&"+ИмяПараметра+" ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
				НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
				НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
				НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
				ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, ИмяПараметра,Перечисления.СостоянияРаботника[Значение.Имя]);
			КонецЦикла;

		КонецЕсли;
		
	КонецЦикла;

	// реквизиты справочника "Физические лица"
	ИмяРегистра = "ФизическиеЛица";

	НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
	НоваяСтрока.ИмяИсточника = ИмяРегистра;
	НоваяСтрока.ПредставлениеПоля = "Наименование";
	НоваяСтрока.ИмяПоля = ИмяРегистра+"__Наименование";
	НоваяСтрока.ОписаниеПоля = ИмяРегистра +"."+"Наименование";
	НоваяСтрока.ОписаниеТипов = ОписаниеТиповСтрока;
	НоваяСтрока.ТипПоля	= "Реальное";
	

	//Информация о виртуальном поле - "ФИО (полностью)"
	НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
	НоваяСтрока.ИмяИсточника = ИмяРегистра;
	НоваяСтрока.ПредставлениеПоля = "ФИО (полностью)";
	НоваяСтрока.ИмяПоля = ИмяРегистра+"__ФиоПолное";
	НоваяСтрока.ОписаниеПоля      = ИмяРегистра +"."+"ФиоПолное";
	НоваяСтрока.ОписаниеТипов = ОписаниеТиповСтрока;
	НоваяСтрока.ТипПоля = "Виртуальное";

	//Информация о виртуальном поле - "Фамилия И.О."
	НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
	НоваяСтрока.ИмяИсточника = ИмяРегистра;
	НоваяСтрока.ПредставлениеПоля = "Фамилия И.О.";
	НоваяСтрока.ИмяПоля = ИмяРегистра+"__ФиоКраткое";
	НоваяСтрока.ОписаниеПоля = ИмяРегистра +"."+"ФиоКраткое";
	НоваяСтрока.ОписаниеТипов = ОписаниеТиповСтрока;
	НоваяСтрока.ТипПоля = "Виртуальное";
	
	Для каждого Реквизит Из Метаданные.Справочники.ФизическиеЛица.Реквизиты Цикл
		ИмяПоля = ИмяРегистра + "__"+СтрЗаменить(СокрЛП(Реквизит.Имя),"_","");
		НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
		НоваяСтрока.ИмяИсточника = ИмяРегистра;
		НоваяСтрока.ПредставлениеПоля = Реквизит.Представление();
		НоваяСтрока.ИмяПоля = ИмяПоля;
		НоваяСтрока.ОписаниеПоля = ИмяРегистра +"."+СокрЛП(Реквизит.Имя);
		НоваяСтрока.ОписаниеТипов = Реквизит.Тип;
		НоваяСтрока.ТипПоля	= "Реальное";
	КонецЦикла;

	//Информация о виртуальном поле - "возраст"
	НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
	НоваяСтрока.ИмяИсточника = ИмяРегистра;
	НоваяСтрока.ПредставлениеПоля = "Возраст";
	НоваяСтрока.ИмяПоля = ИмяРегистра+"__Возраст";
	НоваяСтрока.ОписаниеПоля = ИмяРегистра +"."+"Возраст";
	НоваяСтрока.ОписаниеТипов = ОписаниеТиповЧисло;
	НоваяСтрока.ТипПоля = "Виртуальное";

	//Информация о виртуальном поле - "СемейноеПоложение"
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СемейноеПоложениеФизЛиц"));
	НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
	НоваяСтрока.ИмяИсточника = ИмяРегистра;
	НоваяСтрока.ПредставлениеПоля = "Семейное положение";
	НоваяСтрока.ИмяПоля = ИмяРегистра+"__СемейноеПоложение";
	НоваяСтрока.ОписаниеПоля = ИмяРегистра +"."+"СемейноеПоложение";
	НоваяСтрока.ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	НоваяСтрока.ТипПоля = "Виртуальное";

	//В показатели добавим все возможные виды контактной информации физических лиц
	ИмяРегистра = "КонтактнаяИнформация";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации",Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""#ПроизвольныйВид#"" КАК Ссылка,
	|	0 КАК Код,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Вид КАК Наименование
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	(НЕ(КонтактнаяИнформация.Вид В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	ВидыКонтактнойИнформации.Ссылка ИЗ Справочник.ВидыКонтактнойИнформации ВидыКонтактнойИнформации ))) И
	|	((ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК Справочник.ФизическиеЛица)) = КонтактнаяИнформация.Объект)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Код,
	|	ВидыКонтактнойИнформации.Тип,
	|	ВидыКонтактнойИнформации.Наименование
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|
	|ГДЕ
	|	(ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ) И
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации";

	ВыборкаВидовИнформации = Запрос.Выполнить().Выбрать();	

	НомерПроизвольногоВида = 0;
	Пока ВыборкаВидовИнформации.Следующий() цикл
		Если ВыборкаВидовИнформации.Ссылка = "#ПроизвольныйВид#" тогда
			НомерПроизвольногоВида = НомерПроизвольногоВида +1;
			ТекстВидКИ = "ВидКИПроизвольный" + СокрЛП(НомерПроизвольногоВида);
			ИдентификаторВидаИнформации = ВыборкаВидовИнформации.Наименование;
		Иначе	
			ТекстВидКИ = "ВидКИ" + СокрЛП(ВыборкаВидовИнформации.Код);
			ИдентификаторВидаИнформации = ВыборкаВидовИнформации.Ссылка;
		КонецЕсли;	 

		//Формат имени поля : "ИмяРегистра__ИмяИсточникаОбъекта__Объект_ВидКИ;
		ИмяПоля = "КонтактнаяИнформация__ФизическиеЛица__Ссылка_" + ТекстВидКИ;
		ПредставлениеПоля = ""+ВыборкаВидовИнформации.Тип+" "+НРЕГ(ВыборкаВидовИнформации.Наименование);

		НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
		НоваяСтрока.ИмяИсточника = ИмяРегистра;
		НоваяСтрока.ПредставлениеПоля = ПредставлениеПоля;
		НоваяСтрока.ИмяПоля = ИмяПоля;
		НоваяСтрока.ОписаниеПоля = "";
		НоваяСтрока.ОписаниеТипов = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0);
		НоваяСтрока.ТипПоля	= "Виртуальное";
		ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, ТекстВидКИ,ИдентификаторВидаИнформации);
	КонецЦикла;
	
	// данные из табличных частей справочника Физические лица
	Для каждого ТЧ Из Метаданные.Справочники.ФизическиеЛица.ТабличныеЧасти Цикл
		ИмяРегистра = "ФизическиеЛица_" + СтрЗаменить(ТЧ.Имя,"_","");

		Для каждого Реквизит Из ТЧ.Реквизиты Цикл
			ИмяПоля = ИмяРегистра + "__"+СтрЗаменить(СокрЛП(Реквизит.Имя),"_","");
			НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
			НоваяСтрока.ИмяИсточника = ИмяРегистра;
			НоваяСтрока.ПредставлениеПоля = Реквизит.Представление();
			НоваяСтрока.ИмяПоля = ИмяПоля;
			НоваяСтрока.ОписаниеПоля = ИмяРегистра +"."+СокрЛП(Реквизит.Имя);
			НоваяСтрока.ОписаниеТипов = Реквизит.Тип;
			НоваяСтрока.ТипПоля	= "Реальное";

			//корректировка представления 
			Если Реквизит.Имя = "ВидОбразования" тогда
				НоваяСтрока.ПредставлениеПоля = "Образование";
			КонецЕсли;	

		КонецЦикла;
	КонецЦикла;

	//Информация о виртуальном поле - "возраст родственника"
	ИмяРегистра = "ФизическиеЛица_СоставСемьи";
	НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
	НоваяСтрока.ИмяИсточника = ИмяРегистра;
	НоваяСтрока.ПредставлениеПоля = "Возраст родственника";
	НоваяСтрока.ИмяПоля = ИмяРегистра +"_Триггер__ВозрастРодственника";
	НоваяСтрока.ОписаниеПоля = ИмяРегистра +"."+"ВозрастРодственника";
	НоваяСтрока.ОписаниеТипов = ОписаниеТиповЧисло;
	НоваяСтрока.ТипПоля	="Виртуальное";                              
	
	НоваяСтрока.ОписаниеПоля      = "1";
	НоваяСтрока.ТипПоля   		= "Вычисляемое";

	//В возможные поля выборки добавим категории и свойства объектов
	МассивКатегории = Новый Массив;
	МассивКатегории.Добавить(Тип("СправочникСсылка.КатегорииОбъектов"));
	ОписаниеТиповКатегории = Новый ОписаниеТипов(МассивКатегории);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НазначенияСвойствКатегорийОбъектов.Код,
	|	НазначенияСвойствКатегорийОбъектов.Наименование,
	|	НазначенияСвойствКатегорийОбъектов.Ссылка,
	|	НазначенияСвойствКатегорийОбъектов.ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов КАК НазначенияСвойствКатегорийОбъектов
	|
	|ГДЕ
	|	НазначенияСвойствКатегорийОбъектов.Код = ""00104"" 
	|	И (НазначенияСвойствКатегорийОбъектов.ПометкаУдаления = ЛОЖЬ)";

	ЗапросКСвойствам = Новый Запрос;
	ЗапросКСвойствам.Текст =	"ВЫБРАТЬ
	|	СвойстваОбъектов.Код,
	|	СвойстваОбъектов.Ссылка,
	|	СвойстваОбъектов.Представление,
	|	СвойстваОбъектов.НазначениеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|
	|ГДЕ
	|	(СвойстваОбъектов.ПометкаУдаления = ЛОЖЬ)";


	РезультатЗапросаКСвойствам = ЗапросКСвойствам.Выполнить();

	ВыборкаНазначений = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНазначений.Следующий() цикл

		НайдСтрока = ТаблицаОписаниеВсехПолей.Найти(ВыборкаНазначений.ТипЗначения,"ОписаниеТипов");
		Если НайдСтрока <> Неопределено тогда

            ИмяПоляОбъекта = "ФизическиеЛица__Ссылка";
			
			НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
			НоваяСтрока.ИмяИсточника 	  = "КатегорииОбъектов";
			НоваяСтрока.ПредставлениеПоля = НайдСтрока.ПредставлениеПоля+" . Категории";
			НоваяСтрока.ИмяПоля 		  = "КатегорииОбъектов__"+ИмяПоляОбъекта;
			НоваяСтрока.ИмяПоля 		  = "КатегорииОбъектов__"+ИмяПоляОбъекта;
			НоваяСтрока.ОписаниеПоля 	  = "";
			НоваяСтрока.ОписаниеТипов 	  = ОписаниеТиповКатегории;
			НоваяСтрока.Свойство 		  = ВыборкаНазначений.Ссылка;
	    	НоваяСтрока.ТипПоля			  = "Виртуальное";

			//В список полей добавим свойства
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НазначениеСвойства",ВыборкаНазначений.Ссылка);
			ВыборкаСвойств = РезультатЗапросаКСвойствам.Выбрать();
			Пока ВыборкаСвойств.НайтиСледующий(СтруктураПоиска) цикл

				НоваяСтрока = ТаблицаОписаниеВсехПолей.Добавить();
				НоваяСтрока.ИмяИсточника 	  	= "ЗначенияСвойствОбъектов";
				НоваяСтрока.ПредставлениеПоля 	= НайдСтрока.ПредставлениеПоля+" ."+ВыборкаСвойств.Представление;
				//Формат имени поля : "ИмяРегистра__ИмяИсточникаОбъекта__Объект_Свойство;
				НоваяСтрока.ИмяПоля 		  	= "ЗначенияСвойствОбъектов__"+ИмяПоляОбъекта + "_Свойство"+СокрЛП(ВыборкаСвойств.Код);
				НоваяСтрока.ОписаниеПоля 	 	= "";
				НоваяСтрока.ОписаниеТипов 		= ВыборкаСвойств.Ссылка.ТипЗначения;
	    		НоваяСтрока.ТипПоля				= "Виртуальное";

			КонецЦикла;	
		КонецЕсли;	 
	КонецЦикла;	

	//Счетчики по видам семейного положения, образования, степени родства, степени владения иностранными языками
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Ссылка,Код,Представление,
	|	""СемейноеПоложениеФизЛиц"" КАК ИмяСправочника
	|ИЗ
	|	Справочник.СемейноеПоложениеФизЛиц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка,Код,Представление,
	|	""ВидыОбразованияФизЛиц"" КАК ИмяСправочника
	|ИЗ
	|	Справочник.ВидыОбразованияФизЛиц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка,Код,Представление,
	|	""СтепениЗнанияЯзыка"" КАК ИмяСправочника
	|ИЗ
	|	Справочник.СтепениЗнанияЯзыка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка,Код,Представление,
	|	""СтепениРодстваФизЛиц"" КАК ИмяСправочника
	|ИЗ
	|	Справочник.СтепениРодстваФизЛиц
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСправочника,
	|	Код";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	// ВЫЧИСЛЯЕМЫЕ ПОЛЯ ФИЗЛИЦА
	Пока Выборка.Следующий() цикл
		НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();

		Если Выборка.ИмяСправочника = "СемейноеПоложениеФизЛиц" тогда

			НоваяСтрока.ИмяИсточника 	  		= "ФизическиеЛица__СемейноеПоложение";
			НовоеОписаниеПоля.ИмяПоля           = "ФизическиеЛица__СемейноеПоложение"+СокрЛП(Выборка.Код);
			НовоеОписаниеПоля.ПредставлениеПоля = "Имеют семейное положение: "+Выборка.Представление;
			ИмяПараметра = "СемейноеПоложение_"+СокрЛП(Выборка.Код);
			НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА СемейноеПоложение=&"+ИмяПараметра+" ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";

		ИначеЕсли Выборка.ИмяСправочника = "ВидыОбразованияФизЛиц" тогда

			НоваяСтрока.ИмяИсточника 	  		= "ФизическиеЛица_Образование_Счетчики";
			НовоеОписаниеПоля.ИмяПоля           = "ФизическиеЛица_Образование_Счетчики___ВидОбразования"+СокрЛП(Выборка.Код);
			НовоеОписаниеПоля.ПредставлениеПоля = "Имеют образование: "+Выборка.Представление;
			ИмяПараметра = "ВидОбразования_"+СокрЛП(Выборка.Код);
			НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА ВидОбразования=&"+ИмяПараметра+" ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";

		ИначеЕсли Выборка.ИмяСправочника = "СтепениЗнанияЯзыка" тогда	

			НоваяСтрока.ИмяИсточника 	  		= "ФизическиеЛица_ЗнаниеЯзыков_Счетчики";
			НовоеОписаниеПоля.ИмяПоля           = "ФизическиеЛица_ЗнаниеЯзыков_Счетчики___СтепеньВладения"+СокрЛП(Выборка.Код);
			НовоеОписаниеПоля.ПредставлениеПоля = "Владеют иностранными языками: "+Выборка.Представление;
			ИмяПараметра = "СтепеньВладенияИнЯзыком_"+СокрЛП(Выборка.Код);
			НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА СтепеньЗнанияЯзыка=&"+ИмяПараметра+" ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";

		ИначеЕсли Выборка.ИмяСправочника = "СтепениРодстваФизЛиц" тогда				

			НоваяСтрока.ИмяИсточника 	  		= "ФизическиеЛица_СоставСемьи_Счетчики";
			НовоеОписаниеПоля.ИмяПоля           = "ФизическиеЛица_СоставСемьи_Счетчики___СтепеньРодства"+СокрЛП(Выборка.Код);
			НовоеОписаниеПоля.ПредставлениеПоля = "Кол-во родственников по степени: "+Выборка.Представление;
			ИмяПараметра = "СтепеньРодства_"+СокрЛП(Выборка.Код);
			НовоеОписаниеПоля.ОписаниеПоля      = "ВЫБОР КОГДА СтепеньРодства=&"+ИмяПараметра+" ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
		КонецЕсли;	

		НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
		НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
		НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
		
		ДобавитьПараметрЗапроса(ТаблицаПараметрыЗапроса, ИмяПараметра, Выборка.Ссылка);
	КонецЦикла;	

	//Количество образований
	НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
	НовоеОписаниеПоля.ИмяПоля           = "ФизическиеЛица_Образование_Счетчики__КоличествоЗаписей";
	НовоеОписаниеПоля.ПредставлениеПоля = "Кол-во записей об образовании";
	НовоеОписаниеПоля.ОписаниеПоля      = "1";
	НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
	НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
	НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;

	//Счетчик иностранных языков
	НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
	НовоеОписаниеПоля.ИмяПоля           = "ФизическиеЛица_ЗнаниеЯзыков_Счетчики__КоличествоЗаписей";
	НовоеОписаниеПоля.ПредставлениеПоля = "Кол-во записей об иностранных языках";
	НовоеОписаниеПоля.ОписаниеПоля      = "1";
	НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
	НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
	НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
	
	//Счетчик мест работы
	НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
	НовоеОписаниеПоля.ИмяПоля           = "ФизическиеЛица_ТрудоваяДеятельность_Счетчики__КоличествоЗаписей";
	НовоеОписаниеПоля.ПредставлениеПоля = "Кол-во записей в трудовой книжке";
	НовоеОписаниеПоля.ОписаниеПоля      = "1";
	НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
	НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
	НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;
	
	//Счетчик по составу семьи
	НовоеОписаниеПоля = ТаблицаОписаниеВсехПолей.Добавить();
	НовоеОписаниеПоля.ИмяПоля           = "ФизическиеЛица_СоставСемьи_Счетчики__КоличествоЗаписей";
	НовоеОписаниеПоля.ПредставлениеПоля = "Кол-во членов семьи";
	НовоеОписаниеПоля.ОписаниеПоля      = "1";
	НовоеОписаниеПоля.ИтоговоеПоле	    = ИСТИНА;
	НовоеОписаниеПоля.ТипПоля   		= "Вычисляемое";
	НовоеОписаниеПоля.ОписаниеТипов     = ОписаниеТиповЧисло;

	Возврат ТаблицаОписаниеВсехПолей;
	
КонецФункции

// Формирует фрагмент запроса, соответствующий заданному источнику данных
//
// Параметры: 
//  ИмяИсточника - строка, имя регистра или справочника
//
// Возвращаемое значение:
//  Строка - текст, описывающий источник данных.
//
Функция СтатистикаСпискиПолучитьТекстИсточникаПоИмени(Отчет, Источник, КопияИнтервалыГруппировокОтчета, ТаблицаИсточниковСвойствКатегорий) Экспорт

	ИмяИсточника = Источник.ИмяИсточника;
	ТекстФильтры = Источник.СтрФильтры;
    ОсновнойИсточник = Отчет.мОсновнойИсточник;
	
	//Показатели табличных частей справочника "ФизическиеЛица" могут являться счётчиками записей
	Если (Найти(ИмяИсточника,"_Счетчики")<>0) тогда
		АгрегатнаяФункция = "СУММА";
	ИначеЕсли (Найти(ИмяИсточника,"_Триггер")<>0) тогда
		АгрегатнаяФункция = "МАКСИМУМ";
	Иначе	
		АгрегатнаяФункция = "";
	КонецЕсли;	 

	ТекстПоляЗапроса = "";
	
	Для Каждого Поле из Источник.ТаблицаПолей Цикл

		//Фильтры в описания полей не включим
		Если Поле.ТипПоля = "Фильтр" тогда	
			Продолжить;
		КонецЕсли;	
		
		Если Поле.ТипПоля = "ГруппировкаИнтервальная" Тогда
			//Встретили интервальную группировку , такую как ВозврастПоИнтервалам
			//В поля запроса добавим описание как поля ВозрастПоИнтервалам, так и поля Возраст
			ОписаниеПоля =  ОписаниеПоляВыбораНомераИнтервала(КопияИнтервалыГруппировокОтчета, Поле.ИмяПоля, "Интервальная"); 	
			ПсевдонимПоля = Поле.ИмяПоля + "ПоИнтервалам";
			
			ТекстПоляЗапроса = ТекстПоляЗапроса + ",
			|			" + Поле.ОписаниеПоля + " КАК " + Поле.ИмяПоля;	
		Иначе
			ОписаниеПоля = Поле.ОписаниеПоля;
			ПсевдонимПоля = Поле.ИмяПоля;
		КонецЕсли; 

		Если НЕ ПустаяСтрока(АгрегатнаяФункция) тогда
			ОписаниеПоля = АгрегатнаяФункция + "(" + ОписаниеПоля + ")";
		КонецЕсли;	
		Если ОписаниеПоля = "РаботникиОрганизаций.ПодразделениеОрганизации"  
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.Должность"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ЗанимаемыхСтавок"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ГрафикРаботы"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.Период"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ПричинаИзмененияСостояния"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ОбособленноеПодразделение"
							
		Тогда
			 		ТекстПоляЗапроса = ТекстПоляЗапроса + ",
		|			" + ОписаниеПоля + " КОНЕЦ КАК " + ПсевдонимПоля;	
		ИначеЕсли ОписаниеПоля = "РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения"  
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ДолжностьЗавершения"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ЗанимаемыхСтавокЗавершения"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ГрафикРаботыЗавершения"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ПериодЗавершения"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения"
							ИЛИ  ОписаниеПоля = "РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения"
		Тогда
			 		ТекстПоляЗапроса = ТекстПоляЗапроса + ",
		|			 " + ОписаниеПоля +"  КОНЕЦ КАК " + ПсевдонимПоля;	
        Иначе
		ТекстПоляЗапроса = ТекстПоляЗапроса + ",
		|			" + ОписаниеПоля + " КАК " + ПсевдонимПоля;
		КонецЕсли;
	КонецЦикла; 

	//Получим части запроса, обеспечивающую фильтрацию по категориям объектов и присоединение свойств объектов
	ЕстьФильтрыНаСвойстваКатегории = Ложь;
	ТекстИсточникаСвойствКатегорий = ПолучитьТекстЗапросаНаПрисоединениеСвойствКатегорий(ИмяИсточника,ТаблицаИсточниковСвойствКатегорий,ТекстФильтры,ТекстПоляЗапроса,ЕстьФильтрыНаСвойстваКатегории);

	//Построим текст запроса
	ТекстИсточника = "";

	Если (ИмяИсточника = "РаботникиОрганизаций")или(ИмяИсточника = "Работники") Тогда

		//Обязательные поля для связи с другими источниками данных
		Если (ИмяИсточника = "РаботникиОрганизаций") Тогда
			Если Найти(ВРег(ТекстПоляЗапроса), ВРег(ИмяИсточника + ".Сотрудник.ФизЛицо КАК")) = 0 Тогда
				ТекстПоляЗапроса = ТекстПоляЗапроса + ", " + ИмяИсточника + ".Сотрудник.ФизЛицо КАК " + ИмяИсточника+"__ФизЛицо"; 
			КонецЕсли; 
		Иначе
			Если Найти(ВРег(ТекстПоляЗапроса), ВРег(ИмяИсточника + ".ФизЛицо КАК")) = 0 Тогда
				ТекстПоляЗапроса = ТекстПоляЗапроса + ", " + ИмяИсточника + ".ФизЛицо КАК " + ИмяИсточника+"__ФизЛицо"; 
			КонецЕсли; 
		КонецЕсли;
		Если (ИмяИсточника = "РаботникиОрганизаций") И (Найти(ВРег(ТекстПоляЗапроса), ВРег(ИмяИсточника + ".Организация КАК")) = 0) Тогда
			ТекстПоляЗапроса = ТекстПоляЗапроса + ", " + ИмяИсточника + ".Организация КАК " + ИмяИсточника+"__Организация"; 
		КонецЕсли; 
		Если (ИмяИсточника = "РаботникиОрганизаций") И (Найти(ВРег(ТекстПоляЗапроса), ВРег(ИмяИсточника + ".Регистратор КАК")) = 0) Тогда
			ТекстПоляЗапроса = ТекстПоляЗапроса + ", " + ИмяИсточника + ".Регистратор КАК " + ИмяИсточника+"__Приказ"; 
		КонецЕсли; 

		ТекстИсточника = "	
		|		(//Данные по регистру :" + ИмяИсточника +"
		|		ВЫБРАТЬ " + Сред(ТекстПоляЗапроса,2) + "
		|		ИЗ РегистрСведений." + ИмяИсточника + ".СрезПоследних(&ДатаАктуальности) КАК "+ИмяИсточника;
		Если (ИмяИсточника = "РаботникиОрганизаций") Тогда
		ТекстИсточника = ТекстИсточника + "	
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		|			РаботникиОрганизаций.Организация КАК Организация,
		|			РаботникиОрганизаций.Регистратор КАК Регистратор,
		|			РаботникиОрганизаций.Сотрудник
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
		|				РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
		|				РаботникиОрганизаций.Организация КАК Организация
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ГДЕ
		|				РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|				И РаботникиОрганизаций.Период < &ДатаАктуальности
		|				И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|						ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости ЕСТЬ NULL )
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиОрганизаций.Сотрудник.Физлицо,
		|				РаботникиОрганизаций.Организация) КАК ПоследниеДаты
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|				ПО ПоследниеДаты.Период = РаботникиОрганизаций.Период
		|					И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
		|					И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|						ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости ЕСТЬ NULL )
		|					И ПоследниеДаты.Организация = РаботникиОрганизаций.Организация
		|					И ПоследниеДаты.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо) КАК ОсновныеПриказыОПриеме
		|		ПО РаботникиОрганизаций.Сотрудник.Физлицо = ОсновныеПриказыОПриеме.Физлицо
		|			И РаботникиОрганизаций.Организация = ОсновныеПриказыОПриеме.Организация";
		КонецЕсли; 

		ТекстИсточника = ТекстИсточника + ТекстИсточникаСвойствКатегорий;

		Если Не ПустаяСтрока(ТекстФильтры) Тогда
			ТекстИсточника = ТекстИсточника +"	
			|		ГДЕ " + Сред(ТекстФильтры,3);
		КонецЕсли;	

		ТекстИсточника = ТекстИсточника +"	
		|		) КАК " + ИмяИсточника;

	ИначеЕсли (ИмяИсточника = "КандидатыНаРаботу") Тогда

		//Обязательные поля для связи с другими источниками данных
		Если Найти(ВРег(ТекстПоляЗапроса), ВРег(ИмяИсточника + ".ФизЛицо КАК")) = 0 Тогда
			ТекстПоляЗапроса = ТекстПоляЗапроса + ", ФизЛицо КАК " + ИмяИсточника+"__ФизЛицо"; 
		КонецЕсли; 

		ТекстИсточника = "	
		|		(//Данные по регистру :" + ИмяИсточника +"
		|		ВЫБРАТЬ " + Сред(ТекстПоляЗапроса,2) + "
		|		ИЗ РегистрСведений." + ИмяИсточника + ".СрезПоследних(&ДатаАктуальности) КАК "+ИмяИсточника;

		ТекстИсточника = ТекстИсточника + ТекстИсточникаСвойствКатегорий;

		Если Не ПустаяСтрока(ТекстФильтры) Тогда
			ТекстИсточника = ТекстИсточника +"	
			|		ГДЕ " + Сред(ТекстФильтры,3);
		КонецЕсли;	

		ТекстИсточника = ТекстИсточника +"	
		|		) КАК " + ИмяИсточника;
	
	ИначеЕсли (ИмяИсточника = "СостояниеРаботниковОрганизаций") или (ИмяИсточника = "СостояниеРаботников") Тогда

		//Обязательные поля для связи с другими источниками данных
		Если (ИмяИсточника = "СостояниеРаботниковОрганизаций") Тогда 
			Если Найти(ВРег(ТекстПоляЗапроса), ВРег(ИмяИсточника + ".Сотрудник.ФизЛицо КАК")) = 0 Тогда
				ТекстПоляЗапроса = ТекстПоляЗапроса + ", " + ИмяИсточника + ".Сотрудник.ФизЛицо КАК " + ИмяИсточника+"__ФизЛицо"; 
			КонецЕсли; 
		Иначе
			Если Найти(ВРег(ТекстПоляЗапроса), ВРег(ИмяИсточника + ".ФизЛицо КАК")) = 0 Тогда
				ТекстПоляЗапроса = ТекстПоляЗапроса + ", " + ИмяИсточника + ".ФизЛицо КАК " + ИмяИсточника+"__ФизЛицо"; 
			КонецЕсли; 
		КонецЕсли;	
		Если ((ИмяИсточника = "СостояниеРаботниковОрганизаций")) И Найти(ВРег(ТекстПоляЗапроса), ВРег(ИмяИсточника + ".Регистратор КАК")) = 0 Тогда
			ТекстПоляЗапроса = ТекстПоляЗапроса + ", " + ИмяИсточника + ".Регистратор КАК " + ИмяИсточника+"__Приказ"; 
		КонецЕсли; 
		
		ТекстИсточника = "	
		|		(//Данные по регистру :" + ИмяИсточника +"
		|		ВЫБРАТЬ " + Сред(ТекстПоляЗапроса,2) + "
		|		ИЗ РегистрСведений." + ИмяИсточника + ".СрезПоследних(&ДатаАктуальности) КАК "+ИмяИсточника;

        ТекстИсточника = ТекстИсточника + ТекстИсточникаСвойствКатегорий;

		Если Не ПустаяСтрока(ТекстФильтры) Тогда
			ТекстИсточника = ТекстИсточника +"	
			|		ГДЕ " + Сред(ТекстФильтры,3);
		КонецЕсли;	

		ТекстИсточника = ТекстИсточника +"	
		|		) КАК " + ИмяИсточника + "
		|		ПО " + ОсновнойИсточник + "." + ОсновнойИсточник + "__ФизЛицо = " + ИмяИсточника + "." + ИмяИсточника + "__ФизЛицо";
		Если (ИмяИсточника = "СостояниеРаботниковОрганизаций") Тогда
			ТекстИсточника = ТекстИсточника +"	
			|		И " + ОсновнойИсточник + "." + ОсновнойИсточник + "__Приказ = "+ ИмяИсточника+ "."+ ИмяИсточника +"__Приказ";
		КонецЕсли; 

	
	ИначеЕсли Найти(ИмяИсточника,"ФизическиеЛица") > 0 Тогда

		Если ИмяИсточника = "ФизическиеЛица" тогда

			ТребуетсяСемейноеПоложение = Найти(ТекстПоляЗапроса + ТекстФильтры, "СемейноеПоложение") <> 0;
			ТребуетсяВозраст = Найти(ТекстПоляЗапроса + ТекстФильтры, "Возраст") <> 0;
			ТребуетсяФИО = Найти(ТекстПоляЗапроса + ТекстФильтры, "Фио") <> 0;

			Если НЕ ТребуетсяСемейноеПоложение И НЕ ТребуетсяВозраст И НЕ ТребуетсяФИО Тогда

				ТекстИсточника = "	
				|		//Данные по физлицам
				|		( ВЫБРАТЬ "+ИмяИсточника+".Ссылка КАК Ссылка" + ТекстПоляЗапроса + "
				|			ИЗ Справочник.ФизическиеЛица КАК "+ИмяИсточника;
			
			Иначе

				// определим список реальных полей источника данных
				ТекстРеальныеПоляИсточника = "";
				Для каждого Поле из Источник.ТаблицаПолей Цикл
					//Пропустим поля присоединяемых источников
					ИмяИсточникаПоля = Лев(Поле.ИмяПоля, Найти(Поле.ИмяПоля,"__") - 1);
					Если  ИмяИсточникаПоля <> ИмяИсточника Тогда
						Продолжить;
					КонецЕсли; 

					ИмяПоляБезИсточника = Сред(Поле.ИмяПоля,Найти(Поле.ИмяПоля, "__") + 2); 

					//Пропустим виртуальные поля физлица
					Если Найти(",ФиоПолное,ФиоКраткое,СемейноеПоложение,Возраст,",","+ИмяПоляБезИсточника+",") <>0 Тогда
						Продолжить;
					КонецЕсли; 
     				
					ТекстРеальныеПоляИсточника = ТекстРеальныеПоляИсточника + "," + Символы.ПС 	+ "			"+ Поле.ОписаниеПоля + " КАК " + ИмяПоляБезИсточника;	
				КонецЦикла; 
				
				//ТекстПоляВиртуальнойТаблицы = СтрЗаменить(ТекстПоляЗапросаБезСвойствКатегорий,"ФизическиеЛица__","");
				ТекстПоляВиртуальнойТаблицы = ТекстРеальныеПоляИсточника;

				Если ТребуетсяФИО тогда
                	ТекстПоляВиртуальнойТаблицы = ТекстПоляВиртуальнойТаблицы + ",
					|				ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ФизическиеЛица.Наименование) КАК ФиоПолное";

                	ТекстПоляВиртуальнойТаблицы = ТекстПоляВиртуальнойТаблицы + ",
					|       		ЕСТЬNULL(ФИОФизЛиц.Фамилия
					|					+ ВЫБОР
					|						КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя,1,1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя,1,1) + "".""
					|						ИНАЧЕ """"
					| 		 			КОНЕЦ
					|					+ ВЫБОР
					|						КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество,1,1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество,1,1) + "".""
					|						ИНАЧЕ """"
					| 		 			КОНЕЦ, ФизическиеЛица.Наименование) КАК ФиоКраткое";

				КонецЕсли;	

				Если ТребуетсяСемейноеПоложение тогда
                	ТекстПоляВиртуальнойТаблицы = ТекстПоляВиртуальнойТаблицы + ",
					|				СемейноеПоложениеФизЛиц.СемейноеПоложение КАК СемейноеПоложение";
				КонецЕсли;	

				Если ТребуетсяВозраст тогда
                	ТекстПоляВиртуальнойТаблицы = ТекстПоляВиртуальнойТаблицы + ",
					|				ГОД(&ДатаАктуальности) - ГОД(ФизическиеЛица.ДатаРождения) + ВЫБОР КОГДА (Месяц(ФизическиеЛица.ДатаРождения)*100+День(ФизическиеЛица.ДатаРождения)) > (Месяц(&ДатаАктуальности)*100+День(&ДатаАктуальности)) ТОГДА -1 ИНАЧЕ 0 КОНЕЦ КАК Возраст";
				КонецЕсли;	

				//Убрали первую запятую
    			ТекстПоляВиртуальнойТаблицы = Сред(ТекстПоляВиртуальнойТаблицы,2);
				
				//Данные по физлицам + возраст + семейное положение
				ТекстИсточникаПолныхДанныхПоФизЛицам = "
				|           	//Полные данные по физлицам
				|				ВЫБРАТЬ 
				|				"+ИмяИсточника+".Ссылка КАК Ссылка, " + ТекстПоляВиртуальнойТаблицы +"	
				|				ИЗ Справочник.ФизическиеЛица КАК ФизическиеЛица
				|";

				Если ТребуетсяСемейноеПоложение тогда
					ТекстИсточникаПолныхДанныхПоФизЛицам = ТекстИсточникаПолныхДанныхПоФизЛицам + "	
					|				//Семейное положение физлиц
					|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(&ДатаАктуальности) КАК СемейноеПоложениеФизЛиц 
					|				ПО ФизическиеЛица.Ссылка = СемейноеПоложениеФизЛиц.ФизЛицо
					|";
				КонецЕсли;

				Если ТребуетсяФИО тогда
					ТекстИсточникаПолныхДанныхПоФизЛицам = ТекстИсточникаПолныхДанныхПоФизЛицам + "	
					|				//ФИО физлиц
					|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности) КАК ФИОФизЛиц 
					|				ПО ФизическиеЛица.Ссылка = ФИОФизЛиц.ФизЛицо
					|";
				КонецЕсли;
				
				ТекстИсточника = "	
				|		//Данные по физлицам
				|		( ВЫБРАТЬ "+ИмяИсточника+".Ссылка КАК Ссылка" + ТекстПоляЗапроса + "
				|			ИЗ ("+ТекстИсточникаПолныхДанныхПоФизЛицам+"
				|		) КАК "+ИмяИсточника;
			
			КонецЕсли; 
			

            ТекстИсточника = ТекстИсточника + ТекстИсточникаСвойствКатегорий;

			//Добавим фильтры на записи источника
			Если Не ПустаяСтрока(ТекстФильтры) Тогда
				ТекстИсточника = ТекстИсточника +"	
				|		ГДЕ " + Сред(ТекстФильтры,3);
			КонецЕсли;	

			
			//Поставим условие соединения с выборкой верхнего уровня
			ТекстИсточника = ТекстИсточника +Символы.ПС+"	
			|		) КАК " + ИмяИсточника + "
			|		ПО " + ОсновнойИсточник + "." + ОсновнойИсточник + "__ФизЛицо = " + ИмяИсточника + ".Ссылка";

		ИначеЕсли (ИмяИсточника = "ФизическиеЛица_СоставСемьи_Триггер") или  (ИмяИсточника = "ФизическиеЛица_СоставСемьи_Счетчики") или (ИмяИсточника = "ФизическиеЛица_СоставСемьи") тогда	

            РеальноеИмяИсточника = "ФизическиеЛица_СоставСемьи";
			
         	ТекстИсточникаПолныхДанныхПоСоставуСемьи = "
			|   		//Полные данные по составу семьи
			|			ВЫБРАТЬ 
			|				*,
			|				&ГодАктуальности - ГодРождения КАК ВозрастРодственника
			|			ИЗ Справочник.ФизическиеЛица.СоставСемьи
			|			";	

			ТекстИсточника = "	
			|		//Данные по составу семьи физлица
			|		( ВЫБРАТЬ "+РеальноеИмяИсточника+".Ссылка КАК Ссылка" + ТекстПоляЗапроса + "
			|			ИЗ ("+ТекстИсточникаПолныхДанныхПоСоставуСемьи+") КАК "+РеальноеИмяИсточника;

            ТекстИсточника = ТекстИсточника + ТекстИсточникаСвойствКатегорий;

			Если Не ПустаяСтрока(ТекстФильтры) Тогда
				ТекстИсточника = ТекстИсточника +"	
				|		ГДЕ " + Сред(ТекстФильтры,3);
			КонецЕсли;	

			//Для счетчиков записей требуется группировка
			Если (ИмяИсточника = "ФизическиеЛица_СоставСемьи_Счетчики") или (ИмяИсточника = "ФизическиеЛица_СоставСемьи_Триггер") тогда
			ТекстИсточника = ТекстИсточника +"	
			|		СГРУППИРОВАТЬ ПО Ссылка ";
			КонецЕсли;	

			ТекстИсточника = ТекстИсточника +"	
			|		) КАК " + ИмяИсточника + "
			|		ПО " + ОсновнойИсточник + "." + ОсновнойИсточник + "__ФизЛицо = " + ИмяИсточника + ".Ссылка";

		Иначе

			//Тексты запросов для остальных табличных частей справочника "ФизическиеЛица"	

			ПозицияСчетчик =Найти(ИмяИсточника,"_Счетчики");
			Если ПозицияСчетчик <> 0 Тогда
				РеальноеИмяИсточника = Лев(ИмяИсточника,ПозицияСчетчик-1);
			иначе	
				РеальноеИмяИсточника = ИмяИсточника;
			КонецЕсли; 
			
			ТекстИсточника = "	
			|		(//Данные по табличной части справочника Физические лица:"+ ИмяИсточника +" 
			|		ВЫБРАТЬ " + РеальноеИмяИсточника + ".Ссылка КАК Ссылка" + ТекстПоляЗапроса + "
			|		ИЗ Справочник."+ СтрЗаменить(РеальноеИмяИсточника,"_",".")  + " КАК " + РеальноеИмяИсточника;

            ТекстИсточника = ТекстИсточника + ТекстИсточникаСвойствКатегорий;

			Если Не ПустаяСтрока(ТекстФильтры) Тогда
				ТекстИсточника = ТекстИсточника +"	
				|		ГДЕ " + Сред(ТекстФильтры,3);
			КонецЕсли;	

			//Для счетчиков записей требуется группировка
			Если ПозицияСчетчик <> 0 Тогда
				ТекстИсточника = ТекстИсточника +"	
				|		СГРУППИРОВАТЬ ПО Ссылка ";
			КонецЕсли;	

			ТекстИсточника = ТекстИсточника +"	
			|		) КАК " + ИмяИсточника + "
			|		ПО " + ОсновнойИсточник + "." + ОсновнойИсточник + "__ФизЛицо = " + ИмяИсточника + ".Ссылка";

		КонецЕсли;	 

	Иначе// Текст запроса для остальных регистров сведений
		
		МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ИмяИсточника);
		Если МетаданныеРегистра = Неопределено Тогда
			Предупреждение("Функция 'отПолучитьТекстИсточникаПоИмени'. Ошибка: неверное имя регистра сведений: " + ИмяИсточника + "!");
			Возврат "";
		КонецЕсли;	

		// Определение связующего имени поля с основным источником
		ИмяСвязующегоИзмерения = "";
		ПолноеИмяСвязующегоПоля = "";

		ТипФизЛиц = Тип("СправочникСсылка.ФизическиеЛица");
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			Если Измерение.Тип.СодержитТип(ТипФизЛиц) Тогда 

				ИмяСвязующегоИзмерения = Измерение.Имя;
				ПолноеИмяСвязующегоПоля = ИмяИсточника + "__"+ИмяСвязующегоИзмерения;
				Прервать;

			КонецЕсли;
		КонецЦикла;

        // Формирование текста запроса к источнику
		Если МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ОписаниеТаблицыДанных = "РегистрСведений." + ИмяИсточника;
		Иначе
			ОписаниеТаблицыДанных = "РегистрСведений." + ИмяИсточника + ".СрезПоследних(&ДатаАктуальности)";
		КонецЕсли;

		//Поле ИмяРегистра__ИмяСвязующегоИзмерения нужно для последующего соединения таблиц
		Если Найти(ТекстПоляЗапроса, ПолноеИмяСвязующегоПоля) =0  тогда
			ТекстПоляЗапроса = ТекстПоляЗапроса + "," + Символы.ПС 	+ "			"
			+ ИмяСвязующегоИзмерения+ " КАК " + ПолноеИмяСвязующегоПоля;
		КонецЕсли;	 

		//Уберём первую запятую
		ТекстПоляЗапроса = Сред(ТекстПоляЗапроса,2);

		ТекстИсточника = "	
		|		(//Данные по регистру :" + ИмяИсточника +"
		|		ВЫБРАТЬ " + ТекстПоляЗапроса + "
		|		ИЗ " + ОписаниеТаблицыДанных + " КАК "+ИмяИсточника;

		ТекстИсточника = ТекстИсточника + ТекстИсточникаСвойствКатегорий;

		Если Не ПустаяСтрока(ТекстФильтры) Тогда
			ТекстИсточника = ТекстИсточника +"	
			|		ГДЕ " + Сред(ТекстФильтры,3);
		КонецЕсли;	

		ТекстИсточника = ТекстИсточника +"	
		|		) КАК " + ИмяИсточника + "
		|		ПО " + ОсновнойИсточник + "." + ОсновнойИсточник + "__ФизЛицо = " + ИмяИсточника + "." + ПолноеИмяСвязующегоПоля;
		
	КонецЕсли;

    Если ПустаяСтрока(ТекстИсточника) Тогда
		Предупреждение("Функция 'отПолучитьТекстИсточникаПоИмени'. Ошибка: не предусмотренный источник данных: " + ИмяИсточника + "!");
		Возврат "";
	КонецЕсли; 
	
    //Все истоники данных, присоединяются к основному источнику данных ВНУТРЕННИМ или ЛЕВЫМ соединением
 	Если ИмяИсточника <> ОсновнойИсточник тогда
			ТекстИсточника =  "
            |
			|		//текст запроса к источнику данных: "+ИмяИсточника +"
			|		"+?(НЕ ПустаяСтрока(ТекстФильтры) ИЛИ ЕстьФильтрыНаСвойстваКатегории,"ВНУТРЕННЕЕ","ЛЕВОЕ") + " СОЕДИНЕНИЕ  
			|		"+ТекстИсточника;  

	КонецЕсли;	 
	
	Возврат ТекстИсточника;
КонецФункции // ПолучитьТекстИсточникаПоИмени()

// Выполняет заполнение служебных табл: группировки, показатели, отборы
Процедура ЗаполнитьНачальныеНастройки( ВосстановлениеНастройки = Ложь) Экспорт
	
	СписокРегистровСведений = Новый СписокЗначений;
	СтруктураГруппировкиПоУмолчанию = Новый Структура;
	СтруктураПоказателиПоУмолчанию = Новый Структура;

	ТаблицаОтборыПоУмолчанию = Новый ТаблицаЗначений;
	ТаблицаОтборыПоУмолчанию.Колонки.Добавить("ИмяОтбора");
	ТаблицаОтборыПоУмолчанию.Колонки.Добавить("ВидСравнения");
	ТаблицаОтборыПоУмолчанию.Колонки.Добавить("Значение");

	//Параметры настройки слежубных таблиц: мТаблицаГруппировки, мТаблицаПоказатели
	СоставГруппировокПоказателей = Новый Структура();
	//Признак включения интервальных группировок 
	СоставГруппировокПоказателей.Вставить("ВключатьИнтервальныеГруппировки",Ложь);
	//Признак включения итоговых показателей
	СоставГруппировокПоказателей.Вставить("ВключатьИтоговыеПоказатели",Ложь);
	//Признак включения неитоговых показателей
	СоставГруппировокПоказателей.Вставить("ВключатьНеИтоговыеПоказатели",Ложь);
	
	Если ВидОтчета  = "Статистика кадров организации" Тогда

		СписокРегистровСведений.Добавить("РаботникиОрганизаций");
		СписокРегистровСведений.Добавить("СостояниеРаботниковОрганизаций");
		
		СтруктураГруппировкиПоУмолчанию.Вставить("РаботникиОрганизаций__ОбособленноеПодразделение");
		СтруктураГруппировкиПоУмолчанию.Вставить("РаботникиОрганизаций__ПодразделениеОрганизации");

		СтруктураПоказателиПоУмолчанию.Вставить("РаботникиОрганизаций__КоличествоФизЛиц");
		СтруктураПоказателиПоУмолчанию.Вставить("РаботникиОрганизаций__КолРаботающихПоОснМесту");
		СтруктураПоказателиПоУмолчанию.Вставить("РаботникиОрганизаций__КолРаботающихНеПоОснМесту");

		мОсновнойИсточник = "РаботникиОрганизаций";

		//Оборы по умолчанию
		НовыйОтбор 						= ТаблицаОтборыПоУмолчанию.Добавить();
		НовыйОтбор.ИмяОтбора            = "РаботникиОрганизаций__ПричинаИзмененияСостояния";
		НовыйОтбор.ВидСравнения     	= ВидСравнения.НеВСписке;
		НовыйОтбор.Значение				= Перечисления.ПричиныИзмененияСостояния.Увольнение;

		// Параметры настройки списка возможных показателей и группировок
		СоставГруппировокПоказателей.ВключатьИнтервальныеГруппировки = ИСТИНА;
		СоставГруппировокПоказателей.ВключатьИтоговыеПоказатели = ИСТИНА;
		
	Иначе//Если ВидОтчета  = "Статистика кадров предприятия" Тогда

		СписокРегистровСведений.Добавить("Работники");
		СписокРегистровСведений.Добавить("СостояниеРаботников");

		СтруктураГруппировкиПоУмолчанию.Вставить("Работники__Подразделение");

		СтруктураПоказателиПоУмолчанию.Вставить("Работники__КоличествоФизЛиц");

		мОсновнойИсточник = "Работники";

		//Оборы по умолчанию
		НовыйОтбор 						= ТаблицаОтборыПоУмолчанию.Добавить();
		НовыйОтбор.ИмяОтбора            = "Работники__ПричинаИзмененияСостояния";
		НовыйОтбор.ВидСравнения    		= ВидСравнения.НеВСписке;
		НовыйОтбор.Значение				= Перечисления.ПричиныИзмененияСостояния.Увольнение;

		// Параметры настройки списка возможных показателей и группировок
		СоставГруппировокПоказателей.ВключатьИнтервальныеГруппировки = ИСТИНА;
		СоставГруппировокПоказателей.ВключатьИтоговыеПоказатели = ИСТИНА;

	КонецЕсли; 

	//Заполнение служебных таблиц отчета
	
	мТаблицаПоказатели.Очистить();
	мТаблицаГруппировки.Очистить();
	мТаблицаФильтры.Очистить();
	мТаблицаПараметрыЗапроса.Очистить();

	мТаблицаОписанияВсехПолей = СтатистикаСпискиПолучитьОписаниеВсехПолей(мОсновнойИсточник, СписокРегистровСведений, мТаблицаПараметрыЗапроса);

	ЗаполнитьТаблицыВозможныхГруппировокПоказателейФильтров(ЭтотОбъект, мТаблицаОписанияВсехПолей, СоставГруппировокПоказателей);

	Если НЕ ВосстановлениеНастройки Тогда
		ЗагрузитьНастройкуПоУмолчанию(ЭтотОбъект, мТаблицаОписанияВсехПолей, СтруктураГруппировкиПоУмолчанию, СтруктураПоказателиПоУмолчанию, ТаблицаОтборыПоУмолчанию);
	КонецЕсли;	
КонецПроцедуры	

// Формирует фрагмент запроса, описывающий источники данных
//
// Параметры: 
//  ИмяИсточника - строка, имя регистра или справочника
//
// Возвращаемое значение:
//  Строка - текст, описывающий источник данных.
//
Функция ПолучитьТекстИсточникаПоИмени(Источник, ТаблицаИсточниковСвойствКатегорий) Экспорт
	Возврат СтатистикаСпискиПолучитьТекстИсточникаПоИмени(ЭтотОбъект, Источник,  ИнтервалыГруппировокОтчета, ТаблицаИсточниковСвойствКатегорий)
КонецФункции // ПолучитьТекстИсточникаПоИмени()

// Формирует текст запроса и выполняет его
Функция СформироватьЗапрос() Экспорт
	ДобавитьПараметрЗапроса(мТаблицаПараметрыЗапроса, "ДатаАктуальности",	ДатаАктуальности);
	ДобавитьПараметрЗапроса(мТаблицаПараметрыЗапроса, "ГодАктуальности",	Год(ДатаАктуальности));

	Возврат СформироватьРезультатЗапроса(ЭтотОбъект);
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИмяОтчета = Метаданные().Имя;

мТаблицаГруппировки = Новый ТаблицаЗначений;
мТаблицаПоказатели  = Новый ТаблицаЗначений;
мТаблицаФильтры     = Новый ТаблицаЗначений;
мТаблицаПараметрыЗапроса = Новый ТаблицаЗначений;

мОписаниеТиповСтрокаНеограниченная = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0);
мОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(400);
мОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

МассивТаблицаЗначений = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
мОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

МассивСвойство = Новый Массив;
МассивСвойство.Добавить(Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов"));
МассивСвойство.Добавить(Тип("ПланВидовХарактеристикСсылка.НазначенияСвойствКатегорийОбъектов"));
ОписаниеТиповСвойство = Новый ОписаниеТипов(МассивСвойство);

мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", мОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", мОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ОписаниеПоля", мОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ИтоговоеПоле", мОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("Пометка", мОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("ОписаниеТипов");
мТаблицаПоказатели.Индексы.Добавить("ИмяПоля");

мТаблицаГруппировки.Колонки.Добавить("ИмяПоля", мОписаниеТиповСтрока);
мТаблицаГруппировки.Колонки.Добавить("ПредставлениеПоля", мОписаниеТиповСтрока);
мТаблицаГруппировки.Колонки.Добавить("ОписаниеПоля", мОписаниеТиповСтрока);
мТаблицаГруппировки.Колонки.Добавить("Пометка", мОписаниеТиповБулево);
мТаблицаГруппировки.Колонки.Добавить("ОписаниеТипов");
мТаблицаГруппировки.Индексы.Добавить("ИмяПоля");

мТаблицаФильтры.Колонки.Добавить("ИмяПоля", мОписаниеТиповСтрока);
мТаблицаФильтры.Колонки.Добавить("ПредставлениеПоля", мОписаниеТиповСтрока);
мТаблицаФильтры.Колонки.Добавить("ОписаниеПоля", мОписаниеТиповСтрока);
мТаблицаФильтры.Колонки.Добавить("ИмяПоляВладелец", мОписаниеТиповСтрока);
мТаблицаФильтры.Колонки.Добавить("Пометка", мОписаниеТиповБулево);
мТаблицаФильтры.Колонки.Добавить("ОписаниеТипов");
мТаблицаФильтры.Колонки.Добавить("Свойство");
мТаблицаФильтры.Индексы.Добавить("ИмяПоля");
мТаблицаФильтры.Индексы.Добавить("ОписаниеТипов");

мТаблицаПараметрыЗапроса.Колонки.Добавить("ИмяПараметра",мОписаниеТиповСтрока);
мТаблицаПараметрыЗапроса.Колонки.Добавить("ЗначениеПараметра");
мТаблицаПараметрыЗапроса.Индексы.Добавить("ИмяПараметра");


мСтруктураНеСохраняемыеВНастройкеРеквизиты = Новый Структура("ДатаАктуальности, РеквизитыПредустановлены");

мМассивВидыОтчета = Новый Массив;
мМассивВидыОтчета.Добавить("Статистика кадров предприятия");
мМассивВидыОтчета.Добавить("Статистика кадров организации");

#КонецЕсли

ВариантОтображения = Перечисления.ВариантыОтображенияОтчетов.Таблица