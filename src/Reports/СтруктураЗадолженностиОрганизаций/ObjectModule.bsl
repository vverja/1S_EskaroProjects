#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	 УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит значение используемого режима ввода периода.
	// Тип: Число.
	// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
	// Значение по умолчанию: 0
	// Пример:
	// УниверсальныйОтчет.мРежимВводаПериода = 0;
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	 УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	 УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Ложь;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	// При написании текста запроса рекомендуется следовать правилам, описанным в следующем шаблоне текста запроса:
	//
	//ВЫБРАТЬ
	//	<ПсевдонимТаблицы.Поле> КАК <ПсевдонимПоля>,
	//	ПРЕДСТАВЛЕНИЕ(<ПсевдонимТаблицы>.<Поле>),
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//{ВЫБРАТЬ
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//ИЗ
	//	<Таблица> КАК <ПсевдонимТаблицы>
	//	//СОЕДИНЕНИЯ
	//{ГДЕ
	//	<ПсевдонимТаблицы.Поле>.* КАК <ПсевдонимПоля>,
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>,
	//	<ПсевдонимТаблицы>.Регистратор КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//{УПОРЯДОЧИТЬ ПО
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//УПОРЯДОЧИТЬ_СВОЙСТВА
	//	//УПОРЯДОЧИТЬ_КАТЕГОРИИ
	//}
	//ИТОГИ
	//	АГРЕГАТНАЯ_ФУНКЦИЯ(<ПсевдонимПоказателя>)
	//	//ИТОГИ_СВОЙСТВА
	//	//ИТОГИ_КАТЕГОРИИ
	//ПО
	//	ОБЩИЕ
	//{ИТОГИ ПО
	//	<ПсевдонимПоля>.*,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//АВТОУПОРЯДОЧИВАНИЕ
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникДанных.Сотрудник КАК Сотрудник,
	|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.Сотрудник),
	|	ИсточникДанных.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.Организация),
	|	ИсточникДанных.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.ПериодВзаиморасчетов),
	|	ИсточникДанных.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
	|	ИсточникДанных.СуммаВзаиморасчетовПриход КАК СуммаВзаиморасчетовПриход,
	|	ИсточникДанных.СуммаВзаиморасчетовРасход КАК СуммаВзаиморасчетовРасход,
	|	ИсточникДанных.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток
	|		//ПОЛЯ_СВОЙСТВА
	|		//ПОЛЯ_КАТЕГОРИИ
	
	|{ВЫБРАТЬ
	|	Сотрудник.* КАК Сотрудник,
	|	Организация.*,
	|	ПериодВзаиморасчетов,
	|	СуммаВзаиморасчетовНачальныйОстаток,
	|	СуммаВзаиморасчетовПриход,
	|	СуммаВзаиморасчетовРасход,
	|	СуммаВзаиморасчетовКонечныйОстаток
	|		//ПСЕВДОНИМЫ_СВОЙСТВА
	|		//ПСЕВДОНИМЫ_КАТЕГОРИИ
	
	|}

	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор {&Периодичность}, , {Сотрудник.* КАК Сотрудник, Организация.* КАК Организация, ПериодВзаиморасчетов КАК ПериодВзаиморасчетов}) КАК ИсточникДанных
	|//СОЕДИНЕНИЯ
	|{ГДЕ
	|	ИсточникДанных.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
	|	ИсточникДанных.СуммаВзаиморасчетовПриход КАК СуммаВзаиморасчетовПриход,
	|	ИсточникДанных.СуммаВзаиморасчетовРасход КАК СуммаВзаиморасчетовРасход,
	|	ИсточникДанных.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток
	|		//УСЛОВИЯ_СВОЙСТВА
	|		//УСЛОВИЯ_КАТЕГОРИИ
	
	|}

	|{УПОРЯДОЧИТЬ ПО
	|	Сотрудник.*,
	|	Организация.*,
	|	ПериодВзаиморасчетов,
	|	СуммаВзаиморасчетовНачальныйОстаток,
	|	СуммаВзаиморасчетовПриход,
	|	СуммаВзаиморасчетовРасход,
	|	СуммаВзаиморасчетовКонечныйОстаток
	|//ПСЕВДОНИМЫ_СВОЙСТВА
	|//ПСЕВДОНИМЫ_КАТЕГОРИИ
	
	|}

	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетовНачальныйОстаток),
	|	СУММА(СуммаВзаиморасчетовПриход),
	|	СУММА(СуммаВзаиморасчетовРасход),
	|	СУММА(СуммаВзаиморасчетовКонечныйОстаток)
	|//ИТОГИ_СВОЙСТВА
	|//ИТОГИ_КАТЕГОРИИ
	
	|ПО
	|	ОБЩИЕ
	|{ИТОГИ ПО
	|	Сотрудник.*,
	|	Организация.*,
	|	ПериодВзаиморасчетов
	|		//ПСЕВДОНИМЫ_СВОЙСТВА
	|		//ПСЕВДОНИМЫ_КАТЕГОРИИ
	
	|}";

	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ИсточникДанных.Физлицо" , "ФизЛицо", "Работник", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ИсточникДанных.Организация" ,   "Организация",   "Организация",   ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации);

		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Сотрудник","Работник");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Организация","Организация");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПериодВзаиморасчетов","Месяц");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовНачальныйОстаток","Сальдо начальное");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовПриход","Начислено");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовРасход","Выплачено");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовКонечныйОстаток","Сальдо конечное");
	
	УниверсальныйОтчет.мСтруктураФорматаПолей.Вставить("ПериодВзаиморасчетов", "ДФ = ""ММММ гггг """"г.""""""");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовНачальныйОстаток", "Сальдо начальное", Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовПриход", "Начислено", Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовРасход", "Выплачено", Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовКонечныйОстаток", "Сальдо конечное", Истина, "ЧЦ=15; ЧДЦ=2");

	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ПериодВзаиморасчетов");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Сотрудник");

	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("Сотрудник");
	
	УниверсальныйОтчет.ДобавитьПорядок("ПериодВзаиморасчетов");
	УниверсальныйОтчет.ДобавитьПорядок("Сотрудник.Наименование");
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	 УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	 УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>);
	
	ОтчетДиаграмма.ПостроительОтчета.Текст = УниверсальныйОтчет.ПостроительОтчета.Текст;
	ОтчетДиаграмма.ПостроительОтчета.УстановитьНастройки(УниверсальныйОтчет.ПостроительОтчета.ПолучитьНастройки());
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

Процедура ОбновитьДиаграмму(ЭлемДиаграмма) Экспорт

	ОтчетДиаграмма.ИмяРегистра = "-";
	ОтчетДиаграмма.мНазваниеОтчета = ЭтотОбъект.Метаданные().Синоним;
	ОтчетДиаграмма.мВыбиратьИспользованиеСвойств =  Ложь;
	
	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("ДатаНачала", УниверсальныйОтчет.ДатаНач);
	
	ОтчетДиаграмма.СформироватьОтчет(ЭлемДиаграмма);
	
	ТипДиаграммыОтчета = ОтчетДиаграмма.ТипДиаграммыОтчета;
	Если ТипДиаграммыОтчета <> Неопределено Тогда
		ЭлемДиаграмма.ТипДиаграммы = ТипДиаграммыОтчета;
	КонецЕсли;
	
	Если ОтчетДиаграмма.ВидПодписейККруговойДиаграмме<>Неопределено Тогда
		ЭлемДиаграмма.ВидПодписей = ОтчетДиаграмма.ВидПодписейККруговойДиаграмме;
	КонецЕсли;
	
	Если ОтчетДиаграмма.РаздвижениеСерийКруговойДиаграммы<>Неопределено Тогда
		ЭлемДиаграмма.АвтоРаздвижениеСерий = ОтчетДиаграмма.РаздвижениеСерийКруговойДиаграммы;
	КонецЕсли; 
	
	ЭлемДиаграмма.Свет = ОтчетДиаграмма.Свет;
	ЭлемДиаграмма.Окантовка = ОтчетДиаграмма.Окантовка;
	ЭлемДиаграмма.Градиент = ОтчетДиаграмма.Градиент;
	
	Если ОтчетДиаграмма.ОриентацияИзометрическойДиаграммы <> Неопределено Тогда
		ЭлемДиаграмма.Ориентация = ОтчетДиаграмма.ОриентацияИзометрическойДиаграммы;
	КонецЕсли;
	
	Если ОтчетДиаграмма.РежимПробеловДиаграммыСОбластями <> Неопределено Тогда
		ЭлемДиаграмма.РежимПробелов = ОтчетДиаграмма.РежимПробеловДиаграммыСОбластями;
	КонецЕсли;
	
	Если ОтчетДиаграмма.ОграничениеСерий<>Неопределено Тогда
		ЭлемДиаграмма.МаксимумСерий = ОтчетДиаграмма.ОграничениеСерий;
	КонецЕсли;
	
	ЭлемДиаграмма.МаксимумСерийКоличество = ОтчетДиаграмма.МаксимумСерийКоличество;
	ЭлемДиаграмма.МаксимумСерийПроцент = ОтчетДиаграмма.МаксимумСерийПроцент;

	ВыводимыйПоказатель = "";
	Если ОтчетДиаграмма.НомерПоказателя < ОтчетДиаграмма.мТаблицаПоказатели.Количество() Тогда
		ВыводимыйПоказатель = ОтчетДиаграмма.мТаблицаПоказатели[ОтчетДиаграмма.НомерПоказателя].ПредставлениеПоля;
	КонецЕсли;
	
	ЭлемДиаграмма.ОбластьПостроения.ВертикальныеМетки = ОтчетДиаграмма.ВертикальныеМетки;

	ЭлемДиаграмма.ОбластьЗаголовка.Текст = ОтчетДиаграмма.мНазваниеОтчета + ": " + ВыводимыйПоказатель;
	
	ЭлемДиаграмма.БазовоеЗначение = ОтчетДиаграмма.БазовоеЗначение;
	
	ЭлемДиаграмма.ОтображатьЗаголовок = ОтчетДиаграмма.ОтображатьЗаголовок;
	
	ЭлемДиаграмма.ОтображатьЛегенду   = ОтчетДиаграмма.ОтображатьЛегенду;
	
	//ТекущийЭлемент = ЭлемДиаграмма;

КонецПроцедуры
	
Процедура ВыводДиаграммы(ЭлемДиаграмма)

	//Результат = УниверсальныйОтчет.ПостроительОтчета.Результат;
	
	// обновляем настройки построителя отчетов, формирующего таблицы (обычную и сводную)
	ПостроительОтчета = УниверсальныйОтчет.ПостроительОтчета;
	ПостроительОтчетаДиаграммы = ОтчетДиаграмма.ПостроительОтчета;
			
	Если ПостроительОтчетаДиаграммы.ИзмеренияСтроки.Количество() > 0 Тогда
		ИзмерениеСтрокиДиаграммы = ПостроительОтчетаДиаграммы.ИзмеренияСтроки[0];
		ИзмерениеСтрокиТаблицы = ПостроительОтчета.ИзмеренияСтроки.Найти(ИзмерениеСтрокиДиаграммы.Имя);
		Если ИзмерениеСтрокиТаблицы <> Неопределено Тогда
			МестоИзмерения = ПостроительОтчета.ИзмеренияСтроки.Индекс(ИзмерениеСтрокиТаблицы);
			Если МестоИзмерения > 0 Тогда
				ПостроительОтчета.ИзмеренияСтроки.Сдвинуть(ИзмерениеСтрокиТаблицы,-МестоИзмерения);
			КонецЕсли;
		Иначе
			ПостроительОтчета.ИзмеренияСтроки.Вставить(ИзмерениеСтрокиДиаграммы.ПутьКДанным,ИзмерениеСтрокиДиаграммы.Имя,ИзмерениеСтрокиДиаграммы.ТипИзмерения,ИзмерениеСтрокиДиаграммы.Макет,ИзмерениеСтрокиДиаграммы.МакетИерархии,0);
			ИзмерениеКолонкиТаблицы = ПостроительОтчета.ИзмеренияКолонки.Найти(ИзмерениеСтрокиДиаграммы.Имя);
			Если ИзмерениеКолонкиТаблицы <> Неопределено Тогда
				ПостроительОтчета.ИзмеренияКолонки.Удалить(ИзмерениеКолонкиТаблицы)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	Если ПостроительОтчетаДиаграммы.ИзмеренияКолонки.Количество() > 0 Тогда
		ИзмерениеКолонкиДиаграммы = ПостроительОтчетаДиаграммы.ИзмеренияКолонки[0];
		ИзмерениеКолонкиТаблицы = ПостроительОтчета.ИзмеренияКолонки.Найти(ИзмерениеКолонкиДиаграммы.Имя);
		Если ИзмерениеКолонкиТаблицы <> Неопределено Тогда
			МестоИзмерения = ПостроительОтчета.ИзмеренияКолонки.Индекс(ИзмерениеКолонкиТаблицы);
			Если МестоИзмерения > 0 Тогда
				ПостроительОтчета.ИзмеренияКолонки.Сдвинуть(ИзмерениеКолонкиТаблицы,-МестоИзмерения);
			КонецЕсли;
		ИначеЕсли ПостроительОтчета.ИзмеренияСтроки.Найти(ИзмерениеКолонкиДиаграммы.Имя) = Неопределено Тогда
			ПостроительОтчета.ИзмеренияКолонки.Вставить(ИзмерениеКолонкиДиаграммы.ПутьКДанным,ИзмерениеКолонкиДиаграммы.Имя,ИзмерениеКолонкиДиаграммы.ТипИзмерения,ИзмерениеКолонкиДиаграммы.Макет,ИзмерениеКолонкиДиаграммы.МакетИерархии,0);
		КонецЕсли;
	КонецЕсли;
			
	ОтчетДиаграмма.ДатаНач = УниверсальныйОтчет.ДатаНач;
	ОтчетДиаграмма.ДатаКон = УниверсальныйОтчет.ДатаКон;
	
	ДеревоПоказателей = УниверсальныйОтчет.Показатели;
	ТабПоказатели = ОтчетДиаграмма.Показатели.Выгрузить();
	ТабПоказатели.Очистить();
	Для Каждого ТекПоказатель Из ДеревоПоказателей.Строки Цикл
		Если ТекПоказатель.Строки.Количество() = 0 Тогда
			// Конечный показатель
			НовыйПоказатель = ТабПоказатели.Добавить();
			НовыйПоказатель.Имя           = ТекПоказатель.Имя;
			НовыйПоказатель.Представление = ТекПоказатель.ПредставлениеВОтчете;
			НовыйПоказатель.Использование = ТекПоказатель.Использование;
		Иначе
			// В данном отчете максимум 2 уровня в дереве показателей.
			Для Каждого СубУровень Из ТекПоказатель.Строки Цикл
				НовыйПоказатель = ТабПоказатели.Добавить();
				НовыйПоказатель.Имя           = СубУровень.Имя;
				НовыйПоказатель.Представление = СубУровень.ПредставлениеВОтчете;
				НовыйПоказатель.Использование = СубУровень.Использование;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ОтчетДиаграмма.Показатели.Загрузить(ТабПоказатели);
			
	ОбновитьДиаграмму(ЭлемДиаграмма);
	
КонецПроцедуры // ВыводДиаграммы()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьСводнуюТаблицу(ДокументРезультат) Экспорт

	ПостроительОтчета = УниверсальныйОтчет.ПостроительОтчета;
	ПостроительОтчета.Параметры.Вставить("ДатаНач", УниверсальныйОтчет.ДатаНач);
	Если УниверсальныйОтчет.ДатаКон <> '00010101000000' Тогда
		Если УниверсальныйОтчет.мРежимВводаПериода = 1 Тогда
			ПостроительОтчета.Параметры.Вставить("ДатаКон", НачалоДня(УниверсальныйОтчет.ДатаКон + 60*60*24));
		Иначе
			ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(УниверсальныйОтчет.ДатаКон ));
		КонецЕсли;
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаКон", '00010101000000');
	КонецЕсли;
	
	МассивВыбранныеПоляПоказатели = Новый Массив;
	
	Для Каждого ТекПоказатель Из УниверсальныйОтчет.Показатели.Строки Цикл
		Если ТекПоказатель.Строки.Количество() = 0 Тогда
		
			ВыбранноеПоле = УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить(ТекПоказатель.Имя);
			//УниверсальныйОтчет.ДобавитьДополнительноеПоле(ТекПоказатель.Имя);
			
			МассивВыбранныеПоляПоказатели.Добавить(ВыбранноеПоле);
			
		Иначе
			// В данном отчете максимум 2 уровня в дереве показателей.
			Для Каждого СубУровень Из ТекПоказатель.Строки Цикл
				//УниверсальныйОтчет.ДобавитьДополнительноеПоле(СубУровень.Имя);
				ВыбранноеПоле = УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить(СубУровень.Имя);
				МассивВыбранныеПоляПоказатели.Добавить(ВыбранноеПоле);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ДокументРезультат.Строки.Очистить();
	ДокументРезультат.Данные.Очистить();
	ПостроительОтчета.Выполнить();
	
	ДокументРезультат.ИсточникДанных = ПостроительОтчета.Результат;
	ОбновлятьОформлениеСводнойТаблицы = ДокументРезультат.Данные.Количество() = 0 и ДокументРезультат.Строки.Количество() = 0;
	//Если ОбновлятьОформлениеСводнойТаблицы Тогда
		Для ИндексПоля = 0 По ДокументРезультат.Поля.Количество() - 1 Цикл
			ПолеТаблицы = ДокументРезультат.Поля[ИндексПоля];
			Если ПолеТаблицы.Ресурс Тогда
				ДокументРезультат.Данные.Добавить(ПолеТаблицы)
			Иначе
				ДокументРезультат.Строки.Добавить(ПолеТаблицы)
			КонецЕсли;
		КонецЦикла;
		ДокументРезультат.Колонки.Добавить(ДокументРезультат.Данные);
	//КонецЕсли;
	
	Для каждого ВыбранноеПоле из МассивВыбранныеПоляПоказатели Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(ВыбранноеПоле);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСводнуюТаблицу()

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	
	Если ВариантОтображения = Перечисления.ВариантыОтображенияОтчетов.Таблица Тогда
		УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ИначеЕсли ВариантОтображения = Перечисления.ВариантыОтображенияОтчетов.Диаграмма Тогда
		ВыводДиаграммы(ТабличныйДокумент);
	ИначеЕсли ВариантОтображения = Перечисления.ВариантыОтображенияОтчетов.СводнаяТаблица Тогда
		СформироватьСводнуюТаблицу(ТабличныйДокумент);
	КонецЕсли;

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно перередать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: // (-1) - не выбирать период, 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

УниверсальныйОтчет.мРежимВводаПериода = 0;

#КонецЕсли
