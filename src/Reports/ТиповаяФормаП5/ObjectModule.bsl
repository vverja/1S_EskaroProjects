
#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Настройка периода
Перем НП Экспорт;    
Перем ДатаЗаполнения;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ГрафаНеявок(ВидВремени)
	
	Если ВидВремени.РабочееВремя Тогда
		Возврат 0;
	КонецЕсли;	
	
	Если ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск
	 или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск
	 или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускЧернобыльский
	 Тогда
	 	Возврат 1;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение
	 или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый
	 или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускТворческий
	 или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпускБезОплаты
	 или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускДополнительныйНаДетей
	 или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком
	 или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеотработанноеВремяПоЗаконодательству
	 Тогда
	 	Возврат 2;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя
	 Тогда
	 	Возврат 3;	
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству
	 Тогда
	 	Возврат 4;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПереводНаНеполныйДень
	 Тогда
	 	Возврат 5;	
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПереводНаДругуюРаботу
	 Тогда
	 	Возврат 6;		
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Простой
	 Тогда
	 	Возврат 7;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Прогул
	 Тогда
	 	Возврат 8;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Забастовка
	 Тогда
	 	Возврат 9;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь
	 или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты
	 Тогда
	 	Возврат 10;
	ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам
	 или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДругиеНеявкиПоКолДоговору
	 или ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ДругиеНеявки
	 Тогда
	 	Возврат 11;	
	Иначе
		Возврат 12;
	КонецЕсли;	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

//  Процедура заполняет фильтр по переданным значениям
//  	Организация, ОтборОрганизации, ВидСравненияОрганизации
// 		Подразделение, ОтборПодразделения, ВидСравненияПодразделения,
//		Работник, ОтборРаботника, ВидСравненияРаботника,
//		ПериодРегистрации
Процедура УстановитьФильтр(ФильтрСоответствия) Экспорт
	
	Если ФильтрСоответствия["Организация"] <> Неопределено Тогда
		Организация = ФильтрСоответствия["Организация"];
	КонецЕсли;
	
	Если ФильтрСоответствия["Подразделение"] <> Неопределено Тогда
		Подразделение = ФильтрСоответствия["Подразделение"];
	КонецЕсли;
	
	Если ФильтрСоответствия["Работник"] <> Неопределено Тогда
		Работник = ФильтрСоответствия["Работник"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ОтборОрганизации"] <> Неопределено Тогда
		ОтборОрганизации = ФильтрСоответствия["ОтборОрганизации"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ОтборПодразделения"] <> Неопределено Тогда
		ОтборПодразделения = ФильтрСоответствия["ОтборПодразделения"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ОтборРаботника"] <> Неопределено Тогда
		ОтборРаботника = ФильтрСоответствия["ОтборРаботника"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ВидСравненияОрганизации"] <> Неопределено Тогда
		ВидСравненияОрганизации = ФильтрСоответствия["ВидСравненияОрганизации"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ВидСравненияПодразделения"] <> Неопределено Тогда
		ВидСравненияПодразделения = ФильтрСоответствия["ВидСравненияПодразделения"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ВидСравненияРаботника"] <> Неопределено Тогда
		ВидСравненияРаботника = ФильтрСоответствия["ВидСравненияРаботника"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ПериодРегистрации"] <> Неопределено Тогда
		ДатаНач = ФильтрСоответствия["ПериодРегистрации"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ДатаЗаполнения"] <> Неопределено Тогда
		ДатаЗаполнения = ФильтрСоответствия["ДатаЗаполнения"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ОтветственноеЛицо"] <> Неопределено Тогда
		ОтветственноеЛицо = ФильтрСоответствия["ОтветственноеЛицо"];
	КонецЕсли;
	
КонецПроцедуры // УстановитьФильтр()


// Процедура Формирует отчет П-5 по данным регистров
// и заполняет табличный документ - ДокументРезильтат
Процедура СформироватьОтчет(ДокументРезультат, Режим, ВозвращаемоеСообщениеОбОшибке = Неопределено, ИзДокумента = Ложь) Экспорт
	
	Если Не ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(НачалоМесяца(ДатаНач),КонецМесяца(ДатаНач),Истина) Тогда
		Если Режим = "Табель" Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	
	ДокументРезультат.Очистить();
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	
	Праздники = Новый Массив;
	Праздники.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	Праздники.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
	
	ЗапросТабель = Новый Запрос();
	
	ЗапросТабель.УстановитьПараметр("Праздник",	Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	ЗапросТабель.УстановитьПараметр("Месяц", ДатаНач);
	ЗапросТабель.УстановитьПараметр("НачалоПериода", ДатаНач);
	ЗапросТабель.УстановитьПараметр("НачальнаяДата", ДатаНач);
	ЗапросТабель.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаНач));
	
	ЗапросТабель.УстановитьПараметр("Явка", Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	ЗапросТабель.УстановитьПараметр("Выходной", Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни);
	ЗапросТабель.УстановитьПараметр("ПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
	ЗапросТабель.УстановитьПараметр("НочныеЧасы", Справочники.КлассификаторИспользованияРабочегоВремени.Ночные);
	ЗапросТабель.УстановитьПараметр("ОтработаноСверхНормы", Перечисления.ВидыВремени.ОтработанноеСверхНормы);
	ЗапросТабель.УстановитьПараметр("ПоВечернимЧасам", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
	ЗапросТабель.УстановитьПараметр("ВечерниеЧасы", Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы);
	ЗапросТабель.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
	ЗапросТабель.УстановитьПараметр("ПриемНаРаботу", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ЗапросТабель.УстановитьПараметр("Увольнение", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	ЗапросТабель.УстановитьПараметр("ПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
	ЗапросТабель.УстановитьПараметр("Работает", Перечисления.СостоянияРаботникаОрганизации.Работает);
	ЗапросТабель.УстановитьПараметр("Заболевание", Перечисления.СостоянияРаботникаОрганизации.Заболевание);
	ЗапросТабель.УстановитьПараметр("Больничный", Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь);
	ЗапросТабель.УстановитьПараметр("ВидВремениПустаяСсылка", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
	ЗапросТабель.УстановитьПараметр("Ответственный", Ответственный.ФизЛицо);
	
	// условия на измерения регистра
	УсловиеПоРаботникам	= "";
	УсловиеНаОрганизации = "";
	
	Если ОтборРаботника Тогда
		
		ЗапросТабель.УстановитьПараметр("РаботникиОрганизации", Работник);
		
		Если ВидСравненияРаботника = ВидСравнения.Равно Тогда
			ВидСравненияРаботник = "=" 
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.НеРавно Тогда
			ВидСравненияРаботник = "<>"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.ВСписке Тогда
			ВидСравненияРаботник = "В"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.НеВСписке Тогда
			ВидСравненияРаботник = "НЕ В"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.ВСпискеПоИерархии ИЛИ
			ВидСравненияРаботника = ВидСравнения.ВИерархии Тогда
			ВидСравненияРаботник = "В ИЕРАРХИИ"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.НеВСпискеПоИерархии ИЛИ
			ВидСравненияРаботника = ВидСравнения.НеВИерархии Тогда
			ВидСравненияРаботник = "НЕ В ИЕРАРХИИ"
		КонецЕсли;
		
		Если ВидСравненияРаботник = "=" ИЛИ ВидСравненияРаботник = "<>" Тогда
			УсловиеПоРаботникам	= " Сотрудник " + ВидСравненияРаботник + " &РаботникиОрганизации";
		Иначе
			УсловиеПоРаботникам	= " Сотрудник " + ВидСравненияРаботник + "(&РаботникиОрганизации)";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборОрганизации Тогда
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			ЗапросТабель.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА Организации.Ссылка
			|		ИНАЧЕ Организации.ГоловнаяОрганизация
			|	КОНЕЦ КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В(&Организация)");
			
			Запрос.УстановитьПараметр("Организация", Организация);
			ЗапросТабель.УстановитьПараметр("Организация", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
			
		Если ВидСравненияОрганизации = ВидСравнения.Равно Тогда
			ВидСравненияДляОрганизации = "=" 
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			ВидСравненияДляОрганизации = "<>"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.ВСписке Тогда
			ВидСравненияДляОрганизации = "В"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляОрганизации = "НЕ В"
		КонецЕсли;
		
		Если ВидСравненияОрганизации = ВидСравнения.Равно ИЛИ ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			УсловиеНаОрганизации = " Организация " + ВидСравненияДляОрганизации + " &Организация";
		Иначе
			УсловиеНаОрганизации = " Организация " + ВидСравненияДляОрганизации + " (&Организация)";
		КонецЕсли;
	КонецЕсли;
	
	// условия на ресурсы регистра
	УсловиеВЗапрос = "";
	Если ОтборОрганизации Тогда
        ЗапросТабель.УстановитьПараметр("ОбособленноеПодразделение", Организация);
		Если ВидСравненияОрганизации = ВидСравнения.Равно Тогда
			ВидСравненияДляОрганизации = "=" 
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			ВидСравненияДляОрганизации = "<>"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.ВСписке Тогда
			ВидСравненияДляОрганизации = "В"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляОрганизации = "НЕ В"
		КонецЕсли;
		
		Если ВидСравненияОрганизации = ВидСравнения.Равно ИЛИ ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			УсловиеНаОбособленноеПодразделение = " ОбособленноеПодразделение " + ВидСравненияДляОрганизации + " &ОбособленноеПодразделение";
		Иначе
			УсловиеНаОбособленноеПодразделение = " ОбособленноеПодразделение " + ВидСравненияДляОрганизации + " (&ОбособленноеПодразделение)";
		КонецЕсли;
		УсловиеВЗапрос = УсловиеВЗапрос + " И " + УсловиеНаОбособленноеПодразделение;
	КонецЕсли;
	
	УсловиеПодразделение = "";
	Если ОтборПодразделения Тогда
		ЗапросТабель.УстановитьПараметр("ПодразделениеОрганизации", Подразделение);
		
		Если ВидСравненияПодразделения = ВидСравнения.Равно Тогда
			ВидСравненияДляПодразделения = "=" 
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеРавно Тогда
			ВидСравненияДляПодразделения = "<>"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.ВСписке Тогда
			ВидСравненияДляПодразделения = "В"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляПодразделения = "НЕ В"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.ВСпискеПоИерархии ИЛИ
			ВидСравненияПодразделения = ВидСравнения.ВИерархии Тогда
			ВидСравненияДляПодразделения = "В ИЕРАРХИИ"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеВСпискеПоИерархии ИЛИ
			ВидСравненияПодразделения = ВидСравнения.НеВИерархии Тогда
			ВидСравненияДляПодразделения = "НЕ В ИЕРАРХИИ"
		КонецЕсли;
		
		Если ВидСравненияПодразделения = ВидСравнения.Равно ИЛИ ВидСравненияПодразделения = ВидСравнения.НеРавно Тогда
			УсловиеПодразделение = " ПодразделениеОрганизации " + ВидСравненияДляПодразделения + " &ПодразделениеОрганизации";
		Иначе
			УсловиеПодразделение = " ПодразделениеОрганизации " + ВидСравненияДляПодразделения + " (&ПодразделениеОрганизации)";
		КонецЕсли;
		
		УсловиеВЗапрос = УсловиеВЗапрос + " И " + УсловиеПодразделение;
	КонецЕсли;
	
	Если ГруппироватьПодразделения Тогда
		ПорядокГруппировки = " ПодразделениеОрганизации, ";
	Иначе
		ПорядокГруппировки = " ";
	КонецЕсли;
	
	Макет = ПолучитьМакет("П5");
	ОбластьДанныхШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьДанныхОбозначения = Макет.ПолучитьОбласть("УсловныеОбозначения");
	ОбластьДанныхКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьДанныхСтрока		= Макет.ПолучитьОбласть("Строка");
	ОбластьДанныхИтоги		= Макет.ПолучитьОбласть("Итоги");
	ОбластьДанныхПодвал		= Макет.ПолучитьОбласть("Подвал");
	ОбластьДанныхПримечание	= Макет.ПолучитьОбласть("Примечание");
	
	ОбластьДанныхШапка.Параметры.ДатаНач     = ДатаНач;
	ОбластьДанныхШапка.Параметры.ДатаКон     = КонецМесяца(ДатаНач);
	ОбластьДанныхШапка.Параметры.ДатаЗаполнения = ДатаЗаполнения;
	
	ПараметровВстроке = ОбластьДанныхСтрока.Параметры.Количество();
	
	Если Режим = "Табель" Тогда
		
		ЗапросТабель.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Запрос сотрудников
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	РаботникиОрганизаций.Сотрудник,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.Имя = """"
		|			ТОГДА """"
		|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
		|			ТОГДА """"
		|		ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|	КОНЕЦ, РаботникиОрганизаций.Сотрудник.Физлицо.Наименование) КАК СотрудникНаименование,
		|	ДолжностиРаботников.ОбособленноеПодразделение КАК Организация,
		|	ДолжностиРаботников.ПодразделениеОрганизации,
		|	ДолжностиРаботников.Должность
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
		|		РаботникиОрганизацийСрезПоследних.Организация КАК Организация
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоПериода, " + ?(ПустаяСтрока(УсловиеПоРаботникам),УсловиеНаОрганизации,УсловиеПоРаботникам) + ") КАК РаботникиОрганизацийСрезПоследних
		|	ГДЕ
		|		РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	
		|	ОБЪЕДИНИТЬ 
		|	
		|	ВЫБРАТЬ
		|		РаботникиОрганизаций.Сотрудник,
		|		РаботникиОрганизаций.Организация
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ГДЕ
		|		РаботникиОрганизаций.Период > &НачалоПериода
		|		И РаботникиОрганизаций.Период < &КонецПериода
		|		" + ?(ПустаяСтрока(УсловиеПоРаботникам),?(ПустаяСтрока(УсловиеНаОрганизации), "", " И " + УсловиеНаОрганизации), " И " + УсловиеПоРаботникам) + "
		|		И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&КонецПериода,
		|		ФизЛицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				ИСТИНА" + ?(ПустаяСтрока(УсловиеПоРаботникам),?(ПустаяСтрока(УсловиеНаОрганизации),""," И " + УсловиеНаОрганизации)," И " + СтрЗаменить(УсловиеПоРаботникам,"Сотрудник","Ссылка")) + ")) КАК ФИОФизЛицСрезПоследних
		|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиОрганизаций.Сотрудник.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПериода, " + ?(ПустаяСтрока(УсловиеПоРаботникам),УсловиеНаОрганизации,УсловиеПоРаботникам) + ") Как ДолжностиРаботников
		|		ПО ДолжностиРаботников.Сотрудник = РаботникиОрганизаций.Сотрудник
		|ГДЕ
		|	ИСТИНА" + УсловиеВЗапрос + "
		|ИНДЕКСИРОВАТЬ ПО
		|	РаботникиОрганизаций.Сотрудник";
		
		ЗапросТабель.Выполнить();
		
		// Запрос дат периода
		Если РабочаяДата < НачалоМесяца(ДатаНач) И НЕ ИзДокумента Тогда
			// формируем пустую таблицу
			ВозвращаемоеСообщениеОбОшибке = "Отчет можно формировать только за текущий или предыдущий периоды!";
			Возврат;
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ
			|	ДатаТабеля
			|	
			|ПОМЕСТИТЬ ВТДатыТабеля 
			|	ИЗ (
			|	ВЫБРАТЬ
			|	ДАТАВРЕМЯ(" + Формат(Год(ДатаНач), "ЧГ=4") + ", " + Месяц(ДатаНач) + " , 1) КАК ДатаТабеля
			|	";           
			Для НомерДня = 2 По День(?(ИзДокумента,КонецМесяца(ДатаНач),Мин(РабочаяДата, КонецМесяца(ДатаНач)))) Цикл
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|  ДАТАВРЕМЯ(" + Формат(Год(ДатаНач), "ЧГ=4")+ ", " + Месяц(ДатаНач) + " ," + НомерДня + ")
				|	";
			КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + ") КАК ДатыТабеля";
		КонецЕсли;
		ЗапросТабель.Текст = ТекстЗапроса;
		ЗапросТабель.Выполнить();
		
		// Запрос Сотрудник, ДатыПериода
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	Сотрудник,
		|	СотрудникНаименование,
		|	Организация,
		|	ПодразделениеОрганизации,
		|	Должность,
		|	ВТДатыТабеля.ДатаТабеля КАК ДатаТабеля
		|ПОМЕСТИТЬ ВТСотрудникДата
		|	ИЗ ВТСотрудники КАК Сотрудники
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыТабеля
		|	ПО ИСТИНА 
		|ИНДЕКСИРОВАТЬ ПО
		|	СотрудникНаименование,
		|	ВТДатыТабеля.ДатаТабеля ";
		
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	РабочееВремяРаботниковОрганизаций.Назначение КАК Сотрудник,		
		|	СУММА(РабочееВремяРаботниковОрганизаций.Часов) КАК Часов,
		|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени КАК ВидВремени,
		|	РабочееВремяРаботниковОрганизаций.Период КАК ДатаТабеля
		|	ПОМЕСТИТЬ ВТРабочеВремя
		|	ИЗ
		|	РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники
		|	ПО РабочееВремяРаботниковОрганизаций.Назначение = ВТСотрудники.Сотрудник
		|	ГДЕ
		|	(НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод)
		|	И (НЕ РабочееВремяРаботниковОрганизаций.СводнаяЗапись)
		|	И НАЧАЛОПЕРИОДА(РабочееВремяРаботниковОрганизаций.Период, МЕСЯЦ) = &Месяц
		|	
		|	СГРУППИРОВАТЬ ПО
		|	РабочееВремяРаботниковОрганизаций.Назначение,
		|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени,
		|	РабочееВремяРаботниковОрганизаций.Период
		|	
		|	ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаТабеля	";				
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическийПериодДействия.Назначение КАК Сотрудник,
		|	ФактическийПериодДействия.ВидРасчета,
		|	ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидВремени,
		|	ФактическийПериодДействия.ВидРасчета.ВидВремени КАК ПеречислениеВидВремени,
		|	ФактическийПериодДействия.ГрафикРаботы КАК ГрафикРаботы,
		|	ФактическийПериодДействия.ПериодДействияНачало,
		|	ФактическийПериодДействия.ПериодРегистрации,
		|	ФактическийПериодДействия.Сторно,
		|	ФактическийПериодДействия.ПериодДействияКонец,
		|	ФактическийПериодДействия.ОтработаноЧасов
		|	
		|	ПОМЕСТИТЬ ВТОсновныеНачисления
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Назначение В (ВЫБРАТЬ Сотрудник ИЗ ВТСотрудники)) КАК ФактическийПериодДействия
		|ГДЕ
		|	ПериодДействия = &Месяц
		|	И ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> &ВидВремениПустаяСсылка
		|	И (НЕ ФактическийПериодДействия.ВидРасчета.ВидВремени  В ( Значение(Перечисление.ВидыВремени.ПустаяСсылка), Значение(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы), Значение(Перечисление.ВидыВремени.ЧасовоеНеотработанное)) ИЛИ ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)))";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	ВТДатыТабеля.ДатаТабеля,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ВидВремени,
		|	Начисления.ПеречислениеВидВремени,
		|	Начисления.ГрафикРаботы,
		|	ВЫБОР КОГДА Начисления.ПеречислениеВидВремени = &ОтработаноСверхНормы ТОГДА
		|		ВЫБОР КОГДА ВТДатыТабеля.ДатаТабеля = Начисления.ПериодДействияНачало ТОГДА
		|			Начисления.ОтработаноЧасов
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ
		|	ИНАЧЕ
		|		NULL
		|	КОНЕЦ КАК ОтработаноЧасов
		|	
		|ПОМЕСТИТЬ ВТОтфильтрованныеОсновныеНачисления
		|ИЗ
		|	ВТДатыТабеля
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТОсновныеНачисления КАК Начисления
		|ПО
		|	ВТДатыТабеля.ДатаТабеля МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец
		|	И НЕ Начисления.Сторно
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТОсновныеНачисления КАК СторноНачисления
		|ПО
		|	ВТДатыТабеля.ДатаТабеля МЕЖДУ СторноНачисления.ПериодДействияНачало И СторноНачисления.ПериодДействияКонец
		|	И СторноНачисления.Сторно
		|	И СторноНачисления.Сотрудник = Начисления.Сотрудник
		|	И СторноНачисления.ВидРасчета = Начисления.ВидРасчета
		|	И СторноНачисления.ГрафикРаботы = Начисления.ГрафикРаботы
		|	И СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации
		|ГДЕ СторноНачисления.Сотрудник Есть NULL";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = "ВЫБРАТЬ
		|	Работники.Сотрудник КАК Сотрудник,
		|	Работники.Период,
		|	Работники.ГрафикРаботы,
		//|	Работники.ПериодЗавершения,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ПериодЗавершения,
		|   NULL КАК ГрафикРаботыЗавершения
        //|	Работники.ГрафикРаботыЗавершения
		|	ПОМЕСТИТЬ ВТГрафикиРаботниковСрез
		|	ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоПериода, Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТСотрудники)" + ?(ПустаяСтрока(УсловиеНаОрганизации),""," И " + УсловиеНаОрганизации) + ") КАК Работники
		|	
		|	ИНДЕКСИРОВАТЬ ПО 
		|	Сотрудник,
		|	Период";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = "ВЫБРАТЬ
		|	Работники.Сотрудник КАК Сотрудник,
		|	&НачалоПериода КАК Период,
		|	ВЫБОР КОГДА Работники.ПериодЗавершения <= &НачалоПериода И Работники.ПериодЗавершения > &НачальнаяДата ТОГДА Работники.ГрафикРаботыЗавершения ИНАЧЕ Работники.ГрафикРаботы КОНЕЦ КАК ГрафикРаботы
		|	ПОМЕСТИТЬ ВТГрафикиРаботников
		|	ИЗ
		|	ВТГрафикиРаботниковСрез КАК Работники
		|	
		//|	ОБЪЕДИНИТЬ ВСЕ
		//|	
		//|	ВЫБРАТЬ
		//|	Работники.Сотрудник КАК Сотрудник,
		//|	Работники.ПериодЗавершения КАК Период,
		//|	Работники.ГрафикРаботыЗавершения КАК ГрафикРаботы
		//|	ИЗ
		//|	ВТГрафикиРаботниковСрез КАК Работники
		//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийПроверка
		//|		ПО РаботникиОрганизацийПроверка.Сотрудник = Работники.Сотрудник
		//
		//|			И РаботникиОрганизацийПроверка.Период > Работники.Период
		//|	
		//|	ГДЕ Работники.ПериодЗавершения >= &НачалоПериода 
		//|	И Работники.ПериодЗавершения <= &КонецПериода 
		//|	И РаботникиОрганизацийПроверка.Сотрудник ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.ГрафикРаботы
		|	ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники
		|	ПО РаботникиОрганизаций.Сотрудник = ВТСотрудники.Сотрудник
		|	ГДЕ
		|	РаботникиОрганизаций.Период > &НачалоПериода
		|	И РаботникиОрганизаций.Период <= &КонецПериода
		|	
		//|	ОБЪЕДИНИТЬ ВСЕ
		//|	
		//|	ВЫБРАТЬ
		//|	РаботникиОрганизаций.Сотрудник,
		//|	РаботникиОрганизаций.ПериодЗавершения,
		//|	РаботникиОрганизаций.ГрафикРаботыЗавершения
		//|	ИЗ
		//|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники
		//|		ПО РаботникиОрганизаций.Сотрудник = ВТСотрудники.Сотрудник
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийПроверка
		//|		ПО РаботникиОрганизацийПроверка.Сотрудник = РаботникиОрганизаций.Сотрудник
		//|			И РаботникиОрганизацийПроверка.Период <= РаботникиОрганизаций.ПериодЗавершения
		//|			И РаботникиОрганизацийПроверка.Период > РаботникиОрганизаций.Период
		//|	ГДЕ
		//|	РаботникиОрганизаций.Период > &НачалоПериода
		//|	И РаботникиОрганизаций.Период <= &КонецПериода
		//|	И РаботникиОрганизаций.ПериодЗавершения <= &КонецПериода 
		//|	И РаботникиОрганизаций.ПериодЗавершения > &НачальнаяДата
		//|	И РаботникиОрганизацийПроверка.Сотрудник ЕСТЬ NULL 
		|	
		|	ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период	";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = "ВЫБРАТЬ 
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
		|	Дата,
		|	ОсновноеЗначение,
		|	ВидУчетаВремени,
		|	Сотрудник,
		|	План
		|	
		|	ПОМЕСТИТЬ ВТГрафикиРаботыПоВидамВремени
		|	ИЗ
		|		РегистрСведений.ГрафикиРаботыПоВидамВремени Как ГрафикиРаботыПоВидамВремени
		|	ГДЕ
		|		(ГрафикиРаботыПоВидамВремени.ГрафикРаботы В (ВЫБРАТЬ Сотрудник ИЗ ВТСотрудники)
		|		ИЛИ ГрафикиРаботыПоВидамВремени.ГрафикРаботы В (ВЫБРАТЬ РАЗЛИЧНЫЕ ГрафикРаботы Из ВТГрафикиРаботников))	
		|		И (Месяц = &Месяц) И ВидУчетаВремени <> &ПоДням
		|	ИНДЕКСИРОВАТЬ ПО
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
		|	ГрафикиРаботыПоВидамВремени.Дата,
		|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
		|	ГрафикиРаботыПоВидамВремени.Сотрудник,
		|	ГрафикиРаботыПоВидамВремени.План";
		ЗапросТабель.Выполнить();

		
		
		ЗапросТабель.Текст = "ВЫБРАТЬ 
		|	Основной.Сотрудник,
		|	Основной.ГрафикРаботы,
		|	Основной.Период КАК ПериодНачало,
		|	ВЫБОР КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL ТОГДА &КонецПериода ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1) КОНЕЦ КАК ПериодКонец
		|	
		|	ПОМЕСТИТЬ ВТГрафикиПериодами
		|	
		|	ИЗ ВТГрафикиРаботников КАК Основной
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботников КАК Вспомогательный
		|	ПО Вспомогательный.Сотрудник = Основной.Сотрудник
		|	И Вспомогательный.Период > Основной.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|	Основной.Сотрудник,
		|	Основной.ГрафикРаботы,
		|	Основной.Период
		|	
		|	ИНДЕКСИРОВАТЬ ПО
		|	Основной.Сотрудник,
		|	Основной.Период ";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = "ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник КАК Сотрудник,
		|	СостояниеРаботников.Период КАК Период,
		|	СостояниеРаботников.Состояние,
		|	СостояниеРаботников.ПериодЗавершения,
		|	СостояниеРаботников.СостояниеЗавершения
		|	ПОМЕСТИТЬ ВТСостояниеРаботниковСрез
		|	ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&НачалоПериода, Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТСотрудники) " + ?(ПустаяСтрока(УсловиеНаОрганизации),""," И " + УсловиеНаОрганизации) + ") КАК СостояниеРаботников
		|	
		|	ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период";
		ЗапросТабель.Выполнить();
		
				ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник КАК Сотрудник,
		|	&НачалоПериода КАК Период,
		|	ВЫБОР
		|		КОГДА СостояниеРаботников.ПериодЗавершения <= &НачалоПериода
		|				И СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА СостояниеРаботников.СостояниеЗавершения
		|		ИНАЧЕ СостояниеРаботников.Состояние
		|	КОНЕЦ КАК Состояние
		|ПОМЕСТИТЬ ВТСостояниеРаботников
		|ИЗ
		|	ВТСостояниеРаботниковСрез КАК СостояниеРаботников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник,
		|	СостояниеРаботников.ПериодЗавершения,
		|	СостояниеРаботников.СостояниеЗавершения
		|ИЗ
		|	ВТСостояниеРаботниковСрез КАК СостояниеРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковПроверка
		|		ПО (СостояниеРаботниковПроверка.Сотрудник = СостояниеРаботников.Сотрудник)
		|			И (СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения)
		|			И (СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период)
		|ГДЕ
		|	СостояниеРаботников.ПериодЗавершения >= &НачалоПериода
		|	И СостояниеРаботников.ПериодЗавершения <= &КонецПериода
		|	И СостояниеРаботниковПроверка.Сотрудник ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник,
		|	СостояниеРаботников.Период,
		|	СостояниеРаботников.Состояние
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО СостояниеРаботников.Сотрудник = ВТСотрудники.Сотрудник
		|ГДЕ
		|	СостояниеРаботников.Период > &НачалоПериода
		|	И СостояниеРаботников.Период <= &КонецПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник,
		|	СостояниеРаботников.ПериодЗавершения,
		|	СостояниеРаботников.СостояниеЗавершения
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО СостояниеРаботников.Сотрудник = ВТСотрудники.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК СостояниеРаботниковПроверка
		|		ПО (СостояниеРаботниковПроверка.Сотрудник = СостояниеРаботников.Сотрудник)
		|			И (СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения)
		|			И (СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ПроверкаПерекрытияПериодовСостоянияРаботников
		|		ПО (ПроверкаПерекрытияПериодовСостоянияРаботников.Сотрудник = СостояниеРаботников.Сотрудник)
		|			И ((НЕ(ПроверкаПерекрытияПериодовСостоянияРаботников.Регистратор = СостояниеРаботников.Регистратор
		|					И ПроверкаПерекрытияПериодовСостоянияРаботников.НомерСтроки = СостояниеРаботников.НомерСтроки)))
		|			И (ПроверкаПерекрытияПериодовСостоянияРаботников.Период = СостояниеРаботников.ПериодЗавершения)
		|ГДЕ
		|	СостояниеРаботников.Период > &НачалоПериода
		|	И СостояниеРаботников.Период <= &КонецПериода
		|	И СостояниеРаботников.ПериодЗавершения <= &КонецПериода
		|	И СостояниеРаботников.ПериодЗавершения > &НачалоПериода
		|	И СостояниеРаботниковПроверка.Сотрудник ЕСТЬ NULL 
		|	И ПроверкаПерекрытияПериодовСостоянияРаботников.Сотрудник ЕСТЬ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ 
		|	Основной.Сотрудник КАК Сотрудник,
		|	ВЫБОР
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВынужденныйПрогул)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогул)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ГосударственныеОбязанности)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеотработанноеВремяПоЗаконодательству)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогул)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДругиеНеявки)
	    |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)
	    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Простой)
	    |	КОНЕЦ КАК ВидВремени,
		|		Основной.Период КАК ПериодНачало,
		|		ВЫБОР КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL ТОГДА &КонецПериода ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1) КОНЕЦ КАК ПериодКонец
		|	
		|	ПОМЕСТИТЬ ВТСостояниеСотрудников
		|	
		|	ИЗ ВТСостояниеРаботников КАК Основной
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеРаботников КАК Вспомогательный
		|		ПО Вспомогательный.Сотрудник = Основной.Сотрудник
		|		И Вспомогательный.Период > Основной.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.Сотрудник,
		|		Основной.Состояние,
		|		Основной.Период
		|	
		|	ИНДЕКСИРОВАТЬ ПО
		|		Основной.Сотрудник,
		|		Основной.Период ";
		ЗапросТабель.Выполнить();
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ
		|		НеотфильтрованноеВремя.Организация Как Организация,
		|		НеотфильтрованноеВремя.Организация.НаименованиеПолное Как ИмяОрганизации,
		|		НеотфильтрованноеВремя.ПодразделениеОрганизации Как ПодразделениеОрганизации,
		|		НеотфильтрованноеВремя.ПодразделениеОрганизации.Наименование Как ИмяПодразделения,
		|		НеотфильтрованноеВремя.Должность.Наименование Как Должность,
		|		НеотфильтрованноеВремя.Сотрудник,
		|		НеотфильтрованноеВремя.Сотрудник.Код КАК ТабельныйНомер,
		|		НеотфильтрованноеВремя.СотрудникНаименование,
		|		НеотфильтрованноеВремя.ДатаТабеля,
		|		РегламентированныйПроизводственныйКалендарь.ВидДня КАК ВидДня,
		|		НеотфильтрованноеВремя.ВидВремени,
		|		Выбор Когда НеотфильтрованноеВремя.ВидВремени.РабочееВремя Тогда
		|			ЕстьNULL(НеотфильтрованноеВремя.Часов, 0)
		|		Иначе 0 Конец Как Часов,
		|		Выбор Когда НЕ НеотфильтрованноеВремя.ВидВремени.РабочееВремя Тогда
		|			ЕстьNULL(НеотфильтрованноеВремя.Часов, 0)
		|		Иначе 0 Конец Как НеотработаноЧасов,
		|		Выбор 
		|			Когда НеотфильтрованноеВремя.ВидВремени = &Явка Тогда 1
		|			Когда НеотфильтрованноеВремя.ВидВремени = &ВечерниеЧасы Тогда 2
		|			Когда НеотфильтрованноеВремя.ВидВремени = &НочныеЧасы Тогда 3
		|			Когда НеотфильтрованноеВремя.ВидВремени = &Выходной Тогда 5
		|			Иначе 4
		|		Конец КАК ПолеСортировки,
		|		Руководитель.Должность КАК ДолжностьРуководителя,
		|		ФИОРуководителя.Фамилия + "" "" + (ВЫРАЗИТЬ(ФИОРуководителя.Имя КАК СТРОКА(1))) + "". "" + (ВЫРАЗИТЬ(ФИОРуководителя.Отчество КАК СТРОКА(1))) + ""."" КАК ФИОРуководителя,		
		|		ЕСТЬNULL(РуководительКадровойСлужбыПодразделения.Должность, РуководительКадровойСлужбыОрганизации.Должность) КАК ДолжностьКадровика,
		|		ВЫБОР КОГДА ФИОКадровикаПодразделения.Фамилия ЕСТЬ NULL 
		|		ТОГДА ФИОКадровикаОрганизации.Фамилия + "" "" + (ВЫРАЗИТЬ(ФИОКадровикаОрганизации.Имя КАК СТРОКА(1))) + "". "" + (ВЫРАЗИТЬ(ФИОКадровикаОрганизации.Отчество КАК СТРОКА(1))) + "".""
		|		ИНАЧЕ ФИОКадровикаПодразделения.Фамилия + "" "" + (ВЫРАЗИТЬ(ФИОКадровикаПодразделения.Имя КАК СТРОКА(1))) + "". "" + (ВЫРАЗИТЬ(ФИОКадровикаПодразделения.Отчество КАК СТРОКА(1))) + "".""
		|		КОНЕЦ КАК ФИОКадровика,
		|		Ответственный.ФИООтветственного КАК ФИООтветственного,
		|		Ответственный.ДолжностьОтветственного КАК ДолжностьОтветственного,
		|		ЕСТЬNULL(ВЫБОР
		|			КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ТребуетВводаТарифногоРазряда
		|				ТОГДА РазмерТарифныхСтавок.Размер
		|			ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель1
		|		КОНЕЦ, 0) КАК Оклад,
		|		НеотфильтрованноеВремя.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени,
		|		ЕстьNULL(НеотфильтрованноеВремя.ВнутрисменныеОтклоненияЧасов, 0) КАК ВнутрисменныеОтклоненияЧасов
		|		ИЗ (
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|		ВТСотрудникДата.Организация Как Организация,
		|		ВТСотрудникДата.ПодразделениеОрганизации Как ПодразделениеОрганизации,
		|		ВТСотрудникДата.Должность,
		|		ВТСотрудникДата.Сотрудник Как Сотрудник,
		|		ВТСотрудникДата.СотрудникНаименование Как СотрудникНаименование,
		|		ВТСотрудникДата.ДатаТабеля КАК ДатаТабеля,
		|		ВЫБОР 
		|			КОГДА НЕ ВТРабочеВремя.ВидВремени ЕСТЬ NULL ТОГДА ВТРабочеВремя.ВидВремени
		|			КОГДА (НЕ ВТОсновныеНачисления.ВидВремени ЕСТЬ NULL ) ТОГДА 
		|				ВЫБОР 
		|					КОГДА ВТОсновныеНачисления.ВидВремени В (&НочныеЧасы, &ВечерниеЧасы) 
		|						И ГрафикПоОсновнымНачислениям.ОсновноеЗначение = 0 ТОГДА 
		|						   NULL
		|					КОГДА НЕ ВТОсновныеНачисления.ПеречислениеВидВремени В (Значение(Перечисление.ВидыВремени.ЦелодневноеНеотработанное), Значение(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
		|						И ГрафикПоОсновнымНачислениям.ОсновноеЗначение = 0 ТОГДА 
		|		   				   &Выходной
		|					ИНАЧЕ  ВТОсновныеНачисления.ВидВремени
		|				КОНЕЦ
		|			КОГДА НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL ТОГДА 
		|				ВЫБОР 
		|					КОГДА ГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0 
		|						ИЛИ ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0 ТОГДА &Выходной
		|					ИНАЧЕ ВТСостояниеСотрудников.ВидВремени
		|				КОНЕЦ
		|			КОГДА НЕ ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL ТОГДА
		|				ВЫБОР
		|					КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = &ПоНочнымЧасам ТОГДА &НочныеЧасы
		|					КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = &ПоВечернимЧасам ТОГДА &ВечерниеЧасы
		|					КОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0 ТОГДА &Выходной
		|					ИНАЧЕ &Явка
		|				КОНЕЦ
		|			КОГДА НЕ ГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL ТОГДА
		|				ВЫБОР
		|					КОГДА ГрафикПоРаботникам.ВидУчетаВремени = &ПоНочнымЧасам ТОГДА &НочныеЧасы
		|					КОГДА ГрафикПоРаботникам.ВидУчетаВремени = &ПоВечернимЧасам ТОГДА &ВечерниеЧасы
		|					КОГДА ГрафикПоРаботникам.ОсновноеЗначение = 0 ТОГДА &Выходной
		|					ИНАЧЕ &Явка
		|				КОНЕЦ
		|			ИНАЧЕ &Выходной
		|		КОНЕЦ КАК ВидВремени,
		|		ВЫБОР 
		|			КОГДА НЕ ВТОсновныеНачисления.ОтработаноЧасов ЕСТЬ NULL ТОГДА ВТОсновныеНачисления.ОтработаноЧасов
		|			КОГДА НЕ ВТРабочеВремя.Часов ЕСТЬ NULL ТОГДА ВТРабочеВремя.Часов
		|			КОГДА НЕ ГрафикПоОсновнымНачислениям.ОсновноеЗначение ЕСТЬ NULL ТОГДА ГрафикПоОсновнымНачислениям.ОсновноеЗначение
		|			КОГДА НЕ ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение ЕСТЬ NULL ТОГДА ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение
		|			КОГДА НЕ ГрафикПоСостояниюСотрудников.ОсновноеЗначение ЕСТЬ NULL ТОГДА ГрафикПоСостояниюСотрудников.ОсновноеЗначение
		|			КОГДА НЕ ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение ЕСТЬ NULL ТОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение
		|			КОГДА НЕ ГрафикПоРаботникам.ОсновноеЗначение ЕСТЬ NULL ТОГДА ГрафикПоРаботникам.ОсновноеЗначение
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Часов,
		|		ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени,
		|		ВнутрисменныеОтклонения.Часов КАК ВнутрисменныеОтклоненияЧасов
		|	ИЗ ВТСотрудникДата
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочеВремя
		|		ПО ВТРабочеВремя.Сотрудник = ВТСотрудникДата.Сотрудник
		|		И ВТРабочеВремя.ДатаТабеля = ВТСотрудникДата.ДатаТабеля
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиПериодами
		|		ПО ВТГрафикиПериодами.Сотрудник = ВТСотрудникДата.Сотрудник
		|		И ВТСотрудникДата.ДатаТабеля >= ВТГрафикиПериодами.ПериодНачало
		|		И ВТСотрудникДата.ДатаТабеля <= ВТГрафикиПериодами.ПериодКонец
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций Как ВнутрисменныеОтклонения
		|		ПО ВнутрисменныеОтклонения.Сотрудник = ВТСотрудникДата.Сотрудник
		|		И ВнутрисменныеОтклонения.Период = ВТСотрудникДата.ДатаТабеля
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтфильтрованныеОсновныеНачисления Как ВТОсновныеНачисления
		|		ПО ВТСотрудникДата.Сотрудник = ВТОсновныеНачисления.Сотрудник
		|			И ВТСотрудникДата.ДатаТабеля = ВТОсновныеНачисления.ДатаТабеля
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикПоОсновнымНачислениям
		|		ПО ГрафикПоОсновнымНачислениям.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы
		|		И (ГрафикПоОсновнымНачислениям.Сотрудник = ВТОсновныеНачисления.Сотрудник
		|		ИЛИ ГрафикПоОсновнымНачислениям.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка))
		|		И ГрафикПоОсновнымНачислениям.Дата =  ВТСотрудникДата.ДатаТабеля
		|		И ВЫБОР 
		|			КОГДА ВТОсновныеНачисления.ВидВремени = &НочныеЧасы ТОГДА &ПоНочнымЧасам
		|			КОГДА ВТОсновныеНачисления.ВидВремени = &ВечерниеЧасы ТОГДА &ПоВечернимЧасам
		|			ИНАЧЕ &ПоЧасам 
		|		КОНЕЦ = ГрафикПоОсновнымНачислениям.ВидУчетаВремени
		|		И НЕ ВТОсновныеНачисления.ВидВремени ЕСТЬ NULL
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеСотрудников
		|		ПО ВТСотрудникДата.Сотрудник = ВТСостояниеСотрудников.Сотрудник
		|		И ВТСотрудникДата.ДатаТабеля >= ВТСостояниеСотрудников.ПериодНачало
		|		И ВТСотрудникДата.ДатаТабеля <= ВТСостояниеСотрудников.ПериодКонец
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафикПоСостояниюСотрудников
		|		ПО ИндивидуальныйГрафикПоСостояниюСотрудников.ГрафикРаботы = ВТСотрудникДата.Сотрудник
		|		И ИндивидуальныйГрафикПоСостояниюСотрудников.Дата =  ВТСотрудникДата.ДатаТабеля
		|		И ВЫБОР 
		|			КОГДА ВТСостояниеСотрудников.ВидВремени = &НочныеЧасы ТОГДА &ПоНочнымЧасам
		|			КОГДА ВТСостояниеСотрудников.ВидВремени = &ВечерниеЧасы ТОГДА &ПоВечернимЧасам
		|			ИНАЧЕ &ПоЧасам 
		|		КОНЕЦ = ИндивидуальныйГрафикПоСостояниюСотрудников.ВидУчетаВремени
		|		И НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикПоСостояниюСотрудников
		|		ПО ГрафикПоСостояниюСотрудников.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы
		|		И ГрафикПоСостояниюСотрудников.Дата =  ВТСотрудникДата.ДатаТабеля
		|		И ВЫБОР
		|			КОГДА ВТСостояниеСотрудников.ВидВремени = &НочныеЧасы ТОГДА &ПоНочнымЧасам
		|			КОГДА ВТСостояниеСотрудников.ВидВремени = &ВечерниеЧасы ТОГДА &ПоВечернимЧасам
		|			ИНАЧЕ &ПоЧасам 
		|		КОНЕЦ = ГрафикПоСостояниюСотрудников.ВидУчетаВремени
		|		И НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL 
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийПриемы
		|		ПО РаботникиОрганизацийПриемы.Сотрудник = ВТСотрудникДата.Сотрудник
		|		И РаботникиОрганизацийПриемы.ПричинаИзмененияСостояния = &ПриемНаРаботу
		|		И РаботникиОрганизацийПриемы.Период <= ВТСотрудникДата.ДатаТабеля
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийУвольнения
		|		ПО РаботникиОрганизацийУвольнения.Сотрудник = ВТСотрудникДата.Сотрудник
		|		И РаботникиОрганизацийУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафикПоРаботникам
		|		ПО ИндивидуальныйГрафикПоРаботникам.ГрафикРаботы = ВТСотрудникДата.Сотрудник
		|		И ИндивидуальныйГрафикПоРаботникам.Сотрудник =  ВТСотрудникДата.Сотрудник
		|		И ИндивидуальныйГрафикПоРаботникам.Дата =  ВТСотрудникДата.ДатаТабеля
		|		И ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени <> &ПоДням
		|		И не((ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени В (&ПоВечернимЧасам,&ПоНочнымЧасам))
		|			И  (ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикПоРаботникам
		|		ПО ГрафикПоРаботникам.ГрафикРаботы = ВТГрафикиПериодами.ГрафикРаботы
		|		И ГрафикПоРаботникам.Дата =  ВТСотрудникДата.ДатаТабеля
		|		И ГрафикПоРаботникам.ВидУчетаВремени <> &ПоДням
		|		И ((ГрафикПоРаботникам.ВидУчетаВремени = ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени)
		|			ИЛИ (ИндивидуальныйГрафикПоРаботникам.ГрафикРаботы ЕСТЬ NULL))
		|		И не((ГрафикПоРаботникам.ВидУчетаВремени В (&ПоВечернимЧасам,&ПоНочнымЧасам))
		|			И  (ГрафикПоРаботникам.ОсновноеЗначение = 0))
		|	
		|	ГДЕ (РаботникиОрганизацийУвольнения.Период ЕСТЬ NULL
		|	ИЛИ РаботникиОрганизацийУвольнения.Период > ВТСотрудникДата.ДатаТабеля)
		|	И   не
		|	(НЕ ВЫБОР 
		|			КОГДА НЕ ВТРабочеВремя.ВидВремени ЕСТЬ NULL ТОГДА ВТРабочеВремя.ВидВремени
		|			КОГДА НЕ ВТОсновныеНачисления.ВидВремени ЕСТЬ NULL ТОГДА 
		|				ВЫБОР 
		|					КОГДА ВТОсновныеНачисления.ВидВремени В (&НочныеЧасы, &ВечерниеЧасы) 
		|						И ГрафикПоОсновнымНачислениям.ОсновноеЗначение = 0 ТОГДА 
		|						   NULL
		|					КОГДА ВТОсновныеНачисления.ПеречислениеВидВремени <> Значение(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
		|						И ГрафикПоОсновнымНачислениям.ОсновноеЗначение = 0 ТОГДА 
		|		   				   &Выходной
		|					ИНАЧЕ  ВТОсновныеНачисления.ВидВремени
		|				КОНЕЦ	
		|			КОГДА НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL ТОГДА 
		|				ВЫБОР 
		|					КОГДА ГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0 
		|						ИЛИ ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0 ТОГДА &Выходной
		|					ИНАЧЕ ВТСостояниеСотрудников.ВидВремени
		|				КОНЕЦ
		|			КОГДА НЕ ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL ТОГДА
		|				ВЫБОР
		|					КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = &ПоНочнымЧасам ТОГДА &НочныеЧасы
		|					КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = &ПоВечернимЧасам ТОГДА &ВечерниеЧасы
		|					КОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0 ТОГДА &Выходной
		|					ИНАЧЕ &Явка
		|				КОНЕЦ
		|			КОГДА НЕ ГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL ТОГДА
		|				ВЫБОР
		|					КОГДА ГрафикПоРаботникам.ВидУчетаВремени = &ПоНочнымЧасам ТОГДА &НочныеЧасы
		|					КОГДА ГрафикПоРаботникам.ВидУчетаВремени = &ПоВечернимЧасам ТОГДА &ВечерниеЧасы
		|					КОГДА ГрафикПоРаботникам.ОсновноеЗначение = 0 ТОГДА &Выходной
		|					ИНАЧЕ &Явка
		|				КОНЕЦ
		|			ИНАЧЕ &Выходной
		|		КОНЕЦ В ( &Явка, &НочныеЧасы, &ВечерниеЧасы) 
		|		И
		|		ГрафикПоРаботникам.ВидУчетаВремени В (&ПоНочнымЧасам, &ПоВечернимЧасам) )
		|	) КАК НеотфильтрованноеВремя
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&КонецПериода, Актуальность = ИСТИНА) КАК ПлановыеНачисленияРаботниковОрганизаций
		|       ПО ПлановыеНачисленияРаботниковОрганизаций.Сотрудник = НеотфильтрованноеВремя.Сотрудник
		|        И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета <> ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&КонецПериода) КАК РазмерТарифныхСтавок
		|       ПО ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК Руководитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОРуководителя
		|		ПО Руководитель.ФизическоеЛицо = ФИОРуководителя.ФизЛицо";
		Если ГруппироватьПодразделения тогда
			ЗапросТабель.Текст = ЗапросТабель.Текст + "
			|	ПО НеотфильтрованноеВремя.ПодразделениеОрганизации = Руководитель.СтруктурнаяЕдиница";
		Иначе
			ЗапросТабель.Текст = ЗапросТабель.Текст + "
			|	ПО НеотфильтрованноеВремя.Организация = Руководитель.СтруктурнаяЕдиница";
		КонецЕсли;
		ЗапросТабель.Текст = ЗапросТабель.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаОрганизации
		|		ПО РуководительКадровойСлужбыОрганизации.ФизическоеЛицо = ФИОКадровикаОрганизации.ФизЛицо
		|	ПО НеотфильтрованноеВремя.Организация = РуководительКадровойСлужбыОрганизации.СтруктурнаяЕдиница
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыПодразделения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаПодразделения
		|		ПО РуководительКадровойСлужбыПодразделения.ФизическоеЛицо = ФИОКадровикаПодразделения.ФизЛицо
		|	ПО НеотфильтрованноеВремя.ПодразделениеОрганизации = РуководительКадровойСлужбыПодразделения.СтруктурнаяЕдиница "+?(НЕ ГруппироватьПодразделения, " И ЛОЖЬ", "")+"
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Должность) КАК ДолжностьОтветственного,
		|					МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия + "" "" + (ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Имя КАК СТРОКА(1))) + "". "" + (ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Отчество КАК СТРОКА(1))) + ""."") КАК ФИООтветственного
		|				ИЗ
		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПериода, Сотрудник.Физлицо = &Ответственный) КАК РаботникиОрганизацийСрезПоследних
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОФизЛицСрезПоследних
		|					ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо) КАК Ответственный
		|	ПО ИСТИНА
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|   ПО РегламентированныйПроизводственныйКалендарь.ДатаКалендаря = НеотфильтрованноеВремя.ДатаТабеля
		|	ГДЕ НЕ НеотфильтрованноеВремя.ВидВремени Есть NULL
		|УПОРЯДОЧИТЬ ПО
		|	Организация, " + ПорядокГруппировки + " СотрудникНаименование, Должность, ДатаТабеля, ПолеСортировки";
		РезультатЗапроса = ЗапросТабель.Выполнить();
		ВыборкаПоРаботнику = РезультатЗапроса.Выбрать();
		
				
		СоответствиеЦелодневныхНевыходов = Новый Соответствие;
		СоответствиеЦелодневныхНевыходовЧасы = Новый Соответствие;
		
		Если ГруппироватьПодразделения Тогда
			
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
				
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПодразделениеОрганизации") Цикл
					Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					ЧасыВсего = 0;
					ДниВсего = 0;
					СверхурочныеВсего = 0;
					ВечерниеВсего = 0;
					НочныеВсего = 0;
					ВыходныеВсего = 0;
					
					НомерПП = 0;
					ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
					ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
					
					КодЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(ВыборкаПоРаботнику.Организация, КонецМесяца(ДатаНач), СписокПоказателей).КодПоЕДРПОУ;
					ОбластьДанныхШапка.Параметры.ЕДРПОУ = КодЕДРПОУ;
					
					
					ДокументРезультат.Вывести(ОбластьДанныхШапка);
					Если ВыводитьУсловныеОбозначения Тогда
						ДокументРезультат.Вывести(ОбластьДанныхОбозначения);
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;	
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
							
							НомерПП = НомерПП + 1;
							
							ДниПерваяПоловина  = 0;
							ЧасыПерваяПоловина = 0;
							ДниВтораяПоловина  = 0;
							ЧасыВтораяПоловина = 0;
							
							ЧасыСверхурочные = 0;
							ЧасыВечерние = 0;
							ЧасыНочные = 0;
							ЧасыВыходные = 0;
							
							Для Сч = 1 По ПараметровВстроке Цикл
								ОбластьДанныхСтрока.Параметры.Установить(Сч - 1,""); 
							КонецЦикла;
							СоответствиеЦелодневныхНевыходов.Очистить();
							СоответствиеЦелодневныхНевыходовЧасы.Очистить();
							
							ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
							ОбластьДанныхСтрока.Параметры.ФИО = СокрП(ВыборкаПоРаботнику.СотрудникНаименование);
							Если ВыборкаПоРаботнику.Сотрудник.Физлицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
								ОбластьДанныхСтрока.Параметры.Пол = "Ч";
							ИначеЕсли ВыборкаПоРаботнику.Сотрудник.Физлицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
								ОбластьДанныхСтрока.Параметры.Пол = "Ж";
							Иначе
								ОбластьДанныхСтрока.Параметры.Пол = "";
							КонецЕсли;	
							ОбластьДанныхСтрока.Параметры.Должность = ВыборкаПоРаботнику.Должность;
							ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
							
							Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ДатаТабеля") Цикл
								
								СимволДня = ""; ОтработаноЧасовЗаДень = 0;
								ОтработаноЧасовЗаДеньСтр = "";
								НомерДня = Строка(День(ВыборкаПоРаботнику.ДатаТабеля));
								ПерваяПоловина = День(ВыборкаПоРаботнику.ДатаТабеля) <= 15;
								УчитыватьВыходнойДень = Истина;
								
								Пока ВыборкаПоРаботнику.Следующий() Цикл
									Если  ВыборкаПоРаботнику.ВидВремени = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени Тогда
										ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
										Продолжить;
									КонецЕсли;
									
									//Если ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники Тогда
									//	УчитыватьВыходнойДень = Ложь;
									Если ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни И НЕ УчитыватьВыходнойДень Тогда
										Продолжить;
									КонецЕсли;
									
									Если ГрафаНеявок(ВыборкаПоРаботнику.ВидВремени)>2 Тогда
										//не рабочее время и не отпуск
										Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов = 0 И ВыборкаПоРаботнику.НеотработаноЧасов = 0 Тогда
											//это невыход в выходной - в отчете не отображаем
											Продолжить;
										КонецЕсли;
									ИначеЕсли ГрафаНеявок(ВыборкаПоРаботнику.ВидВремени)>0 Тогда
										//отпуск
										Если ВыборкаПоРаботнику.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
											//отпуск в праздник не считаем
											Продолжить;
										КонецЕсли;	
									КонецЕсли;

									
									Если ((ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные) или
										(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы) или 
										(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные) или
										(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВыходныеИПраздничные) или
										(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Работа)) И
										(ВыборкаПоРаботнику.Часов = 0)
										Тогда
										Продолжить;
									КонецЕсли;
									
									Если ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные Тогда
										ЧасыСверхурочные = ЧасыСверхурочные + ВыборкаПоРаботнику.Часов;
									ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы Тогда
										ЧасыВечерние = ЧасыВечерние + ВыборкаПоРаботнику.Часов;
									ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные Тогда
										ЧасыНочные = ЧасыНочные + ВыборкаПоРаботнику.Часов;		
									ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВыходныеИПраздничные Тогда
										ЧасыВыходные = ЧасыВыходные + ВыборкаПоРаботнику.Часов;		
									КонецЕсли;	
									
									БуквенныйКод = ВыборкаПоРаботнику.ВидВремени.БуквенныйКод;
									СимволДня = СимволДня + "/" + БуквенныйКод;
									// Обработка внутрисменных отклонений
									Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> NULL 
										И ВыборкаПоРаботнику.ВидВремени.РабочееВремя
										И НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
										ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные) Тогда
										
										ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
										ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
										БуквенныйКод = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени.БуквенныйКод;
										ГрафаНеявок = ГрафаНеявок(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени);
										СимволДня = СимволДня + "/" + БуквенныйКод;
										ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов) + "/" + Строка(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
										
										Если ГрафаНеявок <> 0 Тогда
											Если СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок) = Неопределено Тогда
												СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок, 0);
												СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
											Иначе
												СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок,  ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(ГрафаНеявок));
											КонецЕсли;
										КонецЕсли;	
										
									ИначеЕсли НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
										ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные) 
										И ВыборкаПоРаботнику.ВидВремени.РабочееВремя Тогда
										
										ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
										ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
									ИначеЕсли ВыборкаПоРаботнику.ВидВремени.РабочееВремя Тогда
										ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
									КонецЕсли;
									
									Если (НЕ ВыборкаПоРаботнику.ВидВремени.РабочееВремя)
                                        И (ВыборкаПоРаботнику.ВидДня <> Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник)
										И (ВыборкаПоРаботнику.ВидВремени <> Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)Тогда
										ГрафаНеявок = ГрафаНеявок(ВыборкаПоРаботнику.ВидВремени);
										Если  СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок) = Неопределено Тогда
											СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок,  1);
											СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.НеотработаноЧасов);
										Иначе
											СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок,  1 + СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок));
											СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.НеотработаноЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(ГрафаНеявок));
										КонецЕсли;
									КонецЕсли;
									
								КонецЦикла;	
								СимволДня = Сред(СимволДня, 2);
								ОтработаноЧасовЗаДеньСтр = Сред(ОтработаноЧасовЗаДеньСтр, 2);
								ОбластьДанныхСтрока.Параметры["Символ"+НомерДня] = СимволДня;
								ОбластьДанныхСтрока.Параметры["ДополнительноеЗначение"+НомерДня] = Формат(ОтработаноЧасовЗаДеньСтр);
								
								
								Если ОтработаноЧасовЗаДень <> 0 Тогда
									Если ПерваяПоловина Тогда
										ДниПерваяПоловина = ДниПерваяПоловина + 1;
										ЧасыПерваяПоловина = ЧасыПерваяПоловина + ОтработаноЧасовЗаДень
									Иначе
										ДниВтораяПоловина = ДниВтораяПоловина + 1;
										ЧасыВтораяПоловина = ЧасыВтораяПоловина + ОтработаноЧасовЗаДень
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							//	заполняем раздел "Отработано за"
							ОбластьДанныхСтрока.Параметры.ДниЗаМесяц  = ДниПерваяПоловина + ДниВтораяПоловина;
							ОбластьДанныхСтрока.Параметры.ЧасыЗаМесяц = ЧасыПерваяПоловина + ЧасыВтораяПоловина;
							ОбластьДанныхСтрока.Параметры.Сверхурочные = ЧасыСверхурочные;
							ОбластьДанныхСтрока.Параметры.Вечерние = ЧасыВечерние;
							ОбластьДанныхСтрока.Параметры.Ночные = ЧасыНочные;
							ОбластьДанныхСтрока.Параметры.ВыходныеИПраздники = ЧасыВыходные;
							
							ДниВсего = ДниВсего + ДниПерваяПоловина + ДниВтораяПоловина; 
							ЧасыВсего = ЧасыВсего + ЧасыПерваяПоловина + ЧасыВтораяПоловина;
							СверхурочныеВсего = СверхурочныеВсего + ЧасыСверхурочные;
							ВечерниеВсего = ВечерниеВсего + ЧасыВечерние;
							НочныеВсего = НочныеВсего + ЧасыНочные;
							ВыходныеВсего = ВыходныеВсего + ЧасыВыходные;
							
							// заполняем раздел "Неявки по причинам"
							НеявкиВсегоДни = 0;
							НеявкиВсегоЧасы = 0;
							Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
								Если (Элемент.Значение > 0) Тогда
									ОбластьДанныхСтрока.Параметры["НеявкиДни" + Строка(Элемент.Ключ)] = Элемент.Значение;
									НеявкиВсегоДни = НеявкиВсегоДни + Элемент.Значение;
								КонецЕсли;
							КонецЦикла;
							Для каждого Элемент Из СоответствиеЦелодневныхНевыходовЧасы Цикл
								Если (Элемент.Значение > 0) Тогда
									ОбластьДанныхСтрока.Параметры["НеявкиЧасы" + Строка(Элемент.Ключ)] = Элемент.Значение;
									НеявкиВсегоЧасы = НеявкиВсегоЧасы + Элемент.Значение;
								КонецЕсли;
							КонецЦикла; 
							ОбластьДанныхСтрока.Параметры.НеявкиВсегоДни = НеявкиВсегоДни;
							ОбластьДанныхСтрока.Параметры.НеявкиВсегоЧасы = НеявкиВсегоЧасы;
							
							// Проверим, уместится ли строка на странице или надо открывать новую страницу
							Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхСтрока) Тогда
								ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
							КонецЕсли;
							
							ДокументРезультат.Вывести(ОбластьДанныхСтрока);
							
						КонецЦикла;
					КонецЦикла;
					
					ОбластьДанныхИтоги.Параметры.ДниЗаМесяцВсего = ДниВсего;
					ОбластьДанныхИтоги.Параметры.ЧасыЗаМесяцВсего = ЧасыВсего;
					ОбластьДанныхИтоги.Параметры.СверхурочныеВсего = СверхурочныеВсего;
					ОбластьДанныхИтоги.Параметры.ВечерниеВсего = ВечерниеВсего;
					ОбластьДанныхИтоги.Параметры.НочныеВсего = НочныеВсего;
					ОбластьДанныхИтоги.Параметры.ВыходныеИПраздникиВсего = ВыходныеВсего;
					Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхИтоги) Тогда
						ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
						ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьДанныхИтоги);
					
					Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПодвал) Тогда
						ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,);
						ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,),);
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьДанныхПодвал);
					Если ВыводитьПримечание Тогда
						Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПримечание) Тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;	
						ДокументРезультат.Вывести(ОбластьДанныхПримечание);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;	
			
		Иначе
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
				
				Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ЧасыВсего = 0;
				ДниВсего = 0;
				СверхурочныеВсего = 0;
				ВечерниеВсего = 0;
				НочныеВсего = 0;
				ВыходныеВсего = 0;
				
				НомерПП = 0;
				ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
				ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
				
				КодЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(ВыборкаПоРаботнику.Организация, КонецМесяца(ДатаНач), СписокПоказателей).КодПоЕДРПОУ;
				ОбластьДанныхШапка.Параметры.ЕДРПОУ = КодЕДРПОУ;
				
				ОбластьДанныхШапка.Параметры.ИмяПодразделения = "";
				ДокументРезультат.Вывести(ОбластьДанныхШапка);
				
				Если ВыводитьУсловныеОбозначения Тогда
					ДокументРезультат.Вывести(ОбластьДанныхОбозначения);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
						
						НомерПП = НомерПП + 1;
						
						ДниПерваяПоловина  = 0;
						ЧасыПерваяПоловина = 0;
						ДниВтораяПоловина  = 0;
						ЧасыВтораяПоловина = 0;
						
						ЧасыСверхурочные = 0;
						ЧасыВечерние = 0;
						ЧасыНочные = 0;
						ЧасыВыходные = 0;
							
						Для Сч = 1 По ПараметровВстроке Цикл
							ОбластьДанныхСтрока.Параметры.Установить(Сч - 1,""); 
						КонецЦикла;
						СоответствиеЦелодневныхНевыходов.Очистить();
						СоответствиеЦелодневныхНевыходовЧасы.Очистить();
						
						ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
						ОбластьДанныхСтрока.Параметры.ФИО = СокрП(ВыборкаПоРаботнику.СотрудникНаименование);
						Если ВыборкаПоРаботнику.Сотрудник.Физлицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
							ОбластьДанныхСтрока.Параметры.Пол = "Ч";
						ИначеЕсли ВыборкаПоРаботнику.Сотрудник.Физлицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
							ОбластьДанныхСтрока.Параметры.Пол = "Ж";
						Иначе
							ОбластьДанныхСтрока.Параметры.Пол = "";
						КонецЕсли;
						ОбластьДанныхСтрока.Параметры.Должность = ВыборкаПоРаботнику.Должность;
						ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
						
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ДатаТабеля") Цикл
							
							СимволДня = ""; ОтработаноЧасовЗаДень = 0;
							ОтработаноЧасовЗаДеньСтр = "";
							НомерДня = Строка(День(ВыборкаПоРаботнику.ДатаТабеля));
							ПерваяПоловина = День(ВыборкаПоРаботнику.ДатаТабеля) <= 15;
							УчитыватьВыходнойДень = Истина;
							
							Пока ВыборкаПоРаботнику.Следующий() Цикл
								Если  ВыборкаПоРаботнику.ВидВремени = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени Тогда
									ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
									Продолжить;
								КонецЕсли;
								
								//Если ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники Тогда
								//	УчитыватьВыходнойДень = Ложь;
								Если ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни И НЕ УчитыватьВыходнойДень Тогда
									Продолжить;
								КонецЕсли;
								
								Если ГрафаНеявок(ВыборкаПоРаботнику.ВидВремени)>2 Тогда
									//не рабочее время и не отпуск
									Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов = 0 И ВыборкаПоРаботнику.НеотработаноЧасов = 0 Тогда
										//это невыход в выходной - в отчете не отображаем
										Продолжить;
									КонецЕсли;
								ИначеЕсли ГрафаНеявок(ВыборкаПоРаботнику.ВидВремени)>0 Тогда
									//отпуск
									Если ВыборкаПоРаботнику.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
										//отпуск в праздник не считаем
										Продолжить;
									КонецЕсли;	
								КонецЕсли;
								
								Если ((ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные) или
									(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы) или 
									(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные) или
									(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВыходныеИПраздничные) или
									(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Работа)) И
									(ВыборкаПоРаботнику.Часов = 0)
									Тогда
									Продолжить;
								КонецЕсли;
								
								Если ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные Тогда
									ЧасыСверхурочные = ЧасыСверхурочные + ВыборкаПоРаботнику.Часов;
								ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы Тогда
									ЧасыВечерние = ЧасыВечерние + ВыборкаПоРаботнику.Часов;
								ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные Тогда
									ЧасыНочные = ЧасыНочные + ВыборкаПоРаботнику.Часов;		
								ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВыходныеИПраздничные Тогда
									ЧасыВыходные = ЧасыВыходные + ВыборкаПоРаботнику.Часов;		
								КонецЕсли;
								
								БуквенныйКод = ВыборкаПоРаботнику.ВидВремени.БуквенныйКод;
								СимволДня = СимволДня + "/" + БуквенныйКод;
								// Обработка внутрисменных отклонений
								Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> NULL 
									И ВыборкаПоРаботнику.ВидВремени.РабочееВремя
									И НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
									ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные) Тогда
									
									ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
									ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
									БуквенныйКод = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени.БуквенныйКод;
									СимволДня = СимволДня + "/" + БуквенныйКод;
									ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов) + "/" + Строка(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
																			
									ГрафаНеявок = ГрафаНеявок(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени);
									Если ГрафаНеявок <> 0 Тогда
										Если СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок) = Неопределено Тогда
											СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок, 0);
											СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
										Иначе
											СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок,  ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(ГрафаНеявок));
										КонецЕсли;
									КонецЕсли;	
									
								ИначеЕсли НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
									ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Ночные) 
									И ВыборкаПоРаботнику.ВидВремени.РабочееВремя Тогда
									
									ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
									ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
								ИначеЕсли ВыборкаПоРаботнику.ВидВремени.РабочееВремя Тогда
									ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
								КонецЕсли;
								
								Если (НЕ ВыборкаПоРаботнику.ВидВремени.РабочееВремя)
									И (ВыборкаПоРаботнику.ВидДня <> Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник)
									И (ВыборкаПоРаботнику.ВидВремени <> Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)Тогда
									ГрафаНеявок = ГрафаНеявок(ВыборкаПоРаботнику.ВидВремени);
									Если  СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок) = Неопределено Тогда
										СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок,  1);
										СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.НеотработаноЧасов);
									Иначе
										СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок,  1 + СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок));
										СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.НеотработаноЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(ГрафаНеявок));
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;	
							СимволДня = Сред(СимволДня, 2);
							ОтработаноЧасовЗаДеньСтр = Сред(ОтработаноЧасовЗаДеньСтр, 2);
							ОбластьДанныхСтрока.Параметры["Символ"+НомерДня] = СимволДня;
							ОбластьДанныхСтрока.Параметры["ДополнительноеЗначение"+НомерДня] = Формат(ОтработаноЧасовЗаДеньСтр);
							
							Если ОтработаноЧасовЗаДень <> 0 Тогда
								Если ПерваяПоловина Тогда
									ДниПерваяПоловина = ДниПерваяПоловина + 1;
									ЧасыПерваяПоловина = ЧасыПерваяПоловина + ОтработаноЧасовЗаДень
								Иначе
									ДниВтораяПоловина = ДниВтораяПоловина + 1;
									ЧасыВтораяПоловина = ЧасыВтораяПоловина + ОтработаноЧасовЗаДень
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						//	заполняем раздел "Отработано за"
						ОбластьДанныхСтрока.Параметры.ДниЗаМесяц  = ДниПерваяПоловина + ДниВтораяПоловина;
						ОбластьДанныхСтрока.Параметры.ЧасыЗаМесяц = ЧасыПерваяПоловина + ЧасыВтораяПоловина;
						ОбластьДанныхСтрока.Параметры.Сверхурочные = ЧасыСверхурочные;
						ОбластьДанныхСтрока.Параметры.Вечерние = ЧасыВечерние;
						ОбластьДанныхСтрока.Параметры.Ночные = ЧасыНочные;
						ОбластьДанныхСтрока.Параметры.ВыходныеИПраздники = ЧасыВыходные;
							
						ДниВсего = ДниВсего + ДниПерваяПоловина + ДниВтораяПоловина; 
						ЧасыВсего = ЧасыВсего + ЧасыПерваяПоловина + ЧасыВтораяПоловина;
						СверхурочныеВсего = СверхурочныеВсего + ЧасыСверхурочные;
						ВечерниеВсего = ВечерниеВсего + ЧасыВечерние;
						НочныеВсего = НочныеВсего + ЧасыНочные;
						ВыходныеВсего = ВыходныеВсего + ЧасыВыходные;
							
						// заполняем раздел "Неявки по причинам"
						НеявкиВсегоДни = 0;
						НеявкиВсегоЧасы = 0;
						Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
							Если (Элемент.Значение > 0) Тогда
								ОбластьДанныхСтрока.Параметры["НеявкиДни" + Строка(Элемент.Ключ)] = Элемент.Значение;
								НеявкиВсегоДни = НеявкиВсегоДни + Элемент.Значение;
							КонецЕсли;
						КонецЦикла;
						Для каждого Элемент Из СоответствиеЦелодневныхНевыходовЧасы Цикл
							Если (Элемент.Значение > 0) Тогда
								ОбластьДанныхСтрока.Параметры["НеявкиЧасы" + Строка(Элемент.Ключ)] = Элемент.Значение;
								НеявкиВсегоЧасы = НеявкиВсегоЧасы + Элемент.Значение;
							КонецЕсли;
						КонецЦикла; 
						ОбластьДанныхСтрока.Параметры.НеявкиВсегоДни = НеявкиВсегоДни;
						ОбластьДанныхСтрока.Параметры.НеявкиВсегоЧасы = НеявкиВсегоЧасы;
                        						
						// Проверим, уместится ли строка на странице или надо открывать новую страницу
						Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхСтрока) Тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						КонецЕсли;
						
						ДокументРезультат.Вывести(ОбластьДанныхСтрока);
						
					КонецЦикла;
				КонецЦикла;
				
				ОбластьДанныхИтоги.Параметры.ДниЗаМесяцВсего = ДниВсего;
				ОбластьДанныхИтоги.Параметры.ЧасыЗаМесяцВсего = ЧасыВсего;
				ОбластьДанныхИтоги.Параметры.СверхурочныеВсего = СверхурочныеВсего;
				ОбластьДанныхИтоги.Параметры.ВечерниеВсего = ВечерниеВсего;
				ОбластьДанныхИтоги.Параметры.НочныеВсего = НочныеВсего;
				ОбластьДанныхИтоги.Параметры.ВыходныеИПраздникиВсего = ВыходныеВсего;
				Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхИтоги) Тогда
					ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
					ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьДанныхИтоги);
				
				Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПодвал) Тогда
					ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,);
					ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,),);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьДанныхПодвал);
				Если ВыводитьПримечание Тогда
					Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПримечание) Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;	
					ДокументРезультат.Вывести(ОбластьДанныхПримечание);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Режим = "Бланк" Тогда 
		
		// Запрос сотрудников
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Код КАК ТабельныйНомер,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Имя = """"
		|				ТОГДА """"
		|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
		|				ТОГДА """"
		|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|		КОНЕЦ, РаботникиОрганизаций.Сотрудник.Физлицо.Наименование) КАК СотрудникНаименование,
		|	ДолжностиРаботников.ОбособленноеПодразделение КАК Организация,
		|	ПОДСТРОКА(ДолжностиРаботников.ОбособленноеПодразделение.НаименованиеПолное, 1, 250) КАК ИмяОрганизации,
		|	ДолжностиРаботников.Должность.Наименование КАК Должность,
		|	ДолжностиРаботников.ПодразделениеОрганизации,
		|	ДолжностиРаботников.ПодразделениеОрганизации.Наименование КАК ИмяПодразделения,
		|	Руководитель.Должность КАК ДолжностьРуководителя,
		|	ФИОРуководителя.Фамилия + "" "" + (ВЫРАЗИТЬ(ФИОРуководителя.Имя КАК СТРОКА(1))) + "". "" + (ВЫРАЗИТЬ(ФИОРуководителя.Отчество КАК СТРОКА(1))) + ""."" КАК ФИОРуководителя,		
		|	ЕСТЬNULL(РуководительКадровойСлужбыПодразделения.Должность, РуководительКадровойСлужбыОрганизации.Должность) КАК ДолжностьКадровика,
		|	ВЫБОР КОГДА ФИОКадровикаПодразделения.Фамилия ЕСТЬ NULL 
		|	ТОГДА ФИОКадровикаОрганизации.Фамилия + "" "" + (ВЫРАЗИТЬ(ФИОКадровикаОрганизации.Имя КАК СТРОКА(1))) + "". "" + (ВЫРАЗИТЬ(ФИОКадровикаОрганизации.Отчество КАК СТРОКА(1))) + "".""
		|	ИНАЧЕ ФИОКадровикаПодразделения.Фамилия + "" "" + (ВЫРАЗИТЬ(ФИОКадровикаПодразделения.Имя КАК СТРОКА(1))) + "". "" + (ВЫРАЗИТЬ(ФИОКадровикаПодразделения.Отчество КАК СТРОКА(1))) + "".""
		|	КОНЕЦ КАК ФИОКадровика,
		|	Ответственный.ФИООтветственного КАК ФИООтветственного,
		|	Ответственный.ДолжностьОтветственного КАК ДолжностьОтветственного
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоПериода, " + ?(ПустаяСтрока(УсловиеПоРаботникам),УсловиеНаОрганизации,УсловиеПоРаботникам) + ") КАК РаботникиОрганизацийСрезПоследних
		|	ГДЕ
		|		РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РаботникиОрганизаций.Сотрудник
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|	ГДЕ
		|		РаботникиОрганизаций.Период > &НачалоПериода
		|		И РаботникиОрганизаций.Период < &КонецПериода
		|		И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&КонецПериода,
		|		ФизЛицо В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				ИСТИНА" + ?(ПустаяСтрока(УсловиеПоРаботникам),?(ПустаяСтрока(УсловиеНаОрганизации),""," И " + УсловиеНаОрганизации)," И " + СтрЗаменить(УсловиеПоРаботникам,"Сотрудник","Ссылка")) + ")) КАК ФИОФизЛицСрезПоследних
		|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПериода, " + ?(ПустаяСтрока(УсловиеПоРаботникам),УсловиеНаОрганизации,УсловиеПоРаботникам) + ") КАК ДолжностиРаботников
		|		ПО ДолжностиРаботников.Сотрудник = РаботникиОрганизаций.Сотрудник
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК Руководитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОРуководителя
		|		ПО Руководитель.ФизическоеЛицо = ФИОРуководителя.ФизЛицо";
		Если ГруппироватьПодразделения тогда
			ЗапросТабель.Текст = ЗапросТабель.Текст + "
			|	ПО ДолжностиРаботников.ПодразделениеОрганизации = Руководитель.СтруктурнаяЕдиница";
		Иначе
			ЗапросТабель.Текст = ЗапросТабель.Текст + "
			|	ПО ДолжностиРаботников.ОбособленноеПодразделение = Руководитель.СтруктурнаяЕдиница";
		КонецЕсли;
		ЗапросТабель.Текст = ЗапросТабель.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаОрганизации
		|		ПО РуководительКадровойСлужбыОрганизации.ФизическоеЛицо = ФИОКадровикаОрганизации.ФизЛицо
		|	ПО ДолжностиРаботников.ОбособленноеПодразделение = РуководительКадровойСлужбыОрганизации.СтруктурнаяЕдиница
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыПодразделения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаПодразделения
		|		ПО РуководительКадровойСлужбыПодразделения.ФизическоеЛицо = ФИОКадровикаПодразделения.ФизЛицо
		|	ПО ДолжностиРаботников.ПодразделениеОрганизации = РуководительКадровойСлужбыПодразделения.СтруктурнаяЕдиница "+?(НЕ ГруппироватьПодразделения, " И ЛОЖЬ", "")+"
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Должность) КАК ДолжностьОтветственного,
		|		МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия + "" "" + (ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Имя КАК СТРОКА(1))) + "". "" + (ВЫРАЗИТЬ(ФИОФизЛицСрезПоследних.Отчество КАК СТРОКА(1))) + ""."") КАК ФИООтветственного
		|				ИЗ
		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПериода, Сотрудник.Физлицо = &Ответственный) КАК РаботникиОрганизацийСрезПоследних
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОФизЛицСрезПоследних
		|					ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо) КАК Ответственный
		|	ПО ИСТИНА

		|ГДЕ
		|	ИСТИНА" + УсловиеВЗапрос + "
		|	
		|УПОРЯДОЧИТЬ ПО
		|	Организация, " + ПорядокГруппировки + " СотрудникНаименование";
		
		ВыборкаПоРаботнику = ЗапросТабель.Выполнить().Выбрать();
		
		Если ГруппироватьПодразделения Тогда
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПодразделениеОрганизации") Цикл
					
					Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					НомерПП = 0;
					ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
					ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
					
					КодЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(ВыборкаПоРаботнику.Организация, КонецМесяца(ДатаНач), СписокПоказателей).КодПоЕДРПОУ;
					ОбластьДанныхШапка.Параметры.ЕДРПОУ = КодЕДРПОУ;
				
					ДокументРезультат.Вывести(ОбластьДанныхШапка);
					
					Если ВыводитьУсловныеОбозначения Тогда
						ДокументРезультат.Вывести(ОбластьДанныхОбозначения);
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
							
							НомерПП = НомерПП + 1;
							
							ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
							ОбластьДанныхСтрока.Параметры.ФИО = СокрП(ВыборкаПоРаботнику.СотрудникНаименование);
							Если ВыборкаПоРаботнику.Сотрудник.Физлицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
								ОбластьДанныхСтрока.Параметры.Пол = "Ч";
							ИначеЕсли ВыборкаПоРаботнику.Сотрудник.Физлицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
								ОбластьДанныхСтрока.Параметры.Пол = "Ж";
							Иначе
								ОбластьДанныхСтрока.Параметры.Пол = "";
							КонецЕсли;
							ОбластьДанныхСтрока.Параметры.Должность = ВыборкаПоРаботнику.Должность;
							ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
							
							// Проверим, уместится ли строка на странице или надо открывать новую страницу
							Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхСтрока) Тогда
								ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
							КонецЕсли;
							ДокументРезультат.Вывести(ОбластьДанныхСтрока);
							
						КонецЦикла; 
					КонецЦикла;
					
					Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхИтоги) Тогда
						ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
						ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьДанныхИтоги);

					Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПодвал) Тогда
						ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,);
						ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,),);
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьДанныхПодвал);
					Если ВыводитьПримечание Тогда
						Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПримечание) Тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;	
						ДокументРезультат.Вывести(ОбластьДанныхПримечание);
					КонецЕсли;

					
				КонецЦикла; 
			КонецЦикла; 
		Иначе
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
				
				Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				НомерПП = 0;
				ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
				ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
				
				КодЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(ВыборкаПоРаботнику.Организация, КонецМесяца(ДатаНач), СписокПоказателей).КодПоЕДРПОУ;
				ОбластьДанныхШапка.Параметры.ЕДРПОУ = КодЕДРПОУ;
				
				ОбластьДанныхШапка.Параметры.ИмяПодразделения = "";
				ДокументРезультат.Вывести(ОбластьДанныхШапка);
				Если ВыводитьУсловныеОбозначения Тогда
					ДокументРезультат.Вывести(ОбластьДанныхОбозначения);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
						
						НомерПП = НомерПП + 1;
						
						ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
						ОбластьДанныхСтрока.Параметры.ФИО = СокрП(ВыборкаПоРаботнику.СотрудникНаименование);
						Если ВыборкаПоРаботнику.Сотрудник.Физлицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
							ОбластьДанныхСтрока.Параметры.Пол = "Ч";
						ИначеЕсли ВыборкаПоРаботнику.Сотрудник.Физлицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
							ОбластьДанныхСтрока.Параметры.Пол = "Ж";
						Иначе
							ОбластьДанныхСтрока.Параметры.Пол = "";
						КонецЕсли;
						ОбластьДанныхСтрока.Параметры.Должность = ВыборкаПоРаботнику.Должность;
						ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
						
						// Проверим, уместится ли строка на странице или надо открывать новую страницу
						Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхСтрока) Тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						КонецЕсли;
						ДокументРезультат.Вывести(ОбластьДанныхСтрока);
						
					КонецЦикла; 
				КонецЦикла;
				
				Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхИтоги) Тогда
						ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
						ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьДанныхИтоги);

				Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПодвал) Тогда
					ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,);
					ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,),);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьДанныхПодвал);
				Если ВыводитьПримечание Тогда
					Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПримечание) Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;	
					ДокументРезультат.Вывести(ОбластьДанныхПримечание);
				КонецЕсли;

				
			КонецЦикла; 
		КонецЕсли;
		
		Если ДокументРезультат.ВысотаТаблицы = 0 Тогда
			
			Если ОтборОрганизации и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
				ОбластьДанныхШапка.Параметры.ИмяОрганизации = Организация.НаименованиеПолное;
				КодЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, КонецМесяца(ДатаНач), СписокПоказателей).КодПоЕДРПОУ;
				ОбластьДанныхШапка.Параметры.ЕДРПОУ = КодЕДРПОУ;
				
			КонецЕсли;
			Если ОтборПодразделения и ТипЗнч(Организация) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				ОбластьДанныхШапка.Параметры.ИмяПодразделения = Подразделение.Наименование;
			КонецЕсли;
			
			ОбластьДанныхСтрока.Параметры.ФИО = " ";
			ОбластьДанныхСтрока.Параметры.Пол = "";
			ОбластьДанныхСтрока.Параметры.Должность = " ";
			ВыводимыеОбласти = Новый Массив();
			ВыводимыеОбласти.Добавить(ОбластьДанныхСтрока);
			ВыводимыеОбласти.Добавить(ОбластьДанныхПодвал);
			ДокументРезультат.Вывести(ОбластьДанныхШапка);
			
			Если ВыводитьУсловныеОбозначения Тогда
				ДокументРезультат.Вывести(ОбластьДанныхОбозначения);
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
			Для Сч = 1 По ПараметровВстроке Цикл
				ОбластьДанныхСтрока.Параметры.Установить(Сч - 1,""); 
			КонецЦикла;
			Пока ДокументРезультат.ПроверитьВывод(ВыводимыеОбласти) Цикл
				ДокументРезультат.Вывести(ОбластьДанныхСтрока);
			КонецЦикла;
			ДокументРезультат.Вывести(ОбластьДанныхПодвал);
			Если ВыводитьПримечание Тогда
				Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПримечание) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;	
				ДокументРезультат.Вывести(ОбластьДанныхПримечание);
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НП = Новый НастройкаПериода;


#КонецЕсли

