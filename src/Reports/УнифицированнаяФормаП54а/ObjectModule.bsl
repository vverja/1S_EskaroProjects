#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем НП Экспорт;  				  // Настройка периода


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

// Функция формирует основной запрос по сбору данных для расчетных листков.
//
// Параметры
//
// Возвращаемое значение:
//   РезультатЗапроса   – результат запроса.
//
Функция СформироватьЗапрос()

	ОтборРаботника     = (ТипЗнч(СохраненныеНастройки) = Тип("Структура"));
	ОтборОрганизации   = ОтборРаботника;
	ОтборПодразделения = ОтборРаботника;
	
	Если ОтборРаботника Тогда
		
		ОтборОрганизации		  = СохраненныеНастройки.ФлажокНастройкиОрганизация;
		ВидСравненияОрганизации	  = СохраненныеНастройки.ПолеВидаСравненияОрганизация;
		Организация				  = СохраненныеНастройки.ПолеНастройкиОрганизация;
		ОтборПодразделения		  = СохраненныеНастройки.ФлажокНастройкиПодразделение;
		ВидСравненияПодразделения = СохраненныеНастройки.ПолеВидаСравненияПодразделение;
		Подразделение			  = СохраненныеНастройки.ПолеНастройкиПодразделение;
		ОтборРаботника			  = СохраненныеНастройки.ФлажокНастройкиРаботник;
		ВидСравненияРаботника	  = СохраненныеНастройки.ПолеВидаСравненияРаботник;
		Работник				  = СохраненныеНастройки.ПолеНастройкиРаботник;
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",             ДатаНач);
	Запрос.УстановитьПараметр("КонПериода",             КонецДня(ДатаКон));
	
	Запрос.УстановитьПараметр("СпособРасчетаВзносы",      Перечисления.СпособыРасчетаОплатыТруда.Взносы);
	Запрос.УстановитьПараметр("ВидДвиженияРасход",        ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ПарамПочтовыйСбор",        ПланыВидовРасчета.УдержанияОрганизаций.ПочтовыйСбор);
	Запрос.УстановитьПараметр("ПустойИсполнительныйЛист", Документы.ИсполнительныйЛист.ПустаяСсылка());
	
	МассивРасчетов = Новый Массив;
	МассивРасчетов.Добавить(Неопределено);
	МассивРасчетов.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());

	Запрос.УстановитьПараметр("ПустойВидРасчета",       МассивРасчетов);
	Запрос.УстановитьПараметр("ПарамРебенок", Справочники.СтепениРодстваФизЛиц.Ребенок);
	СписокСчета = Новый СписокЗначений;
	СписокСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате);
	СписокСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам);
	Запрос.УстановитьПараметр("ПарамСчетаЗарплата", СписокСчета);
	
	МассивОтпусков = Новый Массив;
	МассивОтпусков.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный);
	МассивОтпусков.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп);
	МассивОтпусков.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет);
	МассивОтпусков.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
	МассивОтпусков.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты);
	Запрос.УстановитьПараметр("ПарамВидРасчетаОтпуска", МассивОтпусков);
	Запрос.УстановитьПараметр("ПарамКодОперацииВыплаты", ПроведениеРасчетов.ПолучитьСписокВариантовВыплатЗарплаты());
	
	
	Если ОтборОрганизации Тогда
		
		Запрос.УстановитьПараметр("ПарамОрганизация", Организация);
		ВидСравненияОрганизация = УправлениеОтчетами.ПолучитьВидСравненияСтрокой(ВидСравненияОрганизации)
		
	КонецЕсли;  
	
	Если ОтборПодразделения Тогда
		
		ВидСравненияПодразделение = УправлениеОтчетами.ПолучитьВидСравненияСтрокой(ВидСравненияПодразделения)
		
	КонецЕсли;  
	
	Если ОтборРаботника Тогда
		
		Запрос.УстановитьПараметр("ПарамФизЛицо", Работник);
	    ВидСравненияРаботник = УправлениеОтчетами.ПолучитьВидСравненияСтрокой(ВидСравненияРаботника)
		
	Иначе
		//Определение списка работников, попадающих в отчетный период
		
		ЗапросФЗ       = Новый Запрос;
		ЗапросФЗ.УстановитьПараметр("НачПериода",      ДатаНач);
		ЗапросФЗ.УстановитьПараметр("КонПериода",      КонецДня(ДатаКон));
		ЗапросФЗ.УстановитьПараметр("ПарамНеРаботает", Перечисления.СостоянияРаботникаОрганизации.НеРаботает);
		
		МассивВидЗанятости = Новый Массив(2);
		МассивВидЗанятости[0] = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
		МассивВидЗанятости[1] = Перечисления.ВидыЗанятостиВОрганизации.Совместительство;
		ЗапросФЗ.УстановитьПараметр("ПарамОсновнойСотрудник", МассивВидЗанятости);
		
		ЗапросФЗ.УстановитьПараметр("ПарамОрганизация",   Организация);
		ЗапросФЗ.УстановитьПараметр("ПарамПодразделение", Подразделение);
		
		ЗапросФЗ.Текст ="
						|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
						|	РаботникиОрганизаций.Сотрудник КАК Сотрудник
		                |ИЗ
		                |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонПериода,
						|	"  + ?(ОтборОрганизации, " Организация " + ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
						|		)КАК РаботникиОрганизаций
		                |
		                |ГДЕ РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 
						|	" + ?(ОтборПодразделения, " И РаботникиОрганизаций.ПодразделениеОрганизации "	+ ВидСравненияПодразделение + " (&ПарамПодразделение)", "") + "	
		                |
						|ОБЪЕДИНИТЬ
						|ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	РаботникиОрганизаций.Сотрудник КАК сотрудник
		                |
		                |ИЗ	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		                |
		                |ГДЕ	РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 	
						|		И НАЧАЛОПЕРИОДА( РаботникиОрганизаций.Период, МЕСЯЦ ) = &НачПериода
		                |	" + ?(ОтборОрганизации, " И РаботникиОрганизаций.Организация " + ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
		                |   " + ?(ОтборПодразделения, " И РаботникиОрганизаций.ПодразделениеОрганизации " + ВидСравненияПодразделение + " (&ПарамПодразделение)", "")+ "	
						|"; 
										
		Запрос.УстановитьПараметр("ПарамФизЛицо", ЗапросФЗ.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		ВидСравненияРаботник = "В";
		
	КонецЕсли;
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Организация                        КАК Организация,
	|	Данные.Сотрудник                          КАК ФизЛицо,
	|	Данные.ВидДвижения                        КАК ВидДвижения,
	|	Данные.Порядок1                           КАК Порядок1,
	|	Данные.Порядок2                           КАК Порядок2,
	|	Данные.Порядок3                           КАК Порядок3,
	|	Данные.Поле1                              КАК Поле1,
	|	Данные.Поле2                              КАК Поле2,
	|	Данные.Поле3                              КАК Поле3,
	|	Данные.Поле4                              КАК Поле4,
	|	Данные.Поле5                              КАК Поле5,
	|	Данные.Поле6                              КАК Поле6,
	|	ВЫРАЗИТЬ(Данные.Организация.НаименованиеПолное
	|	                КАК СТРОКА(1000))         КАК ОрганизацияНаименованиеПолное,
	|	Данные.Сотрудник.ФизЛицо.ДатаРождения               КАК ДатаРождения,
	|	СемейноеПоложениеФизЛиц.СемейноеПоложение КАК СемейноеПоложение,
	|	СоставСемьиФизЛица.КвоДетей               КАК КвоДетей,
	|	СоставСемьиФизЛица.КвоИждивенцев          КАК КвоИждивенцев,
	|	ВЫБОР 
	|		КОГДА (ФИОФизЛиц.Фамилия) ЕСТЬ NULL ТОГДА Данные.Сотрудник.ФизЛицо.Наименование 
	|		ИНАЧЕ """" + ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество 
	|	КОНЕЦ                                     КАК ФИО,
		//Подписи ответственных
	|	ОтветственныеЛицаДиректор.ФизическоеЛицо.Наименование 	КАК ФИОДиректор,
	|	ОтветственныеЛицаГлБух.ФизическоеЛицо.Наименование 	КАК ФИОГлБух

	|ИЗ
	|	(ВЫБРАТЬ
	|		//""0.Прием на работу и 1.перемещение""                    КАК Комментарий,
	|		РаботникиОрганизаций.Организация                           КАК Организация,
	|		РаботникиОрганизаций.Сотрудник                             КАК Сотрудник,
	|		ВЫБОР 
	|			КОГДА РаботникиОрганизаций.Регистратор ССЫЛКА Документ.ПриемНаРаботуВОрганизацию
	|				ТОГДА 0 
	|			ИНАЧЕ 1 
	|		КОНЕЦ                                                      КАК ВидДвижения,
	|		РаботникиОрганизаций.Период                                КАК Порядок1,
	|		РаботникиОрганизаций.Регистратор.Номер                     КАК Порядок2,
	|		РаботникиОрганизаций.Регистратор                           КАК Порядок3,
	|		РаботникиОрганизаций.ПодразделениеОрганизации.Наименование КАК Поле1,
	|		РаботникиОрганизаций.Должность                             КАК Поле2,
	|		РаботникиОрганизаций.Должность.Категория.Наименование      КАК Поле3,
	|		РаботникиОрганизаций.Сотрудник.Код                         КАК Поле4,
	|		ПлановыеНачисления.Оклад                                   КАК Поле5,
	|		ПлановыеНачисления.Валюта                                  КАК Поле6
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ 
	|			(ВЫБРАТЬ
	|				ПлановыеНачисления.Сотрудник           КАК Сотрудник,
	|				ПлановыеНачисления.Регистратор         КАК Регистратор,
	|				ПлановыеНачисления.НомерСтроки         КАК НомерСтроки,
	|				ПлановыеНачисления.Показатель1         КАК Оклад,
	|				ПлановыеНачисления.Валюта1 		       КАК Валюта
	|			ИЗ
	|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|			
	|			ГДЕ
	|				ПлановыеНачисления.ВидРасчетаИзмерение В(&ПустойВидРасчета) И
	|				(ПлановыеНачисления.Регистратор ССЫЛКА Документ.КадровоеПеремещениеОрганизаций) И
	|				ПлановыеНачисления.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	                + ?(ОтборОрганизации, " И ПлановыеНачисления.Организация "
					+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + ") КАК ПлановыеНачисления
	|			ПО РаботникиОрганизаций.Сотрудник   = ПлановыеНачисления.Сотрудник И
	|			   РаботникиОрганизаций.Регистратор = ПлановыеНачисления.Регистратор И
	|			   РаботникиОрганизаций.НомерСтроки = ПлановыеНачисления.НомерСтроки
	|	
	|	ГДЕ
	|		РаботникиОрганизаций.Период < &КонПериода И
	|		(РаботникиОрганизаций.Регистратор ССЫЛКА Документ.ПриемНаРаботуВОрганизацию ИЛИ
	|		РаботникиОрганизаций.Регистратор ССЫЛКА Документ.КадровоеПеремещениеОрганизаций) И
	|		РаботникиОрганизаций.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И РаботникиОрганизаций.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""2.Отпуска"",
	|		ОтпускаОрганизаций.Ссылка.Организация,
	|		ОтпускаОрганизаций.Сотрудник,
	|		2,
	|		ОтпускаОрганизаций.Ссылка.Дата,
	|		ОтпускаОрганизаций.ДатаНачала,
	|		ОтпускаОрганизаций.ДатаОкончания,
	|		ОтпускаОрганизаций.ВидОтпуска,
	|		ОтпускаОрганизаций.РабочийГодС,
	|		ОтпускаОрганизаций.РабочийГодПо,
	|		ОтпускаОрганизаций.Ссылка,
	|		ОтпускаОрганизаций.Ссылка.Номер,
	|		NULL
	|	ИЗ
	|		Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизаций
	|	
	|	ГДЕ
	|		ОтпускаОрганизаций.Ссылка.Дата < &КонПериода И
	|		(ОтпускаОрганизаций.Ссылка.Проведен) И
	|		ОтпускаОрганизаций.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И ОтпускаОрганизаций.Ссылка.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""3.Отчисления по исполнительным листам"",
	|		ПлановыеУдержания.Организация,
	|		ПлановыеУдержания.Сотрудник,
	|		3,
	|		ПлановыеУдержания.ДокументОснование.ДатаНачала,
	|		ПлановыеУдержания.ДокументОснование.ДатаОкончания,
	|		ПлановыеУдержания.ДокументОснование,
	|		ПлановыеУдержания.ДокументОснование.ТарифПочты,
	|		ПлановыеУдержания.ВидРасчета.Наименование,
	|		ПлановыеУдержания.Показатель1,
	|		ПлановыеУдержания.ДокументОснование.Предел,
	|		ПлановыеУдержания.ДокументОснование.СпособРасчетаИЛ,
	|		ПлановыеУдержания.Валюта1.Наименование
	|	ИЗ
	|		РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(&КонПериода,
	|		                ВидРасчета <> &ПарамПочтовыйСбор И ДокументОснование <> &ПустойИсполнительныйЛист И
	|		                Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	                        + ?(ОтборОрганизации, " И Организация "
							+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|						) КАК ПлановыеУдержания
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		//""4.Отчисление по погашениям займов"",
	|		ДоговорЗайма.Организация,
	|		ДоговорЗайма.Сотрудник,
	|		4,
	|		ДоговорЗайма.НачалоПогашения,
	|		ДоговорЗайма.СрокПогашения,
	|		NULL,
	|		ДоговорЗайма.Ссылка,
	|		""Погашення позик"",
	|		ДоговорЗайма.СуммаЗайма,
	|		ДоговорЗайма.ПроцентЗаПользованиеЗаймом,
	|		ДоговорЗайма.ПорядокПогашенияЗайма,
	|		ДоговорЗайма.ВалютаДокумента.Наименование
	|	ИЗ
	|		Документ.ДоговорЗаймаСРаботником КАК ДоговорЗайма
	|	
	|	ГДЕ
	|		ДоговорЗайма.Дата <= &КонПериода И
	|		(ДоговорЗайма.ОтражатьВБухгалтерскомУчете) И
	|		(ДоговорЗайма.Проведен) И
	|		ДоговорЗайма.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И ДоговорЗайма.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 1.Остатки"",
	|		ВзаиморасчетыСРаботниками.Организация,
	|		ВзаиморасчетыСРаботниками.Сотрудник,
	|		5,
	|		&НачПериода,
	|		1,
	|		NULL,
	|		NULL,
	|		СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачПериода,
	|		                  СчетУчета в (&ПарамСчетаЗарплата) И
	|		                  Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	                          + ?(ОтборОрганизации, " И Организация "
							  + ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|						  ) КАК ВзаиморасчетыСРаботниками
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзаиморасчетыСРаботниками.Организация,
	|		ВзаиморасчетыСРаботниками.Сотрудник
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 2.Основные начисления Итоги"",
	|		ОсновныеНачисления.Организация,
	|		ОсновныеНачисления.Сотрудник,
	|		5,
	|		NULL,
	|		2,
	|		ОсновныеНачисления.ВидРасчета.Код,
	|		ОсновныеНачисления.ВидРасчета.Наименование,
	|		СУММА(ОсновныеНачисления.Результат),
	|		МАКСИМУМ(ОсновныеНачисления.ОтработаноДней),
	|		МАКСИМУМ(ОсновныеНачисления.ОтработаноЧасов),
	|		NULL,
	|		ОсновныеНачисления.ВидРасчета
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|	
	|	ГДЕ
	|		ОсновныеНачисления.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
	|		ОсновныеНачисления.ВидРасчета.СчетУчета в (&ПарамСчетаЗарплата) И
	|		ОсновныеНачисления.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И ОсновныеНачисления.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОсновныеНачисления.Организация,
	|		ОсновныеНачисления.Сотрудник,
	|		ОсновныеНачисления.ВидРасчета.Код,
	|		ОсновныеНачисления.ВидРасчета.Наименование,
	|		ОсновныеНачисления.ВидРасчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 2.Основные начисления"",
	|		ОсновныеНачисления.Организация,
	|		ОсновныеНачисления.Сотрудник,
	|		5,
	|		ОсновныеНачисления.ПериодРегистрации,
	|		2,
	|		ОсновныеНачисления.ВидРасчета.Код,
	|		ОсновныеНачисления.ВидРасчета.Наименование,
	|		СУММА(ОсновныеНачисления.Результат),
	|		МАКСИМУМ(ОсновныеНачисления.ОтработаноДней),
	|		МАКСИМУМ(ОсновныеНачисления.ОтработаноЧасов),
	|		NULL,
	|		ОсновныеНачисления.ВидРасчета
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|	
	|	ГДЕ
	|		ОсновныеНачисления.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
	|		ОсновныеНачисления.ВидРасчета.СчетУчета в (&ПарамСчетаЗарплата) И
	|		ОсновныеНачисления.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И ОсновныеНачисления.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОсновныеНачисления.Организация,
	|		ОсновныеНачисления.Сотрудник,
	|		ОсновныеНачисления.ПериодРегистрации,
	|		ОсновныеНачисления.ВидРасчета.Код,
	|		ОсновныеНачисления.ВидРасчета.Наименование,
	|		ОсновныеНачисления.ВидРасчета
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 4.Удержания Итоги"",
	|		Удержания.Организация,
	|		Удержания.Сотрудник,
	|		5,
	|		NULL,
	|		4,
	|		Удержания.ВидРасчета.Код,
	|		Удержания.ВидРасчета.Наименование,
	|		СУММА(Удержания.Результат),
	|		NULL,
	|		NULL,
	|		NULL,
	|		Удержания.ВидРасчета
	|	ИЗ
	|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
	|	
	|	ГДЕ
	|		Удержания.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
	|		Удержания.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И Удержания.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Удержания.Организация,
	|		Удержания.Сотрудник,
	|		Удержания.ВидРасчета.Код,
	|		Удержания.ВидРасчета.Наименование,
	|		Удержания.ВидРасчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 4.Удержания"",
	|		Удержания.Организация,
	|		Удержания.Сотрудник,
	|		5,
	|		Удержания.ПериодРегистрации,
	|		4,
	|		Удержания.ВидРасчета.Код,
	|		Удержания.ВидРасчета.Наименование,
	|		СУММА(Удержания.Результат),
	|		NULL,
	|		NULL,
	|		NULL,
	|		Удержания.ВидРасчета
	|	ИЗ
	|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
	|	
	|	ГДЕ
	|		Удержания.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
	|		Удержания.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И Удержания.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Удержания.Организация,
	|		Удержания.Сотрудник,
	|		Удержания.ПериодРегистрации,
	|		Удержания.ВидРасчета.Код,
	|		Удержания.ВидРасчета.Наименование,
	|		Удержания.ВидРасчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 5.НДФЛ Итоги"",
	|		ВзаиморасчетыПоНДФЛ.Организация,
	|		ВзаиморасчетыПоНДФЛ.Сотрудник,
	|		5,
	|		NULL,
	|		5,
	|		0,
	|		""ПДФО"",
	|		СУММА(ВзаиморасчетыПоНДФЛ.НалогПриход),
	|		NULL,
	|		NULL,
	|		NULL,
	|		""ПДФО""
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыПоНДФЛ.Обороты(&НачПериода, &КонПериода,
	|		                  Месяц,
	|		                  Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	                          + ?(ОтборОрганизации, " И Организация "
							  + ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|						  ) КАК ВзаиморасчетыПоНДФЛ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзаиморасчетыПоНДФЛ.Организация,
	|		ВзаиморасчетыПоНДФЛ.Сотрудник
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 5.НДФЛ"",
	|		ВзаиморасчетыПоНДФЛ.Организация,
	|		ВзаиморасчетыПоНДФЛ.Сотрудник,
	|		5,
	|		ВзаиморасчетыПоНДФЛ.Период,
	|		5,
	|		0,
	|		""ПДФО"",
	|		СУММА(ВзаиморасчетыПоНДФЛ.НалогПриход),
	|		NULL,
	|		NULL,
	|		NULL,
	|		""ПДФО""
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыПоНДФЛ.Обороты(&НачПериода, &КонПериода,
	|		                  Месяц, 
	|		                  Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	                          + ?(ОтборОрганизации, " И Организация "
							  + ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|						  ) КАК ВзаиморасчетыПоНДФЛ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзаиморасчетыПоНДФЛ.Организация,
	|		ВзаиморасчетыПоНДФЛ.Сотрудник,
	|		ВзаиморасчетыПоНДФЛ.Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 6.Взносы в фонды Итоги"",
	|		ВзносыВФонды.Организация,
	|		ВзносыВФонды.Сотрудник,
	|		5,
	|		NULL,
	|		6,
	|		ВзносыВФонды.ВидРасчета.Код,
	|		ВзносыВФонды.ВидРасчета.Наименование,
	|		СУММА(ВзносыВФонды.Результат),
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВзносыВФонды.ВидРасчета
	|	ИЗ
	|		РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
	|	
	|	ГДЕ
	|		ВзносыВФонды.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
	|		ВзносыВФонды.ВидРасчета.СпособРасчета = &СпособРасчетаВзносы И
	|		ВзносыВФонды.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И ВзносыВФонды.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	                                                     
	|	СГРУППИРОВАТЬ ПО
	|		ВзносыВФонды.Организация,
	|		ВзносыВФонды.Сотрудник,
	|		ВзносыВФонды.ВидРасчета.Код,
	|		ВзносыВФонды.ВидРасчета.Наименование,
	|		ВзносыВФонды.ВидРасчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 6.Взносы в фонды"",
	|		ВзносыВФонды.Организация,
	|		ВзносыВФонды.Сотрудник,
	|		5,
	|		ВзносыВФонды.ПериодРегистрации,
	|		6,
	|		ВзносыВФонды.ВидРасчета.Код,
	|		ВзносыВФонды.ВидРасчета.Наименование,
	|		СУММА(ВзносыВФонды.Результат),
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВзносыВФонды.ВидРасчета
	|	ИЗ
	|		РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
	|	
	|	ГДЕ
	|		ВзносыВФонды.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
	|		ВзносыВФонды.ВидРасчета.СпособРасчета = &СпособРасчетаВзносы И
	|		ВзносыВФонды.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И ВзносыВФонды.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзносыВФонды.Организация,
	|		ВзносыВФонды.Сотрудник,
	|		ВзносыВФонды.ПериодРегистрации,
	|		ВзносыВФонды.ВидРасчета.Код,
	|		ВзносыВФонды.ВидРасчета.Наименование,
	|		ВзносыВФонды.ВидРасчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 7.Погашение займов Итоги"",
	|		ПогашениеЗаймов.Организация,
	|		ПогашениеЗаймов.Сотрудник,
	|		5,
	|		NULL,
	|		7,
	|		0,
	|		""Погашення позики"",
	|		СУММА(ПогашениеЗаймов.ОсновнойДолг + ПогашениеЗаймов.Проценты),
	|		NULL,
	|		NULL,
	|		NULL,
	|		""Позика""
	|	ИЗ
	|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймов
	|	
	|	ГДЕ
	|		ПогашениеЗаймов.Период МЕЖДУ &НачПериода И &КонПериода И
	|		ПогашениеЗаймов.ВидДвижения = &ВидДвиженияРасход И
	|		(ПогашениеЗаймов.Регистратор ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций ИЛИ
	|		ПогашениеЗаймов.Регистратор.СторнируемыйДокумент 
	|		                ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций) И
	|		ПогашениеЗаймов.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И ПогашениеЗаймов.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПогашениеЗаймов.Организация,
	|		ПогашениеЗаймов.Сотрудник
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 7.Погашение займов"",
	|		ПогашениеЗаймов.Организация,
	|		ПогашениеЗаймов.Сотрудник,
	|		5,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймов.Период, МЕСЯЦ),
	|		7,
	|		0,
	|		""Погашення позики"",
	|		СУММА(ПогашениеЗаймов.ОсновнойДолг + ПогашениеЗаймов.Проценты),
	|		NULL,
	|		NULL,
	|		NULL,
	|		""Позика""
	|	ИЗ
	|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймов
	|	
	|	ГДЕ
	|		ПогашениеЗаймов.Период МЕЖДУ &НачПериода И &КонПериода И
	|		ПогашениеЗаймов.ВидДвижения = &ВидДвиженияРасход И
	|		(ПогашениеЗаймов.Регистратор ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций ИЛИ
	|		ПогашениеЗаймов.Регистратор.СторнируемыйДокумент 
	|		                ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций) И
	|		ПогашениеЗаймов.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И ПогашениеЗаймов.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПогашениеЗаймов.Организация,
	|		ПогашениеЗаймов.Сотрудник,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймов.Период, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 8.Выплаты Итоги"",
	|		ВзаиморасчетыСРаботниками.Организация,
	|		ВзаиморасчетыСРаботниками.Сотрудник,
	|		5,
	|		NULL,
	|		8,
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер 
	|				ТОГДА 0 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА 1 
	|			ИНАЧЕ 2 
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ТОГДА ""Виплата через касу"" 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА ""Виплата через банк"" 
	|			ИНАЧЕ ВзаиморасчетыСРаботниками.КодОперации 
	|		КОНЕЦ,
	|		СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетов),
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер 
	|				ТОГДА 0 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА 1 
	|			ИНАЧЕ ВзаиморасчетыСРаботниками.КодОперации 
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботниками
	|	
	|	ГДЕ
	|		ВзаиморасчетыСРаботниками.Период МЕЖДУ &НачПериода И &КонПериода И
	|		ВзаиморасчетыСРаботниками.КодОперации В(&ПарамКодОперацииВыплаты) И
	|		ВзаиморасчетыСРаботниками.СчетУчета в (&ПарамСчетаЗарплата) И
	|		ВзаиморасчетыСРаботниками.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И ВзаиморасчетыСРаботниками.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзаиморасчетыСРаботниками.Организация,
	|		ВзаиморасчетыСРаботниками.Сотрудник,
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер 
	|				ТОГДА 0 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА 1 
	|			ИНАЧЕ 2 
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер 
	|				ТОГДА ""Виплата через касу"" 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА ""Виплата через банк"" 
	|			ИНАЧЕ ВзаиморасчетыСРаботниками.КодОперации 
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер 
	|				ТОГДА 0 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА 1 
	|			ИНАЧЕ ВзаиморасчетыСРаботниками.КодОперации 
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		//""5.Дополнение; 8.Выплаты"",
	|		ВзаиморасчетыСРаботниками.Организация,
	|		ВзаиморасчетыСРаботниками.Сотрудник,
	|		5,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.Период, МЕСЯЦ),
	|		8,
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер 
	|				ТОГДА 0 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА 1 
	|			ИНАЧЕ 2 
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ТОГДА ""Виплата через касу"" 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА ""Виплата через банк"" 
	|			ИНАЧЕ ВзаиморасчетыСРаботниками.КодОперации 
	|		КОНЕЦ,
	|		СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетов),
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер 
	|				ТОГДА 0 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА 1 
	|			ИНАЧЕ ВзаиморасчетыСРаботниками.КодОперации 
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботниками
	|	
	|	ГДЕ
	|		ВзаиморасчетыСРаботниками.Период МЕЖДУ &НачПериода И &КонПериода И
	|		ВзаиморасчетыСРаботниками.КодОперации В (&ПарамКодОперацииВыплаты) И
	|		ВзаиморасчетыСРаботниками.СчетУчета В (&ПарамСчетаЗарплата) И
	|		ВзаиморасчетыСРаботниками.Сотрудник " + ВидСравненияРаботник + " (&ПарамФизЛицо)"
	        + ?(ОтборОрганизации, " И ВзаиморасчетыСРаботниками.Организация "
			+ ВидСравненияОрганизация + " (&ПарамОрганизация)", "") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзаиморасчетыСРаботниками.Организация,
	|		ВзаиморасчетыСРаботниками.Сотрудник,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.Период, МЕСЯЦ),
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер 
	|				ТОГДА 0 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА 1 
	|			ИНАЧЕ 2 
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер 
	|				ТОГДА ""Виплата через касу"" 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА ""Виплата через банк"" 
	|			ИНАЧЕ ВзаиморасчетыСРаботниками.КодОперации 
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер 
	|				ТОГДА 0 
	|			КОГДА ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее 
	|				ТОГДА 1 
	|			ИНАЧЕ ВзаиморасчетыСРаботниками.КодОперации 
	|		КОНЕЦ) КАК Данные
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(&КонПериода) КАК СемейноеПоложениеФизЛиц
	|		ПО Данные.Сотрудник.ФизЛицо = СемейноеПоложениеФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ
	|			СоставСемьиФизЛица.Ссылка КАК ФизЛицо,
	|			СУММА(ВЫБОР
	|			      	КОГДА СоставСемьиФизЛица.СтепеньРодства = &ПарамРебенок 
	|			      		ТОГДА 1 
	|			      	ИНАЧЕ 0 
	|			      КОНЕЦ) КАК КвоДетей,
	|			СУММА(ВЫБОР 
	|			      	КОГДА СоставСемьиФизЛица.Иждивенец 
	|			      		ТОГДА 1 
	|			      	ИНАЧЕ 0 
	|			      КОНЕЦ) КАК КвоИждивенцев
	|		ИЗ
	|			Справочник.ФизическиеЛица.СоставСемьи КАК СоставСемьиФизЛица
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СоставСемьиФизЛица.Ссылка) КАК СоставСемьиФизЛица
	|		ПО Данные.Сотрудник.ФизЛицо = СоставСемьиФизЛица.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонПериода,
	|		                                 ФизЛицо " + ВидСравненияРаботник + " (&ПарамФизЛицо)
	|		                                 ) КАК ФИОФизЛиц
	|		ПО Данные.Сотрудник.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаДиректор 
	|	ПО ОтветственныеЛицаДиректор.СтруктурнаяЕдиница = Данные.Организация
	|	И ОтветственныеЛицаДиректор.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаГлБух
	|	ПО ОтветственныеЛицаГлБух.СтруктурнаяЕдиница = Данные.Организация
	|	И ОтветственныеЛицаГлБух.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)

	|
	|УПОРЯДОЧИТЬ ПО
	|	Данные.Организация.Наименование,
	|	Данные.Сотрудник.ФизЛицо.Наименование,
	|	Сотрудник,
	|	ВидДвижения,
	|	Порядок1,
	|	Порядок2,
	|	Порядок3,
	|	Поле6";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапрос()

// Процедура выводит шапку таблицы для дополнения
//
Процедура ВывестиШапкуТаблицыДополнения(ТаблицаВидовРасчета, ДокументРезультат, ОбластьШапкаТаблицы,
										ОбластьВидРасчетаШапка, ПараметрыВидРасчетаШапка,
										ОбластьИтогВидРасчета, ПараметрыИтогВидРасчета)

	ДокументРезультат.Вывести(ОбластьШапкаТаблицы);
	
	ПараметрыИтогВидРасчета.ВидРасчета = "Залишок на початок";
	ДокументРезультат.Присоединить(ОбластьИтогВидРасчета);
	
	НеВыводиласьВсегоНачислено = Истина;
	НеВыводиласьВсегоУдержано  = Истина;
	
	Для каждого ВидРасчета Из ТаблицаВидовРасчета Цикл
	
		Порядок = ВидРасчета.Порядок2;
		
		//4.Удержания
		Если НеВыводиласьВсегоНачислено И (Порядок >= 4) Тогда
			
			ПараметрыИтогВидРасчета.ВидРасчета = "Всього нарахувань";
			ДокументРезультат.Присоединить(ОбластьИтогВидРасчета);
			НеВыводиласьВсегоНачислено = Ложь;
			
		КонецЕсли;
		
		//8.Выплаты
		Если НеВыводиласьВсегоУдержано И (Порядок >= 8) Тогда
			
			ПараметрыИтогВидРасчета.ВидРасчета = "Всього утримань";
			ДокументРезультат.Присоединить(ОбластьИтогВидРасчета);
			НеВыводиласьВсегоУдержано = Ложь;
			
		КонецЕсли;
		
		ПараметрыВидРасчетаШапка.ВидРасчета = ВидРасчета.ВидРасчетаНаименование;
		ДокументРезультат.Присоединить(ОбластьВидРасчетаШапка);
		
	КонецЦикла;
	
	Если НеВыводиласьВсегоНачислено Тогда
		
		ПараметрыИтогВидРасчета.ВидРасчета = "Всього нарахувань";
		ДокументРезультат.Присоединить(ОбластьИтогВидРасчета);
		
	КонецЕсли;
	
	Если НеВыводиласьВсегоУдержано Тогда
		
		ПараметрыИтогВидРасчета.ВидРасчета = "Всього утримань";
		ДокументРезультат.Присоединить(ОбластьИтогВидРасчета);
		
	КонецЕсли;
	
	ПараметрыИтогВидРасчета.ВидРасчета = "Всього выплат";
	ДокументРезультат.Присоединить(ОбластьИтогВидРасчета);
	
	ПараметрыИтогВидРасчета.ВидРасчета = "Залишок на кінець";
	ДокументРезультат.Присоединить(ОбластьИтогВидРасчета);

КонецПроцедуры // ВывестиШапкуТаблицыДополнения()

// Процедура очищает структуру,
// переданную в качестве параметра 
Процедура ОчиститьПараметры(Параметры)

    Для Н = 0 По Параметры.Количество() - 1 Цикл
	
		Параметры[Н] = Неопределено;
	
	КонецЦикла;
	
КонецПроцедуры // ОчиститьПараметры()

// Заполняет структуру для расшифровки строки дополнения
//
Функция ЗаполнитьРасшифровку(Выборка, Итоговая = Ложь)

	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("Организация", Выборка.Организация);
	СтруктураРасшифровки.Вставить("ФизЛицо",     Выборка.ФизЛицо);
	
	Если Итоговая Тогда
		
		СтруктураРасшифровки.Вставить("ДатаНач", ДатаНач);
		СтруктураРасшифровки.Вставить("ДатаКон", ДатаКон);
		
	Иначе
		
		Период = Выборка.Порядок1;
		СтруктураРасшифровки.Вставить("ДатаНач", Период);
		СтруктураРасшифровки.Вставить("ДатаКон", КонецМесяца(Период));
		
	КонецЕсли;
	
	Возврат СтруктураРасшифровки;

КонецФункции // ЗаполнитьРасшифровку()


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь, ОчищатьТабличныйДокумент = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(ДатаНач) Тогда
	
		Сообщить("Не указана дата начала периода!", СтатусСообщения.Важное);
		Возврат
	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаКон) Тогда
		
		Сообщить("Не указана дата окончания периода!", СтатусСообщения.Важное);
		Возврат
		
	КонецЕсли;
	
	ДатаНач = НачалоМесяца(ДатаНач);
	ДатаКон = КонецМесяца(ДатаКон);
		
	ДокументРезультат.Очистить();
	
	Макет 			  		    = ПолучитьМакет("П54а");
	ОбластьШапка 	  		    = Макет.ПолучитьОбласть("Шапка");             
	ОбластьСтрокаСот    	    = Макет.ПолучитьОбласть("СтрокаСот");               
	ОбластьШапкаПеремещения     = Макет.ПолучитьОбласть("ШапкаПеремещения");
	ОбластьСтрокаПеремещения    = Макет.ПолучитьОбласть("СтрокаПеремещения");
	ОбластьШапкаОтпуск          = Макет.ПолучитьОбласть("ШапкаОтпуск");
	ОбластьСтрокаОтпуск         = Макет.ПолучитьОбласть("СтрокаОтпуск");
	ОбластьШапкаКадровые        = Макет.ПолучитьОбласть("ШапкаКадровые");
	ОбластьСтрокаКадровые       = Макет.ПолучитьОбласть("СтрокаКадровые");
	ОбластьШапкаОтчисления      = Макет.ПолучитьОбласть("ШапкаОтчисления");
	ОбластьСтрокаОтчисления     = Макет.ПолучитьОбласть("СтрокаОтчисления");
	ОбластьДноСот               = Макет.ПолучитьОбласть("ДноСот");
	ОбластьДополнение			= Макет.ПолучитьОбласть("Дополнение");
	ОбластьШапкаТаблицы			= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьВидРасчетаШапка		= Макет.ПолучитьОбласть("ВидРасчетаШапка");
	ОбластьИтогВидРасчета		= Макет.ПолучитьОбласть("ИтогВидРасчета");
	ОбластьСтрокаДополнение		= Макет.ПолучитьОбласть("СтрокаДополнение");
	ОбластьСтрокаДополнениеИтог = Макет.ПолучитьОбласть("СтрокаДополнениеИтог");
	ОбластьВидРасчетаСтрока		= Макет.ПолучитьОбласть("ВидРасчетаСтрока");
	ОбластьВидРасчетаСтрокаИтог = Макет.ПолучитьОбласть("ВидРасчетаСтрокаИтог");
	ОбластьИтогВидРасчетаСтрока	= Макет.ПолучитьОбласть("ИтогВидРасчетаСтрока");
	
	ПараметрыШапка                = ОбластьШапка.Параметры;
	ПараметрыСтрокаСот            = ОбластьСтрокаСот.Параметры;
	ПараметрыСтрокаПеремещения    = ОбластьСтрокаПеремещения.Параметры;
	ПараметрыСтрокаОтпуск         = ОбластьСтрокаОтпуск.Параметры;
	ПараметрыСтрокаКадровые       = ОбластьСтрокаКадровые.Параметры;
	ПараметрыСтрокаОтчисления     = ОбластьСтрокаОтчисления.Параметры;
	ПараметрыДополнение           = ОбластьДополнение.Параметры;
	ПараметрыВидРасчетаШапка      = ОбластьВидРасчетаШапка.Параметры;
	ПараметрыИтогВидРасчета       = ОбластьИтогВидРасчета.Параметры;
	ПараметрыСтрокаДополнение     = ОбластьСтрокаДополнение.Параметры;
	ПараметрыСтрокаДополнениеИтог = ОбластьСтрокаДополнениеИтог.Параметры;
	ПараметрыВидРасчетаСтрока     = ОбластьВидРасчетаСтрока.Параметры;
	ПараметрыВидРасчетаСтрокаИтог = ОбластьВидРасчетаСтрокаИтог.Параметры;
	ПараметрыИтогВидРасчетаСтрока = ОбластьИтогВидРасчетаСтрока.Параметры;
	
	РезультатЗапроса = СформироватьЗапрос();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Сообщить("Данные не обнаружены!");
	    Возврат;
		
	КонецЕсли;
	
	ФорматСумм = "ЧЦ=15; ЧДЦ=2; ЧН=0,00";
	
	ТаблицаВидовРасчета = Новый ТаблицаЗначений;;
	ТаблицаВидовРасчета.Колонки.Добавить("Порядок2");
	ТаблицаВидовРасчета.Колонки.Добавить("ВидРасчетаНаименование");
	ТаблицаВидовРасчета.Колонки.Добавить("Результат");
	ТаблицаВидовРасчета.Колонки.Добавить("ВидРасчета");
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	
	ПериодОтчета = ПредставлениеПериода(ДатаНач, КонецДня(ДатаКон), "Л=uk_UA; ФП=Истина");
	ПараметрыШапка.ПериодОтчета      = ПериодОтчета;
	ПараметрыДополнение.ПериодОтчета = ПериодОтчета;
	
	Выборка  = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		ПараметрыШапка.ОрганизацияНаименованиеПолное = СокрП(Выборка.ОрганизацияНаименованиеПолное);
		ПараметрыШапка.РасшифровкаОрганизация        = Выборка.Организация;
		
		ПараметрыДополнение.ОрганизацияНаименованиеПолное = СокрП(Выборка.ОрганизацияНаименованиеПолное);
		ПараметрыДополнение.РасшифровкаОрганизация        = Выборка.Организация;
		
		КодЕДРПОУ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Выборка.Организация, КонецДня(ДатаКон), СписокПоказателей).КодПоЕДРПОУ;
		КодЕДРПОУ = ФормированиеПечатныхФорм.РазбитьСтрокуНаСимволы(СокрЛП(КодЕДРПОУ), "ЕДРПОУ");
		
		//Заполнение кода ЕДРПОУ
		Для каждого Рисунок Из ОбластьШапка.Рисунки Цикл
		
			Цифра = "";
			
			Если КодЕДРПОУ.Свойство(Рисунок.Имя, Цифра) Тогда
				
				Рисунок.Текст = Цифра;
				
			Иначе
				
				Рисунок.Текст = " ";
				
			КонецЕсли;
			
		КонецЦикла;
		
		Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
			
			ПараметрыШапка.ФИО          = Выборка.ФИО;
			ПараметрыШапка.ДатаРождения = Формат(Выборка.ДатаРождения, "ДЛФ=D");
			ПараметрыШапка.Расшифровка  = Выборка.ФизЛицо;
			
			ПараметрыДополнение.ФИО          = Выборка.ФИО;
			ПараметрыДополнение.ДатаРождения = Формат(Выборка.ДатаРождения, "ДЛФ=D");
			ПараметрыДополнение.Расшифровка  = Выборка.ФизЛицо;
			Подразделение                    = ""; 
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьШапка);
			
			НеВыводиласьШапкаПеремещение = Истина;
			НеВыводиласьШапкаОтпуск      = Истина;
			НеВыводиласьШапкаКадровые    = Истина;
			НеВыводиласьШапкаОтчисления  = Истина;
			НеВыводиласьДноСот           = Истина;
			
			Пока Выборка.СледующийПоЗначениюПоля("ВидДвижения") Цикл
				
				ВидДвижения = Выборка.ВидДвижения;
				
				//ВидДвижения >= "1.Перемещение"
				Если НеВыводиласьШапкаПеремещение И (ВидДвижения >= 1) Тогда
					
					ДокументРезультат.Вывести(ОбластьШапкаПеремещения);
					НеВыводиласьШапкаПеремещение = Ложь;
					
				КонецЕсли;
				
				//ВидДвижения >= "2.Отпуск"
				Если НеВыводиласьШапкаОтпуск И (ВидДвижения >= 2) Тогда
					
					ДокументРезультат.Вывести(ОбластьШапкаОтпуск);
					НеВыводиласьШапкаОтпуск = Ложь;
					
				КонецЕсли;
				
				//ВидДвижения >= "3.Отчисления по исполнительнительным листам"
				Если НеВыводиласьШапкаКадровые И (ВидДвижения >= 3) Тогда
					
					ДокументРезультат.Вывести(ОбластьШапкаКадровые);
					ПараметрыСтрокаКадровые.Заполнить(Выборка);
					ПараметрыСтрокаКадровые.Расшифровка = Выборка.ФизЛицо;
					ДокументРезультат.Вывести(ОбластьСтрокаКадровые);
					ОчиститьПараметры(ПараметрыСтрокаКадровые);
					НеВыводиласьШапкаКадровые = Ложь;
					
				КонецЕсли;
				
				//ВидДвижения >= "3.Отчисления по исполнительнительным листам"
				Если НеВыводиласьШапкаОтчисления И (ВидДвижения >= 3) Тогда
					
					ПоследняяШапкаОтчисления = ДокументРезультат.ВысотаТаблицы + 1;
					ДокументРезультат.Вывести(ОбластьШапкаОтчисления);
					НеВыводиласьШапкаОтчисления = Ложь;
					
				КонецЕсли;
				
				//ВидДвижения = "5.Дополнение"
				Если НеВыводиласьДноСот И (ВидДвижения = 5) Тогда
					
					Если Не ДокументРезультат.ПроверитьВывод(ОбластьДноСот) Тогда
						
						ВысотаТаблицы = ДокументРезультат.ВысотаТаблицы;
						
						Если (ВысотаТаблицы - ПоследняяШапкаОтчисления) < 15 Тогда
							//Переносится вся таблица отчислений
							
							ДокументРезультат.Область("R" + ПоследняяШапкаОтчисления).НачалоСтраницы = Истина;
							
						Иначе
							//Переносится последняя строка
							
							ПоследняяСтрока = ДокументРезультат.ПолучитьОбласть("R" + ВысотаТаблицы);
							ОбластьДляУдаления = ДокументРезультат.Область("R" + ВысотаТаблицы);
							ДокументРезультат.УдалитьОбласть(ОбластьДляУдаления, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьШапкаОтчисления);
							ДокументРезультат.Вывести(ПоследняяСтрока);
							
						КонецЕсли;
						
					КонецЕсли;
					
					ОбластьДноСот.Параметры.Заполнить(Выборка);
					
					
					ДокументРезультат.Вывести(ОбластьДноСот);
					НеВыводиласьДноСот = Ложь;
					
					ПараметрыДополнение.Подразделение = Подразделение;
					ДокументРезультат.Вывести(ОбластьДополнение);
					
				КонецЕсли;
				
				Если ВидДвижения = 0 Тогда
					//Прием на работу
					
					Пока Выборка.Следующий() Цикл
					
						ПараметрыСтрокаСот.Подразделение      = Выборка.Поле1;
						ПараметрыСтрокаСот.КатегорияПерсонала = Выборка.Поле3;
						ПараметрыСтрокаСот.ТабельныйНомер     = Выборка.Поле4;
						ПараметрыСтрокаСот.ДатаПриема         = Выборка.Порядок1;
						ПараметрыСтрокаСот.Расшифровка        = Выборка.Порядок3;
						
						ДокументРезультат.Вывести(ОбластьСтрокаСот);
					
					КонецЦикла;
					
					Подразделение = Выборка.Поле1;
					
				ИначеЕсли ВидДвижения = 1 Тогда
					//Перемещение по служебной лестнице
					
					Пока Выборка.Следующий() Цикл
					
						ПараметрыСтрокаПеремещения.ДатаПеремещения = Выборка.Порядок1;
						ПараметрыСтрокаПеремещения.НомерПриказа    = Выборка.Порядок2;
						ПараметрыСтрокаПеремещения.Подразделение   = Выборка.Поле1;
						ПараметрыСтрокаПеремещения.Должность       = Выборка.Поле2;
						ПараметрыСтрокаПеремещения.Оклад           = Формат(Выборка.Поле5, ФорматСумм) 
						                                             + " " + Выборка.Поле6;
						ПараметрыСтрокаПеремещения.Расшифровка     = Выборка.Порядок3;
						
						Если Не ДокументРезультат.ПроверитьВывод(ОбластьСтрокаПеремещения) Тогда
							
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьШапкаПеремещения);
							
						КонецЕсли;
						
						ДокументРезультат.Вывести(ОбластьСтрокаПеремещения);
						
					
					КонецЦикла;
					
					Подразделение = Выборка.Поле1;
					
				ИначеЕсли ВидДвижения = 2 Тогда
					//Отпуска
					
					Пока Выборка.Следующий() Цикл
					
						ПараметрыСтрокаОтпуск.ВидОтпуска    = Выборка.Поле1;
						ПараметрыСтрокаОтпуск.ДатаПриказа   = Выборка.Порядок1;
						ПараметрыСтрокаОтпуск.НомерПриказа  = Выборка.Поле5;
						ПараметрыСтрокаОтпуск.ДатаНачала    = Выборка.Порядок2;
						ПараметрыСтрокаОтпуск.ДатаОкончания = Выборка.Порядок3;
						ПараметрыСтрокаОтпуск.КвоДней       = Окр((КонецДня(Выборка.Порядок3) 
						                                      - Выборка.Порядок2) / 86400) ;
						ПараметрыСтрокаОтпуск.Период        = ПредставлениеПериода(
						                                         Выборка.Поле2,
						                                         КонецДня(Выборка.Поле3),
						                                         "Л=uk_UA");
						ПараметрыСтрокаОтпуск.Расшифровка   = Выборка.Поле4;
						
						Если Не ДокументРезультат.ПроверитьВывод(ОбластьСтрокаОтпуск) Тогда
							
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьШапкаОтпуск);
							
						КонецЕсли;
						
						ДокументРезультат.Вывести(ОбластьСтрокаОтпуск);
					
					КонецЦикла;
					
				ИначеЕсли ВидДвижения = 3 Тогда
					//Отчисления по исполнительным листам
					
					Пока Выборка.Следующий() Цикл
					
						ПараметрыСтрокаОтчисления.Расшифровка   = Выборка.Порядок3;
						
						Почта = Выборка.Поле1;
						Почта = ?(НЕ ЗначениеЗаполнено(Почта), "", " поштовий тариф: " + Почта);
						
						ПараметрыСтрокаОтчисления.ВидОтчисления = "" + Выборка.Поле2 
																  + Почта;
						ПараметрыСтрокаОтчисления.ПериодС       = Выборка.Порядок1;
						ПараметрыСтрокаОтчисления.ПериодПо      = Выборка.Порядок2;
						
						Предел = ОбщегоНазначения.ПреобразоватьВЧисло(Выборка.Поле4);
						Размер = ОбщегоНазначения.ПреобразоватьВЧисло(Выборка.Поле3);
						Валюта = Выборка.Поле6;
						Валюта = ?(НЕ ЗначениеЗаполнено(Валюта), "", " " + Валюта);
						
						Если Выборка.Поле5 = 1 Тогда
							//отчисления процентом
							
							Если Предел = 0 Тогда
							
								ПараметрыСтрокаОтчисления.СуммаОтчисления = Формат(Размер, ФорматСумм)
							                                                + " %";
																			   
							Иначе
								
								ПараметрыСтрокаОтчисления.СуммаОтчисления = Формат(Предел, ФорматСумм)
								                                            + Валюта;
								
							КонецЕсли;
																		   
							ПараметрыСтрокаОтчисления.СуммаВМесяц	  = Формат(Размер, ФорматСумм)
							                                            + " %";
						Иначе
							//отчисление суммой
							
							Если Предел = 0 Тогда
							
								ПараметрыСтрокаОтчисления.СуммаОтчисления = "";
								
							Иначе
															
								ПараметрыСтрокаОтчисления.СуммаОтчисления = Формат(Предел, ФорматСумм)
																			+ Валюта;
							КонецЕсли;
							
							ПараметрыСтрокаОтчисления.СуммаВМесяц	  = Формат(Размер, ФорматСумм)
																		+ Валюта;
							
						КонецЕсли;

						Если Не ДокументРезультат.ПроверитьВывод(ОбластьСтрокаОтчисления) Тогда
							
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьШапкаОтчисления);
							
						КонецЕсли;
						
						ДокументРезультат.Вывести(ОбластьСтрокаОтчисления);
					
					КонецЦикла;
					
				ИначеЕсли ВидДвижения = 4 Тогда
					//Отчисление по погашениям займов
					
					Пока Выборка.Следующий() Цикл
					
						ПараметрыСтрокаОтчисления.Расшифровка   = Выборка.Поле1;
						
						СпособПогашения = Выборка.Поле5;
						СпособПогашения = ?(НЕ ЗначениеЗаполнено(СпособПогашения), "", 
						                    " (" + СпособПогашения + ")");
						
						ПараметрыСтрокаОтчисления.ВидОтчисления = "Погашення позик" + СпособПогашения;
						ПараметрыСтрокаОтчисления.ПериодС       = Выборка.Порядок1;
						СрокПогашения                           = ОбщегоНазначения.ПреобразоватьВЧисло(Выборка.Порядок2);
						ПараметрыСтрокаОтчисления.ПериодПо      = ДобавитьМесяц(Выборка.Порядок1,
						                                          	            СрокПогашения);
						
						СуммаЗайма = ОбщегоНазначения.ПреобразоватьВЧисло(Выборка.Поле3);
						Валюта     = Выборка.Поле6;
						Валюта     = ?(НЕ ЗначениеЗаполнено(Валюта), "", " " + Валюта);
						
						//перестраховка, поскольку СрокПогашения не может быть 0
						СрокПогашения = ?(СрокПогашения = 0, 1, СрокПогашения);
						
						//В документе указывается процент годовой.
						//Необходимо вычислить процент за месяц.
						ПроцентВМесяц    = ОбщегоНазначения.ПреобразоватьВЧисло(Выборка.Поле4) / 1200;
						
						//Сумма займа с процентами
						СуммаЗайма = СуммаЗайма * (1 + ПроцентВМесяц * СрокПогашения);
						
						Если Выборка.Поле5 = Перечисления.ПорядокПогашенияЗаймаПроцентов.Ежемесячно Тогда
							//Погашение: Ежемесячно
							
							СуммаВМесяц = СуммаЗайма / СрокПогашения;
							ПараметрыСтрокаОтчисления.СуммаВМесяц = Формат(СуммаВМесяц, ФорматСумм)
																	+ Валюта;
							
						Иначе
							//Погашение: по окончании срока
							
							ПараметрыСтрокаОтчисления.СуммаВМесяц = "";
							
						КонецЕсли;
						
						ПараметрыСтрокаОтчисления.СуммаОтчисления = Формат(СуммаЗайма, ФорматСумм)
																	+ Валюта;

						Если Не ДокументРезультат.ПроверитьВывод(ОбластьСтрокаОтчисления) Тогда
							
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьШапкаОтчисления);
							
						КонецЕсли;
						
						ДокументРезультат.Вывести(ОбластьСтрокаОтчисления);
						
					
					КонецЦикла;
					
				ИначеЕсли ВидДвижения = 5 Тогда
					//Дополнение к Личному счету
					
					НачальныйОстаток = 0;
					Остаток          = 0;
					КвоДнейИтого     = 0;
					КвоЧасовИтого    = 0;
					ВГраницаРасчетов = -1;
					КвоСтрокВТаблице = 0;
					НеВыводиласьШапкаТаблицыДополнения = Истина;
					
					//Обход по периодам для строк таблицы
					Пока Выборка.СледующийПоЗначениюПоля("Порядок1") Цикл
						
						Период =  Выборка.Порядок1;
						
						Если Период = Null Тогда
							//итоги по видам расчета
							
							Пока Выборка.Следующий() Цикл
							
								Строка = ТаблицаВидовРасчета.Добавить();
								Строка.Порядок2               = Выборка.Порядок2;
								Строка.ВидРасчетаНаименование = Выборка.Поле1;
								Строка.Результат              = ОбщегоНазначения.ПреобразоватьВЧисло(Выборка.Поле2);
								Строка.ВидРасчета             = Выборка.Поле6
							
							КонецЦикла;
							
							ВГраницаРасчетов = ТаблицаВидовРасчета.Количество() - 1;
							
						    Продолжить;
							
						КонецЕсли;
						
						Если НеВыводиласьШапкаТаблицыДополнения Тогда
							
							ВывестиШапкуТаблицыДополнения(ТаблицаВидовРасчета, ДокументРезультат, ОбластьШапкаТаблицы,
														  ОбластьВидРасчетаШапка, ПараметрыВидРасчетаШапка,
														  ОбластьИтогВидРасчета, ПараметрыИтогВидРасчета);
							НеВыводиласьШапкаТаблицыДополнения = Ложь;
														  
						КонецЕсли;
						
						ПараметрыСтрокаДополнение.Период      = Период;
						ПараметрыСтрокаДополнение.Расшифровка = ЗаполнитьРасшифровку(Выборка);
						
						Если Не ДокументРезультат.ПроверитьВывод(ОбластьСтрокаДополнение) Тогда
							
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ВывестиШапкуТаблицыДополнения(ТаблицаВидовРасчета, ДокументРезультат,
							                              ОбластьШапкаТаблицы, ОбластьВидРасчетаШапка,
														  ПараметрыВидРасчетаШапка, ОбластьИтогВидРасчета,
														  ПараметрыИтогВидРасчета);
							
						КонецЕсли;
						
						ДокументРезультат.Вывести(ОбластьСтрокаДополнение);
						
						ТекСумма         = 0;
						ТекИндексРасчета = 0;
						ОтработаноДней   = 0;
						ОтработаноЧасов  = 0;
						НеВыводиласьВсегоНачислено = Истина;
						НеВыводиласьВсегоУдержано  = Истина;
						
						Если Выборка.Порядок2 = 1 Тогда
							//Начальный Остаток
							
							Остаток          = ОбщегоНазначения.ПреобразоватьВЧисло(Выборка.Поле2);
							НачальныйОстаток = Остаток;
							//Сдвиг строки выборки,
							//поскольку она уже обработана
							Выборка.Следующий()
							
						КонецЕсли;
						
						//Начальный остаток
						ПараметрыИтогВидРасчетаСтрока.Сумма = Формат(Остаток, ФорматСумм);
						ДокументРезультат.Присоединить(ОбластьИтогВидРасчетаСтрока);
						
						//Обход по порядку видов расчета
						Пока Выборка.Следующий() Цикл
							
							Порядок2   = Выборка.Порядок2;
							ВидРасчета = Выборка.Поле6;
							
							Если Порядок2 = 2 Тогда
								//2.ОсновныеНачисления
								
								ОтработаноДней  = ОтработаноДней + ОбщегоНазначения.ПреобразоватьВЧисло(Выборка.Поле3);
								ОтработаноЧасов = ОтработаноЧасов + ОбщегоНазначения.ПреобразоватьВЧисло(Выборка.Поле4);
								
							КонецЕсли;
							
							//Вывод пустых ячеек
							Для Н = ТекИндексРасчета По ВГраницаРасчетов Цикл
								
								Порядок = ТаблицаВидовРасчета[Н].Порядок2;
								
								//4.Удержания
								Если НеВыводиласьВсегоНачислено И (Порядок >= 4) Тогда
									//Вывод области "Всего начислено"
									
									ПараметрыИтогВидРасчетаСтрока.Сумма = Формат(ТекСумма, ФорматСумм);
									ДокументРезультат.Присоединить(ОбластьИтогВидРасчетаСтрока);
									НеВыводиласьВсегоНачислено = Ложь;
									
									Остаток  = Остаток + ТекСумма;
									ТекСумма = 0;
									
								КонецЕсли;
								
								//8.Выплаты
								Если НеВыводиласьВсегоУдержано И (Порядок >= 8) Тогда
									//Вывод области "Всего удержано"
									
									ПараметрыИтогВидРасчетаСтрока.Сумма = Формат(ТекСумма, ФорматСумм);
									ДокументРезультат.Присоединить(ОбластьИтогВидРасчетаСтрока);
									НеВыводиласьВсегоУдержано = Ложь;
									
									Остаток  = Остаток - ТекСумма;
									ТекСумма = 0;
									
								КонецЕсли;
								
								Если ВидРасчета = ТаблицаВидовРасчета[Н].ВидРасчета Тогда
									
									Сумма = ОбщегоНазначения.ПреобразоватьВЧисло(Выборка.Поле2);
									ПараметрыВидРасчетаСтрока.Сумма = Формат(Сумма, ФорматСумм);
									ДокументРезультат.Присоединить(ОбластьВидРасчетаСтрока);
									ПараметрыВидРасчетаСтрока.Сумма = "";
									
									ТекСумма = ТекСумма + Сумма;
									ТекИндексРасчета = Н + 1;
									Прервать;
									
								Иначе
									
									ДокументРезультат.Присоединить(ОбластьВидРасчетаСтрока);
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЦикла;
							
						//Вывод пустых ячеек
						Для Н = ТекИндексРасчета По ВГраницаРасчетов Цикл
							
							Порядок = ТаблицаВидовРасчета[Н].Порядок2;
							
							//4.Удержания
							Если НеВыводиласьВсегоНачислено И (Порядок >= 4) Тогда
								//Вывод области "Всего начислено"
								
								ПараметрыИтогВидРасчетаСтрока.Сумма = Формат(ТекСумма, ФорматСумм);
								ДокументРезультат.Присоединить(ОбластьИтогВидРасчетаСтрока);
								НеВыводиласьВсегоНачислено = Ложь;
								
								Остаток  = Остаток + ТекСумма;
								ТекСумма = 0;
								
							КонецЕсли;
							
							//8.Выплаты
							Если НеВыводиласьВсегоУдержано И (Порядок >= 8) Тогда
								//Вывод области "Всего удержано"
								
								ПараметрыИтогВидРасчетаСтрока.Сумма = Формат(ТекСумма, ФорматСумм);
								ДокументРезультат.Присоединить(ОбластьИтогВидРасчетаСтрока);
								НеВыводиласьВсегоУдержано = Ложь;
								
								Остаток  = Остаток - ТекСумма;
								ТекСумма = 0;
								
							КонецЕсли;
							
							ДокументРезультат.Присоединить(ОбластьВидРасчетаСтрока);
							
						КонецЦикла;
						
						Если НеВыводиласьВсегоНачислено Тогда
							//Вывод области "Всего начислено"
							
							ПараметрыИтогВидРасчетаСтрока.Сумма = Формат(ТекСумма, ФорматСумм);
							ДокументРезультат.Присоединить(ОбластьИтогВидРасчетаСтрока);
							НеВыводиласьВсегоНачислено = Ложь;
							
							Остаток  = Остаток + ТекСумма;
							ТекСумма = 0;
							
						КонецЕсли;
						
						Если НеВыводиласьВсегоУдержано Тогда
							//Вывод области "Всего удержано"
							
							ПараметрыИтогВидРасчетаСтрока.Сумма = Формат(ТекСумма, ФорматСумм);
							ДокументРезультат.Присоединить(ОбластьИтогВидРасчетаСтрока);
							НеВыводиласьВсегоУдержано = Ложь;
							
							Остаток  = Остаток - ТекСумма;
							ТекСумма = 0;
							
						КонецЕсли;
							
						//Вывод области "Всего выплачено"
						ПараметрыИтогВидРасчетаСтрока.Сумма = Формат(ТекСумма, ФорматСумм);
						ДокументРезультат.Присоединить(ОбластьИтогВидРасчетаСтрока);
						
						Остаток  = Остаток - ТекСумма;
								
						//Конечный остаток
						ПараметрыИтогВидРасчетаСтрока.Сумма = Формат(Остаток, ФорматСумм);
						ДокументРезультат.Присоединить(ОбластьИтогВидРасчетаСтрока);
						
						//Вывод отработаных дней
						Если (ОтработаноДней <> 0) ИЛИ (ОтработаноЧасов <> 0) Тогда
							
							ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,
							                          3).Текст = "" + ОтработаноДней + " дн. "
													             + ОтработаноЧасов + " г.";
							КвоДнейИтого    = КвоДнейИтого + ОтработаноДней;
							КвоЧасовИтого   = КвоЧасовИтого + ОтработаноЧасов;
																
						КонецЕсли;
						
						КвоСтрокВТаблице = КвоСтрокВТаблице + 1;
						
					КонецЦикла;
					
					//Вывод итогов по таблице
					
					//Если строка в таблице 1, то итоги
					//можно не выводить.
					Если КвоСтрокВТаблице > 1 Тогда
						
						Если Не ДокументРезультат.ПроверитьВывод(ОбластьСтрокаДополнениеИтог) Тогда
							
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ВывестиШапкуТаблицыДополнения(ТаблицаВидовРасчета, ДокументРезультат,
							                              ОбластьШапкаТаблицы, ОбластьВидРасчетаШапка,
														  ПараметрыВидРасчетаШапка, ОбластьИтогВидРасчета,
														  ПараметрыИтогВидРасчета);
							
						КонецЕсли;
						
						ПараметрыСтрокаДополнениеИтог.ДнейИтого   = "" + КвоДнейИтого + " дн."
						                                            + Символы.ПС + КвоЧасовИтого + " г.";
						ПараметрыСтрокаДополнениеИтог.Расшифровка = ЗаполнитьРасшифровку(Выборка, Истина);
						ДокументРезультат.Вывести(ОбластьСтрокаДополнениеИтог);
						
						ТекСумма                   = 0;
						Остаток                    = НачальныйОстаток;
						НеВыводиласьВсегоНачислено = Истина;
						НеВыводиласьВсегоУдержано  = Истина;
						
						//Начальный остаток
						ПараметрыВидРасчетаСтрокаИтог.Сумма = Формат(НачальныйОстаток, ФорматСумм);
						ДокументРезультат.Присоединить(ОбластьВидРасчетаСтрокаИтог);
						
						Для каждого ВидРасчета Из ТаблицаВидовРасчета Цикл
						
							Порядок = ВидРасчета.Порядок2;
							
							//4.Удержания
							Если НеВыводиласьВсегоНачислено И (Порядок >= 4) Тогда
								//Вывод области "Всего начислено"
								
								ПараметрыВидРасчетаСтрокаИтог.Сумма = Формат(ТекСумма, ФорматСумм);
								ДокументРезультат.Присоединить(ОбластьВидРасчетаСтрокаИтог);
								НеВыводиласьВсегоНачислено = Ложь;
								
								Остаток  = Остаток + ТекСумма;
								ТекСумма = 0;
								
							КонецЕсли;
							
							//8.Выплаты
							Если НеВыводиласьВсегоУдержано И (Порядок >= 8) Тогда
								//Вывод области "Всего удержано"
								
								ПараметрыВидРасчетаСтрокаИтог.Сумма = Формат(ТекСумма, ФорматСумм);
								ДокументРезультат.Присоединить(ОбластьВидРасчетаСтрокаИтог);
								НеВыводиласьВсегоУдержано = Ложь;
								
								Остаток  = Остаток - ТекСумма;
								ТекСумма = 0;
								
							КонецЕсли;
							
							Сумма    = ВидРасчета.Результат;
							ТекСумма = ТекСумма + Сумма;
							
							ПараметрыИтогВидРасчетаСтрока.Сумма = Формат(Сумма, ФорматСумм);
							ДокументРезультат.Присоединить(ОбластьИтогВидРасчетаСтрока);
						
						КонецЦикла;
							
						Если НеВыводиласьВсегоНачислено Тогда
							//Вывод области "Всего начислено"
							
							ПараметрыВидРасчетаСтрокаИтог.Сумма = Формат(ТекСумма, ФорматСумм);
							ДокументРезультат.Присоединить(ОбластьВидРасчетаСтрокаИтог);
							НеВыводиласьВсегоНачислено = Ложь;
							
							Остаток  = Остаток + ТекСумма;
							ТекСумма = 0;
							
						КонецЕсли;
						
						Если НеВыводиласьВсегоУдержано Тогда
							//Вывод области "Всего удержано"
							
							ПараметрыВидРасчетаСтрокаИтог.Сумма = Формат(ТекСумма, ФорматСумм);
							ДокументРезультат.Присоединить(ОбластьВидРасчетаСтрокаИтог);
							НеВыводиласьВсегоУдержано = Ложь;
							
							Остаток  = Остаток - ТекСумма;
							ТекСумма = 0;
							
						КонецЕсли;
						
						//Вывод области "Всего выплачено"
						ПараметрыВидРасчетаСтрокаИтог.Сумма = Формат(ТекСумма, ФорматСумм);
						ДокументРезультат.Присоединить(ОбластьВидРасчетаСтрокаИтог);
						
						Остаток  = Остаток - ТекСумма;
								
						//Конечный остаток
						ПараметрыВидРасчетаСтрокаИтог.Сумма = Формат(Остаток, ФорматСумм);
						ДокументРезультат.Присоединить(ОбластьВидРасчетаСтрокаИтог);
						
					КонецЕсли;
					
					ТаблицаВидовРасчета.Очистить();
					
				КонецЕсли;
				
			КонецЦикла;
				
			Если НеВыводиласьШапкаПеремещение Тогда
				
				ДокументРезультат.Вывести(ОбластьШапкаПеремещения);
				
			КонецЕсли;
			
			Если НеВыводиласьШапкаОтпуск Тогда
				
				ДокументРезультат.Вывести(ОбластьШапкаОтпуск);
				
			КонецЕсли;
			
			Если НеВыводиласьШапкаКадровые Тогда
				
				ДокументРезультат.Вывести(ОбластьШапкаКадровые);
				ПараметрыСтрокаКадровые.Заполнить(Выборка);
				ПараметрыСтрокаКадровые.Расшифровка = Выборка.ФизЛицо;
				ДокументРезультат.Вывести(ОбластьСтрокаКадровые);
				ОчиститьПараметры(ПараметрыСтрокаКадровые);
				
			КонецЕсли;
			
			Если НеВыводиласьШапкаОтчисления Тогда
				
				ПоследняяШапкаОтчисления = ДокументРезультат.ВысотаТаблицы + 1;
				ДокументРезультат.Вывести(ОбластьШапкаОтчисления);
				НеВыводиласьШапкаОтчисления = Ложь;
				
			КонецЕсли;
			
			Если НеВыводиласьДноСот Тогда
				
				Если Не ДокументРезультат.ПроверитьВывод(ОбластьДноСот) Тогда
					
					ВысотаТаблицы = ДокументРезультат.ВысотаТаблицы;
					
					Если (ВысотаТаблицы - ПоследняяШапкаОтчисления) < 15 Тогда
						//Переносится вся таблица отчислений
						
						ДокументРезультат.Область("R" + ПоследняяШапкаОтчисления).НачалоСтраницы = Истина;
						
					Иначе
						//Переносится последняя строка
						
						ПоследняяСтрока = ДокументРезультат.ПолучитьОбласть("R" + ВысотаТаблицы);
						ОбластьДляУдаления = ДокументРезультат.Область("R" + ВысотаТаблицы);
						ДокументРезультат.УдалитьОбласть(ОбластьДляУдаления, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(ОбластьШапкаОтчисления);
						ДокументРезультат.Вывести(ПоследняяСтрока);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьДноСот);
				
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;
	
	ДокументРезультат.ОбластьПечати  = ДокументРезультат.Область( , 2, , ДокументРезультат.ШиринаТаблицы);
	ДокументРезультат.ТолькоПросмотр = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НП = Новый НастройкаПериода;

#КонецЕсли