#Если Клиент Тогда
// Настройка периода
Перем НП Экспорт;

// Все возможные показатели
Перем мТаблицаПоказатели Экспорт;

Перем мНазваниеОтчета Экспорт;
Перем мИмяОтчета;
Перем мНаДату Экспорт;

// Счетчик выведенных в отчет периодов
Перем мВыведеноПериодов;

// Количество группировок в выводе по горизонтали
Перем мГруппировокПоГоризонтали;

// Группировки, выводимые в отчет по горизонтали
Перем мЗначимыеГруппировкиГор;

Перем СписокПериодичность Экспорт;

//Таблица общих итогов по запросу
Перем ТабОбщихИтогов;

Перем СтруктураПредставлениеПолей;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

// Проверяет заполненность реквизитов "ВидФинансовогоРасчета" и "ПоказательОтчета".
// Без них запускать процедуру настройки отчета не имеет смысла.
//
// Параметры: нет
//
Функция ЕстьПараметрыНастройки() Экспорт
	
	Если ВидФинансовогоРасчета.Пустая() ИЛИ ПоказательОтчета="" Тогда
		Возврат Ложь;
	Иначе
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	СтрокиФинансовогоРасчета.Ссылка
		             |ИЗ
		             |	Справочник.СтрокиФинансовогоРасчета КАК СтрокиФинансовогоРасчета
		             |ГДЕ
		             |	СтрокиФинансовогоРасчета.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец",ВидФинансовогоРасчета);
		Результат=Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Ложь;
			Сообщить("Для выбранного вида финансового расчета не указаны строки расчета.");
		КонецЕсли;
	КонецЕсли;	

	Возврат Истина;
	
КонецФункции // ЕстьПараметрыНастройки()

// Возвращает текст запроса, аналогичного исполняемому при работе с источником
// данных, для добавления в текст общего запроса. Дополнительно, вставляет в 
// структуру параметров общего запроса параметры, используемые при настройках источника.
// Параметры:
//	НастройкиИсточника (Структура): реквизит справочника "ИсточникиДанныхДляБюджетирования"
//	Структура параметров (Структура): структура параметров общего запроса
//	Строка бюджета (Справочник.СтрокиБюджетов): строка, для получения данных по которой формируется запрос.
//
Функция ТекстЗапросаПоИсточнику(Выборка,Периодичность, СтруктураПараметров)
	
	ЕстьПериод=?(Периодичность="",Ложь,Истина);
	
	ПостроительИсточника=Новый ПостроительОтчета;
	ТекстЗапроса=Выборка.ТекстЗапроса;
	СохраненнаяНастройка=Выборка.НастройкиПостроителя.Получить();
		
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,",День,",","+Периодичность+",");
	
	Если ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		
		Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
			СтруктураПараметров.Вставить(Параметр.Ключ+СокрЛП(Выборка.Код),Параметр.Значение);
			ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"&"+Параметр.Ключ,"&"+Параметр.Ключ+СокрЛП(Выборка.Код));
		КонецЦикла;
		ПостроительИсточника.Текст=ТекстЗапроса;
		ПостроительИсточника.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
	Иначе
		Возврат "";
	КонецЕсли;
	
	СтруктураСоответствия=Новый Структура;
	ВыборкаИзмерения=Выборка.ИзмеренияИсточника.Выбрать();
	
	Пока ВыборкаИзмерения.Следующий() Цикл
		
		Если ВыборкаИзмерения.ИзмерениеБюджетирования=Перечисления.ИзмеренияБюджетирования.Сценарий Тогда
			НовыйОтбор=ПостроительИсточника.Отбор.Добавить(ВыборкаИзмерения.ПутьКДанным,ВыборкаИзмерения.ИмяПоляИсточника);
			НовыйОтбор.ВидСравнения=ВидСравнения.Равно;
			НовыйОтбор.Значение=Сценарий;
			НовыйОтбор.Использование=Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВыборки="";
	
	Если ЕстьПериод Тогда
		
		ПостроительИсточника.ВыбранныеПоля.Добавить("Период");
			
		ТекущийТекст=Новый ТекстовыйДокумент;
		ТекущийТекст.УстановитьТекст(ПостроительИсточника.ПолучитьЗапрос().Текст);
		
		Для Индекс=1 По ТекущийТекст.КоличествоСтрок() Цикл
			СтрокаЗапроса=ТекущийТекст.ПолучитьСтроку(Индекс);
			Если Найти(Врег(СтрокаЗапроса),"КАК ПЕРИОД")>0 Тогда
				ТекстВыборки="ВЫБРАТЬ
				|"+СтрокаЗапроса+",";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекстВыборки="" Тогда
			ТекстВыборки="ВЫБРАТЬ
			|&МоментВремени КАК Период,";
		КонецЕсли;
		
	Иначе
		
		ТекстВыборки="ВЫБРАТЬ";
		
	КонецЕсли;
		
	ТекстВыборки=ТекстВыборки+"
	|&СтрокаРасчета"+СокрЛП(Выборка.Код)+" КАК СтрокаРасчета,";
	
	СтруктураПараметров.Вставить("СтрокаРасчета"+СокрЛП(Выборка.Код),Выборка.СтрокаРасчета.Ссылка);

	ПутьКДанным="";
				
	ТекстВыборки=ТекстВыборки+"
	|СУММА("+Выборка.ПоказательОтчета+") КАК "+ПоказательОтчета+"
	|";
	
	ТекстДляРазбора=ПостроительИсточника.ПолучитьЗапрос().Текст;
	//СтарыйТекстВыборки=Лев(РабочийТекст,Найти(РабочийТекст,"ИЗ")-1);
	
	ЕстьИсточник=Ложь;
	ТекущийТекст=Новый ТекстовыйДокумент;
	ТекущийТекст.УстановитьТекст(ТекстДляРазбора);
	
	ТекстИсточник="";
	
	Для Индекс=1 По ТекущийТекст.КоличествоСтрок() Цикл
		
		СтрокаЗапроса=ТекущийТекст.ПолучитьСтроку(Индекс);
		
		Если Врег(СокрЛП(СтрокаЗапроса))="ИЗ" Тогда
			ЕстьИсточник=Истина;
		КонецЕсли;
		
		Если ЕстьИсточник Тогда
			ТекстИсточник=ТекстИсточник+"
			|"+СтрокаЗапроса;
		КонецЕсли;	
			
	КонецЦикла;
	
	РабочийТекст=ТекстВыборки+ТекстИсточник;
	Индекс=1;
	
	Для Каждого СтрокаОтбора Из ПостроительИсточника.Отбор Цикл
		
		Если СтрокаОтбора.Использование=Истина Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаОтбора.ЗначениеС) Тогда
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_"+СокрЛП(Выборка.Код)+"_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_"+СокрЛП(Выборка.Код)+"_"+Индекс,СтрокаОтбора.Значение);
				Индекс=Индекс+1;
			Иначе
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_"+СокрЛП(Выборка.Код)+"_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_"+СокрЛП(Выборка.Код)+"_"+Индекс,СтрокаОтбора.ЗначениеС);
				Индекс=Индекс+1;
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_"+СокрЛП(Выборка.Код)+"_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_"+СокрЛП(Выборка.Код)+"_"+Индекс,СтрокаОтбора.ЗначениеПо);
				Индекс=Индекс+1;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	РабочийТекст=СтрЗаменить(РабочийТекст,"&МоментВремени","&ДатаНач");
	РабочийТекст=СтрЗаменить(РабочийТекст,"&НачалоПериода","&ДатаНач");
	РабочийТекст=СтрЗаменить(РабочийТекст,"&КонецПериода","&ДатаКон");
	
	РабочийТекст="
	|ОБЪЕДИНИТЬ ВСЕ
	|"+РабочийТекст;
		
Возврат РабочийТекст;

КонецФункции // ТекстЗапросаПоИсточнику()

// Возвращает текст вложенного запроса для получения результатов строк,
// рассчитываемых на основании других строк бюджета. Порядок расчета строк определяется
// в таблице "ТаблицаСтрок". Сначала рассчитываются только строки, аргументами которых служат
// данные счетов, регистров и внешних источников, затем строки, включающие
// в состав аргументов результаты строк, рассчитанные на предыдущем
// уровне и т.д.
//
// Параметры
//  ТекстУровень: текст - текст запроса, содержащего данные для расчета строк
//  текущего уровня
//  МассивСтрок: массив - строки, для расчета которых будет модифицироваться текст запроса
//  Уровень: текущий уровень расчета строк (сначала рассчитываются строки с максимальным
//  значением уровня, последними - с минимальным)
//  Структура параметров (Структура): структура параметров общего запроса
//
// Возвращаемое значение:
//   ТекстНовыйУровень: текст - текст запроса, включающий расчет строк текущего уровня.
//
Функция ЗапросРасчетПоФормулам(ТекстУровень,МассивСтрок,Уровень,СтруктураПараметров, СтруктураТекстУровень,ВсегоУровней,Периодичность)
	
	ЕстьПериод=?(Периодичность="",Ложь,Истина);
	
	ТекстНовыйУровень="
	|ВЫБРАТЬ";
	
	Если ЕстьПериод Тогда
		ТекстНовыйУровень=ТекстНовыйУровень+"
		|Уровень_"+Уровень+".Период,";
	КонецЕсли;
	
	ТекстНовыйУровень=ТекстНовыйУровень+"
	
	|Уровень_"+Уровень+".СтрокаРасчета,
	|Уровень_"+Уровень+"."+ПоказательОтчета+"
	|ИЗ
	|(ТекстУровень_"+Строка(Уровень+1)+") КАК Уровень_"+Уровень;
	
	Для каждого Строка Из МассивСтрок Цикл
		
		Формула=Строка.Формула;
		ТекстАргументы="";
		//Сформируем строку расчета формулы
		Для Каждого СтрокаАргумент ИЗ Строка.Аргументы Цикл
			
			ТекстАргументы=ТекстАргументы+", 
			|СУММА(Аргумент_"+СокрЛП(СтрокаАргумент.КодАргумента)+") КАК Аргумент_"+СокрЛП(СтрокаАргумент.КодАргумента);
			Формула=СтрЗаменить(Формула,"["+СокрЛП(СтрокаАргумент.КодАргумента)+"]","СтрокаРезультат.Аргумент_"+СокрЛП(СтрокаАргумент.КодАргумента));
			
		КонецЦикла;
		
		ТекстАргументы=Сред(ТекстАргументы,2);
		
		СтруктураПараметров.Вставить("СтрокаРасчета"+СокрЛП(Строка.Код),Строка.СтрокаРасчета.Ссылка);
		
		Запрос=Новый Запрос;
		
		ТекстФормула="
		|ВЫБРАТЬ";
		
		Если ЕстьПериод Тогда
			ТекстФормула=ТекстФормула+"
			|Формула_"+СокрЛП(Строка.Код)+".Период,";
		КонецЕсли;
		
		ТекстФормула=ТекстФормула+"
		|&СтрокаРасчета"+СокрЛП(Строка.Код)+" КАК СтрокаРасчета,
		|"+ТекстАргументы+"
		|ИЗ
		|(";
		
		ИндексАргумента=1;
		ТекстЗапросАргументы="";
		Для каждого СтрокаАргумент Из Строка.Аргументы Цикл
		
			ТекстЗапросАргументы=ТекстЗапросАргументы+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ";
			
			Если ЕстьПериод Тогда
				ТекстЗапросАргументы=ТекстЗапросАргументы+"
				|Аргумент_"+СокрЛП(Строка.Код)+"_"+СокрЛП(СтрокаАргумент.КодАргумента)+".Период,";
			КонецЕсли;
			
			ТекстПоказателиАргумент="";
			ИндексТекАргумент=1;
			Для каждого ТекАргумент Из Строка.Аргументы Цикл
			     ТекстПоказателиАргумент=ТекстПоказателиАргумент+",
				|"+?(ИндексТекАргумент=ИндексАргумента,"Аргумент_"+СокрЛП(Строка.Код)+"_"+СокрЛП(СтрокаАргумент.КодАргумента)+"."+ПоказательОтчета,"0")+" КАК Аргумент_"+СокрЛП(ТекАргумент.КодАргумента);
				ИндексТекАргумент=ИндексТекАргумент+1;
			КонецЦикла;
			
			ТекстЗапросАргументы=ТекстЗапросАргументы+Сред(ТекстПоказателиАргумент,2);
			ТекстЗапросАргументы=ТекстЗапросАргументы+"
			|ИЗ
			|(ТекстУровень_"+Строка(Уровень+1)+") КАК Аргумент_"+СокрЛП(Строка.Код)+"_"+СокрЛП(СтрокаАргумент.КодАргумента)+"
			|ГДЕ Аргумент_"+СокрЛП(Строка.Код)+"_"+СокрЛП(СтрокаАргумент.КодАргумента)+".СтрокаРасчета В ИЕРАРХИИ (&Параметр_"+СокрЛП(Строка.Код)+"_"+СокрЛП(СтрокаАргумент.КодАргумента)+")";
			
			СтруктураПараметров.Вставить("Параметр_"+СокрЛП(Строка.Код)+"_"+СокрЛП(СтрокаАргумент.КодАргумента),СтрокаАргумент.СтрокаАргумента);
					
			ИндексАргумента=ИндексАргумента+1;
			
		КонецЦикла;
		
		ТекстФормула=ТекстФормула+Сред(ТекстЗапросАргументы,16)+") КАК Формула_"+СокрЛП(Строка.Код);
		
		Если ЕстьПериод Тогда
			ТекстФормула=ТекстФормула+"
			|СГРУППИРОВАТЬ ПО
			|Формула_"+СокрЛП(Строка.Код)+".Период";
		КонецЕсли;
			
		// Подставляем в основной текст запроса тексты вложенных.
		Для Индекс=Уровень+1 По ВсегоУровней+1 Цикл
			
			ТекстФормула=СтрЗаменить(ТекстФормула,"ТекстУровень_"+Индекс,СтруктураТекстУровень["ТекстУровень_"+Индекс]);
			
		КонецЦикла;	
		
		Запрос.Текст=ТекстФормула;
		
		Для каждого Параметр Из СтруктураПараметров Цикл
		
			Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
			
		КонецЦикла; 
					
		Результат=Запрос.Выполнить().Выгрузить();
					
		Если Результат.Количество()>0 Тогда
			
			КодСтроки=1;
			
			Для каждого СтрокаРезультат Из Результат Цикл
			
				ТекстНовыйУровень=ТекстНовыйУровень+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ";
				
				Если ЕстьПериод Тогда
					ТекстНовыйУровень=ТекстНовыйУровень+"
					|&Формула_"+СокрЛП(Строка.Код)+"_"+КодСтроки+" КАК Период,";
				КонецЕсли;
				
				ТекстНовыйУровень=ТекстНовыйУровень+"
				|&СтрокаРасчета"+СокрЛП(Строка.Код)+" КАК СтрокаРасчета,
				|&"+ПоказательОтчета+"_"+СокрЛП(Строка.Код)+"_"+КодСтроки+" КАК "+ПоказательОтчета+"
				|ИЗ Константы КАК Константы";
				
				Если ЕстьПериод Тогда
					
					СтруктураПараметров.Вставить("Формула_"+СокрЛП(Строка.Код)+"_"+КодСтроки,СтрокаРезультат.Период);
					
				КонецЕсли;
				
				Попытка
					
					РезультатФормула=Вычислить(Формула);
					
				Исключение
					
					РезультатФормула=0;
					Сообщить("Деление на 0: "+Строка.СтрокаРасчета+", "+?(ЕстьПериод,СтрокаРезультат.Период,""));
				 
				 КонецПопытки;
				 
				 СтруктураПараметров.Вставить(ПоказательОтчета+"_"+СокрЛП(Строка.Код)+"_"+КодСтроки,РезультатФормула);
				 
				 КодСтроки=КодСтроки+1;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстНовыйУровень;
	
КонецФункции // ЗапросРасчетПоФормулам()

// Формирует текст запроса по строкам, которые формируются на основе остатков и оборотов по плану счетов
//
// Параметры
//  СтруктураПараметров:  – Структура– структура параметров для построителя
//                 <продолжение описания параметра>
//  Периодичность: – строка  - периодичность выборки данных.
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   ТекстЗапросаПоСчетам (текст): текст в общий запрос
//
Функция ЗапросРасчетПоСчетам(СтруктураПараметров,Периодичность)
	
	ЕстьПериод=?(Периодичность="",Ложь,Истина);
	
	ТекстЗапросаПоСчетам="";
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиРасчета.Ссылка КАК СтрокаРасчета,
	|	СтрокиРасчета.Код КАК Код,
	|	СтрокиРасчета.Измерение КАК Измерение,
	|	СтрокиРасчета.Формула КАК Формула
	|ИЗ
	|	Справочник.СтрокиФинансовогоРасчета КАК СтрокиРасчета
	|
	|ГДЕ
	|	СтрокиРасчета.Владелец = &Владелец И
	|	СтрокиРасчета.ВидСтроки = &ДанныеСчетов";
				  
	Запрос.УстановитьПараметр("Владелец",ВидФинансовогоРасчета);
	Запрос.УстановитьПараметр("ДанныеСчетов",Перечисления.ВидыСтрокФинансовогоРасчета.ОстаткиОборотыПоПлануСчетов);

	ВыборкаСтроки=Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСтроки.Следующий() Цикл
		
		ТекстЗапросаПоСчетам=ТекстЗапросаПоСчетам+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ";
		
		Если ЕстьПериод Тогда
			ТекстЗапросаПоСчетам=ТекстЗапросаПоСчетам+"	
			|	БюджетированиеОстаткиИОбороты.Период КАК Период,";
		КонецЕсли;
		
	    ТекстЗапросаПоСчетам=ТекстЗапросаПоСчетам+"
		|	&СтрокаРасчета_"+ВыборкаСтроки.Код+" КАК СтрокаРасчета,
		|	БюджетированиеОстаткиИОбороты."+ПоказательОтчета+ВыборкаСтроки.Формула+" КАК "+ПоказательОтчета+"
		|ИЗ
		|	РегистрБухгалтерии.Бюджетирование.ОстаткиИОбороты(&ДатаНач,&ДатаКон,"+Периодичность+", ,Счет В ИЕРАРХИИ (&Счет_"+СокрЛП(ВыборкаСтроки.Код)+"), ,Сценарий = &Сценарий) КАК БюджетированиеОстаткиИОбороты";				
		
        СтруктураПараметров.Вставить("Счет_"+СокрЛП(ВыборкаСтроки.Код),ВыборкаСтроки.Измерение);
		СтруктураПараметров.Вставить("СтрокаРасчета_"+СокрЛП(ВыборкаСтроки.Код),ВыборкаСтроки.СтрокаРасчета.Ссылка);
		
	КонецЦикла;
				  
	Возврат Сред(ТекстЗапросаПоСчетам,16);

КонецФункции // ЗапросРасчетПоСчетам()

// Формирует текст запроса по строкам, которые формируются на основе оборотов по регистру бюджетирования
//
// Параметры
//  СтруктураПараметров:  – Структура– структура параметров для построителя
//                 <продолжение описания параметра>
//  Периодичность: – строка  - периодичность выборки данных.
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   ТекстЗапросаПоСчетам (текст): текст в общий запрос
//
Функция ЗапросРасчетПоОборотам(СтруктураПараметров,Периодичность)
	
	ЕстьПериод=?(Периодичность="",Ложь,Истина);
		
	ТекстЗапросаПоОборотам="";
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиРасчета.Ссылка КАК СтрокаРасчета,
	|	СтрокиРасчета.Код КАК Код,
	|	СтрокиРасчета.Измерение КАК Измерение,
	|	СтрокиРасчета.Формула КАК Формула
	|ИЗ
	|	Справочник.СтрокиФинансовогоРасчета КАК СтрокиРасчета
	|
	|ГДЕ
	|	СтрокиРасчета.Владелец = &Владелец И
	|	СтрокиРасчета.ВидСтроки = &ДанныеРегистров";
				  
	Запрос.УстановитьПараметр("Владелец",ВидФинансовогоРасчета);
	Запрос.УстановитьПараметр("ДанныеРегистров",Перечисления.ВидыСтрокФинансовогоРасчета.ОборотыПоСтатьеОборотов);

	ВыборкаСтроки=Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСтроки.Следующий() Цикл
		
		ТекстЗапросаПоОборотам=ТекстЗапросаПоОборотам+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ";
		
		Если ЕстьПериод Тогда
			ТекстЗапросаПоОборотам=ТекстЗапросаПоОборотам+"
			|	ОборотыБюджетовОбороты.Период КАК Период,";
		КонецЕсли;
		
		ТекстЗапросаПоОборотам=ТекстЗапросаПоОборотам+"
		|	&СтрокаРасчета_"+СокрЛП(ВыборкаСтроки.Код)+" КАК СтрокаРасчета,
		|	СУММА(ОборотыБюджетовОбороты."+ПоказательОтчета+"Оборот) КАК "+ПоказательОтчета+"
		|ИЗ
		|	РегистрНакопления.ОборотыБюджетов.Обороты(&ДатаНач,&ДатаКон,"+Периодичность+",Сценарий=&Сценарий И (СтатьяОборотов В ИЕРАРХИИ (&Статья_"+СокрЛП(ВыборкаСтроки.Код)+"))) КАК ОборотыБюджетовОбороты";
		
		Если ЕстьПериод Тогда
			ТекстЗапросаПоОборотам=ТекстЗапросаПоОборотам+"
			|СГРУППИРОВАТЬ ПО ОборотыБюджетовОбороты.Период";
		КонецЕсли;
		
        СтруктураПараметров.Вставить("Статья_"+СокрЛП(ВыборкаСтроки.Код),ВыборкаСтроки.Измерение);
		СтруктураПараметров.Вставить("СтрокаРасчета_"+СокрЛП(ВыборкаСтроки.Код),ВыборкаСтроки.СтрокаРасчета.Ссылка);
		
	КонецЦикла;
				  
	Возврат Сред(ТекстЗапросаПоОборотам,16);

КонецФункции // ЗапросРасчетПоОборотам()

// Получает список строк бюджета, значения которых являются аргументами для формул строк бюджета
// из списка "СписокУровень"
//
Функция ПолучитьСледующийУровень(СписокУровень)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СтрокиРасчета.Ссылка КАК СтрокаРасчета,
	             |	СтрокиРасчета.Код КАК Код,
	             |	СтрокиРасчета.Формула КАК Формула,
	             |	СтрокиРасчета.СтрокиРасчетаДляФормулы.(
	             |		СтрокаРасчета.Код КАК КодАргумента,
	             |		СтрокаРасчета.Ссылка КАК СтрокаАргумента
	             |	) КАК Аргументы
	             |ИЗ
	             |	Справочник.СтрокиФинансовогоРасчета КАК СтрокиРасчета
	             |
	             |ГДЕ
	             |	СтрокиРасчета.Владелец = &Владелец И
	             |	(НЕ(СтрокиРасчета.Ссылка В (&СписокУровень))) И
	             |	(НЕ(СтрокиРасчета.Ссылка В (
				 |		ВЫБРАТЬ РАЗЛИЧНЫЕ 	
				 |			СтрокиРасчетаСтрокиРасчетаДляФормулы.СтрокаРасчета.Ссылка КАК СтрокаРасчета 
				 |		ИЗ Справочник.СтрокиФинансовогоРасчета.СтрокиРасчетаДляФормулы КАК СтрокиРасчетаСтрокиРасчетаДляФормулы 
				 |		ГДЕ НЕ(СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка В (&СписокУровень)) 
				 |			И СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка.Владелец = &Владелец ))) 
				 |			И СтрокиРасчета.ВидСтроки = &ВидСтроки";
	
	
	Запрос.УстановитьПараметр("ВидСтроки",Перечисления.ВидыСтрокФинансовогоРасчета.РасчетПоДругимСтрокамОтчета);
	Запрос.УстановитьПараметр("СписокУровень",СписокУровень);
	Запрос.УстановитьПараметр("Владелец",ВидФинансовогоРасчета);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьСледующийУровень() 

// Добавляет строки в таблицу порядка расчета
//
Процедура ДобавитьВРасчет(ВыборкаИзЗапроса,ТаблицаСтрок,Уровень)
	
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		
		НоваяСтрока=ТаблицаСтрок.Добавить();
		НоваяСтрока.Код=ВыборкаИзЗапроса.Код;
		НоваяСтрока.СтрокаРасчета=ВыборкаИзЗапроса.СтрокаРасчета;
		НоваяСтрока.Формула=ВыборкаИзЗапроса.Формула;
		
		НоваяСтрока.Аргументы.Колонки.Добавить("КодАргумента");
		НоваяСтрока.Аргументы.Колонки.Добавить("СтрокаАргумента");
		
		АргументыЗапроса=ВыборкаИзЗапроса.Аргументы.Выбрать();
		Пока АргументыЗапроса.Следующий() Цикл
			НовыйАргумент=НоваяСтрока.Аргументы.Добавить();
			НовыйАргумент.КодАргумента=АргументыЗапроса.КодАргумента;
			НовыйАргумент.СтрокаАргумента=АргументыЗапроса.СтрокаАргумента;
		КонецЦикла;
		
		НоваяСтрока.Уровень=Уровень;
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура заполнения начальных настроек отчета
Процедура СформироватьНастройкиОтчета(ПостроительОтчета,Периодичность)
	
	Показатели.Очистить();
	
	СтруктураПараметров=Новый Структура;
			
	СтруктураПараметров.Вставить("Владелец",ВидФинансовогоРасчета);
	СтруктураПараметров.Вставить("Сценарий",Сценарий);
	СтруктураПараметров.Вставить("ДатаНач",ДатаНач);
	СтруктураПараметров.Вставить("ДатаКон",ДатаКон);

	ТекстУровень	=ЗапросРасчетПоОборотам(СтруктураПараметров,Периодичность);
	ТекстСчета		=ЗапросРасчетПоСчетам(СтруктураПараметров,Периодичность);
	
	Если Не ПустаяСтрока(СокрЛП(ТекстСчета)) Тогда
		
		Если ПустаяСтрока(СокрЛП(ТекстУровень)) Тогда
			ТекстУровень=ТекстСчета;
		Иначе
			ТекстУровень=ТекстУровень+"
			|ОБЪЕДИНИТЬ ВСЕ
			|"+ТекстСчета;	
		КонецЕсли;
		
	КонецЕсли;
				
	//Выбираем строки, значения которых берутся из внешних источников.
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	СтрокиРасчета.Ссылка КАК СтрокаРасчета,
	             |	СтрокиРасчета.Код КАК Код,
	             |	СтрокиРасчета.Формула КАК ПоказательОтчета,
	             |	СтрокиРасчета.Измерение.ТекстЗапроса КАК ТекстЗапроса,
	             |	СтрокиРасчета.Измерение.НастройкиПостроителя КАК НастройкиПостроителя,
	             |	ИсточникиДанныхДляРасчетовБюджетирования.ИзмеренияИсточника.(
	             |		ИзмерениеБюджетирования,
	             |		ПутьКДанным,
				 |		ИмяПоляИсточника
	             |	)
	             |ИЗ
	             |	Справочник.СтрокиФинансовогоРасчета КАК СтрокиРасчета
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетовБюджетирования КАК ИсточникиДанныхДляРасчетовБюджетирования
	             |		ПО СтрокиРасчета.Измерение = ИсточникиДанныхДляРасчетовБюджетирования.Ссылка
	             |
	             |ГДЕ
	             |	СтрокиРасчета.Владелец = &Владелец И
	             |	СтрокиРасчета.ВидСтроки = &ВидСтроки";
				 
	Запрос.УстановитьПараметр("Владелец",ВидФинансовогоРасчета);
	Запрос.УстановитьПараметр("ВидСтроки",Перечисления.ВидыСтрокФинансовогоРасчета.ИсточникиДанныхДляРасчетов);
		
	Выборка=Запрос.Выполнить().Выбрать();
	ТекстИсточники="";
	
	Пока Выборка.Следующий() Цикл
		ТекстИсточники=ТекстИсточники+ТекстЗапросаПоИсточнику(	Выборка,
																Периодичность, 
																СтруктураПараметров);
	КонецЦикла;
															
	ТекстИсточники=Сред(ТекстИсточники,16);
	
	Если Не ПустаяСтрока(СокрЛП(ТекстИсточники)) Тогда
		
		Если ПустаяСтрока(СокрЛП(ТекстУровень)) Тогда
			ТекстУровень=ТекстИсточники;
		Иначе	
			
			ТекстУровень=ТекстУровень+"
			|ОБЪЕДИНИТЬ ВСЕ 
			|"+ТекстИсточники;
		КонецЕсли;
		
	КонецЕсли;	
	// Определяем порядок расчета строк бюджета.
	Уровень=0;
	
	МассивТаблицаЗначений        = Новый Массив;
	МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);
		
	ТаблицаСтрок=Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("Код");
	ТаблицаСтрок.Колонки.Добавить("СтрокаРасчета");
	ТаблицаСтрок.Колонки.Добавить("Формула");
	ТаблицаСтрок.Колонки.Добавить("Аргументы",ОписаниеТиповТаблицаЗначений);
	ТаблицаСтрок.Колонки.Добавить("Уровень");

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиРасчета.Ссылка КАК СтрокаРасчета,
	|	СтрокиРасчета.Код КАК Код,
	|	СтрокиРасчета.Формула КАК Формула,
	|	СтрокиРасчета.СтрокиРасчетаДляФормулы.(
	|		СтрокаРасчета.Код КАК КодАргумента,
	|		СтрокаРасчета.Ссылка КАК СтрокаАргумента
	|	) КАК Аргументы
	|ИЗ
	|	Справочник.СтрокиФинансовогоРасчета КАК СтрокиРасчета
	|
	|ГДЕ
	|	СтрокиРасчета.Владелец = &Владелец И
	|	(НЕ(СтрокиРасчета.Ссылка В 
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ 	
	|					СтрокиРасчетаСтрокиРасчетаДляФормулы.СтрокаРасчета.Ссылка КАК СтрокаРасчета 
	|						ИЗ Справочник.СтрокиФинансовогоРасчета.СтрокиРасчетаДляФормулы КАК СтрокиРасчетаСтрокиРасчетаДляФормулы 
	|					ГДЕ 	СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка.Владелец = &Владелец ))) И
	|	СтрокиРасчета.ВидСтроки = &ВидСтроки";
	
	Запрос.УстановитьПараметр("Владелец",ВидФинансовогоРасчета);
	Запрос.УстановитьПараметр("ВидСтроки",Перечисления.ВидыСтрокФинансовогоРасчета.РасчетПоДругимСтрокамОтчета);
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество()>0 Тогда
		
		Уровень=1;
		ДобавитьВРасчет(Выборка,ТаблицаСтрок,Уровень);
		
		СписокУровень=Новый СписокЗначений;
		СписокУровень.ЗагрузитьЗначения(ТаблицаСтрок.ВыгрузитьКолонку("СтрокаРасчета"));
		
		ВыбСледующийУровень=ПолучитьСледующийУровень(СписокУровень);
		
		Пока ВыбСледующийУровень.Количество()>0 Цикл
			
			Уровень=Уровень+1;
			ДобавитьВРасчет(ВыбСледующийУровень,ТаблицаСтрок,Уровень);	
			СписокУровень.ЗагрузитьЗначения(ТаблицаСтрок.ВыгрузитьКолонку("СтрокаРасчета"));
			
			ВыбСледующийУровень=ПолучитьСледующийУровень(СписокУровень);
			
		КонецЦикла;
		
		ВсегоУровней=Уровень;
		
		// В структуре хранятся промежуточные тексты вложенных запросов.
		СтруктураТекстУровень=Новый Структура;
		СтруктураТекстУровень.Вставить("ТекстУровень_"+Строка(Уровень+1),ТекстУровень);
		
		//Выполняем проходы расчетов по формулам и формируем текст отчета
		Пока Уровень>0 Цикл
			
			МассивСтрок=ТаблицаСтрок.НайтиСтроки(Новый Структура("Уровень",Уровень));
			ТекстУровень=ЗапросРасчетПоФормулам(ТекстУровень,МассивСтрок,Уровень,СтруктураПараметров,СтруктураТекстУровень,ВсегоУровней,Периодичность);
			СтруктураТекстУровень.Вставить("ТекстУровень_"+Строка(Уровень),ТекстУровень);
			Уровень=Уровень-1;
			
		КонецЦикла;
		
		// Подставляем в основной текст запроса тексты вложенных.
		Для Индекс=2 По ВсегоУровней+1 Цикл
			
			ТекстУровень=СтрЗаменить(ТекстУровень,"ТекстУровень_"+Индекс,СтруктураТекстУровень["ТекстУровень_"+Индекс]);
			
		КонецЦикла;
		
	КонецЕсли;
			
	// Формируем финальный текст запроса.
	ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|СправочникРасчет.Ссылка КАК СтрокаРасчета,
	|СправочникРасчет.Код КАК Код,
	|ВЫБОР КОГДА СправочникРасчет.ВидСтроки=&Формула ТОГДА
	|	СправочникРасчет.Формула 
	| ИНАЧЕ &ПустаяСтрока КОНЕЦ КАК Формула,";
	Если Не ПустаяСтрока(Периодичность) Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|НачалоПериода(ДанныеПоСтрокам.Период,"+Периодичность+") КАК Период"+Периодичность+",";
		
	КонецЕсли;
			
	ТекстЗапроса=ТекстЗапроса+"	
	|ДанныеПоСтрокам."+ПоказательОтчета+"
	|ИЗ  Справочник.СтрокиФинансовогоРасчета Как СправочникРасчет
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	 ("+ТекстУровень+") КАК ДанныеПоСтрокам
	|ПО СправочникРасчет.Ссылка=ВЫРАЗИТЬ(ДанныеПоСтрокам.СтрокаРасчета КАК Справочник.СтрокиФинансовогоРасчета).Ссылка
	|ГДЕ СправочникРасчет.Владелец=&Владелец
	|УПОРЯДОЧИТЬ ПО СправочникРасчет.Код
	|ИТОГИ СУММА("+ПоказательОтчета+") ПО
	|СправочникРасчет.Ссылка";
	
	Если Не ПустаяСтрока(Периодичность) Тогда
		
		ТекстЗапроса=ТекстЗапроса+",
		|НачалоПериода(ДанныеПоСтрокам.Период,"+Периодичность+") КАК Период"+Периодичность;
		
	КонецЕсли;
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	Для каждого Параметр Из СтруктураПараметров Цикл
	
		ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
	
	КонецЦикла;
	
	ПостроительОтчета.Параметры.Вставить("Формула",Перечисления.ВидыСтрокФинансовогоРасчета.РасчетПоДругимСтрокамОтчета);
	ПостроительОтчета.Параметры.Вставить("ПустаяСтрока","");
		
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля=ПоказательОтчета;
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[ПоказательОтчета]; // Представление показателя в отчете
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";        // Строка форматирования
	
	ТабПоказатель= Показатели.Добавить();
	ТабПоказатель.Имя           = ПоказательОтчета;
	ТабПоказатель.Представление = СтруктураПредставлениеПолей[ПоказательОтчета];
	ТабПоказатель.Использование = Истина;
			
	ПостроительОтчета.ЗаполнитьНастройки();
			
	Если Не ПустаяСтрока(Периодичность) Тогда
		ПостроительОтчета.ДоступныеПоля["Период"+Периодичность].Порядок=Истина;
		ПостроительОтчета.Порядок.Добавить("Период"+Периодичность);
	КонецЕсли;
		
	ПостроительОтчета.ВыводитьОбщиеИтоги=Ложь;
	ПостроительОтчета.ВыводитьДетальныеЗаписи=Ложь;
	ПостроительОтчета.Выполнить();
					
КонецПроцедуры // СформироватьНастройкиОтчета()

// Выполняет настройку отчета
//
// Параметры: нет
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
		
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	
	мНазваниеОтчета="Финансовый расчет: "+?(ВидФинансовогоРасчета.Пустая(),"не указан вид расчета",ВидФинансовогоРасчета);
	
	мТаблицаПоказатели  = Новый ТаблицаЗначений;
	мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);
	
	мСтруктураСвязиПоказателейИИзмерений = Новый Структура;
	мСоответствиеНазначений = Новый Соответствие;
	мРежимВводаПериода = 0;

		
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
//

// Возвращает итог по таблице общих итогов запроса (при развороте по периодам)
// Параметры:
// СтрокаРасчета - элемент справочника "СтрокиРасчета"
// Имя - имя показателя.
// Возвращаемое значение: значение итога по показателю.

Функция ПолучитьИтог(СтрокаРасчета, Имя);
	
	СтрокаПоиска=ТабОбщихИтогов.Найти(СтрокаРасчета,"СтрокаРасчета");
	Если Не СтрокаПоиска=Неопределено Тогда
		Возврат СтрокаПоиска[Имя];
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьИтог() 

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	Макет = ПолучитьМакет("Макет");
	ДокументРезультат.Очистить();
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Шапка"));
	
	// Вывод шапки отчета
	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Шапка" );
	
	ОбластьЗначение.Параметры.ЗаголовокОтчета = мНазваниеОтчета;
	
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
		ОбластьЗначение.Параметры.Период = "Период: без ограничения ";
	Иначе
		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
			ОбластьЗначение.Параметры.Период = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
			+ " - " + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
		Иначе
			ОбластьЗначение.Параметры.Период = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон));
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьЗначение.Параметры.Показатели="Показатель: "+?(ПоказательОтчета="","не указан",СтруктураПредставлениеПолей[ПоказательОтчета]);
	
	ДокументРезультат.Присоединить(ОбластьЗначение);
		
	Если Не ЕстьПараметрыНастройки() ИЛИ ТолькоЗаголовок Тогда
		
		Возврат;
		
	КонецЕсли;
		
	// Получаем данные для расчета
	
			
	Если Не ПустаяСтрока(ГруппировкаГоризонтальная) Тогда
		
		Периодичность=СписокПериодичность[ГруппировкаГоризонтальная];
		ГруппировкаКолонки="Период"+Периодичность;
	
		// Основной построитель отчета
		ПостроительОтчета=Новый ПостроительОтчета;
		СформироватьНастройкиОтчета(ПостроительОтчета,Периодичность);
		
		// Построитель для итоговой строки
		ПостроительИтог=Новый ПостроительОтчета;
		СформироватьНастройкиОтчета(ПостроительИтог,"");
		ТабОбщихИтогов=ПостроительИтог.Результат.Выгрузить();
		
	Иначе
		
		Периодичность="";
		ГруппировкаКолонки="";
		
		// Основной построитель отчета
		ПостроительОтчета=Новый ПостроительОтчета;
		СформироватьНастройкиОтчета(ПостроительОтчета,"");
		
	КонецЕсли;
	
	мЗначимыеГруппировкиГор.Очистить();
		
	Если НЕ ГруппировкаКолонки="" Тогда
		
		Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
			
			ТекущаяСтрока=ПостроительОтчета.ИзмеренияСтроки[Сч];
			
			Если ТекущаяСтрока.Имя=ГруппировкаКолонки Тогда
				
				ПутьКДанным = ТекущаяСтрока.ПутьКДанным;
				
				ПостроительОтчета.ИзмеренияСтроки.Удалить(ТекущаяСтрока);
				ПостроительОтчета.ИзмеренияКолонки.Добавить(ПутьКДанным, , ТипИзмеренияПостроителяОтчета.Элементы);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
	
	Если ПостроительОтчета.ИзмеренияКолонки.Количество()>0 Тогда
		
		ТекущаяКолонка=ПостроительОтчета.ИзмеренияКолонки[0];
		ПутьКДанным = ТекущаяКолонка.ПутьКДанным;
		
		ГруппировкаКолонки=ТекущаяКолонка.Имя;
		
		ПостроительОтчета.ИзмеренияКолонки.Удалить(ТекущаяКолонка);
		ПостроительОтчета.ИзмеренияСтроки.Добавить(ПутьКДанным, , ТипИзмеренияПостроителяОтчета.Элементы);
		
	КонецЕсли;
	
	СтруктураВыводГруппировокВерт = Новый Структура;
	СтруктураВыводГруппировокГор = Новый Структура;
	МассивГруппировки    = Новый Массив;

	// сдвиг уровня
	СтруктураСдвигУровняГруппировок = Новый Структура;

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	ВсегоГруппировок = 0;
	
	КолГруппировокБезИтогов = 0;
	Массив = Новый Массив;

	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		ВсегоГруппировок = ВсегоГруппировок + 1;
		СтруктураСдвигУровняГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, 0);
		МассивГруппировки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
		Если Сч=ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Тогда
			СтруктураВыводГруппировокГор.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);
		Иначе
			СтруктураВыводГруппировокВерт.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);
		КонецЕсли;
		
	КонецЦикла;

	// Выполнение сформированного запроса
	Результат = ПостроительОтчета.Результат;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбщийОтступ", Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировки",   Макет.ПолучитьОбласть("Значение|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировкиГор",   Макет.ПолучитьОбласть("План|ШапкаГруппы"));

	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("План|Строка"));
	СтруктураПараметров.Вставить("ТабДок",    ДокументРезультат);

	МассивПоказатели=Новый Массив;
	
	Для каждого Показатель Из Показатели Цикл
	
		Если Показатель.Использование Тогда
			МассивПоказатели.Добавить(Показатель.Имя);
		КонецЕсли;
	
	КонецЦикла; 
		
	СтруктураПараметров.Вставить("МассивПоказатели",МассивПоказатели);

	СтруктураПараметров.Вставить("ВсегоГруппировок", 			ВсегоГруппировок);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировокВерт", 	СтруктураВыводГруппировокВерт);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировокГор", 	СтруктураВыводГруппировокГор);

	СтруктураПараметров.Вставить("ГруппировкаКолонки", 	ГруппировкаКолонки);
	СтруктураПараметров.Вставить("ГруппировкаКолонкиНачало", 	ГруппировкаКолонки);

	СтруктураПараметров.Вставить("МассивГруппировки", 	МассивГруппировки);

	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	СтруктураПараметров.Вставить("ЦветаГруппировок", Новый Структура);
	СтруктураПараметров.Вставить("Периодичность",Строка(Сценарий.Периодичность));
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СтруктураПараметров.ЦветаГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Цвет(240 - (ПостроительОтчета.ИзмеренияСтроки.Количество() - Сч + 1) * 10, 248, 255));
	КонецЦикла;
	
	// наклонный шрифт для групп
	СтруктураПараметров.Вставить("ШрифтГрупп", Новый Шрифт(Макет.Область("Строка|План").Шрифт,,,,Истина));

	// форматная строка для вывода показателей
	СтруктураПараметров.Вставить("ФорматПоказателей", 			Новый Структура);
	Для Каждого Строка Из Показатели Цикл
		МетаданныеРесурса = 0;
		ФорматнаяСтрока = "";

		Нстр = мТаблицаПоказатели.Найти(Строка.Имя, "ИмяПоля");
		Если Не (Нстр = Неопределено) Тогда
			ФорматнаяСтрока = НСтр.ФорматнаяСтрока;
		КонецЕсли;

		СтруктураПараметров.ФорматПоказателей.Вставить(Строка.Имя, ФорматнаяСтрока);
	КонецЦикла;

	мГруппировокПоГоризонтали=0;

		
	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;
		
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаГруппы"));
	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаГруппы");

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьИтог = Макет.ПолучитьОбласть("ШапкаГруппы|Итог");

	Для Каждого Показатель Из МассивПоказатели Цикл
		ДокументРезультат.Присоединить(ОбластьИтог);
	КонецЦикла;	

	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы-МассивПоказатели.Количество()+1, 
	ДокументРезультат.ВысотаТаблицы,  ДокументРезультат.ШиринаТаблицы).Объединить();

	Если НЕ ПустаяСтрока(ГруппировкаКолонки) Тогда

        ВывестиШапку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,ГруппировкаКолонки,"Все"), СтруктураПараметров, 0);

	КонецЕсли;

	Если МассивПоказатели.Количество()>1 Тогда

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаПоказатели"));
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаПоказатели");

		ДокументРезультат.Присоединить(ОбластьЗначение);

		ОбластьПоказатели=Макет.ПолучитьОбласть("План|ШапкаПоказатели");

		Для Индекс=1 по мГруппировокПоГоризонтали+1 Цикл
			Для Каждого Строка Из Показатели Цикл
				Если Строка.Использование Тогда
					ОбластьПоказатели.Параметры.Показатель=Строка.Представление;
					ДокументРезультат.Присоединить(ОбластьПоказатели);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы,2).Объединить();

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы,2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

	Иначе

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
		
	КонецЕсли;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;
	ДокументРезультат.ФиксацияСлева = 4;
	
	Если ТолькоЗаголовок Тогда
		Возврат;
	КонецЕсли;
				
	РезультатСтатьи=ПостроительОтчета.Результат;
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	ВывестиВыборку(РезультатСтатьи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0, Новый Массив);

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Вывод подвала отчета
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Подвал"));

	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Подвал");

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьПоказатель = Макет.ПолучитьОбласть("План|Подвал");

	Для Индекс=1 по мГруппировокПоГоризонтали+1 Цикл
		Для Каждого Показатель Из МассивПоказатели Цикл
			ДокументРезультат.Присоединить(ОбластьПоказатель);
		КонецЦикла;	
	КонецЦикла;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;
	СтруктураНастроекОтчета.Вставить("ИмяОтчета", мИмяОтчета);

	Для Каждого Реквизит Из Метаданные.Отчеты.ФинансовыйРасчет.Реквизиты Цикл
		СтруктураНастроекОтчета.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из Метаданные.Отчеты.ФинансовыйРасчет.ТабличныеЧасти Цикл
		СтруктураНастроекОтчета.Вставить(ТабличнаяЧасть.Имя, ЭтотОбъект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	ДокументРезультат.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.Автомасштаб=Истина;
		
КонецПроцедуры

// Вывод строку шапки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	ВыборкаГоризонтальная - выборка горизонтальная из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ЗначениеВыборкиДанные - строка, заголовок вертикальной области данных
//
Процедура ВывестиСтрокуШапки(ВыборкаГоризонтальная, СтруктураПараметров, Номер)

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировкиГор   = СтруктураПараметров.ЗначениеГруппировкиГор;

	СтруктураВыводГруппировокГор = СтруктураПараметров.СтруктураВыводГруппировокГор;

	УровеньЗаписи   = ВыборкаГоризонтальная.Уровень();
	СдвигУровня     = 0;

	ИмяГруппировки  = ВыборкаГоризонтальная.Группировка();

	ТабДок = СтруктураПараметров.ТабДок;

	ЗначениеГруппировки = "";
	МассивПоказатели=СтруктураПараметров.МассивПоказатели;
	Периодичность=СтруктураПараметров.Периодичность;

	ЗначениеРасшифровки = Новый Структура;

	ИдЗначимойГруппировкиГор="";

	ТипЗаписиВыборки = ВыборкаГоризонтальная.ТипЗаписи();

	МассивВыводГруппировок = Новый Массив;

	ИмяГруппировки  = ВыборкаГоризонтальная.Группировка();

	МассивВыводГруппировок = Новый Массив;
	
	Если Найти(ИмяГруппировки,"Период")>0 Тогда
		ЗначениеТекущейГруппировки=ОбщегоНазначения.ПолучитьПериодСтрокой(ВыборкаГоризонтальная[ИмяГруппировки],?(ИмяГруппировки="Период",Периодичность,СтрЗаменить(ИмяГруппировки,"Период","")));
	Иначе
		ЗначениеТекущейГруппировки = "" + ВыборкаГоризонтальная[ИмяГруппировки];
	КонецЕсли;
	
	Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
		
		ЗначениеТекущейГруппировки = "Не указано";
		
	КонецЕсли;

	ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;
	 
	ЗначениеРасшифровки.Вставить(ИмяГруппировки, ВыборкаГоризонтальная[ИмяГруппировки]);

	мЗначимыеГруппировкиГор.Добавить(ВыборкаГоризонтальная[ИмяГруппировки]);
	
	ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировки=ЗначениеГруппировки;
 	
	Для Каждого Показатель Из МассивПоказатели Цикл
		ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
	КонецЦикла;	
	ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-МассивПоказатели.Количество()+1, 
	ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

КонецПроцедуры

// Вывод шапки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка				  - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ЗначениеВыборкиДанные - строка, заголовок вертикальной области данных
//
Процедура ВывестиШапку(Выборка, СтруктураПараметров, Номер)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	ГруппировкаКолонки=СтруктураПараметров.ГруппировкаКолонки;

	// Берутся группировки все подряд, 

	Пока Выборка.Следующий() Цикл

		Если Выборка.Группировка()=ГруппировкаКолонки  Тогда  
			ВывестиСтрокуШапки(Выборка, СтруктураПараметров, Номер);
			мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
		КонецЕсли; 

		// Детальные записи не нужны: для последней группировки после итогов по группировке идут 
		// детальные записи
		Если Номер = ВсегоГруппировок - 1
			И Выборка.ТипЗаписи() =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
			Продолжить;
		КонецЕсли;

		ВывестиШапку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1);

	КонецЦикла;

	//СтруктураПараметров.Вставить("ПредыдущееЗначениеГруппировки" + Выборка.Уровень(), Неопределено);

КонецПроцедуры // ВывестиВыборку()

//Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка               - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ТабДок				  - табличный документ
//	Номер		          - число, номер обходимой группировки
//	МассивПредставленийГруппировок - массив, хранящий представления группировок
Процедура РазвернутьСтроку (Выборка, СтруктураПараметров,ТабДок,Номер)

	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;
	ТипЗаписиВыборки = Выборка.ТипЗаписи();
	ГруппировкаКолонки=СтруктураПараметров.ГруппировкаКолонки;
	
	Для каждого ЗначимаяГруппировка Из мЗначимыеГруппировкиГор Цикл
		
		НомерКолонки=1;
		
		Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл
			
			ФорматПоказателя = "ЧЦ = 14; ЧДЦ = 2";
			
			Если НомерКолонки=1 Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			КонецЕсли;
			
			Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
				Если (НомерКолонки>1) Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				КонецЕсли;
			КонецЕсли;
			
			Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			КонецЕсли;
						
			Если Выборка.НайтиСледующий(ЗначимаяГруппировка.Значение,ГруппировкаКолонки) Тогда
				
				Значение=Выборка[Имя];
				
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(Значение, ФорматПоказателя);
				
				Выборка.Сбросить();
				
			Иначе
				
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(0, ФорматПоказателя);		
				
			КонецЕсли;
							
			ТабДок.Присоединить(ОбластьЗначенияПоказателя);
			
			НомерКолонки=НомерКолонки+1;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры 

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиСтроку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки)

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = СтруктураПараметров.ЗначениеГруппировки;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;

	СтруктураВыводГруппировокВерт = СтруктураПараметров.СтруктураВыводГруппировокВерт;
	Периодичность=СтруктураПараметров.Периодичность;

	УровеньЗаписи   = Выборка.Уровень();
	СдвигУровня     = 0;

	ИмяГруппировки  = Выборка.Группировка();

	ТабДок = СтруктураПараметров.ТабДок;

	ЗначениеГруппировки = "";

	ЗначениеРасшифровки = Неопределено;

	ТипЗаписиВыборки = Выборка.ТипЗаписи();

	МассивВыводГруппировок = Новый Массив;

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

		ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
		Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда

			ЗначениеТекущейГруппировки = "Не указано";
		КонецЕсли;

		ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

	ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

		Если Найти(ИмяГруппировки,"Период")>0 Тогда
			ЗначениеТекущейГруппировки=ОбщегоНазначения.ПолучитьПериодСтрокой(Выборка[ИмяГруппировки],?(ИмяГруппировки="Период",Периодичность,СтрЗаменить(ИмяГруппировки,"Период","")));
		Иначе
			ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
		КонецЕсли;

		Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
			Если Найти(ИмяГруппировки,"Свойство")>0 Тогда
				ЗначениеТекущейГруппировки = "Свойство не указано: "+СтруктураПараметров.СвойстваОписание[ИмяГруппировки];
			Иначе
				ЗначениеТекущейГруппировки = "Не указано";
			КонецЕсли;
		КонецЕсли;

		ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

		Если ЗначениеРасшифровки = Неопределено Тогда 
			ЗначениеРасшифровки = Выборка[ИмяГруппировки];
		КонецЕсли;
		
	ИначеЕсли ТипЗаписиВыборки=ТипЗаписиЗапроса.ОбщийИтог Тогда
		
		Возврат;

	КонецЕсли;

	// Для итогов по группировке сдвиг нужно уменьшить на количество пропущенных группировок, 
	// заранее рассчитанное для каждой группировки
	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

        МассивРасшифровки.Добавить(ИмяГруппировки);

		ЗначениеРасшифровкиСтрока = Новый Структура;
		Для Каждого Элемент Из МассивРасшифровки Цикл
			ЗначениеРасшифровкиСтрока.Вставить(Элемент, Выборка[Элемент])
		КонецЦикла;

		СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[ИмяГруппировки];

		// Для итогов по иерархии сдвиг нужно уменьшить на количество пропущенных группировок для предыдущей группировки
		// заранее рассчитанное для каждой группировки
	ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
		СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[СтруктураПараметров.МассивГруппировки[Номер - 1]];
	КонецЕсли;

	УровеньЗаписи = УровеньЗаписи - СдвигУровня;

	ТабДок.Вывести(ОбластьОбщийОтступ, УровеньЗаписи);
	
	ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = СокрЛП(ЗначениеГруппировки);
	ОбластьЗначениеГруппировки.Параметры.Формула=Выборка.Формула;
	ОбластьЗначениеГруппировки.Параметры.Код=СокрЛП(Выборка.Код);
	ОбластьЗначениеГруппировки.Параметры.Расшифровка = ЗначениеРасшифровки;
	ОбластьЗначениеГруппировки.Область().Отступ = УровеньЗаписи;

	ТабДок.Присоединить(ОбластьЗначениеГруппировки);

	// Итоги по группировкам

	НомерКолонки=1;

	Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

		ФорматПоказателя = "ЧЦ = 14; ЧДЦ = 2";

		Если НомерКолонки=1 Тогда
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		КонецЕсли;

		Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
			Если (НомерКолонки>1) Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			КонецЕсли;
		КонецЕсли;

		Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		КонецЕсли;

		Если ПустаяСтрока(СтруктураПараметров.ГруппировкаКолонкиНачало) Тогда
			
			Значение=Выборка[Имя];
			
		Иначе
			
			Значение=ПолучитьИтог(Выборка["СтрокаРасчета"],Имя);
			
		КонецЕсли;
			
	
		ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя = Формат(Значение, ФорматПоказателя);
		
		ТабДок.Присоединить(ОбластьЗначенияПоказателя);

		НомерКолонки=НомерКолонки+1;

	КонецЦикла;

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
		ТабДок.Область(ТабДок.ВысотаТаблицы, 2,ТабДок.ВысотаТаблицы, 2).Шрифт = СтруктураПараметров.ШрифтГрупп;
	КонецЕсли;

	Если НЕ ПустаяСтрока(СтруктураПараметров.ГруппировкаКолонкиНачало) Тогда

		РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,СтруктураПараметров.ГруппировкаКолонкиНачало, "Все"),СтруктураПараметров,ТабДок,0);
		
	КонецЕсли;

	Если ЗначениеРасшифровки=Неопределено Тогда // Нет расшифровки
		Для Индекс=3 по ТабДок.ШиринаТаблицы Цикл
			ТабДок.Область(ТабДок.ВысотаТаблицы,Индекс).Расшифровка=Неопределено;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВывестиСтроку()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиВыборку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	ГруппировкаКолонки=СтруктураПараметров.ГруппировкаКолонки;

	// Берутся группировки все подряд, 

	Пока Выборка.Следующий() Цикл

		Если Выборка.Группировка()<>ГруппировкаКолонки  Тогда  // Не выводим группировку, разворачивающуюся по горизонтали.
			ВывестиСтроку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки);	
		КонецЕсли; 

		// Детальные записи не нужны: для последней группировки после итогов по группировке идут 
		// детальные записи
		Если Номер = ВсегоГруппировок - 1
			И Выборка.ТипЗаписи() =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
			Продолжить;
		КонецЕсли;

        // На каждом уровне используется своя копия структуры расшифровок
		КопияМассивРасшифровки = Новый Массив;
		Для Каждого Элемент Из МассивРасшифровки Цикл
			КопияМассивРасшифровки.Добавить(Элемент);
		КонецЦикла;
		
		ВывестиВыборку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1, КопияМассивРасшифровки);

	КонецЦикла;

	//СтруктураПараметров.Вставить("ПредыдущееЗначениеГруппировки" + Выборка.Уровень(), Неопределено);

КонецПроцедуры // ВывестиВыборку()

НП = Новый НастройкаПериода;

мТаблицаПоказатели  = Новый ТаблицаЗначений;

МассивСтрока = Новый Массив; 
МассивСтрока.Добавить(Тип("Строка"));
КвалификаторСтроки = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

// Инициализация таблиц всех возможных показателей, группировок,  фильтров
мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);

мМассивШиринКолонок = Новый Массив;

мСтруктураСвязиПоказателейИИзмерений = Новый Структура;

мСоответствиеНазначений = Новый Соответствие;

мНазваниеОтчета = "";
мИмяОтчета = Метаданные().Имя;

мВыбиратьИмяРегистра = Истина;
мВыбиратьИспользованиеСвойств = Истина;

мРежимВводаПериода = 0;

мСтруктураНевыводимыхГруппировок = Новый Структура;

ПоказыватьЗаголовок = Истина;

ШиринаТаблицы = 0;

СтруктураФорматаПолей = Новый Структура;
СтруктураФорматаПолей.Вставить("ПериодГод", "ДФ = ""гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодКвартал", "ДФ = ""к"""" квартал"""" гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодМесяц", "ДФ = ""ММММ гггг """"г.""""""");
СтруктураФорматаПолей.Вставить("ПериодНеделя","ДФ = """"""Неделя с"""" дд.ММ.гггг """"""");
СтруктураФорматаПолей.Вставить("ПериодДень", "ДФ = дд.ММ.гггг");

СписокПериодичность=Новый Соответствие;
СписокПериодичность.Вставить("по дням","День");
СписокПериодичность.Вставить("по неделям","Неделя");
СписокПериодичность.Вставить("по месяцам","Месяц");
СписокПериодичность.Вставить("по кварталам","Квартал");
СписокПериодичность.Вставить("по годам","Год");

// Соответствие имен полей в запросе и их представлений в отчете
	СтруктураПредставлениеПолей = Новый Структура(
	"	СтрокаРасчета,
	|	Период,
	|	СуммаСценария,
	|	СуммаУпр",
	"Строка расчета",
	"Период",
	"Сумма в валюте сценария ("+ Сценарий.Валюта+")",
	"Сумма в валюте упр. учета (" + глЗначениеПеременной("ВалютаУправленческогоУчета")+")");

мЗначимыеГруппировкиГор=Новый ("СписокЗначений");

мСтруктураНеСохраняемыеВНастройкеРеквизиты = Новый Структура("ПостроительОтчета");
#КонецЕсли

