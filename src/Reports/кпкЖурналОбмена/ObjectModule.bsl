#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА
 
Функция ПолучитьТаблицуЛогов()
	
	ЕстьОтборПользователь = Ложь;
	ЕстьОтборДата         = Ложь;
	
	Для Каждого ТекОтбор Из УниверсальныйОтчет.ПостроительОтчета.Отбор Цикл
		Если ТекОтбор.Имя = "Пользователь" И ТекОтбор.Использование Тогда
			ЕстьОтборПользователь = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекОтбор Из УниверсальныйОтчет.ПостроительОтчета.Отбор Цикл
		Если ТекОтбор.Имя = "Дата" И ТекОтбор.Использование Тогда
			ЕстьОтборДата= Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтборПользователь Тогда
		СписокАгентов = Новый Массив;
		Если ТипЗнч(УниверсальныйОтчет.ПостроительОтчета.Отбор.Пользователь.Значение) = ТипЗнч(Справочники.Пользователи.ПустаяСсылка()) Тогда
			Если ЗначениеЗаполнено(УниверсальныйОтчет.ПостроительОтчета.Отбор.Пользователь.Значение) Тогда
				СписокАгентов.Добавить(УниверсальныйОтчет.ПостроительОтчета.Отбор.Пользователь.Значение);
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СохраненныеНастройки.Пользователь
				|ИЗ
				|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
				|ГДЕ
				|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
				|	И СохраненныеНастройки.Пользователь = &Пользователь" +
				?(ЕстьОтборДата, "
				|	И СохраненныеНастройки.НаименованиеНастройки МЕЖДУ &ДатаНачала И &ДатаОкончания", "") +
				"
				|
				|СГРУППИРОВАТЬ ПО
				|	СохраненныеНастройки.Пользователь";
				Запрос.УстановитьПараметр("ИмяОбъекта", "кпкОбменДанными");
				Если ЕстьОтборДата Тогда
					Запрос.УстановитьПараметр("ДатаНачала",    Строка(Формат(УниверсальныйОтчет.ПостроительОтчета.Отбор["Дата"].ЗначениеС, "ДФ=yyyy.MM.dd")));
					Запрос.УстановитьПараметр("ДатаОкончания", Строка(Формат(УниверсальныйОтчет.ПостроительОтчета.Отбор["Дата"].ЗначениеПо, "ДФ=yyyy.MM.dd")));
				КонецЕсли;
				СписокПользователей = Запрос.Выполнить().Выгрузить();
				СписокАгентов = СписокПользователей.ВыгрузитьКолонку("Пользователь");
			КонецЕсли;
		Иначе
			Для Каждого ТекАгент Из УниверсальныйОтчет.ПостроительОтчета.Отбор.Пользователь.Значение Цикл
				Если ЗначениеЗаполнено(ТекАгент.Значение) Тогда
					Если СписокАгентов.Найти(ТекАгент.Значение) = Неопределено Тогда
						СписокАгентов.Добавить(ТекАгент.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь
		|ИЗ
		|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта" +
		?(ЕстьОтборДата, "
		|	И СохраненныеНастройки.НаименованиеНастройки МЕЖДУ &ДатаНачала И &ДатаОкончания", "") +
		"
		|
		|СГРУППИРОВАТЬ ПО
		|	СохраненныеНастройки.Пользователь";
		Запрос.УстановитьПараметр("ИмяОбъекта", "кпкОбменДанными");
		Если ЕстьОтборДата Тогда
			Запрос.УстановитьПараметр("ДатаНачала",    Строка(Формат(УниверсальныйОтчет.ПостроительОтчета.Отбор["Дата"].ЗначениеС, "ДФ=yyyy.MM.dd")));
			Запрос.УстановитьПараметр("ДатаОкончания", Строка(Формат(УниверсальныйОтчет.ПостроительОтчета.Отбор["Дата"].ЗначениеПо, "ДФ=yyyy.MM.dd")));
		КонецЕсли;
		СписокПользователей = Запрос.Выполнить().Выгрузить();
		СписокАгентов = СписокПользователей.ВыгрузитьКолонку("Пользователь");
	КонецЕсли;
	
	СписокОбмена = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "";
	ТекИндекс = 0;
	МассивПараметров = Новый Массив;
	Для Каждого ТекАгент Из СписокАгентов Цикл
		
		ЗапросМенеджеров = Новый Запрос;
		ЗапросМенеджеров.Текст = 
		"ВЫБРАТЬ
		|	СохраненныеНастройки.СохраненнаяНастройка
		|ИЗ
		|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта" +
		?(ЕстьОтборДата, "
		|	И СохраненныеНастройки.НаименованиеНастройки МЕЖДУ &ДатаНачала И &ДатаОкончания", "") +
		"
		|	И СохраненныеНастройки.Пользователь = &Пользователь";
		ЗапросМенеджеров.УстановитьПараметр("ИмяОбъекта", "кпкОбменДанными");
		Если ЕстьОтборДата Тогда
			ЗапросМенеджеров.УстановитьПараметр("ДатаНачала",    Строка(Формат(УниверсальныйОтчет.ПостроительОтчета.Отбор["Дата"].ЗначениеС, "ДФ=yyyy.MM.dd")));
			ЗапросМенеджеров.УстановитьПараметр("ДатаОкончания", Строка(Формат(УниверсальныйОтчет.ПостроительОтчета.Отбор["Дата"].ЗначениеПо, "ДФ=yyyy.MM.dd")));
		КонецЕсли;
		ЗапросМенеджеров.УстановитьПараметр("Пользователь", ТекАгент);
		ЛогОбмена = ЗапросМенеджеров.Выполнить().Выбрать();
		Пока ЛогОбмена.Следующий() Цикл
			
			ТекТаблица = ЛогОбмена.СохраненнаяНастройка.Получить();
			Если ТипЗнч(ТекТаблица) = Тип("ТаблицаЗначений") Тогда
				МассивПараметров.Добавить(ТекТаблица);
				ТекИндекс = ТекИндекс + 1;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Индекс = 0;
	Если ТекИндекс > 0 Тогда
		Пока Индекс < ТекИндекс Цикл
			
			Если Не ТекстЗапроса = "" Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ" + Строка(Индекс) + " ИЗ &ТЗ" + Строка(Индекс) + " КАК ТЗ";
			
			ТаблицаЛогов = ЛогОбмена.СохраненнаяНастройка.Получить();
			Запрос.УстановитьПараметр("ТЗ" + Строка(Индекс), МассивПараметров[Индекс]);
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		Индекс = 0;
		Запрос.Текст = "";
		Пока Индекс < ТекИндекс Цикл
			
			Если Не Запрос.Текст = "" Тогда
				Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ
			|	ТаблицаЛогов.ТипСобытия,
			|	ТаблицаЛогов.Дата КАК Дата,
			|	ТаблицаЛогов.Событие,
			|	ТаблицаЛогов.Пользователь,
			|	ТаблицаЛогов.Агент,
			|	ТаблицаЛогов.СсылкаНаОбъект
			|{ВЫБРАТЬ
			|	ТипСобытия КАК ТипСобытия,
			|	Дата,
			|	Событие,
			|	Пользователь,
			|	Агент,
			|	СсылкаНаОбъект}
			|ИЗ
			|	ТЗ" + Строка(Индекс) + " КАК ТаблицаЛогов
			|{ГДЕ
			|	ТаблицаЛогов.ТипСобытия,
			|	ТаблицаЛогов.Дата,
			|	ТаблицаЛогов.Событие,
			|	ТаблицаЛогов.Пользователь,
			|	ТаблицаЛогов.Агент}";
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст +
		"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|{УПОРЯДОЧИТЬ ПО
		|	ТипСобытия КАК ТипСобытия,
		|	Дата,
		|	Событие,
		|	Пользователь,
		|	Агент}
		|{ИТОГИ ПО
		|	ТипСобытия КАК ТипСобытия,
		|	Дата,
		|	Событие,
		|	Пользователь,
		|	Агент}";
		СписокВыглрузок = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат СписокВыглрузок;
	
КонецФункции

// Процедура установки начальных настроек отчета по метаданным регистра накопления
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	ТаблицаЛогов = ПолучитьТаблицуЛогов();
	Если Не ТипЗнч(ТаблицаЛогов) = Тип("ТаблицаЗначений") Тогда
		МассивСсылок = Новый Массив;
        Для Каждого ТекСправочник Из Метаданные.Справочники Цикл
            МассивСсылок.Добавить(Тип("СправочникСсылка." + ТекСправочник.Имя));
        КонецЦикла;
        
        Для Каждого ТекДокумент Из Метаданные.Документы Цикл
            МассивСсылок.Добавить(Тип("ДокументСсылка." + ТекДокумент.Имя));
        КонецЦикла;
        
        КСТ = Новый КвалификаторыСтроки(50);
        КДД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
        КСС = Новый КвалификаторыСтроки(0);
        КСП = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
        КСА = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
        КМС = Новый ОписаниеТипов(МассивСсылок);
        
        ТаблицаЛогов = Новый ТаблицаЗначений;
        ТаблицаЛогов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , КДД, , ));
        ТаблицаЛогов.Колонки.Добавить("Событие", Новый ОписаниеТипов("Строка", , , , КСС, ));
        ТаблицаЛогов.Колонки.Добавить("Пользователь", Новый ОписаниеТипов(КСП, , , , , ));
        ТаблицаЛогов.Колонки.Добавить("Агент", Новый ОписаниеТипов(КСА, , , , , ));
        ТаблицаЛогов.Колонки.Добавить("СсылкаНаОбъект", Новый ОписаниеТипов(КМС, , , , , ), "Ссылка на объект");
	КонецЕсли;
	
	УниверсальныйОтчет.ПостроительОтчета.АвтоДетальныеЗаписи = Истина;
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	УниверсальныйОтчет.ИмяРегистра = "-";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	УниверсальныйОтчет.ВыводитьОбщиеИтоги = Истина;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
		
	УниверсальныйОтчет.ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЛогов);
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТипСобытия", "Тип события");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СсылкаНаОбъект", "Ссылка на объект");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, 
	//										 <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);	
	УниверсальныйОтчет.ДобавитьПорядок("Дата", НаправлениеСортировки.Убыв);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
		
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(ПутьКДанным, Использование = Неопределено, ВидСравнения = Неопределено, Значение = Неопределено, 
    //									ЗначениеС = Неопределено, ЗначениеПо = Неопределено, ИспользоватьВБыстрыхОтборах = Истина);	
	УниверсальныйОтчет.ДобавитьОтбор("Агент");
	УниверсальныйОтчет.ДобавитьОтбор("Пользователь");
 	//УниверсальныйОтчет.ДобавитьОтбор("Дата");
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("ТипСобытия",     ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("Дата",           ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("Событие",        ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("Пользователь",   ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("Агент", 	      ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("СсылкаНаОбъект", ТипРазмещенияРеквизитовИзмерений.Отдельно, 3);
		
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	//  Перед формирование отчета можно установить необходимые параметры универсального отчета.
	Если НЕ УниверсальныйОтчет.ПостроительОтчета.Отбор.Найти("Дата") = Неопределено Тогда 
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			УниверсальныйОтчет.ПостроительОтчета.Отбор["Дата"].ЗначениеС     = НачалоДня(ДатаНачала);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаКонца) Тогда
			УниверсальныйОтчет.ПостроительОтчета.Отбор["Дата"].ЗначениеПо    = КонецДня(ДатаКонца);
		КонецЕсли;
	КонецЕсли;
    	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	
КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно перередать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
		
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
//                     4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли
