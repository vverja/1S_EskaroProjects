#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА
 
Функция ПолучитьТекстЗапроса()
			
	ТекстЗапроса = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания КАК ДатаСозданияВКПК,
	|	кпкСведенияДокументаСрезПоследних.КПКДокумент.Дата КАК ДатаДокумента,
	|	кпкСведенияДокументаСрезПоследних.КПКДокумент КАК Документ,
	|	кпкСведенияДокументаСрезПоследних.КПКДокумент.Контрагент КАК Клиент,
	|	кпкСведенияДокументаСрезПоследних.Агент КАК Агент,
	|	ЕСТЬNULL(кпкСведенияДокументаСрезПоследних.КПКДокумент.кпкТорговаяТочка, кпкСведенияДокументаСрезПоследних.КПКДокумент.ТорговаяТочка) КАК ТорговаяТочка,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОбороты.СуммаУпрПриход, 0) КАК СуммаЗаявкиПродажи,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОбороты.СуммаУпрРасход, 0) КАК СуммаОплаты
	|{ВЫБРАТЬ
	|	ДатаСозданияВКПК,
	|	ДатаДокумента,
	|	Документ.*,
	|	Клиент.*,
	|	Агент.*,
	|	ТорговаяТочка.*,
	|	СуммаЗаявкиПродажи,
	|	СуммаОплаты}
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(
	|			,
	|			ДатаВремяСоздания >= &ДатаНачала
	|				И ДатаВремяСоздания <= &ДатаКонца) КАК кпкСведенияДокументаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.Обороты(&ДатаНачРег, &ДатаКонцаРег, Регистратор, ) КАК РасчетыСКонтрагентамиОбороты
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = РасчетыСКонтрагентамиОбороты.Регистратор
	|{ГДЕ
	|	РасчетыСКонтрагентамиОбороты.Период КАК ДатаДокумента,
	|	РасчетыСКонтрагентамиОбороты.Контрагент.* КАК Клиент,
	|	кпкСведенияДокументаСрезПоследних.Агент.* КАК Агент,
	|	РасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход КАК СуммаЗаявкиПродажи,
	|	РасчетыСКонтрагентамиОбороты.Регистратор.кпкТорговаяТочка.* КАК ТорговаяТочка,
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания}
	|{УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	ТорговаяТочка.*,
	|	ДатаСозданияВКПК,
	|	СуммаЗаявкиПродажи,
	|	СуммаОплаты}
	|ИТОГИ
	|	СУММА(СуммаЗаявкиПродажи),
	|	СУММА(СуммаОплаты)
	|ПО
	|	ОБЩИЕ
	|{ИТОГИ ПО
	|	Агент.*,
	|	Клиент.*,
	|	(НАЧАЛОПЕРИОДА(кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания, ДЕНЬ)) КАК ПериодДень,
	|	(НАЧАЛОПЕРИОДА(кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания, НЕДЕЛЯ)) КАК ПериодНеделя,
	|	(НАЧАЛОПЕРИОДА(кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания, МЕСЯЦ)) КАК ПериодМесяц,
	|	(НАЧАЛОПЕРИОДА(кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания, КВАРТАЛ)) КАК ПериодКвартал,
	|	(НАЧАЛОПЕРИОДА(кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
	|	(НАЧАЛОПЕРИОДА(кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания, ГОД)) КАК ПериодГод,
	|	ТорговаяТочка.*,
	|	ДатаСозданияВКПК,
	|	СуммаЗаявкиПродажи,
	|	СуммаОплаты}"; 
		
	Возврат ТекстЗапроса;
	
КонецФункции
    	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета по метаданным регистра накопления
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	УниверсальныйОтчет.ИмяРегистра = "-";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	УниверсальныйОтчет.ВыводитьОбщиеИтоги = Истина;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	 УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Инициализация текста запроса построителя отчета
	ТекстЗапроса = ПолучитьТекстЗапроса();
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("Контрагент" , "Контрагент", "Контрагент", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
		
		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
	
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса; 
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаСозданияВКПК", "Дата документа в КПК");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаДокумента",    "Дата документа в ЦБД");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТорговаяТочка",    "Торговая точка");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	
	ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование;
	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗаявкиПродажи", "Сумма продажи (" + ВалютаУпр + ")", Истина, "ЧЦ=15; ЧДЦ=2", , );
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаОплаты", "Сумма поступления (" + ВалютаУпр + ")", Истина, "ЧЦ=15; ЧДЦ=2", , );
	 		
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Агент");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");  
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);		
	УниверсальныйОтчет.ДобавитьПорядок("ДатаВремяСоздания");
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(ПутьКДанным, Использование = Неопределено, ВидСравнения = Неопределено, Значение = Неопределено, ЗначениеС = Неопределено, ЗначениеПо = Неопределено, ИспользоватьВБыстрыхОтборах = Истина);
	
	УниверсальныйОтчет.ДобавитьОтбор("Агент");	
	УниверсальныйОтчет.ДобавитьОтбор("Клиент");
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
		
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	
	День = 60*60*24;
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаНачРег",   УниверсальныйОтчет.ДатаНач - 7*День );
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаКонцаРег", УниверсальныйОтчет.ДатаКон + 7*День);
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли