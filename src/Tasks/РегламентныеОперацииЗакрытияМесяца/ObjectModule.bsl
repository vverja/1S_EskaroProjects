Перем мГлавныйБизнесПроцесс Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

//Процедура обработчик события ПередВыполнением задачи
Процедура ПередВыполнением(Отказ)
	Заголовок = "Выполнение регламентной операции """+Ссылка.Наименование+"""";
	Если НЕ ЗначениеЗаполнено(мГлавныйБизнесПроцесс) Тогда
		мГлавныйБизнесПроцесс = БизнесПроцессЗакрытиеМесяца.ОпределитьГлавныйБизнесПроцесс(Ссылка.БизнесПроцесс);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СпособВыполнения)	Тогда
		СпособВыполнения = Перечисления.СпособыВыполненияРегламентныхОпераций.Вручную;
	КонецЕсли;
	
	//если способ выполнения не вручную (т.е. автоматически либо принудительно) - проверки проведения документов не выполняются
	Если НЕ СпособВыполнения = Перечисления.СпособыВыполненияРегламентныхОпераций.Вручную Тогда
		Возврат;
	КонецЕсли;
	
	//для некоторых операций необходимо проверять границу последовательности, а не проведение документов
	Если ТочкаМаршрута = БизнесПроцессы.ЗакрытиеМесяца.ТочкиМаршрута.ПровестиПоПартиям Тогда
		ПроверитьГраницыПоследовательностей(истина,ложь,ложь,Отказ, Заголовок);
		Возврат;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.ЗакрытиеМесяца.ТочкиМаршрута.ВосстановитьПоследовательностьРасчетовПоПриобретению Тогда
		ПроверитьГраницыПоследовательностей(ложь,истина,ложь,Отказ, Заголовок);
		Возврат;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.ЗакрытиеМесяца.ТочкиМаршрута.ВосстановитьПоследовательностьРасчетовПоРеализации Тогда
		ПроверитьГраницыПоследовательностей(ложь,ложь,истина,Отказ, Заголовок);
		Возврат;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.ЗакрытиеМесяца.ТочкиМаршрута.ВыполнитьДопроведение Тогда
		ПроверитьДопроведениеДокументов(Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	//получим список типов документов которые должны содаваться при выполнении регл операции
	СписокТиповДокументов = БизнесПроцессЗакрытиеМесяца.ПолучитьСписокТиповДокументов(ТочкаМаршрута);
		
	Если СписокТиповДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросДокументовРО = Новый Запрос;
	
	ОтказУУ	= Ложь;
	ОтказБУ	= Ложь;
	СтруктураПризнаковОтраженияВУчете = новый Структура("ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете",мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете, мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете);
	Для каждого ТипДокумента Из СписокТиповДокументов Цикл
		Если ТипДокумента = "" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута = БизнесПроцессЗакрытиеМесяца.СкорректироватьОтражениеВУчете(СтруктураПризнаковОтраженияВУчете, ТочкаМаршрута, мГлавныйБизнесПроцесс.ПериодРегистрации);
		ЕстьРеквизитОтражатьВУУ = Метаданные.Документы[ТипДокумента].Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено;
		ЕстьРеквизитОтражатьВБУ = Метаданные.Документы[ТипДокумента].Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено;
		ЕстьРеквизитПериодРегистрации = Метаданные.Документы[ТипДокумента].Реквизиты.Найти("ПериодРегистрации") <> Неопределено;
        ЕстьРеквизитОрганизация = Метаданные.Документы[ТипДокумента].Реквизиты.Найти("Организация") <> Неопределено;

		ПериодичностьДокумента = "Месяц";
		
		ОтказУУ = Истина;
		ОтказБУ	= Истина;
		СтруктураНаличияРеквизитовОтраженияВУчете = новый Структура("УУ,БУ",ЕстьРеквизитОтражатьВУУ,ЕстьРеквизитОтражатьВБУ);

		//запрос - созданные и проведенные в рамках регламентной операции документы
		ТекстЗапроса = "ВЫБРАТЬ
		|	Ссылка,
		|	Проведен "+
		?(ЕстьРеквизитОрганизация," , Организация","")+
		?(ЕстьРеквизитОтражатьВУУ," , ОтражатьВУправленческомУчете","")+
		?(ЕстьРеквизитОтражатьВБУ," , ОтражатьВБухгалтерскомУчете","")+"
		|ИЗ
		|	Документ." + ТипДокумента + " КАК " + ТипДокумента + "
		|ГДЕ "+БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеПериодРегистрации(ЕстьРеквизитПериодРегистрации,ТипДокумента,"&ПериодРегистрации",ПериодичностьДокумента)+"
		|"+ БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеОрганизация(ЕстьРеквизитОрганизация,ТипДокумента,"&Организация",истина)+"
		|"+БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеОтражениеВУчете(СтруктураНаличияРеквизитовОтраженияВУчете, СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута,ТипДокумента,ТочкаМаршрута,мГлавныйБизнесПроцесс.ПериодРегистрации)+"
		|	И Проведен = ИСТИНА";
		
		ЗапросДокументовРО.Текст = ТекстЗапроса;
		
		ЗапросДокументовРО.УстановитьПараметр("ПериодРегистрации", мГлавныйБизнесПроцесс.ПериодРегистрации);
		ЗапросДокументовРО.УстановитьПараметр("Организация", мГлавныйБизнесПроцесс.Организация);
		
		ТаблицаДокументов = ЗапросДокументовРО.Выполнить().Выгрузить();
		
		Если ТаблицаДокументов.Количество() = 0 Тогда
			//не создано ни одного документа данного вида
			Прервать;
		КонецЕсли;
		
		Для каждого СтрокаДокументов Из ТаблицаДокументов Цикл
			//проверяем есть ли документы, отражающие закрытие месяца по УУ
			Если ОтказУУ Тогда
				Если СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута.ОтражатьВУправленческомУчете И  ЕстьРеквизитОтражатьВУУ Тогда
					Если СтрокаДокументов.ОтражатьВУправленческомУчете Тогда
						ОтказУУ	= Ложь;
					КонецЕсли;
				Иначе
					ОтказУУ	= Ложь;
				КонецЕсли;
			КонецЕсли;  //Если ОтказУУ Тогда
			//проверяем есть ли документы, отражающие закрытие месяца по БУ по указанной организации
			Если ОтказБУ Тогда
				Если СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута.ОтражатьВБухгалтерскомУчете И ЕстьРеквизитОтражатьВБУ Тогда	
					Если СтрокаДокументов.ОтражатьВБухгалтерскомУчете Тогда
						Если ЕстьРеквизитОрганизация Тогда
							Если СтрокаДокументов.Организация = мГлавныйБизнесПроцесс.Организация Тогда
								ОтказБУ	= Ложь;
							КонецЕсли;
						Иначе
							ОтказБУ	= Ложь;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОтказБУ = ложь;
				КонецЕсли;
			КонецЕсли; //Если ОтказБУ Тогда
			
			Если НЕ (ОтказУУ ИЛИ ОтказБУ) Тогда  //выяснили что все документы созданы - не требуется обходить список до конца	
				Прервать;
			КонецЕсли;
		КонецЦикла; //Для каждого СтрокаДокументов Из ТаблицаДокументов Цикл
		
		Если ОтказУУ ИЛИ ОтказБУ Тогда //После обхода всех документов данного типа выяснилось что по какому-либо виду учета введены не все документы	
			Прервать;
		КонецЕсли;
	КонецЦикла; //Для каждого ТипДокумента Из СписокТиповДокументов Цикл
	
	
	Если ОтказУУ ИЛИ ОтказБУ Тогда	
		ОбщегоНазначения.СообщитьОбОшибке("Не были созданы либо не были проведены все надлежащие документы. Регламентная операция может быть выполнена только в режиме ""без проверок""",Отказ, Заголовок);			
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

//Процедура выполняет создание документов для регламентной операции
//Вызывается из формы задачи РегламентныеОперации
//В перспективе предполагается использовать для автоматического выполнения некоторых регламентных операций
//Параметры: ИмеющиесяДокументы - таблица уже обнаруженных документов (на основе данных табличного поля в форме Задачи)
//	СписокНеСозданныхДокументов - список документов, которые не созданы в рамках работы процедуры, (либо созданы ранее, либо не удалось создать)
//	СписокТиповДокументов - список типов документов, которые необходимо создать
//	флПроводить - признак необходимости проводить создаваемые документы
//	флОК - признак успешности создания документов
Процедура СоздатьДокументы(ИмеющиесяДокументы, СписокНеСозданныхДокументов, СписокТиповДокументов, флПроводить=ложь, флОК=Истина) Экспорт
	
	ДатаРегистрации = НачалоМесяца(мГлавныйБизнесПроцесс.ПериодРегистрации);

	Для каждого ТипДокумент Из СписокТиповДокументов Цикл
		Если ТипДокумент = "" Тогда Продолжить; КонецЕсли;
		ПредставлениеДокумента = Метаданные.Документы[ТипДокумент].Синоним;
		Если ПустаяСтрока(ПредставлениеДокумента) Тогда
			ПредставлениеДокумента = ТипДокумент;
		КонецЕсли;
		
		Если ТипДокумент = "РасчетСебестоимостиВыпуска" Тогда
			//Расчет себестоимости создается на двух этапах бизнес-процесса, на каждом - со своими признаками отражения в учете
			Если ТочкаМаршрута = БизнесПроцессы.ЗакрытиеМесяца.ТочкиМаршрута.РассчитатьСебестоимость Тогда
				//один документ: УУ
				Если мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете Тогда
					Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, Истина) Тогда
						флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,, Истина, Ложь, флПроводить) И флОК;
					Иначе
						СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (УУ)");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТочкаМаршрута = БизнесПроцессы.ЗакрытиеМесяца.ТочкиМаршрута.РассчитатьСебестоимостьРегл Тогда
				//Зависит от применения расширенной аналитики учета затрат
				Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") И
					глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат")<=ДатаРегистрации Тогда
					//Один документ: БУ+НУ
					Если мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете Тогда
						Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, , Истина) Тогда
							флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, Ложь, Истина, флПроводить) И флОК;
						Иначе
							СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (Регл)");
						КонецЕсли;
					КонецЕсли;
				Иначе
					//Один документ: БУ + НУ
					Если мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете Тогда
						Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, , Истина) Тогда		
							флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, Ложь, Истина, флПроводить) И флОК;
						Иначе
							СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (Регл)");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТипДокумент = "КорректировкаСтоимостиСписанияТоваров" Тогда
			
			//создаются отдельные документы для каждого вида учета
			Если мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете Тогда
				Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, Истина) Тогда
					флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, Истина, Ложь, флПроводить) И флОК;
				Иначе
					СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (УУ)");
				КонецЕсли;
			КонецЕсли;
			
			Если мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете Тогда
				Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, , Истина) Тогда
					флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, Ложь, Истина, флПроводить) И флОК;
				Иначе
					СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (БУ)");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипДокумент = "ПереоценкаВалютныхСредств" Тогда
			//один документ по УУ и один по БУ + НУ
			Если мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете Тогда
				Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, Истина) Тогда
				
					флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,, Истина, Ложь, флПроводить) И флОК;
				Иначе
					СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (УУ)");
				КонецЕсли;
			КонецЕсли;
			Если мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете Тогда
				Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, , Истина) Тогда		
					флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, Ложь, Истина, флПроводить) И флОК;
				Иначе
					СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (Регл)");
				КонецЕсли;
			КонецЕсли;	
		Иначе
			Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент) Тогда
				//один документ по всем видам учета
				флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете, мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете, флПроводить) И флОК;
			Иначе
				СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

//Функция проверяет наличие регламентного документа среди таблицы сформированных документов по переданному типу и признакам отражения в учетах
//Параметры: СформированныеДокументы - таблица уже созданных документов
//    ТипДокумента - строка, тип документа
//    ОтражатьУУ,ОтражатьБУ - признаки отражения в учетах 
Функция ЕстьРегламентныйДокумент(СформированныеДокументы, ТипДокумента, ОтражатьУУ = Неопределено, ОтражатьБУ = Неопределено) Экспорт
	Если СформированныеДокументы=неопределено Тогда
		Возврат ложь;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ТипДокумента,ПометкаУдаления",ТипДокумента,Ложь);
		Если ОтражатьУУ <> Неопределено Тогда
			СтруктураОтбора.Вставить("ОтражатьВУправленческомУчете",ОтражатьУУ);
		КонецЕсли; 
		
		Если ОтражатьБУ <> Неопределено Тогда
			СтруктураОтбора.Вставить("ОтражатьВБухгалтерскомУчете",ОтражатьБУ);
		КонецЕсли; 
		
	
	МассивДокументов = СформированныеДокументы.НайтиСтроки(СтруктураОтбора);
	
	Возврат МассивДокументов.Количество() <> 0;
	
КонецФункции // ЕстьРегламентныйДокумент()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ 

//Функция создает регламентный документ по переданным параметрам
//Параметры: ТипДокумент - тип документа
// 	Дата - Дата документа
//  ДатаРегистрации - значение реквизита ПериодРегистрации
//	Организация - значение реквизита Организация
//  ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете - признаки отражения в учетах
//	Проводить - признак необходимости проведения создаваемых документов
//Возвращаемое значение - булево, признак успешности операции
Функция СоздатьРегламентныйДокумент(ТипДокумент, Дата, ДатаРегистрации, Организация = Неопределено, ОтражатьВУправленческомУчете = Истина, ОтражатьВБухгалтерскомУчете = Истина, Проводить = Истина)	
	
	СтруктураПараметровДокумента = Новый Структура();
	
	СтруктураПараметровДокумента.Вставить("Дата",Дата);
	СтруктураПараметровДокумента.Вставить("ПериодРегистрации", НачалоМесяца(ДатаРегистрации));
	СтруктураПараметровДокумента.Вставить("Организация", Организация);
	СтруктураПараметровДокумента.Вставить("Ответственный", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураПараметровДокумента.Вставить("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете);
	СтруктураПараметровДокумента.Вставить("ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете);
	НовыйДокумент = Документы[ТипДокумент].СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокумент,СтруктураПараметровДокумента);
	НовыйДокумент.УстановитьВремя();
	
	ЗаписатьДокумент = Истина;
	ОткрытьФормуДокумента = Ложь;
	Если ТипДокумент = "РасчетСебестоимостиВыпуска" ИЛИ
		ТипДокумент = "ОпределениеФинансовыхРезультатов" ИЛИ
		ТипДокумент = "ПереоценкаВалютныхСредств" ИЛИ
		ТипДокумент = "РегламентныеОперацииНалоговогоУчетаПоНалогуНаПрибыль" Тогда
		//Заполнение перечня операций
		Попытка
			НовыйДокумент.ЗаполнитьВыполняемыеДействия();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось заполнить и создать документ: "+ОписаниеОшибки());
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;	
	
	Если ЗаписатьДокумент Тогда
		Попытка
			НовыйДокумент.Записать(?(Проводить,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
			Возврат Истина;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось создать документ: "+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;	
	ИначеЕсли ОткрытьФормуДокумента Тогда
		Попытка
			ФормаДокумента = НовыйДокумент.ПолучитьФорму();
			ФормаДокумента.Открыть();
			//Заполним реквизиты шапки - могли измениться при открытии формы
			ЗаполнитьЗначенияСвойств(НовыйДокумент,СтруктураПараметровДокумента);
			Возврат Истина;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось открыть форму документа: "+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции	


//Процедура проверяет границы последовательностей по партиям и по взаиморасчетам
//Параметры:  флПартии 				- признак необходимости проверять последовательность по партиям
//			флРасчетыПоПриобретению - признак необходимости проверять последовательность расчетов по приобретению
//			флРасчетыПоРеализации 	- признак необходимости проверять последовательность расчетов по реализации
//			Отказ 					- признак того, что последовательность не восстановлена
Процедура ПроверитьГраницыПоследовательностей(флПартии, флРасчетыПоПриобретению, флРасчетыПоРеализации, Отказ, Заголовок)
	//вычисление даты, раньше которой граница не должна находиться
	ДатаГраницы = Мин(ТекущаяДата(),КонецМесяца(мГлавныйБизнесПроцесс.ПериодРегистрации));
	
	ТекстСообщения = "";
	Если флПартии Тогда
		Если мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете Тогда
			//получим параметры учетной политики
			СпособВеденияПартионногоУчетаПоОрганизации = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(
					мГлавныйБизнесПроцесс.Организация,
					НачалоМесяца(мГлавныйБизнесПроцесс.ПериодРегистрации)
				);
			ОрганизацияУУ = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(мГлавныйБизнесПроцесс.Организация,СпособВеденияПартионногоУчетаПоОрганизации);

			//Проверка границы партионного учета по УУ
			СтруктураОтбор = новый Структура("Организация",ОрганизацияУУ);
			ПредставлениеГраницы = "Партионный учет (УУ)"+?(ЗначениеЗаполнено(ОрганизацияУУ),", организация "+ОрганизацияУУ,"");
			ПроверитьГраницуПоследовательности("ПартионныйУчет",СтруктураОтбор,ДатаГраницы,ПредставлениеГраницы,ТекстСообщения);
		КонецЕсли;
		Если мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОтбор = новый Структура("Организация",мГлавныйБизнесПроцесс.Организация);
			ПредставлениеГраницы = "Партионный учет (БУ), организация "+мГлавныйБизнесПроцесс.Организация;
			ПроверитьГраницуПоследовательности("ПартионныйУчетБУ",СтруктураОтбор,ДатаГраницы,ПредставлениеГраницы,ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	Если флРасчетыПоПриобретению И (мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете) Тогда	
		СтруктураОтбор = новый Структура("Организация",мГлавныйБизнесПроцесс.Организация);
		ПредставлениеГраницы = "Расчеты по приобретению организации, организация "+мГлавныйБизнесПроцесс.Организация;
		ПроверитьГраницуПоследовательности("РасчетыПоПриобретениюОрганизации",СтруктураОтбор,ДатаГраницы,ПредставлениеГраницы,ТекстСообщения,ложь);
	КонецЕсли;
	Если флРасчетыПоРеализации И (мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете) Тогда	
		СтруктураОтбор = новый Структура("Организация",мГлавныйБизнесПроцесс.Организация);
		ПредставлениеГраницы = "Расчеты по реализации организации, организация "+мГлавныйБизнесПроцесс.Организация;
		ПроверитьГраницуПоследовательности("РасчетыПоРеализацииОрганизации",СтруктураОтбор,ДатаГраницы,ПредставлениеГраницы,ТекстСообщения, ложь);
	КонецЕсли;

	Если ТекстСообщения<>"" Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС+ "Регламентная операция может быть выполнена только в режиме ""без проверок"" (Действия - Выполнить без проверок)";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);
	КонецЕсли;
	
КонецПроцедуры

//Процедура проверяет конкретную указанную в параметрах границу последовательности 
//Параметры:  ИмяГраницы - имя границы последовательности
//			Отбор 					- структура отбора, по которой необходимо получить границу
//			ДатаСравнения 			- дата, раньше которой граница не должна находиться
//			ПредставлениеГраницы 	- строка, представление границы для вывода сообщений
//			ТекстСообщения 			- текст сообщения, который необходимо вывести пользователю
//			флПартии 				- булево, признак того что проверяется граница партионного учета
Процедура ПроверитьГраницуПоследовательности(ИмяГраницы,Отбор,ДатаСравнения,ПредставлениеГраницы,ТекстСообщения, флПартии=истина)
	Если флПартии Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПартионныйУчетГраницы.Период КАК Период
		|ИЗ
		|	Последовательность." + ИмяГраницы + ".Границы КАК ПартионныйУчетГраницы
		|ГДЕ
		|	ПартионныйУчетГраницы.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПартионныйУчет.Период
		|ИЗ
		|	Последовательность." + ИмяГраницы + " КАК ПартионныйУчет
		|ГДЕ
		|	(НЕ ПартионныйУчет.ПроведенВХронологическойПоследовательности)
		|	И	ПартионныйУчет.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		Запрос.УстановитьПараметр("Организация", Отбор.Организация);
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаГраницы =  Выборка.Период;
		Иначе
			ДатаГраницы = Дата("00010101000000");
		КонецЕсли;
	Иначе
		ГраницаПоследовательности = Последовательности[ИмяГраницы].ПолучитьГраницу(Отбор);
        ДатаГраницы = ГраницаПоследовательности.Дата
	КонецЕсли;	
	
	Если ДатаГраницы<ДатаСравнения Тогда
		
		// Если дата не пустая, и меньше конца закрываемого периода - необходимо проверить есть ли 
		//	зарегистрированные в последовательности документы позже этой даты и раньше конца закрываемого периода
		Если ДатаГраницы <> Дата("00010101000000") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Период
			|ИЗ
			|	Последовательность." + ИмяГраницы + "
			|ГДЕ
			|	Организация = &Организация
			|	И Период > &Граница 
			|	И Период <= &ДатаСравнения
			|	" + ?(флПартии, " И НЕ ПроведенВХронологическойПоследовательности", "")+"
			|УПОРЯДОЧИТЬ ПО
			|	Период";
			Запрос.УстановитьПараметр("Организация", Отбор.Организация);
			Запрос.УстановитьПараметр("Граница", ДатаГраницы);
			Запрос.УстановитьПараметр("ДатаСравнения", ДатаСравнения);
			РезультатЗапроса = Запрос.Выполнить();
			//Нет ни одного документа в последовательности между границей и концом закрываемого периода
			//	Значит, граница восстановлена
			Если РезультатЗапроса.Пустой() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ?(ТекстСообщения<>"",Символы.ПС,"")+
			"Граница последовательности "+ПредставлениеГраницы + " установлена на дату " + ДатаГраницы + Символы.ПС + Символы.Таб + 
			"Последовательность не восстановлена";
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура проверяет выполнено ли допроведение документов за период
Процедура ПроверитьДопроведениеДокументов(Отказ, Заголовок)
	ДатаПервогоНедопроведенногоДокумента = ОтложенноеПроведениеДокументов.ПолучитьДатуПервогоНедопроведенногоДокумента(мГлавныйБизнесПроцесс.Организация, , КонецМесяца(мГлавныйБизнесПроцесс.ПериодРегистрации));
	Если ЗначениеЗаполнено(ДатаПервогоНедопроведенногоДокумента) Тогда
		ТекстСообщения = "Не выполнено допроведение документов. Регламентная операция может быть выполнена только в режиме ""без проверок""";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры



